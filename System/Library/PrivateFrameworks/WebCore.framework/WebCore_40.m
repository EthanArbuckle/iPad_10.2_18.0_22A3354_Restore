_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix3fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  unint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t (*v35)();
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  BOOL v56;
  BOOL v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  JSC::VM *v63;
  _QWORD v64[2];
  int v65;
  _QWORD v66[2];
  int v67;
  _QWORD v68[2];
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  char v74[8];
  _BYTE v75[16];
  int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix3fv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix3fv");
  v17 = *((int *)a2 + 8) - 1;
  if (v17 >= 5)
    v17 = 5;
  if (v17 == 5 || v17 == 4)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix3fv1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v17 != 3)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  v18 = *(_QWORD *)(v10 + 24);
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v20 = 0;
    goto LABEL_35;
  }
  v68[0] = v9;
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v26 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v27 = (char **)(16 * v25);
    if ((_DWORD)v25)
      v28 = v27 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v28 = 1;
    if (!v28)
    {
      do
      {
        v27 = (char **)v27[2];
        v26 = v27 != 0;
      }
      while (v27 != &WebCore::JSWebGLUniformLocation::s_info && v27 != 0);
    }
    if (v26)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
LABEL_35:
        v30 = *((_QWORD *)a2 + 7);
        if (v30 >= 0xFFFE000000000000)
        {
          v56 = (_DWORD)v30 == 0;
        }
        else
        {
          *(_QWORD *)&v31 = v30 - 0x2000000000000;
          if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v57 = v31 <= 0.0;
            v58 = v31 < 0.0;
            v32 = !v57 || v58;
LABEL_39:
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              return 0;
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 8), (uint64_t)v74);
            v33 = v77;
            if (v77)
            {
              v24 = 0;
            }
            else
            {
              if (*(_BYTE *)(v18 + 33))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v64[0] = v68[0];
                v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v36
                  && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
                  && (v39 = *(_QWORD *)(v38 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v18 + 8), v20, (uint64_t)v68);
                }
                else
                {
                  LOBYTE(v68[0]) = 0;
                  v69 = 0;
                }
                v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v40
                  && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
                  && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v18 + 8), (WTF::JSONImpl::Value *)v32, (uint64_t)&v70);
                }
                else
                {
                  LOBYTE(v70) = 0;
                  v71 = 0;
                }
                if (v77)
                  goto LABEL_97;
                v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v44
                  && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
                  && (v47 = *(_QWORD *)(v46 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v47, v18 + 8, (uint64_t)v75);
                }
                else
                {
                  LOBYTE(v72) = 0;
                  v73 = 0;
                }
                v66[0] = v68;
                v66[1] = 3;
                v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v48)
                {
                  v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
                  if (v50)
                  {
                    v51 = *(_QWORD *)(v50 + 96);
                    if (v51)
                      WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v18 + 8), (const WTF::StringImpl *)v64, v66);
                  }
                }
                if (v73)
                {
                  v52 = v72;
                  v72 = 0;
                  if (v52)
                  {
                    if (*v52 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v52;
                  }
                }
                if (v71)
                {
                  v53 = v70;
                  v70 = 0;
                  if (v53)
                  {
                    if (*v53 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v53;
                  }
                }
                if (v69)
                {
                  v54 = (_DWORD *)v68[0];
                  v68[0] = 0;
                  if (v54)
                  {
                    if (*v54 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v54;
                  }
                }
                v55 = (WTF::StringImpl *)v64[0];
                v64[0] = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    goto LABEL_98;
                  *(_DWORD *)v55 -= 2;
                }
                while (v77)
                {
LABEL_97:
                  v55 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_98:
                  WTF::StringImpl::destroy(v55, v49);
                }
              }
              LOBYTE(v64[0]) = 0;
              v65 = -1;
              v34 = v76;
              if (v76 == -1)
              {
                LOBYTE(v66[0]) = 0;
                v67 = -1;
              }
              else
              {
                v35 = off_1E332F548[v76];
                ((void (*)(_QWORD *, _QWORD *, _BYTE *))v35)(v68, v64, v75);
                v65 = v34;
                LOBYTE(v66[0]) = 0;
                v67 = -1;
                ((void (*)(_QWORD *, _QWORD *, _QWORD *))v35)(v68, v66, v64);
                v67 = v34;
              }
              if (!*(_BYTE *)(v18 + 364))
              {
                WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v18, (uint64_t)"uniformMatrix3fv", 17, v20, v32, (uint64_t)v66, 9, 0, (uint64_t)v68, 0);
                if (v69)
                  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v18 + 88) + 968))(*(_QWORD *)(v18 + 88), *(unsigned int *)(v20 + 16), v32, v68[0], v68[1]);
                v34 = v67;
              }
              if (v34 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v34])(v68, v66);
              v67 = -1;
              if (v65 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v65])(v68, v64);
              v33 = v77;
              v24 = 10;
            }
            if (v33 != -1)
              ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v33])(v68, v75);
            return (_BYTE *)v24;
          }
          if ((v30 & 0xFFFE000000000002) != 0)
          {
            v32 = v30 == 7;
            goto LABEL_39;
          }
          v59 = *(unsigned __int8 *)(v30 + 5);
          if (v59 == 3)
          {
            v62 = *(_DWORD *)(v30 + 8);
          }
          else
          {
            if (v59 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v32 = 1;
                goto LABEL_39;
              }
              v56 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_117;
            }
            v60 = *(_QWORD *)(v30 + 8);
            if ((v60 & 1) != 0)
              v61 = (int *)(v30 + 16);
            else
              v61 = (int *)(v60 + 4);
            v62 = *v61;
          }
          v56 = v62 == 0;
        }
LABEL_117:
        v32 = !v56;
        goto LABEL_39;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v68, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix3fv", 17, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix4fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  unint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t (*v35)();
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  BOOL v56;
  BOOL v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  JSC::VM *v63;
  _QWORD v64[2];
  int v65;
  _QWORD v66[2];
  int v67;
  _QWORD v68[2];
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  char v74[8];
  _BYTE v75[16];
  int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix4fv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix4fv");
  v17 = *((int *)a2 + 8) - 1;
  if (v17 >= 5)
    v17 = 5;
  if (v17 == 5 || v17 == 4)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix4fv1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v17 != 3)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  v18 = *(_QWORD *)(v10 + 24);
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v20 = 0;
    goto LABEL_35;
  }
  v68[0] = v9;
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v26 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v27 = (char **)(16 * v25);
    if ((_DWORD)v25)
      v28 = v27 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v28 = 1;
    if (!v28)
    {
      do
      {
        v27 = (char **)v27[2];
        v26 = v27 != 0;
      }
      while (v27 != &WebCore::JSWebGLUniformLocation::s_info && v27 != 0);
    }
    if (v26)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
LABEL_35:
        v30 = *((_QWORD *)a2 + 7);
        if (v30 >= 0xFFFE000000000000)
        {
          v56 = (_DWORD)v30 == 0;
        }
        else
        {
          *(_QWORD *)&v31 = v30 - 0x2000000000000;
          if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v57 = v31 <= 0.0;
            v58 = v31 < 0.0;
            v32 = !v57 || v58;
LABEL_39:
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              return 0;
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 8), (uint64_t)v74);
            v33 = v77;
            if (v77)
            {
              v24 = 0;
            }
            else
            {
              if (*(_BYTE *)(v18 + 33))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v64[0] = v68[0];
                v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v36
                  && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
                  && (v39 = *(_QWORD *)(v38 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v18 + 8), v20, (uint64_t)v68);
                }
                else
                {
                  LOBYTE(v68[0]) = 0;
                  v69 = 0;
                }
                v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v40
                  && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
                  && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v18 + 8), (WTF::JSONImpl::Value *)v32, (uint64_t)&v70);
                }
                else
                {
                  LOBYTE(v70) = 0;
                  v71 = 0;
                }
                if (v77)
                  goto LABEL_97;
                v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v44
                  && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
                  && (v47 = *(_QWORD *)(v46 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v47, v18 + 8, (uint64_t)v75);
                }
                else
                {
                  LOBYTE(v72) = 0;
                  v73 = 0;
                }
                v66[0] = v68;
                v66[1] = 3;
                v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v48)
                {
                  v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
                  if (v50)
                  {
                    v51 = *(_QWORD *)(v50 + 96);
                    if (v51)
                      WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v18 + 8), (const WTF::StringImpl *)v64, v66);
                  }
                }
                if (v73)
                {
                  v52 = v72;
                  v72 = 0;
                  if (v52)
                  {
                    if (*v52 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v52;
                  }
                }
                if (v71)
                {
                  v53 = v70;
                  v70 = 0;
                  if (v53)
                  {
                    if (*v53 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v53;
                  }
                }
                if (v69)
                {
                  v54 = (_DWORD *)v68[0];
                  v68[0] = 0;
                  if (v54)
                  {
                    if (*v54 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v54;
                  }
                }
                v55 = (WTF::StringImpl *)v64[0];
                v64[0] = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    goto LABEL_98;
                  *(_DWORD *)v55 -= 2;
                }
                while (v77)
                {
LABEL_97:
                  v55 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_98:
                  WTF::StringImpl::destroy(v55, v49);
                }
              }
              LOBYTE(v64[0]) = 0;
              v65 = -1;
              v34 = v76;
              if (v76 == -1)
              {
                LOBYTE(v66[0]) = 0;
                v67 = -1;
              }
              else
              {
                v35 = off_1E332F548[v76];
                ((void (*)(_QWORD *, _QWORD *, _BYTE *))v35)(v68, v64, v75);
                v65 = v34;
                LOBYTE(v66[0]) = 0;
                v67 = -1;
                ((void (*)(_QWORD *, _QWORD *, _QWORD *))v35)(v68, v66, v64);
                v67 = v34;
              }
              if (!*(_BYTE *)(v18 + 364))
              {
                WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v18, (uint64_t)"uniformMatrix4fv", 17, v20, v32, (uint64_t)v66, 16, 0, (uint64_t)v68, 0);
                if (v69)
                  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v18 + 88) + 976))(*(_QWORD *)(v18 + 88), *(unsigned int *)(v20 + 16), v32, v68[0], v68[1]);
                v34 = v67;
              }
              if (v34 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v34])(v68, v66);
              v67 = -1;
              if (v65 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v65])(v68, v64);
              v33 = v77;
              v24 = 10;
            }
            if (v33 != -1)
              ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v33])(v68, v75);
            return (_BYTE *)v24;
          }
          if ((v30 & 0xFFFE000000000002) != 0)
          {
            v32 = v30 == 7;
            goto LABEL_39;
          }
          v59 = *(unsigned __int8 *)(v30 + 5);
          if (v59 == 3)
          {
            v62 = *(_DWORD *)(v30 + 8);
          }
          else
          {
            if (v59 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v32 = 1;
                goto LABEL_39;
              }
              v56 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_117;
            }
            v60 = *(_QWORD *)(v30 + 8);
            if ((v60 & 1) != 0)
              v61 = (int *)(v30 + 16);
            else
              v61 = (int *)(v60 + 4);
            v62 = *v61;
          }
          v56 = v62 == 0;
        }
LABEL_117:
        v32 = !v56;
        goto LABEL_39;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v68, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix4fv", 17, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_readPixels(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  int v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  JSC::JSArrayBufferView *v29;
  int v30;
  JSValue v31;
  uint64_t v33;
  JSC::ArrayBufferView *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  unsigned int v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  WebCore::InspectorCanvasAgent *v71;
  unsigned int v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  WebCore *v103;
  JSC::JSGlobalObject *v104;
  JSC::CallFrame *v105;
  int v106;
  unsigned int v107;
  JSC::VM *v108;
  _QWORD v109[2];
  WTF::StringImpl *v110;
  unsigned int v111[2];
  JSC::ArrayBufferView *v112;
  int v113;
  unsigned int v114[2];
  unsigned int v115[2];
  WTF::StringImpl *v116;
  int v117;
  char v118;
  _DWORD *v119;
  char v120;
  _DWORD *v121;
  char v122;
  _DWORD *v123;
  char v124;
  _DWORD *v125;
  char v126;
  _DWORD *v127;
  char v128;
  _DWORD *v129;
  char v130;
  _DWORD *v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v108 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v108, "WebGL2RenderingContext", "readPixels");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v108, "WebGL2RenderingContext", "readPixels");
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 8)
    v13 = 8;
  if (v13 == 8)
  {
    v16 = *(_QWORD *)(v6 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v116 = (WTF::StringImpl *)v17;
    if (v17 < 0xFFFE000000000000)
    {
      v35 = v17 - 0x2000000000000;
      if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v116, this);
        v35 = v99;
      }
      v36 = (v35 >> 52) & 0x7FF;
      if ((v36 - 1023) <= 0x53)
      {
        v43 = v35 >> (51 - (v35 >> 52));
        if (v36 > 0x433)
          LODWORD(v43) = v35 << ((v35 >> 52) - 51);
        if (v36 >= 0x41F)
          v44 = v43;
        else
          v44 = (((1 << ((v35 >> 52) + 1)) - 1) & v43) + (1 << ((v35 >> 52) + 1));
        if ((v35 & 0x8000000000000000) == 0)
          v18 = v44;
        else
          v18 = -v44;
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      v18 = v17;
    }
    if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5))
      return 0;
    v19 = *((_QWORD *)a2 + 7);
    v116 = (WTF::StringImpl *)v19;
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v19 < 0xFFFE000000000000)
    {
      v37 = v19 - 0x2000000000000;
      if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v116, this);
        v37 = v100;
      }
      v38 = (v37 >> 52) & 0x7FF;
      if ((v38 - 1023) <= 0x53)
      {
        v45 = v37 >> (51 - (v37 >> 52));
        if (v38 > 0x433)
          LODWORD(v45) = v37 << ((v37 >> 52) - 51);
        if (v38 >= 0x41F)
          v46 = v45;
        else
          v46 = (((1 << ((v37 >> 52) + 1)) - 1) & v45) + (1 << ((v37 >> 52) + 1));
        if ((v37 & 0x8000000000000000) == 0)
          v21 = v46;
        else
          v21 = -v46;
      }
      else
      {
        v21 = 0;
      }
    }
    else
    {
      v21 = v19;
    }
    if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
      return 0;
    v22 = *((_QWORD *)a2 + 8);
    v116 = (WTF::StringImpl *)v22;
    v23 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v22 < 0xFFFE000000000000)
    {
      v39 = v22 - 0x2000000000000;
      if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v116, this);
        v39 = v101;
      }
      v40 = (v39 >> 52) & 0x7FF;
      if ((v40 - 1023) <= 0x53)
      {
        v47 = v39 >> (51 - (v39 >> 52));
        if (v40 > 0x433)
          LODWORD(v47) = v39 << ((v39 >> 52) - 51);
        if (v40 >= 0x41F)
          v48 = v47;
        else
          v48 = (((1 << ((v39 >> 52) + 1)) - 1) & v47) + (1 << ((v39 >> 52) + 1));
        if ((v39 & 0x8000000000000000) == 0)
          v24 = v48;
        else
          v24 = -v48;
      }
      else
      {
        v24 = 0;
      }
    }
    else
    {
      v24 = v22;
    }
    v107 = v21;
    if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
      return 0;
    v25 = *((_QWORD *)a2 + 9);
    v116 = (WTF::StringImpl *)v25;
    v26 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v25 < 0xFFFE000000000000)
    {
      v41 = v25 - 0x2000000000000;
      if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v116, this);
        v41 = v102;
      }
      v42 = (v41 >> 52) & 0x7FF;
      if ((v42 - 1023) <= 0x53)
      {
        v49 = v41 >> (51 - (v41 >> 52));
        if (v42 > 0x433)
          LODWORD(v49) = v41 << ((v41 >> 52) - 51);
        if (v42 >= 0x41F)
          v50 = v49;
        else
          v50 = (((1 << ((v41 >> 52) + 1)) - 1) & v49) + (1 << ((v41 >> 52) + 1));
        if ((v41 & 0x8000000000000000) == 0)
          v27 = v50;
        else
          v27 = -v50;
      }
      else
      {
        v27 = 0;
      }
    }
    else
    {
      v27 = v25;
    }
    if (*((_DWORD *)v26 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v26))
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v115);
    if (v115[1])
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v114);
    if (v114[1])
      return 0;
    v106 = v18;
    v29 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 12);
    v112 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
    if (((unint64_t)v29 & 0xFFFE000000000002) != 0
      || *((unsigned __int8 *)v29 + 5) - 39 > 0xB
      || (*((_BYTE *)v29 + 40) & 6) != 0)
    {
      v109[0] = 0;
    }
    else
    {
      JSC::JSArrayBufferView::possiblySharedImpl(v29);
      if (v109[0])
      {
        v30 = 0;
        v116 = (WTF::StringImpl *)v109[0];
        v117 = 0;
LABEL_43:
        LOBYTE(v112) = 0;
        v113 = -1;
        ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v30])(v109, &v112, &v116);
        v113 = v30;
        if (v117 != -1)
        {
          ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v117])(v109, &v116);
          v30 = v113;
        }
        if (v30)
        {
          v33 = 0;
LABEL_53:
          if (v30 != -1)
            ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v30])(&v116, &v112);
          return (_BYTE *)v33;
        }
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v111);
        if (v111[1])
        {
          v33 = 0;
LABEL_52:
          v30 = v113;
          goto LABEL_53;
        }
        if (*(_BYTE *)(v16 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v110 = v116;
          v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v51
            && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
            && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v16 + 8), v106, (uint64_t)&v116);
          }
          else
          {
            LOBYTE(v116) = 0;
            v118 = 0;
          }
          v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v55
            && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
            && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v58, (WebCore::CanvasRenderingContext *)(v16 + 8), v107, (uint64_t)&v119);
          }
          else
          {
            LOBYTE(v119) = 0;
            v120 = 0;
          }
          v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v59
            && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
            && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v62, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)&v121);
          }
          else
          {
            LOBYTE(v121) = 0;
            v122 = 0;
          }
          v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v63
            && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
            && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v66, (WebCore::CanvasRenderingContext *)(v16 + 8), v27, (uint64_t)&v123);
          }
          else
          {
            LOBYTE(v123) = 0;
            v124 = 0;
          }
          v67 = v115[0];
          v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v68
            && (v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69)) != 0
            && (v71 = *(WebCore::InspectorCanvasAgent **)(v70 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v71, (WebCore::CanvasRenderingContext *)(v16 + 8), v67, (uint64_t)&v125);
          }
          else
          {
            LOBYTE(v125) = 0;
            v126 = 0;
          }
          v72 = v114[0];
          v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v73
            && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
            && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v76, (WebCore::CanvasRenderingContext *)(v16 + 8), v72, (uint64_t)&v127);
          }
          else
          {
            LOBYTE(v127) = 0;
            v128 = 0;
          }
          if (v113)
            goto LABEL_208;
          v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v77
            && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
            && (v80 = *(_QWORD *)(v79 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v80, v16 + 8, (uint64_t)&v129);
          }
          else
          {
            LOBYTE(v129) = 0;
            v130 = 0;
          }
          v81 = v111[0];
          v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v82
            && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
            && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v85, (WebCore::CanvasRenderingContext *)(v16 + 8), v81, (uint64_t)&v131);
          }
          else
          {
            LOBYTE(v131) = 0;
            v132 = 0;
          }
          v109[0] = &v116;
          v109[1] = 8;
          v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v86)
          {
            v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87);
            if (v88)
            {
              v89 = *(_QWORD *)(v88 + 96);
              if (v89)
                WebCore::InspectorCanvasAgent::recordAction(v89, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v110, v109);
            }
          }
          if (v132)
          {
            v90 = v131;
            v131 = 0;
            if (v90)
            {
              if (*v90 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v90;
            }
          }
          if (v130)
          {
            v91 = v129;
            v129 = 0;
            if (v91)
            {
              if (*v91 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v91;
            }
          }
          if (v128)
          {
            v92 = v127;
            v127 = 0;
            if (v92)
            {
              if (*v92 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v92;
            }
          }
          if (v126)
          {
            v93 = v125;
            v125 = 0;
            if (v93)
            {
              if (*v93 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v93;
            }
          }
          if (v124)
          {
            v94 = v123;
            v123 = 0;
            if (v94)
            {
              if (*v94 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v94;
            }
          }
          if (v122)
          {
            v95 = v121;
            v121 = 0;
            if (v95)
            {
              if (*v95 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v95;
            }
          }
          if (v120)
          {
            v96 = v119;
            v119 = 0;
            if (v96)
            {
              if (*v96 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v96;
            }
          }
          if (v118)
          {
            v97 = v116;
            v116 = 0;
            if (v97)
            {
              if (*(_DWORD *)v97 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v97;
            }
          }
          v98 = v110;
          v110 = 0;
          if (v98)
          {
            if (*(_DWORD *)v98 == 2)
              WTF::StringImpl::destroy(v98, v87);
            else
              *(_DWORD *)v98 -= 2;
          }
        }
        if (!v113)
        {
          v34 = v112;
          v112 = 0;
          WebCore::WebGL2RenderingContext::readPixels((WTF::StringImpl *)v16, v106, v107, v24, v27, (WebCore::GraphicsContextGL *)v115[0], v114[0], v34, v111[0]);
          if (*(_DWORD *)v34 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*(_DWORD *)v34;
          v33 = 10;
          goto LABEL_52;
        }
LABEL_208:
        v103 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_activeTexture(v103, v104, v105);
      }
    }
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v112, 6, "dstData", 8, "WebGL2RenderingContext", 23, v28, "readPixels", 11, "ArrayBufferView", 16);
    v30 = 1;
    v117 = 1;
    v109[0] = 0;
    goto LABEL_43;
  }
  if (v13 != 7)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v31);
  }
  v14 = *((_QWORD *)a2 + 12);
  if ((v14 & 0xFFFFFFFFFFFFFFF7) != 2
    && ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) - 39 > 0xB))
  {
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_readPixels1Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  else
  {
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_readPixels3Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_activeTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSValue v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  _QWORD v27[2];
  WTF::StringImpl *v28;
  _DWORD v29[2];
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "activeTexture");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "activeTexture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v29);
    if (v29[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v29[0];
        v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v16
          && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
          && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v30);
        }
        else
        {
          LOBYTE(v30[0]) = 0;
          v31 = 0;
        }
        v27[0] = v30;
        v27[1] = 1;
        v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v20)
        {
          v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 96);
            if (v23)
              WebCore::InspectorCanvasAgent::recordAction(v23, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v28, v27);
          }
        }
        if (v31)
        {
          v24 = (_DWORD *)v30[0];
          v30[0] = 0;
          if (v24)
          {
            if (*v24 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v24;
          }
        }
        v25 = v28;
        v28 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v21);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        v12 = v29[0];
      }
      if (!*(_BYTE *)(v11 + 364))
      {
        v13 = (v12 - 33984);
        if (*(_DWORD *)(v11 + 204) <= v13)
        {
          WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v11, 1280, (uint64_t)"activeTexture", 14, (uint64_t)"texture unit out of range", 26);
        }
        else
        {
          *(_QWORD *)(v11 + 208) = v13;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 24))(*(_QWORD *)(v11 + 88), v12);
        }
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_attachShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  WebCore::WebGLShader *v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  _QWORD v51[2];
  char v52;
  _DWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "attachShader");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "attachShader");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v51[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLProgram::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) != 0)
    {
      v25 = *((_QWORD *)a2 + 7);
      v51[0] = v9;
      if ((v25 & 0xFFFE000000000002) != 0)
        goto LABEL_37;
      v26 = *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C);
      v27 = *(_DWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C) != 0;
      v28 = (char **)(16 * v26);
      if ((_DWORD)v26)
        v29 = v28 == &WebCore::JSWebGLShader::s_info;
      else
        v29 = 1;
      if (!v29)
      {
        do
        {
          v28 = (char **)v28[2];
          v27 = v28 != 0;
        }
        while (v28 != &WebCore::JSWebGLShader::s_info && v28 != 0);
      }
      if (v27 && (v31 = *(WebCore::WebGLShader **)(v25 + 24)) != 0)
      {
        if (*(_BYTE *)(v16 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v33
            && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
            && (v36 = *(_QWORD *)(v35 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v51);
          }
          else
          {
            LOBYTE(v51[0]) = 0;
            v52 = 0;
          }
          v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v37
            && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
            && (v40 = *(_QWORD *)(v39 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v31, (uint64_t)&v53);
          }
          else
          {
            LOBYTE(v53) = 0;
            v54 = 0;
          }
          v49[0] = v51;
          v49[1] = 2;
          v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v41)
          {
            v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
            if (v43)
            {
              v44 = *(_QWORD *)(v43 + 96);
              if (v44)
                WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v50, v49);
            }
          }
          if (v54)
          {
            v45 = v53;
            v53 = 0;
            if (v45)
            {
              if (*v45 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v45;
            }
          }
          if (v52)
          {
            v46 = (_DWORD *)v51[0];
            v51[0] = 0;
            if (v46)
            {
              if (*v46 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v46;
            }
          }
          v47 = v50;
          v50 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v42);
            else
              *(_DWORD *)v47 -= 2;
          }
        }
        WebCore::WebGLRenderingContextBase::attachShader((WTF::StringImpl *)v16, v24, v31);
        return 10;
      }
      else
      {
LABEL_37:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v51, 1, "shader", 7, "WebGL2RenderingContext", 23, a8, "attachShader", 13, "WebGLShader", 12);
        return 0;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v51, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "attachShader", 13, "WebGLProgram", 13);
      return 0;
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_bindAttribLocation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  WebCore::WebGLProgram *v25;
  uint64_t v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  JSValue v36;
  WTF::StringImpl *v37;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WebCore *v60;
  JSC::JSGlobalObject *v61;
  JSC::CallFrame *v62;
  JSC::VM *v63;
  WTF::StringImpl *v64[2];
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  unsigned int v68[2];
  WTF::StringImpl *v69[2];
  char v70;
  _DWORD *v71;
  char v72;
  _DWORD *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "bindAttribLocation");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "bindAttribLocation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v36);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v69[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLProgram::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(WebCore::WebGLProgram **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v69, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "bindAttribLocation", 19, "WebGLProgram", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v68);
  if (v68[1])
    return 0;
  v26 = *((_QWORD *)a2 + 8);
  v69[0] = (WTF::StringImpl *)v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v26 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v26 + 5) == 2)
  {
    v28 = *(WTF::StringImpl **)(v26 + 8);
    if ((v28 & 1) != 0)
    {
      v28 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
      if (!v28)
        goto LABEL_32;
    }
    else if (!v28)
    {
LABEL_32:
      v64[0] = v28;
      goto LABEL_33;
    }
    *(_DWORD *)v28 += 2;
    goto LABEL_32;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v69, this);
LABEL_33:
  if (*((_DWORD *)v27 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v27);
    v29 = v64[0];
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
      v67 = 1;
      v64[0] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, v37);
          v33 = v67;
          v24 = 0;
          goto LABEL_41;
        }
        *(_DWORD *)v29 -= 2;
      }
      v24 = 0;
      v33 = 1;
      goto LABEL_42;
    }
  }
  else
  {
    v29 = v64[0];
  }
  v66 = v29;
  v67 = 0;
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v65 = v69[0];
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v39
      && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
      && (v42 = *(_QWORD *)(v41 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v42, (WTF::StringImpl *)(v17 + 8), (uint64_t)v25, (uint64_t)v69);
    }
    else
    {
      LOBYTE(v69[0]) = 0;
      v70 = 0;
    }
    v43 = v68[0];
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v17 + 8), v43, (uint64_t)&v71);
    }
    else
    {
      LOBYTE(v71) = 0;
      v72 = 0;
    }
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), (int **)&v66, (uint64_t)&v73);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v64[0] = (WTF::StringImpl *)v69;
    v64[1] = (WTF::StringImpl *)3;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v65, v64);
      }
    }
    if (v74)
    {
      v56 = v73;
      v73 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v72)
    {
      v57 = v71;
      v71 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v70)
    {
      v58 = v69[0];
      v69[0] = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v58;
      }
    }
    v59 = v65;
    v65 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v53);
      else
        *(_DWORD *)v59 -= 2;
    }
  }
  if (!v67)
  {
    v30 = v66;
    v66 = 0;
    v69[0] = v30;
    WebCore::WebGLRenderingContextBase::bindAttribLocation((WTF::StringImpl *)v17, v25, v68[0], (const WTF::String *)v69);
    v32 = v69[0];
    v69[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v67;
    v24 = 10;
LABEL_41:
    if (v33 != -1)
LABEL_42:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321590[v33])(v69, &v66);
    return (_BYTE *)v24;
  }
  v60 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bindBuffer(v60, v61, v62);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLBuffer *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindBuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindBuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v15 = 0;
      }
      else
      {
        v43[0] = *((_QWORD *)this + 7);
        if ((v14 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v18 = (char **)(16 * v16);
        if ((_DWORD)v16)
          v19 = v18 == &WebCore::JSWebGLBuffer::s_info;
        else
          v19 = 1;
        if (!v19)
        {
          do
          {
            v18 = (char **)v18[2];
            v17 = v18 != 0;
          }
          while (v18 != &WebCore::JSWebGLBuffer::s_info && v18 != 0);
        }
        if (!v17 || (v15 = *(WebCore::WebGLBuffer **)(v14 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "buffer", 7, "WebGL2RenderingContext", 23, v13, "bindBuffer", 11, "WebGLBuffer", 12);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = v42[0];
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v24
          && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
          && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
        }
        else
        {
          LOBYTE(v43[0]) = 0;
          v44 = 0;
        }
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v45);
        }
        else
        {
          LOBYTE(v45) = 0;
          v46 = 0;
        }
        v40[0] = v43;
        v40[1] = 2;
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v32)
        {
          v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 96);
            if (v35)
              WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
          }
        }
        if (v46)
        {
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
        }
        if (v44)
        {
          v37 = (_DWORD *)v43[0];
          v43[0] = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        v38 = v41;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v33);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      else
      {
        v22 = v42[0];
      }
      WebCore::WebGLRenderingContextBase::bindBuffer((WTF::StringImpl *)v12, v22, v15);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLFramebuffer *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindFramebuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindFramebuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v15 = 0;
      }
      else
      {
        v43[0] = *((_QWORD *)this + 7);
        if ((v14 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v18 = (char **)(16 * v16);
        if ((_DWORD)v16)
          v19 = v18 == &WebCore::JSWebGLFramebuffer::s_info;
        else
          v19 = 1;
        if (!v19)
        {
          do
          {
            v18 = (char **)v18[2];
            v17 = v18 != 0;
          }
          while (v18 != &WebCore::JSWebGLFramebuffer::s_info && v18 != 0);
        }
        if (!v17 || (v15 = *(WebCore::WebGLFramebuffer **)(v14 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "framebuffer", 12, "WebGL2RenderingContext", 23, v13, "bindFramebuffer", 16, "WebGLFramebuffer", 17);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = v42[0];
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v24
          && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
          && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
        }
        else
        {
          LOBYTE(v43[0]) = 0;
          v44 = 0;
        }
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v45);
        }
        else
        {
          LOBYTE(v45) = 0;
          v46 = 0;
        }
        v40[0] = v43;
        v40[1] = 2;
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v32)
        {
          v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 96);
            if (v35)
              WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
          }
        }
        if (v46)
        {
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
        }
        if (v44)
        {
          v37 = (_DWORD *)v43[0];
          v43[0] = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        v38 = v41;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v33);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      else
      {
        v22 = v42[0];
      }
      WebCore::WebGL2RenderingContext::bindFramebuffer((WTF::StringImpl *)v12, v22, v15);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindRenderbuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::WebGLRenderbuffer *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  uint64_t v23;
  JSValue v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  WebCore::InspectorCanvasAgent *v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  _QWORD v41[2];
  WTF::StringImpl *v42;
  unsigned int v43[2];
  _QWORD v44[2];
  char v45;
  _DWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "WebGL2RenderingContext", "bindRenderbuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v40, "WebGL2RenderingContext", "bindRenderbuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v43);
    if (v43[1])
    {
      return 0;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 7);
      if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v16 = 0;
      }
      else
      {
        v44[0] = *((_QWORD *)this + 7);
        if ((v15 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v17 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
        v18 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
        v19 = (char **)(16 * v17);
        if ((_DWORD)v17)
          v20 = v19 == &WebCore::JSWebGLRenderbuffer::s_info;
        else
          v20 = 1;
        if (!v20)
        {
          do
          {
            v19 = (char **)v19[2];
            v18 = v19 != 0;
          }
          while (v19 != &WebCore::JSWebGLRenderbuffer::s_info && v19 != 0);
        }
        if (!v18 || (v16 = *(WebCore::WebGLRenderbuffer **)(v15 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v44, 1, "renderbuffer", 13, "WebGL2RenderingContext", 23, v14, "bindRenderbuffer", 17, "WebGLRenderbuffer", 18);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v23 = v43[0];
        v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v25
          && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
          && (v28 = *(WebCore::InspectorCanvasAgent **)(v27 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)v44);
        }
        else
        {
          LOBYTE(v44[0]) = 0;
          v45 = 0;
        }
        v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v29
          && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
          && (v32 = *(_QWORD *)(v31 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v46);
        }
        else
        {
          LOBYTE(v46) = 0;
          v47 = 0;
        }
        v41[0] = v44;
        v41[1] = 2;
        v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v33)
        {
          v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
          if (v35)
          {
            v36 = *(_QWORD *)(v35 + 96);
            if (v36)
              WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v42, v41);
          }
        }
        if (v47)
        {
          v37 = v46;
          v46 = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        if (v45)
        {
          v38 = (_DWORD *)v44[0];
          v44[0] = 0;
          if (v38)
          {
            if (*v38 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v38;
          }
        }
        v39 = v42;
        v42 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v34);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
      else
      {
        v23 = v43[0];
      }
      WebCore::WebGLRenderingContextBase::bindRenderbuffer((WTF::StringImpl *)v12, v23, v16, v13);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLTexture *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindTexture");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindTexture");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v15 = 0;
      }
      else
      {
        v43[0] = *((_QWORD *)this + 7);
        if ((v14 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v18 = (char **)(16 * v16);
        if ((_DWORD)v16)
          v19 = v18 == &WebCore::JSWebGLTexture::s_info;
        else
          v19 = 1;
        if (!v19)
        {
          do
          {
            v18 = (char **)v18[2];
            v17 = v18 != 0;
          }
          while (v18 != &WebCore::JSWebGLTexture::s_info && v18 != 0);
        }
        if (!v17 || (v15 = *(WebCore::WebGLTexture **)(v14 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "texture", 8, "WebGL2RenderingContext", 23, v13, "bindTexture", 12, "WebGLTexture", 13);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = v42[0];
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v24
          && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
          && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
        }
        else
        {
          LOBYTE(v43[0]) = 0;
          v44 = 0;
        }
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v45);
        }
        else
        {
          LOBYTE(v45) = 0;
          v46 = 0;
        }
        v40[0] = v43;
        v40[1] = 2;
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v32)
        {
          v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 96);
            if (v35)
              WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
          }
        }
        if (v46)
        {
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
        }
        if (v44)
        {
          v37 = (_DWORD *)v43[0];
          v43[0] = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        v38 = v41;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v33);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      else
      {
        v22 = v42[0];
      }
      WebCore::WebGLRenderingContextBase::bindTexture((WTF::StringImpl *)v12, v22, v15);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blendColor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  float v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  float v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  float v27;
  JSValue v29;
  int v30;
  int v31;
  int v32;
  int v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  WebCore::InspectorCanvasAgent *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  JSC::VM *v63;
  _QWORD v64[2];
  WTF::StringImpl *v65;
  _QWORD v66[2];
  char v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "blendColor");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "blendColor");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v66[0] = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v14 = v59;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    *(float *)&v30 = -INFINITY;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    *(float *)&v30 = INFINITY;
  }
  v15 = *(float *)&v30;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v66[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v18 = v60;
  }
  else
  {
    *(_QWORD *)&v18 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v31 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v19 = v18;
      goto LABEL_27;
    }
    *(float *)&v31 = INFINITY;
  }
  v19 = *(float *)&v31;
LABEL_27:
  v20 = *((_QWORD *)a2 + 8);
  v66[0] = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 >= 0xFFFE000000000000)
  {
    v22 = (double)(int)v20;
  }
  else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v22 = v61;
  }
  else
  {
    *(_QWORD *)&v22 = v20 - 0x2000000000000;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  if (v22 < -3.40282347e38)
  {
    *(float *)&v32 = -INFINITY;
  }
  else
  {
    if (v22 <= 3.40282347e38)
    {
      v23 = v22;
      goto LABEL_34;
    }
    *(float *)&v32 = INFINITY;
  }
  v23 = *(float *)&v32;
LABEL_34:
  v24 = *((_QWORD *)a2 + 9);
  v66[0] = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 >= 0xFFFE000000000000)
  {
    v26 = (double)(int)v24;
  }
  else if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v26 = v62;
  }
  else
  {
    *(_QWORD *)&v26 = v24 - 0x2000000000000;
  }
  if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
    return 0;
  if (v26 < -3.40282347e38)
  {
    *(float *)&v33 = -INFINITY;
LABEL_74:
    v27 = *(float *)&v33;
    goto LABEL_41;
  }
  if (v26 > 3.40282347e38)
  {
    *(float *)&v33 = INFINITY;
    goto LABEL_74;
  }
  v27 = v26;
LABEL_41:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v66);
    }
    else
    {
      LOBYTE(v66[0]) = 0;
      v67 = 0;
    }
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v68);
    }
    else
    {
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v70);
    }
    else
    {
      LOBYTE(v70) = 0;
      v71 = 0;
    }
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(WebCore::InspectorCanvasAgent **)(v48 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), v27, (uint64_t)&v72);
    }
    else
    {
      LOBYTE(v72) = 0;
      v73 = 0;
    }
    v64[0] = v66;
    v64[1] = 4;
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50)
    {
      v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 96);
        if (v53)
          WebCore::InspectorCanvasAgent::recordAction(v53, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v65, v64);
      }
    }
    if (v73)
    {
      v54 = v72;
      v72 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v71)
    {
      v55 = v70;
      v70 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if (v69)
    {
      v56 = v68;
      v68 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v67)
    {
      v57 = (_DWORD *)v66[0];
      v66[0] = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    v58 = v65;
    v65 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v51);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
    (*(void (**)(_QWORD, float, float, float, float))(**(_QWORD **)(v12 + 88) + 80))(*(_QWORD *)(v12 + 88), v15, v19, v23, v27);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blendEquation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSValue v13;
  unsigned int v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "blendEquation");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "blendEquation");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 88) + 88))(*(_QWORD *)(v11 + 88), v28[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blendEquationSeparate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSValue v14;
  unsigned int v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  unsigned int v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  WTF::StringImpl *v34;
  _DWORD v35[2];
  _DWORD v36[2];
  _QWORD v37[2];
  char v38;
  _DWORD *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "blendEquationSeparate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "blendEquationSeparate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
    if (v36[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v35);
      if (v35[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v15 = v36[0];
          v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v16
            && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
            && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v37);
          }
          else
          {
            LOBYTE(v37[0]) = 0;
            v38 = 0;
          }
          v20 = v35[0];
          v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v21
            && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
            && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v39);
          }
          else
          {
            LOBYTE(v39) = 0;
            v40 = 0;
          }
          v33[0] = v37;
          v33[1] = 2;
          v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v25)
          {
            v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 96);
              if (v28)
                WebCore::InspectorCanvasAgent::recordAction(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v34, v33);
            }
          }
          if (v40)
          {
            v29 = v39;
            v39 = 0;
            if (v29)
            {
              if (*v29 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v29;
            }
          }
          if (v38)
          {
            v30 = (_DWORD *)v37[0];
            v37[0] = 0;
            if (v30)
            {
              if (*v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v30;
            }
          }
          v31 = v34;
          v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        if (!*(_BYTE *)(v12 + 364))
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 96))(*(_QWORD *)(v12 + 88), v36[0], v35[0]);
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blendFunc(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSValue v14;
  unsigned int v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  unsigned int v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  WTF::StringImpl *v34;
  _DWORD v35[2];
  _DWORD v36[2];
  _QWORD v37[2];
  char v38;
  _DWORD *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "blendFunc");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "blendFunc");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
    if (v36[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v35);
      if (v35[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v15 = v36[0];
          v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v16
            && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
            && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v37);
          }
          else
          {
            LOBYTE(v37[0]) = 0;
            v38 = 0;
          }
          v20 = v35[0];
          v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v21
            && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
            && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v39);
          }
          else
          {
            LOBYTE(v39) = 0;
            v40 = 0;
          }
          v33[0] = v37;
          v33[1] = 2;
          v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v25)
          {
            v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 96);
              if (v28)
                WebCore::InspectorCanvasAgent::recordAction(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v34, v33);
            }
          }
          if (v40)
          {
            v29 = v39;
            v39 = 0;
            if (v29)
            {
              if (*v29 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v29;
            }
          }
          if (v38)
          {
            v30 = (_DWORD *)v37[0];
            v37[0] = 0;
            if (v30)
            {
              if (*v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v30;
            }
          }
          v31 = v34;
          v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        if (!*(_BYTE *)(v12 + 364))
          (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 104))(*(_QWORD *)(v12 + 88), v36[0], v35[0]);
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blendFuncSeparate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSValue v14;
  unsigned int v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  unsigned int v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  unsigned int v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  unsigned int v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  _QWORD v45[2];
  WTF::StringImpl *v46;
  _DWORD v47[2];
  _DWORD v48[2];
  _DWORD v49[2];
  _DWORD v50[2];
  _QWORD v51[2];
  char v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  char v56;
  _DWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "blendFuncSeparate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "blendFuncSeparate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v50);
    if (v50[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v49);
      if (v49[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v48);
        if (v48[1])
        {
          return 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v47);
          if (v47[1])
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v46 = (WTF::StringImpl *)v51[0];
              v15 = v50[0];
              v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v16
                && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
                && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v51);
              }
              else
              {
                LOBYTE(v51[0]) = 0;
                v52 = 0;
              }
              v20 = v49[0];
              v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v21
                && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
                && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v53);
              }
              else
              {
                LOBYTE(v53) = 0;
                v54 = 0;
              }
              v25 = v48[0];
              v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v26
                && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
                && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v25, (uint64_t)&v55);
              }
              else
              {
                LOBYTE(v55) = 0;
                v56 = 0;
              }
              v30 = v47[0];
              v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v31
                && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
                && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), v30, (uint64_t)&v57);
              }
              else
              {
                LOBYTE(v57) = 0;
                v58 = 0;
              }
              v45[0] = v51;
              v45[1] = 4;
              v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v35)
              {
                v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36);
                if (v37)
                {
                  v38 = *(_QWORD *)(v37 + 96);
                  if (v38)
                    WebCore::InspectorCanvasAgent::recordAction(v38, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v46, v45);
                }
              }
              if (v58)
              {
                v39 = v57;
                v57 = 0;
                if (v39)
                {
                  if (*v39 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v39;
                }
              }
              if (v56)
              {
                v40 = v55;
                v55 = 0;
                if (v40)
                {
                  if (*v40 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v40;
                }
              }
              if (v54)
              {
                v41 = v53;
                v53 = 0;
                if (v41)
                {
                  if (*v41 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v41;
                }
              }
              if (v52)
              {
                v42 = (_DWORD *)v51[0];
                v51[0] = 0;
                if (v42)
                {
                  if (*v42 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v42;
                }
              }
              v43 = v46;
              v46 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v36);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
              (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 112))(*(_QWORD *)(v12 + 88), v50[0], v49[0], v48[0], v47[0]);
            return 10;
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_checkFramebufferStatus(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  JSValue v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  _QWORD v27[2];
  WTF::StringImpl *v28;
  _DWORD v29[2];
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "checkFramebufferStatus");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "checkFramebufferStatus");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v29);
    if (v29[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v29[0];
        v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v16
          && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
          && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v30);
        }
        else
        {
          LOBYTE(v30[0]) = 0;
          v31 = 0;
        }
        v27[0] = v30;
        v27[1] = 1;
        v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v20)
        {
          v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21);
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 96);
            if (v23)
              WebCore::InspectorCanvasAgent::recordAction(v23, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v28, v27);
          }
        }
        if (v31)
        {
          v24 = (_DWORD *)v30[0];
          v30[0] = 0;
          if (v24)
          {
            if (*v24 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v24;
          }
        }
        v25 = v28;
        v28 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v21);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
      else
      {
        v12 = v29[0];
      }
      if (*(_BYTE *)(v11 + 364))
      {
        v13 = 36061;
      }
      else if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, v12) & 1) != 0)
      {
        v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 120))(*(_QWORD *)(v11 + 88), v12);
        if ((v13 & 0x80000000) != 0)
          return (_BYTE *)(COERCE__INT64((double)v13) + 0x2000000000000);
      }
      else
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v11, 1280, (uint64_t)"checkFramebufferStatus", 23, (uint64_t)"invalid target", 15);
        v13 = 0;
      }
      return (_BYTE *)(v13 | 0xFFFE000000000000);
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_clear(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  int32x2_t *v18;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  _QWORD v32[2];
  WTF::StringImpl *v33;
  _DWORD v34[2];
  _QWORD v35[2];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "WebGL2RenderingContext", "clear");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "WebGL2RenderingContext", "clear");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v34);
    if (v34[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v16 = v34[0];
        v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v21
          && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
          && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v11 + 8), v16, (uint64_t)v35);
        }
        else
        {
          LOBYTE(v35[0]) = 0;
          v36 = 0;
        }
        v32[0] = v35;
        v32[1] = 1;
        v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v25)
        {
          v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
          if (v27)
          {
            v28 = *(_QWORD *)(v27 + 96);
            if (v28)
              WebCore::InspectorCanvasAgent::recordAction(v28, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v33, v32);
          }
        }
        if (v36)
        {
          v29 = (_DWORD *)v35[0];
          v35[0] = 0;
          if (v29)
          {
            if (*v29 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v29;
          }
        }
        v30 = v33;
        v33 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v26);
          else
            *(_DWORD *)v30 -= 2;
        }
      }
      else
      {
        v16 = v34[0];
      }
      if (!*(_BYTE *)(v11 + 364))
      {
        if (!WebCore::WebGLRenderingContextBase::clearIfComposited(v11, 0, v16, v12, v13, v14, v15))
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 128))(*(_QWORD *)(v11 + 88), v16);
        if (!*(_BYTE *)(v11 + 425)
          && !(*(_QWORD *)(v11 + 176)
             ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
             : 0))
        {
          *(_BYTE *)(v11 + 432) = 1;
          if (*(_BYTE *)(v11 + 434))
            *(_BYTE *)(v11 + 434) = 0;
          v18 = *(int32x2_t **)(v11 + 40);
          v35[0] = 0;
          v35[1] = vcvt_f32_s32(v18[1]);
          v36 = 1;
          (*(void (**)(int32x2_t *, _QWORD *, _QWORD))(*(_QWORD *)v18 + 104))(v18, v35, 0);
        }
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_clearColor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  float v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  float v23;
  unint64_t v24;
  JSC::VM *v25;
  double v26;
  float v27;
  JSValue v29;
  int v30;
  int v31;
  int v32;
  int v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  WebCore::InspectorCanvasAgent *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  JSC::VM *v63;
  _QWORD v64[2];
  WTF::StringImpl *v65;
  _QWORD v66[2];
  char v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "clearColor");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "clearColor");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v66[0] = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v14 = v59;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    *(float *)&v30 = -INFINITY;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    *(float *)&v30 = INFINITY;
  }
  v15 = *(float *)&v30;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v66[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v18 = v60;
  }
  else
  {
    *(_QWORD *)&v18 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v31 = -INFINITY;
  }
  else
  {
    if (v18 <= 3.40282347e38)
    {
      v19 = v18;
      goto LABEL_27;
    }
    *(float *)&v31 = INFINITY;
  }
  v19 = *(float *)&v31;
LABEL_27:
  v20 = *((_QWORD *)a2 + 8);
  v66[0] = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 >= 0xFFFE000000000000)
  {
    v22 = (double)(int)v20;
  }
  else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v22 = v61;
  }
  else
  {
    *(_QWORD *)&v22 = v20 - 0x2000000000000;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  if (v22 < -3.40282347e38)
  {
    *(float *)&v32 = -INFINITY;
  }
  else
  {
    if (v22 <= 3.40282347e38)
    {
      v23 = v22;
      goto LABEL_34;
    }
    *(float *)&v32 = INFINITY;
  }
  v23 = *(float *)&v32;
LABEL_34:
  v24 = *((_QWORD *)a2 + 9);
  v66[0] = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 >= 0xFFFE000000000000)
  {
    v26 = (double)(int)v24;
  }
  else if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v26 = v62;
  }
  else
  {
    *(_QWORD *)&v26 = v24 - 0x2000000000000;
  }
  if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
    return 0;
  if (v26 < -3.40282347e38)
  {
    *(float *)&v33 = -INFINITY;
LABEL_74:
    v27 = *(float *)&v33;
    goto LABEL_41;
  }
  if (v26 > 3.40282347e38)
  {
    *(float *)&v33 = INFINITY;
    goto LABEL_74;
  }
  v27 = v26;
LABEL_41:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v66);
    }
    else
    {
      LOBYTE(v66[0]) = 0;
      v67 = 0;
    }
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v68);
    }
    else
    {
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v70);
    }
    else
    {
      LOBYTE(v70) = 0;
      v71 = 0;
    }
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(WebCore::InspectorCanvasAgent **)(v48 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), v27, (uint64_t)&v72);
    }
    else
    {
      LOBYTE(v72) = 0;
      v73 = 0;
    }
    v64[0] = v66;
    v64[1] = 4;
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50)
    {
      v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 96);
        if (v53)
          WebCore::InspectorCanvasAgent::recordAction(v53, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v65, v64);
      }
    }
    if (v73)
    {
      v54 = v72;
      v72 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v71)
    {
      v55 = v70;
      v70 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if (v69)
    {
      v56 = v68;
      v68 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v67)
    {
      v57 = (_DWORD *)v66[0];
      v66[0] = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    v58 = v65;
    v65 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v51);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
  {
    *(float *)(v12 + 388) = v15;
    *(float *)(v12 + 392) = v19;
    *(float *)(v12 + 396) = v23;
    *(float *)(v12 + 400) = v27;
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 88) + 136))(*(_QWORD *)(v12 + 88));
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_clearDepth(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  float v14;
  JSValue v16;
  int v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  double v28;
  JSC::VM *v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "clearDepth");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "clearDepth");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v32[0] = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v32, this);
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    *(float *)&v17 = -INFINITY;
LABEL_35:
    v14 = *(float *)&v17;
    goto LABEL_20;
  }
  if (v13 > 3.40282347e38)
  {
    *(float *)&v17 = INFINITY;
    goto LABEL_35;
  }
  v14 = v13;
LABEL_20:
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v18
      && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
      && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v21, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v32);
    }
    else
    {
      LOBYTE(v32[0]) = 0;
      v33 = 0;
    }
    v30[0] = v32;
    v30[1] = 1;
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v22)
    {
      v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 96);
        if (v25)
          WebCore::InspectorCanvasAgent::recordAction(v25, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v31, v30);
      }
    }
    if (v33)
    {
      v26 = (_DWORD *)v32[0];
      v32[0] = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v26;
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (!*(_BYTE *)(v11 + 364))
  {
    *(float *)(v11 + 408) = v14;
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v11 + 88) + 144))(*(_QWORD *)(v11 + 88), v14);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_clearStencil(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  JSC::VM *v31;
  _QWORD v32[2];
  WTF::StringImpl *v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "WebGL2RenderingContext", "clearStencil");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "WebGL2RenderingContext", "clearStencil");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    v34[0] = v12;
    if (v12 < 0xFFFE000000000000)
    {
      v15 = v12 - 0x2000000000000;
      if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v34, this);
        v15 = v30;
      }
      v16 = (v15 >> 52) & 0x7FF;
      if ((v16 - 1023) <= 0x53)
      {
        v17 = v15 >> (51 - (v15 >> 52));
        if (v16 > 0x433)
          LODWORD(v17) = v15 << ((v15 >> 52) - 51);
        if (v16 >= 0x41F)
          v18 = v17;
        else
          v18 = (((1 << ((v15 >> 52) + 1)) - 1) & v17) + (1 << ((v15 >> 52) + 1));
        if ((v15 & 0x8000000000000000) == 0)
          v13 = v18;
        else
          v13 = -v18;
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = v12;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v20
          && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
          && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v11 + 8), v13, (uint64_t)v34);
        }
        else
        {
          LOBYTE(v34[0]) = 0;
          v35 = 0;
        }
        v32[0] = v34;
        v32[1] = 1;
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v24)
        {
          v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 96);
            if (v27)
              WebCore::InspectorCanvasAgent::recordAction(v27, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v33, v32);
          }
        }
        if (v35)
        {
          v28 = (_DWORD *)v34[0];
          v34[0] = 0;
          if (v28)
          {
            if (*v28 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v28;
          }
        }
        v29 = v33;
        v33 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v25);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
      {
        *(_DWORD *)(v11 + 412) = v13;
        (*(void (**)(_QWORD, unint64_t, JSC::CallFrame *))(**(_QWORD **)(v11 + 88) + 152))(*(_QWORD *)(v11 + 88), v13, a3);
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_colorMask(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  _BOOL8 v19;
  unint64_t v20;
  double v21;
  _BOOL8 v22;
  JSValue v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char hasExceptionsAfterHandlingTraps;
  WTF::JSONImpl::Value *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  WebCore::InspectorCanvasAgent *v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  WTF::StringImpl *v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  int *v58;
  int v59;
  BOOL v60;
  int v61;
  uint64_t v62;
  int *v63;
  int v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  int *v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  unsigned int v75;
  JSC::VM *v76;
  _QWORD v77[2];
  WTF::StringImpl *v78;
  _QWORD v79[2];
  char v80;
  _DWORD *v81;
  char v82;
  _DWORD *v83;
  char v84;
  _DWORD *v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v76 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v76, "WebGL2RenderingContext", "colorMask");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v76, "WebGL2RenderingContext", "colorMask");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  if (v13 >= 0xFFFE000000000000)
  {
    v55 = (_DWORD)v13 == 0;
    goto LABEL_157;
  }
  *(_QWORD *)&v14 = v13 - 0x2000000000000;
  if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      v15 = v13 == 7;
      goto LABEL_17;
    }
    v56 = *(unsigned __int8 *)(v13 + 5);
    if (v56 == 3)
    {
      v59 = *(_DWORD *)(v13 + 8);
    }
    else
    {
      if (v56 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v15 = 1;
          goto LABEL_17;
        }
        v55 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_157;
      }
      v57 = *(_QWORD *)(v13 + 8);
      if ((v57 & 1) != 0)
        v58 = (int *)(v13 + 16);
      else
        v58 = (int *)(v57 + 4);
      v59 = *v58;
    }
    v55 = v59 == 0;
LABEL_157:
    v15 = !v55;
    goto LABEL_17;
  }
  v15 = v14 > 0.0 || v14 < 0.0;
LABEL_17:
  if (*((_DWORD *)v4 + 20))
  {
    v25 = v15;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v4 = (JSC::VM *)*((_QWORD *)this + 7);
    v15 = v25;
  }
  v16 = *((_QWORD *)a2 + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v60 = (_DWORD)v16 == 0;
    goto LABEL_161;
  }
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v16 & 0xFFFE000000000002) != 0)
    {
      v17 = v16 == 7;
      goto LABEL_22;
    }
    v61 = *(unsigned __int8 *)(v16 + 5);
    if (v61 == 3)
    {
      v64 = *(_DWORD *)(v16 + 8);
    }
    else
    {
      if (v61 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v17 = 1;
          goto LABEL_22;
        }
        v60 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_161;
      }
      v62 = *(_QWORD *)(v16 + 8);
      if ((v62 & 1) != 0)
        v63 = (int *)(v16 + 16);
      else
        v63 = (int *)(v62 + 4);
      v64 = *v63;
    }
    v60 = v64 == 0;
LABEL_161:
    v17 = !v60;
    goto LABEL_22;
  }
  v17 = COERCE_DOUBLE(v16 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v16 - 0x2000000000000) < 0.0;
LABEL_22:
  if (*((_DWORD *)v4 + 20))
  {
    v26 = v15;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v4 = (JSC::VM *)*((_QWORD *)this + 7);
    v15 = v26;
  }
  v18 = *((_QWORD *)a2 + 8);
  if (v18 >= 0xFFFE000000000000)
  {
    v65 = (_DWORD)v18 == 0;
    goto LABEL_165;
  }
  if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v18 & 0xFFFE000000000002) != 0)
    {
      v19 = v18 == 7;
      goto LABEL_27;
    }
    v66 = *(unsigned __int8 *)(v18 + 5);
    if (v66 == 3)
    {
      v69 = *(_DWORD *)(v18 + 8);
    }
    else
    {
      if (v66 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v19 = 1;
          goto LABEL_27;
        }
        v65 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_165;
      }
      v67 = *(_QWORD *)(v18 + 8);
      if ((v67 & 1) != 0)
        v68 = (int *)(v18 + 16);
      else
        v68 = (int *)(v67 + 4);
      v69 = *v68;
    }
    v65 = v69 == 0;
LABEL_165:
    v19 = !v65;
    goto LABEL_27;
  }
  v19 = COERCE_DOUBLE(v18 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v18 - 0x2000000000000) < 0.0;
LABEL_27:
  if (*((_DWORD *)v4 + 20))
  {
    v75 = v15;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
      return 0;
    v4 = (JSC::VM *)*((_QWORD *)this + 7);
    v15 = v75;
  }
  v20 = *((_QWORD *)a2 + 9);
  if (v20 >= 0xFFFE000000000000)
  {
    v70 = (_DWORD)v20 == 0;
    goto LABEL_151;
  }
  *(_QWORD *)&v21 = v20 - 0x2000000000000;
  if (v20 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v21 <= 0.0)
    {
      v22 = v21 < 0.0;
      goto LABEL_32;
    }
    goto LABEL_155;
  }
  if ((v20 & 0xFFFE000000000002) != 0)
  {
    v22 = v20 == 7;
    goto LABEL_32;
  }
  v71 = *(unsigned __int8 *)(v20 + 5);
  if (v71 == 3)
  {
    v74 = *(_DWORD *)(v20 + 8);
LABEL_150:
    v70 = v74 == 0;
    goto LABEL_151;
  }
  if (v71 == 2)
  {
    v72 = *(_QWORD *)(v20 + 8);
    if ((v72 & 1) != 0)
      v73 = (int *)(v20 + 16);
    else
      v73 = (int *)(v72 + 4);
    v74 = *v73;
    goto LABEL_150;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_155:
    v22 = 1;
    goto LABEL_32;
  }
  v70 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_151:
  v22 = !v70;
LABEL_32:
  if (*((_DWORD *)v4 + 20))
  {
    v27 = v15;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v15 = v27;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v29 = (WTF::JSONImpl::Value *)v15;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(WebCore::InspectorCanvasAgent **)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), v29, (uint64_t)v79);
    }
    else
    {
      LOBYTE(v79[0]) = 0;
      v80 = 0;
    }
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), (WTF::JSONImpl::Value *)v17, (uint64_t)&v81);
    }
    else
    {
      LOBYTE(v81) = 0;
      v82 = 0;
    }
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), (WTF::JSONImpl::Value *)v19, (uint64_t)&v83);
    }
    else
    {
      LOBYTE(v83) = 0;
      v84 = 0;
    }
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), (WTF::JSONImpl::Value *)v22, (uint64_t)&v85);
    }
    else
    {
      LOBYTE(v85) = 0;
      v86 = 0;
    }
    v77[0] = v79;
    v77[1] = 4;
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46)
    {
      v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 96);
        if (v49)
          WebCore::InspectorCanvasAgent::recordAction(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v78, v77);
      }
    }
    v15 = (uint64_t)v29;
    if (v86)
    {
      v50 = v85;
      v85 = 0;
      if (v50)
      {
        if (*v50 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v15 = (uint64_t)v29;
        }
        else
        {
          --*v50;
        }
      }
    }
    if (v84)
    {
      v51 = v83;
      v83 = 0;
      if (v51)
      {
        if (*v51 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v15 = (uint64_t)v29;
        }
        else
        {
          --*v51;
        }
      }
    }
    if (v82)
    {
      v52 = v81;
      v81 = 0;
      if (v52)
      {
        if (*v52 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v15 = (uint64_t)v29;
        }
        else
        {
          --*v52;
        }
      }
    }
    if (v80)
    {
      v53 = (_DWORD *)v79[0];
      v79[0] = 0;
      if (v53)
      {
        if (*v53 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v15 = (uint64_t)v29;
        }
        else
        {
          --*v53;
        }
      }
    }
    v54 = v78;
    v78 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v15);
        LOBYTE(v15) = (_BYTE)v29;
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  if (!*(_BYTE *)(v12 + 364))
  {
    *(_BYTE *)(v12 + 416) = v15;
    *(_BYTE *)(v12 + 417) = v17;
    *(_BYTE *)(v12 + 418) = v19;
    *(_BYTE *)(v12 + 419) = v22;
    (*(void (**)(_QWORD))(**(_QWORD **)(v12 + 88) + 160))(*(_QWORD *)(v12 + 88));
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compileShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "compileShader");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "compileShader");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v46[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLShader::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
    }
    if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v46, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "compileShader", 14, "WebGLShader", 12);
      return 0;
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(_QWORD *)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLShader *)v24, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v46[0]) = 0;
        v47 = 0;
      }
      v44[0] = v46;
      v44[1] = 1;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v37)
      {
        v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 96);
          if (v40)
            WebCore::InspectorCanvasAgent::recordAction(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v45, v44);
        }
      }
      if (v47)
      {
        v41 = (_DWORD *)v46[0];
        v46[0] = 0;
        if (v41)
        {
          if (*v41 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v41;
        }
      }
      v42 = v45;
      v45 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    if (*(_BYTE *)(v16 + 364))
      return 10;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16)
    {
      v31 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v31)
      {
        (*(void (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 88) + 168))(*(_QWORD *)(v16 + 88), v31, a3);
        return 10;
      }
      v27 = "attempt to use a deleted object";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1281;
      v30 = 32;
    }
    else
    {
      v27 = "object does not belong to this context";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1282;
      v30 = 39;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v28, v29, (uint64_t)"compileShader", 14, (uint64_t)v27, v30);
    return 10;
  }
  v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v32);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_copyTexImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  uint64_t v23;
  unint64_t v24;
  JSC::VM *v25;
  uint64_t v26;
  unint64_t v27;
  JSC::VM *v28;
  int v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  JSValue v58;
  JSC::VM *v59;
  uint64_t v60;
  int v61;
  JSC::VM *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  JSC::VM *v66;
  uint64_t v67;
  uint64_t v68;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v70;
  uint64_t v71;
  int v72;
  JSC::VM *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  unsigned int v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  WebCore::InspectorInstrumentation *v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t v104;
  WebCore::InspectorCanvasAgent *v105;
  WebCore::InspectorInstrumentation *v106;
  WebCore::ScriptExecutionContext *v107;
  uint64_t v108;
  WebCore::InspectorCanvasAgent *v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  JSC::JSGlobalObject *v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  WebCore::CanvasRenderingContext *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  WebCore::WebGLRenderingContextBase *v149;
  JSC::VM *v150;
  _QWORD v151[2];
  WTF::StringImpl *v152;
  unsigned int v153[2];
  unsigned int v154[2];
  _QWORD v155[2];
  char v156;
  _DWORD *v157;
  char v158;
  _DWORD *v159;
  char v160;
  _DWORD *v161;
  char v162;
  _DWORD *v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v150 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v150, "WebGL2RenderingContext", "copyTexImage2D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v150, "WebGL2RenderingContext", "copyTexImage2D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 7)
  {
    v58.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v58);
  }
  else
  {
    v149 = *(WebCore::WebGLRenderingContextBase **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v154);
    if (v154[1])
    {
      return 0;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      v155[0] = v12;
      v13 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v12 < 0xFFFE000000000000)
      {
        v32 = v12 - 0x2000000000000;
        if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, this);
          v32 = v123;
        }
        v33 = (v32 >> 52) & 0x7FF;
        v34 = v33 - 1023;
        v35 = v32 >> (51 - (v32 >> 52));
        if (v33 > 0x433)
          LODWORD(v35) = v32 << ((v32 >> 52) - 51);
        if (v33 >= 0x41F)
          v36 = v35;
        else
          v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
        if ((v32 & 0x8000000000000000) == 0)
          v37 = v36;
        else
          v37 = -v36;
        if (v34 <= 0x53)
          v14 = v37;
        else
          v14 = 0;
      }
      else
      {
        v14 = v12;
      }
      if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v153);
        if (v153[1])
        {
          return 0;
        }
        else
        {
          v15 = *((_QWORD *)a2 + 9);
          v155[0] = v15;
          v16 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v15 < 0xFFFE000000000000)
          {
            v38 = v15 - 0x2000000000000;
            if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, this);
              v38 = v124;
            }
            v39 = (v38 >> 52) & 0x7FF;
            if ((v39 - 1023) <= 0x53)
            {
              v48 = v38 >> (51 - (v38 >> 52));
              if (v39 > 0x433)
                LODWORD(v48) = v38 << ((v38 >> 52) - 51);
              if (v39 >= 0x41F)
                v49 = v48;
              else
                v49 = (((1 << ((v38 >> 52) + 1)) - 1) & v48) + (1 << ((v38 >> 52) + 1));
              if ((v38 & 0x8000000000000000) == 0)
                v17 = v49;
              else
                v17 = -v49;
            }
            else
            {
              v17 = 0;
            }
          }
          else
          {
            v17 = v15;
          }
          if (*((_DWORD *)v16 + 20)
            && (v59 = v16, v60 = v17, v61 = JSC::VM::hasExceptionsAfterHandlingTraps(v59), v17 = v60, v61))
          {
            return 0;
          }
          else
          {
            v18 = *((_QWORD *)a2 + 10);
            v155[0] = v18;
            v19 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v18 < 0xFFFE000000000000)
            {
              v40 = v18 - 0x2000000000000;
              if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v125 = v17;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, this);
                v17 = v125;
                v40 = v126;
              }
              v41 = (v40 >> 52) & 0x7FF;
              if ((v41 - 1023) <= 0x53)
              {
                v50 = v40 >> (51 - (v40 >> 52));
                if (v41 > 0x433)
                  LODWORD(v50) = v40 << ((v40 >> 52) - 51);
                if (v41 >= 0x41F)
                  v51 = v50;
                else
                  v51 = (((1 << ((v40 >> 52) + 1)) - 1) & v50) + (1 << ((v40 >> 52) + 1));
                if ((v40 & 0x8000000000000000) == 0)
                  v20 = v51;
                else
                  v20 = -v51;
              }
              else
              {
                v20 = 0;
              }
            }
            else
            {
              v20 = v18;
            }
            if (*((_DWORD *)v19 + 20)
              && (v62 = v19,
                  v63 = v17,
                  v64 = v20,
                  v65 = JSC::VM::hasExceptionsAfterHandlingTraps(v62),
                  v20 = v64,
                  v17 = v63,
                  v65))
            {
              return 0;
            }
            else
            {
              v21 = *((_QWORD *)a2 + 11);
              v155[0] = v21;
              v22 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v21 < 0xFFFE000000000000)
              {
                v42 = v21 - 0x2000000000000;
                if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  v139 = v17;
                  v134 = v20;
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, this);
                  v20 = v134;
                  v17 = v139;
                  v42 = v127;
                }
                v43 = (v42 >> 52) & 0x7FF;
                if ((v43 - 1023) <= 0x53)
                {
                  v52 = v42 >> (51 - (v42 >> 52));
                  if (v43 > 0x433)
                    LODWORD(v52) = v42 << ((v42 >> 52) - 51);
                  if (v43 >= 0x41F)
                    v53 = v52;
                  else
                    v53 = (((1 << ((v42 >> 52) + 1)) - 1) & v52) + (1 << ((v42 >> 52) + 1));
                  if ((v42 & 0x8000000000000000) == 0)
                    v23 = v53;
                  else
                    v23 = -v53;
                }
                else
                {
                  v23 = 0;
                }
              }
              else
              {
                v23 = v21;
              }
              if (!*((_DWORD *)v22 + 20))
                goto LABEL_27;
              v66 = v22;
              v67 = v17;
              v68 = v20;
              v142 = v23;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v66);
              v23 = v142;
              v20 = v68;
              v17 = v67;
              if (hasExceptionsAfterHandlingTraps)
              {
                return 0;
              }
              else
              {
LABEL_27:
                v148 = v14;
                v24 = *((_QWORD *)a2 + 12);
                v155[0] = v24;
                v25 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v24 < 0xFFFE000000000000)
                {
                  v44 = v24 - 0x2000000000000;
                  if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    v140 = v17;
                    v146 = v23;
                    v128 = v20;
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, this);
                    v17 = v140;
                    v23 = v146;
                    v20 = v128;
                    v44 = v129;
                  }
                  v45 = (v44 >> 52) & 0x7FF;
                  if ((v45 - 1023) <= 0x53)
                  {
                    v54 = v44 >> (51 - (v44 >> 52));
                    if (v45 > 0x433)
                      LODWORD(v54) = v44 << ((v44 >> 52) - 51);
                    if (v45 >= 0x41F)
                      v55 = v54;
                    else
                      v55 = (((1 << ((v44 >> 52) + 1)) - 1) & v54) + (1 << ((v44 >> 52) + 1));
                    if ((v44 & 0x8000000000000000) == 0)
                      v26 = v55;
                    else
                      v26 = -v55;
                  }
                  else
                  {
                    v26 = 0;
                  }
                }
                else
                {
                  v26 = v24;
                }
                if (!*((_DWORD *)v25 + 20))
                  goto LABEL_30;
                v70 = v25;
                v136 = v17;
                v143 = v23;
                v71 = v20;
                v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
                v17 = v136;
                v23 = v143;
                v20 = v71;
                if (v72)
                {
                  return 0;
                }
                else
                {
LABEL_30:
                  v27 = *((_QWORD *)a2 + 13);
                  v155[0] = v27;
                  v28 = (JSC::VM *)*((_QWORD *)this + 7);
                  if (v27 < 0xFFFE000000000000)
                  {
                    v46 = v27 - 0x2000000000000;
                    if (v27 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      v130 = this;
                      v141 = v17;
                      v147 = v23;
                      v131 = v20;
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, v130);
                      v17 = v141;
                      v23 = v147;
                      v20 = v131;
                      v46 = v132;
                    }
                    v47 = (v46 >> 52) & 0x7FF;
                    if ((v47 - 1023) <= 0x53)
                    {
                      v56 = v46 >> (51 - (v46 >> 52));
                      if (v47 > 0x433)
                        LODWORD(v56) = v46 << ((v46 >> 52) - 51);
                      if (v47 >= 0x41F)
                        v57 = v56;
                      else
                        v57 = (((1 << ((v46 >> 52) + 1)) - 1) & v56) + (1 << ((v46 >> 52) + 1));
                      if ((v46 & 0x8000000000000000) == 0)
                        v29 = v57;
                      else
                        v29 = -v57;
                    }
                    else
                    {
                      v29 = 0;
                    }
                  }
                  else
                  {
                    v29 = v27;
                  }
                  if (!*((_DWORD *)v28 + 20))
                    goto LABEL_33;
                  v73 = v28;
                  v137 = v17;
                  v144 = v23;
                  v74 = v20;
                  v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v73);
                  v17 = v137;
                  v23 = v144;
                  v20 = v74;
                  if (v75)
                  {
                    return 0;
                  }
                  else
                  {
LABEL_33:
                    v30 = v149;
                    if (*((_BYTE *)v149 + 33))
                    {
                      v138 = v17;
                      v145 = v23;
                      v133 = v20;
                      v135 = (WebCore::WebGLRenderingContextBase *)((char *)v149 + 8);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v152 = (WTF::StringImpl *)v155[0];
                      v76 = v154[0];
                      v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v77
                        && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
                        && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v80, v135, v76, (uint64_t)v155);
                      }
                      else
                      {
                        LOBYTE(v155[0]) = 0;
                        v156 = 0;
                      }
                      v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v81
                        && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
                        && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v84, v135, v148, (uint64_t)&v157);
                      }
                      else
                      {
                        LOBYTE(v157) = 0;
                        v158 = 0;
                      }
                      v85 = v153[0];
                      v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v86
                        && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
                        && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v89, v135, v85, (uint64_t)&v159);
                      }
                      else
                      {
                        LOBYTE(v159) = 0;
                        v160 = 0;
                      }
                      v30 = v149;
                      v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v90
                        && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
                        && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v93, v135, v138, (uint64_t)&v161);
                      }
                      else
                      {
                        LOBYTE(v161) = 0;
                        v162 = 0;
                      }
                      v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v94
                        && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
                        && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v97, v135, v133, (uint64_t)&v163);
                      }
                      else
                      {
                        LOBYTE(v163) = 0;
                        v164 = 0;
                      }
                      v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v98
                        && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
                        && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v101, v135, v145, (uint64_t)&v165);
                      }
                      else
                      {
                        LOBYTE(v165) = 0;
                        v166 = 0;
                      }
                      v102 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v102
                        && (v104 = WebCore::InspectorInstrumentation::instrumentingAgents(v102, v103)) != 0
                        && (v105 = *(WebCore::InspectorCanvasAgent **)(v104 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v105, v135, v26, (uint64_t)&v167);
                      }
                      else
                      {
                        LOBYTE(v167) = 0;
                        v168 = 0;
                      }
                      v106 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v106
                        && (v108 = WebCore::InspectorInstrumentation::instrumentingAgents(v106, v107)) != 0
                        && (v109 = *(WebCore::InspectorCanvasAgent **)(v108 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v109, v135, v29, (uint64_t)&v169);
                      }
                      else
                      {
                        LOBYTE(v169) = 0;
                        v170 = 0;
                      }
                      v151[0] = v155;
                      v151[1] = 8;
                      v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v149 + 5) + 144))(*((_QWORD *)v149 + 5));
                      if (v110)
                      {
                        v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111);
                        if (v112)
                        {
                          v113 = *(_QWORD *)(v112 + 96);
                          if (v113)
                            WebCore::InspectorCanvasAgent::recordAction(v113, v135, (const WTF::StringImpl *)&v152, v151);
                        }
                      }
                      v17 = v138;
                      v23 = v145;
                      v20 = v133;
                      if (v170)
                      {
                        v114 = v169;
                        v169 = 0;
                        if (v114)
                        {
                          if (*v114 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v114;
                          }
                        }
                      }
                      if (v168)
                      {
                        v115 = v167;
                        v167 = 0;
                        if (v115)
                        {
                          if (*v115 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v115;
                          }
                        }
                      }
                      if (v166)
                      {
                        v116 = v165;
                        v165 = 0;
                        if (v116)
                        {
                          if (*v116 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v116;
                          }
                        }
                      }
                      if (v164)
                      {
                        v117 = v163;
                        v163 = 0;
                        if (v117)
                        {
                          if (*v117 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v117;
                          }
                        }
                      }
                      if (v162)
                      {
                        v118 = v161;
                        v161 = 0;
                        if (v118)
                        {
                          if (*v118 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v118;
                          }
                        }
                      }
                      if (v160)
                      {
                        v119 = v159;
                        v159 = 0;
                        if (v119)
                        {
                          if (*v119 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v119;
                          }
                        }
                      }
                      if (v158)
                      {
                        v120 = v157;
                        v157 = 0;
                        if (v120)
                        {
                          if (*v120 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v120;
                          }
                        }
                      }
                      if (v156)
                      {
                        v121 = (_DWORD *)v155[0];
                        v155[0] = 0;
                        if (v121)
                        {
                          if (*v121 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v17 = v138;
                            v23 = v145;
                            v20 = v133;
                          }
                          else
                          {
                            --*v121;
                          }
                        }
                      }
                      v122 = v152;
                      v152 = 0;
                      if (v122)
                      {
                        if (*(_DWORD *)v122 == 2)
                        {
                          WTF::StringImpl::destroy(v122, v111);
                          v17 = v138;
                          v23 = v145;
                          v20 = v133;
                        }
                        else
                        {
                          *(_DWORD *)v122 -= 2;
                        }
                      }
                    }
                    WebCore::WebGLRenderingContextBase::copyTexImage2D(v30, v154[0], v148, v153[0], v17, v20, v23, v26, v29);
                    return 10;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_copyTexSubImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSC::VM *v13;
  unint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  unint64_t v23;
  unint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  unint64_t v27;
  JSC::VM *v28;
  unint64_t v29;
  unint64_t v30;
  JSC::VM *v31;
  int v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  int v71;
  JSValue v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  JSC::VM *v85;
  unint64_t v86;
  unint64_t v87;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v89;
  WebCore::CanvasRenderingContext *v90;
  unsigned int v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  WebCore::InspectorCanvasAgent *v95;
  WebCore::InspectorInstrumentation *v96;
  WebCore::ScriptExecutionContext *v97;
  uint64_t v98;
  WebCore::InspectorCanvasAgent *v99;
  WebCore::InspectorInstrumentation *v100;
  WebCore::ScriptExecutionContext *v101;
  uint64_t v102;
  WebCore::InspectorCanvasAgent *v103;
  WebCore::InspectorInstrumentation *v104;
  WebCore::ScriptExecutionContext *v105;
  uint64_t v106;
  WebCore::InspectorCanvasAgent *v107;
  WebCore::InspectorInstrumentation *v108;
  WebCore::ScriptExecutionContext *v109;
  uint64_t v110;
  WebCore::InspectorCanvasAgent *v111;
  WebCore::InspectorInstrumentation *v112;
  WebCore::ScriptExecutionContext *v113;
  uint64_t v114;
  WebCore::InspectorCanvasAgent *v115;
  WebCore::InspectorInstrumentation *v116;
  WebCore::ScriptExecutionContext *v117;
  uint64_t v118;
  WebCore::InspectorCanvasAgent *v119;
  WebCore::InspectorInstrumentation *v120;
  WebCore::ScriptExecutionContext *v121;
  uint64_t v122;
  WebCore::InspectorCanvasAgent *v123;
  WebCore::InspectorInstrumentation *v124;
  WebCore::ScriptExecutionContext *v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  WTF::StringImpl *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  JSC::JSGlobalObject *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  JSC::VM *v157;
  _QWORD v158[2];
  WTF::StringImpl *v159;
  int v160[2];
  _QWORD v161[2];
  char v162;
  _DWORD *v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  _DWORD *v171;
  char v172;
  _DWORD *v173;
  char v174;
  _DWORD *v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v157 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v157, "WebGL2RenderingContext", "copyTexSubImage2D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v157, "WebGL2RenderingContext", "copyTexSubImage2D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 7)
  {
    v72.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v72);
  }
  else
  {
    v156 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v160);
    if (v160[1])
    {
      return 0;
    }
    else
    {
      v12 = *((_QWORD *)a2 + 7);
      v161[0] = v12;
      v13 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v12 < 0xFFFE000000000000)
      {
        v42 = v12 - 0x2000000000000;
        if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
          v42 = v137;
        }
        v43 = (v42 >> 52) & 0x7FF;
        v44 = v43 - 1023;
        v45 = v42 >> (51 - (v42 >> 52));
        if (v43 > 0x433)
          LODWORD(v45) = v42 << ((v42 >> 52) - 51);
        if (v43 >= 0x41F)
          v46 = v45;
        else
          v46 = (((1 << ((v42 >> 52) + 1)) - 1) & v45) + (1 << ((v42 >> 52) + 1));
        if ((v42 & 0x8000000000000000) == 0)
          v47 = v46;
        else
          v47 = -v46;
        if (v44 <= 0x53)
          v14 = v47;
        else
          v14 = 0;
      }
      else
      {
        v14 = v12;
      }
      if (*((_DWORD *)v13 + 20) && (v73 = v14, v74 = JSC::VM::hasExceptionsAfterHandlingTraps(v13), v14 = v73, v74))
      {
        return 0;
      }
      else
      {
        v15 = *((_QWORD *)a2 + 8);
        v161[0] = v15;
        v16 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v15 < 0xFFFE000000000000)
        {
          v48 = v15 - 0x2000000000000;
          if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v138 = v14;
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
            v14 = v138;
            v48 = v139;
          }
          v49 = (v48 >> 52) & 0x7FF;
          if ((v49 - 1023) <= 0x53)
          {
            v60 = v48 >> (51 - (v48 >> 52));
            if (v49 > 0x433)
              LODWORD(v60) = v48 << ((v48 >> 52) - 51);
            if (v49 >= 0x41F)
              v61 = v60;
            else
              v61 = (((1 << ((v48 >> 52) + 1)) - 1) & v60) + (1 << ((v48 >> 52) + 1));
            if ((v48 & 0x8000000000000000) == 0)
              v17 = v61;
            else
              v17 = -v61;
          }
          else
          {
            v17 = 0;
          }
        }
        else
        {
          v17 = v15;
        }
        if (*((_DWORD *)v16 + 20) && (v75 = v14, v76 = JSC::VM::hasExceptionsAfterHandlingTraps(v16), v14 = v75, v76))
        {
          return 0;
        }
        else
        {
          v18 = *((_QWORD *)a2 + 9);
          v161[0] = v18;
          v19 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v18 < 0xFFFE000000000000)
          {
            v50 = v18 - 0x2000000000000;
            if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v140 = v14;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
              v14 = v140;
              v50 = v141;
            }
            v51 = (v50 >> 52) & 0x7FF;
            if ((v51 - 1023) <= 0x53)
            {
              v62 = v50 >> (51 - (v50 >> 52));
              if (v51 > 0x433)
                LODWORD(v62) = v50 << ((v50 >> 52) - 51);
              if (v51 >= 0x41F)
                v63 = v62;
              else
                v63 = (((1 << ((v50 >> 52) + 1)) - 1) & v62) + (1 << ((v50 >> 52) + 1));
              if ((v50 & 0x8000000000000000) == 0)
                v20 = v63;
              else
                v20 = -v63;
            }
            else
            {
              v20 = 0;
            }
          }
          else
          {
            v20 = v18;
          }
          if (*((_DWORD *)v19 + 20) && (v77 = v14, v78 = JSC::VM::hasExceptionsAfterHandlingTraps(v19), v14 = v77, v78))
          {
            return 0;
          }
          else
          {
            v21 = *((_QWORD *)a2 + 10);
            v161[0] = v21;
            v22 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v21 < 0xFFFE000000000000)
            {
              v52 = v21 - 0x2000000000000;
              if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v142 = v14;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
                v14 = v142;
                v52 = v143;
              }
              v53 = (v52 >> 52) & 0x7FF;
              if ((v53 - 1023) <= 0x53)
              {
                v64 = v52 >> (51 - (v52 >> 52));
                if (v53 > 0x433)
                  LODWORD(v64) = v52 << ((v52 >> 52) - 51);
                if (v53 >= 0x41F)
                  v65 = v64;
                else
                  v65 = (((1 << ((v52 >> 52) + 1)) - 1) & v64) + (1 << ((v52 >> 52) + 1));
                if ((v52 & 0x8000000000000000) == 0)
                  v23 = v65;
                else
                  v23 = -v65;
              }
              else
              {
                v23 = 0;
              }
            }
            else
            {
              v23 = v21;
            }
            if (*((_DWORD *)v22 + 20)
              && (v79 = v14, v80 = JSC::VM::hasExceptionsAfterHandlingTraps(v22), v14 = v79, v80))
            {
              return 0;
            }
            else
            {
              v24 = *((_QWORD *)a2 + 11);
              v161[0] = v24;
              v25 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v24 < 0xFFFE000000000000)
              {
                v54 = v24 - 0x2000000000000;
                if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  v144 = v14;
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
                  v14 = v144;
                  v54 = v145;
                }
                v55 = (v54 >> 52) & 0x7FF;
                if ((v55 - 1023) <= 0x53)
                {
                  v66 = v54 >> (51 - (v54 >> 52));
                  if (v55 > 0x433)
                    LODWORD(v66) = v54 << ((v54 >> 52) - 51);
                  if (v55 >= 0x41F)
                    v67 = v66;
                  else
                    v67 = (((1 << ((v54 >> 52) + 1)) - 1) & v66) + (1 << ((v54 >> 52) + 1));
                  if ((v54 & 0x8000000000000000) == 0)
                    v26 = v67;
                  else
                    v26 = -v67;
                }
                else
                {
                  v26 = 0;
                }
              }
              else
              {
                v26 = v24;
              }
              if (*((_DWORD *)v25 + 20)
                && (v81 = v14, v82 = JSC::VM::hasExceptionsAfterHandlingTraps(v25), v14 = v81, v82))
              {
                return 0;
              }
              else
              {
                v27 = *((_QWORD *)a2 + 12);
                v161[0] = v27;
                v28 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v27 < 0xFFFE000000000000)
                {
                  v56 = v27 - 0x2000000000000;
                  if (v27 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    v154 = v14;
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, this);
                    v20 = v20;
                    v14 = v154;
                    v56 = v146;
                  }
                  v57 = (v56 >> 52) & 0x7FF;
                  if ((v57 - 1023) <= 0x53)
                  {
                    v68 = v56 >> (51 - (v56 >> 52));
                    if (v57 > 0x433)
                      LODWORD(v68) = v56 << ((v56 >> 52) - 51);
                    if (v57 >= 0x41F)
                      v69 = v68;
                    else
                      v69 = (((1 << ((v56 >> 52) + 1)) - 1) & v68) + (1 << ((v56 >> 52) + 1));
                    if ((v56 & 0x8000000000000000) == 0)
                      v29 = v69;
                    else
                      v29 = -v69;
                  }
                  else
                  {
                    v29 = 0;
                  }
                }
                else
                {
                  v29 = v27;
                }
                if (*((_DWORD *)v28 + 20)
                  && (v152 = v14,
                      v83 = v29,
                      v84 = JSC::VM::hasExceptionsAfterHandlingTraps(v28),
                      v29 = v83,
                      v14 = v152,
                      v84))
                {
                  return 0;
                }
                else
                {
                  v30 = *((_QWORD *)a2 + 13);
                  v161[0] = v30;
                  v31 = (JSC::VM *)*((_QWORD *)this + 7);
                  if (v30 < 0xFFFE000000000000)
                  {
                    v58 = v30 - 0x2000000000000;
                    if (v30 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      v147 = this;
                      v148 = v14;
                      v149 = v29;
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v161, v147);
                      v29 = v149;
                      v14 = v148;
                      v58 = v150;
                    }
                    v59 = (v58 >> 52) & 0x7FF;
                    if ((v59 - 1023) <= 0x53)
                    {
                      v70 = v58 >> (51 - (v58 >> 52));
                      if (v59 > 0x433)
                        LODWORD(v70) = v58 << ((v58 >> 52) - 51);
                      if (v59 >= 0x41F)
                        v71 = v70;
                      else
                        v71 = (((1 << ((v58 >> 52) + 1)) - 1) & v70) + (1 << ((v58 >> 52) + 1));
                      if ((v58 & 0x8000000000000000) == 0)
                        v32 = v71;
                      else
                        v32 = -v71;
                    }
                    else
                    {
                      v32 = 0;
                    }
                  }
                  else
                  {
                    v32 = v30;
                  }
                  if (!*((_DWORD *)v31 + 20))
                    goto LABEL_35;
                  v85 = v31;
                  v86 = v14;
                  v155 = v32;
                  v87 = v29;
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v85);
                  v29 = v87;
                  v32 = v155;
                  v14 = v86;
                  if (hasExceptionsAfterHandlingTraps)
                  {
                    return 0;
                  }
                  else
                  {
LABEL_35:
                    v33 = (WTF::StringImpl *)v156;
                    if (*(_BYTE *)(v156 + 33))
                    {
                      v89 = v29;
                      v151 = v20;
                      v153 = v14;
                      v90 = (WebCore::CanvasRenderingContext *)(v156 + 8);
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      v159 = (WTF::StringImpl *)v161[0];
                      v91 = v160[0];
                      v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v92
                        && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
                        && (v95 = *(WebCore::InspectorCanvasAgent **)(v94 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v95, v90, v91, (uint64_t)v161);
                      }
                      else
                      {
                        LOBYTE(v161[0]) = 0;
                        v162 = 0;
                      }
                      v96 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v96
                        && (v98 = WebCore::InspectorInstrumentation::instrumentingAgents(v96, v97)) != 0
                        && (v99 = *(WebCore::InspectorCanvasAgent **)(v98 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v99, v90, v153, (uint64_t)&v163);
                      }
                      else
                      {
                        LOBYTE(v163) = 0;
                        v164 = 0;
                      }
                      v100 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v100
                        && (v102 = WebCore::InspectorInstrumentation::instrumentingAgents(v100, v101)) != 0
                        && (v103 = *(WebCore::InspectorCanvasAgent **)(v102 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v103, v90, v17, (uint64_t)&v165);
                      }
                      else
                      {
                        LOBYTE(v165) = 0;
                        v166 = 0;
                      }
                      v104 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v104
                        && (v106 = WebCore::InspectorInstrumentation::instrumentingAgents(v104, v105)) != 0
                        && (v107 = *(WebCore::InspectorCanvasAgent **)(v106 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v107, v90, v151, (uint64_t)&v167);
                      }
                      else
                      {
                        LOBYTE(v167) = 0;
                        v168 = 0;
                      }
                      v108 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v108
                        && (v110 = WebCore::InspectorInstrumentation::instrumentingAgents(v108, v109)) != 0
                        && (v111 = *(WebCore::InspectorCanvasAgent **)(v110 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v111, v90, v23, (uint64_t)&v169);
                      }
                      else
                      {
                        LOBYTE(v169) = 0;
                        v170 = 0;
                      }
                      v112 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v112
                        && (v114 = WebCore::InspectorInstrumentation::instrumentingAgents(v112, v113)) != 0
                        && (v115 = *(WebCore::InspectorCanvasAgent **)(v114 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v115, v90, v26, (uint64_t)&v171);
                      }
                      else
                      {
                        LOBYTE(v171) = 0;
                        v172 = 0;
                      }
                      v116 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v116
                        && (v118 = WebCore::InspectorInstrumentation::instrumentingAgents(v116, v117)) != 0
                        && (v119 = *(WebCore::InspectorCanvasAgent **)(v118 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v119, v90, v89, (uint64_t)&v173);
                      }
                      else
                      {
                        LOBYTE(v173) = 0;
                        v174 = 0;
                      }
                      v120 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v120
                        && (v122 = WebCore::InspectorInstrumentation::instrumentingAgents(v120, v121)) != 0
                        && (v123 = *(WebCore::InspectorCanvasAgent **)(v122 + 96)) != 0)
                      {
                        WebCore::InspectorCanvasAgent::processArgument(v123, v90, v32, (uint64_t)&v175);
                      }
                      else
                      {
                        LOBYTE(v175) = 0;
                        v176 = 0;
                      }
                      v158[0] = v161;
                      v158[1] = 8;
                      v124 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v156 + 40) + 144))(*(_QWORD *)(v156 + 40));
                      if (v124)
                      {
                        v126 = WebCore::InspectorInstrumentation::instrumentingAgents(v124, v125);
                        if (v126)
                        {
                          v127 = *(_QWORD *)(v126 + 96);
                          if (v127)
                            WebCore::InspectorCanvasAgent::recordAction(v127, v90, (const WTF::StringImpl *)&v159, v158);
                        }
                      }
                      v14 = v153;
                      v23 = v23;
                      v20 = v151;
                      v26 = v26;
                      v29 = v89;
                      if (v176)
                      {
                        v128 = v175;
                        v175 = 0;
                        if (v128)
                        {
                          if (*v128 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v128;
                          }
                        }
                      }
                      if (v174)
                      {
                        v129 = v173;
                        v173 = 0;
                        if (v129)
                        {
                          if (*v129 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v129;
                          }
                        }
                      }
                      if (v172)
                      {
                        v130 = v171;
                        v171 = 0;
                        if (v130)
                        {
                          if (*v130 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v130;
                          }
                        }
                      }
                      if (v170)
                      {
                        v131 = v169;
                        v169 = 0;
                        if (v131)
                        {
                          if (*v131 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v131;
                          }
                        }
                      }
                      if (v168)
                      {
                        v132 = v167;
                        v167 = 0;
                        if (v132)
                        {
                          if (*v132 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v132;
                          }
                        }
                      }
                      if (v166)
                      {
                        v133 = v165;
                        v165 = 0;
                        if (v133)
                        {
                          if (*v133 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v133;
                          }
                        }
                      }
                      if (v164)
                      {
                        v134 = v163;
                        v163 = 0;
                        if (v134)
                        {
                          if (*v134 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v134;
                          }
                        }
                      }
                      if (v162)
                      {
                        v135 = (_DWORD *)v161[0];
                        v161[0] = 0;
                        if (v135)
                        {
                          if (*v135 == 1)
                          {
                            WTF::JSONImpl::Value::operator delete();
                            v29 = v89;
                            v26 = v26;
                            v23 = v23;
                            v20 = v151;
                            v14 = v153;
                          }
                          else
                          {
                            --*v135;
                          }
                        }
                      }
                      v136 = v159;
                      v159 = 0;
                      if (v136)
                      {
                        if (*(_DWORD *)v136 == 2)
                        {
                          WTF::StringImpl::destroy(v136, v125);
                          v29 = v89;
                          v26 = v26;
                          v23 = v23;
                          v20 = v151;
                          v14 = v153;
                        }
                        else
                        {
                          *(_DWORD *)v136 -= 2;
                        }
                      }
                      v33 = (WTF::StringImpl *)v156;
                    }
                    if (*((_BYTE *)v33 + 364))
                    {
                      return 10;
                    }
                    else
                    {
                      v35 = v29;
                      v36 = v14;
                      v37 = v160[0];
                      WebCore::WebGLRenderingContextBase::validateTexture2DBinding(v33, (uint64_t)"copyTexSubImage2D", 18, v160[0], v161);
                      if (v161[0])
                      {
                        if (*(_DWORD *)(v161[0] + 8) == 1)
                          (*(void (**)(void))(*(_QWORD *)v161[0] + 8))();
                        else
                          --*(_DWORD *)(v161[0] + 8);
                        WebCore::WebGLRenderingContextBase::clearIfComposited(v156, 1, 0, v38, v39, v40, v41);
                        (*(void (**)(_QWORD, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, int))(**(_QWORD **)(v156 + 88) + 184))(*(_QWORD *)(v156 + 88), v37, v36, v17, v20, v23, v26, v35, v32);
                      }
                      return 10;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createBuffer");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createBuffer");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLBuffer::create((WebCore::WebGLBuffer *)v11, a2, v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLBuffer>((uint64_t)this, v13, (WTF *)v21[0]);
  if (v14[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  return v12;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createFramebuffer");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createFramebuffer");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLFramebuffer::create((WebCore::WebGLFramebuffer *)v11, a2, v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLFramebuffer>((uint64_t)this, v13, (WTF *)v21[0]);
  if (v14[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  return v12;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WebCore::WebGLProgram *v13;
  unint64_t v14;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WebCore::WebGLProgram *v22[2];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "createProgram");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "createProgram");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22[0] = 0;
    v22[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 96);
        if (v19)
          WebCore::InspectorCanvasAgent::recordAction(v19, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v23, v22);
      }
    }
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  v12 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLRenderingContextBase::createProgram(v11, v22);
  v13 = v22[0];
  if (!v22[0])
    return 2;
  v14 = WebCore::wrap<WebCore::WebGLProgram>((uint64_t)this, v12, v22[0]);
  if (*((_DWORD *)v13 + 2) == 1)
    (*(void (**)(WebCore::WebGLProgram *))(*(_QWORD *)v13 + 8))(v13);
  else
    --*((_DWORD *)v13 + 2);
  return v14;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createRenderbuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unint64_t v14;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22[2];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "createRenderbuffer");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "createRenderbuffer");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22[0] = 0;
    v22[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 96);
        if (v19)
          WebCore::InspectorCanvasAgent::recordAction(v19, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v23, v22);
      }
    }
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  v12 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLRenderingContextBase::createRenderbuffer(v11, (uint64_t *)v22);
  v13 = v22[0];
  if (!v22[0])
    return 2;
  v14 = WebCore::wrap<WebCore::WebGLRenderbuffer>((uint64_t)this, v12, v22[0]);
  if (*((_DWORD *)v13 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
  else
    --*((_DWORD *)v13 + 2);
  return v14;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  JSValue v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  WebCore::InspectorCanvasAgent *v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  unsigned int v32[2];
  WTF *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "createShader");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "createShader");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v18);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
  if (v32[1])
    return 0;
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v32[0];
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v19
      && (v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20)) != 0
      && (v22 = *(WebCore::InspectorCanvasAgent **)(v21 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), v13, (uint64_t)v33);
    }
    else
    {
      LOBYTE(v33[0]) = 0;
      v34 = 0;
    }
    v30[0] = v33;
    v30[1] = 1;
    v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v23)
    {
      v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 96);
        if (v26)
          WebCore::InspectorCanvasAgent::recordAction(v26, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v31, v30);
      }
    }
    if (v34)
    {
      v27 = v33[0];
      v33[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v27;
      }
    }
    v28 = v31;
    v31 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v24);
      else
        *(_DWORD *)v28 -= 2;
    }
    v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v13 = v32[0];
  }
  WebCore::WebGLRenderingContextBase::createShader(v11, v13, (uint64_t *)v33);
  v14 = v33[0];
  if (!v33[0])
    return 2;
  v15 = WebCore::wrap<WebCore::WebGLShader>((uint64_t)this, v12, v33[0]);
  if (*((_DWORD *)v14 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
  else
    --*((_DWORD *)v14 + 2);
  return v15;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createTexture");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createTexture");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLTexture::create((WebCore::WebGLTexture *)v11, a2, v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLTexture>((uint64_t)this, v13, (WTF *)v21[0]);
  if (v14[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  return v12;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_cullFace(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSValue v13;
  unsigned int v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "cullFace");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "cullFace");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 88) + 240))(*(_QWORD *)(v11 + 88), v28[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLBuffer *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  WTF::Lock *v26;
  int v27;
  JSValue v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  WTF::StringImpl *v38;
  unsigned __int8 *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned __int8 *v42;
  char v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteBuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteBuffer");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v42 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLBuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLBuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLBuffer **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 0, "buffer", 7, "WebGL2RenderingContext", 23, a8, "deleteBuffer", 13, "WebGLBuffer", 12);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)&v42);
      }
      else
      {
        LOBYTE(v42) = 0;
        v44 = 0;
      }
      v40[0] = &v42;
      v40[1] = 1;
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33)
      {
        v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 96);
          if (v36)
            WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v41, v40);
        }
      }
      if (v44)
      {
        v37 = v42;
        v42 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v37;
        }
      }
      v38 = v41;
      v41 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    v42 = (unsigned __int8 *)(v16 + 96);
    v43 = 1;
    if (__ldaxr((unsigned __int8 *)(v16 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v16 + 96)))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C]();
LABEL_33:
    if (WebCore::WebGLRenderingContextBase::deleteObject(v16, (uint64_t)&v42, v18))
      (*(void (**)(uint64_t, unsigned __int8 **, WebCore::WebGLBuffer *))(*(_QWORD *)v16 + 256))(v16, &v42, v18);
    if (!v43)
      return 10;
    v26 = (WTF::Lock *)v42;
    v27 = __ldxr(v42);
    if (v27 == 1)
    {
      if (!__stlxr(0, v42))
        return 10;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v26);
    return 10;
  }
  v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException((JSC::VM *)v9, this, v28);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLFramebuffer *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteFramebuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteFramebuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLFramebuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLFramebuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLFramebuffer **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "framebuffer", 12, "WebGL2RenderingContext", 23, a8, "deleteFramebuffer", 18, "WebGLFramebuffer", 17);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGL2RenderingContext::deleteFramebuffer((WebCore::WebGL2RenderingContext *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLProgram *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteProgram");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteProgram");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLProgram::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "deleteProgram", 14, "WebGLProgram", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WTF::StringImpl *)(v16 + 8), (uint64_t)v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGLRenderingContextBase::deleteProgram((WebCore::WebGLRenderingContextBase *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteRenderbuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLRenderbuffer *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteRenderbuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteRenderbuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLRenderbuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLRenderbuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLRenderbuffer **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "renderbuffer", 13, "WebGL2RenderingContext", 23, a8, "deleteRenderbuffer", 19, "WebGLRenderbuffer", 18);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGLRenderingContextBase::deleteRenderbuffer((WebCore::WebGLRenderingContextBase *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLShader *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  WTF::Lock *v26;
  int v27;
  JSValue v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  WTF::StringImpl *v38;
  unsigned __int8 *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned __int8 *v42;
  char v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteShader");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteShader");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v42 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLShader::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLShader::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLShader **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "deleteShader", 13, "WebGLShader", 12);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)&v42);
      }
      else
      {
        LOBYTE(v42) = 0;
        v44 = 0;
      }
      v40[0] = &v42;
      v40[1] = 1;
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33)
      {
        v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 96);
          if (v36)
            WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v41, v40);
        }
      }
      if (v44)
      {
        v37 = v42;
        v42 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v37;
        }
      }
      v38 = v41;
      v41 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    v42 = (unsigned __int8 *)(v16 + 96);
    v43 = 1;
    if (__ldaxr((unsigned __int8 *)(v16 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v16 + 96)))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C]();
LABEL_33:
    WebCore::WebGLRenderingContextBase::deleteObject(v16, (uint64_t)&v42, v18);
    if (v43)
    {
      v26 = (WTF::Lock *)v42;
      v27 = __ldxr(v42);
      if (v27 == 1)
      {
        if (!__stlxr(0, v42))
          return 10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v26);
    }
    return 10;
  }
  v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException((JSC::VM *)v9, this, v28);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLTexture *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteTexture");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteTexture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLTexture::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLTexture::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLTexture **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "texture", 8, "WebGL2RenderingContext", 23, a8, "deleteTexture", 14, "WebGLTexture", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGLRenderingContextBase::deleteTexture((WebCore::WebGLRenderingContextBase *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_depthFunc(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSValue v13;
  unsigned int v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "depthFunc");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "depthFunc");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 88) + 296))(*(_QWORD *)(v11 + 88), v28[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_depthMask(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v16;
  WebCore::InspectorInstrumentation *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  WebCore::InspectorCanvasAgent *v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  BOOL v27;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  int *v32;
  int v33;
  JSC::VM *v34;
  _QWORD v35[2];
  WTF::StringImpl *v36;
  _QWORD v37[2];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "WebGL2RenderingContext", "depthMask");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v34, "WebGL2RenderingContext", "depthMask");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  v11 = *((_QWORD *)a2 + 6);
  if (v11 >= 0xFFFE000000000000)
  {
    v27 = (_DWORD)v11 == 0;
    goto LABEL_59;
  }
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      v13 = v11 == 7;
      goto LABEL_17;
    }
    v30 = *(unsigned __int8 *)(v11 + 5);
    if (v30 == 3)
    {
      v33 = *(_DWORD *)(v11 + 8);
    }
    else
    {
      if (v30 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v13 = 1;
          goto LABEL_17;
        }
        v27 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_59;
      }
      v31 = *(_QWORD *)(v11 + 8);
      if ((v31 & 1) != 0)
        v32 = (int *)(v11 + 16);
      else
        v32 = (int *)(v31 + 4);
      v33 = *v32;
    }
    v27 = v33 == 0;
LABEL_59:
    v13 = !v27;
    goto LABEL_17;
  }
  v28 = v12 <= 0.0;
  v29 = v12 < 0.0;
  v13 = !v28 || v29;
LABEL_17:
  v14 = *(_QWORD *)(v5 + 24);
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v14 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v17
      && (v19 = WebCore::InspectorInstrumentation::instrumentingAgents(v17, v18)) != 0
      && (v20 = *(WebCore::InspectorCanvasAgent **)(v19 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v20, (WebCore::CanvasRenderingContext *)(v14 + 8), (WTF::JSONImpl::Value *)v13, (uint64_t)v37);
    }
    else
    {
      LOBYTE(v37[0]) = 0;
      v38 = 0;
    }
    v35[0] = v37;
    v35[1] = 1;
    v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v21)
    {
      v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 96);
        if (v24)
          WebCore::InspectorCanvasAgent::recordAction(v24, (WebCore::CanvasRenderingContext *)(v14 + 8), (const WTF::StringImpl *)&v36, v35);
      }
    }
    if (v38)
    {
      v25 = (_DWORD *)v37[0];
      v37[0] = 0;
      if (v25)
      {
        if (*v25 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v25;
      }
    }
    v26 = v36;
    v36 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v22);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (!*(_BYTE *)(v14 + 364))
  {
    *(_BYTE *)(v14 + 424) = v13;
    (*(void (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v14 + 88) + 304))(*(_QWORD *)(v14 + 88), v13, a3);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_depthRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  float v19;
  JSValue v21;
  int v22;
  int v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  double v39;
  double v40;
  JSC::VM *v41;
  _QWORD v42[2];
  WTF::StringImpl *v43;
  _QWORD v44[2];
  char v45;
  _DWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "depthRange");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "depthRange");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v44[0] = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v44, this);
    v14 = v39;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    *(float *)&v22 = -INFINITY;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    *(float *)&v22 = INFINITY;
  }
  v15 = *(float *)&v22;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v44[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v44, this);
    v18 = v40;
  }
  else
  {
    *(_QWORD *)&v18 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v23 = -INFINITY;
LABEL_50:
    v19 = *(float *)&v23;
    goto LABEL_27;
  }
  if (v18 > 3.40282347e38)
  {
    *(float *)&v23 = INFINITY;
    goto LABEL_50;
  }
  v19 = v18;
LABEL_27:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v44);
    }
    else
    {
      LOBYTE(v44[0]) = 0;
      v45 = 0;
    }
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v46);
    }
    else
    {
      LOBYTE(v46) = 0;
      v47 = 0;
    }
    v42[0] = v44;
    v42[1] = 2;
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v32)
    {
      v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 96);
        if (v35)
          WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v43, v42);
      }
    }
    if (v47)
    {
      v36 = v46;
      v46 = 0;
      if (v36)
      {
        if (*v36 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v36;
      }
    }
    if (v45)
    {
      v37 = (_DWORD *)v44[0];
      v44[0] = 0;
      if (v37)
      {
        if (*v37 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v37;
      }
    }
    v38 = v43;
    v43 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v33);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
  {
    if (v15 <= v19)
      (*(void (**)(_QWORD, float, float))(**(_QWORD **)(v12 + 88) + 312))(*(_QWORD *)(v12 + 88), v15, v19);
    else
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1282, (uint64_t)"depthRange", 11, (uint64_t)"zNear > zFar", 13);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_detachShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  char **v28;
  BOOL v29;
  WebCore::WebGLShader *v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  _QWORD v51[2];
  char v52;
  _DWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "detachShader");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "detachShader");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v51[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLProgram::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
    }
    if (v19 && (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) != 0)
    {
      v25 = *((_QWORD *)a2 + 7);
      v51[0] = v9;
      if ((v25 & 0xFFFE000000000002) != 0)
        goto LABEL_37;
      v26 = *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C);
      v27 = *(_DWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C) != 0;
      v28 = (char **)(16 * v26);
      if ((_DWORD)v26)
        v29 = v28 == &WebCore::JSWebGLShader::s_info;
      else
        v29 = 1;
      if (!v29)
      {
        do
        {
          v28 = (char **)v28[2];
          v27 = v28 != 0;
        }
        while (v28 != &WebCore::JSWebGLShader::s_info && v28 != 0);
      }
      if (v27 && (v31 = *(WebCore::WebGLShader **)(v25 + 24)) != 0)
      {
        if (*(_BYTE *)(v16 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v33
            && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
            && (v36 = *(_QWORD *)(v35 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v51);
          }
          else
          {
            LOBYTE(v51[0]) = 0;
            v52 = 0;
          }
          v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v37
            && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
            && (v40 = *(_QWORD *)(v39 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v31, (uint64_t)&v53);
          }
          else
          {
            LOBYTE(v53) = 0;
            v54 = 0;
          }
          v49[0] = v51;
          v49[1] = 2;
          v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v41)
          {
            v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
            if (v43)
            {
              v44 = *(_QWORD *)(v43 + 96);
              if (v44)
                WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v50, v49);
            }
          }
          if (v54)
          {
            v45 = v53;
            v53 = 0;
            if (v45)
            {
              if (*v45 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v45;
            }
          }
          if (v52)
          {
            v46 = (_DWORD *)v51[0];
            v51[0] = 0;
            if (v46)
            {
              if (*v46 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v46;
            }
          }
          v47 = v50;
          v50 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v42);
            else
              *(_DWORD *)v47 -= 2;
          }
        }
        WebCore::WebGLRenderingContextBase::detachShader((WTF::StringImpl *)v16, v24, v31);
        return 10;
      }
      else
      {
LABEL_37:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v51, 1, "shader", 7, "WebGL2RenderingContext", 23, a8, "detachShader", 13, "WebGLShader", 12);
        return 0;
      }
    }
    else
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v51, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "detachShader", 13, "WebGLProgram", 13);
      return 0;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_disable(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "disable");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "disable");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      if (!*(_BYTE *)(v11 + 364)
        && (*(unsigned int (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 312))(v11, "disable", 8, v12))
      {
        if ((_DWORD)v12 == 35977)
        {
          *(_BYTE *)(v11 + 425) = 0;
        }
        else if ((_DWORD)v12 == 3089)
        {
          *(_BYTE *)(v11 + 404) = 0;
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 328))(*(_QWORD *)(v11 + 88), v12);
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_disableVertexAttribArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  JSValue v16;
  WebCore::InspectorInstrumentation *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  WebCore::InspectorCanvasAgent *v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  JSC::VM *v26;
  _QWORD v27[2];
  WTF::StringImpl *v28;
  _DWORD v29[2];
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "disableVertexAttribArray");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "WebGL2RenderingContext", "disableVertexAttribArray");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v29);
    if (v29[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v13 = v29[0];
        v17 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v17
          && (v19 = WebCore::InspectorInstrumentation::instrumentingAgents(v17, v18)) != 0
          && (v20 = *(WebCore::InspectorCanvasAgent **)(v19 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v20, (WebCore::CanvasRenderingContext *)(v11 + 8), v13, (uint64_t)v30);
        }
        else
        {
          LOBYTE(v30[0]) = 0;
          v31 = 0;
        }
        v27[0] = v30;
        v27[1] = 1;
        v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v21)
        {
          v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22);
          if (v23)
          {
            v24 = *(_QWORD *)(v23 + 96);
            if (v24)
              WebCore::InspectorCanvasAgent::recordAction(v24, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v28, v27);
          }
        }
        if (v31)
        {
          v25 = (_DWORD *)v30[0];
          v30[0] = 0;
          if (v25)
          {
            if (*v25 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v25;
          }
        }
        result = (uint64_t)v28;
        v28 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v22);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v13 = v29[0];
      }
      if (*(_BYTE *)(v11 + 364))
        return 10;
      if (*(_DWORD *)(v11 + 164) <= v13)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v11, 1281, (uint64_t)"disableVertexAttribArray", 25, (uint64_t)"index out of range", 19);
        return 10;
      }
      v14 = *(_QWORD *)(v11 + 144);
      if (*(unsigned int *)(v14 + 68) > (unint64_t)(int)v13)
      {
        v15 = (_BYTE *)(*(_QWORD *)(v14 + 56) + 56 * (int)v13);
        if (*v15)
        {
          *v15 = 0;
          if (*(_BYTE *)(v14 + 73))
            *(_BYTE *)(v14 + 73) = 0;
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 336))(*(_QWORD *)(v11 + 88), v13);
        return 10;
      }
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_drawArrays(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  JSValue v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  unsigned int v59[2];
  _QWORD v60[2];
  char v61;
  _DWORD *v62;
  char v63;
  _DWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "drawArrays");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "drawArrays");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v35);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v59);
    if (v59[1])
    {
      return 0;
    }
    else
    {
      v17 = *((_QWORD *)a2 + 7);
      v60[0] = v17;
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v17 < 0xFFFE000000000000)
      {
        v25 = v17 - 0x2000000000000;
        if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v60, this);
          v25 = v13.n128_u64[0];
        }
        v26 = (v25 >> 52) & 0x7FF;
        v27 = v26 - 1023;
        v28 = v25 >> (51 - (v25 >> 52));
        if (v26 > 0x433)
          LODWORD(v28) = v25 << ((v25 >> 52) - 51);
        if (v26 >= 0x41F)
          v29 = v28;
        else
          v29 = (((1 << ((v25 >> 52) + 1)) - 1) & v28) + (1 << ((v25 >> 52) + 1));
        if ((v25 & 0x8000000000000000) == 0)
          v30 = v29;
        else
          v30 = -v29;
        if (v27 <= 0x53)
          v19 = v30;
        else
          v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      {
        return 0;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 8);
        v60[0] = v20;
        v21 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v20 < 0xFFFE000000000000)
        {
          v31 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v60, this);
            v31 = v13.n128_u64[0];
          }
          v32 = (v31 >> 52) & 0x7FF;
          if ((v32 - 1023) <= 0x53)
          {
            v33 = v31 >> (51 - (v31 >> 52));
            if (v32 > 0x433)
              LODWORD(v33) = v31 << ((v31 >> 52) - 51);
            if (v32 >= 0x41F)
              v34 = v33;
            else
              v34 = (((1 << ((v31 >> 52) + 1)) - 1) & v33) + (1 << ((v31 >> 52) + 1));
            if ((v31 & 0x8000000000000000) == 0)
              v22 = v34;
            else
              v22 = -v34;
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v22 = v20;
        }
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          return 0;
        }
        else
        {
          if (*(_BYTE *)(v12 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v23 = v59[0];
            v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v36
              && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
              && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)v60);
            }
            else
            {
              LOBYTE(v60[0]) = 0;
              v61 = 0;
            }
            v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v40
              && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
              && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v62);
            }
            else
            {
              LOBYTE(v62) = 0;
              v63 = 0;
            }
            v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v44
              && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
              && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)&v64);
            }
            else
            {
              LOBYTE(v64) = 0;
              v65 = 0;
            }
            v57[0] = v60;
            v57[1] = 3;
            v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v48)
            {
              v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
              if (v50)
              {
                v51 = *(_QWORD *)(v50 + 96);
                if (v51)
                  WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v58, v57);
              }
            }
            if (v65)
            {
              v52 = v64;
              v64 = 0;
              if (v52)
              {
                if (*v52 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v52;
              }
            }
            if (v63)
            {
              v53 = v62;
              v62 = 0;
              if (v53)
              {
                if (*v53 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v53;
              }
            }
            if (v61)
            {
              v54 = (_DWORD *)v60[0];
              v60[0] = 0;
              if (v54)
              {
                if (*v54 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v54;
              }
            }
            v55 = v58;
            v58 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v49);
              else
                *(_DWORD *)v55 -= 2;
            }
          }
          else
          {
            v23 = v59[0];
          }
          WebCore::WebGLRenderingContextBase::drawArrays(v12, v23, v19, v22, v13, v14, v15, v16);
          return 10;
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_drawElements(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  double v23;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  JSValue v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  WebCore::InspectorCanvasAgent *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  JSC::VM *v60;
  _QWORD v61[2];
  WTF::StringImpl *v62;
  unsigned int v63[2];
  unsigned int v64[2];
  _QWORD v65[2];
  char v66;
  _DWORD *v67;
  char v68;
  _DWORD *v69;
  char v70;
  _DWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v60 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v60, "WebGL2RenderingContext", "drawElements");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v60, "WebGL2RenderingContext", "drawElements");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v31);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v64);
  if (v64[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v65[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v25 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v65, this);
      v25 = v59;
    }
    v26 = (v25 >> 52) & 0x7FF;
    v27 = v26 - 1023;
    v28 = v25 >> (51 - (v25 >> 52));
    if (v26 > 0x433)
      LODWORD(v28) = v25 << ((v25 >> 52) - 51);
    if (v26 >= 0x41F)
      v29 = v28;
    else
      v29 = (((1 << ((v25 >> 52) + 1)) - 1) & v28) + (1 << ((v25 >> 52) + 1));
    if ((v25 & 0x8000000000000000) == 0)
      v30 = v29;
    else
      v30 = -v29;
    if (v27 <= 0x53)
      v15 = v30;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v63);
  if (v63[1])
    return 0;
  v20 = *((_QWORD *)a2 + 9);
  v65[0] = v20;
  if (v20 < 0xFFFE000000000000)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v65, this);
      v23 = v16.n128_f64[0];
    }
    else
    {
      *(_QWORD *)&v23 = v20 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v16.n128_f64[0] = fabs(v23);
    v17.n128_u64[0] = 0x7FF0000000000000;
    if (v16.n128_f64[0] == INFINITY)
    {
      v21 = 0;
    }
    else
    {
      v16.n128_f64[0] = fmod(trunc(v23), 1.84467441e19);
      v17.n128_f64[0] = -v16.n128_f64[0];
      if (v16.n128_f64[0] < 0.0)
        v21 = -(uint64_t)(unint64_t)-v16.n128_f64[0];
      else
        v21 = (unint64_t)v16.n128_f64[0];
    }
  }
  else
  {
    v21 = (int)v20;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v62 = (WTF::StringImpl *)v65[0];
    v32 = v64[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v12 + 8), v32, (uint64_t)v65);
    }
    else
    {
      LOBYTE(v65[0]) = 0;
      v66 = 0;
    }
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v41 = v63[0];
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), v41, (uint64_t)&v69);
    }
    else
    {
      LOBYTE(v69) = 0;
      v70 = 0;
    }
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(WebCore::InspectorCanvasAgent **)(v48 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), v21, (uint64_t)&v71);
    }
    else
    {
      LOBYTE(v71) = 0;
      v72 = 0;
    }
    v61[0] = v65;
    v61[1] = 4;
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50)
    {
      v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 96);
        if (v53)
          WebCore::InspectorCanvasAgent::recordAction(v53, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v62, v61);
      }
    }
    if (v72)
    {
      v54 = v71;
      v71 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v70)
    {
      v55 = v69;
      v69 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if (v68)
    {
      v56 = v67;
      v67 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v66)
    {
      v57 = (_DWORD *)v65[0];
      v65[0] = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    v58 = v62;
    v62 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v51);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  WebCore::WebGLRenderingContextBase::drawElements(v12, v64[0], v15, v63[0], v21, v16, v17, v18, v19);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_enable(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "enable");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "enable");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      if (!*(_BYTE *)(v11 + 364)
        && (*(unsigned int (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 312))(v11, "enable", 7, v12))
      {
        if ((_DWORD)v12 == 35977)
        {
          *(_BYTE *)(v11 + 425) = 1;
        }
        else if ((_DWORD)v12 == 3089)
        {
          *(_BYTE *)(v11 + 404) = 1;
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 360))(*(_QWORD *)(v11 + 88), v12);
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_enableVertexAttribArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t (*v18)();
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  JSC::VM *v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  _DWORD v32[2];
  _QWORD v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "enableVertexAttribArray");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "enableVertexAttribArray");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
    if (v32[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v13 = v32[0];
        v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v20
          && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
          && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v11 + 8), v13, (uint64_t)v33);
        }
        else
        {
          LOBYTE(v33[0]) = 0;
          v34 = 0;
        }
        v30[0] = v33;
        v30[1] = 1;
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v24)
        {
          v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25);
          if (v26)
          {
            v27 = *(_QWORD *)(v26 + 96);
            if (v27)
              WebCore::InspectorCanvasAgent::recordAction(v27, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v31, v30);
          }
        }
        if (v34)
        {
          v28 = (_DWORD *)v33[0];
          v33[0] = 0;
          if (v28)
          {
            if (*v28 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v28;
          }
        }
        result = (uint64_t)v31;
        v31 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v25);
          else
            *(_DWORD *)result -= 2;
        }
      }
      else
      {
        v13 = v32[0];
      }
      if (*(_BYTE *)(v11 + 364))
        return 10;
      if (*(_DWORD *)(v11 + 164) <= v13)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v11, 1281, (uint64_t)"enableVertexAttribArray", 24, (uint64_t)"index out of range", 19);
        return 10;
      }
      v14 = *(_QWORD *)(v11 + 144);
      if (*(unsigned int *)(v14 + 68) > (unint64_t)(int)v13)
      {
        v15 = *(_QWORD *)(v14 + 56);
        v16 = (_BYTE *)(v15 + 56 * (int)v13);
        if (!*v16)
        {
          *v16 = 1;
          v17 = *(_QWORD *)(v15 + 56 * (int)v13 + 8);
          v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
          if (!v17)
            v18 = 0;
          if (v18 && *(_DWORD *)(v17 + 24))
          {
            if (*(_BYTE *)(v14 + 73))
              *(_BYTE *)(v14 + 73) = 0;
          }
          else
          {
            *(_WORD *)(v14 + 72) = 256;
          }
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 368))(*(_QWORD *)(v11 + 88), v13);
        return 10;
      }
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_finish(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::InspectorInstrumentation *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[2];
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "finish");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "finish");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17[0] = 0;
    v17[1] = 0;
    v11 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v11)
    {
      v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v11, v12);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 96);
        if (v14)
          WebCore::InspectorCanvasAgent::recordAction(v14, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v18, v17);
      }
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (!*(_BYTE *)(v9 + 364))
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 88) + 376))(*(_QWORD *)(v9 + 88));
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::InspectorInstrumentation *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[2];
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "flush");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "flush");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17[0] = 0;
    v17[1] = 0;
    v11 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v11)
    {
      v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v11, v12);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 96);
        if (v14)
          WebCore::InspectorCanvasAgent::recordAction(v14, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v18, v17);
      }
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (!*(_BYTE *)(v9 + 364))
    (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 88) + 384))(*(_QWORD *)(v9 + 88));
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_framebufferRenderbuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLRenderbuffer *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  JSValue v22;
  unsigned int v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  unsigned int v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  WebCore::InspectorCanvasAgent *v32;
  unsigned int v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  JSC::VM *v51;
  _QWORD v52[2];
  WTF::StringImpl *v53;
  unsigned int v54[2];
  unsigned int v55[2];
  unsigned int v56[2];
  _QWORD v57[2];
  char v58;
  _DWORD *v59;
  char v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v51 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "framebufferRenderbuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "framebufferRenderbuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v22);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v56);
    if (v56[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v55);
      if (v55[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v54);
        if (v54[1])
        {
          return 0;
        }
        else
        {
          v14 = *((_QWORD *)a2 + 9);
          if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
          {
            v15 = 0;
          }
          else
          {
            v57[0] = *((_QWORD *)this + 7);
            if ((v14 & 0xFFFE000000000002) != 0)
              goto LABEL_29;
            v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
            v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
            v18 = (char **)(16 * v16);
            if ((_DWORD)v16)
              v19 = v18 == &WebCore::JSWebGLRenderbuffer::s_info;
            else
              v19 = 1;
            if (!v19)
            {
              do
              {
                v18 = (char **)v18[2];
                v17 = v18 != 0;
              }
              while (v18 != &WebCore::JSWebGLRenderbuffer::s_info && v18 != 0);
            }
            if (!v17 || (v15 = *(WebCore::WebGLRenderbuffer **)(v14 + 24)) == 0)
            {
LABEL_29:
              WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v57, 3, "renderbuffer", 13, "WebGL2RenderingContext", 23, v13, "framebufferRenderbuffer", 24, "WebGLRenderbuffer", 18);
              return 0;
            }
          }
          if (*(_BYTE *)(v12 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v53 = (WTF::StringImpl *)v57[0];
            v23 = v56[0];
            v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v24
              && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
              && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)v57);
            }
            else
            {
              LOBYTE(v57[0]) = 0;
              v58 = 0;
            }
            v28 = v55[0];
            v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v29
              && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
              && (v32 = *(WebCore::InspectorCanvasAgent **)(v31 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v28, (uint64_t)&v59);
            }
            else
            {
              LOBYTE(v59) = 0;
              v60 = 0;
            }
            v33 = v54[0];
            v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v34
              && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
              && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), v33, (uint64_t)&v61);
            }
            else
            {
              LOBYTE(v61) = 0;
              v62 = 0;
            }
            v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v38
              && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
              && (v41 = *(_QWORD *)(v40 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v63);
            }
            else
            {
              LOBYTE(v63) = 0;
              v64 = 0;
            }
            v52[0] = v57;
            v52[1] = 4;
            v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v42)
            {
              v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
              if (v44)
              {
                v45 = *(_QWORD *)(v44 + 96);
                if (v45)
                  WebCore::InspectorCanvasAgent::recordAction(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v53, v52);
              }
            }
            if (v64)
            {
              v46 = v63;
              v63 = 0;
              if (v46)
              {
                if (*v46 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v46;
              }
            }
            if (v62)
            {
              v47 = v61;
              v61 = 0;
              if (v47)
              {
                if (*v47 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v47;
              }
            }
            if (v60)
            {
              v48 = v59;
              v59 = 0;
              if (v48)
              {
                if (*v48 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v48;
              }
            }
            if (v58)
            {
              v49 = (_DWORD *)v57[0];
              v57[0] = 0;
              if (v49)
              {
                if (*v49 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v49;
              }
            }
            v50 = v53;
            v53 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, v43);
              else
                *(_DWORD *)v50 -= 2;
            }
          }
          WebCore::WebGLRenderingContextBase::framebufferRenderbuffer((WTF::StringImpl *)v12, v56[0], v55[0], v54[0], v15);
          return 10;
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_framebufferTexture2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  WebCore::WebGLTexture *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  JSValue v29;
  unsigned int v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  unsigned int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  unsigned int v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  JSC::VM *v63;
  unint64_t v64;
  JSC::VM *v65;
  _QWORD v66[2];
  WTF::StringImpl *v67;
  unsigned int v68[2];
  unsigned int v69[2];
  unsigned int v70[2];
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v65 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "framebufferTexture2D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "framebufferTexture2D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v70);
    if (v70[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v69);
      if (v69[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v68);
        if (v68[1])
        {
          return 0;
        }
        else
        {
          v14 = *((_QWORD *)a2 + 9);
          v15 = (JSC::VM *)*((_QWORD *)this + 7);
          if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
          {
            v16 = 0;
          }
          else
          {
            v71[0] = *((_QWORD *)this + 7);
            if ((v14 & 0xFFFE000000000002) != 0)
              goto LABEL_29;
            v17 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
            v18 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
            v19 = (char **)(16 * v17);
            if ((_DWORD)v17)
              v20 = v19 == &WebCore::JSWebGLTexture::s_info;
            else
              v20 = 1;
            if (!v20)
            {
              do
              {
                v19 = (char **)v19[2];
                v18 = v19 != 0;
              }
              while (v19 != &WebCore::JSWebGLTexture::s_info && v19 != 0);
            }
            if (!v18 || (v16 = *(WebCore::WebGLTexture **)(v14 + 24)) == 0)
            {
LABEL_29:
              WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v71, 3, "texture", 8, "WebGL2RenderingContext", 23, v13, "framebufferTexture2D", 21, "WebGLTexture", 13);
              return 0;
            }
          }
          v23 = *((_QWORD *)a2 + 10);
          v71[0] = v23;
          if (v23 < 0xFFFE000000000000)
          {
            v25 = v23 - 0x2000000000000;
            if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v63 = v15;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v71, this);
              v15 = v63;
              v25 = v64;
            }
            v26 = (v25 >> 52) & 0x7FF;
            if ((v26 - 1023) <= 0x53)
            {
              v27 = v25 >> (51 - (v25 >> 52));
              if (v26 > 0x433)
                LODWORD(v27) = v25 << ((v25 >> 52) - 51);
              if (v26 >= 0x41F)
                v28 = v27;
              else
                v28 = (((1 << ((v25 >> 52) + 1)) - 1) & v27) + (1 << ((v25 >> 52) + 1));
              if ((v25 & 0x8000000000000000) == 0)
                v24 = v28;
              else
                v24 = -v28;
            }
            else
            {
              v24 = 0;
            }
          }
          else
          {
            v24 = v23;
          }
          if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v67 = (WTF::StringImpl *)v71[0];
              v30 = v70[0];
              v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v31
                && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
                && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), v30, (uint64_t)v71);
              }
              else
              {
                LOBYTE(v71[0]) = 0;
                v72 = 0;
              }
              v35 = v69[0];
              v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v36
                && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
                && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v35, (uint64_t)&v73);
              }
              else
              {
                LOBYTE(v73) = 0;
                v74 = 0;
              }
              v40 = v68[0];
              v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v41
                && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
                && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v44, (WebCore::CanvasRenderingContext *)(v12 + 8), v40, (uint64_t)&v75);
              }
              else
              {
                LOBYTE(v75) = 0;
                v76 = 0;
              }
              v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v45
                && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
                && (v48 = *(_QWORD *)(v47 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v77);
              }
              else
              {
                LOBYTE(v77) = 0;
                v78 = 0;
              }
              v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v49
                && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
                && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), v24, (uint64_t)&v79);
              }
              else
              {
                LOBYTE(v79) = 0;
                v80 = 0;
              }
              v66[0] = v71;
              v66[1] = 5;
              v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v53)
              {
                v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54);
                if (v55)
                {
                  v56 = *(_QWORD *)(v55 + 96);
                  if (v56)
                    WebCore::InspectorCanvasAgent::recordAction(v56, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v67, v66);
                }
              }
              if (v80)
              {
                v57 = v79;
                v79 = 0;
                if (v57)
                {
                  if (*v57 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v57;
                }
              }
              if (v78)
              {
                v58 = v77;
                v77 = 0;
                if (v58)
                {
                  if (*v58 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v58;
                }
              }
              if (v76)
              {
                v59 = v75;
                v75 = 0;
                if (v59)
                {
                  if (*v59 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v59;
                }
              }
              if (v74)
              {
                v60 = v73;
                v73 = 0;
                if (v60)
                {
                  if (*v60 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v60;
                }
              }
              if (v72)
              {
                v61 = (_DWORD *)v71[0];
                v71[0] = 0;
                if (v61)
                {
                  if (*v61 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v61;
                }
              }
              v62 = v67;
              v67 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                  WTF::StringImpl::destroy(v62, v54);
                else
                  *(_DWORD *)v62 -= 2;
              }
            }
            WebCore::WebGLRenderingContextBase::framebufferTexture2D((WTF::StringImpl *)v12, v70[0], v69[0], v68[0], v16, v24);
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_frontFace(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSValue v13;
  unsigned int v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "frontFace");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "frontFace");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 88) + 408))(*(_QWORD *)(v11 + 88), v28[0]);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_generateMipmap(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "generateMipmap");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "generateMipmap");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      if (!*(_BYTE *)(v11 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateTextureBinding((WTF::StringImpl *)v11, (uint64_t)"generateMipmap", 15, v12, v29);
        if (v29[0])
        {
          if (*(_DWORD *)(v29[0] + 8) == 1)
            (*(void (**)(void))(*(_QWORD *)v29[0] + 8))();
          else
            --*(_DWORD *)(v29[0] + 8);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 416))(*(_QWORD *)(v11 + 88), v12);
        }
      }
      return 10;
    }
  }
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveAttrib(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v30;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  unsigned int v51[2];
  WTF *v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getActiveAttrib");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getActiveAttrib");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v52[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
    if (v51[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v16 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v33
          && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
          && (v36 = *(_QWORD *)(v35 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        v26 = v51[0];
        v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v37
          && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
          && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)&v54);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v49[0] = v52;
        v49[1] = 2;
        v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v41)
        {
          v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 96);
            if (v44)
              WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v50, v49);
          }
        }
        if (v55)
        {
          v45 = v54;
          v54 = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        if (v53)
        {
          v46 = v52[0];
          v52[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v46;
          }
        }
        v47 = v50;
        v50 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v42);
          else
            *(_DWORD *)v47 -= 2;
        }
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      }
      else
      {
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
        v26 = v51[0];
      }
      WebCore::WebGLRenderingContextBase::getActiveAttrib((WTF::StringImpl *)v16, v24, v26, (uint64_t *)v52);
      v27 = v52[0];
      if (v52[0])
      {
        v23 = WebCore::wrap<WebCore::WebGLActiveInfo>((uint64_t)this, v25, v52[0]);
        if (*(_DWORD *)v27 == 1)
        {
          v30 = (WTF::StringImpl *)*((_QWORD *)v27 + 1);
          *((_QWORD *)v27 + 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v28);
            else
              *(_DWORD *)v30 -= 2;
          }
          WTF::fastFree(v27, v28);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      else
      {
        return 2;
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getActiveAttrib", 16, "WebGLProgram", 13);
    return 0;
  }
  return v23;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveUniform(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF::StringImpl *v30;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  unsigned int v51[2];
  WTF *v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getActiveUniform");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getActiveUniform");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v52[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
    if (v51[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v16 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v33
          && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
          && (v36 = *(_QWORD *)(v35 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        v26 = v51[0];
        v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v37
          && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
          && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)&v54);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v49[0] = v52;
        v49[1] = 2;
        v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v41)
        {
          v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 96);
            if (v44)
              WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v50, v49);
          }
        }
        if (v55)
        {
          v45 = v54;
          v54 = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        if (v53)
        {
          v46 = v52[0];
          v52[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v46;
          }
        }
        v47 = v50;
        v50 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v42);
          else
            *(_DWORD *)v47 -= 2;
        }
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      }
      else
      {
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
        v26 = v51[0];
      }
      WebCore::WebGLRenderingContextBase::getActiveUniform(v16, v24, v26, (uint64_t *)v52);
      if (v52[0])
      {
        v23 = WebCore::wrap<WebCore::WebGLActiveInfo>((uint64_t)this, v25, v52[0]);
        v28 = v52[0];
        v52[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 1)
          {
            v30 = (WTF::StringImpl *)*((_QWORD *)v28 + 1);
            *((_QWORD *)v28 + 1) = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v27);
              else
                *(_DWORD *)v30 -= 2;
            }
            WTF::fastFree(v28, v27);
          }
          else
          {
            --*(_DWORD *)v28;
          }
        }
      }
      else
      {
        return 2;
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getActiveUniform", 17, "WebGLProgram", 13);
    return 0;
  }
  return v23;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getAttachedShaders(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  WebCore::WebGLProgram *v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  JSValue v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF::StringImpl *v44;
  JSC::VM *v45;
  _QWORD v46[2];
  WTF::StringImpl *v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "WebGL2RenderingContext", "getAttachedShaders");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v45, "WebGL2RenderingContext", "getAttachedShaders");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v34);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v48 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLProgram::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
  }
  if (v20 && (v25 = *(WebCore::WebGLProgram **)(v18 + 24)) != 0)
  {
    if (*(_BYTE *)(v17 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v35
        && (v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36)) != 0
        && (v38 = *(_QWORD *)(v37 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v38, (WTF::StringImpl *)(v17 + 8), (uint64_t)v25, (uint64_t)&v48);
      }
      else
      {
        LOBYTE(v48) = 0;
        v51 = 0;
      }
      v46[0] = &v48;
      v46[1] = 1;
      v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v39)
      {
        v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40);
        if (v41)
        {
          v42 = *(_QWORD *)(v41 + 96);
          if (v42)
            WebCore::InspectorCanvasAgent::recordAction(v42, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v47, v46);
        }
      }
      if (v51)
      {
        v43 = v48;
        v48 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v43;
        }
      }
      v44 = v47;
      v47 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v40);
        else
          *(_DWORD *)v44 -= 2;
      }
      v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    }
    v26 = *(_QWORD *)(v11 + 40);
    WebCore::WebGLRenderingContextBase::getAttachedShaders((WTF::StringImpl *)v17, v25, (uint64_t)&v48);
    v24 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebGLShader>>>>::convert<std::optional<WTF::Vector<WTF::Ref<WebCore::WebGLShader,WTF::RawPtrTraits<WebCore::WebGLShader>,WTF::DefaultRefDerefTraits<WebCore::WebGLShader>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)this, v26, (uint64_t)&v48);
    if (v51)
    {
      if (v50)
      {
        v28 = v48;
        v29 = 8 * v50;
        do
        {
          v30 = *(_DWORD **)v28;
          *(_QWORD *)v28 = 0;
          if (v30)
          {
            if (v30[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
            else
              --v30[2];
          }
          v28 = (WTF *)((char *)v28 + 8);
          v29 -= 8;
        }
        while (v29);
      }
      v31 = v48;
      if (v48)
      {
        v48 = 0;
        v49 = 0;
        WTF::fastFree(v31, v27);
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v48, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getAttachedShaders", 19, "WebGLProgram", 13);
    return 0;
  }
  return (_BYTE *)v24;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getAttribLocation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  JSValue v33;
  WTF::StringImpl *v34;
  int hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  JSC::VM *v54;
  WTF::StringImpl *v55[2];
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[2];
  char v60;
  _DWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v54 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "getAttribLocation");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "getAttribLocation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v59[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v59, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getAttribLocation", 18, "WebGLProgram", 13);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v59[0] = (WTF::StringImpl *)v25;
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v25 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, this);
      if (!v26)
        goto LABEL_31;
    }
    else if (!v26)
    {
LABEL_31:
      v55[0] = v26;
      goto LABEL_32;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v59, this);
LABEL_32:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v27 = v55[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v58 = 1;
      v55[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v34);
        else
          *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      v30 = 1;
LABEL_39:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321590[v30])(v59, &v57);
      return (_BYTE *)v23;
    }
  }
  else
  {
    v27 = v55[0];
  }
  v57 = v27;
  v58 = 0;
  if (!*(_BYTE *)(v16 + 33))
  {
LABEL_35:
    v57 = 0;
    v59[0] = v27;
    v23 = WebCore::WebGLRenderingContextBase::getAttribLocation((WebCore::WebGLRenderingContextBase *)v16, v24, (const WTF::String *)v59) | 0xFFFE000000000000;
    v29 = v59[0];
    v59[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v58;
    if (v58 == -1)
      return (_BYTE *)v23;
    goto LABEL_39;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v36
    && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
    && (v39 = *(_QWORD *)(v38 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v59);
  }
  else
  {
    LOBYTE(v59[0]) = 0;
    v60 = 0;
  }
  v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v40
    && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
    && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v16 + 8), (int **)&v57, (uint64_t)&v61);
  }
  else
  {
    LOBYTE(v61) = 0;
    v62 = 0;
  }
  v55[0] = (WTF::StringImpl *)v59;
  v55[1] = (WTF::StringImpl *)2;
  v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v44)
  {
    v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 96);
      if (v47)
        WebCore::InspectorCanvasAgent::recordAction(v47, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v56, v55);
    }
  }
  if (v62)
  {
    v48 = v61;
    v61 = 0;
    if (v48)
    {
      if (*v48 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v48;
    }
  }
  if (v60)
  {
    v49 = v59[0];
    v59[0] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v49;
    }
  }
  v50 = v56;
  v56 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v45);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (!v58)
  {
    v27 = v57;
    goto LABEL_35;
  }
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_getBufferParameter(v51, v52, v53);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getBufferParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38[2];
  unsigned int v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  WebCore *v49;
  uint64_t v50;
  WebCore *v51;
  uint64_t v52;
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getBufferParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getBufferParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v38);
  if (v38[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v39[0];
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v20
      && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
      && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      LOBYTE(v42) = 0;
    }
    v14 = v38[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v43);
    }
    else
    {
      LOBYTE(v43[0]) = 0;
      LOBYTE(v44) = 0;
    }
    v36[0] = v41;
    v36[1] = 2;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28)
    {
      v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
          WebCore::InspectorCanvasAgent::recordAction(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v36);
      }
    }
    if ((_BYTE)v44)
    {
      v32 = (_DWORD *)v43[0];
      v43[0] = 0;
      if (v32)
      {
        if (*v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v32;
      }
    }
    if ((_BYTE)v42)
    {
      v33 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  else
  {
    v13 = v39[0];
    v14 = v38[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGLRenderingContextBase::getBufferParameter((WTF::StringImpl *)v12, v13, v14, (uint64_t)v36);
  v41[0] = this;
  v41[1] = v15;
  v42 = v15;
  v43[0] = v15;
  v43[1] = this;
  v44 = v15;
  v45 = this;
  v46 = v15;
  v47 = this;
  v48 = v15;
  v49 = this;
  v50 = v15;
  v51 = this;
  v52 = v15;
  v53 = this;
  v54 = v15;
  v55 = this;
  v56 = v15;
  v57 = this;
  v58 = v15;
  v59 = this;
  v60 = v15;
  v61 = this;
  v62 = v15;
  v63 = this;
  v64 = v15;
  v65 = this;
  v66 = v15;
  v67 = this;
  v68 = v15;
  v69 = this;
  v70 = v15;
  v71 = this;
  v72 = v15;
  if (v37 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v40 = (WTF::StringImpl *)v41;
  v16 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v37])(&v40, v36);
  if (v37 != -1)
    off_1E332F3A8[v37](v41, v36);
  return (_BYTE *)v16;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getContextAttributes(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  char v13;
  WebCore::JSDOMGlobalObject *v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "getContextAttributes");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "getContextAttributes");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = 0;
    v22 = 0;
    v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v15)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v23, &v21);
      }
    }
    v19 = v23;
    v23 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_BYTE *)(v11 + 376);
  v14 = *(WebCore::JSDOMGlobalObject **)(v5 + 40);
  v21 = *(_QWORD *)(v11 + 368);
  LOBYTE(v22) = v13;
  return WebCore::convertDictionaryToJS((uint64_t)this, v14, &v21);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getError(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  unsigned int Error;
  WebCore::InspectorInstrumentation *v12;
  WebCore::ScriptExecutionContext *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  _QWORD v18[2];
  WTF::StringImpl *v19;

  v3 = *((_QWORD *)a2 + 5);
  v17 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "WebGL2RenderingContext", "getError");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "WebGL2RenderingContext", "getError");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18[0] = 0;
    v18[1] = 0;
    v12 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v12)
    {
      v14 = WebCore::InspectorInstrumentation::instrumentingAgents(v12, v13);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 96);
        if (v15)
          WebCore::InspectorCanvasAgent::recordAction(v15, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v19, v18);
      }
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  Error = WebCore::WebGLRenderingContextBase::getError((WebCore::WebGLRenderingContextBase *)v9);
  if ((Error & 0x80000000) != 0)
    return (_BYTE *)(COERCE__INT64((double)Error) + 0x2000000000000);
  else
    return (_BYTE *)(Error | 0xFFFE000000000000);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getSupportedExtensions(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  char v28;
  WTF::StringImpl *v29;

  v4 = *((_QWORD *)a2 + 5);
  v25 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "getSupportedExtensions");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "getSupportedExtensions");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v26 = 0;
    v27 = 0;
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v20)
    {
      v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 96);
        if (v23)
          WebCore::InspectorCanvasAgent::recordAction(v23, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v29, &v26);
      }
    }
    v24 = v29;
    v29 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v21);
      else
        *(_DWORD *)v24 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  v12 = *(_QWORD *)(v5 + 40);
  WebCore::WebGL2RenderingContext::getSupportedExtensions(v11, (uint64_t)&v26);
  v14 = WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t)this, v12, (uint64_t)&v26);
  if (v28)
  {
    if (HIDWORD(v27))
    {
      v17 = v26;
      v18 = 8 * HIDWORD(v27);
      do
      {
        v19 = *(WTF::StringImpl **)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v13);
          else
            *(_DWORD *)v19 -= 2;
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
    v15 = v26;
    if (v26)
    {
      v26 = 0;
      LODWORD(v27) = 0;
      WTF::fastFree(v15, v13);
    }
  }
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getExtension(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  int v22;
  JSValue v25;
  WTF::StringImpl *v26;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  WTF::StringImpl *v39[2];
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  _DWORD *v43;
  char v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "getExtension");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "getExtension");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v25);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v43 = (_DWORD *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v39[0] = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v39[0];
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
      v42 = 1;
      v39[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::destroy(v14, v26);
          v22 = v42;
          v18 = 0;
          goto LABEL_35;
        }
        *(_DWORD *)v14 -= 2;
      }
      v18 = 0;
      v22 = 1;
      goto LABEL_36;
    }
  }
  else
  {
    v14 = v39[0];
  }
  v41 = v14;
  v42 = 0;
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v11 + 8), (int **)&v41, (uint64_t)&v43);
    }
    else
    {
      LOBYTE(v43) = 0;
      v45 = 0;
    }
    v39[0] = (WTF::StringImpl *)&v43;
    v39[1] = (WTF::StringImpl *)1;
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v32)
    {
      v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 96);
        if (v35)
          WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v40, v39);
      }
    }
    if (v45)
    {
      v36 = v43;
      v43 = 0;
      if (v36)
      {
        if (*v36 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v36;
      }
    }
    v37 = v40;
    v40 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        goto LABEL_70;
      *(_DWORD *)v37 -= 2;
    }
    while (v42)
    {
      v37 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_70:
      WTF::StringImpl::destroy(v37, v33);
    }
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v40 = v41;
  v41 = 0;
  WebCore::WebGL2RenderingContext::getExtension(v11, (const WTF::String *)&v40, &v43);
  if (v44)
  {
    v17 = (WTF::StringImpl *)v43;
    ++v43[2];
    v39[0] = v17;
    v18 = WebCore::convertToJSValue((uint64_t)this, v15, v39);
    v19 = v39[0];
    v39[0] = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    if (v44)
    {
      v20 = v43;
      v43 = 0;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
        else
          --v20[2];
      }
    }
  }
  else
  {
    v18 = 2;
  }
  v21 = v40;
  v40 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v16);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v42;
LABEL_35:
  if (v22 != -1)
LABEL_36:
    ((void (*)(_DWORD **, WTF::StringImpl **))off_1E3321590[v22])(&v43, &v41);
  return (_BYTE *)v18;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getFramebufferAttachmentParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v17;
  unsigned int v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  WebCore::InspectorCanvasAgent *v22;
  unsigned int v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  unsigned int v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  WebCore::InspectorCanvasAgent *v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  _QWORD v42[2];
  int v43;
  unsigned int v44[2];
  unsigned int v45[2];
  unsigned int v46[2];
  WTF::StringImpl *v47;
  _QWORD v48[2];
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  _QWORD v52[2];
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "getFramebufferAttachmentParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "getFramebufferAttachmentParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v17);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v46);
  if (v46[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v45);
  if (v45[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v44);
  if (v44[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v46[0];
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v19
      && (v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20)) != 0
      && (v22 = *(WebCore::InspectorCanvasAgent **)(v21 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v22, (WebCore::CanvasRenderingContext *)(v12 + 8), v18, (uint64_t)v48);
    }
    else
    {
      LOBYTE(v48[0]) = 0;
      LOBYTE(v49) = 0;
    }
    v23 = v45[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)v50);
    }
    else
    {
      LOBYTE(v50[0]) = 0;
      LOBYTE(v51) = 0;
    }
    v28 = v44[0];
    v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v29
      && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
      && (v32 = *(WebCore::InspectorCanvasAgent **)(v31 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v28, (uint64_t)v52);
    }
    else
    {
      LOBYTE(v52[0]) = 0;
      LOBYTE(v53) = 0;
    }
    v42[0] = v48;
    v42[1] = 3;
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v33)
    {
      v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 96);
        if (v36)
          WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v47, v42);
      }
    }
    if ((_BYTE)v53)
    {
      v37 = (_DWORD *)v52[0];
      v52[0] = 0;
      if (v37)
      {
        if (*v37 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v37;
      }
    }
    if ((_BYTE)v51)
    {
      v38 = (_DWORD *)v50[0];
      v50[0] = 0;
      if (v38)
      {
        if (*v38 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v38;
      }
    }
    if ((_BYTE)v49)
    {
      v39 = (_DWORD *)v48[0];
      v48[0] = 0;
      if (v39)
      {
        if (*v39 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v39;
      }
    }
    v40 = v47;
    v47 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::getFramebufferAttachmentParameter(v12, v46[0], v45[0], v44[0], (uint64_t)v42);
  v48[0] = this;
  v48[1] = v13;
  v49 = v13;
  v50[0] = v13;
  v50[1] = this;
  v51 = v13;
  v52[0] = this;
  v52[1] = v13;
  v53 = this;
  v54 = v13;
  v55 = this;
  v56 = v13;
  v57 = this;
  v58 = v13;
  v59 = this;
  v60 = v13;
  v61 = this;
  v62 = v13;
  v63 = this;
  v64 = v13;
  v65 = this;
  v66 = v13;
  v67 = this;
  v68 = v13;
  v69 = this;
  v70 = v13;
  v71 = this;
  v72 = v13;
  v73 = this;
  v74 = v13;
  v75 = this;
  v76 = v13;
  v77 = this;
  v78 = v13;
  if (v43 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v47 = (WTF::StringImpl *)v48;
  v14 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v43])(&v47, v42);
  if (v43 != -1)
    off_1E332F3A8[v43](v48, v42);
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  _QWORD v29[2];
  int v30;
  unsigned int v31[2];
  WTF::StringImpl *v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  WebCore *v36;
  uint64_t v37;
  WebCore *v38;
  uint64_t v39;
  WebCore *v40;
  uint64_t v41;
  WebCore *v42;
  uint64_t v43;
  WebCore *v44;
  uint64_t v45;
  WebCore *v46;
  uint64_t v47;
  WebCore *v48;
  uint64_t v49;
  WebCore *v50;
  uint64_t v51;
  WebCore *v52;
  uint64_t v53;
  WebCore *v54;
  uint64_t v55;
  WebCore *v56;
  uint64_t v57;
  WebCore *v58;
  uint64_t v59;
  WebCore *v60;
  uint64_t v61;
  WebCore *v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "WebGL2RenderingContext", "getParameter");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "WebGL2RenderingContext", "getParameter");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v17);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v31);
  if (v31[1])
    return 0;
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v31[0];
    v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v18
      && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
      && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v21, (WebCore::CanvasRenderingContext *)(v11 + 8), v13, (uint64_t)v33);
    }
    else
    {
      LOBYTE(v33[0]) = 0;
      LOBYTE(v34) = 0;
    }
    v29[0] = v33;
    v29[1] = 1;
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v22)
    {
      v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 96);
        if (v25)
          WebCore::InspectorCanvasAgent::recordAction(v25, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v32, v29);
      }
    }
    if ((_BYTE)v34)
    {
      v26 = (_DWORD *)v33[0];
      v33[0] = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v26;
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
    v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v12 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
    v13 = v31[0];
  }
  WebCore::WebGL2RenderingContext::getParameter(v11, v13, (uint64_t)v29);
  v33[0] = this;
  v33[1] = v12;
  v34 = v12;
  v35 = v12;
  v36 = this;
  v37 = v12;
  v38 = this;
  v39 = v12;
  v40 = this;
  v41 = v12;
  v42 = this;
  v43 = v12;
  v44 = this;
  v45 = v12;
  v46 = this;
  v47 = v12;
  v48 = this;
  v49 = v12;
  v50 = this;
  v51 = v12;
  v52 = this;
  v53 = v12;
  v54 = this;
  v55 = v12;
  v56 = this;
  v57 = v12;
  v58 = this;
  v59 = v12;
  v60 = this;
  v61 = v12;
  v62 = this;
  v63 = v12;
  v64 = this;
  v65 = v12;
  if (v30 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v32 = (WTF::StringImpl *)v33;
  v14 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v30])(&v32, v29);
  if (v30 != -1)
    off_1E332F3A8[v30](v33, v29);
  return (_BYTE *)v14;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getProgramParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  unsigned int v26;
  JSValue v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  int v50;
  unsigned int v51[2];
  WTF::StringImpl *v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getProgramParameter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getProgramParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v29);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v53, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getProgramParameter", 20, "WebGLProgram", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
  if (v51[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v53);
    }
    else
    {
      LOBYTE(v53[0]) = 0;
      LOBYTE(v54) = 0;
    }
    v26 = v51[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v55);
    }
    else
    {
      LOBYTE(v55[0]) = 0;
      LOBYTE(v56) = 0;
    }
    v49[0] = v53;
    v49[1] = 2;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v38)
    {
      v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 96);
        if (v41)
          WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v52, v49);
      }
    }
    if ((_BYTE)v56)
    {
      v42 = (_DWORD *)v55[0];
      v55[0] = 0;
      if (v42)
      {
        if (*v42 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v42;
      }
    }
    if ((_BYTE)v54)
    {
      v43 = (_DWORD *)v53[0];
      v53[0] = 0;
      if (v43)
      {
        if (*v43 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v43;
      }
    }
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v51[0];
  }
  WebCore::WebGLRenderingContextBase::getProgramParameter((WTF::StringImpl *)v16, v24, v26, (uint64_t)v49);
  v53[0] = this;
  v53[1] = v25;
  v54 = v25;
  v55[0] = v25;
  v55[1] = this;
  v56 = v25;
  v57 = this;
  v58 = v25;
  v59 = this;
  v60 = v25;
  v61 = this;
  v62 = v25;
  v63 = this;
  v64 = v25;
  v65 = this;
  v66 = v25;
  v67 = this;
  v68 = v25;
  v69 = this;
  v70 = v25;
  v71 = this;
  v72 = v25;
  v73 = this;
  v74 = v25;
  v75 = this;
  v76 = v25;
  v77 = this;
  v78 = v25;
  v79 = this;
  v80 = v25;
  v81 = this;
  v82 = v25;
  v83 = this;
  v84 = v25;
  if (v50 != -1)
  {
    v52 = (WTF::StringImpl *)v53;
    v23 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v52, v49);
    if (v50 != -1)
      off_1E332F3A8[v50](v53, v49);
    return (_BYTE *)v23;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_getProgramInfoLog(v45, v46, v47);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getProgramInfoLog(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLProgram *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  JSValue v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  _QWORD v47[2];
  WTF::StringImpl *v48;
  WTF::StringImpl *v49[2];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v46 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "getProgramInfoLog");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "getProgramInfoLog");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v35);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v49[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v49, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getProgramInfoLog", 18, "WebGLProgram", 13);
    return 0;
  }
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(_QWORD *)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v49);
    }
    else
    {
      LOBYTE(v49[0]) = 0;
      v50 = 0;
    }
    v47[0] = v49;
    v47[1] = 1;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v40)
    {
      v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 96);
        if (v43)
          WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v48, v47);
      }
    }
    if (v50)
    {
      v44 = v49[0];
      v49[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v44;
      }
    }
    v45 = v48;
    v48 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v41);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  WebCore::WebGLRenderingContextBase::getProgramInfoLog((WTF::StringImpl *)v16, v24, v49);
  v26 = v49[0];
  if (!v49[0])
    return 2;
  v27 = *((_QWORD *)this + 7);
  v28 = (uint64_t *)(v27 + 41968);
  v29 = *((_DWORD *)v49[0] + 1);
  if (v29)
  {
    if (v29 != 1)
    {
LABEL_30:
      v23 = *(_QWORD *)(v27 + 64760);
      if (!v23 || v49[0] != *(WTF::StringImpl **)(v23 + 8))
        v23 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_33;
    }
    v31 = (unsigned __int8 *)*((_QWORD *)v49[0] + 1);
    if ((*((_BYTE *)v49[0] + 16) & 4) != 0)
    {
      v32 = *v31;
    }
    else
    {
      v33 = *(unsigned __int16 *)v31;
      if (v33 > 0xFF)
        goto LABEL_30;
      v32 = v33;
    }
    v28 = (uint64_t *)(v27 + 8 * v32 + 42216);
  }
  v23 = *v28;
LABEL_33:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, v25);
  else
    *(_DWORD *)v26 -= 2;
  return v23;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getRenderbufferParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38[2];
  unsigned int v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  WebCore *v49;
  uint64_t v50;
  WebCore *v51;
  uint64_t v52;
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getRenderbufferParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getRenderbufferParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v38);
  if (v38[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v39[0];
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v20
      && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
      && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      LOBYTE(v42) = 0;
    }
    v14 = v38[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v43);
    }
    else
    {
      LOBYTE(v43[0]) = 0;
      LOBYTE(v44) = 0;
    }
    v36[0] = v41;
    v36[1] = 2;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28)
    {
      v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
          WebCore::InspectorCanvasAgent::recordAction(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v36);
      }
    }
    if ((_BYTE)v44)
    {
      v32 = (_DWORD *)v43[0];
      v43[0] = 0;
      if (v32)
      {
        if (*v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v32;
      }
    }
    if ((_BYTE)v42)
    {
      v33 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  else
  {
    v13 = v39[0];
    v14 = v38[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGLRenderingContextBase::getRenderbufferParameter((WTF::StringImpl *)v12, v13, v14, (uint64_t)v36);
  v41[0] = this;
  v41[1] = v15;
  v42 = v15;
  v43[0] = v15;
  v43[1] = this;
  v44 = v15;
  v45 = this;
  v46 = v15;
  v47 = this;
  v48 = v15;
  v49 = this;
  v50 = v15;
  v51 = this;
  v52 = v15;
  v53 = this;
  v54 = v15;
  v55 = this;
  v56 = v15;
  v57 = this;
  v58 = v15;
  v59 = this;
  v60 = v15;
  v61 = this;
  v62 = v15;
  v63 = this;
  v64 = v15;
  v65 = this;
  v66 = v15;
  v67 = this;
  v68 = v15;
  v69 = this;
  v70 = v15;
  v71 = this;
  v72 = v15;
  if (v37 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v40 = (WTF::StringImpl *)v41;
  v16 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v37])(&v40, v36);
  if (v37 != -1)
    off_1E332F3A8[v37](v41, v36);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getShaderParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLShader *v24;
  uint64_t v25;
  unsigned int v26;
  JSValue v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  int v50;
  unsigned int v51[2];
  WTF::StringImpl *v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getShaderParameter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getShaderParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v29);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLShader::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLShader **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v53, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "getShaderParameter", 19, "WebGLShader", 12);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
  if (v51[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)v53);
    }
    else
    {
      LOBYTE(v53[0]) = 0;
      LOBYTE(v54) = 0;
    }
    v26 = v51[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v55);
    }
    else
    {
      LOBYTE(v55[0]) = 0;
      LOBYTE(v56) = 0;
    }
    v49[0] = v53;
    v49[1] = 2;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v38)
    {
      v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 96);
        if (v41)
          WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v52, v49);
      }
    }
    if ((_BYTE)v56)
    {
      v42 = (_DWORD *)v55[0];
      v55[0] = 0;
      if (v42)
      {
        if (*v42 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v42;
      }
    }
    if ((_BYTE)v54)
    {
      v43 = (_DWORD *)v53[0];
      v53[0] = 0;
      if (v43)
      {
        if (*v43 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v43;
      }
    }
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v51[0];
  }
  WebCore::WebGLRenderingContextBase::getShaderParameter((WTF::StringImpl *)v16, v24, v26, v49);
  v53[0] = this;
  v53[1] = v25;
  v54 = v25;
  v55[0] = v25;
  v55[1] = this;
  v56 = v25;
  v57 = this;
  v58 = v25;
  v59 = this;
  v60 = v25;
  v61 = this;
  v62 = v25;
  v63 = this;
  v64 = v25;
  v65 = this;
  v66 = v25;
  v67 = this;
  v68 = v25;
  v69 = this;
  v70 = v25;
  v71 = this;
  v72 = v25;
  v73 = this;
  v74 = v25;
  v75 = this;
  v76 = v25;
  v77 = this;
  v78 = v25;
  v79 = this;
  v80 = v25;
  v81 = this;
  v82 = v25;
  v83 = this;
  v84 = v25;
  if (v50 != -1)
  {
    v52 = (WTF::StringImpl *)v53;
    v23 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v52, v49);
    if (v50 != -1)
      off_1E332F3A8[v50](v53, v49);
    return (_BYTE *)v23;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_getShaderInfoLog(v45, v46, v47);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getShaderInfoLog(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLShader *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  JSValue v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  _QWORD v47[2];
  WTF::StringImpl *v48;
  WTF::StringImpl *v49[2];
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v46 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "getShaderInfoLog");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "getShaderInfoLog");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v35);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v49[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLShader::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLShader **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v49, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "getShaderInfoLog", 17, "WebGLShader", 12);
    return 0;
  }
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(_QWORD *)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)v49);
    }
    else
    {
      LOBYTE(v49[0]) = 0;
      v50 = 0;
    }
    v47[0] = v49;
    v47[1] = 1;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v40)
    {
      v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 96);
        if (v43)
          WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v48, v47);
      }
    }
    if (v50)
    {
      v44 = v49[0];
      v49[0] = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v44;
      }
    }
    v45 = v48;
    v48 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v41);
      else
        *(_DWORD *)v45 -= 2;
    }
  }
  WebCore::WebGLRenderingContextBase::getShaderInfoLog((WTF::StringImpl *)v16, v24, v49);
  v26 = v49[0];
  if (!v49[0])
    return 2;
  v27 = *((_QWORD *)this + 7);
  v28 = (uint64_t *)(v27 + 41968);
  v29 = *((_DWORD *)v49[0] + 1);
  if (v29)
  {
    if (v29 != 1)
    {
LABEL_30:
      v23 = *(_QWORD *)(v27 + 64760);
      if (!v23 || v49[0] != *(WTF::StringImpl **)(v23 + 8))
        v23 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_33;
    }
    v31 = (unsigned __int8 *)*((_QWORD *)v49[0] + 1);
    if ((*((_BYTE *)v49[0] + 16) & 4) != 0)
    {
      v32 = *v31;
    }
    else
    {
      v33 = *(unsigned __int16 *)v31;
      if (v33 > 0xFF)
        goto LABEL_30;
      v32 = v33;
    }
    v28 = (uint64_t *)(v27 + 8 * v32 + 42216);
  }
  v23 = *v28;
LABEL_33:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, v25);
  else
    *(_DWORD *)v26 -= 2;
  return v23;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getShaderPrecisionFormat(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  const char *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  WebCore::InspectorCanvasAgent *v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  JSC::VM *v42;
  _QWORD v43[2];
  WTF::StringImpl *v44;
  _DWORD v45[2];
  _DWORD v46[2];
  _QWORD v47[2];
  char v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v42, "WebGL2RenderingContext", "getShaderPrecisionFormat");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v42, "WebGL2RenderingContext", "getShaderPrecisionFormat");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v26);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v46);
  if (v46[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v45);
  if (v45[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v46[0];
    v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v27
      && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
      && (v30 = *(WebCore::InspectorCanvasAgent **)(v29 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v30, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v47);
    }
    else
    {
      LOBYTE(v47[0]) = 0;
      v48 = 0;
    }
    v14 = v45[0];
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v31
      && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
      && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)&v49);
    }
    else
    {
      LOBYTE(v49) = 0;
      v50 = 0;
    }
    v43[0] = v47;
    v43[1] = 2;
    v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v35)
    {
      v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 96);
        if (v38)
          WebCore::InspectorCanvasAgent::recordAction(v38, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v44, v43);
      }
    }
    if (v50)
    {
      v39 = v49;
      v49 = 0;
      if (v39)
      {
        if (*v39 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v39;
      }
    }
    if (v48)
    {
      v40 = (_DWORD *)v47[0];
      v47[0] = 0;
      if (v40)
      {
        if (*v40 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v40;
      }
    }
    v41 = v44;
    v44 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v36);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  else
  {
    v13 = v46[0];
    v14 = v45[0];
  }
  if (*(_BYTE *)(v12 + 364))
    return 2;
  if (v13 >> 1 != 17816)
  {
    v21 = "invalid shader type";
    v22 = (WTF::StringImpl *)v12;
    v23 = 20;
LABEL_24:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1280, (uint64_t)"getShaderPrecisionFormat", 25, (uint64_t)v21, v23);
    return 2;
  }
  if ((v14 - 36336) >= 6)
  {
    v21 = "invalid precision type";
    v22 = (WTF::StringImpl *)v12;
    v23 = 23;
    goto LABEL_24;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v47[0] = 0;
  LODWORD(v43[0]) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *, _QWORD *))(**(_QWORD **)(v12 + 88) + 568))(*(_QWORD *)(v12 + 88), v13, v14, v47, v43);
  v16 = v43[0];
  v17 = v47[0];
  v18 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 4) = v17;
  *(_DWORD *)(v18 + 12) = v16;
  v20 = WebCore::wrap<WebCore::WebGLShaderPrecisionFormat>((uint64_t)this, v15, (WTF *)v18);
  if (*(_DWORD *)v18 == 1)
    WTF::fastFree((WTF *)v18, v19);
  else
    --*(_DWORD *)v18;
  return v20;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getShaderSource(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  JSValue v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::InspectorInstrumentation *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  JSC::VM *v51;
  _QWORD v52[2];
  WTF::StringImpl *v53;
  _QWORD v54[2];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v51 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "getShaderSource");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "getShaderSource");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v40);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v54[0] = v9;
  if ((v17 & 0xFFFE000000000002) == 0)
  {
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLShader::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
    }
    if (v19)
    {
      v24 = *(_QWORD *)(v17 + 24);
      if (v24)
      {
        if (*(_BYTE *)(v16 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v42
            && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
            && (v45 = *(_QWORD *)(v44 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLShader *)v24, (uint64_t)v54);
          }
          else
          {
            LOBYTE(v54[0]) = 0;
            v55 = 0;
          }
          v52[0] = v54;
          v52[1] = 1;
          v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
          if (v46)
          {
            v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, a2);
            if (v47)
            {
              v48 = *(_QWORD *)(v47 + 96);
              if (v48)
                WebCore::InspectorCanvasAgent::recordAction(v48, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v53, v52);
            }
          }
          if (v55)
          {
            v49 = (_DWORD *)v54[0];
            v54[0] = 0;
            if (v49)
            {
              if (*v49 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v49;
            }
          }
          v50 = v53;
          v53 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, a2);
            else
              *(_DWORD *)v50 -= 2;
          }
        }
        if (*(_BYTE *)(v16 + 364))
          return 2;
        v25 = *(_QWORD *)(v24 + 16);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 8);
          if (v26)
            v25 = v26 - 8;
          else
            v25 = 0;
        }
        if (v25 != v16)
        {
          v27 = "object does not belong to this context";
          v28 = (WTF::StringImpl *)v16;
          v29 = 1282;
          v30 = 39;
LABEL_34:
          WebCore::WebGLRenderingContextBase::synthesizeGLError(v28, v29, (uint64_t)"getShaderSource", 16, (uint64_t)v27, v30);
          return 2;
        }
        if (!*(_DWORD *)(v24 + 24))
        {
          v27 = "attempt to use a deleted object";
          v28 = (WTF::StringImpl *)v16;
          v29 = 1281;
          v30 = 32;
          goto LABEL_34;
        }
        v32 = *(_QWORD *)(v24 + 40);
        if (!v32)
        {
          v32 = *MEMORY[0x1E0CBF738];
          if (!*MEMORY[0x1E0CBF738])
            return 2;
        }
        v33 = *(_DWORD *)v32;
        v34 = *(_DWORD *)(v32 + 4);
        *(_DWORD *)v32 += 2;
        v35 = *((_QWORD *)this + 7);
        v36 = (uint64_t *)(v35 + 41968);
        if (v34)
        {
          if (v34 != 1)
          {
LABEL_42:
            v23 = *(_QWORD *)(v35 + 64760);
            if (!v23 || v32 != *(_QWORD *)(v23 + 8))
            {
              v23 = JSC::jsStringWithCacheSlowCase();
              v33 = *(_DWORD *)v32 - 2;
            }
            if (v33)
              goto LABEL_46;
            goto LABEL_52;
          }
          v37 = *(unsigned __int8 **)(v32 + 8);
          if ((*(_BYTE *)(v32 + 16) & 4) != 0)
          {
            v38 = *v37;
          }
          else
          {
            v41 = *(unsigned __int16 *)v37;
            if (v41 > 0xFF)
              goto LABEL_42;
            v38 = v41;
          }
          v36 = (uint64_t *)(v35 + 8 * v38 + 42216);
        }
        v23 = *v36;
        if (v33)
        {
LABEL_46:
          *(_DWORD *)v32 = v33;
          return v23;
        }
LABEL_52:
        WTF::StringImpl::destroy((WTF::StringImpl *)v32, a2);
        return v23;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v54, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "getShaderSource", 16, "WebGLShader", 12);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getTexParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38[2];
  unsigned int v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  WebCore *v49;
  uint64_t v50;
  WebCore *v51;
  uint64_t v52;
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getTexParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getTexParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v38);
  if (v38[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v39[0];
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v20
      && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
      && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      LOBYTE(v42) = 0;
    }
    v14 = v38[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v43);
    }
    else
    {
      LOBYTE(v43[0]) = 0;
      LOBYTE(v44) = 0;
    }
    v36[0] = v41;
    v36[1] = 2;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28)
    {
      v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
          WebCore::InspectorCanvasAgent::recordAction(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v36);
      }
    }
    if ((_BYTE)v44)
    {
      v32 = (_DWORD *)v43[0];
      v43[0] = 0;
      if (v32)
      {
        if (*v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v32;
      }
    }
    if ((_BYTE)v42)
    {
      v33 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  else
  {
    v13 = v39[0];
    v14 = v38[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::getTexParameter((WebCore::WebGL2RenderingContext *)v12, v13, v14, (uint64_t)v36);
  v41[0] = this;
  v41[1] = v15;
  v42 = v15;
  v43[0] = v15;
  v43[1] = this;
  v44 = v15;
  v45 = this;
  v46 = v15;
  v47 = this;
  v48 = v15;
  v49 = this;
  v50 = v15;
  v51 = this;
  v52 = v15;
  v53 = this;
  v54 = v15;
  v55 = this;
  v56 = v15;
  v57 = this;
  v58 = v15;
  v59 = this;
  v60 = v15;
  v61 = this;
  v62 = v15;
  v63 = this;
  v64 = v15;
  v65 = this;
  v66 = v15;
  v67 = this;
  v68 = v15;
  v69 = this;
  v70 = v15;
  v71 = this;
  v72 = v15;
  if (v37 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v40 = (WTF::StringImpl *)v41;
  v16 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v37])(&v40, v36);
  if (v37 != -1)
    off_1E332F3A8[v37](v41, v36);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getUniform(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  char **v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  JSValue v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WebCore *v52;
  JSC::JSGlobalObject *v53;
  JSC::CallFrame *v54;
  _DWORD *v55;
  JSC::VM *v56;
  _QWORD v57[2];
  int v58;
  WTF::StringImpl *v59;
  _QWORD v60[2];
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  WebCore *v66;
  uint64_t v67;
  WebCore *v68;
  uint64_t v69;
  WebCore *v70;
  uint64_t v71;
  WebCore *v72;
  uint64_t v73;
  WebCore *v74;
  uint64_t v75;
  WebCore *v76;
  uint64_t v77;
  WebCore *v78;
  uint64_t v79;
  WebCore *v80;
  uint64_t v81;
  WebCore *v82;
  uint64_t v83;
  WebCore *v84;
  uint64_t v85;
  WebCore *v86;
  uint64_t v87;
  WebCore *v88;
  uint64_t v89;
  WebCore *v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "getUniform");
  v11 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
  v12 = *(unsigned int *)(v11 + 0x4C);
  v13 = *(_DWORD *)(v11 + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "getUniform");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v36);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v60[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLProgram::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getUniform", 11, "WebGLProgram", 13);
    return 0;
  }
  v26 = *((_QWORD *)a2 + 7);
  v60[0] = v9;
  if ((v26 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v27 = *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C);
  v28 = *(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C) != 0;
  v29 = (char **)(16 * v27);
  if ((_DWORD)v27)
    v30 = v29 == &WebCore::JSWebGLUniformLocation::s_info;
  else
    v30 = 1;
  if (!v30)
  {
    do
    {
      v29 = (char **)v29[2];
      v28 = v29 != 0;
    }
    while (v29 != &WebCore::JSWebGLUniformLocation::s_info && v29 != 0);
  }
  if (!v28 || (v32 = *(_QWORD *)(v26 + 24)) == 0)
  {
LABEL_37:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 1, "location", 9, "WebGL2RenderingContext", 23, a8, "getUniform", 11, "WebGLUniformLocation", 21);
    return 0;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    v55 = (_DWORD *)v10;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(_QWORD *)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, (WTF::StringImpl *)(v17 + 8), v25, (uint64_t)v60);
    }
    else
    {
      LOBYTE(v60[0]) = 0;
      LOBYTE(v61) = 0;
    }
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v41
      && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
      && (v44 = *(_QWORD *)(v43 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v44, (WTF::StringImpl *)(v17 + 8), v32, (uint64_t)v62);
    }
    else
    {
      LOBYTE(v62[0]) = 0;
      LOBYTE(v63) = 0;
    }
    v57[0] = v60;
    v57[1] = 2;
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v45)
    {
      v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46);
      if (v47)
      {
        v48 = *(_QWORD *)(v47 + 96);
        if (v48)
          WebCore::InspectorCanvasAgent::recordAction(v48, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v59, v57);
      }
    }
    if ((_BYTE)v63)
    {
      v49 = (_DWORD *)v62[0];
      v62[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    if ((_BYTE)v61)
    {
      v50 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v50)
      {
        if (*v50 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v50;
      }
    }
    v51 = v59;
    v59 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v46);
      else
        *(_DWORD *)v51 -= 2;
    }
    v33 = *(_QWORD *)(16 * (*v55 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v33 = *(_QWORD *)(v11 + 40);
  }
  WebCore::WebGLRenderingContextBase::getUniform(v17, v25, v32, (uint64_t)v57);
  v60[0] = this;
  v60[1] = v33;
  v61 = v33;
  v62[0] = v33;
  v62[1] = this;
  v63 = v33;
  v64 = this;
  v65 = v33;
  v66 = this;
  v67 = v33;
  v68 = this;
  v69 = v33;
  v70 = this;
  v71 = v33;
  v72 = this;
  v73 = v33;
  v74 = this;
  v75 = v33;
  v76 = this;
  v77 = v33;
  v78 = this;
  v79 = v33;
  v80 = this;
  v81 = v33;
  v82 = this;
  v83 = v33;
  v84 = this;
  v85 = v33;
  v86 = this;
  v87 = v33;
  v88 = this;
  v89 = v33;
  v90 = this;
  v91 = v33;
  if (v58 != -1)
  {
    v59 = (WTF::StringImpl *)v60;
    v24 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v58])(&v59, v57);
    if (v58 != -1)
      off_1E332F3A8[v58](v60, v57);
    return (_BYTE *)v24;
  }
  v52 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_getUniformLocation(v52, v53, v54);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getUniformLocation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void *v30;
  WTF *v31;
  WTF::StringImpl *v32;
  int v33;
  _DWORD *v35;
  JSValue v37;
  WTF::StringImpl *v38;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  JSC::VM *v55;
  WTF::StringImpl *v56[2];
  WTF *v57;
  WTF::StringImpl *v58;
  int v59;
  WTF *v60[2];
  char v61;
  _DWORD *v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v55 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "WebGL2RenderingContext", "getUniformLocation");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "WebGL2RenderingContext", "getUniformLocation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v37);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v60[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getUniformLocation", 19, "WebGLProgram", 13);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v60[0] = (WTF *)v25;
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v25 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, this);
      if (!v26)
        goto LABEL_31;
    }
    else if (!v26)
    {
LABEL_31:
      v56[0] = v26;
      goto LABEL_32;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v60, this);
LABEL_32:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v27 = v56[0];
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
      v59 = 1;
      v56[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, v38);
          v33 = v59;
          v23 = 0;
          goto LABEL_44;
        }
        *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      v33 = 1;
      goto LABEL_45;
    }
  }
  else
  {
    v27 = v56[0];
  }
  v58 = v27;
  v59 = 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57 = v60[0];
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(_QWORD *)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v60);
    }
    else
    {
      LOBYTE(v60[0]) = 0;
      v61 = 0;
    }
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v16 + 8), (int **)&v58, (uint64_t)&v62);
    }
    else
    {
      LOBYTE(v62) = 0;
      v63 = 0;
    }
    v56[0] = (WTF::StringImpl *)v60;
    v56[1] = (WTF::StringImpl *)2;
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v48)
    {
      v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
      if (v50)
      {
        v51 = *(_QWORD *)(v50 + 96);
        if (v51)
          WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v57, v56);
      }
    }
    if (v63)
    {
      v52 = v62;
      v62 = 0;
      if (v52)
      {
        if (*v52 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v52;
      }
    }
    if (v61)
    {
      v53 = v60[0];
      v60[0] = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v53;
      }
    }
    v54 = v57;
    v57 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        goto LABEL_91;
      *(_DWORD *)v54 -= 2;
    }
    while (v59)
    {
      v54 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_91:
      WTF::StringImpl::destroy(v54, v49);
    }
  }
  v28 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v29 = v58;
  v58 = 0;
  v56[0] = v29;
  WebCore::WebGLRenderingContextBase::getUniformLocation(v16, v24, v56, (uint64_t *)v60);
  if (v60[0])
  {
    v23 = WebCore::wrap<WebCore::WebGLUniformLocation>((uint64_t)this, v28, v60[0]);
    v31 = v60[0];
    v60[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
      {
        v35 = (_DWORD *)*((_QWORD *)v31 + 1);
        *((_QWORD *)v31 + 1) = 0;
        if (v35)
        {
          if (v35[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
          else
            --v35[2];
        }
        WTF::fastFree(v31, v30);
      }
      else
      {
        --*(_DWORD *)v31;
      }
    }
  }
  else
  {
    v60[0] = 0;
    v23 = 2;
  }
  v32 = v56[0];
  v56[0] = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v30);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = v59;
LABEL_44:
  if (v33 != -1)
LABEL_45:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E3321590[v33])(v60, &v58);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getVertexAttrib(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38[2];
  unsigned int v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  WebCore *v49;
  uint64_t v50;
  WebCore *v51;
  uint64_t v52;
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getVertexAttrib");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getVertexAttrib");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v38);
  if (v38[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v39[0];
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v20
      && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
      && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      LOBYTE(v42) = 0;
    }
    v14 = v38[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v43);
    }
    else
    {
      LOBYTE(v43[0]) = 0;
      LOBYTE(v44) = 0;
    }
    v36[0] = v41;
    v36[1] = 2;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28)
    {
      v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
          WebCore::InspectorCanvasAgent::recordAction(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v36);
      }
    }
    if ((_BYTE)v44)
    {
      v32 = (_DWORD *)v43[0];
      v43[0] = 0;
      if (v32)
      {
        if (*v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v32;
      }
    }
    if ((_BYTE)v42)
    {
      v33 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  else
  {
    v13 = v39[0];
    v14 = v38[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGLRenderingContextBase::getVertexAttrib(v12, v13, v14, (uint64_t)v36);
  v41[0] = this;
  v41[1] = v15;
  v42 = v15;
  v43[0] = v15;
  v43[1] = this;
  v44 = v15;
  v45 = this;
  v46 = v15;
  v47 = this;
  v48 = v15;
  v49 = this;
  v50 = v15;
  v51 = this;
  v52 = v15;
  v53 = this;
  v54 = v15;
  v55 = this;
  v56 = v15;
  v57 = this;
  v58 = v15;
  v59 = this;
  v60 = v15;
  v61 = this;
  v62 = v15;
  v63 = this;
  v64 = v15;
  v65 = this;
  v66 = v15;
  v67 = this;
  v68 = v15;
  v69 = this;
  v70 = v15;
  v71 = this;
  v72 = v15;
  if (v37 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v40 = (WTF::StringImpl *)v41;
  v16 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v37])(&v40, v36);
  if (v37 != -1)
    off_1E332F3A8[v37](v41, v36);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getVertexAttribOffset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  JSValue v16;
  unsigned int v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  unsigned int v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  WebCore::InspectorCanvasAgent *v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  _QWORD v35[2];
  WTF::StringImpl *v36;
  _DWORD v37[2];
  _DWORD v38[2];
  _QWORD v39[2];
  char v40;
  _DWORD *v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGL2RenderingContext", "getVertexAttribOffset");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGL2RenderingContext", "getVertexAttribOffset");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
    if (v38[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v37);
      if (v37[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v17 = v38[0];
          v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v18
            && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
            && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v21, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)v39);
          }
          else
          {
            LOBYTE(v39[0]) = 0;
            v40 = 0;
          }
          v22 = v37[0];
          v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v23
            && (v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24)) != 0
            && (v26 = *(WebCore::InspectorCanvasAgent **)(v25 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v26, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)&v41);
          }
          else
          {
            LOBYTE(v41) = 0;
            v42 = 0;
          }
          v35[0] = v39;
          v35[1] = 2;
          v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v27)
          {
            v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 96);
              if (v30)
                WebCore::InspectorCanvasAgent::recordAction(v30, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v36, v35);
            }
          }
          if (v42)
          {
            v31 = v41;
            v41 = 0;
            if (v31)
            {
              if (*v31 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v31;
            }
          }
          if (v40)
          {
            v32 = (_DWORD *)v39[0];
            v39[0] = 0;
            if (v32)
            {
              if (*v32 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v32;
            }
          }
          v33 = v36;
          v36 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v28);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
        if (*(_BYTE *)(v12 + 364))
        {
          v13 = 0;
          return (_BYTE *)(v13 | 0xFFFE000000000000);
        }
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 632))(*(_QWORD *)(v12 + 88), v38[0], v37[0]);
        v13 = v14;
        if (v14 == (int)v14)
          return (_BYTE *)(v13 | 0xFFFE000000000000);
        return (_BYTE *)(COERCE__INT64((double)v14) + 0x2000000000000);
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_hint(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v16;
  WebCore::InspectorInstrumentation *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  WebCore::InspectorCanvasAgent *v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  WTF::StringImpl *v34;
  _DWORD v35[2];
  _DWORD v36[2];
  _QWORD v37[2];
  char v38;
  _DWORD *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "hint");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "hint");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
    if (v36[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v35);
      if (v35[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v13 = v36[0];
          v17 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v17
            && (v19 = WebCore::InspectorInstrumentation::instrumentingAgents(v17, v18)) != 0
            && (v20 = *(WebCore::InspectorCanvasAgent **)(v19 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v20, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v37);
          }
          else
          {
            LOBYTE(v37[0]) = 0;
            v38 = 0;
          }
          v14 = v35[0];
          v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v21
            && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
            && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)&v39);
          }
          else
          {
            LOBYTE(v39) = 0;
            v40 = 0;
          }
          v33[0] = v37;
          v33[1] = 2;
          v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v25)
          {
            v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 96);
              if (v28)
                WebCore::InspectorCanvasAgent::recordAction(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v34, v33);
            }
          }
          if (v40)
          {
            v29 = v39;
            v39 = 0;
            if (v29)
            {
              if (*v29 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v29;
            }
          }
          if (v38)
          {
            v30 = (_DWORD *)v37[0];
            v37[0] = 0;
            if (v30)
            {
              if (*v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v30;
            }
          }
          v31 = v34;
          v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        else
        {
          v13 = v36[0];
          v14 = v35[0];
        }
        if (!*(_BYTE *)(v12 + 364))
        {
          if ((_DWORD)v13 == 33170
            || (_DWORD)v13 == 35723
            && (*(_QWORD *)(v12 + 656)
             || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 40))(v12 + 8) & 1) != 0))
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 88) + 640))(*(_QWORD *)(v12 + 88), v13, v14);
          }
          else
          {
            WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1280, (uint64_t)"hint", 5, (uint64_t)"invalid target", 15);
          }
        }
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isBuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLBuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLBuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "buffer", 7, "WebGL2RenderingContext", 23, a8, "isBuffer", 9, "WebGLBuffer", 12);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLBuffer *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_DWORD *)(v18 + 36)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 648))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isContextLost(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::InspectorInstrumentation *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[2];
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "isContextLost");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "isContextLost");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17[0] = 0;
    v17[1] = 0;
    v11 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v11)
    {
      v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v11, v12);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 96);
        if (v14)
          WebCore::InspectorCanvasAgent::recordAction(v14, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v18, v17);
      }
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (*(_BYTE *)(v9 + 364))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isEnabled(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "isEnabled");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "isEnabled");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      if (!*(_BYTE *)(v11 + 364)
        && (*(unsigned int (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 312))(v11, "isEnabled", 10, v12)&& (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 656))(*(_QWORD *)(v11 + 88), v12))
      {
        return 7;
      }
      else
      {
        return 6;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isFramebuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isFramebuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLFramebuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLFramebuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "framebuffer", 12, "WebGL2RenderingContext", 23, a8, "isFramebuffer", 14, "WebGLFramebuffer", 17);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLFramebuffer *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_BYTE *)(v18 + 48)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 664))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSValue v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "isProgram");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "isProgram");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v28);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v42[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLProgram::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v42, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "isProgram", 10, "WebGLProgram", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (WTF::StringImpl *)(v16 + 8), v18, (uint64_t)v42);
      }
      else
      {
        LOBYTE(v42[0]) = 0;
        v43 = 0;
      }
      v40[0] = v42;
      v40[1] = 1;
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33)
      {
        v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 96);
          if (v36)
            WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v41, v40);
        }
      }
      if (v43)
      {
        v37 = (_DWORD *)v42[0];
        v42[0] = 0;
        if (v37)
        {
          if (*v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v37;
        }
      }
      v38 = v41;
      v41 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && (v27 = *(unsigned int *)(v18 + 24), (_DWORD)v27)
      && (*(unsigned int (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 88) + 672))(*(_QWORD *)(v16 + 88), v27, a3))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isRenderbuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isRenderbuffer");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isRenderbuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLRenderbuffer::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLRenderbuffer::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "renderbuffer", 13, "WebGL2RenderingContext", 23, a8, "isRenderbuffer", 15, "WebGLRenderbuffer", 18);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLRenderbuffer *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_BYTE *)(v18 + 49)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 680))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isShader(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSValue v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "isShader");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "isShader");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v28);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v42[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLShader::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLShader::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v42, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "isShader", 9, "WebGLShader", 12);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLShader *)v18, (uint64_t)v42);
      }
      else
      {
        LOBYTE(v42[0]) = 0;
        v43 = 0;
      }
      v40[0] = v42;
      v40[1] = 1;
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33)
      {
        v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 96);
          if (v36)
            WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v41, v40);
        }
      }
      if (v43)
      {
        v37 = (_DWORD *)v42[0];
        v42[0] = 0;
        if (v37)
        {
          if (*v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v37;
        }
      }
      v38 = v41;
      v41 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && (v27 = *(unsigned int *)(v18 + 24), (_DWORD)v27)
      && (*(unsigned int (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 88) + 688))(*(_QWORD *)(v16 + 88), v27, a3))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isTexture(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isTexture");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isTexture");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLTexture::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLTexture::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "texture", 8, "WebGL2RenderingContext", 23, a8, "isTexture", 10, "WebGLTexture", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLTexture *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_DWORD *)(v18 + 36)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 696))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_lineWidth(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  double v13;
  float v14;
  JSValue v16;
  int v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  double v28;
  JSC::VM *v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  _QWORD v32[2];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "lineWidth");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "lineWidth");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v32[0] = v12;
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
  }
  else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v32, this);
    v13 = v28;
  }
  else
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v13 < -3.40282347e38)
  {
    *(float *)&v17 = -INFINITY;
LABEL_35:
    v14 = *(float *)&v17;
    goto LABEL_20;
  }
  if (v13 > 3.40282347e38)
  {
    *(float *)&v17 = INFINITY;
    goto LABEL_35;
  }
  v14 = v13;
LABEL_20:
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v18
      && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
      && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v21, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v32);
    }
    else
    {
      LOBYTE(v32[0]) = 0;
      v33 = 0;
    }
    v30[0] = v32;
    v30[1] = 1;
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v22)
    {
      v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23);
      if (v24)
      {
        v25 = *(_QWORD *)(v24 + 96);
        if (v25)
          WebCore::InspectorCanvasAgent::recordAction(v25, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v31, v30);
      }
    }
    if (v33)
    {
      v26 = (_DWORD *)v32[0];
      v32[0] = 0;
      if (v26)
      {
        if (*v26 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v26;
      }
    }
    v27 = v31;
    v31 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v23);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (!*(_BYTE *)(v11 + 364))
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v11 + 88) + 704))(*(_QWORD *)(v11 + 88), v14);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_linkProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "linkProgram");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "linkProgram");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v46[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLProgram::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
    }
    if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v46, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "linkProgram", 12, "WebGLProgram", 13);
      return 0;
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(_QWORD *)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), v24, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v46[0]) = 0;
        v47 = 0;
      }
      v44[0] = v46;
      v44[1] = 1;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v37)
      {
        v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 96);
          if (v40)
            WebCore::InspectorCanvasAgent::recordAction(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v45, v44);
        }
      }
      if (v47)
      {
        v41 = (_DWORD *)v46[0];
        v46[0] = 0;
        if (v41)
        {
          if (*v41 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v41;
        }
      }
      v42 = v45;
      v45 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    if (*(_BYTE *)(v16 + 364))
      return 10;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16)
    {
      v31 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v31)
      {
        (*(void (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 88) + 712))(*(_QWORD *)(v16 + 88), v31, a3);
        ++*(_DWORD *)(v24 + 60);
        *(_BYTE *)(v24 + 80) = 0;
        return 10;
      }
      v27 = "attempt to use a deleted object";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1281;
      v30 = 32;
    }
    else
    {
      v27 = "object does not belong to this context";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1282;
      v30 = 39;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v28, v29, (uint64_t)"linkProgram", 12, (uint64_t)v27, v30);
    return 10;
  }
  v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v32);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_pixelStorei(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  JSValue v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  WebCore::InspectorCanvasAgent *v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  WebCore::InspectorCanvasAgent *v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  JSC::VM *v41;
  _QWORD v42[2];
  WTF::StringImpl *v43;
  unsigned int v44[2];
  _QWORD v45[2];
  char v46;
  _DWORD *v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "pixelStorei");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "pixelStorei");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v44);
    if (v44[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      v45[0] = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v18 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v45, this);
          v18 = v40;
        }
        v19 = (v18 >> 52) & 0x7FF;
        v20 = v19 - 1023;
        v21 = v18 >> (51 - (v18 >> 52));
        if (v19 > 0x433)
          LODWORD(v21) = v18 << ((v18 >> 52) - 51);
        if (v19 >= 0x41F)
          v22 = v21;
        else
          v22 = (((1 << ((v18 >> 52) + 1)) - 1) & v21) + (1 << ((v18 >> 52) + 1));
        if ((v18 & 0x8000000000000000) == 0)
          v23 = v22;
        else
          v23 = -v22;
        if (v20 <= 0x53)
          v15 = v23;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v16 = v44[0];
          v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v25
            && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
            && (v28 = *(WebCore::InspectorCanvasAgent **)(v27 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)v45);
          }
          else
          {
            LOBYTE(v45[0]) = 0;
            v46 = 0;
          }
          v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v29
            && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
            && (v32 = *(WebCore::InspectorCanvasAgent **)(v31 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v47);
          }
          else
          {
            LOBYTE(v47) = 0;
            v48 = 0;
          }
          v42[0] = v45;
          v42[1] = 2;
          v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v33)
          {
            v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
            if (v35)
            {
              v36 = *(_QWORD *)(v35 + 96);
              if (v36)
                WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v43, v42);
            }
          }
          if (v48)
          {
            v37 = v47;
            v47 = 0;
            if (v37)
            {
              if (*v37 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v37;
            }
          }
          if (v46)
          {
            v38 = (_DWORD *)v45[0];
            v45[0] = 0;
            if (v38)
            {
              if (*v38 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v38;
            }
          }
          v39 = v43;
          v43 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
              WTF::StringImpl::destroy(v39, v34);
            else
              *(_DWORD *)v39 -= 2;
          }
        }
        else
        {
          v16 = v44[0];
        }
        WebCore::WebGL2RenderingContext::pixelStorei((WTF::StringImpl *)v12, v16, v15);
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_polygonOffset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  float v19;
  JSValue v21;
  int v22;
  int v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  double v39;
  double v40;
  JSC::VM *v41;
  _QWORD v42[2];
  WTF::StringImpl *v43;
  _QWORD v44[2];
  char v45;
  _DWORD *v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "polygonOffset");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "polygonOffset");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v44[0] = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v44, this);
    v14 = v39;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    *(float *)&v22 = -INFINITY;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    *(float *)&v22 = INFINITY;
  }
  v15 = *(float *)&v22;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v44[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v18 = (double)(int)v16;
  }
  else if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v44, this);
    v18 = v40;
  }
  else
  {
    *(_QWORD *)&v18 = v16 - 0x2000000000000;
  }
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (v18 < -3.40282347e38)
  {
    *(float *)&v23 = -INFINITY;
LABEL_48:
    v19 = *(float *)&v23;
    goto LABEL_27;
  }
  if (v18 > 3.40282347e38)
  {
    *(float *)&v23 = INFINITY;
    goto LABEL_48;
  }
  v19 = v18;
LABEL_27:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v44);
    }
    else
    {
      LOBYTE(v44[0]) = 0;
      v45 = 0;
    }
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v46);
    }
    else
    {
      LOBYTE(v46) = 0;
      v47 = 0;
    }
    v42[0] = v44;
    v42[1] = 2;
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v32)
    {
      v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 96);
        if (v35)
          WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v43, v42);
      }
    }
    if (v47)
    {
      v36 = v46;
      v46 = 0;
      if (v36)
      {
        if (*v36 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v36;
      }
    }
    if (v45)
    {
      v37 = (_DWORD *)v44[0];
      v44[0] = 0;
      if (v37)
      {
        if (*v37 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v37;
      }
    }
    v38 = v43;
    v43 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v33);
      else
        *(_DWORD *)v38 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
    (*(void (**)(_QWORD, float, float))(**(_QWORD **)(v12 + 88) + 728))(*(_QWORD *)(v12 + 88), v15, v19);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_renderbufferStorage(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  const char *v21;
  WTF::StringImpl *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  JSValue v34;
  unsigned int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  unsigned int v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  JSC::VM *v62;
  unint64_t v63;
  unint64_t v64;
  JSC::VM *v65;
  _QWORD v66[2];
  WTF::StringImpl *v67;
  _DWORD v68[2];
  _DWORD v69[2];
  _QWORD v70[2];
  char v71;
  _DWORD *v72;
  char v73;
  _DWORD *v74;
  char v75;
  _DWORD *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v65 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "renderbufferStorage");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "renderbufferStorage");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v34);
  }
  v12 = *(WTF::StringImpl **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v69);
  if (v69[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v68);
  if (v68[1])
    return 0;
  v13 = *((_QWORD *)a2 + 8);
  v70[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v25 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v62 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v70, this);
      v14 = v62;
      v25 = v63;
    }
    v26 = (v25 >> 52) & 0x7FF;
    if ((v26 - 1023) <= 0x53)
    {
      v30 = v25 >> (51 - (v25 >> 52));
      if (v26 > 0x433)
        LODWORD(v30) = v25 << ((v25 >> 52) - 51);
      if (v26 >= 0x41F)
        v31 = v30;
      else
        v31 = (((1 << ((v25 >> 52) + 1)) - 1) & v30) + (1 << ((v25 >> 52) + 1));
      if ((v25 & 0x8000000000000000) == 0)
        v15 = v31;
      else
        v15 = -v31;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v16 = *((_QWORD *)a2 + 9);
  v70[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 < 0xFFFE000000000000)
  {
    v27 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v70, this);
      v27 = v64;
    }
    v28 = (v27 >> 52) & 0x7FF;
    if ((v28 - 1023) <= 0x53)
    {
      v32 = v27 >> (51 - (v27 >> 52));
      if (v28 > 0x433)
        LODWORD(v32) = v27 << ((v27 >> 52) - 51);
      if (v28 >= 0x41F)
        v33 = v32;
      else
        v33 = (((1 << ((v27 >> 52) + 1)) - 1) & v32) + (1 << ((v27 >> 52) + 1));
      if ((v27 & 0x8000000000000000) == 0)
        v18 = v33;
      else
        v18 = -v33;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = v16;
  }
  if (!*((_DWORD *)v17 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v17))
  {
    if (*((_BYTE *)v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v67 = (WTF::StringImpl *)v70[0];
      v35 = v69[0];
      v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 5) + 144))(*((_QWORD *)v12 + 5));
      if (v36
        && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
        && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)((char *)v12 + 8), v35, (uint64_t)v70);
      }
      else
      {
        LOBYTE(v70[0]) = 0;
        v71 = 0;
      }
      v40 = v68[0];
      v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 5) + 144))(*((_QWORD *)v12 + 5));
      if (v41
        && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
        && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v44, (WTF::StringImpl *)((char *)v12 + 8), v40, (uint64_t)&v72);
      }
      else
      {
        LOBYTE(v72) = 0;
        v73 = 0;
      }
      v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 5) + 144))(*((_QWORD *)v12 + 5));
      if (v45
        && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
        && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v48, (WTF::StringImpl *)((char *)v12 + 8), v15, (uint64_t)&v74);
      }
      else
      {
        LOBYTE(v74) = 0;
        v75 = 0;
      }
      v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 5) + 144))(*((_QWORD *)v12 + 5));
      if (v49
        && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
        && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v52, (WTF::StringImpl *)((char *)v12 + 8), v18, (uint64_t)&v76);
      }
      else
      {
        LOBYTE(v76) = 0;
        v77 = 0;
      }
      v66[0] = v70;
      v66[1] = 4;
      v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v12 + 5) + 144))(*((_QWORD *)v12 + 5));
      if (v53)
      {
        v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54);
        if (v55)
        {
          v56 = *(_QWORD *)(v55 + 96);
          if (v56)
            WebCore::InspectorCanvasAgent::recordAction(v56, (WTF::StringImpl *)((char *)v12 + 8), (const WTF::StringImpl *)&v67, v66);
        }
      }
      if (v77)
      {
        v57 = v76;
        v76 = 0;
        if (v57)
        {
          if (*v57 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v57;
        }
      }
      if (v75)
      {
        v58 = v74;
        v74 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
      }
      if (v73)
      {
        v59 = v72;
        v72 = 0;
        if (v59)
        {
          if (*v59 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v59;
        }
      }
      if (v71)
      {
        v60 = (_DWORD *)v70[0];
        v70[0] = 0;
        if (v60)
        {
          if (*v60 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v60;
        }
      }
      v61 = v67;
      v67 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v54);
        else
          *(_DWORD *)v61 -= 2;
      }
    }
    if (*((_BYTE *)v12 + 364))
      return 10;
    if (v69[0] == 36161)
    {
      v19 = *((_QWORD *)v12 + 23);
      v20 = WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>::unspecifiedBoolTypeInstance;
      if (!v19)
        v20 = 0;
      if (v20 && *(_DWORD *)(v19 + 24))
      {
        if (((v18 | v15) & 0x80000000) == 0)
        {
          (*(void (**)(WTF::StringImpl *, uint64_t, _QWORD, _QWORD, unint64_t, unint64_t, const char *, uint64_t))(*(_QWORD *)v12 + 104))(v12, 36161, 0, v68[0], v15, v18, "renderbufferStorage", 20);
          return 10;
        }
        v21 = "size < 0";
        v22 = v12;
        v23 = 1281;
        v24 = 9;
      }
      else
      {
        v21 = "no bound renderbuffer";
        v22 = v12;
        v23 = 1282;
        v24 = 22;
      }
    }
    else
    {
      v21 = "invalid target";
      v22 = v12;
      v23 = 1280;
      v24 = 15;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, v23, (uint64_t)"renderbufferStorage", 20, (uint64_t)v21, v24);
    return 10;
  }
  return 0;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_sampleCoverage(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  double v14;
  float v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  _BOOL8 v19;
  JSValue v21;
  int v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  WebCore::InspectorCanvasAgent *v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  WebCore::InspectorCanvasAgent *v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  double v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  JSC::VM *v44;
  _QWORD v45[2];
  WTF::StringImpl *v46;
  _QWORD v47[2];
  char v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "sampleCoverage");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "sampleCoverage");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = *((_QWORD *)a2 + 6);
  v47[0] = v13;
  if (v13 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v47, this);
    v14 = v38;
  }
  else
  {
    *(_QWORD *)&v14 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    return 0;
  if (v14 < -3.40282347e38)
  {
    *(float *)&v22 = -INFINITY;
  }
  else
  {
    if (v14 <= 3.40282347e38)
    {
      v15 = v14;
      goto LABEL_20;
    }
    *(float *)&v22 = INFINITY;
  }
  v15 = *(float *)&v22;
LABEL_20:
  v16 = *((_QWORD *)a2 + 7);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v39 = (_DWORD)v16 == 0;
    goto LABEL_83;
  }
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v16 & 0xFFFE000000000002) != 0)
    {
      v19 = v16 == 7;
      goto LABEL_24;
    }
    v40 = *(unsigned __int8 *)(v16 + 5);
    if (v40 == 3)
    {
      v43 = *(_DWORD *)(v16 + 8);
    }
    else
    {
      if (v40 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v19 = 1;
          goto LABEL_24;
        }
        v39 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_83;
      }
      v41 = *(_QWORD *)(v16 + 8);
      if ((v41 & 1) != 0)
        v42 = (int *)(v16 + 16);
      else
        v42 = (int *)(v41 + 4);
      v43 = *v42;
    }
    v39 = v43 == 0;
LABEL_83:
    v19 = !v39;
    goto LABEL_24;
  }
  v19 = v18 > 0.0 || v18 < 0.0;
LABEL_24:
  if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v23
      && (v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24)) != 0
      && (v26 = *(WebCore::InspectorCanvasAgent **)(v25 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v26, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v47);
    }
    else
    {
      LOBYTE(v47[0]) = 0;
      v48 = 0;
    }
    v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v27
      && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
      && (v30 = *(WebCore::InspectorCanvasAgent **)(v29 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v30, (WebCore::CanvasRenderingContext *)(v12 + 8), (WTF::JSONImpl::Value *)v19, (uint64_t)&v49);
    }
    else
    {
      LOBYTE(v49) = 0;
      v50 = 0;
    }
    v45[0] = v47;
    v45[1] = 2;
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v31)
    {
      v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 96);
        if (v34)
          WebCore::InspectorCanvasAgent::recordAction(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v46, v45);
      }
    }
    if (v50)
    {
      v35 = v49;
      v49 = 0;
      if (v35)
      {
        if (*v35 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v35;
      }
    }
    if (v48)
    {
      v36 = (_DWORD *)v47[0];
      v47[0] = 0;
      if (v36)
      {
        if (*v36 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v36;
      }
    }
    v37 = v46;
    v46 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
        WTF::StringImpl::destroy(v37, v32);
      else
        *(_DWORD *)v37 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
    (*(void (**)(_QWORD, _BOOL8, JSC::CallFrame *, float))(**(_QWORD **)(v12 + 88) + 744))(*(_QWORD *)(v12 + 88), v19, a3, v15);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_scissor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  JSValue v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  WebCore::InspectorCanvasAgent *v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  unint64_t v70;
  JSC::VM *v71;
  unint64_t v72;
  unint64_t v73;
  JSC::VM *v74;
  _QWORD v75[2];
  WTF::StringImpl *v76;
  _QWORD v77[2];
  char v78;
  _DWORD *v79;
  char v80;
  _DWORD *v81;
  char v82;
  _DWORD *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v74 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "scissor");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "scissor");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v43);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    v13 = *((_QWORD *)a2 + 6);
    v77[0] = v13;
    if (v13 < 0xFFFE000000000000)
    {
      v25 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
        v25 = v69;
      }
      v26 = (v25 >> 52) & 0x7FF;
      if ((v26 - 1023) <= 0x53)
      {
        v37 = v25 >> (51 - (v25 >> 52));
        if (v26 > 0x433)
          LODWORD(v37) = v25 << ((v25 >> 52) - 51);
        if (v26 >= 0x41F)
          v38 = v37;
        else
          v38 = (((1 << ((v25 >> 52) + 1)) - 1) & v37) + (1 << ((v25 >> 52) + 1));
        if ((v25 & 0x8000000000000000) == 0)
          v14 = v38;
        else
          v14 = -v38;
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = v13;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      return 0;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 7);
      v77[0] = v15;
      v16 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v15 < 0xFFFE000000000000)
      {
        v27 = v15 - 0x2000000000000;
        if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
          v27 = v70;
        }
        v28 = (v27 >> 52) & 0x7FF;
        v29 = v28 - 1023;
        v30 = v27 >> (51 - (v27 >> 52));
        if (v28 > 0x433)
          LODWORD(v30) = v27 << ((v27 >> 52) - 51);
        if (v28 >= 0x41F)
          v31 = v30;
        else
          v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
        if ((v27 & 0x8000000000000000) == 0)
          v32 = v31;
        else
          v32 = -v31;
        if (v29 <= 0x53)
          v17 = v32;
        else
          v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
      {
        return 0;
      }
      else
      {
        v18 = *((_QWORD *)a2 + 8);
        v77[0] = v18;
        v19 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v18 < 0xFFFE000000000000)
        {
          v33 = v18 - 0x2000000000000;
          if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v71 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
            v19 = v71;
            v33 = v72;
          }
          v34 = (v33 >> 52) & 0x7FF;
          if ((v34 - 1023) <= 0x53)
          {
            v39 = v33 >> (51 - (v33 >> 52));
            if (v34 > 0x433)
              LODWORD(v39) = v33 << ((v33 >> 52) - 51);
            if (v34 >= 0x41F)
              v40 = v39;
            else
              v40 = (((1 << ((v33 >> 52) + 1)) - 1) & v39) + (1 << ((v33 >> 52) + 1));
            if ((v33 & 0x8000000000000000) == 0)
              v20 = v40;
            else
              v20 = -v40;
          }
          else
          {
            v20 = 0;
          }
        }
        else
        {
          v20 = v18;
        }
        if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
        {
          return 0;
        }
        else
        {
          v21 = *((_QWORD *)a2 + 9);
          v77[0] = v21;
          v22 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v21 < 0xFFFE000000000000)
          {
            v35 = v21 - 0x2000000000000;
            if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
              v35 = v73;
            }
            v36 = (v35 >> 52) & 0x7FF;
            if ((v36 - 1023) <= 0x53)
            {
              v41 = v35 >> (51 - (v35 >> 52));
              if (v36 > 0x433)
                LODWORD(v41) = v35 << ((v35 >> 52) - 51);
              if (v36 >= 0x41F)
                v42 = v41;
              else
                v42 = (((1 << ((v35 >> 52) + 1)) - 1) & v41) + (1 << ((v35 >> 52) + 1));
              if ((v35 & 0x8000000000000000) == 0)
                v23 = v42;
              else
                v23 = -v42;
            }
            else
            {
              v23 = 0;
            }
          }
          else
          {
            v23 = v21;
          }
          if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v76 = (WTF::StringImpl *)v77[0];
              v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v44
                && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
                && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v77);
              }
              else
              {
                LOBYTE(v77[0]) = 0;
                v78 = 0;
              }
              v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v48
                && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
                && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)&v79);
              }
              else
              {
                LOBYTE(v79) = 0;
                v80 = 0;
              }
              v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v52
                && (v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53)) != 0
                && (v55 = *(WebCore::InspectorCanvasAgent **)(v54 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v55, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v81);
              }
              else
              {
                LOBYTE(v81) = 0;
                v82 = 0;
              }
              v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v56
                && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
                && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v83);
              }
              else
              {
                LOBYTE(v83) = 0;
                v84 = 0;
              }
              v75[0] = v77;
              v75[1] = 4;
              v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v60)
              {
                v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
                if (v62)
                {
                  v63 = *(_QWORD *)(v62 + 96);
                  if (v63)
                    WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v76, v75);
                }
              }
              if (v84)
              {
                v64 = v83;
                v83 = 0;
                if (v64)
                {
                  if (*v64 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v64;
                }
              }
              if (v82)
              {
                v65 = v81;
                v81 = 0;
                if (v65)
                {
                  if (*v65 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v65;
                }
              }
              if (v80)
              {
                v66 = v79;
                v79 = 0;
                if (v66)
                {
                  if (*v66 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v66;
                }
              }
              if (v78)
              {
                v67 = (_DWORD *)v77[0];
                v77[0] = 0;
                if (v67)
                {
                  if (*v67 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v67;
                }
              }
              v68 = v76;
              v76 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, v61);
                else
                  *(_DWORD *)v68 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
            {
              if (((v23 | v20) & 0x80000000) != 0)
                WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"scissor", 8, (uint64_t)"size < 0", 9);
              else
                (*(void (**)(_QWORD, unint64_t, unint64_t, unint64_t, unint64_t))(**(_QWORD **)(v12 + 88) + 752))(*(_QWORD *)(v12 + 88), v14, v17, v20, v23);
            }
            return 10;
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_shaderSource(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLShader *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  int v30;
  JSValue v33;
  WTF::StringImpl *v34;
  int hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  JSC::VM *v54;
  WTF::StringImpl *v55[2];
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59[2];
  char v60;
  _DWORD *v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v54 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "shaderSource");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "shaderSource");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v59[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLShader::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLShader **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v59, 0, "shader", 7, "WebGL2RenderingContext", 23, a8, "shaderSource", 13, "WebGLShader", 12);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v59[0] = (WTF::StringImpl *)v25;
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v25 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, this);
      if (!v26)
        goto LABEL_31;
    }
    else if (!v26)
    {
LABEL_31:
      v55[0] = v26;
      goto LABEL_32;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v59, this);
LABEL_32:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v27 = v55[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v58 = 1;
      v55[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v34);
        else
          *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      v30 = 1;
LABEL_39:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321590[v30])(v59, &v57);
      return (_BYTE *)v23;
    }
  }
  else
  {
    v27 = v55[0];
  }
  v57 = v27;
  v58 = 0;
  if (!*(_BYTE *)(v16 + 33))
  {
LABEL_35:
    v57 = 0;
    v59[0] = v27;
    WebCore::WebGLRenderingContextBase::shaderSource((WTF::StringImpl *)v16, v24, (const WTF::String *)v59);
    v29 = v59[0];
    v59[0] = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v58;
    v23 = 10;
    if (v58 == -1)
      return (_BYTE *)v23;
    goto LABEL_39;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v36
    && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
    && (v39 = *(_QWORD *)(v38 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)v59);
  }
  else
  {
    LOBYTE(v59[0]) = 0;
    v60 = 0;
  }
  v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v40
    && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
    && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v16 + 8), (int **)&v57, (uint64_t)&v61);
  }
  else
  {
    LOBYTE(v61) = 0;
    v62 = 0;
  }
  v55[0] = (WTF::StringImpl *)v59;
  v55[1] = (WTF::StringImpl *)2;
  v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v44)
  {
    v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45);
    if (v46)
    {
      v47 = *(_QWORD *)(v46 + 96);
      if (v47)
        WebCore::InspectorCanvasAgent::recordAction(v47, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v56, v55);
    }
  }
  if (v62)
  {
    v48 = v61;
    v61 = 0;
    if (v48)
    {
      if (*v48 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v48;
    }
  }
  if (v60)
  {
    v49 = v59[0];
    v59[0] = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*(_DWORD *)v49;
    }
  }
  v50 = v56;
  v56 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v45);
    else
      *(_DWORD *)v50 -= 2;
  }
  if (!v58)
  {
    v27 = v57;
    goto LABEL_35;
  }
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilFunc(v51, v52, v53);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilFunc(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  JSValue v23;
  unsigned int v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  WebCore::InspectorCanvasAgent *v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  WebCore::InspectorCanvasAgent *v32;
  unsigned int v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  unint64_t v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  _DWORD v51[2];
  _DWORD v52[2];
  _QWORD v53[2];
  char v54;
  _DWORD *v55;
  char v56;
  _DWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "stencilFunc");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "stencilFunc");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v52);
    if (v52[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      v53[0] = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v17 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          v46 = (JSC::VM *)*((_QWORD *)this + 7);
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v53, this);
          v14 = v46;
          v17 = v47;
        }
        v18 = (v17 >> 52) & 0x7FF;
        v19 = v18 - 1023;
        v20 = v17 >> (51 - (v17 >> 52));
        if (v18 > 0x433)
          LODWORD(v20) = v17 << ((v17 >> 52) - 51);
        if (v18 >= 0x41F)
          v21 = v20;
        else
          v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
        if ((v17 & 0x8000000000000000) == 0)
          v22 = v21;
        else
          v22 = -v21;
        if (v19 <= 0x53)
          v15 = v22;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v51);
        if (v51[1])
        {
          return 0;
        }
        else
        {
          if (*(_BYTE *)(v12 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v24 = v52[0];
            v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v25
              && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
              && (v28 = *(WebCore::InspectorCanvasAgent **)(v27 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), v24, (uint64_t)v53);
            }
            else
            {
              LOBYTE(v53[0]) = 0;
              v54 = 0;
            }
            v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v29
              && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
              && (v32 = *(WebCore::InspectorCanvasAgent **)(v31 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v55);
            }
            else
            {
              LOBYTE(v55) = 0;
              v56 = 0;
            }
            v33 = v51[0];
            v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v34
              && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
              && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), v33, (uint64_t)&v57);
            }
            else
            {
              LOBYTE(v57) = 0;
              v58 = 0;
            }
            v49[0] = v53;
            v49[1] = 3;
            v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v38)
            {
              v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
              if (v40)
              {
                v41 = *(_QWORD *)(v40 + 96);
                if (v41)
                  WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v50, v49);
              }
            }
            if (v58)
            {
              v42 = v57;
              v57 = 0;
              if (v42)
              {
                if (*v42 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v42;
              }
            }
            if (v56)
            {
              v43 = v55;
              v55 = 0;
              if (v43)
              {
                if (*v43 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v43;
              }
            }
            if (v54)
            {
              v44 = (_DWORD *)v53[0];
              v53[0] = 0;
              if (v44)
              {
                if (*v44 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v44;
              }
            }
            v45 = v50;
            v50 = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, v39);
              else
                *(_DWORD *)v45 -= 2;
            }
          }
          if (!*(_BYTE *)(v12 + 364))
            (*(void (**)(_QWORD, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(v12 + 88) + 768))(*(_QWORD *)(v12 + 88), v52[0], v15, v51[0]);
          return 10;
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilFuncSeparate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  JSValue v21;
  unsigned int v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  WebCore::InspectorCanvasAgent *v26;
  unsigned int v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  unsigned int v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  JSC::VM *v50;
  unint64_t v51;
  JSC::VM *v52;
  _QWORD v53[2];
  WTF::StringImpl *v54;
  _DWORD v55[2];
  _DWORD v56[2];
  _DWORD v57[2];
  _QWORD v58[2];
  char v59;
  _DWORD *v60;
  char v61;
  _DWORD *v62;
  char v63;
  _DWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v52 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v52, "WebGL2RenderingContext", "stencilFuncSeparate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v52, "WebGL2RenderingContext", "stencilFuncSeparate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v57);
    if (v57[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v56);
      if (v56[1])
      {
        return 0;
      }
      else
      {
        v13 = *((_QWORD *)a2 + 8);
        v58[0] = v13;
        v14 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v13 < 0xFFFE000000000000)
        {
          v17 = v13 - 0x2000000000000;
          if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v50 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v58, this);
            v14 = v50;
            v17 = v51;
          }
          v18 = (v17 >> 52) & 0x7FF;
          if ((v18 - 1023) <= 0x53)
          {
            v19 = v17 >> (51 - (v17 >> 52));
            if (v18 > 0x433)
              LODWORD(v19) = v17 << ((v17 >> 52) - 51);
            if (v18 >= 0x41F)
              v20 = v19;
            else
              v20 = (((1 << ((v17 >> 52) + 1)) - 1) & v19) + (1 << ((v17 >> 52) + 1));
            if ((v17 & 0x8000000000000000) == 0)
              v15 = v20;
            else
              v15 = -v20;
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          v15 = v13;
        }
        if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
        {
          return 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v55);
          if (v55[1])
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v54 = (WTF::StringImpl *)v58[0];
              v22 = v57[0];
              v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v23
                && (v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24)) != 0
                && (v26 = *(WebCore::InspectorCanvasAgent **)(v25 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v26, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v58);
              }
              else
              {
                LOBYTE(v58[0]) = 0;
                v59 = 0;
              }
              v27 = v56[0];
              v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v28
                && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
                && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v27, (uint64_t)&v60);
              }
              else
              {
                LOBYTE(v60) = 0;
                v61 = 0;
              }
              v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v32
                && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
                && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v62);
              }
              else
              {
                LOBYTE(v62) = 0;
                v63 = 0;
              }
              v36 = v55[0];
              v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v37
                && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
                && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v12 + 8), v36, (uint64_t)&v64);
              }
              else
              {
                LOBYTE(v64) = 0;
                v65 = 0;
              }
              v53[0] = v58;
              v53[1] = 4;
              v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v41)
              {
                v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
                if (v43)
                {
                  v44 = *(_QWORD *)(v43 + 96);
                  if (v44)
                    WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v54, v53);
                }
              }
              if (v65)
              {
                v45 = v64;
                v64 = 0;
                if (v45)
                {
                  if (*v45 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v45;
                }
              }
              if (v63)
              {
                v46 = v62;
                v62 = 0;
                if (v46)
                {
                  if (*v46 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v46;
                }
              }
              if (v61)
              {
                v47 = v60;
                v60 = 0;
                if (v47)
                {
                  if (*v47 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v47;
                }
              }
              if (v59)
              {
                v48 = (_DWORD *)v58[0];
                v58[0] = 0;
                if (v48)
                {
                  if (*v48 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v48;
                }
              }
              v49 = v54;
              v54 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, v42);
                else
                  *(_DWORD *)v49 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
              (*(void (**)(_QWORD, _QWORD, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(v12 + 88) + 776))(*(_QWORD *)(v12 + 88), v57[0], v56[0], v15, v55[0]);
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilMask(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  JSValue v13;
  unsigned int v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  _DWORD v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "stencilMask");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "stencilMask");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v13);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v14, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      if (!*(_BYTE *)(v11 + 364))
      {
        *(_DWORD *)(v11 + 420) = v28[0];
        (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 784))(*(_QWORD *)(v11 + 88));
      }
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilMaskSeparate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v16;
  WebCore::InspectorInstrumentation *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  WebCore::InspectorCanvasAgent *v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  WTF::StringImpl *v34;
  _DWORD v35[2];
  _DWORD v36[2];
  _QWORD v37[2];
  char v38;
  _DWORD *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "stencilMaskSeparate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "stencilMaskSeparate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v16.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v16);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
    if (v36[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v35);
      if (v35[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v13 = v36[0];
          v17 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v17
            && (v19 = WebCore::InspectorInstrumentation::instrumentingAgents(v17, v18)) != 0
            && (v20 = *(WebCore::InspectorCanvasAgent **)(v19 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v20, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v37);
          }
          else
          {
            LOBYTE(v37[0]) = 0;
            v38 = 0;
          }
          v14 = v35[0];
          v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v21
            && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
            && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)&v39);
          }
          else
          {
            LOBYTE(v39) = 0;
            v40 = 0;
          }
          v33[0] = v37;
          v33[1] = 2;
          v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v25)
          {
            v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 96);
              if (v28)
                WebCore::InspectorCanvasAgent::recordAction(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v34, v33);
            }
          }
          if (v40)
          {
            v29 = v39;
            v39 = 0;
            if (v29)
            {
              if (*v29 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v29;
            }
          }
          if (v38)
          {
            v30 = (_DWORD *)v37[0];
            v37[0] = 0;
            if (v30)
            {
              if (*v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v30;
            }
          }
          v31 = v34;
          v34 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
        else
        {
          v13 = v36[0];
          v14 = v35[0];
        }
        if (!*(_BYTE *)(v12 + 364))
        {
          if ((_DWORD)v13 == 1032 || (_DWORD)v13 == 1028)
            *(_DWORD *)(v12 + 420) = v14;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 88) + 792))(*(_QWORD *)(v12 + 88), v13, v14);
        }
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilOp(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSValue v14;
  unsigned int v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  unsigned int v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  unsigned int v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _DWORD v41[2];
  _DWORD v42[2];
  _DWORD v43[2];
  _QWORD v44[2];
  char v45;
  _DWORD *v46;
  char v47;
  _DWORD *v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "stencilOp");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "stencilOp");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v43);
    if (v43[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v42);
      if (v42[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v41);
        if (v41[1])
        {
          return 0;
        }
        else
        {
          if (*(_BYTE *)(v12 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v15 = v43[0];
            v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v16
              && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
              && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v44);
            }
            else
            {
              LOBYTE(v44[0]) = 0;
              v45 = 0;
            }
            v20 = v42[0];
            v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v21
              && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
              && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v46);
            }
            else
            {
              LOBYTE(v46) = 0;
              v47 = 0;
            }
            v25 = v41[0];
            v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v26
              && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
              && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v25, (uint64_t)&v48);
            }
            else
            {
              LOBYTE(v48) = 0;
              v49 = 0;
            }
            v39[0] = v44;
            v39[1] = 3;
            v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v30)
            {
              v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
              if (v32)
              {
                v33 = *(_QWORD *)(v32 + 96);
                if (v33)
                  WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v39);
              }
            }
            if (v49)
            {
              v34 = v48;
              v48 = 0;
              if (v34)
              {
                if (*v34 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v34;
              }
            }
            if (v47)
            {
              v35 = v46;
              v46 = 0;
              if (v35)
              {
                if (*v35 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v35;
              }
            }
            if (v45)
            {
              v36 = (_DWORD *)v44[0];
              v44[0] = 0;
              if (v36)
              {
                if (*v36 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v36;
              }
            }
            v37 = v40;
            v40 = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v31);
              else
                *(_DWORD *)v37 -= 2;
            }
          }
          if (!*(_BYTE *)(v12 + 364))
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 800))(*(_QWORD *)(v12 + 88), v43[0], v42[0], v41[0]);
          return 10;
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_stencilOpSeparate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  JSValue v14;
  unsigned int v15;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  WebCore::InspectorCanvasAgent *v19;
  unsigned int v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  unsigned int v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  unsigned int v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  JSC::VM *v44;
  _QWORD v45[2];
  WTF::StringImpl *v46;
  _DWORD v47[2];
  _DWORD v48[2];
  _DWORD v49[2];
  _DWORD v50[2];
  _QWORD v51[2];
  char v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  char v56;
  _DWORD *v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "stencilOpSeparate");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "WebGL2RenderingContext", "stencilOpSeparate");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v50);
    if (v50[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v49);
      if (v49[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v48);
        if (v48[1])
        {
          return 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v47);
          if (v47[1])
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v46 = (WTF::StringImpl *)v51[0];
              v15 = v50[0];
              v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v16
                && (v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17)) != 0
                && (v19 = *(WebCore::InspectorCanvasAgent **)(v18 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v19, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v51);
              }
              else
              {
                LOBYTE(v51[0]) = 0;
                v52 = 0;
              }
              v20 = v49[0];
              v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v21
                && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
                && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v53);
              }
              else
              {
                LOBYTE(v53) = 0;
                v54 = 0;
              }
              v25 = v48[0];
              v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v26
                && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
                && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v25, (uint64_t)&v55);
              }
              else
              {
                LOBYTE(v55) = 0;
                v56 = 0;
              }
              v30 = v47[0];
              v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v31
                && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
                && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), v30, (uint64_t)&v57);
              }
              else
              {
                LOBYTE(v57) = 0;
                v58 = 0;
              }
              v45[0] = v51;
              v45[1] = 4;
              v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v35)
              {
                v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36);
                if (v37)
                {
                  v38 = *(_QWORD *)(v37 + 96);
                  if (v38)
                    WebCore::InspectorCanvasAgent::recordAction(v38, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v46, v45);
                }
              }
              if (v58)
              {
                v39 = v57;
                v57 = 0;
                if (v39)
                {
                  if (*v39 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v39;
                }
              }
              if (v56)
              {
                v40 = v55;
                v55 = 0;
                if (v40)
                {
                  if (*v40 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v40;
                }
              }
              if (v54)
              {
                v41 = v53;
                v53 = 0;
                if (v41)
                {
                  if (*v41 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v41;
                }
              }
              if (v52)
              {
                v42 = (_DWORD *)v51[0];
                v51[0] = 0;
                if (v42)
                {
                  if (*v42 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v42;
                }
              }
              v43 = v46;
              v46 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, v36);
                else
                  *(_DWORD *)v43 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
              (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 808))(*(_QWORD *)(v12 + 88), v50[0], v49[0], v48[0], v47[0]);
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texParameterf(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  JSValue v20;
  int v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  WebCore::InspectorCanvasAgent *v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  double v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  unsigned int v46[2];
  unsigned int v47[2];
  _QWORD v48[2];
  char v49;
  _DWORD *v50;
  char v51;
  _DWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "texParameterf");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "texParameterf");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v47);
  if (v47[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v46);
  if (v46[1])
    return 0;
  v13 = *((_QWORD *)a2 + 8);
  v48[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v48, this);
    v15 = v42;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    *(float *)&v21 = -INFINITY;
LABEL_38:
    v16 = *(float *)&v21;
    goto LABEL_22;
  }
  if (v15 > 3.40282347e38)
  {
    *(float *)&v21 = INFINITY;
    goto LABEL_38;
  }
  v16 = v15;
LABEL_22:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = v47[0];
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v22
      && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
      && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v25, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)v48);
    }
    else
    {
      LOBYTE(v48[0]) = 0;
      v49 = 0;
    }
    v18 = v46[0];
    v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v26
      && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
      && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v18, (uint64_t)&v50);
    }
    else
    {
      LOBYTE(v50) = 0;
      v51 = 0;
    }
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(WebCore::InspectorCanvasAgent **)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v52);
    }
    else
    {
      LOBYTE(v52) = 0;
      v53 = 0;
    }
    v44[0] = v48;
    v44[1] = 3;
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34)
    {
      v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 96);
        if (v37)
          WebCore::InspectorCanvasAgent::recordAction(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v45, v44);
      }
    }
    if (v53)
    {
      v38 = v52;
      v52 = 0;
      if (v38)
      {
        if (*v38 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v38;
      }
    }
    if (v51)
    {
      v39 = v50;
      v50 = 0;
      if (v39)
      {
        if (*v39 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v39;
      }
    }
    if (v49)
    {
      v40 = (_DWORD *)v48[0];
      v48[0] = 0;
      if (v40)
      {
        if (*v40 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v40;
      }
    }
    v41 = v45;
    v45 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v35);
      else
        *(_DWORD *)v41 -= 2;
    }
  }
  else
  {
    v17 = v47[0];
    v18 = v46[0];
  }
  WebCore::WebGLRenderingContextBase::texParameter((WTF::StringImpl *)v12, v17, v18, v16, 0, 1);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texParameteri(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  JSC::VM *v45;
  _QWORD v46[2];
  WTF::StringImpl *v47;
  unsigned int v48[2];
  unsigned int v49[2];
  _QWORD v50[2];
  char v51;
  _DWORD *v52;
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v45, "WebGL2RenderingContext", "texParameteri");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v45, "WebGL2RenderingContext", "texParameteri");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v49);
    if (v49[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v48);
      if (v48[1])
      {
        return 0;
      }
      else
      {
        v13 = *((_QWORD *)a2 + 8);
        v50[0] = v13;
        v14 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v13 < 0xFFFE000000000000)
        {
          v19 = v13 - 0x2000000000000;
          if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v50, this);
            v19 = v44;
          }
          v20 = (v19 >> 52) & 0x7FF;
          if ((v20 - 1023) <= 0x53)
          {
            v21 = v19 >> (51 - (v19 >> 52));
            if (v20 > 0x433)
              LODWORD(v21) = v19 << ((v19 >> 52) - 51);
            if (v20 >= 0x41F)
              v22 = v21;
            else
              v22 = (((1 << ((v19 >> 52) + 1)) - 1) & v21) + (1 << ((v19 >> 52) + 1));
            if ((v19 & 0x8000000000000000) == 0)
              v15 = v22;
            else
              v15 = -v22;
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          v15 = v13;
        }
        if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
        {
          return 0;
        }
        else
        {
          if (*(_BYTE *)(v12 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v16 = v49[0];
            v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v24
              && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
              && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)v50);
            }
            else
            {
              LOBYTE(v50[0]) = 0;
              v51 = 0;
            }
            v17 = v48[0];
            v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v28
              && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
              && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)&v52);
            }
            else
            {
              LOBYTE(v52) = 0;
              v53 = 0;
            }
            v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v32
              && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
              && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v54);
            }
            else
            {
              LOBYTE(v54) = 0;
              v55 = 0;
            }
            v46[0] = v50;
            v46[1] = 3;
            v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                         + 144))(*(_QWORD *)(v12 + 40));
            if (v36)
            {
              v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37);
              if (v38)
              {
                v39 = *(_QWORD *)(v38 + 96);
                if (v39)
                  WebCore::InspectorCanvasAgent::recordAction(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v47, v46);
              }
            }
            if (v55)
            {
              v40 = v54;
              v54 = 0;
              if (v40)
              {
                if (*v40 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v40;
              }
            }
            if (v53)
            {
              v41 = v52;
              v52 = 0;
              if (v41)
              {
                if (*v41 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v41;
              }
            }
            if (v51)
            {
              v42 = (_DWORD *)v50[0];
              v50[0] = 0;
              if (v42)
              {
                if (*v42 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v42;
              }
            }
            v43 = v47;
            v47 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
                WTF::StringImpl::destroy(v43, v37);
              else
                *(_DWORD *)v43 -= 2;
            }
          }
          else
          {
            v16 = v49[0];
            v17 = v48[0];
          }
          WebCore::WebGLRenderingContextBase::texParameter((WTF::StringImpl *)v12, v16, v17, 0.0, v15, 0);
          return 10;
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  uint64_t v28;
  JSValue v31;
  int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  double v48;
  JSC::VM *v49;
  _QWORD v50[2];
  WTF::StringImpl *v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v49 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v49, "WebGL2RenderingContext", "uniform1f");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v49, "WebGL2RenderingContext", "uniform1f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v31);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v18 = 0;
  }
  else
  {
    v52[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLUniformLocation::s_info && v21 != 0);
    }
    if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1f", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v25 = *((_QWORD *)a2 + 7);
  v52[0] = v25;
  if (v25 >= 0xFFFE000000000000)
  {
    v26 = (double)(int)v25;
  }
  else if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v52, this);
    v26 = v48;
  }
  else
  {
    *(_QWORD *)&v26 = v25 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v26 < -3.40282347e38)
  {
    *(float *)&v32 = -INFINITY;
LABEL_56:
    v27 = *(float *)&v32;
    goto LABEL_35;
  }
  if (v26 > 3.40282347e38)
  {
    *(float *)&v32 = INFINITY;
    goto LABEL_56;
  }
  v27 = v26;
LABEL_35:
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(_QWORD *)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), v18, (uint64_t)v52);
    }
    else
    {
      LOBYTE(v52[0]) = 0;
      v53 = 0;
    }
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v27, (uint64_t)&v54);
    }
    else
    {
      LOBYTE(v54) = 0;
      v55 = 0;
    }
    v50[0] = v52;
    v50[1] = 2;
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v41)
    {
      v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 96);
        if (v44)
          WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v51, v50);
      }
    }
    if (v55)
    {
      v45 = v54;
      v54 = 0;
      if (v45)
      {
        if (*v45 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v45;
      }
    }
    if (v53)
    {
      v46 = (_DWORD *)v52[0];
      v52[0] = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    v47 = v51;
    v51 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v42);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  v24 = 10;
  if (v18 && !*(_BYTE *)(v16 + 364))
  {
    v28 = *(_QWORD *)(v18 + 8);
    if (*(_DWORD *)(v28 + 60) != *(_DWORD *)(v18 + 20))
      v28 = 0;
    if (*(_QWORD *)(v16 + 168) == v28)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *, float))(**(_QWORD **)(v16 + 88) + 832))(*(_QWORD *)(v16 + 88), *(unsigned int *)(v18 + 16), a3, v27);
      return 10;
    }
    else
    {
      v24 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1282, (uint64_t)"uniform1f", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v24;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  float v28;
  unint64_t v29;
  JSC::VM *v30;
  double v31;
  float v32;
  uint64_t v33;
  JSValue v36;
  int v37;
  int v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  double v59;
  double v60;
  JSC::VM *v61;
  _QWORD v62[2];
  WTF::StringImpl *v63;
  _QWORD v64[2];
  char v65;
  _DWORD *v66;
  char v67;
  _DWORD *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v61 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "uniform2f");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "uniform2f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v36);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v64[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v64, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2f", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v64[0] = v26;
  if (v26 >= 0xFFFE000000000000)
  {
    v27 = (double)(int)v26;
  }
  else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v64, this);
    v27 = v59;
  }
  else
  {
    *(_QWORD *)&v27 = v26 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v27 < -3.40282347e38)
  {
    *(float *)&v37 = -INFINITY;
  }
  else
  {
    if (v27 <= 3.40282347e38)
    {
      v28 = v27;
      goto LABEL_35;
    }
    *(float *)&v37 = INFINITY;
  }
  v28 = *(float *)&v37;
LABEL_35:
  v29 = *((_QWORD *)a2 + 8);
  v64[0] = v29;
  v30 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v29 >= 0xFFFE000000000000)
  {
    v31 = (double)(int)v29;
  }
  else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v64, this);
    v31 = v60;
  }
  else
  {
    *(_QWORD *)&v31 = v29 - 0x2000000000000;
  }
  if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
    return 0;
  if (v31 < -3.40282347e38)
  {
    *(float *)&v38 = -INFINITY;
LABEL_69:
    v32 = *(float *)&v38;
    goto LABEL_42;
  }
  if (v31 > 3.40282347e38)
  {
    *(float *)&v38 = INFINITY;
    goto LABEL_69;
  }
  v32 = v31;
LABEL_42:
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v39
      && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
      && (v42 = *(_QWORD *)(v41 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v42, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v64);
    }
    else
    {
      LOBYTE(v64[0]) = 0;
      v65 = 0;
    }
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v28, (uint64_t)&v66);
    }
    else
    {
      LOBYTE(v66) = 0;
      v67 = 0;
    }
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v47
      && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
      && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v50, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v68);
    }
    else
    {
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    v62[0] = v64;
    v62[1] = 3;
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v51)
    {
      v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52);
      if (v53)
      {
        v54 = *(_QWORD *)(v53 + 96);
        if (v54)
          WebCore::InspectorCanvasAgent::recordAction(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v63, v62);
      }
    }
    if (v69)
    {
      v55 = v68;
      v68 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if (v67)
    {
      v56 = v66;
      v66 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v65)
    {
      v57 = (_DWORD *)v64[0];
      v64[0] = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    v58 = v63;
    v63 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v52);
      else
        *(_DWORD *)v58 -= 2;
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v33 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v33 + 60) != *(_DWORD *)(v19 + 20))
      v33 = 0;
    if (*(_QWORD *)(v17 + 168) == v33)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *, float, float))(**(_QWORD **)(v17 + 88) + 864))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), a3, v28, v32);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform2f", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  float v28;
  unint64_t v29;
  JSC::VM *v30;
  double v31;
  float v32;
  unint64_t v33;
  JSC::VM *v34;
  double v35;
  float v36;
  uint64_t v37;
  JSValue v40;
  int v41;
  int v42;
  int v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  WebCore::InspectorCanvasAgent *v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  double v69;
  double v70;
  double v71;
  JSC::VM *v72;
  _QWORD v73[2];
  WTF::StringImpl *v74;
  _QWORD v75[2];
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  _DWORD *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v72 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v72, "WebGL2RenderingContext", "uniform3f");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v72, "WebGL2RenderingContext", "uniform3f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v40);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v75[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v75, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3f", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v75[0] = v26;
  if (v26 >= 0xFFFE000000000000)
  {
    v27 = (double)(int)v26;
  }
  else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v75, this);
    v27 = v69;
  }
  else
  {
    *(_QWORD *)&v27 = v26 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v27 < -3.40282347e38)
  {
    *(float *)&v41 = -INFINITY;
  }
  else
  {
    if (v27 <= 3.40282347e38)
    {
      v28 = v27;
      goto LABEL_35;
    }
    *(float *)&v41 = INFINITY;
  }
  v28 = *(float *)&v41;
LABEL_35:
  v29 = *((_QWORD *)a2 + 8);
  v75[0] = v29;
  v30 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v29 >= 0xFFFE000000000000)
  {
    v31 = (double)(int)v29;
  }
  else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v75, this);
    v31 = v70;
  }
  else
  {
    *(_QWORD *)&v31 = v29 - 0x2000000000000;
  }
  if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
    return 0;
  if (v31 < -3.40282347e38)
  {
    *(float *)&v42 = -INFINITY;
  }
  else
  {
    if (v31 <= 3.40282347e38)
    {
      v32 = v31;
      goto LABEL_42;
    }
    *(float *)&v42 = INFINITY;
  }
  v32 = *(float *)&v42;
LABEL_42:
  v33 = *((_QWORD *)a2 + 9);
  v75[0] = v33;
  v34 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v33 >= 0xFFFE000000000000)
  {
    v35 = (double)(int)v33;
  }
  else if (v33 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v75, this);
    v35 = v71;
  }
  else
  {
    *(_QWORD *)&v35 = v33 - 0x2000000000000;
  }
  if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
    return 0;
  if (v35 < -3.40282347e38)
  {
    *(float *)&v43 = -INFINITY;
LABEL_82:
    v36 = *(float *)&v43;
    goto LABEL_49;
  }
  if (v35 > 3.40282347e38)
  {
    *(float *)&v43 = INFINITY;
    goto LABEL_82;
  }
  v36 = v35;
LABEL_49:
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(_QWORD *)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v75);
    }
    else
    {
      LOBYTE(v75[0]) = 0;
      v76 = 0;
    }
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v28, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52
      && (v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53)) != 0
      && (v55 = *(WebCore::InspectorCanvasAgent **)(v54 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v56
      && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
      && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v36, (uint64_t)&v81);
    }
    else
    {
      LOBYTE(v81) = 0;
      v82 = 0;
    }
    v73[0] = v75;
    v73[1] = 4;
    v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v60)
    {
      v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 96);
        if (v63)
          WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v74, v73);
      }
    }
    if (v82)
    {
      v64 = v81;
      v81 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v64;
      }
    }
    if (v80)
    {
      v65 = v79;
      v79 = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    if (v78)
    {
      v66 = v77;
      v77 = 0;
      if (v66)
      {
        if (*v66 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v66;
      }
    }
    if (v76)
    {
      v67 = (_DWORD *)v75[0];
      v75[0] = 0;
      if (v67)
      {
        if (*v67 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v67;
      }
    }
    v68 = v74;
    v74 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v61);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v37 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v37 + 60) != *(_DWORD *)(v19 + 20))
      v37 = 0;
    if (*(_QWORD *)(v17 + 168) == v37)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *, float, float, float))(**(_QWORD **)(v17 + 88) + 896))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), a3, v28, v32, v36);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform3f", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  float v28;
  unint64_t v29;
  JSC::VM *v30;
  double v31;
  float v32;
  unint64_t v33;
  JSC::VM *v34;
  double v35;
  float v36;
  unint64_t v37;
  JSC::VM *v38;
  double v39;
  float v40;
  uint64_t v41;
  JSValue v44;
  int v45;
  int v46;
  int v47;
  int v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  WebCore::InspectorInstrumentation *v61;
  WebCore::ScriptExecutionContext *v62;
  uint64_t v63;
  WebCore::InspectorCanvasAgent *v64;
  WebCore::InspectorInstrumentation *v65;
  WebCore::ScriptExecutionContext *v66;
  uint64_t v67;
  WebCore::InspectorCanvasAgent *v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  WTF::StringImpl *v78;
  double v79;
  double v80;
  double v81;
  double v82;
  JSC::VM *v83;
  _QWORD v84[2];
  WTF::StringImpl *v85;
  _QWORD v86[2];
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  _DWORD *v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v83 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v83, "WebGL2RenderingContext", "uniform4f");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v83, "WebGL2RenderingContext", "uniform4f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v44);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v86[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v86, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4f", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v86[0] = v26;
  if (v26 >= 0xFFFE000000000000)
  {
    v27 = (double)(int)v26;
  }
  else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
    v27 = v79;
  }
  else
  {
    *(_QWORD *)&v27 = v26 - 0x2000000000000;
  }
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
    return 0;
  if (v27 < -3.40282347e38)
  {
    *(float *)&v45 = -INFINITY;
  }
  else
  {
    if (v27 <= 3.40282347e38)
    {
      v28 = v27;
      goto LABEL_35;
    }
    *(float *)&v45 = INFINITY;
  }
  v28 = *(float *)&v45;
LABEL_35:
  v29 = *((_QWORD *)a2 + 8);
  v86[0] = v29;
  v30 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v29 >= 0xFFFE000000000000)
  {
    v31 = (double)(int)v29;
  }
  else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
    v31 = v80;
  }
  else
  {
    *(_QWORD *)&v31 = v29 - 0x2000000000000;
  }
  if (*((_DWORD *)v30 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v30) & 1) != 0)
    return 0;
  if (v31 < -3.40282347e38)
  {
    *(float *)&v46 = -INFINITY;
  }
  else
  {
    if (v31 <= 3.40282347e38)
    {
      v32 = v31;
      goto LABEL_42;
    }
    *(float *)&v46 = INFINITY;
  }
  v32 = *(float *)&v46;
LABEL_42:
  v33 = *((_QWORD *)a2 + 9);
  v86[0] = v33;
  v34 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v33 >= 0xFFFE000000000000)
  {
    v35 = (double)(int)v33;
  }
  else if (v33 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
    v35 = v81;
  }
  else
  {
    *(_QWORD *)&v35 = v33 - 0x2000000000000;
  }
  if (*((_DWORD *)v34 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v34) & 1) != 0)
    return 0;
  if (v35 < -3.40282347e38)
  {
    *(float *)&v47 = -INFINITY;
  }
  else
  {
    if (v35 <= 3.40282347e38)
    {
      v36 = v35;
      goto LABEL_49;
    }
    *(float *)&v47 = INFINITY;
  }
  v36 = *(float *)&v47;
LABEL_49:
  v37 = *((_QWORD *)a2 + 10);
  v86[0] = v37;
  v38 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v37 >= 0xFFFE000000000000)
  {
    v39 = (double)(int)v37;
  }
  else if (v37 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
    v39 = v82;
  }
  else
  {
    *(_QWORD *)&v39 = v37 - 0x2000000000000;
  }
  if (*((_DWORD *)v38 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v38) & 1) != 0)
    return 0;
  if (v39 < -3.40282347e38)
  {
    *(float *)&v48 = -INFINITY;
LABEL_95:
    v40 = *(float *)&v48;
    goto LABEL_56;
  }
  if (v39 > 3.40282347e38)
  {
    *(float *)&v48 = INFINITY;
    goto LABEL_95;
  }
  v40 = v39;
LABEL_56:
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v85 = (WTF::StringImpl *)v86[0];
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(_QWORD *)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v86);
    }
    else
    {
      LOBYTE(v86[0]) = 0;
      v87 = 0;
    }
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v53
      && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
      && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v56, (WebCore::CanvasRenderingContext *)(v17 + 8), v28, (uint64_t)&v88);
    }
    else
    {
      LOBYTE(v88) = 0;
      v89 = 0;
    }
    v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v57
      && (v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58)) != 0
      && (v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v60, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v90);
    }
    else
    {
      LOBYTE(v90) = 0;
      v91 = 0;
    }
    v61 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v61
      && (v63 = WebCore::InspectorInstrumentation::instrumentingAgents(v61, v62)) != 0
      && (v64 = *(WebCore::InspectorCanvasAgent **)(v63 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v64, (WebCore::CanvasRenderingContext *)(v17 + 8), v36, (uint64_t)&v92);
    }
    else
    {
      LOBYTE(v92) = 0;
      v93 = 0;
    }
    v65 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v65
      && (v67 = WebCore::InspectorInstrumentation::instrumentingAgents(v65, v66)) != 0
      && (v68 = *(WebCore::InspectorCanvasAgent **)(v67 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v68, (WebCore::CanvasRenderingContext *)(v17 + 8), v40, (uint64_t)&v94);
    }
    else
    {
      LOBYTE(v94) = 0;
      v95 = 0;
    }
    v84[0] = v86;
    v84[1] = 5;
    v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v69)
    {
      v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70);
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 96);
        if (v72)
          WebCore::InspectorCanvasAgent::recordAction(v72, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v85, v84);
      }
    }
    if (v95)
    {
      v73 = v94;
      v94 = 0;
      if (v73)
      {
        if (*v73 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v73;
      }
    }
    if (v93)
    {
      v74 = v92;
      v92 = 0;
      if (v74)
      {
        if (*v74 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v74;
      }
    }
    if (v91)
    {
      v75 = v90;
      v90 = 0;
      if (v75)
      {
        if (*v75 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v75;
      }
    }
    if (v89)
    {
      v76 = v88;
      v88 = 0;
      if (v76)
      {
        if (*v76 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v76;
      }
    }
    if (v87)
    {
      v77 = (_DWORD *)v86[0];
      v86[0] = 0;
      if (v77)
      {
        if (*v77 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v77;
      }
    }
    v78 = v85;
    v85 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
        WTF::StringImpl::destroy(v78, v70);
      else
        *(_DWORD *)v78 -= 2;
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v41 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v41 + 60) != *(_DWORD *)(v19 + 20))
      v41 = 0;
    if (*(_QWORD *)(v17 + 168) == v41)
    {
      (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *, float, float, float, float))(**(_QWORD **)(v17 + 88)
                                                                                           + 928))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), a3, v28, v32, v36, v40);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform4f", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1i(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  JSValue v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  uint64_t v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  WebCore::InspectorCanvasAgent *v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  JSC::VM *v51;
  _QWORD v52[2];
  WTF::StringImpl *v53;
  _QWORD v54[2];
  char v55;
  _DWORD *v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v51 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "uniform1i");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v51, "WebGL2RenderingContext", "uniform1i");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v34);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v18 = 0;
  }
  else
  {
    v54[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLUniformLocation::s_info && v21 != 0);
    }
    if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v54, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1i", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v25 = *((_QWORD *)a2 + 7);
  v54[0] = v25;
  if (v25 < 0xFFFE000000000000)
  {
    v29 = v25 - 0x2000000000000;
    if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v54, this);
      v29 = v50;
    }
    v30 = (v29 >> 52) & 0x7FF;
    if ((v30 - 1023) <= 0x53)
    {
      v31 = v29 >> (51 - (v29 >> 52));
      if (v30 > 0x433)
        LODWORD(v31) = v29 << ((v29 >> 52) - 51);
      if (v30 >= 0x41F)
        v32 = v31;
      else
        v32 = (((1 << ((v29 >> 52) + 1)) - 1) & v31) + (1 << ((v29 >> 52) + 1));
      if ((v29 & 0x8000000000000000) == 0)
        v26 = v32;
      else
        v26 = -v32;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = v25;
  }
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v35
      && (v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36)) != 0
      && (v38 = *(_QWORD *)(v37 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v38, (WTF::StringImpl *)(v16 + 8), v18, (uint64_t)v54);
    }
    else
    {
      LOBYTE(v54[0]) = 0;
      v55 = 0;
    }
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v39
      && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
      && (v42 = *(WebCore::InspectorCanvasAgent **)(v41 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v42, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)&v56);
    }
    else
    {
      LOBYTE(v56) = 0;
      v57 = 0;
    }
    v52[0] = v54;
    v52[1] = 2;
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v43)
    {
      v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44);
      if (v45)
      {
        v46 = *(_QWORD *)(v45 + 96);
        if (v46)
          WebCore::InspectorCanvasAgent::recordAction(v46, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v53, v52);
      }
    }
    if (v57)
    {
      v47 = v56;
      v56 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v55)
    {
      v48 = (_DWORD *)v54[0];
      v54[0] = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    v49 = v53;
    v53 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v44);
      else
        *(_DWORD *)v49 -= 2;
    }
  }
  v24 = 10;
  if (v18 && !*(_BYTE *)(v16 + 364))
  {
    v27 = *(_QWORD *)(v18 + 8);
    if (*(_DWORD *)(v27 + 60) != *(_DWORD *)(v18 + 20))
      v27 = 0;
    if (*(_QWORD *)(v16 + 168) == v27)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(v16 + 88) + 848))(*(_QWORD *)(v16 + 88), *(unsigned int *)(v18 + 16), v26);
      return 10;
    }
    else
    {
      v24 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1282, (uint64_t)"uniform1i", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v24;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2i(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  JSValue v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  unint64_t v66;
  JSC::VM *v67;
  _QWORD v68[2];
  WTF::StringImpl *v69;
  _QWORD v70[2];
  char v71;
  _DWORD *v72;
  char v73;
  _DWORD *v74;
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v67 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v67, "WebGL2RenderingContext", "uniform2i");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v67, "WebGL2RenderingContext", "uniform2i");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v44);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v70[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v70, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2i", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v70[0] = v26;
  if (v26 < 0xFFFE000000000000)
  {
    v33 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v70, this);
      v33 = v65;
    }
    v34 = (v33 >> 52) & 0x7FF;
    if ((v34 - 1023) <= 0x53)
    {
      v41 = v33 >> (51 - (v33 >> 52));
      if (v34 > 0x433)
        LODWORD(v41) = v33 << ((v33 >> 52) - 51);
      if (v34 >= 0x41F)
        v42 = v41;
      else
        v42 = (((1 << ((v33 >> 52) + 1)) - 1) & v41) + (1 << ((v33 >> 52) + 1));
      if ((v33 & 0x8000000000000000) == 0)
        v27 = v42;
      else
        v27 = -v42;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = v26;
  }
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    return 0;
  v28 = *((_QWORD *)a2 + 8);
  v70[0] = v28;
  v29 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v28 < 0xFFFE000000000000)
  {
    v35 = v28 - 0x2000000000000;
    if (v28 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v70, this);
      v35 = v66;
    }
    v36 = (v35 >> 52) & 0x7FF;
    v37 = v36 - 1023;
    v38 = v35 >> (51 - (v35 >> 52));
    if (v36 > 0x433)
      LODWORD(v38) = v35 << ((v35 >> 52) - 51);
    if (v36 >= 0x41F)
      v39 = v38;
    else
      v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
    if ((v35 & 0x8000000000000000) == 0)
      v40 = v39;
    else
      v40 = -v39;
    if (v37 <= 0x53)
      v30 = v40;
    else
      v30 = 0;
  }
  else
  {
    v30 = v28;
  }
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29))
    return 0;
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(_QWORD *)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v70[0]) = 0;
      v71 = 0;
    }
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)&v72);
    }
    else
    {
      LOBYTE(v72) = 0;
      v73 = 0;
    }
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v53
      && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
      && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v56, (WebCore::CanvasRenderingContext *)(v17 + 8), v30, (uint64_t)&v74);
    }
    else
    {
      LOBYTE(v74) = 0;
      v75 = 0;
    }
    v68[0] = v70;
    v68[1] = 3;
    v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v57)
    {
      v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58);
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 96);
        if (v60)
          WebCore::InspectorCanvasAgent::recordAction(v60, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v69, v68);
      }
    }
    if (v75)
    {
      v61 = v74;
      v74 = 0;
      if (v61)
      {
        if (*v61 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v61;
      }
    }
    if (v73)
    {
      v62 = v72;
      v72 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v71)
    {
      v63 = (_DWORD *)v70[0];
      v70[0] = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    v64 = v69;
    v69 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v58);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v31 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v31 + 60) != *(_DWORD *)(v19 + 20))
      v31 = 0;
    if (*(_QWORD *)(v17 + 168) == v31)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t, unint64_t))(**(_QWORD **)(v17 + 88) + 880))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v27, v30);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform2i", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3i(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  JSValue v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  WebCore::InspectorCanvasAgent *v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  JSC::VM *v78;
  unint64_t v79;
  unint64_t v80;
  JSC::VM *v81;
  _QWORD v82[2];
  WTF::StringImpl *v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v81 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v81, "WebGL2RenderingContext", "uniform3i");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v81, "WebGL2RenderingContext", "uniform3i");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v51.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v51);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3i", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v84[0] = v26;
  if (v26 < 0xFFFE000000000000)
  {
    v36 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v84, this);
      v36 = v77;
    }
    v37 = (v36 >> 52) & 0x7FF;
    if ((v37 - 1023) <= 0x53)
    {
      v46 = v36 >> (51 - (v36 >> 52));
      if (v37 > 0x433)
        LODWORD(v46) = v36 << ((v36 >> 52) - 51);
      if (v37 >= 0x41F)
        v47 = v46;
      else
        v47 = (((1 << ((v36 >> 52) + 1)) - 1) & v46) + (1 << ((v36 >> 52) + 1));
      if ((v36 & 0x8000000000000000) == 0)
        v27 = v47;
      else
        v27 = -v47;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = v26;
  }
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    return 0;
  v28 = *((_QWORD *)a2 + 8);
  v84[0] = v28;
  v29 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v28 < 0xFFFE000000000000)
  {
    v38 = v28 - 0x2000000000000;
    if (v28 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v78 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v84, this);
      v29 = v78;
      v38 = v79;
    }
    v39 = (v38 >> 52) & 0x7FF;
    v40 = v39 - 1023;
    v41 = v38 >> (51 - (v38 >> 52));
    if (v39 > 0x433)
      LODWORD(v41) = v38 << ((v38 >> 52) - 51);
    if (v39 >= 0x41F)
      v42 = v41;
    else
      v42 = (((1 << ((v38 >> 52) + 1)) - 1) & v41) + (1 << ((v38 >> 52) + 1));
    if ((v38 & 0x8000000000000000) == 0)
      v43 = v42;
    else
      v43 = -v42;
    if (v40 <= 0x53)
      v30 = v43;
    else
      v30 = 0;
  }
  else
  {
    v30 = v28;
  }
  if (*((_DWORD *)v29 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v29))
    return 0;
  v31 = *((_QWORD *)a2 + 9);
  v84[0] = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 < 0xFFFE000000000000)
  {
    v44 = v31 - 0x2000000000000;
    if (v31 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v84, this);
      v44 = v80;
    }
    v45 = (v44 >> 52) & 0x7FF;
    if ((v45 - 1023) <= 0x53)
    {
      v48 = v44 >> (51 - (v44 >> 52));
      if (v45 > 0x433)
        LODWORD(v48) = v44 << ((v44 >> 52) - 51);
      if (v45 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v44 >> 52) + 1)) - 1) & v48) + (1 << ((v44 >> 52) + 1));
      if ((v44 & 0x8000000000000000) == 0)
        v33 = v49;
      else
        v33 = -v49;
    }
    else
    {
      v33 = 0;
    }
  }
  else
  {
    v33 = v31;
  }
  if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
    return 0;
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v83 = (WTF::StringImpl *)v84[0];
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52
      && (v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53)) != 0
      && (v55 = *(_QWORD *)(v54 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v55, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
    }
    else
    {
      LOBYTE(v84[0]) = 0;
      v85 = 0;
    }
    v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v56
      && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
      && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)&v86);
    }
    else
    {
      LOBYTE(v86) = 0;
      v87 = 0;
    }
    v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v60
      && (v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61)) != 0
      && (v63 = *(WebCore::InspectorCanvasAgent **)(v62 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), v30, (uint64_t)&v88);
    }
    else
    {
      LOBYTE(v88) = 0;
      v89 = 0;
    }
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, (WebCore::CanvasRenderingContext *)(v17 + 8), v33, (uint64_t)&v90);
    }
    else
    {
      LOBYTE(v90) = 0;
      v91 = 0;
    }
    v82[0] = v84;
    v82[1] = 4;
    v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v68)
    {
      v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69);
      if (v70)
      {
        v71 = *(_QWORD *)(v70 + 96);
        if (v71)
          WebCore::InspectorCanvasAgent::recordAction(v71, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v83, v82);
      }
    }
    if (v91)
    {
      v72 = v90;
      v90 = 0;
      if (v72)
      {
        if (*v72 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v72;
      }
    }
    if (v89)
    {
      v73 = v88;
      v88 = 0;
      if (v73)
      {
        if (*v73 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v73;
      }
    }
    if (v87)
    {
      v74 = v86;
      v86 = 0;
      if (v74)
      {
        if (*v74 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v74;
      }
    }
    if (v85)
    {
      v75 = (_DWORD *)v84[0];
      v84[0] = 0;
      if (v75)
      {
        if (*v75 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v75;
      }
    }
    v76 = v83;
    v83 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v69);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v34 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v34 + 60) != *(_DWORD *)(v19 + 20))
      v34 = 0;
    if (*(_QWORD *)(v17 + 168) == v34)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t, unint64_t, unint64_t))(**(_QWORD **)(v17 + 88) + 912))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v27, v30, v33);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform3i", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4i(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  unint64_t v33;
  unint64_t v34;
  JSC::VM *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  JSValue v58;
  unint64_t v59;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  JSC::VM *v66;
  unint64_t v67;
  int v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  uint64_t v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  WebCore::InspectorCanvasAgent *v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  JSC::JSGlobalObject *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112[2];
  unsigned int v113;
  JSC::VM *v114;
  _QWORD v115[2];
  WTF::StringImpl *v116;
  _QWORD v117[2];
  char v118;
  _DWORD *v119;
  char v120;
  _DWORD *v121;
  char v122;
  _DWORD *v123;
  char v124;
  _DWORD *v125;
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v114 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v114, "WebGL2RenderingContext", "uniform4i");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v114, "WebGL2RenderingContext", "uniform4i");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v58.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v58);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v117[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v117, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4i", 10, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  v117[0] = v26;
  if (v26 < 0xFFFE000000000000)
  {
    v39 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v117, this);
      v39 = v99;
    }
    v40 = (v39 >> 52) & 0x7FF;
    if ((v40 - 1023) <= 0x53)
    {
      v51 = v39 >> (51 - (v39 >> 52));
      if (v40 > 0x433)
        LODWORD(v51) = v39 << ((v39 >> 52) - 51);
      if (v40 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v39 >> 52) + 1)) - 1) & v51) + (1 << ((v39 >> 52) + 1));
      if ((v39 & 0x8000000000000000) == 0)
        v27 = v52;
      else
        v27 = -v52;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = v26;
  }
  if (*((_DWORD *)v9 + 20))
  {
    v59 = v27;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v27 = v59;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v28 = *((_QWORD *)a2 + 8);
  v117[0] = v28;
  v29 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v28 < 0xFFFE000000000000)
  {
    v41 = v28 - 0x2000000000000;
    if (v28 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v100 = v27;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v117, this);
      v27 = v100;
      v41 = v101;
    }
    v42 = (v41 >> 52) & 0x7FF;
    v43 = v42 - 1023;
    v44 = v41 >> (51 - (v41 >> 52));
    if (v42 > 0x433)
      LODWORD(v44) = v41 << ((v41 >> 52) - 51);
    if (v42 >= 0x41F)
      v45 = v44;
    else
      v45 = (((1 << ((v41 >> 52) + 1)) - 1) & v44) + (1 << ((v41 >> 52) + 1));
    if ((v41 & 0x8000000000000000) == 0)
      v46 = v45;
    else
      v46 = -v45;
    if (v43 <= 0x53)
      v30 = v46;
    else
      v30 = 0;
  }
  else
  {
    v30 = v28;
  }
  if (*((_DWORD *)v29 + 20))
  {
    v61 = v27;
    v62 = v30;
    v63 = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
    v30 = v62;
    v27 = v61;
    if (v63)
      return 0;
  }
  v31 = *((_QWORD *)a2 + 9);
  v117[0] = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 < 0xFFFE000000000000)
  {
    v47 = v31 - 0x2000000000000;
    if (v31 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      *(_QWORD *)v112 = *((_QWORD *)this + 7);
      v102 = v27;
      v103 = v30;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v117, this);
      v30 = v103;
      v27 = v102;
      v32 = *(JSC::VM **)v112;
      v47 = v104;
    }
    v48 = (v47 >> 52) & 0x7FF;
    if ((v48 - 1023) <= 0x53)
    {
      v53 = v47 >> (51 - (v47 >> 52));
      if (v48 > 0x433)
        LODWORD(v53) = v47 << ((v47 >> 52) - 51);
      if (v48 >= 0x41F)
        v54 = v53;
      else
        v54 = (((1 << ((v47 >> 52) + 1)) - 1) & v53) + (1 << ((v47 >> 52) + 1));
      if ((v47 & 0x8000000000000000) == 0)
        v33 = v54;
      else
        v33 = -v54;
    }
    else
    {
      v33 = 0;
    }
  }
  else
  {
    v33 = v31;
  }
  if (*((_DWORD *)v32 + 20))
  {
    v109 = v27;
    v64 = v30;
    v65 = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
    v30 = v64;
    v27 = v109;
    if (v65)
      return 0;
  }
  v34 = *((_QWORD *)a2 + 10);
  v117[0] = v34;
  v35 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v34 < 0xFFFE000000000000)
  {
    v49 = v34 - 0x2000000000000;
    if (v34 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v105 = this;
      v113 = v27;
      v106 = v30;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v117, v105);
      v30 = v106;
      v27 = v113;
      v49 = v107;
    }
    v50 = (v49 >> 52) & 0x7FF;
    if ((v50 - 1023) <= 0x53)
    {
      v55 = v49 >> (51 - (v49 >> 52));
      if (v50 > 0x433)
        LODWORD(v55) = v49 << ((v49 >> 52) - 51);
      if (v50 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v49 >> 52) + 1)) - 1) & v55) + (1 << ((v49 >> 52) + 1));
      if ((v49 & 0x8000000000000000) == 0)
        v36 = v56;
      else
        v36 = -v56;
    }
    else
    {
      v36 = 0;
    }
  }
  else
  {
    v36 = v34;
  }
  if (*((_DWORD *)v35 + 20))
  {
    v66 = v35;
    v110 = v27;
    v67 = v30;
    v68 = JSC::VM::hasExceptionsAfterHandlingTraps(v66);
    v30 = v67;
    v27 = v110;
    if (v68)
      return 0;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    v108 = v30;
    v111 = v27;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v116 = (WTF::StringImpl *)v117[0];
    v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v69
      && (v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70)) != 0
      && (v72 = *(_QWORD *)(v71 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v72, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v117);
    }
    else
    {
      LOBYTE(v117[0]) = 0;
      v118 = 0;
    }
    v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v73
      && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
      && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v76, (WebCore::CanvasRenderingContext *)(v17 + 8), v111, (uint64_t)&v119);
    }
    else
    {
      LOBYTE(v119) = 0;
      v120 = 0;
    }
    v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v77
      && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
      && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v80, (WebCore::CanvasRenderingContext *)(v17 + 8), v108, (uint64_t)&v121);
    }
    else
    {
      LOBYTE(v121) = 0;
      v122 = 0;
    }
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, (WebCore::CanvasRenderingContext *)(v17 + 8), v33, (uint64_t)&v123);
    }
    else
    {
      LOBYTE(v123) = 0;
      v124 = 0;
    }
    v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v85
      && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
      && (v88 = *(WebCore::InspectorCanvasAgent **)(v87 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v88, (WebCore::CanvasRenderingContext *)(v17 + 8), v36, (uint64_t)&v125);
    }
    else
    {
      LOBYTE(v125) = 0;
      v126 = 0;
    }
    v115[0] = v117;
    v115[1] = 5;
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v89)
    {
      v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90);
      if (v91)
      {
        v92 = *(_QWORD *)(v91 + 96);
        if (v92)
          WebCore::InspectorCanvasAgent::recordAction(v92, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v116, v115);
      }
    }
    v30 = v108;
    v27 = v111;
    if (v126)
    {
      v93 = v125;
      v125 = 0;
      if (v93)
      {
        if (*v93 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v30 = v108;
          v27 = v111;
        }
        else
        {
          --*v93;
        }
      }
    }
    if (v124)
    {
      v94 = v123;
      v123 = 0;
      if (v94)
      {
        if (*v94 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v30 = v108;
          v27 = v111;
        }
        else
        {
          --*v94;
        }
      }
    }
    if (v122)
    {
      v95 = v121;
      v121 = 0;
      if (v95)
      {
        if (*v95 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v30 = v108;
          v27 = v111;
        }
        else
        {
          --*v95;
        }
      }
    }
    if (v120)
    {
      v96 = v119;
      v119 = 0;
      if (v96)
      {
        if (*v96 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v30 = v108;
          v27 = v111;
        }
        else
        {
          --*v96;
        }
      }
    }
    if (v118)
    {
      v97 = (_DWORD *)v117[0];
      v117[0] = 0;
      if (v97)
      {
        if (*v97 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v30 = v108;
          v27 = v111;
        }
        else
        {
          --*v97;
        }
      }
    }
    v98 = v116;
    v116 = 0;
    if (v98)
    {
      if (*(_DWORD *)v98 == 2)
      {
        WTF::StringImpl::destroy(v98, v90);
        v30 = v108;
        v27 = v111;
      }
      else
      {
        *(_DWORD *)v98 -= 2;
      }
    }
  }
  v25 = 10;
  if (v19 && !*(_BYTE *)(v17 + 364))
  {
    v37 = *(_QWORD *)(v19 + 8);
    if (*(_DWORD *)(v37 + 60) != *(_DWORD *)(v19 + 20))
      v37 = 0;
    if (*(_QWORD *)(v17 + 168) == v37)
    {
      (*(void (**)(_QWORD, _QWORD, unint64_t, unint64_t, unint64_t, unint64_t))(**(_QWORD **)(v17 + 88) + 944))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v27, v30, v33, v36);
      return 10;
    }
    else
    {
      v25 = 10;
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform4i", 10, (uint64_t)"location not for current program", 33);
    }
  }
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_useProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLProgram *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "useProgram");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "useProgram");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLProgram::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "useProgram", 11, "WebGLProgram", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WTF::StringImpl *)(v16 + 8), (uint64_t)v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGLRenderingContextBase::useProgram((WTF::StringImpl *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_validateProgram(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "validateProgram");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "validateProgram");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v46[0] = v9;
    if ((v17 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
    v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
    v20 = (char **)(16 * v18);
    if ((_DWORD)v18)
      v21 = v20 == &WebCore::JSWebGLProgram::s_info;
    else
      v21 = 1;
    if (!v21)
    {
      do
      {
        v20 = (char **)v20[2];
        v19 = v20 != 0;
      }
      while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
    }
    if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v46, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "validateProgram", 16, "WebGLProgram", 13);
      return 0;
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(_QWORD *)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), v24, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v46[0]) = 0;
        v47 = 0;
      }
      v44[0] = v46;
      v44[1] = 1;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v37)
      {
        v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 96);
          if (v40)
            WebCore::InspectorCanvasAgent::recordAction(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v45, v44);
        }
      }
      if (v47)
      {
        v41 = (_DWORD *)v46[0];
        v46[0] = 0;
        if (v41)
        {
          if (*v41 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v41;
        }
      }
      v42 = v45;
      v45 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    if (*(_BYTE *)(v16 + 364))
      return 10;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16)
    {
      v31 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v31)
      {
        (*(void (**)(_QWORD, uint64_t, JSC::CallFrame *))(**(_QWORD **)(v16 + 88) + 992))(*(_QWORD *)(v16 + 88), v31, a3);
        return 10;
      }
      v27 = "attempt to use a deleted object";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1281;
      v30 = 32;
    }
    else
    {
      v27 = "object does not belong to this context";
      v28 = (WTF::StringImpl *)v16;
      v29 = 1282;
      v30 = 39;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v28, v29, (uint64_t)"validateProgram", 16, (uint64_t)v27, v30);
    return 10;
  }
  v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException(v9, this, v32);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib1f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  JSValue v20;
  int v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  double v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _DWORD v41[2];
  _QWORD v42[2];
  char v43;
  _DWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "vertexAttrib1f");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "vertexAttrib1f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v41);
  if (v41[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v42[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v42, this);
    v15 = v37;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    *(float *)&v21 = -INFINITY;
  }
  else
  {
    if (v15 <= 3.40282347e38)
    {
      v16 = v15;
      goto LABEL_21;
    }
    *(float *)&v21 = INFINITY;
  }
  v16 = *(float *)&v21;
LABEL_21:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17 = v41[0];
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v22
      && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
      && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v25, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)v42);
    }
    else
    {
      LOBYTE(v42[0]) = 0;
      v43 = 0;
    }
    v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v26
      && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
      && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v44);
    }
    else
    {
      LOBYTE(v44) = 0;
      v45 = 0;
    }
    v39[0] = v42;
    v39[1] = 2;
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v30)
    {
      v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 96);
        if (v33)
          WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v39);
      }
    }
    if (v45)
    {
      v34 = v44;
      v44 = 0;
      if (v34)
      {
        if (*v34 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v34;
      }
    }
    if (v43)
    {
      v35 = (_DWORD *)v42[0];
      v42[0] = 0;
      if (v35)
      {
        if (*v35 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v35;
      }
    }
    v36 = v40;
    v40 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v31);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  else
  {
    v17 = v41[0];
  }
  if (*(_BYTE *)(v12 + 364))
    return 10;
  if (*(_DWORD *)(v12 + 164) <= v17)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"vertexAttrib1f", 15, (uint64_t)"index out of range", 19);
    return 10;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(v12 + 88) + 1000))(*(_QWORD *)(v12 + 88), v17, v16);
  if (*(_DWORD *)(v12 + 164) > v17)
  {
    v19 = *(_QWORD *)(v12 + 152) + 20 * v17;
    *(_DWORD *)v19 = 5126;
    *(float *)(v19 + 4) = v16;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = 1065353216;
    return 10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib2f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  JSValue v24;
  int v25;
  int v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  WebCore::InspectorCanvasAgent *v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  WebCore::InspectorCanvasAgent *v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  double v48;
  double v49;
  JSC::VM *v50;
  _QWORD v51[2];
  WTF::StringImpl *v52;
  _DWORD v53[2];
  _QWORD v54[2];
  char v55;
  _DWORD *v56;
  char v57;
  _DWORD *v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v50 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "vertexAttrib2f");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "vertexAttrib2f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v53);
  if (v53[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v54[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v47 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v54, this);
    v14 = v47;
    v15 = v48;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    *(float *)&v25 = -INFINITY;
  }
  else
  {
    if (v15 <= 3.40282347e38)
    {
      v16 = v15;
      goto LABEL_21;
    }
    *(float *)&v25 = INFINITY;
  }
  v16 = *(float *)&v25;
LABEL_21:
  v17 = *((_QWORD *)a2 + 8);
  v54[0] = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 >= 0xFFFE000000000000)
  {
    v19 = (double)(int)v17;
  }
  else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v54, this);
    v19 = v49;
  }
  else
  {
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
  }
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    return 0;
  if (v19 < -3.40282347e38)
  {
    *(float *)&v26 = -INFINITY;
  }
  else
  {
    if (v19 <= 3.40282347e38)
    {
      v20 = v19;
      goto LABEL_28;
    }
    *(float *)&v26 = INFINITY;
  }
  v20 = *(float *)&v26;
LABEL_28:
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = v53[0];
    v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v27
      && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
      && (v30 = *(WebCore::InspectorCanvasAgent **)(v29 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v30, (WebCore::CanvasRenderingContext *)(v12 + 8), v21, (uint64_t)v54);
    }
    else
    {
      LOBYTE(v54[0]) = 0;
      v55 = 0;
    }
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v31
      && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
      && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v34, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v56);
    }
    else
    {
      LOBYTE(v56) = 0;
      v57 = 0;
    }
    v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v35
      && (v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36)) != 0
      && (v38 = *(WebCore::InspectorCanvasAgent **)(v37 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v38, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v58);
    }
    else
    {
      LOBYTE(v58) = 0;
      v59 = 0;
    }
    v51[0] = v54;
    v51[1] = 3;
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v39)
    {
      v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 96);
        if (v42)
          WebCore::InspectorCanvasAgent::recordAction(v42, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v52, v51);
      }
    }
    if (v59)
    {
      v43 = v58;
      v58 = 0;
      if (v43)
      {
        if (*v43 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v43;
      }
    }
    if (v57)
    {
      v44 = v56;
      v56 = 0;
      if (v44)
      {
        if (*v44 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v44;
      }
    }
    if (v55)
    {
      v45 = (_DWORD *)v54[0];
      v54[0] = 0;
      if (v45)
      {
        if (*v45 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v45;
      }
    }
    v46 = v52;
    v52 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v40);
      else
        *(_DWORD *)v46 -= 2;
    }
  }
  else
  {
    v21 = v53[0];
  }
  if (*(_BYTE *)(v12 + 364))
    return 10;
  if (*(_DWORD *)(v12 + 164) <= v21)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"vertexAttrib2f", 15, (uint64_t)"index out of range", 19);
    return 10;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, float, float))(**(_QWORD **)(v12 + 88) + 1016))(*(_QWORD *)(v12 + 88), v21, v16, v20);
  if (*(_DWORD *)(v12 + 164) > v21)
  {
    v23 = *(_QWORD *)(v12 + 152) + 20 * v21;
    *(_DWORD *)v23 = 5126;
    *(float *)(v23 + 4) = v16;
    *(float *)(v23 + 8) = v20;
    *(_QWORD *)(v23 + 12) = 0x3F80000000000000;
    return 10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib3f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  float v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  JSValue v28;
  int v29;
  int v30;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  JSC::VM *v57;
  double v58;
  JSC::VM *v59;
  double v60;
  double v61;
  JSC::VM *v62;
  _QWORD v63[2];
  WTF::StringImpl *v64;
  _DWORD v65[2];
  _QWORD v66[2];
  char v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "vertexAttrib3f");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "vertexAttrib3f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v28);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v65);
  if (v65[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v66[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v57 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v14 = v57;
    v15 = v58;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    *(float *)&v29 = -INFINITY;
  }
  else
  {
    if (v15 <= 3.40282347e38)
    {
      v16 = v15;
      goto LABEL_21;
    }
    *(float *)&v29 = INFINITY;
  }
  v16 = *(float *)&v29;
LABEL_21:
  v17 = *((_QWORD *)a2 + 8);
  v66[0] = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 >= 0xFFFE000000000000)
  {
    v19 = (double)(int)v17;
  }
  else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v59 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v18 = v59;
    v19 = v60;
  }
  else
  {
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
  }
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    return 0;
  if (v19 < -3.40282347e38)
  {
    *(float *)&v30 = -INFINITY;
  }
  else
  {
    if (v19 <= 3.40282347e38)
    {
      v20 = v19;
      goto LABEL_28;
    }
    *(float *)&v30 = INFINITY;
  }
  v20 = *(float *)&v30;
LABEL_28:
  v21 = *((_QWORD *)a2 + 9);
  v66[0] = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
  }
  else if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
    v23 = v61;
  }
  else
  {
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
  }
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    v24 = -INFINITY;
  }
  else if (v23 <= 3.40282347e38)
  {
    v24 = v23;
  }
  else
  {
    v24 = INFINITY;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v64 = (WTF::StringImpl *)v66[0];
    v31 = v65[0];
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v31, (uint64_t)v66);
    }
    else
    {
      LOBYTE(v66[0]) = 0;
      v67 = 0;
    }
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v68);
    }
    else
    {
      LOBYTE(v68) = 0;
      v69 = 0;
    }
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v70);
    }
    else
    {
      LOBYTE(v70) = 0;
      v71 = 0;
    }
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v12 + 8), v24, (uint64_t)&v72);
    }
    else
    {
      LOBYTE(v72) = 0;
      v73 = 0;
    }
    v63[0] = v66;
    v63[1] = 4;
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v48)
    {
      v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
      if (v50)
      {
        v51 = *(_QWORD *)(v50 + 96);
        if (v51)
          WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v64, v63);
      }
    }
    if (v73)
    {
      v52 = v72;
      v72 = 0;
      if (v52)
      {
        if (*v52 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v52;
      }
    }
    if (v71)
    {
      v53 = v70;
      v70 = 0;
      if (v53)
      {
        if (*v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v53;
      }
    }
    if (v69)
    {
      v54 = v68;
      v68 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v67)
    {
      v55 = (_DWORD *)v66[0];
      v66[0] = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    v56 = v64;
    v64 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v49);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if (*(_BYTE *)(v12 + 364))
    return 10;
  v25 = v65[0];
  if (*(_DWORD *)(v12 + 164) <= v65[0])
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"vertexAttrib3f", 15, (uint64_t)"index out of range", 19);
    return 10;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, float, float, float))(**(_QWORD **)(v12 + 88) + 1032))(*(_QWORD *)(v12 + 88), v65[0], v16, v20, v24);
  if (*(_DWORD *)(v12 + 164) > v25)
  {
    v27 = *(_QWORD *)(v12 + 152) + 20 * v25;
    *(_DWORD *)v27 = 5126;
    *(float *)(v27 + 4) = v16;
    *(float *)(v27 + 8) = v20;
    *(float *)(v27 + 12) = v24;
    *(_DWORD *)(v27 + 16) = 1065353216;
    return 10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib4f(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  float v16;
  unint64_t v17;
  JSC::VM *v18;
  double v19;
  float v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  float v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  float v28;
  unsigned int v29;
  uint64_t result;
  uint64_t v31;
  JSValue v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  JSC::VM *v67;
  double v68;
  JSC::VM *v69;
  double v70;
  JSC::VM *v71;
  double v72;
  double v73;
  JSC::VM *v74;
  _QWORD v75[2];
  WTF::StringImpl *v76;
  _DWORD v77[2];
  _QWORD v78[2];
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v74 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "vertexAttrib4f");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "vertexAttrib4f");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v77);
  if (v77[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v78[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v67 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
    v14 = v67;
    v15 = v68;
  }
  else
  {
    *(_QWORD *)&v15 = v13 - 0x2000000000000;
  }
  if (*((_DWORD *)v14 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) != 0)
    return 0;
  if (v15 < -3.40282347e38)
  {
    *(float *)&v33 = -INFINITY;
  }
  else
  {
    if (v15 <= 3.40282347e38)
    {
      v16 = v15;
      goto LABEL_21;
    }
    *(float *)&v33 = INFINITY;
  }
  v16 = *(float *)&v33;
LABEL_21:
  v17 = *((_QWORD *)a2 + 8);
  v78[0] = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 >= 0xFFFE000000000000)
  {
    v19 = (double)(int)v17;
  }
  else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v69 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
    v18 = v69;
    v19 = v70;
  }
  else
  {
    *(_QWORD *)&v19 = v17 - 0x2000000000000;
  }
  if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
    return 0;
  if (v19 < -3.40282347e38)
  {
    *(float *)&v34 = -INFINITY;
  }
  else
  {
    if (v19 <= 3.40282347e38)
    {
      v20 = v19;
      goto LABEL_28;
    }
    *(float *)&v34 = INFINITY;
  }
  v20 = *(float *)&v34;
LABEL_28:
  v21 = *((_QWORD *)a2 + 9);
  v78[0] = v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v23 = (double)(int)v21;
  }
  else if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v71 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
    v22 = v71;
    v23 = v72;
  }
  else
  {
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
  }
  if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
    return 0;
  if (v23 < -3.40282347e38)
  {
    *(float *)&v35 = -INFINITY;
  }
  else
  {
    if (v23 <= 3.40282347e38)
    {
      v24 = v23;
      goto LABEL_35;
    }
    *(float *)&v35 = INFINITY;
  }
  v24 = *(float *)&v35;
LABEL_35:
  v25 = *((_QWORD *)a2 + 10);
  v78[0] = v25;
  v26 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v25 >= 0xFFFE000000000000)
  {
    v27 = (double)(int)v25;
  }
  else if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
    v27 = v73;
  }
  else
  {
    *(_QWORD *)&v27 = v25 - 0x2000000000000;
  }
  if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
    return 0;
  if (v27 < -3.40282347e38)
  {
    v28 = -INFINITY;
  }
  else if (v27 <= 3.40282347e38)
  {
    v28 = v27;
  }
  else
  {
    v28 = INFINITY;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v76 = (WTF::StringImpl *)v78[0];
    v36 = v77[0];
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v12 + 8), v36, (uint64_t)v78);
    }
    else
    {
      LOBYTE(v78[0]) = 0;
      v79 = 0;
    }
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v41
      && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
      && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v44, (WebCore::CanvasRenderingContext *)(v12 + 8), v16, (uint64_t)&v80);
    }
    else
    {
      LOBYTE(v80) = 0;
      v81 = 0;
    }
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v82);
    }
    else
    {
      LOBYTE(v82) = 0;
      v83 = 0;
    }
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), v24, (uint64_t)&v84);
    }
    else
    {
      LOBYTE(v84) = 0;
      v85 = 0;
    }
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v53
      && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
      && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v56, (WebCore::CanvasRenderingContext *)(v12 + 8), v28, (uint64_t)&v86);
    }
    else
    {
      LOBYTE(v86) = 0;
      v87 = 0;
    }
    v75[0] = v78;
    v75[1] = 5;
    v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v57)
    {
      v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58);
      if (v59)
      {
        v60 = *(_QWORD *)(v59 + 96);
        if (v60)
          WebCore::InspectorCanvasAgent::recordAction(v60, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v76, v75);
      }
    }
    if (v87)
    {
      v61 = v86;
      v86 = 0;
      if (v61)
      {
        if (*v61 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v61;
      }
    }
    if (v85)
    {
      v62 = v84;
      v84 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v83)
    {
      v63 = v82;
      v82 = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    if (v81)
    {
      v64 = v80;
      v80 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v64;
      }
    }
    if (v79)
    {
      v65 = (_DWORD *)v78[0];
      v78[0] = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    v66 = v76;
    v76 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v58);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  if (*(_BYTE *)(v12 + 364))
    return 10;
  v29 = v77[0];
  if (*(_DWORD *)(v12 + 164) <= v77[0])
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"vertexAttrib4f", 15, (uint64_t)"index out of range", 19);
    return 10;
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD, float, float, float, float))(**(_QWORD **)(v12 + 88) + 1048))(*(_QWORD *)(v12 + 88), v77[0], v16, v20, v24, v28);
  if (*(_DWORD *)(v12 + 164) > v29)
  {
    v31 = *(_QWORD *)(v12 + 152) + 20 * v29;
    *(_DWORD *)v31 = 5126;
    *(float *)(v31 + 4) = v16;
    *(float *)(v31 + 8) = v20;
    *(float *)(v31 + 12) = v24;
    *(float *)(v31 + 16) = v28;
    return 10;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib1fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  char v45[8];
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib1fv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib1fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v45);
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F548[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGLRenderingContextBase::vertexAttribfvImpl((WTF::StringImpl *)v12, (uint64_t)"vertexAttrib1fv", 16, v14, (uint64_t)v41, 1);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v13])(v41, v46);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib2fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  char v45[8];
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib2fv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib2fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v45);
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F548[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGLRenderingContextBase::vertexAttribfvImpl((WTF::StringImpl *)v12, (uint64_t)"vertexAttrib2fv", 16, v14, (uint64_t)v41, 2);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v13])(v41, v46);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib3fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  char v45[8];
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib3fv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib3fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v45);
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F548[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGLRenderingContextBase::vertexAttribfvImpl((WTF::StringImpl *)v12, (uint64_t)"vertexAttrib3fv", 16, v14, (uint64_t)v41, 3);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v13])(v41, v46);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttrib4fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  char v45[8];
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib4fv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttrib4fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v45);
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F548[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGLRenderingContextBase::vertexAttribfvImpl((WTF::StringImpl *)v12, (uint64_t)"vertexAttrib4fv", 16, v14, (uint64_t)v41, 4);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v13])(v41, v46);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribPointer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v38;
  unsigned int v39;
  JSValue v40;
  uint64_t v41;
  uint64_t v42;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  unsigned int v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  WebCore::InspectorCanvasAgent *v61;
  WebCore::InspectorInstrumentation *v62;
  WebCore::ScriptExecutionContext *v63;
  uint64_t v64;
  WebCore::InspectorCanvasAgent *v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  WebCore::InspectorCanvasAgent *v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  JSC::JSGlobalObject *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  unint64_t v88;
  JSC::VM *v89;
  uint64_t v90;
  unint64_t v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  int *v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  JSC::VM *v100;
  _QWORD v101[2];
  WTF::StringImpl *v102;
  unsigned int v103[2];
  unsigned int v104[2];
  _QWORD v105[2];
  char v106;
  _DWORD *v107;
  char v108;
  _DWORD *v109;
  char v110;
  _DWORD *v111;
  char v112;
  _DWORD *v113;
  char v114;
  _DWORD *v115;
  char v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v100 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v100, "WebGL2RenderingContext", "vertexAttribPointer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v100, "WebGL2RenderingContext", "vertexAttribPointer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v40.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v40);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v104);
  if (v104[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v105[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v29 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v105, this);
      v29 = v88;
    }
    v30 = (v29 >> 52) & 0x7FF;
    v31 = v30 - 1023;
    v32 = v29 >> (51 - (v29 >> 52));
    if (v30 > 0x433)
      LODWORD(v32) = v29 << ((v29 >> 52) - 51);
    if (v30 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
    if ((v29 & 0x8000000000000000) == 0)
      v34 = v33;
    else
      v34 = -v33;
    if (v31 <= 0x53)
      v15 = v34;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v103);
  if (v103[1])
    return 0;
  v16 = *((_QWORD *)a2 + 9);
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 >= 0xFFFE000000000000)
  {
    v92 = (_DWORD)v16 == 0;
    goto LABEL_161;
  }
  *(_QWORD *)&v18 = v16 - 0x2000000000000;
  if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v16 & 0xFFFE000000000002) != 0)
    {
      v19 = v16 == 7;
      goto LABEL_22;
    }
    v93 = *(unsigned __int8 *)(v16 + 5);
    if (v93 == 3)
    {
      v96 = *(_DWORD *)(v16 + 8);
    }
    else
    {
      if (v93 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v19 = 1;
          goto LABEL_22;
        }
        v92 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_161;
      }
      v94 = *(_QWORD *)(v16 + 8);
      if ((v94 & 1) != 0)
        v95 = (int *)(v16 + 16);
      else
        v95 = (int *)(v94 + 4);
      v96 = *v95;
    }
    v92 = v96 == 0;
LABEL_161:
    v19 = !v92;
    goto LABEL_22;
  }
  v19 = v18 > 0.0 || v18 < 0.0;
LABEL_22:
  if (*((_DWORD *)v17 + 20))
  {
    v41 = v19;
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      return 0;
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v19 = v41;
  }
  v20 = *((_QWORD *)a2 + 10);
  v105[0] = v20;
  if (v20 < 0xFFFE000000000000)
  {
    v35 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v89 = v17;
      v90 = v19;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v105, this);
      v19 = v90;
      v17 = v89;
      v15 = v15;
      v35 = v91;
    }
    v36 = (v35 >> 52) & 0x7FF;
    if ((v36 - 1023) <= 0x53)
    {
      v38 = v35 >> (51 - (v35 >> 52));
      if (v36 > 0x433)
        LODWORD(v38) = v35 << ((v35 >> 52) - 51);
      if (v36 >= 0x41F)
        v39 = v38;
      else
        v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
      if ((v35 & 0x8000000000000000) == 0)
        v21 = v39;
      else
        v21 = -v39;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = v20;
  }
  if (*((_DWORD *)v17 + 20))
  {
    v98 = v19;
    v42 = v21;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v21 = v42;
    v19 = v98;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v22 = *((_QWORD *)a2 + 11);
  v105[0] = v22;
  if (v22 < 0xFFFE000000000000)
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v84 = this;
      v85 = v19;
      v86 = v21;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v105, v84);
      v21 = v86;
      v19 = v85;
      v25 = v87;
    }
    else
    {
      *(_QWORD *)&v25 = v22 - 0x2000000000000;
    }
    if (*((_DWORD *)v24 + 20))
    {
      v81 = v19;
      v82 = v21;
      v83 = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
      v21 = v82;
      v19 = v81;
      if ((v83 & 1) != 0)
        return 0;
    }
    if (fabs(v25) == INFINITY)
    {
      v23 = 0;
    }
    else
    {
      v26 = v21;
      v27 = v19;
      v28 = fmod(trunc(v25), 1.84467441e19);
      if (v28 >= 0.0)
        v23 = (unint64_t)v28;
      else
        v23 = -(uint64_t)(unint64_t)-v28;
      v19 = v27;
      v21 = v26;
    }
  }
  else
  {
    v23 = (int)v22;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v97 = v21;
    v99 = v19;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v102 = (WTF::StringImpl *)v105[0];
    v44 = v104[0];
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v12 + 8), v44, (uint64_t)v105);
    }
    else
    {
      LOBYTE(v105[0]) = 0;
      v106 = 0;
    }
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v107);
    }
    else
    {
      LOBYTE(v107) = 0;
      v108 = 0;
    }
    v53 = v103[0];
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, (WebCore::CanvasRenderingContext *)(v12 + 8), v53, (uint64_t)&v109);
    }
    else
    {
      LOBYTE(v109) = 0;
      v110 = 0;
    }
    v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v58
      && (v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59)) != 0
      && (v61 = *(WebCore::InspectorCanvasAgent **)(v60 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v61, (WebCore::CanvasRenderingContext *)(v12 + 8), (WTF::JSONImpl::Value *)v99, (uint64_t)&v111);
    }
    else
    {
      LOBYTE(v111) = 0;
      v112 = 0;
    }
    v62 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v62
      && (v64 = WebCore::InspectorInstrumentation::instrumentingAgents(v62, v63)) != 0
      && (v65 = *(WebCore::InspectorCanvasAgent **)(v64 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v65, (WebCore::CanvasRenderingContext *)(v12 + 8), v97, (uint64_t)&v113);
    }
    else
    {
      LOBYTE(v113) = 0;
      v114 = 0;
    }
    v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v66
      && (v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67)) != 0
      && (v69 = *(WebCore::InspectorCanvasAgent **)(v68 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v69, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v115);
    }
    else
    {
      LOBYTE(v115) = 0;
      v116 = 0;
    }
    v101[0] = v105;
    v101[1] = 6;
    v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v70)
    {
      v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71);
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 96);
        if (v73)
          WebCore::InspectorCanvasAgent::recordAction(v73, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v102, v101);
      }
    }
    v21 = v97;
    v19 = v99;
    if (v116)
    {
      v74 = v115;
      v115 = 0;
      if (v74)
      {
        if (*v74 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v74;
        }
      }
    }
    if (v114)
    {
      v75 = v113;
      v113 = 0;
      if (v75)
      {
        if (*v75 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v75;
        }
      }
    }
    if (v112)
    {
      v76 = v111;
      v111 = 0;
      if (v76)
      {
        if (*v76 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v76;
        }
      }
    }
    if (v110)
    {
      v77 = v109;
      v109 = 0;
      if (v77)
      {
        if (*v77 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v77;
        }
      }
    }
    if (v108)
    {
      v78 = v107;
      v107 = 0;
      if (v78)
      {
        if (*v78 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v78;
        }
      }
    }
    if (v106)
    {
      v79 = (_DWORD *)v105[0];
      v105[0] = 0;
      if (v79)
      {
        if (*v79 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v21 = v97;
          v19 = v99;
        }
        else
        {
          --*v79;
        }
      }
    }
    v80 = v102;
    v102 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::destroy(v80, v71);
        v21 = v97;
        v19 = v99;
      }
      else
      {
        *(_DWORD *)v80 -= 2;
      }
    }
  }
  WebCore::WebGLRenderingContextBase::vertexAttribPointer((WebCore::WebGLRenderingContextBase *)v12, v104[0], v15, v103[0], v19, v21, v23);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_viewport(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  JSValue v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  WebCore::InspectorCanvasAgent *v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  unint64_t v70;
  JSC::VM *v71;
  unint64_t v72;
  unint64_t v73;
  JSC::VM *v74;
  _QWORD v75[2];
  WTF::StringImpl *v76;
  _QWORD v77[2];
  char v78;
  _DWORD *v79;
  char v80;
  _DWORD *v81;
  char v82;
  _DWORD *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v74 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "viewport");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v74, "WebGL2RenderingContext", "viewport");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v43);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    v13 = *((_QWORD *)a2 + 6);
    v77[0] = v13;
    if (v13 < 0xFFFE000000000000)
    {
      v25 = v13 - 0x2000000000000;
      if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
        v25 = v69;
      }
      v26 = (v25 >> 52) & 0x7FF;
      if ((v26 - 1023) <= 0x53)
      {
        v37 = v25 >> (51 - (v25 >> 52));
        if (v26 > 0x433)
          LODWORD(v37) = v25 << ((v25 >> 52) - 51);
        if (v26 >= 0x41F)
          v38 = v37;
        else
          v38 = (((1 << ((v25 >> 52) + 1)) - 1) & v37) + (1 << ((v25 >> 52) + 1));
        if ((v25 & 0x8000000000000000) == 0)
          v14 = v38;
        else
          v14 = -v38;
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = v13;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      return 0;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 7);
      v77[0] = v15;
      v16 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v15 < 0xFFFE000000000000)
      {
        v27 = v15 - 0x2000000000000;
        if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
          v27 = v70;
        }
        v28 = (v27 >> 52) & 0x7FF;
        v29 = v28 - 1023;
        v30 = v27 >> (51 - (v27 >> 52));
        if (v28 > 0x433)
          LODWORD(v30) = v27 << ((v27 >> 52) - 51);
        if (v28 >= 0x41F)
          v31 = v30;
        else
          v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
        if ((v27 & 0x8000000000000000) == 0)
          v32 = v31;
        else
          v32 = -v31;
        if (v29 <= 0x53)
          v17 = v32;
        else
          v17 = 0;
      }
      else
      {
        v17 = v15;
      }
      if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
      {
        return 0;
      }
      else
      {
        v18 = *((_QWORD *)a2 + 8);
        v77[0] = v18;
        v19 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v18 < 0xFFFE000000000000)
        {
          v33 = v18 - 0x2000000000000;
          if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v71 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
            v19 = v71;
            v33 = v72;
          }
          v34 = (v33 >> 52) & 0x7FF;
          if ((v34 - 1023) <= 0x53)
          {
            v39 = v33 >> (51 - (v33 >> 52));
            if (v34 > 0x433)
              LODWORD(v39) = v33 << ((v33 >> 52) - 51);
            if (v34 >= 0x41F)
              v40 = v39;
            else
              v40 = (((1 << ((v33 >> 52) + 1)) - 1) & v39) + (1 << ((v33 >> 52) + 1));
            if ((v33 & 0x8000000000000000) == 0)
              v20 = v40;
            else
              v20 = -v40;
          }
          else
          {
            v20 = 0;
          }
        }
        else
        {
          v20 = v18;
        }
        if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
        {
          return 0;
        }
        else
        {
          v21 = *((_QWORD *)a2 + 9);
          v77[0] = v21;
          v22 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v21 < 0xFFFE000000000000)
          {
            v35 = v21 - 0x2000000000000;
            if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v77, this);
              v35 = v73;
            }
            v36 = (v35 >> 52) & 0x7FF;
            if ((v36 - 1023) <= 0x53)
            {
              v41 = v35 >> (51 - (v35 >> 52));
              if (v36 > 0x433)
                LODWORD(v41) = v35 << ((v35 >> 52) - 51);
              if (v36 >= 0x41F)
                v42 = v41;
              else
                v42 = (((1 << ((v35 >> 52) + 1)) - 1) & v41) + (1 << ((v35 >> 52) + 1));
              if ((v35 & 0x8000000000000000) == 0)
                v23 = v42;
              else
                v23 = -v42;
            }
            else
            {
              v23 = 0;
            }
          }
          else
          {
            v23 = v21;
          }
          if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v76 = (WTF::StringImpl *)v77[0];
              v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v44
                && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
                && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v77);
              }
              else
              {
                LOBYTE(v77[0]) = 0;
                v78 = 0;
              }
              v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v48
                && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
                && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v12 + 8), v17, (uint64_t)&v79);
              }
              else
              {
                LOBYTE(v79) = 0;
                v80 = 0;
              }
              v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v52
                && (v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53)) != 0
                && (v55 = *(WebCore::InspectorCanvasAgent **)(v54 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v55, (WebCore::CanvasRenderingContext *)(v12 + 8), v20, (uint64_t)&v81);
              }
              else
              {
                LOBYTE(v81) = 0;
                v82 = 0;
              }
              v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v56
                && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
                && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v83);
              }
              else
              {
                LOBYTE(v83) = 0;
                v84 = 0;
              }
              v75[0] = v77;
              v75[1] = 4;
              v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v60)
              {
                v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
                if (v62)
                {
                  v63 = *(_QWORD *)(v62 + 96);
                  if (v63)
                    WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v76, v75);
                }
              }
              if (v84)
              {
                v64 = v83;
                v83 = 0;
                if (v64)
                {
                  if (*v64 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v64;
                }
              }
              if (v82)
              {
                v65 = v81;
                v81 = 0;
                if (v65)
                {
                  if (*v65 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v65;
                }
              }
              if (v80)
              {
                v66 = v79;
                v79 = 0;
                if (v66)
                {
                  if (*v66 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v66;
                }
              }
              if (v78)
              {
                v67 = (_DWORD *)v77[0];
                v77[0] = 0;
                if (v67)
                {
                  if (*v67 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v67;
                }
              }
              v68 = v76;
              v76 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, v61);
                else
                  *(_DWORD *)v68 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
            {
              if (((v23 | v20) & 0x80000000) != 0)
                WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"viewport", 9, (uint64_t)"size < 0", 9);
              else
                (*(void (**)(_QWORD, unint64_t, unint64_t, unint64_t, unint64_t))(**(_QWORD **)(v12 + 88) + 1072))(*(_QWORD *)(v12 + 88), v14, v17, v20, v23);
            }
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  WebCore::InspectorInstrumentation *v13;
  WebCore::ScriptExecutionContext *v14;
  uint64_t v15;
  WebCore::InspectorCanvasAgent *v16;
  WebCore::InspectorInstrumentation *v17;
  WebCore::ScriptExecutionContext *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WebCore *v34;
  JSC::JSGlobalObject *v35;
  JSC::CallFrame *v36;
  WebCore::JSWebGL2RenderingContext *v37;
  _QWORD v38[2];
  WTF::StringImpl *v39;
  _DWORD v40[2];
  _DWORD v41[2];
  WTF::StringImpl *v42;
  int v43;
  char v44;
  _DWORD *v45;
  char v46;
  _DWORD *v47;
  char v48;
  char v49[8];
  uint64_t v50;
  int v51;
  char v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v41);
  if (v41[1])
    return 0;
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBuffer>,WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBufferView>>>>::convert(*((_QWORD *)a2 + 7), (uint64_t)this, (uint64_t)v49);
  v7 = v53;
  if (v53)
  {
    v10 = 0;
LABEL_15:
    if (v7 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F368[v7])(&v42, &v50);
    return v10;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v40);
  if (v40[1])
  {
    v10 = 0;
LABEL_14:
    v7 = v53;
    goto LABEL_15;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = v42;
    v12 = v41[0];
    v13 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v13
      && (v15 = WebCore::InspectorInstrumentation::instrumentingAgents(v13, v14)) != 0
      && (v16 = *(WebCore::InspectorCanvasAgent **)(v15 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v16, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)&v42);
    }
    else
    {
      LOBYTE(v42) = 0;
      v44 = 0;
    }
    if (v53)
      goto LABEL_60;
    v17 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v17
      && (v19 = WebCore::InspectorInstrumentation::instrumentingAgents(v17, v18)) != 0
      && (v20 = *(_QWORD *)(v19 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v20, (JSC::CallFrame *)((char *)a3 + 8), (uint64_t)&v50, &v45);
    }
    else
    {
      LOBYTE(v45) = 0;
      v46 = 0;
    }
    v21 = v40[0];
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v22
      && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
      && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v25, (JSC::CallFrame *)((char *)a3 + 8), v21, (uint64_t)&v47);
    }
    else
    {
      LOBYTE(v47) = 0;
      v48 = 0;
    }
    v38[0] = &v42;
    v38[1] = 3;
    v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v26)
    {
      v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 96);
        if (v29)
          WebCore::InspectorCanvasAgent::recordAction(v29, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v39, v38);
      }
    }
    if (v48)
    {
      v30 = v47;
      v47 = 0;
      if (v30)
      {
        if (*v30 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v30;
      }
    }
    if (v46)
    {
      v31 = v45;
      v45 = 0;
      if (v31)
      {
        if (*v31 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v31;
      }
    }
    if (v44)
    {
      v32 = v42;
      v42 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v32;
      }
    }
    v33 = v39;
    v39 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v27);
      else
        *(_DWORD *)v33 -= 2;
    }
  }
  if (!v53)
  {
    v8 = v41[0];
    LOBYTE(v42) = 0;
    v44 = 0;
    if (v52)
    {
      v43 = -1;
      v9 = v51;
      if (v51 != -1)
      {
        ((void (*)(_QWORD *, WTF::StringImpl **, uint64_t *))off_1E332F348[v51])(v38, &v42, &v50);
        v43 = v9;
      }
      v44 = 1;
    }
    WebCore::WebGLRenderingContextBase::bufferData(a3, v8, (uint64_t)&v42, v40[0]);
    if (v44 && v43 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F338[v43])(v38, &v42);
    v10 = 10;
    goto LABEL_14;
  }
LABEL_60:
  v34 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData3Body(v34, v35, v36, v37);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData3Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  unint64_t v8;
  JSC::VM *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  const char *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  double v40;
  _QWORD v41[2];
  WTF::StringImpl *v42;
  _DWORD v43[2];
  _DWORD v44[2];
  _QWORD v45[2];
  char v46;
  _DWORD *v47;
  char v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v44);
  if (v44[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v45[0] = v7;
  if (v7 < 0xFFFE000000000000)
  {
    v9 = this[7];
    if (v7 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v45, (JSC::JSGlobalObject *)this);
      v10 = v40;
    }
    else
    {
      *(_QWORD *)&v10 = v7 - 0x2000000000000;
    }
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    if (fabs(v10) == INFINITY)
    {
      v8 = 0;
    }
    else
    {
      v11 = fmod(trunc(v10), 1.84467441e19);
      if (v11 >= 0.0)
        v8 = (unint64_t)v11;
      else
        v8 = -(uint64_t)(unint64_t)-v11;
    }
  }
  else
  {
    v8 = (int)v7;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v43);
  if (!v43[1])
  {
    if (*((_BYTE *)a3 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v12 = v44[0];
      v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v20
        && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
        && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v23, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v45);
      }
      else
      {
        LOBYTE(v45[0]) = 0;
        v46 = 0;
      }
      v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v24
        && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
        && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v8, (uint64_t)&v47);
      }
      else
      {
        LOBYTE(v47) = 0;
        v48 = 0;
      }
      v13 = v43[0];
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (JSC::CallFrame *)((char *)a3 + 8), v13, (uint64_t)&v49);
      }
      else
      {
        LOBYTE(v49) = 0;
        v50 = 0;
      }
      v41[0] = v45;
      v41[1] = 3;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v42, v41);
        }
      }
      if (v50)
      {
        v36 = v49;
        v49 = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      if (v48)
      {
        v37 = v47;
        v47 = 0;
        if (v37)
        {
          if (*v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v37;
        }
      }
      if (v46)
      {
        v38 = (_DWORD *)v45[0];
        v45[0] = 0;
        if (v38)
        {
          if (*v38 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v38;
        }
      }
      v39 = v42;
      v42 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v33);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    else
    {
      v12 = v44[0];
      v13 = v43[0];
    }
    if (*((_BYTE *)a3 + 364))
      return 10;
    v14 = (*(uint64_t (**)(JSC::CallFrame *, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 320))(a3, "bufferData", 11, v12, v13);
    if (!v14)
      return 10;
    v15 = (_DWORD *)v14;
    ++*(_DWORD *)(v14 + 8);
    if ((v8 & 0x8000000000000000) != 0)
    {
      v16 = "size < 0";
      v17 = a3;
      v18 = 9;
    }
    else
    {
      if (!HIDWORD(v8))
      {
        (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**((_QWORD **)a3 + 11) + 1080))(*((_QWORD *)a3 + 11), v12, v8, v13);
LABEL_23:
        if (v15[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
        else
          --v15[2];
        return 10;
      }
      v16 = "size more than 32-bits";
      v17 = a3;
      v18 = 23;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v17, 1281, (uint64_t)"bufferData", 11, (uint64_t)v16, v18);
    goto LABEL_23;
  }
  return 0;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  WebCore::InspectorCanvasAgent *v30;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  unsigned int v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54[2];
  WTF::StringImpl *v55;
  unsigned int v56[2];
  unsigned int v57[2];
  _DWORD v58[2];
  _DWORD *v59;
  int v60;
  _DWORD v61[2];
  WTF::StringImpl *v62;
  int v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  _DWORD *v69;
  char v70;
  _DWORD *v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v61);
  if (v61[1])
    return 0;
  v8 = *((_QWORD *)a2 + 7);
  v59 = (_DWORD *)*((_QWORD *)this + 7);
  if ((v8 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v8 + 5) - 39 > 0xB
    || (*(_BYTE *)(v8 + 40) & 6) != 0)
  {
    v54[0] = 0;
LABEL_6:
    v9 = 1;
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v59, 1, "data", 5, "WebGL2RenderingContext", 23, v7, "bufferData", 11, "ArrayBufferView", 16);
    v63 = 1;
    v54[0] = 0;
    goto LABEL_9;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v8);
  if (!v54[0])
    goto LABEL_6;
  v9 = 0;
  v62 = (WTF::StringImpl *)v54[0];
  v63 = 0;
LABEL_9:
  LOBYTE(v59) = 0;
  v60 = -1;
  ((void (*)(uint64_t *, _DWORD **, WTF::StringImpl **))off_1E332F388[v9])(v54, &v59, &v62);
  v60 = v9;
  if (v63 != -1)
  {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E332F378[v63])(v54, &v62);
    v9 = v60;
  }
  if (v9)
  {
    v15 = 0;
LABEL_30:
    if (v9 != -1)
      ((void (*)(WTF::StringImpl **, _DWORD **))off_1E332F378[v9])(&v62, &v59);
    return v15;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v58);
  if (v58[1])
  {
    v15 = 0;
LABEL_29:
    v9 = v60;
    goto LABEL_30;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v57);
  if (v57[1])
  {
    v15 = 0;
    goto LABEL_29;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 6) > 0xFFFFFFFFFFFFFFFALL)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 10);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v10, v56);
  if (v56[1])
  {
    v15 = 0;
    goto LABEL_29;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v55 = v62;
    v17 = v61[0];
    v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v18
      && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
      && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v21, (JSC::CallFrame *)((char *)a3 + 8), v17, (uint64_t)&v62);
    }
    else
    {
      LOBYTE(v62) = 0;
      v64 = 0;
    }
    if (v60)
      goto LABEL_99;
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v22
      && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
      && (v25 = *(_QWORD *)(v24 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v25, (uint64_t)a3 + 8, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v26 = v58[0];
    v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v27
      && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
      && (v30 = *(WebCore::InspectorCanvasAgent **)(v29 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v30, (JSC::CallFrame *)((char *)a3 + 8), v26, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v31 = v57[0];
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (JSC::CallFrame *)((char *)a3 + 8), v31, (uint64_t)&v69);
    }
    else
    {
      LOBYTE(v69) = 0;
      v70 = 0;
    }
    v36 = v56[0];
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, (JSC::CallFrame *)((char *)a3 + 8), v36, (uint64_t)&v71);
    }
    else
    {
      LOBYTE(v71) = 0;
      v72 = 0;
    }
    v54[0] = (uint64_t)&v62;
    v54[1] = 5;
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v41)
    {
      v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 96);
        if (v44)
          WebCore::InspectorCanvasAgent::recordAction(v44, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v55, v54);
      }
    }
    if (v72)
    {
      v45 = v71;
      v71 = 0;
      if (v45)
      {
        if (*v45 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v45;
      }
    }
    if (v70)
    {
      v46 = v69;
      v69 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v68)
    {
      v47 = v67;
      v67 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v66)
    {
      v48 = v65;
      v65 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v64)
    {
      v49 = v62;
      v62 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v49;
      }
    }
    v50 = v55;
    v55 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v42);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v60)
  {
    v11 = v61[0];
    v12 = v59;
    v59 = 0;
    v13 = v58[0];
    WebCore::WebGL2RenderingContext::sliceArrayBufferView(a3, (uint64_t)"bufferData", 11, (uint64_t)v12, v57[0], v56[0], v54);
    v14 = (WTF::StringImpl *)v54[0];
    if (v54[0])
    {
      ++*(_DWORD *)v54[0];
      v62 = v14;
      v63 = 1;
      v64 = 1;
      WebCore::WebGLRenderingContextBase::bufferData(a3, v11, (uint64_t)&v62, v13);
      if (v64 && v63 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15ArrayBufferViewENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v63])(&v55, &v62);
      if (*(_DWORD *)v14 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v14;
    }
    if (*v12 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v12;
    v15 = 10;
    goto LABEL_29;
  }
LABEL_99:
  v51 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBuffer>,WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBufferView>>>>::convert(v52, v51, v53);
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBuffer>,WebCore::IDLAllowSharedAdaptor<WebCore::IDLArrayBufferView>>>>::convert@<X0>(unint64_t this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }
  v7 = *(_QWORD *)(result + 56);
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_7;
  v4 = *(unsigned __int8 *)(this + 5);
  if (v4 == 38)
  {
    v5 = *(_QWORD *)(this + 16);
    if (!v5 || *(_BYTE *)(v5 + 64))
    {
LABEL_7:
      JSC::throwTypeError();
      v11 = 1;
      goto LABEL_10;
    }
    *(_DWORD *)v5 += 2;
    v9 = v5;
    v10 = 0;
  }
  else
  {
    if ((v4 - 39) > 0xB)
      goto LABEL_7;
    if ((*(_BYTE *)(this + 40) & 6) != 0)
      goto LABEL_7;
    JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)this);
    if (!v6)
      goto LABEL_7;
    v9 = v6;
    v10 = 1;
  }
  v11 = 0;
LABEL_10:
  result = WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(a3, (uint64_t)v8);
  if (v11 != -1)
    return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E332F358[v11])(&v7, &v9);
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  WTF::DeferrableRefCountedBase *result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::Detail::ConversionResultStorage<std::optional<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>>::ConversionResultStorage<std::variant<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  int v5;
  _BYTE v7[8];
  int v8;
  _BYTE v9[8];
  int v10;
  unsigned __int8 v11;
  char v12;

  if (*(_DWORD *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 32) = 1;
    return a1;
  }
  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v9[0] = 0;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    v4 = off_1E332F348[v3];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v4)(v9, v7, a2 + 8);
    v8 = v3;
    v9[0] = 0;
    v10 = -1;
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v12, v9, v7);
    v10 = v3;
    v11 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 16) = -1;
    ((void (*)(char *, uint64_t, _BYTE *))v4)(&v12, a1 + 8, v9);
    *(_DWORD *)(a1 + 16) = v3;
    v5 = v11;
    *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    if (!v5)
      goto LABEL_9;
    if (v10 != -1)
      ((void (*)(char *, _BYTE *))off_1E332F338[v10])(&v12, v9);
  }
  v10 = -1;
LABEL_9:
  if (v8 != -1)
    ((void (*)(char *, _BYTE *))off_1E332F338[v8])(&v12, v7);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E332F338[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalINS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENSA_12RawPtrTraitsISD_EENSA_21DefaultRefDerefTraitsISD_EEEENSB_INSC_15ArrayBufferViewENSE_ISJ_EENSG_ISJ_EEEEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSO_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  if (*(_BYTE *)(a2 + 16))
  {
    v3 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v3 != -1)
      result = ((uint64_t (*)(char *, uint64_t))off_1E332F338[v3])(&v5, a2);
    *(_DWORD *)(a2 + 8) = -1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore25ConversionResultExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSG_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferSubData1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  JSC::VM *v10;
  double v11;
  double v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unsigned int v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WebCore::InspectorInstrumentation *v35;
  WebCore::ScriptExecutionContext *v36;
  uint64_t v37;
  WebCore::InspectorCanvasAgent *v38;
  unsigned int v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  double v54;
  WebCore *v55;
  JSC::JSGlobalObject *v56;
  JSC::CallFrame *v57;
  WebCore::JSWebGL2RenderingContext *v58;
  uint64_t v59[2];
  WTF::StringImpl *v60;
  unsigned int v61[2];
  unsigned int v62[2];
  JSC::VM *v63;
  int v64;
  _DWORD v65[2];
  WTF::StringImpl *v66;
  int v67;
  char v68;
  _DWORD *v69;
  char v70;
  _DWORD *v71;
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v65);
  if (v65[1])
    return 0;
  v8 = *((_QWORD *)a2 + 7);
  v66 = (WTF::StringImpl *)v8;
  if (v8 >= 0xFFFE000000000000)
  {
    v9 = (int)v8;
    goto LABEL_12;
  }
  v10 = this[7];
  if (v8 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v66, (JSC::JSGlobalObject *)this);
    v11 = v54;
  }
  else
  {
    *(_QWORD *)&v11 = v8 - 0x2000000000000;
  }
  if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
    return 0;
  if (fabs(v11) == INFINITY)
  {
    v9 = 0;
  }
  else
  {
    v12 = fmod(trunc(v11), 1.84467441e19);
    if (v12 < 0.0)
      v9 = -(uint64_t)(unint64_t)-v12;
    else
      v9 = (unint64_t)v12;
  }
LABEL_12:
  v13 = *((_QWORD *)a2 + 8);
  v63 = this[7];
  if ((v13 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v13 + 5) - 39 > 0xB
    || (*(_BYTE *)(v13 + 40) & 6) != 0)
  {
    v59[0] = 0;
LABEL_16:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v63, 2, "srcData", 8, "WebGL2RenderingContext", 23, v7, "bufferSubData", 14, "ArrayBufferView", 16);
    v14 = 1;
    v67 = 1;
    v59[0] = 0;
    goto LABEL_19;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v13);
  if (!v59[0])
    goto LABEL_16;
  v14 = 0;
  v66 = (WTF::StringImpl *)v59[0];
  v67 = 0;
LABEL_19:
  LOBYTE(v63) = 0;
  v64 = -1;
  ((void (*)(uint64_t *, JSC::VM **, WTF::StringImpl **))off_1E332F388[v14])(v59, &v63, &v66);
  v64 = v14;
  if (v67 != -1)
  {
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E332F378[v67])(v59, &v66);
    v14 = v64;
  }
  if (v14)
  {
    v19 = 0;
LABEL_38:
    if (v14 != -1)
      ((void (*)(WTF::StringImpl **, JSC::VM **))off_1E332F378[v14])(&v66, &v63);
    return v19;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 9), v62);
  if (v62[1])
  {
    v19 = 0;
LABEL_37:
    v14 = v64;
    goto LABEL_38;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 6) > 0xFFFFFFFFFFFFFFFALL)
    v15 = 10;
  else
    v15 = *((_QWORD *)a2 + 10);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v15, v61);
  if (v61[1])
  {
    v19 = 0;
    goto LABEL_37;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v60 = v66;
    v21 = v65[0];
    v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v22
      && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
      && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v25, (JSC::CallFrame *)((char *)a3 + 8), v21, (uint64_t)&v66);
    }
    else
    {
      LOBYTE(v66) = 0;
      v68 = 0;
    }
    v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v26
      && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
      && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v29, (JSC::CallFrame *)((char *)a3 + 8), v9, (uint64_t)&v69);
    }
    else
    {
      LOBYTE(v69) = 0;
      v70 = 0;
    }
    if (v64)
      goto LABEL_109;
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (uint64_t)a3 + 8, (uint64_t)&v71);
    }
    else
    {
      LOBYTE(v71) = 0;
      v72 = 0;
    }
    v34 = v62[0];
    v35 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v35
      && (v37 = WebCore::InspectorInstrumentation::instrumentingAgents(v35, v36)) != 0
      && (v38 = *(WebCore::InspectorCanvasAgent **)(v37 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v38, (JSC::CallFrame *)((char *)a3 + 8), v34, (uint64_t)&v73);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v39 = v61[0];
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, (JSC::CallFrame *)((char *)a3 + 8), v39, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v59[0] = (uint64_t)&v66;
    v59[1] = 5;
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v44)
    {
      v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 96);
        if (v47)
          WebCore::InspectorCanvasAgent::recordAction(v47, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v60, v59);
      }
    }
    if (v76)
    {
      v48 = v75;
      v75 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v74)
    {
      v49 = v73;
      v73 = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    if (v72)
    {
      v50 = v71;
      v71 = 0;
      if (v50)
      {
        if (*v50 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v50;
      }
    }
    if (v70)
    {
      v51 = v69;
      v69 = 0;
      if (v51)
      {
        if (*v51 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v51;
      }
    }
    if (v68)
    {
      v52 = v66;
      v66 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v52;
      }
    }
    v53 = v60;
    v60 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v45);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  if (!v64)
  {
    v16 = v65[0];
    v17 = v63;
    v63 = 0;
    WebCore::WebGL2RenderingContext::sliceArrayBufferView(a3, (uint64_t)"bufferSubData", 14, (uint64_t)v17, v62[0], v61[0], v59);
    v18 = (WTF::StringImpl *)v59[0];
    if (v59[0])
    {
      ++*(_DWORD *)v59[0];
      v66 = v18;
      v67 = 1;
      WebCore::WebGLRenderingContextBase::bufferSubData(a3, v16, v9, (uint64_t)&v66);
      if (v67 != -1)
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_15ArrayBufferViewENSA_ISF_EENSC_ISF_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSL_EEEDcOSM_DpOT0____fmatrix[v67])(&v60, &v66);
      if (*(_DWORD *)v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v18;
    }
    if (*(_DWORD *)v17 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v17;
    v19 = 10;
    goto LABEL_37;
  }
LABEL_109:
  v55 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D3Body(v55, v56, v57, v58);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D3Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::ArrayBufferView *v7;
  JSC::VM *v8;
  unsigned int v9;
  JSC::ArrayBufferView *v10;
  JSC::VM *v11;
  unsigned int v12;
  JSC::ArrayBufferView *v13;
  JSC::VM *v14;
  JSC::ArrayBufferView *v15;
  JSC::VM *v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  int v19;
  JSC::ArrayBufferView *v20;
  JSC::VM *v21;
  uint64_t v22;
  JSC::JSArrayBufferView *v23;
  int v24;
  WTF::StringImpl *v25;
  JSC::CallFrame *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  JSC::ArrayBufferView *v30;
  uint64_t (*v31)();
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned int v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  WebCore::InspectorCanvasAgent *v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  unsigned int v94;
  WebCore::InspectorInstrumentation *v95;
  WebCore::ScriptExecutionContext *v96;
  uint64_t v97;
  WebCore::InspectorCanvasAgent *v98;
  unsigned int v99;
  WebCore::InspectorInstrumentation *v100;
  WebCore::ScriptExecutionContext *v101;
  uint64_t v102;
  WebCore::InspectorCanvasAgent *v103;
  WebCore::InspectorInstrumentation *v104;
  WebCore::ScriptExecutionContext *v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::InspectorInstrumentation *v108;
  WebCore::ScriptExecutionContext *v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  JSC::ArrayBufferView *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  JSC::ArrayBufferView *v135;
  int v136;
  int v137[2];
  unsigned int v138[2];
  _DWORD v139[2];
  JSC::ArrayBufferView **v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  JSC::ArrayBufferView *v143;
  int v144;
  char v145;
  _DWORD *v146;
  char v147;
  _DWORD *v148;
  char v149;
  _DWORD *v150;
  char v151;
  _DWORD *v152;
  char v153;
  _DWORD *v154;
  char v155;
  _DWORD *v156;
  char v157;
  _DWORD *v158;
  char v159;
  _DWORD *v160;
  char v161;
  _DWORD *v162;
  char v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v139);
  if (v139[1])
    return 0;
  v7 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v143 = v7;
  v8 = this[7];
  if ((unint64_t)v7 < 0xFFFE000000000000)
  {
    v32 = (unint64_t)v7 - 0x2000000000000;
    if ((unint64_t)v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v32 = v123;
    }
    v33 = (v32 >> 52) & 0x7FF;
    v34 = v33 - 1023;
    v35 = v32 >> (51 - (v32 >> 52));
    if (v33 > 0x433)
      LODWORD(v35) = v32 << ((v32 >> 52) - 51);
    if (v33 >= 0x41F)
      v36 = v35;
    else
      v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
    if ((v32 & 0x8000000000000000) == 0)
      v37 = v36;
    else
      v37 = -v36;
    if (v34 <= 0x53)
      v9 = v37;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v143 = v10;
  v11 = this[7];
  if ((unint64_t)v10 < 0xFFFE000000000000)
  {
    v38 = (unint64_t)v10 - 0x2000000000000;
    if ((unint64_t)v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v38 = v124;
    }
    v39 = (v38 >> 52) & 0x7FF;
    v40 = v39 - 1023;
    v41 = v38 >> (51 - (v38 >> 52));
    if (v39 > 0x433)
      LODWORD(v41) = v38 << ((v38 >> 52) - 51);
    if (v39 >= 0x41F)
      v42 = v41;
    else
      v42 = (((1 << ((v38 >> 52) + 1)) - 1) & v41) + (1 << ((v38 >> 52) + 1));
    if ((v38 & 0x8000000000000000) == 0)
      v43 = v42;
    else
      v43 = -v42;
    if (v40 <= 0x53)
      v12 = v43;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v143 = v13;
  v14 = this[7];
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v44 = (unint64_t)v13 - 0x2000000000000;
    if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v44 = v125;
    }
    v45 = (v44 >> 52) & 0x7FF;
    v46 = v45 - 1023;
    v47 = v44 >> (51 - (v44 >> 52));
    if (v45 > 0x433)
      LODWORD(v47) = v44 << ((v44 >> 52) - 51);
    if (v45 >= 0x41F)
      v48 = v47;
    else
      v48 = (((1 << ((v44 >> 52) + 1)) - 1) & v47) + (1 << ((v44 >> 52) + 1));
    if ((v44 & 0x8000000000000000) == 0)
      v49 = v48;
    else
      v49 = -v48;
    if (v46 > 0x53)
      v49 = 0;
    v134 = v49;
  }
  else
  {
    v134 = (int)v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v133 = v12;
  v15 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v143 = v15;
  v16 = this[7];
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v50 = (unint64_t)v15 - 0x2000000000000;
    if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v50 = v126;
    }
    v51 = (v50 >> 52) & 0x7FF;
    if ((v51 - 1023) <= 0x53)
    {
      v56 = v50 >> (51 - (v50 >> 52));
      if (v51 > 0x433)
        LODWORD(v56) = v50 << ((v50 >> 52) - 51);
      if (v51 >= 0x41F)
        v57 = v56;
      else
        v57 = (((1 << ((v50 >> 52) + 1)) - 1) & v56) + (1 << ((v50 >> 52) + 1));
      if ((v50 & 0x8000000000000000) == 0)
        v58 = v57;
      else
        v58 = -v57;
      v132 = v58;
    }
    else
    {
      v132 = 0;
    }
  }
  else
  {
    v132 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v131 = v9;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v143 = v17;
  v18 = this[7];
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v52 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v52 = v127;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v59 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v59) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v60 = v59;
      else
        v60 = (((1 << ((v52 >> 52) + 1)) - 1) & v59) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v19 = v60;
      else
        v19 = -v60;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = (int)v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v130 = v19;
  v20 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 12);
  v143 = v20;
  v21 = this[7];
  if ((unint64_t)v20 < 0xFFFE000000000000)
  {
    v54 = (unint64_t)v20 - 0x2000000000000;
    if ((unint64_t)v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v143, (JSC::JSGlobalObject *)this);
      v54 = v128;
    }
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v61 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v61) = v54 << ((v54 >> 52) - 51);
      if (v55 >= 0x41F)
        v62 = v61;
      else
        v62 = (((1 << ((v54 >> 52) + 1)) - 1) & v61) + (1 << ((v54 >> 52) + 1));
      if ((v54 & 0x8000000000000000) == 0)
        v63 = v62;
      else
        v63 = -v62;
      v129 = v63;
    }
    else
    {
      v129 = 0;
    }
  }
  else
  {
    v129 = (int)v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v138);
  if (v138[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v137);
  if (v137[1])
    return 0;
  v23 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 15);
  if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v135 = 0;
    v136 = 0;
    goto LABEL_40;
  }
  v135 = this[7];
  if (((unint64_t)v23 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v23 + 5) - 39 > 0xB
    || (*((_BYTE *)v23 + 40) & 6) != 0)
  {
    v142 = 0;
  }
  else
  {
    JSC::JSArrayBufferView::possiblySharedImpl(v23);
    if (v142)
    {
      v26 = a3;
      v24 = 0;
      v143 = v142;
      v144 = 0;
      goto LABEL_33;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v135, 9, "pixels", 7, "WebGL2RenderingContext", 23, v22, "texImage3D", 11, "ArrayBufferView", 16);
  v24 = 1;
  v144 = 1;
  v25 = v142;
  v142 = 0;
  if (v25)
  {
    v26 = a3;
    if (*(_DWORD *)v25 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v25;
  }
  else
  {
    v26 = a3;
  }
LABEL_33:
  LOBYTE(v140) = 0;
  LODWORD(v141) = -1;
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***, JSC::ArrayBufferView **))off_1E332F388[v24])(&v135, &v140, &v143);
  LODWORD(v141) = v24;
  if (v144 != -1)
  {
    ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F378[v144])(&v135, &v143);
    v24 = v141;
  }
  if (v24)
  {
    v27 = 1;
    v136 = 1;
    if (v24 == -1)
    {
      v28 = 0;
LABEL_135:
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F478[v27])(&v143, &v135);
      return v28;
    }
  }
  else
  {
    v29 = (uint64_t)v140;
    v140 = 0;
    v135 = (JSC::ArrayBufferView *)v29;
    v136 = 0;
  }
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***))off_1E332F378[v24])(&v143, &v140);
  v27 = v136;
  a3 = v26;
  if (v136)
    goto LABEL_264;
LABEL_40:
  if (!*((_BYTE *)a3 + 33))
    goto LABEL_41;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v142 = v143;
  v65 = v139[0];
  v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v66
    && (v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67)) != 0
    && (v69 = *(WebCore::InspectorCanvasAgent **)(v68 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v69, (JSC::CallFrame *)((char *)a3 + 8), v65, (uint64_t)&v143);
  }
  else
  {
    LOBYTE(v143) = 0;
    v145 = 0;
  }
  v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v70
    && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
    && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v73, (JSC::CallFrame *)((char *)a3 + 8), v131, (uint64_t)&v146);
  }
  else
  {
    LOBYTE(v146) = 0;
    v147 = 0;
  }
  v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v74
    && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
    && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v77, (JSC::CallFrame *)((char *)a3 + 8), v133, (uint64_t)&v148);
  }
  else
  {
    LOBYTE(v148) = 0;
    v149 = 0;
  }
  v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v78
    && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
    && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v81, (JSC::CallFrame *)((char *)a3 + 8), v134, (uint64_t)&v150);
  }
  else
  {
    LOBYTE(v150) = 0;
    v151 = 0;
  }
  v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v82
    && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
    && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v85, (JSC::CallFrame *)((char *)a3 + 8), v132, (uint64_t)&v152);
  }
  else
  {
    LOBYTE(v152) = 0;
    v153 = 0;
  }
  v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v86
    && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
    && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v89, (JSC::CallFrame *)((char *)a3 + 8), v130, (uint64_t)&v154);
  }
  else
  {
    LOBYTE(v154) = 0;
    v155 = 0;
  }
  v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v90
    && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
    && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v93, (JSC::CallFrame *)((char *)a3 + 8), v129, (uint64_t)&v156);
  }
  else
  {
    LOBYTE(v156) = 0;
    v157 = 0;
  }
  v94 = v138[0];
  v95 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v95
    && (v97 = WebCore::InspectorInstrumentation::instrumentingAgents(v95, v96)) != 0
    && (v98 = *(WebCore::InspectorCanvasAgent **)(v97 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v98, (JSC::CallFrame *)((char *)a3 + 8), v94, (uint64_t)&v158);
  }
  else
  {
    LOBYTE(v158) = 0;
    v159 = 0;
  }
  v99 = v137[0];
  v100 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
  if (v100
    && (v102 = WebCore::InspectorInstrumentation::instrumentingAgents(v100, v101)) != 0
    && (v103 = *(WebCore::InspectorCanvasAgent **)(v102 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v103, (JSC::CallFrame *)((char *)a3 + 8), v99, (uint64_t)&v160);
  }
  else
  {
    LOBYTE(v160) = 0;
    v161 = 0;
  }
  if (!v136)
  {
    v104 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v104
      && (v106 = WebCore::InspectorInstrumentation::instrumentingAgents(v104, v105)) != 0
      && (v107 = *(_QWORD *)(v106 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v107, (JSC::CallFrame *)((char *)a3 + 8), (uint64_t *)&v135, (uint64_t)&v162);
    }
    else
    {
      LOBYTE(v162) = 0;
      v163 = 0;
    }
    v140 = &v143;
    v141 = 10;
    v108 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v108)
    {
      v110 = WebCore::InspectorInstrumentation::instrumentingAgents(v108, v109);
      if (v110)
      {
        v111 = *(_QWORD *)(v110 + 96);
        if (v111)
          WebCore::InspectorCanvasAgent::recordAction(v111, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v142, &v140);
      }
    }
    if (v163)
    {
      v112 = v162;
      v162 = 0;
      if (v112)
      {
        if (*v112 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v112;
      }
    }
    if (v161)
    {
      v113 = v160;
      v160 = 0;
      if (v113)
      {
        if (*v113 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v113;
      }
    }
    if (v159)
    {
      v114 = v158;
      v158 = 0;
      if (v114)
      {
        if (*v114 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v114;
      }
    }
    if (v157)
    {
      v115 = v156;
      v156 = 0;
      if (v115)
      {
        if (*v115 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v115;
      }
    }
    if (v155)
    {
      v116 = v154;
      v154 = 0;
      if (v116)
      {
        if (*v116 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v116;
      }
    }
    if (v153)
    {
      v117 = v152;
      v152 = 0;
      if (v117)
      {
        if (*v117 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v117;
      }
    }
    if (v151)
    {
      v118 = v150;
      v150 = 0;
      if (v118)
      {
        if (*v118 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v118;
      }
    }
    if (v149)
    {
      v119 = v148;
      v148 = 0;
      if (v119)
      {
        if (*v119 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v119;
      }
    }
    if (v147)
    {
      v120 = v146;
      v146 = 0;
      if (v120)
      {
        if (*v120 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v120;
      }
    }
    if (v145)
    {
      v121 = v143;
      v143 = 0;
      if (v121)
      {
        if (*(_DWORD *)v121 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v121;
      }
    }
    v122 = v142;
    v142 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
        WTF::StringImpl::destroy(v122, v109);
      else
        *(_DWORD *)v122 -= 2;
    }
LABEL_41:
    if (!v136)
    {
      v30 = v135;
      v135 = 0;
      v143 = v30;
      if (!*((_BYTE *)a3 + 364))
      {
        if (*((_QWORD *)a3 + 122))
          v31 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
        else
          v31 = 0;
        if (v31)
        {
          WebCore::WebGLRenderingContextBase::synthesizeGLError(a3, 1282, (uint64_t)"texImage3D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
        }
        else
        {
          if ((*((_BYTE *)a3 + 344) || *((_BYTE *)a3 + 345)) && v30)
          {
            WebCore::WebGLRenderingContextBase::synthesizeGLError(a3, 1282, (uint64_t)"texImage3D", 11, (uint64_t)"FLIP_Y or PREMULTIPLY_ALPHA isn't allowed for uploading 3D textures", 68);
            v143 = 0;
            goto LABEL_131;
          }
          WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a3, 2, v139[0], v131, v133, v134, v132, v130, v129, v138[0], v137[0], 0, 0, 0, &v143, 0, 0);
          v30 = v143;
        }
      }
      v143 = 0;
      if (!v30)
      {
LABEL_133:
        v27 = v136;
        v28 = 10;
        goto LABEL_134;
      }
LABEL_131:
      if (*(_DWORD *)v30 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v30;
      goto LABEL_133;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_264:
  v28 = 0;
LABEL_134:
  if (v27 != -1)
    goto LABEL_135;
  return v28;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v6;
  unint64_t v7;
  JSC::VM *v8;
  int v9;
  unint64_t v10;
  JSC::VM *v11;
  int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  int v23;
  JSC::CallFrame *v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  WebCore::InspectorInstrumentation *v65;
  WebCore::ScriptExecutionContext *v66;
  uint64_t v67;
  WebCore::InspectorCanvasAgent *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  JSValue v71;
  WTF::StringImpl *v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  WebCore::InspectorCanvasAgent *v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  WebCore::InspectorInstrumentation *v93;
  WebCore::ScriptExecutionContext *v94;
  uint64_t v95;
  WebCore::InspectorCanvasAgent *v96;
  unsigned int v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  unsigned int v102;
  WebCore::InspectorInstrumentation *v103;
  WebCore::ScriptExecutionContext *v104;
  uint64_t v105;
  WebCore::InspectorCanvasAgent *v106;
  WebCore::InspectorInstrumentation *v107;
  WebCore::ScriptExecutionContext *v108;
  uint64_t v109;
  uint64_t v110;
  WebCore::InspectorInstrumentation *v111;
  WebCore::ScriptExecutionContext *v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  JSC::VM *v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  WebCore::CanvasRenderingContext *v139;
  _DWORD v141[2];
  _DWORD v142[2];
  _DWORD v143[2];
  int v144[2];
  WTF::StringImpl *v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  int v148;
  WTF::StringImpl **v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  int v152;
  int v153;
  unint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  _DWORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  _DWORD *v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  _DWORD *v171;
  char v172;
  _DWORD *v173;
  char v174;
  _DWORD *v175;
  char v176;
  char v177[8];
  uint64_t v178;
  unsigned int v179;
  int v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v143);
  if (v143[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v150 = (WTF::StringImpl *)v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v7 < 0xFFFE000000000000)
  {
    v34 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v34 = v126;
    }
    v35 = (v34 >> 52) & 0x7FF;
    v36 = v35 - 1023;
    v37 = v34 >> (51 - (v34 >> 52));
    if (v35 > 0x433)
      LODWORD(v37) = v34 << ((v34 >> 52) - 51);
    if (v35 >= 0x41F)
      v38 = v37;
    else
      v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
    if ((v34 & 0x8000000000000000) == 0)
      v39 = v38;
    else
      v39 = -v38;
    if (v36 <= 0x53)
      v9 = v39;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v150 = (WTF::StringImpl *)v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v40 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v40 = v127;
    }
    v41 = (v40 >> 52) & 0x7FF;
    v42 = v41 - 1023;
    v43 = v40 >> (51 - (v40 >> 52));
    if (v41 > 0x433)
      LODWORD(v43) = v40 << ((v40 >> 52) - 51);
    if (v41 >= 0x41F)
      v44 = v43;
    else
      v44 = (((1 << ((v40 >> 52) + 1)) - 1) & v43) + (1 << ((v40 >> 52) + 1));
    if ((v40 & 0x8000000000000000) == 0)
      v45 = v44;
    else
      v45 = -v44;
    if (v42 <= 0x53)
      v12 = v45;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v150 = (WTF::StringImpl *)v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v46 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v46 = v128;
    }
    v47 = (v46 >> 52) & 0x7FF;
    v48 = v47 - 1023;
    v49 = v46 >> (51 - (v46 >> 52));
    if (v47 > 0x433)
      LODWORD(v49) = v46 << ((v46 >> 52) - 51);
    if (v47 >= 0x41F)
      v50 = v49;
    else
      v50 = (((1 << ((v46 >> 52) + 1)) - 1) & v49) + (1 << ((v46 >> 52) + 1));
    if ((v46 & 0x8000000000000000) == 0)
      v51 = v50;
    else
      v51 = -v50;
    if (v48 > 0x53)
      v51 = 0;
    v137 = v51;
  }
  else
  {
    v137 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v136 = v12;
  v15 = *((_QWORD *)a2 + 10);
  v150 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 < 0xFFFE000000000000)
  {
    v52 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v52 = v129;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v58 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v58) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v59 = v58;
      else
        v59 = (((1 << ((v52 >> 52) + 1)) - 1) & v58) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v17 = v59;
      else
        v17 = -v59;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v132 = v6;
  v18 = *((_QWORD *)a2 + 11);
  v150 = (WTF::StringImpl *)v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 < 0xFFFE000000000000)
  {
    v54 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v54 = v130;
    }
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v60 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v60) = v54 << ((v54 >> 52) - 51);
      if (v55 >= 0x41F)
        v61 = v60;
      else
        v61 = (((1 << ((v54 >> 52) + 1)) - 1) & v60) + (1 << ((v54 >> 52) + 1));
      if ((v54 & 0x8000000000000000) == 0)
        v62 = v61;
      else
        v62 = -v61;
      v135 = v62;
    }
    else
    {
      v135 = 0;
    }
  }
  else
  {
    v135 = v18;
  }
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    return 0;
  v133 = v17;
  v134 = v9;
  v20 = *((_QWORD *)a2 + 12);
  v150 = (WTF::StringImpl *)v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 < 0xFFFE000000000000)
  {
    v56 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v150, this);
      v56 = v131;
    }
    v57 = (v56 >> 52) & 0x7FF;
    if ((v57 - 1023) <= 0x53)
    {
      v63 = v56 >> (51 - (v56 >> 52));
      if (v57 > 0x433)
        LODWORD(v63) = v56 << ((v56 >> 52) - 51);
      if (v57 >= 0x41F)
        v64 = v63;
      else
        v64 = (((1 << ((v56 >> 52) + 1)) - 1) & v63) + (1 << ((v56 >> 52) + 1));
      if ((v56 & 0x8000000000000000) == 0)
        v22 = v64;
      else
        v22 = -v64;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v142);
  if (v142[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 14), v141);
  if (v141[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 15), (uint64_t)v177);
  v23 = v180;
  if (!v180)
  {
    v24 = a3;
    if (*((_BYTE *)a3 + 33))
    {
      v139 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v147 = v150;
      v138 = v143[0];
      v65 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v65
        && (v67 = WebCore::InspectorInstrumentation::instrumentingAgents(v65, v66)) != 0
        && (v68 = *(WebCore::InspectorCanvasAgent **)(v67 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v68, v139, v138, (uint64_t)&v150);
      }
      else
      {
        LOBYTE(v150) = 0;
        LOBYTE(v152) = 0;
      }
      v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v73
        && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
        && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v76, v139, v134, (uint64_t)&v154);
      }
      else
      {
        LOBYTE(v154) = 0;
        LOBYTE(v157) = 0;
      }
      v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v77
        && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
        && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v80, v139, v136, (uint64_t)&v158);
      }
      else
      {
        LOBYTE(v158) = 0;
        LOBYTE(v161) = 0;
      }
      v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v81
        && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
        && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v84, v139, v137, (uint64_t)&v163);
      }
      else
      {
        LOBYTE(v163) = 0;
        v164 = 0;
      }
      v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v85
        && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
        && (v88 = *(WebCore::InspectorCanvasAgent **)(v87 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v88, v139, v133, (uint64_t)&v165);
      }
      else
      {
        LOBYTE(v165) = 0;
        v166 = 0;
      }
      v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v89
        && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
        && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v92, v139, v135, (uint64_t)&v167);
      }
      else
      {
        LOBYTE(v167) = 0;
        v168 = 0;
      }
      v93 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v93
        && (v95 = WebCore::InspectorInstrumentation::instrumentingAgents(v93, v94)) != 0
        && (v96 = *(WebCore::InspectorCanvasAgent **)(v95 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v96, v139, v22, (uint64_t)&v169);
      }
      else
      {
        LOBYTE(v169) = 0;
        v170 = 0;
      }
      v97 = v142[0];
      v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v98
        && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
        && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v101, v139, v97, (uint64_t)&v171);
      }
      else
      {
        LOBYTE(v171) = 0;
        v172 = 0;
      }
      v102 = v141[0];
      v103 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v103
        && (v105 = WebCore::InspectorInstrumentation::instrumentingAgents(v103, v104)) != 0
        && (v106 = *(WebCore::InspectorCanvasAgent **)(v105 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v106, v139, v102, (uint64_t)&v173);
      }
      else
      {
        LOBYTE(v173) = 0;
        v174 = 0;
      }
      if (v180)
        goto LABEL_258;
      v107 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v107
        && (v109 = WebCore::InspectorInstrumentation::instrumentingAgents(v107, v108)) != 0
        && (v110 = *(_QWORD *)(v109 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v110, (uint64_t)v139, (uint64_t)&v178);
      }
      else
      {
        LOBYTE(v175) = 0;
        v176 = 0;
      }
      *(_QWORD *)v144 = &v150;
      v145 = (WTF::StringImpl *)10;
      v111 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v111)
      {
        v113 = WebCore::InspectorInstrumentation::instrumentingAgents(v111, v112);
        if (v113)
        {
          v114 = *(_QWORD *)(v113 + 96);
          if (v114)
            WebCore::InspectorCanvasAgent::recordAction(v114, v139, (const WTF::StringImpl *)&v147, v144);
        }
      }
      if (v176)
      {
        v115 = v175;
        v175 = 0;
        if (v115)
        {
          if (*v115 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v115;
        }
      }
      if (v174)
      {
        v116 = v173;
        v173 = 0;
        if (v116)
        {
          if (*v116 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v116;
        }
      }
      if (v172)
      {
        v117 = v171;
        v171 = 0;
        if (v117)
        {
          if (*v117 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v117;
        }
      }
      if (v170)
      {
        v118 = v169;
        v169 = 0;
        if (v118)
        {
          if (*v118 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v118;
        }
      }
      if (v168)
      {
        v119 = v167;
        v167 = 0;
        if (v119)
        {
          if (*v119 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v119;
        }
      }
      if (v166)
      {
        v120 = v165;
        v165 = 0;
        if (v120)
        {
          if (*v120 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v120;
        }
      }
      if (v164)
      {
        v121 = v163;
        v163 = 0;
        if (v121)
        {
          if (*v121 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v121;
        }
      }
      if ((_BYTE)v161)
      {
        v122 = v158;
        v158 = 0;
        if (v122)
        {
          if (*v122 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v122;
        }
      }
      if ((_BYTE)v157)
      {
        v123 = (_DWORD *)v154;
        v154 = 0;
        if (v123)
        {
          if (*v123 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v123;
        }
      }
      if ((_BYTE)v152)
      {
        v124 = v150;
        v150 = 0;
        if (v124)
        {
          if (*(_DWORD *)v124 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v124;
        }
      }
      v125 = v147;
      v147 = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
          WTF::StringImpl::destroy(v125, v112);
        else
          *(_DWORD *)v125 -= 2;
      }
      v24 = a3;
    }
    if (!v180)
    {
      v25 = v143[0];
      v26 = v142[0];
      v27 = v141[0];
      LOBYTE(v147) = 0;
      v148 = -1;
      v28 = v179;
      if (v179 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E332F4C0[v179])(&v150, &v147, &v178);
        v24 = a3;
        v148 = v28;
      }
      if (*((_BYTE *)v24 + 364))
        goto LABEL_33;
      if (*((_QWORD *)v24 + 122))
        v29 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v29 = 0;
      if (v29)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v24, 1282, (uint64_t)"texImage3D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
LABEL_33:
        *(_QWORD *)v144 = 0;
        v145 = 0;
        v146 = 0;
        goto LABEL_34;
      }
      v32 = *(_DWORD **)((char *)v24 + 332);
      v150 = v24;
      v33 = *((_DWORD *)v24 + 82);
      LODWORD(v151) = 2;
      HIDWORD(v151) = v25;
      v152 = v134;
      v153 = v136;
      v154 = __PAIR64__(v26, v22);
      v155 = v27;
      v156 = 0;
      v157 = 0;
      v158 = v32;
      v159 = v137;
      v160 = v133;
      v161 = v135;
      v162 = v33;
      if ((_DWORD)v28 != -1)
      {
        v149 = &v150;
        ((void (*)(int *__return_ptr, WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v28])(v144, &v149, &v147);
LABEL_34:
        if (v148 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F488[v148])(&v150, &v147);
        if (!(_BYTE)v146)
        {
          v30 = 10;
LABEL_38:
          v23 = v180;
          goto LABEL_39;
        }
        v69 = (WTF::StringImpl *)LOBYTE(v144[0]);
        LOBYTE(v150) = v144[0];
        v70 = v145;
        v145 = 0;
        v151 = v70;
        if (!*((_QWORD *)v132 + 2))
        {
          v71.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v144[0]), (JSC::JSGlobalObject *)&v151);
          JSC::VM::throwException(v132, this, v71);
          v70 = v151;
        }
        v151 = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, v69);
          else
            *(_DWORD *)v70 -= 2;
        }
        if ((_BYTE)v146)
        {
          v72 = v145;
          v145 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 != 2)
            {
              v30 = 0;
              *(_DWORD *)v72 -= 2;
              goto LABEL_38;
            }
            WTF::StringImpl::destroy(v72, v69);
          }
        }
        v30 = 0;
        goto LABEL_38;
      }
    }
LABEL_258:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v30 = 0;
LABEL_39:
  if (v23 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F4F8[v23])(&v150, &v178);
  return v30;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  JSC::VM *v20;
  unint64_t v21;
  uint64_t v22;
  JSC::CallFrame *v23;
  JSC::VM *v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  JSC::CallFrame *v61;
  unsigned int v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  WebCore::InspectorInstrumentation *v79;
  WebCore::ScriptExecutionContext *v80;
  uint64_t v81;
  WebCore::InspectorCanvasAgent *v82;
  WebCore::InspectorInstrumentation *v83;
  WebCore::ScriptExecutionContext *v84;
  uint64_t v85;
  WebCore::InspectorCanvasAgent *v86;
  WebCore::InspectorInstrumentation *v87;
  WebCore::ScriptExecutionContext *v88;
  uint64_t v89;
  WebCore::InspectorCanvasAgent *v90;
  unsigned int v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  WebCore::InspectorCanvasAgent *v95;
  unsigned int v96;
  WebCore::InspectorInstrumentation *v97;
  WebCore::ScriptExecutionContext *v98;
  uint64_t v99;
  WebCore::InspectorCanvasAgent *v100;
  WebCore::InspectorInstrumentation *v101;
  WebCore::ScriptExecutionContext *v102;
  uint64_t v103;
  WebCore::InspectorCanvasAgent *v104;
  WebCore::InspectorInstrumentation *v105;
  WebCore::ScriptExecutionContext *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  double v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  WebCore::CanvasRenderingContext *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  _QWORD v135[2];
  WTF::StringImpl *v136;
  _DWORD v137[2];
  unsigned int v138[2];
  unsigned int v139[2];
  _QWORD v140[2];
  char v141;
  _DWORD *v142;
  char v143;
  _DWORD *v144;
  char v145;
  _DWORD *v146;
  char v147;
  _DWORD *v148;
  char v149;
  _DWORD *v150;
  char v151;
  _DWORD *v152;
  char v153;
  _DWORD *v154;
  char v155;
  _DWORD *v156;
  char v157;
  _DWORD *v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v139);
  if (v139[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v140[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v27 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v27 = v121;
    }
    v28 = (v27 >> 52) & 0x7FF;
    v29 = v28 - 1023;
    v30 = v27 >> (51 - (v27 >> 52));
    if (v28 > 0x433)
      LODWORD(v30) = v27 << ((v27 >> 52) - 51);
    if (v28 >= 0x41F)
      v31 = v30;
    else
      v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
    if ((v27 & 0x8000000000000000) == 0)
      v32 = v31;
    else
      v32 = -v31;
    if (v29 <= 0x53)
      v8 = v32;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v140[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v33 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v33 = v122;
    }
    v34 = (v33 >> 52) & 0x7FF;
    v35 = v34 - 1023;
    v36 = v33 >> (51 - (v33 >> 52));
    if (v34 > 0x433)
      LODWORD(v36) = v33 << ((v33 >> 52) - 51);
    if (v34 >= 0x41F)
      v37 = v36;
    else
      v37 = (((1 << ((v33 >> 52) + 1)) - 1) & v36) + (1 << ((v33 >> 52) + 1));
    if ((v33 & 0x8000000000000000) == 0)
      v38 = v37;
    else
      v38 = -v37;
    if (v35 <= 0x53)
      v11 = v38;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v140[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v39 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v39 = v123;
    }
    v40 = (v39 >> 52) & 0x7FF;
    v41 = v40 - 1023;
    v42 = v39 >> (51 - (v39 >> 52));
    if (v40 > 0x433)
      LODWORD(v42) = v39 << ((v39 >> 52) - 51);
    if (v40 >= 0x41F)
      v43 = v42;
    else
      v43 = (((1 << ((v39 >> 52) + 1)) - 1) & v42) + (1 << ((v39 >> 52) + 1));
    if ((v39 & 0x8000000000000000) == 0)
      v44 = v43;
    else
      v44 = -v43;
    if (v41 <= 0x53)
      v14 = v44;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v132 = v14;
  v15 = *((_QWORD *)a2 + 10);
  v140[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v45 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v45 = v124;
    }
    v46 = (v45 >> 52) & 0x7FF;
    if ((v46 - 1023) <= 0x53)
    {
      v52 = v45 >> (51 - (v45 >> 52));
      if (v46 > 0x433)
        LODWORD(v52) = v45 << ((v45 >> 52) - 51);
      if (v46 >= 0x41F)
        v53 = v52;
      else
        v53 = (((1 << ((v45 >> 52) + 1)) - 1) & v52) + (1 << ((v45 >> 52) + 1));
      if ((v45 & 0x8000000000000000) == 0)
        v54 = v53;
      else
        v54 = -v53;
      v133 = v54;
    }
    else
    {
      v133 = 0;
    }
  }
  else
  {
    v133 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v131 = v11;
  v17 = *((_QWORD *)a2 + 11);
  v140[0] = v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v47 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v47 = v125;
    }
    v48 = (v47 >> 52) & 0x7FF;
    if ((v48 - 1023) <= 0x53)
    {
      v55 = v47 >> (51 - (v47 >> 52));
      if (v48 > 0x433)
        LODWORD(v55) = v47 << ((v47 >> 52) - 51);
      if (v48 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v47 >> 52) + 1)) - 1) & v55) + (1 << ((v47 >> 52) + 1));
      if ((v47 & 0x8000000000000000) == 0)
        v57 = v56;
      else
        v57 = -v56;
      v130 = v57;
    }
    else
    {
      v130 = 0;
    }
  }
  else
  {
    v130 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v129 = v8;
  v19 = *((_QWORD *)a2 + 12);
  v140[0] = v19;
  v20 = this[7];
  if (v19 < 0xFFFE000000000000)
  {
    v49 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v49 = v126;
    }
    v50 = (v49 >> 52) & 0x7FF;
    if ((v50 - 1023) <= 0x53)
    {
      v58 = v49 >> (51 - (v49 >> 52));
      if (v50 > 0x433)
        LODWORD(v58) = v49 << ((v49 >> 52) - 51);
      if (v50 >= 0x41F)
        v59 = v58;
      else
        v59 = (((1 << ((v49 >> 52) + 1)) - 1) & v58) + (1 << ((v49 >> 52) + 1));
      if ((v49 & 0x8000000000000000) == 0)
        v60 = v59;
      else
        v60 = -v59;
      v128 = v60;
    }
    else
    {
      v128 = 0;
    }
  }
  else
  {
    v128 = v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v138);
  if (v138[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v137);
  if (v137[1])
    return 0;
  v21 = *((_QWORD *)a2 + 15);
  v140[0] = v21;
  if (v21 < 0xFFFE000000000000)
  {
    v24 = this[7];
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v140, (JSC::JSGlobalObject *)this);
      v25 = v120;
    }
    else
    {
      *(_QWORD *)&v25 = v21 - 0x2000000000000;
    }
    if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
      return 0;
    v23 = a3;
    if (fabs(v25) == INFINITY)
    {
      v22 = 0;
    }
    else
    {
      v26 = fmod(trunc(v25), 1.84467441e19);
      if (v26 >= 0.0)
        v22 = (unint64_t)v26;
      else
        v22 = -(uint64_t)(unint64_t)-v26;
    }
  }
  else
  {
    v22 = (int)v21;
    v23 = a3;
  }
  if (*((_BYTE *)v23 + 33))
  {
    v127 = (JSC::CallFrame *)((char *)v23 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v136 = (WTF::StringImpl *)v140[0];
    v61 = v23;
    v62 = v139[0];
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v61 + 5) + 144))(*((_QWORD *)v61 + 5));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, v127, v62, (uint64_t)v140);
    }
    else
    {
      LOBYTE(v140[0]) = 0;
      v141 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, v127, v129, (uint64_t)&v142);
    }
    else
    {
      LOBYTE(v142) = 0;
      v143 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, v127, v131, (uint64_t)&v144);
    }
    else
    {
      LOBYTE(v144) = 0;
      v145 = 0;
    }
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, v127, v132, (uint64_t)&v146);
    }
    else
    {
      LOBYTE(v146) = 0;
      v147 = 0;
    }
    v79 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v79
      && (v81 = WebCore::InspectorInstrumentation::instrumentingAgents(v79, v80)) != 0
      && (v82 = *(WebCore::InspectorCanvasAgent **)(v81 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v82, v127, v133, (uint64_t)&v148);
    }
    else
    {
      LOBYTE(v148) = 0;
      v149 = 0;
    }
    v83 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v83
      && (v85 = WebCore::InspectorInstrumentation::instrumentingAgents(v83, v84)) != 0
      && (v86 = *(WebCore::InspectorCanvasAgent **)(v85 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v86, v127, v130, (uint64_t)&v150);
    }
    else
    {
      LOBYTE(v150) = 0;
      v151 = 0;
    }
    v87 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v87
      && (v89 = WebCore::InspectorInstrumentation::instrumentingAgents(v87, v88)) != 0
      && (v90 = *(WebCore::InspectorCanvasAgent **)(v89 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v90, v127, v128, (uint64_t)&v152);
    }
    else
    {
      LOBYTE(v152) = 0;
      v153 = 0;
    }
    v91 = v138[0];
    v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v92
      && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
      && (v95 = *(WebCore::InspectorCanvasAgent **)(v94 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v95, v127, v91, (uint64_t)&v154);
    }
    else
    {
      LOBYTE(v154) = 0;
      v155 = 0;
    }
    v96 = v137[0];
    v97 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v97
      && (v99 = WebCore::InspectorInstrumentation::instrumentingAgents(v97, v98)) != 0
      && (v100 = *(WebCore::InspectorCanvasAgent **)(v99 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v100, v127, v96, (uint64_t)&v156);
    }
    else
    {
      LOBYTE(v156) = 0;
      v157 = 0;
    }
    v23 = a3;
    v101 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v101
      && (v103 = WebCore::InspectorInstrumentation::instrumentingAgents(v101, v102)) != 0
      && (v104 = *(WebCore::InspectorCanvasAgent **)(v103 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v104, v127, v22, (uint64_t)&v158);
    }
    else
    {
      LOBYTE(v158) = 0;
      v159 = 0;
    }
    v135[0] = v140;
    v135[1] = 10;
    v105 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v105)
    {
      v107 = WebCore::InspectorInstrumentation::instrumentingAgents(v105, v106);
      if (v107)
      {
        v108 = *(_QWORD *)(v107 + 96);
        if (v108)
          WebCore::InspectorCanvasAgent::recordAction(v108, v127, (const WTF::StringImpl *)&v136, v135);
      }
    }
    if (v159)
    {
      v109 = v158;
      v158 = 0;
      if (v109)
      {
        if (*v109 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v109;
      }
    }
    if (v157)
    {
      v110 = v156;
      v156 = 0;
      if (v110)
      {
        if (*v110 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v110;
      }
    }
    if (v155)
    {
      v111 = v154;
      v154 = 0;
      if (v111)
      {
        if (*v111 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v111;
      }
    }
    if (v153)
    {
      v112 = v152;
      v152 = 0;
      if (v112)
      {
        if (*v112 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v112;
      }
    }
    if (v151)
    {
      v113 = v150;
      v150 = 0;
      if (v113)
      {
        if (*v113 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v113;
      }
    }
    if (v149)
    {
      v114 = v148;
      v148 = 0;
      if (v114)
      {
        if (*v114 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v114;
      }
    }
    if (v147)
    {
      v115 = v146;
      v146 = 0;
      if (v115)
      {
        if (*v115 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v115;
      }
    }
    if (v145)
    {
      v116 = v144;
      v144 = 0;
      if (v116)
      {
        if (*v116 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v116;
      }
    }
    if (v143)
    {
      v117 = v142;
      v142 = 0;
      if (v117)
      {
        if (*v117 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v117;
      }
    }
    if (v141)
    {
      v118 = (_DWORD *)v140[0];
      v140[0] = 0;
      if (v118)
      {
        if (*v118 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v118;
      }
    }
    v119 = v136;
    v136 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
        WTF::StringImpl::destroy(v119, v106);
      else
        *(_DWORD *)v119 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::texImage3D(v23, v139[0], v129, v131, v132, v133, v130, v128, __SPAIR64__(v137[0], v138[0]), v22);
  return 10;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSG_SI_EEEEEEDcSM_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

void WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v4;
  int v5;
  int v6;
  _BYTE v7[24];
  _BYTE v8[8];
  int v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13[3];

  v11 = a1[7];
  v8[0] = 0;
  v10 = 0;
  v12 = a2;
  v13[0] = (unint64_t *)v8;
  v13[1] = a1;
  v13[2] = (unint64_t *)&v12;
  v4 = _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11ImageBitmapEEENS4_INS_9ImageDataEEENS4_INS_16HTMLImageElementEEENS4_INS_17HTMLCanvasElementEEENS4_INS_16HTMLVideoElementEEENS4_INS_15OffscreenCanvasEEENS4_INS_19WebCodecsVideoFrameEEEEEEE7convertERN3JSC14JSGlobalObjectENSL_7JSValueEEUlTyvE_JS6_S8_SA_SC_SE_SG_SI_EEET_SQ_(v13, (uint64_t)v7);
  if (v10)
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = -1;
    v5 = v9;
    if (v9 == -1)
    {
      *(_DWORD *)(a3 + 24) = 0;
    }
    else
    {
      ((void (*)(unint64_t **, __n128))off_1E332F4C0[v9])(v13, v4);
      *(_DWORD *)(a3 + 16) = v5;
      v6 = v10;
      *(_DWORD *)(a3 + 24) = 0;
      if (v6)
      {
        if (v9 != -1)
          ((void (*)(unint64_t **, _BYTE *))off_1E332F488[v9])(v13, v8);
      }
    }
  }
  else
  {
    JSC::throwTypeError();
    *(_DWORD *)(a3 + 24) = 1;
  }
}

__n128 _ZN7WebCore6Detail11forEachArgsIZNS_9ConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_11ImageBitmapEEENS4_INS_9ImageDataEEENS4_INS_16HTMLImageElementEEENS4_INS_17HTMLCanvasElementEEENS4_INS_16HTMLVideoElementEEENS4_INS_15OffscreenCanvasEEENS4_INS_19WebCodecsVideoFrameEEEEEEE7convertERN3JSC14JSGlobalObjectENSL_7JSValueEEUlTyvE_JS6_S8_SA_SC_SE_SG_SI_EEET_SQ_@<Q0>(unint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  char **v8;
  BOOL v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  char **v30;
  BOOL v31;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  char **v38;
  BOOL v39;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  char **v44;
  BOOL v45;
  uint64_t v47;
  __n128 result;
  unint64_t v49;
  void *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;

  v4 = *a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v5 = *a1[2];
    if ((v5 & 0xFFFE000000000002) == 0)
    {
      v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
      v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
      v8 = (char **)(16 * v6);
      if ((_DWORD)v6)
        v9 = v8 == &WebCore::JSImageBitmap::s_info;
      else
        v9 = 1;
      if (!v9)
      {
        do
        {
          v8 = (char **)v8[2];
          v7 = v8 != 0;
        }
        while (v8 != &WebCore::JSImageBitmap::s_info && v8 != 0);
      }
      if (v7)
      {
        v11 = *(_QWORD *)(v5 + 24);
        if (v11)
        {
          ++*(_DWORD *)(v11 + 8);
          *v4 = v11;
          *((_DWORD *)v4 + 2) = 0;
LABEL_41:
          *((_BYTE *)v4 + 16) = 1;
          goto LABEL_42;
        }
      }
    }
    v12 = *a1[2];
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v13 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
      v14 = *(_DWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) != 0;
      v15 = (char **)(16 * v13);
      if ((_DWORD)v13)
        v16 = v15 == &WebCore::JSImageData::s_info;
      else
        v16 = 1;
      if (!v16)
      {
        do
        {
          v15 = (char **)v15[2];
          v14 = v15 != 0;
        }
        while (v15 != &WebCore::JSImageData::s_info && v15 != 0);
      }
      if (v14)
      {
        v18 = *(_DWORD **)(v12 + 24);
        if (v18)
        {
          ++*v18;
          *v4 = (unint64_t)v18;
          *((_DWORD *)v4 + 2) = 1;
          goto LABEL_41;
        }
      }
    }
    v19 = *a1[2];
    if ((v19 & 0xFFFE000000000002) == 0)
    {
      v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
      v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
      v22 = (char **)(16 * v20);
      if ((_DWORD)v20)
        v23 = v22 == &WebCore::JSHTMLImageElement::s_info;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = (char **)v22[2];
          v21 = v22 != 0;
        }
        while (v22 != &WebCore::JSHTMLImageElement::s_info && v22 != 0);
      }
      if (v21)
      {
        v25 = *(_QWORD *)(v19 + 24);
        if (v25)
        {
          *(_DWORD *)(v25 + 24) += 2;
          *v4 = v25;
          *((_DWORD *)v4 + 2) = 2;
          goto LABEL_41;
        }
      }
    }
    v49 = JSC::jsDynamicCast<WebCore::JSHTMLCanvasElement *>(*a1[2]);
    if (v49)
    {
      v51 = *(_QWORD *)(v49 + 24);
      if (v51)
      {
        *(_DWORD *)(v51 + 24) += 2;
        v52 = *a1;
        if (!*((_BYTE *)*a1 + 16))
        {
          *v52 = v51;
          *((_DWORD *)v52 + 2) = 3;
          *((_BYTE *)v52 + 16) = 1;
          goto LABEL_42;
        }
        v53 = *((unsigned int *)v52 + 2);
        if ((_DWORD)v53 != -1)
        {
          if ((_DWORD)v53 == 3)
          {
            v54 = *v52;
            *v52 = v51;
            if (v54)
            {
              if (*(_DWORD *)(v54 + 24) == 2)
              {
                if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v54, v50);
              }
              else
              {
                *(_DWORD *)(v54 + 24) -= 2;
              }
            }
            goto LABEL_42;
          }
          ((void (*)(char *, unint64_t *))off_1E332F488[v53])(&v55, *a1);
        }
        *v52 = v51;
        *((_DWORD *)v52 + 2) = 3;
      }
    }
  }
LABEL_42:
  v26 = *a1;
  if (!*((_BYTE *)*a1 + 16))
  {
    v27 = *a1[2];
    if ((v27 & 0xFFFE000000000002) == 0)
    {
      v28 = *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C);
      v29 = *(_DWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C) != 0;
      v30 = (char **)(16 * v28);
      if ((_DWORD)v28)
        v31 = v30 == &WebCore::JSHTMLVideoElement::s_info;
      else
        v31 = 1;
      if (!v31)
      {
        do
        {
          v30 = (char **)v30[2];
          v29 = v30 != 0;
        }
        while (v30 != &WebCore::JSHTMLVideoElement::s_info && v30 != 0);
      }
      if (v29)
      {
        v33 = *(_QWORD *)(v27 + 24);
        if (v33)
        {
          *(_DWORD *)(v33 + 24) += 2;
          v34 = 4;
LABEL_81:
          *v26 = v33;
          *((_DWORD *)v26 + 2) = v34;
          *((_BYTE *)v26 + 16) = 1;
          goto LABEL_82;
        }
      }
    }
    v35 = *a1[2];
    if ((v35 & 0xFFFE000000000002) == 0)
    {
      v36 = *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C);
      v37 = *(_DWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C) != 0;
      v38 = (char **)(16 * v36);
      if ((_DWORD)v36)
        v39 = v38 == &WebCore::JSOffscreenCanvas::s_info;
      else
        v39 = 1;
      if (!v39)
      {
        do
        {
          v38 = (char **)v38[2];
          v37 = v38 != 0;
        }
        while (v38 != &WebCore::JSOffscreenCanvas::s_info && v38 != 0);
      }
      if (v37)
      {
        v47 = *(_QWORD *)(v35 + 24);
        v33 = v47 - 144;
        ++*(_DWORD *)(v47 - 120);
        v34 = 5;
        goto LABEL_81;
      }
    }
    v41 = *a1[2];
    if ((v41 & 0xFFFE000000000002) == 0)
    {
      v42 = *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C);
      v43 = *(_DWORD *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C) != 0;
      v44 = (char **)(16 * v42);
      if ((_DWORD)v42)
        v45 = v44 == &WebCore::JSWebCodecsVideoFrame::s_info;
      else
        v45 = 1;
      if (!v45)
      {
        do
        {
          v44 = (char **)v44[2];
          v43 = v44 != 0;
        }
        while (v44 != &WebCore::JSWebCodecsVideoFrame::s_info && v44 != 0);
      }
      if (v43)
      {
        v33 = *(_QWORD *)(v41 + 24);
        if (v33)
        {
          ++*(_DWORD *)(v33 + 16);
          v34 = 6;
          goto LABEL_81;
        }
      }
    }
  }
LABEL_82:
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, bmalloc::api **a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return result;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_10:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v12 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v12 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_17:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
LABEL_22:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 2);
      *((_QWORD *)v2 + 2) = 0;
      if (v3)
      {
        if (*v3 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*v3;
      }
      WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, WebCore::OffscreenCanvas **a2)
{
  WebCore::OffscreenCanvas *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_9ImageDataENSD_ISI_EENSF_ISI_EEEENSA_INSB_16HTMLImageElementENSD_ISM_EENSF_ISM_EEEENSA_INSB_17HTMLCanvasElementENSD_ISQ_EENSF_ISQ_EEEENSA_INSB_16HTMLVideoElementENSD_ISU_EENSF_ISU_EEEENSA_INSB_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSA_INSB_19WebCodecsVideoFrameENSD_IS12_EENSF_IS12_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E332F488[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D3Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::ArrayBufferView *v7;
  JSC::VM *v8;
  unsigned int v9;
  JSC::ArrayBufferView *v10;
  JSC::VM *v11;
  int v12;
  JSC::ArrayBufferView *v13;
  JSC::VM *v14;
  JSC::ArrayBufferView *v15;
  JSC::VM *v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  JSC::ArrayBufferView *v19;
  JSC::VM *v20;
  int v21;
  JSC::ArrayBufferView *v22;
  JSC::VM *v23;
  uint64_t v24;
  JSC::JSArrayBufferView *v25;
  JSC::CallFrame *v26;
  int v27;
  JSC::ArrayBufferView *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  JSC::ArrayBufferView *v33;
  uint64_t (*v34)();
  const char *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  WebCore::InspectorCanvasAgent *v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  WebCore::InspectorInstrumentation *v93;
  WebCore::ScriptExecutionContext *v94;
  uint64_t v95;
  WebCore::InspectorCanvasAgent *v96;
  WebCore::InspectorInstrumentation *v97;
  WebCore::ScriptExecutionContext *v98;
  uint64_t v99;
  WebCore::InspectorCanvasAgent *v100;
  WebCore::InspectorInstrumentation *v101;
  WebCore::ScriptExecutionContext *v102;
  uint64_t v103;
  WebCore::InspectorCanvasAgent *v104;
  WebCore::InspectorInstrumentation *v105;
  WebCore::ScriptExecutionContext *v106;
  uint64_t v107;
  WebCore::InspectorCanvasAgent *v108;
  unsigned int v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  WebCore::InspectorCanvasAgent *v113;
  unsigned int v114;
  WebCore::InspectorInstrumentation *v115;
  WebCore::ScriptExecutionContext *v116;
  uint64_t v117;
  WebCore::InspectorCanvasAgent *v118;
  WebCore::InspectorInstrumentation *v119;
  WebCore::ScriptExecutionContext *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  WebCore::InspectorInstrumentation *v124;
  WebCore::ScriptExecutionContext *v125;
  uint64_t v126;
  WebCore::InspectorCanvasAgent *v127;
  WebCore::InspectorInstrumentation *v128;
  WebCore::ScriptExecutionContext *v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  JSC::ArrayBufferView *v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  JSC::ArrayBufferView *v159;
  JSC::ArrayBufferView *v160;
  int v161;
  int v162[2];
  unsigned int v163[2];
  unsigned int v164;
  int v165;
  JSC::ArrayBufferView **v166;
  uint64_t v167;
  JSC::ArrayBufferView *v168;
  JSC::ArrayBufferView *v169;
  int v170;
  char v171;
  _DWORD *v172;
  char v173;
  _DWORD *v174;
  char v175;
  _DWORD *v176;
  char v177;
  _DWORD *v178;
  char v179;
  _DWORD *v180;
  char v181;
  _DWORD *v182;
  char v183;
  _DWORD *v184;
  char v185;
  _DWORD *v186;
  char v187;
  _DWORD *v188;
  char v189;
  _DWORD *v190;
  char v191;
  _DWORD *v192;
  char v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), &v164);
  if (v165)
    return 0;
  v7 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v169 = v7;
  v8 = this[7];
  if ((unint64_t)v7 < 0xFFFE000000000000)
  {
    v38 = (unint64_t)v7 - 0x2000000000000;
    if ((unint64_t)v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v38 = v145;
    }
    v39 = (v38 >> 52) & 0x7FF;
    v40 = v39 - 1023;
    v41 = v38 >> (51 - (v38 >> 52));
    if (v39 > 0x433)
      LODWORD(v41) = v38 << ((v38 >> 52) - 51);
    if (v39 >= 0x41F)
      v42 = v41;
    else
      v42 = (((1 << ((v38 >> 52) + 1)) - 1) & v41) + (1 << ((v38 >> 52) + 1));
    if ((v38 & 0x8000000000000000) == 0)
      v43 = v42;
    else
      v43 = -v42;
    if (v40 <= 0x53)
      v9 = v43;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v169 = v10;
  v11 = this[7];
  if ((unint64_t)v10 < 0xFFFE000000000000)
  {
    v44 = (unint64_t)v10 - 0x2000000000000;
    if ((unint64_t)v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v44 = v146;
    }
    v45 = (v44 >> 52) & 0x7FF;
    v46 = v45 - 1023;
    v47 = v44 >> (51 - (v44 >> 52));
    if (v45 > 0x433)
      LODWORD(v47) = v44 << ((v44 >> 52) - 51);
    if (v45 >= 0x41F)
      v48 = v47;
    else
      v48 = (((1 << ((v44 >> 52) + 1)) - 1) & v47) + (1 << ((v44 >> 52) + 1));
    if ((v44 & 0x8000000000000000) == 0)
      v49 = v48;
    else
      v49 = -v48;
    if (v46 <= 0x53)
      v12 = v49;
    else
      v12 = 0;
  }
  else
  {
    v12 = (int)v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v158 = v12;
  v13 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v169 = v13;
  v14 = this[7];
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v50 = (unint64_t)v13 - 0x2000000000000;
    if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v50 = v147;
    }
    v51 = (v50 >> 52) & 0x7FF;
    v52 = v51 - 1023;
    v53 = v50 >> (51 - (v50 >> 52));
    if (v51 > 0x433)
      LODWORD(v53) = v50 << ((v50 >> 52) - 51);
    if (v51 >= 0x41F)
      v54 = v53;
    else
      v54 = (((1 << ((v50 >> 52) + 1)) - 1) & v53) + (1 << ((v50 >> 52) + 1));
    if ((v50 & 0x8000000000000000) == 0)
      v55 = v54;
    else
      v55 = -v54;
    if (v52 > 0x53)
      v55 = 0;
    v157 = v55;
  }
  else
  {
    v157 = (int)v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v15 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v169 = v15;
  v16 = this[7];
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v56 = (unint64_t)v15 - 0x2000000000000;
    if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v56 = v148;
    }
    v57 = (v56 >> 52) & 0x7FF;
    if ((v57 - 1023) <= 0x53)
    {
      v65 = v56 >> (51 - (v56 >> 52));
      if (v57 > 0x433)
        LODWORD(v65) = v56 << ((v56 >> 52) - 51);
      if (v57 >= 0x41F)
        v66 = v65;
      else
        v66 = (((1 << ((v56 >> 52) + 1)) - 1) & v65) + (1 << ((v56 >> 52) + 1));
      if ((v56 & 0x8000000000000000) == 0)
        v67 = v66;
      else
        v67 = -v66;
      v156 = v67;
    }
    else
    {
      v156 = 0;
    }
  }
  else
  {
    v156 = (int)v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v169 = v17;
  v18 = this[7];
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v58 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v58 = v149;
    }
    v59 = (v58 >> 52) & 0x7FF;
    if ((v59 - 1023) <= 0x53)
    {
      v68 = v58 >> (51 - (v58 >> 52));
      if (v59 > 0x433)
        LODWORD(v68) = v58 << ((v58 >> 52) - 51);
      if (v59 >= 0x41F)
        v69 = v68;
      else
        v69 = (((1 << ((v58 >> 52) + 1)) - 1) & v68) + (1 << ((v58 >> 52) + 1));
      if ((v58 & 0x8000000000000000) == 0)
        v70 = v69;
      else
        v70 = -v69;
      v155 = v70;
    }
    else
    {
      v155 = 0;
    }
  }
  else
  {
    v155 = (int)v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v154 = v9;
  v19 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 12);
  v169 = v19;
  v20 = this[7];
  if ((unint64_t)v19 < 0xFFFE000000000000)
  {
    v60 = (unint64_t)v19 - 0x2000000000000;
    if ((unint64_t)v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v60 = v150;
    }
    v61 = (v60 >> 52) & 0x7FF;
    if ((v61 - 1023) <= 0x53)
    {
      v71 = v60 >> (51 - (v60 >> 52));
      if (v61 > 0x433)
        LODWORD(v71) = v60 << ((v60 >> 52) - 51);
      if (v61 >= 0x41F)
        v72 = v71;
      else
        v72 = (((1 << ((v60 >> 52) + 1)) - 1) & v71) + (1 << ((v60 >> 52) + 1));
      if ((v60 & 0x8000000000000000) == 0)
        v21 = v72;
      else
        v21 = -v72;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = (int)v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  v153 = v21;
  v22 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 13);
  v169 = v22;
  v23 = this[7];
  if ((unint64_t)v22 < 0xFFFE000000000000)
  {
    v62 = (unint64_t)v22 - 0x2000000000000;
    if ((unint64_t)v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v169, (JSC::JSGlobalObject *)this);
      v62 = v151;
    }
    v63 = (v62 >> 52) & 0x7FF;
    if ((v63 - 1023) <= 0x53)
    {
      v73 = v62 >> (51 - (v62 >> 52));
      if (v63 > 0x433)
        LODWORD(v73) = v62 << ((v62 >> 52) - 51);
      if (v63 >= 0x41F)
        v74 = v73;
      else
        v74 = (((1 << ((v62 >> 52) + 1)) - 1) & v73) + (1 << ((v62 >> 52) + 1));
      if ((v62 & 0x8000000000000000) == 0)
        v75 = v74;
      else
        v75 = -v74;
      v152 = v75;
    }
    else
    {
      v152 = 0;
    }
  }
  else
  {
    v152 = (int)v22;
  }
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v163);
  if (v163[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 15), v162);
  if (v162[1])
    return 0;
  v25 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 16);
  if (((unint64_t)v25 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v160 = 0;
    v161 = 0;
    goto LABEL_43;
  }
  v160 = this[7];
  if (((unint64_t)v25 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v25 + 5) - 39 > 0xB
    || (*((_BYTE *)v25 + 40) & 6) != 0)
  {
    v26 = a3;
    v168 = 0;
  }
  else
  {
    v26 = a3;
    JSC::JSArrayBufferView::possiblySharedImpl(v25);
    if (v168)
    {
      v27 = 0;
      v169 = v168;
      v170 = 0;
      goto LABEL_36;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v160, 10, "srcData", 8, "WebGL2RenderingContext", 23, v24, "texSubImage3D", 14, "ArrayBufferView", 16);
  v27 = 1;
  v170 = 1;
  v28 = v168;
  v168 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v28;
  }
LABEL_36:
  LOBYTE(v166) = 0;
  LODWORD(v167) = -1;
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***, JSC::ArrayBufferView **))off_1E332F388[v27])(&v160, &v166, &v169);
  LODWORD(v167) = v27;
  if (v170 != -1)
  {
    ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F378[v170])(&v160, &v169);
    v27 = v167;
  }
  if (v27)
  {
    v29 = 1;
    v161 = 1;
    if (v27 == -1)
    {
      v30 = 0;
LABEL_120:
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F478[v29])(&v169, &v160);
      return v30;
    }
  }
  else
  {
    v31 = (uint64_t)v166;
    v166 = 0;
    v160 = (JSC::ArrayBufferView *)v31;
    v161 = 0;
  }
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***))off_1E332F378[v27])(&v169, &v166);
  v29 = v161;
  a3 = v26;
  if (!v161)
  {
LABEL_43:
    if ((unint64_t)(*((int *)a2 + 8) - 13) > 0xFFFFFFFFFFFFFFF3)
      v32 = 10;
    else
      v32 = *((_QWORD *)a2 + 17);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v32, &v168);
    if (HIDWORD(v168))
    {
      v30 = 0;
LABEL_118:
      v29 = v161;
      goto LABEL_119;
    }
    if (*((_BYTE *)a3 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v159 = v169;
      v76 = v164;
      v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v77
        && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
        && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v80, (JSC::CallFrame *)((char *)a3 + 8), v76, (uint64_t)&v169);
      }
      else
      {
        LOBYTE(v169) = 0;
        v171 = 0;
      }
      v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v81
        && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
        && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v84, (JSC::CallFrame *)((char *)a3 + 8), v154, (uint64_t)&v172);
      }
      else
      {
        LOBYTE(v172) = 0;
        v173 = 0;
      }
      v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v85
        && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
        && (v88 = *(WebCore::InspectorCanvasAgent **)(v87 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v88, (JSC::CallFrame *)((char *)a3 + 8), v158, (uint64_t)&v174);
      }
      else
      {
        LOBYTE(v174) = 0;
        v175 = 0;
      }
      v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v89
        && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
        && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v92, (JSC::CallFrame *)((char *)a3 + 8), v157, (uint64_t)&v176);
      }
      else
      {
        LOBYTE(v176) = 0;
        v177 = 0;
      }
      v93 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v93
        && (v95 = WebCore::InspectorInstrumentation::instrumentingAgents(v93, v94)) != 0
        && (v96 = *(WebCore::InspectorCanvasAgent **)(v95 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v96, (JSC::CallFrame *)((char *)a3 + 8), v156, (uint64_t)&v178);
      }
      else
      {
        LOBYTE(v178) = 0;
        v179 = 0;
      }
      v97 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v97
        && (v99 = WebCore::InspectorInstrumentation::instrumentingAgents(v97, v98)) != 0
        && (v100 = *(WebCore::InspectorCanvasAgent **)(v99 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v100, (JSC::CallFrame *)((char *)a3 + 8), v155, (uint64_t)&v180);
      }
      else
      {
        LOBYTE(v180) = 0;
        v181 = 0;
      }
      v101 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v101
        && (v103 = WebCore::InspectorInstrumentation::instrumentingAgents(v101, v102)) != 0
        && (v104 = *(WebCore::InspectorCanvasAgent **)(v103 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v104, (JSC::CallFrame *)((char *)a3 + 8), v153, (uint64_t)&v182);
      }
      else
      {
        LOBYTE(v182) = 0;
        v183 = 0;
      }
      v105 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v105
        && (v107 = WebCore::InspectorInstrumentation::instrumentingAgents(v105, v106)) != 0
        && (v108 = *(WebCore::InspectorCanvasAgent **)(v107 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v108, (JSC::CallFrame *)((char *)a3 + 8), v152, (uint64_t)&v184);
      }
      else
      {
        LOBYTE(v184) = 0;
        v185 = 0;
      }
      v109 = v163[0];
      v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v110
        && (v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111)) != 0
        && (v113 = *(WebCore::InspectorCanvasAgent **)(v112 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v113, (JSC::CallFrame *)((char *)a3 + 8), v109, (uint64_t)&v186);
      }
      else
      {
        LOBYTE(v186) = 0;
        v187 = 0;
      }
      v114 = v162[0];
      v115 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v115
        && (v117 = WebCore::InspectorInstrumentation::instrumentingAgents(v115, v116)) != 0
        && (v118 = *(WebCore::InspectorCanvasAgent **)(v117 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v118, (JSC::CallFrame *)((char *)a3 + 8), v114, (uint64_t)&v188);
      }
      else
      {
        LOBYTE(v188) = 0;
        v189 = 0;
      }
      if (!v161)
      {
        v119 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
        if (v119
          && (v121 = WebCore::InspectorInstrumentation::instrumentingAgents(v119, v120)) != 0
          && (v122 = *(_QWORD *)(v121 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v122, (JSC::CallFrame *)((char *)a3 + 8), (uint64_t *)&v160, (uint64_t)&v190);
        }
        else
        {
          LOBYTE(v190) = 0;
          v191 = 0;
        }
        v123 = v168;
        v124 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
        if (v124
          && (v126 = WebCore::InspectorInstrumentation::instrumentingAgents(v124, v125)) != 0
          && (v127 = *(WebCore::InspectorCanvasAgent **)(v126 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v127, (JSC::CallFrame *)((char *)a3 + 8), v123, (uint64_t)&v192);
        }
        else
        {
          LOBYTE(v192) = 0;
          v193 = 0;
        }
        v166 = &v169;
        v167 = 12;
        v128 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
        if (v128)
        {
          v130 = WebCore::InspectorInstrumentation::instrumentingAgents(v128, v129);
          if (v130)
          {
            v131 = *(_QWORD *)(v130 + 96);
            if (v131)
              WebCore::InspectorCanvasAgent::recordAction(v131, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v159, &v166);
          }
        }
        if (v193)
        {
          v132 = v192;
          v192 = 0;
          if (v132)
          {
            if (*v132 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v132;
          }
        }
        if (v191)
        {
          v133 = v190;
          v190 = 0;
          if (v133)
          {
            if (*v133 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v133;
          }
        }
        if (v189)
        {
          v134 = v188;
          v188 = 0;
          if (v134)
          {
            if (*v134 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v134;
          }
        }
        if (v187)
        {
          v135 = v186;
          v186 = 0;
          if (v135)
          {
            if (*v135 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v135;
          }
        }
        if (v185)
        {
          v136 = v184;
          v184 = 0;
          if (v136)
          {
            if (*v136 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v136;
          }
        }
        if (v183)
        {
          v137 = v182;
          v182 = 0;
          if (v137)
          {
            if (*v137 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v137;
          }
        }
        if (v181)
        {
          v138 = v180;
          v180 = 0;
          if (v138)
          {
            if (*v138 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v138;
          }
        }
        if (v179)
        {
          v139 = v178;
          v178 = 0;
          if (v139)
          {
            if (*v139 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v139;
          }
        }
        if (v177)
        {
          v140 = v176;
          v176 = 0;
          if (v140)
          {
            if (*v140 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v140;
          }
        }
        if (v175)
        {
          v141 = v174;
          v174 = 0;
          if (v141)
          {
            if (*v141 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v141;
          }
        }
        if (v173)
        {
          v142 = v172;
          v172 = 0;
          if (v142)
          {
            if (*v142 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v142;
          }
        }
        if (v171)
        {
          v143 = v169;
          v169 = 0;
          if (v143)
          {
            if (*(_DWORD *)v143 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v143;
          }
        }
        v144 = v159;
        v159 = 0;
        if (v144)
        {
          if (*(_DWORD *)v144 == 2)
            goto LABEL_296;
          *(_DWORD *)v144 -= 2;
        }
        goto LABEL_294;
      }
      goto LABEL_295;
    }
    while (v161)
    {
      do
      {
LABEL_295:
        v144 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_296:
        WTF::StringImpl::destroy(v144, v129);
LABEL_294:
        ;
      }
      while (v165);
    }
    v33 = v160;
    v160 = 0;
    v169 = v33;
    if (!*((_BYTE *)a3 + 364))
    {
      if (*((_QWORD *)a3 + 122))
        v34 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v34 = 0;
      if (v34)
      {
        v35 = "a buffer is bound to PIXEL_UNPACK_BUFFER";
        v36 = a3;
        v37 = 41;
      }
      else
      {
        if (!*((_BYTE *)a3 + 344) && !*((_BYTE *)a3 + 345))
        {
          WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a3, 3, v164, v154, 0, v155, v153, v152, 0, v163[0], v162[0], v158, v157, v156, &v169, 2, v168);
          v33 = v169;
          goto LABEL_114;
        }
        v35 = "FLIP_Y or PREMULTIPLY_ALPHA isn't allowed for uploading 3D textures";
        v36 = a3;
        v37 = 68;
      }
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v36, 1282, (uint64_t)"texSubImage3D", 14, (uint64_t)v35, v37);
    }
LABEL_114:
    v169 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v33;
    }
    v30 = 10;
    goto LABEL_118;
  }
  v30 = 0;
LABEL_119:
  if (v29 != -1)
    goto LABEL_120;
  return v30;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v6;
  unint64_t v7;
  JSC::VM *v8;
  int v9;
  unint64_t v10;
  JSC::VM *v11;
  int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  unint64_t v23;
  JSC::VM *v24;
  int v25;
  JSC::CallFrame *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  WebCore::InspectorInstrumentation *v72;
  WebCore::ScriptExecutionContext *v73;
  uint64_t v74;
  WebCore::InspectorCanvasAgent *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  JSValue v78;
  WTF::StringImpl *v79;
  WebCore::InspectorInstrumentation *v80;
  WebCore::ScriptExecutionContext *v81;
  uint64_t v82;
  WebCore::InspectorCanvasAgent *v83;
  WebCore::InspectorInstrumentation *v84;
  WebCore::ScriptExecutionContext *v85;
  uint64_t v86;
  WebCore::InspectorCanvasAgent *v87;
  WebCore::InspectorInstrumentation *v88;
  WebCore::ScriptExecutionContext *v89;
  uint64_t v90;
  WebCore::InspectorCanvasAgent *v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  WebCore::InspectorCanvasAgent *v95;
  WebCore::InspectorInstrumentation *v96;
  WebCore::ScriptExecutionContext *v97;
  uint64_t v98;
  WebCore::InspectorCanvasAgent *v99;
  WebCore::InspectorInstrumentation *v100;
  WebCore::ScriptExecutionContext *v101;
  uint64_t v102;
  WebCore::InspectorCanvasAgent *v103;
  WebCore::InspectorInstrumentation *v104;
  WebCore::ScriptExecutionContext *v105;
  uint64_t v106;
  WebCore::InspectorCanvasAgent *v107;
  unsigned int v108;
  WebCore::InspectorInstrumentation *v109;
  WebCore::ScriptExecutionContext *v110;
  uint64_t v111;
  WebCore::InspectorCanvasAgent *v112;
  unsigned int v113;
  WebCore::InspectorInstrumentation *v114;
  WebCore::ScriptExecutionContext *v115;
  uint64_t v116;
  WebCore::InspectorCanvasAgent *v117;
  WebCore::InspectorInstrumentation *v118;
  WebCore::ScriptExecutionContext *v119;
  uint64_t v120;
  uint64_t v121;
  WebCore::InspectorInstrumentation *v122;
  WebCore::ScriptExecutionContext *v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  WebCore *v145;
  JSC::VM *v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  WebCore::CanvasRenderingContext *v154;
  _DWORD v156[2];
  _DWORD v157[2];
  _DWORD v158[2];
  int v159[2];
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  int v163;
  WTF::StringImpl **v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int v167;
  int v168;
  _DWORD *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  _DWORD *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  _DWORD *v179;
  char v180;
  _DWORD *v181;
  char v182;
  _DWORD *v183;
  char v184;
  _DWORD *v185;
  char v186;
  _DWORD *v187;
  char v188;
  _DWORD *v189;
  char v190;
  _DWORD *v191;
  char v192;
  _DWORD *v193;
  char v194;
  char v195[8];
  uint64_t v196;
  unsigned int v197;
  int v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v158);
  if (v158[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v165 = (WTF::StringImpl *)v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v7 < 0xFFFE000000000000)
  {
    v36 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v36 = v138;
    }
    v37 = (v36 >> 52) & 0x7FF;
    v38 = v37 - 1023;
    v39 = v36 >> (51 - (v36 >> 52));
    if (v37 > 0x433)
      LODWORD(v39) = v36 << ((v36 >> 52) - 51);
    if (v37 >= 0x41F)
      v40 = v39;
    else
      v40 = (((1 << ((v36 >> 52) + 1)) - 1) & v39) + (1 << ((v36 >> 52) + 1));
    if ((v36 & 0x8000000000000000) == 0)
      v41 = v40;
    else
      v41 = -v40;
    if (v38 <= 0x53)
      v9 = v41;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v165 = (WTF::StringImpl *)v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v42 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v42 = v139;
    }
    v43 = (v42 >> 52) & 0x7FF;
    v44 = v43 - 1023;
    v45 = v42 >> (51 - (v42 >> 52));
    if (v43 > 0x433)
      LODWORD(v45) = v42 << ((v42 >> 52) - 51);
    if (v43 >= 0x41F)
      v46 = v45;
    else
      v46 = (((1 << ((v42 >> 52) + 1)) - 1) & v45) + (1 << ((v42 >> 52) + 1));
    if ((v42 & 0x8000000000000000) == 0)
      v47 = v46;
    else
      v47 = -v46;
    if (v44 <= 0x53)
      v12 = v47;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v165 = (WTF::StringImpl *)v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v48 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v48 = v140;
    }
    v49 = (v48 >> 52) & 0x7FF;
    v50 = v49 - 1023;
    v51 = v48 >> (51 - (v48 >> 52));
    if (v49 > 0x433)
      LODWORD(v51) = v48 << ((v48 >> 52) - 51);
    if (v49 >= 0x41F)
      v52 = v51;
    else
      v52 = (((1 << ((v48 >> 52) + 1)) - 1) & v51) + (1 << ((v48 >> 52) + 1));
    if ((v48 & 0x8000000000000000) == 0)
      v53 = v52;
    else
      v53 = -v52;
    if (v50 > 0x53)
      v53 = 0;
    v153 = v53;
  }
  else
  {
    v153 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v152 = v12;
  v15 = *((_QWORD *)a2 + 10);
  v165 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 < 0xFFFE000000000000)
  {
    v54 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v54 = v141;
    }
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v62 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v62) = v54 << ((v54 >> 52) - 51);
      if (v55 >= 0x41F)
        v63 = v62;
      else
        v63 = (((1 << ((v54 >> 52) + 1)) - 1) & v62) + (1 << ((v54 >> 52) + 1));
      if ((v54 & 0x8000000000000000) == 0)
        v17 = v63;
      else
        v17 = -v63;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v151 = v9;
  v18 = *((_QWORD *)a2 + 11);
  v165 = (WTF::StringImpl *)v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 < 0xFFFE000000000000)
  {
    v56 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v56 = v142;
    }
    v57 = (v56 >> 52) & 0x7FF;
    if ((v57 - 1023) <= 0x53)
    {
      v64 = v56 >> (51 - (v56 >> 52));
      if (v57 > 0x433)
        LODWORD(v64) = v56 << ((v56 >> 52) - 51);
      if (v57 >= 0x41F)
        v65 = v64;
      else
        v65 = (((1 << ((v56 >> 52) + 1)) - 1) & v64) + (1 << ((v56 >> 52) + 1));
      if ((v56 & 0x8000000000000000) == 0)
        v66 = v65;
      else
        v66 = -v65;
      v150 = v66;
    }
    else
    {
      v150 = 0;
    }
  }
  else
  {
    v150 = v18;
  }
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    return 0;
  v146 = v6;
  v20 = *((_QWORD *)a2 + 12);
  v165 = (WTF::StringImpl *)v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 < 0xFFFE000000000000)
  {
    v58 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v58 = v143;
    }
    v59 = (v58 >> 52) & 0x7FF;
    if ((v59 - 1023) <= 0x53)
    {
      v67 = v58 >> (51 - (v58 >> 52));
      if (v59 > 0x433)
        LODWORD(v67) = v58 << ((v58 >> 52) - 51);
      if (v59 >= 0x41F)
        v68 = v67;
      else
        v68 = (((1 << ((v58 >> 52) + 1)) - 1) & v67) + (1 << ((v58 >> 52) + 1));
      if ((v58 & 0x8000000000000000) == 0)
        v22 = v68;
      else
        v22 = -v68;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v148 = v22;
  v23 = *((_QWORD *)a2 + 13);
  v165 = (WTF::StringImpl *)v23;
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v23 < 0xFFFE000000000000)
  {
    v60 = v23 - 0x2000000000000;
    if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v165, this);
      v60 = v144;
    }
    v61 = (v60 >> 52) & 0x7FF;
    if ((v61 - 1023) <= 0x53)
    {
      v69 = v60 >> (51 - (v60 >> 52));
      if (v61 > 0x433)
        LODWORD(v69) = v60 << ((v60 >> 52) - 51);
      if (v61 >= 0x41F)
        v70 = v69;
      else
        v70 = (((1 << ((v60 >> 52) + 1)) - 1) & v69) + (1 << ((v60 >> 52) + 1));
      if ((v60 & 0x8000000000000000) == 0)
        v71 = v70;
      else
        v71 = -v70;
      v149 = v71;
    }
    else
    {
      v149 = 0;
    }
  }
  else
  {
    v149 = v23;
  }
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 14), v157);
  if (v157[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 15), v156);
  if (v156[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 16), (uint64_t)v195);
  v25 = v198;
  if (!v198)
  {
    v26 = a3;
    if (*((_BYTE *)a3 + 33))
    {
      v154 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v162 = v165;
      v147 = v158[0];
      v72 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v72
        && (v74 = WebCore::InspectorInstrumentation::instrumentingAgents(v72, v73)) != 0
        && (v75 = *(WebCore::InspectorCanvasAgent **)(v74 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v75, v154, v147, (uint64_t)&v165);
      }
      else
      {
        LOBYTE(v165) = 0;
        LOBYTE(v167) = 0;
      }
      v80 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v80
        && (v82 = WebCore::InspectorInstrumentation::instrumentingAgents(v80, v81)) != 0
        && (v83 = *(WebCore::InspectorCanvasAgent **)(v82 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v83, v154, v151, (uint64_t)&v169);
      }
      else
      {
        LOBYTE(v169) = 0;
        LOBYTE(v172) = 0;
      }
      v84 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v84
        && (v86 = WebCore::InspectorInstrumentation::instrumentingAgents(v84, v85)) != 0
        && (v87 = *(WebCore::InspectorCanvasAgent **)(v86 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v87, v154, v152, (uint64_t)&v174);
      }
      else
      {
        LOBYTE(v174) = 0;
        LOBYTE(v177) = 0;
      }
      v88 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v88
        && (v90 = WebCore::InspectorInstrumentation::instrumentingAgents(v88, v89)) != 0
        && (v91 = *(WebCore::InspectorCanvasAgent **)(v90 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v91, v154, v153, (uint64_t)&v179);
      }
      else
      {
        LOBYTE(v179) = 0;
        v180 = 0;
      }
      v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v92
        && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
        && (v95 = *(WebCore::InspectorCanvasAgent **)(v94 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v95, v154, v17, (uint64_t)&v181);
      }
      else
      {
        LOBYTE(v181) = 0;
        v182 = 0;
      }
      v96 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v96
        && (v98 = WebCore::InspectorInstrumentation::instrumentingAgents(v96, v97)) != 0
        && (v99 = *(WebCore::InspectorCanvasAgent **)(v98 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v99, v154, v150, (uint64_t)&v183);
      }
      else
      {
        LOBYTE(v183) = 0;
        v184 = 0;
      }
      v100 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v100
        && (v102 = WebCore::InspectorInstrumentation::instrumentingAgents(v100, v101)) != 0
        && (v103 = *(WebCore::InspectorCanvasAgent **)(v102 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v103, v154, v148, (uint64_t)&v185);
      }
      else
      {
        LOBYTE(v185) = 0;
        v186 = 0;
      }
      v104 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v104
        && (v106 = WebCore::InspectorInstrumentation::instrumentingAgents(v104, v105)) != 0
        && (v107 = *(WebCore::InspectorCanvasAgent **)(v106 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v107, v154, v149, (uint64_t)&v187);
      }
      else
      {
        LOBYTE(v187) = 0;
        v188 = 0;
      }
      v108 = v157[0];
      v109 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v109
        && (v111 = WebCore::InspectorInstrumentation::instrumentingAgents(v109, v110)) != 0
        && (v112 = *(WebCore::InspectorCanvasAgent **)(v111 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v112, v154, v108, (uint64_t)&v189);
      }
      else
      {
        LOBYTE(v189) = 0;
        v190 = 0;
      }
      v113 = v156[0];
      v114 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v114
        && (v116 = WebCore::InspectorInstrumentation::instrumentingAgents(v114, v115)) != 0
        && (v117 = *(WebCore::InspectorCanvasAgent **)(v116 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v117, v154, v113, (uint64_t)&v191);
      }
      else
      {
        LOBYTE(v191) = 0;
        v192 = 0;
      }
      if (v198)
        goto LABEL_286;
      v118 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v118
        && (v120 = WebCore::InspectorInstrumentation::instrumentingAgents(v118, v119)) != 0
        && (v121 = *(_QWORD *)(v120 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v121, (uint64_t)v154, (uint64_t)&v196);
      }
      else
      {
        LOBYTE(v193) = 0;
        v194 = 0;
      }
      *(_QWORD *)v159 = &v165;
      v160 = (WTF::StringImpl *)11;
      v122 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v122)
      {
        v124 = WebCore::InspectorInstrumentation::instrumentingAgents(v122, v123);
        if (v124)
        {
          v125 = *(_QWORD *)(v124 + 96);
          if (v125)
            WebCore::InspectorCanvasAgent::recordAction(v125, v154, (const WTF::StringImpl *)&v162, v159);
        }
      }
      if (v194)
      {
        v126 = v193;
        v193 = 0;
        if (v126)
        {
          if (*v126 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v126;
        }
      }
      if (v192)
      {
        v127 = v191;
        v191 = 0;
        if (v127)
        {
          if (*v127 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v127;
        }
      }
      if (v190)
      {
        v128 = v189;
        v189 = 0;
        if (v128)
        {
          if (*v128 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v128;
        }
      }
      if (v188)
      {
        v129 = v187;
        v187 = 0;
        if (v129)
        {
          if (*v129 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v129;
        }
      }
      if (v186)
      {
        v130 = v185;
        v185 = 0;
        if (v130)
        {
          if (*v130 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v130;
        }
      }
      if (v184)
      {
        v131 = v183;
        v183 = 0;
        if (v131)
        {
          if (*v131 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v131;
        }
      }
      if (v182)
      {
        v132 = v181;
        v181 = 0;
        if (v132)
        {
          if (*v132 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v132;
        }
      }
      if (v180)
      {
        v133 = v179;
        v179 = 0;
        if (v133)
        {
          if (*v133 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v133;
        }
      }
      if ((_BYTE)v177)
      {
        v134 = v174;
        v174 = 0;
        if (v134)
        {
          if (*v134 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v134;
        }
      }
      if ((_BYTE)v172)
      {
        v135 = v169;
        v169 = 0;
        if (v135)
        {
          if (*v135 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v135;
        }
      }
      if ((_BYTE)v167)
      {
        v136 = v165;
        v165 = 0;
        if (v136)
        {
          if (*(_DWORD *)v136 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v136;
        }
      }
      v137 = v162;
      v162 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
          WTF::StringImpl::destroy(v137, v123);
        else
          *(_DWORD *)v137 -= 2;
      }
      v26 = a3;
    }
    v145 = this;
    if (!v198)
    {
      v27 = v158[0];
      v28 = v157[0];
      v29 = v156[0];
      LOBYTE(v162) = 0;
      v163 = -1;
      v30 = v197;
      if (v197 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E332F4C0[v197])(&v165, &v162, &v196);
        v26 = a3;
        v163 = v30;
      }
      if (*((_BYTE *)v26 + 364))
        goto LABEL_36;
      if (*((_QWORD *)v26 + 122))
        v31 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v31 = 0;
      if (v31)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v26, 1282, (uint64_t)"texSubImage3D", 14, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
LABEL_36:
        *(_QWORD *)v159 = 0;
        v160 = 0;
        v161 = 0;
        goto LABEL_37;
      }
      v34 = *(_DWORD **)((char *)v26 + 332);
      v165 = v26;
      v35 = *((_DWORD *)v26 + 82);
      LODWORD(v166) = 3;
      HIDWORD(v166) = v27;
      v167 = v151;
      v168 = 0;
      LODWORD(v169) = 0;
      HIDWORD(v169) = v28;
      v170 = v29;
      v171 = v152;
      v172 = v153;
      v173 = v17;
      v174 = v34;
      v175 = v150;
      v176 = v148;
      v177 = v149;
      v178 = v35;
      if ((_DWORD)v30 != -1)
      {
        v164 = &v165;
        ((void (*)(int *__return_ptr, WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v30])(v159, &v164, &v162);
LABEL_37:
        if (v163 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F488[v163])(&v165, &v162);
        if (!(_BYTE)v161)
        {
          v32 = 10;
LABEL_41:
          v25 = v198;
          goto LABEL_42;
        }
        v76 = (WTF::StringImpl *)LOBYTE(v159[0]);
        LOBYTE(v165) = v159[0];
        v77 = v160;
        v160 = 0;
        v166 = v77;
        if (!*((_QWORD *)v146 + 2))
        {
          v78.super.isa = (Class)WebCore::createDOMException(v145, (JSC::JSGlobalObject *)LOBYTE(v159[0]), (JSC::JSGlobalObject *)&v166);
          JSC::VM::throwException(v146, v145, v78);
          v77 = v166;
        }
        v166 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 == 2)
            WTF::StringImpl::destroy(v77, v76);
          else
            *(_DWORD *)v77 -= 2;
        }
        if ((_BYTE)v161)
        {
          v79 = v160;
          v160 = 0;
          if (v79)
          {
            if (*(_DWORD *)v79 != 2)
            {
              v32 = 0;
              *(_DWORD *)v79 -= 2;
              goto LABEL_41;
            }
            WTF::StringImpl::destroy(v79, v76);
          }
        }
        v32 = 0;
        goto LABEL_41;
      }
    }
LABEL_286:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v32 = 0;
LABEL_42:
  if (v25 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F4F8[v25])(&v165, &v196);
  return v32;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  uint64_t v25;
  JSC::CallFrame *v26;
  JSC::VM *v27;
  double v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  JSC::CallFrame *v68;
  unsigned int v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  unsigned int v102;
  WebCore::InspectorInstrumentation *v103;
  WebCore::ScriptExecutionContext *v104;
  uint64_t v105;
  WebCore::InspectorCanvasAgent *v106;
  unsigned int v107;
  WebCore::InspectorInstrumentation *v108;
  WebCore::ScriptExecutionContext *v109;
  uint64_t v110;
  WebCore::InspectorCanvasAgent *v111;
  WebCore::InspectorInstrumentation *v112;
  WebCore::ScriptExecutionContext *v113;
  uint64_t v114;
  WebCore::InspectorCanvasAgent *v115;
  WebCore::InspectorInstrumentation *v116;
  WebCore::ScriptExecutionContext *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  _DWORD *v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  WTF::StringImpl *v131;
  double v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  WebCore::CanvasRenderingContext *v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  _QWORD v150[2];
  WTF::StringImpl *v151;
  _DWORD v152[2];
  unsigned int v153[2];
  unsigned int v154[2];
  _QWORD v155[2];
  char v156;
  _DWORD *v157;
  char v158;
  _DWORD *v159;
  char v160;
  _DWORD *v161;
  char v162;
  _DWORD *v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  _DWORD *v171;
  char v172;
  _DWORD *v173;
  char v174;
  _DWORD *v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v154);
  if (v154[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v155[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v30 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v30 = v133;
    }
    v31 = (v30 >> 52) & 0x7FF;
    v32 = v31 - 1023;
    v33 = v30 >> (51 - (v30 >> 52));
    if (v31 > 0x433)
      LODWORD(v33) = v30 << ((v30 >> 52) - 51);
    if (v31 >= 0x41F)
      v34 = v33;
    else
      v34 = (((1 << ((v30 >> 52) + 1)) - 1) & v33) + (1 << ((v30 >> 52) + 1));
    if ((v30 & 0x8000000000000000) == 0)
      v35 = v34;
    else
      v35 = -v34;
    if (v32 <= 0x53)
      v8 = v35;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v155[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v36 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v36 = v134;
    }
    v37 = (v36 >> 52) & 0x7FF;
    v38 = v37 - 1023;
    v39 = v36 >> (51 - (v36 >> 52));
    if (v37 > 0x433)
      LODWORD(v39) = v36 << ((v36 >> 52) - 51);
    if (v37 >= 0x41F)
      v40 = v39;
    else
      v40 = (((1 << ((v36 >> 52) + 1)) - 1) & v39) + (1 << ((v36 >> 52) + 1));
    if ((v36 & 0x8000000000000000) == 0)
      v41 = v40;
    else
      v41 = -v40;
    if (v38 <= 0x53)
      v11 = v41;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v155[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v42 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v42 = v135;
    }
    v43 = (v42 >> 52) & 0x7FF;
    v44 = v43 - 1023;
    v45 = v42 >> (51 - (v42 >> 52));
    if (v43 > 0x433)
      LODWORD(v45) = v42 << ((v42 >> 52) - 51);
    if (v43 >= 0x41F)
      v46 = v45;
    else
      v46 = (((1 << ((v42 >> 52) + 1)) - 1) & v45) + (1 << ((v42 >> 52) + 1));
    if ((v42 & 0x8000000000000000) == 0)
      v47 = v46;
    else
      v47 = -v46;
    if (v44 <= 0x53)
      v14 = v47;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v148 = v14;
  v15 = *((_QWORD *)a2 + 10);
  v155[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v48 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v48 = v136;
    }
    v49 = (v48 >> 52) & 0x7FF;
    if ((v49 - 1023) <= 0x53)
    {
      v57 = v48 >> (51 - (v48 >> 52));
      if (v49 > 0x433)
        LODWORD(v57) = v48 << ((v48 >> 52) - 51);
      if (v49 >= 0x41F)
        v58 = v57;
      else
        v58 = (((1 << ((v48 >> 52) + 1)) - 1) & v57) + (1 << ((v48 >> 52) + 1));
      if ((v48 & 0x8000000000000000) == 0)
        v59 = v58;
      else
        v59 = -v58;
      v147 = v59;
    }
    else
    {
      v147 = 0;
    }
  }
  else
  {
    v147 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v146 = v11;
  v17 = *((_QWORD *)a2 + 11);
  v155[0] = v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v50 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v50 = v137;
    }
    v51 = (v50 >> 52) & 0x7FF;
    if ((v51 - 1023) <= 0x53)
    {
      v60 = v50 >> (51 - (v50 >> 52));
      if (v51 > 0x433)
        LODWORD(v60) = v50 << ((v50 >> 52) - 51);
      if (v51 >= 0x41F)
        v61 = v60;
      else
        v61 = (((1 << ((v50 >> 52) + 1)) - 1) & v60) + (1 << ((v50 >> 52) + 1));
      if ((v50 & 0x8000000000000000) == 0)
        v62 = v61;
      else
        v62 = -v61;
      v145 = v62;
    }
    else
    {
      v145 = 0;
    }
  }
  else
  {
    v145 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v144 = v8;
  v19 = *((_QWORD *)a2 + 12);
  v155[0] = v19;
  v20 = this[7];
  if (v19 < 0xFFFE000000000000)
  {
    v52 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v52 = v138;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v63 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v63) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v64 = v63;
      else
        v64 = (((1 << ((v52 >> 52) + 1)) - 1) & v63) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v21 = v64;
      else
        v21 = -v64;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  v143 = v21;
  v22 = *((_QWORD *)a2 + 13);
  v155[0] = v22;
  v23 = this[7];
  if (v22 < 0xFFFE000000000000)
  {
    v54 = v22 - 0x2000000000000;
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v54 = v139;
    }
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v65 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v65) = v54 << ((v54 >> 52) - 51);
      if (v55 >= 0x41F)
        v66 = v65;
      else
        v66 = (((1 << ((v54 >> 52) + 1)) - 1) & v65) + (1 << ((v54 >> 52) + 1));
      if ((v54 & 0x8000000000000000) == 0)
        v67 = v66;
      else
        v67 = -v66;
      v142 = v67;
    }
    else
    {
      v142 = 0;
    }
  }
  else
  {
    v142 = v22;
  }
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v153);
  if (v153[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 15), v152);
  if (v152[1])
    return 0;
  v24 = *((_QWORD *)a2 + 16);
  v155[0] = v24;
  if (v24 < 0xFFFE000000000000)
  {
    v27 = this[7];
    if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v28 = v132;
    }
    else
    {
      *(_QWORD *)&v28 = v24 - 0x2000000000000;
    }
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      return 0;
    v26 = a3;
    if (fabs(v28) == INFINITY)
    {
      v25 = 0;
    }
    else
    {
      v29 = fmod(trunc(v28), 1.84467441e19);
      if (v29 >= 0.0)
        v25 = (unint64_t)v29;
      else
        v25 = -(uint64_t)(unint64_t)-v29;
    }
  }
  else
  {
    v25 = (int)v24;
    v26 = a3;
  }
  if (*((_BYTE *)v26 + 33))
  {
    v141 = (JSC::CallFrame *)((char *)v26 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v151 = (WTF::StringImpl *)v155[0];
    v68 = v26;
    v69 = v154[0];
    v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v68 + 5) + 144))(*((_QWORD *)v68 + 5));
    if (v70
      && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
      && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v73, v141, v69, (uint64_t)v155);
    }
    else
    {
      LOBYTE(v155[0]) = 0;
      v156 = 0;
    }
    v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v74
      && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
      && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v77, v141, v144, (uint64_t)&v157);
    }
    else
    {
      LOBYTE(v157) = 0;
      v158 = 0;
    }
    v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v78
      && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
      && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v81, v141, v146, (uint64_t)&v159);
    }
    else
    {
      LOBYTE(v159) = 0;
      v160 = 0;
    }
    v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v82
      && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
      && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v85, v141, v148, (uint64_t)&v161);
    }
    else
    {
      LOBYTE(v161) = 0;
      v162 = 0;
    }
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v86
      && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
      && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v89, v141, v147, (uint64_t)&v163);
    }
    else
    {
      LOBYTE(v163) = 0;
      v164 = 0;
    }
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v141, v145, (uint64_t)&v165);
    }
    else
    {
      LOBYTE(v165) = 0;
      v166 = 0;
    }
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v141, v143, (uint64_t)&v167);
    }
    else
    {
      LOBYTE(v167) = 0;
      v168 = 0;
    }
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v98
      && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
      && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v101, v141, v142, (uint64_t)&v169);
    }
    else
    {
      LOBYTE(v169) = 0;
      v170 = 0;
    }
    v102 = v153[0];
    v103 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v103
      && (v105 = WebCore::InspectorInstrumentation::instrumentingAgents(v103, v104)) != 0
      && (v106 = *(WebCore::InspectorCanvasAgent **)(v105 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v106, v141, v102, (uint64_t)&v171);
    }
    else
    {
      LOBYTE(v171) = 0;
      v172 = 0;
    }
    v107 = v152[0];
    v108 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v108
      && (v110 = WebCore::InspectorInstrumentation::instrumentingAgents(v108, v109)) != 0
      && (v111 = *(WebCore::InspectorCanvasAgent **)(v110 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v111, v141, v107, (uint64_t)&v173);
    }
    else
    {
      LOBYTE(v173) = 0;
      v174 = 0;
    }
    v26 = a3;
    v112 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v112
      && (v114 = WebCore::InspectorInstrumentation::instrumentingAgents(v112, v113)) != 0
      && (v115 = *(WebCore::InspectorCanvasAgent **)(v114 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v115, v141, v25, (uint64_t)&v175);
    }
    else
    {
      LOBYTE(v175) = 0;
      v176 = 0;
    }
    v150[0] = v155;
    v150[1] = 11;
    v116 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v116)
    {
      v118 = WebCore::InspectorInstrumentation::instrumentingAgents(v116, v117);
      if (v118)
      {
        v119 = *(_QWORD *)(v118 + 96);
        if (v119)
          WebCore::InspectorCanvasAgent::recordAction(v119, v141, (const WTF::StringImpl *)&v151, v150);
      }
    }
    if (v176)
    {
      v120 = v175;
      v175 = 0;
      if (v120)
      {
        if (*v120 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v120;
      }
    }
    if (v174)
    {
      v121 = v173;
      v173 = 0;
      if (v121)
      {
        if (*v121 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v121;
      }
    }
    if (v172)
    {
      v122 = v171;
      v171 = 0;
      if (v122)
      {
        if (*v122 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v122;
      }
    }
    if (v170)
    {
      v123 = v169;
      v169 = 0;
      if (v123)
      {
        if (*v123 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v123;
      }
    }
    if (v168)
    {
      v124 = v167;
      v167 = 0;
      if (v124)
      {
        if (*v124 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v124;
      }
    }
    if (v166)
    {
      v125 = v165;
      v165 = 0;
      if (v125)
      {
        if (*v125 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v125;
      }
    }
    if (v164)
    {
      v126 = v163;
      v163 = 0;
      if (v126)
      {
        if (*v126 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v126;
      }
    }
    if (v162)
    {
      v127 = v161;
      v161 = 0;
      if (v127)
      {
        if (*v127 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v127;
      }
    }
    if (v160)
    {
      v128 = v159;
      v159 = 0;
      if (v128)
      {
        if (*v128 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v128;
      }
    }
    if (v158)
    {
      v129 = v157;
      v157 = 0;
      if (v129)
      {
        if (*v129 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v129;
      }
    }
    if (v156)
    {
      v130 = (_DWORD *)v155[0];
      v155[0] = 0;
      if (v130)
      {
        if (*v130 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v130;
      }
    }
    v131 = v151;
    v151 = 0;
    if (v131)
    {
      if (*(_DWORD *)v131 == 2)
        WTF::StringImpl::destroy(v131, v117);
      else
        *(_DWORD *)v131 -= 2;
    }
  }
  LODWORD(v140) = v152[0];
  WebCore::WebGL2RenderingContext::texSubImage3D(v26, v154[0], v144, v146, v148, v147, v145, v143, __SPAIR64__(v153[0], v142), v140, v25);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D2Body(JSC::ArrayBufferView **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  JSC::VM *v12;
  unsigned int v13;
  unint64_t v14;
  JSC::VM *v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  JSC::ArrayBufferView *v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  unsigned int v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  WebCore::InspectorCanvasAgent *v71;
  WebCore::InspectorInstrumentation *v72;
  WebCore::ScriptExecutionContext *v73;
  uint64_t v74;
  WebCore::InspectorCanvasAgent *v75;
  WebCore::InspectorInstrumentation *v76;
  WebCore::ScriptExecutionContext *v77;
  uint64_t v78;
  WebCore::InspectorCanvasAgent *v79;
  WebCore::InspectorInstrumentation *v80;
  WebCore::ScriptExecutionContext *v81;
  uint64_t v82;
  WebCore::InspectorCanvasAgent *v83;
  WebCore::InspectorInstrumentation *v84;
  WebCore::ScriptExecutionContext *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  unsigned int v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  WebCore *v118;
  JSC::JSGlobalObject *v119;
  JSC::CallFrame *v120;
  WebCore::JSWebGL2RenderingContext *v121;
  WebCore::CanvasRenderingContext *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  _QWORD v128[2];
  WTF::StringImpl *v129;
  unsigned int v130[2];
  unsigned int v131[2];
  JSC::ArrayBufferView *v132;
  int v133;
  unsigned int v134[2];
  unsigned int v135[2];
  WTF::StringImpl *v136;
  int v137;
  char v138;
  _DWORD *v139;
  char v140;
  _DWORD *v141;
  char v142;
  _DWORD *v143;
  char v144;
  _DWORD *v145;
  char v146;
  _DWORD *v147;
  char v148;
  _DWORD *v149;
  char v150;
  _DWORD *v151;
  char v152;
  _DWORD *v153;
  char v154;
  _DWORD *v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v135);
  if (v135[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v136 = (WTF::StringImpl *)v7;
  v8 = this[7];
  if (v7 < 0xFFFE000000000000)
  {
    v28 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v28 = v113;
    }
    v29 = (v28 >> 52) & 0x7FF;
    v30 = v29 - 1023;
    v31 = v28 >> (51 - (v28 >> 52));
    if (v29 > 0x433)
      LODWORD(v31) = v28 << ((v28 >> 52) - 51);
    if (v29 >= 0x41F)
      v32 = v31;
    else
      v32 = (((1 << ((v28 >> 52) + 1)) - 1) & v31) + (1 << ((v28 >> 52) + 1));
    if ((v28 & 0x8000000000000000) == 0)
      v33 = v32;
    else
      v33 = -v32;
    if (v30 <= 0x53)
      v9 = v33;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v134);
  if (v134[1])
    return 0;
  v11 = *((_QWORD *)a2 + 9);
  v136 = (WTF::StringImpl *)v11;
  v12 = this[7];
  if (v11 < 0xFFFE000000000000)
  {
    v34 = v11 - 0x2000000000000;
    if (v11 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v34 = v114;
    }
    v35 = (v34 >> 52) & 0x7FF;
    v36 = v35 - 1023;
    v37 = v34 >> (51 - (v34 >> 52));
    if (v35 > 0x433)
      LODWORD(v37) = v34 << ((v34 >> 52) - 51);
    if (v35 >= 0x41F)
      v38 = v37;
    else
      v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
    if ((v34 & 0x8000000000000000) == 0)
      v39 = v38;
    else
      v39 = -v38;
    if (v36 <= 0x53)
      v13 = v39;
    else
      v13 = 0;
  }
  else
  {
    v13 = v11;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    return 0;
  v127 = v13;
  v14 = *((_QWORD *)a2 + 10);
  v136 = (WTF::StringImpl *)v14;
  v15 = this[7];
  if (v14 < 0xFFFE000000000000)
  {
    v40 = v14 - 0x2000000000000;
    if (v14 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v40 = v115;
    }
    v41 = (v40 >> 52) & 0x7FF;
    if ((v41 - 1023) <= 0x53)
    {
      v46 = v40 >> (51 - (v40 >> 52));
      if (v41 > 0x433)
        LODWORD(v46) = v40 << ((v40 >> 52) - 51);
      if (v41 >= 0x41F)
        v47 = v46;
      else
        v47 = (((1 << ((v40 >> 52) + 1)) - 1) & v46) + (1 << ((v40 >> 52) + 1));
      if ((v40 & 0x8000000000000000) == 0)
        v48 = v47;
      else
        v48 = -v47;
      v126 = v48;
    }
    else
    {
      v126 = 0;
    }
  }
  else
  {
    v126 = v14;
  }
  if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
    return 0;
  v125 = v9;
  v16 = *((_QWORD *)a2 + 11);
  v136 = (WTF::StringImpl *)v16;
  v17 = this[7];
  if (v16 < 0xFFFE000000000000)
  {
    v42 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v42 = v116;
    }
    v43 = (v42 >> 52) & 0x7FF;
    if ((v43 - 1023) <= 0x53)
    {
      v49 = v42 >> (51 - (v42 >> 52));
      if (v43 > 0x433)
        LODWORD(v49) = v42 << ((v42 >> 52) - 51);
      if (v43 >= 0x41F)
        v50 = v49;
      else
        v50 = (((1 << ((v42 >> 52) + 1)) - 1) & v49) + (1 << ((v42 >> 52) + 1));
      if ((v42 & 0x8000000000000000) == 0)
        v18 = v50;
      else
        v18 = -v50;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  v124 = v18;
  v19 = *((_QWORD *)a2 + 12);
  v136 = (WTF::StringImpl *)v19;
  v20 = this[7];
  if (v19 < 0xFFFE000000000000)
  {
    v44 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v44 = v117;
    }
    v45 = (v44 >> 52) & 0x7FF;
    if ((v45 - 1023) <= 0x53)
    {
      v51 = v44 >> (51 - (v44 >> 52));
      if (v45 > 0x433)
        LODWORD(v51) = v44 << ((v44 >> 52) - 51);
      if (v45 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v44 >> 52) + 1)) - 1) & v51) + (1 << ((v44 >> 52) + 1));
      if ((v44 & 0x8000000000000000) == 0)
        v53 = v52;
      else
        v53 = -v52;
      v123 = v53;
    }
    else
    {
      v123 = 0;
    }
  }
  else
  {
    v123 = v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  v21 = *((_QWORD *)a2 + 13);
  v132 = this[7];
  if ((v21 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v21 + 5) - 39 > 0xB
    || (*(_BYTE *)(v21 + 40) & 6) != 0)
  {
    v128[0] = 0;
LABEL_22:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v132, 7, "srcData", 8, "WebGL2RenderingContext", 23, v10, "compressedTexImage3D", 21, "ArrayBufferView", 16);
    v22 = 1;
    v137 = 1;
    v128[0] = 0;
    goto LABEL_25;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v21);
  if (!v128[0])
    goto LABEL_22;
  v22 = 0;
  v136 = (WTF::StringImpl *)v128[0];
  v137 = 0;
LABEL_25:
  LOBYTE(v132) = 0;
  v133 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v22])(v128, &v132, &v136);
  v133 = v22;
  if (v137 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v137])(v128, &v136);
    v22 = v133;
  }
  if (v22)
  {
    v26 = 0;
LABEL_42:
    if (v22 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v22])(&v136, &v132);
    return v26;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 10) > 0xFFFFFFFFFFFFFFF6)
    v23 = 10;
  else
    v23 = *((_QWORD *)a2 + 14);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v23, v131);
  if (v131[1])
  {
    v26 = 0;
LABEL_41:
    v22 = v133;
    goto LABEL_42;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 11) > 0xFFFFFFFFFFFFFFF5)
    v24 = 10;
  else
    v24 = *((_QWORD *)a2 + 15);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v24, v130);
  if (v130[1])
  {
    v26 = 0;
    goto LABEL_41;
  }
  if (*((_BYTE *)a3 + 33))
  {
    v122 = (JSC::CallFrame *)((char *)a3 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v129 = v136;
    v54 = v135[0];
    v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v55
      && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
      && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v58, v122, v54, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v138 = 0;
    }
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v59
      && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
      && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v62, v122, v125, (uint64_t)&v139);
    }
    else
    {
      LOBYTE(v139) = 0;
      v140 = 0;
    }
    v63 = v134[0];
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, v122, v63, (uint64_t)&v141);
    }
    else
    {
      LOBYTE(v141) = 0;
      v142 = 0;
    }
    v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v68
      && (v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69)) != 0
      && (v71 = *(WebCore::InspectorCanvasAgent **)(v70 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v71, v122, v127, (uint64_t)&v143);
    }
    else
    {
      LOBYTE(v143) = 0;
      v144 = 0;
    }
    v72 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v72
      && (v74 = WebCore::InspectorInstrumentation::instrumentingAgents(v72, v73)) != 0
      && (v75 = *(WebCore::InspectorCanvasAgent **)(v74 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v75, v122, v126, (uint64_t)&v145);
    }
    else
    {
      LOBYTE(v145) = 0;
      v146 = 0;
    }
    v76 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v76
      && (v78 = WebCore::InspectorInstrumentation::instrumentingAgents(v76, v77)) != 0
      && (v79 = *(WebCore::InspectorCanvasAgent **)(v78 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v79, v122, v124, (uint64_t)&v147);
    }
    else
    {
      LOBYTE(v147) = 0;
      v148 = 0;
    }
    v80 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v80
      && (v82 = WebCore::InspectorInstrumentation::instrumentingAgents(v80, v81)) != 0
      && (v83 = *(WebCore::InspectorCanvasAgent **)(v82 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v83, v122, v123, (uint64_t)&v149);
    }
    else
    {
      LOBYTE(v149) = 0;
      v150 = 0;
    }
    if (v133)
      goto LABEL_234;
    v84 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v84
      && (v86 = WebCore::InspectorInstrumentation::instrumentingAgents(v84, v85)) != 0
      && (v87 = *(_QWORD *)(v86 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v87, (uint64_t)v122, (uint64_t)&v151);
    }
    else
    {
      LOBYTE(v151) = 0;
      v152 = 0;
    }
    v88 = v131[0];
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v89
      && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
      && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v92, v122, v88, (uint64_t)&v153);
    }
    else
    {
      LOBYTE(v153) = 0;
      v154 = 0;
    }
    v93 = v130[0];
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v122, v93, (uint64_t)&v155);
    }
    else
    {
      LOBYTE(v155) = 0;
      v156 = 0;
    }
    v128[0] = &v136;
    v128[1] = 10;
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v98)
    {
      v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99);
      if (v100)
      {
        v101 = *(_QWORD *)(v100 + 96);
        if (v101)
          WebCore::InspectorCanvasAgent::recordAction(v101, v122, (const WTF::StringImpl *)&v129, v128);
      }
    }
    if (v156)
    {
      v102 = v155;
      v155 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v154)
    {
      v103 = v153;
      v153 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v152)
    {
      v104 = v151;
      v151 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v150)
    {
      v105 = v149;
      v149 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v148)
    {
      v106 = v147;
      v147 = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    if (v146)
    {
      v107 = v145;
      v145 = 0;
      if (v107)
      {
        if (*v107 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v107;
      }
    }
    if (v144)
    {
      v108 = v143;
      v143 = 0;
      if (v108)
      {
        if (*v108 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v108;
      }
    }
    if (v142)
    {
      v109 = v141;
      v141 = 0;
      if (v109)
      {
        if (*v109 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v109;
      }
    }
    if (v140)
    {
      v110 = v139;
      v139 = 0;
      if (v110)
      {
        if (*v110 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v110;
      }
    }
    if (v138)
    {
      v111 = v136;
      v136 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v111;
      }
    }
    v112 = v129;
    v129 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
        WTF::StringImpl::destroy(v112, v99);
      else
        *(_DWORD *)v112 -= 2;
    }
  }
  if (!v133)
  {
    v25 = v132;
    v132 = 0;
    WebCore::WebGL2RenderingContext::compressedTexImage3D(a3, v135[0], v125, v134[0], v127, v126, v124, v123, v25, v131[0], v130[0]);
    if (*(_DWORD *)v25 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v25;
    v26 = 10;
    goto LABEL_41;
  }
LABEL_234:
  v118 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D1Body(v118, v119, v120, v121);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  unint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  double v27;
  JSC::CallFrame *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  JSC::VM *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  JSC::VM *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  JSC::CallFrame *v88;
  unsigned int v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  unsigned int v98;
  WebCore::InspectorInstrumentation *v99;
  WebCore::ScriptExecutionContext *v100;
  uint64_t v101;
  WebCore::InspectorCanvasAgent *v102;
  WebCore::InspectorInstrumentation *v103;
  WebCore::ScriptExecutionContext *v104;
  uint64_t v105;
  WebCore::InspectorCanvasAgent *v106;
  WebCore::InspectorInstrumentation *v107;
  WebCore::ScriptExecutionContext *v108;
  uint64_t v109;
  WebCore::InspectorCanvasAgent *v110;
  WebCore::InspectorInstrumentation *v111;
  WebCore::ScriptExecutionContext *v112;
  uint64_t v113;
  WebCore::InspectorCanvasAgent *v114;
  WebCore::InspectorInstrumentation *v115;
  WebCore::ScriptExecutionContext *v116;
  uint64_t v117;
  WebCore::InspectorCanvasAgent *v118;
  WebCore::InspectorInstrumentation *v119;
  WebCore::ScriptExecutionContext *v120;
  uint64_t v121;
  WebCore::InspectorCanvasAgent *v122;
  WebCore::InspectorInstrumentation *v123;
  WebCore::ScriptExecutionContext *v124;
  uint64_t v125;
  WebCore::InspectorCanvasAgent *v126;
  WebCore::InspectorInstrumentation *v127;
  WebCore::ScriptExecutionContext *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  WTF::StringImpl *v140;
  JSC::VM *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  JSC::JSGlobalObject *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  WebCore::CanvasRenderingContext *v175;
  int v176;
  int v177;
  unsigned int v178;
  _QWORD v180[2];
  WTF::StringImpl *v181;
  unsigned int v182[2];
  unsigned int v183[2];
  _QWORD v184[2];
  char v185;
  _DWORD *v186;
  char v187;
  _DWORD *v188;
  char v189;
  _DWORD *v190;
  char v191;
  _DWORD *v192;
  char v193;
  _DWORD *v194;
  char v195;
  _DWORD *v196;
  char v197;
  _DWORD *v198;
  char v199;
  _DWORD *v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v183);
  if (v183[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v184[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v34 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v34 = v153;
    }
    v35 = (v34 >> 52) & 0x7FF;
    v36 = v35 - 1023;
    v37 = v34 >> (51 - (v34 >> 52));
    if (v35 > 0x433)
      LODWORD(v37) = v34 << ((v34 >> 52) - 51);
    if (v35 >= 0x41F)
      v38 = v37;
    else
      v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
    if ((v34 & 0x8000000000000000) == 0)
      v39 = v38;
    else
      v39 = -v38;
    if (v36 <= 0x53)
      v8 = v39;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v182);
  if (v182[1])
    return 0;
  v9 = *((_QWORD *)a2 + 9);
  v184[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v40 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v40 = v154;
    }
    v41 = (v40 >> 52) & 0x7FF;
    v42 = v41 - 1023;
    v43 = v40 >> (51 - (v40 >> 52));
    if (v41 > 0x433)
      LODWORD(v43) = v40 << ((v40 >> 52) - 51);
    if (v41 >= 0x41F)
      v44 = v43;
    else
      v44 = (((1 << ((v40 >> 52) + 1)) - 1) & v43) + (1 << ((v40 >> 52) + 1));
    if ((v40 & 0x8000000000000000) == 0)
      v45 = v44;
    else
      v45 = -v44;
    if (v42 <= 0x53)
      v11 = v45;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20))
  {
    v63 = v11;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
    v11 = v63;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v12 = *((_QWORD *)a2 + 10);
  v184[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v46 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v155 = v11;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v11 = v155;
      v46 = v156;
    }
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v55 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v55) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v46 >> 52) + 1)) - 1) & v55) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        v14 = v56;
      else
        v14 = -v56;
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20))
  {
    v65 = v13;
    v66 = v11;
    v67 = v14;
    v68 = JSC::VM::hasExceptionsAfterHandlingTraps(v65);
    v14 = v67;
    v11 = v66;
    if (v68)
      return 0;
  }
  v178 = v8;
  v15 = *((_QWORD *)a2 + 11);
  v184[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v48 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v169 = v11;
      v157 = v14;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v14 = v157;
      v11 = v169;
      v48 = v158;
    }
    v49 = (v48 >> 52) & 0x7FF;
    if ((v49 - 1023) <= 0x53)
    {
      v57 = v48 >> (51 - (v48 >> 52));
      if (v49 > 0x433)
        LODWORD(v57) = v48 << ((v48 >> 52) - 51);
      if (v49 >= 0x41F)
        v58 = v57;
      else
        v58 = (((1 << ((v48 >> 52) + 1)) - 1) & v57) + (1 << ((v48 >> 52) + 1));
      if ((v48 & 0x8000000000000000) == 0)
        v17 = v58;
      else
        v17 = -v58;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20))
  {
    v69 = v16;
    v70 = v11;
    v71 = v14;
    v72 = v17;
    v73 = JSC::VM::hasExceptionsAfterHandlingTraps(v69);
    v17 = v72;
    v14 = v71;
    v11 = v70;
    if (v73)
      return 0;
  }
  v18 = *((_QWORD *)a2 + 12);
  v184[0] = v18;
  v19 = this[7];
  if (v18 < 0xFFFE000000000000)
  {
    v50 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v170 = v11;
      v159 = v14;
      v160 = v17;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v17 = v160;
      v14 = v159;
      v11 = v170;
      v50 = v161;
    }
    v51 = (v50 >> 52) & 0x7FF;
    if ((v51 - 1023) <= 0x53)
    {
      v59 = v50 >> (51 - (v50 >> 52));
      if (v51 > 0x433)
        LODWORD(v59) = v50 << ((v50 >> 52) - 51);
      if (v51 >= 0x41F)
        v60 = v59;
      else
        v60 = (((1 << ((v50 >> 52) + 1)) - 1) & v59) + (1 << ((v50 >> 52) + 1));
      if ((v50 & 0x8000000000000000) == 0)
        v20 = v60;
      else
        v20 = -v60;
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = v18;
  }
  if (*((_DWORD *)v19 + 20))
  {
    v74 = v11;
    v75 = v14;
    v76 = v17;
    v77 = v20;
    v78 = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
    v20 = v77;
    v17 = v76;
    v14 = v75;
    v11 = v74;
    if (v78)
      return 0;
  }
  v21 = *((_QWORD *)a2 + 13);
  v184[0] = v21;
  v22 = this[7];
  if (v21 < 0xFFFE000000000000)
  {
    v52 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v171 = v11;
      v162 = v14;
      v163 = v17;
      v164 = v20;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, (JSC::JSGlobalObject *)this);
      v20 = v164;
      v17 = v163;
      v14 = v162;
      v11 = v171;
      v52 = v165;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v61 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v61) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v62 = v61;
      else
        v62 = (((1 << ((v52 >> 52) + 1)) - 1) & v61) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v23 = v62;
      else
        v23 = -v62;
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v23 = v21;
  }
  if (*((_DWORD *)v22 + 20))
  {
    v79 = v22;
    v80 = v11;
    v174 = v23;
    v81 = v14;
    v82 = v17;
    v83 = v20;
    v84 = JSC::VM::hasExceptionsAfterHandlingTraps(v79);
    v20 = v83;
    v17 = v82;
    v14 = v81;
    v23 = v174;
    v11 = v80;
    if (v84)
      return 0;
  }
  v24 = *((_QWORD *)a2 + 14);
  v184[0] = v24;
  if (v24 >= 0xFFFE000000000000)
  {
    v25 = (int)v24;
LABEL_74:
    v28 = a3;
    goto LABEL_75;
  }
  v26 = this[7];
  if (v24 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v147 = (JSC::JSGlobalObject *)this;
    v177 = v23;
    v148 = v11;
    v149 = v14;
    v150 = v17;
    v151 = v20;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v184, v147);
    v20 = v151;
    v17 = v150;
    v14 = v149;
    v11 = v148;
    v23 = v177;
    v27 = v152;
  }
  else
  {
    *(_QWORD *)&v27 = v24 - 0x2000000000000;
  }
  if (*((_DWORD *)v26 + 20))
  {
    v141 = v26;
    v142 = v11;
    v176 = v23;
    v143 = v14;
    v144 = v17;
    v145 = v20;
    v146 = JSC::VM::hasExceptionsAfterHandlingTraps(v141);
    v20 = v145;
    v17 = v144;
    v14 = v143;
    v23 = v176;
    v11 = v142;
    if ((v146 & 1) != 0)
      return 0;
  }
  v28 = a3;
  if (fabs(v27) != INFINITY)
  {
    v173 = v23;
    v29 = v20;
    v30 = v17;
    v31 = v14;
    v32 = v11;
    v33 = fmod(trunc(v27), 1.84467441e19);
    if (v33 >= 0.0)
      v25 = (unint64_t)v33;
    else
      v25 = -(uint64_t)(unint64_t)-v33;
    v11 = v32;
    v14 = v31;
    v17 = v30;
    v20 = v29;
    v23 = v173;
    goto LABEL_74;
  }
  v25 = 0;
LABEL_75:
  if (*((_BYTE *)v28 + 33))
  {
    v167 = v25;
    v85 = v23;
    v168 = v11;
    v172 = v20;
    v86 = v17;
    v87 = v14;
    v175 = (JSC::CallFrame *)((char *)v28 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v181 = (WTF::StringImpl *)v184[0];
    v88 = v28;
    v89 = v183[0];
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v88 + 5) + 144))(*((_QWORD *)v88 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v175, v89, (uint64_t)v184);
    }
    else
    {
      LOBYTE(v184[0]) = 0;
      v185 = 0;
    }
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v175, v178, (uint64_t)&v186);
    }
    else
    {
      LOBYTE(v186) = 0;
      v187 = 0;
    }
    v98 = v182[0];
    v99 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v99
      && (v101 = WebCore::InspectorInstrumentation::instrumentingAgents(v99, v100)) != 0
      && (v102 = *(WebCore::InspectorCanvasAgent **)(v101 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v102, v175, v98, (uint64_t)&v188);
    }
    else
    {
      LOBYTE(v188) = 0;
      v189 = 0;
    }
    v28 = a3;
    v103 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v103
      && (v105 = WebCore::InspectorInstrumentation::instrumentingAgents(v103, v104)) != 0
      && (v106 = *(WebCore::InspectorCanvasAgent **)(v105 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v106, v175, v168, (uint64_t)&v190);
    }
    else
    {
      LOBYTE(v190) = 0;
      v191 = 0;
    }
    v107 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v107
      && (v109 = WebCore::InspectorInstrumentation::instrumentingAgents(v107, v108)) != 0
      && (v110 = *(WebCore::InspectorCanvasAgent **)(v109 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v110, v175, v87, (uint64_t)&v192);
    }
    else
    {
      LOBYTE(v192) = 0;
      v193 = 0;
    }
    v111 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v111
      && (v113 = WebCore::InspectorInstrumentation::instrumentingAgents(v111, v112)) != 0
      && (v114 = *(WebCore::InspectorCanvasAgent **)(v113 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v114, v175, v86, (uint64_t)&v194);
    }
    else
    {
      LOBYTE(v194) = 0;
      v195 = 0;
    }
    v115 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v115
      && (v117 = WebCore::InspectorInstrumentation::instrumentingAgents(v115, v116)) != 0
      && (v118 = *(WebCore::InspectorCanvasAgent **)(v117 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v118, v175, v172, (uint64_t)&v196);
    }
    else
    {
      LOBYTE(v196) = 0;
      v197 = 0;
    }
    v119 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v119
      && (v121 = WebCore::InspectorInstrumentation::instrumentingAgents(v119, v120)) != 0
      && (v122 = *(WebCore::InspectorCanvasAgent **)(v121 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v122, v175, v85, (uint64_t)&v198);
    }
    else
    {
      LOBYTE(v198) = 0;
      v199 = 0;
    }
    v123 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v123
      && (v125 = WebCore::InspectorInstrumentation::instrumentingAgents(v123, v124)) != 0
      && (v126 = *(WebCore::InspectorCanvasAgent **)(v125 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v126, v175, v167, (uint64_t)&v200);
    }
    else
    {
      LOBYTE(v200) = 0;
      v201 = 0;
    }
    v180[0] = v184;
    v180[1] = 9;
    v127 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v127)
    {
      v129 = WebCore::InspectorInstrumentation::instrumentingAgents(v127, v128);
      if (v129)
      {
        v130 = *(_QWORD *)(v129 + 96);
        if (v130)
          WebCore::InspectorCanvasAgent::recordAction(v130, v175, (const WTF::StringImpl *)&v181, v180);
      }
    }
    v11 = v168;
    v20 = v172;
    v14 = v87;
    v17 = v86;
    if (v201)
    {
      v131 = v200;
      v200 = 0;
      if (v131)
      {
        if (*v131 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v131;
        }
      }
    }
    if (v199)
    {
      v132 = v198;
      v198 = 0;
      if (v132)
      {
        if (*v132 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v132;
        }
      }
    }
    if (v197)
    {
      v133 = v196;
      v196 = 0;
      if (v133)
      {
        if (*v133 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v133;
        }
      }
    }
    if (v195)
    {
      v134 = v194;
      v194 = 0;
      if (v134)
      {
        if (*v134 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v134;
        }
      }
    }
    if (v193)
    {
      v135 = v192;
      v192 = 0;
      if (v135)
      {
        if (*v135 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v135;
        }
      }
    }
    if (v191)
    {
      v136 = v190;
      v190 = 0;
      if (v136)
      {
        if (*v136 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v136;
        }
      }
    }
    if (v189)
    {
      v137 = v188;
      v188 = 0;
      if (v137)
      {
        if (*v137 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v137;
        }
      }
    }
    if (v187)
    {
      v138 = v186;
      v186 = 0;
      if (v138)
      {
        if (*v138 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v138;
        }
      }
    }
    if (v185)
    {
      v139 = (_DWORD *)v184[0];
      v184[0] = 0;
      if (v139)
      {
        if (*v139 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v11 = v168;
          v20 = v172;
          v17 = v86;
          v14 = v87;
        }
        else
        {
          --*v139;
        }
      }
    }
    v140 = v181;
    v181 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 2)
      {
        WTF::StringImpl::destroy(v140, v128);
        v11 = v168;
        v20 = v172;
        v17 = v86;
        v14 = v87;
      }
      else
      {
        *(_DWORD *)v140 -= 2;
      }
    }
    v23 = v85;
    v25 = v167;
  }
  LODWORD(v166) = v23;
  WebCore::WebGL2RenderingContext::compressedTexImage3D(v28, v183[0], v178, v182[0], v11, v14, v17, v20, v166, v25);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D2Body(JSC::ArrayBufferView **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  unsigned int v9;
  unint64_t v10;
  JSC::VM *v11;
  unsigned int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  int v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  JSC::JSArrayBufferView *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  JSC::ArrayBufferView *v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  unsigned int v102;
  WebCore::InspectorInstrumentation *v103;
  WebCore::ScriptExecutionContext *v104;
  uint64_t v105;
  WebCore::InspectorCanvasAgent *v106;
  WebCore::InspectorInstrumentation *v107;
  WebCore::ScriptExecutionContext *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  WebCore::InspectorInstrumentation *v112;
  WebCore::ScriptExecutionContext *v113;
  uint64_t v114;
  WebCore::InspectorCanvasAgent *v115;
  unsigned int v116;
  WebCore::InspectorInstrumentation *v117;
  WebCore::ScriptExecutionContext *v118;
  uint64_t v119;
  WebCore::InspectorCanvasAgent *v120;
  WebCore::InspectorInstrumentation *v121;
  WebCore::ScriptExecutionContext *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  WebCore::CanvasRenderingContext *v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _QWORD v153[2];
  WTF::StringImpl *v154;
  unsigned int v155[2];
  unsigned int v156[2];
  JSC::ArrayBufferView *v157;
  int v158;
  _DWORD v159[2];
  unsigned int v160;
  int v161;
  WTF::StringImpl *v162;
  int v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  _DWORD *v171;
  char v172;
  _DWORD *v173;
  char v174;
  _DWORD *v175;
  char v176;
  _DWORD *v177;
  char v178;
  _DWORD *v179;
  char v180;
  _DWORD *v181;
  char v182;
  _DWORD *v183;
  char v184;
  _DWORD *v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), &v160);
  if (v161)
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v162 = (WTF::StringImpl *)v7;
  v8 = this[7];
  if (v7 < 0xFFFE000000000000)
  {
    v33 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v33 = v138;
    }
    v34 = (v33 >> 52) & 0x7FF;
    v35 = v34 - 1023;
    v36 = v33 >> (51 - (v33 >> 52));
    if (v34 > 0x433)
      LODWORD(v36) = v33 << ((v33 >> 52) - 51);
    if (v34 >= 0x41F)
      v37 = v36;
    else
      v37 = (((1 << ((v33 >> 52) + 1)) - 1) & v36) + (1 << ((v33 >> 52) + 1));
    if ((v33 & 0x8000000000000000) == 0)
      v38 = v37;
    else
      v38 = -v37;
    if (v35 <= 0x53)
      v9 = v38;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v162 = (WTF::StringImpl *)v10;
  v11 = this[7];
  if (v10 < 0xFFFE000000000000)
  {
    v39 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v39 = v139;
    }
    v40 = (v39 >> 52) & 0x7FF;
    v41 = v40 - 1023;
    v42 = v39 >> (51 - (v39 >> 52));
    if (v40 > 0x433)
      LODWORD(v42) = v39 << ((v39 >> 52) - 51);
    if (v40 >= 0x41F)
      v43 = v42;
    else
      v43 = (((1 << ((v39 >> 52) + 1)) - 1) & v42) + (1 << ((v39 >> 52) + 1));
    if ((v39 & 0x8000000000000000) == 0)
      v44 = v43;
    else
      v44 = -v43;
    if (v41 <= 0x53)
      v12 = v44;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v162 = (WTF::StringImpl *)v13;
  v14 = this[7];
  if (v13 < 0xFFFE000000000000)
  {
    v45 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v45 = v140;
    }
    v46 = (v45 >> 52) & 0x7FF;
    v47 = v46 - 1023;
    v48 = v45 >> (51 - (v45 >> 52));
    if (v46 > 0x433)
      LODWORD(v48) = v45 << ((v45 >> 52) - 51);
    if (v46 >= 0x41F)
      v49 = v48;
    else
      v49 = (((1 << ((v45 >> 52) + 1)) - 1) & v48) + (1 << ((v45 >> 52) + 1));
    if ((v45 & 0x8000000000000000) == 0)
      v50 = v49;
    else
      v50 = -v49;
    if (v47 > 0x53)
      v50 = 0;
    v152 = v50;
  }
  else
  {
    v152 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v151 = v12;
  v15 = *((_QWORD *)a2 + 10);
  v162 = (WTF::StringImpl *)v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v51 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v51 = v141;
    }
    v52 = (v51 >> 52) & 0x7FF;
    if ((v52 - 1023) <= 0x53)
    {
      v59 = v51 >> (51 - (v51 >> 52));
      if (v52 > 0x433)
        LODWORD(v59) = v51 << ((v51 >> 52) - 51);
      if (v52 >= 0x41F)
        v60 = v59;
      else
        v60 = (((1 << ((v51 >> 52) + 1)) - 1) & v59) + (1 << ((v51 >> 52) + 1));
      if ((v51 & 0x8000000000000000) == 0)
        v61 = v60;
      else
        v61 = -v60;
      v150 = v61;
    }
    else
    {
      v150 = 0;
    }
  }
  else
  {
    v150 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v149 = v9;
  v17 = *((_QWORD *)a2 + 11);
  v162 = (WTF::StringImpl *)v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v53 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v53 = v142;
    }
    v54 = (v53 >> 52) & 0x7FF;
    if ((v54 - 1023) <= 0x53)
    {
      v62 = v53 >> (51 - (v53 >> 52));
      if (v54 > 0x433)
        LODWORD(v62) = v53 << ((v53 >> 52) - 51);
      if (v54 >= 0x41F)
        v63 = v62;
      else
        v63 = (((1 << ((v53 >> 52) + 1)) - 1) & v62) + (1 << ((v53 >> 52) + 1));
      if ((v53 & 0x8000000000000000) == 0)
        v19 = v63;
      else
        v19 = -v63;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v148 = v19;
  v20 = *((_QWORD *)a2 + 12);
  v162 = (WTF::StringImpl *)v20;
  v21 = this[7];
  if (v20 < 0xFFFE000000000000)
  {
    v55 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v55 = v143;
    }
    v56 = (v55 >> 52) & 0x7FF;
    if ((v56 - 1023) <= 0x53)
    {
      v64 = v55 >> (51 - (v55 >> 52));
      if (v56 > 0x433)
        LODWORD(v64) = v55 << ((v55 >> 52) - 51);
      if (v56 >= 0x41F)
        v65 = v64;
      else
        v65 = (((1 << ((v55 >> 52) + 1)) - 1) & v64) + (1 << ((v55 >> 52) + 1));
      if ((v55 & 0x8000000000000000) == 0)
        v22 = v65;
      else
        v22 = -v65;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v147 = v22;
  v23 = *((_QWORD *)a2 + 13);
  v162 = (WTF::StringImpl *)v23;
  v24 = this[7];
  if (v23 < 0xFFFE000000000000)
  {
    v57 = v23 - 0x2000000000000;
    if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v162, (JSC::JSGlobalObject *)this);
      v57 = v144;
    }
    v58 = (v57 >> 52) & 0x7FF;
    if ((v58 - 1023) <= 0x53)
    {
      v66 = v57 >> (51 - (v57 >> 52));
      if (v58 > 0x433)
        LODWORD(v66) = v57 << ((v57 >> 52) - 51);
      if (v58 >= 0x41F)
        v67 = v66;
      else
        v67 = (((1 << ((v57 >> 52) + 1)) - 1) & v66) + (1 << ((v57 >> 52) + 1));
      if ((v57 & 0x8000000000000000) == 0)
        v68 = v67;
      else
        v68 = -v67;
      v146 = v68;
    }
    else
    {
      v146 = 0;
    }
  }
  else
  {
    v146 = v23;
  }
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v159);
  if (v159[1])
    return 0;
  v26 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 15);
  v157 = this[7];
  if (((unint64_t)v26 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v26 + 5) - 39 > 0xB
    || (*((_BYTE *)v26 + 40) & 6) != 0)
  {
    v153[0] = 0;
  }
  else
  {
    JSC::JSArrayBufferView::possiblySharedImpl(v26);
    if (v153[0])
    {
      v27 = 0;
      v162 = (WTF::StringImpl *)v153[0];
      v163 = 0;
      goto LABEL_31;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v157, 9, "srcData", 8, "WebGL2RenderingContext", 23, v25, "compressedTexSubImage3D", 24, "ArrayBufferView", 16);
  v27 = 1;
  v163 = 1;
  v153[0] = 0;
LABEL_31:
  LOBYTE(v157) = 0;
  v158 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v27])(v153, &v157, &v162);
  v158 = v27;
  if (v163 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v163])(v153, &v162);
    v27 = v158;
  }
  if (v27)
  {
    v31 = 0;
  }
  else
  {
    if ((unint64_t)(*((int *)a2 + 8) - 12) > 0xFFFFFFFFFFFFFFF4)
      v28 = 10;
    else
      v28 = *((_QWORD *)a2 + 16);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v28, v156);
    if (v156[1])
    {
      v31 = 0;
    }
    else
    {
      if ((unint64_t)(*((int *)a2 + 8) - 13) > 0xFFFFFFFFFFFFFFF3)
        v29 = 10;
      else
        v29 = *((_QWORD *)a2 + 17);
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v29, v155);
      if (v155[1])
      {
        v31 = 0;
      }
      else
      {
        if (*((_BYTE *)a3 + 33))
        {
          v145 = (JSC::CallFrame *)((char *)a3 + 8);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v154 = v162;
          v69 = v160;
          v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v70
            && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
            && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v73, v145, v69, (uint64_t)&v162);
          }
          else
          {
            LOBYTE(v162) = 0;
            v164 = 0;
          }
          v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v74
            && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
            && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v77, v145, v149, (uint64_t)&v165);
          }
          else
          {
            LOBYTE(v165) = 0;
            v166 = 0;
          }
          v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v78
            && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
            && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v81, v145, v151, (uint64_t)&v167);
          }
          else
          {
            LOBYTE(v167) = 0;
            v168 = 0;
          }
          v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v82
            && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
            && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v85, v145, v152, (uint64_t)&v169);
          }
          else
          {
            LOBYTE(v169) = 0;
            v170 = 0;
          }
          v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v86
            && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
            && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v89, v145, v150, (uint64_t)&v171);
          }
          else
          {
            LOBYTE(v171) = 0;
            v172 = 0;
          }
          v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v90
            && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
            && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v93, v145, v148, (uint64_t)&v173);
          }
          else
          {
            LOBYTE(v173) = 0;
            v174 = 0;
          }
          v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v94
            && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
            && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v97, v145, v147, (uint64_t)&v175);
          }
          else
          {
            LOBYTE(v175) = 0;
            v176 = 0;
          }
          v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v98
            && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
            && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v101, v145, v146, (uint64_t)&v177);
          }
          else
          {
            LOBYTE(v177) = 0;
            v178 = 0;
          }
          v102 = v159[0];
          v103 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
          if (v103
            && (v105 = WebCore::InspectorInstrumentation::instrumentingAgents(v103, v104)) != 0
            && (v106 = *(WebCore::InspectorCanvasAgent **)(v105 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v106, v145, v102, (uint64_t)&v179);
          }
          else
          {
            LOBYTE(v179) = 0;
            v180 = 0;
          }
          if (!v158)
          {
            v107 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
            if (v107
              && (v109 = WebCore::InspectorInstrumentation::instrumentingAgents(v107, v108)) != 0
              && (v110 = *(_QWORD *)(v109 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v110, (uint64_t)v145, (uint64_t)&v181);
            }
            else
            {
              LOBYTE(v181) = 0;
              v182 = 0;
            }
            v111 = v156[0];
            v112 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
            if (v112
              && (v114 = WebCore::InspectorInstrumentation::instrumentingAgents(v112, v113)) != 0
              && (v115 = *(WebCore::InspectorCanvasAgent **)(v114 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v115, v145, v111, (uint64_t)&v183);
            }
            else
            {
              LOBYTE(v183) = 0;
              v184 = 0;
            }
            v116 = v155[0];
            v117 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
            if (v117
              && (v119 = WebCore::InspectorInstrumentation::instrumentingAgents(v117, v118)) != 0
              && (v120 = *(WebCore::InspectorCanvasAgent **)(v119 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v120, v145, v116, (uint64_t)&v185);
            }
            else
            {
              LOBYTE(v185) = 0;
              v186 = 0;
            }
            v153[0] = &v162;
            v153[1] = 12;
            v121 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
            if (v121)
            {
              v123 = WebCore::InspectorInstrumentation::instrumentingAgents(v121, v122);
              if (v123)
              {
                v124 = *(_QWORD *)(v123 + 96);
                if (v124)
                  WebCore::InspectorCanvasAgent::recordAction(v124, v145, (const WTF::StringImpl *)&v154, v153);
              }
            }
            if (v186)
            {
              v125 = v185;
              v185 = 0;
              if (v125)
              {
                if (*v125 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v125;
              }
            }
            if (v184)
            {
              v126 = v183;
              v183 = 0;
              if (v126)
              {
                if (*v126 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v126;
              }
            }
            if (v182)
            {
              v127 = v181;
              v181 = 0;
              if (v127)
              {
                if (*v127 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v127;
              }
            }
            if (v180)
            {
              v128 = v179;
              v179 = 0;
              if (v128)
              {
                if (*v128 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v128;
              }
            }
            if (v178)
            {
              v129 = v177;
              v177 = 0;
              if (v129)
              {
                if (*v129 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v129;
              }
            }
            if (v176)
            {
              v130 = v175;
              v175 = 0;
              if (v130)
              {
                if (*v130 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v130;
              }
            }
            if (v174)
            {
              v131 = v173;
              v173 = 0;
              if (v131)
              {
                if (*v131 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v131;
              }
            }
            if (v172)
            {
              v132 = v171;
              v171 = 0;
              if (v132)
              {
                if (*v132 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v132;
              }
            }
            if (v170)
            {
              v133 = v169;
              v169 = 0;
              if (v133)
              {
                if (*v133 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v133;
              }
            }
            if (v168)
            {
              v134 = v167;
              v167 = 0;
              if (v134)
              {
                if (*v134 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v134;
              }
            }
            if (v166)
            {
              v135 = v165;
              v165 = 0;
              if (v135)
              {
                if (*v135 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v135;
              }
            }
            if (v164)
            {
              v136 = v162;
              v162 = 0;
              if (v136)
              {
                if (*(_DWORD *)v136 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*(_DWORD *)v136;
              }
            }
            v137 = v154;
            v154 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 2)
                goto LABEL_278;
              *(_DWORD *)v137 -= 2;
            }
            goto LABEL_276;
          }
          goto LABEL_277;
        }
        while (v158)
        {
          do
          {
LABEL_277:
            v137 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_278:
            WTF::StringImpl::destroy(v137, v122);
LABEL_276:
            ;
          }
          while (v161);
        }
        v30 = v157;
        v157 = 0;
        WebCore::WebGL2RenderingContext::compressedTexSubImage3D(a3, v160, v149, v151, v152, v150, v148, v147, __SPAIR64__(v159[0], v146), v30, v156[0], v155[0]);
        if (*(_DWORD *)v30 == 1)
          JSC::ArrayBufferView::operator delete();
        else
          --*(_DWORD *)v30;
        v31 = 10;
      }
    }
    v27 = v158;
  }
  if (v27 != -1)
    ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v27])(&v162, &v157);
  return v31;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  JSC::VM *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  JSC::CallFrame *v29;
  JSC::VM *v30;
  double v31;
  int v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  JSC::VM *v76;
  int v77;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v79;
  JSC::CallFrame *v80;
  unsigned int v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  WebCore::InspectorInstrumentation *v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t v104;
  WebCore::InspectorCanvasAgent *v105;
  WebCore::InspectorInstrumentation *v106;
  WebCore::ScriptExecutionContext *v107;
  uint64_t v108;
  WebCore::InspectorCanvasAgent *v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  WebCore::InspectorCanvasAgent *v113;
  unsigned int v114;
  WebCore::InspectorInstrumentation *v115;
  WebCore::ScriptExecutionContext *v116;
  uint64_t v117;
  WebCore::InspectorCanvasAgent *v118;
  WebCore::InspectorInstrumentation *v119;
  WebCore::ScriptExecutionContext *v120;
  uint64_t v121;
  WebCore::InspectorCanvasAgent *v122;
  WebCore::InspectorInstrumentation *v123;
  WebCore::ScriptExecutionContext *v124;
  uint64_t v125;
  WebCore::InspectorCanvasAgent *v126;
  WebCore::InspectorInstrumentation *v127;
  WebCore::ScriptExecutionContext *v128;
  uint64_t v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  WTF::StringImpl *v142;
  int v143;
  char v144;
  JSC::JSGlobalObject *v145;
  int v146;
  double v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  WebCore::CanvasRenderingContext *v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  _QWORD v167[2];
  WTF::StringImpl *v168;
  unsigned int v169[2];
  unsigned int v170[2];
  _QWORD v171[2];
  char v172;
  _DWORD *v173;
  char v174;
  _DWORD *v175;
  char v176;
  _DWORD *v177;
  char v178;
  _DWORD *v179;
  char v180;
  _DWORD *v181;
  char v182;
  _DWORD *v183;
  char v184;
  _DWORD *v185;
  char v186;
  _DWORD *v187;
  char v188;
  _DWORD *v189;
  char v190;
  _DWORD *v191;
  char v192;
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v170);
  if (v170[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v171[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v34 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v34 = v148;
    }
    v35 = (v34 >> 52) & 0x7FF;
    v36 = v35 - 1023;
    v37 = v34 >> (51 - (v34 >> 52));
    if (v35 > 0x433)
      LODWORD(v37) = v34 << ((v34 >> 52) - 51);
    if (v35 >= 0x41F)
      v38 = v37;
    else
      v38 = (((1 << ((v34 >> 52) + 1)) - 1) & v37) + (1 << ((v34 >> 52) + 1));
    if ((v34 & 0x8000000000000000) == 0)
      v39 = v38;
    else
      v39 = -v38;
    if (v36 <= 0x53)
      v8 = v39;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v171[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v40 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v40 = v149;
    }
    v41 = (v40 >> 52) & 0x7FF;
    v42 = v41 - 1023;
    v43 = v40 >> (51 - (v40 >> 52));
    if (v41 > 0x433)
      LODWORD(v43) = v40 << ((v40 >> 52) - 51);
    if (v41 >= 0x41F)
      v44 = v43;
    else
      v44 = (((1 << ((v40 >> 52) + 1)) - 1) & v43) + (1 << ((v40 >> 52) + 1));
    if ((v40 & 0x8000000000000000) == 0)
      v45 = v44;
    else
      v45 = -v44;
    if (v42 <= 0x53)
      v11 = v45;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v171[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v46 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v46 = v150;
    }
    v47 = (v46 >> 52) & 0x7FF;
    v48 = v47 - 1023;
    v49 = v46 >> (51 - (v46 >> 52));
    if (v47 > 0x433)
      LODWORD(v49) = v46 << ((v46 >> 52) - 51);
    if (v47 >= 0x41F)
      v50 = v49;
    else
      v50 = (((1 << ((v46 >> 52) + 1)) - 1) & v49) + (1 << ((v46 >> 52) + 1));
    if ((v46 & 0x8000000000000000) == 0)
      v51 = v50;
    else
      v51 = -v50;
    if (v48 <= 0x53)
      v14 = v51;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v165 = v14;
  v15 = *((_QWORD *)a2 + 10);
  v171[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v52 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v52 = v151;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v63 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v63) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v64 = v63;
      else
        v64 = (((1 << ((v52 >> 52) + 1)) - 1) & v63) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v65 = v64;
      else
        v65 = -v64;
      v164 = v65;
    }
    else
    {
      v164 = 0;
    }
  }
  else
  {
    v164 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v163 = v11;
  v17 = *((_QWORD *)a2 + 11);
  v171[0] = v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v54 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v54 = v152;
    }
    v55 = (v54 >> 52) & 0x7FF;
    if ((v55 - 1023) <= 0x53)
    {
      v66 = v54 >> (51 - (v54 >> 52));
      if (v55 > 0x433)
        LODWORD(v66) = v54 << ((v54 >> 52) - 51);
      if (v55 >= 0x41F)
        v67 = v66;
      else
        v67 = (((1 << ((v54 >> 52) + 1)) - 1) & v66) + (1 << ((v54 >> 52) + 1));
      if ((v54 & 0x8000000000000000) == 0)
        v68 = v67;
      else
        v68 = -v67;
      v162 = v68;
    }
    else
    {
      v162 = 0;
    }
  }
  else
  {
    v162 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v161 = v8;
  v19 = *((_QWORD *)a2 + 12);
  v171[0] = v19;
  v20 = this[7];
  if (v19 < 0xFFFE000000000000)
  {
    v56 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v56 = v153;
    }
    v57 = (v56 >> 52) & 0x7FF;
    if ((v57 - 1023) <= 0x53)
    {
      v69 = v56 >> (51 - (v56 >> 52));
      if (v57 > 0x433)
        LODWORD(v69) = v56 << ((v56 >> 52) - 51);
      if (v57 >= 0x41F)
        v70 = v69;
      else
        v70 = (((1 << ((v56 >> 52) + 1)) - 1) & v69) + (1 << ((v56 >> 52) + 1));
      if ((v56 & 0x8000000000000000) == 0)
        v21 = v70;
      else
        v21 = -v70;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  v160 = v21;
  v22 = *((_QWORD *)a2 + 13);
  v171[0] = v22;
  v23 = this[7];
  if (v22 < 0xFFFE000000000000)
  {
    v58 = v22 - 0x2000000000000;
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v58 = v154;
    }
    v59 = (v58 >> 52) & 0x7FF;
    if ((v59 - 1023) <= 0x53)
    {
      v71 = v58 >> (51 - (v58 >> 52));
      if (v59 > 0x433)
        LODWORD(v71) = v58 << ((v58 >> 52) - 51);
      if (v59 >= 0x41F)
        v72 = v71;
      else
        v72 = (((1 << ((v58 >> 52) + 1)) - 1) & v71) + (1 << ((v58 >> 52) + 1));
      if ((v58 & 0x8000000000000000) == 0)
        v73 = v72;
      else
        v73 = -v72;
      v159 = v73;
    }
    else
    {
      v159 = 0;
    }
  }
  else
  {
    v159 = v22;
  }
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v169);
  if (v169[1])
    return 0;
  v24 = *((_QWORD *)a2 + 15);
  v171[0] = v24;
  v25 = this[7];
  if (v24 < 0xFFFE000000000000)
  {
    v60 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, (JSC::JSGlobalObject *)this);
      v60 = v155;
    }
    v61 = (v60 >> 52) & 0x7FF;
    if ((v61 - 1023) <= 0x53)
    {
      v74 = v60 >> (51 - (v60 >> 52));
      if (v61 > 0x433)
        LODWORD(v74) = v60 << ((v60 >> 52) - 51);
      if (v61 >= 0x41F)
        v75 = v74;
      else
        v75 = (((1 << ((v60 >> 52) + 1)) - 1) & v74) + (1 << ((v60 >> 52) + 1));
      if ((v60 & 0x8000000000000000) == 0)
        v26 = v75;
      else
        v26 = -v75;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = v24;
  }
  if (*((_DWORD *)v25 + 20))
  {
    v76 = v25;
    v77 = v26;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v76);
    v26 = v77;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v27 = *((_QWORD *)a2 + 16);
  v171[0] = v27;
  if (v27 < 0xFFFE000000000000)
  {
    v30 = this[7];
    if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v145 = (JSC::JSGlobalObject *)this;
      v146 = v26;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v171, v145);
      v26 = v146;
      v31 = v147;
    }
    else
    {
      *(_QWORD *)&v31 = v27 - 0x2000000000000;
    }
    if (*((_DWORD *)v30 + 20))
    {
      v143 = v26;
      v144 = JSC::VM::hasExceptionsAfterHandlingTraps(v30);
      v26 = v143;
      if ((v144 & 1) != 0)
        return 0;
    }
    v29 = a3;
    if (fabs(v31) == INFINITY)
    {
      v28 = 0;
    }
    else
    {
      v32 = v26;
      v33 = fmod(trunc(v31), 1.84467441e19);
      if (v33 >= 0.0)
        v28 = (unint64_t)v33;
      else
        v28 = -(uint64_t)(unint64_t)-v33;
      v26 = v32;
    }
  }
  else
  {
    v28 = (int)v27;
    v29 = a3;
  }
  if (*((_BYTE *)v29 + 33))
  {
    v79 = v28;
    v157 = v26;
    v158 = (JSC::CallFrame *)((char *)v29 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v168 = (WTF::StringImpl *)v171[0];
    v80 = v29;
    v81 = v170[0];
    v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v80 + 5) + 144))(*((_QWORD *)v80 + 5));
    if (v82
      && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
      && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v85, v158, v81, (uint64_t)v171);
    }
    else
    {
      LOBYTE(v171[0]) = 0;
      v172 = 0;
    }
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v86
      && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
      && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v89, v158, v161, (uint64_t)&v173);
    }
    else
    {
      LOBYTE(v173) = 0;
      v174 = 0;
    }
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v158, v163, (uint64_t)&v175);
    }
    else
    {
      LOBYTE(v175) = 0;
      v176 = 0;
    }
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v158, v165, (uint64_t)&v177);
    }
    else
    {
      LOBYTE(v177) = 0;
      v178 = 0;
    }
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v98
      && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
      && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v101, v158, v164, (uint64_t)&v179);
    }
    else
    {
      LOBYTE(v179) = 0;
      v180 = 0;
    }
    v102 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v102
      && (v104 = WebCore::InspectorInstrumentation::instrumentingAgents(v102, v103)) != 0
      && (v105 = *(WebCore::InspectorCanvasAgent **)(v104 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v105, v158, v162, (uint64_t)&v181);
    }
    else
    {
      LOBYTE(v181) = 0;
      v182 = 0;
    }
    v106 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v106
      && (v108 = WebCore::InspectorInstrumentation::instrumentingAgents(v106, v107)) != 0
      && (v109 = *(WebCore::InspectorCanvasAgent **)(v108 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v109, v158, v160, (uint64_t)&v183);
    }
    else
    {
      LOBYTE(v183) = 0;
      v184 = 0;
    }
    v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v110
      && (v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111)) != 0
      && (v113 = *(WebCore::InspectorCanvasAgent **)(v112 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v113, v158, v159, (uint64_t)&v185);
    }
    else
    {
      LOBYTE(v185) = 0;
      v186 = 0;
    }
    v114 = v169[0];
    v115 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v115
      && (v117 = WebCore::InspectorInstrumentation::instrumentingAgents(v115, v116)) != 0
      && (v118 = *(WebCore::InspectorCanvasAgent **)(v117 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v118, v158, v114, (uint64_t)&v187);
    }
    else
    {
      LOBYTE(v187) = 0;
      v188 = 0;
    }
    v29 = a3;
    v119 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v119
      && (v121 = WebCore::InspectorInstrumentation::instrumentingAgents(v119, v120)) != 0
      && (v122 = *(WebCore::InspectorCanvasAgent **)(v121 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v122, v158, v157, (uint64_t)&v189);
    }
    else
    {
      LOBYTE(v189) = 0;
      v190 = 0;
    }
    v123 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v123
      && (v125 = WebCore::InspectorInstrumentation::instrumentingAgents(v123, v124)) != 0
      && (v126 = *(WebCore::InspectorCanvasAgent **)(v125 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v126, v158, v79, (uint64_t)&v191);
    }
    else
    {
      LOBYTE(v191) = 0;
      v192 = 0;
    }
    v167[0] = v171;
    v167[1] = 11;
    v127 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v127)
    {
      v129 = WebCore::InspectorInstrumentation::instrumentingAgents(v127, v128);
      if (v129)
      {
        v130 = *(_QWORD *)(v129 + 96);
        if (v130)
          WebCore::InspectorCanvasAgent::recordAction(v130, v158, (const WTF::StringImpl *)&v168, v167);
      }
    }
    v26 = v157;
    if (v192)
    {
      v131 = v191;
      v191 = 0;
      if (v131)
      {
        if (*v131 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v131;
        }
      }
    }
    if (v190)
    {
      v132 = v189;
      v189 = 0;
      if (v132)
      {
        if (*v132 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v132;
        }
      }
    }
    if (v188)
    {
      v133 = v187;
      v187 = 0;
      if (v133)
      {
        if (*v133 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v133;
        }
      }
    }
    if (v186)
    {
      v134 = v185;
      v185 = 0;
      if (v134)
      {
        if (*v134 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v134;
        }
      }
    }
    if (v184)
    {
      v135 = v183;
      v183 = 0;
      if (v135)
      {
        if (*v135 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v135;
        }
      }
    }
    if (v182)
    {
      v136 = v181;
      v181 = 0;
      if (v136)
      {
        if (*v136 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v136;
        }
      }
    }
    if (v180)
    {
      v137 = v179;
      v179 = 0;
      if (v137)
      {
        if (*v137 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v137;
        }
      }
    }
    if (v178)
    {
      v138 = v177;
      v177 = 0;
      if (v138)
      {
        if (*v138 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v138;
        }
      }
    }
    if (v176)
    {
      v139 = v175;
      v175 = 0;
      if (v139)
      {
        if (*v139 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v139;
        }
      }
    }
    if (v174)
    {
      v140 = v173;
      v173 = 0;
      if (v140)
      {
        if (*v140 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v140;
        }
      }
    }
    if (v172)
    {
      v141 = (_DWORD *)v171[0];
      v171[0] = 0;
      if (v141)
      {
        if (*v141 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v26 = v157;
        }
        else
        {
          --*v141;
        }
      }
    }
    v142 = v168;
    v168 = 0;
    if (v142)
    {
      if (*(_DWORD *)v142 == 2)
      {
        WTF::StringImpl::destroy(v142, v128);
        v26 = v157;
      }
      else
      {
        *(_DWORD *)v142 -= 2;
      }
    }
    v28 = v79;
  }
  LODWORD(v156) = v26;
  WebCore::WebGL2RenderingContext::compressedTexSubImage3D(v29, v170[0], v161, v163, v165, v164, v162, v160, __SPAIR64__(v169[0], v159), v156, v28);
  return 10;
}

_DWORD *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(_DWORD *result, JSC *this, uint64_t a3)
{
  _DWORD *v5;
  JSC::VM *v6;
  unint64_t v7;
  WTF *v8;
  int v9;
  int v10;
  JSC::JSObject *v11;
  JSC::VM *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  uint64_t v18[2];
  int v19;
  unsigned __int8 v20;
  JSC::VM *v21;
  WTF *v22;
  uint64_t v23;

  v5 = result;
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v21 = v6;
  LOBYTE(v18[0]) = 0;
  v20 = 0;
  v7 = a3 & 0xFFFE000000000002;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_8;
  if (*(_BYTE *)(a3 + 5) != 45)
    goto LABEL_8;
  result = (_DWORD *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::possiblySharedTypedImpl((JSC::JSArrayBufferView *)a3, (uint64_t *)&v22);
  v8 = v22;
  if (!v22)
    goto LABEL_8;
  if ((*((_BYTE *)v22 + 6) & 3) != 0)
  {
    v22 = 0;
  }
  else
  {
    ++*(_DWORD *)v22;
    if (v20)
    {
      if (v19 != -1)
      {
        if (!v19)
        {
          result = (_DWORD *)v18[0];
          v18[0] = (uint64_t)v8;
          if (result)
          {
            if (*result == 1)
              result = (_DWORD *)JSC::ArrayBufferView::operator delete();
            else
              --*result;
          }
          goto LABEL_6;
        }
        result = (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F508[v19])(&v22, v18);
      }
      v18[0] = (uint64_t)v8;
      v19 = 0;
    }
    else
    {
      v18[0] = (uint64_t)v8;
      v19 = 0;
      v20 = 1;
    }
  }
LABEL_6:
  if (*(_DWORD *)v8 == 1)
    result = (_DWORD *)JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v8;
LABEL_8:
  if (v20)
  {
    *((_BYTE *)v5 + 8) = 0;
    v5[6] = -1;
    v9 = v19;
    if (v19 == -1)
    {
      v5[8] = 0;
    }
    else
    {
      result = (_DWORD *)((uint64_t (*)(WTF **))off_1E332F518[v19])(&v22);
      v5[6] = v9;
      v10 = v20;
      v5[8] = 0;
      if (v10)
      {
        if (v19 != -1)
          return (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F508[v19])(&v22, v18);
      }
    }
    return result;
  }
  if (v7 || *(unsigned __int8 *)(a3 + 5) < 0x17u)
    goto LABEL_17;
  v11 = (JSC::JSObject *)JSC::iteratorMethod(this, (JSC::JSGlobalObject *)a3, (JSC::JSObject *)a3);
  if (*((_DWORD *)v6 + 20))
  {
    result = (_DWORD *)JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_18;
  }
  if (v11 == (JSC::JSObject *)10)
  {
LABEL_17:
    result = (_DWORD *)JSC::throwTypeError();
LABEL_18:
    v5[8] = 1;
    return result;
  }
  v22 = 0;
  v23 = 0;
  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v18[0] = (uint64_t)&v22;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(this, a3, v11, v18);
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
  {
    v17 = v22;
    v19 = 1;
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      WTF::fastFree(v17, v16);
    }
    v13 = 1;
    v14 = 1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v19 = 0;
    v15 = v23;
    v18[0] = 0;
    v18[1] = 0;
    *((_QWORD *)v5 + 1) = v22;
    *((_QWORD *)v5 + 2) = v15;
    v5[6] = 1;
  }
  v5[8] = v13;
  return (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F398[v14])(&v22, v18);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_13Uint32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_13Uint32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_13Uint32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_13Uint32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIjLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t IndexQuickly;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      IndexQuickly = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v14 = *a4;
      result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, IndexQuickly, &v23);
      if (!v24)
      {
        v22 = v23;
        v15 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(v14 + 8))
        {
          result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v22);
          *(_DWORD *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v14 + 4 * v15) = v23;
        }
        ++*(_DWORD *)(v14 + 12);
      }
      if (*(_QWORD *)(v8 + 16))
      {
        v20 = JSC::JSArrayIterator::create();
        v21 = i | 0xFFFE000000000000;
        if (i < 0)
          v21 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v20 + 16) = v21;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v17 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a4;
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v17, &v23);
        if (!v24)
        {
          v22 = v23;
          v19 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
            *(_DWORD *)(*(_QWORD *)v18 + 4 * *(unsigned int *)(v18 + 12)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v22);
          else
            *(_DWORD *)(*(_QWORD *)v18 + 4 * v19) = v23;
          ++*(_DWORD *)(v18 + 12);
        }
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS9_6VectorIjLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSO_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E332F508[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert@<X0>(JSC *a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  uint64_t result;
  JSC::JSObject *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t (**v11)();
  JSC::JSGlobalObject *v12;
  JSC::JSObject *v13;
  uint64_t v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  JSC::VM *v21;
  JSC::JSGlobalObject *v22;
  _QWORD v23[3];

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v21 = v5;
  v22 = a2;
  LOBYTE(v17) = 0;
  v20 = 0;
  v23[0] = &v17;
  v23[1] = v5;
  v23[2] = &v22;
  result = _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_21IDLAllowSharedAdaptorINS_15IDLFloat32ArrayEEENS_11IDLSequenceINS_20IDLUnrestrictedFloatEEEEEEE7convertERN3JSC14JSGlobalObjectENSA_7JSValueEENKUlTyvE_clIS4_EEDav((uint64_t)v23);
  if (!v20)
  {
    v12 = v22;
    if (((unint64_t)v22 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v22 + 5) >= 0x17u)
    {
      v13 = (JSC::JSObject *)JSC::iteratorMethod(a1, v22, v7);
      if (*((_DWORD *)v5 + 20))
      {
        v15 = v5;
        v16 = v13;
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
        v13 = v16;
        if ((_DWORD)result)
          goto LABEL_12;
      }
      if (v13 != (JSC::JSObject *)10)
      {
        result = WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convert(v12, a1, v13, (uint64_t)&v17);
        v10 = v19;
        if (v19)
        {
          *(_DWORD *)(a3 + 32) = 1;
          if ((_DWORD)v10 == -1)
            return result;
        }
        else
        {
          *(_QWORD *)(a3 + 8) = v17;
          v14 = v18;
          v17 = 0;
          v18 = 0;
          *(_QWORD *)(a3 + 16) = v14;
          *(_DWORD *)(a3 + 24) = 1;
          *(_DWORD *)(a3 + 32) = 0;
        }
        v11 = off_1E3320DC8;
        return ((uint64_t (*)(_QWORD *, uint64_t *))v11[v10])(v23, &v17);
      }
    }
    result = JSC::throwTypeError();
LABEL_12:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v8 = v19;
  if (v19 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = ((uint64_t (*)(_QWORD *))off_1E332F548[v19])(v23);
    *(_DWORD *)(a3 + 24) = v8;
    v9 = v20;
    *(_DWORD *)(a3 + 32) = 0;
    if (v9)
    {
      v10 = v19;
      if (v19 != -1)
      {
        v11 = off_1E332F538;
        return ((uint64_t (*)(_QWORD *, uint64_t *))v11[v10])(v23, &v17);
      }
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_21IDLAllowSharedAdaptorINS_15IDLFloat32ArrayEEENS_11IDLSequenceINS_20IDLUnrestrictedFloatEEEEEEE7convertERN3JSC14JSGlobalObjectENSA_7JSValueEENKUlTyvE_clIS4_EEDav(uint64_t result)
{
  uint64_t *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (!*(_BYTE *)(*(_QWORD *)result + 24))
  {
    v1 = (uint64_t *)result;
    result = **(_QWORD **)(result + 16);
    if ((result & 0xFFFE000000000002) == 0 && *(_BYTE *)(result + 5) == 46)
    {
      result = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(result, &v5);
      v2 = (_DWORD *)v5;
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 6) & 3) != 0)
        {
          v5 = 0;
        }
        else
        {
          ++*(_DWORD *)v5;
          v3 = *v1;
          if (*(_BYTE *)(v3 + 24))
          {
            v4 = *(unsigned int *)(v3 + 16);
            if ((_DWORD)v4 != -1)
            {
              if (!(_DWORD)v4)
              {
                result = *(_QWORD *)v3;
                *(_QWORD *)v3 = v2;
                if (result)
                {
                  if (*(_DWORD *)result == 1)
                    result = JSC::ArrayBufferView::operator delete();
                  else
                    --*(_DWORD *)result;
                }
                goto LABEL_16;
              }
              result = ((uint64_t (*)(char *, uint64_t))off_1E332F538[v4])(&v6, v3);
            }
            *(_QWORD *)v3 = v2;
            *(_DWORD *)(v3 + 16) = 0;
          }
          else
          {
            *(_QWORD *)v3 = v2;
            *(_DWORD *)(v3 + 16) = 0;
            *(_BYTE *)(v3 + 24) = 1;
          }
        }
LABEL_16:
        if (*v2 == 1)
          return JSC::ArrayBufferView::operator delete();
        else
          --*v2;
      }
    }
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIfLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIfLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIfLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIfLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convert@<X0>(JSC::JSArray *this@<X1>, JSC::JSGlobalObject *a2@<X0>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  JSC::VM *v13;
  int v14;
  int v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  WTF **v19;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*((_BYTE *)this + 5) == 36)
  {
    if ((JSC::JSArray::isIteratorProtocolFastAndNonObservable(this) & 1) != 0)
    {
      v9 = *((_BYTE *)this + 4);
      if ((v9 & 0xE) != 0)
      {
        v10 = *(unsigned int *)(*((_QWORD *)this + 1) - 8);
        v17 = 0;
        v18 = 0;
        if ((_DWORD)v10)
        {
          if (v10 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v10)), !v19))
          {
            JSC::throwTypeError();
            goto LABEL_23;
          }
          LODWORD(v18) = v10;
          v17 = (WTF *)v19;
          v9 = *((_BYTE *)this + 4);
        }
      }
      else
      {
        LODWORD(v10) = 0;
        v17 = 0;
        v18 = 0;
      }
      if ((v9 & 0xC) == 4)
      {
        WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convertArray((uint64_t)this, v10, v9 & 0xE, (uint64_t)&v17, a4);
        goto LABEL_17;
      }
      v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v19 = &v17;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, (uint64_t)this, a3, (uint64_t *)&v19);
      if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
      {
        v14 = 0;
        *(_QWORD *)a4 = v17;
        v15 = v18;
        v16 = HIDWORD(v18);
        v17 = 0;
        v18 = 0;
        *(_DWORD *)(a4 + 8) = v15;
        *(_DWORD *)(a4 + 12) = v16;
LABEL_16:
        *(_DWORD *)(a4 + 16) = v14;
LABEL_17:
        result = (uint64_t)v17;
        if (!v17)
          return result;
LABEL_21:
        v17 = 0;
        LODWORD(v18) = 0;
        return WTF::fastFree((WTF *)result, v11);
      }
LABEL_23:
      v14 = 1;
      goto LABEL_16;
    }
    v17 = 0;
    v18 = 0;
    v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = &v17;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, (uint64_t)this, a3, (uint64_t *)&v19);
  if (!*((_DWORD *)v8 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v8), (result & 1) == 0))
  {
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v18;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  result = (uint64_t)v17;
  *(_DWORD *)(a4 + 16) = 1;
  if (result)
    goto LABEL_21;
  return result;
}

uint64_t WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convertArray@<X0>(uint64_t a1@<X2>, unsigned int a2@<W3>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  float v28;

  if (a3 == 4)
  {
    if (a2)
    {
      v8 = 0;
      v9 = 8 * a2;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v8);
        if (v10)
        {
          v11 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a4 + 8))
          {
            v12 = v11 + (v11 >> 2);
            if (v12 >= 0x10)
              v13 = v12 + 1;
            else
              v13 = 16;
            if (v13 <= v11 + 1)
              v14 = v11 + 1;
            else
              v14 = v13;
            result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v14);
            v11 = *(unsigned int *)(a4 + 12);
          }
          *(float *)(*(_QWORD *)a4 + 4 * v11) = (float)(int)v10;
        }
        else
        {
          v11 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v11 == *(_DWORD *)(a4 + 8))
          {
            v16 = v11 + (v11 >> 2);
            if (v16 >= 0x10)
              v17 = v16 + 1;
            else
              v17 = 16;
            if (v17 <= v11 + 1)
              v18 = v11 + 1;
            else
              v18 = v17;
            result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a4, v18);
            v11 = *(unsigned int *)(a4 + 12);
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v11) = 0;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v11) = 0;
          }
        }
        v19 = v11 + 1;
        *(_DWORD *)(a4 + 12) = v19;
        v8 += 8;
      }
      while (v9 != v8);
    }
    else
    {
      v19 = *(_DWORD *)(a4 + 12);
    }
    v27 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)a5 = v27;
    LODWORD(v27) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a5 + 8) = v27;
    v25 = (_DWORD *)(a4 + 12);
  }
  else
  {
    if (a2)
    {
      v20 = 0;
      v21 = 8 * a2;
      do
      {
        v22 = *(double *)(*(_QWORD *)(a1 + 8) + v20);
        v28 = v22;
        v23 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a4 + 8))
        {
          result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(a4, (unint64_t)&v28);
        }
        else
        {
          *(float *)(*(_QWORD *)a4 + 4 * v23) = v22;
          *(_DWORD *)(a4 + 12) = v23 + 1;
        }
        v20 += 8;
      }
      while (v21 != v20);
    }
    v24 = *(_QWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)a5 = v24;
    LODWORD(v24) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a5 + 8) = v24;
    v26 = *(_DWORD *)(a4 + 12);
    v25 = (_DWORD *)(a4 + 12);
    v19 = v26;
  }
  *v25 = 0;
  *(_DWORD *)(a5 + 12) = v19;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  double v16;
  float v17;
  uint64_t v18;
  int v19;
  double v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  double v25;
  float v26;
  uint64_t v27;
  int v28;
  JSC::VM *v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      if ((*(_BYTE *)(a2 + 4) & 0xE) != 0)
        v12 = *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8);
      else
        v12 = 0;
      if (i - 1 >= v12)
        return result;
      result = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      v13 = result;
      if (!result)
      {
        result = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
        v13 = result;
      }
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          return result;
      }
      v14 = *a4;
      v33 = v13;
      v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 >= 0xFFFE000000000000)
      {
        v16 = (double)(int)v13;
      }
      else if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v33, a1);
        v16 = v20;
      }
      else
      {
        *(_QWORD *)&v16 = v13 - 0x2000000000000;
      }
      if (!*((_DWORD *)v15 + 20))
        break;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
      if ((result & 1) == 0)
        break;
LABEL_19:
      if (*(_QWORD *)(v8 + 16))
      {
        v31 = JSC::JSArrayIterator::create();
        v32 = i | 0xFFFE000000000000;
        if (i < 0)
          v32 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v31 + 16) = v32;
        return JSC::iteratorClose();
      }
    }
    if (v16 < -3.40282347e38)
    {
      *(float *)&v19 = -INFINITY;
    }
    else
    {
      if (v16 <= 3.40282347e38)
      {
        v17 = v16;
        goto LABEL_16;
      }
      *(float *)&v19 = INFINITY;
    }
    v17 = *(float *)&v19;
LABEL_16:
    *(float *)&v33 = v17;
    v18 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 8))
    {
      result = WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(v14, (unint64_t)&v33);
    }
    else
    {
      *(float *)(*(_QWORD *)v14 + 4 * v18) = v17;
      *(_DWORD *)(v14 + 12) = v18 + 1;
    }
    goto LABEL_19;
  }
  JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
  if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
  {
    while (1)
    {
      result = JSC::iteratorStep();
      if (*(_QWORD *)(v8 + 16))
        v21 = 1;
      else
        v21 = result == 6;
      if (v21)
        return result;
      v22 = JSC::iteratorValue();
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          return result;
      }
      v23 = *a4;
      v33 = v22;
      v24 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v22 >= 0xFFFE000000000000)
      {
        v25 = (double)(int)v22;
      }
      else if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        v29 = (JSC::VM *)*((_QWORD *)a1 + 7);
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v33, a1);
        v24 = v29;
        v25 = v30;
      }
      else
      {
        *(_QWORD *)&v25 = v22 - 0x2000000000000;
      }
      if (!*((_DWORD *)v24 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) == 0)
        break;
LABEL_47:
      if (*(_QWORD *)(v8 + 16))
        return JSC::iteratorClose();
    }
    if (v25 < -3.40282347e38)
    {
      *(float *)&v28 = -INFINITY;
    }
    else
    {
      if (v25 <= 3.40282347e38)
      {
        v26 = v25;
        goto LABEL_44;
      }
      *(float *)&v28 = INFINITY;
    }
    v26 = *(float *)&v28;
LABEL_44:
    *(float *)&v33 = v26;
    v27 = *(unsigned int *)(v23 + 12);
    if ((_DWORD)v27 == *(_DWORD *)(v23 + 8))
    {
      WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,float>(v23, (unint64_t)&v33);
    }
    else
    {
      *(float *)(*(_QWORD *)v23 + 4 * v27) = v26;
      *(_DWORD *)(v23 + 12) = v27 + 1;
    }
    goto LABEL_47;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSB_14Float32AdaptorEEENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS9_6VectorIfLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSO_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E332F538[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert@<X0>(JSC *a1@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  uint64_t result;
  JSC::JSObject *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t (**v11)();
  JSC::JSGlobalObject *v12;
  JSC::JSObject *v13;
  uint64_t v14;
  JSC::VM *v15;
  JSC::JSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  JSC::VM *v21;
  JSC::JSGlobalObject *v22;
  _QWORD v23[3];

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v21 = v5;
  v22 = a2;
  LOBYTE(v17) = 0;
  v20 = 0;
  v23[0] = &v17;
  v23[1] = v5;
  v23[2] = &v22;
  result = _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_21IDLAllowSharedAdaptorINS_13IDLInt32ArrayEEENS_11IDLSequenceINS_7IDLLongEEEEEEE7convertERN3JSC14JSGlobalObjectENSA_7JSValueEENKUlTyvE_clIS4_EEDav((uint64_t)v23);
  if (!v20)
  {
    v12 = v22;
    if (((unint64_t)v22 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v22 + 5) >= 0x17u)
    {
      v13 = (JSC::JSObject *)JSC::iteratorMethod(a1, v22, v7);
      if (*((_DWORD *)v5 + 20))
      {
        v15 = v5;
        v16 = v13;
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v15);
        v13 = v16;
        if ((_DWORD)result)
          goto LABEL_12;
      }
      if (v13 != (JSC::JSObject *)10)
      {
        result = WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLLong>>::convert(v12, a1, v13, (uint64_t)&v17);
        v10 = v19;
        if (v19)
        {
          *(_DWORD *)(a3 + 32) = 1;
          if ((_DWORD)v10 == -1)
            return result;
        }
        else
        {
          *(_QWORD *)(a3 + 8) = v17;
          v14 = v18;
          v17 = 0;
          v18 = 0;
          *(_QWORD *)(a3 + 16) = v14;
          *(_DWORD *)(a3 + 24) = 1;
          *(_DWORD *)(a3 + 32) = 0;
        }
        v11 = off_1E332F588;
        return ((uint64_t (*)(_QWORD *, uint64_t *))v11[v10])(v23, &v17);
      }
    }
    result = JSC::throwTypeError();
LABEL_12:
    *(_DWORD *)(a3 + 32) = 1;
    return result;
  }
  *(_BYTE *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v8 = v19;
  if (v19 == -1)
  {
    *(_DWORD *)(a3 + 32) = 0;
  }
  else
  {
    result = ((uint64_t (*)(_QWORD *))off_1E332F578[v19])(v23);
    *(_DWORD *)(a3 + 24) = v8;
    v9 = v20;
    *(_DWORD *)(a3 + 32) = 0;
    if (v9)
    {
      v10 = v19;
      if (v19 != -1)
      {
        v11 = off_1E332F568;
        return ((uint64_t (*)(_QWORD *, uint64_t *))v11[v10])(v23, &v17);
      }
    }
  }
  return result;
}

uint64_t _ZZN7WebCore9ConverterINS_8IDLUnionIJNS_21IDLAllowSharedAdaptorINS_13IDLInt32ArrayEEENS_11IDLSequenceINS_7IDLLongEEEEEEE7convertERN3JSC14JSGlobalObjectENSA_7JSValueEENKUlTyvE_clIS4_EEDav(uint64_t result)
{
  uint64_t *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (!*(_BYTE *)(*(_QWORD *)result + 24))
  {
    v1 = (uint64_t *)result;
    result = **(_QWORD **)(result + 16);
    if ((result & 0xFFFE000000000002) == 0 && *(_BYTE *)(result + 5) == 44)
    {
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::possiblySharedTypedImpl((JSC::JSArrayBufferView *)result, &v5);
      v2 = (_DWORD *)v5;
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 6) & 3) != 0)
        {
          v5 = 0;
        }
        else
        {
          ++*(_DWORD *)v5;
          v3 = *v1;
          if (*(_BYTE *)(v3 + 24))
          {
            v4 = *(unsigned int *)(v3 + 16);
            if ((_DWORD)v4 != -1)
            {
              if (!(_DWORD)v4)
              {
                result = *(_QWORD *)v3;
                *(_QWORD *)v3 = v2;
                if (result)
                {
                  if (*(_DWORD *)result == 1)
                    result = JSC::ArrayBufferView::operator delete();
                  else
                    --*(_DWORD *)result;
                }
                goto LABEL_16;
              }
              result = ((uint64_t (*)(char *, uint64_t))off_1E332F568[v4])(&v6, v3);
            }
            *(_QWORD *)v3 = v2;
            *(_DWORD *)(v3 + 16) = 0;
          }
          else
          {
            *(_QWORD *)v3 = v2;
            *(_DWORD *)(v3 + 16) = 0;
            *(_BYTE *)(v3 + 24) = 1;
          }
        }
LABEL_16:
        if (*v2 == 1)
          return JSC::ArrayBufferView::operator delete();
        else
          --*v2;
      }
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::possiblySharedTypedImpl@<X0>(JSC::JSArrayBufferView *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  char v5;
  uint64_t result;
  char v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *((unsigned __int8 *)this + 40);
  v5 = v4 - 88;
  if ((v4 - 88) <= 0x35)
  {
    if (((1 << v5) & 0x3D) != 0)
    {
      result = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (!result)
        goto LABEL_28;
      goto LABEL_11;
    }
    if (((1 << v5) & 0x3D000000000000) != 0)
    {
      result = *((_QWORD *)this + 6);
      if (!result)
        goto LABEL_28;
LABEL_11:
      v7 = 0;
      *(_DWORD *)result += 2;
      goto LABEL_12;
    }
  }
  if (v4 == 16 || v4 == 48)
  {
    result = JSC::JSArrayBufferView::slowDownAndWasteMemory(this);
    if (result)
      goto LABEL_11;
  }
  else
  {
    result = 0;
  }
LABEL_28:
  v7 = 1;
LABEL_12:
  v17 = result;
  v8 = *((unsigned __int8 *)this + 40);
  if ((v8 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 3);
    if ((v7 & 1) == 0)
      goto LABEL_14;
LABEL_22:
    v15 = 0;
    goto LABEL_23;
  }
  v9 = 0;
  if ((v7 & 1) != 0)
    goto LABEL_22;
LABEL_14:
  v10 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(result + 64) && (v16 = *(_QWORD *)(result + 32)) != 0)
    v11 = *(_QWORD *)(v16 + 32);
  else
    v11 = *(_QWORD *)(result + 48);
  v12 = v11 >= v10;
  v13 = v11 - v10;
  if (!v12 || (v14 = v9 <= v13 >> 2, (v10 & 3) != 0) || ((v8 | v14) & 1) == 0)
  {
    *a2 = 0;
    return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  JSC::ArrayBufferView::ArrayBufferView();
  result = v17;
LABEL_23:
  *a2 = v15;
  if (result)
    return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((WTF::DeferrableRefCountedBase *)result);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_12Int32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIiLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_12Int32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIiLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSO_1EJSI_SM_EEEEEEDcSQ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_12Int32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIiLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_12Int32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEENS8_6VectorIiLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSU_OT0_E_JRNS0_6__baseILSR_1EJSI_SM_EEEOS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

uint64_t WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLLong>>::convert@<X0>(JSC::JSArray *this@<X1>, JSC::JSGlobalObject *a2@<X0>, JSC::JSObject *a3@<X2>, uint64_t a4@<X8>)
{
  JSC::VM *v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  JSC::VM *v13;
  int v14;
  int v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  WTF **v19;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (*((_BYTE *)this + 5) == 36)
  {
    if ((JSC::JSArray::isIteratorProtocolFastAndNonObservable(this) & 1) != 0)
    {
      v9 = *((_BYTE *)this + 4);
      if ((v9 & 0xE) != 0)
      {
        v10 = *(unsigned int *)(*((_QWORD *)this + 1) - 8);
        v17 = 0;
        v18 = 0;
        if ((_DWORD)v10)
        {
          if (v10 >> 30 || (WTF::tryFastMalloc((WTF *)(4 * v10)), !v19))
          {
            JSC::throwTypeError();
            goto LABEL_23;
          }
          LODWORD(v18) = v10;
          v17 = (WTF *)v19;
          v9 = *((_BYTE *)this + 4);
        }
      }
      else
      {
        LODWORD(v10) = 0;
        v17 = 0;
        v18 = 0;
      }
      if ((v9 & 0xC) == 4)
      {
        WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLLong>>::convertArray((uint64_t)this, v10, v9 & 0xE, (uint64_t)&v17, a4);
        goto LABEL_17;
      }
      v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
      v19 = &v17;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, (uint64_t)this, a3, (uint64_t *)&v19);
      if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
      {
        v14 = 0;
        *(_QWORD *)a4 = v17;
        v15 = v18;
        v16 = HIDWORD(v18);
        v17 = 0;
        v18 = 0;
        *(_DWORD *)(a4 + 8) = v15;
        *(_DWORD *)(a4 + 12) = v16;
LABEL_16:
        *(_DWORD *)(a4 + 16) = v14;
LABEL_17:
        result = (uint64_t)v17;
        if (!v17)
          return result;
LABEL_21:
        v17 = 0;
        LODWORD(v18) = 0;
        return WTF::fastFree((WTF *)result, v11);
      }
LABEL_23:
      v14 = 1;
      goto LABEL_16;
    }
    v17 = 0;
    v18 = 0;
    v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = &v17;
  result = JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(a2, (uint64_t)this, a3, (uint64_t *)&v19);
  if (!*((_DWORD *)v8 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v8), (result & 1) == 0))
  {
    *(_QWORD *)a4 = v17;
    *(_QWORD *)(a4 + 8) = v18;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  result = (uint64_t)v17;
  *(_DWORD *)(a4 + 16) = 1;
  if (result)
    goto LABEL_21;
  return result;
}

void WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLLong>>::convertArray(uint64_t a1@<X2>, unsigned int a2@<W3>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;

  if (a3 == 4)
  {
    if (a2)
    {
      v8 = 0;
      v9 = 8 * a2;
      while (1)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v8);
        if (v10)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v8);
          v11 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v11 != *(_DWORD *)(a4 + 8))
          {
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v11) = v10;
            goto LABEL_12;
          }
          v12 = v11 + 1;
        }
        else
        {
          v24 = 0;
          v13 = *(unsigned int *)(a4 + 12);
          if ((_DWORD)v13 != *(_DWORD *)(a4 + 8))
          {
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v13) = 0;
            goto LABEL_12;
          }
          v12 = v13 + 1;
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * *(unsigned int *)(a4 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v12, (unint64_t)&v24);
LABEL_12:
        v14 = *(_DWORD *)(a4 + 12) + 1;
        *(_DWORD *)(a4 + 12) = v14;
        v8 += 8;
        if (v9 == v8)
          goto LABEL_32;
      }
    }
    goto LABEL_31;
  }
  if (!a2)
  {
LABEL_31:
    v14 = *(_DWORD *)(a4 + 12);
    goto LABEL_32;
  }
  v15 = 0;
  v16 = 8 * a2;
  do
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v15);
    v18 = (v17 >> 52) & 0x7FF;
    if ((v18 - 1023) <= 0x53)
    {
      v20 = v17 >> (51 - (v17 >> 52));
      if (v18 > 0x433)
        LODWORD(v20) = v17 << ((v17 >> 52) - 51);
      if (v18 >= 0x41F)
        v21 = v20;
      else
        v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
      if ((v17 & 0x8000000000000000) == 0)
        v19 = v21;
      else
        v19 = -v21;
    }
    else
    {
      v19 = 0;
    }
    v24 = v19;
    v22 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v22 == *(_DWORD *)(a4 + 8))
      *(_DWORD *)(*(_QWORD *)a4 + 4 * *(unsigned int *)(a4 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a4, v22 + 1, (unint64_t)&v24);
    else
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v22) = v19;
    v14 = *(_DWORD *)(a4 + 12) + 1;
    *(_DWORD *)(a4 + 12) = v14;
    v15 += 8;
  }
  while (v16 != v15);
LABEL_32:
  *(_QWORD *)a5 = *(_QWORD *)a4;
  v23 = *(_DWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a5 + 8) = v23;
  *(_DWORD *)(a5 + 12) = v14;
  *(_DWORD *)(a5 + 16) = 0;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t result;
  JSValue v10;
  int i;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v8 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v12 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v12)
        break;
      result = JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      v13 = result;
      if (!result)
      {
        result = JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
        v13 = result;
      }
      if (*(_DWORD *)(v8 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
        if ((result & 1) != 0)
          break;
      }
      v14 = *a4;
      v38 = v13;
      v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v17 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          result = JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v38, a1);
          v17 = v23;
        }
        v18 = (v17 >> 52) & 0x7FF;
        v19 = v18 - 1023;
        v20 = v17 >> (51 - (v17 >> 52));
        if (v18 > 0x433)
          LODWORD(v20) = v17 << ((v17 >> 52) - 51);
        if (v18 >= 0x41F)
          v21 = v20;
        else
          v21 = (((1 << ((v17 >> 52) + 1)) - 1) & v20) + (1 << ((v17 >> 52) + 1));
        if ((v17 & 0x8000000000000000) == 0)
          v22 = v21;
        else
          v22 = -v21;
        if (v19 <= 0x53)
          LODWORD(v13) = v22;
        else
          LODWORD(v13) = 0;
      }
      if (!*((_DWORD *)v15 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v15), !(_DWORD)result))
      {
        LODWORD(v38) = v13;
        v16 = *(unsigned int *)(v14 + 12);
        if ((_DWORD)v16 == *(_DWORD *)(v14 + 8))
        {
          result = (uint64_t)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v14, v16 + 1, (unint64_t)&v38);
          *(_DWORD *)(*(_QWORD *)v14 + 4 * *(unsigned int *)(v14 + 12)) = *(_DWORD *)result;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v14 + 4 * v16) = v13;
        }
        ++*(_DWORD *)(v14 + 12);
      }
      if (*(_QWORD *)(v8 + 16))
      {
        v36 = JSC::JSArrayIterator::create();
        v37 = i | 0xFFFE000000000000;
        if (i < 0)
          v37 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v36 + 16) = v37;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, a3, v10);
    if (!*(_DWORD *)(v8 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v8 + 16) || result == 6)
          break;
        v25 = JSC::iteratorValue();
        if (*(_DWORD *)(v8 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8);
          if ((result & 1) != 0)
            break;
        }
        v26 = *a4;
        v38 = v25;
        v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v25 < 0xFFFE000000000000)
        {
          v29 = v25 - 0x2000000000000;
          if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v38, a1);
            v29 = v35;
          }
          v30 = (v29 >> 52) & 0x7FF;
          v31 = v30 - 1023;
          v32 = v29 >> (51 - (v29 >> 52));
          if (v30 > 0x433)
            LODWORD(v32) = v29 << ((v29 >> 52) - 51);
          if (v30 >= 0x41F)
            v33 = v32;
          else
            v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
          if ((v29 & 0x8000000000000000) == 0)
            v34 = v33;
          else
            v34 = -v33;
          if (v31 <= 0x53)
            LODWORD(v25) = v34;
          else
            LODWORD(v25) = 0;
        }
        if (!*((_DWORD *)v27 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v27))
        {
          LODWORD(v38) = v25;
          v28 = *(unsigned int *)(v26 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(v26 + 8))
            *(_DWORD *)(*(_QWORD *)v26 + 4 * *(unsigned int *)(v26 + 12)) = *(_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v26, v28 + 1, (unint64_t)&v38);
          else
            *(_DWORD *)(*(_QWORD *)v26 + 4 * v28) = v25;
          ++*(_DWORD *)(v26 + 12);
        }
        if (*(_QWORD *)(v8 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIiLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEENS9_12RawPtrTraitsISE_EENS9_21DefaultRefDerefTraitsISE_EEEENS9_6VectorIiLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSO_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E332F568[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF *v3;
  void *v6;

  v3 = (WTF *)*(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = (_DWORD)v3;
  if ((_DWORD)v3)
  {
    v6 = (void *)WTF::fastMalloc(v3);
    *(_DWORD *)(a2 + 8) = (_DWORD)v3;
    *(_QWORD *)a2 = v6;
    memcpy(v6, *(const void **)a3, *(unsigned int *)(a3 + 12));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      memcpy(v6, *(const void **)a3, 4 * *(unsigned int *)(a3 + 12));
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;

  v3 = *(unsigned int *)(a3 + 12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = v6;
      memcpy(v6, *(const void **)a3, 4 * *(unsigned int *)(a3 + 12));
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24ELm24EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25ELm25EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2N_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEERKS2V_EEEDcS2N_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm11ELm11EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm12ELm12EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13ELm13EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14ELm14EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm15ELm15EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16ELm16EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17ELm17EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18ELm18EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19ELm19EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm20ELm20EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21ELm21EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm22ELm22EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm23ELm23EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24ELm24EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm25ELm25EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnbijxyfN3WTF6StringENS8_6VectorIbLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_IiLm0ESB_Lm16ESC_EENSA_IjLm0ESB_Lm16ESC_EENS8_6RefPtrIN3JSC21GenericTypedArrayViewINSH_14Float32AdaptorEEENS8_12RawPtrTraitsISK_EENS8_21DefaultRefDerefTraitsISK_EEEENSG_INSI_INSH_12Int32AdaptorEEENSL_ISR_EENSN_ISR_EEEENSG_INSI_INSH_13Uint32AdaptorEEENSL_ISW_EENSN_ISW_EEEENSG_INSI_INSH_12Uint8AdaptorEEENSL_IS11_EENSN_IS11_EEEENSG_IN7WebCore11WebGLBufferENSL_IS16_EENSN_IS16_EEEENSG_INS15_16WebGLFramebufferENSL_IS1A_EENSN_IS1A_EEEENSG_INS15_12WebGLProgramENSL_IS1E_EENSN_IS1E_EEEENSG_INS15_10WebGLQueryENSL_IS1I_EENSN_IS1I_EEEENSG_INS15_17WebGLRenderbufferENSL_IS1M_EENSN_IS1M_EEEENSG_INS15_12WebGLSamplerENSL_IS1Q_EENSN_IS1Q_EEEENSG_INS15_12WebGLTextureENSL_IS1U_EENSN_IS1U_EEEENSG_INS15_18WebGLTimerQueryEXTENSL_IS1Y_EENSN_IS1Y_EEEENSG_INS15_22WebGLTransformFeedbackENSL_IS22_EENSN_IS22_EEEENSG_INS15_22WebGLVertexArrayObjectENSL_IS26_EENSN_IS26_EEEENSG_INS15_25WebGLVertexArrayObjectOESENSL_IS2A_EENSN_IS2A_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS2E_LNS0_6_TraitE1EEEEEvRS2F_OT_EUlRS2L_OT0_E_JRNS0_6__baseILS2I_1EJDnbijxyfS9_SD_SE_SF_SP_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_EEEOS2T_EEEDcS2L_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D4Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::ArrayBufferView *v7;
  JSC::VM *v8;
  unsigned int v9;
  JSC::ArrayBufferView *v10;
  JSC::VM *v11;
  int v12;
  JSC::ArrayBufferView *v13;
  JSC::VM *v14;
  JSC::ArrayBufferView *v15;
  JSC::VM *v16;
  uint64_t v17;
  JSC::JSArrayBufferView *v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  JSC::ArrayBufferView *v24;
  uint64_t (*v25)();
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  WebCore::InspectorCanvasAgent *v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  unsigned int v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  unsigned int v75;
  WebCore::InspectorInstrumentation *v76;
  WebCore::ScriptExecutionContext *v77;
  uint64_t v78;
  WebCore::InspectorCanvasAgent *v79;
  unsigned int v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  uint64_t v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  JSC::ArrayBufferView *v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  JSC::ArrayBufferView *v111;
  int v112;
  int v113[2];
  unsigned int v114[2];
  _DWORD v115[2];
  _DWORD v116[2];
  JSC::ArrayBufferView **v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  JSC::ArrayBufferView *v120;
  int v121;
  char v122;
  _DWORD *v123;
  char v124;
  _DWORD *v125;
  char v126;
  _DWORD *v127;
  char v128;
  _DWORD *v129;
  char v130;
  _DWORD *v131;
  char v132;
  _DWORD *v133;
  char v134;
  _DWORD *v135;
  char v136;
  _DWORD *v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v116);
  if (v116[1])
    return 0;
  v7 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v120 = v7;
  v8 = this[7];
  if ((unint64_t)v7 < 0xFFFE000000000000)
  {
    v26 = (unint64_t)v7 - 0x2000000000000;
    if ((unint64_t)v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v120, (JSC::JSGlobalObject *)this);
      v26 = v103;
    }
    v27 = (v26 >> 52) & 0x7FF;
    v28 = v27 - 1023;
    v29 = v26 >> (51 - (v26 >> 52));
    if (v27 > 0x433)
      LODWORD(v29) = v26 << ((v26 >> 52) - 51);
    if (v27 >= 0x41F)
      v30 = v29;
    else
      v30 = (((1 << ((v26 >> 52) + 1)) - 1) & v29) + (1 << ((v26 >> 52) + 1));
    if ((v26 & 0x8000000000000000) == 0)
      v31 = v30;
    else
      v31 = -v30;
    if (v28 <= 0x53)
      v9 = v31;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v115);
  if (v115[1])
    return 0;
  v10 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v120 = v10;
  v11 = this[7];
  if ((unint64_t)v10 < 0xFFFE000000000000)
  {
    v32 = (unint64_t)v10 - 0x2000000000000;
    if ((unint64_t)v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v120, (JSC::JSGlobalObject *)this);
      v32 = v104;
    }
    v33 = (v32 >> 52) & 0x7FF;
    v34 = v33 - 1023;
    v35 = v32 >> (51 - (v32 >> 52));
    if (v33 > 0x433)
      LODWORD(v35) = v32 << ((v32 >> 52) - 51);
    if (v33 >= 0x41F)
      v36 = v35;
    else
      v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
    if ((v32 & 0x8000000000000000) == 0)
      v37 = v36;
    else
      v37 = -v36;
    if (v34 <= 0x53)
      v12 = v37;
    else
      v12 = 0;
  }
  else
  {
    v12 = (int)v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v110 = v12;
  v13 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v120 = v13;
  v14 = this[7];
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v38 = (unint64_t)v13 - 0x2000000000000;
    if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v120, (JSC::JSGlobalObject *)this);
      v38 = v105;
    }
    v39 = (v38 >> 52) & 0x7FF;
    if ((v39 - 1023) <= 0x53)
    {
      v43 = v38 >> (51 - (v38 >> 52));
      if (v39 > 0x433)
        LODWORD(v43) = v38 << ((v38 >> 52) - 51);
      if (v39 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << ((v38 >> 52) + 1)) - 1) & v43) + (1 << ((v38 >> 52) + 1));
      if ((v38 & 0x8000000000000000) == 0)
        v45 = v44;
      else
        v45 = -v44;
      v109 = v45;
    }
    else
    {
      v109 = 0;
    }
  }
  else
  {
    v109 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v108 = v9;
  v15 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v120 = v15;
  v16 = this[7];
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v40 = (unint64_t)v15 - 0x2000000000000;
    if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v120, (JSC::JSGlobalObject *)this);
      v40 = v106;
    }
    v41 = (v40 >> 52) & 0x7FF;
    if ((v41 - 1023) <= 0x53)
    {
      v46 = v40 >> (51 - (v40 >> 52));
      if (v41 > 0x433)
        LODWORD(v46) = v40 << ((v40 >> 52) - 51);
      if (v41 >= 0x41F)
        v47 = v46;
      else
        v47 = (((1 << ((v40 >> 52) + 1)) - 1) & v46) + (1 << ((v40 >> 52) + 1));
      if ((v40 & 0x8000000000000000) == 0)
        v48 = v47;
      else
        v48 = -v47;
      v107 = v48;
    }
    else
    {
      v107 = 0;
    }
  }
  else
  {
    v107 = (int)v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v114);
  if (v114[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v113);
  if (v113[1])
    return 0;
  v18 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 14);
  if (((unint64_t)v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v111 = 0;
    v112 = 0;
    goto LABEL_35;
  }
  v111 = this[7];
  if (((unint64_t)v18 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v18 + 5) - 39 > 0xB
    || (*((_BYTE *)v18 + 40) & 6) != 0)
  {
    v119 = 0;
  }
  else
  {
    JSC::JSArrayBufferView::possiblySharedImpl(v18);
    if (v119)
    {
      v19 = 0;
      v120 = v119;
      v121 = 0;
      goto LABEL_28;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v111, 8, "pixels", 7, "WebGL2RenderingContext", 23, v17, "texImage2D", 11, "ArrayBufferView", 16);
  v19 = 1;
  v121 = 1;
  v20 = v119;
  v119 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v20;
  }
LABEL_28:
  LOBYTE(v117) = 0;
  LODWORD(v118) = -1;
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***, JSC::ArrayBufferView **))off_1E332F388[v19])(&v111, &v117, &v120);
  LODWORD(v118) = v19;
  if (v121 != -1)
  {
    ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F378[v121])(&v111, &v120);
    v19 = v118;
  }
  if (v19)
  {
    v21 = 1;
    v112 = 1;
    if (v19 == -1)
    {
      v22 = 0;
LABEL_83:
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F478[v21])(&v120, &v111);
      return v22;
    }
  }
  else
  {
    v23 = (uint64_t)v117;
    v117 = 0;
    v111 = (JSC::ArrayBufferView *)v23;
    v112 = 0;
  }
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***))off_1E332F378[v19])(&v120, &v117);
  v21 = v112;
  if (v112)
    goto LABEL_217;
LABEL_35:
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v119 = v120;
    v49 = v116[0];
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v50
      && (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) != 0
      && (v53 = *(WebCore::InspectorCanvasAgent **)(v52 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v53, (JSC::CallFrame *)((char *)a3 + 8), v49, (uint64_t)&v120);
    }
    else
    {
      LOBYTE(v120) = 0;
      v122 = 0;
    }
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, (JSC::CallFrame *)((char *)a3 + 8), v108, (uint64_t)&v123);
    }
    else
    {
      LOBYTE(v123) = 0;
      v124 = 0;
    }
    v58 = v115[0];
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v59
      && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
      && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v62, (JSC::CallFrame *)((char *)a3 + 8), v58, (uint64_t)&v125);
    }
    else
    {
      LOBYTE(v125) = 0;
      v126 = 0;
    }
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, (JSC::CallFrame *)((char *)a3 + 8), v110, (uint64_t)&v127);
    }
    else
    {
      LOBYTE(v127) = 0;
      v128 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, (JSC::CallFrame *)((char *)a3 + 8), v109, (uint64_t)&v129);
    }
    else
    {
      LOBYTE(v129) = 0;
      v130 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, (JSC::CallFrame *)((char *)a3 + 8), v107, (uint64_t)&v131);
    }
    else
    {
      LOBYTE(v131) = 0;
      v132 = 0;
    }
    v75 = v114[0];
    v76 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v76
      && (v78 = WebCore::InspectorInstrumentation::instrumentingAgents(v76, v77)) != 0
      && (v79 = *(WebCore::InspectorCanvasAgent **)(v78 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v79, (JSC::CallFrame *)((char *)a3 + 8), v75, (uint64_t)&v133);
    }
    else
    {
      LOBYTE(v133) = 0;
      v134 = 0;
    }
    v80 = v113[0];
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, (JSC::CallFrame *)((char *)a3 + 8), v80, (uint64_t)&v135);
    }
    else
    {
      LOBYTE(v135) = 0;
      v136 = 0;
    }
    if (v112)
      goto LABEL_216;
    v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v85
      && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
      && (v88 = *(_QWORD *)(v87 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v88, (JSC::CallFrame *)((char *)a3 + 8), (uint64_t *)&v111, (uint64_t)&v137);
    }
    else
    {
      LOBYTE(v137) = 0;
      v138 = 0;
    }
    v117 = &v120;
    v118 = 9;
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v89)
    {
      v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90);
      if (v91)
      {
        v92 = *(_QWORD *)(v91 + 96);
        if (v92)
          WebCore::InspectorCanvasAgent::recordAction(v92, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v119, &v117);
      }
    }
    if (v138)
    {
      v93 = v137;
      v137 = 0;
      if (v93)
      {
        if (*v93 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v93;
      }
    }
    if (v136)
    {
      v94 = v135;
      v135 = 0;
      if (v94)
      {
        if (*v94 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v94;
      }
    }
    if (v134)
    {
      v95 = v133;
      v133 = 0;
      if (v95)
      {
        if (*v95 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v95;
      }
    }
    if (v132)
    {
      v96 = v131;
      v131 = 0;
      if (v96)
      {
        if (*v96 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v96;
      }
    }
    if (v130)
    {
      v97 = v129;
      v129 = 0;
      if (v97)
      {
        if (*v97 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v97;
      }
    }
    if (v128)
    {
      v98 = v127;
      v127 = 0;
      if (v98)
      {
        if (*v98 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v98;
      }
    }
    if (v126)
    {
      v99 = v125;
      v125 = 0;
      if (v99)
      {
        if (*v99 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v99;
      }
    }
    if (v124)
    {
      v100 = v123;
      v123 = 0;
      if (v100)
      {
        if (*v100 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v100;
      }
    }
    if (v122)
    {
      v101 = v120;
      v120 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v101;
      }
    }
    v102 = v119;
    v119 = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v90);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  if (v112)
  {
LABEL_216:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_217:
    v22 = 0;
    goto LABEL_82;
  }
  v24 = v111;
  v111 = 0;
  v120 = v24;
  if (!*((_BYTE *)a3 + 364))
  {
    if (*((_QWORD *)a3 + 122))
      v25 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    if (v25)
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a3, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    }
    else
    {
      WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a3, 0, v116[0], v108, v115[0], v110, v109, 1, v107, v114[0], v113[0], 0, 0, 0, &v120, 0, 0);
      v24 = v120;
    }
  }
  v120 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v24;
  }
  v21 = v112;
  v22 = 10;
LABEL_82:
  if (v21 != -1)
    goto LABEL_83;
  return v22;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v6;
  unint64_t v7;
  JSC::VM *v8;
  int v9;
  unint64_t v10;
  JSC::VM *v11;
  int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  int v21;
  JSC::CallFrame *v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  JSValue v63;
  WTF::StringImpl *v64;
  WebCore::InspectorInstrumentation *v65;
  WebCore::ScriptExecutionContext *v66;
  uint64_t v67;
  WebCore::InspectorCanvasAgent *v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  WebCore::InspectorCanvasAgent *v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  unsigned int v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  unsigned int v90;
  WebCore::InspectorInstrumentation *v91;
  WebCore::ScriptExecutionContext *v92;
  uint64_t v93;
  WebCore::InspectorCanvasAgent *v94;
  WebCore::InspectorInstrumentation *v95;
  WebCore::ScriptExecutionContext *v96;
  uint64_t v97;
  uint64_t v98;
  WebCore::InspectorInstrumentation *v99;
  WebCore::ScriptExecutionContext *v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  JSC::VM *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  WebCore::CanvasRenderingContext *v124;
  _DWORD v126[2];
  _DWORD v127[2];
  _DWORD v128[2];
  int v129[2];
  WTF::StringImpl *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  int v138;
  unint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  _DWORD *v143;
  int v144;
  int v145;
  uint64_t v146;
  _DWORD *v147;
  char v148;
  _DWORD *v149;
  char v150;
  _DWORD *v151;
  char v152;
  _DWORD *v153;
  char v154;
  _DWORD *v155;
  char v156;
  _DWORD *v157;
  char v158;
  char v159[8];
  uint64_t v160;
  unsigned int v161;
  int v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v128);
  if (v128[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v135 = (WTF::StringImpl *)v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v7 < 0xFFFE000000000000)
  {
    v31 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v31 = v113;
    }
    v32 = (v31 >> 52) & 0x7FF;
    v33 = v32 - 1023;
    v34 = v31 >> (51 - (v31 >> 52));
    if (v32 > 0x433)
      LODWORD(v34) = v31 << ((v31 >> 52) - 51);
    if (v32 >= 0x41F)
      v35 = v34;
    else
      v35 = (((1 << ((v31 >> 52) + 1)) - 1) & v34) + (1 << ((v31 >> 52) + 1));
    if ((v31 & 0x8000000000000000) == 0)
      v36 = v35;
    else
      v36 = -v35;
    if (v33 <= 0x53)
      v9 = v36;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v135 = (WTF::StringImpl *)v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v37 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v37 = v114;
    }
    v38 = (v37 >> 52) & 0x7FF;
    v39 = v38 - 1023;
    v40 = v37 >> (51 - (v37 >> 52));
    if (v38 > 0x433)
      LODWORD(v40) = v37 << ((v37 >> 52) - 51);
    if (v38 >= 0x41F)
      v41 = v40;
    else
      v41 = (((1 << ((v37 >> 52) + 1)) - 1) & v40) + (1 << ((v37 >> 52) + 1));
    if ((v37 & 0x8000000000000000) == 0)
      v42 = v41;
    else
      v42 = -v41;
    if (v39 <= 0x53)
      v12 = v42;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v135 = (WTF::StringImpl *)v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v43 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v43 = v115;
    }
    v44 = (v43 >> 52) & 0x7FF;
    v45 = v44 - 1023;
    v46 = v43 >> (51 - (v43 >> 52));
    if (v44 > 0x433)
      LODWORD(v46) = v43 << ((v43 >> 52) - 51);
    if (v44 >= 0x41F)
      v47 = v46;
    else
      v47 = (((1 << ((v43 >> 52) + 1)) - 1) & v46) + (1 << ((v43 >> 52) + 1));
    if ((v43 & 0x8000000000000000) == 0)
      v48 = v47;
    else
      v48 = -v47;
    if (v45 > 0x53)
      v48 = 0;
    v122 = v48;
  }
  else
  {
    v122 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v121 = v12;
  v118 = v6;
  v15 = *((_QWORD *)a2 + 10);
  v135 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 < 0xFFFE000000000000)
  {
    v49 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v49 = v116;
    }
    v50 = (v49 >> 52) & 0x7FF;
    if ((v50 - 1023) <= 0x53)
    {
      v53 = v49 >> (51 - (v49 >> 52));
      if (v50 > 0x433)
        LODWORD(v53) = v49 << ((v49 >> 52) - 51);
      if (v50 >= 0x41F)
        v54 = v53;
      else
        v54 = (((1 << ((v49 >> 52) + 1)) - 1) & v53) + (1 << ((v49 >> 52) + 1));
      if ((v49 & 0x8000000000000000) == 0)
        v17 = v54;
      else
        v17 = -v54;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v120 = v9;
  v18 = *((_QWORD *)a2 + 11);
  v135 = (WTF::StringImpl *)v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 < 0xFFFE000000000000)
  {
    v51 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v51 = v117;
    }
    v52 = (v51 >> 52) & 0x7FF;
    if ((v52 - 1023) <= 0x53)
    {
      v55 = v51 >> (51 - (v51 >> 52));
      if (v52 > 0x433)
        LODWORD(v55) = v51 << ((v51 >> 52) - 51);
      if (v52 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v51 >> 52) + 1)) - 1) & v55) + (1 << ((v51 >> 52) + 1));
      if ((v51 & 0x8000000000000000) == 0)
        v20 = v56;
      else
        v20 = -v56;
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = v18;
  }
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v127);
  if (v127[1])
    return 0;
  v119 = v17;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v126);
  if (v126[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 14), (uint64_t)v159);
  v21 = v162;
  if (!v162)
  {
    v22 = a3;
    if (*((_BYTE *)a3 + 33))
    {
      v124 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v132 = v135;
      v123 = v128[0];
      v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v57
        && (v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58)) != 0
        && (v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v60, v124, v123, (uint64_t)&v135);
      }
      else
      {
        LOBYTE(v135) = 0;
        LOBYTE(v137) = 0;
      }
      v65 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v65
        && (v67 = WebCore::InspectorInstrumentation::instrumentingAgents(v65, v66)) != 0
        && (v68 = *(WebCore::InspectorCanvasAgent **)(v67 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v68, v124, v120, (uint64_t)&v139);
      }
      else
      {
        LOBYTE(v139) = 0;
        LOBYTE(v142) = 0;
      }
      v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v69
        && (v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70)) != 0
        && (v72 = *(WebCore::InspectorCanvasAgent **)(v71 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v72, v124, v121, (uint64_t)&v143);
      }
      else
      {
        LOBYTE(v143) = 0;
        LOBYTE(v146) = 0;
      }
      v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v73
        && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
        && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v76, v124, v122, (uint64_t)&v147);
      }
      else
      {
        LOBYTE(v147) = 0;
        v148 = 0;
      }
      v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v77
        && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
        && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v80, v124, v17, (uint64_t)&v149);
      }
      else
      {
        LOBYTE(v149) = 0;
        v150 = 0;
      }
      v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v81
        && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
        && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v84, v124, v20, (uint64_t)&v151);
      }
      else
      {
        LOBYTE(v151) = 0;
        v152 = 0;
      }
      v85 = v127[0];
      v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v86
        && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
        && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v89, v124, v85, (uint64_t)&v153);
      }
      else
      {
        LOBYTE(v153) = 0;
        v154 = 0;
      }
      v90 = v126[0];
      v91 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v91
        && (v93 = WebCore::InspectorInstrumentation::instrumentingAgents(v91, v92)) != 0
        && (v94 = *(WebCore::InspectorCanvasAgent **)(v93 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v94, v124, v90, (uint64_t)&v155);
      }
      else
      {
        LOBYTE(v155) = 0;
        v156 = 0;
      }
      if (v162)
        goto LABEL_230;
      v95 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v95
        && (v97 = WebCore::InspectorInstrumentation::instrumentingAgents(v95, v96)) != 0
        && (v98 = *(_QWORD *)(v97 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v98, (uint64_t)v124, (uint64_t)&v160);
      }
      else
      {
        LOBYTE(v157) = 0;
        v158 = 0;
      }
      *(_QWORD *)v129 = &v135;
      v130 = (WTF::StringImpl *)9;
      v99 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v99)
      {
        v101 = WebCore::InspectorInstrumentation::instrumentingAgents(v99, v100);
        if (v101)
        {
          v102 = *(_QWORD *)(v101 + 96);
          if (v102)
            WebCore::InspectorCanvasAgent::recordAction(v102, v124, (const WTF::StringImpl *)&v132, v129);
        }
      }
      if (v158)
      {
        v103 = v157;
        v157 = 0;
        if (v103)
        {
          if (*v103 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v103;
        }
      }
      if (v156)
      {
        v104 = v155;
        v155 = 0;
        if (v104)
        {
          if (*v104 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v104;
        }
      }
      if (v154)
      {
        v105 = v153;
        v153 = 0;
        if (v105)
        {
          if (*v105 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v105;
        }
      }
      if (v152)
      {
        v106 = v151;
        v151 = 0;
        if (v106)
        {
          if (*v106 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v106;
        }
      }
      if (v150)
      {
        v107 = v149;
        v149 = 0;
        if (v107)
        {
          if (*v107 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v107;
        }
      }
      if (v148)
      {
        v108 = v147;
        v147 = 0;
        if (v108)
        {
          if (*v108 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v108;
        }
      }
      if ((_BYTE)v146)
      {
        v109 = v143;
        v143 = 0;
        if (v109)
        {
          if (*v109 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v109;
        }
      }
      if ((_BYTE)v142)
      {
        v110 = (_DWORD *)v139;
        v139 = 0;
        if (v110)
        {
          if (*v110 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v110;
        }
      }
      if ((_BYTE)v137)
      {
        v111 = v135;
        v135 = 0;
        if (v111)
        {
          if (*(_DWORD *)v111 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v111;
        }
      }
      v112 = v132;
      v132 = 0;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
          WTF::StringImpl::destroy(v112, v100);
        else
          *(_DWORD *)v112 -= 2;
      }
      v22 = a3;
    }
    if (!v162)
    {
      v23 = v128[0];
      v24 = v127[0];
      v25 = v126[0];
      LOBYTE(v132) = 0;
      v133 = -1;
      v26 = v161;
      if (v161 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E332F4C0[v161])(&v135, &v132, &v160);
        v22 = a3;
        v133 = v26;
      }
      if (*((_BYTE *)v22 + 364))
        goto LABEL_30;
      if (*((_QWORD *)v22 + 122))
        v27 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v27 = 0;
      if (v27)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
LABEL_30:
        *(_QWORD *)v129 = 0;
        v130 = 0;
        v131 = 0;
        goto LABEL_31;
      }
      v30 = *(_DWORD **)((char *)v22 + 332);
      v135 = v22;
      LODWORD(v136) = 0;
      HIDWORD(v136) = v23;
      v137 = v120;
      v138 = v121;
      v139 = __PAIR64__(v24, v20);
      v140 = v25;
      v141 = 0;
      v142 = 0;
      v143 = v30;
      v144 = v122;
      v145 = v119;
      v146 = 1;
      if ((_DWORD)v26 != -1)
      {
        v134 = &v135;
        ((void (*)(int *__return_ptr, WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v26])(v129, &v134, &v132);
LABEL_31:
        if (v133 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F488[v133])(&v135, &v132);
        if (!(_BYTE)v131)
        {
          v28 = 10;
LABEL_35:
          v21 = v162;
          goto LABEL_36;
        }
        v61 = (WTF::StringImpl *)LOBYTE(v129[0]);
        LOBYTE(v135) = v129[0];
        v62 = v130;
        v130 = 0;
        v136 = v62;
        if (!*((_QWORD *)v118 + 2))
        {
          v63.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v129[0]), (JSC::JSGlobalObject *)&v136);
          JSC::VM::throwException(v118, this, v63);
          v62 = v136;
        }
        v136 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
            WTF::StringImpl::destroy(v62, v61);
          else
            *(_DWORD *)v62 -= 2;
        }
        if ((_BYTE)v131)
        {
          v64 = v130;
          v130 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 != 2)
            {
              v28 = 0;
              *(_DWORD *)v64 -= 2;
              goto LABEL_35;
            }
            WTF::StringImpl::destroy(v64, v61);
          }
        }
        v28 = 0;
        goto LABEL_35;
      }
    }
LABEL_230:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v28 = 0;
LABEL_36:
  if (v21 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F4F8[v21])(&v135, &v160);
  return v28;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::CallFrame *v21;
  JSC::VM *v22;
  double v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  JSC::CallFrame *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  WebCore::InspectorCanvasAgent *v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  WebCore::InspectorCanvasAgent *v71;
  WebCore::InspectorInstrumentation *v72;
  WebCore::ScriptExecutionContext *v73;
  uint64_t v74;
  WebCore::InspectorCanvasAgent *v75;
  WebCore::InspectorInstrumentation *v76;
  WebCore::ScriptExecutionContext *v77;
  uint64_t v78;
  WebCore::InspectorCanvasAgent *v79;
  unsigned int v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  unsigned int v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  double v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  WebCore::CanvasRenderingContext *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  _QWORD v121[2];
  WTF::StringImpl *v122;
  unsigned int v123[2];
  unsigned int v124[2];
  unsigned int v125[2];
  _QWORD v126[2];
  char v127;
  _DWORD *v128;
  char v129;
  _DWORD *v130;
  char v131;
  _DWORD *v132;
  char v133;
  _DWORD *v134;
  char v135;
  _DWORD *v136;
  char v137;
  _DWORD *v138;
  char v139;
  _DWORD *v140;
  char v141;
  _DWORD *v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v125);
  if (v125[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v126[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v25 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v25 = v109;
    }
    v26 = (v25 >> 52) & 0x7FF;
    v27 = v26 - 1023;
    v28 = v25 >> (51 - (v25 >> 52));
    if (v26 > 0x433)
      LODWORD(v28) = v25 << ((v25 >> 52) - 51);
    if (v26 >= 0x41F)
      v29 = v28;
    else
      v29 = (((1 << ((v25 >> 52) + 1)) - 1) & v28) + (1 << ((v25 >> 52) + 1));
    if ((v25 & 0x8000000000000000) == 0)
      v30 = v29;
    else
      v30 = -v29;
    if (v27 <= 0x53)
      v8 = v30;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v126[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v31 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v31 = v110;
    }
    v32 = (v31 >> 52) & 0x7FF;
    v33 = v32 - 1023;
    v34 = v31 >> (51 - (v31 >> 52));
    if (v32 > 0x433)
      LODWORD(v34) = v31 << ((v31 >> 52) - 51);
    if (v32 >= 0x41F)
      v35 = v34;
    else
      v35 = (((1 << ((v31 >> 52) + 1)) - 1) & v34) + (1 << ((v31 >> 52) + 1));
    if ((v31 & 0x8000000000000000) == 0)
      v36 = v35;
    else
      v36 = -v35;
    if (v33 <= 0x53)
      v11 = v36;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v126[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v37 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v37 = v111;
    }
    v38 = (v37 >> 52) & 0x7FF;
    v39 = v38 - 1023;
    v40 = v37 >> (51 - (v37 >> 52));
    if (v38 > 0x433)
      LODWORD(v40) = v37 << ((v37 >> 52) - 51);
    if (v38 >= 0x41F)
      v41 = v40;
    else
      v41 = (((1 << ((v37 >> 52) + 1)) - 1) & v40) + (1 << ((v37 >> 52) + 1));
    if ((v37 & 0x8000000000000000) == 0)
      v42 = v41;
    else
      v42 = -v41;
    if (v39 <= 0x53)
      v14 = v42;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v119 = v14;
  v15 = *((_QWORD *)a2 + 10);
  v126[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v43 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v43 = v112;
    }
    v44 = (v43 >> 52) & 0x7FF;
    if ((v44 - 1023) <= 0x53)
    {
      v48 = v43 >> (51 - (v43 >> 52));
      if (v44 > 0x433)
        LODWORD(v48) = v43 << ((v43 >> 52) - 51);
      if (v44 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v43 >> 52) + 1)) - 1) & v48) + (1 << ((v43 >> 52) + 1));
      if ((v43 & 0x8000000000000000) == 0)
        v50 = v49;
      else
        v50 = -v49;
      v118 = v50;
    }
    else
    {
      v118 = 0;
    }
  }
  else
  {
    v118 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v117 = v11;
  v17 = *((_QWORD *)a2 + 11);
  v126[0] = v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v45 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v45 = v113;
    }
    v46 = (v45 >> 52) & 0x7FF;
    if ((v46 - 1023) <= 0x53)
    {
      v51 = v45 >> (51 - (v45 >> 52));
      if (v46 > 0x433)
        LODWORD(v51) = v45 << ((v45 >> 52) - 51);
      if (v46 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v45 >> 52) + 1)) - 1) & v51) + (1 << ((v45 >> 52) + 1));
      if ((v45 & 0x8000000000000000) == 0)
        v53 = v52;
      else
        v53 = -v52;
      v116 = v53;
    }
    else
    {
      v116 = 0;
    }
  }
  else
  {
    v116 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v124);
  if (v124[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v123);
  if (v123[1])
    return 0;
  v19 = *((_QWORD *)a2 + 14);
  v126[0] = v19;
  if (v19 < 0xFFFE000000000000)
  {
    v22 = this[7];
    if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v23 = v108;
    }
    else
    {
      *(_QWORD *)&v23 = v19 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v21 = a3;
    if (fabs(v23) == INFINITY)
    {
      v20 = 0;
    }
    else
    {
      v24 = fmod(trunc(v23), 1.84467441e19);
      if (v24 >= 0.0)
        v20 = (unint64_t)v24;
      else
        v20 = -(uint64_t)(unint64_t)-v24;
    }
  }
  else
  {
    v20 = (int)v19;
    v21 = a3;
  }
  if (*((_BYTE *)v21 + 33))
  {
    v115 = (JSC::CallFrame *)((char *)v21 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v122 = (WTF::StringImpl *)v126[0];
    v54 = v21;
    v55 = v125[0];
    v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v54 + 5) + 144))(*((_QWORD *)v54 + 5));
    if (v56
      && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
      && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v59, v115, v55, (uint64_t)v126);
    }
    else
    {
      LOBYTE(v126[0]) = 0;
      v127 = 0;
    }
    v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v60
      && (v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61)) != 0
      && (v63 = *(WebCore::InspectorCanvasAgent **)(v62 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v63, v115, v8, (uint64_t)&v128);
    }
    else
    {
      LOBYTE(v128) = 0;
      v129 = 0;
    }
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, v115, v117, (uint64_t)&v130);
    }
    else
    {
      LOBYTE(v130) = 0;
      v131 = 0;
    }
    v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v68
      && (v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69)) != 0
      && (v71 = *(WebCore::InspectorCanvasAgent **)(v70 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v71, v115, v119, (uint64_t)&v132);
    }
    else
    {
      LOBYTE(v132) = 0;
      v133 = 0;
    }
    v72 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v72
      && (v74 = WebCore::InspectorInstrumentation::instrumentingAgents(v72, v73)) != 0
      && (v75 = *(WebCore::InspectorCanvasAgent **)(v74 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v75, v115, v118, (uint64_t)&v134);
    }
    else
    {
      LOBYTE(v134) = 0;
      v135 = 0;
    }
    v76 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v76
      && (v78 = WebCore::InspectorInstrumentation::instrumentingAgents(v76, v77)) != 0
      && (v79 = *(WebCore::InspectorCanvasAgent **)(v78 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v79, v115, v116, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v137 = 0;
    }
    v80 = v124[0];
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, v115, v80, (uint64_t)&v138);
    }
    else
    {
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v85 = v123[0];
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v86
      && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
      && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v89, v115, v85, (uint64_t)&v140);
    }
    else
    {
      LOBYTE(v140) = 0;
      v141 = 0;
    }
    v21 = a3;
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v115, v20, (uint64_t)&v142);
    }
    else
    {
      LOBYTE(v142) = 0;
      v143 = 0;
    }
    v121[0] = v126;
    v121[1] = 9;
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94)
    {
      v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95);
      if (v96)
      {
        v97 = *(_QWORD *)(v96 + 96);
        if (v97)
          WebCore::InspectorCanvasAgent::recordAction(v97, v115, (const WTF::StringImpl *)&v122, v121);
      }
    }
    if (v143)
    {
      v98 = v142;
      v142 = 0;
      if (v98)
      {
        if (*v98 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v98;
      }
    }
    if (v141)
    {
      v99 = v140;
      v140 = 0;
      if (v99)
      {
        if (*v99 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v99;
      }
    }
    if (v139)
    {
      v100 = v138;
      v138 = 0;
      if (v100)
      {
        if (*v100 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v100;
      }
    }
    if (v137)
    {
      v101 = v136;
      v136 = 0;
      if (v101)
      {
        if (*v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v101;
      }
    }
    if (v135)
    {
      v102 = v134;
      v134 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v133)
    {
      v103 = v132;
      v132 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v131)
    {
      v104 = v130;
      v130 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v129)
    {
      v105 = v128;
      v128 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v127)
    {
      v106 = (_DWORD *)v126[0];
      v126[0] = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    v107 = v122;
    v122 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v95);
      else
        *(_DWORD *)v107 -= 2;
    }
  }
  LODWORD(v114) = v123[0];
  WebCore::WebGL2RenderingContext::texImage2D(v21, v125[0], v8, v117, v119, v118, v116, v124[0], v114, v20);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D4Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::ArrayBufferView *v7;
  JSC::VM *v8;
  unsigned int v9;
  JSC::ArrayBufferView *v10;
  JSC::VM *v11;
  unsigned int v12;
  JSC::ArrayBufferView *v13;
  JSC::VM *v14;
  JSC::ArrayBufferView *v15;
  JSC::VM *v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  uint64_t v19;
  JSC::JSArrayBufferView *v20;
  int v21;
  WTF::StringImpl *v22;
  JSC::CallFrame *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  JSC::ArrayBufferView *v27;
  uint64_t (*v28)();
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  WebCore::InspectorInstrumentation *v79;
  WebCore::ScriptExecutionContext *v80;
  uint64_t v81;
  WebCore::InspectorCanvasAgent *v82;
  unsigned int v83;
  WebCore::InspectorInstrumentation *v84;
  WebCore::ScriptExecutionContext *v85;
  uint64_t v86;
  WebCore::InspectorCanvasAgent *v87;
  unsigned int v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  WebCore::InspectorInstrumentation *v93;
  WebCore::ScriptExecutionContext *v94;
  uint64_t v95;
  uint64_t v96;
  WebCore::InspectorInstrumentation *v97;
  WebCore::ScriptExecutionContext *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  JSC::ArrayBufferView *v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  JSC::ArrayBufferView *v121;
  int v122;
  int v123[2];
  unsigned int v124[2];
  _DWORD v125[2];
  JSC::ArrayBufferView **v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  JSC::ArrayBufferView *v129;
  int v130;
  char v131;
  _DWORD *v132;
  char v133;
  _DWORD *v134;
  char v135;
  _DWORD *v136;
  char v137;
  _DWORD *v138;
  char v139;
  _DWORD *v140;
  char v141;
  _DWORD *v142;
  char v143;
  _DWORD *v144;
  char v145;
  _DWORD *v146;
  char v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v125);
  if (v125[1])
    return 0;
  v7 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v129 = v7;
  v8 = this[7];
  if ((unint64_t)v7 < 0xFFFE000000000000)
  {
    v29 = (unint64_t)v7 - 0x2000000000000;
    if ((unint64_t)v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)this);
      v29 = v111;
    }
    v30 = (v29 >> 52) & 0x7FF;
    v31 = v30 - 1023;
    v32 = v29 >> (51 - (v29 >> 52));
    if (v30 > 0x433)
      LODWORD(v32) = v29 << ((v29 >> 52) - 51);
    if (v30 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
    if ((v29 & 0x8000000000000000) == 0)
      v34 = v33;
    else
      v34 = -v33;
    if (v31 <= 0x53)
      v9 = v34;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v129 = v10;
  v11 = this[7];
  if ((unint64_t)v10 < 0xFFFE000000000000)
  {
    v35 = (unint64_t)v10 - 0x2000000000000;
    if ((unint64_t)v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)this);
      v35 = v112;
    }
    v36 = (v35 >> 52) & 0x7FF;
    v37 = v36 - 1023;
    v38 = v35 >> (51 - (v35 >> 52));
    if (v36 > 0x433)
      LODWORD(v38) = v35 << ((v35 >> 52) - 51);
    if (v36 >= 0x41F)
      v39 = v38;
    else
      v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
    if ((v35 & 0x8000000000000000) == 0)
      v40 = v39;
    else
      v40 = -v39;
    if (v37 <= 0x53)
      v12 = v40;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v129 = v13;
  v14 = this[7];
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v41 = (unint64_t)v13 - 0x2000000000000;
    if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)this);
      v41 = v113;
    }
    v42 = (v41 >> 52) & 0x7FF;
    v43 = v42 - 1023;
    v44 = v41 >> (51 - (v41 >> 52));
    if (v42 > 0x433)
      LODWORD(v44) = v41 << ((v41 >> 52) - 51);
    if (v42 >= 0x41F)
      v45 = v44;
    else
      v45 = (((1 << ((v41 >> 52) + 1)) - 1) & v44) + (1 << ((v41 >> 52) + 1));
    if ((v41 & 0x8000000000000000) == 0)
      v46 = v45;
    else
      v46 = -v45;
    if (v43 > 0x53)
      v46 = 0;
    v120 = v46;
  }
  else
  {
    v120 = (int)v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v119 = v12;
  v15 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v129 = v15;
  v16 = this[7];
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v47 = (unint64_t)v15 - 0x2000000000000;
    if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)this);
      v47 = v114;
    }
    v48 = (v47 >> 52) & 0x7FF;
    if ((v48 - 1023) <= 0x53)
    {
      v52 = v47 >> (51 - (v47 >> 52));
      if (v48 > 0x433)
        LODWORD(v52) = v47 << ((v47 >> 52) - 51);
      if (v48 >= 0x41F)
        v53 = v52;
      else
        v53 = (((1 << ((v47 >> 52) + 1)) - 1) & v52) + (1 << ((v47 >> 52) + 1));
      if ((v47 & 0x8000000000000000) == 0)
        v54 = v53;
      else
        v54 = -v53;
      v118 = v54;
    }
    else
    {
      v118 = 0;
    }
  }
  else
  {
    v118 = (int)v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v117 = v9;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v129 = v17;
  v18 = this[7];
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v49 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, (JSC::JSGlobalObject *)this);
      v49 = v115;
    }
    v50 = (v49 >> 52) & 0x7FF;
    if ((v50 - 1023) <= 0x53)
    {
      v55 = v49 >> (51 - (v49 >> 52));
      if (v50 > 0x433)
        LODWORD(v55) = v49 << ((v49 >> 52) - 51);
      if (v50 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v49 >> 52) + 1)) - 1) & v55) + (1 << ((v49 >> 52) + 1));
      if ((v49 & 0x8000000000000000) == 0)
        v57 = v56;
      else
        v57 = -v56;
      v116 = v57;
    }
    else
    {
      v116 = 0;
    }
  }
  else
  {
    v116 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v124);
  if (v124[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v123);
  if (v123[1])
    return 0;
  v20 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 14);
  if (((unint64_t)v20 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v121 = 0;
    v122 = 0;
    goto LABEL_37;
  }
  v121 = this[7];
  if (((unint64_t)v20 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v20 + 5) - 39 > 0xB
    || (*((_BYTE *)v20 + 40) & 6) != 0)
  {
    v128 = 0;
  }
  else
  {
    JSC::JSArrayBufferView::possiblySharedImpl(v20);
    if (v128)
    {
      v23 = a3;
      v21 = 0;
      v129 = v128;
      v130 = 0;
      goto LABEL_30;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v121, 8, "pixels", 7, "WebGL2RenderingContext", 23, v19, "texSubImage2D", 14, "ArrayBufferView", 16);
  v21 = 1;
  v130 = 1;
  v22 = v128;
  v128 = 0;
  if (v22)
  {
    v23 = a3;
    if (*(_DWORD *)v22 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v22;
  }
  else
  {
    v23 = a3;
  }
LABEL_30:
  LOBYTE(v126) = 0;
  LODWORD(v127) = -1;
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***, JSC::ArrayBufferView **))off_1E332F388[v21])(&v121, &v126, &v129);
  LODWORD(v127) = v21;
  if (v130 != -1)
  {
    ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F378[v130])(&v121, &v129);
    v21 = v127;
  }
  if (v21)
  {
    v24 = 1;
    v122 = 1;
    if (v21 == -1)
    {
      v25 = 0;
LABEL_98:
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F478[v24])(&v129, &v121);
      return v25;
    }
  }
  else
  {
    v26 = (uint64_t)v126;
    v126 = 0;
    v121 = (JSC::ArrayBufferView *)v26;
    v122 = 0;
  }
  ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView ***))off_1E332F378[v21])(&v129, &v126);
  v24 = v122;
  a3 = v23;
  if (v122)
    goto LABEL_233;
LABEL_37:
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v128 = v129;
    v58 = v125[0];
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v59
      && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
      && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v62, (JSC::CallFrame *)((char *)a3 + 8), v58, (uint64_t)&v129);
    }
    else
    {
      LOBYTE(v129) = 0;
      v131 = 0;
    }
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, (JSC::CallFrame *)((char *)a3 + 8), v117, (uint64_t)&v132);
    }
    else
    {
      LOBYTE(v132) = 0;
      v133 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, (JSC::CallFrame *)((char *)a3 + 8), v119, (uint64_t)&v134);
    }
    else
    {
      LOBYTE(v134) = 0;
      v135 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, (JSC::CallFrame *)((char *)a3 + 8), v120, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v137 = 0;
    }
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, (JSC::CallFrame *)((char *)a3 + 8), v118, (uint64_t)&v138);
    }
    else
    {
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v79 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v79
      && (v81 = WebCore::InspectorInstrumentation::instrumentingAgents(v79, v80)) != 0
      && (v82 = *(WebCore::InspectorCanvasAgent **)(v81 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v82, (JSC::CallFrame *)((char *)a3 + 8), v116, (uint64_t)&v140);
    }
    else
    {
      LOBYTE(v140) = 0;
      v141 = 0;
    }
    v83 = v124[0];
    v84 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v84
      && (v86 = WebCore::InspectorInstrumentation::instrumentingAgents(v84, v85)) != 0
      && (v87 = *(WebCore::InspectorCanvasAgent **)(v86 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v87, (JSC::CallFrame *)((char *)a3 + 8), v83, (uint64_t)&v142);
    }
    else
    {
      LOBYTE(v142) = 0;
      v143 = 0;
    }
    v88 = v123[0];
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v89
      && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
      && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v92, (JSC::CallFrame *)((char *)a3 + 8), v88, (uint64_t)&v144);
    }
    else
    {
      LOBYTE(v144) = 0;
      v145 = 0;
    }
    if (v122)
      goto LABEL_232;
    v93 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v93
      && (v95 = WebCore::InspectorInstrumentation::instrumentingAgents(v93, v94)) != 0
      && (v96 = *(_QWORD *)(v95 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v96, (JSC::CallFrame *)((char *)a3 + 8), (uint64_t *)&v121, (uint64_t)&v146);
    }
    else
    {
      LOBYTE(v146) = 0;
      v147 = 0;
    }
    v126 = &v129;
    v127 = 9;
    v97 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v97)
    {
      v99 = WebCore::InspectorInstrumentation::instrumentingAgents(v97, v98);
      if (v99)
      {
        v100 = *(_QWORD *)(v99 + 96);
        if (v100)
          WebCore::InspectorCanvasAgent::recordAction(v100, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)&v128, &v126);
      }
    }
    if (v147)
    {
      v101 = v146;
      v146 = 0;
      if (v101)
      {
        if (*v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v101;
      }
    }
    if (v145)
    {
      v102 = v144;
      v144 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v143)
    {
      v103 = v142;
      v142 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v141)
    {
      v104 = v140;
      v140 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v139)
    {
      v105 = v138;
      v138 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v137)
    {
      v106 = v136;
      v136 = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    if (v135)
    {
      v107 = v134;
      v134 = 0;
      if (v107)
      {
        if (*v107 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v107;
      }
    }
    if (v133)
    {
      v108 = v132;
      v132 = 0;
      if (v108)
      {
        if (*v108 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v108;
      }
    }
    if (v131)
    {
      v109 = v129;
      v129 = 0;
      if (v109)
      {
        if (*(_DWORD *)v109 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v109;
      }
    }
    v110 = v128;
    v128 = 0;
    if (v110)
    {
      if (*(_DWORD *)v110 == 2)
        WTF::StringImpl::destroy(v110, v98);
      else
        *(_DWORD *)v110 -= 2;
    }
  }
  if (v122)
  {
LABEL_232:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_233:
    v25 = 0;
    goto LABEL_97;
  }
  v27 = v121;
  v121 = 0;
  v129 = v27;
  if (!*((_BYTE *)a3 + 364))
  {
    if (*((_QWORD *)a3 + 122))
      v28 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v28 = 0;
    if (v28)
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a3, 1282, (uint64_t)"texSubImage2D", 14, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    }
    else
    {
      WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(a3, 1, v125[0], v117, 0, v118, v116, 1, 0, v124[0], v123[0], v119, v120, 0, &v129, 1, 0);
      v27 = v129;
    }
  }
  v129 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v27;
  }
  v24 = v122;
  v25 = 10;
LABEL_97:
  if (v24 != -1)
    goto LABEL_98;
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v6;
  unint64_t v7;
  JSC::VM *v8;
  int v9;
  unint64_t v10;
  JSC::VM *v11;
  int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  int v21;
  JSC::CallFrame *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  WebCore::CanvasRenderingContext *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  WebCore::InspectorCanvasAgent *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  JSValue v64;
  WTF::StringImpl *v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  WebCore::InspectorCanvasAgent *v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  unsigned int v86;
  WebCore::InspectorInstrumentation *v87;
  WebCore::ScriptExecutionContext *v88;
  uint64_t v89;
  WebCore::InspectorCanvasAgent *v90;
  unsigned int v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  WebCore::InspectorCanvasAgent *v95;
  WebCore::InspectorInstrumentation *v96;
  WebCore::ScriptExecutionContext *v97;
  uint64_t v98;
  uint64_t v99;
  WebCore::InspectorInstrumentation *v100;
  WebCore::ScriptExecutionContext *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  JSC::VM *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  _DWORD v126[2];
  _DWORD v127[2];
  _DWORD v128[2];
  int v129[2];
  WTF::StringImpl *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  int v133;
  WTF::StringImpl **v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  int v138;
  _DWORD *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _DWORD *v144;
  int v145;
  int v146;
  uint64_t v147;
  _DWORD *v148;
  char v149;
  _DWORD *v150;
  char v151;
  _DWORD *v152;
  char v153;
  _DWORD *v154;
  char v155;
  _DWORD *v156;
  char v157;
  _DWORD *v158;
  char v159;
  char v160[8];
  uint64_t v161;
  unsigned int v162;
  int v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v128);
  if (v128[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v135 = (WTF::StringImpl *)v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v7 < 0xFFFE000000000000)
  {
    v31 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v31 = v114;
    }
    v32 = (v31 >> 52) & 0x7FF;
    v33 = v32 - 1023;
    v34 = v31 >> (51 - (v31 >> 52));
    if (v32 > 0x433)
      LODWORD(v34) = v31 << ((v31 >> 52) - 51);
    if (v32 >= 0x41F)
      v35 = v34;
    else
      v35 = (((1 << ((v31 >> 52) + 1)) - 1) & v34) + (1 << ((v31 >> 52) + 1));
    if ((v31 & 0x8000000000000000) == 0)
      v36 = v35;
    else
      v36 = -v35;
    if (v33 <= 0x53)
      v9 = v36;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v135 = (WTF::StringImpl *)v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v37 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v37 = v115;
    }
    v38 = (v37 >> 52) & 0x7FF;
    v39 = v38 - 1023;
    v40 = v37 >> (51 - (v37 >> 52));
    if (v38 > 0x433)
      LODWORD(v40) = v37 << ((v37 >> 52) - 51);
    if (v38 >= 0x41F)
      v41 = v40;
    else
      v41 = (((1 << ((v37 >> 52) + 1)) - 1) & v40) + (1 << ((v37 >> 52) + 1));
    if ((v37 & 0x8000000000000000) == 0)
      v42 = v41;
    else
      v42 = -v41;
    if (v39 <= 0x53)
      v12 = v42;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v135 = (WTF::StringImpl *)v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v43 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v43 = v116;
    }
    v44 = (v43 >> 52) & 0x7FF;
    v45 = v44 - 1023;
    v46 = v43 >> (51 - (v43 >> 52));
    if (v44 > 0x433)
      LODWORD(v46) = v43 << ((v43 >> 52) - 51);
    if (v44 >= 0x41F)
      v47 = v46;
    else
      v47 = (((1 << ((v43 >> 52) + 1)) - 1) & v46) + (1 << ((v43 >> 52) + 1));
    if ((v43 & 0x8000000000000000) == 0)
      v48 = v47;
    else
      v48 = -v47;
    if (v45 > 0x53)
      v48 = 0;
    v123 = v48;
  }
  else
  {
    v123 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v122 = v12;
  v119 = v6;
  v15 = *((_QWORD *)a2 + 10);
  v135 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 < 0xFFFE000000000000)
  {
    v49 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v49 = v117;
    }
    v50 = (v49 >> 52) & 0x7FF;
    if ((v50 - 1023) <= 0x53)
    {
      v53 = v49 >> (51 - (v49 >> 52));
      if (v50 > 0x433)
        LODWORD(v53) = v49 << ((v49 >> 52) - 51);
      if (v50 >= 0x41F)
        v54 = v53;
      else
        v54 = (((1 << ((v49 >> 52) + 1)) - 1) & v53) + (1 << ((v49 >> 52) + 1));
      if ((v49 & 0x8000000000000000) == 0)
        v17 = v54;
      else
        v17 = -v54;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v121 = v9;
  v18 = *((_QWORD *)a2 + 11);
  v135 = (WTF::StringImpl *)v18;
  v19 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v18 < 0xFFFE000000000000)
  {
    v51 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v135, this);
      v51 = v118;
    }
    v52 = (v51 >> 52) & 0x7FF;
    if ((v52 - 1023) <= 0x53)
    {
      v55 = v51 >> (51 - (v51 >> 52));
      if (v52 > 0x433)
        LODWORD(v55) = v51 << ((v51 >> 52) - 51);
      if (v52 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v51 >> 52) + 1)) - 1) & v55) + (1 << ((v51 >> 52) + 1));
      if ((v51 & 0x8000000000000000) == 0)
        v20 = v56;
      else
        v20 = -v56;
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = v18;
  }
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v127);
  if (v127[1])
    return 0;
  v120 = v17;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v126);
  if (v126[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 14), (uint64_t)v160);
  v21 = v163;
  if (!v163)
  {
    v22 = a3;
    if (*((_BYTE *)a3 + 33))
    {
      v57 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v132 = v135;
      v124 = v128[0];
      v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v58
        && (v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59)) != 0
        && (v61 = *(WebCore::InspectorCanvasAgent **)(v60 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v61, v57, v124, (uint64_t)&v135);
      }
      else
      {
        LOBYTE(v135) = 0;
        LOBYTE(v137) = 0;
      }
      v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v66
        && (v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67)) != 0
        && (v69 = *(WebCore::InspectorCanvasAgent **)(v68 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v69, v57, v121, (uint64_t)&v139);
      }
      else
      {
        LOBYTE(v139) = 0;
        LOBYTE(v142) = 0;
      }
      v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v70
        && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
        && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v73, v57, v122, (uint64_t)&v144);
      }
      else
      {
        LOBYTE(v144) = 0;
        LOBYTE(v147) = 0;
      }
      v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v74
        && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
        && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v77, v57, v123, (uint64_t)&v148);
      }
      else
      {
        LOBYTE(v148) = 0;
        v149 = 0;
      }
      v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v78
        && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
        && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v81, v57, v17, (uint64_t)&v150);
      }
      else
      {
        LOBYTE(v150) = 0;
        v151 = 0;
      }
      v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v82
        && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
        && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v85, v57, v20, (uint64_t)&v152);
      }
      else
      {
        LOBYTE(v152) = 0;
        v153 = 0;
      }
      v86 = v127[0];
      v87 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v87
        && (v89 = WebCore::InspectorInstrumentation::instrumentingAgents(v87, v88)) != 0
        && (v90 = *(WebCore::InspectorCanvasAgent **)(v89 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v90, v57, v86, (uint64_t)&v154);
      }
      else
      {
        LOBYTE(v154) = 0;
        v155 = 0;
      }
      v91 = v126[0];
      v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v92
        && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
        && (v95 = *(WebCore::InspectorCanvasAgent **)(v94 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v95, v57, v91, (uint64_t)&v156);
      }
      else
      {
        LOBYTE(v156) = 0;
        v157 = 0;
      }
      if (v163)
        goto LABEL_230;
      v96 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v96
        && (v98 = WebCore::InspectorInstrumentation::instrumentingAgents(v96, v97)) != 0
        && (v99 = *(_QWORD *)(v98 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v99, (uint64_t)v57, (uint64_t)&v161);
      }
      else
      {
        LOBYTE(v158) = 0;
        v159 = 0;
      }
      *(_QWORD *)v129 = &v135;
      v130 = (WTF::StringImpl *)9;
      v100 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v100)
      {
        v102 = WebCore::InspectorInstrumentation::instrumentingAgents(v100, v101);
        if (v102)
        {
          v103 = *(_QWORD *)(v102 + 96);
          if (v103)
            WebCore::InspectorCanvasAgent::recordAction(v103, v57, (const WTF::StringImpl *)&v132, v129);
        }
      }
      if (v159)
      {
        v104 = v158;
        v158 = 0;
        if (v104)
        {
          if (*v104 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v104;
        }
      }
      if (v157)
      {
        v105 = v156;
        v156 = 0;
        if (v105)
        {
          if (*v105 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v105;
        }
      }
      if (v155)
      {
        v106 = v154;
        v154 = 0;
        if (v106)
        {
          if (*v106 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v106;
        }
      }
      if (v153)
      {
        v107 = v152;
        v152 = 0;
        if (v107)
        {
          if (*v107 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v107;
        }
      }
      if (v151)
      {
        v108 = v150;
        v150 = 0;
        if (v108)
        {
          if (*v108 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v108;
        }
      }
      if (v149)
      {
        v109 = v148;
        v148 = 0;
        if (v109)
        {
          if (*v109 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v109;
        }
      }
      if ((_BYTE)v147)
      {
        v110 = v144;
        v144 = 0;
        if (v110)
        {
          if (*v110 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v110;
        }
      }
      if ((_BYTE)v142)
      {
        v111 = v139;
        v139 = 0;
        if (v111)
        {
          if (*v111 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v111;
        }
      }
      if ((_BYTE)v137)
      {
        v112 = v135;
        v135 = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v112;
        }
      }
      v113 = v132;
      v132 = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
          WTF::StringImpl::destroy(v113, v101);
        else
          *(_DWORD *)v113 -= 2;
      }
      v22 = a3;
    }
    if (!v163)
    {
      v23 = v128[0];
      v24 = v127[0];
      v25 = v126[0];
      LOBYTE(v132) = 0;
      v133 = -1;
      v26 = v162;
      if (v162 != -1)
      {
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E332F4C0[v162])(&v135, &v132, &v161);
        v22 = a3;
        v133 = v26;
      }
      if (*((_BYTE *)v22 + 364))
        goto LABEL_30;
      if (*((_QWORD *)v22 + 122))
        v27 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v27 = 0;
      if (v27)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
LABEL_30:
        *(_QWORD *)v129 = 0;
        v130 = 0;
        v131 = 0;
        goto LABEL_31;
      }
      v30 = *(_DWORD **)((char *)v22 + 332);
      v135 = v22;
      LODWORD(v136) = 1;
      HIDWORD(v136) = v23;
      v137 = v121;
      v138 = 0;
      LODWORD(v139) = 0;
      HIDWORD(v139) = v24;
      v140 = v25;
      v141 = v122;
      v142 = v123;
      v143 = 0;
      v144 = v30;
      v145 = v120;
      v146 = v20;
      v147 = 1;
      if ((_DWORD)v26 != -1)
      {
        v134 = &v135;
        ((void (*)(int *__return_ptr, WTF::StringImpl ***, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v26])(v129, &v134, &v132);
LABEL_31:
        if (v133 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F488[v133])(&v135, &v132);
        if (!(_BYTE)v131)
        {
          v28 = 10;
LABEL_35:
          v21 = v163;
          goto LABEL_36;
        }
        v62 = (WTF::StringImpl *)LOBYTE(v129[0]);
        LOBYTE(v135) = v129[0];
        v63 = v130;
        v130 = 0;
        v136 = v63;
        if (!*((_QWORD *)v119 + 2))
        {
          v64.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v129[0]), (JSC::JSGlobalObject *)&v136);
          JSC::VM::throwException(v119, this, v64);
          v63 = v136;
        }
        v136 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
            WTF::StringImpl::destroy(v63, v62);
          else
            *(_DWORD *)v63 -= 2;
        }
        if ((_BYTE)v131)
        {
          v65 = v130;
          v130 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 != 2)
            {
              v28 = 0;
              *(_DWORD *)v65 -= 2;
              goto LABEL_35;
            }
            WTF::StringImpl::destroy(v65, v62);
          }
        }
        v28 = 0;
        goto LABEL_35;
      }
    }
LABEL_230:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v28 = 0;
LABEL_36:
  if (v21 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F4F8[v21])(&v135, &v161);
  return v28;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  uint64_t v20;
  JSC::CallFrame *v21;
  JSC::VM *v22;
  double v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  JSC::CallFrame *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  WebCore::InspectorCanvasAgent *v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  WebCore::InspectorCanvasAgent *v71;
  WebCore::InspectorInstrumentation *v72;
  WebCore::ScriptExecutionContext *v73;
  uint64_t v74;
  WebCore::InspectorCanvasAgent *v75;
  WebCore::InspectorInstrumentation *v76;
  WebCore::ScriptExecutionContext *v77;
  uint64_t v78;
  WebCore::InspectorCanvasAgent *v79;
  unsigned int v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  unsigned int v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  double v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  WebCore::CanvasRenderingContext *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  _QWORD v121[2];
  WTF::StringImpl *v122;
  unsigned int v123[2];
  unsigned int v124[2];
  unsigned int v125[2];
  _QWORD v126[2];
  char v127;
  _DWORD *v128;
  char v129;
  _DWORD *v130;
  char v131;
  _DWORD *v132;
  char v133;
  _DWORD *v134;
  char v135;
  _DWORD *v136;
  char v137;
  _DWORD *v138;
  char v139;
  _DWORD *v140;
  char v141;
  _DWORD *v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v125);
  if (v125[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v126[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v25 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v25 = v109;
    }
    v26 = (v25 >> 52) & 0x7FF;
    v27 = v26 - 1023;
    v28 = v25 >> (51 - (v25 >> 52));
    if (v26 > 0x433)
      LODWORD(v28) = v25 << ((v25 >> 52) - 51);
    if (v26 >= 0x41F)
      v29 = v28;
    else
      v29 = (((1 << ((v25 >> 52) + 1)) - 1) & v28) + (1 << ((v25 >> 52) + 1));
    if ((v25 & 0x8000000000000000) == 0)
      v30 = v29;
    else
      v30 = -v29;
    if (v27 <= 0x53)
      v8 = v30;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v126[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v31 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v31 = v110;
    }
    v32 = (v31 >> 52) & 0x7FF;
    v33 = v32 - 1023;
    v34 = v31 >> (51 - (v31 >> 52));
    if (v32 > 0x433)
      LODWORD(v34) = v31 << ((v31 >> 52) - 51);
    if (v32 >= 0x41F)
      v35 = v34;
    else
      v35 = (((1 << ((v31 >> 52) + 1)) - 1) & v34) + (1 << ((v31 >> 52) + 1));
    if ((v31 & 0x8000000000000000) == 0)
      v36 = v35;
    else
      v36 = -v35;
    if (v33 <= 0x53)
      v11 = v36;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v126[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v37 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v37 = v111;
    }
    v38 = (v37 >> 52) & 0x7FF;
    v39 = v38 - 1023;
    v40 = v37 >> (51 - (v37 >> 52));
    if (v38 > 0x433)
      LODWORD(v40) = v37 << ((v37 >> 52) - 51);
    if (v38 >= 0x41F)
      v41 = v40;
    else
      v41 = (((1 << ((v37 >> 52) + 1)) - 1) & v40) + (1 << ((v37 >> 52) + 1));
    if ((v37 & 0x8000000000000000) == 0)
      v42 = v41;
    else
      v42 = -v41;
    if (v39 <= 0x53)
      v14 = v42;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v119 = v14;
  v15 = *((_QWORD *)a2 + 10);
  v126[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v43 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v43 = v112;
    }
    v44 = (v43 >> 52) & 0x7FF;
    if ((v44 - 1023) <= 0x53)
    {
      v48 = v43 >> (51 - (v43 >> 52));
      if (v44 > 0x433)
        LODWORD(v48) = v43 << ((v43 >> 52) - 51);
      if (v44 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v43 >> 52) + 1)) - 1) & v48) + (1 << ((v43 >> 52) + 1));
      if ((v43 & 0x8000000000000000) == 0)
        v50 = v49;
      else
        v50 = -v49;
      v118 = v50;
    }
    else
    {
      v118 = 0;
    }
  }
  else
  {
    v118 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v117 = v11;
  v17 = *((_QWORD *)a2 + 11);
  v126[0] = v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v45 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v45 = v113;
    }
    v46 = (v45 >> 52) & 0x7FF;
    if ((v46 - 1023) <= 0x53)
    {
      v51 = v45 >> (51 - (v45 >> 52));
      if (v46 > 0x433)
        LODWORD(v51) = v45 << ((v45 >> 52) - 51);
      if (v46 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v45 >> 52) + 1)) - 1) & v51) + (1 << ((v45 >> 52) + 1));
      if ((v45 & 0x8000000000000000) == 0)
        v53 = v52;
      else
        v53 = -v52;
      v116 = v53;
    }
    else
    {
      v116 = 0;
    }
  }
  else
  {
    v116 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v124);
  if (v124[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v123);
  if (v123[1])
    return 0;
  v19 = *((_QWORD *)a2 + 14);
  v126[0] = v19;
  if (v19 < 0xFFFE000000000000)
  {
    v22 = this[7];
    if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v126, (JSC::JSGlobalObject *)this);
      v23 = v108;
    }
    else
    {
      *(_QWORD *)&v23 = v19 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v21 = a3;
    if (fabs(v23) == INFINITY)
    {
      v20 = 0;
    }
    else
    {
      v24 = fmod(trunc(v23), 1.84467441e19);
      if (v24 >= 0.0)
        v20 = (unint64_t)v24;
      else
        v20 = -(uint64_t)(unint64_t)-v24;
    }
  }
  else
  {
    v20 = (int)v19;
    v21 = a3;
  }
  if (*((_BYTE *)v21 + 33))
  {
    v115 = (JSC::CallFrame *)((char *)v21 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v122 = (WTF::StringImpl *)v126[0];
    v54 = v21;
    v55 = v125[0];
    v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v54 + 5) + 144))(*((_QWORD *)v54 + 5));
    if (v56
      && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
      && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v59, v115, v55, (uint64_t)v126);
    }
    else
    {
      LOBYTE(v126[0]) = 0;
      v127 = 0;
    }
    v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v60
      && (v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61)) != 0
      && (v63 = *(WebCore::InspectorCanvasAgent **)(v62 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v63, v115, v8, (uint64_t)&v128);
    }
    else
    {
      LOBYTE(v128) = 0;
      v129 = 0;
    }
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, v115, v117, (uint64_t)&v130);
    }
    else
    {
      LOBYTE(v130) = 0;
      v131 = 0;
    }
    v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v68
      && (v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69)) != 0
      && (v71 = *(WebCore::InspectorCanvasAgent **)(v70 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v71, v115, v119, (uint64_t)&v132);
    }
    else
    {
      LOBYTE(v132) = 0;
      v133 = 0;
    }
    v72 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v72
      && (v74 = WebCore::InspectorInstrumentation::instrumentingAgents(v72, v73)) != 0
      && (v75 = *(WebCore::InspectorCanvasAgent **)(v74 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v75, v115, v118, (uint64_t)&v134);
    }
    else
    {
      LOBYTE(v134) = 0;
      v135 = 0;
    }
    v76 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v76
      && (v78 = WebCore::InspectorInstrumentation::instrumentingAgents(v76, v77)) != 0
      && (v79 = *(WebCore::InspectorCanvasAgent **)(v78 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v79, v115, v116, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v137 = 0;
    }
    v80 = v124[0];
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, v115, v80, (uint64_t)&v138);
    }
    else
    {
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v85 = v123[0];
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v86
      && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
      && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v89, v115, v85, (uint64_t)&v140);
    }
    else
    {
      LOBYTE(v140) = 0;
      v141 = 0;
    }
    v21 = a3;
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v115, v20, (uint64_t)&v142);
    }
    else
    {
      LOBYTE(v142) = 0;
      v143 = 0;
    }
    v121[0] = v126;
    v121[1] = 9;
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94)
    {
      v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95);
      if (v96)
      {
        v97 = *(_QWORD *)(v96 + 96);
        if (v97)
          WebCore::InspectorCanvasAgent::recordAction(v97, v115, (const WTF::StringImpl *)&v122, v121);
      }
    }
    if (v143)
    {
      v98 = v142;
      v142 = 0;
      if (v98)
      {
        if (*v98 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v98;
      }
    }
    if (v141)
    {
      v99 = v140;
      v140 = 0;
      if (v99)
      {
        if (*v99 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v99;
      }
    }
    if (v139)
    {
      v100 = v138;
      v138 = 0;
      if (v100)
      {
        if (*v100 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v100;
      }
    }
    if (v137)
    {
      v101 = v136;
      v136 = 0;
      if (v101)
      {
        if (*v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v101;
      }
    }
    if (v135)
    {
      v102 = v134;
      v134 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v133)
    {
      v103 = v132;
      v132 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v131)
    {
      v104 = v130;
      v130 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v129)
    {
      v105 = v128;
      v128 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v127)
    {
      v106 = (_DWORD *)v126[0];
      v126[0] = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    v107 = v122;
    v122 = 0;
    if (v107)
    {
      if (*(_DWORD *)v107 == 2)
        WTF::StringImpl::destroy(v107, v95);
      else
        *(_DWORD *)v107 -= 2;
    }
  }
  LODWORD(v114) = v123[0];
  WebCore::WebGL2RenderingContext::texSubImage2D(v21, v125[0], v8, v117, v119, v118, v116, v124[0], v114, v20);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D2Body(JSC::ArrayBufferView **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  JSC::VM *v12;
  unsigned int v13;
  unint64_t v14;
  JSC::VM *v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::ArrayBufferView *v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  WebCore::InspectorCanvasAgent *v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  WebCore::InspectorInstrumentation *v68;
  WebCore::ScriptExecutionContext *v69;
  uint64_t v70;
  WebCore::InspectorCanvasAgent *v71;
  WebCore::InspectorInstrumentation *v72;
  WebCore::ScriptExecutionContext *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  unsigned int v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  WebCore *v104;
  JSC::JSGlobalObject *v105;
  JSC::CallFrame *v106;
  WebCore::JSWebGL2RenderingContext *v107;
  WebCore::CanvasRenderingContext *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  _QWORD v113[2];
  WTF::StringImpl *v114;
  unsigned int v115[2];
  unsigned int v116[2];
  JSC::ArrayBufferView *v117;
  int v118;
  unsigned int v119[2];
  unsigned int v120[2];
  WTF::StringImpl *v121;
  int v122;
  char v123;
  _DWORD *v124;
  char v125;
  _DWORD *v126;
  char v127;
  _DWORD *v128;
  char v129;
  _DWORD *v130;
  char v131;
  _DWORD *v132;
  char v133;
  _DWORD *v134;
  char v135;
  _DWORD *v136;
  char v137;
  _DWORD *v138;
  char v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v120);
  if (v120[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v121 = (WTF::StringImpl *)v7;
  v8 = this[7];
  if (v7 < 0xFFFE000000000000)
  {
    v24 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v121, (JSC::JSGlobalObject *)this);
      v24 = v100;
    }
    v25 = (v24 >> 52) & 0x7FF;
    v26 = v25 - 1023;
    v27 = v24 >> (51 - (v24 >> 52));
    if (v25 > 0x433)
      LODWORD(v27) = v24 << ((v24 >> 52) - 51);
    if (v25 >= 0x41F)
      v28 = v27;
    else
      v28 = (((1 << ((v24 >> 52) + 1)) - 1) & v27) + (1 << ((v24 >> 52) + 1));
    if ((v24 & 0x8000000000000000) == 0)
      v29 = v28;
    else
      v29 = -v28;
    if (v26 <= 0x53)
      v9 = v29;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v119);
  if (v119[1])
    return 0;
  v11 = *((_QWORD *)a2 + 9);
  v121 = (WTF::StringImpl *)v11;
  v12 = this[7];
  if (v11 < 0xFFFE000000000000)
  {
    v30 = v11 - 0x2000000000000;
    if (v11 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v121, (JSC::JSGlobalObject *)this);
      v30 = v101;
    }
    v31 = (v30 >> 52) & 0x7FF;
    v32 = v31 - 1023;
    v33 = v30 >> (51 - (v30 >> 52));
    if (v31 > 0x433)
      LODWORD(v33) = v30 << ((v30 >> 52) - 51);
    if (v31 >= 0x41F)
      v34 = v33;
    else
      v34 = (((1 << ((v30 >> 52) + 1)) - 1) & v33) + (1 << ((v30 >> 52) + 1));
    if ((v30 & 0x8000000000000000) == 0)
      v35 = v34;
    else
      v35 = -v34;
    if (v32 <= 0x53)
      v13 = v35;
    else
      v13 = 0;
  }
  else
  {
    v13 = v11;
  }
  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
    return 0;
  v112 = v13;
  v14 = *((_QWORD *)a2 + 10);
  v121 = (WTF::StringImpl *)v14;
  v15 = this[7];
  if (v14 < 0xFFFE000000000000)
  {
    v36 = v14 - 0x2000000000000;
    if (v14 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v121, (JSC::JSGlobalObject *)this);
      v36 = v102;
    }
    v37 = (v36 >> 52) & 0x7FF;
    if ((v37 - 1023) <= 0x53)
    {
      v40 = v36 >> (51 - (v36 >> 52));
      if (v37 > 0x433)
        LODWORD(v40) = v36 << ((v36 >> 52) - 51);
      if (v37 >= 0x41F)
        v41 = v40;
      else
        v41 = (((1 << ((v36 >> 52) + 1)) - 1) & v40) + (1 << ((v36 >> 52) + 1));
      if ((v36 & 0x8000000000000000) == 0)
        v42 = v41;
      else
        v42 = -v41;
      v111 = v42;
    }
    else
    {
      v111 = 0;
    }
  }
  else
  {
    v111 = v14;
  }
  if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
    return 0;
  v110 = v9;
  v16 = *((_QWORD *)a2 + 11);
  v121 = (WTF::StringImpl *)v16;
  v17 = this[7];
  if (v16 < 0xFFFE000000000000)
  {
    v38 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v121, (JSC::JSGlobalObject *)this);
      v38 = v103;
    }
    v39 = (v38 >> 52) & 0x7FF;
    if ((v39 - 1023) <= 0x53)
    {
      v43 = v38 >> (51 - (v38 >> 52));
      if (v39 > 0x433)
        LODWORD(v43) = v38 << ((v38 >> 52) - 51);
      if (v39 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << ((v38 >> 52) + 1)) - 1) & v43) + (1 << ((v38 >> 52) + 1));
      if ((v38 & 0x8000000000000000) == 0)
        v45 = v44;
      else
        v45 = -v44;
      v109 = v45;
    }
    else
    {
      v109 = 0;
    }
  }
  else
  {
    v109 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  v18 = *((_QWORD *)a2 + 12);
  v117 = this[7];
  if ((v18 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v18 + 5) - 39 > 0xB
    || (*(_BYTE *)(v18 + 40) & 6) != 0)
  {
    v113[0] = 0;
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v117, 6, "srcData", 8, "WebGL2RenderingContext", 23, v10, "compressedTexImage2D", 21, "ArrayBufferView", 16);
    v19 = 1;
    v122 = 1;
    v113[0] = 0;
    goto LABEL_22;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v18);
  if (!v113[0])
    goto LABEL_19;
  v19 = 0;
  v121 = (WTF::StringImpl *)v113[0];
  v122 = 0;
LABEL_22:
  LOBYTE(v117) = 0;
  v118 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v19])(v113, &v117, &v121);
  v118 = v19;
  if (v122 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v122])(v113, &v121);
    v19 = v118;
  }
  if (v19)
  {
    v22 = 0;
LABEL_36:
    if (v19 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v19])(&v121, &v117);
    return v22;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 13), v116);
  if (v116[1])
  {
    v22 = 0;
LABEL_35:
    v19 = v118;
    goto LABEL_36;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 10) > 0xFFFFFFFFFFFFFFF6)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 14);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v20, v115);
  if (v115[1])
  {
    v22 = 0;
    goto LABEL_35;
  }
  if (*((_BYTE *)a3 + 33))
  {
    v108 = (JSC::CallFrame *)((char *)a3 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v114 = v121;
    v46 = v120[0];
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v47
      && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
      && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v50, v108, v46, (uint64_t)&v121);
    }
    else
    {
      LOBYTE(v121) = 0;
      v123 = 0;
    }
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v51
      && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
      && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v54, v108, v110, (uint64_t)&v124);
    }
    else
    {
      LOBYTE(v124) = 0;
      v125 = 0;
    }
    v55 = v119[0];
    v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v56
      && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
      && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v59, v108, v55, (uint64_t)&v126);
    }
    else
    {
      LOBYTE(v126) = 0;
      v127 = 0;
    }
    v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v60
      && (v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61)) != 0
      && (v63 = *(WebCore::InspectorCanvasAgent **)(v62 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v63, v108, v112, (uint64_t)&v128);
    }
    else
    {
      LOBYTE(v128) = 0;
      v129 = 0;
    }
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, v108, v111, (uint64_t)&v130);
    }
    else
    {
      LOBYTE(v130) = 0;
      v131 = 0;
    }
    v68 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v68
      && (v70 = WebCore::InspectorInstrumentation::instrumentingAgents(v68, v69)) != 0
      && (v71 = *(WebCore::InspectorCanvasAgent **)(v70 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v71, v108, v109, (uint64_t)&v132);
    }
    else
    {
      LOBYTE(v132) = 0;
      v133 = 0;
    }
    if (v118)
      goto LABEL_204;
    v72 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v72
      && (v74 = WebCore::InspectorInstrumentation::instrumentingAgents(v72, v73)) != 0
      && (v75 = *(_QWORD *)(v74 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v75, (uint64_t)v108, (uint64_t)&v134);
    }
    else
    {
      LOBYTE(v134) = 0;
      v135 = 0;
    }
    v76 = v116[0];
    v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v77
      && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
      && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v80, v108, v76, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v137 = 0;
    }
    v81 = v115[0];
    v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v82
      && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
      && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v85, v108, v81, (uint64_t)&v138);
    }
    else
    {
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v113[0] = &v121;
    v113[1] = 9;
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v86)
    {
      v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87);
      if (v88)
      {
        v89 = *(_QWORD *)(v88 + 96);
        if (v89)
          WebCore::InspectorCanvasAgent::recordAction(v89, v108, (const WTF::StringImpl *)&v114, v113);
      }
    }
    if (v139)
    {
      v90 = v138;
      v138 = 0;
      if (v90)
      {
        if (*v90 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v90;
      }
    }
    if (v137)
    {
      v91 = v136;
      v136 = 0;
      if (v91)
      {
        if (*v91 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v91;
      }
    }
    if (v135)
    {
      v92 = v134;
      v134 = 0;
      if (v92)
      {
        if (*v92 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v92;
      }
    }
    if (v133)
    {
      v93 = v132;
      v132 = 0;
      if (v93)
      {
        if (*v93 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v93;
      }
    }
    if (v131)
    {
      v94 = v130;
      v130 = 0;
      if (v94)
      {
        if (*v94 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v94;
      }
    }
    if (v129)
    {
      v95 = v128;
      v128 = 0;
      if (v95)
      {
        if (*v95 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v95;
      }
    }
    if (v127)
    {
      v96 = v126;
      v126 = 0;
      if (v96)
      {
        if (*v96 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v96;
      }
    }
    if (v125)
    {
      v97 = v124;
      v124 = 0;
      if (v97)
      {
        if (*v97 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v97;
      }
    }
    if (v123)
    {
      v98 = v121;
      v121 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v98;
      }
    }
    v99 = v114;
    v114 = 0;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v87);
      else
        *(_DWORD *)v99 -= 2;
    }
  }
  if (!v118)
  {
    v21 = v117;
    v117 = 0;
    WebCore::WebGL2RenderingContext::compressedTexImage2D(a3, v120[0], v110, v119[0], v112, v111, v109, v21, v116[0], v115[0]);
    if (*(_DWORD *)v21 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v21;
    v22 = 10;
    goto LABEL_35;
  }
LABEL_204:
  v104 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D1Body(v104, v105, v106, v107);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  unsigned int v9;
  unint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WebCore::WebGL2RenderingContext *v24;
  JSC::VM *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  JSC::VM *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::WebGL2RenderingContext *v75;
  unsigned int v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  unsigned int v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  WebCore::InspectorInstrumentation *v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t v104;
  WebCore::InspectorCanvasAgent *v105;
  WebCore::InspectorInstrumentation *v106;
  WebCore::ScriptExecutionContext *v107;
  uint64_t v108;
  WebCore::InspectorCanvasAgent *v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  WTF::StringImpl *v122;
  JSC::VM *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  JSC::JSGlobalObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  WebCore::CanvasRenderingContext *v148;
  unsigned int v149;
  WebCore::WebGL2RenderingContext *v150;
  _QWORD v151[2];
  WTF::StringImpl *v152;
  unsigned int v153[2];
  unsigned int v154[2];
  _QWORD v155[2];
  char v156;
  _DWORD *v157;
  char v158;
  _DWORD *v159;
  char v160;
  _DWORD *v161;
  char v162;
  _DWORD *v163;
  char v164;
  _DWORD *v165;
  char v166;
  _DWORD *v167;
  char v168;
  _DWORD *v169;
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v154);
  if (v154[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v155[0] = v7;
  v8 = this[7];
  if (v7 < 0xFFFE000000000000)
  {
    v32 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v32 = v135;
    }
    v33 = (v32 >> 52) & 0x7FF;
    v34 = v33 - 1023;
    v35 = v32 >> (51 - (v32 >> 52));
    if (v33 > 0x433)
      LODWORD(v35) = v32 << ((v32 >> 52) - 51);
    if (v33 >= 0x41F)
      v36 = v35;
    else
      v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
    if ((v32 & 0x8000000000000000) == 0)
      v37 = v36;
    else
      v37 = -v36;
    if (v34 <= 0x53)
      v9 = v37;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 8), v153);
  if (v153[1])
    return 0;
  v150 = a3;
  v10 = *((_QWORD *)a2 + 9);
  v155[0] = v10;
  v11 = this[7];
  if (v10 < 0xFFFE000000000000)
  {
    v38 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v38 = v136;
    }
    v39 = (v38 >> 52) & 0x7FF;
    v40 = v39 - 1023;
    v41 = v38 >> (51 - (v38 >> 52));
    if (v39 > 0x433)
      LODWORD(v41) = v38 << ((v38 >> 52) - 51);
    if (v39 >= 0x41F)
      v42 = v41;
    else
      v42 = (((1 << ((v38 >> 52) + 1)) - 1) & v41) + (1 << ((v38 >> 52) + 1));
    if ((v38 & 0x8000000000000000) == 0)
      v43 = v42;
    else
      v43 = -v42;
    if (v40 <= 0x53)
      v12 = v43;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20))
  {
    v57 = v12;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    v12 = v57;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v149 = v9;
  v13 = *((_QWORD *)a2 + 10);
  v155[0] = v13;
  v14 = this[7];
  if (v13 < 0xFFFE000000000000)
  {
    v44 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v137 = v12;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v12 = v137;
      v44 = v138;
    }
    v45 = (v44 >> 52) & 0x7FF;
    if ((v45 - 1023) <= 0x53)
    {
      v51 = v44 >> (51 - (v44 >> 52));
      if (v45 > 0x433)
        LODWORD(v51) = v44 << ((v44 >> 52) - 51);
      if (v45 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v44 >> 52) + 1)) - 1) & v51) + (1 << ((v44 >> 52) + 1));
      if ((v44 & 0x8000000000000000) == 0)
        v15 = v52;
      else
        v15 = -v52;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20))
  {
    v59 = v14;
    v60 = v12;
    v61 = v15;
    v62 = JSC::VM::hasExceptionsAfterHandlingTraps(v59);
    v15 = v61;
    v12 = v60;
    if (v62)
      return 0;
  }
  v16 = *((_QWORD *)a2 + 11);
  v155[0] = v16;
  v17 = this[7];
  if (v16 < 0xFFFE000000000000)
  {
    v46 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v146 = v12;
      v139 = v15;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v15 = v139;
      v12 = v146;
      v46 = v140;
    }
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v53 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v53) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v54 = v53;
      else
        v54 = (((1 << ((v46 >> 52) + 1)) - 1) & v53) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        v18 = v54;
      else
        v18 = -v54;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = v16;
  }
  if (*((_DWORD *)v17 + 20))
  {
    v63 = v12;
    v64 = v15;
    v65 = v18;
    v66 = JSC::VM::hasExceptionsAfterHandlingTraps(v17);
    v18 = v65;
    v15 = v64;
    v12 = v63;
    if (v66)
      return 0;
  }
  v19 = *((_QWORD *)a2 + 12);
  v155[0] = v19;
  v20 = this[7];
  if (v19 < 0xFFFE000000000000)
  {
    v48 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v147 = v12;
      v141 = v15;
      v142 = v18;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, (JSC::JSGlobalObject *)this);
      v18 = v142;
      v15 = v141;
      v12 = v147;
      v48 = v143;
    }
    v49 = (v48 >> 52) & 0x7FF;
    if ((v49 - 1023) <= 0x53)
    {
      v55 = v48 >> (51 - (v48 >> 52));
      if (v49 > 0x433)
        LODWORD(v55) = v48 << ((v48 >> 52) - 51);
      if (v49 >= 0x41F)
        v56 = v55;
      else
        v56 = (((1 << ((v48 >> 52) + 1)) - 1) & v55) + (1 << ((v48 >> 52) + 1));
      if ((v48 & 0x8000000000000000) == 0)
        v21 = v56;
      else
        v21 = -v56;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = v19;
  }
  if (*((_DWORD *)v20 + 20))
  {
    v67 = v20;
    v68 = v12;
    v69 = v15;
    v70 = v21;
    v71 = v18;
    v72 = JSC::VM::hasExceptionsAfterHandlingTraps(v67);
    v18 = v71;
    v21 = v70;
    v15 = v69;
    v12 = v68;
    if (v72)
      return 0;
  }
  v22 = *((_QWORD *)a2 + 13);
  v155[0] = v22;
  if (v22 < 0xFFFE000000000000)
  {
    v25 = this[7];
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v129 = (JSC::JSGlobalObject *)this;
      v130 = v12;
      v131 = v15;
      v132 = v21;
      v133 = v18;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v155, v129);
      v18 = v133;
      v21 = v132;
      v15 = v131;
      v12 = v130;
      v26 = v134;
    }
    else
    {
      *(_QWORD *)&v26 = v22 - 0x2000000000000;
    }
    if (*((_DWORD *)v25 + 20))
    {
      v123 = v25;
      v124 = v12;
      v125 = v15;
      v126 = v21;
      v127 = v18;
      v128 = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
      v18 = v127;
      v21 = v126;
      v15 = v125;
      v12 = v124;
      if ((v128 & 1) != 0)
        return 0;
    }
    v24 = v150;
    if (fabs(v26) == INFINITY)
    {
      v23 = 0;
    }
    else
    {
      v27 = v21;
      v28 = v18;
      v29 = v15;
      v30 = v12;
      v31 = fmod(trunc(v26), 1.84467441e19);
      if (v31 >= 0.0)
        v23 = (unint64_t)v31;
      else
        v23 = -(uint64_t)(unint64_t)-v31;
      v12 = v30;
      v15 = v29;
      v18 = v28;
      v21 = v27;
      v24 = v150;
    }
  }
  else
  {
    v23 = (int)v22;
    v24 = v150;
  }
  if (*((_BYTE *)v24 + 33))
  {
    v144 = v23;
    v73 = v18;
    v74 = v15;
    v145 = v12;
    v148 = (WebCore::WebGL2RenderingContext *)((char *)v24 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v152 = (WTF::StringImpl *)v155[0];
    v75 = v24;
    v76 = v154[0];
    v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v75 + 5) + 144))(*((_QWORD *)v75 + 5));
    if (v77
      && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
      && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v80, v148, v76, (uint64_t)v155);
    }
    else
    {
      LOBYTE(v155[0]) = 0;
      v156 = 0;
    }
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, v148, v149, (uint64_t)&v157);
    }
    else
    {
      LOBYTE(v157) = 0;
      v158 = 0;
    }
    v85 = v153[0];
    v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v86
      && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
      && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v89, v148, v85, (uint64_t)&v159);
    }
    else
    {
      LOBYTE(v159) = 0;
      v160 = 0;
    }
    v24 = v150;
    v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v90
      && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
      && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v93, v148, v145, (uint64_t)&v161);
    }
    else
    {
      LOBYTE(v161) = 0;
      v162 = 0;
    }
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v148, v74, (uint64_t)&v163);
    }
    else
    {
      LOBYTE(v163) = 0;
      v164 = 0;
    }
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v98
      && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
      && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v101, v148, v73, (uint64_t)&v165);
    }
    else
    {
      LOBYTE(v165) = 0;
      v166 = 0;
    }
    v102 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v102
      && (v104 = WebCore::InspectorInstrumentation::instrumentingAgents(v102, v103)) != 0
      && (v105 = *(WebCore::InspectorCanvasAgent **)(v104 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v105, v148, v21, (uint64_t)&v167);
    }
    else
    {
      LOBYTE(v167) = 0;
      v168 = 0;
    }
    v106 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v106
      && (v108 = WebCore::InspectorInstrumentation::instrumentingAgents(v106, v107)) != 0
      && (v109 = *(WebCore::InspectorCanvasAgent **)(v108 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v109, v148, v144, (uint64_t)&v169);
    }
    else
    {
      LOBYTE(v169) = 0;
      v170 = 0;
    }
    v151[0] = v155;
    v151[1] = 8;
    v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v150 + 5) + 144))(*((_QWORD *)v150 + 5));
    if (v110)
    {
      v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111);
      if (v112)
      {
        v113 = *(_QWORD *)(v112 + 96);
        if (v113)
          WebCore::InspectorCanvasAgent::recordAction(v113, v148, (const WTF::StringImpl *)&v152, v151);
      }
    }
    v12 = v145;
    v15 = v74;
    v18 = v73;
    if (v170)
    {
      v114 = v169;
      v169 = 0;
      if (v114)
      {
        if (*v114 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v114;
        }
      }
    }
    if (v168)
    {
      v115 = v167;
      v167 = 0;
      if (v115)
      {
        if (*v115 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v115;
        }
      }
    }
    if (v166)
    {
      v116 = v165;
      v165 = 0;
      if (v116)
      {
        if (*v116 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v116;
        }
      }
    }
    if (v164)
    {
      v117 = v163;
      v163 = 0;
      if (v117)
      {
        if (*v117 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v117;
        }
      }
    }
    if (v162)
    {
      v118 = v161;
      v161 = 0;
      if (v118)
      {
        if (*v118 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v118;
        }
      }
    }
    if (v160)
    {
      v119 = v159;
      v159 = 0;
      if (v119)
      {
        if (*v119 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v119;
        }
      }
    }
    if (v158)
    {
      v120 = v157;
      v157 = 0;
      if (v120)
      {
        if (*v120 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v120;
        }
      }
    }
    if (v156)
    {
      v121 = (_DWORD *)v155[0];
      v155[0] = 0;
      if (v121)
      {
        if (*v121 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v18 = v73;
          v15 = v74;
          v12 = v145;
        }
        else
        {
          --*v121;
        }
      }
    }
    v122 = v152;
    v152 = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
      {
        WTF::StringImpl::destroy(v122, v111);
        v18 = v73;
        v15 = v74;
        v12 = v145;
      }
      else
      {
        *(_DWORD *)v122 -= 2;
      }
    }
    v23 = v144;
  }
  WebCore::WebGL2RenderingContext::compressedTexImage2D(v24, v154[0], v149, v153[0], v12, v15, v18, v21, v23);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D2Body(JSC::ArrayBufferView **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  unsigned int v9;
  unint64_t v10;
  JSC::VM *v11;
  unsigned int v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  JSC::ArrayBufferView *v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  unsigned int v79;
  WebCore::InspectorInstrumentation *v80;
  WebCore::ScriptExecutionContext *v81;
  uint64_t v82;
  WebCore::InspectorCanvasAgent *v83;
  WebCore::InspectorInstrumentation *v84;
  WebCore::ScriptExecutionContext *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  unsigned int v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  _DWORD *v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  WebCore *v118;
  JSC::JSGlobalObject *v119;
  JSC::CallFrame *v120;
  WebCore::JSWebGL2RenderingContext *v121;
  WebCore::CanvasRenderingContext *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  _QWORD v128[2];
  WTF::StringImpl *v129;
  unsigned int v130[2];
  unsigned int v131[2];
  JSC::ArrayBufferView *v132;
  int v133;
  unsigned int v134[2];
  unsigned int v135[2];
  WTF::StringImpl *v136;
  int v137;
  char v138;
  _DWORD *v139;
  char v140;
  _DWORD *v141;
  char v142;
  _DWORD *v143;
  char v144;
  _DWORD *v145;
  char v146;
  _DWORD *v147;
  char v148;
  _DWORD *v149;
  char v150;
  _DWORD *v151;
  char v152;
  _DWORD *v153;
  char v154;
  _DWORD *v155;
  char v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v135);
  if (v135[1])
    return 0;
  v7 = *((_QWORD *)a2 + 7);
  v136 = (WTF::StringImpl *)v7;
  v8 = this[7];
  if (v7 < 0xFFFE000000000000)
  {
    v26 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v26 = v113;
    }
    v27 = (v26 >> 52) & 0x7FF;
    v28 = v27 - 1023;
    v29 = v26 >> (51 - (v26 >> 52));
    if (v27 > 0x433)
      LODWORD(v29) = v26 << ((v26 >> 52) - 51);
    if (v27 >= 0x41F)
      v30 = v29;
    else
      v30 = (((1 << ((v26 >> 52) + 1)) - 1) & v29) + (1 << ((v26 >> 52) + 1));
    if ((v26 & 0x8000000000000000) == 0)
      v31 = v30;
    else
      v31 = -v30;
    if (v28 <= 0x53)
      v9 = v31;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 8);
  v136 = (WTF::StringImpl *)v10;
  v11 = this[7];
  if (v10 < 0xFFFE000000000000)
  {
    v32 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v32 = v114;
    }
    v33 = (v32 >> 52) & 0x7FF;
    v34 = v33 - 1023;
    v35 = v32 >> (51 - (v32 >> 52));
    if (v33 > 0x433)
      LODWORD(v35) = v32 << ((v32 >> 52) - 51);
    if (v33 >= 0x41F)
      v36 = v35;
    else
      v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
    if ((v32 & 0x8000000000000000) == 0)
      v37 = v36;
    else
      v37 = -v36;
    if (v34 <= 0x53)
      v12 = v37;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v136 = (WTF::StringImpl *)v13;
  v14 = this[7];
  if (v13 < 0xFFFE000000000000)
  {
    v38 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v38 = v115;
    }
    v39 = (v38 >> 52) & 0x7FF;
    v40 = v39 - 1023;
    v41 = v38 >> (51 - (v38 >> 52));
    if (v39 > 0x433)
      LODWORD(v41) = v38 << ((v38 >> 52) - 51);
    if (v39 >= 0x41F)
      v42 = v41;
    else
      v42 = (((1 << ((v38 >> 52) + 1)) - 1) & v41) + (1 << ((v38 >> 52) + 1));
    if ((v38 & 0x8000000000000000) == 0)
      v43 = v42;
    else
      v43 = -v42;
    if (v40 > 0x53)
      v43 = 0;
    v127 = v43;
  }
  else
  {
    v127 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v126 = v12;
  v15 = *((_QWORD *)a2 + 10);
  v136 = (WTF::StringImpl *)v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v44 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v44 = v116;
    }
    v45 = (v44 >> 52) & 0x7FF;
    if ((v45 - 1023) <= 0x53)
    {
      v48 = v44 >> (51 - (v44 >> 52));
      if (v45 > 0x433)
        LODWORD(v48) = v44 << ((v44 >> 52) - 51);
      if (v45 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v44 >> 52) + 1)) - 1) & v48) + (1 << ((v44 >> 52) + 1));
      if ((v44 & 0x8000000000000000) == 0)
        v50 = v49;
      else
        v50 = -v49;
      v125 = v50;
    }
    else
    {
      v125 = 0;
    }
  }
  else
  {
    v125 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v124 = v9;
  v17 = *((_QWORD *)a2 + 11);
  v136 = (WTF::StringImpl *)v17;
  v18 = this[7];
  if (v17 < 0xFFFE000000000000)
  {
    v46 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v136, (JSC::JSGlobalObject *)this);
      v46 = v117;
    }
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v51 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v51) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v46 >> 52) + 1)) - 1) & v51) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        v53 = v52;
      else
        v53 = -v52;
      v123 = v53;
    }
    else
    {
      v123 = 0;
    }
  }
  else
  {
    v123 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v134);
  if (v134[1])
    return 0;
  v20 = *((_QWORD *)a2 + 13);
  v132 = this[7];
  if ((v20 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v20 + 5) - 39 > 0xB
    || (*(_BYTE *)(v20 + 40) & 6) != 0)
  {
    v128[0] = 0;
LABEL_22:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v132, 7, "srcData", 8, "WebGL2RenderingContext", 23, v19, "compressedTexSubImage2D", 24, "ArrayBufferView", 16);
    v21 = 1;
    v137 = 1;
    v128[0] = 0;
    goto LABEL_25;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v20);
  if (!v128[0])
    goto LABEL_22;
  v21 = 0;
  v136 = (WTF::StringImpl *)v128[0];
  v137 = 0;
LABEL_25:
  LOBYTE(v132) = 0;
  v133 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v21])(v128, &v132, &v136);
  v133 = v21;
  if (v137 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v137])(v128, &v136);
    v21 = v133;
  }
  if (v21)
  {
    v24 = 0;
LABEL_39:
    if (v21 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v21])(&v136, &v132);
    return v24;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 14), v131);
  if (v131[1])
  {
    v24 = 0;
LABEL_38:
    v21 = v133;
    goto LABEL_39;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 11) > 0xFFFFFFFFFFFFFFF5)
    v22 = 10;
  else
    v22 = *((_QWORD *)a2 + 15);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, v22, v130);
  if (v130[1])
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (*((_BYTE *)a3 + 33))
  {
    v122 = (JSC::CallFrame *)((char *)a3 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v129 = v136;
    v54 = v135[0];
    v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v55
      && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
      && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v58, v122, v54, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v138 = 0;
    }
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v59
      && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
      && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v62, v122, v124, (uint64_t)&v139);
    }
    else
    {
      LOBYTE(v139) = 0;
      v140 = 0;
    }
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, v122, v126, (uint64_t)&v141);
    }
    else
    {
      LOBYTE(v141) = 0;
      v142 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, v122, v127, (uint64_t)&v143);
    }
    else
    {
      LOBYTE(v143) = 0;
      v144 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, v122, v125, (uint64_t)&v145);
    }
    else
    {
      LOBYTE(v145) = 0;
      v146 = 0;
    }
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, v122, v123, (uint64_t)&v147);
    }
    else
    {
      LOBYTE(v147) = 0;
      v148 = 0;
    }
    v79 = v134[0];
    v80 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v80
      && (v82 = WebCore::InspectorInstrumentation::instrumentingAgents(v80, v81)) != 0
      && (v83 = *(WebCore::InspectorCanvasAgent **)(v82 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v83, v122, v79, (uint64_t)&v149);
    }
    else
    {
      LOBYTE(v149) = 0;
      v150 = 0;
    }
    if (v133)
      goto LABEL_232;
    v84 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v84
      && (v86 = WebCore::InspectorInstrumentation::instrumentingAgents(v84, v85)) != 0
      && (v87 = *(_QWORD *)(v86 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v87, (uint64_t)v122, (uint64_t)&v151);
    }
    else
    {
      LOBYTE(v151) = 0;
      v152 = 0;
    }
    v88 = v131[0];
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v89
      && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
      && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v92, v122, v88, (uint64_t)&v153);
    }
    else
    {
      LOBYTE(v153) = 0;
      v154 = 0;
    }
    v93 = v130[0];
    v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v94
      && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
      && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v97, v122, v93, (uint64_t)&v155);
    }
    else
    {
      LOBYTE(v155) = 0;
      v156 = 0;
    }
    v128[0] = &v136;
    v128[1] = 10;
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v98)
    {
      v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99);
      if (v100)
      {
        v101 = *(_QWORD *)(v100 + 96);
        if (v101)
          WebCore::InspectorCanvasAgent::recordAction(v101, v122, (const WTF::StringImpl *)&v129, v128);
      }
    }
    if (v156)
    {
      v102 = v155;
      v155 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v154)
    {
      v103 = v153;
      v153 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v152)
    {
      v104 = v151;
      v151 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v150)
    {
      v105 = v149;
      v149 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v148)
    {
      v106 = v147;
      v147 = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    if (v146)
    {
      v107 = v145;
      v145 = 0;
      if (v107)
      {
        if (*v107 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v107;
      }
    }
    if (v144)
    {
      v108 = v143;
      v143 = 0;
      if (v108)
      {
        if (*v108 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v108;
      }
    }
    if (v142)
    {
      v109 = v141;
      v141 = 0;
      if (v109)
      {
        if (*v109 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v109;
      }
    }
    if (v140)
    {
      v110 = v139;
      v139 = 0;
      if (v110)
      {
        if (*v110 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v110;
      }
    }
    if (v138)
    {
      v111 = v136;
      v136 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v111;
      }
    }
    v112 = v129;
    v129 = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
        WTF::StringImpl::destroy(v112, v99);
      else
        *(_DWORD *)v112 -= 2;
    }
  }
  if (!v133)
  {
    v23 = v132;
    v132 = 0;
    WebCore::WebGL2RenderingContext::compressedTexSubImage2D(a3, v135[0], v124, v126, v127, v125, v123, v134[0], v23, v131[0], v130[0]);
    if (*(_DWORD *)v23 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v23;
    v24 = 10;
    goto LABEL_38;
  }
LABEL_232:
  v118 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D1Body(v118, v119, v120, v121);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v6;
  JSC::VM *v7;
  unsigned int v8;
  unint64_t v9;
  JSC::VM *v10;
  unsigned int v11;
  unint64_t v12;
  JSC::VM *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  unint64_t v20;
  JSC::VM *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  double v26;
  JSC::CallFrame *v27;
  int v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (*v55)();
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  JSC::VM *v68;
  int v69;
  int hasExceptionsAfterHandlingTraps;
  JSC::CallFrame *v71;
  unsigned int v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  WebCore::InspectorCanvasAgent *v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  WebCore::InspectorCanvasAgent *v92;
  WebCore::InspectorInstrumentation *v93;
  WebCore::ScriptExecutionContext *v94;
  uint64_t v95;
  WebCore::InspectorCanvasAgent *v96;
  unsigned int v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  WebCore::InspectorInstrumentation *v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t v104;
  WebCore::InspectorCanvasAgent *v105;
  WebCore::InspectorInstrumentation *v106;
  WebCore::ScriptExecutionContext *v107;
  uint64_t v108;
  WebCore::InspectorCanvasAgent *v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  WTF::StringImpl *v123;
  JSC::VM *v124;
  int v125;
  char v126;
  int v127;
  double v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  WebCore::CanvasRenderingContext *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  _QWORD v143[2];
  WTF::StringImpl *v144;
  _DWORD v145[2];
  int v146[2];
  _QWORD v147[2];
  char v148;
  _DWORD *v149;
  char v150;
  _DWORD *v151;
  char v152;
  _DWORD *v153;
  char v154;
  _DWORD *v155;
  char v156;
  _DWORD *v157;
  char v158;
  _DWORD *v159;
  char v160;
  _DWORD *v161;
  char v162;
  _DWORD *v163;
  char v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 6), v146);
  if (v146[1])
    return 0;
  v6 = *((_QWORD *)a2 + 7);
  v147[0] = v6;
  v7 = this[7];
  if (v6 < 0xFFFE000000000000)
  {
    v30 = v6 - 0x2000000000000;
    if (v6 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v30 = v129;
    }
    v31 = (v30 >> 52) & 0x7FF;
    v32 = v31 - 1023;
    v33 = v30 >> (51 - (v30 >> 52));
    if (v31 > 0x433)
      LODWORD(v33) = v30 << ((v30 >> 52) - 51);
    if (v31 >= 0x41F)
      v34 = v33;
    else
      v34 = (((1 << ((v30 >> 52) + 1)) - 1) & v33) + (1 << ((v30 >> 52) + 1));
    if ((v30 & 0x8000000000000000) == 0)
      v35 = v34;
    else
      v35 = -v34;
    if (v32 <= 0x53)
      v8 = v35;
    else
      v8 = 0;
  }
  else
  {
    v8 = v6;
  }
  if (*((_DWORD *)v7 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v7))
    return 0;
  v9 = *((_QWORD *)a2 + 8);
  v147[0] = v9;
  v10 = this[7];
  if (v9 < 0xFFFE000000000000)
  {
    v36 = v9 - 0x2000000000000;
    if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v36 = v130;
    }
    v37 = (v36 >> 52) & 0x7FF;
    v38 = v37 - 1023;
    v39 = v36 >> (51 - (v36 >> 52));
    if (v37 > 0x433)
      LODWORD(v39) = v36 << ((v36 >> 52) - 51);
    if (v37 >= 0x41F)
      v40 = v39;
    else
      v40 = (((1 << ((v36 >> 52) + 1)) - 1) & v39) + (1 << ((v36 >> 52) + 1));
    if ((v36 & 0x8000000000000000) == 0)
      v41 = v40;
    else
      v41 = -v40;
    if (v38 <= 0x53)
      v11 = v41;
    else
      v11 = 0;
  }
  else
  {
    v11 = v9;
  }
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10))
    return 0;
  v12 = *((_QWORD *)a2 + 9);
  v147[0] = v12;
  v13 = this[7];
  if (v12 < 0xFFFE000000000000)
  {
    v42 = v12 - 0x2000000000000;
    if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v42 = v131;
    }
    v43 = (v42 >> 52) & 0x7FF;
    v44 = v43 - 1023;
    v45 = v42 >> (51 - (v42 >> 52));
    if (v43 > 0x433)
      LODWORD(v45) = v42 << ((v42 >> 52) - 51);
    if (v43 >= 0x41F)
      v46 = v45;
    else
      v46 = (((1 << ((v42 >> 52) + 1)) - 1) & v45) + (1 << ((v42 >> 52) + 1));
    if ((v42 & 0x8000000000000000) == 0)
      v47 = v46;
    else
      v47 = -v46;
    if (v44 <= 0x53)
      v14 = v47;
    else
      v14 = 0;
  }
  else
  {
    v14 = v12;
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13))
    return 0;
  v140 = v14;
  v141 = v11;
  v15 = *((_QWORD *)a2 + 10);
  v147[0] = v15;
  v16 = this[7];
  if (v15 < 0xFFFE000000000000)
  {
    v48 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v48 = v132;
    }
    v49 = (v48 >> 52) & 0x7FF;
    if ((v49 - 1023) <= 0x53)
    {
      v61 = v48 >> (51 - (v48 >> 52));
      if (v49 > 0x433)
        LODWORD(v61) = v48 << ((v48 >> 52) - 51);
      if (v49 >= 0x41F)
        v62 = v61;
      else
        v62 = (((1 << ((v48 >> 52) + 1)) - 1) & v61) + (1 << ((v48 >> 52) + 1));
      if ((v48 & 0x8000000000000000) == 0)
        v17 = v62;
      else
        v17 = -v62;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  v139 = v8;
  v18 = *((_QWORD *)a2 + 11);
  v147[0] = v18;
  v19 = this[7];
  if (v18 < 0xFFFE000000000000)
  {
    v50 = v18 - 0x2000000000000;
    if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v50 = v133;
    }
    v51 = (v50 >> 52) & 0x7FF;
    if ((v51 - 1023) <= 0x53)
    {
      v63 = v50 >> (51 - (v50 >> 52));
      if (v51 > 0x433)
        LODWORD(v63) = v50 << ((v50 >> 52) - 51);
      if (v51 >= 0x41F)
        v64 = v63;
      else
        v64 = (((1 << ((v50 >> 52) + 1)) - 1) & v63) + (1 << ((v50 >> 52) + 1));
      if ((v50 & 0x8000000000000000) == 0)
        v65 = v64;
      else
        v65 = -v64;
      v138 = v65;
    }
    else
    {
      v138 = 0;
    }
  }
  else
  {
    v138 = v18;
  }
  if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>((JSC::JSGlobalObject *)this, *((_QWORD *)a2 + 12), v145);
  if (v145[1])
    return 0;
  v137 = v17;
  v20 = *((_QWORD *)a2 + 13);
  v147[0] = v20;
  v21 = this[7];
  if (v20 < 0xFFFE000000000000)
  {
    v52 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v52 = v134;
    }
    v53 = (v52 >> 52) & 0x7FF;
    if ((v53 - 1023) <= 0x53)
    {
      v66 = v52 >> (51 - (v52 >> 52));
      if (v53 > 0x433)
        LODWORD(v66) = v52 << ((v52 >> 52) - 51);
      if (v53 >= 0x41F)
        v67 = v66;
      else
        v67 = (((1 << ((v52 >> 52) + 1)) - 1) & v66) + (1 << ((v52 >> 52) + 1));
      if ((v52 & 0x8000000000000000) == 0)
        v22 = v67;
      else
        v22 = -v67;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = v20;
  }
  if (*((_DWORD *)v21 + 20))
  {
    v68 = v21;
    v69 = v22;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v68);
    v22 = v69;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  v23 = *((_QWORD *)a2 + 14);
  v147[0] = v23;
  if (v23 < 0xFFFE000000000000)
  {
    v25 = this[7];
    if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      v127 = v22;
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v147, (JSC::JSGlobalObject *)this);
      v22 = v127;
      v26 = v128;
    }
    else
    {
      *(_QWORD *)&v26 = v23 - 0x2000000000000;
    }
    if (*((_DWORD *)v25 + 20))
    {
      v124 = v25;
      v125 = v22;
      v126 = JSC::VM::hasExceptionsAfterHandlingTraps(v124);
      v22 = v125;
      if ((v126 & 1) != 0)
        return 0;
    }
    if (fabs(v26) != INFINITY)
    {
      v28 = v22;
      v29 = fmod(trunc(v26), 1.84467441e19);
      if (v29 >= 0.0)
        v24 = (unint64_t)v29;
      else
        v24 = -(uint64_t)(unint64_t)-v29;
      v27 = a3;
      v22 = v28;
      goto LABEL_84;
    }
    v24 = 0;
  }
  else
  {
    v24 = (int)v23;
  }
  v27 = a3;
LABEL_84:
  if (*((_BYTE *)v27 + 33))
  {
    v135 = v22;
    v136 = (JSC::CallFrame *)((char *)v27 + 8);
    v71 = v27;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v144 = (WTF::StringImpl *)v147[0];
    v72 = v146[0];
    v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v71 + 5) + 144))(*((_QWORD *)v71 + 5));
    if (v73
      && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
      && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v76, v136, v72, (uint64_t)v147);
    }
    else
    {
      LOBYTE(v147[0]) = 0;
      v148 = 0;
    }
    v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v77
      && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
      && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v80, v136, v139, (uint64_t)&v149);
    }
    else
    {
      LOBYTE(v149) = 0;
      v150 = 0;
    }
    v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v81
      && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
      && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v84, v136, v141, (uint64_t)&v151);
    }
    else
    {
      LOBYTE(v151) = 0;
      v152 = 0;
    }
    v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v85
      && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
      && (v88 = *(WebCore::InspectorCanvasAgent **)(v87 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v88, v136, v140, (uint64_t)&v153);
    }
    else
    {
      LOBYTE(v153) = 0;
      v154 = 0;
    }
    v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v89
      && (v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90)) != 0
      && (v92 = *(WebCore::InspectorCanvasAgent **)(v91 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v92, v136, v137, (uint64_t)&v155);
    }
    else
    {
      LOBYTE(v155) = 0;
      v156 = 0;
    }
    v93 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v93
      && (v95 = WebCore::InspectorInstrumentation::instrumentingAgents(v93, v94)) != 0
      && (v96 = *(WebCore::InspectorCanvasAgent **)(v95 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v96, v136, v138, (uint64_t)&v157);
    }
    else
    {
      LOBYTE(v157) = 0;
      v158 = 0;
    }
    v97 = v145[0];
    v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v98
      && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
      && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v101, v136, v97, (uint64_t)&v159);
    }
    else
    {
      LOBYTE(v159) = 0;
      v160 = 0;
    }
    v102 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v102
      && (v104 = WebCore::InspectorInstrumentation::instrumentingAgents(v102, v103)) != 0
      && (v105 = *(WebCore::InspectorCanvasAgent **)(v104 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v105, v136, v135, (uint64_t)&v161);
    }
    else
    {
      LOBYTE(v161) = 0;
      v162 = 0;
    }
    v106 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v106
      && (v108 = WebCore::InspectorInstrumentation::instrumentingAgents(v106, v107)) != 0
      && (v109 = *(WebCore::InspectorCanvasAgent **)(v108 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v109, v136, v24, (uint64_t)&v163);
    }
    else
    {
      LOBYTE(v163) = 0;
      v164 = 0;
    }
    v143[0] = v147;
    v143[1] = 9;
    v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v110)
    {
      v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111);
      if (v112)
      {
        v113 = *(_QWORD *)(v112 + 96);
        if (v113)
          WebCore::InspectorCanvasAgent::recordAction(v113, v136, (const WTF::StringImpl *)&v144, v143);
      }
    }
    v22 = v135;
    if (v164)
    {
      v114 = v163;
      v163 = 0;
      if (v114)
      {
        if (*v114 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v114;
        }
      }
    }
    if (v162)
    {
      v115 = v161;
      v161 = 0;
      if (v115)
      {
        if (*v115 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v115;
        }
      }
    }
    if (v160)
    {
      v116 = v159;
      v159 = 0;
      if (v116)
      {
        if (*v116 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v116;
        }
      }
    }
    if (v158)
    {
      v117 = v157;
      v157 = 0;
      if (v117)
      {
        if (*v117 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v117;
        }
      }
    }
    if (v156)
    {
      v118 = v155;
      v155 = 0;
      if (v118)
      {
        if (*v118 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v118;
        }
      }
    }
    if (v154)
    {
      v119 = v153;
      v153 = 0;
      if (v119)
      {
        if (*v119 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v119;
        }
      }
    }
    if (v152)
    {
      v120 = v151;
      v151 = 0;
      if (v120)
      {
        if (*v120 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v120;
        }
      }
    }
    if (v150)
    {
      v121 = v149;
      v149 = 0;
      if (v121)
      {
        if (*v121 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v121;
        }
      }
    }
    if (v148)
    {
      v122 = (_DWORD *)v147[0];
      v147[0] = 0;
      if (v122)
      {
        if (*v122 == 1)
        {
          WTF::JSONImpl::Value::operator delete();
          v22 = v135;
        }
        else
        {
          --*v122;
        }
      }
    }
    v123 = v144;
    v144 = 0;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
      {
        WTF::StringImpl::destroy(v123, v111);
        v22 = v135;
      }
      else
      {
        *(_DWORD *)v123 -= 2;
      }
    }
    v27 = a3;
  }
  if (*((_BYTE *)v27 + 364))
    return 10;
  if (*((_QWORD *)v27 + 122))
    v55 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v55 = 0;
  if (!v55)
  {
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v27, 1282, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)"no bound PIXEL_UNPACK_BUFFER", 29);
    return 10;
  }
  v56 = v24;
  v57 = v22;
  v58 = v146[0];
  v59 = v145[0];
  WebCore::WebGLRenderingContextBase::validateTexture2DBinding(v27, (uint64_t)"compressedTexImage2D", 21, v146[0], v147);
  if (v147[0])
  {
    if (*(_DWORD *)(v147[0] + 8) == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v147[0] + 8))();
      v60 = v57;
    }
    else
    {
      v60 = v57;
      --*(_DWORD *)(v147[0] + 8);
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int, uint64_t))(**((_QWORD **)a3 + 11) + 1176))(*((_QWORD *)a3 + 11), v58, v139, v141, v140, v137, v138, v59, v60, v56);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1fv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1fv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F548[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniform1fv", 11, v12, 0, (uint64_t)v59, 1, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 840))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2fv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2fv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2fv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F548[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniform2fv", 11, v12, 0, (uint64_t)v59, 2, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 872))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3fv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3fv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3fv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F548[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniform3fv", 11, v12, 0, (uint64_t)v59, 3, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 904))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4fv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4fv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4fv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F548[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniform4fv", 11, v12, 0, (uint64_t)v59, 4, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 936))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1iv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1iv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1iv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F578[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>(a3, (uint64_t)"uniform1iv", 11, v12, 0, (uint64_t)v59, 1, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 856))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F568[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2iv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2iv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2iv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F578[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>(a3, (uint64_t)"uniform2iv", 11, v12, 0, (uint64_t)v59, 2, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 888))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F568[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3iv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3iv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3iv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F578[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>(a3, (uint64_t)"uniform3iv", 11, v12, 0, (uint64_t)v59, 3, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 920))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F568[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4iv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4iv1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t (*v22)();
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WebCore *v51;
  JSC::JSGlobalObject *v52;
  JSC::CallFrame *v53;
  WebCore::JSWebGL2RenderingContext *v54;
  unsigned int v55[2];
  unsigned int v56[2];
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  _DWORD *v67;
  char v68;
  char v69[8];
  _BYTE v70[16];
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v12 = 0;
  }
  else
  {
    v61[0] = *((_QWORD *)this + 7);
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v15 = (char **)(16 * v13);
    if ((_DWORD)v13)
      v16 = v15 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v16 = 1;
    if (!v16)
    {
      do
      {
        v15 = (char **)v15[2];
        v14 = v15 != 0;
      }
      while (v15 != &WebCore::JSWebGLUniformLocation::s_info && v15 != 0);
    }
    if (!v14 || (v12 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4iv", 11, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v69);
  v19 = v72;
  if (v72)
  {
    v18 = 0;
LABEL_37:
    if (v19 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v19])(v61, v70);
    return v18;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v56);
  if (v56[1])
  {
    v18 = 0;
LABEL_36:
    v19 = v72;
    goto LABEL_37;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v20 = 10;
  else
    v20 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v20, v55);
  if (v55[1])
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v57[0] = (WTF::StringImpl *)v61[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(_QWORD *)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      v62 = 0;
    }
    if (v72)
      goto LABEL_92;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v28
      && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
      && (v31 = *(_QWORD *)(v30 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v31, (uint64_t)a3 + 8, (uint64_t)v70);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    v32 = v56[0];
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v33
      && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
      && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), v32, (uint64_t)&v65);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v37 = v55[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (JSC::CallFrame *)((char *)a3 + 8), v37, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v67) = 0;
      v68 = 0;
    }
    v59[0] = v61;
    v59[1] = 4;
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v42)
    {
      v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
      if (v44)
      {
        v45 = *(_QWORD *)(v44 + 96);
        if (v45)
          WebCore::InspectorCanvasAgent::recordAction(v45, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v57, v59);
      }
    }
    if (v68)
    {
      v46 = v67;
      v67 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v46;
      }
    }
    if (v66)
    {
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        if (*v47 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v47;
      }
    }
    if (v64)
    {
      v48 = v63;
      v63 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v62)
    {
      v49 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    v50 = v57[0];
    v57[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v43);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  if (!v72)
  {
    LOBYTE(v57[0]) = 0;
    v58 = -1;
    v21 = v71;
    if (v71 == -1)
    {
      LOBYTE(v59[0]) = 0;
      v60 = -1;
    }
    else
    {
      v22 = off_1E332F578[v71];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v22)(v61, v57, v70);
      v58 = v21;
      LOBYTE(v59[0]) = 0;
      v60 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v22)(v61, v59, v57);
      v60 = v21;
    }
    if (!*((_BYTE *)a3 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>(a3, (uint64_t)"uniform4iv", 11, v12, 0, (uint64_t)v59, 4, v56[0], (uint64_t)v61, v55[0]);
      if (v62)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 952))(*((_QWORD *)a3 + 11), *(unsigned int *)(v12 + 16), v61[0], v61[1]);
      v21 = v60;
    }
    if (v21 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v21])(v61, v59);
    v60 = -1;
    if (v58 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F568[v58])(v61, v57);
    v18 = 10;
    goto LABEL_36;
  }
LABEL_92:
  v51 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2fv1Body(v51, v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2fv1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t i;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  unsigned int v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  BOOL v61;
  BOOL v62;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  int *v66;
  int v67;
  unsigned int v68[2];
  unsigned int v69[2];
  WTF::StringImpl *v70[2];
  int v71;
  _QWORD v72[2];
  int v73;
  _QWORD v74[2];
  char v75;
  _DWORD *v76;
  char v77;
  _DWORD *v78;
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  char v84[8];
  _BYTE v85[16];
  int v86;
  int v87;
  uint64_t v88;

  v9 = (unint64_t)a2;
  v10 = (JSC *)this;
  v88 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  v12 = this[7];
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
  }
  else
  {
    v74[0] = v12;
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v14 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSWebGLUniformLocation::s_info && v16 != 0);
    }
    if (!v15 || (v13 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)v10, (uint64_t)v74, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix2fv", 17, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  if (v20 >= 0xFFFE000000000000)
    goto LABEL_110;
  *(_QWORD *)&v21 = v20 - 0x2000000000000;
  if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      i = v20 == 7;
      goto LABEL_20;
    }
    v64 = *(unsigned __int8 *)(v20 + 5);
    if (v64 == 3)
    {
      v67 = *(_DWORD *)(v20 + 8);
    }
    else
    {
      if (v64 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) != (_QWORD)v10;
        goto LABEL_20;
      }
      v65 = *(_QWORD *)(v20 + 8);
      if ((v65 & 1) != 0)
        v66 = (int *)(v20 + 16);
      else
        v66 = (int *)(v65 + 4);
      v67 = *v66;
    }
    v61 = v67 == 0;
    goto LABEL_122;
  }
  v62 = v21 <= 0.0;
  v63 = v21 < 0.0;
  for (i = !v62 || v63; ; i = !v61)
  {
LABEL_20:
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
      return 0;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v10, *(JSC::JSGlobalObject **)(v9 + 64), (uint64_t)v84);
    v23 = v87;
    if (v87)
      break;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, *(_QWORD *)(v9 + 72), v69);
    if (v69[1])
    {
      v19 = 0;
LABEL_41:
      v23 = v87;
      goto LABEL_42;
    }
    if ((unint64_t)(*(int *)(v9 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v9 = 10;
    else
      v9 = *(_QWORD *)(v9 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, v9, v68);
    if (v68[1])
    {
      v19 = 0;
      goto LABEL_41;
    }
    if (*((_BYTE *)a3 + 33))
    {
      v10 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v70[0] = (WTF::StringImpl *)v74[0];
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (JSC::CallFrame *)((char *)a3 + 8), v13, (uint64_t)v74);
      }
      else
      {
        LOBYTE(v74[0]) = 0;
        v75 = 0;
      }
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v76);
      }
      else
      {
        LOBYTE(v76) = 0;
        v77 = 0;
      }
      if (v87)
        goto LABEL_109;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v37
        && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
        && (v40 = *(_QWORD *)(v39 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v40, (uint64_t)a3 + 8, (uint64_t)v85);
      }
      else
      {
        LOBYTE(v78) = 0;
        v79 = 0;
      }
      v41 = v69[0];
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (JSC::CallFrame *)((char *)a3 + 8), v41, (uint64_t)&v80);
      }
      else
      {
        LOBYTE(v80) = 0;
        v81 = 0;
      }
      v46 = v68[0];
      v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v47
        && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
        && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v50, (JSC::CallFrame *)((char *)a3 + 8), v46, (uint64_t)&v82);
      }
      else
      {
        LOBYTE(v82) = 0;
        v83 = 0;
      }
      v72[0] = v74;
      v72[1] = 5;
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v51)
      {
        v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 96);
          if (v54)
            WebCore::InspectorCanvasAgent::recordAction(v54, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v70, v72);
        }
      }
      if (v83)
      {
        v55 = v82;
        v82 = 0;
        if (v55)
        {
          if (*v55 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v55;
        }
      }
      if (v81)
      {
        v56 = v80;
        v80 = 0;
        if (v56)
        {
          if (*v56 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v56;
        }
      }
      if (v79)
      {
        v57 = v78;
        v78 = 0;
        if (v57)
        {
          if (*v57 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v57;
        }
      }
      if (v77)
      {
        v58 = v76;
        v76 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
      }
      if (v75)
      {
        v59 = (_DWORD *)v74[0];
        v74[0] = 0;
        if (v59)
        {
          if (*v59 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v59;
        }
      }
      v60 = v70[0];
      v70[0] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v52);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    if (!v87)
    {
      LOBYTE(v70[0]) = 0;
      v71 = -1;
      v24 = v86;
      if (v86 == -1)
      {
        LOBYTE(v72[0]) = 0;
        v73 = -1;
      }
      else
      {
        v25 = v13;
        v26 = i;
        v27 = off_1E332F548[v86];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v27)(v74, v70, v85);
        v71 = v24;
        LOBYTE(v72[0]) = 0;
        v73 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v27)(v74, v72, v70);
        i = v26;
        v13 = v25;
        v73 = v24;
      }
      if (!*((_BYTE *)a3 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniformMatrix2fv", 17, v13, i, (uint64_t)v72, 4, v69[0], (uint64_t)v74, v68[0]);
        if (v75)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 960))(*((_QWORD *)a3 + 11), *(unsigned int *)(v13 + 16), i, v74[0], v74[1]);
        v24 = v73;
      }
      if (v24 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v24])(v74, v72);
      v73 = -1;
      if (v71 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v71])(v74, v70);
      v19 = 10;
      goto LABEL_41;
    }
LABEL_109:
    v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_110:
    v61 = (_DWORD)v20 == 0;
LABEL_122:
    ;
  }
  v19 = 0;
LABEL_42:
  if (v23 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v23])(v74, v85);
  return v19;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix3fv1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t i;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  unsigned int v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  BOOL v61;
  BOOL v62;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  int *v66;
  int v67;
  unsigned int v68[2];
  unsigned int v69[2];
  WTF::StringImpl *v70[2];
  int v71;
  _QWORD v72[2];
  int v73;
  _QWORD v74[2];
  char v75;
  _DWORD *v76;
  char v77;
  _DWORD *v78;
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  char v84[8];
  _BYTE v85[16];
  int v86;
  int v87;
  uint64_t v88;

  v9 = (unint64_t)a2;
  v10 = (JSC *)this;
  v88 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  v12 = this[7];
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
  }
  else
  {
    v74[0] = v12;
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v14 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSWebGLUniformLocation::s_info && v16 != 0);
    }
    if (!v15 || (v13 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)v10, (uint64_t)v74, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix3fv", 17, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  if (v20 >= 0xFFFE000000000000)
    goto LABEL_110;
  *(_QWORD *)&v21 = v20 - 0x2000000000000;
  if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      i = v20 == 7;
      goto LABEL_20;
    }
    v64 = *(unsigned __int8 *)(v20 + 5);
    if (v64 == 3)
    {
      v67 = *(_DWORD *)(v20 + 8);
    }
    else
    {
      if (v64 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) != (_QWORD)v10;
        goto LABEL_20;
      }
      v65 = *(_QWORD *)(v20 + 8);
      if ((v65 & 1) != 0)
        v66 = (int *)(v20 + 16);
      else
        v66 = (int *)(v65 + 4);
      v67 = *v66;
    }
    v61 = v67 == 0;
    goto LABEL_122;
  }
  v62 = v21 <= 0.0;
  v63 = v21 < 0.0;
  for (i = !v62 || v63; ; i = !v61)
  {
LABEL_20:
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
      return 0;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v10, *(JSC::JSGlobalObject **)(v9 + 64), (uint64_t)v84);
    v23 = v87;
    if (v87)
      break;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, *(_QWORD *)(v9 + 72), v69);
    if (v69[1])
    {
      v19 = 0;
LABEL_41:
      v23 = v87;
      goto LABEL_42;
    }
    if ((unint64_t)(*(int *)(v9 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v9 = 10;
    else
      v9 = *(_QWORD *)(v9 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, v9, v68);
    if (v68[1])
    {
      v19 = 0;
      goto LABEL_41;
    }
    if (*((_BYTE *)a3 + 33))
    {
      v10 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v70[0] = (WTF::StringImpl *)v74[0];
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (JSC::CallFrame *)((char *)a3 + 8), v13, (uint64_t)v74);
      }
      else
      {
        LOBYTE(v74[0]) = 0;
        v75 = 0;
      }
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v76);
      }
      else
      {
        LOBYTE(v76) = 0;
        v77 = 0;
      }
      if (v87)
        goto LABEL_109;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v37
        && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
        && (v40 = *(_QWORD *)(v39 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v40, (uint64_t)a3 + 8, (uint64_t)v85);
      }
      else
      {
        LOBYTE(v78) = 0;
        v79 = 0;
      }
      v41 = v69[0];
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (JSC::CallFrame *)((char *)a3 + 8), v41, (uint64_t)&v80);
      }
      else
      {
        LOBYTE(v80) = 0;
        v81 = 0;
      }
      v46 = v68[0];
      v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v47
        && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
        && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v50, (JSC::CallFrame *)((char *)a3 + 8), v46, (uint64_t)&v82);
      }
      else
      {
        LOBYTE(v82) = 0;
        v83 = 0;
      }
      v72[0] = v74;
      v72[1] = 5;
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v51)
      {
        v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 96);
          if (v54)
            WebCore::InspectorCanvasAgent::recordAction(v54, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v70, v72);
        }
      }
      if (v83)
      {
        v55 = v82;
        v82 = 0;
        if (v55)
        {
          if (*v55 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v55;
        }
      }
      if (v81)
      {
        v56 = v80;
        v80 = 0;
        if (v56)
        {
          if (*v56 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v56;
        }
      }
      if (v79)
      {
        v57 = v78;
        v78 = 0;
        if (v57)
        {
          if (*v57 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v57;
        }
      }
      if (v77)
      {
        v58 = v76;
        v76 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
      }
      if (v75)
      {
        v59 = (_DWORD *)v74[0];
        v74[0] = 0;
        if (v59)
        {
          if (*v59 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v59;
        }
      }
      v60 = v70[0];
      v70[0] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v52);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    if (!v87)
    {
      LOBYTE(v70[0]) = 0;
      v71 = -1;
      v24 = v86;
      if (v86 == -1)
      {
        LOBYTE(v72[0]) = 0;
        v73 = -1;
      }
      else
      {
        v25 = v13;
        v26 = i;
        v27 = off_1E332F548[v86];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v27)(v74, v70, v85);
        v71 = v24;
        LOBYTE(v72[0]) = 0;
        v73 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v27)(v74, v72, v70);
        i = v26;
        v13 = v25;
        v73 = v24;
      }
      if (!*((_BYTE *)a3 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniformMatrix3fv", 17, v13, i, (uint64_t)v72, 9, v69[0], (uint64_t)v74, v68[0]);
        if (v75)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 968))(*((_QWORD *)a3 + 11), *(unsigned int *)(v13 + 16), i, v74[0], v74[1]);
        v24 = v73;
      }
      if (v24 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v24])(v74, v72);
      v73 = -1;
      if (v71 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v71])(v74, v70);
      v19 = 10;
      goto LABEL_41;
    }
LABEL_109:
    v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_110:
    v61 = (_DWORD)v20 == 0;
LABEL_122:
    ;
  }
  v19 = 0;
LABEL_42:
  if (v23 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v23])(v74, v85);
  return v19;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix4fv1Body(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC *v10;
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t i;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  unsigned int v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  BOOL v61;
  BOOL v62;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  int *v66;
  int v67;
  unsigned int v68[2];
  unsigned int v69[2];
  WTF::StringImpl *v70[2];
  int v71;
  _QWORD v72[2];
  int v73;
  _QWORD v74[2];
  char v75;
  _DWORD *v76;
  char v77;
  _DWORD *v78;
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  char v84[8];
  _BYTE v85[16];
  int v86;
  int v87;
  uint64_t v88;

  v9 = (unint64_t)a2;
  v10 = (JSC *)this;
  v88 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 6);
  v12 = this[7];
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v13 = 0;
  }
  else
  {
    v74[0] = v12;
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_14;
    v14 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
    v15 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
    v16 = (char **)(16 * v14);
    if ((_DWORD)v14)
      v17 = v16 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v17 = 1;
    if (!v17)
    {
      do
      {
        v16 = (char **)v16[2];
        v15 = v16 != 0;
      }
      while (v16 != &WebCore::JSWebGLUniformLocation::s_info && v16 != 0);
    }
    if (!v15 || (v13 = *(_QWORD *)(v11 + 24)) == 0)
    {
LABEL_14:
      WebCore::throwArgumentTypeError((uint64_t)v10, (uint64_t)v74, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix4fv", 17, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v20 = *((_QWORD *)a2 + 7);
  if (v20 >= 0xFFFE000000000000)
    goto LABEL_110;
  *(_QWORD *)&v21 = v20 - 0x2000000000000;
  if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      i = v20 == 7;
      goto LABEL_20;
    }
    v64 = *(unsigned __int8 *)(v20 + 5);
    if (v64 == 3)
    {
      v67 = *(_DWORD *)(v20 + 8);
    }
    else
    {
      if (v64 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) != (_QWORD)v10;
        goto LABEL_20;
      }
      v65 = *(_QWORD *)(v20 + 8);
      if ((v65 & 1) != 0)
        v66 = (int *)(v20 + 16);
      else
        v66 = (int *)(v65 + 4);
      v67 = *v66;
    }
    v61 = v67 == 0;
    goto LABEL_122;
  }
  v62 = v21 <= 0.0;
  v63 = v21 < 0.0;
  for (i = !v62 || v63; ; i = !v61)
  {
LABEL_20:
    if (*((_DWORD *)v12 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v12) & 1) != 0)
      return 0;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v10, *(JSC::JSGlobalObject **)(v9 + 64), (uint64_t)v84);
    v23 = v87;
    if (v87)
      break;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, *(_QWORD *)(v9 + 72), v69);
    if (v69[1])
    {
      v19 = 0;
LABEL_41:
      v23 = v87;
      goto LABEL_42;
    }
    if ((unint64_t)(*(int *)(v9 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v9 = 10;
    else
      v9 = *(_QWORD *)(v9 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v10, v9, v68);
    if (v68[1])
    {
      v19 = 0;
      goto LABEL_41;
    }
    if (*((_BYTE *)a3 + 33))
    {
      v10 = (JSC::CallFrame *)((char *)a3 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v70[0] = (WTF::StringImpl *)v74[0];
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (JSC::CallFrame *)((char *)a3 + 8), v13, (uint64_t)v74);
      }
      else
      {
        LOBYTE(v74[0]) = 0;
        v75 = 0;
      }
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (JSC::CallFrame *)((char *)a3 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v76);
      }
      else
      {
        LOBYTE(v76) = 0;
        v77 = 0;
      }
      if (v87)
        goto LABEL_109;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v37
        && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
        && (v40 = *(_QWORD *)(v39 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v40, (uint64_t)a3 + 8, (uint64_t)v85);
      }
      else
      {
        LOBYTE(v78) = 0;
        v79 = 0;
      }
      v41 = v69[0];
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (JSC::CallFrame *)((char *)a3 + 8), v41, (uint64_t)&v80);
      }
      else
      {
        LOBYTE(v80) = 0;
        v81 = 0;
      }
      v46 = v68[0];
      v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v47
        && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
        && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v50, (JSC::CallFrame *)((char *)a3 + 8), v46, (uint64_t)&v82);
      }
      else
      {
        LOBYTE(v82) = 0;
        v83 = 0;
      }
      v72[0] = v74;
      v72[1] = 5;
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
      if (v51)
      {
        v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52);
        if (v53)
        {
          v54 = *(_QWORD *)(v53 + 96);
          if (v54)
            WebCore::InspectorCanvasAgent::recordAction(v54, (JSC::CallFrame *)((char *)a3 + 8), (const WTF::StringImpl *)v70, v72);
        }
      }
      if (v83)
      {
        v55 = v82;
        v82 = 0;
        if (v55)
        {
          if (*v55 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v55;
        }
      }
      if (v81)
      {
        v56 = v80;
        v80 = 0;
        if (v56)
        {
          if (*v56 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v56;
        }
      }
      if (v79)
      {
        v57 = v78;
        v78 = 0;
        if (v57)
        {
          if (*v57 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v57;
        }
      }
      if (v77)
      {
        v58 = v76;
        v76 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
      }
      if (v75)
      {
        v59 = (_DWORD *)v74[0];
        v74[0] = 0;
        if (v59)
        {
          if (*v59 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v59;
        }
      }
      v60 = v70[0];
      v70[0] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v52);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    if (!v87)
    {
      LOBYTE(v70[0]) = 0;
      v71 = -1;
      v24 = v86;
      if (v86 == -1)
      {
        LOBYTE(v72[0]) = 0;
        v73 = -1;
      }
      else
      {
        v25 = v13;
        v26 = i;
        v27 = off_1E332F548[v86];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v27)(v74, v70, v85);
        v71 = v24;
        LOBYTE(v72[0]) = 0;
        v73 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v27)(v74, v72, v70);
        i = v26;
        v13 = v25;
        v73 = v24;
      }
      if (!*((_BYTE *)a3 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(a3, (uint64_t)"uniformMatrix4fv", 17, v13, i, (uint64_t)v72, 16, v69[0], (uint64_t)v74, v68[0]);
        if (v75)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)a3 + 11) + 976))(*((_QWORD *)a3 + 11), *(unsigned int *)(v13 + 16), i, v74[0], v74[1]);
        v24 = v73;
      }
      if (v24 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v24])(v74, v72);
      v73 = -1;
      if (v71 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v71])(v74, v70);
      v19 = 10;
      goto LABEL_41;
    }
LABEL_109:
    v12 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_110:
    v61 = (_DWORD)v20 == 0;
LABEL_122:
    ;
  }
  v19 = 0;
LABEL_42:
  if (v23 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v23])(v74, v85);
  return v19;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_readPixels3Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  WTF::StringImpl *v7;
  JSC::VM *v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  JSC::VM *v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  JSC::VM *v14;
  int v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  uint64_t v18;
  JSC::JSArrayBufferView *v19;
  int v20;
  WTF::StringImpl *v21;
  JSC::CallFrame *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t (*v28)();
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v50;
  int v51;
  int v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  WebCore::InspectorInstrumentation *v61;
  WebCore::ScriptExecutionContext *v62;
  uint64_t v63;
  WebCore::InspectorCanvasAgent *v64;
  WebCore::InspectorInstrumentation *v65;
  WebCore::ScriptExecutionContext *v66;
  uint64_t v67;
  WebCore::InspectorCanvasAgent *v68;
  unsigned int v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  unsigned int v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  WebCore::InspectorInstrumentation *v79;
  WebCore::ScriptExecutionContext *v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::InspectorInstrumentation *v83;
  WebCore::ScriptExecutionContext *v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  WebCore::CanvasRenderingContext *v99;
  unsigned int v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  _DWORD v104[2];
  _DWORD v105[2];
  WTF::StringImpl **v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  char v111;
  _DWORD *v112;
  char v113;
  _DWORD *v114;
  char v115;
  _DWORD *v116;
  char v117;
  _DWORD *v118;
  char v119;
  _DWORD *v120;
  char v121;
  _DWORD *v122;
  char v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v109 = v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v7 < 0xFFFE000000000000)
  {
    v29 = (unint64_t)v7 - 0x2000000000000;
    if ((unint64_t)v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, this);
      v29 = v95;
    }
    v30 = (v29 >> 52) & 0x7FF;
    v31 = v30 - 1023;
    v32 = v29 >> (51 - (v29 >> 52));
    if (v30 > 0x433)
      LODWORD(v32) = v29 << ((v29 >> 52) - 51);
    if (v30 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
    if ((v29 & 0x8000000000000000) == 0)
      v34 = v33;
    else
      v34 = -v33;
    if (v31 <= 0x53)
      v9 = v34;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v109 = v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v10 < 0xFFFE000000000000)
  {
    v35 = (unint64_t)v10 - 0x2000000000000;
    if ((unint64_t)v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, this);
      v35 = v96;
    }
    v36 = (v35 >> 52) & 0x7FF;
    v37 = v36 - 1023;
    v38 = v35 >> (51 - (v35 >> 52));
    if (v36 > 0x433)
      LODWORD(v38) = v35 << ((v35 >> 52) - 51);
    if (v36 >= 0x41F)
      v39 = v38;
    else
      v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
    if ((v35 & 0x8000000000000000) == 0)
      v40 = v39;
    else
      v40 = -v39;
    if (v37 <= 0x53)
      v12 = v40;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
  v109 = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v41 = (unint64_t)v13 - 0x2000000000000;
    if ((unint64_t)v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, this);
      v41 = v97;
    }
    v42 = (v41 >> 52) & 0x7FF;
    v43 = v42 - 1023;
    v44 = v41 >> (51 - (v41 >> 52));
    if (v42 > 0x433)
      LODWORD(v44) = v41 << ((v41 >> 52) - 51);
    if (v42 >= 0x41F)
      v45 = v44;
    else
      v45 = (((1 << ((v41 >> 52) + 1)) - 1) & v44) + (1 << ((v41 >> 52) + 1));
    if ((v41 & 0x8000000000000000) == 0)
      v46 = v45;
    else
      v46 = -v45;
    if (v43 <= 0x53)
      v15 = v46;
    else
      v15 = 0;
  }
  else
  {
    v15 = (int)v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v101 = v15;
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
  v109 = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v16 < 0xFFFE000000000000)
  {
    v47 = (unint64_t)v16 - 0x2000000000000;
    if ((unint64_t)v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v109, this);
      v47 = v98;
    }
    v48 = (v47 >> 52) & 0x7FF;
    if ((v48 - 1023) <= 0x53)
    {
      v50 = v47 >> (51 - (v47 >> 52));
      if (v48 > 0x433)
        LODWORD(v50) = v47 << ((v47 >> 52) - 51);
      if (v48 >= 0x41F)
        v51 = v50;
      else
        v51 = (((1 << ((v47 >> 52) + 1)) - 1) & v50) + (1 << ((v47 >> 52) + 1));
      if ((v47 & 0x8000000000000000) == 0)
        v52 = v51;
      else
        v52 = -v51;
      v100 = v52;
    }
    else
    {
      v100 = 0;
    }
  }
  else
  {
    v100 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v105);
  if (v105[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v104);
  if (v104[1])
    return 0;
  v19 = (JSC::JSArrayBufferView *)*((_QWORD *)a2 + 12);
  if (((unint64_t)v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v102 = 0;
    v103 = 0;
    goto LABEL_33;
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if (((unint64_t)v19 & 0xFFFE000000000002) != 0
    || *((unsigned __int8 *)v19 + 5) - 39 > 0xB
    || (*((_BYTE *)v19 + 40) & 6) != 0)
  {
    v108 = 0;
  }
  else
  {
    JSC::JSArrayBufferView::possiblySharedImpl(v19);
    if (v108)
    {
      v22 = a3;
      v23 = v9;
      v20 = 0;
      v109 = v108;
      v110 = 0;
      goto LABEL_26;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v102, 6, "pixels", 7, "WebGL2RenderingContext", 23, v18, "readPixels", 11, "ArrayBufferView", 16);
  v20 = 1;
  v110 = 1;
  v21 = v108;
  v108 = 0;
  v22 = a3;
  if (v21)
  {
    v23 = v9;
    if (*(_DWORD *)v21 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v21;
  }
  else
  {
    v23 = v9;
  }
LABEL_26:
  LOBYTE(v106) = 0;
  LODWORD(v107) = -1;
  ((void (*)(WTF::StringImpl **, WTF::StringImpl ***, WTF::StringImpl **))off_1E332F388[v20])(&v102, &v106, &v109);
  LODWORD(v107) = v20;
  if (v110 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F378[v110])(&v102, &v109);
    v20 = v107;
  }
  if (v20)
  {
    v24 = 1;
    v103 = 1;
    if (v20 == -1)
    {
      v25 = 0;
LABEL_90:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F478[v24])(&v109, &v102);
      return v25;
    }
  }
  else
  {
    v26 = (uint64_t)v106;
    v106 = 0;
    v102 = (WTF::StringImpl *)v26;
    v103 = 0;
  }
  ((void (*)(WTF::StringImpl **, WTF::StringImpl ***))off_1E332F378[v20])(&v109, &v106);
  v24 = v103;
  v9 = v23;
  a3 = v22;
  if (v103)
    goto LABEL_193;
LABEL_33:
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v108 = v109;
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v53
      && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
      && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v56, (JSC::CallFrame *)((char *)a3 + 8), v9, (uint64_t)&v109);
    }
    else
    {
      LOBYTE(v109) = 0;
      v111 = 0;
    }
    v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v57
      && (v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58)) != 0
      && (v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v60, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)&v112);
    }
    else
    {
      LOBYTE(v112) = 0;
      v113 = 0;
    }
    v61 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v61
      && (v63 = WebCore::InspectorInstrumentation::instrumentingAgents(v61, v62)) != 0
      && (v64 = *(WebCore::InspectorCanvasAgent **)(v63 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v64, (JSC::CallFrame *)((char *)a3 + 8), v101, (uint64_t)&v114);
    }
    else
    {
      LOBYTE(v114) = 0;
      v115 = 0;
    }
    v65 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    v99 = (JSC::CallFrame *)((char *)a3 + 8);
    if (v65
      && (v67 = WebCore::InspectorInstrumentation::instrumentingAgents(v65, v66)) != 0
      && (v68 = *(WebCore::InspectorCanvasAgent **)(v67 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v68, (JSC::CallFrame *)((char *)a3 + 8), v100, (uint64_t)&v116);
    }
    else
    {
      LOBYTE(v116) = 0;
      v117 = 0;
    }
    v69 = v105[0];
    v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v70
      && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
      && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v73, v99, v69, (uint64_t)&v118);
    }
    else
    {
      LOBYTE(v118) = 0;
      v119 = 0;
    }
    v74 = v104[0];
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, v99, v74, (uint64_t)&v120);
    }
    else
    {
      LOBYTE(v120) = 0;
      v121 = 0;
    }
    if (v103)
      goto LABEL_192;
    v79 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v79
      && (v81 = WebCore::InspectorInstrumentation::instrumentingAgents(v79, v80)) != 0
      && (v82 = *(_QWORD *)(v81 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v82, v99, (uint64_t *)&v102, (uint64_t)&v122);
    }
    else
    {
      LOBYTE(v122) = 0;
      v123 = 0;
    }
    v106 = &v109;
    v107 = 7;
    v83 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v83)
    {
      v85 = WebCore::InspectorInstrumentation::instrumentingAgents(v83, v84);
      if (v85)
      {
        v86 = *(_QWORD *)(v85 + 96);
        if (v86)
          WebCore::InspectorCanvasAgent::recordAction(v86, v99, (const WTF::StringImpl *)&v108, &v106);
      }
    }
    if (v123)
    {
      v87 = v122;
      v122 = 0;
      if (v87)
      {
        if (*v87 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v87;
      }
    }
    if (v121)
    {
      v88 = v120;
      v120 = 0;
      if (v88)
      {
        if (*v88 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v88;
      }
    }
    if (v119)
    {
      v89 = v118;
      v118 = 0;
      if (v89)
      {
        if (*v89 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v89;
      }
    }
    if (v117)
    {
      v90 = v116;
      v116 = 0;
      if (v90)
      {
        if (*v90 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v90;
      }
    }
    if (v115)
    {
      v91 = v114;
      v114 = 0;
      if (v91)
      {
        if (*v91 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v91;
      }
    }
    if (v113)
    {
      v92 = v112;
      v112 = 0;
      if (v92)
      {
        if (*v92 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v92;
      }
    }
    if (v111)
    {
      v93 = v109;
      v109 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v93;
      }
    }
    v94 = v108;
    v108 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v84);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  if (v103)
  {
LABEL_192:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_193:
    v25 = 0;
    goto LABEL_89;
  }
  v27 = v102;
  v102 = 0;
  v109 = v27;
  if (!*((_BYTE *)a3 + 364))
  {
    if (*((_QWORD *)a3 + 121))
      v28 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v28 = 0;
    if (v28)
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a3, 1282, (uint64_t)"readPixels", 11, (uint64_t)"a buffer is bound to PIXEL_PACK_BUFFER", 39);
    }
    else
    {
      WebCore::WebGLRenderingContextBase::readPixels(a3, v9, v12, v101, v100, (WebCore::GraphicsContextGL *)v105[0], v104[0], (uint64_t *)&v109);
      v27 = v109;
    }
  }
  v109 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v27;
  }
  v24 = v103;
  v25 = 10;
LABEL_89:
  if (v24 != -1)
    goto LABEL_90;
  return v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_readPixels1Body(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  unint64_t v7;
  JSC::VM *v8;
  int v9;
  unint64_t v10;
  JSC::VM *v11;
  unsigned int v12;
  unint64_t v13;
  JSC::VM *v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  int v45;
  int v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  WebCore::InspectorCanvasAgent *v62;
  unsigned int v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  WebCore::InspectorCanvasAgent *v67;
  unsigned int v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  WebCore::InspectorCanvasAgent *v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  double v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  WebCore::CanvasRenderingContext *v94;
  int v95;
  int v96;
  unsigned int v97;
  _QWORD v98[2];
  WTF::StringImpl *v99;
  unsigned int v100[2];
  WebCore::GraphicsContextGL *v101;
  _QWORD v102[2];
  char v103;
  _DWORD *v104;
  char v105;
  _DWORD *v106;
  char v107;
  _DWORD *v108;
  char v109;
  _DWORD *v110;
  char v111;
  _DWORD *v112;
  char v113;
  _DWORD *v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 + 6);
  v102[0] = v7;
  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v7 < 0xFFFE000000000000)
  {
    v23 = v7 - 0x2000000000000;
    if (v7 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v102, this);
      v23 = v90;
    }
    v24 = (v23 >> 52) & 0x7FF;
    v25 = v24 - 1023;
    v26 = v23 >> (51 - (v23 >> 52));
    if (v24 > 0x433)
      LODWORD(v26) = v23 << ((v23 >> 52) - 51);
    if (v24 >= 0x41F)
      v27 = v26;
    else
      v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
    if ((v23 & 0x8000000000000000) == 0)
      v28 = v27;
    else
      v28 = -v27;
    if (v25 <= 0x53)
      v9 = v28;
    else
      v9 = 0;
  }
  else
  {
    v9 = v7;
  }
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8))
    return 0;
  v10 = *((_QWORD *)a2 + 7);
  v102[0] = v10;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 < 0xFFFE000000000000)
  {
    v29 = v10 - 0x2000000000000;
    if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v102, this);
      v29 = v91;
    }
    v30 = (v29 >> 52) & 0x7FF;
    v31 = v30 - 1023;
    v32 = v29 >> (51 - (v29 >> 52));
    if (v30 > 0x433)
      LODWORD(v32) = v29 << ((v29 >> 52) - 51);
    if (v30 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
    if ((v29 & 0x8000000000000000) == 0)
      v34 = v33;
    else
      v34 = -v33;
    if (v31 <= 0x53)
      v12 = v34;
    else
      v12 = 0;
  }
  else
  {
    v12 = v10;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11))
    return 0;
  v13 = *((_QWORD *)a2 + 8);
  v102[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v35 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v102, this);
      v35 = v92;
    }
    v36 = (v35 >> 52) & 0x7FF;
    v37 = v36 - 1023;
    v38 = v35 >> (51 - (v35 >> 52));
    if (v36 > 0x433)
      LODWORD(v38) = v35 << ((v35 >> 52) - 51);
    if (v36 >= 0x41F)
      v39 = v38;
    else
      v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
    if ((v35 & 0x8000000000000000) == 0)
      v40 = v39;
    else
      v40 = -v39;
    if (v37 <= 0x53)
      v15 = v40;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  v96 = v15;
  v16 = *((_QWORD *)a2 + 9);
  v102[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 < 0xFFFE000000000000)
  {
    v41 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v102, this);
      v41 = v93;
    }
    v42 = (v41 >> 52) & 0x7FF;
    if ((v42 - 1023) <= 0x53)
    {
      v44 = v41 >> (51 - (v41 >> 52));
      if (v42 > 0x433)
        LODWORD(v44) = v41 << ((v41 >> 52) - 51);
      if (v42 >= 0x41F)
        v45 = v44;
      else
        v45 = (((1 << ((v41 >> 52) + 1)) - 1) & v44) + (1 << ((v41 >> 52) + 1));
      if ((v41 & 0x8000000000000000) == 0)
        v46 = v45;
      else
        v46 = -v45;
      v97 = v46;
    }
    else
    {
      v97 = 0;
    }
  }
  else
  {
    v97 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), &v101);
  if (HIDWORD(v101))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v100);
  if (v100[1])
    return 0;
  v95 = v9;
  v18 = *((_QWORD *)a2 + 12);
  v102[0] = v18;
  if (v18 < 0xFFFE000000000000)
  {
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v102, this);
      v21 = v89;
    }
    else
    {
      *(_QWORD *)&v21 = v18 - 0x2000000000000;
    }
    if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
      return 0;
    if (fabs(v21) == INFINITY)
    {
      v19 = 0;
    }
    else
    {
      v22 = fmod(trunc(v21), 1.84467441e19);
      if (v22 >= 0.0)
        v19 = (unint64_t)v22;
      else
        v19 = -(uint64_t)(unint64_t)-v22;
    }
  }
  else
  {
    v19 = (int)v18;
  }
  if (*((_BYTE *)a3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v99 = (WTF::StringImpl *)v102[0];
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v47
      && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
      && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v50, (JSC::CallFrame *)((char *)a3 + 8), v95, (uint64_t)v102);
    }
    else
    {
      LOBYTE(v102[0]) = 0;
      v103 = 0;
    }
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v51
      && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
      && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v54, (JSC::CallFrame *)((char *)a3 + 8), v12, (uint64_t)&v104);
    }
    else
    {
      LOBYTE(v104) = 0;
      v105 = 0;
    }
    v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v55
      && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
      && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v58, (JSC::CallFrame *)((char *)a3 + 8), v96, (uint64_t)&v106);
    }
    else
    {
      LOBYTE(v106) = 0;
      v107 = 0;
    }
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    v94 = (JSC::CallFrame *)((char *)a3 + 8);
    if (v59
      && (v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60)) != 0
      && (v62 = *(WebCore::InspectorCanvasAgent **)(v61 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v62, (JSC::CallFrame *)((char *)a3 + 8), v97, (uint64_t)&v108);
    }
    else
    {
      LOBYTE(v108) = 0;
      v109 = 0;
    }
    v63 = v101;
    v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v64
      && (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65)) != 0
      && (v67 = *(WebCore::InspectorCanvasAgent **)(v66 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v67, v94, v63, (uint64_t)&v110);
    }
    else
    {
      LOBYTE(v110) = 0;
      v111 = 0;
    }
    v68 = v100[0];
    v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v69
      && (v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70)) != 0
      && (v72 = *(WebCore::InspectorCanvasAgent **)(v71 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v72, v94, v68, (uint64_t)&v112);
    }
    else
    {
      LOBYTE(v112) = 0;
      v113 = 0;
    }
    v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v73
      && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
      && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v76, v94, v19, (uint64_t)&v114);
    }
    else
    {
      LOBYTE(v114) = 0;
      v115 = 0;
    }
    v98[0] = v102;
    v98[1] = 7;
    v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 5) + 144))(*((_QWORD *)a3 + 5));
    if (v77)
    {
      v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78);
      if (v79)
      {
        v80 = *(_QWORD *)(v79 + 96);
        if (v80)
          WebCore::InspectorCanvasAgent::recordAction(v80, v94, (const WTF::StringImpl *)&v99, v98);
      }
    }
    if (v115)
    {
      v81 = v114;
      v114 = 0;
      if (v81)
      {
        if (*v81 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v81;
      }
    }
    if (v113)
    {
      v82 = v112;
      v112 = 0;
      if (v82)
      {
        if (*v82 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v82;
      }
    }
    if (v111)
    {
      v83 = v110;
      v110 = 0;
      if (v83)
      {
        if (*v83 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v83;
      }
    }
    if (v109)
    {
      v84 = v108;
      v108 = 0;
      if (v84)
      {
        if (*v84 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v84;
      }
    }
    if (v107)
    {
      v85 = v106;
      v106 = 0;
      if (v85)
      {
        if (*v85 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v85;
      }
    }
    if (v105)
    {
      v86 = v104;
      v104 = 0;
      if (v86)
      {
        if (*v86 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v86;
      }
    }
    if (v103)
    {
      v87 = (_DWORD *)v102[0];
      v102[0] = 0;
      if (v87)
      {
        if (*v87 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v87;
      }
    }
    v88 = v99;
    v99 = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v78);
      else
        *(_DWORD *)v88 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::readPixels(a3, v95, v12, v96, v97, (WebCore::GraphicsContextGL *)v101, v100[0], v19);
  return 10;
}

uint64_t WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebGLShader>>>>::convert<std::optional<WTF::Vector<WTF::Ref<WebCore::WebGLShader,WTF::RawPtrTraits<WebCore::WebGLShader>,WTF::DefaultRefDerefTraits<WebCore::WebGLShader>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF *v17;
  WTF *v18;
  int v19;
  unsigned int v20;

  if (!*(_BYTE *)(a3 + 16))
    return 2;
  v5 = result;
  v6 = *(unsigned int *)(a3 + 12);
  v18 = 0;
  v19 = 0;
  v20 = v6;
  if (!(_DWORD)v6)
  {
LABEL_7:
    v13 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebGLShader>>>::convert<WTF::Ref<WebCore::WebGLShader,WTF::RawPtrTraits<WebCore::WebGLShader>,WTF::DefaultRefDerefTraits<WebCore::WebGLShader>>,0ul>(v5, a2, (uint64_t)&v18);
    if (v20)
    {
      v14 = v18;
      v15 = 8 * v20;
      do
      {
        v16 = *(_DWORD **)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          if (v16[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
          else
            --v16[2];
        }
        v14 = (WTF *)((char *)v14 + 8);
        v15 -= 8;
      }
      while (v15);
    }
    v17 = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree(v17, v12);
    }
    return v13;
  }
  if (!(v6 >> 29))
  {
    v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
    v19 = v6;
    v18 = v7;
    v8 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)a3;
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        ++*(_DWORD *)(v11 + 8);
        *(_QWORD *)v7 = v11;
        v7 = (WTF *)((char *)v7 + 8);
        v10 -= 8;
      }
      while (v10);
    }
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLInterface<WebCore::WebGLShader>>>::convert<WTF::Ref<WebCore::WebGLShader,WTF::RawPtrTraits<WebCore::WebGLShader>,WTF::DefaultRefDerefTraits<WebCore::WebGLShader>>,0ul>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  JSC::VM *v6;
  unsigned int v7;
  WTF **v8;
  uint64_t v9;
  objc_class *v10;
  int v11;
  BOOL v12;
  JSValue v13;
  void *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v19;
  WTF *v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  WTF *v24;
  _OWORD v25[4];
  uint64_t v26;
  JSC::VM *v27;

  v6 = *(JSC::VM **)(a1 + 56);
  v27 = v6;
  v22 = 0;
  v23 = 0x800000000;
  v24 = (WTF *)((char *)v25 + 8);
  memset(v25, 0, sizeof(v25));
  v26 = 0;
  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= 9)
  {
    v22 = JSC::MarkedVectorBase::slowEnsureCapacity((JSC::MarkedVectorBase *)&v23) == 1;
    v7 = *(_DWORD *)(a3 + 12);
    if (v7)
    {
LABEL_3:
      v8 = *(WTF ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = (objc_class *)WebCore::wrap<WebCore::WebGLShader>(a1, a2, *v8);
        if (*((_DWORD *)v6 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v6) & 1) != 0)
            goto LABEL_30;
        }
        v11 = v23;
        if ((_DWORD)v23 != HIDWORD(v23) && (v24 != (WTF *)((char *)v25 + 8) ? (v12 = v24 == 0) : (v12 = 1), v12))
        {
          *((_QWORD *)v24 + v23) = v10;
          LODWORD(v23) = v11 + 1;
        }
        else
        {
          v13.super.isa = v10;
          if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v23, v13) == 1)
            v22 = 1;
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  if (v22)
  {
    JSC::throwOutOfMemoryError();
  }
  else
  {
    v20 = v24;
    v21 = v23;
    v15 = *(JSC::VM **)(a2 + 56);
    if (!*((_DWORD *)v15 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) == 0)
    {
      v16 = JSC::constructArray();
      goto LABEL_22;
    }
  }
LABEL_30:
  v16 = 0;
LABEL_22:
  v17 = *(uint64_t **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v20 = (WTF *)&v23;
    v19 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v25[0], (uint64_t *)&v20);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v17, v19);
  }
  if (v24 != (WTF *)((char *)v25 + 8) && v24)
    WTF::fastFree(v24, v14);
  return v16;
}

uint64_t WebCore::JSConverter<WebCore::IDLNullable<WebCore::IDLSequence<WebCore::IDLDOMString>>>::convert<std::optional<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  _DWORD **v12;
  uint64_t v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF *v18;
  int v19;
  unsigned int v20;

  if (!*(_BYTE *)(a3 + 16))
    return 2;
  v5 = result;
  v6 = *(unsigned int *)(a3 + 12);
  v18 = 0;
  v19 = 0;
  v20 = v6;
  if (!(_DWORD)v6)
  {
LABEL_3:
    v8 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>(v5, a2, (uint64_t)&v18);
    if (v20)
    {
      v15 = v18;
      v16 = 8 * v20;
      do
      {
        v17 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
            WTF::StringImpl::destroy(v17, v7);
          else
            *(_DWORD *)v17 -= 2;
        }
        v15 = (WTF *)((char *)v15 + 8);
        v16 -= 8;
      }
      while (v16);
    }
    v9 = v18;
    if (v18)
    {
      v18 = 0;
      v19 = 0;
      WTF::fastFree(v9, v7);
    }
    return v8;
  }
  if (!(v6 >> 29))
  {
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
    v19 = v6;
    v18 = v10;
    v11 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD ***)a3;
      v13 = 8 * v11;
      do
      {
        v14 = *v12;
        if (*v12)
          *v14 += 2;
        *(_QWORD *)v10 = v14;
        v10 = (WTF *)((char *)v10 + 8);
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WebCore::jsWebGLCompressedTextureASTCPrototypeFunction_getSupportedProfiles(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF *v18;
  WTF *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *((_QWORD *)a2 + 5);
  v23 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "WebGLCompressedTextureASTC", "getSupportedProfiles");
  v5 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWebGLCompressedTextureASTC::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWebGLCompressedTextureASTC::s_info && v7 != 0);
  }
  if (!v6)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "WebGLCompressedTextureASTC", "getSupportedProfiles");
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  v24 = 0;
  v25 = 0;
  v12 = *(_BYTE *)(v10 + 24);
  if ((v12 & 1) != 0)
  {
    v26 = "hdr";
    v27 = 4;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v24, (uint64_t)&v26);
    v12 = *(_BYTE *)(v10 + 24);
  }
  if ((v12 & 2) != 0)
  {
    v26 = "ldr";
    v27 = 4;
    v13 = HIDWORD(v25);
    if (HIDWORD(v25) == (_DWORD)v25)
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v24, (uint64_t)&v26);
    }
    else
    {
      v14 = v24;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v15 = HIDWORD(v25);
      *((_QWORD *)v14 + v13) = v28;
      HIDWORD(v25) = v15 + 1;
    }
  }
  v17 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert<WTF::String,0ul>((uint64_t)this, v11, (uint64_t)&v24);
  if (HIDWORD(v25))
  {
    v20 = v24;
    v21 = 8 * HIDWORD(v25);
    do
    {
      v22 = *(WTF::StringImpl **)v20;
      *(_QWORD *)v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v16);
        else
          *(_DWORD *)v22 -= 2;
      }
      v20 = (WTF *)((char *)v20 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  v18 = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v18, v16);
  }
  return (_BYTE *)v17;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17WebGLContextEvent4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WebCore::jsWebGLDebugShadersPrototypeFunction_getTranslatedShaderSource(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLShader *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v31;
  JSValue v33;
  JSC::VM *v34;
  JSC::VM *v35;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGLDebugShaders", "getTranslatedShaderSource");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGLDebugShaders::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGLDebugShaders::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGLDebugShaders", "getTranslatedShaderSource");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v16 = *(WTF::StringImpl **)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v35 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLShader::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLShader::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLShader **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v35, 0, "shader", 7, "WebGLDebugShaders", 18, a8, "getTranslatedShaderSource", 26, "WebGLShader", 12);
    return 0;
  }
  WebCore::WebGLDebugShaders::getTranslatedShaderSource(v16, v24, &v35);
  v25 = *((_QWORD *)this + 7);
  v26 = v35;
  if (!v35 || (v27 = *((_DWORD *)v35 + 1)) == 0)
  {
    v23 = *(_QWORD *)(v25 + 41968);
LABEL_32:
    v35 = 0;
    if (!v26)
      return (_BYTE *)v23;
    goto LABEL_39;
  }
  if (v27 != 1)
    goto LABEL_29;
  v28 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
  if ((*((_BYTE *)v35 + 16) & 4) != 0)
  {
    v29 = *v28;
LABEL_37:
    v23 = *(_QWORD *)(v25 + 8 * v29 + 42216);
    goto LABEL_38;
  }
  v31 = *(unsigned __int16 *)v28;
  if (v31 <= 0xFF)
  {
    v29 = v31;
    goto LABEL_37;
  }
LABEL_29:
  v23 = *(_QWORD *)(v25 + 64760);
  if (!v23 || v35 != *(JSC::VM **)(v23 + 8))
  {
    v23 = JSC::jsStringWithCacheSlowCase();
    v26 = v35;
    goto LABEL_32;
  }
LABEL_38:
  v35 = 0;
LABEL_39:
  if (*(_DWORD *)v26 == 2)
    WTF::StringImpl::destroy(v26, v26);
  else
    *(_DWORD *)v26 -= 2;
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsWebGLDrawBuffersPrototypeFunction_drawBuffersWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WTF *v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSValue v21;
  void *v22;
  WTF *v23;
  JSC::VM *v24;
  WTF::StringImpl *v25[2];
  int v26;
  JSC::VM *v27;
  WTF *v28;
  uint64_t v29;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "WebGLDrawBuffers", "drawBuffersWEBGL");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGLDrawBuffers::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGLDrawBuffers::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "WebGLDrawBuffers", "drawBuffersWEBGL");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v21);
  }
  v11 = *(WTF **)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v27 = v4;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v18 = v25[0];
    v25[0] = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v16 = 0;
    v15 = 1;
    v26 = 1;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v25[0] = (WTF::StringImpl *)&v28;
    JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v12, (uint64_t *)v25);
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      v23 = v28;
      v26 = 1;
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree(v23, v22);
      }
      v16 = 0;
      v15 = 1;
    }
    else
    {
      v26 = 0;
      v25[0] = 0;
      v25[1] = 0;
      WebCore::WebGLDrawBuffers::drawBuffersWEBGL(v11, (unsigned int *)&v28);
      v14 = v28;
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree(v14, v13);
      }
      v15 = 0;
      v16 = 10;
    }
  }
  ((void (*)(WTF **, WTF::StringImpl **))off_1E332F398[v15])(&v28, v25);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsWebGLDrawInstancedBaseVertexBaseInstancePrototypeFunction_drawArraysInstancedBaseInstanceWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  JSValue v41;
  unint64_t v42;
  JSC::VM *v43;
  unint64_t v44;
  JSC::VM *v45;
  unint64_t v46;
  JSC::VM *v47;
  unsigned int v48[2];
  unsigned int v49[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v47, "WebGLDrawInstancedBaseVertexBaseInstance", "drawArraysInstancedBaseInstanceWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v47, "WebGLDrawInstancedBaseVertexBaseInstance", "drawArraysInstancedBaseInstanceWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v41);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v48);
    if (v48[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      *(_QWORD *)v49 = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v27 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v49, this);
          v27 = v42;
        }
        v28 = (v27 >> 52) & 0x7FF;
        v29 = v28 - 1023;
        v30 = v27 >> (51 - (v27 >> 52));
        if (v28 > 0x433)
          LODWORD(v30) = v27 << ((v27 >> 52) - 51);
        if (v28 >= 0x41F)
          v31 = v30;
        else
          v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
        if ((v27 & 0x8000000000000000) == 0)
          v32 = v31;
        else
          v32 = -v31;
        if (v29 <= 0x53)
          v15 = v32;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        return 0;
      }
      else
      {
        v16 = *((_QWORD *)a2 + 8);
        *(_QWORD *)v49 = v16;
        v17 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v16 < 0xFFFE000000000000)
        {
          v33 = v16 - 0x2000000000000;
          if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v43 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v49, this);
            v17 = v43;
            v33 = v44;
          }
          v34 = (v33 >> 52) & 0x7FF;
          if ((v34 - 1023) <= 0x53)
          {
            v37 = v33 >> (51 - (v33 >> 52));
            if (v34 > 0x433)
              LODWORD(v37) = v33 << ((v33 >> 52) - 51);
            if (v34 >= 0x41F)
              v38 = v37;
            else
              v38 = (((1 << ((v33 >> 52) + 1)) - 1) & v37) + (1 << ((v33 >> 52) + 1));
            if ((v33 & 0x8000000000000000) == 0)
              v18 = v38;
            else
              v18 = -v38;
          }
          else
          {
            v18 = 0;
          }
        }
        else
        {
          v18 = v16;
        }
        if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
        {
          return 0;
        }
        else
        {
          v19 = *((_QWORD *)a2 + 9);
          *(_QWORD *)v49 = v19;
          v20 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v19 < 0xFFFE000000000000)
          {
            v35 = v19 - 0x2000000000000;
            if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v45 = (JSC::VM *)*((_QWORD *)this + 7);
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v49, this);
              v20 = v45;
              v35 = v46;
            }
            v36 = (v35 >> 52) & 0x7FF;
            if ((v36 - 1023) <= 0x53)
            {
              v39 = v35 >> (51 - (v35 >> 52));
              if (v36 > 0x433)
                LODWORD(v39) = v35 << ((v35 >> 52) - 51);
              if (v36 >= 0x41F)
                v40 = v39;
              else
                v40 = (((1 << ((v35 >> 52) + 1)) - 1) & v39) + (1 << ((v35 >> 52) + 1));
              if ((v35 & 0x8000000000000000) == 0)
                v21 = v40;
              else
                v21 = -v40;
            }
            else
            {
              v21 = 0;
            }
          }
          else
          {
            v21 = v19;
          }
          if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
          {
            return 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v49);
            if (v49[1])
            {
              return 0;
            }
            else
            {
              WebCore::WebGLDrawInstancedBaseVertexBaseInstance::drawArraysInstancedBaseInstanceWEBGL(v12, v48[0], v15, v18, v21, v49[0], v22, v23, v24, v25);
              return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGLDrawInstancedBaseVertexBaseInstancePrototypeFunction_drawElementsInstancedBaseVertexBaseInstanceWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  double v19;
  double v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  JSValue v47;
  double v48;
  unint64_t v49;
  uint64_t v50;
  JSC::VM *v51;
  unint64_t v52;
  JSC::VM *v53;
  unint64_t v54;
  unsigned int v55;
  JSC::VM *v56;
  unsigned int v57[2];
  unsigned int v58[2];
  unsigned int v59[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGLDrawInstancedBaseVertexBaseInstance", "drawElementsInstancedBaseVertexBaseInstanceWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGLDrawInstancedBaseVertexBaseInstance", "drawElementsInstancedBaseVertexBaseInstanceWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 6)
  {
    v47.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v47);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v58);
  if (v58[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  *(_QWORD *)v59 = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v21 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v59, this);
      v21 = v49;
    }
    v22 = (v21 >> 52) & 0x7FF;
    v23 = v22 - 1023;
    v24 = v21 >> (51 - (v21 >> 52));
    if (v22 > 0x433)
      LODWORD(v24) = v21 << ((v21 >> 52) - 51);
    if (v22 >= 0x41F)
      v25 = v24;
    else
      v25 = (((1 << ((v21 >> 52) + 1)) - 1) & v24) + (1 << ((v21 >> 52) + 1));
    if ((v21 & 0x8000000000000000) == 0)
      v26 = v25;
    else
      v26 = -v25;
    if (v23 <= 0x53)
      v15 = v26;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v57);
  if (v57[1])
    return 0;
  v16 = *((_QWORD *)a2 + 9);
  *(_QWORD *)v59 = v16;
  v55 = v15;
  if (v16 < 0xFFFE000000000000)
  {
    v18 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v16 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v59, this);
      v19 = v48;
    }
    else
    {
      *(_QWORD *)&v19 = v16 - 0x2000000000000;
    }
    if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
      return 0;
    if (fabs(v19) == INFINITY)
    {
      v17 = 0;
    }
    else
    {
      v20 = fmod(trunc(v19), 1.84467441e19);
      if (v20 >= 0.0)
        v17 = (unint64_t)v20;
      else
        v17 = -(uint64_t)(unint64_t)-v20;
    }
  }
  else
  {
    v17 = (int)v16;
  }
  v27 = *((_QWORD *)a2 + 10);
  *(_QWORD *)v59 = v27;
  v28 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v27 < 0xFFFE000000000000)
  {
    v39 = v27 - 0x2000000000000;
    if (v27 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v50 = v12;
      v51 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v59, this);
      v28 = v51;
      v12 = v50;
      v39 = v52;
    }
    v40 = (v39 >> 52) & 0x7FF;
    if ((v40 - 1023) <= 0x53)
    {
      v43 = v39 >> (51 - (v39 >> 52));
      if (v40 > 0x433)
        LODWORD(v43) = v39 << ((v39 >> 52) - 51);
      if (v40 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << ((v39 >> 52) + 1)) - 1) & v43) + (1 << ((v39 >> 52) + 1));
      if ((v39 & 0x8000000000000000) == 0)
        v29 = v44;
      else
        v29 = -v44;
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = v27;
  }
  if (*((_DWORD *)v28 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v28))
    return 0;
  v30 = v12;
  v31 = *((_QWORD *)a2 + 11);
  *(_QWORD *)v59 = v31;
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v31 < 0xFFFE000000000000)
  {
    v41 = v31 - 0x2000000000000;
    if (v31 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v53 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v59, this);
      v32 = v53;
      v41 = v54;
    }
    v42 = (v41 >> 52) & 0x7FF;
    if ((v42 - 1023) <= 0x53)
    {
      v45 = v41 >> (51 - (v41 >> 52));
      if (v42 > 0x433)
        LODWORD(v45) = v41 << ((v41 >> 52) - 51);
      if (v42 >= 0x41F)
        v46 = v45;
      else
        v46 = (((1 << ((v41 >> 52) + 1)) - 1) & v45) + (1 << ((v41 >> 52) + 1));
      if ((v41 & 0x8000000000000000) == 0)
        v33 = v46;
      else
        v33 = -v46;
    }
    else
    {
      v33 = 0;
    }
  }
  else
  {
    v33 = v31;
  }
  if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v59);
  if (v59[1])
    return 0;
  WebCore::WebGLDrawInstancedBaseVertexBaseInstance::drawElementsInstancedBaseVertexBaseInstanceWEBGL(v30, v58[0], v55, v57[0], v17, v29, v33, v59[0], v34, v35, v36, v37);
  return 10;
}

uint64_t WebCore::jsWebGLLoseContextPrototypeFunction_loseContext(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v11;

  v3 = *((_QWORD *)a2 + 5);
  v11 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "WebGLLoseContext", "loseContext");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGLLoseContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGLLoseContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v11, "WebGLLoseContext", "loseContext");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v9 + 16))
    WebCore::WebGLRenderingContextBase::forceLostContext(*(_QWORD *)(v9 + 16), (WTF::StringImpl *)1);
  return 10;
}

uint64_t WebCore::jsWebGLLoseContextPrototypeFunction_restoreContext(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "WebGLLoseContext", "restoreContext");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGLLoseContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGLLoseContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v12, "WebGLLoseContext", "restoreContext");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v9 + 16))
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_BYTE *)(v10 + 364))
    {
      if (*(_BYTE *)(v10 + 360))
      {
        WebCore::WebGLRenderingContextBase::maybeRestoreContextSoon(v10, 0.0);
      }
      else if (*(_DWORD *)(v10 + 356) == 1)
      {
        WebCore::WebGLRenderingContextBase::synthesizeLostContextGLError((WTF::StringImpl *)v10, 1282, (uint64_t)"restoreContext", 15, (uint64_t)"context restoration not allowed", 32);
      }
    }
    else
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v10, 1282, (uint64_t)"restoreContext", 15, (uint64_t)"context not lost", 17);
    }
  }
  return 10;
}

_BYTE *WebCore::jsWebGLMultiDrawPrototypeFunction_multiDrawArraysWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  JSC::VM *v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)();
  unsigned int v22;
  int v23;
  uint64_t (*v24)();
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  signed int v30;
  JSValue v32;
  unint64_t v33;
  JSC::VM *v34;
  unsigned int v35[2];
  _DWORD v36[2];
  _DWORD v37[2];
  _BYTE v38[16];
  int v39;
  _BYTE v40[16];
  int v41;
  _BYTE v42[16];
  int v43;
  _QWORD v44[2];
  int v45;
  char v46;
  int v47;
  _BYTE v48[16];
  int v49;
  int v50;
  int v51;
  _BYTE v52[16];
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v34 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGLMultiDraw", "multiDrawArraysWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDraw::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDraw::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v34, "WebGLMultiDraw", "multiDrawArraysWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v37);
  if (v37[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v51, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v54;
  if (v54)
  {
    v25 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v36);
    if (v36[1])
    {
      v25 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v47, this, *((JSC::JSArrayBufferView **)a2 + 9));
      v14 = v50;
      if (v50)
      {
        v25 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v35);
        if (v35[1])
        {
          v25 = 0;
        }
        else
        {
          v15 = *((_QWORD *)a2 + 11);
          v44[0] = v15;
          v16 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v15 < 0xFFFE000000000000)
          {
            v27 = v15 - 0x2000000000000;
            if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v44, this);
              v27 = v33;
            }
            v28 = (v27 >> 52) & 0x7FF;
            if ((v28 - 1023) <= 0x53)
            {
              v29 = v27 >> (51 - (v27 >> 52));
              if (v28 > 0x433)
                LODWORD(v29) = v27 << ((v27 >> 52) - 51);
              if (v28 >= 0x41F)
                v30 = v29;
              else
                v30 = (((1 << ((v27 >> 52) + 1)) - 1) & v29) + (1 << ((v27 >> 52) + 1));
              if ((v27 & 0x8000000000000000) == 0)
                v17 = v30;
              else
                v17 = -v30;
            }
            else
            {
              v17 = 0;
            }
          }
          else
          {
            v17 = v15;
          }
          if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
          {
            v25 = 0;
          }
          else
          {
            if (v54)
              goto LABEL_67;
            v18 = v12;
            v19 = v37[0];
            v42[0] = 0;
            v43 = -1;
            v20 = v53;
            if (v53 == -1)
            {
              LOBYTE(v44[0]) = 0;
              v45 = -1;
            }
            else
            {
              v21 = off_1E332F578[v53];
              ((void (*)(_QWORD *, _BYTE *, _BYTE *))v21)(v44, v42, v52);
              v43 = v20;
              LOBYTE(v44[0]) = 0;
              v45 = -1;
              ((void (*)(_BYTE *, _QWORD *, _BYTE *))v21)(v40, v44, v42);
              v45 = v20;
            }
            if (v50)
LABEL_67:
              std::__throw_bad_variant_access[abi:sn180100]();
            v22 = v36[0];
            v38[0] = 0;
            v39 = -1;
            v23 = v49;
            if (v49 == -1)
            {
              v40[0] = 0;
              v41 = -1;
            }
            else
            {
              v24 = off_1E332F578[v49];
              ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v40, v38, v48);
              v39 = v23;
              v40[0] = 0;
              v41 = -1;
              ((void (*)(char *, _BYTE *, _BYTE *))v24)(&v46, v40, v38);
              v41 = v23;
            }
            WebCore::WebGLMultiDraw::multiDrawArraysWEBGL(v18, v19, (uint64_t)v44, v22, (uint64_t)v40, v35[0], v17);
            if (v41 != -1)
              ((void (*)(char *, _BYTE *))off_1E332F568[v41])(&v46, v40);
            v41 = -1;
            if (v39 != -1)
              ((void (*)(char *, _BYTE *))off_1E332F568[v39])(&v46, v38);
            if (v45 != -1)
              ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v45])(v40, v44);
            v45 = -1;
            if (v43 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v43])(v40, v42);
            v25 = 10;
          }
        }
        v14 = v50;
      }
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v14])(v44, v48);
    }
    v13 = v54;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v47, v52);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGLMultiDrawPrototypeFunction_multiDrawArraysInstancedWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  signed int v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)();
  unsigned int v22;
  int v23;
  uint64_t (*v24)();
  unsigned int v25;
  int v26;
  uint64_t (*v27)();
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  signed int v33;
  JSValue v35;
  unint64_t v36;
  uint64_t v37;
  JSC::VM *v38;
  unsigned int v39[2];
  _DWORD v40[2];
  _DWORD v41[2];
  _DWORD v42[2];
  _BYTE v43[16];
  int v44;
  _BYTE v45[16];
  int v46;
  _BYTE v47[16];
  int v48;
  _BYTE v49[16];
  int v50;
  _BYTE v51[16];
  int v52;
  _QWORD v53[2];
  int v54;
  char v55;
  int v56;
  _BYTE v57[16];
  int v58;
  int v59;
  int v60;
  _BYTE v61[16];
  int v62;
  int v63;
  int v64;
  _BYTE v65[16];
  int v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGLMultiDraw", "multiDrawArraysInstancedWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDraw::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDraw::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGLMultiDraw", "multiDrawArraysInstancedWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 7)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v35);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
  if (v42[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v64, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v67;
  if (v67)
  {
    v28 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v41);
    if (v41[1])
    {
      v28 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v60, this, *((JSC::JSArrayBufferView **)a2 + 9));
      v14 = v63;
      if (v63)
      {
        v28 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v40);
        if (v40[1])
        {
          v28 = 0;
        }
        else
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v56, this, *((JSC::JSArrayBufferView **)a2 + 11));
          v15 = v59;
          if (v59)
          {
            v28 = 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v39);
            if (v39[1])
            {
              v28 = 0;
            }
            else
            {
              v16 = *((_QWORD *)a2 + 13);
              v53[0] = v16;
              v17 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v16 < 0xFFFE000000000000)
              {
                v30 = v16 - 0x2000000000000;
                if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v53, this);
                  v30 = v36;
                }
                v31 = (v30 >> 52) & 0x7FF;
                if ((v31 - 1023) <= 0x53)
                {
                  v32 = v30 >> (51 - (v30 >> 52));
                  if (v31 > 0x433)
                    LODWORD(v32) = v30 << ((v30 >> 52) - 51);
                  if (v31 >= 0x41F)
                    v33 = v32;
                  else
                    v33 = (((1 << ((v30 >> 52) + 1)) - 1) & v32) + (1 << ((v30 >> 52) + 1));
                  if ((v30 & 0x8000000000000000) == 0)
                    v18 = v33;
                  else
                    v18 = -v33;
                }
                else
                {
                  v18 = 0;
                }
              }
              else
              {
                v18 = v16;
              }
              if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
              {
                v28 = 0;
              }
              else
              {
                v37 = v12;
                if (v67)
                  goto LABEL_82;
                v19 = v42[0];
                v51[0] = 0;
                v52 = -1;
                v20 = v66;
                if (v66 == -1)
                {
                  LOBYTE(v53[0]) = 0;
                  v54 = -1;
                }
                else
                {
                  v21 = off_1E332F578[v66];
                  ((void (*)(_QWORD *, _BYTE *, _BYTE *))v21)(v53, v51, v65);
                  v52 = v20;
                  LOBYTE(v53[0]) = 0;
                  v54 = -1;
                  ((void (*)(_BYTE *, _QWORD *, _BYTE *))v21)(v49, v53, v51);
                  v54 = v20;
                }
                if (v63)
                  goto LABEL_82;
                v22 = v41[0];
                v47[0] = 0;
                v48 = -1;
                v23 = v62;
                if (v62 == -1)
                {
                  v49[0] = 0;
                  v50 = -1;
                }
                else
                {
                  v24 = off_1E332F578[v62];
                  ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v49, v47, v61);
                  v48 = v23;
                  v49[0] = 0;
                  v50 = -1;
                  ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v45, v49, v47);
                  v50 = v23;
                }
                if (v59)
LABEL_82:
                  std::__throw_bad_variant_access[abi:sn180100]();
                v25 = v40[0];
                v43[0] = 0;
                v44 = -1;
                v26 = v58;
                if (v58 == -1)
                {
                  v45[0] = 0;
                  v46 = -1;
                }
                else
                {
                  v27 = off_1E332F578[v58];
                  ((void (*)(_BYTE *, _BYTE *, _BYTE *))v27)(v45, v43, v57);
                  v44 = v26;
                  v45[0] = 0;
                  v46 = -1;
                  ((void (*)(char *, _BYTE *, _BYTE *))v27)(&v55, v45, v43);
                  v46 = v26;
                }
                WebCore::WebGLMultiDraw::multiDrawArraysInstancedWEBGL(v37, v19, (uint64_t)v53, v22, (uint64_t)v49, v25, (uint64_t)v45, v39[0], v18);
                if (v46 != -1)
                  ((void (*)(char *, _BYTE *))off_1E332F568[v46])(&v55, v45);
                v46 = -1;
                if (v44 != -1)
                  ((void (*)(char *, _BYTE *))off_1E332F568[v44])(&v55, v43);
                if (v50 != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v50])(v45, v49);
                v50 = -1;
                if (v48 != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v48])(v45, v47);
                if (v54 != -1)
                  ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v54])(v49, v53);
                v54 = -1;
                if (v52 != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v52])(v49, v51);
                v28 = 10;
              }
            }
            v15 = v59;
          }
          if (v15 != -1)
            ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v15])(v53, v57);
        }
        v14 = v63;
      }
      if (v14 != -1)
        ((void (*)(int *, _BYTE *))off_1E332F598[v14])(&v56, v61);
    }
    v13 = v67;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v60, v65);
  return (_BYTE *)v28;
}

_BYTE *WebCore::jsWebGLMultiDrawPrototypeFunction_multiDrawElementsWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  JSC::VM *v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)();
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)();
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  signed int v31;
  JSValue v33;
  unint64_t v34;
  JSC::VM *v35;
  unsigned int v36[2];
  _DWORD v37[2];
  _DWORD v38[2];
  _DWORD v39[2];
  _BYTE v40[16];
  int v41;
  _BYTE v42[16];
  int v43;
  _BYTE v44[16];
  int v45;
  _QWORD v46[2];
  int v47;
  char v48;
  int v49;
  _BYTE v50[16];
  int v51;
  int v52;
  int v53;
  _BYTE v54[16];
  int v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGLMultiDraw", "multiDrawElementsWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDraw::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDraw::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGLMultiDraw", "multiDrawElementsWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 6)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v33);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v53, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v56;
  if (v56)
  {
    v26 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v38);
    if (v38[1])
    {
      v26 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v37);
      if (v37[1])
      {
        v26 = 0;
      }
      else
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v49, this, *((JSC::JSArrayBufferView **)a2 + 10));
        v14 = v52;
        if (v52)
        {
          v26 = 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v36);
          if (v36[1])
          {
            v26 = 0;
          }
          else
          {
            v15 = *((_QWORD *)a2 + 12);
            v46[0] = v15;
            v16 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v15 < 0xFFFE000000000000)
            {
              v28 = v15 - 0x2000000000000;
              if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v46, this);
                v28 = v34;
              }
              v29 = (v28 >> 52) & 0x7FF;
              if ((v29 - 1023) <= 0x53)
              {
                v30 = v28 >> (51 - (v28 >> 52));
                if (v29 > 0x433)
                  LODWORD(v30) = v28 << ((v28 >> 52) - 51);
                if (v29 >= 0x41F)
                  v31 = v30;
                else
                  v31 = (((1 << ((v28 >> 52) + 1)) - 1) & v30) + (1 << ((v28 >> 52) + 1));
                if ((v28 & 0x8000000000000000) == 0)
                  v17 = v31;
                else
                  v17 = -v31;
              }
              else
              {
                v17 = 0;
              }
            }
            else
            {
              v17 = v15;
            }
            if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
            {
              v26 = 0;
            }
            else
            {
              if (v56)
                goto LABEL_69;
              v18 = v12;
              v19 = v39[0];
              v44[0] = 0;
              v45 = -1;
              v20 = v55;
              if (v55 == -1)
              {
                LOBYTE(v46[0]) = 0;
                v47 = -1;
              }
              else
              {
                v21 = off_1E332F578[v55];
                ((void (*)(_QWORD *, _BYTE *, _BYTE *))v21)(v46, v44, v54);
                v45 = v20;
                LOBYTE(v46[0]) = 0;
                v47 = -1;
                ((void (*)(_BYTE *, _QWORD *, _BYTE *))v21)(v42, v46, v44);
                v47 = v20;
              }
              if (v52)
LABEL_69:
                std::__throw_bad_variant_access[abi:sn180100]();
              v22 = v38[0];
              v23 = v37[0];
              v40[0] = 0;
              v41 = -1;
              v24 = v51;
              if (v51 == -1)
              {
                v42[0] = 0;
                v43 = -1;
              }
              else
              {
                v25 = off_1E332F578[v51];
                ((void (*)(_BYTE *, _BYTE *, _BYTE *))v25)(v42, v40, v50);
                v41 = v24;
                v42[0] = 0;
                v43 = -1;
                ((void (*)(char *, _BYTE *, _BYTE *))v25)(&v48, v42, v40);
                v43 = v24;
              }
              WebCore::WebGLMultiDraw::multiDrawElementsWEBGL(v18, v19, (uint64_t)v46, v22, v23, (uint64_t)v42, v36[0], v17);
              if (v43 != -1)
                ((void (*)(char *, _BYTE *))off_1E332F568[v43])(&v48, v42);
              v43 = -1;
              if (v41 != -1)
                ((void (*)(char *, _BYTE *))off_1E332F568[v41])(&v48, v40);
              if (v47 != -1)
                ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v47])(v42, v46);
              v47 = -1;
              if (v45 != -1)
                ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v45])(v42, v44);
              v26 = 10;
            }
          }
          v14 = v52;
        }
        if (v14 != -1)
          ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v14])(v46, v50);
      }
    }
    v13 = v56;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v49, v54);
  return (_BYTE *)v26;
}

_BYTE *WebCore::jsWebGLMultiDrawPrototypeFunction_multiDrawElementsInstancedWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  signed int v18;
  int v19;
  uint64_t (*v20)();
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t (*v24)();
  unsigned int v25;
  int v26;
  uint64_t (*v27)();
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  signed int v33;
  JSValue v35;
  unint64_t v36;
  unsigned int v37;
  JSC::VM *v38;
  unsigned int v39[2];
  _DWORD v40[2];
  _DWORD v41[2];
  _DWORD v42[2];
  _DWORD v43[2];
  _BYTE v44[16];
  int v45;
  _BYTE v46[16];
  int v47;
  _BYTE v48[16];
  int v49;
  _BYTE v50[16];
  int v51;
  _BYTE v52[16];
  int v53;
  _QWORD v54[2];
  int v55;
  char v56;
  int v57;
  _BYTE v58[16];
  int v59;
  int v60;
  int v61;
  _BYTE v62[16];
  int v63;
  int v64;
  int v65;
  _BYTE v66[16];
  int v67;
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGLMultiDraw", "multiDrawElementsInstancedWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDraw::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDraw::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v38, "WebGLMultiDraw", "multiDrawElementsInstancedWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 8)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v35);
  }
  v12 = *(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance **)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v43);
  if (v43[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v65, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v68;
  if (v68)
  {
    v28 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v42);
    if (v42[1])
    {
      v28 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v41);
      if (v41[1])
      {
        v28 = 0;
      }
      else
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v61, this, *((JSC::JSArrayBufferView **)a2 + 10));
        v14 = v64;
        if (v64)
        {
          v28 = 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v40);
          if (v40[1])
          {
            v28 = 0;
          }
          else
          {
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v57, this, *((JSC::JSArrayBufferView **)a2 + 12));
            v15 = v60;
            if (v60)
            {
              v28 = 0;
            }
            else
            {
              WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v39);
              if (v39[1])
              {
                v28 = 0;
              }
              else
              {
                v16 = *((_QWORD *)a2 + 14);
                v54[0] = v16;
                v17 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v16 < 0xFFFE000000000000)
                {
                  v30 = v16 - 0x2000000000000;
                  if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v54, this);
                    v30 = v36;
                  }
                  v31 = (v30 >> 52) & 0x7FF;
                  if ((v31 - 1023) <= 0x53)
                  {
                    v32 = v30 >> (51 - (v30 >> 52));
                    if (v31 > 0x433)
                      LODWORD(v32) = v30 << ((v30 >> 52) - 51);
                    if (v31 >= 0x41F)
                      v33 = v32;
                    else
                      v33 = (((1 << ((v30 >> 52) + 1)) - 1) & v32) + (1 << ((v30 >> 52) + 1));
                    if ((v30 & 0x8000000000000000) == 0)
                      v18 = v33;
                    else
                      v18 = -v33;
                  }
                  else
                  {
                    v18 = 0;
                  }
                }
                else
                {
                  v18 = v16;
                }
                if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
                {
                  v28 = 0;
                }
                else
                {
                  if (v68)
                    goto LABEL_84;
                  v37 = v43[0];
                  v52[0] = 0;
                  v53 = -1;
                  v19 = v67;
                  if (v67 == -1)
                  {
                    LOBYTE(v54[0]) = 0;
                    v55 = -1;
                  }
                  else
                  {
                    v20 = off_1E332F578[v67];
                    ((void (*)(_QWORD *, _BYTE *, _BYTE *))v20)(v54, v52, v66);
                    v53 = v19;
                    LOBYTE(v54[0]) = 0;
                    v55 = -1;
                    ((void (*)(_BYTE *, _QWORD *, _BYTE *))v20)(v50, v54, v52);
                    v55 = v19;
                  }
                  if (v64)
                    goto LABEL_84;
                  v21 = v42[0];
                  v22 = v41[0];
                  v48[0] = 0;
                  v49 = -1;
                  v23 = v63;
                  if (v63 == -1)
                  {
                    v50[0] = 0;
                    v51 = -1;
                  }
                  else
                  {
                    v24 = off_1E332F578[v63];
                    ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v50, v48, v62);
                    v49 = v23;
                    v50[0] = 0;
                    v51 = -1;
                    ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v46, v50, v48);
                    v51 = v23;
                  }
                  if (v60)
LABEL_84:
                    std::__throw_bad_variant_access[abi:sn180100]();
                  v25 = v40[0];
                  v44[0] = 0;
                  v45 = -1;
                  v26 = v59;
                  if (v59 == -1)
                  {
                    v46[0] = 0;
                    v47 = -1;
                  }
                  else
                  {
                    v27 = off_1E332F578[v59];
                    ((void (*)(_BYTE *, _BYTE *, _BYTE *))v27)(v46, v44, v58);
                    v45 = v26;
                    v46[0] = 0;
                    v47 = -1;
                    ((void (*)(char *, _BYTE *, _BYTE *))v27)(&v56, v46, v44);
                    v47 = v26;
                  }
                  WebCore::WebGLMultiDraw::multiDrawElementsInstancedWEBGL(v12, v37, (uint64_t)v54, v21, v22, (uint64_t)v50, v25, (uint64_t)v46, v39[0], v18);
                  if (v47 != -1)
                    ((void (*)(char *, _BYTE *))off_1E332F568[v47])(&v56, v46);
                  v47 = -1;
                  if (v45 != -1)
                    ((void (*)(char *, _BYTE *))off_1E332F568[v45])(&v56, v44);
                  if (v51 != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v51])(v46, v50);
                  v51 = -1;
                  if (v49 != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v49])(v46, v48);
                  if (v55 != -1)
                    ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v55])(v50, v54);
                  v55 = -1;
                  if (v53 != -1)
                    ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v53])(v50, v52);
                  v28 = 10;
                }
              }
              v15 = v60;
            }
            if (v15 != -1)
              ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v15])(v54, v58);
          }
          v14 = v64;
        }
        if (v14 != -1)
          ((void (*)(int *, _BYTE *))off_1E332F598[v14])(&v57, v62);
      }
    }
    v13 = v68;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v61, v66);
  return (_BYTE *)v28;
}

_DWORD *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(_DWORD *result, JSC *this, JSC::JSArrayBufferView *a3)
{
  _DWORD *v5;
  JSC::VM *v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t (**v18)();
  JSC::JSObject *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  JSC::VM *v25;
  int *v26;

  v5 = result;
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v6;
  LOBYTE(v21) = 0;
  v24 = 0;
  v7 = (unint64_t)a3 & 0xFFFE000000000002;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0 && *((_BYTE *)a3 + 5) == 44)
  {
    result = (_DWORD *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::possiblySharedTypedImpl(a3, (uint64_t *)&v26);
    v8 = v26;
    if (v26)
    {
      v9 = *((_QWORD *)v26 + 4);
      if (v9
        && (v10 = *(_QWORD *)(v9 + 16)) != 0
        && ((v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
         || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
         || (v10 & 0x3FFFFFFFFLL) + v11)
        && (*(_QWORD *)(v9 + 32)
          ? (v12 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
          : (v12 = 0),
            v12))
      {
        v26 = 0;
      }
      else
      {
        v13 = *v26;
        if ((*((_BYTE *)v26 + 6) & 3) != 0)
        {
LABEL_16:
          v14 = v13 - 1;
          if (v14)
            *v8 = v14;
          else
            result = (_DWORD *)JSC::ArrayBufferView::operator delete();
          goto LABEL_18;
        }
        *v26 = v13 + 1;
        if (v24)
        {
          if (v23 != -1)
          {
            if (!v23)
            {
              result = v21;
              v21 = v8;
              if (result)
              {
                if (*result == 1)
                  result = (_DWORD *)JSC::ArrayBufferView::operator delete();
                else
                  --*result;
              }
              goto LABEL_14;
            }
            result = (_DWORD *)((uint64_t (*)(int **, _DWORD **))off_1E332F568[v23])(&v26, &v21);
          }
          v21 = v8;
          v23 = 0;
        }
        else
        {
          v21 = v8;
          v23 = 0;
          v24 = 1;
        }
      }
LABEL_14:
      v13 = *v8;
      goto LABEL_16;
    }
  }
LABEL_18:
  if (!v24)
  {
    if (!v7 && *((unsigned __int8 *)a3 + 5) >= 0x17u)
    {
      v19 = (JSC::JSObject *)JSC::iteratorMethod(this, a3, a3);
      if (*((_DWORD *)v6 + 20))
      {
        result = (_DWORD *)JSC::VM::hasExceptionsAfterHandlingTraps(v6);
        if ((_DWORD)result)
          goto LABEL_29;
      }
      if (v19 != (JSC::JSObject *)10)
      {
        result = (_DWORD *)WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLLong>>::convert(a3, this, v19, (uint64_t)&v21);
        v17 = v23;
        if (v23)
        {
          v5[8] = 1;
          if ((_DWORD)v17 == -1)
            return result;
        }
        else
        {
          *((_QWORD *)v5 + 1) = v21;
          v20 = v22;
          v21 = 0;
          v22 = 0;
          *((_QWORD *)v5 + 2) = v20;
          v5[6] = 1;
          v5[8] = 0;
        }
        v18 = off_1E332F588;
        return (_DWORD *)((uint64_t (*)(int **, _DWORD **))v18[v17])(&v26, &v21);
      }
    }
    result = (_DWORD *)JSC::throwTypeError();
LABEL_29:
    v5[8] = 1;
    return result;
  }
  *((_BYTE *)v5 + 8) = 0;
  v5[6] = -1;
  v15 = v23;
  if (v23 == -1)
  {
    v5[8] = 0;
  }
  else
  {
    result = (_DWORD *)((uint64_t (*)(int **))off_1E332F578[v23])(&v26);
    v5[6] = v15;
    v16 = v24;
    v5[8] = 0;
    if (v16)
    {
      v17 = v23;
      if (v23 != -1)
      {
        v18 = off_1E332F568;
        return (_DWORD *)((uint64_t (*)(int **, _DWORD **))v18[v17])(&v26, &v21);
      }
    }
  }
  return result;
}

_BYTE *WebCore::jsWebGLMultiDrawInstancedBaseVertexBaseInstancePrototypeFunction_multiDrawArraysInstancedBaseInstanceWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  JSC::VM *v18;
  signed int v19;
  int v20;
  uint64_t (*v21)();
  unsigned int v22;
  int v23;
  uint64_t (*v24)();
  unsigned int v25;
  int v26;
  uint64_t (*v27)();
  unsigned int v28;
  int v29;
  uint64_t (*v30)();
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  signed int v36;
  JSValue v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  JSC::VM *v42;
  unsigned int v43[2];
  _DWORD v44[2];
  _DWORD v45[2];
  _DWORD v46[2];
  _DWORD v47[2];
  _BYTE v48[16];
  int v49;
  _BYTE v50[16];
  int v51;
  _BYTE v52[16];
  int v53;
  _BYTE v54[16];
  int v55;
  _BYTE v56[16];
  int v57;
  _BYTE v58[16];
  int v59;
  _BYTE v60[16];
  int v61;
  _QWORD v62[2];
  int v63;
  char v64;
  int v65;
  _BYTE v66[16];
  int v67;
  int v68;
  int v69;
  _BYTE v70[16];
  int v71;
  int v72;
  int v73;
  _BYTE v74[16];
  int v75;
  int v76;
  int v77;
  _BYTE v78[16];
  int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v42 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "WebGLMultiDrawInstancedBaseVertexBaseInstance", "multiDrawArraysInstancedBaseInstanceWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v42, "WebGLMultiDrawInstancedBaseVertexBaseInstance", "multiDrawArraysInstancedBaseInstanceWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 9)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v38);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v47);
  if (v47[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v77, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v80;
  if (v80)
  {
    v31 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v46);
    if (v46[1])
    {
      v31 = 0;
    }
    else
    {
      WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v73, this, *((JSC::JSArrayBufferView **)a2 + 9));
      v14 = v76;
      if (v76)
      {
        v31 = 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v45);
        if (v45[1])
        {
          v31 = 0;
        }
        else
        {
          WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v69, this, *((JSC::JSArrayBufferView **)a2 + 11));
          v15 = v72;
          if (v72)
          {
            v31 = 0;
          }
          else
          {
            v41 = v12;
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v44);
            if (v44[1])
            {
              v31 = 0;
            }
            else
            {
              WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUint32Array,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v65, this, *((_QWORD *)a2 + 13));
              v16 = v68;
              if (v68)
              {
                v31 = 0;
              }
              else
              {
                WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 14), v43);
                if (v43[1])
                {
                  v31 = 0;
                }
                else
                {
                  v17 = *((_QWORD *)a2 + 15);
                  v62[0] = v17;
                  v18 = (JSC::VM *)*((_QWORD *)this + 7);
                  if (v17 < 0xFFFE000000000000)
                  {
                    v33 = v17 - 0x2000000000000;
                    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v62, this);
                      v33 = v39;
                    }
                    v34 = (v33 >> 52) & 0x7FF;
                    if ((v34 - 1023) <= 0x53)
                    {
                      v35 = v33 >> (51 - (v33 >> 52));
                      if (v34 > 0x433)
                        LODWORD(v35) = v33 << ((v33 >> 52) - 51);
                      if (v34 >= 0x41F)
                        v36 = v35;
                      else
                        v36 = (((1 << ((v33 >> 52) + 1)) - 1) & v35) + (1 << ((v33 >> 52) + 1));
                      if ((v33 & 0x8000000000000000) == 0)
                        v19 = v36;
                      else
                        v19 = -v36;
                    }
                    else
                    {
                      v19 = 0;
                    }
                  }
                  else
                  {
                    v19 = v17;
                  }
                  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
                  {
                    v31 = 0;
                  }
                  else
                  {
                    if (v80)
                      goto LABEL_97;
                    v40 = v47[0];
                    v60[0] = 0;
                    v61 = -1;
                    v20 = v79;
                    if (v79 == -1)
                    {
                      LOBYTE(v62[0]) = 0;
                      v63 = -1;
                    }
                    else
                    {
                      v21 = off_1E332F578[v79];
                      ((void (*)(_QWORD *, _BYTE *, _BYTE *))v21)(v62, v60, v78);
                      v61 = v20;
                      LOBYTE(v62[0]) = 0;
                      v63 = -1;
                      ((void (*)(_BYTE *, _QWORD *, _BYTE *))v21)(v58, v62, v60);
                      v63 = v20;
                    }
                    if (v76)
                      goto LABEL_97;
                    v22 = v46[0];
                    v56[0] = 0;
                    v57 = -1;
                    v23 = v75;
                    if (v75 == -1)
                    {
                      v58[0] = 0;
                      v59 = -1;
                    }
                    else
                    {
                      v24 = off_1E332F578[v75];
                      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v58, v56, v74);
                      v57 = v23;
                      v58[0] = 0;
                      v59 = -1;
                      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v24)(v54, v58, v56);
                      v59 = v23;
                    }
                    if (v72)
                      goto LABEL_97;
                    v25 = v45[0];
                    v52[0] = 0;
                    v53 = -1;
                    v26 = v71;
                    if (v71 == -1)
                    {
                      v54[0] = 0;
                      v55 = -1;
                    }
                    else
                    {
                      v27 = off_1E332F578[v71];
                      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v27)(v54, v52, v70);
                      v53 = v26;
                      v54[0] = 0;
                      v55 = -1;
                      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v27)(v50, v54, v52);
                      v55 = v26;
                    }
                    if (v68)
LABEL_97:
                      std::__throw_bad_variant_access[abi:sn180100]();
                    v28 = v44[0];
                    v48[0] = 0;
                    v49 = -1;
                    v29 = v67;
                    if (v67 == -1)
                    {
                      v50[0] = 0;
                      v51 = -1;
                    }
                    else
                    {
                      v30 = off_1E332F518[v67];
                      ((void (*)(_BYTE *, _BYTE *, _BYTE *))v30)(v50, v48, v66);
                      v49 = v29;
                      v50[0] = 0;
                      v51 = -1;
                      ((void (*)(char *, _BYTE *, _BYTE *))v30)(&v64, v50, v48);
                      v51 = v29;
                    }
                    WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::multiDrawArraysInstancedBaseInstanceWEBGL(v41, v40, (uint64_t)v62, v22, (uint64_t)v58, v25, (uint64_t)v54, v28, (uint64_t)v50, v43[0], v19);
                    if (v51 != -1)
                      ((void (*)(char *, _BYTE *))off_1E332F508[v51])(&v64, v50);
                    v51 = -1;
                    if (v49 != -1)
                      ((void (*)(char *, _BYTE *))off_1E332F508[v49])(&v64, v48);
                    if (v55 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v55])(v50, v54);
                    v55 = -1;
                    if (v53 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v53])(v50, v52);
                    if (v59 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v59])(v54, v58);
                    v59 = -1;
                    if (v57 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v57])(v54, v56);
                    if (v63 != -1)
                      ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v63])(v58, v62);
                    v63 = -1;
                    if (v61 != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v61])(v58, v60);
                    v31 = 10;
                  }
                }
                v16 = v68;
              }
              if (v16 != -1)
                ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v16])(v62, v66);
            }
            v15 = v72;
          }
          if (v15 != -1)
            ((void (*)(int *, _BYTE *))off_1E332F598[v15])(&v65, v70);
        }
        v14 = v76;
      }
      if (v14 != -1)
        ((void (*)(int *, _BYTE *))off_1E332F598[v14])(&v69, v74);
    }
    v13 = v80;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v73, v78);
  return (_BYTE *)v31;
}

_BYTE *WebCore::jsWebGLMultiDrawInstancedBaseVertexBaseInstancePrototypeFunction_multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  JSC::VM *v19;
  signed int v20;
  int v21;
  uint64_t (*v22)();
  unsigned int v23;
  int v24;
  uint64_t (*v25)();
  unsigned int v26;
  int v27;
  uint64_t (*v28)();
  unsigned int v29;
  int v30;
  uint64_t (*v31)();
  unsigned int v32;
  int v33;
  uint64_t (*v34)();
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  signed int v40;
  JSValue v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  JSC::VM *v47;
  unsigned int v48[2];
  _DWORD v49[2];
  _DWORD v50[2];
  _DWORD v51[2];
  _DWORD v52[2];
  _DWORD v53[2];
  _DWORD v54[2];
  _BYTE v55[16];
  int v56;
  _BYTE v57[16];
  int v58;
  _BYTE v59[16];
  int v60;
  _BYTE v61[16];
  int v62;
  _BYTE v63[16];
  int v64;
  _BYTE v65[16];
  int v66;
  _BYTE v67[16];
  int v68;
  _BYTE v69[16];
  int v70;
  _BYTE v71[16];
  int v72;
  _QWORD v73[2];
  int v74;
  char v75;
  int v76;
  _BYTE v77[16];
  int v78;
  int v79;
  int v80;
  _BYTE v81[16];
  int v82;
  int v83;
  int v84;
  _BYTE v85[16];
  int v86;
  int v87;
  int v88;
  _BYTE v89[16];
  int v90;
  int v91;
  int v92;
  _BYTE v93[16];
  int v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGLMultiDrawInstancedBaseVertexBaseInstance", "multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGLMultiDrawInstancedBaseVertexBaseInstance", "multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 0xC)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v42);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v54);
  if (v54[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v92, this, *((JSC::JSArrayBufferView **)a2 + 7));
  v13 = v95;
  if (v95)
  {
    v35 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v53);
    if (v53[1])
    {
      v35 = 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v52);
      if (v52[1])
      {
        v35 = 0;
      }
      else
      {
        WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v88, this, *((JSC::JSArrayBufferView **)a2 + 10));
        v14 = v91;
        if (v91)
        {
          v35 = 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), v51);
          if (v51[1])
          {
            v35 = 0;
          }
          else
          {
            v46 = v12;
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v84, this, *((JSC::JSArrayBufferView **)a2 + 12));
            v15 = v87;
            if (v87)
            {
              v35 = 0;
            }
            else
            {
              WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v50);
              if (v50[1])
              {
                v35 = 0;
              }
              else
              {
                WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInt32Array,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(&v80, this, *((JSC::JSArrayBufferView **)a2 + 14));
                v16 = v83;
                if (v83)
                {
                  v35 = 0;
                }
                else
                {
                  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 15), v49);
                  if (v49[1])
                  {
                    v35 = 0;
                  }
                  else
                  {
                    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUint32Array,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v76, this, *((_QWORD *)a2 + 16));
                    v17 = v79;
                    if (v79)
                    {
                      v35 = 0;
                    }
                    else
                    {
                      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 17), v48);
                      if (v48[1])
                      {
                        v35 = 0;
                      }
                      else
                      {
                        v18 = *((_QWORD *)a2 + 18);
                        v73[0] = v18;
                        v19 = (JSC::VM *)*((_QWORD *)this + 7);
                        if (v18 < 0xFFFE000000000000)
                        {
                          v37 = v18 - 0x2000000000000;
                          if (v18 - 0x2000000000000 >= 0xFFFC000000000000)
                          {
                            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
                            v37 = v43;
                          }
                          v38 = (v37 >> 52) & 0x7FF;
                          if ((v38 - 1023) <= 0x53)
                          {
                            v39 = v37 >> (51 - (v37 >> 52));
                            if (v38 > 0x433)
                              LODWORD(v39) = v37 << ((v37 >> 52) - 51);
                            if (v38 >= 0x41F)
                              v40 = v39;
                            else
                              v40 = (((1 << ((v37 >> 52) + 1)) - 1) & v39) + (1 << ((v37 >> 52) + 1));
                            if ((v37 & 0x8000000000000000) == 0)
                              v20 = v40;
                            else
                              v20 = -v40;
                          }
                          else
                          {
                            v20 = 0;
                          }
                        }
                        else
                        {
                          v20 = v18;
                        }
                        if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
                        {
                          v35 = 0;
                        }
                        else
                        {
                          if (v95)
                            goto LABEL_114;
                          v45 = v54[0];
                          v71[0] = 0;
                          v72 = -1;
                          v21 = v94;
                          if (v94 == -1)
                          {
                            LOBYTE(v73[0]) = 0;
                            v74 = -1;
                          }
                          else
                          {
                            v22 = off_1E332F578[v94];
                            ((void (*)(_QWORD *, _BYTE *, _BYTE *))v22)(v73, v71, v93);
                            v72 = v21;
                            LOBYTE(v73[0]) = 0;
                            v74 = -1;
                            ((void (*)(_BYTE *, _QWORD *, _BYTE *))v22)(v69, v73, v71);
                            v74 = v21;
                          }
                          if (v91)
                            goto LABEL_114;
                          v44 = v53[0];
                          v23 = v52[0];
                          v67[0] = 0;
                          v68 = -1;
                          v24 = v90;
                          if (v90 == -1)
                          {
                            v69[0] = 0;
                            v70 = -1;
                          }
                          else
                          {
                            v25 = off_1E332F578[v90];
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v25)(v69, v67, v89);
                            v68 = v24;
                            v69[0] = 0;
                            v70 = -1;
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v25)(v65, v69, v67);
                            v70 = v24;
                          }
                          if (v87)
                            goto LABEL_114;
                          v26 = v51[0];
                          v63[0] = 0;
                          v64 = -1;
                          v27 = v86;
                          if (v86 == -1)
                          {
                            v65[0] = 0;
                            v66 = -1;
                          }
                          else
                          {
                            v28 = off_1E332F578[v86];
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v28)(v65, v63, v85);
                            v64 = v27;
                            v65[0] = 0;
                            v66 = -1;
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v28)(v61, v65, v63);
                            v66 = v27;
                          }
                          if (v83)
                            goto LABEL_114;
                          v29 = v50[0];
                          v59[0] = 0;
                          v60 = -1;
                          v30 = v82;
                          if (v82 == -1)
                          {
                            v61[0] = 0;
                            v62 = -1;
                          }
                          else
                          {
                            v31 = off_1E332F578[v82];
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v31)(v61, v59, v81);
                            v60 = v30;
                            v61[0] = 0;
                            v62 = -1;
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v31)(v57, v61, v59);
                            v62 = v30;
                          }
                          if (v79)
LABEL_114:
                            std::__throw_bad_variant_access[abi:sn180100]();
                          v32 = v49[0];
                          v55[0] = 0;
                          v56 = -1;
                          v33 = v78;
                          if (v78 == -1)
                          {
                            v57[0] = 0;
                            v58 = -1;
                          }
                          else
                          {
                            v34 = off_1E332F518[v78];
                            ((void (*)(_BYTE *, _BYTE *, _BYTE *))v34)(v57, v55, v77);
                            v56 = v33;
                            v57[0] = 0;
                            v58 = -1;
                            ((void (*)(char *, _BYTE *, _BYTE *))v34)(&v75, v57, v55);
                            v58 = v33;
                          }
                          WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(v46, v45, (uint64_t)v73, v44, v23, (uint64_t)v69, v26, (uint64_t)v65, v29, (uint64_t)v61, v32, (uint64_t)v57, v48[0], v20);
                          if (v58 != -1)
                            ((void (*)(char *, _BYTE *))off_1E332F508[v58])(&v75, v57);
                          v58 = -1;
                          if (v56 != -1)
                            ((void (*)(char *, _BYTE *))off_1E332F508[v56])(&v75, v55);
                          if (v62 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v62])(v57, v61);
                          v62 = -1;
                          if (v60 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v60])(v57, v59);
                          if (v66 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v66])(v61, v65);
                          v66 = -1;
                          if (v64 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v64])(v61, v63);
                          if (v70 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v70])(v65, v69);
                          v70 = -1;
                          if (v68 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v68])(v65, v67);
                          if (v74 != -1)
                            ((void (*)(_BYTE *, _QWORD *))off_1E332F568[v74])(v69, v73);
                          v74 = -1;
                          if (v72 != -1)
                            ((void (*)(_BYTE *, _BYTE *))off_1E332F568[v72])(v69, v71);
                          v35 = 10;
                        }
                      }
                      v17 = v79;
                    }
                    if (v17 != -1)
                      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v17])(v73, v77);
                  }
                  v16 = v83;
                }
                if (v16 != -1)
                  ((void (*)(int *, _BYTE *))off_1E332F598[v16])(&v76, v81);
              }
              v15 = v87;
            }
            if (v15 != -1)
              ((void (*)(int *, _BYTE *))off_1E332F598[v15])(&v80, v85);
          }
          v14 = v91;
        }
        if (v14 != -1)
          ((void (*)(int *, _BYTE *))off_1E332F598[v14])(&v84, v89);
      }
    }
    v13 = v95;
  }
  if (v13 != -1)
    ((void (*)(int *, _BYTE *))off_1E332F598[v13])(&v88, v93);
  return (_BYTE *)v35;
}

_DWORD *WebCore::Converter<WebCore::IDLUnion<WebCore::IDLUint32Array,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(_DWORD *result, JSC *this, uint64_t a3)
{
  _DWORD *v5;
  JSC::VM *v6;
  unint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  int v16;
  JSC::JSObject *v17;
  JSC::VM *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  uint64_t v24[2];
  int v25;
  unsigned __int8 v26;
  JSC::VM *v27;
  WTF *v28;
  uint64_t v29;

  v5 = result;
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v6;
  LOBYTE(v24[0]) = 0;
  v26 = 0;
  v7 = a3 & 0xFFFE000000000002;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_18;
  if (*(_BYTE *)(a3 + 5) != 45)
    goto LABEL_18;
  result = (_DWORD *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::possiblySharedTypedImpl((JSC::JSArrayBufferView *)a3, (uint64_t *)&v28);
  v8 = v28;
  if (!v28)
    goto LABEL_18;
  v9 = *((_QWORD *)v28 + 4);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      if ((v11 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v10 & 0x3FFFFFFFFLL) + v11)
      {
        if (*(_QWORD *)(v9 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          v28 = 0;
          goto LABEL_14;
        }
      }
    }
  }
  v13 = *(_DWORD *)v28;
  if ((*((_BYTE *)v28 + 6) & 3) == 0)
  {
    *(_DWORD *)v28 = v13 + 1;
    if (v26)
    {
      if (v25 != -1)
      {
        if (!v25)
        {
          result = (_DWORD *)v24[0];
          v24[0] = (uint64_t)v8;
          if (result)
          {
            if (*result == 1)
              result = (_DWORD *)JSC::ArrayBufferView::operator delete();
            else
              --*result;
          }
          goto LABEL_14;
        }
        result = (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F508[v25])(&v28, v24);
      }
      v24[0] = (uint64_t)v8;
      v25 = 0;
    }
    else
    {
      v24[0] = (uint64_t)v8;
      v25 = 0;
      v26 = 1;
    }
LABEL_14:
    v13 = *(_DWORD *)v8;
  }
  v14 = v13 - 1;
  if (v14)
    *(_DWORD *)v8 = v14;
  else
    result = (_DWORD *)JSC::ArrayBufferView::operator delete();
LABEL_18:
  if (v26)
  {
    *((_BYTE *)v5 + 8) = 0;
    v5[6] = -1;
    v15 = v25;
    if (v25 == -1)
    {
      v5[8] = 0;
    }
    else
    {
      result = (_DWORD *)((uint64_t (*)(WTF **))off_1E332F518[v25])(&v28);
      v5[6] = v15;
      v16 = v26;
      v5[8] = 0;
      if (v16)
      {
        if (v25 != -1)
          return (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F508[v25])(&v28, v24);
      }
    }
    return result;
  }
  if (v7 || *(unsigned __int8 *)(a3 + 5) < 0x17u)
    goto LABEL_27;
  v17 = (JSC::JSObject *)JSC::iteratorMethod(this, (JSC::JSGlobalObject *)a3, (JSC::JSObject *)a3);
  if (*((_DWORD *)v6 + 20))
  {
    result = (_DWORD *)JSC::VM::hasExceptionsAfterHandlingTraps(v6);
    if ((_DWORD)result)
      goto LABEL_28;
  }
  if (v17 == (JSC::JSObject *)10)
  {
LABEL_27:
    result = (_DWORD *)JSC::throwTypeError();
LABEL_28:
    v5[8] = 1;
    return result;
  }
  v28 = 0;
  v29 = 0;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  v24[0] = (uint64_t)&v28;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,JSC::JSValue,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject &,JSC::JSValue)#1}>(this, a3, v17, v24);
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
  {
    v23 = v28;
    v25 = 1;
    if (v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree(v23, v22);
    }
    v19 = 1;
    v20 = 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v25 = 0;
    v21 = v29;
    v24[0] = 0;
    v24[1] = 0;
    *((_QWORD *)v5 + 1) = v28;
    *((_QWORD *)v5 + 2) = v21;
    v5[6] = 1;
  }
  v5[8] = v19;
  return (_DWORD *)((uint64_t (*)(WTF **, uint64_t *))off_1E332F398[v20])(&v28, v24);
}

uint64_t WebCore::jsWebGLPolygonModePrototypeFunction_polygonModeWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  JSValue v17;
  JSC::VM *v18;
  _DWORD v19[2];
  _DWORD v20[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "WebGLPolygonMode", "polygonModeWEBGL");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGLPolygonMode::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGLPolygonMode::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "WebGLPolygonMode", "polygonModeWEBGL");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v17);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v20);
    if (v20[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v19);
      if (v19[1])
      {
        return 0;
      }
      else
      {
        v13 = v20[0];
        v14 = v19[0];
        if (*(_QWORD *)(v12 + 16))
        {
          v15 = *(_DWORD **)(*(_QWORD *)(v12 + 16) + 88);
          if (v15)
            ++v15[2];
          (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v15 + 2184))(v15, v13, v14);
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGLProvokingVertexPrototypeFunction_provokingVertexWEBGL(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  JSValue v15;
  JSC::VM *v16;
  _DWORD v17[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGLProvokingVertex", "provokingVertexWEBGL");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGLProvokingVertex::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGLProvokingVertex::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGLProvokingVertex", "provokingVertexWEBGL");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v17);
    if (v17[1])
    {
      return 0;
    }
    else
    {
      v12 = v17[0];
      if (*(_QWORD *)(v11 + 16))
      {
        v13 = *(_DWORD **)(*(_QWORD *)(v11 + 16) + 88);
        if (v13)
          ++v13[2];
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v13 + 2176))(v13, v12);
        if (v13[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[2];
      }
      return 10;
    }
  }
}

uint64_t WebCore::JSWGSLLanguageFeatures::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWakeLock::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWakeLockSentinel::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWaveShaperNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC21GenericTypedArrayViewINSA_14Float32AdaptorEEENS8_12RawPtrTraitsISD_EENS8_21DefaultRefDerefTraitsISD_EEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSI_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t WebCore::JSWaveShaperNode::create(unint64_t a1, JSC::VM *a2, uint64_t *a3)
{
  WebCore::JSWaveShaperNode *v5;
  _QWORD *v6;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;

  v5 = (WebCore::JSWaveShaperNode *)*((_QWORD *)a2 + 7);
  v6 = (_QWORD *)WebCore::JSWaveShaperNode::subspaceForImpl(v5, a2);
  SlowCase = v6[3];
  if (SlowCase < v6[4])
    goto LABEL_2;
  SlowCase = v6[5];
  if ((SlowCase & 1) == 0)
  {
    v10 = *(_QWORD *)(SlowCase + 8) ^ v6[6];
    v6[4] = SlowCase + HIDWORD(v10);
    v6[5] = SlowCase + (int)v10;
LABEL_2:
    v6[3] = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *a3;
  *a3 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(SlowCase, a1);
  *(_QWORD *)(result + 24) = v8;
  if (*((_BYTE *)v5 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebAnimation::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLInterface<WebCore::CSSNumericValue>>>>::convert(uint64_t result, JSC::JSGlobalObject *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v3 = result;
  v17 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  else
  {
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_16;
    v4 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v5 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v6 = (char **)(16 * v4);
    if ((_DWORD)v4)
      v7 = v6 == &WebCore::JSCSSNumericValue::s_info;
    else
      v7 = 1;
    if (!v7)
    {
      do
      {
        v6 = (char **)v6[2];
        v5 = v6 != 0;
      }
      while (v6 != &WebCore::JSCSSNumericValue::s_info && v6 != 0);
    }
    if (v5 && (v9 = *(_QWORD *)(a3 + 24)) != 0)
    {
      ++*(_DWORD *)(v9 + 8);
      v14 = v9;
      v15 = 1;
      v16 = 0;
    }
    else
    {
LABEL_16:
      WebCore::Converter<WebCore::IDLDouble>::convert(a2, a3, (uint64_t)&v11);
      v10 = v12;
      if (v12)
      {
        v10 = 1;
      }
      else
      {
        v14 = v11;
        v15 = 0;
      }
      v16 = v10;
    }
    result = WebCore::Detail::ConversionResultStorage<std::optional<std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>>>>::ConversionResultStorage<std::variant<double,WTF::RefPtr<WebCore::CSSNumericValue,WTF::RawPtrTraits<WebCore::CSSNumericValue>,WTF::DefaultRefDerefTraits<WebCore::CSSNumericValue>>>>(v3, (uint64_t)v13);
    if (v16 != -1)
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3330D70[v16])(&v11, &v14);
  }
  return result;
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::promise(_QWORD *a1, unint64_t a2, JSC::Structure *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  JSC::JSPromise *v9;
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  uint64_t v13;
  WebCore::DOMGuardedObject *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v34[8];
  WTF::StringImpl *v35;
  objc_class *v36;

  v5 = *((unsigned int *)a1 + 13);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v9 = *(JSC::JSPromise **)(a2 + 56);
    v10 = *(_DWORD *)(a2 + 1164);
    if (v10)
      v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
    else
      v11 = 0;
    v12 = JSC::JSPromise::create(v9, v11, a3);
    v13 = WTF::fastMalloc((WTF *)0x30);
    v14 = WebCore::DOMGuardedObject::DOMGuardedObject((WebCore::DOMGuardedObject *)v13, a2, v12);
    *(_QWORD *)v14 = &off_1E3226868;
    *((_DWORD *)v14 + 10) = 1;
    *((_BYTE *)v14 + 44) = 0;
    v15 = *((unsigned int *)a1 + 13);
    if ((_DWORD)v15 == *((_DWORD *)a1 + 12))
    {
      v16 = v15 + (v15 >> 2);
      if (v16 >= 0x10)
        v17 = v16 + 1;
      else
        v17 = 16;
      if (v17 <= v15 + 1)
        v18 = v15 + 1;
      else
        v18 = v17;
      v19 = (_QWORD *)a1[5];
      if (v18 < 2)
      {
        v20 = a1 + 7;
        a1[5] = a1 + 7;
        *((_DWORD *)a1 + 12) = 1;
      }
      else
      {
        if (v18 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1950D98ECLL);
        }
        v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
        *((_DWORD *)a1 + 12) = v18;
        a1[5] = v20;
      }
      memcpy(v20, v19, 8 * v15);
      if (a1 + 7 != v19 && v19)
      {
        if ((_QWORD *)a1[5] == v19)
        {
          a1[5] = 0;
          *((_DWORD *)a1 + 12) = 0;
        }
        WTF::fastFree((WTF *)v19, v25);
      }
      v15 = *((unsigned int *)a1 + 13);
      v21 = (uint64_t *)(a1[5] + 8 * v15);
    }
    else
    {
      v21 = (uint64_t *)(a1[5] + 8 * v15);
    }
    ++*(_DWORD *)(v13 + 16);
    *v21 = v13;
    *((_DWORD *)a1 + 13) = v15 + 1;
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_39;
    if (!*((_BYTE *)a1 + 24))
    {
      v30 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
      WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::WebAnimation>>(v13, v30);
      goto LABEL_39;
    }
    v26 = *((_BYTE *)a1 + 8);
    v27 = (WTF::StringImpl *)a1[2];
    if (v27)
      *(_DWORD *)v27 += 4;
    v35 = v27;
    v36 = 0;
    v34[0] = v26;
    WebCore::DeferredPromise::reject(v13, v34, 0, &v36);
    v29 = v35;
    v35 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v28);
        if (v27)
        {
LABEL_36:
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v28);
          else
            *(_DWORD *)v27 -= 2;
        }
LABEL_39:
        v31 = *(_QWORD *)(v13 + 24);
        if (v31 && (v32 = *(_QWORD *)v31) != 0 && (*(_BYTE *)(v31 + 8) & 3) == 0)
        {
          if ((v32 & 0xFFFE000000000002) != 0)
          {
            v24 = 0;
          }
          else if (*(_BYTE *)(v32 + 5) == 68)
          {
            v24 = *(_QWORD *)v31;
          }
          else
          {
            v24 = 0;
          }
        }
        else
        {
          v24 = 10;
        }
        if (*(_DWORD *)(v13 + 16) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        else
          --*(_DWORD *)(v13 + 16);
        return v24;
      }
      *(_DWORD *)v29 -= 2;
    }
    if (v27)
      goto LABEL_36;
    goto LABEL_39;
  }
  v6 = a1[5];
  v7 = 8 * v5;
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)v6 + 32);
    if (v8)
    {
      if ((*(_BYTE *)(v8 + 8) & 3) == 0 && *(_QWORD *)v8 == a2)
        break;
    }
    v6 += 8;
    v7 -= 8;
    if (!v7)
      goto LABEL_7;
  }
  v22 = *(_BYTE **)(*(_QWORD *)v6 + 24);
  if (!v22)
    return 10;
  v23 = *(_QWORD *)v22;
  if (!*(_QWORD *)v22 || (v22[8] & 3) != 0)
    return 10;
  if ((v23 & 0xFFFE000000000002) != 0)
    return 0;
  if (*(_BYTE *)(v23 + 5) == 68)
    return *(_QWORD *)v22;
  return 0;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::WebAnimation>>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::wrap<WebCore::WebAnimation>((uint64_t)v6, **(JSC::VM ***)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioData::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioDecoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunk::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunk::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoDecoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoEncoder::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::PlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;
  JSValue v8;
  int i;
  unsigned int v10;
  JSC::JSCell *IndexQuickly;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  JSC::JSCell *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;

  v6 = *((_QWORD *)a1 + 7);
  result = JSC::getIterationMode();
  if ((_DWORD)result == 2)
  {
    for (i = 1; ; ++i)
    {
      v10 = (*(_BYTE *)(a2 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a2 + 8) - 8) : 0;
      if (i - 1 >= v10)
        break;
      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)a2, i - 1, 0);
      if (!IndexQuickly)
        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)a2, a1, (i - 1));
      if (*(_DWORD *)(v6 + 80))
      {
        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
        if ((result & 1) != 0)
          break;
      }
      v12 = *a3;
      result = WebCore::convertDictionary<WebCore::PlaneLayout>(IndexQuickly, (JSC::VM **)a1, (uint64_t)&v26);
      if (!v27)
      {
        v25 = v26;
        v13 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
        {
          result = (uint64_t)WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v25);
          v13 = *(unsigned int *)(v12 + 12);
          v14 = *(_QWORD *)v12;
          v15 = *(_OWORD *)result;
        }
        else
        {
          v14 = *(_QWORD *)v12;
          v15 = v25;
        }
        *(_OWORD *)(v14 + 16 * v13) = v15;
        ++*(_DWORD *)(v12 + 12);
      }
      if (*(_QWORD *)(v6 + 16))
      {
        v23 = JSC::JSArrayIterator::create();
        v24 = i | 0xFFFE000000000000;
        if (i < 0)
          v24 = COERCE__INT64((double)i) + 0x2000000000000;
        *(_QWORD *)(v23 + 16) = v24;
        return JSC::iteratorClose();
      }
    }
  }
  else
  {
    JSC::iteratorForIterable(a1, (JSC::JSGlobalObject *)a2, v8);
    if (!*(_DWORD *)(v6 + 80) || (result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6), (result & 1) == 0))
    {
      while (1)
      {
        result = JSC::iteratorStep();
        if (*(_QWORD *)(v6 + 16) || result == 6)
          break;
        v17 = (JSC::JSCell *)JSC::iteratorValue();
        if (*(_DWORD *)(v6 + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6);
          if ((result & 1) != 0)
            break;
        }
        v18 = *a3;
        WebCore::convertDictionary<WebCore::PlaneLayout>(v17, (JSC::VM **)a1, (uint64_t)&v26);
        if (!v27)
        {
          v25 = v26;
          v19 = *(unsigned int *)(v18 + 12);
          if ((_DWORD)v19 == *(_DWORD *)(v18 + 8))
          {
            v20 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v25);
            v19 = *(unsigned int *)(v18 + 12);
            v21 = *(_QWORD *)v18;
            v22 = *(_OWORD *)v20;
          }
          else
          {
            v21 = *(_QWORD *)v18;
            v22 = v25;
          }
          *(_OWORD *)(v21 + 16 * v19) = v22;
          ++*(_DWORD *)(v18 + 12);
        }
        if (*(_QWORD *)(v6 + 16))
          return JSC::iteratorClose();
      }
    }
  }
  return result;
}

uint64_t WebCore::JSWebGL2RenderingContext::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLActiveInfo::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLBuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLFramebuffer::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLProgram::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSWebGLQuery::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::DragData::DragData(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)a1 = *a3;
  v11 = *a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = a10;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

{
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)a1 = *a3;
  v11 = *a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = a7;
  *(_QWORD *)(a1 + 56) = a9;
  *(_QWORD *)(a1 + 64) = a10;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_1950DAB5C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl ***v3;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v5 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v5)
  {
    v7 = *v3;
    v8 = 8 * v5;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v6 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1950DAC4C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl ***v3;
  uint64_t v5;
  WTF *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v5 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v5)
  {
    v7 = *v3;
    v8 = 8 * v5;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v6 = (WTF *)*v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 40) = 0;
    WTF::fastFree(v6, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DragData::DragData(uint64_t result, _DWORD **a2, _QWORD *a3, _QWORD *a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD *v10;

  *(_QWORD *)result = *a3;
  *(_QWORD *)(result + 8) = *a4;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a5;
  *(_BYTE *)(result + 25) = a6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a7;
  *(_QWORD *)(result + 56) = a9;
  *(_QWORD *)(result + 64) = a10;
  v10 = *a2;
  if (*a2)
    *v10 += 2;
  *(_QWORD *)(result + 72) = v10;
  *(_BYTE *)(result + 80) = 0;
  return result;
}

{
  _DWORD *v10;

  *(_QWORD *)result = *a3;
  *(_QWORD *)(result + 8) = *a4;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a5;
  *(_BYTE *)(result + 25) = a6;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a7;
  *(_QWORD *)(result + 56) = a9;
  *(_QWORD *)(result + 64) = a10;
  v10 = *a2;
  if (*a2)
    *v10 += 2;
  *(_QWORD *)(result + 72) = v10;
  *(_BYTE *)(result + 80) = 0;
  return result;
}

uint64_t WebCore::DragData::DragData(uint64_t result, _DWORD **a2, _QWORD *a3, _QWORD *a4, uint64_t a5, char a6, char a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v12 = result;
  *(_QWORD *)result = *a3;
  *(_QWORD *)(result + 8) = *a4;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a6;
  *(_BYTE *)(result + 25) = a7;
  v13 = *(unsigned int *)(a5 + 12);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(v12 + 40) = v13;
    *(_QWORD *)(v12 + 32) = v16;
    v17 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v17)
    {
      v18 = *(_DWORD ***)a5;
      v19 = 8 * v17;
      do
      {
        v20 = *v18;
        if (*v18)
          *v20 += 2;
        *v16++ = v20;
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
  }
  *(_BYTE *)(v12 + 48) = a8;
  *(_QWORD *)(v12 + 56) = a9;
  *(_QWORD *)(v12 + 64) = a10;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  *(_QWORD *)(v12 + 72) = v14;
  *(_BYTE *)(v12 + 80) = 0;
  return v12;
}

{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  _DWORD *v20;

  v12 = result;
  *(_QWORD *)result = *a3;
  *(_QWORD *)(result + 8) = *a4;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a6;
  *(_BYTE *)(result + 25) = a7;
  v13 = *(unsigned int *)(a5 + 12);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = v13;
  if ((_DWORD)v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(v12 + 40) = v13;
    *(_QWORD *)(v12 + 32) = v16;
    v17 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v17)
    {
      v18 = *(_DWORD ***)a5;
      v19 = 8 * v17;
      do
      {
        v20 = *v18;
        if (*v18)
          *v20 += 2;
        *v16++ = v20;
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
  }
  *(_BYTE *)(v12 + 48) = a8;
  *(_QWORD *)(v12 + 56) = a9;
  *(_QWORD *)(v12 + 64) = a10;
  v14 = *a2;
  if (*a2)
    *v14 += 2;
  *(_QWORD *)(v12 + 72) = v14;
  *(_BYTE *)(v12 + 80) = 0;
  return v12;
}

uint64_t WebCore::DragData::containsURLTypeIdentifier(WTF::StringImpl **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18[2];

  v16 = 0;
  v17 = 0;
  v18[0] = this[7];
  LOBYTE(v18[1]) = *((_BYTE *)this + 64);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E327FAB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)v18;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 16) = v4;
  }
  (*(void (**)(uint64_t, WTF **, char *, uint64_t))(*(_QWORD *)v4 + 40))(v4, &v16, (char *)this + 72, v2);
  MEMORY[0x19AEA5508](v18, objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier"));
  if (HIDWORD(v17))
  {
    v7 = 0;
    do
    {
      v8 = WTF::equal(*((WTF **)v16 + v7), v18[0], v6);
      if ((v8 & 1) != 0)
        break;
      ++v7;
    }
    while (v7 < HIDWORD(v17));
  }
  else
  {
    v8 = 0;
  }
  v9 = v18[0];
  v18[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (HIDWORD(v17))
  {
    v13 = v16;
    v14 = 8 * HIDWORD(v17);
    do
    {
      v15 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  v11 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v11, v10);
  }
  return v8;
}

void sub_1950DB094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v15 = a9;
  if (a11)
  {
    v16 = 8 * a11;
    do
    {
      v17 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      v15 = (WTF *)((char *)v15 + 8);
      v16 -= 8;
    }
    while (v16);
    v15 = a9;
    if (!a9)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a9)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v15, v14);
  goto LABEL_3;
}

uint64_t WebCore::DragData::canSmartReplace(WebCore::DragData *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  char *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v10;

  *(_QWORD *)&v10 = *((_QWORD *)this + 7);
  BYTE8(v10) = *((_BYTE *)this + 64);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E327FAB0;
  *(_OWORD *)(v2 + 8) = v10;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  v4 = (char *)this + 72;
  v3 = v5;
  if (v5)
    *(_DWORD *)v3 += 2;
  v6 = WebCore::s_platformStrategies;
  v7 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v6 + 16) = v7;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v7 + 80))(v7, v4, v2);
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v8);
    else
      *(_DWORD *)v3 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return 1;
}

void sub_1950DB220(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DragData::shouldMatchStyleOnDrop(WebCore::DragData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  uint64_t v14;
  __int128 v15;

  v13 = 0;
  v14 = 0;
  *(_QWORD *)&v15 = *((_QWORD *)this + 7);
  BYTE8(v15) = *((_BYTE *)this + 64);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E327FAB0;
  *(_OWORD *)(v2 + 8) = v15;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 16) = v4;
  }
  (*(void (**)(uint64_t, WTF **, char *, uint64_t))(*(_QWORD *)v4 + 40))(v4, &v13, (char *)this + 72, v2);
  if (HIDWORD(v14))
  {
    v5 = 0;
    do
    {
      v6 = MEMORY[0x19AEA53F4](*((_QWORD *)v13 + v5), "com.apple.sticker", 17);
      if ((v6 & 1) != 0)
        break;
      ++v5;
    }
    while (v5 < HIDWORD(v14));
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (HIDWORD(v14))
  {
    v10 = v13;
    v11 = 8 * HIDWORD(v14);
    do
    {
      v12 = *(WTF::StringImpl **)v10;
      *(_QWORD *)v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      v10 = (WTF *)((char *)v10 + 8);
      v11 -= 8;
    }
    while (v11);
  }
  v8 = v13;
  if (v13)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    WTF::fastFree(v8, v7);
  }
  return v6;
}

void sub_1950DB3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11)
{
  uint64_t v11;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v14 = a9;
  if (a11)
  {
    v15 = 8 * a11;
    do
    {
      v16 = *(WTF::StringImpl **)v14;
      *(_QWORD *)v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      v14 = (WTF *)((char *)v14 + 8);
      v15 -= 8;
    }
    while (v15);
    v14 = a9;
    if (!a9)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a9)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v14, v13);
  goto LABEL_3;
}

uint64_t WebCore::DragData::containsColor(WTF::StringImpl **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18[2];

  v16 = 0;
  v17 = 0;
  v18[0] = this[7];
  LOBYTE(v18[1]) = *((_BYTE *)this + 64);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E327FAB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)v18;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 16) = v4;
  }
  (*(void (**)(uint64_t, WTF **, char *, uint64_t))(*(_QWORD *)v4 + 40))(v4, &v16, (char *)this + 72, v2);
  MEMORY[0x19AEA5508](v18, WebCore::UIColorPboardType);
  if (HIDWORD(v17))
  {
    v7 = 0;
    do
    {
      v8 = WTF::equal(*((WTF **)v16 + v7), v18[0], v6);
      if ((v8 & 1) != 0)
        break;
      ++v7;
    }
    while (v7 < HIDWORD(v17));
  }
  else
  {
    v8 = 0;
  }
  v9 = v18[0];
  v18[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (HIDWORD(v17))
  {
    v13 = v16;
    v14 = 8 * HIDWORD(v17);
    do
    {
      v15 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v10);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  v11 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v11, v10);
  }
  return v8;
}

void sub_1950DB5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, unsigned int a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v15 = a9;
  if (a11)
  {
    v16 = 8 * a11;
    do
    {
      v17 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      v15 = (WTF *)((char *)v15 + 8);
      v16 -= 8;
    }
    while (v16);
    v15 = a9;
    if (!a9)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!a9)
  {
    goto LABEL_3;
  }
  WTF::fastFree(v15, v14);
  goto LABEL_3;
}

uint64_t WebCore::DragData::asFilenames@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;

  if (*(_BYTE *)(this + 80))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return this;
  }
  v3 = this;
  *(_QWORD *)&v11 = *(_QWORD *)(this + 56);
  BYTE8(v11) = *(_BYTE *)(this + 64);
  this = WTF::fastMalloc((WTF *)0x18);
  v4 = this;
  *(_QWORD *)this = off_1E327FAB0;
  *(_OWORD *)(this + 8) = v11;
  v5 = *(unsigned int *)(v3 + 44);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 12) = v5;
  if (!(_DWORD)v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (!(v5 >> 29))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
    v7 = *(unsigned int *)(v3 + 44);
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)(v3 + 32);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *v6++ = v10;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  __break(0xC471u);
  return this;
}

void sub_1950DB754(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DragData::containsPlainText(WTF **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF *v29[2];

  v29[0] = this[7];
  LOBYTE(v29[1]) = *((_BYTE *)this + 64);
  v2 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v2 = off_1E327FAB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  v3 = WebCore::s_platformStrategies;
  v4 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v3 + 16) = v4;
  }
  v5 = (char *)(this + 9);
  (*(void (**)(uint64_t, WTF **, char *, uint64_t))(*(_QWORD *)v4 + 40))(v4, v29, v5, v2);
  MEMORY[0x19AEA5508](&v28, objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier"));
  if (HIDWORD(v29[1]))
  {
    v7 = 0;
    while ((WTF::equal(*((WTF **)v29[0] + v7), v28, v6) & 1) == 0)
    {
      if (++v7 >= (unint64_t)HIDWORD(v29[1]))
        goto LABEL_7;
    }
    v15 = 1;
  }
  else
  {
LABEL_7:
    MEMORY[0x19AEA5508](&v27, objc_msgSend((id)*MEMORY[0x1E0CEC4E8], "identifier"));
    if (HIDWORD(v29[1]))
    {
      v10 = 0;
      while ((WTF::equal(*((WTF **)v29[0] + v10), v27, v9) & 1) == 0)
      {
        if (++v10 >= (unint64_t)HIDWORD(v29[1]))
          goto LABEL_11;
      }
      v15 = 1;
    }
    else
    {
LABEL_11:
      MEMORY[0x19AEA5508](&v26, objc_msgSend((id)*MEMORY[0x1E0CEC5C0], "identifier"));
      if (HIDWORD(v29[1]))
      {
        v12 = 0;
        while ((WTF::equal(*((WTF **)v29[0] + v12), v26, v11) & 1) == 0)
        {
          if (++v12 >= (unint64_t)HIDWORD(v29[1]))
            goto LABEL_15;
        }
        v15 = 1;
      }
      else
      {
LABEL_15:
        v13 = WebCore::s_platformStrategies;
        v14 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
        if (!v14)
        {
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
          *(_QWORD *)(v13 + 16) = v14;
        }
        MEMORY[0x19AEA5508](&v25, objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier"));
        v15 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **, char *, uint64_t))(*(_QWORD *)v14 + 240))(v14, &v25, v5, v2);
        v16 = v25;
        v25 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v8);
          else
            *(_DWORD *)v16 -= 2;
        }
      }
      v17 = v26;
      v26 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v8);
        else
          *(_DWORD *)v17 -= 2;
      }
    }
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v8);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v8);
    else
      *(_DWORD *)v19 -= 2;
  }
  if (HIDWORD(v29[1]))
  {
    v22 = (WTF::StringImpl **)v29[0];
    v23 = 8 * HIDWORD(v29[1]);
    do
    {
      v24 = *v22;
      *v22 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v8);
        else
          *(_DWORD *)v24 -= 2;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  v20 = v29[0];
  if (v29[0])
  {
    v29[0] = 0;
    LODWORD(v29[1]) = 0;
    WTF::fastFree(v20, v8);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return v15;
}

void sub_1950DBA68(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF *a13, int a14, unsigned int a15)
{
  uint64_t v15;
  WTF *v17;
  uint64_t v18;
  WTF::StringImpl *v19;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  v17 = a13;
  if (a15)
  {
    v18 = 8 * a15;
    do
    {
      v19 = *(WTF::StringImpl **)v17;
      *(_QWORD *)v17 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      v17 = (WTF *)((char *)v17 + 8);
      v18 -= 8;
    }
    while (v18);
    v17 = a13;
    if (!a13)
    {
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!a13)
  {
    goto LABEL_14;
  }
  WTF::fastFree(v17, a2);
  goto LABEL_14;
}

uint64_t WebCore::DragData::asPlainText@<X0>(WTF::StringImpl **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  char *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  void *v11;
  const __CFString *v12;
  WTF *v13;
  NSURL *v14;
  uint64_t v15;
  __CFString *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t result;
  void (**v28)(WebCore::Pasteboard *__hidden);
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  int v34;
  unsigned int v35;
  char v36;
  WTF::StringImpl *v37[2];

  v37[0] = this[7];
  LOBYTE(v37[1]) = *((_BYTE *)this + 64);
  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E327FAB0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)v37;
  v7 = this[9];
  v6 = (char *)(this + 9);
  v5 = v7;
  v28 = off_1E3354370;
  v29 = v4;
  if (v7)
    *(_DWORD *)v5 += 2;
  v30 = v5;
  v8 = WebCore::s_platformStrategies;
  v9 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v9)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v8 + 16) = v9;
    v4 = v29;
  }
  v31 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v9 + 80))(v9, v6, v4);
  LOBYTE(v32) = 0;
  v36 = 0;
  v37[0] = 0;
  WebCore::Pasteboard::read((uint64_t)&v28, v37, 1, 0, 0);
  v10 = v37[0];
  if (v37[0])
  {
    *(_DWORD *)v37[0] += 2;
    if (LOBYTE(v37[1]))
    {
      v11 = (void *)MEMORY[0x1E0C99E98];
      v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
LABEL_8:
      v13 = (WTF *)objc_msgSend(v11, "URLWithString:", v12, v28);
      v15 = WTF::userVisibleString(v13, v14);
      goto LABEL_11;
    }
    v16 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else
  {
    if (LOBYTE(v37[1]))
    {
      v11 = (void *)MEMORY[0x1E0C99E98];
      v12 = &stru_1E3487BC0;
      goto LABEL_8;
    }
    v16 = &stru_1E3487BC0;
  }
  v15 = -[__CFString precomposedStringWithCanonicalMapping](v16, "precomposedStringWithCanonicalMapping", v28);
LABEL_11:
  MEMORY[0x19AEA5508](a2, v15);
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v17);
    else
      *(_DWORD *)v10 -= 2;
  }
  v18 = v37[0];
  v37[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v28 = off_1E3354370;
  if (v36)
  {
    if (v35)
    {
      v19 = 32 * v35;
      v20 = (char *)v33 + 16;
      do
      {
        v21 = *((unsigned int *)v20 + 2);
        if ((_DWORD)v21 != -1)
          ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v21])(v37, v20);
        *((_DWORD *)v20 + 2) = -1;
        v22 = (WTF::StringImpl *)*((_QWORD *)v20 - 1);
        *((_QWORD *)v20 - 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v17);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = (WTF::StringImpl *)*((_QWORD *)v20 - 2);
        *((_QWORD *)v20 - 2) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v17);
          else
            *(_DWORD *)v23 -= 2;
        }
        v20 += 32;
        v19 -= 32;
      }
      while (v19);
    }
    v24 = v33;
    if (v33)
    {
      v33 = 0;
      v34 = 0;
      WTF::fastFree(v24, v17);
    }
    v25 = v32;
    v32 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v30;
  v30 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v17);
    else
      *(_DWORD *)v26 -= 2;
  }
  result = v29;
  v29 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1950DBE78(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, WTF::StringImpl *a13, WTF *a14, int a15, unsigned int a16, char a17, WTF::StringImpl *a18)
{
  WTF::StringImpl *v18;
  WTF::StringImpl *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, a2);
  else
    *(_DWORD *)v18 -= 2;
  v20 = a18;
  a18 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (a17)
  {
    if (a16)
    {
      v21 = 32 * a16;
      v22 = (char *)a14 + 16;
      do
      {
        v23 = *((unsigned int *)v22 + 2);
        if ((_DWORD)v23 != -1)
          ((void (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v23])(&a18, v22);
        *((_DWORD *)v22 + 2) = -1;
        v24 = (WTF::StringImpl *)*((_QWORD *)v22 - 1);
        *((_QWORD *)v22 - 1) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, a2);
          else
            *(_DWORD *)v24 -= 2;
        }
        v25 = (WTF::StringImpl *)*((_QWORD *)v22 - 2);
        *((_QWORD *)v22 - 2) = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, a2);
          else
            *(_DWORD *)v25 -= 2;
        }
        v22 += 32;
        v21 -= 32;
      }
      while (v21);
    }
    if (a14)
      WTF::fastFree(a14, a2);
    if (a13)
    {
      if (*(_DWORD *)a13 == 2)
        WTF::StringImpl::destroy(a13, a2);
      else
        *(_DWORD *)a13 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::DragData::containsCompatibleContent(WTF::StringImpl **this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF *v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  const WTF::StringImpl *v72;
  __int128 v73;

  if (a2)
  {
    if (a2 == 2)
      return WebCore::DragData::containsColor(this);
    if (a2 == 1)
    {
      if (*((_BYTE *)this + 80))
        return 0;
      *(_QWORD *)&v73 = this[7];
      BYTE8(v73) = *((_BYTE *)this + 64);
      v35 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v35 = off_1E327FAB0;
      *(_OWORD *)(v35 + 8) = v73;
      v36 = WebCore::s_platformStrategies;
      v37 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
      if (!v37)
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
        *(_QWORD *)(v36 + 16) = v37;
      }
      v38 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v37 + 104))(v37, (char *)this + 72, v35);
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      return v38 != 0;
    }
LABEL_9:
    *(_QWORD *)&v73 = this[7];
    BYTE8(v73) = *((_BYTE *)this + 64);
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v4 = off_1E327FAB0;
    *(_OWORD *)(v4 + 8) = v73;
    v73 = 0uLL;
    v5 = WebCore::s_platformStrategies;
    v6 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
    if (!v6)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
      *(_QWORD *)(v5 + 16) = v6;
    }
    (*(void (**)(uint64_t, __int128 *, char *, uint64_t))(*(_QWORD *)v6 + 40))(v6, &v73, (char *)this + 72, v4);
    MEMORY[0x19AEA5508](&v72, WebCore::WebArchivePboardType);
    if (HIDWORD(v73))
    {
      v8 = 0;
      while ((WTF::equal(*(WTF **)(v73 + 8 * v8), v72, v7) & 1) == 0)
      {
        if (++v8 >= (unint64_t)HIDWORD(v73))
          goto LABEL_15;
      }
      v3 = 1;
    }
    else
    {
LABEL_15:
      MEMORY[0x19AEA5508](&v71, objc_msgSend((id)*MEMORY[0x1E0CEC518], "identifier"));
      if (HIDWORD(v73))
      {
        v11 = 0;
        while ((WTF::equal(*(WTF **)(v73 + 8 * v11), v71, v10) & 1) == 0)
        {
          if (++v11 >= (unint64_t)HIDWORD(v73))
            goto LABEL_19;
        }
        v3 = 1;
      }
      else
      {
LABEL_19:
        MEMORY[0x19AEA5508](&v70, objc_msgSend((id)*MEMORY[0x1E0CEC658], "identifier"));
        if (HIDWORD(v73))
        {
          v13 = 0;
          while ((WTF::equal(*(WTF **)(v73 + 8 * v13), v70, v12) & 1) == 0)
          {
            if (++v13 >= (unint64_t)HIDWORD(v73))
              goto LABEL_23;
          }
          v3 = 1;
        }
        else
        {
LABEL_23:
          MEMORY[0x19AEA5508](&v69, objc_msgSend((id)*MEMORY[0x1E0CEC600], "identifier"));
          if (HIDWORD(v73))
          {
            v15 = 0;
            while ((WTF::equal(*(WTF **)(v73 + 8 * v15), v69, v14) & 1) == 0)
            {
              if (++v15 >= (unint64_t)HIDWORD(v73))
                goto LABEL_27;
            }
            v3 = 1;
          }
          else
          {
LABEL_27:
            MEMORY[0x19AEA5508](&v68, objc_msgSend((id)*MEMORY[0x1E0CEC570], "identifier"));
            if (HIDWORD(v73))
            {
              v17 = 0;
              while ((WTF::equal(*(WTF **)(v73 + 8 * v17), v68, v16) & 1) == 0)
              {
                if (++v17 >= (unint64_t)HIDWORD(v73))
                  goto LABEL_31;
              }
              v3 = 1;
            }
            else
            {
LABEL_31:
              MEMORY[0x19AEA5508](&v67, objc_msgSend((id)*MEMORY[0x1E0CEC618], "identifier"));
              if (HIDWORD(v73))
              {
                v19 = 0;
                while ((WTF::equal(*(WTF **)(v73 + 8 * v19), v67, v18) & 1) == 0)
                {
                  if (++v19 >= (unint64_t)HIDWORD(v73))
                    goto LABEL_35;
                }
                v3 = 1;
              }
              else
              {
LABEL_35:
                MEMORY[0x19AEA5508](&v66, objc_msgSend((id)*MEMORY[0x1E0CEC4E8], "identifier"));
                if (HIDWORD(v73))
                {
                  v21 = 0;
                  while ((WTF::equal(*(WTF **)(v73 + 8 * v21), v66, v20) & 1) == 0)
                  {
                    if (++v21 >= (unint64_t)HIDWORD(v73))
                      goto LABEL_39;
                  }
                  v3 = 1;
                }
                else
                {
LABEL_39:
                  MEMORY[0x19AEA5508](&v65, objc_msgSend((id)*MEMORY[0x1E0CEC5C0], "identifier"));
                  if (HIDWORD(v73))
                  {
                    v23 = 0;
                    while ((WTF::equal(*(WTF **)(v73 + 8 * v23), v65, v22) & 1) == 0)
                    {
                      if (++v23 >= (unint64_t)HIDWORD(v73))
                        goto LABEL_43;
                    }
                    v3 = 1;
                  }
                  else
                  {
LABEL_43:
                    MEMORY[0x19AEA5508](&v64, objc_msgSend((id)*MEMORY[0x1E0CEC630], "identifier"));
                    if (HIDWORD(v73))
                    {
                      v25 = 0;
                      while ((WTF::equal(*(WTF **)(v73 + 8 * v25), v64, v24) & 1) == 0)
                      {
                        if (++v25 >= (unint64_t)HIDWORD(v73))
                          goto LABEL_47;
                      }
                      v3 = 1;
                    }
                    else
                    {
LABEL_47:
                      MEMORY[0x19AEA5508](&v63, objc_msgSend((id)*MEMORY[0x1E0CEC610], "identifier"));
                      if (HIDWORD(v73))
                      {
                        v27 = 0;
                        while ((WTF::equal(*(WTF **)(v73 + 8 * v27), v63, v26) & 1) == 0)
                        {
                          if (++v27 >= (unint64_t)HIDWORD(v73))
                            goto LABEL_51;
                        }
                        v3 = 1;
                      }
                      else
                      {
LABEL_51:
                        MEMORY[0x19AEA5508](&v62, WebCore::UIColorPboardType);
                        if (HIDWORD(v73))
                        {
                          v29 = 0;
                          while ((WTF::equal(*(WTF **)(v73 + 8 * v29), v62, v28) & 1) == 0)
                          {
                            if (++v29 >= (unint64_t)HIDWORD(v73))
                              goto LABEL_55;
                          }
                          v3 = 1;
                        }
                        else
                        {
LABEL_55:
                          MEMORY[0x19AEA5508](&v61, objc_msgSend((id)*MEMORY[0x1E0CEC530], "identifier"));
                          if (HIDWORD(v73))
                          {
                            v31 = 0;
                            while ((WTF::equal(*(WTF **)(v73 + 8 * v31), v61, v30) & 1) == 0)
                            {
                              if (++v31 >= (unint64_t)HIDWORD(v73))
                                goto LABEL_59;
                            }
                            v3 = 1;
                          }
                          else
                          {
LABEL_59:
                            MEMORY[0x19AEA5508](&v60, objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier"));
                            if (HIDWORD(v73))
                            {
                              v33 = 0;
                              do
                              {
                                v3 = WTF::equal(*(WTF **)(v73 + 8 * v33), v60, v32);
                                if ((v3 & 1) != 0)
                                  break;
                                ++v33;
                              }
                              while (v33 < HIDWORD(v73));
                            }
                            else
                            {
                              v3 = 0;
                            }
                            v43 = v60;
                            v60 = 0;
                            if (v43)
                            {
                              if (*(_DWORD *)v43 == 2)
                                WTF::StringImpl::destroy(v43, v9);
                              else
                                *(_DWORD *)v43 -= 2;
                            }
                          }
                          v44 = v61;
                          v61 = 0;
                          if (v44)
                          {
                            if (*(_DWORD *)v44 == 2)
                              WTF::StringImpl::destroy(v44, v9);
                            else
                              *(_DWORD *)v44 -= 2;
                          }
                        }
                        v45 = v62;
                        v62 = 0;
                        if (v45)
                        {
                          if (*(_DWORD *)v45 == 2)
                            WTF::StringImpl::destroy(v45, v9);
                          else
                            *(_DWORD *)v45 -= 2;
                        }
                      }
                      v46 = v63;
                      v63 = 0;
                      if (v46)
                      {
                        if (*(_DWORD *)v46 == 2)
                          WTF::StringImpl::destroy(v46, v9);
                        else
                          *(_DWORD *)v46 -= 2;
                      }
                    }
                    v47 = v64;
                    v64 = 0;
                    if (v47)
                    {
                      if (*(_DWORD *)v47 == 2)
                        WTF::StringImpl::destroy(v47, v9);
                      else
                        *(_DWORD *)v47 -= 2;
                    }
                  }
                  v48 = v65;
                  v65 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, v9);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                }
                v49 = v66;
                v66 = 0;
                if (v49)
                {
                  if (*(_DWORD *)v49 == 2)
                    WTF::StringImpl::destroy(v49, v9);
                  else
                    *(_DWORD *)v49 -= 2;
                }
              }
              v50 = v67;
              v67 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v9);
                else
                  *(_DWORD *)v50 -= 2;
              }
            }
            v51 = v68;
            v68 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v9);
              else
                *(_DWORD *)v51 -= 2;
            }
          }
          v52 = v69;
          v69 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, v9);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        v53 = v70;
        v70 = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v9);
          else
            *(_DWORD *)v53 -= 2;
        }
      }
      v54 = v71;
      v71 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v9);
        else
          *(_DWORD *)v54 -= 2;
      }
    }
    v55 = v72;
    v72 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v9);
      else
        *(_DWORD *)v55 -= 2;
    }
    if (HIDWORD(v73))
    {
      v57 = (WTF::StringImpl **)v73;
      v58 = 8 * HIDWORD(v73);
      do
      {
        v59 = *v57;
        *v57 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v9);
          else
            *(_DWORD *)v59 -= 2;
        }
        ++v57;
        v58 -= 8;
      }
      while (v58);
    }
    v56 = (WTF *)v73;
    if ((_QWORD)v73)
    {
      *(_QWORD *)&v73 = 0;
      DWORD2(v73) = 0;
      WTF::fastFree(v56, v9);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return v3;
  }
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
    goto LABEL_9;
  }
  if (!byte_1ECE90A59 || *((_BYTE *)this + 80))
    goto LABEL_9;
  *(_QWORD *)&v73 = this[7];
  BYTE8(v73) = *((_BYTE *)this + 64);
  v39 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v39 = off_1E327FAB0;
  *(_OWORD *)(v39 + 8) = v73;
  v40 = WebCore::s_platformStrategies;
  v41 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v41)
  {
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v40 + 16) = v41;
  }
  v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v41 + 104))(v41, (char *)this + 72, v39);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  if (!v42)
    goto LABEL_9;
  return 1;
}

void sub_1950DC8BC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, WTF::StringImpl *a12, WTF::StringImpl *a13, WTF::StringImpl *a14, WTF::StringImpl *a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19)
{
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2)
      WTF::StringImpl::destroy(a12, a2);
    else
      *(_DWORD *)a12 -= 2;
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2)
      WTF::StringImpl::destroy(a13, a2);
    else
      *(_DWORD *)a13 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2)
      WTF::StringImpl::destroy(a16, a2);
    else
      *(_DWORD *)a16 -= 2;
  }
  if (a17)
  {
    if (*(_DWORD *)a17 == 2)
      WTF::StringImpl::destroy(a17, a2);
    else
      *(_DWORD *)a17 -= 2;
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2)
      WTF::StringImpl::destroy(a18, a2);
    else
      *(_DWORD *)a18 -= 2;
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2)
      WTF::StringImpl::destroy(a19, a2);
    else
      *(_DWORD *)a19 -= 2;
  }
  v22 = *(WTF::StringImpl **)(v20 - 72);
  *(_QWORD *)(v20 - 72) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(WTF::StringImpl **)(v20 - 64);
  *(_QWORD *)(v20 - 64) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(WTF::StringImpl **)(v20 - 56);
  *(_QWORD *)(v20 - 56) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = *(unsigned int *)(v20 - 36);
  if ((_DWORD)v25)
  {
    v27 = *(WTF::StringImpl ***)(v20 - 48);
    v28 = 8 * v25;
    do
    {
      v29 = *v27;
      *v27 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, a2);
        else
          *(_DWORD *)v29 -= 2;
      }
      ++v27;
      v28 -= 8;
    }
    while (v28);
  }
  v26 = *(WTF **)(v20 - 48);
  if (v26)
  {
    *(_QWORD *)(v20 - 48) = 0;
    *(_DWORD *)(v20 - 40) = 0;
    WTF::fastFree(v26, a2);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

uint64_t WebCore::DragData::asURL@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X2>, WTF::StringImpl **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16[2];

  v16[0] = *(WTF::StringImpl **)(a1 + 56);
  LOBYTE(v16[1]) = *(_BYTE *)(a1 + 64);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E327FAB0;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)v16;
  v16[0] = 0;
  v7 = WebCore::s_platformStrategies;
  v8 = *(_QWORD *)(WebCore::s_platformStrategies + 16);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 24))(WebCore::s_platformStrategies);
    *(_QWORD *)(v7 + 16) = v8;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v8 + 168))(&v15, v8, a1 + 72, v16, v6);
  if (a2)
  {
    v10 = v16[0];
    if (v16[0])
      *(_DWORD *)v16[0] += 2;
    v11 = *a2;
    *a2 = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = v15;
  if (v15)
  {
    if (*((_DWORD *)v15 + 1))
    {
      *a3 = v15;
    }
    else
    {
      *a3 = 0;
      v15 = 0;
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    *a3 = 0;
  }
  v13 = v16[0];
  v16[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void sub_1950DCD10(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v11;

  if (a11)
  {
    if (*(_DWORD *)a11 == 2)
      WTF::StringImpl::destroy(a11, a2);
    else
      *(_DWORD *)a11 -= 2;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

dispatch_object_t *WebCore::FileMonitor::FileMonitor(dispatch_object_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v9;
  int v10;
  dispatch_source_t v11;
  dispatch_object_t v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  void *v16;
  WTF *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD v22[4];
  int v23;
  WTF *v24;
  uint8_t buf[4];
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (*(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4) && *a4 != 0)
    {
      v9 = WTF::FileSystemImpl::openFile();
      v10 = v9;
      if (v9 == -1)
      {
        v14 = qword_1ECE7C8B0;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C8B0, OS_LOG_TYPE_ERROR))
        {
          WTF::String::utf8();
          v15 = v24 ? (char *)v24 + 16 : 0;
          *(_DWORD *)buf = 136315138;
          v26 = v15;
          _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "Failed to open statistics file for monitoring: %s", buf, 0xCu);
          v17 = v24;
          v24 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
              WTF::fastFree(v17, v16);
            else
              --*(_DWORD *)v17;
          }
        }
      }
      else
      {
        v11 = dispatch_source_create(MEMORY[0x1E0C80DE8], v9, 0x63uLL, *(dispatch_queue_t *)(*(_QWORD *)a3 + 16));
        v12 = *a1;
        *a1 = v11;
        if (v12)
        {

          v13 = *a1;
        }
        else
        {
          v13 = v11;
        }
        v18 = *a4;
        *a4 = 0;
        if (v13)
          v19 = v13;
        v20 = malloc_type_malloc(0x30uLL, 0x10E00408E6EE7F8uLL);
        *v20 = MEMORY[0x1E0C809A0];
        v20[1] = 50331650;
        v20[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0>(WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0)::{lambda(void *)#1}::__invoke;
        v20[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0>(WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0)::descriptor;
        v20[4] = v18;
        v20[5] = v13;
        dispatch_source_set_event_handler(v13, v20);
        _Block_release(v20);
        v21 = *a1;
        v22[0] = MEMORY[0x1E0C809B0];
        v22[1] = 3321888768;
        v22[2] = ___ZN7WebCore11FileMonitorC2ERKN3WTF6StringEONS1_3RefINS1_9WorkQueueENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEEONS1_8FunctionIFvNS0_14FileChangeTypeEEEE_block_invoke;
        v22[3] = &__block_descriptor_36_e8_32c176_ZTSKZN7WebCore11FileMonitorC1ERKN3WTF6StringEONS1_3RefINS1_9WorkQueueENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEEONS1_8FunctionIFvNS0_14FileChangeTypeEEEEE3__1_e5_v8__0l;
        v23 = v10;
        dispatch_source_set_cancel_handler(v21, v22);
        dispatch_resume(*a1);
      }
    }
  }
  return a1;
}

void sub_1950DCF88(_Unwind_Exception *exception_object)
{
  id *v1;

  if (*v1)

  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7WebCore11FileMonitorC2ERKN3WTF6StringEONS1_3RefINS1_9WorkQueueENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEEONS1_8FunctionIFvNS0_14FileChangeTypeEEEE_block_invoke(uint64_t a1, int *a2)
{
  return WTF::FileSystemImpl::closeFile((WTF::FileSystemImpl *)(a1 + 32), a2);
}

uint64_t __copy_helper_block_e8_32c176_ZTSKZN7WebCore11FileMonitorC1ERKN3WTF6StringEONS1_3RefINS1_9WorkQueueENS1_12RawPtrTraitsIS6_EENS1_21DefaultRefDerefTraitsIS6_EEEEONS1_8FunctionIFvNS0_14FileChangeTypeEEEEE3__1(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

void WebCore::FileMonitor::~FileMonitor(id *this)
{
  NSObject *v2;

  v2 = *this;
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*this)

  }
}

{
  NSObject *v2;

  v2 = *this;
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*this)

  }
}

uint64_t WebCore::keyForCharCode@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  if ((int)this > 126)
  {
    switch((int)this)
    {
      case 63232:
      case 63233:
      case 63234:
      case 63235:
      case 63236:
      case 63237:
      case 63238:
      case 63239:
      case 63240:
      case 63241:
      case 63242:
      case 63243:
      case 63244:
      case 63245:
      case 63246:
      case 63247:
      case 63248:
      case 63249:
      case 63250:
      case 63251:
      case 63252:
      case 63253:
      case 63254:
      case 63255:
      case 63256:
      case 63257:
      case 63258:
      case 63259:
      case 63260:
      case 63261:
      case 63262:
      case 63263:
      case 63264:
      case 63265:
      case 63266:
      case 63267:
      case 63268:
      case 63269:
      case 63270:
      case 63271:
      case 63272:
      case 63273:
      case 63274:
      case 63275:
      case 63276:
      case 63277:
      case 63278:
      case 63279:
      case 63280:
      case 63281:
      case 63282:
      case 63283:
      case 63284:
      case 63285:
      case 63286:
      case 63287:
      case 63288:
      case 63289:
      case 63290:
      case 63291:
      case 63292:
      case 63293:
      case 63294:
      case 63295:
      case 63296:
      case 63297:
      case 63298:
      case 63299:
      case 63300:
      case 63301:
      case 63302:
      case 63303:
        goto LABEL_13;
      default:
        if (((_DWORD)this - 8232) < 2 || (_DWORD)this == 127)
          goto LABEL_13;
        return WTF::String::String();
    }
  }
  switch((int)this)
  {
    case 3:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_13;
    case 4:
    case 5:
    case 6:
    case 7:
    case 11:
      return WTF::String::String();
    default:
      if ((_DWORD)this != 25 && (_DWORD)this != 27)
        return WTF::String::String();
LABEL_13:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *a2 = v4;
      return result;
  }
}

uint64_t WebCore::keyIdentifierForCharCode@<X0>(WebCore *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v4;
  _QWORD v5[2];
  _BYTE v6[16];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((int)this > 24)
  {
    switch((int)this)
    {
      case 63232:
      case 63233:
      case 63234:
      case 63235:
      case 63236:
      case 63237:
      case 63238:
      case 63239:
      case 63240:
      case 63241:
      case 63242:
      case 63243:
      case 63244:
      case 63245:
      case 63246:
      case 63247:
      case 63248:
      case 63249:
      case 63250:
      case 63251:
      case 63252:
      case 63253:
      case 63254:
      case 63255:
      case 63256:
      case 63257:
      case 63258:
      case 63259:
      case 63260:
      case 63261:
      case 63262:
      case 63263:
      case 63264:
      case 63265:
      case 63266:
      case 63267:
      case 63268:
      case 63269:
      case 63270:
      case 63271:
      case 63272:
      case 63273:
      case 63275:
      case 63276:
      case 63277:
      case 63278:
      case 63279:
      case 63280:
      case 63284:
      case 63285:
      case 63289:
      case 63297:
      case 63298:
      case 63299:
      case 63301:
      case 63302:
      case 63303:
        goto LABEL_6;
      case 63274:
      case 63281:
      case 63282:
      case 63283:
      case 63286:
      case 63287:
      case 63288:
      case 63290:
      case 63291:
      case 63292:
      case 63293:
      case 63294:
      case 63295:
      case 63296:
      case 63300:
        goto LABEL_10;
      default:
        if ((_DWORD)this != 25 && (_DWORD)this != 127)
          goto LABEL_10;
        goto LABEL_6;
    }
  }
  if ((_DWORD)this == 3 || (_DWORD)this == 10 || (_DWORD)this == 13)
  {
LABEL_6:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *a2 = v5[0];
  }
  else
  {
LABEL_10:
    WTF::Internal::appendHex();
    v7 = v4;
    v5[0] = "U+";
    v5[1] = 3;
    result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::HexNumberBuffer>((uint64_t)v5, (uint64_t)v6, a2);
    if (!*a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1950DD5B0);
    }
  }
  return result;
}

void WebCore::copyImageUnknownFileLabel(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("unknown"), a1);
}

uint64_t WebCore::contextMenuItemTagAddHighlightToCurrentQuickNote@<X0>(uint64_t a1@<X8>)
{
  CFTypeRef v3;
  CFTypeRef arg;

  WebCore::copyLocalizedString(CFSTR("Add to Quick Note"), (CFStringRef *)&arg);
  if (arg)
  {
    CFAutorelease(arg);
    v3 = arg;
  }
  else
  {
    v3 = 0;
  }
  return MEMORY[0x19AEA5508](a1, v3);
}

void sub_1950DDC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::contextMenuItemTagAddHighlightToNewQuickNote@<X0>(uint64_t a1@<X8>)
{
  CFTypeRef v3;
  CFTypeRef arg;

  WebCore::copyLocalizedString(CFSTR("New Quick Note"), (CFStringRef *)&arg);
  if (arg)
  {
    CFAutorelease(arg);
    v3 = arg;
  }
  else
  {
    v3 = 0;
  }
  return MEMORY[0x19AEA5508](a1, v3);
}

void sub_1950DDD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::AXMeterGaugeRegionOptimumText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("optimal value"), a1);
}

void WebCore::AXMeterGaugeRegionSuboptimalText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("suboptimal value"), a1);
}

void WebCore::AXMeterGaugeRegionLessGoodText(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("critical value"), a1);
}

void WebCore::htmlSelectMultipleItems(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v2;

  if (this == (WebCore *)1)
  {
    v2 = CFSTR("1 Item");
    goto LABEL_4;
  }
  if (!this)
  {
    v2 = CFSTR("0 Items");
LABEL_4:
    WebCore::localizedString(v2, a2);
    return;
  }
  WebCore::formatLocalizedString(CFSTR("%zu Items"), a2, this);
}

void WebCore::formControlDoneButtonTitle(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Done"), a1);
}

void WebCore::validationMessageTooLongText(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WebCore::formatLocalizedString(CFSTR("Use no more than %d character(s)"), a2, a1);
}

void WebCore::contextMenuItemTagLookUpImage(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Look Up"), a1);
}

void WebCore::contextMenuItemTagCopySubject(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Copy Subject"), a1);
}

void WebCore::contextMenuItemTitleRemoveBackground(uint64_t a1@<X8>)
{
  WebCore::localizedString(CFSTR("Remove Background"), a1);
}

void sub_1950DDEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void WebCore::LowPowerModeNotifier::~LowPowerModeNotifier(id *this)
{
  id v2;
  id v3;

  objc_msgSend(*this, "setNotifier:", 0);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 8))(v2);
  v3 = *this;
  *this = 0;
  if (v3)
    CFRelease(v3);
}

{
  id v2;
  id v3;

  objc_msgSend(*this, "setNotifier:", 0);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 8))(v2);
  v3 = *this;
  *this = 0;
  if (v3)
    CFRelease(v3);
}

void sub_1950DDFA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void sub_1950DE030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  if (v4)
    CFRelease(v4);
  _Unwind_Resume(exception_object);
}

void WebCore::MIMETypeRegistry::mimeTypeForExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  const WTF::String *v5;
  _BOOL8 v6;
  const WTF::String *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  CFTypeRef cf;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v31 = a1;
  *((_QWORD *)&v31 + 1) = a2;
  WTF::StringView::createNSStringWithoutCopying((WTF::StringView *)&v31);
  v4 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB39C0], "sharedMappings"), "MIMETypeForExtension:", cf);
  if (objc_msgSend(v4, "length"))
  {
    MEMORY[0x19AEA5508](a3, v4);
    goto LABEL_26;
  }
  WebCore::additionalMimeTypesMap(0, v5);
  v8 = qword_1ECE81700;
  if (!qword_1ECE81700)
    goto LABEL_19;
  v9 = -1640531527;
  if ((*((_QWORD *)&v31 + 1) & 0xFF00000000) != 0)
  {
    if (DWORD2(v31) >= 2uLL)
    {
      v10 = 0;
      do
      {
        v11 = v9 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v31 + v10));
        v12 = (v11 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v31 + v10 + 1)) << 11) ^ v11;
        v9 = v12 + (v12 >> 11);
        v13 = v10 + 3;
        v10 += 2;
      }
      while (v13 < DWORD2(v31));
    }
    if ((BYTE8(v31) & 1) == 0)
      goto LABEL_11;
    v14 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(DWORD2(v31) + (_QWORD)v31 - 1));
  }
  else
  {
    if (DWORD2(v31) >= 2uLL)
    {
      v24 = 0;
      do
      {
        v25 = (unsigned __int16 *)(v31 + 2 * v24);
        v26 = *v25 | (32 * (*v25 - 65 < 0x1A));
        v27 = (((v25[1] - 65 < 0x1A) << 16) | (v25[1] << 11)) ^ ((v9 + v26) << 16) ^ (v9 + v26);
        v9 = v27 + (v27 >> 11);
        v28 = v24 + 3;
        v24 += 2;
      }
      while (v28 < DWORD2(v31));
    }
    if ((BYTE8(v31) & 1) == 0)
      goto LABEL_11;
    v29 = *(unsigned __int16 *)(v31 + 2 * DWORD2(v31) - 2);
    v14 = v29 | (32 * ((v29 - 65) < 0x1A));
  }
  v9 = ((v9 + v14) ^ ((v9 + v14) << 11)) + (((v9 + v14) ^ ((v9 + v14) << 11)) >> 17);
LABEL_11:
  v15 = 0;
  v16 = *(_DWORD *)(qword_1ECE81700 - 8);
  v17 = (v9 ^ (8 * v9)) + ((v9 ^ (8 * v9)) >> 5);
  v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
  v19 = (v18 ^ (v18 << 10)) & 0xFFFFFF;
  if (!v19)
    v19 = 0x800000;
  while (1)
  {
    v20 = v19 & v16;
    v21 = (_QWORD *)(v8 + 16 * (v19 & v16));
    if (*v21 == -1)
      goto LABEL_16;
    if (!*v21)
      break;
    v32 = v31;
    v6 = WTF::equalIgnoringASCIICaseCommon<WTF::String,WTF::StringView>((uint64_t *)(v8 + 16 * v20), (unsigned __int8 **)&v32);
    if (v6)
      goto LABEL_20;
LABEL_16:
    v19 = ++v15 + v20;
  }
  if (qword_1ECE81700)
  {
    v21 = (_QWORD *)(qword_1ECE81700 + 16 * *(unsigned int *)(qword_1ECE81700 - 4));
    goto LABEL_20;
  }
LABEL_19:
  v21 = 0;
LABEL_20:
  WebCore::additionalMimeTypesMap((WebCore *)v6, v7);
  v22 = qword_1ECE81700;
  if (qword_1ECE81700)
    v22 = qword_1ECE81700 + 16 * *(unsigned int *)(qword_1ECE81700 - 4);
  if ((_QWORD *)v22 == v21)
  {
    v23 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
LABEL_24:
      *v23 += 2;
  }
  else
  {
    v23 = (_DWORD *)v21[1];
    if (v23)
      goto LABEL_24;
  }
  *a3 = v23;
LABEL_26:
  if (cf)
    CFRelease(cf);
}

void sub_1950DE2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void WebCore::additionalMimeTypesMap(WebCore *this, const WTF::String *a2)
{
  char **v2;
  WTF::StringImpl *v3;
  char *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;

  if ((_MergedGlobals_118 & 1) == 0)
  {
    v23 = 0;
    v2 = &WebCore::additionalMimeTypesMap(void)::$_0::operator() const(void)::additionalTypes;
    v3 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
    while (1)
    {
      v4 = v2[3];
      if (v4)
      {
        a2 = (const WTF::String *)(v4 - 1);
        if (v4 == (char *)1)
        {
          *(_DWORD *)v3 += 2;
          v5 = v3;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v5 = v25;
        }
        v24 = v5;
      }
      else
      {
        v24 = 0;
      }
      v6 = v23;
      if (v23
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v23, 0), (v6 = v23) != 0))
      {
        v7 = *(_DWORD *)(v6 - 8);
      }
      else
      {
        v7 = 0;
      }
      v8 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v24, a2);
      v9 = 0;
      for (i = 1; ; ++i)
      {
        v11 = v8 & v7;
        v12 = (uint64_t *)(v6 + 16 * (v8 & v7));
        if (*v12 == -1)
        {
          v9 = (WTF::StringImpl **)(v6 + 16 * v11);
          goto LABEL_16;
        }
        if (!*v12)
          break;
        if (WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v12, (uint64_t *)&v24))
        {
          goto LABEL_35;
        }
LABEL_16:
        v8 = i + v11;
      }
      v22 = (WTF::StringImpl **)(v6 + 16 * v11);
      if (v9)
      {
        *v9 = 0;
        v9[1] = 0;
        --*(_DWORD *)(v23 - 16);
        v22 = v9;
      }
      v13 = v24;
      v24 = 0;
      v14 = *v22;
      *v22 = v13;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v2[1];
      if (v15)
      {
        a2 = (const WTF::String *)(v15 - 1);
        if (v15 == (char *)1)
        {
          *(_DWORD *)v3 += 2;
          v15 = (char *)v3;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v15 = (char *)v25;
        }
      }
      v16 = v22[1];
      v22[1] = (WTF::StringImpl *)v15;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v23)
        v17 = *(_DWORD *)(v23 - 12) + 1;
      else
        v17 = 1;
      *(_DWORD *)(v23 - 12) = v17;
      if (v23)
        v18 = *(_DWORD *)(v23 - 12);
      else
        v18 = 0;
      v19 = (*(_DWORD *)(v23 - 16) + v18);
      v20 = *(unsigned int *)(v23 - 4);
      if (v20 > 0x400)
      {
        if (v20 <= 2 * v19)
LABEL_34:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(&v23, v22);
      }
      else if (3 * v20 <= 4 * v19)
      {
        goto LABEL_34;
      }
LABEL_35:
      v21 = v24;
      v24 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, a2);
        else
          *(_DWORD *)v21 -= 2;
      }
      v2 += 4;
      {
        qword_1ECE81700 = v23;
        _MergedGlobals_118 = 1;
        return;
      }
    }
  }
}

void sub_1950DE564(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  if (a10)
  {
    v12 = *(unsigned int *)(a10 - 4);
    if ((_DWORD)v12)
    {
      v13 = a10;
      do
      {
        v14 = *(WTF::StringImpl **)v13;
        if (*(_QWORD *)v13 != -1)
        {
          v15 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy(v15, a2);
              v14 = *(WTF::StringImpl **)v13;
            }
            else
            {
              *(_DWORD *)v15 -= 2;
            }
          }
          *(_QWORD *)v13 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, a2);
            else
              *(_DWORD *)v14 -= 2;
          }
        }
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree((WTF *)(a10 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MIMETypeRegistry::extensionsForMIMEType(WebCore::MIMETypeRegistry *this@<X0>, uint64_t a2@<X8>)
{
  WebCore *v5;
  WTF *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  void *v14;
  const __CFString *v15;
  void *v16;
  const WTF::String *v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::String *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *i;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD **v45;
  _DWORD *v46;

  if (!*(_QWORD *)this)
    goto LABEL_51;
  v5 = (WebCore *)WTF::StringImpl::endsWith();
  if (!(_DWORD)v5)
  {
    v14 = (void *)objc_msgSend(MEMORY[0x1E0CB39C0], "sharedMappings");
    if (*(_QWORD *)this)
      v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
    else
      v15 = &stru_1E3487BC0;
    v16 = (void *)objc_msgSend(v14, "extensionsForMIMEType:", v15);
    if (objc_msgSend(v16, "count"))
    {
      WTF::makeVector<WTF::String>(v16, a2);
      return;
    }
    WebCore::additionalExtensionsMap(0, v17);
    v21 = qword_1ECE81710;
    if (!qword_1ECE81710)
      goto LABEL_39;
    v22 = *(_DWORD *)(qword_1ECE81710 - 8);
    v23 = WTF::ASCIICaseInsensitiveHash::hash(this, v20);
    v24 = 0;
    v25 = *(_QWORD *)this;
    while (1)
    {
      v26 = v23 & v22;
      v27 = v21 + 24 * (v23 & v22);
      v19 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 != -1)
      {
        if (!v19)
        {
          if (qword_1ECE81710)
          {
            v27 = qword_1ECE81710 + 24 * *(unsigned int *)(qword_1ECE81710 - 4);
            goto LABEL_40;
          }
LABEL_39:
          v27 = 0;
LABEL_40:
          WebCore::additionalExtensionsMap((WebCore *)v19, v20);
          v34 = qword_1ECE81710;
          if (qword_1ECE81710)
            v34 = qword_1ECE81710 + 24 * *(unsigned int *)(qword_1ECE81710 - 4);
          if (v34 != v27)
          {
            v35 = *(unsigned int *)(v27 + 20);
            *(_QWORD *)a2 = 0;
            *(_QWORD *)(a2 + 8) = 0;
            *(_DWORD *)(a2 + 12) = v35;
            if ((_DWORD)v35)
            {
              if (v35 >> 29)
              {
                __break(0xC471u);
              }
              else
              {
                v36 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v35));
                *(_DWORD *)(a2 + 8) = v35;
                *(_QWORD *)a2 = v36;
                v37 = *(unsigned int *)(v27 + 20);
                if ((_DWORD)v37)
                {
                  v38 = *(_DWORD ***)(v27 + 8);
                  v39 = 8 * v37;
                  do
                  {
                    v40 = *v38;
                    if (*v38)
                      *v40 += 2;
                    *v36++ = v40;
                    ++v38;
                    v39 -= 8;
                  }
                  while (v39);
                }
              }
            }
            return;
          }
LABEL_51:
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          return;
        }
        v19 = WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v19, v25);
        if ((v19 & 1) != 0)
          goto LABEL_40;
      }
      v23 = ++v24 + v26;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  WebCore::extensionsForMIMETypeMap(v5);
  v8 = qword_1ECE81708;
  v9 = dword_1ECE816F0;
  if (qword_1ECE81708)
  {
    v10 = dword_1ECE816F0 - 1;
    v11 = dword_1ECE816F8;
    v12 = *(_DWORD *)(*(_QWORD *)this + 16);
    if (v12 < 0x100)
    {
      v13 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)this);
      v8 = qword_1ECE81708;
    }
    else
    {
      v13 = v12 >> 8;
    }
    v28 = (v13 ^ v11) & v10;
    v18 = v8 + 32 * v28;
    v6 = *(WTF **)v18;
    if (*(_QWORD *)v18)
    {
      v29 = -1;
      while (1)
      {
        v30 = *((_DWORD *)v6 + 4);
        v6 = v30 < 0x100 ? (WTF *)WTF::StringImpl::hashSlowCase(v6) : (WTF *)(v30 >> 8);
        if (++v29 > (((_DWORD)v28 + v9 - ((v6 ^ v11) & v10)) & v10))
          break;
        if ((_DWORD)v6 == v13)
        {
          v6 = (WTF *)WTF::equal(*(WTF **)v18, *(const WTF::StringImpl **)this, v7);
          if ((v6 & 1) != 0)
            goto LABEL_30;
        }
        v8 = qword_1ECE81708;
        v28 = ((_DWORD)v28 + 1) & v10;
        v18 = qword_1ECE81708 + 32 * v28;
        v6 = *(WTF **)v18;
        if (!*(_QWORD *)v18)
          goto LABEL_29;
      }
      v8 = qword_1ECE81708;
    }
LABEL_29:
    v18 = v8 + 32 * dword_1ECE816F0;
  }
  else
  {
    v18 = 32 * dword_1ECE816F0;
  }
LABEL_30:
  WebCore::extensionsForMIMETypeMap(v6);
  if (qword_1ECE81708 + 32 * dword_1ECE816F0 != v18 && *(_DWORD *)(v18 + 20))
  {
    v31 = *(unsigned int *)(v18 + 16);
    if ((_DWORD)v31)
    {
      v32 = 8 * v31;
      for (i = *(_QWORD **)(v18 + 8); !*i; ++i)
      {
        v32 -= 8;
        if (!v32)
          return;
      }
    }
    else
    {
      i = *(_QWORD **)(v18 + 8);
    }
    v41 = *(_QWORD *)(v18 + 8) + 8 * v31;
    if (i != (_QWORD *)v41)
    {
      v42 = 0;
      LODWORD(v43) = 0;
LABEL_56:
      if ((_DWORD)v43 == *(_DWORD *)(a2 + 8))
      {
        v45 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v43 + 1, (unint64_t)i);
        v43 = *(unsigned int *)(a2 + 12);
        v42 = *(_QWORD *)a2;
        v46 = *v45;
        if (*v45)
          *v46 += 2;
        *(_QWORD *)(v42 + 8 * v43) = v46;
      }
      else
      {
        v44 = (_DWORD *)*i;
        if (*i)
          *v44 += 2;
        *(_QWORD *)(v42 + 8 * v43) = v44;
      }
      LODWORD(v43) = v43 + 1;
      *(_DWORD *)(a2 + 12) = v43;
      while (++i != (_QWORD *)v41)
      {
        if (*i)
        {
          if (i != (_QWORD *)v41)
            goto LABEL_56;
          return;
        }
      }
    }
  }
}

void sub_1950DE9BC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v4 = *(unsigned int *)(v2 + 12);
  v5 = *(WTF **)v2;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    do
    {
      v7 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 = (WTF *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
    v5 = *(WTF **)v2;
    if (!*(_QWORD *)v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v5)
  {
    goto LABEL_3;
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  WTF::fastFree(v5, a2);
  goto LABEL_3;
}

unsigned int *WTF::makeVector<WTF::String>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *result;
  int v5;
  uint64_t v6;
  objc_object *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unsigned __int8 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = (unsigned int *)objc_msgSend(a1, "count");
  v5 = (int)result;
  if (!result)
    goto LABEL_4;
  if (!((unint64_t)result >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * (_QWORD)result));
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)a2 = v6;
LABEL_4:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (!v8)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (WTF::StringImpl *)*(unsigned int *)(a2 + 12));
    v9 = *(_QWORD *)v24;
    while (1)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v24 != v9)
          objc_enumerationMutation(a1);
        WTF::makeVectorElement(0, *(const WTF::String **)(*((_QWORD *)&v23 + 1) + 8 * v10), v7);
        if (v22)
        {
          v12 = *(unsigned int *)(a2 + 12);
          if ((_DWORD)v12 == *(_DWORD *)(a2 + 8))
          {
            v16 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v12 + 1, (unint64_t)&v21);
            v17 = *(unsigned int *)(a2 + 12);
            v18 = *(_QWORD *)a2;
            v19 = *v16;
            *v16 = 0;
            *(_QWORD *)(v18 + 8 * v17) = v19;
            LODWORD(v18) = v22;
            *(_DWORD *)(a2 + 12) = v17 + 1;
            if (!(_DWORD)v18)
              goto LABEL_15;
          }
          else
          {
            v13 = *(_QWORD *)a2;
            v14 = v21;
            v21 = 0;
            *(_QWORD *)(v13 + 8 * v12) = v14;
            *(_DWORD *)(a2 + 12) = v12 + 1;
          }
          v15 = v21;
          v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v11);
            else
              *(_DWORD *)v15 -= 2;
          }
        }
LABEL_15:
        ++v10;
      }
      while (v8 != v10);
      v20 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      v8 = v20;
      if (!v20)
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a2, (WTF::StringImpl *)*(unsigned int *)(a2 + 12));
    }
  }
  __break(0xC471u);
  return result;
}

void sub_1950DEBE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10)
{
  uint64_t v10;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF::StringImpl *v15;

  v12 = *(unsigned int *)(v10 + 12);
  v13 = *(WTF **)v10;
  if ((_DWORD)v12)
  {
    v14 = 8 * v12;
    do
    {
      v15 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v13 = (WTF *)((char *)v13 + 8);
      v14 -= 8;
    }
    while (v14);
    v13 = *(WTF **)v10;
    if (!*(_QWORD *)v10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = 0;
  WTF::fastFree(v13, a2);
  goto LABEL_3;
}

void WebCore::additionalExtensionsMap(WebCore *this, const WTF::String *a2)
{
  const WTF::String *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  int v11;
  WTF::StringImpl **v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int16 *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  char *v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  char *v38;
  int v39;
  int v40;
  BOOL v41;
  WTF::StringImpl *v42;
  WTF::StringImpl ***v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _QWORD *v58;
  _DWORD **v59;
  WTF::StringImpl *v60;
  _DWORD *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  _QWORD *v64;
  uint64_t v65;

  if ((byte_1ECE816EA & 1) != 0)
    return;
  v65 = 0;
  WebCore::additionalMimeTypesMap(this, a2);
  if (qword_1ECE81700)
  {
    v3 = *(unsigned int *)(qword_1ECE81700 - 4);
    v4 = qword_1ECE81700 + 16 * v3;
    if (*(_DWORD *)(qword_1ECE81700 - 12))
    {
      v64 = (_QWORD *)qword_1ECE81700;
      if ((_DWORD)v3)
      {
        v5 = 16 * v3;
        v64 = (_QWORD *)qword_1ECE81700;
        while ((unint64_t)(*v64 + 1) <= 1)
        {
          v64 += 2;
          v5 -= 16;
          if (!v5)
          {
            v64 = (_QWORD *)v4;
            goto LABEL_11;
          }
        }
      }
      goto LABEL_11;
    }
    v64 = (_QWORD *)(qword_1ECE81700 + 16 * v3);
  }
  else
  {
    v64 = 0;
    v3 = 0;
  }
  v4 = qword_1ECE81700 + 16 * v3;
LABEL_11:
  if (qword_1ECE81700)
    v6 = qword_1ECE81700 + 16 * *(unsigned int *)(qword_1ECE81700 - 4);
  else
    v6 = 0;
  if ((_QWORD *)v6 != v64)
  {
    v7 = MEMORY[0x1E0CBF868];
    while (1)
    {
      v8 = v65;
      if (v65
        || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v65, 8u, 0), (v8 = v65) != 0))
      {
        v9 = *(_DWORD *)(v8 - 8);
      }
      else
      {
        v9 = 0;
      }
      v10 = (WTF::StringImpl **)(v64 + 1);
      v11 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)(v64 + 1), v2);
      v12 = 0;
      v13 = 0;
      v14 = v64 + 1;
      v15 = v8;
      v16 = v9;
      while (1)
      {
        v17 = v11 & v16;
        v18 = *(_QWORD *)(v15 + 24 * (v11 & v16));
        if (v18 == -1)
        {
          v12 = (WTF::StringImpl **)(v15 + 24 * v17);
          goto LABEL_31;
        }
        if (!v18)
        {
          v63 = (WTF::StringImpl **)(v15 + 24 * v17);
          if (v12)
          {
            v12[1] = 0;
            v12[2] = 0;
            *v12 = 0;
            --*(_DWORD *)(v65 - 16);
            v63 = v12;
          }
          v42 = *v10;
          if (*v10)
            *(_DWORD *)v42 += 2;
          *v63 = v42;
          v43 = (WTF::StringImpl ***)(v63 + 1);
          v44 = *((unsigned int *)v63 + 5);
          if ((_DWORD)v44)
          {
            v51 = *v43;
            v52 = 8 * v44;
            do
            {
              v53 = *v51;
              *v51 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, v2);
                else
                  *(_DWORD *)v53 -= 2;
              }
              ++v51;
              v52 -= 8;
            }
            while (v52);
          }
          v45 = (WTF *)*v43;
          if (*v43)
          {
            v63[1] = 0;
            *((_DWORD *)v63 + 4) = 0;
            WTF::fastFree(v45, v2);
          }
          *v43 = 0;
          v63[2] = 0;
          if (v65)
            v46 = *(_DWORD *)(v65 - 12) + 1;
          else
            v46 = 1;
          *(_DWORD *)(v65 - 12) = v46;
          if (v65)
            v47 = *(_DWORD *)(v65 - 12);
          else
            v47 = 0;
          v48 = (*(_DWORD *)(v65 - 16) + v47);
          v49 = *(unsigned int *)(v65 - 4);
          if (v49 > 0x400)
          {
            if (v49 > 2 * v48)
              goto LABEL_80;
LABEL_70:
            v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v65 - 12) >= (2 * v49));
          }
          else
          {
            if (3 * v49 > 4 * v48)
              goto LABEL_80;
            if ((_DWORD)v49)
              goto LABEL_70;
            v50 = 8;
          }
          v63 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v65, v50, v63);
          goto LABEL_80;
        }
        v19 = *v14;
        v20 = *(unsigned int *)(v18 + 4);
        v2 = (const WTF::String *)*(unsigned int *)(*v14 + 4);
        if ((_DWORD)v20 == (_DWORD)v2)
          break;
LABEL_31:
        ++v13;
        v11 = v17 + v13;
      }
      v63 = (WTF::StringImpl **)(v15 + 24 * v17);
      v21 = *(_DWORD *)(v19 + 16);
      v22 = *(unsigned __int8 **)(v18 + 8);
      v23 = *(unsigned __int16 **)(v19 + 8);
      if ((*(_BYTE *)(v18 + 16) & 4) == 0)
        break;
      if ((v21 & 4) == 0)
      {
        if (!(_DWORD)v20)
          goto LABEL_80;
        if ((*v23 | (32 * (*v23 - 65 < 0x1A))) == *(unsigned __int8 *)(v7 + *v22))
        {
          v24 = 0;
          v29 = v22 + 1;
          v30 = v23 + 1;
          while (v20 - 1 != v24)
          {
            v31 = *(unsigned __int8 *)(v7 + v29[v24]);
            v32 = v30[v24++];
            if ((v32 | (32 * ((v32 - 65) < 0x1A))) != v31)
              goto LABEL_50;
          }
          goto LABEL_80;
        }
        goto LABEL_53;
      }
      if (!(_DWORD)v20)
        goto LABEL_80;
      if (*(unsigned __int8 *)(v7 + *v22) != *(unsigned __int8 *)(v7 + *(unsigned __int8 *)v23))
        goto LABEL_53;
      v24 = 0;
      v37 = v22 + 1;
      v38 = (char *)v23 + 1;
      while (v20 - 1 != v24)
      {
        v39 = *(unsigned __int8 *)(v7 + v37[v24]);
        v40 = *(unsigned __int8 *)(v7 + v38[v24++]);
        if (v39 != v40)
        {
LABEL_50:
          v41 = v24 >= v20;
          v14 = v64 + 1;
          v15 = v8;
          v16 = v9;
          if (v41)
            break;
          goto LABEL_31;
        }
      }
LABEL_80:
      v54 = (uint64_t *)(v63 + 1);
      v55 = *((unsigned int *)v63 + 5);
      if ((_DWORD)v55 == *((_DWORD *)v63 + 4))
      {
        v59 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)v64);
        v55 = *((unsigned int *)v63 + 5);
        v60 = v63[1];
        v61 = *v59;
        if (*v59)
          *v61 += 2;
        *((_QWORD *)v60 + v55) = v61;
      }
      else
      {
        v56 = *v54;
        v57 = (_DWORD *)*v64;
        if (*v64)
          *v57 += 2;
        *(_QWORD *)(v56 + 8 * v55) = v57;
      }
      *((_DWORD *)v63 + 5) = v55 + 1;
      v58 = v64 + 2;
      v64 = (_QWORD *)v4;
      if (v58 != (_QWORD *)v4)
      {
        while ((unint64_t)(*v58 + 1) <= 1)
        {
          v58 += 2;
          if (v58 == (_QWORD *)v4)
          {
            v64 = (_QWORD *)v4;
            goto LABEL_89;
          }
        }
        v64 = v58;
      }
LABEL_89:
      if (v64 == (_QWORD *)v6)
      {
        v62 = v65;
        goto LABEL_98;
      }
    }
    if ((v21 & 4) != 0)
    {
      if (!(_DWORD)v20)
        goto LABEL_80;
      if ((*(unsigned __int16 *)v22 | (32 * (*(unsigned __int16 *)v22 - 65 < 0x1A))) == *(unsigned __int8 *)(v7 + *(unsigned __int8 *)v23))
      {
        v24 = 0;
        v33 = v22 + 2;
        v34 = (char *)v23 + 1;
        while (v20 - 1 != v24)
        {
          v35 = *(unsigned __int16 *)&v33[2 * v24] | (32 * (*(unsigned __int16 *)&v33[2 * v24] - 65 < 0x1A));
          v36 = *(unsigned __int8 *)(v7 + v34[v24++]);
          if (v35 != v36)
            goto LABEL_50;
        }
        goto LABEL_80;
      }
    }
    else
    {
      if (!(_DWORD)v20)
        goto LABEL_80;
      if ((*(unsigned __int16 *)v22 | (32 * (*(unsigned __int16 *)v22 - 65 < 0x1A))) == (*v23 | (32 * (*v23 - 65 < 0x1A))))
      {
        v24 = 0;
        v25 = v22 + 2;
        v26 = v23 + 1;
        while (v20 - 1 != v24)
        {
          v27 = *(unsigned __int16 *)&v25[2 * v24] | (32 * (*(unsigned __int16 *)&v25[2 * v24] - 65 < 0x1A));
          v28 = v26[v24++];
          if (v27 != (v28 | (32 * ((v28 - 65) < 0x1A))))
            goto LABEL_50;
        }
        goto LABEL_80;
      }
    }
LABEL_53:
    v14 = v64 + 1;
    v15 = v8;
    v16 = v9;
    goto LABEL_31;
  }
  v62 = 0;
LABEL_98:
  qword_1ECE81710 = v62;
  byte_1ECE816EA = 1;
}

void sub_1950DF254(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t i;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if (a12)
  {
    v13 = *(unsigned int *)(a12 - 4);
    if ((_DWORD)v13)
    {
      for (i = 0; i != v13; ++i)
      {
        v15 = (WTF::StringImpl **)(a12 + 24 * i);
        if (*v15 != (WTF::StringImpl *)-1)
        {
          v16 = a12 + 24 * i;
          v17 = (WTF::StringImpl ***)(v16 + 8);
          v18 = *(unsigned int *)(v16 + 20);
          if ((_DWORD)v18)
          {
            v21 = *v17;
            v22 = 8 * v18;
            do
            {
              v23 = *v21;
              *v21 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, a2);
                else
                  *(_DWORD *)v23 -= 2;
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
          v19 = (WTF *)*v17;
          if (*v17)
          {
            *v17 = 0;
            *(_DWORD *)(a12 + 24 * i + 16) = 0;
            WTF::fastFree(v19, a2);
          }
          v20 = *v15;
          *v15 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, a2);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
    }
    WTF::fastFree((WTF *)(a12 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

void WebCore::MIMETypeRegistry::preferredExtensionForMIMEType(WebCore::MIMETypeRegistry *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v5;
  void *v6;
  const __CFString *v7;
  const WTF::String *v8;
  uint64_t v9;
  const WTF::String *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;

  if (!*(_QWORD *)this)
    goto LABEL_21;
  if (WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, (uint64_t *)this))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = v20;
    goto LABEL_24;
  }
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB39C0], "sharedMappings");
  if (*(_QWORD *)this)
    v7 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v7 = &stru_1E3487BC0;
  if (objc_msgSend((id)objc_msgSend(v6, "preferredExtensionForMIMEType:", v7), "length"))
LABEL_27:
    JUMPOUT(0x19AEA5508);
  WebCore::additionalExtensionsMap(0, v8);
  v11 = qword_1ECE81710;
  if (!qword_1ECE81710)
    goto LABEL_15;
  v12 = *(_DWORD *)(qword_1ECE81710 - 8);
  v13 = WTF::ASCIICaseInsensitiveHash::hash(this, v10);
  v14 = 0;
  v15 = *(_QWORD *)this;
  while (1)
  {
    v16 = v13 & v12;
    v17 = v11 + 24 * (v13 & v12);
    v9 = *(_QWORD *)v17;
    if (*(_QWORD *)v17 == -1)
      goto LABEL_12;
    if (!v9)
      break;
    v9 = WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(v9, v15);
    if ((v9 & 1) != 0)
      goto LABEL_16;
LABEL_12:
    v13 = ++v14 + v16;
  }
  if (qword_1ECE81710)
  {
    v17 = qword_1ECE81710 + 24 * *(unsigned int *)(qword_1ECE81710 - 4);
    goto LABEL_16;
  }
LABEL_15:
  v17 = 0;
LABEL_16:
  WebCore::additionalExtensionsMap((WebCore *)v9, v10);
  v18 = qword_1ECE81710;
  if (qword_1ECE81710)
    v18 = qword_1ECE81710 + 24 * *(unsigned int *)(qword_1ECE81710 - 4);
  if (v18 == v17)
  {
LABEL_21:
    v19 = (_DWORD **)MEMORY[0x1E0CBF6F0];
    goto LABEL_22;
  }
  if (!*(_DWORD *)(v17 + 20))
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v19 = *(_DWORD ***)(v17 + 8);
LABEL_22:
  v5 = *v19;
  if (v5)
    *v5 += 2;
LABEL_24:
  *a2 = v5;
}

void sub_1950DF550(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_1950DF5C4(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0>(WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = *(void **)(a1 + 40);
  if (v2)

  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WTF::BlockPtr<void ()(void)>::fromCallable<WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0>(WebCore::FileMonitor::FileMonitor(WTF::String const&,WTF::Ref<WTF::WorkQueue,WTF::RawPtrTraits<WTF::WorkQueue>,WTF::DefaultRefDerefTraits<WTF::WorkQueue>> &&,WTF::Function<void ()(WebCore::FileMonitor::FileChangeType)> &&)::$_0)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  char data;
  void (*v4)(void);

  v2 = *(NSObject **)(a1 + 40);
  if (!dispatch_source_testcancel(v2))
  {
    data = dispatch_source_get_data(v2);
    v4 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 16);
    if ((data & 0x61) != 0)
    {
      v4();
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
    }
    else
    {
      v4();
    }
  }
}

BOOL WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;

  v2 = *a1;
  v3 = *a2;
  v4 = *(unsigned int *)(*a1 + 4);
  if ((_DWORD)v4 != *(_DWORD *)(*a2 + 4))
    return 0;
  v6 = *(_DWORD *)(v3 + 16);
  v7 = *(unsigned __int8 **)(v2 + 8);
  v8 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) != 0)
  {
    if ((v6 & 4) != 0)
    {
      if (!(_DWORD)v4)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
        return 0;
      v19 = 1;
      do
      {
        v14 = v19;
        if (v4 == v19)
          break;
        v20 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[v19]);
        v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v8[v19++]);
      }
      while (v20 == v21);
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      if ((*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v7))
        return 0;
      v13 = 1;
      do
      {
        v14 = v13;
        if (v4 == v13)
          break;
        v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v7[v13]);
        v16 = *(unsigned __int16 *)&v8[2 * v13] | (32 * (*(unsigned __int16 *)&v8[2 * v13] - 65 < 0x1A));
        ++v13;
      }
      while (v16 == v15);
    }
  }
  else
  {
    if ((v6 & 4) == 0)
    {
      if ((_DWORD)v4)
      {
        if ((*(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A))) == (*(unsigned __int16 *)v8 | (32 * (*(unsigned __int16 *)v8 - 65 < 0x1A))))
        {
          v9 = 1;
          do
          {
            v10 = v9;
            if (v4 == v9)
              break;
            v11 = *(unsigned __int16 *)&v7[2 * v9] | (32 * (*(unsigned __int16 *)&v7[2 * v9] - 65 < 0x1A));
            ++v9;
          }
          while (v11 == (*(unsigned __int16 *)&v8[2 * v10] | (32
                                                             * (*(unsigned __int16 *)&v8[2 * v10] - 65 < 0x1A))));
          return v10 >= v4;
        }
        return 0;
      }
      return 1;
    }
    if (!(_DWORD)v4)
      return 1;
    if ((*(unsigned __int16 *)v7 | (32 * (*(unsigned __int16 *)v7 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v8))
      return 0;
    v17 = 1;
    do
    {
      v14 = v17;
      if (v4 == v17)
        break;
      v18 = *(unsigned __int16 *)&v7[2 * v17] | (32 * (*(unsigned __int16 *)&v7[2 * v17] - 65 < 0x1A));
      ++v17;
    }
    while (v18 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v8[v14]));
  }
  return v14 >= v4;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash(WTF::ASCIICaseInsensitiveHash *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 8);
  v4 = *(unsigned int *)(v2 + 4);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
    return WTF::ASCIICaseInsensitiveHash::hash<char16_t>(v3, v4);
  v5 = -1640531527;
  if (v4 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = v5 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v3 + v6));
      v8 = (v7 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v3 + v6 + 1)) << 11) ^ v7;
      v5 = v8 + (v8 >> 11);
      v9 = v6 + 3;
      v6 += 2;
    }
    while (v9 < v4);
  }
  if ((v4 & 1) != 0)
  {
    v10 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v4 + v3 - 1));
    v5 = ((v5 + v10) ^ ((v5 + v10) << 11)) + (((v5 + v10) ^ ((v5 + v10) << 11)) >> 17);
  }
  v11 = (v5 ^ (8 * v5)) + ((v5 ^ (8 * v5)) >> 5);
  v12 = (v11 ^ (4 * v11)) + ((v11 ^ (4 * v11)) >> 15);
  v13 = (v12 ^ (v12 << 10)) & 0xFFFFFF;
  if (v13)
    return v13;
  else
    return 0x800000;
}

uint64_t WTF::ASCIICaseInsensitiveHash::hash<char16_t>(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = -1640531527;
  if (a2 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = (unsigned __int16 *)(a1 + 2 * v3);
      v5 = *v4 | (32 * (*v4 - 65 < 0x1A));
      v6 = (((v4[1] - 65 < 0x1A) << 16) | (v4[1] << 11)) ^ ((v2 + v5) << 16) ^ (v2 + v5);
      v2 = v6 + (v6 >> 11);
      v7 = v3 + 3;
      v3 += 2;
    }
    while (v7 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v8 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    v2 = ((v2 + (v8 | (32 * ((v8 - 65) < 0x1A)))) ^ ((v2 + (v8 | (32 * ((v8 - 65) < 0x1A)))) << 11))
       + (((v2 + (v8 | (32 * ((v8 - 65) < 0x1A)))) ^ ((v2 + (v8 | (32 * ((v8 - 65) < 0x1A)))) << 11)) >> 17);
  }
  v9 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  v11 = (v10 ^ (v10 << 10)) & 0xFFFFFF;
  if (v11)
    return v11;
  else
    return 0x800000;
}

void WebCore::extensionsForMIMETypeMap(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  const __CFString *v3;
  uint64_t v4;
  const __CFString *v5;
  CFStringRef v6;
  const __CFArray *v7;
  const __CFArray *v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  id obj;
  const __CFString *inTagClass;
  _QWORD v40[3];
  WTF::StringImpl *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  WTF::StringImpl *v51;
  _BYTE v52[24];
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  _BYTE v57[128];
  _QWORD v58[18];

  v58[16] = *MEMORY[0x1E0C80C00];
  if ((byte_1ECE816E9 & 1) == 0)
  {
    memset(v40, 0, 21);
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    obj = (id)_UTCopyDeclaredTypeIdentifiers();
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v57, 16);
    if (v37)
    {
      v35 = *(_QWORD *)v43;
      v34 = (const __CFString *)*MEMORY[0x1E0CA5A90];
      inTagClass = (const __CFString *)*MEMORY[0x1E0CA5A88];
      do
      {
        v1 = 0;
        v3 = v34;
        v2 = v35;
        v4 = v37;
        do
        {
          if (*(_QWORD *)v43 != v2)
            objc_enumerationMutation(obj);
          v5 = *(const __CFString **)(*((_QWORD *)&v42 + 1) + 8 * v1);
          v6 = UTTypeCopyPreferredTagWithClass(v5, v3);
          if (v6)
          {
            v7 = UTTypeCopyAllTagsWithClass(v5, inTagClass);
            v8 = v7;
            if (!v7)
              goto LABEL_61;
            if (!CFArrayGetCount(v7))
              goto LABEL_60;
            MEMORY[0x19AEA5508](&v41, v6);
            if (v41 && (v9 = WTF::StringImpl::reverseFind(), v41))
            {
              v10 = *((unsigned int *)v41 + 1);
              if ((_DWORD)v10)
              {
                if (v10 > v9)
                  v10 = v9;
                if ((v10 & 0x80000000) != 0)
                {
LABEL_72:
                  __break(0xC471u);
                  return;
                }
                v11 = (char *)*((_QWORD *)v41 + 1);
                v12 = (unint64_t)((*((_DWORD *)v41 + 4) >> 2) & 1) << 32;
                v13 = v10 & 0xFFFFFFFEFFFFFFFFLL | v12;
LABEL_17:
                if (__OFADD__((_DWORD)v10, 2))
                  goto LABEL_72;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v10 + 2), v12 != 0, v11, v13, "/*", 2u, v58);
                v51 = (WTF::StringImpl *)v58[0];
                v36 = (WTF::StringImpl *)v58[0];
                if (!v58[0])
                  goto LABEL_72;
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v15 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
                if (v15)
                {
                  v16 = *(_QWORD *)v48;
                  do
                  {
                    v17 = 0;
                    do
                    {
                      if (*(_QWORD *)v48 != v16)
                        objc_enumerationMutation(v8);
                      v18 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * v17);
                      MEMORY[0x19AEA5508](&v46, v18);
                      v53 = 0;
                      v54 = 0;
                      v55 = 0;
                      WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>((uint64_t)v56, (uint64_t)v40, &v51, (uint64_t *)&v53);
                      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v52, v56[0] + 8, &v46);
                      v20 = v53;
                      if (v53)
                      {
                        v25 = v54;
                        if ((_DWORD)v54)
                        {
                          v26 = v53;
                          do
                          {
                            v27 = *(WTF::StringImpl **)v26;
                            *(_QWORD *)v26 = 0;
                            if (v27)
                            {
                              if (*(_DWORD *)v27 == 2)
                                WTF::StringImpl::destroy(v27, v19);
                              else
                                *(_DWORD *)v27 -= 2;
                            }
                            v26 = (WTF *)((char *)v26 + 8);
                            --v25;
                          }
                          while (v25);
                        }
                        WTF::fastFree(v20, v19);
                      }
                      v21 = v46;
                      v46 = 0;
                      if (v21)
                      {
                        if (*(_DWORD *)v21 == 2)
                          WTF::StringImpl::destroy(v21, v19);
                        else
                          *(_DWORD *)v21 -= 2;
                      }
                      MEMORY[0x19AEA5508](&v46, v18);
                      v53 = 0;
                      v54 = 0;
                      v55 = 0;
                      WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>((uint64_t)v56, (uint64_t)v40, &v41, (uint64_t *)&v53);
                      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)v52, v56[0] + 8, &v46);
                      v23 = v53;
                      if (v53)
                      {
                        v28 = v54;
                        if ((_DWORD)v54)
                        {
                          v29 = v53;
                          do
                          {
                            v30 = *(WTF::StringImpl **)v29;
                            *(_QWORD *)v29 = 0;
                            if (v30)
                            {
                              if (*(_DWORD *)v30 == 2)
                                WTF::StringImpl::destroy(v30, v22);
                              else
                                *(_DWORD *)v30 -= 2;
                            }
                            v29 = (WTF *)((char *)v29 + 8);
                            --v28;
                          }
                          while (v28);
                        }
                        WTF::fastFree(v23, v22);
                      }
                      v24 = v46;
                      v46 = 0;
                      if (v24)
                      {
                        if (*(_DWORD *)v24 == 2)
                          WTF::StringImpl::destroy(v24, v22);
                        else
                          *(_DWORD *)v24 -= 2;
                      }
                      ++v17;
                    }
                    while (v17 != v15);
                    v31 = -[__CFArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v47, v58, 16);
                    v15 = v31;
                  }
                  while (v31);
                }
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, v14);
                else
                  *(_DWORD *)v36 -= 2;
                v32 = v41;
                v41 = 0;
                if (v32)
                {
                  if (*(_DWORD *)v32 == 2)
                    WTF::StringImpl::destroy(v32, v14);
                  else
                    *(_DWORD *)v32 -= 2;
                }
LABEL_60:
                CFRelease(v8);
                v3 = v34;
                v2 = v35;
                v4 = v37;
LABEL_61:
                CFRelease(v6);
                goto LABEL_62;
              }
            }
            else
            {
              LODWORD(v10) = 0;
            }
            v13 = 0x100000000;
            v11 = "";
            v12 = 0x100000000;
            goto LABEL_17;
          }
LABEL_62:
          ++v1;
        }
        while (v1 != v4);
        v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v57, 16);
        v37 = v33;
      }
      while (v33);
    }
    if (obj)
      CFRelease(obj);
    qword_1ECE81708 = v40[0];
    dword_1ECE816F0 = v40[1];
    dword_1ECE816F8 = v40[2];
    byte_1ECE816E9 = 1;
  }
}

void sub_1950DFE84(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef cf, uint64_t a14, WTF *a15, int a16, uint64_t a17, WTF::StringImpl *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,WTF::StringImpl *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,WTF *a41,int a42)
{
  uint64_t i;
  char *v44;
  WTF *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;

  if (cf)
    CFRelease(cf);
  if (a15)
  {
    if (a16)
    {
      for (i = 0; i != a16; ++i)
      {
        v44 = (char *)a15 + 32 * i;
        v45 = (WTF *)*((_QWORD *)v44 + 1);
        if (v45)
        {
          v47 = *((unsigned int *)v44 + 4);
          if ((_DWORD)v47)
          {
            v48 = (WTF::StringImpl **)*((_QWORD *)v44 + 1);
            do
            {
              v49 = *v48;
              *v48 = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, a2);
                else
                  *(_DWORD *)v49 -= 2;
              }
              ++v48;
              --v47;
            }
            while (v47);
          }
          WTF::fastFree(v45, a2);
        }
        v46 = *(WTF::StringImpl **)v44;
        *(_QWORD *)v44 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            WTF::StringImpl::destroy(v46, a2);
          else
            *(_DWORD *)v46 -= 2;
        }
      }
    }
    WTF::fastFree(a15, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  _WORD *v15;
  char *v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  unsigned __int128 *v37;
  unsigned __int128 *v38;
  unsigned __int128 v39;
  char v40;
  uint64_t v41;
  int8x16x2_t v42;
  int8x16x2_t v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v41;
        if (v41)
        {
          v14 = (_BYTE *)(v41 + 20);
          *(_DWORD *)v41 = 2;
          *(_DWORD *)(v41 + 4) = v11;
          *(_QWORD *)(v41 + 8) = v41 + 20;
          *(_DWORD *)(v41 + 16) = 4;
          if ((a4 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a4)
            {
              if ((_DWORD)a4 == 1)
                *v14 = *(_BYTE *)a3;
              else
                result = (uint64_t)memcpy((void *)(v41 + 20), a3, a4);
            }
          }
          else
          {
            if (a4 < 0x10)
            {
              v37 = (unsigned __int128 *)(v41 + 20);
            }
            else
            {
              v37 = (unsigned __int128 *)&v14[a4 & 0xFFFFFFF0];
              v38 = (unsigned __int128 *)(v41 + 20);
              do
              {
                v39 = (unsigned __int128)vld2q_s8((const char *)a3);
                a3 += 2;
                *v38++ = v39;
              }
              while (v38 != v37);
            }
            while (v37 != (unsigned __int128 *)&v14[a4])
            {
              v40 = *(_BYTE *)a3;
              a3 = (_OWORD *)((char *)a3 + 2);
              *(_BYTE *)v37 = v40;
              v37 = (unsigned __int128 *)((char *)v37 + 1);
            }
          }
          if (a6)
          {
            result = (uint64_t)&v14[a4];
            if (a6 == 1)
              *(_BYTE *)result = *(_BYTE *)a5;
            else
              result = (uint64_t)memcpy((void *)result, a5, a6);
          }
        }
        goto LABEL_35;
      }
LABEL_37:
      v13 = 0;
      goto LABEL_35;
    }
LABEL_36:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_35;
  }
  if (!(_DWORD)result)
    goto LABEL_36;
  if (result > 0x7FFFFFEF)
    goto LABEL_37;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v41;
  if (v41)
  {
    v15 = (_WORD *)(v41 + 20);
    *(_DWORD *)v41 = 2;
    *(_DWORD *)(v41 + 4) = v11;
    *(_QWORD *)(v41 + 8) = v41 + 20;
    *(_DWORD *)(v41 + 16) = 0;
    if ((a4 & 0xFF00000000) != 0)
    {
      if (a4 >= 0x40)
      {
        v16 = (char *)&v15[a4 & 0xFFFFFFC0];
        v17 = 0uLL;
        v18 = (char *)(v41 + 20);
        do
        {
          v42.val[0] = (int8x16_t)*a3;
          v19 = *((int8x16_t *)a3 + 1);
          v44.val[0] = (int8x16_t)a3[2];
          v20 = a3[3];
          a3 += 4;
          v21 = v20;
          v44.val[1] = 0uLL;
          v46.val[0] = v19;
          v42.val[1] = 0uLL;
          v22 = v18;
          vst2q_s8(v22, v42);
          v22 += 32;
          v46.val[1] = 0uLL;
          vst2q_s8(v22, v46);
          v23 = v18 + 64;
          vst2q_s8(v23, v44);
          v24 = v18 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
          v18 += 128;
        }
        while (v18 != v16);
      }
      else
      {
        v16 = (char *)(v41 + 20);
      }
      while (v16 != (char *)&v15[a4])
      {
        v25 = *(unsigned __int8 *)a3;
        a3 = (_OWORD *)((char *)a3 + 1);
        *(_WORD *)v16 = v25;
        v16 += 2;
      }
    }
    else if ((_DWORD)a4 == 1)
    {
      *v15 = *(_WORD *)a3;
    }
    else if ((_DWORD)a4)
    {
      result = (uint64_t)memcpy((void *)(v41 + 20), a3, 2 * a4);
    }
    v26 = (char *)&v15[a4];
    v27 = &v26[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v28 = &v26[2 * (a6 & 0xFFFFFFC0)];
      v29 = 0uLL;
      do
      {
        v43.val[0] = (int8x16_t)*a5;
        v30 = *((int8x16_t *)a5 + 1);
        v45.val[0] = (int8x16_t)a5[2];
        v31 = a5[3];
        a5 += 4;
        v32 = v31;
        v45.val[1] = 0uLL;
        v47.val[0] = v30;
        v43.val[1] = 0uLL;
        v33 = v26;
        vst2q_s8(v33, v43);
        v33 += 32;
        v47.val[1] = 0uLL;
        vst2q_s8(v33, v47);
        v34 = v26 + 64;
        vst2q_s8(v34, v45);
        v35 = v26 + 96;
        vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
        v26 += 128;
      }
      while (v26 != v28);
      v26 = v28;
    }
    while (v26 != v27)
    {
      v36 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v26 = v36;
      v26 += 2;
    }
  }
LABEL_35:
  *a7 = v13;
  return result;
}

uint64_t WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t result;
  WTF::StringImpl *v59;
  char *v60;
  unsigned int *v61;
  int v62;
  WTF::StringImpl *v63;
  WTF *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unsigned int v71;
  int v72;
  int v73;
  char v74;
  WTF *v75;
  __int128 v76;
  uint64_t v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  unsigned int v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl **v83;
  WTF::StringImpl *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF::StringImpl *v89;
  char *v90;
  WTF *v94;
  uint64_t v95;
  WTF::StringImpl *v96[2];
  _QWORD v97[2];

  v6 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  if (20 * v5 >= 19 * (unint64_t)v6
    || (v6 <= 2 * (int)v5 ? (v7 = *(_BYTE *)(a2 + 20) == 0) : (v7 = 1), !v7))
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    v9 = *(WTF **)a2;
    v10 = (void *)WTF::fastMalloc((WTF *)(32 * v8));
    v11 = v10;
    if (v8)
      bzero(v10, 32 * v8);
    *(_QWORD *)a2 = v11;
    *(_DWORD *)(a2 + 8) = v8;
    v12 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    *(_DWORD *)(a2 + 16) = (v14 >> 31) ^ v14;
    *(_BYTE *)(a2 + 20) = 0;
    if ((_DWORD)v6)
    {
      v15 = 0;
      v94 = v9;
      v95 = v6;
      do
      {
        v16 = (WTF::StringImpl **)((char *)v9 + 32 * v15);
        v17 = *v16;
        if (*v16)
        {
          v18 = *(_DWORD *)(a2 + 8);
          v19 = *(_DWORD *)(a2 + 16);
          v20 = *((_DWORD *)v17 + 4);
          if (v20 < 0x100)
            v21 = WTF::StringImpl::hashSlowCase(v17);
          else
            v21 = v20 >> 8;
          v22 = v18 - 1;
          v23 = (v21 ^ v19) & (v18 - 1);
          v24 = *(_QWORD *)a2 + 32 * v23;
          v25 = *(WTF::StringImpl **)v24;
          if (*(_QWORD *)v24)
          {
            v26 = 0;
            do
            {
              v27 = *((_DWORD *)v25 + 4);
              if (v27 < 0x100)
                v28 = WTF::StringImpl::hashSlowCase(v25);
              else
                v28 = v27 >> 8;
              v29 = (v23 + v18 - ((v28 ^ v19) & v22)) & v22;
              if (v26 > v29)
              {
                std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>((uint64_t)v16, (WTF::StringImpl *)v24);
                v26 = v29;
              }
              v23 = ((_DWORD)v23 + 1) & v22;
              ++v26;
              v24 = *(_QWORD *)a2 + 32 * v23;
              v25 = *(WTF::StringImpl **)v24;
            }
            while (*(_QWORD *)v24);
          }
          v30 = *v16;
          *v16 = 0;
          v31 = *(WTF::StringImpl **)v24;
          *(_QWORD *)v24 = v30;
          v9 = v94;
          v6 = v95;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = (char *)v94 + 32 * v15;
          v33 = *((_QWORD *)v32 + 1);
          *((_QWORD *)v32 + 1) = 0;
          v34 = *((_DWORD *)v32 + 6);
          *((_DWORD *)v32 + 6) = 0;
          v35 = v32[28];
          v32[28] = 0;
          v36 = *(WTF **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = v33;
          v37 = *((_QWORD *)v32 + 2);
          *((_QWORD *)v32 + 2) = 0;
          v38 = *(unsigned int *)(v24 + 16);
          *(_QWORD *)(v24 + 16) = v37;
          *(_DWORD *)(v24 + 24) = v34;
          *(_BYTE *)(v24 + 28) = v35;
          if (v36)
          {
            if ((_DWORD)v38)
            {
              v44 = (WTF::StringImpl **)v36;
              do
              {
                v45 = *v44;
                *v44 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, (WTF::StringImpl *)a2);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                ++v44;
                --v38;
              }
              while (v38);
            }
            WTF::fastFree(v36, (void *)a2);
          }
        }
        v39 = v16[1];
        if (v39)
        {
          v41 = *((unsigned int *)v9 + 8 * v15 + 4);
          if ((_DWORD)v41)
          {
            v42 = (WTF::StringImpl **)v16[1];
            do
            {
              v43 = *v42;
              *v42 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                  WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v43 -= 2;
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          WTF::fastFree(v39, (void *)a2);
        }
        v40 = *v16;
        *v16 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v40 -= 2;
        }
        ++v15;
      }
      while (v15 != v6);
      goto LABEL_56;
    }
    if (v9)
    {
LABEL_56:
      WTF::fastFree(v9, (void *)a2);
      LODWORD(v6) = *(_DWORD *)(a2 + 8);
      goto LABEL_57;
    }
    LODWORD(v6) = 8;
  }
LABEL_57:
  v46 = v6 - 1;
  v47 = *(_DWORD *)(a2 + 16);
  v48 = *((_DWORD *)*a3 + 4);
  if (v48 < 0x100)
    v49 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v49 = v48 >> 8;
  v50 = (v49 ^ v47) & v46;
  v51 = *(WTF **)a2;
  v52 = *(_QWORD *)a2 + 32 * v50;
  v53 = *(WTF **)v52;
  if (*(_QWORD *)v52)
  {
    v54 = 0;
    while (1)
    {
      v55 = *((_DWORD *)v53 + 4);
      v56 = v55 < 0x100 ? WTF::StringImpl::hashSlowCase(v53) : v55 >> 8;
      v57 = (v50 + v6 - ((v56 ^ v47) & v46)) & v46;
      if (v54 > v57)
        break;
      if (v56 == v49)
      {
        result = WTF::equal(*(WTF **)v52, *a3, (const WTF::StringImpl *)a3);
        v51 = *(WTF **)a2;
        if ((result & 1) != 0)
        {
          v85 = 0;
          v86 = a1;
          goto LABEL_125;
        }
      }
      else
      {
        v51 = *(WTF **)a2;
      }
      v50 = ((_DWORD)v50 + 1) & v46;
      ++v54;
      v52 = (uint64_t)v51 + 32 * v50;
      v53 = *(WTF **)v52;
      if (!*(_QWORD *)v52)
      {
        v86 = a1;
        if (v54 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        goto LABEL_74;
      }
    }
    if (v54 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v59 = *(WTF::StringImpl **)v52;
    *(_QWORD *)v52 = 0;
    v60 = (char *)v51 + 32 * v50;
    v96[1] = 0;
    memset(v97, 0, 13);
    v96[0] = v59;
    v62 = *((_DWORD *)v60 + 4);
    v61 = (unsigned int *)(v60 + 16);
    v63 = (WTF::StringImpl *)*((_QWORD *)v61 - 1);
    *((_QWORD *)v61 - 1) = 0;
    v96[1] = v63;
    *v61 = 0;
    LODWORD(v97[0]) = v62;
    LODWORD(v59) = v61[1];
    v61[1] = 0;
    HIDWORD(v97[0]) = (_DWORD)v59;
    LODWORD(v59) = v61[2];
    v61[2] = 0;
    LODWORD(v97[1]) = (_DWORD)v59;
    LOBYTE(v59) = *((_BYTE *)v61 + 12);
    *((_BYTE *)v61 + 12) = 0;
    BYTE4(v97[1]) = (_BYTE)v59;
    v64 = (WTF *)*((_QWORD *)v61 - 1);
    if (v64)
    {
      v87 = *v61;
      if ((_DWORD)v87)
      {
        v88 = (WTF::StringImpl **)*((_QWORD *)v61 - 1);
        do
        {
          v89 = *v88;
          *v88 = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
              WTF::StringImpl::destroy(v89, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v89 -= 2;
          }
          ++v88;
          --v87;
        }
        while (v87);
      }
      WTF::fastFree(v64, (void *)a2);
    }
    v65 = *(WTF::StringImpl **)v52;
    *(_QWORD *)v52 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v65 -= 2;
    }
    *(_OWORD *)v52 = 0u;
    *(_OWORD *)(v52 + 16) = 0u;
    WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(v52, *a3, a4);
    v67 = (v50 + 1) & v46;
    v68 = v57 + 1;
    while (1)
    {
      v69 = *(_QWORD *)a2 + 32 * v67;
      v70 = *(WTF::StringImpl **)v69;
      if (!*(_QWORD *)v69)
        break;
      v71 = *((_DWORD *)v70 + 4);
      if (v71 < 0x100)
        v72 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v69);
      else
        v72 = v71 >> 8;
      v80 = (v67 + v6 - ((v72 ^ v47) & v46)) & v46;
      if (v68 > v80)
      {
        std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>((uint64_t)v96, (WTF::StringImpl *)v69);
        v68 = v80;
      }
      v67 = (v67 + 1) & v46;
      ++v68;
      if (!v70)
        goto LABEL_100;
    }
    v73 = v97[1];
    LODWORD(v97[1]) = 0;
    v74 = BYTE4(v97[1]);
    BYTE4(v97[1]) = 0;
    v75 = *(WTF **)(v69 + 8);
    v76 = *(_OWORD *)v96;
    v96[0] = 0;
    v96[1] = 0;
    *(_OWORD *)v69 = v76;
    v77 = *(unsigned int *)(v69 + 16);
    *(_QWORD *)&v76 = v97[0];
    v97[0] = 0;
    *(_QWORD *)(v69 + 16) = v76;
    *(_DWORD *)(v69 + 24) = v73;
    *(_BYTE *)(v69 + 28) = v74;
    if (!v75)
      goto LABEL_121;
    if ((_DWORD)v77)
    {
      v78 = (WTF::StringImpl **)v75;
      do
      {
        v79 = *v78;
        *v78 = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
            WTF::StringImpl::destroy(v79, v66);
          else
            *(_DWORD *)v79 -= 2;
        }
        ++v78;
        --v77;
      }
      while (v77);
    }
    WTF::fastFree(v75, v66);
LABEL_100:
    v81 = v96[1];
    if (v96[1])
    {
      v82 = LODWORD(v97[0]);
      if (LODWORD(v97[0]))
      {
        v83 = (WTF::StringImpl **)v96[1];
        do
        {
          v84 = *v83;
          *v83 = 0;
          if (v84)
          {
            if (*(_DWORD *)v84 == 2)
              WTF::StringImpl::destroy(v84, v66);
            else
              *(_DWORD *)v84 -= 2;
          }
          ++v83;
          --v82;
        }
        while (v82);
      }
      WTF::fastFree(v81, v66);
    }
LABEL_121:
    result = (uint64_t)v96[0];
    v86 = a1;
    if (v96[0])
    {
      if (*(_DWORD *)v96[0] == 2)
        result = WTF::StringImpl::destroy(v96[0], v66);
      else
        *(_DWORD *)v96[0] -= 2;
    }
  }
  else
  {
    v86 = a1;
LABEL_74:
    result = (uint64_t)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(v52, *a3, a4);
  }
  ++*(_DWORD *)(a2 + 12);
  v51 = *(WTF **)a2;
  v85 = 1;
LABEL_125:
  v90 = (char *)v51 + 32 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)v86 = v52;
  *(_QWORD *)(v86 + 8) = v90;
  *(_BYTE *)(v86 + 16) = v85;
  return result;
}

void sub_1950E09F8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl **a16, unsigned int a17)
{
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  if (a16)
  {
    v18 = a17;
    if (a17)
    {
      v19 = a16;
      do
      {
        v20 = *v19;
        *v19 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        ++v19;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)a16, a2);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2)
      WTF::StringImpl::destroy(a15, a2);
    else
      *(_DWORD *)a15 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>,WTF::String const&,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3)
{
  WTF::StringImpl *result;
  uint64_t v6;
  int v7;
  char v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  v8 = *((_BYTE *)a3 + 20);
  *((_BYTE *)a3 + 20) = 0;
  v9 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v10 = a3[1];
  a3[1] = 0;
  v11 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 28) = v8;
  if (v9)
  {
    if ((_DWORD)v11)
    {
      v12 = (WTF::StringImpl **)v9;
      do
      {
        v13 = *v12;
        *v12 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        ++v12;
        --v11;
      }
      while (v11);
    }
    return (WTF::StringImpl *)WTF::fastFree(v9, a2);
  }
  return result;
}

WTF::StringImpl *std::swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  int v12;
  char v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;

  v5 = *(WTF::StringImpl **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  v8 = *(_BYTE *)(a1 + 28);
  *(_BYTE *)(a1 + 28) = 0;
  v9 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v10 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v12 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  v13 = *((_BYTE *)a2 + 28);
  *((_BYTE *)a2 + 28) = 0;
  v14 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  v15 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_DWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 28) = v13;
  if (v14)
  {
    if ((_DWORD)v16)
    {
      v20 = (WTF::StringImpl **)v14;
      do
      {
        v21 = *v20;
        *v20 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, a2);
          else
            *(_DWORD *)v21 -= 2;
        }
        ++v20;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v14, a2);
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v18 = (WTF *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v19 = *((unsigned int *)a2 + 4);
  *((_QWORD *)a2 + 2) = v6;
  *((_DWORD *)a2 + 6) = v7;
  *((_BYTE *)a2 + 28) = v8;
  if (v18)
  {
    if ((_DWORD)v19)
    {
      v22 = (WTF::StringImpl **)v18;
      do
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        ++v22;
        --v19;
      }
      while (v19);
    }
    return (WTF::StringImpl *)WTF::fastFree(v18, a2);
  }
  return result;
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  WTF **v15;
  WTF *result;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  int i;
  int v26;
  WTF **v27;
  unsigned int v28;
  int v29;
  WTF *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v7 = *(_DWORD *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 12);
  if (20 * v6 >= 19 * (unint64_t)v7 || (v7 <= 2 * (int)v6 ? (v8 = *(_BYTE *)(a2 + 20) == 0) : (v8 = 1), !v8))
  {
    if (v7)
      v9 = 2 * v7;
    else
      v9 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v9);
    v7 = *(_DWORD *)(a2 + 8);
  }
  v10 = v7 - 1;
  v11 = *(_DWORD *)(a2 + 16);
  v12 = *((_DWORD *)*a3 + 4);
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v13 = v12 >> 8;
  v14 = (v13 ^ v11) & v10;
  v15 = (WTF **)(*(_QWORD *)a2 + 8 * v14);
  result = *v15;
  if (*v15)
  {
    v33 = a1;
    v17 = 0;
    while (1)
    {
      v18 = *((_DWORD *)result + 4);
      v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v18 >> 8;
      v20 = (v14 + v7 - ((v19 ^ v11) & v10)) & v10;
      if (v17 > v20)
        break;
      if (v19 == v13)
      {
        result = (WTF *)WTF::equal(*v15, *a3, (const WTF::StringImpl *)a3);
        v21 = *(_QWORD *)a2;
        if ((result & 1) != 0)
        {
          v32 = 0;
          a1 = v33;
          goto LABEL_44;
        }
      }
      else
      {
        v21 = *(_QWORD *)a2;
      }
      v14 = (v14 + 1) & v10;
      ++v17;
      v15 = (WTF **)(v21 + 8 * v14);
      result = *v15;
      if (!*v15)
      {
        if (v17 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        a1 = v33;
        goto LABEL_27;
      }
    }
    if (v17 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v23 = *v15;
    *v15 = 0;
    v24 = *a3;
    if (*a3)
      *(_DWORD *)v24 += 2;
    *v15 = v24;
    for (i = v14 + 1; ; i = v26 + 1)
    {
      v26 = i & v10;
      v27 = (WTF **)(*(_QWORD *)a2 + 8 * (i & v10));
      result = *v27;
      if (!*v27)
        break;
      v28 = *((_DWORD *)result + 4);
      if (v28 < 0x100)
        v29 = WTF::StringImpl::hashSlowCase(result);
      else
        v29 = v28 >> 8;
      if (++v20 > ((v26 + v7 - ((v29 ^ v11) & v10)) & v10))
      {
        v30 = *v27;
        *v27 = v23;
        v23 = v30;
        v20 = (v26 + v7 - ((v29 ^ v11) & v10)) & v10;
      }
    }
    *v27 = v23;
    a1 = v33;
  }
  else
  {
LABEL_27:
    v22 = *a3;
    if (*a3)
      *(_DWORD *)v22 += 2;
    *v15 = v22;
  }
  ++*(_DWORD *)(a2 + 12);
  v21 = *(_QWORD *)a2;
  v32 = 1;
LABEL_44:
  v31 = v21 + 8 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v31;
  *(_BYTE *)(a1 + 16) = v32;
  return result;
}

void sub_1950E0F58(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl ***v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl **v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **result;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (WTF::StringImpl **)(v6 + 24 * v11);
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v20 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(a1, (WTF::StringImpl ***)(v6 + 24 * v11));
          v21 = v6 + 24 * v11;
          v22 = (WTF::StringImpl ***)(v21 + 8);
          v23 = *(unsigned int *)(v21 + 20);
          if ((_DWORD)v23)
          {
            v29 = *v22;
            v30 = 8 * v23;
            do
            {
              v31 = *v29;
              *v29 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2)
                {
                  v33 = v30;
                  v35 = v29;
                  WTF::StringImpl::destroy(v31, v10);
                  v30 = v33;
                  v29 = v35;
                }
                else
                {
                  *(_DWORD *)v31 -= 2;
                }
              }
              ++v29;
              v30 -= 8;
            }
            while (v30);
          }
          v24 = (WTF *)*v22;
          if (*v22)
          {
            *v22 = 0;
            *(_DWORD *)(v6 + 24 * v11 + 16) = 0;
            WTF::fastFree(v24, v10);
          }
          v25 = *v14;
          *v14 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v10);
            else
              *(_DWORD *)v25 -= 2;
          }
          if (v14 == a3)
            v12 = v20;
        }
        else
        {
          v15 = v6 + 24 * v11;
          v16 = (WTF::StringImpl ***)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 20);
          if ((_DWORD)v17)
          {
            v26 = *v16;
            v27 = 8 * v17;
            do
            {
              v28 = *v26;
              *v26 = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                {
                  v34 = v27;
                  WTF::StringImpl::destroy(v28, v10);
                  v27 = v34;
                }
                else
                {
                  *(_DWORD *)v28 -= 2;
                }
              }
              ++v26;
              v27 -= 8;
            }
            while (v27);
          }
          v18 = (WTF *)*v16;
          if (*v16)
          {
            *v16 = 0;
            *(_DWORD *)(v6 + 24 * v11 + 16) = 0;
            WTF::fastFree(v18, v10);
          }
          v19 = *v14;
          *v14 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v10);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, WTF::StringImpl ***this)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  int v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)this, (const WTF::String *)this);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v9 = (WTF::StringImpl **)(v3 + 24 * (v5 & v4));
    v5 = ++v7 + (v5 & v4);
  }
  while (*v9);
  v10 = v3 + 24 * v8;
  v13 = *(_DWORD *)(v10 + 20);
  v12 = (_DWORD *)(v10 + 20);
  v11 = v13;
  v14 = (WTF::StringImpl ***)(v12 - 3);
  if (v13)
  {
    v20 = *v14;
    v21 = 8 * v11;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v6);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v15 = (WTF *)*v14;
  if (*v14)
  {
    *v14 = 0;
    *(_DWORD *)(v3 + 24 * v8 + 16) = 0;
    WTF::fastFree(v15, v6);
  }
  v16 = *v9;
  *v9 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v6);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*this;
  *this = 0;
  *v9 = v17;
  *v14 = 0;
  *(_QWORD *)(v12 - 1) = 0;
  v18 = this[1];
  this[1] = 0;
  *v14 = v18;
  LODWORD(v18) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = 0;
  *(_DWORD *)(v3 + 24 * v8 + 16) = (_DWORD)v18;
  LODWORD(v18) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = 0;
  *v12 = (_DWORD)v18;
  return v9;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::HexNumberBuffer>@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;

  v5 = *(_BYTE **)result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
  {
    v6 = 0;
LABEL_3:
    v8 = (unsigned int *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 16);
    if ((v7 & 0x80000000) == 0)
    {
      v9 = (v6 + v7);
      if (!__OFADD__((_DWORD)v6, v7))
      {
        if (!(_DWORD)v9)
        {
          v10 = MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_14;
        }
        if ((v9 & 0x80000000) == 0)
        {
          result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
          v10 = v14;
          if (v14)
          {
            v11 = (_BYTE *)(v14 + 20);
            *(_DWORD *)v14 = 2;
            *(_DWORD *)(v14 + 4) = v9;
            *(_QWORD *)(v14 + 8) = v14 + 20;
            *(_DWORD *)(v14 + 16) = 4;
            if ((_DWORD)v6)
            {
              if ((_DWORD)v6 == 1)
                *v11 = *v5;
              else
                result = (uint64_t)memcpy((void *)(v14 + 20), v5, v6);
            }
            v12 = *v8;
            if ((_DWORD)v12)
            {
              result = (uint64_t)&v11[v6];
              v13 = (char *)v8 - v12;
              if ((_DWORD)v12 == 1)
                *(_BYTE *)result = *v13;
              else
                result = (uint64_t)memcpy((void *)result, v13, v12);
            }
          }
          goto LABEL_14;
        }
      }
    }
    v10 = 0;
LABEL_14:
    *a3 = v10;
    return result;
  }
  v6 = v4 - 1;
  if (!((unint64_t)(v4 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::String,WTF::StringView>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;

  v3 = *a1;
  if (!*a1)
  {
    if (*((_DWORD *)a2 + 2))
      return 0;
    if (*((_BYTE *)a2 + 12))
      return 1;
    v4 = 0;
    v6 = 0;
    return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>((_BOOL8)v6, v4, (uint64_t)*a2, v4, v4);
  }
  v4 = *(unsigned int *)(v3 + 4);
  if ((_DWORD)v4 != *((_DWORD *)a2 + 2))
    return 0;
  v5 = *((unsigned __int8 *)a2 + 12);
  v6 = *(unsigned __int8 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (*((_BYTE *)a2 + 12))
    {
      if (!(_DWORD)v4)
        return 1;
      v16 = *a2;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v6) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v16))
      {
        v17 = 1;
        do
        {
          v9 = v17;
          if (v4 == v17)
            break;
          v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v6[v17]);
          v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v16[v17++]);
        }
        while (v18 == v19);
        return v9 >= v4;
      }
      return 0;
    }
    return WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>((_BOOL8)v6, v4, (uint64_t)*a2, v4, v4);
  }
  v7 = (unsigned __int16 *)*a2;
  if (!v5)
  {
    if (!(_DWORD)v4)
      return 1;
    if ((*(unsigned __int16 *)v6 | (32 * (*(unsigned __int16 *)v6 - 65 < 0x1A))) == (*v7 | (32 * (*v7 - 65 < 0x1A))))
    {
      v13 = 1;
      do
      {
        v14 = v13;
        if (v4 == v13)
          break;
        v15 = *(unsigned __int16 *)&v6[2 * v13] | (32 * (*(unsigned __int16 *)&v6[2 * v13] - 65 < 0x1A));
        ++v13;
      }
      while (v15 == (v7[v14] | (32 * (v7[v14] - 65 < 0x1A))));
      return v14 >= v4;
    }
    return 0;
  }
  if (!(_DWORD)v4)
    return 1;
  if ((*(unsigned __int16 *)v6 | (32 * (*(unsigned __int16 *)v6 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v7))
    return 0;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v4 == v8)
      break;
    v10 = *(unsigned __int16 *)&v6[2 * v8] | (32 * (*(unsigned __int16 *)&v6[2 * v8] - 65 < 0x1A));
    ++v8;
  }
  while (v10 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *((unsigned __int8 *)v7 + v9)));
  return v9 >= v4;
}

BOOL WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 4))
    return 0;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned __int8 **)(a1 + 8);
  v6 = *(unsigned __int8 **)(a2 + 8);
  if ((*(_BYTE *)(a1 + 16) & 4) != 0)
  {
    if ((v4 & 4) != 0)
    {
      if (!(_DWORD)v2)
        return 1;
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v6))
        return 0;
      v17 = 1;
      do
      {
        v12 = v17;
        if (v2 == v17)
          break;
        v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v17]);
        v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v6[v17++]);
      }
      while (v18 == v19);
    }
    else
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*(unsigned __int16 *)v6 | (32 * (*(unsigned __int16 *)v6 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v5))
        return 0;
      v11 = 1;
      do
      {
        v12 = v11;
        if (v2 == v11)
          break;
        v13 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v5[v11]);
        v14 = *(unsigned __int16 *)&v6[2 * v11] | (32 * (*(unsigned __int16 *)&v6[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v14 == v13);
    }
  }
  else
  {
    if ((v4 & 4) == 0)
    {
      if ((_DWORD)v2)
      {
        if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) == (*(unsigned __int16 *)v6 | (32 * (*(unsigned __int16 *)v6 - 65 < 0x1A))))
        {
          v7 = 1;
          do
          {
            v8 = v7;
            if (v2 == v7)
              break;
            v9 = *(unsigned __int16 *)&v5[2 * v7] | (32 * (*(unsigned __int16 *)&v5[2 * v7] - 65 < 0x1A));
            ++v7;
          }
          while (v9 == (*(unsigned __int16 *)&v6[2 * v8] | (32
                                                           * (*(unsigned __int16 *)&v6[2 * v8] - 65 < 0x1A))));
          return v8 >= v2;
        }
        return 0;
      }
      return 1;
    }
    if (!(_DWORD)v2)
      return 1;
    if ((*(unsigned __int16 *)v5 | (32 * (*(unsigned __int16 *)v5 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v6))
      return 0;
    v15 = 1;
    do
    {
      v12 = v15;
      if (v2 == v15)
        break;
      v16 = *(unsigned __int16 *)&v5[2 * v15] | (32 * (*(unsigned __int16 *)&v5[2 * v15] - 65 < 0x1A));
      ++v15;
    }
    while (v16 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v6[v12]));
  }
  return v12 >= v2;
}

_DWORD *WebCore::JSWebGLRenderbuffer::destroy(WebCore::JSWebGLRenderbuffer *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLRenderbuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLRenderbufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLRenderbufferPrototype::create(WebCore::JSWebGLRenderbufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLRenderbuffer::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLRenderbufferPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderbuffer>,(WebCore::DOMConstructorID)670>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5360);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderbuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLRenderbuffer::s_info
         + ~((_QWORD)&WebCore::JSWebGLRenderbuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderbuffer::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebGLRenderbuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLRenderbuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLRenderbuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLRenderbufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLRenderbufferPrototype::create((WebCore::JSWebGLRenderbufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLRenderbuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLRenderbuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5360) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLRenderbufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLRenderbufferPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderbuffer>,(WebCore::DOMConstructorID)670>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLRenderbufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLRenderbuffer";
    a5[1] = 33;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950E231CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLRenderbufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLRenderbuffer>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLRenderbuffer *__hidden))a3 != off_1E33DE660)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E28D8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLRenderbuffer::s_info
         + ~((_QWORD)&WebCore::JSWebGLRenderbuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderbuffer::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebGLRenderbuffer::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLRenderbuffer::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLRenderbuffer::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLRenderbufferPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLRenderbufferPrototype::create((WebCore::JSWebGLRenderbufferPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLRenderbuffer::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLRenderbuffer::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5440);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5440))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5440);
    *(_QWORD *)(v36 + 5440) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5440);
  *(_QWORD *)(v32 + 5440) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3371F0 & 1) == 0)
  {
    qword_1EE3371E8 = (uint64_t)&off_1E3336CE0;
    byte_1EE3371F0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3371E8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSWebGLRenderingContext::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return WebCore::JSWebGLRenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLRenderingContext::prototype(WebCore::JSWebGLRenderingContext *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
      + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
                                                                      + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSWebGLRenderingContext::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSWebGLRenderingContext::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    Structure = WebCore::JSWebGLRenderingContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSWebGLRenderingContextPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSWebGLRenderingContext::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSWebGLRenderingContext::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSWebGLRenderingContext::destroy(uint64_t this, JSCell *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 24))(*(_QWORD *)(v2 + 40));
  return this;
}

uint64_t WebCore::JSWebGLRenderingContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLRenderingContext::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSWebGLRenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSWebGLRenderingContext::visitChildren(WebCore::JSWebGLRenderingContext *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = WebCore::JSWebGLRenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebGLRenderingContext::JSWebGLRenderingContext(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(result + 24) = v6;
  return result;
}

unint64_t WebCore::JSWebGLRenderingContext::createPrototype(WebCore::JSWebGLRenderingContext *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v5;
  JSC::Structure *v6;

  Structure = WebCore::JSWebGLRenderingContextPrototype::createStructure((uint64_t *)this, (uint64_t)a2, a2[82]);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSWebGLRenderingContextPrototype::create(this, Structure, v5, v6);
}

uint64_t WebCore::JSWebGLRenderingContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLRenderingContextPrototype::create(WebCore::JSWebGLRenderingContextPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSWebGLRenderingContextPrototypeTableValues;
  v11 = 438;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSWebGLRenderingContextPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v27[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLRenderingContext::s_info, (unint64_t *)v27, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 432) & 0x200000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v27[0];
    v17 = *v9;
    *v9 = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, v27);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v28 = 0;
  v29 = v24;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderingContext>,(WebCore::DOMConstructorID)671>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  char *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5368);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v39) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v39, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderingContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v38);
    v9[2848] = v2 + (int)v38;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v39);
  v13 = v39;
  v39 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v39);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
       + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSWebGLRenderingContext::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSWebGLRenderingContext::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSWebGLRenderingContextPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSWebGLRenderingContextPrototype::create((WebCore::JSWebGLRenderingContextPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSWebGLRenderingContext::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLRenderingContext::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  v31 = &WebCore::JSWebGLRenderingContextConstructorTableValues;
  v32 = 296;
  do
  {
    v33 = v31[1];
    if (v33)
    {
      if (v33 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(a1 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v34 = v39;
      JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebGLRenderingContext::s_info, (unint64_t *)&v39, (uint64_t)v31, (unsigned __int8 *)v2);
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v35);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    v31 += 5;
    --v32;
  }
  while (v32);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5368) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLRenderingContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLRenderingContextPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLRenderingContext>,(WebCore::DOMConstructorID)671>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebGLRenderingContext_canvas(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLElement *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
  {
    v6 = v4 - 32;
    ++*(_DWORD *)(v4 - 8);
    v7 = 1;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1950E3834);
    }
    v7 = 0;
    v6 = v4 - 112;
    *(_DWORD *)(v4 - 88) += 2;
  }
  v12 = v6;
  v13 = v7;
  v17 = v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v3;
  v18[4] = &v12;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_17HTMLCanvasElementEEENS4_INS_15OffscreenCanvasEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((uint64_t)v18, v5, (uint64_t)v14);
  if (v16)
  {
    v8 = v15;
    if (v13 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E333F938[v13])(v18, &v12);
    return v8;
  }
  else
  {
    v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::jsWebGLRenderingContext_drawingBufferWidth(v10, v11);
  }
}

unint64_t WebCore::jsWebGLRenderingContext_drawingBufferWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 364))
    return 0xFFFE000000000000;
  v4 = *(_DWORD **)(**(_QWORD **)(v2 + 128) + 88);
  if (v4)
  {
    v5 = v4[2];
    v4[2] = v5 + 1;
  }
  else
  {
    v5 = MEMORY[8] - 1;
  }
  v6 = v4[3];
  if (v5)
    v4[2] = v5;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  return v6 | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebGLRenderingContext_drawingBufferHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 364))
    return 0xFFFE000000000000;
  v4 = *(_QWORD *)(**(_QWORD **)(v2 + 128) + 88);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v4 + 8) = v5 + 1;
  }
  else
  {
    v5 = MEMORY[8] - 1;
  }
  v6 = *(_QWORD *)(v4 + 12);
  if (v5)
    *(_DWORD *)(v4 + 8) = v5;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return HIDWORD(v6) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebGLRenderingContext_drawingBufferColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::InspectorInstrumentation *v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD v10[2];
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10[0] = 0;
    v10[1] = 0;
    v5 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 144))(*(_QWORD *)(v3 + 40));
    if (v5)
    {
      v7 = WebCore::InspectorInstrumentation::instrumentingAgents(v5, v6);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 96);
        if (v8)
          WebCore::InspectorCanvasAgent::recordAction(v8, (WebCore::CanvasRenderingContext *)(v3 + 8), (const WTF::StringImpl *)&v11, v10);
      }
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return WebCore::convertEnumerationToJS<WebCore::PredefinedColorSpace>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(v3 + 386));
}

BOOL WebCore::setJSWebGLRenderingContext_drawingBufferColorSpace(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 v11;
  int v12;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];
  WTF::StringImpl *v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGLRenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGLRenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::PredefinedColorSpace>(a1, (unint64_t)this);
  v11 = v10;
  v12 = HIBYTE(v10);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v12)
      return result;
  }
  else if (!HIBYTE(v10))
  {
    return 0;
  }
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v15
      && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
      && (v18 = *(_QWORD *)(v17 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v18, v9 + 8, v11, (uint64_t)v27);
    }
    else
    {
      LOBYTE(v27[0]) = 0;
      v28 = 0;
    }
    v25[0] = v27;
    v25[1] = 1;
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v19)
    {
      v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 96);
        if (v22)
          WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v26, v25);
      }
    }
    if (v28)
    {
      v23 = (_DWORD *)v27[0];
      v27[0] = 0;
      if (v23)
      {
        if (*v23 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v23;
      }
    }
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  WebCore::WebGLRenderingContextBase::setDrawingBufferColorSpace(v9, v11);
  return 1;
}

uint64_t WebCore::JSWebGLRenderingContext::subspaceForImpl(WebCore::JSWebGLRenderingContext *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5448);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 5448);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 5448);
    *(_QWORD *)(v8 + 5448) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 5448);
  *(_QWORD *)(v3 + 5448) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSWebGLRenderingContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::ConcurrentPtrHashSet *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t result;
  void *v22;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[7];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[8] || ((*(uint64_t (**)(_QWORD *))(v8[6] + 64))(v8 + 6) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  v11 = (void *)v8[5];
  if (a5)
  {
    *a5 = "Reachable from CanvasBase";
    a5[1] = 26;
  }
  v12 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v13 = (_DWORD *)*((_QWORD *)v12 + 6);
  if ((_DWORD *)((char *)v12 + 56) == v13)
  {
    v22 = v11;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v12, v11);
    v11 = v22;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  v14 = v13[1];
  v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = v18;
  while (1)
  {
    v20 = *(void **)&v13[2 * v19 + 4];
    if (!v20)
      return 0;
    if (v11 == v20)
      goto LABEL_19;
    v19 = (v19 + 1) & v14;
    if (v19 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1950E3EC8);
    }
  }
}

_QWORD *WebCore::JSWebGLRenderingContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 16))(*(_QWORD *)(v4 + 40));
  v6 = v4 + 16;
  if (!v4)
    v6 = 0;
  if (!*(_DWORD *)(a3 + 48))
  {
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  }
  v9 = *(_QWORD *)(a3 + 32);
  v8 = (uint64_t *)(a3 + 32);
  v7 = v9;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  v10 = *(_DWORD *)(v7 - 8);
  v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(_QWORD *)(v7 + 16 * v14);
  if (v15 != v4)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(_QWORD *)(v7 + 16 * v14);
      ++v16;
      if (v15 == v4)
        goto LABEL_12;
    }
    v14 = *(unsigned int *)(v7 - 4);
  }
LABEL_12:
  if (v14 == *(_DWORD *)(v7 - 4))
    goto LABEL_22;
  v17 = (_QWORD *)(v7 + 16 * v14);
  *v17 = -1;
  v20 = v17[1];
  v19 = v17 + 1;
  v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 8) = 3;
    *v19 = 0;
  }
  ++*(_DWORD *)(*v8 - 16);
  v21 = *v8;
  v22 = *v8 ? *(_DWORD *)(v21 - 12) - 1 : -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v8;
  if (!*v8
    || ((v24 = 6 * *(_DWORD *)(v23 - 12), v25 = *(_DWORD *)(v23 - 4), v24 < v25) ? (v26 = v25 >= 9) : (v26 = 0), !v26))
  {
LABEL_22:
    if (!v4)
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  }
  result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLRenderingContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  JSC::VM *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  WebCore::JSWebGLRenderingContext *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *Allocator;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v35 = *(_QWORD *)(v5 + 32);
    if (!v35)
      goto LABEL_5;
    v36 = *(_DWORD *)(v35 - 8);
    v37 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v40 = v36 & ((v39 >> 31) ^ v39);
    v41 = *(_QWORD *)(v35 + 16 * v40);
    if (v41 != a3)
    {
      v42 = 1;
      while (v41)
      {
        v40 = ((_DWORD)v40 + v42) & v36;
        v41 = *(_QWORD *)(v35 + 16 * v40);
        ++v42;
        if (v41 == a3)
          goto LABEL_43;
      }
      goto LABEL_5;
    }
LABEL_43:
    v6 = *(_QWORD *)(v35 + 16 * v40 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 40) + 16))(*(_QWORD *)(a3 + 40));
  if (*(void (***)(WebCore::WebGLRenderingContext *__hidden))a3 != off_1E33DE9D8)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E43ECLL);
  }
  v9 = *(_QWORD *)(a2 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
         + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderingContext::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebGLRenderingContext::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSWebGLRenderingContext::s_info)
    {
LABEL_11:
      v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v17)
        goto LABEL_13;
    }
    else
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v16;
        if (v15 == &WebCore::JSWebGLRenderingContext::s_info)
          goto LABEL_11;
      }
    }
  }
  v18 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLRenderingContextPrototype::createStructure(v18, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSWebGLRenderingContextPrototype::create((WebCore::JSWebGLRenderingContextPrototype *)v18, Structure, v20, v21);
  v23 = WebCore::JSWebGLRenderingContext::createStructure(v18, a2, v22);
  v17 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSWebGLRenderingContext::s_info);
LABEL_13:
  v24 = *(WebCore::JSWebGLRenderingContext **)(a2 + 56);
  v25 = (_QWORD *)WebCore::JSWebGLRenderingContext::subspaceForImpl(v24, v8);
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_14:
    v25[3] = SlowCase + 32;
    goto LABEL_15;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v43);
    v25[5] = SlowCase + (int)v43;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_15:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v17);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*((_BYTE *)v24 + 755))
    __dmb(0xAu);
  v26 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337200 & 1) == 0)
  {
    qword_1EE3371F8 = (uint64_t)&off_1E3336D10;
    byte_1EE337200 = 1;
  }
  if (!*(_DWORD *)(v26 + 48))
  {
    if ((SlowCase & 8) != 0)
      v27 = (SlowCase - 112) | 1;
    else
      v27 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = v27 + 47;
    else
      v28 = *(_QWORD *)v27 + 32;
    Allocator = *(_QWORD **)(v28 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v28 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3371F8;
    Allocator[2] = v26;
    v30 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v30)
      return SlowCase;
LABEL_37:
    *(_QWORD *)(v30 + 8) = 3;
    return SlowCase;
  }
  v45 = a3;
  if ((SlowCase & 8) != 0)
    v32 = (SlowCase - 112) | 1;
  else
    v32 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v32 & 1) != 0)
    v33 = v32 + 47;
  else
    v33 = *(_QWORD *)v32 + 32;
  v34 = *(_QWORD **)(v33 + 16);
  if (!v34)
    v34 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v33 + 16) = *v34;
  *v34 = SlowCase;
  v34[1] = &qword_1EE3371F8;
  v34[2] = v26;
  v44 = v34;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v26 + 32), &v45, (uint64_t *)&v44);
  v30 = (uint64_t)v44;
  if (v44)
    goto LABEL_37;
  return SlowCase;
}

uint64_t WebCore::JSWebGLRenderingContext::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSWebGLRenderingContext::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSWebGLRenderingContext::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

_DWORD *WebCore::JSWebGLSampler::destroy(WebCore::JSWebGLSampler *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLSampler::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLSamplerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLSamplerPrototype::create(WebCore::JSWebGLSamplerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLSampler::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLSamplerPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSampler>,(WebCore::DOMConstructorID)672>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5376);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSampler>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLSampler::s_info + ~((_QWORD)&WebCore::JSWebGLSampler::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLSampler::s_info + ~((_QWORD)&WebCore::JSWebGLSampler::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLSampler::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLSampler::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLSamplerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLSamplerPrototype::create((WebCore::JSWebGLSamplerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLSampler::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLSampler::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5376) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLSamplerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLSamplerPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSampler>,(WebCore::DOMConstructorID)672>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLSamplerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLSampler";
    a5[1] = 28;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950E4EF8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLSamplerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLSampler>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLSampler *__hidden))a3 != off_1E33DE988)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E54B4);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLSampler::s_info + ~((_QWORD)&WebCore::JSWebGLSampler::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLSampler::s_info + ~((_QWORD)&WebCore::JSWebGLSampler::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLSampler::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLSampler::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLSamplerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLSamplerPrototype::create((WebCore::JSWebGLSamplerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLSampler::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLSampler::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5456);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5456))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5456);
    *(_QWORD *)(v36 + 5456) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5456);
  *(_QWORD *)(v32 + 5456) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337210 & 1) == 0)
  {
    qword_1EE337208 = (uint64_t)&off_1E3336D40;
    byte_1EE337210 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337208;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLShader::destroy(WebCore::JSWebGLShader *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLShader::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLShaderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLShaderPrototype::create(WebCore::JSWebGLShaderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLShader::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLShaderPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShader>,(WebCore::DOMConstructorID)673>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5384);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShader>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLShader::s_info + ~((_QWORD)&WebCore::JSWebGLShader::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLShader::s_info + ~((_QWORD)&WebCore::JSWebGLShader::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLShader::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLShader::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLShaderPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLShaderPrototype::create((WebCore::JSWebGLShaderPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLShader::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLShader::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5384) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLShaderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLShaderPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShader>,(WebCore::DOMConstructorID)673>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLShaderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLShader";
    a5[1] = 27;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950E5F34);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLShaderOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLShader>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLShader *__hidden))a3 != off_1E33DE9B0)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E64F0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLShader::s_info + ~((_QWORD)&WebCore::JSWebGLShader::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLShader::s_info + ~((_QWORD)&WebCore::JSWebGLShader::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLShader::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLShader::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLShaderPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLShaderPrototype::create((WebCore::JSWebGLShaderPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLShader::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLShader::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5464);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5464))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5464);
    *(_QWORD *)(v36 + 5464) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5464);
  *(_QWORD *)(v32 + 5464) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337220 & 1) == 0)
  {
    qword_1EE337218 = (uint64_t)&off_1E3336D70;
    byte_1EE337220 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337218;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

WTF *WebCore::JSWebGLShaderPrecisionFormat::destroy(WebCore::JSWebGLShaderPrecisionFormat *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSWebGLShaderPrecisionFormat::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLShaderPrecisionFormatPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLShaderPrecisionFormatPrototype::create(WebCore::JSWebGLShaderPrecisionFormatPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info, &WebCore::JSWebGLShaderPrecisionFormatPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShaderPrecisionFormat>,(WebCore::DOMConstructorID)674>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5392);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShaderPrecisionFormat>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info
         + ~((_QWORD)&WebCore::JSWebGLShaderPrecisionFormat::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebGLShaderPrecisionFormat::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLShaderPrecisionFormat::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLShaderPrecisionFormat::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLShaderPrecisionFormatPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLShaderPrecisionFormatPrototype::create((WebCore::JSWebGLShaderPrecisionFormatPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLShaderPrecisionFormat::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5392) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLShaderPrecisionFormatConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLShaderPrecisionFormatPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLShaderPrecisionFormat>,(WebCore::DOMConstructorID)674>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebGLShaderPrecisionFormat_rangeMin(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 4) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebGLShaderPrecisionFormat_rangeMax(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 8) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebGLShaderPrecisionFormat_precision(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 12) | 0xFFFE000000000000;
}

uint64_t WebCore::JSWebGLShaderPrecisionFormatOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebGLShaderPrecisionFormatOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLShaderPrecisionFormat>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info
         + ~((_QWORD)&WebCore::JSWebGLShaderPrecisionFormat::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebGLShaderPrecisionFormat::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLShaderPrecisionFormat::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLShaderPrecisionFormat::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLShaderPrecisionFormatPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLShaderPrecisionFormatPrototype::create((WebCore::JSWebGLShaderPrecisionFormatPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLShaderPrecisionFormat::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLShaderPrecisionFormat::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5472);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5472))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5472);
    *(_QWORD *)(v36 + 5472) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5472);
  *(_QWORD *)(v32 + 5472) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337230 & 1) == 0)
  {
    qword_1EE337228 = (uint64_t)&off_1E3336DA0;
    byte_1EE337230 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337228;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLStencilTexturing::destroy(WebCore::JSWebGLStencilTexturing *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLStencilTexturing::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLStencilTexturingOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLStencilTexturing";
    a5[1] = 39;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1950E7664);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLStencilTexturingOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLStencilTexturing>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLStencilTexturing *__hidden))a3 != off_1E33DEE40)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E7E4CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLStencilTexturing::s_info
         + ~((_QWORD)&WebCore::JSWebGLStencilTexturing::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLStencilTexturing::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebGLStencilTexturing::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLStencilTexturing::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLStencilTexturing::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLStencilTexturingPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLStencilTexturing::s_info, (uint64_t)&WebCore::JSWebGLStencilTexturingPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLStencilTexturing::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLStencilTexturing::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5480);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5480))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5480);
    *(_QWORD *)(v46 + 5480) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5480);
  *(_QWORD *)(v42 + 5480) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337240 & 1) == 0)
  {
    qword_1EE337238 = (uint64_t)&off_1E3336DD0;
    byte_1EE337240 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337238;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLSync::destroy(WebCore::JSWebGLSync *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLSync::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLSyncPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLSyncPrototype::create(WebCore::JSWebGLSyncPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLSync::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLSyncPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSync>,(WebCore::DOMConstructorID)676>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5408);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSync>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLSync::s_info + ~((_QWORD)&WebCore::JSWebGLSync::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLSync::s_info + ~((_QWORD)&WebCore::JSWebGLSync::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLSync::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLSync::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLSyncPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLSyncPrototype::create((WebCore::JSWebGLSyncPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLSync::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLSync::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5408) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLSyncConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLSyncPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLSync>,(WebCore::DOMConstructorID)676>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLSyncOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebGLSyncOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLSync>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLSync *__hidden))a3 != off_1E33DEE60)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E8E9CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLSync::s_info + ~((_QWORD)&WebCore::JSWebGLSync::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLSync::s_info + ~((_QWORD)&WebCore::JSWebGLSync::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLSync::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLSync::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLSyncPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLSyncPrototype::create((WebCore::JSWebGLSyncPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLSync::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLSync::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5488);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5488))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5488);
    *(_QWORD *)(v36 + 5488) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5488);
  *(_QWORD *)(v32 + 5488) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337250 & 1) == 0)
  {
    qword_1EE337248 = (uint64_t)&off_1E3336E00;
    byte_1EE337250 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337248;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLTexture::destroy(WebCore::JSWebGLTexture *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLTexture::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLTexturePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLTexturePrototype::create(WebCore::JSWebGLTexturePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLTexture::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLTexturePrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTexture>,(WebCore::DOMConstructorID)677>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5416);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTexture>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLTexture::s_info + ~((_QWORD)&WebCore::JSWebGLTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLTexture::s_info + ~((_QWORD)&WebCore::JSWebGLTexture::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLTexture::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLTexture::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLTexturePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLTexturePrototype::create((WebCore::JSWebGLTexturePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLTexture::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLTexture::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5416) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLTextureConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLTexturePrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTexture>,(WebCore::DOMConstructorID)677>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLTextureOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLTexture";
    a5[1] = 28;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950E991CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLTextureOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLTexture>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLTexture *__hidden))a3 != off_1E33DEE88)
  {
    __break(0xC471u);
    JUMPOUT(0x1950E9ED8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLTexture::s_info + ~((_QWORD)&WebCore::JSWebGLTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLTexture::s_info + ~((_QWORD)&WebCore::JSWebGLTexture::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLTexture::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLTexture::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLTexturePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLTexturePrototype::create((WebCore::JSWebGLTexturePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLTexture::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLTexture::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5496);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5496))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5496);
    *(_QWORD *)(v36 + 5496) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5496);
  *(_QWORD *)(v32 + 5496) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337260 & 1) == 0)
  {
    qword_1EE337258 = (uint64_t)&off_1E3336E30;
    byte_1EE337260 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337258;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLTimerQueryEXT::destroy(WebCore::JSWebGLTimerQueryEXT *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLTimerQueryEXT::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLTimerQueryEXTOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLTimerQueryEXT";
    a5[1] = 34;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950EA180);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLTimerQueryEXTOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLTimerQueryEXT>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLTimerQueryEXT *__hidden))a3 != off_1E33DEEB0)
  {
    __break(0xC471u);
    JUMPOUT(0x1950EA94CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLTimerQueryEXT::s_info
         + ~((_QWORD)&WebCore::JSWebGLTimerQueryEXT::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLTimerQueryEXT::s_info
                                                                      + ~((_QWORD)&WebCore::JSWebGLTimerQueryEXT::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLTimerQueryEXT::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLTimerQueryEXT::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLTimerQueryEXTPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLTimerQueryEXT::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLTimerQueryEXT::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5504);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5504))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5504);
    *(_QWORD *)(v46 + 5504) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5504);
  *(_QWORD *)(v42 + 5504) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337270 & 1) == 0)
  {
    qword_1EE337268 = (uint64_t)&off_1E3336E60;
    byte_1EE337270 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337268;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLTransformFeedback::destroy(WebCore::JSWebGLTransformFeedback *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLTransformFeedback::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLTransformFeedbackPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLTransformFeedbackPrototype::create(WebCore::JSWebGLTransformFeedbackPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLTransformFeedback::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLTransformFeedbackPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTransformFeedback>,(WebCore::DOMConstructorID)679>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5432);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTransformFeedback>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLTransformFeedback::s_info
         + ~((_QWORD)&WebCore::JSWebGLTransformFeedback::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLTransformFeedback::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLTransformFeedback::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLTransformFeedback::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLTransformFeedback::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLTransformFeedbackPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLTransformFeedbackPrototype::create((WebCore::JSWebGLTransformFeedbackPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLTransformFeedback::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLTransformFeedback::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5432) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLTransformFeedbackConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLTransformFeedbackPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLTransformFeedback>,(WebCore::DOMConstructorID)679>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLTransformFeedbackOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLTransformFeedback";
    a5[1] = 38;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950EB4E0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLTransformFeedbackOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLTransformFeedback>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLTransformFeedback *__hidden))a3 != off_1E33DEED8)
  {
    __break(0xC471u);
    JUMPOUT(0x1950EBA9CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLTransformFeedback::s_info
         + ~((_QWORD)&WebCore::JSWebGLTransformFeedback::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLTransformFeedback::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLTransformFeedback::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLTransformFeedback::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLTransformFeedback::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLTransformFeedbackPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLTransformFeedbackPrototype::create((WebCore::JSWebGLTransformFeedbackPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLTransformFeedback::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLTransformFeedback::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5512);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5512))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5512);
    *(_QWORD *)(v36 + 5512) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5512);
  *(_QWORD *)(v32 + 5512) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337280 & 1) == 0)
  {
    qword_1EE337278 = (uint64_t)&off_1E3336E90;
    byte_1EE337280 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337278;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSWebGLUniformLocation::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  _DWORD *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (_DWORD *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (v3[2] == 1)
          (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
        else
          --v3[2];
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSWebGLUniformLocation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLUniformLocationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLUniformLocationPrototype::create(WebCore::JSWebGLUniformLocationPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLUniformLocation::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLUniformLocationPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLUniformLocation>,(WebCore::DOMConstructorID)680>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5440);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLUniformLocation>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLUniformLocation::s_info
         + ~((_QWORD)&WebCore::JSWebGLUniformLocation::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLUniformLocation::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebGLUniformLocation::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLUniformLocation::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLUniformLocation::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLUniformLocationPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLUniformLocationPrototype::create((WebCore::JSWebGLUniformLocationPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLUniformLocation::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLUniformLocation::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5440) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLUniformLocationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLUniformLocationPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLUniformLocation>,(WebCore::DOMConstructorID)680>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLUniformLocationOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebGLUniformLocationOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _DWORD *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (_DWORD *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (v24[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      else
        --v24[2];
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::WebGLUniformLocation>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLUniformLocation::s_info
         + ~((_QWORD)&WebCore::JSWebGLUniformLocation::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLUniformLocation::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebGLUniformLocation::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLUniformLocation::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLUniformLocation::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLUniformLocationPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLUniformLocationPrototype::create((WebCore::JSWebGLUniformLocationPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLUniformLocation::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLUniformLocation::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5520);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5520))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5520);
    *(_QWORD *)(v36 + 5520) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5520);
  *(_QWORD *)(v32 + 5520) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337290 & 1) == 0)
  {
    qword_1EE337288 = (uint64_t)&off_1E3336EC0;
    byte_1EE337290 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337288;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLVertexArrayObject::destroy(WebCore::JSWebGLVertexArrayObject *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLVertexArrayObject::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLVertexArrayObjectPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLVertexArrayObjectPrototype::create(WebCore::JSWebGLVertexArrayObjectPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLVertexArrayObject::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLVertexArrayObjectPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLVertexArrayObject>,(WebCore::DOMConstructorID)681>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5448);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLVertexArrayObject>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLVertexArrayObject::s_info
         + ~((_QWORD)&WebCore::JSWebGLVertexArrayObject::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLVertexArrayObject::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLVertexArrayObject::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLVertexArrayObject::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLVertexArrayObject::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLVertexArrayObjectPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLVertexArrayObjectPrototype::create((WebCore::JSWebGLVertexArrayObjectPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLVertexArrayObject::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLVertexArrayObject::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5448) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLVertexArrayObjectConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLVertexArrayObjectPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLVertexArrayObject>,(WebCore::DOMConstructorID)681>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLVertexArrayObjectOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLVertexArrayObject";
    a5[1] = 38;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950ED488);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLVertexArrayObjectOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLVertexArrayObject>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLVertexArrayObject *__hidden))a3 != off_1E33DEF00)
  {
    __break(0xC471u);
    JUMPOUT(0x1950EDA44);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLVertexArrayObject::s_info
         + ~((_QWORD)&WebCore::JSWebGLVertexArrayObject::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLVertexArrayObject::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLVertexArrayObject::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLVertexArrayObject::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLVertexArrayObject::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLVertexArrayObjectPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLVertexArrayObjectPrototype::create((WebCore::JSWebGLVertexArrayObjectPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLVertexArrayObject::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLVertexArrayObject::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5528);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5528))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5528);
    *(_QWORD *)(v36 + 5528) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5528);
  *(_QWORD *)(v32 + 5528) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3372A0 & 1) == 0)
  {
    qword_1EE337298 = (uint64_t)&off_1E3336EF0;
    byte_1EE3372A0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337298;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLVertexArrayObjectOES::destroy(WebCore::JSWebGLVertexArrayObjectOES *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLVertexArrayObjectOES::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLVertexArrayObjectOESOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLVertexArrayObjectOES";
    a5[1] = 41;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1950EDCECLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLVertexArrayObjectOESOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLVertexArrayObjectOES>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLVertexArrayObjectOES *__hidden))a3 != off_1E33DEF88)
  {
    __break(0xC471u);
    JUMPOUT(0x1950EE4B8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLVertexArrayObjectOES::s_info
         + ~((_QWORD)&WebCore::JSWebGLVertexArrayObjectOES::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLVertexArrayObjectOES::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebGLVertexArrayObjectOES::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLVertexArrayObjectOES::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLVertexArrayObjectOES::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLVertexArrayObjectOESPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLVertexArrayObjectOES::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLVertexArrayObjectOES::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5536);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5536))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5536);
    *(_QWORD *)(v46 + 5536) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5536);
  *(_QWORD *)(v42 + 5536) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3372B0 & 1) == 0)
  {
    qword_1EE3372A8 = (uint64_t)&off_1E3336F20;
    byte_1EE3372B0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3372A8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

WTF *WebCore::JSWebKitMediaKeyError::destroy(WebCore::JSWebKitMediaKeyError *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyError::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyErrorPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitMediaKeyErrorPrototype::create(WebCore::JSWebKitMediaKeyErrorPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebKitMediaKeyError::s_info, (uint64_t)&WebCore::JSWebKitMediaKeyErrorPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeyError>,(WebCore::DOMConstructorID)601>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4808);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeyError>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebKitMediaKeyError::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeyError::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyError::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebKitMediaKeyError::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebKitMediaKeyError::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebKitMediaKeyError::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebKitMediaKeyErrorPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyErrorPrototype::create((WebCore::JSWebKitMediaKeyErrorPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebKitMediaKeyError::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebKitMediaKeyError::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  JSC::reifyStaticProperties<6u>((JSC::VM *)a1, (uint64_t)&WebCore::JSWebKitMediaKeyError::s_info, &WebCore::JSWebKitMediaKeyErrorConstructorTableValues, (JSC::JSObject *)v2);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 4808) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitMediaKeyErrorConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitMediaKeyErrorPrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeyError>,(WebCore::DOMConstructorID)601>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebKitMediaKeyError_code(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 4) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebKitMediaKeyError_systemCode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) | 0xFFFE000000000000;
}

uint64_t WebCore::JSWebKitMediaKeyErrorOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebKitMediaKeyErrorOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyMessageEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  unint64_t v2;
  JSC::VM *v4;
  uint64_t v6;
  int v7;
  JSC::JSCell *v8;
  WTF::StringImpl *v9;
  uint64_t Object;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  char v17;
  JSC::VM *v18;
  double v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::VM *v23;
  double v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  JSC::VM *v28;
  double v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  WebCore::JSDOMGlobalObject *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  JSC::VM *v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  int v59;
  unint64_t v60;
  WebCore::JSEvent *v61;
  JSC::JSCell *v62;
  unint64_t Structure;
  JSC::Structure *v64;
  JSC::JSCell *v65;
  uint64_t v66;
  JSCell *v67;
  JSC::JSCell *v68;
  JSC::JSGlobalObject *v69;
  JSC::JSObject *v70;
  JSC::JSGlobalObject *v71;
  JSC::VM *v72;
  WebCore::JSDOMGlobalObject *v73;
  JSC::Structure *v74;
  JSC::VM *FunctionRealm;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char **v82;
  int v83;
  JSC::JSCell *v84;
  unint64_t v85;
  JSC::Structure *v86;
  JSC::JSCell *v87;
  uint64_t v88;
  unint64_t SubclassStructure;
  _DWORD *v90;
  JSValue v92;
  int hasExceptionsAfterHandlingTraps;
  BOOL v94;
  int v95;
  uint64_t v96;
  int *v97;
  int v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  int *v102;
  int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  int *v107;
  int v108;
  uint64_t v109;
  JSC::VM *v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  _DWORD *v114;
  WTF::StringImpl *v115;
  int v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  int v120;
  uint64_t v121;
  int v122;
  JSC::VM *v123;
  unint64_t v124;
  int v125;
  char v126[9];

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v92.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, a1, v92);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v117);
  v7 = v118;
  if (!v118)
  {
    v109 = v6;
    v110 = v4;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v123 = (JSC::VM *)*((_QWORD *)a1 + 7);
    }
    else
    {
      v8 = *(JSC::JSCell **)(a2 + 56);
      v9 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      v123 = v9;
      if (((unint64_t)v8 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
        if (((unint64_t)v8 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v8)) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_143;
        }
        v11 = Object;
        WTF::AtomStringImpl::addLiteral();
        v12 = (WTF::StringImpl *)v124;
        v2 = JSC::JSObject::get((JSC::Structure *)v11, a1, v124);
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        {
LABEL_143:
          v67 = 0;
          v36 = 1;
          v116 = 1;
LABEL_118:
          ((void (*)(unint64_t *, BOOL *))off_1E333EAC8[v36])(&v124, &v111);
          v7 = v118;
          goto LABEL_119;
        }
        if (v2 == 10)
        {
          v14 = 0;
          while (1)
          {
            WTF::AtomStringImpl::addLiteral();
            v20 = (WTF::StringImpl *)v124;
            v22 = JSC::JSObject::get((JSC::Structure *)v11, a1, v124);
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v21);
              else
                *(_DWORD *)v20 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_143;
            if (v22 == 10)
            {
              v15 = 0;
              goto LABEL_35;
            }
            v23 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v22 >= 0xFFFE000000000000)
              break;
            *(_QWORD *)&v24 = v22 - 0x2000000000000;
            if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v22 & 0xFFFE000000000002) != 0)
              {
                v15 = v22 == 7;
                goto LABEL_34;
              }
              v100 = *(unsigned __int8 *)(v22 + 5);
              if (v100 == 3)
              {
                v103 = *(_DWORD *)(v22 + 8);
                goto LABEL_210;
              }
              if (v100 == 2)
              {
                v101 = *(_QWORD *)(v22 + 8);
                if ((v101 & 1) != 0)
                  v102 = (int *)(v22 + 16);
                else
                  v102 = (int *)(v101 + 4);
                v103 = *v102;
LABEL_210:
                v99 = v103 == 0;
              }
              else
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_212:
                  v15 = 1;
                  goto LABEL_34;
                }
                v99 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              }
LABEL_222:
              v15 = !v99;
              goto LABEL_34;
            }
            if (v24 > 0.0)
              goto LABEL_212;
            v15 = v24 < 0.0;
LABEL_34:
            if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
              goto LABEL_143;
LABEL_35:
            WTF::AtomStringImpl::addLiteral();
            v25 = (WTF::StringImpl *)v124;
            v27 = JSC::JSObject::get((JSC::Structure *)v11, a1, v124);
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v26);
              else
                *(_DWORD *)v25 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_143;
            if (v27 == 10)
            {
              v16 = 0;
              goto LABEL_46;
            }
            v28 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if (v27 >= 0xFFFE000000000000)
            {
              v104 = (_DWORD)v27 == 0;
              goto LABEL_226;
            }
            *(_QWORD *)&v29 = v27 - 0x2000000000000;
            if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            {
              if ((v27 & 0xFFFE000000000002) != 0)
              {
                v16 = v27 == 7;
                goto LABEL_45;
              }
              v105 = *(unsigned __int8 *)(v27 + 5);
              if (v105 == 3)
              {
                v108 = *(_DWORD *)(v27 + 8);
              }
              else
              {
                if (v105 != 2)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_216:
                    v16 = 1;
                    goto LABEL_45;
                  }
                  v104 = *(_QWORD *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                  goto LABEL_226;
                }
                v106 = *(_QWORD *)(v27 + 8);
                if ((v106 & 1) != 0)
                  v107 = (int *)(v27 + 16);
                else
                  v107 = (int *)(v106 + 4);
                v108 = *v107;
              }
              v104 = v108 == 0;
LABEL_226:
              v16 = !v104;
              goto LABEL_45;
            }
            if (v29 > 0.0)
              goto LABEL_216;
            v16 = v29 < 0.0;
LABEL_45:
            if (*((_DWORD *)v28 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) != 0)
              goto LABEL_143;
LABEL_46:
            WTF::AtomStringImpl::addLiteral();
            v30 = (WTF::StringImpl *)v124;
            v2 = JSC::JSObject::get((JSC::Structure *)v11, a1, v124);
            if (v30)
            {
              if (*(_DWORD *)v30 == 2)
                WTF::StringImpl::destroy(v30, v31);
              else
                *(_DWORD *)v30 -= 2;
            }
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              goto LABEL_143;
            if (v2 == 10)
            {
              v17 = 0;
LABEL_15:
              v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
                *(_DWORD *)v9 += 2;
              v122 = 0;
              v121 = 0;
              if ((v17 & 1) != 0)
                goto LABEL_67;
              goto LABEL_61;
            }
            v124 = v2;
            v32 = (JSC::VM *)*((_QWORD *)a1 + 7);
            if ((v2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v124, a1);
              goto LABEL_58;
            }
            v33 = *(WTF::StringImpl **)(v2 + 8);
            if ((v33 & 1) != 0)
            {
              v33 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
              if (!v33)
                goto LABEL_57;
LABEL_56:
              *(_DWORD *)v33 += 2;
              goto LABEL_57;
            }
            if (v33)
              goto LABEL_56;
LABEL_57:
            v119 = v33;
LABEL_58:
            if (*((_DWORD *)v32 + 20))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v32);
              v9 = v119;
              if (hasExceptionsAfterHandlingTraps)
              {
                v36 = 1;
                v122 = 1;
                v119 = 0;
                if (v9)
                {
                  if (*(_DWORD *)v9 == 2)
                    WTF::StringImpl::destroy(v9, v37);
                  else
                    *(_DWORD *)v9 -= 2;
                }
                v9 = 0;
                goto LABEL_175;
              }
            }
            else
            {
              v9 = v119;
            }
            v122 = 0;
            v121 = 0;
LABEL_61:
            WTF::AtomStringImpl::addLiteral();
            v2 = v124;
            v11 = JSC::JSObject::get((JSC::Structure *)v11, a1, v124);
            if (v2)
            {
              if (*(_DWORD *)v2 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v2, v34);
              else
                *(_DWORD *)v2 -= 2;
            }
            if (!*((_DWORD *)v123 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v123))
            {
              if (v11 == 10 || (v11 & 0xFFFFFFFFFFFFFFF7) == 2)
              {
LABEL_67:
                v35 = 0;
                goto LABEL_68;
              }
              WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>(v11, (uint64_t)&v124);
              if (v125)
              {
                v120 = 1;
                if (v125 != -1)
                  ((void (*)(char *, unint64_t *))off_1E333ED28[v125])(v126, &v124);
                v36 = 1;
              }
              else
              {
                v35 = v124;
LABEL_68:
                v120 = 0;
                v36 = 0;
                v119 = 0;
                v111 = v14;
                v112 = v15;
                v113 = v16;
                v114 = (_DWORD *)v35;
                v115 = v9;
                v9 = 0;
              }
              v116 = v36;
              ((void (*)(unint64_t *, WTF::StringImpl **))off_1E333EAA8[v36])(&v124, &v119);
              goto LABEL_70;
            }
            v36 = 1;
LABEL_175:
            v116 = 1;
LABEL_70:
            if (v122 != -1)
              ((void (*)(unint64_t *, uint64_t *))off_1E333EAB8[v122])(&v124, &v121);
            if (!v9)
              goto LABEL_75;
            if (*(_DWORD *)v9 != 2)
            {
              *(_DWORD *)v9 -= 2;
LABEL_75:
              if (v36)
                goto LABEL_129;
              goto LABEL_76;
            }
            WTF::StringImpl::destroy(v9, v37);
            v36 = v116;
            if (v116)
            {
LABEL_129:
              v67 = 0;
              goto LABEL_118;
            }
LABEL_76:
            if (!v118)
            {
              v38 = v117;
              v117 = 0;
              v39 = v111;
              v40 = v112;
              v41 = v113;
              v42 = v114;
              v43 = v115;
              v114 = 0;
              v115 = 0;
              v44 = bmalloc::api::isoAllocate();
              WTF::MonotonicTime::now((WTF::MonotonicTime *)v44);
              *(_QWORD *)(v44 + 8) = 0;
              if (v39)
                v48 = 491522;
              else
                v48 = 491520;
              v49 = v48 | (v38 != 0) | (4 * v40) | (8 * v41) | *(_DWORD *)(v44 + 20) & 0xFFC00000;
              *(_DWORD *)(v44 + 16) = 1;
              *(_DWORD *)(v44 + 20) = v49;
              if (v38)
              {
                *(_DWORD *)v38 += 2;
                v49 = *(_DWORD *)(v44 + 20);
              }
              *(_QWORD *)(v44 + 24) = v38;
              *(_QWORD *)(v44 + 32) = 0;
              *(_QWORD *)(v44 + 40) = 0;
              *(_QWORD *)(v44 + 48) = 0;
              *(_QWORD *)(v44 + 56) = v47;
              *(_QWORD *)(v44 + 64) = 0;
              *(_DWORD *)(v44 + 20) = v49 | 0x4000;
              *(_QWORD *)v44 = off_1E3486620;
              if (v42)
                ++*v42;
              *(_QWORD *)(v44 + 72) = v42;
              if (v43)
              {
                v50 = *(_DWORD *)v43;
                *(_DWORD *)v43 += 2;
                *(_QWORD *)(v44 + 80) = v43;
                v124 = v44;
                if (v50)
                  *(_DWORD *)v43 = v50;
                else
                  WTF::StringImpl::destroy(v43, v45);
              }
              else
              {
                *(_QWORD *)(v44 + 80) = 0;
                v124 = v44;
              }
              if (v42)
              {
                if (*v42 != 1)
                {
                  --*v42;
                  goto LABEL_90;
                }
                JSC::ArrayBufferView::operator delete();
                if (!v38)
                {
LABEL_93:
                  if (*(void (***)(WebCore::WebKitMediaKeyMessageEvent *__hidden))v44 != off_1E3486620)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1950EFAF8);
                  }
                  v51 = *(JSC::VM **)(v109 + 40);
                  v52 = *((_QWORD *)v51 + 412);
                  if (!v52)
                    goto LABEL_100;
                  v53 = *(_DWORD *)(v52 - 8);
                  v54 = ((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                       + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                                                                                            + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) >> 22);
                  v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
                  v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
                  v57 = v53 & ((v56 >> 31) ^ v56);
                  v58 = *(char ***)(v52 + 16 * v57);
                  if (v58 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
                  {
LABEL_99:
                    v60 = *(_QWORD *)(v52 + 16 * v57 + 8);
                    if (!v60)
                      goto LABEL_100;
                  }
                  else
                  {
                    v59 = 1;
                    while (v58)
                    {
                      v57 = ((_DWORD)v57 + v59) & v53;
                      v58 = *(char ***)(v52 + 16 * v57);
                      ++v59;
                      if (v58 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
                        goto LABEL_99;
                    }
LABEL_100:
                    v61 = (WebCore::JSEvent *)*((_QWORD *)v51 + 7);
                    v62 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, *(JSC::VM **)(v109 + 40), v46);
                    Structure = WebCore::JSWebKitMediaKeyMessageEventPrototype::createStructure((uint64_t *)v61, (uint64_t)v51, v62);
                    *(_DWORD *)(Structure + 16) |= 0x80000u;
                    v65 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyMessageEventPrototype::create(v61, v51, Structure, v64);
                    v66 = WebCore::JSWebKitMediaKeyMessageEvent::createStructure((uint64_t *)v61, (uint64_t)v51, v65);
                    v60 = WebCore::cacheDOMStructure((JSCell *)v51, v66, (uint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info);
                  }
                  v67 = (JSCell *)WebCore::JSWebKitMediaKeyMessageEvent::create(v60, v51, (uint64_t *)&v124);
                  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v51 + 415), v44, (uint64_t)v67);
                  v68 = *(JSC::JSCell **)(a2 + 40);
                  if (((unint64_t)v68 & 0xFFFE000000000002) != 0
                    || (v69 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v68)) == 0
                    || (v71 = v69, v69 == *(JSC::JSGlobalObject **)(a2 + 24))
                    || (v72 = (JSC::VM *)*((_QWORD *)a1 + 7),
                        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v69, v70),
                        *((_DWORD *)v72 + 20))
                    && (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) != 0)
                  {
LABEL_114:
                    if (*((_DWORD *)v110 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v110) & 1) != 0)
                      v67 = 0;
                    v90 = (_DWORD *)v124;
                    v124 = 0;
                    if (v90)
                    {
                      if (v90[4] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
                      else
                        --v90[4];
                    }
                    goto LABEL_118;
                  }
                  v76 = *((_QWORD *)FunctionRealm + 412);
                  if (v76)
                  {
                    v77 = *(_DWORD *)(v76 - 8);
                    v78 = ((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                         + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                                                                                              + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) >> 22);
                    v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
                    v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
                    v81 = v77 & ((v80 >> 31) ^ v80);
                    v82 = *(char ***)(v76 + 16 * v81);
                    if (v82 != &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
                    {
                      v83 = 1;
                      while (v82)
                      {
                        v81 = ((_DWORD)v81 + v83) & v77;
                        v82 = *(char ***)(v76 + 16 * v81);
                        ++v83;
                        if (v82 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
                          goto LABEL_110;
                      }
                      goto LABEL_111;
                    }
LABEL_110:
                    v73 = *(WebCore::JSDOMGlobalObject **)(v76 + 16 * v81 + 8);
                    if (!v73)
                      goto LABEL_111;
                  }
                  else
                  {
LABEL_111:
                    v84 = (JSC::JSCell *)WebCore::JSEvent::prototype(v72, FunctionRealm, v73);
                    v85 = WebCore::JSWebKitMediaKeyMessageEventPrototype::createStructure((uint64_t *)v72, (uint64_t)FunctionRealm, v84);
                    *(_DWORD *)(v85 + 16) |= 0x80000u;
                    v87 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyMessageEventPrototype::create(v72, FunctionRealm, v85, v86);
                    v88 = WebCore::JSWebKitMediaKeyMessageEvent::createStructure((uint64_t *)v72, (uint64_t)FunctionRealm, v87);
                    v73 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v88, (uint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info);
                  }
                  SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v71, v73, v74);
                  if (!*((_DWORD *)v72 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v72) & 1) == 0)
                    JSC::JSObject::setStructure(v67, v72, SubclassStructure);
                  goto LABEL_114;
                }
              }
              else
              {
LABEL_90:
                if (!v38)
                  goto LABEL_93;
              }
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v45);
              else
                *(_DWORD *)v38 -= 2;
              goto LABEL_93;
            }
            v18 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_178:
            v94 = (_DWORD)v2 == 0;
LABEL_218:
            v14 = !v94;
LABEL_23:
            if (*((_DWORD *)v18 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v18) & 1) != 0)
              goto LABEL_143;
          }
          v99 = (_DWORD)v22 == 0;
          goto LABEL_222;
        }
        v18 = (JSC::VM *)*((_QWORD *)a1 + 7);
        if (v2 >= 0xFFFE000000000000)
          goto LABEL_178;
        *(_QWORD *)&v19 = v2 - 0x2000000000000;
        if (v2 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          if (v19 <= 0.0)
          {
            v14 = v19 < 0.0;
            goto LABEL_23;
          }
        }
        else
        {
          if ((v2 & 0xFFFE000000000002) != 0)
          {
            v14 = v2 == 7;
            goto LABEL_23;
          }
          v95 = *(unsigned __int8 *)(v2 + 5);
          if (v95 == 3)
          {
            v98 = *(_DWORD *)(v2 + 8);
LABEL_206:
            v94 = v98 == 0;
            goto LABEL_218;
          }
          if (v95 == 2)
          {
            v96 = *(_QWORD *)(v2 + 8);
            if ((v96 & 1) != 0)
              v97 = (int *)(v2 + 16);
            else
              v97 = (int *)(v96 + 4);
            v98 = *v97;
            goto LABEL_206;
          }
          if ((*(_BYTE *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0xA) & 1) != 0)
          {
            v94 = *(_QWORD *)(16 * (*(_DWORD *)v2 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            goto LABEL_218;
          }
        }
        v14 = 1;
        goto LABEL_23;
      }
    }
    v11 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
    goto LABEL_15;
  }
  v67 = 0;
LABEL_119:
  if (v7 != -1)
    ((void (*)(BOOL *, WTF::StringImpl **))off_1E333EAD8[v7])(&v111, &v117);
  return v67;
}

uint64_t WebCore::JSWebKitMediaKeyMessageEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyMessageEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitMediaKeyMessageEventPrototype::create(WebCore::JSWebKitMediaKeyMessageEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info, &WebCore::JSWebKitMediaKeyMessageEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyMessageEvent>,(WebCore::DOMConstructorID)80>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 640);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyMessageEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebKitMediaKeyMessageEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWebKitMediaKeyMessageEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWebKitMediaKeyMessageEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyMessageEventPrototype::create((WebCore::JSWebKitMediaKeyMessageEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSWebKitMediaKeyMessageEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSWebKitMediaKeyMessageEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 640) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitMediaKeyMessageEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitMediaKeyMessageEventPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyMessageEvent>,(WebCore::DOMConstructorID)80>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebKitMediaKeyMessageEvent_message(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::ArrayBufferView *v3;

  v3 = *(JSC::ArrayBufferView **)(*(_QWORD *)(a2 + 24) + 72);
  if (v3)
    return JSC::ArrayBufferView::wrap(v3, a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  else
    return 2;
}

uint64_t WebCore::jsWebKitMediaKeyMessageEvent_destinationURL(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 80);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSWebKitMediaKeyMessageEvent::subspaceForImpl(WebCore::JSWebKitMediaKeyMessageEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 648);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 648))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 648);
    *(_QWORD *)(v8 + 648) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 648);
  *(_QWORD *)(v3 + 648) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyNeededEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  JSC::JSCell *v9;
  JSC::VM *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t Object;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  double v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  JSC::VM *v22;
  double v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  WebCore::JSDOMGlobalObject *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  JSC::VM *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  int v48;
  unint64_t v49;
  WebCore::JSEvent *v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  JSC::Structure *v53;
  JSC::JSCell *v54;
  uint64_t v55;
  JSCell *v56;
  JSC::JSCell *v57;
  JSC::JSGlobalObject *v58;
  JSC::JSObject *v59;
  JSC::JSGlobalObject *v60;
  JSC::VM *v61;
  JSC::JSObject *v62;
  JSC::Structure *v63;
  JSC::VM *FunctionRealm;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char **v71;
  int v72;
  JSC::JSCell *v73;
  unint64_t v74;
  JSC::Structure *v75;
  JSC::JSCell *v76;
  uint64_t v77;
  unint64_t SubclassStructure;
  _DWORD *v79;
  uint64_t v80;
  JSValue v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  int *v91;
  int v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  int *v96;
  int v97;
  JSC::VM *v98;
  _BYTE v99[8];
  uint64_t v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  JSC::VM *v104;
  unint64_t v105;
  int v106;
  char v107;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v82);
  }
  v7 = *(_QWORD *)(a2 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v102);
  v8 = v103;
  if (v103)
  {
    v56 = 0;
    goto LABEL_93;
  }
  v98 = v5;
  if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v10 = 0;
    goto LABEL_48;
  }
  v9 = *(JSC::JSCell **)(a2 + 56);
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v104 = v10;
  if (((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v9)) == 0)
    {
      JSC::throwTypeError();
LABEL_103:
      v56 = 0;
      v80 = 1;
      v101 = 1;
      goto LABEL_92;
    }
    v2 = Object;
    WTF::AtomStringImpl::addLiteral();
    v15 = (WTF::StringImpl *)v105;
    v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, v105);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_103;
    if (v3 == 10)
    {
      v13 = 0;
      goto LABEL_20;
    }
    v17 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v3 >= 0xFFFE000000000000)
      goto LABEL_134;
    *(_QWORD *)&v18 = v3 - 0x2000000000000;
    if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v18 <= 0.0)
      {
        v13 = v18 < 0.0;
        goto LABEL_19;
      }
    }
    else
    {
      if ((v3 & 0xFFFE000000000002) != 0)
      {
        v13 = v3 == 7;
        goto LABEL_19;
      }
      v84 = *(unsigned __int8 *)(v3 + 5);
      if (v84 == 3)
      {
        v87 = *(_DWORD *)(v3 + 8);
LABEL_162:
        v83 = v87 == 0;
        goto LABEL_174;
      }
      if (v84 == 2)
      {
        v85 = *(_QWORD *)(v3 + 8);
        if ((v85 & 1) != 0)
          v86 = (int *)(v3 + 16);
        else
          v86 = (int *)(v85 + 4);
        v87 = *v86;
        goto LABEL_162;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
      {
        v83 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
        goto LABEL_174;
      }
    }
    v13 = 1;
    goto LABEL_19;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_47:
  v10 = 0;
LABEL_48:
  while (1)
  {
    v99[0] = v13;
    v99[1] = v12;
    v99[2] = v11;
    v101 = 0;
    if (!v103)
      break;
    v17 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_134:
    v83 = (_DWORD)v3 == 0;
LABEL_174:
    v13 = !v83;
LABEL_19:
    if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
      goto LABEL_103;
LABEL_20:
    WTF::AtomStringImpl::addLiteral();
    v19 = (WTF::StringImpl *)v105;
    v21 = JSC::JSObject::get((JSC::Structure *)v2, a1, v105);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_103;
    if (v21 == 10)
    {
      v12 = 0;
      goto LABEL_31;
    }
    v22 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v21 >= 0xFFFE000000000000)
    {
      v88 = (_DWORD)v21 == 0;
      goto LABEL_178;
    }
    *(_QWORD *)&v23 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v21 & 0xFFFE000000000002) != 0)
      {
        v12 = v21 == 7;
        goto LABEL_30;
      }
      v89 = *(unsigned __int8 *)(v21 + 5);
      if (v89 == 3)
      {
        v92 = *(_DWORD *)(v21 + 8);
      }
      else
      {
        if (v89 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_168:
            v12 = 1;
            goto LABEL_30;
          }
          v88 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_178;
        }
        v90 = *(_QWORD *)(v21 + 8);
        if ((v90 & 1) != 0)
          v91 = (int *)(v21 + 16);
        else
          v91 = (int *)(v90 + 4);
        v92 = *v91;
      }
      v88 = v92 == 0;
LABEL_178:
      v12 = !v88;
      goto LABEL_30;
    }
    if (v23 > 0.0)
      goto LABEL_168;
    v12 = v23 < 0.0;
LABEL_30:
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      goto LABEL_103;
LABEL_31:
    WTF::AtomStringImpl::addLiteral();
    v24 = (WTF::StringImpl *)v105;
    v26 = JSC::JSObject::get((JSC::Structure *)v2, a1, v105);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_103;
    if (v26 == 10)
    {
      v11 = 0;
      goto LABEL_42;
    }
    v27 = (JSC::VM *)*((_QWORD *)a1 + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v93 = (_DWORD)v26 == 0;
      goto LABEL_182;
    }
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      if ((v26 & 0xFFFE000000000002) != 0)
      {
        v11 = v26 == 7;
        goto LABEL_41;
      }
      v94 = *(unsigned __int8 *)(v26 + 5);
      if (v94 == 3)
      {
        v97 = *(_DWORD *)(v26 + 8);
      }
      else
      {
        if (v94 != 2)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
          {
LABEL_172:
            v11 = 1;
            goto LABEL_41;
          }
          v93 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
          goto LABEL_182;
        }
        v95 = *(_QWORD *)(v26 + 8);
        if ((v95 & 1) != 0)
          v96 = (int *)(v26 + 16);
        else
          v96 = (int *)(v95 + 4);
        v97 = *v96;
      }
      v93 = v97 == 0;
LABEL_182:
      v11 = !v93;
      goto LABEL_41;
    }
    if (v28 > 0.0)
      goto LABEL_172;
    v11 = v28 < 0.0;
LABEL_41:
    if (*((_DWORD *)v27 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) != 0)
      goto LABEL_103;
LABEL_42:
    WTF::AtomStringImpl::addLiteral();
    v3 = v105;
    v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v105);
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v3, v29);
      else
        *(_DWORD *)v3 -= 2;
    }
    if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
      goto LABEL_103;
    if ((v2 | 8) == 0xA)
      goto LABEL_47;
    WebCore::Detail::BufferSourceConverter<WebCore::IDLUint8Array,(WebCore::Detail::BufferSourceConverterAllowSharedMode)1>::convert<WebCore::DefaultExceptionThrower>(v2, (uint64_t)&v105);
    if (v106 == -1)
      goto LABEL_103;
    if (v106)
    {
      ((void (*)(char *, unint64_t *))off_1E333ED28[v106])(&v107, &v105);
      goto LABEL_103;
    }
    v10 = (JSC::VM *)v105;
  }
  v30 = v102;
  v102 = 0;
  v100 = 0;
  v31 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v31);
  *(_QWORD *)(v31 + 8) = 0;
  if (v12)
    v35 = 4;
  else
    v35 = 0;
  if (v11)
    v36 = 8;
  else
    v36 = 0;
  if (v13)
    v37 = 524290;
  else
    v37 = 0x80000;
  v38 = v35 | v36 | v37 | (v30 != 0) | *(_DWORD *)(v31 + 20) & 0xFFC00000;
  *(_DWORD *)(v31 + 16) = 1;
  *(_DWORD *)(v31 + 20) = v38;
  if (v30)
  {
    *(_DWORD *)v30 += 2;
    v38 = *(_DWORD *)(v31 + 20);
  }
  *(_QWORD *)(v31 + 24) = v30;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_QWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = v34;
  *(_QWORD *)(v31 + 64) = 0;
  *(_DWORD *)(v31 + 20) = v38 | 0x4000;
  *(_QWORD *)v31 = off_1E34866F8;
  if (v10)
  {
    v39 = (*(_DWORD *)v10)++;
    *(_QWORD *)(v31 + 72) = v10;
    v105 = v31;
    if (v39)
      *(_DWORD *)v10 = v39;
    else
      JSC::ArrayBufferView::operator delete();
  }
  else
  {
    *(_QWORD *)(v31 + 72) = 0;
    v105 = v31;
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v32);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (*(void (***)(WebCore::WebKitMediaKeyNeededEvent *__hidden))v31 != off_1E34866F8)
  {
    __break(0xC471u);
    JUMPOUT(0x1950F10CCLL);
  }
  v40 = *(JSC::VM **)(v7 + 40);
  v41 = *((_QWORD *)v40 + 412);
  if (!v41)
    goto LABEL_73;
  v42 = *(_DWORD *)(v41 - 8);
  v43 = ((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
       + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
                                                                           + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) >> 22);
  v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
  v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
  v46 = v42 & ((v45 >> 31) ^ v45);
  v47 = *(char ***)(v41 + 16 * v46);
  if (v47 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
  {
LABEL_72:
    v49 = *(_QWORD *)(v41 + 16 * v46 + 8);
    if (!v49)
      goto LABEL_73;
  }
  else
  {
    v48 = 1;
    while (v47)
    {
      v46 = ((_DWORD)v46 + v48) & v42;
      v47 = *(char ***)(v41 + 16 * v46);
      ++v48;
      if (v47 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
        goto LABEL_72;
    }
LABEL_73:
    v50 = (WebCore::JSEvent *)*((_QWORD *)v40 + 7);
    v51 = (JSC::JSCell *)WebCore::JSEvent::prototype(v50, *(JSC::VM **)(v7 + 40), v33);
    Structure = WebCore::JSWebKitMediaKeyNeededEventPrototype::createStructure((uint64_t *)v50, (uint64_t)v40, v51);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v54 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyNeededEventPrototype::create(v50, v40, Structure, v53);
    v55 = WebCore::JSWebKitMediaKeyNeededEvent::createStructure((uint64_t *)v50, (uint64_t)v40, v54);
    v49 = WebCore::cacheDOMStructure((JSCell *)v40, v55, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info);
  }
  v56 = (JSCell *)WebCore::JSWebKitMediaKeyNeededEvent::create(v49, v40, (uint64_t *)&v105);
  WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v40 + 415), v31, (uint64_t)v56);
  v57 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v57 & 0xFFFE000000000002) == 0)
  {
    v58 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v57);
    if (v58)
    {
      v60 = v58;
      if (v58 != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v61 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v58, v59);
        if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
        {
          v65 = *((_QWORD *)FunctionRealm + 412);
          if (v65)
          {
            v66 = *(_DWORD *)(v65 - 8);
            v67 = ((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
                 + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
                                                                                     + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) >> 22);
            v68 = 9 * ((v67 + ~(v67 << 13)) ^ ((v67 + ~(v67 << 13)) >> 8));
            v69 = (v68 ^ (v68 >> 15)) + ~((v68 ^ (v68 >> 15)) << 27);
            v70 = v66 & ((v69 >> 31) ^ v69);
            v71 = *(char ***)(v65 + 16 * v70);
            if (v71 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
            {
LABEL_83:
              v62 = *(JSC::JSObject **)(v65 + 16 * v70 + 8);
              if (v62)
              {
LABEL_85:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v60, v62, v63);
                if (!*((_DWORD *)v61 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v61) & 1) == 0)
                  JSC::JSObject::setStructure(v56, v61, SubclassStructure);
                goto LABEL_87;
              }
            }
            else
            {
              v72 = 1;
              while (v71)
              {
                v70 = ((_DWORD)v70 + v72) & v66;
                v71 = *(char ***)(v65 + 16 * v70);
                ++v72;
                if (v71 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
                  goto LABEL_83;
              }
            }
          }
          v73 = (JSC::JSCell *)WebCore::JSEvent::prototype(v61, FunctionRealm, v62);
          v74 = WebCore::JSWebKitMediaKeyNeededEventPrototype::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v73);
          *(_DWORD *)(v74 + 16) |= 0x80000u;
          v76 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyNeededEventPrototype::create(v61, FunctionRealm, v74, v75);
          v77 = WebCore::JSWebKitMediaKeyNeededEvent::createStructure((uint64_t *)v61, (uint64_t)FunctionRealm, v76);
          v62 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v77, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info);
          goto LABEL_85;
        }
      }
    }
  }
LABEL_87:
  if (*((_DWORD *)v98 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v98) & 1) != 0)
    v56 = 0;
  v79 = (_DWORD *)v105;
  v105 = 0;
  if (v79)
  {
    if (v79[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
    else
      --v79[4];
  }
  v80 = 0;
LABEL_92:
  ((void (*)(unint64_t *, _BYTE *))off_1E333EB60[v80])(&v105, v99);
  v8 = v103;
LABEL_93:
  if (v8 != -1)
    ((void (*)(_BYTE *, WTF::StringImpl **))off_1E333EAD8[v8])(v99, &v102);
  return v56;
}

uint64_t WebCore::JSWebKitMediaKeyNeededEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeyNeededEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitMediaKeyNeededEventPrototype::create(WebCore::JSWebKitMediaKeyNeededEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyNeededEvent>,(WebCore::DOMConstructorID)81>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 648);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyNeededEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebKitMediaKeyNeededEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWebKitMediaKeyNeededEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWebKitMediaKeyNeededEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyNeededEventPrototype::create((WebCore::JSWebKitMediaKeyNeededEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSWebKitMediaKeyNeededEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSWebKitMediaKeyNeededEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 648) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitMediaKeyNeededEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitMediaKeyNeededEventPrototype::s_info != (char **)(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                           + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeyNeededEvent>,(WebCore::DOMConstructorID)81>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebKitMediaKeyNeededEvent_initData(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::ArrayBufferView *v3;

  v3 = *(JSC::ArrayBufferView **)(*(_QWORD *)(a2 + 24) + 72);
  if (v3)
    return JSC::ArrayBufferView::wrap(v3, a1, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  else
    return 2;
}

uint64_t WebCore::JSWebKitMediaKeyNeededEvent::subspaceForImpl(WebCore::JSWebKitMediaKeyNeededEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 656);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 656))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 656);
    *(_QWORD *)(v8 + 656) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 656);
  *(_QWORD *)(v3 + 656) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSWebKitMediaKeySession::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeySessionPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitMediaKeySessionPrototype::create(WebCore::JSWebKitMediaKeySessionPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebKitMediaKeySession::s_info, (uint64_t)&WebCore::JSWebKitMediaKeySessionPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeySession>,(WebCore::DOMConstructorID)82>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 656);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeySession>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWebKitMediaKeySession::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeySession::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebKitMediaKeySession::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWebKitMediaKeySession::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWebKitMediaKeySession::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWebKitMediaKeySessionPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSWebKitMediaKeySessionPrototype::create((WebCore::JSWebKitMediaKeySessionPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSWebKitMediaKeySession::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWebKitMediaKeySession::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 656) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitMediaKeySessionConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitMediaKeySessionPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitMediaKeySession>,(WebCore::DOMConstructorID)82>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebKitMediaKeySession_error(uint64_t a1, uint64_t a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v2 = *(WTF **)(*(_QWORD *)(a2 + 24) + 112);
  if (!v2)
    return 2;
  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)v2 + ~((_QWORD)v2 << 32)) ^ (((unint64_t)v2 + ~((_QWORD)v2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == v2)
    {
LABEL_7:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == v2)
          goto LABEL_7;
      }
    }
  }
  ++*(_DWORD *)v2;
  v14 = *(_QWORD *)(v3 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSWebKitMediaKeyError::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeyError::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeyError::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebKitMediaKeyError::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSWebKitMediaKeyError::s_info)
    {
LABEL_15:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_17;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSWebKitMediaKeyError::s_info)
          goto LABEL_15;
      }
    }
  }
  v23 = *(uint64_t **)(v3 + 56);
  Structure = WebCore::JSWebKitMediaKeyErrorPrototype::createStructure(v23, v3, *(JSC::JSCell **)(v3 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSWebKitMediaKeyErrorPrototype::create((WebCore::JSWebKitMediaKeyErrorPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSWebKitMediaKeyError::createStructure(v23, v3, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)v3, v28, (uint64_t)&WebCore::JSWebKitMediaKeyError::s_info);
LABEL_17:
  v29 = *(_QWORD *)(v3 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 4888);
  if (v32)
    goto LABEL_38;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_23:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 4888))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 4888);
    *(_QWORD *)(v35 + 4888) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 4888);
  *(_QWORD *)(v31 + 4888) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_37;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_37:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_38:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_40:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = v2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(v3 + 3320);
  if ((byte_1EE3372C0 & 1) == 0)
  {
    qword_1EE3372B8 = (uint64_t)&off_1E3336F50;
    byte_1EE3372C0 = 1;
  }
  v53 = v2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3372B8;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::jsWebKitMediaKeySession_keySystem(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 96);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsWebKitMediaKeySession_sessionId(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 104);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsWebKitMediaKeySession_onwebkitkeyadded(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2392), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSWebKitMediaKeySession_onwebkitkeyadded(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebKitMediaKeySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebKitMediaKeySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2392), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebKitMediaKeySession_onwebkitkeyerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2400), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSWebKitMediaKeySession_onwebkitkeyerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebKitMediaKeySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebKitMediaKeySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2400), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebKitMediaKeySession_onwebkitkeymessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  bmalloc::api *v11;
  void *v12;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 2408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v5);
    bmalloc::api::isoDeallocate(v11, v12);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v9;
}

BOOL WebCore::setJSWebKitMediaKeySession_onwebkitkeymessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  bmalloc::api *v16;
  void *v17;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebKitMediaKeySession::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebKitMediaKeySession::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 2408), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v11);
        bmalloc::api::isoDeallocate(v16, v17);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSWebKitMediaKeySessionOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSWebKitMediaKeySessionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::WebKitMediaKeySession *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::WebKitMediaKeySession *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::WebKitMediaKeySession **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::WebKitMediaKeySession **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::WebKitMediaKeySession **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::WebKitMediaKeySession::~WebKitMediaKeySession(v3);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

unint64_t WebCore::wrap<WebCore::WebKitMediaKeySession>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::WebKitMediaKeySession *__hidden))a3 != off_1E34867F8)
  {
    __break(0xC471u);
    JUMPOUT(0x1950F38F0);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSWebKitMediaKeySession::s_info
         + ~((_QWORD)&WebCore::JSWebKitMediaKeySession::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeySession::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebKitMediaKeySession::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSWebKitMediaKeySession::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSWebKitMediaKeySession::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSWebKitMediaKeySessionPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSWebKitMediaKeySessionPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSWebKitMediaKeySession::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSWebKitMediaKeySession::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 664);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 664);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 664);
    *(_QWORD *)(v30 + 664) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 664);
  *(_QWORD *)(v26 + 664) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE3372D0 & 1) == 0)
  {
    qword_1EE3372C8 = (uint64_t)&off_1E3336F80;
    byte_1EE3372D0 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3372C8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE3372C8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeys>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSCell *v15;
  JSC::JSCell *v16;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v18;
  JSC::JSGlobalObject *v19;
  JSC::VM *v20;
  JSC::Structure *v21;
  uint64_t FunctionRealm;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  int v30;
  JSC::JSObject *v31;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v33;
  JSC::Structure *v34;
  JSC::JSCell *v35;
  uint64_t v36;
  unint64_t SubclassStructure;
  uint64_t v38;
  WTF *v40;
  void *v41;
  JSValue v42;
  WTF::StringImpl *v43;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  JSValue v47;
  WebCore::JSWebKitMediaKeys *v48;
  JSC::JSCell *v49;
  int v50[2];
  WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;

  v3 = *((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v3, a1, v42);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)v50 = v6;
  if ((v6 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v6 + 5) == 2)
  {
    v7 = *(WTF::StringImpl **)(v6 + 8);
    if ((v7 & 1) != 0)
    {
      v7 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v6, a1);
      if (!v7)
        goto LABEL_7;
    }
    else if (!v7)
    {
LABEL_7:
      v55 = v7;
      goto LABEL_8;
    }
    *(_DWORD *)v7 += 2;
    goto LABEL_7;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v50, a1);
LABEL_8:
  if (*(_DWORD *)(v3 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3);
    v8 = v55;
    if (hasExceptionsAfterHandlingTraps)
    {
      v54 = 1;
      v55 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v43);
        else
          *(_DWORD *)v8 -= 2;
      }
      v15 = 0;
      v38 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    v8 = v55;
  }
  v54 = 0;
  v53 = 0;
  v55 = v8;
  WebCore::WebKitMediaKeys::create((WebCore::WebKitMediaKeys *)&v55, (uint64_t)v50);
  v10 = v55;
  v55 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  if (*(_DWORD *)(v3 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3))
  {
    v15 = 0;
    v11 = v52;
    goto LABEL_34;
  }
  v11 = v52;
  if (!v52)
  {
    v12 = *(_QWORD *)(v5 + 40);
    v13 = *(WTF::StringImpl **)v50;
    *(_QWORD *)v50 = 0;
    v55 = v13;
    if (*(void (***)(WebCore::WebKitMediaKeys *__hidden))v13 != off_1E34867D0)
    {
      __break(0xC471u);
      JUMPOUT(0x1950F3DACLL);
    }
    v15 = (JSCell *)WebCore::createWrapper<WebCore::WebKitMediaKeys,WebCore::WebKitMediaKeys>(v12, &v55);
    if (v55)
    {
      if (*((_DWORD *)v55 + 2) == 1)
      {
        WebCore::WebKitMediaKeys::~WebKitMediaKeys(v55, v14);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*((_DWORD *)v55 + 2);
      }
    }
    goto LABEL_19;
  }
  if (v52 == 1)
  {
    v45 = (WTF::StringImpl *)LOBYTE(v50[0]);
    LOBYTE(v55) = v50[0];
    v46 = v51;
    v51 = 0;
    v56 = v46;
    if (!*(_QWORD *)(v3 + 16))
    {
      v47.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v50[0]), (JSC::JSGlobalObject *)&v56);
      JSC::VM::throwException((JSC::VM *)v3, a1, v47);
      v46 = v56;
    }
    v56 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    v15 = 0;
LABEL_19:
    if (*(_DWORD *)(v3 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
    {
      v15 = 0;
      goto LABEL_35;
    }
    v16 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v16 & 0xFFFE000000000002) != 0)
      goto LABEL_33;
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v16);
    if (!Object)
      goto LABEL_33;
    v19 = Object;
    if (Object == *(JSC::JSGlobalObject **)(a2 + 24))
      goto LABEL_33;
    v20 = (JSC::VM *)*((_QWORD *)a1 + 7);
    FunctionRealm = JSC::getFunctionRealm(a1, Object, v18);
    if (*((_DWORD *)v20 + 20))
    {
      if ((JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
        goto LABEL_33;
    }
    v23 = *(_QWORD *)(FunctionRealm + 3296);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 - 8);
      v25 = ((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = *(char ***)(v23 + 16 * v28);
      if (v29 == &WebCore::JSWebKitMediaKeys::s_info)
      {
LABEL_29:
        v31 = *(JSC::JSObject **)(v23 + 16 * v28 + 8);
        if (v31)
        {
LABEL_31:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v19, v31, v21);
          if (!*((_DWORD *)v20 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) == 0)
            JSC::JSObject::setStructure(v15, v20, SubclassStructure);
LABEL_33:
          if (*(_DWORD *)(v3 + 80))
          {
            if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v3) & 1) != 0)
              v15 = 0;
          }
LABEL_34:
          if (v11 == -1)
          {
LABEL_36:
            v38 = 0;
LABEL_37:
            ((void (*)(int *, uint64_t *))off_1E333EAB8[v38])(v50, &v53);
            return v15;
          }
LABEL_35:
          ((void (*)(WTF::StringImpl **, int *))off_1E333ED38[v11])(&v55, v50);
          goto LABEL_36;
        }
      }
      else
      {
        v30 = 1;
        while (v29)
        {
          v28 = ((_DWORD)v28 + v30) & v24;
          v29 = *(char ***)(v23 + 16 * v28);
          ++v30;
          if (v29 == &WebCore::JSWebKitMediaKeys::s_info)
            goto LABEL_29;
        }
      }
    }
    Structure = WebCore::JSWebKitMediaKeysPrototype::createStructure((uint64_t *)v20, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v35 = (JSC::JSCell *)WebCore::JSWebKitMediaKeysPrototype::create(v20, Structure, v33, v34);
    v36 = WebCore::JSWebKitMediaKeys::createStructure((uint64_t *)v20, FunctionRealm, v35);
    v31 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v36, (uint64_t)&WebCore::JSWebKitMediaKeys::s_info);
    goto LABEL_31;
  }
  v48 = (WebCore::JSWebKitMediaKeys *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSWebKitMediaKeys::destroy(v48, v49);
}

WebCore::WebKitMediaKeys *WebCore::JSWebKitMediaKeys::destroy(WebCore::JSWebKitMediaKeys *this, JSC::JSCell *a2)
{
  WebCore::WebKitMediaKeys *result;
  WTF *v4;
  void *v5;

  result = (WebCore::WebKitMediaKeys *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::WebKitMediaKeys::~WebKitMediaKeys(result, a2);
      return (WebCore::WebKitMediaKeys *)WTF::fastFree(v4, v5);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

uint64_t WebCore::JSWebKitMediaKeys::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitMediaKeysPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitMediaKeysPrototype::create(WebCore::JSWebKitMediaKeysPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWebKitMediaKeys::s_info, &WebCore::JSWebKitMediaKeysPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeys>,(WebCore::DOMConstructorID)83>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 664);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v36) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v36, &WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeys>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v35 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v35);
    v9[2848] = v2 + (int)v35;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v36);
  v13 = v36;
  v36 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v36);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSWebKitMediaKeys::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSWebKitMediaKeys::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSWebKitMediaKeysPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSWebKitMediaKeysPrototype::create((WebCore::JSWebKitMediaKeysPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSWebKitMediaKeys::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebKitMediaKeys::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v36);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v31 = v36;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebKitMediaKeys::s_info, (unint64_t *)&v36, (uint64_t)&WebCore::JSWebKitMediaKeysConstructorTableValues, (unsigned __int8 *)v2);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 664) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitMediaKeysConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitMediaKeysPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitMediaKeys>,(WebCore::DOMConstructorID)83>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebKitMediaKeys_keySystem(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSWebKitMediaKeysOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebKitMediaKeysOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::WebKitMediaKeys *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::WebKitMediaKeys *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::WebKitMediaKeys **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 2);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::WebKitMediaKeys **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::WebKitMediaKeys **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 2) == 1)
  {
    WebCore::WebKitMediaKeys::~WebKitMediaKeys(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 2);
  }
}

unint64_t WebCore::createWrapper<WebCore::WebKitMediaKeys,WebCore::WebKitMediaKeys>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitMediaKeys::s_info + ~((_QWORD)&WebCore::JSWebKitMediaKeys::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebKitMediaKeys::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebKitMediaKeys::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebKitMediaKeysPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebKitMediaKeysPrototype::create((WebCore::JSWebKitMediaKeysPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebKitMediaKeys::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebKitMediaKeys::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 672);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 672))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 672);
    *(_QWORD *)(v26 + 672) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 672);
  *(_QWORD *)(v22 + 672) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE3372E0 & 1) == 0)
  {
    qword_1EE3372D8 = (uint64_t)&off_1E3336FB0;
    byte_1EE3372E0 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3372D8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::WebKitMediaKeys>(uint64_t a1, uint64_t a2, WebCore::WebKitMediaKeys *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WebCore::WebKitMediaKeys *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF *v15;
  void *v16;
  WebCore::WebKitMediaKeys *v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WebCore::WebKitMediaKeys **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WebCore::WebKitMediaKeys **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  v17 = a3;
  if (*(void (***)(WebCore::WebKitMediaKeys *__hidden))a3 == off_1E34867D0)
  {
    v12 = WebCore::createWrapper<WebCore::WebKitMediaKeys,WebCore::WebKitMediaKeys>(a2, &v17);
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
      {
        WebCore::WebKitMediaKeys::~WebKitMediaKeys(v17, v13);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*((_DWORD *)v17 + 2);
      }
    }
    return v12;
  }
  result = 337;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitNamespace::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitNamespace>,(WebCore::DOMConstructorID)750>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6000);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitNamespace>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebKitNamespace::s_info + ~((_QWORD)&WebCore::JSWebKitNamespace::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitNamespace::s_info + ~((_QWORD)&WebCore::JSWebKitNamespace::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebKitNamespace::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebKitNamespace::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebKitNamespacePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebKitNamespacePrototype::create((WebCore::JSWebKitNamespacePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebKitNamespace::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebKitNamespace::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6000) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitNamespaceConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitNamespacePrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebKitNamespace>,(WebCore::DOMConstructorID)750>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebKitNamespaceOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebKitPlaybackTargetAvailabilityEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::JSDOMGlobalObject *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  int v46;
  unint64_t v47;
  WebCore::JSEvent *v48;
  JSC::JSCell *v49;
  unint64_t Structure;
  JSC::Structure *v51;
  JSC::JSCell *v52;
  uint64_t v53;
  JSCell *v54;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  unint64_t SubclassStructure;
  _DWORD *v77;
  uint64_t v78;
  JSC::VM *v80;
  WTF::StringImpl *v81;
  JSValue v82;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  _BYTE v100[8];
  uint64_t v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  unint64_t v107;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v82);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v103);
    v8 = v104;
    if (v104)
    {
      v54 = 0;
    }
    else
    {
      if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
LABEL_47:
        v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v9 += 2;
        while (1)
        {
          v100[0] = v10;
          v100[1] = v11;
          v100[2] = v12;
          v102 = 0;
          if (!v104)
          {
            v29 = v103;
            v103 = 0;
            v101 = 0;
            v30 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
            *(_QWORD *)(v30 + 8) = 0;
            if (v10)
              v34 = 1507330;
            else
              v34 = 1507328;
            v35 = (8 * v12) | (4 * v11) | v34 | (v29 != 0) | *(_DWORD *)(v30 + 20) & 0xFFC00000;
            *(_DWORD *)(v30 + 16) = 1;
            *(_DWORD *)(v30 + 20) = v35;
            if (v29)
            {
              *(_DWORD *)v29 += 2;
              v35 = *(_DWORD *)(v30 + 20);
            }
            *(_QWORD *)(v30 + 24) = v29;
            *(_QWORD *)(v30 + 32) = 0;
            *(_QWORD *)(v30 + 40) = 0;
            *(_QWORD *)(v30 + 48) = 0;
            *(_QWORD *)(v30 + 56) = v33;
            *(_QWORD *)(v30 + 64) = 0;
            *(_DWORD *)(v30 + 20) = v35 | 0x4000;
            *(_QWORD *)v30 = off_1E33519D0;
            if (v9)
            {
              v36 = *(_DWORD *)v9;
              *(_DWORD *)v9 += 2;
              *(_QWORD *)(v30 + 72) = v9;
              v107 = v30;
              if (v36)
                *(_DWORD *)v9 = v36;
              else
                WTF::StringImpl::destroy(v9, v31);
            }
            else
            {
              *(_QWORD *)(v30 + 72) = 0;
              v107 = v30;
            }
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v31);
              else
                *(_DWORD *)v29 -= 2;
            }
            if (*(void (***)(WebCore::WebKitPlaybackTargetAvailabilityEvent *__hidden))v30 != off_1E33519D0)
            {
              __break(0xC471u);
              JUMPOUT(0x1950F5C64);
            }
            v37 = *(JSC::VM **)(v7 + 40);
            v38 = v107;
            v39 = *((_QWORD *)v37 + 412);
            if (!v39)
              goto LABEL_68;
            v40 = *(_DWORD *)(v39 - 8);
            v41 = ((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
                 + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
                                                                                                 + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) >> 22);
            v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
            v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
            v44 = v40 & ((v43 >> 31) ^ v43);
            v45 = *(char ***)(v39 + 16 * v44);
            if (v45 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
            {
LABEL_67:
              v47 = *(_QWORD *)(v39 + 16 * v44 + 8);
              if (!v47)
                goto LABEL_68;
            }
            else
            {
              v46 = 1;
              while (v45)
              {
                v44 = ((_DWORD)v44 + v46) & v40;
                v45 = *(char ***)(v39 + 16 * v44);
                ++v46;
                if (v45 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
                  goto LABEL_67;
              }
LABEL_68:
              v48 = (WebCore::JSEvent *)*((_QWORD *)v37 + 7);
              v49 = (JSC::JSCell *)WebCore::JSEvent::prototype(v48, *(JSC::VM **)(v7 + 40), v32);
              Structure = WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::createStructure((uint64_t *)v48, (uint64_t)v37, v49);
              *(_DWORD *)(Structure + 16) |= 0x80000u;
              v52 = (JSC::JSCell *)WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::create(v48, v37, Structure, v51);
              v53 = WebCore::JSWebKitPlaybackTargetAvailabilityEvent::createStructure((uint64_t *)v48, (uint64_t)v37, v52);
              v47 = WebCore::cacheDOMStructure((JSCell *)v37, v53, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info);
            }
            v54 = (JSCell *)WebCore::JSWebKitPlaybackTargetAvailabilityEvent::create(v47, v37, (uint64_t *)&v107);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v37 + 415), v38, (uint64_t)v54);
            v55 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v55 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55)) == 0
              || (v58 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v59 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v57),
                  *((_DWORD *)v59 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
            {
LABEL_82:
              if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                v54 = 0;
              v77 = (_DWORD *)v107;
              v107 = 0;
              if (v77)
              {
                if (v77[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
                else
                  --v77[4];
              }
              v78 = 0;
              goto LABEL_87;
            }
            v63 = *((_QWORD *)FunctionRealm + 412);
            if (v63)
            {
              v64 = *(_DWORD *)(v63 - 8);
              v65 = ((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
                   + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) >> 22);
              v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
              v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
              v68 = v64 & ((v67 >> 31) ^ v67);
              v69 = *(char ***)(v63 + 16 * v68);
              if (v69 != &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
              {
                v70 = 1;
                while (v69)
                {
                  v68 = ((_DWORD)v68 + v70) & v64;
                  v69 = *(char ***)(v63 + 16 * v68);
                  ++v70;
                  if (v69 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
                    goto LABEL_78;
                }
                goto LABEL_79;
              }
LABEL_78:
              v60 = *(WebCore::JSDOMGlobalObject **)(v63 + 16 * v68 + 8);
              if (!v60)
                goto LABEL_79;
            }
            else
            {
LABEL_79:
              v71 = (JSC::JSCell *)WebCore::JSEvent::prototype(v59, FunctionRealm, v60);
              v72 = WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v71);
              *(_DWORD *)(v72 + 16) |= 0x80000u;
              v74 = (JSC::JSCell *)WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::create(v59, FunctionRealm, v72, v73);
              v75 = WebCore::JSWebKitPlaybackTargetAvailabilityEvent::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v74);
              v60 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v75, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info);
            }
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v58, v60, v61);
            if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
              JSC::JSObject::setStructure(v54, v59, SubclassStructure);
            goto LABEL_82;
          }
          v16 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_141:
          v85 = (_DWORD)v3 == 0;
LABEL_181:
          v10 = !v85;
LABEL_19:
          if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
            goto LABEL_110;
LABEL_20:
          WTF::AtomStringImpl::addLiteral();
          v18 = (WTF::StringImpl *)v107;
          v20 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v19);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v20 == 10)
          {
            v11 = 0;
            goto LABEL_31;
          }
          v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v20 >= 0xFFFE000000000000)
            break;
          *(_QWORD *)&v22 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v20 & 0xFFFE000000000002) != 0)
            {
              v11 = v20 == 7;
              goto LABEL_30;
            }
            v91 = *(unsigned __int8 *)(v20 + 5);
            if (v91 == 3)
            {
              v94 = *(_DWORD *)(v20 + 8);
              goto LABEL_173;
            }
            if (v91 == 2)
            {
              v92 = *(_QWORD *)(v20 + 8);
              if ((v92 & 1) != 0)
                v93 = (int *)(v20 + 16);
              else
                v93 = (int *)(v92 + 4);
              v94 = *v93;
LABEL_173:
              v90 = v94 == 0;
            }
            else
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_175:
                v11 = 1;
                goto LABEL_30;
              }
              v90 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            }
LABEL_185:
            v11 = !v90;
            goto LABEL_30;
          }
          if (v22 > 0.0)
            goto LABEL_175;
          v11 = v22 < 0.0;
LABEL_30:
          if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
            goto LABEL_110;
LABEL_31:
          WTF::AtomStringImpl::addLiteral();
          v23 = (WTF::StringImpl *)v107;
          v25 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v25 == 10)
          {
            v12 = 0;
            goto LABEL_42;
          }
          v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v25 >= 0xFFFE000000000000)
          {
            v95 = (_DWORD)v25 == 0;
            goto LABEL_189;
          }
          *(_QWORD *)&v27 = v25 - 0x2000000000000;
          if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v25 & 0xFFFE000000000002) != 0)
            {
              v12 = v25 == 7;
              goto LABEL_41;
            }
            v96 = *(unsigned __int8 *)(v25 + 5);
            if (v96 == 3)
            {
              v99 = *(_DWORD *)(v25 + 8);
            }
            else
            {
              if (v96 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_179:
                  v12 = 1;
                  goto LABEL_41;
                }
                v95 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_189;
              }
              v97 = *(_QWORD *)(v25 + 8);
              if ((v97 & 1) != 0)
                v98 = (int *)(v25 + 16);
              else
                v98 = (int *)(v97 + 4);
              v99 = *v98;
            }
            v95 = v99 == 0;
LABEL_189:
            v12 = !v95;
            goto LABEL_41;
          }
          if (v27 > 0.0)
            goto LABEL_179;
          v12 = v27 < 0.0;
LABEL_41:
          if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
            goto LABEL_110;
LABEL_42:
          WTF::AtomStringImpl::addLiteral();
          v3 = v107;
          v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v3)
          {
            if (*(_DWORD *)v3 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v3, v28);
            else
              *(_DWORD *)v3 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v2 == 10)
            goto LABEL_47;
          v107 = v2;
          v80 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if ((v2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v107, a1);
            goto LABEL_97;
          }
          v81 = *(WTF::StringImpl **)(v2 + 8);
          if ((v81 & 1) != 0)
          {
            v81 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
            if (!v81)
              goto LABEL_96;
LABEL_95:
            *(_DWORD *)v81 += 2;
            goto LABEL_96;
          }
          if (v81)
            goto LABEL_95;
LABEL_96:
          v106 = v81;
LABEL_97:
          if (*((_DWORD *)v80 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v80);
            v9 = v106;
            if (hasExceptionsAfterHandlingTraps)
            {
              v106 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2)
                  WTF::StringImpl::destroy(v9, v84);
                else
                  *(_DWORD *)v9 -= 2;
              }
              goto LABEL_110;
            }
          }
          else
          {
            v9 = v106;
          }
        }
        v90 = (_DWORD)v20 == 0;
        goto LABEL_185;
      }
      v3 = *(_QWORD *)(a2 + 56);
      v9 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      v105 = v9;
      if ((v3 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        goto LABEL_47;
      }
      if ((v3 & 0xFFFE000000000002) == 0)
      {
        v13 = JSC::JSCell::getObject((JSC::JSCell *)v3);
        if (v13)
        {
          v2 = v13;
          WTF::AtomStringImpl::addLiteral();
          v14 = (WTF::StringImpl *)v107;
          v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v15);
            else
              *(_DWORD *)v14 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v3 == 10)
          {
            v10 = 0;
            goto LABEL_20;
          }
          v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v3 >= 0xFFFE000000000000)
            goto LABEL_141;
          *(_QWORD *)&v17 = v3 - 0x2000000000000;
          if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v17 <= 0.0)
            {
              v10 = v17 < 0.0;
              goto LABEL_19;
            }
          }
          else
          {
            if ((v3 & 0xFFFE000000000002) != 0)
            {
              v10 = v3 == 7;
              goto LABEL_19;
            }
            v86 = *(unsigned __int8 *)(v3 + 5);
            if (v86 == 3)
            {
              v89 = *(_DWORD *)(v3 + 8);
LABEL_169:
              v85 = v89 == 0;
              goto LABEL_181;
            }
            if (v86 == 2)
            {
              v87 = *(_QWORD *)(v3 + 8);
              if ((v87 & 1) != 0)
                v88 = (int *)(v3 + 16);
              else
                v88 = (int *)(v87 + 4);
              v89 = *v88;
              goto LABEL_169;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v85 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_181;
            }
          }
          v10 = 1;
          goto LABEL_19;
        }
      }
      JSC::throwTypeError();
LABEL_110:
      v54 = 0;
      v78 = 1;
      v102 = 1;
LABEL_87:
      ((void (*)(unint64_t *, _BYTE *))off_1E333EE48[v78])(&v107, v100);
      v8 = v104;
    }
    if (v8 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E333EAD8[v8])(v100, &v103);
  }
  return v54;
}

uint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::create(WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitPlaybackTargetAvailabilityEvent>,(WebCore::DOMConstructorID)47>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 376);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSWebKitPlaybackTargetAvailabilityEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
         + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info
                                                                                         + ~((_QWORD)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::create((WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSWebKitPlaybackTargetAvailabilityEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSWebKitPlaybackTargetAvailabilityEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 376) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitPlaybackTargetAvailabilityEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitPlaybackTargetAvailabilityEventPrototype::s_info != (char **)(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitPlaybackTargetAvailabilityEvent>,(WebCore::DOMConstructorID)47>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebKitPlaybackTargetAvailabilityEvent_availability(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 72);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSWebKitPlaybackTargetAvailabilityEvent::subspaceForImpl(WebCore::JSWebKitPlaybackTargetAvailabilityEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 376);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 376))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 376);
    *(_QWORD *)(v8 + 376) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 376);
  *(_QWORD *)(v3 + 376) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebKitPoint>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::VM *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  float v8;
  float v9;
  double v10;
  unint64_t v11;
  JSC::VM *v12;
  double v13;
  float *v14;
  void *v15;
  JSCell *v16;
  JSC::JSCell *v17;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v19;
  JSC::JSGlobalObject *v20;
  JSC::VM *v21;
  JSC::Structure *v22;
  uint64_t FunctionRealm;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  JSC::JSObject *v32;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v34;
  JSC::Structure *v35;
  JSC::JSCell *v36;
  uint64_t v37;
  unint64_t SubclassStructure;
  double v40;
  char hasExceptionsAfterHandlingTraps;
  int v42;
  double v43;
  char v44;
  int v45;
  WTF *v46;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 32);
  if (v6 == 1)
  {
    v9 = 0.0;
    v8 = 0.0;
    goto LABEL_21;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = 0.0;
  v9 = 0.0;
  if (v7 != 10)
  {
    v46 = *(WTF **)(a2 + 48);
    if (v7 >= 0xFFFE000000000000)
    {
      v10 = (double)(int)v7;
    }
    else if (v7 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, a1);
    }
    else
    {
      *(_QWORD *)&v10 = v7 - 0x2000000000000;
    }
    if (*((_DWORD *)v4 + 20))
    {
      v40 = v10;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
      v10 = v40;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if (v10 < -3.40282347e38)
    {
      *(float *)&v42 = -INFINITY;
    }
    else
    {
      if (v10 <= 3.40282347e38)
      {
        v9 = v10;
LABEL_10:
        v6 = *(_DWORD *)(a2 + 32);
        goto LABEL_11;
      }
      *(float *)&v42 = INFINITY;
    }
    v9 = *(float *)&v42;
    goto LABEL_10;
  }
LABEL_11:
  if ((unint64_t)(v6 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = *(_QWORD *)(a2 + 56);
    if (v11 != 10)
    {
      v46 = *(WTF **)(a2 + 56);
      v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
      if (v11 >= 0xFFFE000000000000)
      {
        v13 = (double)(int)v11;
      }
      else if (v11 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v46, a1);
      }
      else
      {
        *(_QWORD *)&v13 = v11 - 0x2000000000000;
      }
      if (*((_DWORD *)v12 + 20))
      {
        v43 = v13;
        v44 = JSC::VM::hasExceptionsAfterHandlingTraps(v12);
        v13 = v43;
        if ((v44 & 1) != 0)
          return 0;
      }
      if (v13 < -3.40282347e38)
      {
        *(float *)&v45 = -INFINITY;
      }
      else
      {
        if (v13 <= 3.40282347e38)
        {
          v8 = v13;
          goto LABEL_21;
        }
        *(float *)&v45 = INFINITY;
      }
      v8 = *(float *)&v45;
    }
  }
LABEL_21:
  v14 = (float *)WTF::fastMalloc((WTF *)0xC);
  *(_DWORD *)v14 = 1;
  v14[1] = v9;
  v14[2] = v8;
  v46 = (WTF *)v14;
  v16 = (JSCell *)WebCore::createWrapper<WebCore::WebKitPoint,WebCore::WebKitPoint>(*(_QWORD *)(v5 + 40), &v46);
  v17 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v17 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v17);
    if (Object)
    {
      v20 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v19);
        if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
        {
          v24 = *(_QWORD *)(FunctionRealm + 3296);
          if (v24)
          {
            v25 = *(_DWORD *)(v24 - 8);
            v26 = ((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) >> 22);
            v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
            v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
            v29 = v25 & ((v28 >> 31) ^ v28);
            v30 = *(char ***)(v24 + 16 * v29);
            if (v30 == &WebCore::JSWebKitPoint::s_info)
            {
LABEL_30:
              v32 = *(JSC::JSObject **)(v24 + 16 * v29 + 8);
              if (v32)
              {
LABEL_32:
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v20, v32, v22);
                if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
                  JSC::JSObject::setStructure(v16, v21, SubclassStructure);
                goto LABEL_34;
              }
            }
            else
            {
              v31 = 1;
              while (v30)
              {
                v29 = ((_DWORD)v29 + v31) & v25;
                v30 = *(char ***)(v24 + 16 * v29);
                ++v31;
                if (v30 == &WebCore::JSWebKitPoint::s_info)
                  goto LABEL_30;
              }
            }
          }
          Structure = WebCore::JSWebKitPointPrototype::createStructure((uint64_t *)v21, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
          *(_DWORD *)(Structure + 16) |= 0x80000u;
          v36 = (JSC::JSCell *)WebCore::JSWebKitPointPrototype::create(v21, Structure, v34, v35);
          v37 = WebCore::JSWebKitPoint::createStructure((uint64_t *)v21, FunctionRealm, v36);
          v32 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v37, (uint64_t)&WebCore::JSWebKitPoint::s_info);
          goto LABEL_32;
        }
      }
    }
  }
LABEL_34:
  if (*((_DWORD *)v4 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) != 0)
    v16 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 1)
      WTF::fastFree(v46, v15);
    else
      --*(_DWORD *)v46;
  }
  return v16;
}

WTF *WebCore::JSWebKitPoint::destroy(WebCore::JSWebKitPoint *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSWebKitPoint::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebKitPointPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebKitPointPrototype::create(WebCore::JSWebKitPointPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWebKitPoint::s_info, &WebCore::JSWebKitPointPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitPoint>,(WebCore::DOMConstructorID)751>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6008);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSWebKitPoint>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebKitPoint::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebKitPoint::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebKitPointPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebKitPointPrototype::create((WebCore::JSWebKitPointPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebKitPoint::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebKitPoint::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 6008) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebKitPointConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebKitPointPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebKitPoint>,(WebCore::DOMConstructorID)751>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebKitPoint_x(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 4);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSWebKitPoint_x(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  int v14;
  double v15;
  JSC::VM *v16;
  unint64_t v17;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWebKitPoint::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWebKitPoint::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v17 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v16 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v17, a1);
    v4 = v16;
    v11 = v15;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if (v11 < -3.40282347e38)
    {
      *(float *)&v14 = -INFINITY;
    }
    else
    {
      if (v11 <= 3.40282347e38)
      {
        v12 = v11;
LABEL_19:
        *(float *)(v10 + 4) = v12;
        return 1;
      }
      *(float *)&v14 = INFINITY;
    }
    v12 = *(float *)&v14;
    goto LABEL_19;
  }
  return 0;
}

unint64_t WebCore::jsWebKitPoint_y(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  uint64_t v4;

  v2 = *(float *)(*(_QWORD *)(a2 + 24) + 8);
  v3 = v2;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v4 = (int)v2, (double)(int)v4 == v3)
    && ((_DWORD)v4 || (LODWORD(v2) & 0x80000000) == 0))
  {
    return v4 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v3 + 0x2000000000000;
  }
}

BOOL WebCore::setJSWebKitPoint_y(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  float v12;
  int v14;
  double v15;
  JSC::VM *v16;
  unint64_t v17;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWebKitPoint::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWebKitPoint::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  v17 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v16 = v4;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v17, a1);
    v4 = v16;
    v11 = v15;
  }
  else
  {
    *(_QWORD *)&v11 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
  {
    if (v11 < -3.40282347e38)
    {
      *(float *)&v14 = -INFINITY;
    }
    else
    {
      if (v11 <= 3.40282347e38)
      {
        v12 = v11;
LABEL_19:
        *(float *)(v10 + 8) = v12;
        return 1;
      }
      *(float *)&v14 = INFINITY;
    }
    v12 = *(float *)&v14;
    goto LABEL_19;
  }
  return 0;
}

uint64_t WebCore::JSWebKitPointOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebKitPointOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebKitPoint,WebCore::WebKitPoint>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebKitPoint::s_info + ~((_QWORD)&WebCore::JSWebKitPoint::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebKitPoint::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebKitPoint::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebKitPointPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebKitPointPrototype::create((WebCore::JSWebKitPointPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebKitPoint::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebKitPoint::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 6088);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 6088))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 6088);
    *(_QWORD *)(v26 + 6088) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 6088);
  *(_QWORD *)(v22 + 6088) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE337300 & 1) == 0)
  {
    qword_1EE3372F8 = (uint64_t)&off_1E3337010;
    byte_1EE337300 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3372F8;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebKitPoint>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = a3;
  v12 = WebCore::createWrapper<WebCore::WebKitPoint,WebCore::WebKitPoint>(a2, &v15);
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v13);
    else
      --*(_DWORD *)v15;
  }
  return v12;
}

uint64_t WebCore::JSWebLock::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSWebLock::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebLockPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebLockPrototype::create(WebCore::JSWebLockPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWebLock::s_info, &WebCore::JSWebLockPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLock>,(WebCore::DOMConstructorID)229>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1832);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLock>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebLock::s_info + ~((_QWORD)&WebCore::JSWebLock::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebLock::s_info + ~((_QWORD)&WebCore::JSWebLock::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebLock::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebLock::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebLockPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebLockPrototype::create((WebCore::JSWebLockPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebLock::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebLock::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1832) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebLockConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebLockPrototype::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLock>,(WebCore::DOMConstructorID)229>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebLock_name(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::jsWebLock_mode(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::WebLockMode>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 32));
}

uint64_t WebCore::JSWebLockOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebLockOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

WebCore::JSWebLockGrantedCallback *WebCore::JSWebLockGrantedCallback::JSWebLockGrantedCallback(WebCore::JSWebLockGrantedCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *Allocator;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E33353B0;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  Allocator = 0;
  if (a3)
  {
    v16 = v8;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v8 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  if (a2)
  {
    v17 = v8;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v7 + 1;
    v10[2] = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSWebLockGrantedCallback::~JSWebLockGrantedCallback(WebCore::JSWebLockGrantedCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebLockGrantedCallback::handleEvent@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t SlowCase;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v31;
  JSC::Structure *v32;
  JSC::JSCell *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *Allocator;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Structure *v58;
  uint64_t v59;
  void *v60;
  JSC::JSGlobalObject *v61;
  uint64_t v62;
  WTF *v63;
  uint64_t *v64;
  JSValue v65;
  unint64_t v66;
  _QWORD *v67;
  WTF *v68;
  unsigned int v69;
  char v70[8];
  uint64_t v71;
  WTF *v72;
  _OWORD v73[4];
  uint64_t v74;
  _BYTE v75[15];
  char v76;
  uint64_t v77[2];

  result = WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2);
  if ((result & 1) == 0)
  {
    *a3 = 2;
    a3[2] = 1;
    return result;
  }
  ++*(_DWORD *)(a1 + 16);
  v7 = **(_QWORD **)(a1 + 24);
  if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
    v8 = 0;
  else
    v8 = *(_QWORD *)v7;
  MEMORY[0x19AEA3294](v75, *(_QWORD *)(v8 + 56));
  v70[0] = 0;
  v71 = 0x800000000;
  v72 = (WTF *)((char *)v73 + 8);
  memset(v73, 0, sizeof(v73));
  v74 = 0;
  if (!a2)
  {
    v19 = 0;
    SlowCase = 2;
LABEL_61:
    *((_QWORD *)v73 + v19 + 1) = SlowCase;
    LODWORD(v71) = v19 + 1;
    goto LABEL_62;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 3320) + 32);
  if (!v9)
  {
LABEL_16:
    ++*a2;
    v20 = *(_QWORD *)(v8 + 3296);
    if (v20)
    {
      v21 = *(_DWORD *)(v20 - 8);
      v22 = ((unint64_t)&WebCore::JSWebLock::s_info + ~((_QWORD)&WebCore::JSWebLock::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebLock::s_info + ~((_QWORD)&WebCore::JSWebLock::s_info << 32)) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = *(char ***)(v20 + 16 * v25);
      if (v26 == &WebCore::JSWebLock::s_info)
      {
LABEL_21:
        v28 = *(_QWORD *)(v20 + 16 * v25 + 8);
        if (v28)
          goto LABEL_23;
      }
      else
      {
        v27 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v27) & v21;
          v26 = *(char ***)(v20 + 16 * v25);
          ++v27;
          if (v26 == &WebCore::JSWebLock::s_info)
            goto LABEL_21;
        }
      }
    }
    v29 = *(uint64_t **)(v8 + 56);
    Structure = WebCore::JSWebLockPrototype::createStructure(v29, v8, *(JSC::JSCell **)(v8 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v33 = (JSC::JSCell *)WebCore::JSWebLockPrototype::create((WebCore::JSWebLockPrototype *)v29, Structure, v31, v32);
    v34 = WebCore::JSWebLock::createStructure(v29, v8, v33);
    v28 = WebCore::cacheDOMStructure((JSCell *)v8, v34, (uint64_t)&WebCore::JSWebLock::s_info);
LABEL_23:
    v35 = *(_QWORD *)(v8 + 56);
    v36 = *(_QWORD *)(v35 + 41456);
    v37 = *(_QWORD *)(v36 + 23536);
    v38 = *(_QWORD **)(v37 + 1856);
    if (v38)
      goto LABEL_44;
    v39 = *(_QWORD *)(v36 + 22648);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
      goto LABEL_29;
    }
    MEMORY[0x19AEA534C](v39);
LABEL_29:
    v41 = *(_QWORD *)(v39 + 2824);
    if (!*(_QWORD *)(v41 + 1856))
    {
      v42 = WTF::fastMalloc((WTF *)0xF8);
      WTF::CString::CString((WTF::CString *)&v68, "IsoSpace T");
      v77[0] = 0;
      MEMORY[0x19AEA3204](v42, &v68, v35 + 192, v35 + 1872, 32, 8, v77);
      v44 = v77[0];
      v77[0] = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v45 = v68;
      v68 = 0;
      if (v45)
      {
        if (*(_DWORD *)v45 == 1)
          WTF::fastFree(v45, v43);
        else
          --*(_DWORD *)v45;
      }
      v46 = *(_QWORD *)(v41 + 1856);
      *(_QWORD *)(v41 + 1856) = v42;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    }
    v38 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
    JSC::GCClient::IsoSubspace::IsoSubspace();
    v47 = *(_QWORD *)(v37 + 1856);
    *(_QWORD *)(v37 + 1856) = v38;
    if (v47)
    {
      v48 = (WTF *)MEMORY[0x19AEA3528]();
      WTF::fastFree(v48, v49);
    }
    v50 = __ldxr((unsigned __int8 *)v39);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v39))
      {
LABEL_44:
        SlowCase = v38[3];
        if (SlowCase >= v38[4])
        {
          SlowCase = v38[5];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM();
            SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_46:
            *(_DWORD *)SlowCase = 0;
            WebCore::JSDOMObject::JSDOMObject(SlowCase, v28);
            *(_QWORD *)(SlowCase + 24) = a2;
            if (*(_BYTE *)(v35 + 755))
              __dmb(0xAu);
            v51 = *(_QWORD *)(v8 + 3320);
            if ((byte_1EE337310 & 1) == 0)
            {
              qword_1EE337308 = (uint64_t)&off_1E3337040;
              byte_1EE337310 = 1;
            }
            v68 = (WTF *)a2;
            if ((SlowCase & 8) != 0)
              v52 = (SlowCase - 112) | 1;
            else
              v52 = SlowCase & 0xFFFFFFFFFFFFC000;
            if ((v52 & 1) != 0)
              v53 = v52 + 47;
            else
              v53 = *(_QWORD *)v52 + 32;
            Allocator = *(_QWORD **)(v53 + 16);
            if (!Allocator)
              Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
            *(_QWORD *)(v53 + 16) = *Allocator;
            *Allocator = SlowCase;
            Allocator[1] = &qword_1EE337308;
            Allocator[2] = v51;
            v77[0] = (uint64_t)Allocator;
            JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v51 + 32), (uint64_t *)&v68, v77);
            if (v77[0])
              *(_QWORD *)(v77[0] + 8) = 3;
            v19 = v71;
            if ((_DWORD)v71 == HIDWORD(v71))
              goto LABEL_84;
            goto LABEL_60;
          }
          v66 = *(_QWORD *)(SlowCase + 8) ^ v38[6];
          v38[4] = SlowCase + HIDWORD(v66);
          v38[5] = SlowCase + (int)v66;
        }
        v38[3] = SlowCase + 32;
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v39);
    goto LABEL_44;
  }
  v10 = *(_DWORD *)(v9 - 8);
  v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(_DWORD **)(v9 + 16 * v14);
  if (v15 != a2)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(_DWORD **)(v9 + 16 * v14);
      ++v16;
      if (v15 == a2)
        goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_11:
  v17 = *(_QWORD *)(v9 + 16 * v14 + 8);
  if (!v17)
    goto LABEL_16;
  if ((*(_BYTE *)(v17 + 8) & 3) != 0)
    goto LABEL_16;
  SlowCase = *(_QWORD *)v17;
  if (!*(_QWORD *)v17)
    goto LABEL_16;
  v19 = 0;
LABEL_60:
  if (v72 == (WTF *)((char *)v73 + 8))
    goto LABEL_61;
LABEL_84:
  v65.super.isa = (Class)SlowCase;
  if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v71, v65) == 1)
    v70[0] = 1;
LABEL_62:
  v77[0] = 0;
  v55 = *(uint64_t **)(a1 + 24);
  v56 = *v55;
  if (*v55 && (*(_BYTE *)(v56 + 8) & 3) == 0 && *(_QWORD *)v56)
  {
    v57 = v55[2];
    if (!v57 || (*(_BYTE *)(v57 + 8) & 3) != 0)
      v58 = 0;
    else
      v58 = *(JSC::Structure **)v57;
    v59 = WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v56, v58, 10, (uint64_t)v70, 0, 0, v77);
    if (v77[0])
    {
      JSC::VM::throwException();
      *a3 = 1;
      a3[2] = 1;
      goto LABEL_75;
    }
    v61 = (JSC::JSGlobalObject *)v59;
  }
  else
  {
    v61 = 0;
  }
  WebCore::Converter<WebCore::IDLPromise<WebCore::IDLAny>>::convert<WebCore::DefaultExceptionThrower>((JSC::JSPromise *)v8, v61, (JSValue)&v76, (uint64_t)&v68);
  v62 = v69;
  if (v69)
  {
    *a3 = 1;
    a3[2] = 1;
    if ((_DWORD)v62 == -1)
      goto LABEL_75;
  }
  else
  {
    v63 = v68;
    v68 = 0;
    *(_QWORD *)a3 = v63;
    a3[2] = 0;
  }
  ((void (*)(char *, WTF **))off_1E333EF98[v62])(&v76, &v68);
LABEL_75:
  v64 = *(uint64_t **)&v73[0];
  if (*(_QWORD *)&v73[0])
  {
    v68 = (WTF *)&v71;
    v67 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v73[0], (uint64_t *)&v68);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v64, v67);
  }
  if (v72 != (WTF *)((char *)v73 + 8) && v72)
    WTF::fastFree(v72, v60);
  result = MEMORY[0x19AEA32A0](v75);
  if (*(_DWORD *)(a1 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  --*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t WebCore::JSWebLockManager::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebLockManagerPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebLockManagerPrototype::create(WebCore::JSWebLockManagerPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWebLockManager::s_info, &WebCore::JSWebLockManagerPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLockManager>,(WebCore::DOMConstructorID)230>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1840);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLockManager>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebLockManager::s_info + ~((_QWORD)&WebCore::JSWebLockManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebLockManager::s_info + ~((_QWORD)&WebCore::JSWebLockManager::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebLockManager::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebLockManager::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebLockManagerPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebLockManagerPrototype::create((WebCore::JSWebLockManagerPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebLockManager::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebLockManager::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1840) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebLockManagerConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebLockManagerPrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebLockManager>,(WebCore::DOMConstructorID)230>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebLockManagerOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[1];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[2] || (result = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::WebLockManager>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3367718)
  {
    __break(0xC471u);
    JUMPOUT(0x1950FA0ACLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebLockManager::s_info + ~((_QWORD)&WebCore::JSWebLockManager::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebLockManager::s_info + ~((_QWORD)&WebCore::JSWebLockManager::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebLockManager::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebLockManager::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebLockManagerPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebLockManagerPrototype::create((WebCore::JSWebLockManagerPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebLockManager::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebLockManager::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 1864);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 1864))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 1864);
    *(_QWORD *)(v36 + 1864) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 1864);
  *(_QWORD *)(v32 + 1864) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337320 & 1) == 0)
  {
    qword_1EE337318 = (uint64_t)&off_1E3337070;
    byte_1EE337320 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337318;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

unint64_t WebCore::convertDictionaryToJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, const WebCore::WebLockManagerSnapshot *a4)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  JSC::VM *v41;
  char v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _DWORD *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  char *v79;
  _DWORD *v80;
  uint64_t v81;
  _DWORD *v82;
  char v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v93;
  WTF::StringImpl **v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v103;
  unint64_t v104;
  int v105;
  int v106;
  uint64_t v107;

  v5 = *((_QWORD *)this + 7);
  v6 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v7 = 8 * *(unsigned __int8 *)(v6 + 14);
  v8 = JSC::allocateCell<JSC::JSFinalObject>(v5, v7 + 16);
  v9 = *(_DWORD *)(v6 + 8);
  *(_DWORD *)v8 = v6 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  bzero((void *)(v8 + 16), v7);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v10 = *((unsigned int *)a3 + 3);
  if (!(_DWORD)v10)
    goto LABEL_39;
  if (v10 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    goto LABEL_152;
  }
  v11 = 24 * v10;
  v12 = WTF::fastMalloc((WTF *)(24 * v10));
  v14 = (WTF *)v12;
  v15 = *((_DWORD *)a3 + 3);
  if (v15)
  {
    v16 = *(_QWORD *)a3;
    v17 = *(_QWORD *)a3 + 24 * v15;
    v18 = v12;
    do
    {
      v19 = *(_DWORD **)v16;
      if (*(_QWORD *)v16)
        *v19 += 2;
      *(_QWORD *)v18 = v19;
      *(_BYTE *)(v18 + 8) = *(_BYTE *)(v16 + 8);
      v20 = *(_DWORD **)(v16 + 16);
      if (v20)
        *v20 += 2;
      *(_QWORD *)(v18 + 16) = v20;
      v16 += 24;
      v18 += 24;
    }
    while (v16 != v17);
  }
  v21 = 0;
  do
  {
    v22 = (WTF::StringImpl **)((char *)v14 + v21);
    v23 = *(WTF::StringImpl **)((char *)v14 + v21 + 16);
    *(_QWORD *)((char *)v14 + v21 + 16) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v13);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *v22;
    *v22 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v13);
      else
        *(_DWORD *)v24 -= 2;
    }
    v21 += 24;
  }
  while (v11 != v21);
  WTF::fastFree(v14, v13);
  v25 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v25)
  {
    if (v25 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1950FA96CLL);
    }
    v26 = WTF::fastMalloc((WTF *)(24 * v25));
    v27 = (WTF *)v26;
    v28 = *((_DWORD *)a3 + 3);
    if (v28)
    {
      v29 = *(_QWORD *)a3;
      v30 = *(_QWORD *)a3 + 24 * v28;
      v31 = v26;
      do
      {
        v32 = *(_DWORD **)v29;
        if (*(_QWORD *)v29)
          *v32 += 2;
        *(_QWORD *)v31 = v32;
        *(_BYTE *)(v31 + 8) = *(_BYTE *)(v29 + 8);
        v33 = *(_DWORD **)(v29 + 16);
        if (v33)
          *v33 += 2;
        *(_QWORD *)(v31 + 16) = v33;
        v29 += 24;
        v31 += 24;
      }
      while (v29 != v30);
    }
    HIDWORD(v104) = v25;
    v34 = WTF::fastMalloc((WTF *)(24 * v25));
    v35 = (WTF *)v34;
    v36 = 0;
    LODWORD(v104) = 24 * (int)v25 / 0x18u;
    v103 = (WTF::StringImpl *)v34;
    do
    {
      v37 = (char *)v27 + v36;
      v38 = *(_DWORD **)((char *)v27 + v36);
      if (v38)
        *v38 += 2;
      v39 = v34 + v36;
      *(_QWORD *)v39 = v38;
      *(_BYTE *)(v39 + 8) = v37[8];
      v40 = (_DWORD *)*((_QWORD *)v37 + 2);
      if (v40)
        *v40 += 2;
      *(_QWORD *)(v39 + 16) = v40;
      v36 += 24;
    }
    while (v37 + 24 != (char *)v27 + 24 * v25);
    v41 = (JSC::VM *)v5;
    v42 = 0;
  }
  else
  {
LABEL_39:
    v41 = (JSC::VM *)v5;
    v35 = 0;
    v27 = 0;
    v25 = 0;
    v103 = 0;
    v104 = 0;
    v42 = 1;
  }
  v44 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::WebLockManagerSnapshot::Info>>>::convert<WebCore::WebLockManagerSnapshot::Info,0ul>((uint64_t)this, (uint64_t)a2, (unsigned int *)&v103);
  if (HIDWORD(v104))
  {
    v45 = 24 * HIDWORD(v104);
    v46 = (WTF::StringImpl **)((char *)v35 + 16);
    do
    {
      v47 = *v46;
      *v46 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v43);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = *(v46 - 2);
      *(v46 - 2) = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v43);
        else
          *(_DWORD *)v48 -= 2;
      }
      v46 += 3;
      v45 -= 24;
    }
    while (v45);
  }
  if (v35)
  {
    v103 = 0;
    WTF::fastFree(v35, v43);
  }
  if ((v42 & 1) == 0)
  {
    v93 = 24 * v25;
    v94 = (WTF::StringImpl **)((char *)v27 + 16);
    do
    {
      v95 = *v94;
      *v94 = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          WTF::StringImpl::destroy(v95, v43);
        else
          *(_DWORD *)v95 -= 2;
      }
      v96 = *(v94 - 2);
      *(v94 - 2) = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
          WTF::StringImpl::destroy(v96, v43);
        else
          *(_DWORD *)v96 -= 2;
      }
      v94 += 3;
      v93 -= 24;
    }
    while (v93);
  }
  if (v27)
    WTF::fastFree(v27, v43);
  v49 = v41;
  if (*((_DWORD *)v41 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v50 = v103;
  v103 = 0;
  v104 = v8;
  v105 = -1;
  v106 = 0x1000000;
  v107 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, v41, (unint64_t)v50, v44, 0, (uint64_t)&v103);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v51);
    else
      *(_DWORD *)v50 -= 2;
  }
  v52 = *((unsigned int *)a3 + 7);
  if (!(_DWORD)v52)
    goto LABEL_97;
  if (v52 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    JUMPOUT(0x1950FA964);
  }
  v53 = 24 * v52;
  v54 = WTF::fastMalloc((WTF *)(24 * v52));
  v56 = (WTF *)v54;
  v57 = *((_DWORD *)a3 + 7);
  if (v57)
  {
    v58 = *((_QWORD *)a3 + 2);
    v59 = v58 + 24 * v57;
    v60 = v54;
    do
    {
      v61 = *(_DWORD **)v58;
      if (*(_QWORD *)v58)
        *v61 += 2;
      *(_QWORD *)v60 = v61;
      *(_BYTE *)(v60 + 8) = *(_BYTE *)(v58 + 8);
      v62 = *(_DWORD **)(v58 + 16);
      if (v62)
        *v62 += 2;
      *(_QWORD *)(v60 + 16) = v62;
      v58 += 24;
      v60 += 24;
    }
    while (v58 != v59);
  }
  v63 = 0;
  do
  {
    v64 = (WTF::StringImpl **)((char *)v56 + v63);
    v65 = *(WTF::StringImpl **)((char *)v56 + v63 + 16);
    *(_QWORD *)((char *)v56 + v63 + 16) = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
        WTF::StringImpl::destroy(v65, v55);
      else
        *(_DWORD *)v65 -= 2;
    }
    v66 = *v64;
    *v64 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v55);
      else
        *(_DWORD *)v66 -= 2;
    }
    v63 += 24;
  }
  while (v53 != v63);
  WTF::fastFree(v56, v55);
  v67 = *((unsigned int *)a3 + 7);
  if (!(_DWORD)v67)
  {
LABEL_97:
    v77 = 0;
    v69 = 0;
    v67 = 0;
    v103 = 0;
    v104 = 0;
    v83 = 1;
    goto LABEL_98;
  }
  if (v67 >= 0xAAAAAAB)
  {
    __break(0xC471u);
LABEL_152:
    JUMPOUT(0x1950FA95CLL);
  }
  v68 = WTF::fastMalloc((WTF *)(24 * v67));
  v69 = (WTF *)v68;
  v70 = *((_DWORD *)a3 + 7);
  if (v70)
  {
    v71 = *((_QWORD *)a3 + 2);
    v72 = v71 + 24 * v70;
    v73 = v68;
    do
    {
      v74 = *(_DWORD **)v71;
      if (*(_QWORD *)v71)
        *v74 += 2;
      *(_QWORD *)v73 = v74;
      *(_BYTE *)(v73 + 8) = *(_BYTE *)(v71 + 8);
      v75 = *(_DWORD **)(v71 + 16);
      if (v75)
        *v75 += 2;
      *(_QWORD *)(v73 + 16) = v75;
      v71 += 24;
      v73 += 24;
    }
    while (v71 != v72);
  }
  HIDWORD(v104) = v67;
  v76 = WTF::fastMalloc((WTF *)(24 * v67));
  v77 = (WTF *)v76;
  v78 = 0;
  LODWORD(v104) = 24 * (int)v67 / 0x18u;
  v103 = (WTF::StringImpl *)v76;
  do
  {
    v79 = (char *)v69 + v78;
    v80 = *(_DWORD **)((char *)v69 + v78);
    if (v80)
      *v80 += 2;
    v81 = v76 + v78;
    *(_QWORD *)v81 = v80;
    *(_BYTE *)(v81 + 8) = v79[8];
    v82 = (_DWORD *)*((_QWORD *)v79 + 2);
    if (v82)
      *v82 += 2;
    *(_QWORD *)(v81 + 16) = v82;
    v78 += 24;
  }
  while (v79 + 24 != (char *)v69 + 24 * v67);
  v83 = 0;
LABEL_98:
  v85 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::WebLockManagerSnapshot::Info>>>::convert<WebCore::WebLockManagerSnapshot::Info,0ul>((uint64_t)this, (uint64_t)a2, (unsigned int *)&v103);
  if (HIDWORD(v104))
  {
    v86 = 24 * HIDWORD(v104);
    v87 = (WTF::StringImpl **)((char *)v77 + 16);
    do
    {
      v88 = *v87;
      *v87 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
          WTF::StringImpl::destroy(v88, v84);
        else
          *(_DWORD *)v88 -= 2;
      }
      v89 = *(v87 - 2);
      *(v87 - 2) = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
          WTF::StringImpl::destroy(v89, v84);
        else
          *(_DWORD *)v89 -= 2;
      }
      v87 += 3;
      v86 -= 24;
    }
    while (v86);
  }
  if (v77)
  {
    v103 = 0;
    WTF::fastFree(v77, v84);
  }
  if ((v83 & 1) == 0)
  {
    v97 = 24 * v67;
    v98 = (WTF::StringImpl **)((char *)v69 + 16);
    do
    {
      v99 = *v98;
      *v98 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v84);
        else
          *(_DWORD *)v99 -= 2;
      }
      v100 = *(v98 - 2);
      *(v98 - 2) = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v84);
        else
          *(_DWORD *)v100 -= 2;
      }
      v98 += 3;
      v97 -= 24;
    }
    while (v97);
  }
  if (v69)
    WTF::fastFree(v69, v84);
  if (*((_DWORD *)v49 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v49) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v90 = v103;
  v103 = 0;
  v104 = v8;
  v105 = -1;
  v106 = 0x1000000;
  v107 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v8, v49, (unint64_t)v90, v85, 0, (uint64_t)&v103);
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v91);
    else
      *(_DWORD *)v90 -= 2;
  }
  return v8;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::WebLockMode>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((_MergedGlobals_786[0] & 1) == 0)
  {
    qword_1EE337368 = (uint64_t)&_MergedGlobals_29;
    _MergedGlobals_29 += 2;
    dword_1ECE7A6F0 += 2;
    qword_1EE337370 = (uint64_t)&dword_1ECE7A6F0;
    _MergedGlobals_786[0] = 1;
  }
  v3 = *(_QWORD *)&_MergedGlobals_786[8 * a2 + 392];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebSocket>::construct(JSC *this, uint64_t a2, JSValue a3)
{
  JSC::VM *v4;
  unint64_t v5;
  JSValue v7;
  JSCell *v9;
  JSC::JSGlobalObject *v11;
  int hasIteratorMethod;
  int v13;
  WebCore *v14;
  JSC::JSGlobalObject *v15;
  char hasExceptionsAfterHandlingTraps;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  JSC::VM *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSC::JSCell *v33;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v35;
  JSC::JSGlobalObject *v36;
  WebCore::JSWebSocket *v37;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v39;
  JSC::Structure *v40;
  unint64_t SubclassStructure;
  uint64_t v42;
  int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned __int8 v46[16];
  int v47;
  uint64_t v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  JSC::VM *v52;
  _QWORD v53[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *(int *)(a2 + 32) - 1;
  if (v5 >= 2)
    v5 = 2;
  if (!v5)
  {
    v7.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, this, v7);
  }
  if (v5 != 2)
    goto LABEL_12;
  v11 = *(JSC::JSGlobalObject **)(a2 + 56);
  if (v11 == (JSC::JSGlobalObject *)10)
    goto LABEL_12;
  hasIteratorMethod = JSC::hasIteratorMethod(this, v11, a3);
  v13 = hasIteratorMethod;
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    if ((hasExceptionsAfterHandlingTraps & 1) == 0 && ((v13 ^ 1) & 1) == 0)
      goto LABEL_12;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
      return 0;
    goto LABEL_18;
  }
  if (!hasIteratorMethod)
  {
LABEL_18:
    v17 = (JSC::VM *)*((_QWORD *)this + 7);
    v52 = v17;
    v18 = *(_QWORD *)(a2 + 24);
    v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v18 + 40));
    if (v19)
    {
      v20 = (WTF::StringImpl *)v19;
      WebCore::valueToUSVString(this, *(_QWORD *)(a2 + 48), (uint64_t)&v50);
      v21 = v51;
      if (v51)
      {
        v9 = 0;
LABEL_53:
        if (v21 != -1)
          ((void (*)(unsigned __int8 *, WTF::StringImpl **))off_1E333EAB8[v21])(v46, &v50);
        return v9;
      }
      v22 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)v46 = v22;
      v23 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v46, this);
LABEL_26:
        if (*((_DWORD *)v23 + 20))
        {
          v43 = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
          v25 = (WTF::StringImpl *)v53[0];
          if (v43)
          {
            v49 = 1;
            v53[0] = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v44);
              else
                *(_DWORD *)v25 -= 2;
            }
            v9 = 0;
            v42 = 1;
LABEL_52:
            ((void (*)(unsigned __int8 *, uint64_t *))off_1E333EAB8[v42])(v46, &v48);
            v21 = v51;
            goto LABEL_53;
          }
        }
        else
        {
          v25 = (WTF::StringImpl *)v53[0];
        }
        v49 = 0;
        if (v51)
        {
          v14 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::constructJSWebSocket1(v14, v15, a3.super.isa);
        }
        v26 = v50;
        v50 = 0;
        v45 = v26;
        v48 = 0;
        v27 = (WTF *)WTF::fastMalloc((WTF *)8);
        v28 = v27;
        v53[1] = 0x100000001;
        v53[0] = v27;
        if (v25)
          *(_DWORD *)v25 += 2;
        *(_QWORD *)v27 = v25;
        WebCore::WebSocket::create(v20, &v45, (uint64_t)v53, (uint64_t)v46);
        v30 = *(WTF::StringImpl **)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v29);
          else
            *(_DWORD *)v30 -= 2;
        }
        WTF::fastFree(v28, v29);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v31);
          else
            *(_DWORD *)v25 -= 2;
        }
        v32 = v45;
        v45 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
          goto LABEL_74;
        v9 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebSocket>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebSocket,WTF::RawPtrTraits<WebCore::WebSocket>,WTF::DefaultRefDerefTraits<WebCore::WebSocket>>>>(this, *(_QWORD *)(v18 + 40), &v52, v46);
        if (*((_DWORD *)v17 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
            goto LABEL_74;
        }
        v33 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v33 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v33);
          if (Object)
          {
            v36 = Object;
            if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
            {
              v37 = (WebCore::JSWebSocket *)*((_QWORD *)this + 7);
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v35);
              if (!*((_DWORD *)v37 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) == 0)
              {
                v39 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSWebSocket>(v37, FunctionRealm);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v36, v39, v40);
                if (!*((_DWORD *)v37 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v37) & 1) == 0)
                  JSC::JSObject::setStructure(v9, v37, SubclassStructure);
              }
            }
          }
        }
        if (*((_DWORD *)v17 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v17) & 1) != 0)
LABEL_74:
          v9 = 0;
        if (v47 != -1)
          ((void (*)(_QWORD *, unsigned __int8 *))off_1E333F040[v47])(v53, v46);
        v42 = 0;
        goto LABEL_52;
      }
      v24 = *(_DWORD **)(v22 + 8);
      if ((v24 & 1) != 0)
      {
        v24 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v22, this);
        if (!v24)
          goto LABEL_25;
      }
      else if (!v24)
      {
LABEL_25:
        v53[0] = v24;
        goto LABEL_26;
      }
      *v24 += 2;
      goto LABEL_25;
    }
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v52, (uint64_t)"WebSocket", 10);
  }
LABEL_12:
  v14 = this;
  v15 = (JSC::JSGlobalObject *)a2;
  return WebCore::constructJSWebSocket1(v14, v15, a3.super.isa);
}

JSCell *WebCore::constructJSWebSocket1(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSCell *v16;
  JSC::JSCell *v17;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v19;
  JSC::JSGlobalObject *v20;
  WebCore::JSWebSocket *v21;
  JSC::VM *FunctionRealm;
  JSC::JSObject *v23;
  JSC::Structure *v24;
  unint64_t SubclassStructure;
  int v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF *v33;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37[2];
  int v38;
  WTF *v39;
  uint64_t v40;
  int v41;
  WTF::StringImpl *v42;
  int v43;
  JSC::VM *v44;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v44 = v5;
  v6 = *((_QWORD *)a2 + 3);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v44, (uint64_t)"WebSocket", 10);
  v8 = (WTF::StringImpl *)v7;
  WebCore::valueToUSVString(this, *((_QWORD *)a2 + 6), (uint64_t)&v42);
  v9 = v43;
  if (!v43)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL || (v10 = *((_QWORD *)a2 + 7), v10 == 10))
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      goto LABEL_6;
    }
    v33 = (WTF *)*((_QWORD *)this + 7);
    if ((v10 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v10 + 5) > 0x16u)
    {
      WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(this, v10, (uint64_t)&v39);
      v26 = v41;
      if (v41)
      {
        v16 = 0;
        goto LABEL_24;
      }
      if (!v43)
      {
LABEL_6:
        v11 = v42;
        v42 = 0;
        v36 = v11;
        v12 = v39;
        v33 = v39;
        LODWORD(v11) = v40;
        v13 = HIDWORD(v40);
        v39 = 0;
        v40 = 0;
        v34 = (int)v11;
        v35 = v13;
        WebCore::WebSocket::create(v8, &v36, (uint64_t)&v33, (uint64_t)v37);
        if ((_DWORD)v13)
        {
          v30 = 8 * v13;
          v31 = (WTF::StringImpl **)v12;
          do
          {
            v32 = *v31;
            *v31 = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v14);
              else
                *(_DWORD *)v32 -= 2;
            }
            ++v31;
            v30 -= 8;
          }
          while (v30);
        }
        if (v12)
          WTF::fastFree(v12, v14);
        v15 = v36;
        v36 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
          goto LABEL_56;
        v16 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebSocket>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebSocket,WTF::RawPtrTraits<WebCore::WebSocket>,WTF::DefaultRefDerefTraits<WebCore::WebSocket>>>>(this, *(_QWORD *)(v6 + 40), &v44, (unsigned __int8 *)v37);
        if (*((_DWORD *)v5 + 20))
        {
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
            goto LABEL_56;
        }
        v17 = (JSC::JSCell *)*((_QWORD *)a2 + 5);
        if (((unint64_t)v17 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v17);
          if (Object)
          {
            v20 = Object;
            if (Object != *((JSC::JSGlobalObject **)a2 + 3))
            {
              v21 = (WebCore::JSWebSocket *)*((_QWORD *)this + 7);
              FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(this, Object, v19);
              if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
              {
                v23 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSWebSocket>(v21, FunctionRealm);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v20, v23, v24);
                if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
                  JSC::JSObject::setStructure(v16, v21, SubclassStructure);
              }
            }
          }
        }
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
LABEL_56:
          v16 = 0;
        if (v38 != -1)
          ((void (*)(WTF **, WTF::StringImpl **))off_1E333F040[v38])(&v33, v37);
        v26 = v41;
LABEL_24:
        if (v26 == -1)
          goto LABEL_36;
        goto LABEL_35;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v28 = v37[0];
    v37[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v27);
      else
        *(_DWORD *)v28 -= 2;
    }
    v16 = 0;
    v26 = 1;
    v41 = 1;
LABEL_35:
    ((void (*)(WTF::StringImpl **, WTF **))off_1E333F050[v26])(v37, &v39);
LABEL_36:
    v9 = v43;
    goto LABEL_37;
  }
  v16 = 0;
LABEL_37:
  if (v9 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E333EAB8[v9])(&v39, &v42);
  return v16;
}

JSC::VM *WebCore::JSDOMConstructor<WebCore::JSWebSocket>::initializeProperties(uint64_t a1, uint64_t a2, JSC::VM *a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;

  v6 = a2 + 41952;
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 1768), 0xFFFE000000000001, 6);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = JSC::jsNontrivialString(a2, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  if (a1 && v8 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a2 + 192), (const JSCell *)a1);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, *(_QWORD *)(*(_QWORD *)v6 + 1968), v8, 6);
  v10 = *(_QWORD *)(*(_QWORD *)v6 + 2160);
  v11 = WebCore::getDOMStructure<WebCore::JSWebSocket>((WebCore::JSWebSocket *)a2, a3);
  JSC::JSObject::putDirect((unsigned __int8 *)a1, (JSC::VM *)a2, v10, *(_QWORD *)(v11 + 48), 14);
  return JSC::reifyStaticProperties<4u>((JSC::VM *)a2, (uint64_t)&WebCore::JSWebSocket::s_info, &WebCore::JSWebSocketConstructorTableValues, (JSC::JSObject *)a1);
}

WTF::StringImpl *WebCore::JSWebSocketPrototype::finishCreation(WebCore::JSWebSocketPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<17u>(a2, (uint64_t)&WebCore::JSWebSocket::s_info, (uint64_t)&WebCore::JSWebSocketPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSWebSocket::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::JSWebSocket::createPrototype(WebCore::JSWebSocket *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  int v3;
  JSC::JSCell *v5;
  unint64_t v6;
  WebCore::JSDOMGlobalObject *v7;
  JSC::Structure *v8;

  v3 = (int)a2;
  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  v6 = JSC::Structure::create((uint64_t *)this, v3, v5);
  *(_DWORD *)(v6 + 16) |= 0x80000u;
  return WebCore::JSWebSocketPrototype::create(this, v6, v7, v8);
}

unint64_t WebCore::JSWebSocketPrototype::create(WebCore::JSWebSocketPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSWebSocketPrototype::finishCreation((WebCore::JSWebSocketPrototype *)v6, this);
  return v6;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebSocket>,(WebCore::DOMConstructorID)286>(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  JSC::JSCell *v5;
  uint64_t Structure;
  JSC::Heap *v7;
  unint64_t v8;

  result = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2288);
  if (!result)
  {
    v5 = (JSC::JSCell *)WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
    Structure = WebCore::JSDOMConstructor<WebCore::JSWebSocket>::createStructure((uint64_t *)a1, a2, v5);
    result = WebCore::JSDOMConstructor<WebCore::JSWebSocket>::create(a1, Structure, (JSC::VM *)a2);
    *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2288) = result;
    if (result)
    {
      if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v7 = (JSC::Heap *)(a1 + 192);
        v8 = result;
        JSC::Heap::writeBarrierSlowPath(v7, (const JSCell *)a2);
        return v8;
      }
    }
  }
  return result;
}

unint64_t WebCore::jsWebSocketConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebSocketPrototype::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebSocket>,(WebCore::DOMConstructorID)286>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebSocket_url(uint64_t a1, uint64_t a2, const WTF::String *a3)
{
  return JSC::jsOwnedString(*(JSC **)(a1 + 56), (JSC::VM *)(*(_QWORD *)(a2 + 24) + 88), a3);
}

unint64_t WebCore::jsWebSocket_readyState(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 24) + 80) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebSocket_bufferedAmount(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 24);
  v2 = *(_DWORD *)(v4 + 128);
  LODWORD(v4) = *(_DWORD *)(v4 + 132);
  v3 = __CFADD__(v2, (_DWORD)v4);
  LODWORD(v4) = v2 + v4;
  if (v3)
    v4 = 0xFFFFFFFFLL;
  else
    v4 = v4;
  if ((v4 & 0x80000000) != 0)
    return COERCE__INT64((double)v4) + 0x2000000000000;
  else
    return v4 | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebSocket_onopen(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1376), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSWebSocket_onopen(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebSocket::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebSocket::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1376), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebSocket::~WebSocket(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebSocket_onerror(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 784), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSWebSocket_onerror(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebSocket::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebSocket::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 784), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebSocket::~WebSocket(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebSocket_onclose(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 408), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSWebSocket_onclose(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebSocket::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebSocket::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 408), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebSocket::~WebSocket(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebSocket_protocol(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 144);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsWebSocket_extensions(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 152);
  if (!v2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 41968);
  v3 = *(_DWORD *)v2;
  v4 = *(_DWORD *)(v2 + 4);
  *(_DWORD *)v2 += 2;
  v5 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    if (v4 != 1)
    {
LABEL_4:
      v6 = *(_QWORD *)(v5 + 64760);
      if (!v6 || v2 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v3 = *(_DWORD *)v2 - 2;
      }
      goto LABEL_7;
    }
    v8 = *(unsigned __int8 **)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_4;
      v9 = v10;
    }
    v6 = *(_QWORD *)(v5 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 41968);
  }
LABEL_7:
  if (v3)
    *(_DWORD *)v2 = v3;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v2, a2);
  return v6;
}

uint64_t WebCore::jsWebSocket_onmessage(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  bmalloc::api *v12;
  void *v13;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1192), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
  {
    WebCore::WebSocket::~WebSocket(v5, v9);
    bmalloc::api::isoDeallocate(v12, v13);
  }
  else
  {
    --*((_DWORD *)v5 + 6);
  }
  return v10;
}

BOOL WebCore::setJSWebSocket_onmessage(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  bmalloc::api *v17;
  void *v18;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebSocket::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebSocket::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1192), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        WebCore::WebSocket::~WebSocket(v11, v15);
        bmalloc::api::isoDeallocate(v17, v18);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebSocket_binaryType(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 136);
  if ((byte_1EE3371E1 & 1) == 0)
  {
    dword_1ECE7A710 += 2;
    byte_1EE3371E1 = 1;
    qword_1EE337378 = (uint64_t)&dword_1ECE7A710;
    dword_1ECE7A730 += 2;
    qword_1EE337380 = (uint64_t)&dword_1ECE7A730;
  }
  v5 = *(_QWORD *)&_MergedGlobals_786[8 * v4 + 408];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

BOOL WebCore::setJSWebSocket_binaryType(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  char v16;
  int v17;
  char **v19;
  uint16x8_t v21;
  uint16x8_t v22;
  uint64_t v25;
  unint64_t v26;

  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSWebSocket::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSWebSocket::s_info && v7 != 0);
    }
    if (v6)
    {
      v10 = *(_QWORD *)(a2 + 24);
      v26 = this;
      if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v26, a1);
        v11 = v25;
        if (v25)
        {
LABEL_18:
          v12 = *(_DWORD *)(v11 + 16);
          v13 = *(const char **)(v11 + 8);
          v14 = *(_DWORD *)(v11 + 4);
          if (v13 != "arraybuffer" && v14 == 11)
          {
            if ((v12 & 4) != 0)
            {
              if (*v13 != 97
                || *(_QWORD *)(v13 + 1) != 0x6666756279617272
                || *(_QWORD *)(v13 + 3) != 0x7265666675627961)
              {
                goto LABEL_27;
              }
            }
            else
            {
              if (*(_WORD *)v13 != 97)
                goto LABEL_27;
              v21 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 2), (int16x8_t)xmmword_1968C0AE0);
              v21.i16[0] = vminvq_u16(v21);
              if (!v21.i32[0])
                goto LABEL_27;
              v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v13 + 6), (int16x8_t)xmmword_1968C0AF0);
              v22.i16[0] = vminvq_u16(v22);
              if (!v22.i32[0])
                goto LABEL_27;
            }
          }
          else if (v13 != "arraybuffer" || v14 != 11)
          {
            if (v13 == "blob" || v14 != 4)
            {
              if (v14 == 4 && v13 == "blob")
                goto LABEL_38;
            }
            else if ((v12 & 4) != 0)
            {
              if (*v13 == 98 && *(_WORD *)(v13 + 1) == 28524 && *((_WORD *)v13 + 1) == 25199)
              {
LABEL_38:
                v19 = &off_1E3335738;
LABEL_49:
                v17 = 0;
                v16 = *((_BYTE *)v19 + 16);
LABEL_50:
                if (*(_DWORD *)v11 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v11, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v11 -= 2;
                if (*((_DWORD *)v4 + 20))
                {
                  if (((v17 | JSC::VM::hasExceptionsAfterHandlingTraps(v4)) & 1) == 0)
                    goto LABEL_54;
                }
                else if ((v17 & 1) == 0)
                {
LABEL_54:
                  *(_BYTE *)(v10 + 136) = v16;
                  return 1;
                }
                return 0;
              }
            }
            else if (*(_WORD *)v13 == 98 && *((_DWORD *)v13 + 1) == 6422639 && *(_DWORD *)(v13 + 2) == 7274604)
            {
              goto LABEL_38;
            }
LABEL_27:
            v16 = 0;
            v17 = 1;
            goto LABEL_50;
          }
          v19 = &WebCore::parseEnumerationFromString<WebCore::WebSocket::BinaryType>(WTF::String const&)::mappings;
          goto LABEL_49;
        }
LABEL_42:
        if (*((_DWORD *)v4 + 20))
          JSC::VM::hasExceptionsAfterHandlingTraps(v4);
        return 0;
      }
      v11 = *(_QWORD *)(this + 8);
      if ((v11 & 1) != 0)
      {
        v11 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
        if (!v11)
        {
LABEL_17:
          if (v11)
            goto LABEL_18;
          goto LABEL_42;
        }
      }
      else if (!v11)
      {
        goto LABEL_17;
      }
      *(_DWORD *)v11 += 2;
      goto LABEL_17;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSWebSocketOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

void WebCore::JSWebSocketOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::WebSocket *v3;
  int v4;
  _DWORD *v5;
  bmalloc::api *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::WebSocket *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(WebCore::WebSocket **)(*(_QWORD *)a2 + 24);
  v4 = *((_DWORD *)v3 + 6);
  *((_DWORD *)v3 + 6) = v4 + 1;
  v5 = (_DWORD *)((char *)v3 + 8);
  if (!v3)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v10 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v9 = v10;
    if (v10)
    {
      v11 = *(_DWORD *)(v9 - 8);
      v12 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      v15 = v11 & ((v14 >> 31) ^ v14);
      v16 = *(WebCore::WebSocket **)(v9 + 16 * v15);
      if (v16 != v3)
      {
        v17 = 1;
        while (v16)
        {
          v15 = ((_DWORD)v15 + v17) & v11;
          v16 = *(WebCore::WebSocket **)(v9 + 16 * v15);
          ++v17;
          if (v16 == v3)
            goto LABEL_14;
        }
        v15 = *(unsigned int *)(v9 - 4);
      }
LABEL_14:
      if (v15 != *(_DWORD *)(v9 - 4))
      {
        v18 = (_QWORD *)(v9 + 16 * v15);
        *v18 = -1;
        v21 = v18[1];
        v20 = v18 + 1;
        v19 = v21;
        if (v21)
        {
          *(_QWORD *)(v19 + 8) = 3;
          *v20 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v22 = *v8;
        if (*v8)
          v23 = *(_DWORD *)(v22 - 12) - 1;
        else
          v23 = -1;
        *(_DWORD *)(v22 - 12) = v23;
        v24 = *v8;
        if (*v8)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v26 >> 1, 0);
        }
      }
    }
    v4 = *((_DWORD *)v3 + 6) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    *((_DWORD *)v3 + 6) = v4;
  }
  else
  {
    WebCore::WebSocket::~WebSocket(v3, a2);
    bmalloc::api::isoDeallocate(v6, v7);
  }
}

uint64_t WebCore::wrap<WebCore::WebSocket>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t result;
  bmalloc::api *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WebCore::WebSocket *v21;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v13 = *(_QWORD *)(v5 + 32);
    if (!v13)
      goto LABEL_5;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(_QWORD *)(v13 + 16 * v18);
    if (v19 != a3)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(_QWORD *)(v13 + 16 * v18);
        ++v20;
        if (v19 == a3)
          goto LABEL_16;
      }
      goto LABEL_5;
    }
LABEL_16:
    v6 = *(_QWORD *)(v13 + 16 * v18 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  v21 = (WebCore::WebSocket *)a3;
  if (*(uint64_t (***)(WebCore::WebSocket *__hidden))a3 == off_1E336E1E8)
  {
    v8 = WebCore::getDOMStructure<WebCore::JSWebSocket>(*(WebCore::JSWebSocket **)(a2 + 56), (JSC::VM *)a2);
    v7 = WebCore::JSWebSocket::create(v8, a2, (uint64_t *)&v21);
    WebCore::cacheWrapper<WebCore::WebSocket,WebCore::JSWebSocket>(*(_QWORD *)(a2 + 3320), a3, v7);
    if (v21)
    {
      if (*((_DWORD *)v21 + 6) == 1)
      {
        WebCore::WebSocket::~WebSocket(v21, v9);
        bmalloc::api::isoDeallocate(v11, v12);
      }
      else
      {
        --*((_DWORD *)v21 + 6);
      }
    }
    return v7;
  }
  result = 722;
  __break(0xC471u);
  return result;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSWebTransport>::construct(JSC::VM **this, uint64_t a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  JSC *v4;
  JSC::VM *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t SlowCase;
  int v10;
  uint64_t v11;
  JSC::VM *v12;
  char v13;
  WTF *v14;
  uint64_t Object;
  JSC::Structure *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  JSC::VM *v19;
  double v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  JSC::VM *v23;
  const char **v24;
  int v25;
  const char *v26;
  int v27;
  char **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  JSC::VM *v32;
  double v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  JSC::VM *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char **v53;
  int v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v58;
  JSC::Structure *v59;
  JSC::JSCell *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v68;
  JSValue v69;
  unsigned int v70;
  JSC::JSCell *IndexQuickly;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  void *v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *Allocator;
  JSC::JSCell *v85;
  JSC::JSGlobalObject *v86;
  JSC::JSObject *v87;
  JSC::JSGlobalObject *v88;
  JSC::VM *v89;
  JSC::Structure *v90;
  uint64_t FunctionRealm;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  JSC::JSObject *v100;
  unint64_t v101;
  WebCore::JSDOMGlobalObject *v102;
  JSC::Structure *v103;
  JSC::JSCell *v104;
  uint64_t v105;
  unint64_t SubclassStructure;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  int v110;
  int v111;
  uint64_t v112;
  JSC::JSCell *v114;
  JSValue v115;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  JSValue v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  char *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint16x8_t v128;
  uint16x8_t v129;
  WTF::StringImpl *v130;
  char hasExceptionsAfterHandlingTraps;
  char *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  BOOL v135;
  int v136;
  uint64_t v137;
  int *v138;
  int v139;
  BOOL v140;
  int v141;
  uint64_t v142;
  int *v143;
  int v144;
  uint16x8_t v145;
  uint16x8_t v146;
  uint64_t v148;
  JSC::JSGlobalObject *v149;
  WTF *v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  char v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  __int16 v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  char v160;
  int v161;
  uint64_t v162;
  int v163;
  JSC::VM *v164;
  JSC::VM *v165;
  char v166;
  uint64_t v167[2];

  v4 = (JSC *)this;
  v5 = this[7];
  v164 = v5;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v115.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (_QWORD *)JSC::VM::throwException(v5, v4, v115);
  }
  v7 = *(_QWORD *)(a2 + 24);
  v8 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v7 + 40));
  if (!v8)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(v4, &v164, (uint64_t)"WebTransport", 13);
  SlowCase = v8;
  WebCore::valueToUSVString(v4, *(_QWORD *)(a2 + 48), (uint64_t)&v162);
  v10 = v163;
  if (!v163)
  {
    v148 = a2;
    v149 = v4;
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 = 0;
      v11 = 0;
      v2 = 0;
      v3 = 0;
      v14 = 0;
      v165 = (JSC::VM *)*((_QWORD *)v4 + 7);
LABEL_68:
      v157 = v11;
      v158 = v14;
      v159 = __PAIR64__(v2, v3);
      v160 = v13;
      v161 = 0;
      goto LABEL_69;
    }
    v11 = *(_QWORD *)(a2 + 56);
    v12 = (JSC::VM *)*((_QWORD *)v4 + 7);
    v165 = v12;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v13 = 0;
      v11 = 0;
LABEL_67:
      v2 = 0;
      v3 = 0;
      v14 = 0;
      goto LABEL_68;
    }
    if ((v11 & 0xFFFE000000000002) != 0)
      goto LABEL_205;
    Object = JSC::JSCell::getObject((JSC::JSCell *)v11);
    if (!Object)
      goto LABEL_205;
    v16 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v18 = JSC::JSObject::get(v16, v4, (unint64_t)v150);
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v17);
      else
        *(_DWORD *)v150 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
      goto LABEL_268;
    if (v18 == 10)
    {
      v2 = 0;
      goto LABEL_21;
    }
    v19 = (JSC::VM *)*((_QWORD *)v4 + 7);
    if (v18 >= 0xFFFE000000000000)
    {
      v135 = (_DWORD)v18 == 0;
    }
    else
    {
      *(_QWORD *)&v20 = v18 - 0x2000000000000;
      if (v18 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        if (v20 <= 0.0)
        {
          v2 = v20 < 0.0;
          goto LABEL_20;
        }
        goto LABEL_325;
      }
      if ((v18 & 0xFFFE000000000002) != 0)
      {
        v2 = v18 == 7;
        goto LABEL_20;
      }
      v136 = *(unsigned __int8 *)(v18 + 5);
      if (v136 == 3)
      {
        v139 = *(_DWORD *)(v18 + 8);
LABEL_323:
        v2 = v139 != 0;
        goto LABEL_20;
      }
      if (v136 == 2)
      {
        v137 = *(_QWORD *)(v18 + 8);
        if ((v137 & 1) != 0)
          v138 = (int *)(v18 + 16);
        else
          v138 = (int *)(v137 + 4);
        v139 = *v138;
        goto LABEL_323;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xA) & 1) == 0)
      {
LABEL_325:
        v2 = 1;
        goto LABEL_20;
      }
      v135 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x28) == (_QWORD)v4;
    }
    v2 = !v135;
LABEL_20:
    if (*((_DWORD *)v19 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v19))
      goto LABEL_206;
LABEL_21:
    WTF::AtomStringImpl::addLiteral();
    v22 = JSC::JSObject::get(v16, v4, (unint64_t)v150);
    if (v150)
    {
      if (*(_DWORD *)v150 == 2)
        WTF::StringImpl::destroy(v150, v21);
      else
        *(_DWORD *)v150 -= 2;
    }
    if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
      goto LABEL_268;
    if (v22 == 10)
    {
      v13 = 0;
      goto LABEL_48;
    }
    v23 = (JSC::VM *)*((_QWORD *)v149 + 7);
    v167[0] = (uint64_t)v23;
    v150 = (WTF *)v22;
    if ((v22 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v22 + 5) != 2)
    {
      v4 = v149;
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v150, v149);
      v24 = (const char **)v154;
      if (v154)
        goto LABEL_33;
      goto LABEL_204;
    }
    v24 = *(const char ***)(v22 + 8);
    if ((v24 & 1) != 0)
    {
      v24 = *(const char ***)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v22, v149);
      if (!v24)
      {
LABEL_32:
        v154 = (WTF::StringImpl *)v24;
        v4 = v149;
        if (v24)
        {
LABEL_33:
          v25 = *((_DWORD *)v24 + 4);
          v26 = v24[1];
          v27 = *((_DWORD *)v24 + 1);
          if (v26 != "default" && v27 == 7)
          {
            if ((v25 & 4) != 0)
            {
              if (*v26 != 100 || *(_DWORD *)(v26 + 1) != 1969317477 || *(_DWORD *)(v26 + 3) != 1953264993)
                goto LABEL_39;
              goto LABEL_42;
            }
            if (*(_WORD *)v26 != 100)
            {
LABEL_39:
              v11 = 0;
              v13 = 0;
              goto LABEL_44;
            }
            v11 = 0;
            if (*(_QWORD *)(v26 + 2) != 0x75006100660065)
            {
              v13 = 0;
              goto LABEL_44;
            }
            v13 = 0;
            if (*(_QWORD *)(v26 + 6) != 0x74006C00750061)
            {
LABEL_44:
              v154 = 0;
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy((WTF::StringImpl *)v24, v21);
              else
                *(_DWORD *)v24 -= 2;
LABEL_46:
              if (*((_DWORD *)v23 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v23) & 1) != 0)
                goto LABEL_206;
              if ((_DWORD)v11)
              {
LABEL_48:
                WTF::AtomStringImpl::addLiteral();
                v29 = v150;
                v31 = JSC::JSObject::get(v16, v149, (unint64_t)v150);
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2)
                    WTF::StringImpl::destroy(v29, v30);
                  else
                    *(_DWORD *)v29 -= 2;
                }
                if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
                {
LABEL_268:
                  v161 = 1;
LABEL_269:
                  v4 = v149;
                  goto LABEL_69;
                }
                v4 = v149;
                if (v31 == 10)
                {
                  v11 = 0;
                  goto LABEL_62;
                }
                v32 = (JSC::VM *)*((_QWORD *)v149 + 7);
                if (v31 >= 0xFFFE000000000000)
                {
                  v140 = (_DWORD)v31 == 0;
                }
                else
                {
                  *(_QWORD *)&v33 = v31 - 0x2000000000000;
                  if (v31 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                  {
                    if (v33 <= 0.0)
                    {
                      v11 = v33 < 0.0;
LABEL_330:
                      v4 = v149;
                      goto LABEL_58;
                    }
                    goto LABEL_329;
                  }
                  if ((v31 & 0xFFFE000000000002) != 0)
                  {
                    v11 = v31 == 7;
                    goto LABEL_58;
                  }
                  v141 = *(unsigned __int8 *)(v31 + 5);
                  if (v141 == 3)
                  {
                    v144 = *(_DWORD *)(v31 + 8);
LABEL_327:
                    v11 = v144 != 0;
                    goto LABEL_330;
                  }
                  if (v141 == 2)
                  {
                    v142 = *(_QWORD *)(v31 + 8);
                    if ((v142 & 1) != 0)
                      v143 = (int *)(v31 + 16);
                    else
                      v143 = (int *)(v142 + 4);
                    v144 = *v143;
                    goto LABEL_327;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                  {
LABEL_329:
                    v11 = 1;
                    goto LABEL_330;
                  }
                  v4 = v149;
                  v140 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x28) == (_QWORD)v149;
                }
                v11 = !v140;
LABEL_58:
                if (!*((_DWORD *)v32 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v32))
                {
                  if ((_DWORD)v11)
                    v11 = 256;
                  else
                    v11 = 0;
LABEL_62:
                  WTF::AtomStringImpl::addLiteral();
                  v34 = v150;
                  v36 = JSC::JSObject::get(v16, v4, (unint64_t)v150);
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, v35);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12))
                    goto LABEL_206;
                  v11 = v11 | v2;
                  if (v36 == 10)
                    goto LABEL_67;
                  v68 = *((_QWORD *)v4 + 7);
                  v167[0] = v68;
                  if ((v36 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v36 + 5) <= 0x16u)
                  {
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    JSC::throwTypeError();
                    v109 = v154;
                    v154 = 0;
                    if (v109)
                    {
                      if (*(_DWORD *)v109 == 2)
                        WTF::StringImpl::destroy(v109, v108);
                      else
                        *(_DWORD *)v109 -= 2;
                    }
                    v14 = 0;
                    v3 = 0;
                    v2 = 0;
                    v110 = 0;
                    v111 = 1;
                    LODWORD(v152) = 1;
                    v161 = 1;
                    goto LABEL_241;
                  }
                  v154 = 0;
                  v155 = 0;
                  if (JSC::getIterationMode() == 2)
                  {
                    v2 = 1;
                    v3 = v149;
                    while (1)
                    {
                      v70 = (*(_BYTE *)(v36 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v36 + 8) - 8) : 0;
                      if ((int)v2 - 1 >= v70)
                        break;
                      IndexQuickly = (JSC::JSCell *)JSC::JSObject::tryGetIndexQuickly((JSC::JSObject *)v36, (int)v2 - 1, 0);
                      if (!IndexQuickly)
                        IndexQuickly = (JSC::JSCell *)JSC::JSObject::get((JSC::JSObject *)v36, v149, (v2 - 1));
                      if (*(_DWORD *)(v68 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68) & 1) != 0)
                        break;
                      WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::WebTransportHash>>::convert((WTF::StringImpl **)v149, IndexQuickly, (unsigned int *)&v154);
                      if (*(_QWORD *)(v68 + 16))
                      {
                        v121 = JSC::JSArrayIterator::create();
                        v122 = v2 | 0xFFFE000000000000;
                        if ((int)v2 < 0)
                          v122 = COERCE__INT64((double)v2) + 0x2000000000000;
                        *(_QWORD *)(v121 + 16) = v122;
                        goto LABEL_235;
                      }
                      v2 = (v2 + 1);
                    }
                  }
                  else
                  {
                    JSC::iteratorForIterable(v4, (JSC::JSGlobalObject *)v36, v69);
                    if (!*(_DWORD *)(v68 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68) & 1) == 0)
                    {
                      v3 = v149;
                      while (1)
                      {
                        v112 = JSC::iteratorStep();
                        if (*(_QWORD *)(v68 + 16) || v112 == 6)
                          break;
                        v114 = (JSC::JSCell *)JSC::iteratorValue();
                        if (*(_DWORD *)(v68 + 80))
                        {
                          if ((JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68) & 1) != 0)
                            break;
                        }
                        v3 = v149;
                        WebCore::Detail::GenericSequenceInnerConverter<WebCore::IDLDictionary<WebCore::WebTransportHash>>::convert((WTF::StringImpl **)v149, v114, (unsigned int *)&v154);
                        if (*(_QWORD *)(v68 + 16))
                        {
LABEL_235:
                          JSC::iteratorClose();
                          break;
                        }
                      }
                    }
                  }
                  if (*(_DWORD *)(v68 + 80))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v68);
                    v123 = v154;
                    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                    {
                      LODWORD(v152) = 1;
                      if (HIDWORD(v155))
                      {
                        v2 = 24 * HIDWORD(v155);
                        v132 = (char *)v154 + 8;
                        v3 = (WTF::StringImpl *)0xFFFFFFFFLL;
                        do
                        {
                          v133 = *((unsigned int *)v132 + 2);
                          if ((_DWORD)v133 != -1)
                            ((void (*)(char *, char *))off_1E333F820[v133])(&v166, v132);
                          *((_DWORD *)v132 + 2) = -1;
                          v134 = (WTF::StringImpl *)*((_QWORD *)v132 - 1);
                          *((_QWORD *)v132 - 1) = 0;
                          if (v134)
                          {
                            if (*(_DWORD *)v134 == 2)
                              WTF::StringImpl::destroy(v134, v130);
                            else
                              *(_DWORD *)v134 -= 2;
                          }
                          v132 += 24;
                          v2 -= 24;
                        }
                        while (v2);
                        v123 = v154;
                      }
                      v4 = v149;
                      if (v123)
                        WTF::fastFree(v123, v130);
LABEL_239:
                      v111 = v152;
                      if ((_DWORD)v152)
                      {
                        v161 = 1;
                        if ((_DWORD)v152 == -1)
                          goto LABEL_269;
                        v14 = 0;
                        v3 = 0;
                        v2 = 0;
                        v110 = 0;
                        v4 = v149;
                      }
                      else
                      {
                        v14 = v150;
                        v3 = (WTF::StringImpl *)v151;
                        v2 = HIDWORD(v151);
                        v110 = 1;
                        v150 = 0;
                        v151 = 0;
                      }
LABEL_241:
                      ((void (*)(WTF::StringImpl **, WTF **))off_1E333F860[v111])(&v154, &v150);
                      if (v110)
                        goto LABEL_68;
                      if ((_DWORD)v2)
                      {
                        v11 = 24 * v2;
                        v125 = (char *)v14 + 8;
                        v2 = 0xFFFFFFFFLL;
                        v3 = (WTF::StringImpl *)off_1E333F820;
                        do
                        {
                          v126 = *((unsigned int *)v125 + 2);
                          if ((_DWORD)v126 != -1)
                            ((void (*)(WTF **, char *))off_1E333F820[v126])(&v150, v125);
                          *((_DWORD *)v125 + 2) = -1;
                          v127 = (WTF::StringImpl *)*((_QWORD *)v125 - 1);
                          *((_QWORD *)v125 - 1) = 0;
                          if (v127)
                          {
                            if (*(_DWORD *)v127 == 2)
                              WTF::StringImpl::destroy(v127, v124);
                            else
                              *(_DWORD *)v127 -= 2;
                          }
                          v125 += 24;
                          v11 -= 24;
                        }
                        while (v11);
                      }
                      if (v14)
                        WTF::fastFree(v14, v124);
LABEL_69:
                      v37 = v161;
                      if (v161)
                      {
                        SlowCase = 0;
LABEL_164:
                        if (v37 != -1)
                          ((void (*)(WTF **, __int16 *))off_1E333F3C8[v37])(&v150, &v157);
                        v10 = v163;
                        goto LABEL_167;
                      }
                      if (!v163)
                      {
                        v38 = v162;
                        v162 = 0;
                        v167[0] = v38;
                        LOWORD(v150) = v157;
                        v151 = v158;
                        v39 = v159;
                        v158 = 0;
                        v159 = 0;
                        v152 = v39;
                        v153 = v160;
                        WebCore::WebTransport::create(SlowCase, (uint64_t)v167, (uint64_t)&v150, (uint64_t)&v154);
                        if (HIDWORD(v152))
                        {
                          v11 = 24 * HIDWORD(v152);
                          SlowCase = (unint64_t)v151 + 8;
                          v3 = (WTF::StringImpl *)off_1E333F820;
                          do
                          {
                            v41 = *(unsigned int *)(SlowCase + 8);
                            if ((_DWORD)v41 != -1)
                              ((void (*)(JSC::VM **, unint64_t))off_1E333F820[v41])(&v165, SlowCase);
                            *(_DWORD *)(SlowCase + 8) = -1;
                            v42 = *(WTF::StringImpl **)(SlowCase - 8);
                            *(_QWORD *)(SlowCase - 8) = 0;
                            if (v42)
                            {
                              if (*(_DWORD *)v42 == 2)
                                WTF::StringImpl::destroy(v42, v40);
                              else
                                *(_DWORD *)v42 -= 2;
                            }
                            SlowCase += 24;
                            v11 -= 24;
                          }
                          while (v11);
                        }
                        v43 = v151;
                        if (v151)
                        {
                          v151 = 0;
                          LODWORD(v152) = 0;
                          WTF::fastFree(v43, v40);
                        }
                        v44 = (WTF::StringImpl *)v167[0];
                        v167[0] = 0;
                        if (v44)
                        {
                          if (*(_DWORD *)v44 == 2)
                            WTF::StringImpl::destroy(v44, v40);
                          else
                            *(_DWORD *)v44 -= 2;
                        }
                        v45 = v164;
                        if (*((_DWORD *)v164 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v164) & 1) != 0)
                        {
                          SlowCase = 0;
LABEL_161:
                          if (v156 != -1)
                            ((void (*)(WTF **, WTF::StringImpl **))off_1E333F3B8[v156])(&v150, &v154);
                          v37 = v161;
                          goto LABEL_164;
                        }
                        v2 = (uint64_t)&WebCore::JSWebTransport::s_info;
                        if (!v156)
                        {
                          v46 = *(_QWORD *)(v7 + 40);
                          v3 = v154;
                          v154 = 0;
                          if (*(void (***)(WebCore::WebTransport *__hidden))v3 != off_1E336EF18)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1950FD80CLL);
                          }
                          v47 = *(_QWORD *)(v46 + 3296);
                          if (v47)
                          {
                            v48 = *(_DWORD *)(v47 - 8);
                            v49 = ((unint64_t)&WebCore::JSWebTransport::s_info
                                 + ~((_QWORD)&WebCore::JSWebTransport::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebTransport::s_info
                                                                                        + ~((_QWORD)&WebCore::JSWebTransport::s_info << 32)) >> 22);
                            v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
                            v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
                            v52 = v48 & ((v51 >> 31) ^ v51);
                            v53 = *(char ***)(v47 + 16 * v52);
                            if (v53 == &WebCore::JSWebTransport::s_info)
                            {
LABEL_94:
                              v55 = *(_QWORD *)(v47 + 16 * v52 + 8);
                              if (v55)
                                goto LABEL_96;
                            }
                            else
                            {
                              v54 = 1;
                              while (v53)
                              {
                                v52 = ((_DWORD)v52 + v54) & v48;
                                v53 = *(char ***)(v47 + 16 * v52);
                                ++v54;
                                if (v53 == &WebCore::JSWebTransport::s_info)
                                  goto LABEL_94;
                              }
                            }
                          }
                          v56 = *(uint64_t **)(v46 + 56);
                          Structure = WebCore::JSWebTransportPrototype::createStructure(v56, v46, *(JSC::JSCell **)(v46 + 656));
                          *(_DWORD *)(Structure + 16) |= 0x80000u;
                          v60 = (JSC::JSCell *)WebCore::JSWebTransportPrototype::create((WebCore::JSWebTransportPrototype *)v56, Structure, v58, v59);
                          v61 = WebCore::JSWebTransport::createStructure(v56, v46, v60);
                          v55 = WebCore::cacheDOMStructure((JSCell *)v46, v61, (uint64_t)&WebCore::JSWebTransport::s_info);
LABEL_96:
                          v62 = *(_QWORD *)(v46 + 56);
                          v63 = *(_QWORD *)(v62 + 41456);
                          v64 = *(_QWORD *)(v63 + 23536);
                          v65 = *(_QWORD **)(v64 + 2320);
                          if (v65)
                            goto LABEL_131;
                          v66 = *(_QWORD *)(v63 + 22648);
                          if (__ldaxr((unsigned __int8 *)v66))
                          {
                            __clrex();
                          }
                          else if (!__stxr(1u, (unsigned __int8 *)v66))
                          {
                            goto LABEL_116;
                          }
                          MEMORY[0x19AEA534C](v66);
LABEL_116:
                          v72 = *(_QWORD *)(v66 + 2824);
                          if (!*(_QWORD *)(v72 + 2320))
                          {
                            v73 = WTF::fastMalloc((WTF *)0xF8);
                            WTF::CString::CString((WTF::CString *)&v150, "IsoSpace T");
                            v167[0] = 0;
                            MEMORY[0x19AEA3204](v73, &v150, v62 + 192, v62 + 1872, 32, 8, v167);
                            v75 = v167[0];
                            v167[0] = 0;
                            if (v75)
                              (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
                            v76 = v150;
                            v150 = 0;
                            if (v76)
                            {
                              if (*(_DWORD *)v76 == 1)
                                WTF::fastFree(v76, v74);
                              else
                                --*(_DWORD *)v76;
                            }
                            v77 = *(_QWORD *)(v72 + 2320);
                            *(_QWORD *)(v72 + 2320) = v73;
                            if (v77)
                              (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
                          }
                          v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
                          JSC::GCClient::IsoSubspace::IsoSubspace();
                          v78 = *(_QWORD *)(v64 + 2320);
                          *(_QWORD *)(v64 + 2320) = v65;
                          if (v78)
                          {
                            v79 = (WTF *)MEMORY[0x19AEA3528]();
                            WTF::fastFree(v79, v80);
                          }
                          v81 = __ldxr((unsigned __int8 *)v66);
                          if (v81 == 1)
                          {
                            if (!__stlxr(0, (unsigned __int8 *)v66))
                            {
LABEL_131:
                              SlowCase = v65[3];
                              if (SlowCase >= v65[4])
                              {
                                SlowCase = v65[5];
                                v2 = (uint64_t)&WebCore::JSWebTransport::s_info;
                                if ((SlowCase & 1) != 0)
                                {
                                  JSC::sanitizeStackForVM();
                                  SlowCase = JSC::LocalAllocator::allocateSlowCase();
                                }
                                else
                                {
                                  v120 = *(_QWORD *)(SlowCase + 8) ^ v65[6];
                                  v65[4] = SlowCase + HIDWORD(v120);
                                  v65[5] = SlowCase + (int)v120;
                                  v65[3] = SlowCase + 32;
                                }
                              }
                              else
                              {
                                v65[3] = SlowCase + 32;
                                v2 = (uint64_t)&WebCore::JSWebTransport::s_info;
                              }
                              *(_DWORD *)SlowCase = 0;
                              WebCore::JSDOMObject::JSDOMObject(SlowCase, v55);
                              *(_QWORD *)(SlowCase + 24) = v3;
                              v4 = v149;
                              if (*(_BYTE *)(v62 + 755))
                                __dmb(0xAu);
                              v7 = *(_QWORD *)(v46 + 3320);
                              v11 = (uint64_t)&qword_1EE337338;
                              if ((byte_1EE337340 & 1) != 0)
                                goto LABEL_136;
                              goto LABEL_296;
                            }
                          }
                          else
                          {
                            __clrex();
                          }
                          WTF::Lock::unlockSlow((WTF::Lock *)v66);
                          goto LABEL_131;
                        }
                        if (v156 == 1)
                        {
                          v117 = (WTF::StringImpl *)v154;
                          LOBYTE(v150) = (_BYTE)v154;
                          v118 = v155;
                          v155 = 0;
                          v151 = v118;
                          if (!*((_QWORD *)v45 + 2))
                          {
                            v119.super.isa = (Class)WebCore::createDOMException(v4, (JSC::JSGlobalObject *)v154, (JSC::JSGlobalObject *)&v151);
                            JSC::VM::throwException(v45, v4, v119);
                            v118 = v151;
                          }
                          v151 = 0;
                          if (v118)
                          {
                            if (*(_DWORD *)v118 == 2)
                              WTF::StringImpl::destroy(v118, v117);
                            else
                              *(_DWORD *)v118 -= 2;
                          }
                          SlowCase = 0;
LABEL_146:
                          if (*((_DWORD *)v45 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) != 0)
                          {
LABEL_229:
                            SlowCase = 0;
                            goto LABEL_161;
                          }
                          v85 = *(JSC::JSCell **)(v148 + 40);
                          if (((unint64_t)v85 & 0xFFFE000000000002) != 0
                            || (v86 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v85)) == 0
                            || (v88 = v86, v86 == *(JSC::JSGlobalObject **)(v148 + 24))
                            || (v89 = (JSC::VM *)*((_QWORD *)v4 + 7),
                                FunctionRealm = JSC::getFunctionRealm(v4, v86, v87),
                                *((_DWORD *)v89 + 20))
                            && (JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) != 0)
                          {
LABEL_160:
                            if (!*((_DWORD *)v45 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) == 0)
                              goto LABEL_161;
                            goto LABEL_229;
                          }
                          v92 = *(_QWORD *)(FunctionRealm + 3296);
                          if (v92)
                          {
                            v93 = *(_DWORD *)(v92 - 8);
                            v94 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
                            v95 = 9 * ((v94 + ~(v94 << 13)) ^ ((v94 + ~(v94 << 13)) >> 8));
                            v96 = (v95 ^ (v95 >> 15)) + ~((v95 ^ (v95 >> 15)) << 27);
                            v97 = v93 & ((v96 >> 31) ^ v96);
                            v98 = *(_QWORD *)(v92 + 16 * v97);
                            if (v98 == v2)
                            {
LABEL_156:
                              v100 = *(JSC::JSObject **)(v92 + 16 * v97 + 8);
                              if (v100)
                              {
LABEL_158:
                                SubclassStructure = JSC::InternalFunction::createSubclassStructure(v4, v88, v100, v90);
                                if (!*((_DWORD *)v89 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v89) & 1) == 0)
                                  JSC::JSObject::setStructure((JSCell *)SlowCase, v89, SubclassStructure);
                                goto LABEL_160;
                              }
                            }
                            else
                            {
                              v99 = 1;
                              while (v98)
                              {
                                v97 = ((_DWORD)v97 + v99) & v93;
                                v98 = *(_QWORD *)(v92 + 16 * v97);
                                ++v99;
                                if (v98 == v2)
                                  goto LABEL_156;
                              }
                            }
                          }
                          v101 = WebCore::JSWebTransportPrototype::createStructure((uint64_t *)v89, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
                          *(_DWORD *)(v101 + 16) |= 0x80000u;
                          v104 = (JSC::JSCell *)WebCore::JSWebTransportPrototype::create(v89, v101, v102, v103);
                          v105 = WebCore::JSWebTransport::createStructure((uint64_t *)v89, FunctionRealm, v104);
                          v100 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v105, (uint64_t)&WebCore::JSWebTransport::s_info);
                          goto LABEL_158;
                        }
                      }
                      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_296:
                      *(_QWORD *)v11 = &off_1E33370D0;
                      *(_BYTE *)(v11 + 8) = 1;
LABEL_136:
                      v150 = v3;
                      if ((SlowCase & 8) != 0)
                        v82 = (SlowCase - 112) | 1;
                      else
                        v82 = SlowCase & 0xFFFFFFFFFFFFC000;
                      if ((v82 & 1) != 0)
                        v83 = v82 + 47;
                      else
                        v83 = *(_QWORD *)v82 + 32;
                      Allocator = *(_QWORD **)(v83 + 16);
                      if (!Allocator)
                        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
                      *(_QWORD *)(v83 + 16) = *Allocator;
                      *Allocator = SlowCase;
                      Allocator[1] = v11;
                      Allocator[2] = v7;
                      v167[0] = (uint64_t)Allocator;
                      JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v7 + 32), (uint64_t *)&v150, v167);
                      if (v167[0])
                        *(_QWORD *)(v167[0] + 8) = 3;
                      v45 = v164;
                      goto LABEL_146;
                    }
                  }
                  else
                  {
                    v123 = v154;
                  }
                  v4 = v149;
                  v150 = v123;
                  v151 = v155;
                  LODWORD(v152) = 0;
                  goto LABEL_239;
                }
LABEL_206:
                v161 = 1;
                goto LABEL_69;
              }
LABEL_205:
              JSC::throwTypeError();
              goto LABEL_206;
            }
LABEL_42:
            v28 = &WebCore::parseEnumerationFromString<WebCore::WebTransportCongestionControl>(WTF::String const&)::mappings;
LABEL_43:
            v13 = *((_BYTE *)v28 + 16);
            v11 = 1;
            goto LABEL_44;
          }
          if (v26 == "default" && v27 == 7)
            goto LABEL_42;
          if (v26 != "low-latency" && v27 == 11)
          {
            if ((v25 & 4) != 0)
            {
              if (*v26 != 108
                || *(_QWORD *)(v26 + 1) != 0x6E6574616C2D776FLL
                || *(_QWORD *)(v26 + 3) != 0x79636E6574616C2DLL)
              {
                goto LABEL_39;
              }
            }
            else
            {
              if (*(_WORD *)v26 != 108)
                goto LABEL_39;
              v128 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v26 + 2), (int16x8_t)xmmword_1968C18B0);
              v128.i16[0] = vminvq_u16(v128);
              if (!v128.i32[0])
                goto LABEL_39;
              v129 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v26 + 6), (int16x8_t)xmmword_1968C18C0);
              v129.i16[0] = vminvq_u16(v129);
              if (!v129.i32[0])
                goto LABEL_39;
            }
            v28 = &off_1E3336068;
            goto LABEL_43;
          }
          if (v26 == "low-latency" && v27 == 11)
          {
            v28 = &off_1E3336068;
LABEL_345:
            v4 = v149;
            goto LABEL_43;
          }
          if (v26 == "throughput" || v27 != 10)
          {
            if (v27 == 10 && v26 == "throughput")
              goto LABEL_344;
          }
          else if ((v25 & 4) != 0)
          {
            if (*v26 == 116
              && *(_QWORD *)(v26 + 1) == 0x75706867756F7268
              && *(_QWORD *)(v26 + 2) == 0x7475706867756F72)
            {
LABEL_344:
              v28 = &off_1E3336080;
              goto LABEL_345;
            }
          }
          else if (*(_WORD *)v26 == 116)
          {
            v145 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v26 + 2), (int16x8_t)xmmword_1968C18D0);
            v145.i16[0] = vminvq_u16(v145);
            if (v145.i32[0])
            {
              v146 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v26 + 4), (int16x8_t)xmmword_1968C18E0);
              v146.i16[0] = vminvq_u16(v146);
              if (v146.i32[0])
                goto LABEL_344;
            }
          }
          v11 = 0;
          v13 = 0;
          v4 = v149;
          goto LABEL_44;
        }
LABEL_204:
        v13 = 0;
        v11 = 0;
        goto LABEL_46;
      }
    }
    else if (!v24)
    {
      goto LABEL_32;
    }
    *(_DWORD *)v24 += 2;
    goto LABEL_32;
  }
  SlowCase = 0;
LABEL_167:
  if (v10 != -1)
    ((void (*)(__int16 *, uint64_t *))off_1E333EAB8[v10])(&v157, &v162);
  return (_QWORD *)SlowCase;
}

