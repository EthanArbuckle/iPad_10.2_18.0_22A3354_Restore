void WebCore::reportException(JSC::JSGlobalObject *a1, uint64_t a2, WebCore::CachedScript *a3, char a4, uint64_t a5)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  char **v16;
  BOOL v17;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebCore::ScriptExecutionContext *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  Inspector::ScriptCallStack *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  Inspector::ScriptCallStack *v50;
  _BYTE v51[16];
  JSC::VM *v52;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v6 = *((_QWORD *)v5 + 14);
  if (!*(_BYTE *)(v6 + 6))
    goto LABEL_77;
  v12 = *(_QWORD *)(v6 + 8);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13)
    v13 = WTF::Thread::initializeCurrentTLS(0);
  if (v12 != v13)
    goto LABEL_77;
  if (*((_QWORD *)v5 + 3) == a2)
    return;
  v52 = v5;
  JSC::ErrorHandlingScope::ErrorHandlingScope();
  Inspector::createScriptCallStackFromException();
  JSC::VM::clearException(v5);
  *((_QWORD *)v5 + 4) = 0;
  v14 = *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C);
  v15 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C) != 0;
  v16 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v17 = v16 == &WebCore::JSDOMWindow::s_info;
  else
    v17 = 1;
  if (!v17)
  {
    do
    {
      v16 = (char **)v16[2];
      v15 = v16 != 0;
    }
    while (v16 != &WebCore::JSDOMWindow::s_info && v16 != 0);
  }
  if (!v15)
    goto LABEL_31;
  v19 = *((_QWORD *)a1 + 426);
  if (v19)
    v20 = *(_BYTE *)(v19 + 56) == 0;
  else
    v20 = 0;
  if (v20)
  {
    v21 = *(_DWORD *)(v19 + 24);
    *(_DWORD *)(v19 + 24) = v21 + 1;
    v22 = *(_QWORD *)(v19 + 72);
    if (!v22)
      goto LABEL_27;
    v23 = *(_QWORD *)(v22 + 8);
    if (!v23)
      goto LABEL_27;
    if (!*(_BYTE *)(v23 + 178))
    {
      v24 = *(_QWORD *)(v23 + 240);
      if (!v24 || (v25 = *(_QWORD *)(v24 + 8)) == 0 || *(_QWORD *)(*(_QWORD *)(v25 + 296) + 696) != v19)
      {
LABEL_27:
        if (v21)
          *(_DWORD *)(v19 + 24) = v21;
        else
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
        goto LABEL_62;
      }
      if (v21)
        *(_DWORD *)(v19 + 24) = v21;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
LABEL_31:
      v49 = 0;
      v26 = Inspector::ScriptCallStack::firstNonNativeCallFrame(v50);
      if (v26)
      {
        v28 = *(unsigned int *)(v26 + 28);
        v29 = *(unsigned int *)(v26 + 32);
        v30 = *(WTF::StringImpl **)(v26 + 8);
        if (v30)
          *(_DWORD *)v30 += 2;
        v31 = v49;
        v49 = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v27);
          else
            *(_DWORD *)v31 -= 2;
        }
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
      WebCore::retrieveErrorMessage(a1, *(_QWORD *)(a2 + 8), (uint64_t)v5, &v52, &v48);
      v32 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
      if (Inspector::ScriptCallStack::size(v50))
      {
        v33 = v50;
        if (v50)
          ++*(_DWORD *)v50;
      }
      else
      {
        v33 = 0;
      }
      v47 = v33;
      WebCore::ScriptExecutionContext::reportException(v32, (_DWORD **)&v48, v28, v29, (const WTF::String *)&v49, a2, &v47, a3, a4);
      v35 = v47;
      v47 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
        {
          v45 = (WTF *)MEMORY[0x19AEA6024]();
          WTF::fastFree(v45, v46);
          if (a5)
            goto LABEL_46;
          goto LABEL_56;
        }
        --*(_DWORD *)v35;
      }
      if (a5)
      {
LABEL_46:
        v36 = v48;
        if (v48)
          *(_DWORD *)v48 += 2;
        v37 = *(WTF::StringImpl **)a5;
        *(_QWORD *)a5 = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v34);
          else
            *(_DWORD *)v37 -= 2;
        }
        *(_DWORD *)(a5 + 8) = v28;
        *(_DWORD *)(a5 + 12) = v29;
        v38 = v49;
        if (v49)
          *(_DWORD *)v49 += 2;
        v39 = *(WTF::StringImpl **)(a5 + 24);
        *(_QWORD *)(a5 + 24) = v38;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v34);
          else
            *(_DWORD *)v39 -= 2;
        }
      }
LABEL_56:
      v40 = v48;
      v48 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v34);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v49;
      v49 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v34);
        else
          *(_DWORD *)v41 -= 2;
      }
      goto LABEL_62;
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x194341C7CLL);
  }
LABEL_62:
  v42 = v50;
  v50 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 1)
    {
      v43 = (WTF *)MEMORY[0x19AEA6024]();
      WTF::fastFree(v43, v44);
    }
    else
    {
      --*(_DWORD *)v42;
    }
  }
  JSC::ErrorHandlingScope::~ErrorHandlingScope((JSC::ErrorHandlingScope *)v51);
}

uint64_t *WTF::String::operator=(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(a1, a2);
  return a1;
}

WTF::StringImpl *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  uint64_t v5[8];
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  _QWORD v8[2];
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t *v11;

  v5[2] = (uint64_t)a1;
  v5[1] = (uint64_t)a2;
  v5[4] = (uint64_t)v5;
  v5[3] = (uint64_t)a2;
  v5[7] = (uint64_t)v5;
  v5[6] = (uint64_t)a2;
  v7 = a2;
  v6 = *a2;
  if (v6)
    WTF::StringImpl::ref(v6);
  v5[0] = (uint64_t)v6;
  WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(a1, v5);
  v5[5] = (uint64_t)v5;
  v8[1] = v5;
  v8[0] = 0;
  v11 = v5;
  v10 = v8;
  result = (WTF::StringImpl *)std::exchange[abi:sn180100]<WTF::StringImpl *,decltype(nullptr) &>(v5);
  v9 = result;
  if (result)
    return WTF::StringImpl::deref(v9, v4);
  return result;
}

uint64_t *WTF::RefPtr<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::swap<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>(uint64_t *a1, uint64_t *a2)
{
  return std::swap[abi:sn180100]<WTF::StringImpl *>(a1, a2);
}

_DWORD *WTF::StringImpl::ref(_DWORD *this)
{
  *this += 2;
  return this;
}

WTF::StringImpl *WTF::StringImpl::deref(WTF::StringImpl *this, WTF::StringImpl *a2)
{
  if (*(_DWORD *)this == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
  *(_DWORD *)this -= 2;
  return this;
}

uint64_t WebCore::LocalDOMWindow::isCurrentlyDisplayedInFrame(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        return *(_QWORD *)(*(_QWORD *)(v4 + 296) + 696) == (_QWORD)this;
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScriptExecutionContext::reportException(WebCore::ScriptExecutionContext *a1, _DWORD **a2, uint64_t a3, uint64_t a4, const WTF::String *a5, uint64_t a6, WTF **a7, WebCore::CachedScript *a8, char a9)
{
  char **v15;
  char **v16;
  WTF::StringImpl *v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t result;
  _DWORD *v40;
  _DWORD *v41;
  WTF *v42;
  uint64_t v43;
  char *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  void *v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  _QWORD *v72;
  WTF *v73;

  if (*((_BYTE *)a1 + 277))
  {
    v15 = (char **)*((_QWORD *)a1 + 18);
    if (!v15)
    {
      v16 = (char **)WTF::fastMalloc((WTF *)0x10);
      *v16 = 0;
      v16[1] = 0;
      v18 = (WTF *)*((_QWORD *)a1 + 18);
      *((_QWORD *)a1 + 18) = v16;
      if (v18)
      {
        v19 = *((unsigned int *)v18 + 3);
        if ((_DWORD)v19)
        {
          v20 = *(WTF ***)v18;
          v21 = 8 * v19;
          do
          {
            v22 = *v20;
            *v20 = 0;
            if (v22)
              std::default_delete<WebCore::ScriptExecutionContext::PendingException>::operator()[abi:sn180100](v22, v17);
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
        v23 = *(WTF **)v18;
        if (*(_QWORD *)v18)
        {
          *(_QWORD *)v18 = 0;
          *((_DWORD *)v18 + 2) = 0;
          WTF::fastFree(v23, v17);
        }
        WTF::fastFree(v18, v17);
        v15 = (char **)*((_QWORD *)a1 + 18);
      }
      else
      {
        v15 = v16;
      }
    }
    result = WTF::fastMalloc((WTF *)0x20);
    v40 = *a2;
    if (*a2)
      *v40 += 2;
    *(_QWORD *)result = v40;
    *(_DWORD *)(result + 8) = a3;
    *(_DWORD *)(result + 12) = a4;
    v41 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
      *v41 += 2;
    *(_QWORD *)(result + 16) = v41;
    v42 = *a7;
    *a7 = 0;
    *(_QWORD *)(result + 24) = v42;
    v73 = (WTF *)result;
    v43 = *((unsigned int *)v15 + 3);
    if ((_DWORD)v43 == *((_DWORD *)v15 + 2))
    {
      v44 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v43 + 1, (unint64_t)&v73);
      v46 = *((unsigned int *)v15 + 3);
      v47 = *v15;
      v48 = *(_QWORD *)v44;
      *(_QWORD *)v44 = 0;
      *(_QWORD *)&v47[8 * v46] = v48;
      result = (uint64_t)v73;
      *((_DWORD *)v15 + 3) = v46 + 1;
      v73 = 0;
      if (result)
        return std::default_delete<WebCore::ScriptExecutionContext::PendingException>::operator()[abi:sn180100]((WTF *)result, v45);
    }
    else
    {
      *(_QWORD *)&(*v15)[8 * v43] = result;
      *((_DWORD *)v15 + 3) = v43 + 1;
    }
  }
  else
  {
    v26 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 384))(a1);
    if (!v26)
      goto LABEL_53;
    v27 = v26;
    if ((*(_BYTE *)(v26 + 22) & 2) != 0)
      *(_DWORD *)(v26 + 24) += 2;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
    if (WebCore::ScriptExecutionContext::canIncludeErrorDetails(a1, a8, a5, a9))
    {
      v28 = (*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 344))(a1);
      v29 = v28;
      if (a6)
        v30 = *(_QWORD *)(a6 + 8);
      else
        v30 = 2;
      v49 = *(_QWORD *)(v28 + 712);
      if (!v49)
      {
        JSC::HandleSet::grow((JSC::HandleSet *)(v28 + 672));
        v49 = *(_QWORD *)(v29 + 712);
      }
      *(_QWORD *)(v29 + 712) = *(_QWORD *)v49;
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)v49 = 0;
      *(_QWORD *)(v49 + 8) = 0;
      v72 = (_QWORD *)(v49 + 16);
      if (v30 && (v30 & 0xFFFE000000000002) == 0)
      {
        v50 = *(unint64_t **)((v49 & 0xFFFFFFFFFFFFF000) + 0x10);
        v51 = v50[3];
        v50 += 3;
        *(_QWORD *)v49 = v51;
        *(_QWORD *)(v49 + 8) = v50;
        *v50 = v49;
        *(_QWORD *)(v51 + 8) = v49;
      }
      *(_QWORD *)(v49 + 16) = v30;
      WebCore::ErrorEvent::create(a2, (_DWORD **)a5, a3, a4, (unint64_t *)&v72, &v73);
      v32 = v73;
      v73 = 0;
      if (v72)
      {
        v52 = v72 - 2;
        v53 = *(_QWORD *)(((unint64_t)(v72 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v54 = (uint64_t *)*(v72 - 1);
        if (v54)
        {
          v55 = *v52;
          *v54 = *v52;
          *(_QWORD *)(v55 + 8) = v54;
          *v52 = 0;
          v52[1] = 0;
        }
        *v52 = *(_QWORD *)(v53 + 40);
        *(_QWORD *)(v53 + 40) = v52;
        v72 = 0;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v69 = 0;
      v70 = 0;
      WebCore::ErrorEvent::create((_DWORD **)&v71, (_DWORD **)&v70, 0, 0, &v69, &v73);
      v32 = v73;
      v73 = 0;
      if (v69)
      {
        v33 = (uint64_t *)(v69 - 16);
        v34 = *(_QWORD *)(((v69 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v35 = *(uint64_t **)(v69 - 8);
        if (v35)
        {
          v36 = *v33;
          *v35 = *v33;
          *(_QWORD *)(v36 + 8) = v35;
          *v33 = 0;
          v33[1] = 0;
        }
        *v33 = *(_QWORD *)(v34 + 40);
        *(_QWORD *)(v34 + 40) = v33;
        v69 = 0;
      }
      v37 = v70;
      v70 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v31);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v71;
      v71 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v31);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    *((_BYTE *)a1 + 277) = 1;
    result = (*(uint64_t (**)(uint64_t, WTF *))(*(_QWORD *)v27 + 48))(v27, v32);
    *((_BYTE *)a1 + 277) = 0;
    v57 = *((_DWORD *)v32 + 5);
    if (*((_DWORD *)v32 + 4) == 1)
      result = (*(uint64_t (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
    else
      --*((_DWORD *)v32 + 4);
    if ((*(_BYTE *)(v27 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)v27);
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
    }
    if ((v57 & 0x40) == 0)
    {
LABEL_53:
      v58 = *a7;
      if (*a7)
        ++*(_DWORD *)v58;
      v73 = v58;
      (*(void (**)(WebCore::ScriptExecutionContext *, _DWORD **, const WTF::String *, uint64_t, uint64_t, WTF **))(*(_QWORD *)a1 + 424))(a1, a2, a5, a3, a4, &v73);
      result = (uint64_t)v73;
      v73 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          v67 = (WTF *)MEMORY[0x19AEA6024]();
          result = WTF::fastFree(v67, v68);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    v59 = (WTF *)*((_QWORD *)a1 + 18);
    if (v59)
    {
      *((_QWORD *)a1 + 18) = 0;
      v60 = *(WTF **)v59;
      v61 = *((unsigned int *)v59 + 3);
      if ((_DWORD)v61)
      {
        v62 = 8 * v61;
        do
        {
          v63 = *(WTF **)v60;
          v60 = (WTF *)((char *)v60 + 8);
          (*(void (**)(WebCore::ScriptExecutionContext *, WTF *, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 424))(a1, v63, (uint64_t)v63 + 16, *((unsigned int *)v63 + 2), *((unsigned int *)v63 + 3), (uint64_t)v63 + 24);
          v62 -= 8;
        }
        while (v62);
        v64 = *((unsigned int *)v59 + 3);
        v60 = *(WTF **)v59;
        if ((_DWORD)v64)
        {
          v65 = 8 * v64;
          do
          {
            v66 = *(WTF **)v60;
            *(_QWORD *)v60 = 0;
            if (v66)
              std::default_delete<WebCore::ScriptExecutionContext::PendingException>::operator()[abi:sn180100](v66, v56);
            v60 = (WTF *)((char *)v60 + 8);
            v65 -= 8;
          }
          while (v65);
          v60 = *(WTF **)v59;
        }
      }
      if (v60)
      {
        *(_QWORD *)v59 = 0;
        *((_DWORD *)v59 + 2) = 0;
        WTF::fastFree(v60, v56);
      }
      return WTF::fastFree(v59, v56);
    }
  }
  return result;
}

uint64_t WebCore::Document::addMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD **a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  __int16 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;

  result = WTF::isMainThread((WTF *)a1);
  if ((result & 1) != 0)
  {
    v19 = *(_QWORD *)(a1 + 528);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
      {
        v21 = *(_QWORD *)(v20 + 24);
        if (v21)
        {
          v22 = *(uint64_t ***)(v21 + 8);
          if (v22)
          {
            ++*(_DWORD *)v22;
            result = (uint64_t)WebCore::PageConsoleClient::addMessage(v22[99], a2, a3, a4, a5, a6, a7, a8, a9, a10);
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::Page::~Page((uint64_t)v22);
              return WTF::fastFree((WTF *)v22, v25);
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(v27) = a2;
    HIBYTE(v27) = a3;
    WTF::String::isolatedCopy();
    v23 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v23 = &off_1E33A3D28;
    *(_WORD *)(v23 + 8) = v27;
    *(_QWORD *)(v23 + 16) = v29;
    v28 = *(_OWORD *)(a1 + 416);
    v30 = *(_OWORD *)(a1 + 432);
    v24 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v24 = &off_1E33A3A20;
    *(_OWORD *)(v24 + 16) = v28;
    *(_OWORD *)(v24 + 32) = v30;
    *(_QWORD *)(v24 + 48) = v23;
    *(_BYTE *)(v24 + 56) = 0;
    v26 = v24;
    WTF::callOnMainThread();
    result = v26;
    if (v26)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  return result;
}

uint64_t WebCore::ScriptExecutionContext::canIncludeErrorDetails(WebCore::ScriptExecutionContext *this, WebCore::CachedScript *a2, const WTF::String *a3, char a4)
{
  uint64_t v4;
  WTF::StringImpl *v7;
  uint64_t isCORSSameOrigin;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12[5];

  if ((a4 & 1) != 0)
    return 1;
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *, const WTF::String *, _QWORD))(*(_QWORD *)this + 120))(v12, this, a3, 0);
  if ((WTF::URL::protocolIs() & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    if (a2)
    {
      isCORSSameOrigin = WebCore::CachedResource::isCORSSameOrigin(a2);
    }
    else
    {
      WebCore::SecurityContext::securityOrigin(this, v7);
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      isCORSSameOrigin = WebCore::SecurityOrigin::canRequest(v9, (WebCore::ThreadableBlobRegistry *)v12, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    }
    v4 = isCORSSameOrigin;
  }
  v10 = v12[0];
  v12[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  return v4;
}

uint64_t WebCore::retrieveErrorMessage@<X0>(JSC::JSGlobalObject *a1@<X0>, unint64_t this@<X2>, uint64_t a3@<X1>, JSC::VM **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *v13;
  uint64_t result;
  _DWORD *v15;
  unint64_t v16;

  v16 = this;
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_21;
  v8 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = 16 * v8;
  if ((_DWORD)v8)
    v11 = v10 == MEMORY[0x1E0CBE398];
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = *(_QWORD *)(v10 + 16);
      v9 = v10 != 0;
    }
    while (v10 != MEMORY[0x1E0CBE398] && v10 != 0);
  }
  if (v9)
  {
    JSC::ErrorInstance::sanitizedToString();
    goto LABEL_18;
  }
  if (*(_BYTE *)(this + 5) != 2)
  {
LABEL_21:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v16, a1);
    v13 = v15;
    goto LABEL_16;
  }
  v13 = *(_DWORD **)(this + 8);
  if ((v13 & 1) != 0)
  {
    v13 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
    if (!v13)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (v13)
LABEL_15:
    *v13 += 2;
LABEL_16:
  *a5 = v13;
LABEL_18:
  result = JSC::VM::clearException(*a4);
  *(_QWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t *WebCore::PageConsoleClient::addMessage(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD **a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  Inspector::ScriptArguments **v15;
  _DWORD *v16;
  uint64_t v17;
  Inspector::ScriptArguments **v18;

  v13 = (uint64_t)result;
  if ((_DWORD)a2 == 3 || !WebCore::muteCount)
  {
    if (*a8)
    {
      v16 = *a8;
      *a8 = 0;
      v14 = WTF::fastMalloc((WTF *)0x60);
      v15 = (Inspector::ScriptArguments **)MEMORY[0x19AEA5F34](v14, a2, 0, a3, a4, &v16, a10, 0.0);
      v17 = 0;
      v18 = v15;
      std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v17);
      WTF::Ref<Inspector::ScriptCallStack,WTF::RawPtrTraits<Inspector::ScriptCallStack>,WTF::DefaultRefDerefTraits<Inspector::ScriptCallStack>>::~Ref(&v16);
    }
    else
    {
      WTF::fastMalloc((WTF *)0x60);
      v17 = 0;
      v18 = (Inspector::ScriptArguments **)Inspector::ConsoleMessage::ConsoleMessage();
      std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v17);
    }
    WebCore::PageConsoleClient::addMessage(v13, &v18);
    return std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100]((uint64_t *)&v18);
  }
  return result;
}

uint64_t *WebCore::PageConsoleClient::addMessage(uint64_t a1, Inspector::ScriptArguments ***a2)
{
  WebCore::Page *v3;
  uint64_t v4;
  Inspector::ScriptArguments **v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  const Inspector::ConsoleMessage *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *result;
  WTF::StringImpl *v13;
  uint64_t v14;
  _BYTE v15[16];
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore::Page *v19;

  v3 = *(WebCore::Page **)(*(_QWORD *)(a1 + 24) + 8);
  ++*(_DWORD *)v3;
  v19 = v3;
  v4 = *((_QWORD *)v3 + 126);
  if (v4 < 0 && v4 != -1)
  {
LABEL_10:
    v11 = (uint64_t)*a2;
    *a2 = 0;
    v14 = v11;
    WebCore::InspectorInstrumentation::addMessageToConsole(*(_QWORD *)(*((_QWORD *)v3 + 10) + 8), &v14);
    std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v14);
    return (uint64_t *)WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v19);
  }
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v5 = *a2;
  if (*((_BYTE *)*a2 + 1) != 13)
  {
    WTF::String::operator=((uint64_t *)&v18, v5 + 1);
LABEL_4:
    v6 = 0;
    v7 = 0;
    goto LABEL_5;
  }
  Inspector::ScriptArguments::getArgumentsAsStrings(v5[2]);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&v16, (WTF::StringImpl *)v15);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v13);
  if (!HIDWORD(v17))
    goto LABEL_4;
  result = WTF::String::operator=((uint64_t *)&v18, v16);
  if (HIDWORD(v17))
  {
    v7 = HIDWORD(v17) - 1;
    v6 = v16 + 1;
LABEL_5:
    (*(void (**)(_QWORD, _QWORD, _QWORD, WTF::StringImpl **, _QWORD, _QWORD, Inspector::ScriptArguments **))(**(_QWORD **)(*((_QWORD *)v3 + 6) + 16) + 184))(*(_QWORD *)(*((_QWORD *)v3 + 6) + 16), *(unsigned __int8 *)*a2, *((unsigned __int8 *)*a2 + 2), &v18, *((unsigned int *)*a2 + 16), *((unsigned int *)*a2 + 17), *a2 + 6);
    (*(void (**)(_QWORD, _QWORD, _QWORD, WTF::StringImpl **, WTF::StringImpl **, uint64_t, _QWORD, _QWORD, Inspector::ScriptArguments **))(**(_QWORD **)(*((_QWORD *)v3 + 6) + 16) + 192))(*(_QWORD *)(*((_QWORD *)v3 + 6) + 16), *(unsigned __int8 *)*a2, *((unsigned __int8 *)*a2 + 2), &v18, v6, v7, *((unsigned int *)*a2 + 16), *((unsigned int *)*a2 + 17), *a2 + 6);
    if ((*(_QWORD *)(*((_QWORD *)v3 + 14) + 688) & 4) != 0 || WebCore::printExceptions)
      WebCore::PageConsoleClient::logMessageToSystemConsole(*a2, v8);
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v8);
    v10 = v18;
    v18 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::allowableImageTypes@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  const char *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;

  WebCore::defaultSupportedImageTypes(this);
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const>((_QWORD *)a2);
  {
    WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes = 0;
    unk_1EE2F4F10 = 0;
    qword_1EE2F4F18 = 0;
  }
  WTF::map<0ul,WTF::CrashOnOverflow,16ul,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const>(v13);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a2, (uint64_t)v13);
  v11 = "public.heif";
  v12 = 12;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t)&v11);
    v5 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    v4 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(v4 + 8 * v3) = v14;
    v5 = *(_DWORD *)(a2 + 12) + 1;
    *(_DWORD *)(a2 + 12) = v5;
  }
  v11 = "public.heic";
  v12 = 12;
  if (v5 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t)&v11);
    v7 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    v6 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(v6 + 8 * v5) = v14;
    v7 = *(_DWORD *)(a2 + 12) + 1;
    *(_DWORD *)(a2 + 12) = v7;
  }
  v11 = "public.jpeg-2000";
  v12 = 17;
  if (v7 == *(_DWORD *)(a2 + 8))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(a2, (uint64_t)&v11);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)(v8 + 8 * v7) = v14;
    ++*(_DWORD *)(a2 + 12);
  }
  return WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v13, v9);
}

void sub_194342BFC(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  WTF::StringImpl *v7;
  va_list va;

  va_start(va, a5);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, v7);
  _Unwind_Resume(a1);
}

void sub_194342C24()
{
  JUMPOUT(0x194342C14);
}

uint64_t WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v6 = *(WTF::StringImpl ***)a1;
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WebCore::defaultSupportedImageTypes(WebCore *this)
{
  uint64_t v1;
  int v2;
  WTF::StringImpl *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;

  {
    WebCore::defaultSupportedImageTypes(void)::$_0::operator()(&v5);
    WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes = v5;
    v1 = v6;
    v5 = 0;
    v6 = 0;
    qword_1EE2F4EF0 = v1;
    v2 = v7;
    v7 = 0;
    dword_1EE2F4EF8 = v2;
    LOBYTE(v2) = v8;
    v8 = 0;
    byte_1EE2F4EFC = v2;
    result = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v5, v3);
  }
  return result;
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  WTF **v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  int i;
  int v24;
  WTF **v25;
  WTF *result;
  unsigned int v27;
  int v28;
  WTF *v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;

  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (20 * v7 >= 19 * (unint64_t)v8 || (v8 <= 2 * (int)v7 ? (v9 = *(_BYTE *)(a1 + 20) == 0) : (v9 = 1), !v9))
  {
    if (v8)
      v33 = 2 * v8;
    else
      v33 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a1, v33);
    v8 = *(_DWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *((_DWORD *)*a2 + 4);
  if (v12 < 0x100)
    v13 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v13 = v12 >> 8;
  v14 = (v13 ^ v11) & v10;
  v15 = (WTF **)(*(_QWORD *)a1 + 8 * v14);
  v16 = *v15;
  if (*v15)
  {
    v34 = a4;
    v17 = 0;
    while (1)
    {
      v18 = *((_DWORD *)v16 + 4);
      v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
      v20 = (v14 + v8 - ((v19 ^ v11) & v10)) & v10;
      if (v17 > v20)
        break;
      if (v19 == v13)
      {
        result = (WTF *)WTF::equal(*v15, *a2, a3);
        v21 = *(_QWORD *)a1;
        if ((result & 1) != 0)
        {
          v31 = 0;
          a4 = v34;
          goto LABEL_37;
        }
      }
      else
      {
        v21 = *(_QWORD *)a1;
      }
      v14 = (v14 + 1) & v10;
      ++v17;
      v15 = (WTF **)(v21 + 8 * v14);
      v16 = *v15;
      if (!*v15)
      {
        if (v17 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        a4 = v34;
        goto LABEL_33;
      }
    }
    if (v17 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v22 = *v15;
    *v15 = 0;
    WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String>(v15, (WTF::StringImpl *)a2, a2);
    for (i = v14 + 1; ; i = v24 + 1)
    {
      v24 = i & v10;
      v25 = (WTF **)(*(_QWORD *)a1 + 8 * (i & v10));
      result = *v25;
      if (!*v25)
        break;
      v27 = *((_DWORD *)result + 4);
      if (v27 < 0x100)
        v28 = WTF::StringImpl::hashSlowCase(result);
      else
        v28 = v27 >> 8;
      if (++v20 > ((v24 + v8 - ((v28 ^ v11) & v10)) & v10))
      {
        v29 = *v25;
        *v25 = v22;
        v22 = v29;
        v20 = (v24 + v8 - ((v28 ^ v11) & v10)) & v10;
      }
    }
    *v25 = v22;
    a4 = v34;
  }
  else
  {
LABEL_33:
    v30 = *a2;
    *a2 = 0;
    result = *v15;
    *v15 = v30;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  ++*(_DWORD *)(a1 + 12);
  v21 = *(_QWORD *)a1;
  v31 = 1;
LABEL_37:
  v32 = v21 + 8 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

void sub_194342F94(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  v6 = WTF::fastZeroedMalloc((WTF *)(8 * a2));
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = a2;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v6);
  *(_DWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    v9 = (WTF::StringImpl **)v5;
    do
    {
      if (*v9)
      {
        WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(a1, v9);
        v10 = *v9;
        *v9 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v8);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
      else
      {
        *v9 = 0;
      }
      ++v9;
      --v4;
    }
    while (v4);
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v8);
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::reinsert(uint64_t a1, WTF::StringImpl **a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = v4 - 1;
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  v9 = (v8 ^ v6) & v5;
  v10 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v9);
  v11 = *v10;
  if (*v10)
  {
    v14 = 0;
    do
    {
      v15 = *((_DWORD *)v11 + 4);
      if (v15 < 0x100)
        v16 = WTF::StringImpl::hashSlowCase(v11);
      else
        v16 = v15 >> 8;
      if (v14 > ((v9 + v4 - ((v16 ^ v6) & v5)) & v5))
      {
        v17 = *a2;
        *a2 = *v10;
        *v10 = v17;
        v14 = (v9 + v4 - ((v16 ^ v6) & v5)) & v5;
      }
      v9 = (v9 + 1) & v5;
      ++v14;
      v10 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v9);
      v11 = *v10;
    }
    while (*v10);
  }
  v12 = *a2;
  *a2 = 0;
  result = *v10;
  *v10 = v12;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF::StringImpl *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet(uint64_t a1, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)a1;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(_QWORD **)a2;
    v5 = *(unsigned int *)(result + 12);
    v6 = v5 + v2;
    if (v5 + v2 > *(unsigned int *)(result + 8))
    {
      result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WTF::String const>(result, v5 + v2, (uint64_t)v4);
      v5 = *(unsigned int *)(v3 + 12);
      if (v6 < v5)
      {
        __break(0xC471u);
        return result;
      }
      v4 = (_QWORD *)result;
    }
    v7 = (_QWORD *)(*(_QWORD *)v3 + 8 * v5);
    v8 = 8 * v2;
    do
    {
      v9 = (_DWORD *)*v4;
      if (*v4)
        *v9 += 2;
      *v7++ = v9;
      ++v4;
      v8 -= 8;
    }
    while (v8);
    *(_DWORD *)(v3 + 12) = v6;
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits> const&,void>::map(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;

  v1 = HIDWORD(qword_1EE2F4EF0);
  if (HIDWORD(qword_1EE2F4EF0))
  {
    if (HIDWORD(qword_1EE2F4EF0) >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      result = WTF::fastMalloc((WTF *)(8 * HIDWORD(qword_1EE2F4EF0)));
      *(_DWORD *)(v2 + 8) = v1;
      *(_QWORD *)v2 = result;
      if (HIDWORD(qword_1EE2F4EF0))
      {
        if ((_DWORD)qword_1EE2F4EF0)
        {
          v3 = 8 * qword_1EE2F4EF0;
          for (i = (_QWORD *)WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes; !*i; ++i)
          {
            v3 -= 8;
            if (!v3)
              return result;
          }
        }
        else
        {
          i = (_QWORD *)WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes;
        }
        v5 = WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes + 8 * qword_1EE2F4EF0;
        if (i != (_QWORD *)v5)
        {
          v6 = *(_DWORD *)(v2 + 12);
          v7 = (_DWORD *)*i;
LABEL_9:
          if (v7)
            *v7 += 2;
          v8 = v6 + 1;
          *(_QWORD *)(result + 8 * v6) = v7;
          while (++i != (_QWORD *)v5)
          {
            v7 = (_DWORD *)*i;
            if (*i)
            {
              ++v6;
              if (i != (_QWORD *)v5)
                goto LABEL_9;
              break;
            }
          }
          *(_DWORD *)(v2 + 12) = v8;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableTraits> const&,void>::map(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      result = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(v4 + 8) = v2;
      *(_QWORD *)v4 = result;
      if (*(_DWORD *)(a2 + 12))
      {
        v5 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v5)
        {
          v6 = 8 * v5;
          for (i = *(_QWORD **)a2; !*i; ++i)
          {
            v6 -= 8;
            if (!v6)
              return result;
          }
        }
        else
        {
          i = *(_QWORD **)a2;
        }
        v8 = *(_QWORD *)a2 + 8 * v5;
        if (i != (_QWORD *)v8)
        {
          v9 = *(_DWORD *)(v4 + 12);
          v10 = (_DWORD *)*i;
LABEL_13:
          if (v10)
            *v10 += 2;
          v11 = v9 + 1;
          *(_QWORD *)(result + 8 * v9) = v10;
          while (++i != (_QWORD *)v8)
          {
            v10 = (_DWORD *)*i;
            if (*i)
            {
              ++v9;
              if (i != (_QWORD *)v8)
                goto LABEL_13;
              break;
            }
          }
          *(_DWORD *)(v4 + 12) = v11;
        }
      }
    }
  }
  return result;
}

uint64_t *WebCore::InspectorInstrumentation::addMessageToConsole(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  WebCore::InspectorInstrumentation::addMessageToConsoleImpl(a1, &v4);
  return std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v4);
}

void WebCore::ErrorEvent::~ErrorEvent(WebCore::ErrorEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::ErrorEvent::~ErrorEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v3 + 2), a2);
      WTF::fastFree((WTF *)v3, v9);
    }
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    *(_QWORD *)(v6 + 8) = 3;
    *((_QWORD *)this + 13) = 0;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

WebCore *WebCore::ErrorEvent::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, int a4@<W3>, unint64_t *a5@<X4>, WebCore **a6@<X8>)
{
  WebCore *v12;
  WebCore *v13;
  JSC::HandleSet *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v19;
  unint64_t v20;
  WebCore *result;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  JSC::HandleSet *v26;
  _QWORD *v27;

  v12 = (WebCore *)bmalloc::api::isoAllocate();
  v13 = v12;
  v27 = 0;
  if (*a5)
  {
    v14 = *(JSC::HandleSet **)(((*a5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v15 = (_QWORD *)*((_QWORD *)v14 + 5);
    if (!v15)
    {
      v26 = *(JSC::HandleSet **)(((*a5 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      JSC::HandleSet::grow(v14);
      v14 = v26;
      v15 = (_QWORD *)*((_QWORD *)v26 + 5);
    }
    *((_QWORD *)v14 + 5) = *v15;
    v15[2] = 0;
    v16 = v15 + 2;
    *v15 = 0;
    v15[1] = 0;
    v27 = v15 + 2;
    v17 = *a5;
    if (*a5)
    {
      v17 = *(_QWORD *)v17;
      if (v17 && (v17 & 0xFFFE000000000002) == 0)
      {
        v19 = *(_QWORD **)(((unint64_t)(v16 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
        v20 = v19[3];
        v19 += 3;
        *(v16 - 2) = v20;
        *(v16 - 1) = (unint64_t)v19;
        *v19 = v16 - 2;
        *(_QWORD *)(v20 + 8) = v16 - 2;
      }
    }
    *v16 = v17;
    result = WebCore::ErrorEvent::ErrorEvent(v13, a1, a2, a3, a4, (unint64_t *)&v27);
    *a6 = v13;
    v22 = v16 - 2;
    v23 = *(_QWORD *)(((unint64_t)(v16 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v24 = (unint64_t *)*(v16 - 1);
    if (v24)
    {
      v25 = *v22;
      *v24 = *v22;
      *(_QWORD *)(v25 + 8) = v24;
      *v22 = 0;
      *(v16 - 1) = 0;
    }
    *v22 = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;
  }
  else
  {
    result = WebCore::ErrorEvent::ErrorEvent(v12, a1, a2, a3, a4, (unint64_t *)&v27);
    *a6 = v13;
  }
  return result;
}

WebCore *WebCore::ErrorEvent::ErrorEvent(WebCore *a1, _DWORD **a2, _DWORD **a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  uint64_t *v30;

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(a1);
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *(_QWORD *)(v13 + 40);
  }
  v15 = (_QWORD *)(v14 + 784);
  v30 = 0;
  if (*a6)
  {
    v16 = *(_QWORD *)(((*a6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v17 = *(_QWORD **)(v16 + 40);
    if (!v17)
    {
      v29 = (_QWORD *)(v14 + 784);
      JSC::HandleSet::grow(*(JSC::HandleSet **)(((*a6 - 16) & 0xFFFFFFFFFFFFF000) + 0x10));
      v15 = v29;
      v17 = *(_QWORD **)(v16 + 40);
    }
    *(_QWORD *)(v16 + 40) = *v17;
    v17[2] = 0;
    v18 = v17 + 2;
    *v17 = 0;
    v17[1] = 0;
    v30 = v17 + 2;
    v19 = *a6;
    if (*a6)
    {
      v19 = *(_QWORD *)v19;
      v20 = v18 - 2;
      v21 = (_QWORD *)((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000 | 0x10);
      if (v19)
        v22 = (v19 & 0xFFFE000000000002) == 0;
      else
        v22 = 0;
      if (v22)
      {
        v23 = (unint64_t *)(*v21 + 24);
        v24 = *v23;
        *v20 = *v23;
        *(v18 - 1) = (unint64_t)v23;
        *v23 = (unint64_t)v20;
        *(_QWORD *)(v24 + 8) = v20;
      }
    }
    else
    {
      v20 = v18 - 2;
      v21 = (_QWORD *)((unint64_t)(v18 - 2) & 0xFFFFFFFFFFFFF000 | 0x10);
    }
    *v18 = v19;
    WebCore::ErrorEvent::ErrorEvent((uint64_t)a1, v15, a2, a3, a4, a5, &v30);
    v25 = *v21;
    v26 = (unint64_t *)v20[1];
    if (v26)
    {
      v27 = *v20;
      *v26 = *v20;
      *(_QWORD *)(v27 + 8) = v26;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v20;
  }
  else
  {
    WebCore::ErrorEvent::ErrorEvent((uint64_t)a1, v15, a2, a3, a4, a5, &v30);
  }
  return a1;
}

uint64_t WebCore::ErrorEvent::ErrorEvent(uint64_t a1, _QWORD *a2, _DWORD **a3, _DWORD **a4, int a5, int a6, uint64_t **a7)
{
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *Allocator;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;

  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 20) & 0xFFC00000 | 0x1E0204 | (*a2 != 0);
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v15;
  v16 = (_DWORD *)*a2;
  if (*a2)
    *v16 += 2;
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = off_1E33A4A80;
  v17 = *a3;
  if (*a3)
    *v17 += 2;
  *(_QWORD *)(a1 + 72) = v17;
  v18 = *a4;
  if (*a4)
    *v18 += 2;
  *(_QWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 88) = a5;
  *(_DWORD *)(a1 + 92) = a6;
  v19 = (_QWORD *)(a1 + 96);
  if (*a7)
  {
    v20 = **a7;
    *v19 = 0;
    *(_QWORD *)(a1 + 104) = 0;
    if ((v20 & 0xFFFE000000000002) != 0)
    {
      *v19 = v20;
      goto LABEL_15;
    }
    if (!v20)
    {
      Allocator = 0;
      goto LABEL_13;
    }
    if ((v20 & 8) != 0)
      v24 = (v20 - 112) | 1;
    else
      v24 = v20 & 0xFFFFFFFFFFFFC000;
    if ((v24 & 1) != 0)
      v25 = v24 + 47;
    else
      v25 = *(_QWORD *)v24 + 32;
    Allocator = *(_QWORD **)(v25 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v25 + 16) = *Allocator;
    *Allocator = v20;
    v19 = Allocator + 1;
  }
  else
  {
    Allocator = 0;
  }
  *v19 = 0;
  v19[1] = 0;
LABEL_13:
  __dmb(0xAu);
  v22 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = Allocator;
  if (v22)
    *(_QWORD *)(v22 + 8) = 3;
LABEL_15:
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  return a1;
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,WTF::String const>(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v4 = *(unsigned int *)(result + 8);
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  if (v7 <= v4)
    return a3;
  if (!(v7 >> 29))
  {
    v8 = result;
    v9 = *(void **)result;
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v11;
    memcpy(v11, v9, 8 * v10);
    if (v9)
    {
      if (*(void **)v8 == v9)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v12);
    }
    return a3;
  }
  __break(0xC471u);
  return result;
}

Inspector::InspectorDebuggerAgent *WebCore::InspectorInstrumentation::addMessageToConsoleImpl(uint64_t a1, uint64_t *a2)
{
  Inspector::InspectorDebuggerAgent *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  uint64_t v11;
  WTF::StringImpl *v12;

  result = (Inspector::InspectorDebuggerAgent *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)result)
  {
    v6 = *a2;
    v7 = *(unsigned __int8 *)*a2;
    v8 = *(unsigned __int8 *)(*a2 + 1);
    v9 = *(WTF::StringImpl **)(*a2 + 8);
    if (v9)
      *(_DWORD *)v9 += 2;
    v12 = v9;
    if (*(_QWORD *)(a1 + 16))
    {
      *a2 = 0;
      v11 = v6;
      Inspector::InspectorConsoleAgent::addMessageToConsole();
      std::unique_ptr<Inspector::ConsoleMessage>::~unique_ptr[abi:sn180100](&v11);
    }
    result = *(Inspector::InspectorDebuggerAgent **)(a1 + 136);
    if (result)
    {
      if (v7 == 3 && v8 == 9)
      {
        result = (Inspector::InspectorDebuggerAgent *)Inspector::InspectorDebuggerAgent::handleConsoleAssert(result, (const WTF::String *)&v12);
        v9 = v12;
      }
    }
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (Inspector::InspectorDebuggerAgent *)WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingTree::scrollingTreeNodeDidScroll(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) == a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(a2 + 144);
    v4 = (unsigned __int8 *)(result + 168);
    if (__ldaxr((unsigned __int8 *)(result + 168)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    result = MEMORY[0x19AEA534C](result + 168);
LABEL_6:
    *(_QWORD *)(v2 + 208) = v3;
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return result;
}

void WebCore::FrameLoader::load(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  const WebCore::NavigationAction *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t (*v17)();
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  char v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WebCore::Frame *v40;
  int v41;
  _DWORD *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  WTF::StringImpl *v60;
  WebCore::Frame *v61;
  _BYTE buf[12];
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _BOOL4 v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    v6 = v5[3];
    if (v6)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (v6)
      {
        if (*(_BYTE *)(v6 + 40))
          v6 = *(_QWORD *)(v6 + 32);
        else
          v6 = 0;
      }
    }
    v7 = v5[4];
    v8 = *(_QWORD *)(v5[16] + 8) == (_QWORD)v5;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a1;
    v63 = 2048;
    v64 = v6;
    v65 = 2048;
    v66 = v7;
    v67 = 1024;
    v68 = v8;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::load (FrameLoadRequest): frame load started", buf, 0x26u);
  }
  *(_BYTE *)(a1 + 404) = 0;
  if (!*(_BYTE *)(a1 + 154) && !*(_BYTE *)(a1 + 155))
  {
    v10 = (_DWORD **)(a2 + 216);
    v9 = *(_QWORD *)(a2 + 216);
    if (v9 && *(_DWORD *)(v9 + 4))
    {
      WebCore::FrameLoader::findFrameForNavigation((WTF::StringImpl *)a1, (const WTF::AtomString *)(a2 + 216), 0, &v61);
      v40 = v61;
      if (v61)
      {
        v41 = *((unsigned __int8 *)v61 + 144);
        v61 = 0;
        if (v41)
        {
          v54 = (unsigned int *)((char *)v40 + 8);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (!v56)
          {
            atomic_store(1u, v54);
            v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v57 = off_1E31FE290;
            v57[1] = v54;
            *(_QWORD *)buf = v57;
            WTF::ensureOnMainThread();
            v58 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v58)
              (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
          }
        }
        else
        {
          *(_BYTE *)(a2 + 544) = 0;
          v42 = (_DWORD *)*((_QWORD *)v40 + 35);
          if (v42 != (_DWORD *)a1)
          {
            ++*v42;
            WebCore::FrameLoader::load(v42, a2);
            if (!*v42)
            {
              __break(0xC471u);
              JUMPOUT(0x194344270);
            }
            --*v42;
          }
          v43 = (unsigned int *)((char *)v40 + 8);
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            atomic_store(1u, v43);
            v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v52 = off_1E31FE290;
            v52[1] = v43;
            *(_QWORD *)buf = v52;
            WTF::ensureOnMainThread();
            v53 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v53)
              (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
          }
          if (v42 != (_DWORD *)a1)
            return;
        }
      }
      else
      {
        v61 = 0;
      }
    }
    *(_BYTE *)(a1 + 157) = 0;
    if (*(_BYTE *)(a2 + 544))
    {
      v11 = a2 + 16;
      WebCore::NavigationAction::NavigationAction((uint64_t)buf, *(WebCore::NavigationRequester **)a2, (const WebCore::ResourceRequest *)(a2 + 16), 1, *(_BYTE *)(a2 + 569), 5, *(_BYTE *)(a2 + 556), 0, MEMORY[0x1E0CBF2F8]);
      v69 = *(_BYTE *)(a2 + 550);
      v12 = *(const WebCore::NavigationAction **)(a1 + 24);
      v60 = 0;
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E33F5F88;
      v13[1] = a1;
      v59 = v13;
      WebCore::PolicyChecker::checkNewWindowPolicy(v12, (const WebCore::NavigationAction *)buf, v11, (uint64_t *)&v60, v10, (uint64_t *)&v59);
      v15 = (uint64_t)v59;
      v59 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v60;
      v60 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 24))(v16);
        else
          --*((_DWORD *)v16 + 6);
      }
      WebCore::NavigationAction::~NavigationAction((WebCore::NavigationAction *)buf, v14);
      return;
    }
    if (*(_QWORD *)(a2 + 224))
      v17 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
    else
      v17 = 0;
    if (!v17)
    {
      if ((*(_BYTE *)(a2 + 200) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 16));
        *(_BYTE *)(a2 + 200) |= 1u;
      }
      WebCore::FrameLoader::defaultSubstituteDataForURL((WebCore::FrameLoader *)buf, (const WTF::URL *)a1, (WTF::URL *)(a2 + 16));
      WebCore::SubstituteData::operator=((unsigned int **)(a2 + 224), (unsigned int **)buf);
      WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)buf, v18);
    }
    v19 = (WTF *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 760))(&v60, *(_QWORD *)(a1 + 16), a2 + 16, a2 + 224);
    v20 = v60;
    *((_BYTE *)v60 + 3532) = *(_BYTE *)(a2 + 569);
    *((_BYTE *)v20 + 3542) = *(_BYTE *)(a2 + 545) == 2;
    v21 = *(_DWORD *)(a2 + 572);
    if ((v21 & 0xFF0000) != 0)
    {
      if (!*((_BYTE *)v20 + 3518))
        *((_BYTE *)v20 + 3518) = 1;
      *((_WORD *)v20 + 1758) = v21;
    }
    if (!*((_BYTE *)v20 + 1017))
      v19 = (WTF *)WebCore::ResourceRequestBase::setIsSameSite((_BYTE *)v20 + 872, 1);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v25 = v60;
    v26 = *(_BYTE *)(a2 + 556);
    v27 = *(unsigned __int8 *)(a2 + 568);
    if (WTF::isMainThread(v19))
    {
      {
        if (WebCore::currentToken(void)::token
          && !*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          && *(_BYTE *)(WebCore::currentToken(void)::token + 16) == 1)
        {
          v26 = 2;
          goto LABEL_34;
        }
      }
      else
      {
        WebCore::currentToken(void)::token = 0;
      }
    }
    if (v27)
    {
      if (*(_QWORD *)(*(_QWORD *)(v22 + 128) + 8) == v22)
        v46 = v26;
      else
        v46 = 0;
      *((_BYTE *)v25 + 3530) = v46;
      goto LABEL_35;
    }
LABEL_34:
    *((_BYTE *)v25 + 3530) = v26;
    if (!v22)
    {
LABEL_37:
      v30 = v60;
      if (*(_BYTE *)(a2 + 545))
      {
        v31 = *(_DWORD **)(a2 + 536);
        if (v31)
          *v31 += 2;
        v32 = (WTF::StringImpl *)*((_QWORD *)v30 + 340);
        *((_QWORD *)v30 + 340) = v31;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::destroy(v32, v30);
            v30 = v60;
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
        }
        if (*(_BYTE *)(a2 + 547))
        {
          *((_BYTE *)v30 + 3540) = 1;
          *(_BYTE *)(a1 + 81) = 6;
        }
      }
      v33 = *(_BYTE *)(a1 + 349);
      *(_BYTE *)(a1 + 349) = *(_BYTE *)(a2 + 545) != 0;
      v34 = *(_QWORD *)(a2 + 8);
      do
        v35 = __ldaxr((unsigned int *)v34);
      while (__stlxr(v35 + 1, (unsigned int *)v34));
      WebCore::FrameLoader::load((WebCore::FrameLoader *)a1, v30, (const WebCore::SecurityOrigin *)v34);
      if (v34)
      {
        do
        {
          v37 = __ldaxr((unsigned int *)v34);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, (unsigned int *)v34));
        if (!v38)
        {
          atomic_store(1u, (unsigned int *)v34);
          v47 = *(WTF::StringImpl **)(v34 + 48);
          *(_QWORD *)(v34 + 48) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v36);
            else
              *(_DWORD *)v47 -= 2;
          }
          v48 = *(WTF::StringImpl **)(v34 + 40);
          *(_QWORD *)(v34 + 40) = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v36);
            else
              *(_DWORD *)v48 -= 2;
          }
          v49 = *(unsigned int *)(v34 + 32);
          if ((_DWORD)v49 != -1)
            ((void (*)(_BYTE *, uint64_t))off_1E33F5B50[v49])(buf, v34 + 8);
          *(_DWORD *)(v34 + 32) = -1;
          WTF::fastFree((WTF *)v34, v36);
        }
      }
      *(_BYTE *)(a1 + 349) = v33;
      v39 = v60;
      v60 = 0;
      if (v39)
      {
        if (*((_DWORD *)v39 + 6) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v39 + 24))(v39);
        else
          --*((_DWORD *)v39 + 6);
      }
      return;
    }
    do
    {
LABEL_35:
      v28 = __ldaxr(v23);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v23));
    if (!v29)
    {
      atomic_store(1u, v23);
      v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v50 = off_1E31FE290;
      v50[1] = v23;
      *(_QWORD *)buf = v50;
      WTF::ensureOnMainThread();
      v51 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    goto LABEL_37;
  }
}

uint64_t WebCore::UserGestureIndicator::processingUserGesture(WebCore::UserGestureIndicator *this, const WebCore::Document *a2)
{
  uint64_t result;

  result = WTF::isMainThread(this);
  if ((_DWORD)result)
  {
    {
      result = WebCore::currentToken(void)::token;
      if (WebCore::currentToken(void)::token)
      {
        if (*(_DWORD *)(WebCore::currentToken(void)::token + 68)
          || *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
        {
          return 0;
        }
        else if (this)
        {
          return WebCore::UserGestureToken::isValidForDocument((WebCore::UserGestureToken *)WebCore::currentToken(void)::token, this);
        }
        else
        {
          return 1;
        }
      }
    }
    else
    {
      result = 0;
      WebCore::currentToken(void)::token = 0;
    }
  }
  return result;
}

_BYTE *WebCore::ResourceRequestBase::setIsSameSite(_BYTE *this, int a2)
{
  _BYTE *v3;
  char v4;
  int v5;

  v3 = this;
  v4 = this[184];
  if ((v4 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v4 = v3[184] | 1;
    v3[184] = v4;
  }
  if (a2)
    v5 = 1;
  else
    v5 = 2;
  if (v3[145] != v5)
  {
    v3[145] = v5;
    v3[184] = v4 & 0xFD;
  }
  return this;
}

unsigned int **WebCore::SubstituteData::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  char v30;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  v6 = *a1;
  *a1 = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v15 = v6[5];
      if ((_DWORD)v15)
      {
        v16 = *((_QWORD *)v6 + 1);
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v24 = v17;
              v25 = v16;
              v26 = (WTF *)v18;
              v27 = v6;
              atomic_store(1u, v18);
              v21 = v18[6];
              if ((_DWORD)v21 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F5B60[v21])(&v30, v18 + 2);
              *((_DWORD *)v26 + 6) = -1;
              WTF::fastFree(v26, a2);
              v6 = v27;
              v17 = v24;
              v16 = v25;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v22 = (WTF *)*((_QWORD *)v6 + 1);
      if (v6 + 6 != (unsigned int *)v22 && v22 != 0)
      {
        *((_QWORD *)v6 + 1) = 0;
        v6[4] = 0;
        v29 = v6;
        WTF::fastFree(v22, a2);
        v6 = v29;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = a2[1];
  if (v9)
    *v9 += 2;
  v10 = (WTF::StringImpl *)a1[1];
  a1[1] = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v11;
  WebCore::ResourceResponseBase::operator=((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  v12 = a2[36];
  if (v12)
  {
    v28 = a2[36];
    CFRetain(v12);
    v12 = v28;
  }
  v13 = a1[36];
  a1[36] = v12;
  if (v13)
    CFRelease(v13);
  *((_BYTE *)a1 + 296) = *((_BYTE *)a2 + 296);
  *((_BYTE *)a1 + 304) = *((_BYTE *)a2 + 304);
  return a1;
}

_DWORD *WebCore::FrameLoader::load(WebCore::FrameLoader *this, WebCore::DocumentLoader *a2, const WebCore::SecurityOrigin *a3)
{
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char *v11;
  int shouldTreatURLAsSameAsCurrent;
  const WTF::StringImpl *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *result;
  _DWORD *v18;
  uint64_t (*v19)();
  _QWORD *v20;
  _BYTE buf[12];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _BOOL4 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
    v8 = v7[3];
    if (v8)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 40))
          v8 = *(_QWORD *)(v8 + 32);
        else
          v8 = 0;
      }
    }
    v9 = v7[4];
    v10 = *(_QWORD *)(v7[16] + 8) == (_QWORD)v7;
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = this;
    v22 = 2048;
    v23 = v8;
    v24 = 2048;
    v25 = v9;
    v26 = 1024;
    v27 = v10;
    _os_log_impl(&dword_1940B8000, v6, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::load (DocumentLoader): frame load started", buf, 0x26u);
  }
  *((_BYTE *)this + 404) = 0;
  WebCore::FrameLoader::updateRequestAndAddExtraFields((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 1) + 8), (WebCore::DocumentLoader *)((char *)a2 + 872), (const WebCore::Page *)1, *((unsigned __int8 *)this + 81), 0, 0, 0, 0);
  if ((*((_BYTE *)a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::DocumentLoader *)((char *)a2 + 160));
    *((_BYTE *)a2 + 344) |= 1u;
  }
  if (WebCore::FrameLoader::shouldTreatURLAsSameAsCurrent(this, a3, (WTF **)a2 + 20))
  {
    WebCore::ResourceRequestBase::setCachePolicy((_BYTE *)a2 + 872, 1);
    v14 = 5;
    goto LABEL_11;
  }
  v11 = (char *)a2 + 368;
  shouldTreatURLAsSameAsCurrent = WebCore::FrameLoader::shouldTreatURLAsSameAsCurrent(this, a3, (WTF **)a2 + 46);
  v14 = *((unsigned __int8 *)this + 81);
  if (shouldTreatURLAsSameAsCurrent)
  {
    if (v14 != 6)
    {
      if (v14 - 8 >= 2 && v14 != 4)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  else if (v14 != 6)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_11;
  }
  if (!*(_QWORD *)v11
    || !*(_DWORD *)(*(_QWORD *)v11 + 4)
    || (*((_QWORD *)a2 + 45)
      ? (v19 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance)
      : (v19 = 0),
        v14 = 6,
        !v19))
  {
    if (!*((_BYTE *)this + 349))
      goto LABEL_10;
    v14 = 6;
  }
LABEL_11:
  v15 = *((_QWORD *)this + 11);
  if (v15)
    WebCore::DocumentLoader::setOverrideEncoding(a2, *(const WTF::String **)(v15 + 1624));
  if (WebCore::FrameLoader::shouldReloadToHandleUnreachableURL(this, *((WebCore::DocumentLoader **)a2 + 46), v13))
  {
    v18 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184);
    ++*v18;
    WebCore::HistoryController::saveDocumentAndScrollState((uint64_t)v18);
    if (!*v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1943448D8);
    }
    --*v18;
    v14 = 4;
  }
  *(_QWORD *)buf = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E33F5FB0;
  v20 = v16;
  WebCore::FrameLoader::loadWithDocumentLoader((uint64_t)this, (uint64_t)a2, v14, (uint64_t *)buf, 1, (uint64_t *)&v20);
  if (v20)
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
  result = *(_DWORD **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
    else
      --result[6];
  }
  return result;
}

uint64_t WebCore::FrameLoader::addHTTPOriginIfNeeded(uint64_t this, WebCore::ResourceRequest *a2, const WTF::String *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore::SecurityOrigin *v12;
  WTF::StringImpl *v13;

  v4 = this;
  if ((*(_BYTE *)(this + 184) & 1) == 0)
  {
    this = WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *(_BYTE *)(v4 + 184) |= 1u;
  }
  v5 = *(unsigned int *)(v4 + 108);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(*(_QWORD *)(v4 + 96) + 8);
    while (*((_WORD *)v7 - 4) != 53)
    {
      ++v6;
      v7 += 2;
      if (v5 == v6)
        goto LABEL_7;
    }
    if (v6 >= v5)
    {
      __break(0xC471u);
      return this;
    }
    this = *v7;
    if (*v7)
    {
      v8 = *(_DWORD *)this;
      v9 = *(_DWORD *)(this + 4);
      *(_DWORD *)this += 2;
      if (v8)
      {
        *(_DWORD *)this = v8;
        if (v9)
          return this;
      }
      else
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
        if (v9)
          return this;
      }
    }
  }
LABEL_7:
  if ((*(_BYTE *)(v4 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
    *(_BYTE *)(v4 + 184) |= 1u;
  }
  this = MEMORY[0x19AEA53F4](*(_QWORD *)(v4 + 88), "GET", 3);
  if ((this & 1) == 0)
  {
    if ((*(_BYTE *)(v4 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)v4);
      *(_BYTE *)(v4 + 184) |= 1u;
    }
    this = MEMORY[0x19AEA53F4](*(_QWORD *)(v4 + 88), "HEAD", 4);
    if ((this & 1) == 0)
    {
      if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
      {
        return (uint64_t)WebCore::ResourceRequestBase::setHTTPOrigin((WebCore::ResourceRequestBase *)v4, (WTF::StringImpl **)a2);
      }
      else
      {
        WebCore::SecurityOrigin::createOpaque((uint64_t *)&v12);
        WebCore::SecurityOrigin::toString(v12, &v13);
        WebCore::ResourceRequestBase::setHTTPOrigin((WebCore::ResourceRequestBase *)v4, &v13);
        v11 = v13;
        v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        return (uint64_t)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v12, v10);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CachedResourceRequest::acceptHeaderValueFromType@<X0>(int a1@<W0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  int v19;
  char v20;
  char v21;
  char **v22;
  char *v23;

  if (a1 != 1)
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((byte_1EE337DA5 & 1) != 0)
  {
    v3 = (WTF::StringImpl *)qword_1EE337DD0;
  }
  else
  {
    WebCore::acceptHeaderValueForImageResource(void)::$_0::operator()(&v17);
    v3 = v17;
    qword_1EE337DD0 = (uint64_t)v17;
    byte_1EE337DA5 = 1;
  }
  v18 = 0;
  v20 = 1;
  if (v3)
  {
    v4 = *((_DWORD *)v3 + 1);
    *(_DWORD *)v3 += 2;
  }
  else
  {
    v4 = 0;
  }
  v17 = v3;
  v19 = v4;
  {
    if (WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes
      && *(_DWORD *)(WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes
                   - 12))
    {
      v11 = *(unsigned int *)(WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes
                            - 4);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = (WTF::StringImpl **)WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes;
        while ((unint64_t)*v13 + 1 <= 1)
        {
          ++v13;
          v12 -= 8;
          if (!v12)
            goto LABEL_8;
        }
      }
      else
      {
        v13 = (WTF::StringImpl **)WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes;
      }
      v14 = WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes
          + 8 * v11;
      if ((WTF::StringImpl **)v14 != v13)
      {
        do
        {
          v16 = v13;
          v15 = (WTF::StringImpl **)v14;
          WTF::StringBuilder::append(&v17, v13);
          WTF::StringBuilder::append((uint64_t)&v17, 0x2Cu);
          v13 = v16 + 1;
          if (v16 + 1 == v15)
            break;
          v14 = (uint64_t)v15;
          while ((unint64_t)*v13 + 1 <= 1)
          {
            if (++v13 == v15)
              goto LABEL_8;
          }
        }
        while (v13 != v15);
      }
    }
  }
  else
  {
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
LABEL_8:
  {
    WebCore::installedFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8B98 = 0;
  }
  v5 = atomic_load(&WebCore::installedFactories(void)::registerDefaults);
  if (v5 != -1)
  {
    v23 = &v21;
    v22 = &v23;
    std::__call_once(&WebCore::installedFactories(void)::registerDefaults, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::installedFactories(void)::$_0 &&>>);
  }
  if (dword_1EE2F8B9C)
  {
    v6 = (_QWORD *)WebCore::installedFactories(void)::factories;
    v7 = 24 * dword_1EE2F8B9C;
    while (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, 1))
    {
      v6 += 3;
      v7 -= 24;
      if (!v7)
        goto LABEL_18;
    }
    WTF::StringBuilder::append();
  }
LABEL_18:
  WTF::StringBuilder::append();
  result = v17;
  if (v17
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v17),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v17),
        (result = v17) != 0))
  {
    *(_DWORD *)result += 2;
  }
  *a2 = result;
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v8);
      result = v17;
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::Document::isSameSiteForCookies(WebCore::Document *this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v11;
  WTF::StringImpl *v12;

  if (WebCore::Document::isTopDocument(this))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)this + 192), v4);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v12, (const WebCore::SecurityOriginData *)(v11 + 8));
  }
  else
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v12, (WebCore::Document *)((char *)this + 1048));
  }
  v5 = WTF::URL::host(a2);
  v8 = WebCore::RegistrableDomain::matches(&v12, v5, v6);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return v8;
}

_BYTE *WebCore::ResourceRequestBase::setResponseContentDispositionEncodingFallbackArray(_BYTE *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  _BYTE *v7;
  _BYTE **v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v7 = this;
  if ((this[184] & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v7[184] |= 1u;
  }
  v8 = (_BYTE **)(v7 + 128);
  if (*((_DWORD *)v7 + 34))
  {
    if (*((_DWORD *)v7 + 35))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)v7 + 32, 0);
    this = *v8;
    if (*v8)
    {
      *((_QWORD *)v7 + 16) = 0;
      *((_DWORD *)v7 + 34) = 0;
      this = (_BYTE *)WTF::fastFree((WTF *)this, a2);
    }
  }
  v9 = *(_DWORD **)a2;
  v10 = *(_QWORD *)a3 != 0;
  if (*(_QWORD *)a2)
    ++v10;
  if (*(_QWORD *)a4)
    v11 = v10 + 1;
  else
    v11 = v10;
  if (v11)
  {
    this = (_BYTE *)WTF::fastMalloc((WTF *)(8 * v11));
    *((_DWORD *)v7 + 34) = v11;
    *((_QWORD *)v7 + 16) = this;
    v9 = *(_DWORD **)a2;
  }
  if (v9)
  {
    v12 = *((unsigned int *)v7 + 35);
    if ((_DWORD)v12 == *((_DWORD *)v7 + 34))
    {
      this = (_BYTE *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)(v7 + 128), (unint64_t)a2);
    }
    else
    {
      v13 = *((_QWORD *)v7 + 16);
      *v9 += 2;
      *(_QWORD *)(v13 + 8 * v12) = v9;
      *((_DWORD *)v7 + 35) = v12 + 1;
    }
  }
  v14 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
  {
    v15 = *((unsigned int *)v7 + 35);
    if ((_DWORD)v15 == *((_DWORD *)v7 + 34))
    {
      this = (_BYTE *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)(v7 + 128), (unint64_t)a3);
    }
    else
    {
      v16 = *((_QWORD *)v7 + 16);
      *v14 += 2;
      *(_QWORD *)(v16 + 8 * v15) = v14;
      *((_DWORD *)v7 + 35) = v15 + 1;
    }
  }
  v17 = *(_DWORD **)a4;
  if (*(_QWORD *)a4)
  {
    v18 = *((unsigned int *)v7 + 35);
    if ((_DWORD)v18 == *((_DWORD *)v7 + 34))
    {
      this = (_BYTE *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)(v7 + 128), (unint64_t)a4);
    }
    else
    {
      v19 = *((_QWORD *)v7 + 16);
      *v17 += 2;
      *(_QWORD *)(v19 + 8 * v18) = v17;
      *((_DWORD *)v7 + 35) = v18 + 1;
    }
  }
  v7[184] &= ~2u;
  return this;
}

uint64_t WebCore::FrameLoader::subframeIsLoading(WebCore::FrameLoader *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  WebCore::DocumentLoader *v9;
  WebCore::DocumentLoader *v10;
  _BOOL4 v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 96);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return 0;
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  while (*(_BYTE *)(v3 + 144))
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) & 1) != 0)
      goto LABEL_53;
LABEL_33:
    v14 = *(_QWORD *)(v3 + 80);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        v20 = (unsigned int *)(v15 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v16 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
LABEL_36:
    v17 = (unsigned int *)(v3 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v26 = off_1E31FE290;
      v26[1] = v17;
      v29 = v26;
      WTF::ensureOnMainThread();
      if (v29)
        (*(void (**)(_QWORD *))(*v29 + 8))(v29);
    }
    result = 0;
    v3 = v15;
    if ((v16 & 1) != 0)
      return result;
  }
  v6 = (unsigned int *)(v3 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = *(_QWORD *)(v3 + 280);
  ++*(_DWORD *)v8;
  v9 = *(WebCore::DocumentLoader **)(v8 + 88);
  if (v9)
  {
    ++*((_DWORD *)v9 + 6);
    if ((WebCore::DocumentLoader::isLoadingInAPISense(v9) & 1) != 0)
    {
      v11 = 1;
      goto LABEL_26;
    }
  }
  v10 = *(WebCore::DocumentLoader **)(v8 + 96);
  if (v10)
    ++*((_DWORD *)v10 + 6);
  if (v9)
  {
    if (*((_DWORD *)v9 + 6) == 1)
      (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v9 + 24))(v9);
    else
      --*((_DWORD *)v9 + 6);
  }
  if (*(_BYTE *)(v8 + 157))
  {
    v11 = 1;
    v9 = v10;
    goto LABEL_25;
  }
  if (!v10 || (WebCore::DocumentLoader::isLoadingInAPISense(v10) & 1) == 0)
  {
    v9 = *(WebCore::DocumentLoader **)(v8 + 104);
    if (v9)
      ++*((_DWORD *)v9 + 6);
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 1)
        (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v10 + 24))(v10);
      else
        --*((_DWORD *)v10 + 6);
    }
    v11 = v9 != 0;
LABEL_25:
    if (!v9)
      goto LABEL_28;
    goto LABEL_26;
  }
  v11 = 1;
  v9 = v10;
LABEL_26:
  if (*((_DWORD *)v9 + 6) == 1)
    (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v9 + 24))(v9);
  else
    --*((_DWORD *)v9 + 6);
LABEL_28:
  if (!*(_DWORD *)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1943452C0);
  }
  --*(_DWORD *)v8;
  do
  {
    v12 = __ldaxr(v6);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v6));
  if (!v13)
  {
    atomic_store(1u, v6);
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v25 = off_1E31FE290;
    v25[1] = v6;
    v28 = v25;
    WTF::ensureOnMainThread();
    if (v28)
      (*(void (**)(_QWORD *))(*v28 + 8))(v28);
  }
  if (!v11)
    goto LABEL_33;
LABEL_53:
  v22 = (unsigned int *)(v3 + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  result = 1;
  if (v23 == 1)
  {
    atomic_store(1u, v22);
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v24 = off_1E31FE290;
    v24[1] = v22;
    v27 = v24;
    WTF::ensureOnMainThread();
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    return 1;
  }
  return result;
}

WebCore::RegistrableDomain *WebCore::RegistrableDomain::RegistrableDomain(WebCore::RegistrableDomain *this, const WebCore::SecurityOriginData *a2)
{
  uint64_t v2;
  WebCore::RegistrableDomain *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::ResourceRequestBase *v8;
  WTF::StringImpl *v9;
  uint64_t *v10;

  v2 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v2 == -1)
  {
    v8 = (WebCore::ResourceRequestBase *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::RegistrableDomain *)WebCore::ResourceRequestBase::isThirdParty(v8);
  }
  else
  {
    v10 = (uint64_t *)&v9;
    v4 = (WebCore::RegistrableDomain *)((uint64_t (*)(uint64_t **))off_1E3368760[v2])(&v10);
    WebCore::RegistrableDomain::registrableDomainFromHost(v4, (uint64_t *)&v9);
    if (v9 && *((_DWORD *)v9 + 1))
    {
      *(_QWORD *)this = v9;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v6 = v9;
      *(_QWORD *)this = v10;
      v9 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v5);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
    return this;
  }
}

uint64_t WebCore::ResourceRequestBase::isThirdParty(WebCore::ResourceRequestBase *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;

  v2 = *((_BYTE *)this + 184);
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v2 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v2;
  }
  if ((v2 & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v9, this);
  v3 = WTF::URL::host((WebCore::ResourceRequestBase *)((char *)this + 40));
  v6 = WebCore::RegistrableDomain::matches(&v9, v3, v4);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v6 ^ 1u;
}

uint64_t WebCore::areRegistrableDomainsEqual(WebCore *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, this);
  v4 = WTF::URL::host(a2);
  v7 = WebCore::RegistrableDomain::matches(&v10, v4, v5);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return v7;
}

BOOL WebCore::SWServer::canHandleScheme(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v5;

  if (!a2 || a3 < 4uLL)
    return 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a2 & 0xDF) != 0x48 || (*(_BYTE *)(a2 + 1) & 0xDF) != 0x54 || (*(_BYTE *)(a2 + 2) & 0xDF) != 0x54)
      return 0;
    v3 = *(unsigned __int8 *)(a2 + 3);
  }
  else
  {
    if ((*(_WORD *)a2 & 0xFFDF) != 0x48
      || (*(_WORD *)(a2 + 2) & 0xFFDF) != 0x54
      || (*(_WORD *)(a2 + 4) & 0xFFDF) != 0x54)
    {
      return 0;
    }
    v3 = *(unsigned __int16 *)(a2 + 6);
  }
  if ((v3 & 0xFFFFFFDF) != 0x50)
    return 0;
  if ((_DWORD)a3 == 5
    && ((a3 & 0xFF00000000) != 0 ? (v5 = *(unsigned __int8 *)(a2 + 4)) : (v5 = *(unsigned __int16 *)(a2 + 8)),
        (v5 & 0xFFFFFFDF) == 0x53))
  {
    return 1;
  }
  else
  {
    return (_DWORD)a3 == 4;
  }
}

BOOL WebCore::AVAssetMIMETypeCache::isAvailable(WebCore::AVAssetMIMETypeCache *this)
{
  return PAL::AVFoundationLibrary((PAL *)1) != 0;
}

uint64_t PAL::AVFoundationLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7D5F8 != -1)
    dispatch_once(&qword_1ECE7D5F8, block);
  return qword_1ECE7D5F0;
}

uint64_t WebCore::FrameLoader::shouldTreatURLAsSameAsCurrent(WebCore::FrameLoader *this, const WebCore::SecurityOrigin *a2, WTF **a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _BOOL4 isSameOriginAs;
  WTF::StringImpl *v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _QWORD v34[5];

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 184) + 16))
    return 0;
  if (a2)
  {
    v7 = *(_QWORD *)(v3 + 296);
    if (v7)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v7 + 192), a2);
      v9 = v8;
      if (v8)
      {
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 + 1, v8));
      }
      isSameOriginAs = WebCore::SecurityOrigin::isSameOriginAs(a2, (const WebCore::SecurityOrigin *)v8);
      v13 = isSameOriginAs;
      do
      {
        v14 = __ldaxr(v9);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v9));
      if (v15)
      {
        if (isSameOriginAs)
          goto LABEL_10;
      }
      else
      {
        atomic_store(1u, v9);
        v29 = (WTF::StringImpl *)*((_QWORD *)v9 + 6);
        *((_QWORD *)v9 + 6) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v12);
          else
            *(_DWORD *)v29 -= 2;
        }
        v30 = (WTF::StringImpl *)*((_QWORD *)v9 + 5);
        *((_QWORD *)v9 + 5) = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v12);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = v9[8];
        if ((_DWORD)v31 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E33F5B50[v31])(v34, v9 + 2);
        v9[8] = -1;
        WTF::fastFree((WTF *)v9, v12);
        if (v13)
          goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 16);
  v34[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v34);
  MEMORY[0x19AEA52F8](&v33, v34, v16 + 16, 0);
  v19 = (WTF::StringImpl *)v34[0];
  v34[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  if ((WTF::equal(*a3, v33, v18) & 1) != 0)
  {
    v25 = 1;
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 184) + 16);
    v34[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v34);
    MEMORY[0x19AEA52F8](&v32, v34, v21 + 24, 0);
    v24 = (WTF::StringImpl *)v34[0];
    v34[0] = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v22);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = WTF::equal(*a3, v32, v23);
    v26 = v32;
    v32 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v20);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  return v25;
}

__n128 WebCore::ResourceRequestBase::setFirstPartyForCookies(WTF **this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  __n128 result;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;

  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((WTF::equal(this[5], *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    v7 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v7 += 2;
    v8 = this[5];
    this[5] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v5);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = *(__n128 *)((char *)a2 + 8);
    v9 = *(_OWORD *)((char *)a2 + 24);
    *((__n128 *)this + 3) = result;
    *((_OWORD *)this + 4) = v9;
    *((_BYTE *)this + 184) &= ~2u;
  }
  return result;
}

WTF::StringImpl *WebCore::DocumentLoader::setOverrideEncoding(WebCore::DocumentLoader *this, const WTF::String *a2)
{
  WTF::StringImpl *result;

  if (a2)
    *(_DWORD *)a2 += 2;
  result = (WTF::StringImpl *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = a2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FrameLoader::shouldReloadToHandleUnreachableURL(WebCore::FrameLoader *this, WebCore::DocumentLoader *a2, const WTF::StringImpl *a3)
{
  int v4;
  int v5;
  uint64_t v6;
  _BYTE *v8;
  uint64_t v9;
  const WTF::StringImpl **v10;
  uint64_t v11;

  if (!a2)
    return 0;
  v4 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  *(_DWORD *)a2 += 2;
  if (!v5)
    goto LABEL_3;
  v8 = (_BYTE *)*((_QWORD *)this + 3);
  if (v8[26] - 1 > 2)
    goto LABEL_3;
  if (v8[24] || v8[25])
  {
    v9 = *((_QWORD *)this + 13);
    if (v9)
    {
      v10 = (const WTF::StringImpl **)(v9 + 872);
      if ((*(_BYTE *)(v9 + 1056) & 1) == 0)
      {
        v11 = *((_QWORD *)this + 13);
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v9 + 872));
        *(_BYTE *)(v11 + 1056) |= 1u;
      }
      goto LABEL_12;
    }
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v10 = (const WTF::StringImpl **)((char *)this + 112);
LABEL_12:
  v6 = WTF::equal(a2, *v10, a3);
  v4 = *(_DWORD *)a2 - 2;
LABEL_4:
  if (v4)
    *(_DWORD *)a2 = v4;
  else
    WTF::StringImpl::destroy(a2, a2);
  return v6;
}

WTF *WebCore::FrameLoader::defaultSubstituteDataForURL(WebCore::FrameLoader *this, const WTF::URL *a2, WTF::URL *a3)
{
  WTF *result;
  char v6;
  int64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char hasAttributeWithoutSynchronization;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  char v25;
  _DWORD *v26;
  _DWORD *v27;
  WTF::StringImpl *v28[5];
  _QWORD v29[17];
  char v30;
  uint64_t v31;
  char v32;
  WTF *v33;

  if (!WTF::URL::isAboutSrcDoc(a3))
    goto LABEL_2;
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) + 120);
  if (!v8)
    goto LABEL_2;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_2;
  v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 + 2;
  if (*(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    if (v10)
    {
      *(_DWORD *)(v9 + 24) = v10;
    }
    else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    goto LABEL_2;
  }
  hasAttributeWithoutSynchronization = WebCore::Element::hasAttributeWithoutSynchronization(v9, &WebCore::HTMLNames::srcdocAttr);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    v25 = hasAttributeWithoutSynchronization;
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9);
    if ((v25 & 1) == 0)
      goto LABEL_2;
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
    if ((hasAttributeWithoutSynchronization & 1) == 0)
    {
LABEL_2:
      *((_QWORD *)this + 38) = 0;
      *((_OWORD *)this + 17) = 0u;
      *((_OWORD *)this + 18) = 0u;
      *((_OWORD *)this + 15) = 0u;
      *((_OWORD *)this + 16) = 0u;
      *((_OWORD *)this + 13) = 0u;
      *((_OWORD *)this + 14) = 0u;
      *((_OWORD *)this + 11) = 0u;
      *((_OWORD *)this + 12) = 0u;
      *((_OWORD *)this + 9) = 0u;
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 7) = 0u;
      *((_OWORD *)this + 8) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 6) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = 0u;
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 3) = 0u;
      WTF::URL::invalidate((WebCore::FrameLoader *)((char *)this + 8));
      *((_QWORD *)this + 6) = 0;
      result = (WTF *)WTF::URL::invalidate((WebCore::FrameLoader *)((char *)this + 48));
      *((_BYTE *)this + 176) = 0;
      *((_WORD *)this + 92) = 0;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *(_OWORD *)((char *)this + 120) = 0u;
      *(_OWORD *)((char *)this + 136) = 0u;
      *(_OWORD *)((char *)this + 152) = 0u;
      *((_BYTE *)this + 168) = 0;
      v6 = *((_BYTE *)this + 186);
      v7 = vdupq_n_s64(0x7FF8000000000000uLL);
      *((int64x2_t *)this + 12) = v7;
      *((int64x2_t *)this + 13) = v7;
      *((_QWORD *)this + 28) = 0;
      *((_QWORD *)this + 29) = 0;
      *((_QWORD *)this + 30) = 0x8000000000000000;
      *(int64x2_t *)((char *)this + 248) = v7;
      *((_QWORD *)this + 33) = 0x7FF8000000000000;
      *((_BYTE *)this + 272) &= 0xF0u;
      *((_WORD *)this + 140) &= 0xC000u;
      *((_BYTE *)this + 282) = *((_BYTE *)this + 282) & 0xF8 | 2;
      *((_QWORD *)this + 36) = 0;
      *((_BYTE *)this + 296) = 0;
      *((_BYTE *)this + 186) = v6 & 0xC0 | 5;
      *((_BYTE *)this + 304) = 1;
      return result;
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8) + 120);
  if (v12)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  WebCore::Element::attributeWithoutSynchronization(v13, &WebCore::HTMLNames::srcdocAttr);
  WTF::String::utf8();
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  if (v33)
    v14 = *((_QWORD *)v33 + 1);
  else
    v14 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = (WTF::StringImpl *)v29[0];
  v27 = (_DWORD *)v29[0];
  WebCore::ResourceResponseBase::ResourceResponseBase((uint64_t)v29, (uint64_t)v28, (_DWORD **)&WebCore::textHTMLContentTypeAtomData, v14, &v27);
  v31 = 0;
  v32 = 0;
  v30 = v30 & 0xF1 | 4;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  v17 = v28[0];
  v28[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v33)
  {
    v18 = (WTF *)((char *)v33 + 16);
    v19 = (WTF *)*((_QWORD *)v33 + 1);
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  WebCore::SharedBuffer::create<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)&v26, v18, v19);
  v20 = v26;
  v26 = 0;
  v27 = v20;
  v28[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v28);
  WebCore::SubstituteData::SubstituteData((uint64_t)this, (uint64_t *)&v27, (uint64_t)v28, (WebCore::ResourceResponseBase *)v29);
  v22 = v28[0];
  v28[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v27)
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v27, v21);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v26, v21);
  WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)v29, v23);
  result = v33;
  v33 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v24);
    else
      --*(_DWORD *)result;
  }
  return result;
}

WebCore::FrameLoadRequest *WebCore::FrameLoadRequest::FrameLoadRequest(WebCore::FrameLoadRequest *this, WebCore::LocalFrame *a2, const WebCore::ResourceRequest *a3, unsigned int **a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v7 = *((_QWORD *)a2 + 37);
  *(_DWORD *)(v7 + 24) += 2;
  *(_QWORD *)this = v7;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*((_QWORD *)a2 + 37) + 192), a2);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 1) = v8;
  WebCore::ResourceRequest::ResourceRequest((WebCore::FrameLoadRequest *)((char *)this + 16), a3);
  *((_QWORD *)this + 27) = 0;
  WebCore::SubstituteData::SubstituteData((WebCore::FrameLoadRequest *)((char *)this + 224), a4);
  *(_QWORD *)((char *)this + 541) = 0;
  *((_QWORD *)this + 67) = 0;
  *(_WORD *)((char *)this + 549) = 257;
  *((_DWORD *)this + 138) = 0;
  *((_BYTE *)this + 556) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_WORD *)this + 284) = 1;
  *((_BYTE *)this + 570) = 0;
  *((_BYTE *)this + 572) = 0;
  *((_BYTE *)this + 574) = 0;
  *((_BYTE *)this + 576) = 0;
  return this;
}

WebCore::SubstituteData *WebCore::SubstituteData::SubstituteData(WebCore::SubstituteData *this, unsigned int **a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  __int128 v7;
  unsigned int *v8;

  v4 = *a2;
  if (*a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)this = v4;
  v6 = a2[1];
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 1) = v6;
  v7 = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = v7;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::SubstituteData *)((char *)this + 48), (const WebCore::ResourceResponseBase *)(a2 + 6));
  v8 = a2[36];
  *((_QWORD *)this + 36) = v8;
  if (v8)
    CFRetain(v8);
  *((_BYTE *)this + 296) = *((_BYTE *)a2 + 296);
  *((_BYTE *)this + 304) = *((_BYTE *)a2 + 304);
  return this;
}

WebCore::AuthenticationChallengeBase *WebCore::AuthenticationChallenge::AuthenticationChallenge(WebCore::AuthenticationChallenge *this, const WebCore::ProtectionSpace *a2, const WebCore::Credential *a3, int a4, const WebCore::ResourceResponse *a5, const WebCore::ResourceError *a6)
{
  WebCore::AuthenticationChallengeBase *result;

  result = WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(this, a2, a3, a4, a5, a6);
  *((_QWORD *)result + 52) = 0;
  *((_QWORD *)result + 53) = 0;
  return result;
}

{
  WebCore::AuthenticationChallengeBase *result;

  result = WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(this, a2, a3, a4, a5, a6);
  *((_QWORD *)result + 52) = 0;
  *((_QWORD *)result + 53) = 0;
  return result;
}

WebCore::AuthenticationChallenge *WebCore::AuthenticationChallenge::AuthenticationChallenge(WebCore::AuthenticationChallenge *this, NSURLAuthenticationChallenge *a2)
{
  int v4;
  NSURLResponse *v5;
  char v6;
  WTF::StringImpl *v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  const void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  id v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  CFTypeRef cf;
  _QWORD v26[5];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  __int16 v34;
  char v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  char v45;
  CFTypeRef v46;
  char v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  const void *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  const void *v53;

  WebCore::ProtectionSpace::ProtectionSpace((WebCore::ProtectionSpace *)&v51, -[NSURLAuthenticationChallenge protectionSpace](a2, "protectionSpace"));
  WebCore::Credential::Credential((WebCore::Credential *)&v48, -[NSURLAuthenticationChallenge proposedCredential](a2, "proposedCredential"));
  v4 = -[NSURLAuthenticationChallenge previousFailureCount](a2, "previousFailureCount");
  v5 = -[NSURLAuthenticationChallenge failureResponse](a2, "failureResponse");
  v26[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v26);
  v33 = 0;
  v34 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0;
  v6 = v35 & 0xCE | 1;
  v35 = v6;
  v36 = vdupq_n_s64(0x7FF8000000000000uLL);
  v37 = v36;
  v38 = 0;
  v39 = 0;
  v41 = v36;
  v40 = 0x8000000000000000;
  v42 = 0x7FF8000000000000;
  v43 &= 0xF0u;
  v44 &= 0xC000u;
  v45 = v45 & 0xF8 | 2;
  v46 = v5;
  if (v5)
  {
    CFRetain(v5);
    v6 = v35;
  }
  v47 = 0;
  v35 = v6 & 0xF0 | (v5 == 0);
  WebCore::ResourceError::ResourceError((WebCore::ResourceError *)&v22, -[NSURLAuthenticationChallenge error](a2, "error"));
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(this, (const WebCore::ProtectionSpace *)&v51, (const WebCore::Credential *)&v48, v4, (const WebCore::ResourceResponse *)v26, (const WebCore::ResourceError *)&v22);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  v9 = v24;
  v24 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v23;
  v23 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v22;
  v22 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v46;
  v46 = 0;
  if (v12)
    CFRelease(v12);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v26, v7);
  v14 = v50;
  v50 = 0;
  if (v14)
    CFRelease(v14);
  v15 = v49;
  v49 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v48;
  v48 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v53;
  v53 = 0;
  if (v17)
    CFRelease(v17);
  v18 = v52;
  v52 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v13);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v51;
  v51 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v13);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = -[NSURLAuthenticationChallenge sender](a2, "sender", v22, v23);
  *((_QWORD *)this + 52) = v20;
  if (v20)
    CFRetain(v20);
  *((_QWORD *)this + 53) = a2;
  if (a2)
    CFRetain(a2);
  return this;
}

void sub_19434623C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,CFTypeRef a49)
{
  uint64_t v49;
  WTF::StringImpl *v51;
  const void *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const void *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;

  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&a19, a2);
  v52 = *(const void **)(v49 - 88);
  *(_QWORD *)(v49 - 88) = 0;
  if (v52)
    CFRelease(v52);
  v53 = *(WTF::StringImpl **)(v49 - 104);
  *(_QWORD *)(v49 - 104) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, v51);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = *(WTF::StringImpl **)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v51);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = *(const void **)(v49 - 56);
  *(_QWORD *)(v49 - 56) = 0;
  if (v55)
    CFRelease(v55);
  v56 = *(WTF::StringImpl **)(v49 - 72);
  *(_QWORD *)(v49 - 72) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v51);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = *(WTF::StringImpl **)(v49 - 80);
  *(_QWORD *)(v49 - 80) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v51);
    else
      *(_DWORD *)v57 -= 2;
  }
  _Unwind_Resume(a1);
}

WebCore::AuthenticationChallengeBase *WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, const WebCore::ProtectionSpace *a2, const WebCore::Credential *a3, int a4, const WebCore::ResourceResponse *a5, const WebCore::ResourceError *a6)
{
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  const void *v14;
  _DWORD *v15;
  _DWORD *v16;
  const void *v17;
  const void *v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;
  _DWORD *v22;
  int v23;
  const void *v24;

  *(_BYTE *)this = 0;
  v11 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v11 += 2;
  *((_QWORD *)this + 1) = v11;
  v12 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v12)
    *v12 += 2;
  *((_QWORD *)this + 2) = v12;
  v13 = *((_DWORD *)a2 + 4);
  *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)a2 + 19);
  *((_DWORD *)this + 6) = v13;
  v14 = (const void *)*((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v14;
  if (v14)
    CFRetain(v14);
  v15 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v15 += 2;
  *((_QWORD *)this + 5) = v15;
  v16 = (_DWORD *)*((_QWORD *)a3 + 1);
  if (v16)
    *v16 += 2;
  *((_QWORD *)this + 6) = v16;
  *((_BYTE *)this + 56) = *((_BYTE *)a3 + 16);
  v17 = (const void *)*((_QWORD *)a3 + 3);
  *((_QWORD *)this + 8) = v17;
  if (v17)
    CFRetain(v17);
  *((_DWORD *)this + 18) = a4;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::AuthenticationChallengeBase *)((char *)this + 80), a5);
  v18 = (const void *)*((_QWORD *)a5 + 30);
  *((_QWORD *)this + 40) = v18;
  if (v18)
    CFRetain(v18);
  *((_BYTE *)this + 328) = *((_BYTE *)a5 + 248);
  v19 = *(_DWORD **)a6;
  if (*(_QWORD *)a6)
    *v19 += 2;
  *((_QWORD *)this + 42) = v19;
  v20 = (_DWORD *)*((_QWORD *)a6 + 1);
  if (v20)
    *v20 += 2;
  *((_QWORD *)this + 43) = v20;
  v21 = *((_OWORD *)a6 + 2);
  *((_OWORD *)this + 22) = *((_OWORD *)a6 + 1);
  *((_OWORD *)this + 23) = v21;
  v22 = (_DWORD *)*((_QWORD *)a6 + 6);
  if (v22)
    *v22 += 2;
  *((_QWORD *)this + 48) = v22;
  v23 = *((_DWORD *)a6 + 14);
  *((_WORD *)this + 198) = *((_WORD *)a6 + 30);
  *((_DWORD *)this + 98) = v23;
  v24 = (const void *)*((_QWORD *)a6 + 8);
  *((_QWORD *)this + 50) = v24;
  if (v24)
    CFRetain(v24);
  *((_BYTE *)this + 408) = *((_BYTE *)a6 + 72);
  return this;
}

WebCore::Credential *WebCore::Credential::Credential(WebCore::Credential *this, NSURLCredential *a2)
{
  NSURLCredentialPersistence v4;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  MEMORY[0x19AEA5508](&v13, -[NSURLCredential user](a2, "user"));
  MEMORY[0x19AEA5508](&v12, -[NSURLCredential password](a2, "password"));
  v4 = -[NSURLCredential persistence](a2, "persistence");
  if (v4 >= 4)
    v6 = 0;
  else
    v6 = 0x2020100u >> (8 * v4);
  v7 = v13;
  if (v13 && (v8 = v13, *((_DWORD *)v13 + 1)) || (v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)this = v8;
  v9 = v12;
  if (v12 && (v10 = v12, *((_DWORD *)v12 + 1)) || (v10 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v10 += 2;
  *((_QWORD *)this + 1) = v10;
  *((_BYTE *)this + 16) = v6;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v5);
      v7 = v13;
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v13 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  *((_QWORD *)this + 3) = a2;
  if (a2)
    CFRetain(a2);
  return this;
}

void sub_19434669C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  WTF::StringImpl **v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v12 = v10[1];
  v10[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *v10;
  *v10 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WebCore::ResourceError *WebCore::ResourceError::ResourceError(WebCore::ResourceError *this, NSError *a2)
{
  void *v5;
  void *v6;
  uint64_t v7;
  char v8;
  char v9;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = 0;
  WTF::URL::invalidate((WebCore::ResourceError *)((char *)this + 8));
  *(_QWORD *)((char *)this + 54) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = a2;
  if (a2)
  {
    CFRetain(a2);
    v5 = (void *)*((_QWORD *)this + 8);
    *((_BYTE *)this + 72) = 0;
    if (v5)
    {
      v6 = (void *)objc_msgSend(v5, "domain");
      v7 = objc_msgSend(*((id *)this + 8), "code");
      if ((objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0CB32E8]) & 1) != 0
        || objc_msgSend(v6, "isEqualToString:", *MEMORY[0x1E0C930A8]))
      {
        if (v7 == -999)
          v8 = 3;
        else
          v8 = 1;
        if (v7 == -1001)
          v9 = 4;
        else
          v9 = v8;
      }
      else
      {
        v9 = 1;
      }
      WebCore::ResourceErrorBase::setType((uint64_t)this, v9);
    }
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
  }
  return this;
}

void sub_194346808(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceErrorBase *v2;

  WebCore::ResourceErrorBase::~ResourceErrorBase(v2, a2);
  _Unwind_Resume(a1);
}

WebCore::ProtectionSpace *WebCore::ProtectionSpace::ProtectionSpace(WebCore::ProtectionSpace *this, NSURLProtectionSpace *a2)
{
  int v4;
  NSURLProtectionSpace *v5;
  char v6;
  NSURLProtectionSpace *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const void *v12;
  _BYTE v14[16];
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  MEMORY[0x19AEA5508](&v16, -[NSURLProtectionSpace host](a2, "host"));
  v4 = -[NSURLProtectionSpace port](a2, "port");
  v6 = WebCore::type((WebCore *)a2, v5);
  MEMORY[0x19AEA5508](&v15, -[NSURLProtectionSpace realm](a2, "realm"));
  v8 = WebCore::scheme((WebCore *)a2, v7);
  v14[0] = 0;
  v14[8] = 0;
  WebCore::ProtectionSpace::ProtectionSpace((uint64_t)this, (_DWORD **)&v16, v4, v6, (_DWORD **)&v15, v8, (uint64_t)v14);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v16;
  v16 = 0;
  if (!v11)
  {
LABEL_7:
    if (!a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (a2)
LABEL_8:
    CFRetain(a2);
LABEL_9:
  v12 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (v12)
    CFRelease(v12);
  return this;
}

{
  int v4;
  NSURLProtectionSpace *v5;
  char v6;
  NSURLProtectionSpace *v7;
  char v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  const void *v12;
  _BYTE v14[16];
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  MEMORY[0x19AEA5508](&v16, -[NSURLProtectionSpace host](a2, "host"));
  v4 = -[NSURLProtectionSpace port](a2, "port");
  v6 = WebCore::type((WebCore *)a2, v5);
  MEMORY[0x19AEA5508](&v15, -[NSURLProtectionSpace realm](a2, "realm"));
  v8 = WebCore::scheme((WebCore *)a2, v7);
  v14[0] = 0;
  v14[8] = 0;
  WebCore::ProtectionSpace::ProtectionSpace((uint64_t)this, (_DWORD **)&v16, v4, v6, (_DWORD **)&v15, v8, (uint64_t)v14);
  v10 = v15;
  v15 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v16;
  v16 = 0;
  if (!v11)
  {
LABEL_7:
    if (!a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v11, v9);
  if (a2)
LABEL_8:
    CFRetain(a2);
LABEL_9:
  v12 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = a2;
  if (v12)
    CFRelease(v12);
  return this;
}

void sub_194346994(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  uint64_t v12;
  const void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v14 = *(const void **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = 0;
  if (v14)
    CFRelease(v14);
  v15 = *(WTF::StringImpl **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(WTF::StringImpl **)v12;
  *(_QWORD *)v12 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::ProtectionSpace::ProtectionSpace(uint64_t a1, _DWORD **a2, int a3, char a4, _DWORD **a5, char a6, uint64_t a7)
{
  _DWORD *v8;
  _DWORD *v9;
  CFTypeRef v10;
  const void *v11;

  v8 = *a2;
  if (*a2 && v8[1] || (v8 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v8 += 2;
  *(_QWORD *)a1 = v8;
  v9 = *a5;
  if (*a5 && v9[1] || (v9 = (_DWORD *)*MEMORY[0x1E0CBF738]) != 0)
    *v9 += 2;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 21) = a6;
  *(_BYTE *)(a1 + 22) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*(_BYTE *)(a7 + 8))
  {
    v10 = *(CFTypeRef *)a7;
    if (*(_QWORD *)a7)
    {
      CFRetain(*(CFTypeRef *)a7);
      v11 = *(const void **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v10;
      if (v11)
        CFRelease(v11);
    }
  }
  return a1;
}

void sub_194346AFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v2;
  const void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v4 = *(const void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *(WTF::StringImpl **)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)v2;
  *(_QWORD *)v2 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::type(WebCore *this, NSURLProtectionSpace *a2)
{
  void *v3;
  void *v5;

  if (-[WebCore isProxy](this, "isProxy"))
  {
    v3 = (void *)-[WebCore proxyType](this, "proxyType");
    if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0C92B98]) & 1) != 0)
    {
      return 5;
    }
    else if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0C92BA8]) & 1) != 0)
    {
      return 6;
    }
    else if ((objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0C92B88]) & 1) != 0)
    {
      return 7;
    }
    else if (objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0C92BB0]))
    {
      return 8;
    }
    else
    {
      return 5;
    }
  }
  else
  {
    v5 = (void *)-[WebCore protocol](this, "protocol");
    if (objc_msgSend(v5, "caseInsensitiveCompare:", CFSTR("http")))
    {
      if (objc_msgSend(v5, "caseInsensitiveCompare:", CFSTR("https")))
      {
        if (objc_msgSend(v5, "caseInsensitiveCompare:", CFSTR("ftp")))
        {
          if (objc_msgSend(v5, "caseInsensitiveCompare:", CFSTR("ftps")))
            return 1;
          else
            return 4;
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
}

_DWORD *WebCore::SubresourceLoader::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  _DWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  char v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  WebCore::Document *v27;
  WebCore::CachedResourceLoader *v28;
  char v29;
  int64x2_t v30;
  int v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51[2];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  char v59;
  __int16 v60;
  _DWORD *v61;
  _DWORD *v62;
  char v63;
  __int128 v64;
  _DWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  result = (_DWORD *)WTF::fastMalloc((WTF *)0x670);
  v11 = (uint64_t)result;
  LODWORD(v51[0]) = *(_DWORD *)a4;
  *(_DWORD *)((char *)v51 + 3) = *(_DWORD *)(a4 + 3);
  v12 = *(_DWORD **)(a4 + 8);
  if (v12)
    *v12 += 2;
  v51[1] = (uint64_t)v12;
  v13 = *(_OWORD *)(a4 + 32);
  v52 = *(_OWORD *)(a4 + 16);
  v53 = v13;
  v14 = *(_QWORD *)(a4 + 48);
  v15 = *(unsigned int *)(a4 + 68);
  v55 = 0;
  v56 = 0;
  v54 = v14;
  v57 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v42 = WTF::fastMalloc((WTF *)(16 * v15));
    v56 = v15;
    v55 = v42;
    v43 = *(unsigned int *)(a4 + 68);
    if ((_DWORD)v43)
    {
      v44 = *(_QWORD *)(a4 + 56);
      v45 = v44 + 16 * v43;
      do
      {
        v46 = *(_DWORD **)v44;
        if (*(_QWORD *)v44)
          *v46 += 2;
        *(_QWORD *)v42 = v46;
        *(_BYTE *)(v42 + 8) = *(_BYTE *)(v44 + 8);
        v44 += 16;
        v42 += 16;
      }
      while (v44 != v45);
    }
  }
  v58 = *(_DWORD *)(a4 + 72);
  v59 = *(_BYTE *)(a4 + 76);
  LOBYTE(v60) = 0;
  v63 = 0;
  if (*(_BYTE *)(a4 + 104))
  {
    v60 = *(_WORD *)(a4 + 80);
    v16 = *(_DWORD **)(a4 + 88);
    if (v16)
      *v16 += 2;
    v61 = v16;
    v17 = *(_DWORD **)(a4 + 96);
    if (v17)
      *v17 += 2;
    v62 = v17;
    v63 = 1;
  }
  v64 = *(_OWORD *)(a4 + 112);
  v18 = *(_DWORD **)(a4 + 128);
  if (v18)
    *v18 += 2;
  v65 = v18;
  WebCore::ResourceLoader::ResourceLoader(v11, a1, (const WebCore::ResourceLoaderOptions *)v51);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v51, v19);
  *(_QWORD *)v11 = off_1E33F7848;
  v47 = 0;
  WTF::URL::invalidate((WTF::URL *)&v47);
  v20 = v47;
  if (v47)
    *(_DWORD *)v47 += 2;
  *(_QWORD *)(v11 + 1128) = v20;
  *(_OWORD *)(v11 + 1136) = v48;
  *(_OWORD *)(v11 + 1152) = v49;
  *(_QWORD *)(v11 + 1168) = 0;
  WTF::URL::invalidate((WTF::URL *)(v11 + 1168));
  *(_QWORD *)(v11 + 1208) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(v11 + 1216) = v50;
  *(_OWORD *)(v11 + 1240) = 0u;
  *(_OWORD *)(v11 + 1256) = 0u;
  *(_OWORD *)(v11 + 1224) = 0u;
  *(_DWORD *)(v11 + 1272) = 0x10000;
  v22 = *(_BYTE *)(v11 + 1276) & 0x80 | 4;
  *(_BYTE *)(v11 + 1276) = v22;
  *(_QWORD *)(v11 + 1280) = 0;
  v23 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v23 += 2;
    v22 = *(_BYTE *)(v11 + 1276);
  }
  *(_QWORD *)(v11 + 1288) = v23;
  *(_QWORD *)(v11 + 1296) = 0;
  *(_BYTE *)(v11 + 1304) = 0;
  *(_BYTE *)(v11 + 1308) = 0;
  *(_BYTE *)(v11 + 1312) = *(_BYTE *)(v11 + 1312) & 0xE0 | 5;
  *(_BYTE *)(v11 + 1276) = v22 | 2;
  v24 = v47;
  v47 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_QWORD *)(v11 + 1320) = 0;
  v25 = *(_QWORD *)(a2 + 8);
  if (v25)
    goto LABEL_68;
  v25 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v25 = 1;
  *(_QWORD *)(v25 + 8) = a2;
  v39 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v25;
  if (!v39)
    goto LABEL_68;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v39);
    WTF::fastFree((WTF *)v39, v38);
  }
  v25 = *(_QWORD *)(a2 + 8);
  if (v25)
  {
LABEL_68:
    do
      v26 = __ldaxr((unsigned int *)v25);
    while (__stlxr(v26 + 1, (unsigned int *)v25));
  }
  *(_QWORD *)(v11 + 1328) = v25;
  *(_DWORD *)(v11 + 1336) = 0;
  v27 = *(WebCore::Document **)(a1 + 296);
  v28 = (WebCore::CachedResourceLoader *)*((_QWORD *)v27 + 90);
  if (!v28)
    v28 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v27, 0);
  WebCore::SubresourceLoader::RequestCountTracker::RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)(v11 + 1344), v28, (const WebCore::CachedResource *)a2);
  *(_BYTE *)(v11 + 1360) = 1;
  *(_QWORD *)(v11 + 1368) = 0;
  *(_QWORD *)(v11 + 1384) = 0;
  *(_QWORD *)(v11 + 1376) = 0;
  WTF::URL::invalidate((WTF::URL *)(v11 + 1384));
  *(_BYTE *)(v11 + 1512) = 0;
  *(_WORD *)(v11 + 1520) = 0;
  *(_BYTE *)(v11 + 1504) = 0;
  *(_OWORD *)(v11 + 1488) = 0u;
  *(_OWORD *)(v11 + 1472) = 0u;
  *(_OWORD *)(v11 + 1456) = 0u;
  *(_OWORD *)(v11 + 1440) = 0u;
  *(_OWORD *)(v11 + 1424) = 0u;
  v29 = *(_BYTE *)(v11 + 1522);
  *(_QWORD *)(v11 + 1528) = 0x7FF8000000000000;
  v30 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v11 + 1536) = v30;
  *(_QWORD *)(v11 + 1552) = 0x7FF8000000000000;
  *(_QWORD *)(v11 + 1568) = 0;
  *(_QWORD *)(v11 + 1560) = 0;
  *(_QWORD *)(v11 + 1576) = 0x8000000000000000;
  *(int64x2_t *)(v11 + 1584) = v30;
  *(_QWORD *)(v11 + 1600) = 0x7FF8000000000000;
  *(_BYTE *)(v11 + 1608) &= 0xF0u;
  *(_WORD *)(v11 + 1616) &= 0xC000u;
  *(_BYTE *)(v11 + 1618) = *(_BYTE *)(v11 + 1618) & 0xF8 | 2;
  *(_QWORD *)(v11 + 1624) = 0;
  *(_BYTE *)(v11 + 1632) = 0;
  *(_BYTE *)(v11 + 1522) = v29 & 0xC0 | 5;
  *(_DWORD *)(v11 + 1640) = 0;
  *(_WORD *)(v11 + 1644) = 0;
  *(_BYTE *)(v11 + 1646) = 1;
  switch(*(_BYTE *)(a2 + 556) & 0x1F)
  {
    case 0:
    case 0xD:
      v31 = 1;
      break;
    case 1:
      v31 = 2;
      break;
    case 2:
    case 0xC:
      v31 = 4;
      break;
    case 3:
      v31 = 8;
      break;
    case 4:
    case 5:
      v31 = 16;
      break;
    case 6:
    case 0xE:
      v31 = 64;
      break;
    case 7:
    case 9:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_27;
    case 8:
      if ((*(_BYTE *)(a2 + 307) & 0xFE) == 2)
        v31 = 512;
      else
LABEL_27:
        v31 = 2048;
      break;
    case 0x10:
      v31 = 32;
      break;
    default:
      v31 = 0;
      break;
  }
  *(_DWORD *)(v11 + 1120) = v31;
  *(_BYTE *)(v11 + 328) = (*(_BYTE *)(a2 + 556) & 0x1F) == 0;
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) == a1
     && (v37 = *(_QWORD *)(v11 + 40)) != 0
     && *(_BYTE *)(v37 + 3532) != 0;
  *(_BYTE *)(v11 + 1646) = WebCore::computeFetchMetadataSiteInternal((WebCore::SecurityOrigin *)(a2 + 160), (WTF::StringImpl *)(*(_BYTE *)(a2 + 556) & 0x1F), *(unsigned __int8 *)(a4 + 1), 0, a1, 1u, v32);
  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType < 0x100u
    || WebCore::auxiliaryProcessType(void)::auxiliaryProcessType)
  {
    WebCore::ResourceRequest::operator=(v11 + 1128, a3);
    v51[0] = v11;
    v36 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 16))(v36, v51);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    result = (_DWORD *)v51[0];
    v51[0] = 0;
    if (result)
    {
      if (result[4] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[4];
    }
  }
  else
  {
    ++*(_DWORD *)(v11 + 16);
    v33 = *a5;
    *a5 = 0;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v34 = &off_1E33F7B58;
    v34[1] = v11;
    v34[2] = v33;
    ++*(_DWORD *)(v11 + 16);
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v35 = &off_1E33F7BA8;
    v35[1] = v11;
    v35[2] = v11;
    v35[3] = v34;
    v51[0] = (uint64_t)v35;
    WebCore::ResourceLoader::init(v11, a3, v51);
    result = (_DWORD *)v51[0];
    v51[0] = 0;
    if (result)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    if (*(_DWORD *)(v11 + 16) == 1)
      return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    else
      --*(_DWORD *)(v11 + 16);
  }
  return result;
}

WebCore::SubresourceLoader::RequestCountTracker *WebCore::SubresourceLoader::RequestCountTracker::RequestCountTracker(WebCore::SubresourceLoader::RequestCountTracker *this, WebCore::CachedResourceLoader *a2, const WebCore::CachedResource *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v6 = *((_QWORD *)a2 + 1);
  if (v6)
    goto LABEL_27;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v16 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  if (!v16)
    goto LABEL_27;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  v6 = *((_QWORD *)a2 + 1);
  if (v6)
  {
LABEL_27:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)this = v6;
  v8 = *((_QWORD *)a3 + 1);
  if (v8)
    goto LABEL_28;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a3;
  v20 = (unsigned int *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v8;
  if (!v20)
    goto LABEL_28;
  do
  {
    v21 = __ldaxr(v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, v20));
  if (!v22)
  {
    atomic_store(1u, v20);
    WTF::fastFree((WTF *)v20, v19);
  }
  v8 = *((_QWORD *)a3 + 1);
  if (v8)
  {
LABEL_28:
    do
      v9 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v9 + 1, (unsigned int *)v8));
  }
  *((_QWORD *)this + 1) = v8;
  if ((*(_WORD *)((_BYTE *)a3 + 557) & 0x4000) == 0)
  {
    v10 = *((_BYTE *)a3 + 556) & 0x1F;
    v11 = v10 > 0xD;
    v12 = (1 << v10) & 0x2F01;
    if (v11 || v12 == 0)
      ++*((_DWORD *)a2 + 22);
  }
  return this;
}

uint64_t WebCore::ResourceLoader::ResourceLoader(uint64_t a1, uint64_t a2, const WebCore::ResourceLoaderOptions *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int64x2_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  _DWORD **v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  __int128 v20;
  WTF::StringImpl *v21;
  char v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  char v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)a1 = &unk_1E33F6F20;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (unsigned int *)(a2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  *(_QWORD *)(a1 + 32) = a2;
  v8 = *(_QWORD *)(a2 + 280);
  v9 = 88;
  if (!*(_BYTE *)(v8 + 80))
    v9 = 96;
  v10 = *(_QWORD *)(v8 + v9);
  if (v10)
    ++*(_DWORD *)(v10 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = v10;
  WTF::URL::invalidate((WTF::URL *)(a1 + 48));
  *(_BYTE *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  v11 = *(_BYTE *)(a1 + 186);
  v12 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 192) = v12;
  *(int64x2_t *)(a1 + 208) = v12;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 248) = v12;
  *(_QWORD *)(a1 + 264) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 272) &= 0xF0u;
  *(_WORD *)(a1 + 280) &= 0xC000u;
  *(_BYTE *)(a1 + 282) = *(_BYTE *)(a1 + 282) & 0xF8 | 2;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 186) = v11 & 0xC0 | 5;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 328) = 1;
  v32 = 0;
  WTF::URL::invalidate((WTF::URL *)&v32);
  v13 = v32;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(a1 + 336) = v13;
  *(_OWORD *)(a1 + 344) = v33;
  *(_OWORD *)(a1 + 360) = v34;
  *(_QWORD *)(a1 + 376) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 376));
  *(_QWORD *)(a1 + 416) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 424) = v35;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 480) = 0x10000;
  v15 = *(_BYTE *)(a1 + 484) & 0x80 | 4;
  *(_BYTE *)(a1 + 484) = v15;
  *(_QWORD *)(a1 + 488) = 0;
  v16 = (_DWORD **)MEMORY[0x1E0CBF738];
  v17 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v17 += 2;
    v15 = *(_BYTE *)(a1 + 484);
  }
  *(_QWORD *)(a1 + 496) = v17;
  *(_QWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 516) = 0;
  *(_BYTE *)(a1 + 520) = *(_BYTE *)(a1 + 520) & 0xE0 | 5;
  *(_BYTE *)(a1 + 484) = v15 | 2;
  v18 = v32;
  v32 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  *(_QWORD *)(a1 + 528) = 0;
  v32 = 0;
  WTF::URL::invalidate((WTF::URL *)&v32);
  v19 = v32;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(a1 + 536) = v19;
  v20 = v34;
  *(_OWORD *)(a1 + 544) = v33;
  *(_OWORD *)(a1 + 560) = v20;
  *(_QWORD *)(a1 + 576) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 576));
  *(_QWORD *)(a1 + 616) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 624) = v35;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 680) = 0x10000;
  v22 = *(_BYTE *)(a1 + 684) & 0x80 | 4;
  *(_BYTE *)(a1 + 684) = v22;
  *(_QWORD *)(a1 + 688) = 0;
  v23 = *v16;
  if (*v16)
  {
    *v23 += 2;
    v22 = *(_BYTE *)(a1 + 684);
  }
  *(_QWORD *)(a1 + 696) = v23;
  *(_QWORD *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = 0;
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a1 + 720) & 0xE0 | 5;
  *(_BYTE *)(a1 + 684) = v22 | 2;
  v24 = v32;
  v32 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v21);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = 0;
  *(_DWORD *)(a1 + 756) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_WORD *)(a1 + 752) = 0;
  if ((*((_BYTE *)a3 + 115) & 2) == 0)
    v25 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 339) != 0;
  *(_BYTE *)(a1 + 760) = v25;
  *(_BYTE *)(a1 + 761) = 0;
  v32 = 0;
  WTF::URL::invalidate((WTF::URL *)&v32);
  v26 = v32;
  if (v32)
    *(_DWORD *)v32 += 2;
  *(_QWORD *)(a1 + 768) = v26;
  *(_OWORD *)(a1 + 776) = v33;
  *(_OWORD *)(a1 + 792) = v34;
  *(_QWORD *)(a1 + 808) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 808));
  *(_QWORD *)(a1 + 848) = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 856) = v35;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 912) = 0x10000;
  v28 = *(_BYTE *)(a1 + 916) & 0x80 | 4;
  *(_BYTE *)(a1 + 916) = v28;
  *(_QWORD *)(a1 + 920) = 0;
  v29 = *v16;
  if (*v16)
  {
    *v29 += 2;
    v28 = *(_BYTE *)(a1 + 916);
  }
  *(_QWORD *)(a1 + 928) = v29;
  *(_QWORD *)(a1 + 936) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 948) = 0;
  *(_BYTE *)(a1 + 952) = *(_BYTE *)(a1 + 952) & 0xE0 | 5;
  *(_BYTE *)(a1 + 916) = v28 | 2;
  v30 = v32;
  v32 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v27);
    else
      *(_DWORD *)v30 -= 2;
  }
  *(_QWORD *)(a1 + 960) = 0;
  WebCore::ResourceLoaderOptions::ResourceLoaderOptions(a1 + 976, a3);
  *(_DWORD *)(a1 + 1120) = 0;
  return a1;
}

void WebCore::ResourceLoader::init(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  char canDisplay;
  unsigned int v17;
  unsigned int v18;
  const WTF::URL *v19;
  const WTF::StringImpl *v20;
  const WebCore::Page *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  _QWORD *v27;
  CFTypeRef v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  NSObject *v41;
  const WTF::String *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  const WTF::URL *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::FrameLoader *v69;
  unsigned int *v70;
  unsigned int v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  _BYTE buf[12];
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  _BYTE v90[22];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  char v96;
  __int16 v97;
  char v98;
  int64x2_t v99;
  int64x2_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64x2_t v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  char v108;
  CFTypeRef cf;
  char v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v29 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      goto LABEL_43;
    v54 = *(_QWORD *)(a1 + 32);
    if (v54)
    {
      WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 32));
      if (!v56)
        v55 = 0;
      v57 = *(_QWORD *)(v54 + 32);
      v58 = *(_QWORD *)(v54 + 280);
    }
    else
    {
      v57 = 0;
      v55 = 0;
      v58 = 0;
    }
    v59 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v85 = 2048;
    v86 = v55;
    v87 = 2048;
    v88 = v57;
    v89 = 2048;
    *(_QWORD *)v90 = v58;
    *(_WORD *)&v90[8] = 2048;
    *(_QWORD *)&v90[10] = v59;
    v36 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling because the"
          "re is no document loader.";
    goto LABEL_42;
  }
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
    v29 = qword_1ECE7C608;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
LABEL_43:
      WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)a1);
LABEL_44:
      v37 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 16))(v37, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      return;
    }
    v30 = *(_QWORD *)(a1 + 32);
    if (v30)
    {
      WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 32));
      if (!v32)
        v31 = 0;
      v33 = *(_QWORD *)(v30 + 32);
      v34 = *(_QWORD *)(v30 + 280);
    }
    else
    {
      v33 = 0;
      v31 = 0;
      v34 = 0;
    }
    v35 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    v85 = 2048;
    v86 = v31;
    v87 = 2048;
    v88 = v33;
    v89 = 2048;
    *(_QWORD *)v90 = v34;
    *(_WORD *)&v90[8] = 2048;
    *(_QWORD *)&v90[10] = v35;
    v36 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling because the"
          " document loader has no frame.";
LABEL_42:
    _os_log_impl(&dword_1940B8000, v29, OS_LOG_TYPE_DEFAULT, v36, buf, 0x34u);
    goto LABEL_43;
  }
  WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  *(_QWORD *)(a1 + 304) = v9;
  v10 = *(_DWORD *)(a1 + 1090);
  v11 = (v10 & 0x200) == 0 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 339) != 0;
  *(_BYTE *)(a1 + 760) = v11;
  if ((v10 & 0x40) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 296) + 192), v8);
    v13 = (uint64_t)v12;
    if (v12)
    {
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 + 1, v12));
    }
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    canDisplay = WebCore::SecurityOrigin::canDisplay(v13, (WTF::URL *)a2, (uint64_t (***)(_QWORD, WebCore::SecurityOrigin *))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
    if (v13)
    {
      do
      {
        v17 = __ldaxr((unsigned int *)v13);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unsigned int *)v13));
      if (!v18)
      {
        atomic_store(1u, (unsigned int *)v13);
        v38 = *(WTF::StringImpl **)(v13 + 48);
        *(_QWORD *)(v13 + 48) = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v15);
          else
            *(_DWORD *)v38 -= 2;
        }
        v39 = *(WTF::StringImpl **)(v13 + 40);
        *(_QWORD *)(v13 + 40) = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            WTF::StringImpl::destroy(v39, v15);
          else
            *(_DWORD *)v39 -= 2;
        }
        v40 = *(unsigned int *)(v13 + 32);
        if ((_DWORD)v40 != -1)
          ((void (*)(_BYTE *, uint64_t))off_1E33F7728[v40])(buf, v13 + 8);
        *(_DWORD *)(v13 + 32) = -1;
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    if ((canDisplay & 1) == 0)
    {
      v41 = qword_1ECE7C608;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      {
        v43 = *(_QWORD *)(a1 + 32);
        if (v43)
        {
          WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 32));
          if (v45)
            v46 = v44;
          else
            v46 = 0;
          v47 = *(_QWORD *)(v43 + 32);
          v48 = *(_QWORD *)(v43 + 280);
        }
        else
        {
          v47 = 0;
          v46 = 0;
          v48 = 0;
        }
        v49 = *(_QWORD *)(a1 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        v85 = 2048;
        v86 = v46;
        v87 = 2048;
        v88 = v47;
        v89 = 2048;
        *(_QWORD *)v90 = v48;
        *(_WORD *)&v90[8] = 2048;
        *(_QWORD *)&v90[10] = v49;
        _os_log_impl(&dword_1940B8000, v41, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling load because it violates security policy.", buf, 0x34u);
      }
      v50 = *(_QWORD *)(a1 + 32);
      if (!v50)
      {
        if ((*(_BYTE *)(a2 + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
          *(_BYTE *)(a2 + 184) |= 1u;
        }
        goto LABEL_99;
      }
      v51 = (unsigned int *)(v50 + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 + 1, v51));
      if ((*(_BYTE *)(a2 + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
        *(_BYTE *)(a2 + 184) |= 1u;
      }
      WebCore::FrameLoader::reportLocalLoadFailed(v50, (WebCore::LocalFrame *)a2, v42);
      v53 = (unsigned int *)(v50 + 8);
LABEL_98:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v53);
LABEL_99:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
      goto LABEL_44;
    }
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if ((WTF::portAllowed() & 1) == 0)
  {
    v60 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v62 = *(_QWORD *)(a1 + 32);
      if (v62)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 32));
        if (v64)
          v65 = v63;
        else
          v65 = 0;
        v66 = *(_QWORD *)(v62 + 32);
        v67 = *(_QWORD *)(v62 + 280);
      }
      else
      {
        v66 = 0;
        v65 = 0;
        v67 = 0;
      }
      v68 = *(_QWORD *)(a1 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      v85 = 2048;
      v86 = v65;
      v87 = 2048;
      v88 = v66;
      v89 = 2048;
      *(_QWORD *)v90 = v67;
      *(_WORD *)&v90[8] = 2048;
      *(_QWORD *)&v90[10] = v68;
      _os_log_impl(&dword_1940B8000, v60, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling load to a blocked port.", buf, 0x34u);
    }
    v69 = *(WebCore::FrameLoader **)(a1 + 32);
    if (v69)
    {
      v70 = (unsigned int *)((char *)v69 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 + 1, v70));
    }
    goto LABEL_95;
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if (WebCore::isIPAddressDisallowed((WebCore *)a2, v19))
  {
    v72 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v73 = *(_QWORD *)(a1 + 32);
      if (v73)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(a1 + 32));
        if (!v75)
          v74 = 0;
        v76 = *(_QWORD *)(v73 + 32);
        v77 = *(_QWORD *)(v73 + 280);
      }
      else
      {
        v76 = 0;
        v74 = 0;
        v77 = 0;
      }
      v78 = *(_QWORD *)(a1 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = a1;
      v85 = 2048;
      v86 = v74;
      v87 = 2048;
      v88 = v76;
      v89 = 2048;
      *(_QWORD *)v90 = v77;
      *(_WORD *)&v90[8] = 2048;
      *(_QWORD *)&v90[10] = v78;
      _os_log_impl(&dword_1940B8000, v72, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::init: Cancelling load to disallowed IP address.", buf, 0x34u);
    }
    v69 = *(WebCore::FrameLoader **)(a1 + 32);
    if (v69)
    {
      v79 = (unsigned int *)((char *)v69 + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 + 1, v79));
    }
LABEL_95:
    if ((*(_BYTE *)(a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
      *(_BYTE *)(a2 + 184) |= 1u;
    }
    WebCore::FrameLoader::reportBlockedLoadFailed(v69, (WebCore::LocalFrame *)a2, v61);
    v53 = (unsigned int *)((char *)v69 + 8);
    goto LABEL_98;
  }
  if ((*(_BYTE *)(a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)a2);
    *(_BYTE *)(a2 + 184) |= 1u;
  }
  if (!*(_QWORD *)(a2 + 40))
  {
    v81 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 296);
    if (v81)
    {
      *(_DWORD *)(v81 + 24) += 2;
      WebCore::ResourceRequestBase::setFirstPartyForCookies((WTF **)a2, (const WTF::URL *)(v81 + 1008), v20);
      if (*(_DWORD *)(v81 + 24) == 2)
      {
        if ((*(_WORD *)(v81 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v81, v82);
      }
      else
      {
        *(_DWORD *)(v81 + 24) -= 2;
      }
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 296);
  if (v22)
  {
    *(_DWORD *)(v22 + 24) += 2;
    WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded(a2, (WebCore::ResourceRequest *)v22, 0, v21);
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v23);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
  }
  else
  {
    WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded(a2, 0, 0, v21);
  }
  *(_QWORD *)buf = 0;
  WTF::URL::invalidate((WTF::URL *)buf);
  v96 = 0;
  v97 = 0;
  *(_OWORD *)&v90[6] = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0;
  v99 = vdupq_n_s64(0x7FF8000000000000uLL);
  v100 = v99;
  v101 = 0;
  v102 = 0;
  v104 = v99;
  v103 = 0x8000000000000000;
  v105 = 0x7FF8000000000000;
  v106 &= 0xF0u;
  v107 &= 0xC000u;
  v108 = v108 & 0xF8 | 2;
  cf = 0;
  v110 = 0;
  v98 = v98 & 0xC0 | 5;
  ++*(_DWORD *)(a1 + 16);
  v24 = *a3;
  *a3 = 0;
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v25 = &off_1E33F7748;
  v25[1] = a1;
  v25[2] = a1;
  v25[3] = v24;
  v83 = v25;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, _QWORD **))(*(_QWORD *)a1 + 288))(a1, a2, buf, &v83);
  v27 = v83;
  v83 = 0;
  if (v27)
    (*(void (**)(_QWORD *))(*v27 + 8))(v27);
  v28 = cf;
  cf = 0;
  if (v28)
    CFRelease(v28);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)buf, v26);
}

_DWORD *WebCore::SubresourceLoader::willSendRequestInternal(uint64_t a1, WebCore::ResourceRequest *this, WebCore::ResourceResponseBase *a3, uint64_t *a4)
{
  uint64_t v7;
  WebCore::FrameLoader *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  WTF::StringImpl *v17;
  CFTypeRef v18;
  _DWORD *result;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::CachedResource *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  void *v54;
  unsigned int v55;
  uint64_t v56;
  WebCore::CachedResource *v57;
  uint64_t *v58;
  const WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned int *v62;
  WebCore::CachedResourceLoader *v63;
  uint64_t v64;
  char v65;
  unsigned int MetadataSiteAfterRedirection;
  WTF::StringImpl *v67;
  _DWORD **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  __int128 v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  void *v91;
  int v92;
  NSObject *v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD **v110;
  WTF::StringImpl *v111;
  _DWORD *v112;
  __int128 v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD **v132;
  WTF::StringImpl *v133;
  _DWORD *v134;
  __int128 v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  NSObject *v140;
  const WTF::URL *v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  WebCore::MemoryCache *Unconditional;
  WebCore::MemoryCache *v153;
  WebCore *v154;
  uint64_t v155;
  uint64_t v156;
  WebCore::Page *v157;
  uint64_t *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  unsigned int *v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  WebCore::SecurityOrigin *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WebCore::CachedResourceLoader *v179;
  WTF *v180;
  WTF::StringImpl *v181;
  unsigned int *v182;
  uint64_t v183;
  _DWORD *v184;
  _BYTE v185[240];
  CFTypeRef cf;
  char v187;
  _BYTE buf[32];
  _BYTE v189[24];
  int v190;
  __int16 v191;
  uint64_t v192;
  char v193;
  char v194;
  __int16 v195;
  char v196;
  uint8_t v197[64];
  __int128 v198;
  __int128 v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;

  v7 = a1;
  v204 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 16);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v8 = (WebCore::FrameLoader *)buf;
  if ((*((_BYTE *)this + 8) & 1) == 0)
  {
    v22 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(v7 + 32);
      if (v23)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
        if (!v25)
          v24 = 0;
        v26 = *(_QWORD *)(v23 + 32);
        v27 = *(_QWORD *)(v23 + 280);
      }
      else
      {
        v26 = 0;
        v24 = 0;
        v27 = 0;
      }
      v28 = *(_QWORD *)(v7 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v24;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v26;
      *(_WORD *)v189 = 2048;
      *(_QWORD *)&v189[2] = v27;
      *(_WORD *)&v189[10] = 2048;
      *(_QWORD *)&v189[12] = v28;
      _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because new request is invalid", buf, 0x34u);
    }
    WebCore::ResourceLoader::cannotShowURLError((uint64_t *)buf, (WebCore::ResourceLoader *)v7);
    WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v29);
    v30 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v30 + 16))(v30, this);
    result = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    goto LABEL_27;
  }
  if (*((_BYTE *)this + 147) != 1)
  {
    {
      WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
    }
    if (WebCore::sharedObserver(void)::observer)
      v9 = (uint64_t *)WebCore::sharedObserver(void)::observer;
    else
      v9 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
    v10 = *(_QWORD *)(v7 + 32);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t *, uint64_t, WebCore::ResourceRequest *, WebCore::ResourceResponseBase *, _QWORD))(*v9 + 16))(v9, v10, this, a3, (*(unsigned __int8 *)(v7 + 976) < 0x14uLL) & (0x8E804u >> *(_BYTE *)(v7 + 976)));
    if (v10)
    {
      v13 = (unsigned int *)(v10 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v20 = off_1E31FE290;
        v20[1] = v13;
        *(_QWORD *)buf = v20;
        WTF::ensureOnMainThread();
        v21 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
    }
  }
  ++*(_DWORD *)(v7 + 16);
  v183 = v7;
  v184 = (_DWORD *)v7;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v185, a3);
  v16 = (const void *)*((_QWORD *)a3 + 30);
  cf = v16;
  if (v16)
    CFRetain(v16);
  v187 = *((_BYTE *)a3 + 248);
  if ((*((_BYTE *)a3 + 138) & 1) != 0)
  {
    WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::operator()((uint64_t)&v183, a4, this);
    goto LABEL_21;
  }
  v31 = *(_QWORD *)(v7 + 1328);
  if (v31)
    v32 = *(WebCore::CachedResource **)(v31 + 8);
  else
    v32 = 0;
  WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v182, v32);
  if (*(_BYTE *)(v7 + 980))
  {
    if (*(_BYTE *)(v7 + 980) == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = *(WTF::StringImpl **)buf;
      v34 = (WTF::StringImpl **)(v7 + 336);
      v35 = *(_BYTE *)(v7 + 520);
      if ((v35 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 336));
        v35 = *(_BYTE *)(v7 + 520) | 1;
        *(_BYTE *)(v7 + 520) = v35;
      }
      if ((v35 & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 336));
        *(_BYTE *)(v7 + 520) |= 1u;
      }
      v36 = *v34;
      if (*v34)
        *(_DWORD *)v36 += 2;
      v181 = v36;
      WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"Not allowed to follow a redirection while loading ", 51, (uint64_t *)&v181, v197);
      if (v33)
        *(_DWORD *)v33 += 2;
      *(_QWORD *)buf = v33;
      v38 = *v34;
      if (*v34)
        *(_DWORD *)v38 += 2;
      *(_QWORD *)&buf[8] = v38;
      v39 = *(_OWORD *)(v7 + 360);
      *(_OWORD *)&buf[16] = *(_OWORD *)(v7 + 344);
      *(_OWORD *)v189 = v39;
      v40 = *(WTF::StringImpl **)v197;
      if (*(_QWORD *)v197)
        **(_DWORD **)v197 += 2;
      *(_QWORD *)&v189[16] = v40;
      v190 = 0;
      v191 = 2;
      v192 = 0;
      v193 = 1;
      *(_QWORD *)v197 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
          WTF::StringImpl::destroy(v40, v37);
        else
          *(_DWORD *)v40 -= 2;
      }
      v41 = v181;
      v181 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v37);
        else
          *(_DWORD *)v41 -= 2;
      }
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v37);
        else
          *(_DWORD *)v33 -= 2;
      }
      v42 = *(_QWORD *)(v7 + 32);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 296);
        if (v43)
        {
          *(_DWORD *)(v43 + 24) += 2;
          WebCore::ResourceError::platformLazyInit((WebCore::ResourceError *)buf);
          WebCore::Document::addConsoleMessage((_QWORD *)v43, 8, 2, (WTF::StringImpl **)&v189[16], 0);
          if (*(_DWORD *)(v43 + 24) == 2)
          {
            if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v43, v44);
          }
          else
          {
            *(_DWORD *)(v43 + 24) -= 2;
          }
        }
      }
      v45 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(_QWORD *)(v7 + 32);
        if (v46)
        {
          WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
          if (!v48)
            v47 = 0;
          v49 = *(_QWORD *)(v46 + 32);
          v50 = *(_QWORD *)(v46 + 280);
        }
        else
        {
          v49 = 0;
          v47 = 0;
          v50 = 0;
        }
        v51 = *(_QWORD *)(v7 + 744);
        *(_DWORD *)v197 = 134219008;
        *(_QWORD *)&v197[4] = v7;
        *(_WORD *)&v197[12] = 2048;
        *(_QWORD *)&v197[14] = v47;
        *(_WORD *)&v197[22] = 2048;
        *(_QWORD *)&v197[24] = v49;
        *(_WORD *)&v197[32] = 2048;
        *(_QWORD *)&v197[34] = v50;
        *(_WORD *)&v197[42] = 2048;
        *(_QWORD *)&v197[44] = v51;
        _os_log_impl(&dword_1940B8000, v45, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because not allowed to follow a redirect", v197, 0x34u);
      }
      WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
      v52 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v52 + 16))(v52, this);
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v53);
    }
    else
    {
      WebCore::ResourceResponse::ResourceResponse((uint64_t)buf, (uint64_t)a3);
      v194 &= ~1u;
      v196 = v196 & 0xF8 | 5;
      v195 |= 0x300u;
      (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v182 + 1) + 128))(*((_QWORD *)v182 + 1), buf);
      v92 = *(unsigned __int8 *)(v7 + 752);
      v93 = qword_1ECE7C860;
      v94 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
      if (v92)
      {
        if (v94)
        {
          v95 = *(_QWORD *)(v7 + 32);
          if (v95)
          {
            WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
            if (!v97)
              v96 = 0;
            v98 = *(_QWORD *)(v95 + 32);
            v99 = *(_QWORD *)(v95 + 280);
          }
          else
          {
            v98 = 0;
            v96 = 0;
            v99 = 0;
          }
          v100 = *(_QWORD *)(v7 + 744);
          *(_DWORD *)v197 = 134219008;
          *(_QWORD *)&v197[4] = v7;
          *(_WORD *)&v197[12] = 2048;
          *(_QWORD *)&v197[14] = v96;
          *(_WORD *)&v197[22] = 2048;
          *(_QWORD *)&v197[24] = v98;
          *(_WORD *)&v197[32] = 2048;
          *(_QWORD *)&v197[34] = v99;
          *(_WORD *)&v197[42] = 2048;
          *(_QWORD *)&v197[44] = v100;
          _os_log_impl(&dword_1940B8000, v93, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: reached terminal state", v197, 0x34u);
        }
        v101 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v101 + 16))(v101, this);
        (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
      }
      else
      {
        if (v94)
        {
          v117 = *(_QWORD *)(v7 + 32);
          if (v117)
          {
            WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
            if (!v119)
              v118 = 0;
            v120 = *(_QWORD *)(v117 + 32);
            v121 = *(_QWORD *)(v117 + 280);
          }
          else
          {
            v120 = 0;
            v118 = 0;
            v121 = 0;
          }
          v122 = *(_QWORD *)(v7 + 744);
          *(_DWORD *)v197 = 134219008;
          *(_QWORD *)&v197[4] = v7;
          *(_WORD *)&v197[12] = 2048;
          *(_QWORD *)&v197[14] = v118;
          *(_WORD *)&v197[22] = 2048;
          *(_QWORD *)&v197[24] = v120;
          *(_WORD *)&v197[32] = 2048;
          *(_QWORD *)&v197[34] = v121;
          *(_WORD *)&v197[42] = 2048;
          *(_QWORD *)&v197[44] = v122;
          _os_log_impl(&dword_1940B8000, v93, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load completed", v197, 0x34u);
        }
        v200 = 0;
        v198 = 0u;
        v199 = 0u;
        memset(v197, 0, sizeof(v197));
        v201 = -1;
        v202 = -1;
        v203 = 0;
        WebCore::SubresourceLoader::didFinishLoading((WebCore::SubresourceLoader *)v7, (const WebCore::NetworkLoadMetrics *)v197);
        v123 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v123 + 16))(v123, this);
        (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
        WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v197, v124);
      }
      WebCore::ResourceResponse::~ResourceResponse((WebCore::ResourceResponse *)buf, v102);
    }
    goto LABEL_138;
  }
  v175 = a3;
  v55 = *(_DWORD *)(v7 + 1640);
  *(_DWORD *)(v7 + 1640) = v55 + 1;
  if (v55 >= *(unsigned __int8 *)(v7 + 1088))
  {
    v103 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v104 = *(_QWORD *)(v7 + 32);
      if (v104)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
        if (!v106)
          v105 = 0;
        v107 = *(_QWORD *)(v104 + 32);
        v108 = *(_QWORD *)(v104 + 280);
      }
      else
      {
        v107 = 0;
        v105 = 0;
        v108 = 0;
      }
      v109 = *(_QWORD *)(v7 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v105;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v107;
      *(_WORD *)v189 = 2048;
      *(_QWORD *)&v189[2] = v108;
      *(_WORD *)&v189[10] = 2048;
      *(_QWORD *)&v189[12] = v109;
      _os_log_impl(&dword_1940B8000, v103, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because too many redirects", buf, 0x34u);
    }
    v110 = (_DWORD **)(v7 + 336);
    if ((*(_BYTE *)(v7 + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 336));
      *(_BYTE *)(v7 + 520) |= 1u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v111 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v112 = *v110;
    if (*v110)
      *v112 += 2;
    *(_QWORD *)&buf[8] = v112;
    v113 = *(_OWORD *)(v7 + 360);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v7 + 344);
    *(_OWORD *)v189 = v113;
    if (v111)
      *(_DWORD *)v111 += 2;
    *(_QWORD *)&v189[16] = v111;
    v190 = 0;
    v191 = 1;
    v192 = 0;
    v193 = 1;
    WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v114);
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v115);
      else
        *(_DWORD *)v111 -= 2;
    }
    v116 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v116 + 16))(v116, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
    goto LABEL_138;
  }
  if (WebCore::ResourceRequestBase::isConditional(this))
  {
    v56 = *(_QWORD *)(*((_QWORD *)v182 + 1) + 488);
    if (v56)
    {
      if (*(_QWORD *)(v56 + 8))
      {
        if ((*((_BYTE *)this + 184) & 1) != 0
          || (WebCore::ResourceRequest::doUpdateResourceRequest(this),
              *((_BYTE *)this + 184) |= 1u,
              (v56 = *(_QWORD *)(*((_QWORD *)v182 + 1) + 488)) != 0))
        {
          v57 = *(WebCore::CachedResource **)(v56 + 8);
        }
        else
        {
          v57 = 0;
        }
        v58 = WebCore::CachedResource::response(v57);
        WebCore::ResourceResponse::platformLazyInit((uint64_t)v58, 1);
        if ((WTF::equal(*(WTF **)this, (const WTF::StringImpl *)*v58, v59) & 1) == 0)
        {
          Unconditional = (WebCore::MemoryCache *)WebCore::ResourceRequestBase::makeUnconditional(this, v60);
          v153 = (WebCore::MemoryCache *)WebCore::MemoryCache::singleton(Unconditional);
          v154 = (WebCore *)WebCore::MemoryCache::revalidationFailed(v153, *((WebCore::CachedResource **)v182 + 1));
          v155 = *(_QWORD *)(v7 + 32);
          if (v155)
          {
            v156 = *(_QWORD *)(v155 + 24);
            if (v156)
            {
              v157 = *(WebCore::Page **)(v156 + 8);
              if (v157)
              {
                ++*(_DWORD *)v157;
                if ((*(_QWORD *)(*((_QWORD *)v157 + 14) + 672) & 0x800000000000) == 0
                  || (v158 = (uint64_t *)*((_QWORD *)v157 + 32)) == 0)
                {
                  v158 = WebCore::emptyDiagnosticLoggingClient(v154);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(uint64_t *, _BYTE *, _QWORD, uint64_t, uint64_t))(*v158 + 8))(v158, buf, MEMORY[0x1E0CBF738], 1, 1);
                v160 = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (v160)
                {
                  if (*(_DWORD *)v160 == 2)
                    WTF::StringImpl::destroy(v160, v159);
                  else
                    *(_DWORD *)v160 -= 2;
                }
                WTF::RefCounted<WebCore::Page>::deref(v157);
              }
            }
          }
        }
      }
    }
  }
  v61 = *(_QWORD *)(v7 + 40);
  if (v61)
    ++*(_DWORD *)(v61 + 24);
  v62 = (unsigned int *)(v7 + 976);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v175, 1);
  WebCore::SecurityOrigin::create(v175, (uint64_t *)&v180);
  v174 = v61;
  v63 = *(WebCore::CachedResourceLoader **)(v61 + 72);
  ++*(_DWORD *)v63;
  v179 = v63;
  v64 = *(_QWORD *)(v7 + 32);
  v65 = v64 && *(_QWORD *)(*(_QWORD *)(v64 + 128) + 8) == v64 && *(_BYTE *)(v174 + 3532) != 0;
  MetadataSiteAfterRedirection = WebCore::CachedResourceLoader::computeFetchMetadataSiteAfterRedirection(this, (WTF::StringImpl *)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 1328) + 8) + 556) & 0x1F), *(unsigned __int8 *)(v7 + 977), v180, *(unsigned __int8 *)(v7 + 1646), v65);
  *(_BYTE *)(v7 + 1646) = MetadataSiteAfterRedirection;
  v67 = (WTF::StringImpl *)(*(_BYTE *)(*((_QWORD *)v182 + 1) + 556) & 0x1F);
  if ((*(_BYTE *)(v7 + 720) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 536));
    *(_BYTE *)(v7 + 720) |= 1u;
  }
  if ((WebCore::CachedResourceLoader::updateRequestAfterRedirection(v63, v67, this, (unsigned __int8 *)(v7 + 976), MetadataSiteAfterRedirection, (WebCore::SecurityOrigin *)(v7 + 536)) & 1) == 0)
  {
    v125 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v126 = *(_QWORD *)(v7 + 32);
      if (v126)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
        if (!v128)
          v127 = 0;
        v129 = *(_QWORD *)(v126 + 32);
        v130 = *(_QWORD *)(v126 + 280);
      }
      else
      {
        v129 = 0;
        v127 = 0;
        v130 = 0;
      }
      v131 = *(_QWORD *)(v7 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v127;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v129;
      *(_WORD *)v189 = 2048;
      *(_QWORD *)&v189[2] = v130;
      *(_WORD *)&v189[10] = 2048;
      *(_QWORD *)&v189[12] = v131;
      _os_log_impl(&dword_1940B8000, v125, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because CachedResourceLoader::updateRequestAfterRedirection (really CachedResourceLoader::canRequestAfterRedirection) said no", buf, 0x34u);
    }
    v132 = (_DWORD **)(v7 + 336);
    if ((*(_BYTE *)(v7 + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 336));
      *(_BYTE *)(v7 + 520) |= 1u;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v133 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    v134 = *v132;
    if (*v132)
      *v134 += 2;
    *(_QWORD *)&buf[8] = v134;
    v135 = *(_OWORD *)(v7 + 360);
    *(_OWORD *)&buf[16] = *(_OWORD *)(v7 + 344);
    *(_OWORD *)v189 = v135;
    if (v133)
      *(_DWORD *)v133 += 2;
    *(_QWORD *)&v189[16] = v133;
    v190 = 0;
    v191 = 2;
    v192 = 0;
    v193 = 1;
    WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v136);
    if (v133)
    {
      if (*(_DWORD *)v133 == 2)
        WTF::StringImpl::destroy(v133, v137);
      else
        *(_DWORD *)v133 -= 2;
    }
    goto LABEL_178;
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((WTF::portAllowed() & 1) != 0)
  {
    v68 = (_DWORD **)(v7 + 336);
    WebCore::SubresourceLoader::checkRedirectionCrossOriginAccessControl((WebCore::SubresourceLoader *)v197, (const WebCore::ResourceRequest *)v7, (const WebCore::ResourceResponse *)(v7 + 336), v175, this);
    if (!v197[8])
    {
      v161 = v182;
      if ((*(_BYTE *)(*((_QWORD *)v182 + 1) + 556) & 0x1F) != 1)
        goto LABEL_232;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if (WebCore::CachedResourceLoader::shouldDeferImageLoad(v63, this))
      {
        v162 = qword_1ECE7C860;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
        {
          v163 = *(_QWORD *)(v7 + 32);
          if (v163)
          {
            WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
            if (!v165)
              v164 = 0;
            v166 = *(_QWORD *)(v163 + 32);
            v167 = *(_QWORD *)(v163 + 280);
          }
          else
          {
            v166 = 0;
            v164 = 0;
            v167 = 0;
          }
          v168 = *(_QWORD *)(v7 + 744);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v164;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v166;
          *(_WORD *)v189 = 2048;
          *(_QWORD *)&v189[2] = v167;
          *(_WORD *)&v189[10] = 2048;
          *(_QWORD *)&v189[12] = v168;
          _os_log_impl(&dword_1940B8000, v162, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because it's an image that should be defered", buf, 0x34u);
        }
        WebCore::ResourceLoader::cancel((WebCore::ResourceLoader *)v7);
        v169 = *a4;
        *a4 = 0;
        (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v169 + 16))(v169, this);
        (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
        goto LABEL_128;
      }
      v161 = v182;
      if (!v182)
        v170 = 0;
      else
LABEL_232:
        v170 = *((_QWORD *)v161 + 1);
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = v7;
      v171 = *a4;
      *a4 = 0;
      *(_QWORD *)&buf[16] = v171;
      WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0::$_0((uint64_t)&buf[24], (uint64_t)&v183);
      WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::CompletionHandler<WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &,WebCore::ResourceResponse const&,void (&&)(WebCore::ResourceRequest &&))::$_1,void>((uint64_t *)&v178, (uint64_t *)buf);
      (*(void (**)(uint64_t, WebCore::ResourceRequest *, WebCore::SecurityOrigin *, WTF::StringImpl **))(*(_QWORD *)v170 + 120))(v170, this, v175, &v178);
      v173 = v178;
      v178 = 0;
      if (v173)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v173 + 8))(v173);
      WebCore::SubresourceLoader::willSendRequestInternal(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_1::~$_1(buf, v172);
      v7 = 0;
      goto LABEL_128;
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v69 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v69 += 2;
    v177 = v69;
    if (v197[8])
    {
      v70 = *(WTF::StringImpl **)v197;
      if (*(_QWORD *)v197)
        **(_DWORD **)v197 += 2;
      v176 = v70;
      WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Cross-origin redirection to ", 29, (uint64_t *)&v177, (uint64_t)" denied by Cross-Origin Resource Sharing policy: ", 50, (uint64_t *)&v176, &v178);
      v72 = v176;
      v176 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, v71);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = v177;
      v177 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, v71);
        else
          *(_DWORD *)v73 -= 2;
      }
      v74 = *(_QWORD *)(v7 + 32);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 296);
        if (v75)
        {
          *(_DWORD *)(v75 + 24) += 2;
          WebCore::Document::addConsoleMessage((_QWORD *)v75, 8, 2, &v178, 0);
          if (*(_DWORD *)(v75 + 24) == 2)
          {
            if ((*(_WORD *)(v75 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v75, v76);
          }
          else
          {
            *(_DWORD *)(v75 + 24) -= 2;
          }
        }
      }
      v77 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
      {
        v78 = *(_QWORD *)(v7 + 32);
        if (v78)
        {
          WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
          if (!v80)
            v79 = 0;
          v81 = *(_QWORD *)(v78 + 32);
          v82 = *(_QWORD *)(v78 + 280);
        }
        else
        {
          v81 = 0;
          v79 = 0;
          v82 = 0;
        }
        v83 = *(_QWORD *)(v7 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v79;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v81;
        *(_WORD *)v189 = 2048;
        *(_QWORD *)&v189[2] = v82;
        *(_WORD *)&v189[10] = 2048;
        *(_QWORD *)&v189[12] = v83;
        _os_log_impl(&dword_1940B8000, v77, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load canceled because crosss-origin redirection denied by CORS policy", buf, 0x34u);
      }
      if ((*(_BYTE *)(v7 + 520) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v7 + 336));
        *(_BYTE *)(v7 + 520) |= 1u;
      }
      *(_QWORD *)buf = 0;
      v84 = *v68;
      if (*v68)
        *v84 += 2;
      *(_QWORD *)&buf[8] = v84;
      v85 = *(_OWORD *)(v7 + 360);
      *(_OWORD *)&buf[16] = *(_OWORD *)(v7 + 344);
      *(_OWORD *)v189 = v85;
      v86 = v178;
      if (v178)
        *(_DWORD *)v178 += 2;
      *(_QWORD *)&v189[16] = v86;
      v190 = 0;
      v191 = 2;
      v192 = 0;
      v193 = 1;
      WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v87);
      v88 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v88 + 16))(v88, this);
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      v90 = v178;
      v178 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
          WTF::StringImpl::destroy(v90, v89);
        else
          *(_DWORD *)v90 -= 2;
      }
LABEL_128:
      std::optional<WTF::String>::~optional((uint64_t)v197, v89);
      goto LABEL_179;
    }
    __break(1u);
  }
  else
  {
    v140 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v142 = *(_QWORD *)(v7 + 32);
      if (v142)
      {
        WebCore::Frame::pageID(*(WebCore::Frame **)(v7 + 32));
        if (!v144)
          v143 = 0;
        v145 = *(_QWORD *)(v142 + 32);
        v146 = *(_QWORD *)(v142 + 280);
      }
      else
      {
        v145 = 0;
        v143 = 0;
        v146 = 0;
      }
      v147 = *(_QWORD *)(v7 + 744);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v143;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v145;
      *(_WORD *)v189 = 2048;
      *(_QWORD *)&v189[2] = v146;
      *(_WORD *)&v189[10] = 2048;
      *(_QWORD *)&v189[12] = v147;
      _os_log_impl(&dword_1940B8000, v140, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::willSendRequestInternal: resource load (redirect) canceled because it attempted to use a blocked port", buf, 0x34u);
    }
    v8 = *(WebCore::FrameLoader **)(v7 + 32);
    if (!v8)
      goto LABEL_244;
    v62 = (unsigned int *)((char *)v8 + 8);
    do
      v148 = __ldaxr(v62);
    while (__stlxr(v148 + 1, v62));
    if ((*((_BYTE *)this + 184) & 1) != 0)
      goto LABEL_192;
  }
  WebCore::ResourceRequest::doUpdateResourceRequest(this);
  *((_BYTE *)this + 184) |= 1u;
LABEL_192:
  WebCore::FrameLoader::reportBlockedLoadFailed(v8, this, v141);
  WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v62);
  v149 = *(_QWORD *)(v7 + 32);
  if (!v149)
  {
LABEL_244:
    v150 = 0;
    goto LABEL_194;
  }
  v150 = *(_QWORD *)(v149 + 280);
LABEL_194:
  WebCore::FrameLoader::blockedError(v150, (uint64_t)buf);
  WebCore::ResourceLoader::cancel((WTF::StringImpl *)v7, (uint64_t)buf, 0);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v151);
LABEL_178:
  v138 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v138 + 16))(v138, this);
  (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
LABEL_179:
  WTF::Ref<WebCore::CachedResourceLoader,WTF::RawPtrTraits<WebCore::CachedResourceLoader>,WTF::DefaultRefDerefTraits<WebCore::CachedResourceLoader>>::~Ref(&v179, v91);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v180, v139);
  if (*(_DWORD *)(v174 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 24))(v174);
  else
    --*(_DWORD *)(v174 + 24);
LABEL_138:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v182, v54);
LABEL_21:
  v18 = cf;
  cf = 0;
  if (v18)
    CFRelease(v18);
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v185, v17);
  result = v184;
  v184 = 0;
  if (result)
  {
    if (result[4] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  if (v7)
  {
LABEL_27:
    if (*(_DWORD *)(v7 + 16) == 1)
      return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 16);
  }
  return result;
}

WebCore::ResourceResponseBase *WebCore::ResourceResponseBase::ResourceResponseBase(WebCore::ResourceResponseBase *this, const WebCore::ResourceResponseBase *a2)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  const void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 8) = v5;
  v6 = (_DWORD *)*((_QWORD *)a2 + 5);
  if (v6)
    *v6 += 2;
  *((_QWORD *)this + 5) = v6;
  v7 = (_DWORD *)*((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  if (v7)
    *v7 += 2;
  *((_QWORD *)this + 7) = v7;
  v8 = (_DWORD *)*((_QWORD *)a2 + 8);
  if (v8)
    *v8 += 2;
  *((_QWORD *)this + 8) = v8;
  v9 = (_DWORD *)*((_QWORD *)a2 + 9);
  if (v9)
    *v9 += 2;
  v10 = *((unsigned int *)a2 + 23);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = v9;
  *((_DWORD *)this + 23) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
      goto LABEL_35;
    v11 = WTF::fastMalloc((WTF *)(16 * v10));
    *((_DWORD *)this + 22) = v10;
    *((_QWORD *)this + 10) = v11;
    v12 = *((unsigned int *)a2 + 23);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)a2 + 10);
      v14 = v13 + 16 * v12;
      do
      {
        *(_WORD *)v11 = *(_WORD *)v13;
        v15 = *(_DWORD **)(v13 + 8);
        if (v15)
          *v15 += 2;
        *(_QWORD *)(v11 + 8) = v15;
        v13 += 16;
        v11 += 16;
      }
      while (v13 != v14);
    }
  }
  v16 = *((unsigned int *)a2 + 27);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 27) = v16;
  if (!(_DWORD)v16)
    goto LABEL_19;
  if (v16 >> 28)
  {
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x1943497E0);
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v16));
  *((_DWORD *)this + 26) = v16;
  *((_QWORD *)this + 12) = v26;
  v27 = *((unsigned int *)a2 + 27);
  if ((_DWORD)v27)
  {
    v28 = *((_QWORD *)a2 + 12);
    v29 = v28 + 16 * v27;
    do
    {
      v30 = *(_DWORD **)v28;
      if (*(_QWORD *)v28)
        *v30 += 2;
      *v26 = v30;
      v31 = *(_DWORD **)(v28 + 8);
      if (v31)
        *v31 += 2;
      v26[1] = v31;
      v28 += 16;
      v26 += 2;
    }
    while (v28 != v29);
  }
LABEL_19:
  v17 = (unsigned int *)*((_QWORD *)a2 + 14);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *((_QWORD *)this + 14) = v17;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v19 = (const void *)*((_QWORD *)a2 + 15);
    *((_QWORD *)this + 15) = v19;
    if (v19)
      CFRetain(v19);
    *((_BYTE *)this + 128) = 1;
  }
  v20 = *(_OWORD *)((char *)a2 + 136);
  v21 = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 168) = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)this + 152) = v21;
  *(_OWORD *)((char *)this + 136) = v20;
  v22 = *(_OWORD *)((char *)a2 + 184);
  v23 = *(_OWORD *)((char *)a2 + 200);
  v24 = *(_OWORD *)((char *)a2 + 216);
  *(_DWORD *)((char *)this + 231) = *(_DWORD *)((char *)a2 + 231);
  *(_OWORD *)((char *)this + 216) = v24;
  *(_OWORD *)((char *)this + 200) = v23;
  *(_OWORD *)((char *)this + 184) = v22;
  return this;
}

uint64_t WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(WebCore::PlatformKeyboardEvent *this)
{
  unsigned int v2;
  int v3;
  int v4;

  if (byte_1ECE90CF2)
    return WebCore::PlatformKeyboardEvent::s_currentModifiers;
  v2 = +[WebEvent modifierFlags](WebEvent, "modifierFlags");
  if ((v2 & 0x900000) != 0)
    v3 = (8 * ((v2 & 0x220000) != 0)) | 2;
  else
    v3 = 8 * ((v2 & 0x220000) != 0);
  v4 = v3 | ((v2 & 0x480000) != 0);
  if ((v2 & 0x1010000) != 0)
    v4 |= 4u;
  return v4 | (v2 >> 14) & 0x10;
}

uint64_t WebCore::CachedCSSStyleSheet::CachedCSSStyleSheet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  const WTF::String *v14;
  PAL *v15;
  const char *v16;
  uint64_t *v17;
  __int128 v18;
  uint64_t v20;
  __int16 v21;
  _QWORD v22[3];
  __int16 v23;
  const char *v24;
  uint64_t v25;

  *(_QWORD *)WebCore::CachedResource::CachedResource(a1, a2, 2, a3, a4) = off_1E33F8220;
  v6 = *(_QWORD *)(a2 + 200);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v9 = (const char *)PAL::atomCanonicalTextEncodingName(v7, (const char *)v8);
  v11 = v10;
  v22[1] = v9;
  v22[2] = v10;
  v24 = v9;
  v25 = v10;
  if (v10 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v24))
    {
      v12 = 165;
    }
    else
    {
      v12 = 92;
    }
  }
  else
  {
    v12 = 92;
  }
  v23 = v12;
  v13 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v13 = 1;
  v15 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::TextResourceDecoder *)&WebCore::cssContentTypeAtomData, v14);
  *(_DWORD *)(v13 + 4) = (_DWORD)v15;
  if ((_DWORD)v15 == 2)
  {
    v17 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((uint64_t *)"UTF-8", (PAL *)"UTF-8", v16);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v20;
      v24 = (const char *)xmmword_1ECE86C80;
      v25 = v20;
      if (v20 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
      {
        if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v24))
        {
          v21 = 165;
        }
        else
        {
          v21 = 92;
        }
      }
      else
      {
        v21 = 92;
      }
      v17 = &PAL::UTF8Encoding(void)::globalUTF8Encoding;
      word_1ECE86C90 = v21;
    }
  }
  else if (v11)
  {
    v17 = v22;
  }
  else
  {
    v17 = PAL::Latin1Encoding(v15);
  }
  *(_QWORD *)(v13 + 8) = &off_1E31F4A18;
  v18 = *(_OWORD *)(v17 + 1);
  *(_WORD *)(v13 + 32) = *((_WORD *)v17 + 12);
  *(_OWORD *)(v13 + 16) = v18;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_DWORD *)(v13 + 56) = 0;
  *(_QWORD *)(v13 + 64) = 0;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_QWORD *)(v13 + 87) = 0;
  *(_QWORD *)(a1 + 656) = v13;
  *(_OWORD *)(a1 + 664) = 0u;
  return a1;
}

void WebCore::DocumentLoader::finishedLoading(WebCore::DocumentLoader *this)
{
  Inspector::IdentifiersFactory *v2;
  WTF::MonotonicTime *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::FrameLoader *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  WebCore::LocalDOMWindow *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WebCore::ApplicationCache **v31;
  uint64_t v32;
  WebCore::DocumentLoader *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  WebCore::LocalDOMWindow *v40;
  _OWORD v41[6];
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  ++*((_DWORD *)this + 6);
  v2 = (Inspector::IdentifiersFactory *)*((_QWORD *)this + 348);
  if (v2)
  {
    v42 = 0;
    memset(v41, 0, sizeof(v41));
    v43 = -1;
    v44 = -1;
    v45 = 0;
    *((_QWORD *)this + 348) = 0;
    v29 = *((_QWORD *)this + 2);
    if (v29)
    {
      v29 = *(_QWORD *)(v29 + 8);
      if (v29)
        v29 = *(_QWORD *)(v29 + 280);
    }
    WebCore::ResourceLoadNotifier::dispatchDidFinishLoading(v29 + 32, (uint64_t)this, v2, (uint64_t)v41);
    WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v41, v30);
  }
  v3 = (WTF::MonotonicTime *)WebCore::DocumentLoader::maybeFinishLoadingMultipartContent((uint64_t)this);
  WTF::MonotonicTime::now(v3);
  *((_QWORD *)this + 342) = v5;
  if (!*((_BYTE *)this + 3537))
  {
    *((_BYTE *)this + 3537) = 1;
    v6 = *((_QWORD *)this + 2);
    if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
      v8 = *(WebCore::FrameLoader **)(v7 + 280);
    else
      v8 = 0;
    WebCore::FrameLoader::commitProvisionalLoad(v8, v4);
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 280))
      {
        if (WebCore::DocumentLoader::maybeCreateArchive(this))
          goto LABEL_17;
        if (!*((_BYTE *)this + 3539))
        {
          v24 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)v24 = 1;
          *(_QWORD *)(v24 + 8) = v24 + 24;
          *(_QWORD *)(v24 + 16) = 1;
          *(_QWORD *)(v24 + 48) = 0;
          *(_BYTE *)(v24 + 40) = 1;
          *(_QWORD *)&v41[0] = v24;
          WebCore::DocumentLoader::commitData((uint64_t)this, (const WebCore::SharedBuffer *)v24);
          WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v41, v25);
        }
        v11 = *((_QWORD *)this + 2);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 280);
            if (v13)
            {
              (*(void (**)(_QWORD, WebCore::DocumentLoader *))(**(_QWORD **)(v13 + 16) + 520))(*(_QWORD *)(v13 + 16), this);
              v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 280) + 16);
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 664))(v14);
LABEL_17:
              WebCore::DocumentWriter::end((uint64_t)this + 112);
              if (!*((_BYTE *)this + 1588))
              {
                *((_BYTE *)this + 3548) = 0;
                *((_BYTE *)this + 3542) = 0;
                v15 = *((_QWORD *)this + 2);
                if (v15)
                {
                  v16 = *(_QWORD *)(v15 + 8);
                  if (v16)
                  {
                    v17 = *(_QWORD *)(v16 + 280);
                    if (!v17)
                      goto LABEL_26;
                    v18 = 88;
                    if (!*(_BYTE *)(v17 + 80))
                      v18 = 96;
                    if (*(WebCore::DocumentLoader **)(v17 + v18) != this)
                      goto LABEL_26;
                    v19 = *((_QWORD *)this + 11);
                    if (v19)
                    {
                      if (*(_DWORD *)(v19 - 12))
                        goto LABEL_26;
                    }
                    v26 = *((_QWORD *)this + 13);
                    if (v26)
                    {
                      if (*(_DWORD *)(v26 - 12))
                        goto LABEL_26;
                    }
                    v27 = *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v16 + 296) + 696);
                    if (*((_BYTE *)v27 + 88))
                    {
                      *((_BYTE *)v27 + 88) = 0;
                      v40 = v27;
                      v35 = *(_QWORD *)(WebCore::LocalDOMWindow::frame(v27) + 280);
                      v36 = 88;
                      if (!*(_BYTE *)(v35 + 80))
                        v36 = 96;
                      v37 = *(_QWORD *)(v35 + v36);
                      if (v37)
                      {
                        v38 = *(_DWORD *)(v37 + 24);
                        *(_DWORD *)(v37 + 24) = v38 + 1;
                        if (!*(_BYTE *)(v37 + 1588))
                        {
                          v39 = v37;
                          WebCore::LocalDOMWindow::print(v40);
                          v37 = v39;
                          v38 = *(_DWORD *)(v39 + 24) - 1;
                        }
                        if (v38)
                          *(_DWORD *)(v37 + 24) = v38;
                        else
                          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
                      }
                      else
                      {
                        WebCore::LocalDOMWindow::print(v40);
                      }
                    }
                    v28 = *((_QWORD *)this + 2);
                    if (v28)
                    {
                      v16 = *(_QWORD *)(v28 + 8);
                      if (v16)
                      {
LABEL_26:
                        v20 = *(WTF **)(v16 + 280);
                        if (v20)
                        {
                          if (*((_DWORD *)v20 + 16))
                            WebCore::FrameLoader::checkLoadComplete(v20, 0);
                          v21 = (_QWORD *)*((_QWORD *)this + 359);
                          v22 = v21[6];
                          if (v22 && (v31 = *(WebCore::ApplicationCache ***)(v22 + 8)) != 0
                            || (v23 = v21[5]) != 0
                            && !v21[7]
                            && (v34 = *(_QWORD *)(v23 + 8)) != 0
                            && (v31 = *(WebCore::ApplicationCache ***)(v34 + 8)) != 0)
                          {
                            v32 = *(_QWORD *)(v21[1] + 8);
                            if (v32)
                              v33 = (WebCore::DocumentLoader *)(v32 - 56);
                            else
                              v33 = 0;
                            WebCore::ApplicationCacheGroup::finishedLoadingMainResource(v31, v33);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*((_DWORD *)this + 6) == 1)
    (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)this + 24))(this);
  else
    --*((_DWORD *)this + 6);
}

uint64_t WebCore::DocumentLoader::commitData(uint64_t this, const WebCore::SharedBuffer *a2)
{
  __int128 *v2;
  uint64_t v4;
  __int128 v5;
  WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  _DWORD *v22;
  __int128 v23;
  _DWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::FrameLoader *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WebCore::LocalDOMWindow *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  WebCore::SecurityOrigin *v45;
  WebCore::SecurityOrigin *v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WebCore::SecurityOrigin *v63;
  WebCore::SecurityOrigin *v64;
  WTF::StringImpl *v65;
  const WebCore::SecurityOrigin *v66;
  void *v67;
  uint64_t v68;
  WebCore::ServiceWorker *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  WebCore::SecurityOrigin *v79;
  WebCore::SecurityOrigin *v80;
  WTF::StringImpl *v81;
  const WebCore::SecurityOrigin *v82;
  bmalloc::api *v83;
  void *v84;
  WebCore::Document *v85;
  WebCore::ExtensionStyleSheets *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  void *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  WebCore::FrameLoader *v106;
  WebCore::ServiceWorker *v107;
  __int128 v108[2];
  WTF::StringImpl *v109[2];
  __int128 v110;
  uint64_t v111;

  v4 = this;
  v111 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 3539))
    goto LABEL_87;
  *(_BYTE *)(this + 3539) = 1;
  WebCore::DocumentLoader::documentURL((__n128 *)this, (uint64_t)v109);
  v5 = *(_OWORD *)(v4 + 3488);
  v108[0] = *(_OWORD *)(v4 + 3472);
  v108[1] = v5;
  WebCore::DocumentWriter::begin(v4 + 112, (uint64_t)v109, 0, 0, v108, v4 + 1632);
  v8 = v7;
  this = (uint64_t)v109[0];
  v109[0] = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v6);
    else
      *(_DWORD *)this -= 2;
  }
  if (!v8)
    return this;
  this = *(_QWORD *)(v4 + 144);
  if (this)
  {
    v9 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = v9 + 1;
  }
  else
  {
    v9 = MEMORY[8] - 1;
  }
  *(_BYTE *)(this + 13) = 1;
  if (v9)
    *(_DWORD *)(this + 8) = v9;
  else
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  v10 = *(_QWORD *)(v4 + 16);
  if (!v10)
    return this;
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    return this;
  v12 = *(_QWORD *)(v11 + 296);
  if (!v12)
    return this;
  if (WebCore::localLoadPolicy != 2 && *(_BYTE *)(v4 + 3536))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v6);
    this = WebCore::SecurityOrigin::grantLoadLocalResources(v94);
    v11 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  }
  if (!*(_DWORD *)(*(_QWORD *)(v11 + 280) + 64))
    return this;
  v13 = *(_QWORD *)(v4 + 2664);
  if (v13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
    WebCore::Document::setBaseURLOverride((WebCore::Document *)v12, (const WTF::URL *)(*(_QWORD *)(*(_QWORD *)(v4 + 2664) + 16) + 16));
  if (!*(_BYTE *)(v4 + 3553))
    goto LABEL_53;
  v2 = (__int128 *)(v4 + 3472);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v6);
  if (*(_DWORD *)(v15 + 32) == 1)
  {
    if (*v2 != 0)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v14);
      if (*(_DWORD *)(v95 + 32) == 1)
        WebCore::Document::createNewIdentifier((WebCore::Document *)v12);
    }
  }
  else
  {
    v16 = *(_QWORD *)(v4 + 3504);
    if (v16 && *(_BYTE *)(v16 + 344))
    {
      WebCore::ServiceWorker::getOrCreate((WebCore::ScriptExecutionContext *)(v12 + 192), (_QWORD *)(v16 + 280), (uint64_t *)&v107);
      v96 = v107;
      v107 = 0;
      v109[0] = v96;
      WebCore::ScriptExecutionContext::setActiveServiceWorker(v12 + 192, (uint64_t *)v109);
      if (v109[0])
        WebCore::ServiceWorker::deref(v109[0], v97);
      WTF::Ref<WebCore::ServiceWorker,WTF::RawPtrTraits<WebCore::ServiceWorker>,WTF::DefaultRefDerefTraits<WebCore::ServiceWorker>>::~Ref(&v107, v97);
      std::unique_ptr<WebCore::ServiceWorkerRegistrationData>::operator=[abi:sn180100]((WebCore::ServiceWorkerRegistrationData **)(v4 + 3504), v98);
    }
    else
    {
      v17 = WebCore::Document::parentDocument((WebCore::Document *)v12);
      if (v17)
      {
        if ((*(_BYTE *)(v12 + 744) & 2) == 0)
        {
          v60 = v17;
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v18);
          if (*(_DWORD *)(v62 + 32) != 1)
          {
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v60 + 192), v61);
            v64 = v63;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v65);
            if (WebCore::SecurityOrigin::isSameOriginDomain(v64, v66))
            {
              v68 = *(_QWORD *)(v60 + 392);
              if (v68)
                ++*(_DWORD *)(v68 + 24);
              v69 = *(WebCore::ServiceWorker **)(v12 + 392);
              *(_QWORD *)(v12 + 392) = v68;
              if (v69)
              {
                if (*((_DWORD *)v69 + 6) == 1)
                {
                  WebCore::ServiceWorker::~ServiceWorker(v69, v67);
                  bmalloc::api::isoDeallocate(v83, v84);
                }
                else
                {
                  --*((_DWORD *)v69 + 6);
                }
              }
            }
          }
        }
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 296) + 392))
    goto LABEL_23;
  if ((*(_BYTE *)(v12 + 744) & 2) != 0)
    goto LABEL_23;
  v70 = *(_QWORD *)(v12 + 528);
  if (v70)
  {
    v71 = *(_QWORD *)(v70 + 8);
    if (v71)
    {
      v72 = *(_QWORD *)(v71 + 24);
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          if (*(_BYTE *)(v73 + 1686))
            goto LABEL_23;
        }
      }
    }
  }
  if (WebCore::Document::parentDocument((WebCore::Document *)v12))
  {
    v74 = WebCore::Document::parentDocument((WebCore::Document *)v12);
    if ((*(_BYTE *)(v12 + 744) & 2) == 0)
    {
      v76 = v74;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v75);
      if (*(_DWORD *)(v78 + 32) != 1)
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v76 + 192), v77);
        v80 = v79;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v81);
        if (WebCore::SecurityOrigin::isSameOriginDomain(v80, v82))
        {
LABEL_23:
          if (!WebCore::sharedProvider)
          {
            __break(0xC471u);
            JUMPOUT(0x19434A754);
          }
          v19 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::sharedProvider + 16))(WebCore::sharedProvider);
          v21 = v19;
          ++v19[2];
          v22 = *(_DWORD **)(v12 + 2960);
          if (v22 == v19 || *(_BYTE *)(v12 + 3406) || *(_BYTE *)(v12 + 3412))
          {
            if (v19[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
            else
              --v19[2];
          }
          else
          {
            if (v22)
            {
              ++v22[2];
              v23 = *(_OWORD *)(v12 + 432);
              *(_OWORD *)v109 = *(_OWORD *)(v12 + 416);
              v110 = v23;
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v22 + 112))(v22, v109);
              if (v22[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
              else
                --v22[2];
            }
            v24 = *(_DWORD **)(v12 + 2960);
            *(_QWORD *)(v12 + 2960) = v21;
            if (v24)
            {
              if (v24[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
              else
                --v24[2];
            }
            WebCore::Document::updateServiceWorkerClientData((_QWORD *)v12, v20);
          }
        }
      }
    }
  }
  v25 = *(_QWORD *)(v4 + 3480);
  if (!(*(_QWORD *)v2 | v25))
    goto LABEL_53;
  v26 = v25 == *(_QWORD *)(v12 + 424) && *(_QWORD *)v2 == *(_QWORD *)(v12 + 416);
  if (!v26 || *(_QWORD *)(v4 + 3488) != *(_QWORD *)(v12 + 432))
    WebCore::DocumentLoader::unregisterReservedServiceWorkerClient(v4);
  if ((_MergedGlobals_204 & 1) == 0)
    goto LABEL_193;
  v27 = qword_1ECE83790;
  if (qword_1ECE83790)
  {
    v28 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(*(_QWORD *)(v4 + 3472), *(_QWORD *)(v4 + 3480), *(_QWORD *)(v4 + 3488));
    v29 = *(_DWORD *)(v27 - 4);
    if (!v28)
      v28 = (uint64_t *)(v27 + 48 * v29);
    if ((uint64_t *)(v27 + 48 * v29) != v28)
    {
      *v28 = 1;
      v28[1] = 0;
      v28[2] = -1;
      ++*(_DWORD *)(v27 - 16);
      v30 = qword_1ECE83790 ? *(_DWORD *)(qword_1ECE83790 - 12) - 1 : -1;
      *(_DWORD *)(qword_1ECE83790 - 12) = v30;
      if (qword_1ECE83790)
      {
        v31 = *(_DWORD *)(qword_1ECE83790 - 4);
        if (6 * *(_DWORD *)(qword_1ECE83790 - 12) < v31 && v31 >= 9)
          WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebCore::DocumentLoader *,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::DocumentLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v31 >> 1);
      }
    }
  }
  while (1)
  {
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
LABEL_53:
    v32 = *(_QWORD *)(v4 + 16);
    if (!*(_BYTE *)(v4 + 3541))
      goto LABEL_54;
    if (v32 && (v105 = *(_QWORD *)(v32 + 8)) != 0)
      v106 = *(WebCore::FrameLoader **)(v105 + 280);
    else
      v106 = 0;
    this = WebCore::FrameLoader::isReplacing(v106);
    if ((this & 1) == 0)
    {
      v32 = *(_QWORD *)(v4 + 16);
LABEL_54:
      if (v32 && (v33 = *(_QWORD *)(v32 + 8)) != 0)
        v34 = *(WebCore::FrameLoader **)(v33 + 280);
      else
        v34 = 0;
      this = (uint64_t)WebCore::FrameLoader::receivedFirstData(v34);
    }
    if (!*(_BYTE *)(v4 + 3548))
    {
      v36 = *(_QWORD *)(v4 + 88);
      if (!v36 || !*(_DWORD *)(v36 - 12))
      {
        v59 = *(_QWORD *)(v4 + 104);
        if (!v59 || !*(_DWORD *)(v59 - 12))
          return this;
      }
    }
    v37 = *(WebCore::LocalDOMWindow **)(v12 + 696);
    if (v37)
    {
      WebCore::LocalDOMWindow::prewarmLocalStorageIfNecessary(*(WebCore::LocalDOMWindow **)(v12 + 696), v35);
      v38 = *(_QWORD *)(v4 + 80);
      if (v38)
      {
        if (*(_QWORD *)(v38 + 8))
        {
          v39 = *(_QWORD *)(v4 + 1384);
          v41 = WebCore::LocalDOMWindow::performance(v37);
          v42 = *(_QWORD *)(v4 + 80);
          if (v42)
            v43 = *(_QWORD *)(v42 + 8);
          else
            v43 = 0;
          if (v39)
          {
            v2 = (__int128 *)(v39 + 8);
          }
          else
          {
            v2 = &WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
            {
              dword_1EE2F9230 = 0;
              xmmword_1EE2F9210 = 0u;
              unk_1EE2F9220 = 0u;
              xmmword_1EE2F91F0 = 0u;
              *(_OWORD *)&qword_1EE2F9200 = 0u;
              WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
              *(_OWORD *)&qword_1EE2F91E0 = 0u;
              qword_1EE2F9238 = -1;
              unk_1EE2F9240 = -1;
              qword_1EE2F9248 = 0;
            }
          }
          v44 = (__int128 *)(v12 + 2248);
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v12 + 192), v40);
          v46 = v45;
          v47 = *(unsigned __int8 *)(v4 + 2500);
          v48 = WTF::fastMalloc((WTF *)0x180);
          WebCore::PerformanceNavigationTiming::PerformanceNavigationTiming(v48, v43, (__int128 *)(v4 + 2728), (uint64_t)v2, v44, v46, v47, *(double *)(v41 + 168));
          v49 = *(_DWORD **)(v41 + 176);
          *(_QWORD *)(v41 + 176) = v48;
          if (v49)
          {
            if (v49[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
            else
              --v49[2];
          }
        }
      }
    }
    v109[0] = 0;
    v50 = *(_QWORD *)(v4 + 1624);
    if (v50)
    {
      v99 = (WTF::StringImpl **)(v4 + 1624);
    }
    else
    {
      WebCore::ResourceResponse::platformLazyInit(v4 + 1272, 1);
      v51 = *(WTF::StringImpl **)(v4 + 1328);
      if (v51)
        *(_DWORD *)v51 += 2;
      v52 = v109[0];
      v109[0] = v51;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
          WTF::StringImpl::destroy(v52, a2);
        else
          *(_DWORD *)v52 -= 2;
      }
      v53 = *(_QWORD *)(v4 + 2664);
      if (!v53 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53))
        goto LABEL_79;
      v99 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v4 + 2664) + 16) + 328);
    }
    WTF::String::operator=((uint64_t *)v109, v99);
LABEL_79:
    this = (uint64_t)v109[0];
    if (v109[0])
      *(_DWORD *)v109[0] += 2;
    v54 = *(WTF::StringImpl **)(v4 + 128);
    *(_QWORD *)(v4 + 128) = this;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, a2);
        this = (uint64_t)v109[0];
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    *(_BYTE *)(v4 + 154) = v50 != 0;
    v109[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
      else
        *(_DWORD *)this -= 2;
    }
LABEL_87:
    v55 = *(_DWORD *)(v4 + 3348);
    if (v55 || *(_DWORD *)(v4 + 3372))
    {
      v85 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) + 296);
      v86 = (WebCore::ExtensionStyleSheets *)*((_QWORD *)v85 + 167);
      if (!v86)
      {
        v86 = (WebCore::ExtensionStyleSheets *)WebCore::Document::ensureExtensionStyleSheets(v85);
        v55 = *(_DWORD *)(v4 + 3348);
      }
      if (v55)
      {
        v87 = *(unsigned int *)(v4 + 3344);
        if ((_DWORD)v87)
        {
          v88 = 16 * v87;
          v89 = *(WTF::StringImpl ***)(v4 + 3336);
          while (!*v89)
          {
            v89 += 2;
            v88 -= 16;
            if (!v88)
              goto LABEL_141;
          }
        }
        else
        {
          v89 = *(WTF::StringImpl ***)(v4 + 3336);
        }
        v100 = *(_QWORD *)(v4 + 3336) + 16 * v87;
LABEL_169:
        if (v89 != (WTF::StringImpl **)v100)
        {
          WebCore::ExtensionStyleSheets::maybeAddContentExtensionSheet(v86, v89, v89[1]);
          while (1)
          {
            v89 += 2;
            if (v89 == (WTF::StringImpl **)v100)
              break;
            if (*v89)
              goto LABEL_169;
          }
        }
      }
LABEL_141:
      v2 = (__int128 *)(v4 + 3360);
      if (*(_DWORD *)(v4 + 3372))
      {
        v90 = *(unsigned int *)(v4 + 3368);
        if ((_DWORD)v90)
        {
          v91 = 24 * v90;
          v92 = *(_QWORD *)(v4 + 3360);
          while (!*(_QWORD *)v92)
          {
            v92 += 24;
            v91 -= 24;
            if (!v91)
              goto LABEL_146;
          }
        }
        else
        {
          v92 = *(_QWORD *)(v4 + 3360);
        }
        v101 = *(_QWORD *)(v4 + 3360) + 24 * v90;
LABEL_176:
        if (v92 != v101)
        {
          v102 = *(unsigned int *)(v92 + 20);
          if ((_DWORD)v102)
          {
            v103 = *(int **)(v92 + 8);
            v104 = 16 * v102;
            do
            {
              WebCore::ExtensionStyleSheets::addDisplayNoneSelector((WTF **)v86, (WTF::StringImpl **)v92, (const WTF::String *)v103, v103[2]);
              v103 += 4;
              v104 -= 16;
            }
            while (v104);
          }
          while (1)
          {
            v92 += 24;
            if (v92 == v101)
              break;
            if (*(_QWORD *)v92)
              goto LABEL_176;
          }
        }
      }
LABEL_146:
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::clear(v4 + 3336, a2);
      this = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
      {
        v93 = (WTF::StringImpl *)*(unsigned int *)(v4 + 3368);
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v4 + 3368) = 0;
        *(_QWORD *)(v4 + 3373) = 0;
        this = WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<std::pair<WTF::String,unsigned int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable((WTF *)this, v93);
      }
    }
    if (*(_BYTE *)(v4 + 152) == 2)
      return this;
    if (!*(_BYTE *)(v4 + 152))
    {
      __break(0xC471u);
      JUMPOUT(0x19434A734);
    }
    v12 = *(_QWORD *)(v4 + 144);
    if (v12)
      ++*(_DWORD *)(v12 + 8);
    if (!*((_DWORD *)a2 + 5))
      break;
    v56 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v57 = *(unsigned int *)(v56 + 24);
    if ((_DWORD)v57 != -1)
    {
      v109[0] = (WTF::StringImpl *)&v107;
      v58 = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v57])(v109, v56 + 8);
      goto LABEL_96;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_193:
    qword_1ECE83790 = 0;
    _MergedGlobals_204 = 1;
  }
  v58 = 0;
LABEL_96:
  this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, v4 + 112, v58, *((_QWORD *)a2 + 6));
  if (*(_DWORD *)(v12 + 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  --*(_DWORD *)(v12 + 8);
  return this;
}

uint64_t WebCore::DocumentWriter::decoder(WebCore::DocumentWriter *this)
{
  const char **v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  PAL *v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WebCore::SecurityOrigin *v24;
  WebCore::SecurityOrigin *v25;
  WTF::StringImpl *v26;
  const WebCore::SecurityOrigin *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::SecurityOrigin *v32;
  WebCore::SecurityOrigin *v33;
  WTF::StringImpl *v34;
  const WebCore::SecurityOrigin *v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  WTF *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  BOOL v58;
  __int16 v59;
  int v60;
  WTF *v61;
  WebCore::HTMLMetaCharsetParser *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  WTF *v66;
  WebCore::HTMLMetaCharsetParser *v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  WTF *v71;
  WebCore::HTMLMetaCharsetParser *v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  WTF *v76;
  void *v77;
  uint64_t *v78;
  WTF *v79;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  WTF *v83;
  const char *v84;
  uint64_t v85;
  __int16 v86;
  const char *v87;
  uint64_t v88;

  if (*((_QWORD *)this + 3))
    return *((_QWORD *)this + 3);
  v2 = &v84;
  if (*(_QWORD *)this)
    v3 = *(_QWORD **)(*(_QWORD *)this + 8);
  else
    v3 = 0;
  v4 = (unsigned int *)(v3 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(_QWORD *)(v3[17] + 344);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = *(unsigned int *)(v6 + 4) | ((unint64_t)((*(_DWORD *)(v6 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v7 = 0;
    v8 = 0x100000000;
  }
  v83 = (WTF *)&off_1E31F4A18;
  v9 = (const char *)PAL::atomCanonicalTextEncodingName(v7, (const char *)v8);
  v11 = v10;
  v84 = v9;
  v85 = v10;
  v87 = v9;
  v88 = v10;
  if (v10 && PAL::nonBackslashEncodings && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v87))
    {
      v12 = 165;
    }
    else
    {
      v12 = 92;
    }
  }
  else
  {
    v12 = 92;
  }
  v86 = v12;
  v13 = *(_QWORD *)(v3[17] + 704);
  v14 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)v14 = 1;
  v16 = (PAL *)WebCore::TextResourceDecoder::determineContentType((WebCore::DocumentWriter *)((char *)this + 8), v15);
  *(_DWORD *)(v14 + 4) = (_DWORD)v16;
  if ((_DWORD)v16 == 2)
  {
    v78 = PAL::UTF8Encoding(v16);
  }
  else
  {
    if (v11)
      goto LABEL_17;
    v78 = PAL::Latin1Encoding(v16);
  }
  v2 = (const char **)(v78 + 1);
LABEL_17:
  *(_QWORD *)(v14 + 8) = &off_1E31F4A18;
  v18 = *(_OWORD *)v2;
  *(_WORD *)(v14 + 32) = *((_WORD *)v2 + 8);
  *(_OWORD *)(v14 + 16) = v18;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 85) = 0;
  *(_BYTE *)(v14 + 93) = (v13 & 0x40) != 0;
  *(_BYTE *)(v14 + 94) = 0;
  ++*(_DWORD *)v14;
  v19 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v14;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v61 = *(WTF **)(v19 + 72);
      if (v61)
      {
        *(_QWORD *)(v19 + 72) = 0;
        *(_DWORD *)(v19 + 80) = 0;
        WTF::fastFree(v61, v17);
      }
      v62 = *(WebCore::HTMLMetaCharsetParser **)(v19 + 48);
      *(_QWORD *)(v19 + 48) = 0;
      if (v62)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v62, (WTF::StringImpl *)v17);
        WTF::fastFree(v63, v64);
      }
      v65 = *(_QWORD *)(v19 + 40);
      *(_QWORD *)(v19 + 40) = 0;
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      WTF::fastFree((WTF *)v19, v17);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  v20 = v3[7];
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
      goto LABEL_22;
    if (!*(_BYTE *)(v21 + 144))
    {
      v52 = (unsigned int *)(v21 + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
      v22 = 0;
      goto LABEL_23;
    }
  }
  v21 = 0;
LABEL_22:
  v22 = 1;
LABEL_23:
  v23 = v3[37];
  if (v23)
    LODWORD(v23) = (*(unsigned __int16 *)(v23 + 3358) >> 7) & 1;
  if (((v22 | v23) & 1) == 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v21 + 296) + 192), (WTF::StringImpl *)v17);
    v25 = v24;
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3[37] + 192), v26);
    if (WebCore::SecurityOrigin::isSameOriginDomain(v25, v27))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(v21 + 296) + 1744);
      if (v28)
      {
        v29 = (*(_DWORD *)v28)++;
        if (*(_DWORD *)(v28 + 56) == 1)
          *(_QWORD *)(v14 + 64) = *(_QWORD *)(v28 + 16);
        if (v29)
        {
          *(_DWORD *)v28 = v29;
        }
        else
        {
          v71 = *(WTF **)(v28 + 72);
          if (v71)
          {
            *(_QWORD *)(v28 + 72) = 0;
            *(_DWORD *)(v28 + 80) = 0;
            WTF::fastFree(v71, v17);
          }
          v72 = *(WebCore::HTMLMetaCharsetParser **)(v28 + 48);
          *(_QWORD *)(v28 + 48) = 0;
          if (v72)
          {
            WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v72, (WTF::StringImpl *)v17);
            WTF::fastFree(v73, v74);
          }
          v75 = *(_QWORD *)(v28 + 40);
          *(_QWORD *)(v28 + 40) = 0;
          if (v75)
            (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
          WTF::fastFree((WTF *)v28, v17);
        }
      }
    }
  }
  v30 = *((_QWORD *)this + 2);
  if (v30 && (v54 = *(unsigned int *)(v30 + 4), (_DWORD)v54))
  {
    v55 = *(_QWORD *)(v30 + 8);
    v56 = (const char *)(v54 | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32));
    v83 = (WTF *)&off_1E31F4A18;
    v84 = (const char *)PAL::atomCanonicalTextEncodingName(v55, v56);
    v85 = v57;
    v87 = v84;
    v88 = v57;
    if (v57)
      v58 = PAL::nonBackslashEncodings == 0;
    else
      v58 = 1;
    if (v58 || !*(_QWORD *)PAL::nonBackslashEncodings)
    {
      v59 = 92;
    }
    else if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, &v87))
    {
      v59 = 165;
    }
    else
    {
      v59 = 92;
    }
    v86 = v59;
    if (*((_BYTE *)this + 42))
      v60 = 6;
    else
      v60 = 5;
    WebCore::TextResourceDecoder::setEncoding((_BYTE *)v14, (PAL::TextEncoding *)&v83, v60);
  }
  else
  {
    v31 = v3[37];
    if (v31)
      LODWORD(v31) = (*(unsigned __int16 *)(v31 + 3358) >> 7) & 1;
    if (((v22 | v31) & 1) == 0)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v21 + 296) + 192), (WTF::StringImpl *)v17);
      v33 = v32;
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3[37] + 192), v34);
      if (WebCore::SecurityOrigin::isSameOriginDomain(v33, v35))
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v21 + 296) + 1744);
        if (v37)
        {
          v38 = (*(_DWORD *)v37)++;
          v39 = *(_QWORD *)(v37 + 16);
          v40 = *(_QWORD *)(v37 + 24);
          v41 = *(_WORD *)(v37 + 32);
          if (v38)
          {
            *(_DWORD *)v37 = v38;
          }
          else
          {
            WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v37, v36);
            WTF::fastFree(v76, v77);
          }
          if (!*(_BYTE *)(v14 + 94) && v40)
          {
            *(_QWORD *)(v14 + 16) = v39;
            *(_QWORD *)(v14 + 24) = v40;
            *(_WORD *)(v14 + 32) = v41;
            v42 = *(_QWORD *)(v14 + 40);
            *(_QWORD *)(v14 + 40) = 0;
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
            *(_DWORD *)(v14 + 56) = 7;
          }
        }
      }
    }
  }
  v43 = v3[37];
  if (v43)
    *(_DWORD *)(v43 + 24) += 2;
  v83 = (WTF *)v14;
  WebCore::Document::setDecoder(v43, (uint64_t *)&v83);
  v45 = v83;
  if (v83)
  {
    if (*(_DWORD *)v83 == 1)
    {
      v66 = (WTF *)*((_QWORD *)v83 + 9);
      if (v66)
      {
        *((_QWORD *)v83 + 9) = 0;
        *((_DWORD *)v45 + 20) = 0;
        WTF::fastFree(v66, v44);
      }
      v67 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v45 + 6);
      *((_QWORD *)v45 + 6) = 0;
      if (v67)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v67, (WTF::StringImpl *)v44);
        WTF::fastFree(v68, v69);
      }
      v70 = *((_QWORD *)v45 + 5);
      *((_QWORD *)v45 + 5) = 0;
      if (v70)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      WTF::fastFree(v45, v44);
    }
    else
    {
      --*(_DWORD *)v83;
    }
  }
  if (v43)
  {
    if (*(_DWORD *)(v43 + 24) == 2)
    {
      if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v43, v44);
    }
    else
    {
      *(_DWORD *)(v43 + 24) -= 2;
    }
  }
  if ((v22 & 1) == 0)
  {
    v46 = (unsigned int *)(v21 + 8);
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      v79 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v79 = off_1E31FE290;
      *((_QWORD *)v79 + 1) = v46;
      v83 = v79;
      WTF::ensureOnMainThread();
      v80 = v83;
      v83 = 0;
      if (v80)
        (*(void (**)(WTF *))(*(_QWORD *)v80 + 8))(v80);
    }
  }
  do
  {
    v49 = __ldaxr(v4);
    v50 = v49 - 1;
  }
  while (__stlxr(v50, v4));
  if (!v50)
  {
    atomic_store(1u, v4);
    v81 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v81 = off_1E31FE290;
    *((_QWORD *)v81 + 1) = v4;
    v83 = v81;
    WTF::ensureOnMainThread();
    v82 = v83;
    v83 = 0;
    if (v82)
      (*(void (**)(WTF *))(*(_QWORD *)v82 + 8))(v82);
  }
  return *((_QWORD *)this + 3);
}

void WebCore::HTMLDocumentParser::append(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _WORD *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  _QWORD *v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  WTF::StringImpl *v27;
  _QWORD *v28;
  _BOOL4 v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  _WORD *v47;
  __int16 v48;
  __int128 v49;
  WTF *v50[2];
  char v51;
  _QWORD v52[2];
  uint64_t (*v53)(WebCore::SegmentedString *__hidden);
  uint64_t v54;
  uint64_t (*v55)(WebCore::SegmentedString *__hidden);
  uint64_t v56;

  if (*(unsigned __int8 *)(a1 + 12) > 1u)
    return;
  ++*(_DWORD *)(a1 + 8);
  v5 = *a2;
  *a2 = 0;
  v6 = *(_QWORD *)(a1 + 3288);
  if (v6)
  {
    if (*(_DWORD *)(a1 + 132))
      goto LABEL_63;
    v31 = *(_QWORD **)(a1 + 3280);
    if (v31[2])
      goto LABEL_79;
    if (v31[37])
      v32 = 1;
    else
      v32 = v31[39] != 0;
    v33 = *(_QWORD *)(a1 + 3272);
    if (v33)
      LODWORD(v33) = *(_QWORD *)(v33 + 16) != 0;
    if (((v32 | v33) & 1) != 0)
    {
LABEL_63:
      WebCore::SegmentedString::SegmentedString((uint64_t)&v45, (const WTF::String *)v5);
      WebCore::SegmentedString::append((WebCore::SegmentedString *)(v6 + 184), (const WebCore::SegmentedString *)&v45);
      WebCore::SegmentedString::~SegmentedString((WebCore::SegmentedString *)&v45, v27);
      v28 = *(_QWORD **)(a1 + 3280);
      if (!v28[2])
      {
        if (v28[37])
          v29 = 1;
        else
          v29 = v28[39] != 0;
        v30 = *(_QWORD *)(a1 + 3272);
        if (v30)
          LODWORD(v30) = *(_QWORD *)(v30 + 16) != 0;
        if ((v29 | v30) == 1)
          WebCore::HTMLPreloadScanner::scan(*(WebCore::TokenPreloadScanner **)(a1 + 3288), *(_QWORD *)(a1 + 3320), *(_WORD **)(*(_QWORD *)(a1 + 16) + 8));
      }
    }
    else
    {
LABEL_79:
      std::unique_ptr<WebCore::HTMLPreloadScanner>::operator=[abi:sn180100]((WebCore::HTMLPreloadScanner **)(a1 + 3288), a2);
    }
  }
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    v45 = (WTF::StringImpl *)v5;
    v7 = *(_DWORD *)(v5 + 4);
    LODWORD(v46) = v7;
    HIDWORD(v46) = v7;
    v47 = 0;
    v48 = 257;
    if (v7)
    {
      v8 = (*(_DWORD *)(v5 + 16) >> 2) & 1;
      LOBYTE(v48) = (*(_DWORD *)(v5 + 16) & 4) != 0;
      v9 = *(_WORD **)(v5 + 8);
      v47 = v9;
      goto LABEL_6;
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v7 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 257;
  }
  v8 = 1;
LABEL_6:
  v51 = 0;
  *(_OWORD *)v50 = 0u;
  v49 = 0u;
  memset(v52, 0, 15);
  v53 = WebCore::SegmentedString::advanceEmpty;
  v54 = 0;
  v55 = WebCore::SegmentedString::advanceEmpty;
  v56 = 0;
  if (!v7)
    goto LABEL_10;
  if (v8)
  {
    LOWORD(v52[0]) = *(unsigned __int8 *)v9;
    if (v7 >= 2)
    {
      BYTE6(v52[1]) = 3;
      goto LABEL_10;
    }
    goto LABEL_60;
  }
  LOWORD(v52[0]) = *v9;
  if (v7 <= 1)
  {
LABEL_60:
    BYTE6(v52[1]) = 0;
    v53 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
    v54 = 0;
    v26 = (uint64_t (*)(uint64_t))WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    goto LABEL_61;
  }
  BYTE6(v52[1]) = 0;
  v53 = (uint64_t (*)(WebCore::SegmentedString *__hidden))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
  v54 = 0;
  v26 = WebCore::SegmentedString::advanceAndUpdateLineNumber16;
LABEL_61:
  v55 = (uint64_t (*)(WebCore::SegmentedString *__hidden))v26;
  v56 = 0;
LABEL_10:
  v10 = *(_QWORD *)(a1 + 240);
  WebCore::SegmentedString::appendSubstring(v10, (uint64_t *)&v45);
  v12 = *((_QWORD *)&v49 + 1);
  v13 = v49;
  if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
  {
LABEL_11:
    v14 = v50[0];
    goto LABEL_12;
  }
  v34 = v10 + 32;
  do
  {
    WTF::Deque<WebCore::SegmentedString::Substring,0ul>::append(v34, (uint64_t *)v50[0] + 4 * v13);
    v13 += LODWORD(v50[1]) + 1;
    do
      v13 -= LODWORD(v50[1]);
    while (v13 >= LODWORD(v50[1]));
  }
  while (v12 != v13);
  v35 = v49;
  v14 = v50[0];
  if ((unint64_t)v49 > *((_QWORD *)&v49 + 1))
  {
    v39 = (WTF::StringImpl **)v50[0];
    if (*((_QWORD *)&v49 + 1))
    {
      v43 = 32 * *((_QWORD *)&v49 + 1);
      do
      {
        v44 = *v39;
        *v39 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v11);
          else
            *(_DWORD *)v44 -= 2;
        }
        v39 += 4;
        v43 -= 32;
      }
      while (v43);
      v39 = (WTF::StringImpl **)v50[0];
      v35 = v49;
    }
    if (v35 != LODWORD(v50[1]))
    {
      v40 = &v39[4 * v35];
      v41 = 32 * LODWORD(v50[1]) - 32 * v35;
      do
      {
        v42 = *v40;
        *v40 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v11);
          else
            *(_DWORD *)v42 -= 2;
        }
        v40 += 4;
        v41 -= 32;
      }
      while (v41);
    }
    goto LABEL_11;
  }
  if ((_QWORD)v49 != *((_QWORD *)&v49 + 1))
  {
    v36 = (WTF::StringImpl **)((char *)v50[0] + 32 * v49);
    v37 = 32 * *((_QWORD *)&v49 + 1) - 32 * v49;
    do
    {
      v38 = *v36;
      *v36 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v11);
        else
          *(_DWORD *)v38 -= 2;
      }
      v36 += 4;
      v37 -= 32;
    }
    while (v37);
    goto LABEL_11;
  }
LABEL_12:
  if (v14)
  {
    v50[0] = 0;
    LODWORD(v50[1]) = 0;
    WTF::fastFree(v14, v11);
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*(_DWORD *)(a1 + 3332))
    goto LABEL_29;
  v16 = *(unsigned __int8 *)(a1 + 12);
  if (v16 <= 1)
  {
    v17 = *(_QWORD **)(a1 + 3280);
    if (!v17[2])
    {
      if (v17[37])
        v18 = 1;
      else
        v18 = v17[39] != 0;
      v19 = *(_QWORD *)(a1 + 3272);
      if (v19)
        LODWORD(v19) = *(_QWORD *)(v19 + 16) != 0;
      if (((v18 | v19) & 1) != 0)
        goto LABEL_28;
    }
    v20 = *(_QWORD *)(a1 + 3304);
    if (v20)
    {
      if (*(_BYTE *)(v20 + 72)
        || (*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || *(_BYTE *)(v20 + 73))
      {
        goto LABEL_28;
      }
    }
    WebCore::HTMLDocumentParser::pumpTokenizer(a1, a3);
    v16 = *(unsigned __int8 *)(a1 + 12);
  }
  if (v16 != 3)
  {
LABEL_28:
    if (*(_BYTE *)(a1 + 3328) && !*(_DWORD *)(a1 + 3332))
    {
      v21 = *(_QWORD **)(a1 + 3280);
      if (v21[2])
        goto LABEL_46;
      if (v21[37])
        v22 = 1;
      else
        v22 = v21[39] != 0;
      v23 = *(_QWORD *)(a1 + 3272);
      if (v23)
        LODWORD(v23) = *(_QWORD *)(v23 + 16) != 0;
      if (((v22 | v23) & 1) == 0)
      {
LABEL_46:
        v24 = *(_QWORD *)(a1 + 3304);
        if (!v24
          || !*(_BYTE *)(v24 + 72)
          && ((*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFLL) == 0
           || *(double *)((*(_QWORD *)(v24 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          && !*(_BYTE *)(v24 + 73))
        {
          v25 = *(_QWORD *)(a1 + 3272);
          if (!v25 || !*(_DWORD *)(v25 + 56))
          {
            *(_BYTE *)(a1 + 3328) = 0;
            WebCore::HTMLDocumentParser::prepareToStopParsing((WebCore::HTMLDocumentParser *)a1, v11);
          }
        }
      }
    }
  }
LABEL_29:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v5, v11);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (*(_DWORD *)(a1 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 8);
}

uint64_t WebCore::SegmentedString::appendSubstring(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _WORD *v6;
  unsigned int v7;
  char v8;
  uint64_t (*v9)(WebCore::SegmentedString *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if (!*((_DWORD *)a2 + 3))
    return result;
  v3 = result;
  if (!*(_DWORD *)(result + 12))
  {
    *(_DWORD *)(result + 68) += *(_DWORD *)(result + 8);
    v4 = *a2;
    *a2 = 0;
    result = *(_QWORD *)result;
    *(_QWORD *)v3 = v4;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v5 = *(_OWORD *)(a2 + 1);
    *(_WORD *)(v3 + 24) = *((_WORD *)a2 + 12);
    *(_OWORD *)(v3 + 8) = v5;
    v6 = *(_WORD **)(v3 + 16);
    if (*(_BYTE *)(v3 + 24))
    {
      *(_WORD *)(v3 + 66) = *(unsigned __int8 *)v6;
      v7 = *(_DWORD *)(v3 + 12);
      if (v7 >= 2)
      {
        if (*(_BYTE *)(v3 + 25))
          v8 = 3;
        else
          v8 = 2;
        *(_BYTE *)(v3 + 80) = v8;
        return result;
      }
    }
    else
    {
      *(_WORD *)(v3 + 66) = *v6;
      v7 = *(_DWORD *)(v3 + 12);
      if (v7 > 1)
      {
        *(_BYTE *)(v3 + 80) = 0;
        v9 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
        *(_QWORD *)(v3 + 88) = WebCore::SegmentedString::advanceWithoutUpdatingLineNumber16;
        *(_QWORD *)(v3 + 96) = 0;
        if (*(_BYTE *)(v3 + 25))
          v9 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advanceAndUpdateLineNumber16;
        goto LABEL_20;
      }
    }
    *(_BYTE *)(v3 + 80) = 0;
    if (v7)
    {
      v9 = (uint64_t (*)(WebCore::SegmentedString *))WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(v3 + 88) = WebCore::SegmentedString::advancePastSingleCharacterSubstringWithoutUpdatingLineNumber;
      *(_QWORD *)(v3 + 96) = 0;
      if (*(_BYTE *)(v3 + 25))
        v9 = WebCore::SegmentedString::advancePastSingleCharacterSubstring;
    }
    else
    {
      v9 = WebCore::SegmentedString::advanceEmpty;
      *(_QWORD *)(v3 + 88) = WebCore::SegmentedString::advanceEmpty;
      *(_QWORD *)(v3 + 96) = 0;
    }
LABEL_20:
    *(_QWORD *)(v3 + 104) = v9;
    *(_QWORD *)(v3 + 112) = 0;
    return result;
  }
  v11 = *(_QWORD *)(result + 32);
  v10 = *(_QWORD *)(result + 40);
  result += 32;
  if (v11)
  {
    if (v10 + 1 != v11)
      goto LABEL_25;
  }
  else
  {
    v12 = *(unsigned int *)(v3 + 56);
    if (v10)
    {
      if (v10 != v12 - 1)
        goto LABEL_25;
    }
    else if ((_DWORD)v12)
    {
      v10 = 0;
      goto LABEL_25;
    }
  }
  result = WTF::Deque<WebCore::SegmentedString::Substring,0ul>::expandCapacity(result);
  v10 = *(_QWORD *)(v3 + 40);
LABEL_25:
  v13 = *(_QWORD *)(v3 + 48) + 32 * v10;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)v13 = v14;
  v15 = *(_OWORD *)(a2 + 1);
  *(_WORD *)(v13 + 24) = *((_WORD *)a2 + 12);
  *(_OWORD *)(v13 + 8) = v15;
  v16 = *(_QWORD *)(v3 + 40);
  if (v16 == *(unsigned int *)(v3 + 56) - 1)
    v17 = 0;
  else
    v17 = v16 + 1;
  *(_QWORD *)(v3 + 40) = v17;
  return result;
}

void WebCore::HTMLDocumentParser::append(uint64_t a1, uint64_t *a2)
{
  WebCore::HTMLDocumentParser::append(a1, a2, 0);
}

unsigned int *WebCore::DocumentWriter::reportDataReceived(unsigned int *this, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  BOOL v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 41))
  {
    *((_BYTE *)this + 41) = 1;
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 296);
    *(_DWORD *)(v2 + 24) += 2;
    if (PAL::didExtendTextCodecMaps != 1)
      goto LABEL_13;
    v3 = *((_QWORD *)this + 3);
    {
      v4 = (const char *)PAL::TextEncoding::usesVisualOrdering(void)const::iso88598;
    }
    else
    {
      v10 = *((_QWORD *)this + 3);
      v8 = PAL::atomCanonicalTextEncodingName(&WebCore::SVGStopElement::SVGStopElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, (PAL *)"ISO-8859-8", a2);
      v3 = v10;
      v4 = (const char *)v8;
      PAL::TextEncoding::usesVisualOrdering(void)const::iso88598 = (uint64_t)v8;
      *(_QWORD *)algn_1EE2E6DA8 = v9;
    }
    v5 = *(const char **)(v3 + 16);
    if (v5)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (v6)
    {
      if (v5 != v4)
        goto LABEL_13;
    }
    else if (strcmp(v5, v4))
    {
LABEL_13:
      this = (unsigned int *)WebCore::Document::resolveStyle(v2, 1);
      if (*(_DWORD *)(v2 + 24) == 2)
      {
        if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v2, v7);
      }
      else
      {
        *(_DWORD *)(v2 + 24) -= 2;
      }
      return this;
    }
    WebCore::Document::setVisuallyOrdered(v2);
    goto LABEL_13;
  }
  return this;
}

uint64_t WebCore::TextResourceDecoder::determineContentType(WebCore::TextResourceDecoder *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v6 = *(_DWORD *)(v3 + 4);
    if (v6 == 8)
    {
      v9 = *(_QWORD *)(v3 + 8);
      if ((*(_BYTE *)(v3 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v9 & 0xDF) != 0x54
          || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x45
          || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x58
          || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x54
          || (*(_BYTE *)(v9 + 4) & 0xDF) != 0xF
          || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x43
          || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x53)
        {
          goto LABEL_2;
        }
        v10 = *(unsigned __int8 *)(v9 + 7);
      }
      else
      {
        if ((*(_WORD *)v9 & 0xFFDF) != 0x54
          || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x45
          || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x58
          || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x54
          || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0xF
          || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x43
          || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x53)
        {
          goto LABEL_2;
        }
        v10 = *(unsigned __int16 *)(v9 + 14);
      }
      if ((v10 & 0xFFFFFFDF) == 0x53)
        return 3;
      goto LABEL_2;
    }
    if (v6 != 9)
      goto LABEL_2;
    v7 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v7 & 0xDF) != 0x54
        || (*(_BYTE *)(v7 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v7 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v7 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v7 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(v7 + 5) & 0xDF) != 0x48
        || (*(_BYTE *)(v7 + 6) & 0xDF) != 0x54
        || (*(_BYTE *)(v7 + 7) & 0xDF) != 0x4D)
      {
        goto LABEL_2;
      }
      v8 = *(unsigned __int8 *)(v7 + 8);
    }
    else
    {
      if ((*(_WORD *)v7 & 0xFFDF) != 0x54
        || (*(_WORD *)(v7 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v7 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v7 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v7 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(v7 + 10) & 0xFFDF) != 0x48
        || (*(_WORD *)(v7 + 12) & 0xFFDF) != 0x54
        || (*(_WORD *)(v7 + 14) & 0xFFDF) != 0x4D)
      {
        goto LABEL_2;
      }
      v8 = *(unsigned __int16 *)(v7 + 16);
    }
    if ((v8 & 0xFFFFFFDF) == 0x4C)
      return 1;
  }
LABEL_2:
  v4 = 2;
  if ((WebCore::MIMETypeRegistry::isXMLMIMEType(this, a2) & 1) == 0)
  {
    if (MEMORY[0x19AEA53F4](*(_QWORD *)this, "text/xsl", 8))
      return 2;
    else
      return 0;
  }
  return v4;
}

__n128 WebCore::DocumentLoader::documentURL@<Q0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  __n128 result;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  __n128 v17;
  __n128 v18;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)&this[25].n128_i64[1], 1);
  v5 = (WTF::StringImpl *)this[25].n128_u64[1];
  if (v5)
  {
    *(_DWORD *)v5 += 2;
    *(_QWORD *)a2 = v5;
    result = this[26];
    v7 = this[27];
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a2 + 24) = v7;
    if (*((_DWORD *)v5 + 1))
      return result;
    v8 = a2 + 8;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    v8 = a2 + 8;
    result = this[26];
    v18 = this[27];
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a2 + 24) = v18;
  }
  v9 = this[166].n128_u64[1];
  if (v9 && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v9 + 40))(v9))
  {
    WTF::URL::operator=(a2, *(_QWORD *)(this[166].n128_u64[1] + 16) + 16);
    v5 = *(WTF::StringImpl **)a2;
  }
  if (!v5 || !*((_DWORD *)v5 + 1))
  {
    v10 = (WTF::StringImpl **)&this[54].n128_u64[1];
    if ((this[66].n128_u8[0] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&this[54].n128_i8[8]);
      this[66].n128_u8[0] |= 1u;
    }
    v11 = *v10;
    if (*v10)
      *(_DWORD *)v11 += 2;
    v12 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v4);
      else
        *(_DWORD *)v12 -= 2;
      v11 = *(WTF::StringImpl **)a2;
    }
    result = this[55];
    v13 = this[56];
    *(__n128 *)v8 = result;
    *(__n128 *)(v8 + 16) = v13;
    if (!v11 || !*((_DWORD *)v11 + 1))
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)&this[79].n128_i64[1], 1);
      v15 = (_DWORD *)this[79].n128_u64[1];
      if (v15)
        *v15 += 2;
      v16 = *(WTF::StringImpl **)a2;
      *(_QWORD *)a2 = v15;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v14);
        else
          *(_DWORD *)v16 -= 2;
      }
      result = this[80];
      v17 = this[81];
      *(__n128 *)v8 = result;
      *(__n128 *)(v8 + 16) = v17;
    }
  }
  return result;
}

uint64_t WebCore::Document::setDecoder(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  WebCore::HTMLMetaCharsetParser *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(result + 1744);
  *(_QWORD *)(result + 1744) = v2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v4 = *(WTF **)(v3 + 72);
      if (v4)
      {
        *(_QWORD *)(v3 + 72) = 0;
        *(_DWORD *)(v3 + 80) = 0;
        WTF::fastFree(v4, a2);
      }
      v5 = *(WebCore::HTMLMetaCharsetParser **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      if (v5)
      {
        WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v5, (WTF::StringImpl *)a2);
        WTF::fastFree(v6, v7);
      }
      v8 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      return WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return result;
}

uint64_t WebCore::DocumentLoader::maybeFinishLoadingMultipartContent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::FrameLoader *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::FrameLoader *v7;
  WebCore::FragmentedSharedBuffer *v8;
  void *v9;
  void *v10;
  WebCore::FragmentedSharedBuffer *v11;
  WebCore::SharedBuffer *v12;

  if (*(_BYTE *)(this + 3541))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 16);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0)
      v4 = *(WebCore::FrameLoader **)(v3 + 280);
    else
      v4 = 0;
    this = WebCore::FrameLoader::isReplacing(v4);
    if ((_DWORD)this)
    {
      v5 = *(_QWORD *)(v1 + 16);
      if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
        v7 = *(WebCore::FrameLoader **)(v6 + 280);
      else
        v7 = 0;
      WebCore::FrameLoader::setupForReplace(v7);
      *(_BYTE *)(v1 + 3537) = 0;
      WebCore::DocumentLoader::mainResourceData((WebCore::DocumentLoader *)v1, &v11);
      v8 = v11;
      WebCore::FragmentedSharedBuffer::makeContiguous(v11, &v12);
      WebCore::DocumentLoader::commitLoad((WebCore::DocumentLoader *)v1, v12);
      this = (uint64_t)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v9);
      if (v8)
        return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v8, v10);
    }
  }
  return this;
}

BOOL WebCore::DocumentLoader::maybeCreateArchive(WebCore::DocumentLoader *this)
{
  WTF::StringImpl ***v2;
  WebCore::FragmentedSharedBuffer *v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  WTF *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  char v34;

  v2 = (WTF::StringImpl ***)((char *)this + 1272);
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
  v3 = (WebCore::FragmentedSharedBuffer *)*((_QWORD *)this + 45);
  v4 = WTF::RefPtr<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::unspecifiedBoolTypeInstance;
  if (!v3)
    v4 = 0;
  if (v4)
  {
    WebCore::FragmentedSharedBuffer::copy(v3, (uint64_t *)&v33);
    v7 = (uint64_t)v33;
    v33 = 0;
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v33, v17);
  }
  else
  {
    v5 = *((_QWORD *)this + 10);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v7 = *(_QWORD *)(v6 + 392);
      if (v7)
      {
        do
          v8 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v8 + 1, (unsigned int *)v7));
      }
    }
    else
    {
      v7 = 0;
    }
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v2, 1);
  WebCore::ArchiveFactory::create(v2, (const WTF::URL *)v7, (WebCore::DocumentLoader *)((char *)this + 1312), &v33);
  v10 = (uint64_t)v33;
  v33 = 0;
  v11 = (_DWORD *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = v10;
  if (v11)
  {
    if (v11[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      v16 = v33;
      v33 = 0;
      if (v16)
      {
        if (v16[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        else
          --v16[2];
      }
    }
    else
    {
      --v11[2];
      v33 = 0;
    }
  }
  if (v7)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v7);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v7));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v7);
      v22 = *(unsigned int *)(v7 + 20);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(v7 + 8);
        v24 = v23 + 16 * v22;
        do
        {
          v25 = *(unsigned int **)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v31 = v23;
              v32 = v24;
              atomic_store(1u, v25);
              v30 = v25[6];
              if ((_DWORD)v30 != -1)
                ((void (*)(char *, unsigned int *))off_1E33F3740[v30])(&v34, v25 + 2);
              v25[6] = -1;
              WTF::fastFree((WTF *)v25, v9);
              v23 = v31;
              v24 = v32;
            }
          }
          v23 += 16;
        }
        while (v23 != v24);
      }
      v28 = *(WTF **)(v7 + 8);
      if ((WTF *)(v7 + 24) != v28 && v28 != 0)
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        WTF::fastFree(v28, v9);
      }
      WTF::fastFree((WTF *)v7, v9);
    }
  }
  v14 = *((_QWORD *)this + 333);
  if (v14)
  {
    WebCore::DocumentLoader::addAllArchiveResources(this, *((WebCore::Archive **)this + 333));
    v18 = *(_QWORD *)(*((_QWORD *)this + 333) + 16);
    v20 = (WTF *)WebCore::SubstituteResource::data((WebCore::SubstituteResource *)v18, v19);
    WebCore::FragmentedSharedBuffer::makeContiguous(v20, &v33);
    WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::operator=<WebCore::SharedBuffer>((uint64_t *)this + 334, (uint64_t *)&v33);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v33, v21);
    WebCore::Attribute::setValue((WebCore::DocumentLoader *)((char *)this + 112), (const WTF::AtomString *)(v18 + 320));
    WebCore::DocumentLoader::commitData((uint64_t)this, *((const WebCore::SharedBuffer **)this + 334));
  }
  return v14 != 0;
}

WTF::StringImpl ***WebCore::ArchiveFactory::create@<X0>(WTF::StringImpl ***this@<X0>, const WTF::URL *a2@<X1>, WebCore::FragmentedSharedBuffer *a3@<X2>, _QWORD *a4@<X8>)
{
  WTF::StringImpl ***v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  uint64_t (*v14)(WTF::StringImpl ***, const WTF::URL *);
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl **v17;

  if (a2 && *(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
  {
    v8 = this;
    {
      WebCore::createArchiveMIMETypesMap((WebCore *)&v17);
      v15 = v17;
      v17 = 0;
      WebCore::archiveMIMETypes(void)::map = (uint64_t)v15;
      this = WTF::HashMap<WTF::AtomString,WTF::AtomStringImpl *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomStringImpl *>,WTF::HashTableTraits>::~HashMap(&v17, v16);
    }
    v9 = WebCore::archiveMIMETypes(void)::map;
    if (WebCore::archiveMIMETypes(void)::map)
    {
      v10 = *(_DWORD *)(WebCore::archiveMIMETypes(void)::map - 8);
      v11 = WTF::ASCIICaseInsensitiveHash::hash(a3, a2);
      for (i = 0; ; v11 = i + v13)
      {
        v13 = v11 & v10;
        this = (WTF::StringImpl ***)(v9 + 16 * v13);
        if (!*this)
          break;
        if (*this != (WTF::StringImpl **)-1)
        {
          this = (WTF::StringImpl ***)WTF::HashMapTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::ASCIICaseInsensitiveHash>::equal<WTF::String,WTF::String>((uint64_t *)this, (uint64_t *)a3);
          if ((this & 1) != 0)
          {
            v14 = *(uint64_t (**)(WTF::StringImpl ***, const WTF::URL *))(v9 + 16 * v13 + 8);
            if (!v14)
              break;
            return (WTF::StringImpl ***)v14(v8, a2);
          }
        }
        ++i;
      }
    }
  }
  *a4 = 0;
  return this;
}

uint64_t WebCore::MIMETypeRegistry::isXMLMIMEType(WebCore::MIMETypeRegistry *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  double v7;
  double v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = *(_QWORD *)this;
  if (!v3)
    return 0;
  v6 = *(_DWORD *)(v3 + 4);
  if (v6 == 8)
  {
    v16 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v16 & 0xDF) != 0x54
        || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x58
        || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x54
        || (*(_BYTE *)(v16 + 4) & 0xDF) != 0xF
        || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x58
        || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x4D)
      {
        goto LABEL_6;
      }
      v17 = *(unsigned __int8 *)(v16 + 7);
    }
    else
    {
      if ((*(_WORD *)v16 & 0xFFDF) != 0x54
        || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x58
        || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x54
        || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0xF
        || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x58
        || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x4D)
      {
        goto LABEL_6;
      }
      v17 = *(unsigned __int16 *)(v16 + 14);
    }
  }
  else
  {
    if (v6 != 15)
      goto LABEL_6;
    v18 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v18 & 0xDF) != 0x41
        || (*(_BYTE *)(v18 + 1) & 0xDF) != 0x50
        || (*(_BYTE *)(v18 + 2) & 0xDF) != 0x50
        || (*(_BYTE *)(v18 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(v18 + 4) & 0xDF) != 0x49
        || (*(_BYTE *)(v18 + 5) & 0xDF) != 0x43
        || (*(_BYTE *)(v18 + 6) & 0xDF) != 0x41
        || (*(_BYTE *)(v18 + 7) & 0xDF) != 0x54
        || (*(_BYTE *)(v18 + 8) & 0xDF) != 0x49
        || (*(_BYTE *)(v18 + 9) & 0xDF) != 0x4F
        || (*(_BYTE *)(v18 + 10) & 0xDF) != 0x4E
        || (*(_BYTE *)(v18 + 11) & 0xDF) != 0xF
        || (*(_BYTE *)(v18 + 12) & 0xDF) != 0x58
        || (*(_BYTE *)(v18 + 13) & 0xDF) != 0x4D)
      {
        goto LABEL_6;
      }
      v17 = *(unsigned __int8 *)(v18 + 14);
    }
    else
    {
      if ((*(_WORD *)v18 & 0xFFDF) != 0x41
        || (*(_WORD *)(v18 + 2) & 0xFFDF) != 0x50
        || (*(_WORD *)(v18 + 4) & 0xFFDF) != 0x50
        || (*(_WORD *)(v18 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v18 + 8) & 0xFFDF) != 0x49
        || (*(_WORD *)(v18 + 10) & 0xFFDF) != 0x43
        || (*(_WORD *)(v18 + 12) & 0xFFDF) != 0x41
        || (*(_WORD *)(v18 + 14) & 0xFFDF) != 0x54
        || (*(_WORD *)(v18 + 16) & 0xFFDF) != 0x49
        || (*(_WORD *)(v18 + 18) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v18 + 20) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v18 + 22) & 0xFFDF) != 0xF
        || (*(_WORD *)(v18 + 24) & 0xFFDF) != 0x58
        || (*(_WORD *)(v18 + 26) & 0xFFDF) != 0x4D)
      {
        goto LABEL_6;
      }
      v17 = *(unsigned __int16 *)(v18 + 28);
    }
  }
  if ((v17 & 0xFFFFFFDF) == 0x4C)
    return 1;
LABEL_6:
  if (WTF::StringImpl::endsWithIgnoringASCIICase())
  {
    v10 = WTF::String::find(this, 0x2Fu, 0, v7, v8, v9);
    if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v12 = *(unsigned int *)(v11 + 4);
        if (v10 != (_DWORD)v12 - 5)
        {
          if (v12 != 4)
          {
            v13 = 0;
            while (1)
            {
              if (v12 <= v13)
              {
                v15 = 0;
              }
              else
              {
                v14 = *(_QWORD *)(v11 + 8);
                v15 = (*(_BYTE *)(v11 + 16) & 4) != 0
                    ? *(unsigned __int8 *)(v14 + v13)
                    : *(unsigned __int16 *)(v14 + 2 * v13);
              }
              if ((v15 - 48) >= 0xA
                && (v15 | 0x20u) - 97 >= 0x1A
                && ((v15 - 33) > 0x3F || ((1 << (v15 - 33)) & 0xE00000000000367DLL) == 0)
                && (v15 - 123) >= 4
                && v10 != v13)
              {
                break;
              }
              ++v13;
              v4 = 1;
              if (v12 - 4 == v13)
                return v4;
            }
            return 0;
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

double WebCore::RenderLayerScrollableArea::positionOverflowControls(WebCore::RenderLayerScrollableArea *this, int32x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  WebCore::Widget *v8;
  WebCore::Widget *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int32x2_t v13[2];
  int32x2_t v14[2];
  int32x2_t v15[2];
  int32x2_t v16[2];

  if (*((_OWORD *)this + 8) != 0
    || ((v4 = *(_QWORD *)(*((_QWORD *)this + 12) + 32), (*(_BYTE *)(v4 + 22) & 1) != 0) || *(_BYTE *)(v4 + 46) == 14)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 151) & 0x38) != 0)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
    if (v5 && (*(_BYTE *)(v5 + 45) & 4) != 0)
    {
      WebCore::RenderLayerScrollableArea::overflowControlsRects(this, (uint64_t)v13);
      v8 = (WebCore::Widget *)*((_QWORD *)this + 17);
      if (v8)
      {
        v14[0] = vadd_s32(v14[0], *a2);
        WebCore::Widget::setFrameRect(v8, (const WebCore::IntRect *)v14);
        (*(void (**)(_QWORD *, WebCore::Widget *))(**((_QWORD **)v8 + 8) + 408))(*((_QWORD **)v8 + 8), v8);
      }
      v9 = (WebCore::Widget *)*((_QWORD *)this + 16);
      if (v9)
      {
        v13[0] = vadd_s32(v13[0], *a2);
        WebCore::Widget::setFrameRect(v9, (const WebCore::IntRect *)v13);
        (*(void (**)(_QWORD *, WebCore::Widget *))(**((_QWORD **)v9 + 8) + 408))(*((_QWORD **)v9 + 8), v9);
      }
      v10 = *((_QWORD *)this + 19);
      if (v10)
      {
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v12, v15);
        result = *(double *)&v12;
        *(_OWORD *)(v10 + 152) = v12;
      }
      v11 = *((_QWORD *)this + 20);
      if (v11)
      {
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v12, v16);
        result = *(double *)&v12;
        *(_OWORD *)(v11 + 152) = v12;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::updateConfiguration(WTF::StringImpl **this, const WebCore::RenderLayer *a2)
{
  WebCore::RenderLayerBacking *v3;
  WebCore::RenderView *v4;
  WebCore::RenderLayerCompositor *v5;
  uint64_t v6;
  const WebCore::GraphicsLayer *v7;
  int v8;
  _BOOL4 isViewportConstrainedFixedOrStickyLayer;
  const WebCore::GraphicsLayer *v10;
  WTF::StringImpl **v11;
  int v12;
  const WebCore::GraphicsLayer *v13;
  _BOOL4 v14;
  const WebCore::GraphicsLayer *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  const WebCore::GraphicsLayer *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  _BOOL4 canUseDescendantClippingLayer;
  int v25;
  const WebCore::GraphicsLayer *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WebCore::RenderLayer *v30;
  const WebCore::RenderLayer *v31;
  int v32;
  void *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  int *v37;
  int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _BOOL4 v46;
  uint64_t v48;
  int updated;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  WebCore::RenderLayerScrollableArea *v54;
  int v55;
  WebCore::LayerAncestorClippingStack *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t (*v62)();
  _BOOL4 v63;
  WebCore::RenderObject *v64;
  uint64_t v65;
  void *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  WebCore::RenderLayerBacking *v88;
  uint64_t v89;
  int *v90;
  BOOL v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  WebCore::RenderStyle *v96;
  uint64_t v97;
  WebCore::RenderView *v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::RenderView *v108;
  WebCore::RenderLayerCompositor *v109;
  _QWORD *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _DWORD *v115;
  uint64_t v116;
  char v117;
  _DWORD *v118;
  WTF::StringImpl *v119;
  uint64_t *v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  _BYTE *v140;
  void (*v141)(WTF::StringImpl **__return_ptr);
  int v142;
  uint64_t v143;
  int v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  WTF::StringImpl *v151;
  WebCore::RenderView *v152;
  uint64_t v153;
  WebCore::RenderElement *v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  int v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  WebCore::RenderView *v165;
  WebCore::RenderLayerCompositor *v166;
  _BOOL4 HasTransparentBackground;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  WTF::StringImpl *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl **v176;
  void (*v177)(void);
  unsigned __int16 v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WebCore::RenderLayerBacking *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  WebCore::HTMLModelElement *v205;
  WebCore::HTMLModelElement *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  int v213;
  int v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  _DWORD *v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  int isInteractive;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  _DWORD *v233;
  WTF::StringImpl *v234;
  _DWORD *v235;
  int v236;
  _DWORD *v237;
  _DWORD *v238;
  _DWORD *v239;
  int v240;
  int v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  int v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WebCore::RenderLayerCompositor *v250;
  WebCore::RenderLayerCompositor *v251;
  WTF *v252;
  void *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  WTF::StringImpl *v257;
  int v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  WebCore::RenderLayerCompositor *v261;
  WebCore::RenderLayerCompositor *v262;
  WTF *v263;
  void *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WebCore::RenderLayerCompositor *v267;
  WebCore::RenderLayerCompositor *v268;
  WTF *v269;
  void *v270;
  WebCore::RenderLayerCompositor *v271;
  WebCore::RenderLayerCompositor *v272;
  WTF *v273;
  void *v274;
  WTF::StringImpl *v275;
  int v276;
  int shouldDisplayVideo;
  WebCore::HTMLMediaElement *v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WebCore::RenderView *v292;
  WebCore::LocalFrameView *v293;
  WebCore::RenderElement *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int v297;
  WebCore::RenderLayerCompositor *v298;
  _BYTE *v299;
  WTF::StringImpl **v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  WTF::StringImpl *v305[6];
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  uint64_t v308;
  _QWORD v309[3];
  _DWORD v310[4];
  uint64_t v311;
  uint64_t v312[2];

  v3 = (WebCore::RenderLayerBacking *)this;
  v4 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[1] + 4) + 24) + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
  if (!v5)
  {
    v250 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    WebCore::RenderLayerCompositor::RenderLayerCompositor(v250, v4);
    v251 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    *((_QWORD *)v4 + 50) = v250;
    if (v251)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v251);
      WTF::fastFree(v252, v253);
      v5 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
    }
    else
    {
      v5 = v250;
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  v298 = v5;
  if (!a2
    || (v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40), (*(_DWORD *)(v6 + 636) & 0x380) != 0x80)
    && *(float *)(v6 + 260) == -1.0
    || WebCore::RenderLayer::ancestorLayerIsDOMParent(*((WebCore::RenderLayer **)v3 + 1), a2))
  {
    v7 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 15);
    if (v7)
    {
      WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v7);
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v3 + 30);
      v8 = 1;
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    if (*((_QWORD *)v3 + 15))
    {
      v8 = 0;
    }
    else
    {
      WebCore::RenderLayer::name((WebCore::RenderLayer *)v312, *((_BYTE **)this[1] + 4));
      WTF::makeString<WTF::String,WTF::ASCIILiteral>(v312, (int8x16_t *)" (3d flattening)", 17, v305);
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v307, (uint64_t)this, (uint64_t)v305, 0);
      v287 = v307;
      v307 = 0;
      v288 = this[15];
      this[15] = v287;
      if (v288)
      {
        if (*((_DWORD *)v288 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v288 + 16))(v288);
          v291 = v307;
          v307 = 0;
          if (v291)
          {
            if (*((_DWORD *)v291 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v291 + 16))(v291);
            else
              --*((_DWORD *)v291 + 2);
          }
        }
        else
        {
          --*((_DWORD *)v288 + 2);
          v307 = 0;
        }
      }
      v289 = v305[0];
      v305[0] = 0;
      if (v289)
      {
        if (*(_DWORD *)v289 == 2)
          WTF::StringImpl::destroy(v289, v286);
        else
          *(_DWORD *)v289 -= 2;
      }
      v290 = (WTF::StringImpl *)v312[0];
      v312[0] = 0;
      if (v290)
      {
        if (*(_DWORD *)v290 == 2)
          WTF::StringImpl::destroy(v290, v286);
        else
          *(_DWORD *)v290 -= 2;
      }
      v8 = 1;
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  isViewportConstrainedFixedOrStickyLayer = WebCore::RenderLayerCompositor::isViewportConstrainedFixedOrStickyLayer(v5, *((const WebCore::RenderLayer **)v3 + 1));
  v11 = (WTF::StringImpl **)((char *)v3 + 104);
  v10 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 13);
  if (isViewportConstrainedFixedOrStickyLayer)
  {
    if (v10)
      goto LABEL_9;
    v140 = *(_BYTE **)(*((_QWORD *)v3 + 1) + 32);
    v141 = *(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v140 + 632);
    if (v140[46] == 30)
    {
      v141(&v307);
      WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v307, (int8x16_t *)" (reflection)", 14, v305);
      v266 = v307;
      v307 = 0;
      if (v266)
      {
        if (*(_DWORD *)v266 == 2)
          WTF::StringImpl::destroy(v266, v265);
        else
          *(_DWORD *)v266 -= 2;
        v3 = (WebCore::RenderLayerBacking *)this;
      }
    }
    else
    {
      v141(v305);
    }
    if (v305[0])
    {
      v142 = *((_DWORD *)v305[0] + 1);
      if (v142 < 0 || (v143 = (v142 + 9), __OFADD__(v142, 9)))
      {
        v307 = 0;
        goto LABEL_569;
      }
      if ((*((_BYTE *)v305[0] + 16) & 4) == 0)
      {
        v144 = 0;
LABEL_230:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v143, v144, (uint64_t)v305[0], (int8x16_t *)" (anchor)", 9u, &v307);
        if (v307)
        {
          v146 = v305[0];
          v305[0] = 0;
          if (v146)
          {
            if (*(_DWORD *)v146 == 2)
              WTF::StringImpl::destroy(v146, v145);
            else
              *(_DWORD *)v146 -= 2;
          }
          WebCore::RenderLayerBacking::createGraphicsLayer(v312, (uint64_t)v3, (uint64_t)&v307, 1);
          v148 = v312[0];
          v312[0] = 0;
          v149 = (_DWORD *)*((_QWORD *)v3 + 13);
          *((_QWORD *)v3 + 13) = v148;
          if (!v149)
            goto LABEL_237;
          v150 = v149[2] - 1;
          if (v149[2] != 1)
            goto LABEL_236;
          (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 16))(v149);
          v149 = (_DWORD *)v312[0];
          v312[0] = 0;
          if (v149)
          {
            v150 = v149[2] - 1;
            if (v149[2] != 1)
            {
LABEL_236:
              v149[2] = v150;
              goto LABEL_237;
            }
            (*(void (**)(_DWORD *))(*(_QWORD *)v149 + 16))(v149);
          }
LABEL_237:
          v151 = v307;
          v307 = 0;
          if (v151)
          {
            if (*(_DWORD *)v151 == 2)
              WTF::StringImpl::destroy(v151, v147);
            else
              *(_DWORD *)v151 -= 2;
          }
          goto LABEL_240;
        }
LABEL_569:
        __break(0xC471u);
        JUMPOUT(0x19434E2ECLL);
      }
    }
    else
    {
      v143 = 9;
    }
    v144 = 1;
    goto LABEL_230;
  }
  if (v10)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v10);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v3 + 26);
LABEL_240:
    v12 = 1;
    goto LABEL_10;
  }
LABEL_9:
  v12 = 0;
LABEL_10:
  v300 = v11;
  if ((*(_BYTE *)(*((_QWORD *)v3 + 1) + 24) & 1) != 0)
  {
    v152 = (WebCore::RenderView *)*((_QWORD *)v5 + 1);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v152 + 3) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 680) & 8) == 0)
    {
      v153 = *(_QWORD *)(*((_QWORD *)v152 + 18) + 256);
      if (v153)
      {
        if (*(_BYTE *)(v153 + 290))
        {
          v154 = WebCore::RenderView::rendererForRootBackground(v152);
          if (v154)
          {
            v155 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v154 + 11) + 16) + 8);
            while (*(_QWORD *)(v155 + 16) && (*(_WORD *)(v155 + 58) & 3) == 2)
            {
              v155 = *(_QWORD *)(v155 + 8);
              if (!v155)
              {
                v299 = (char *)v3 + 294;
                if (*((_BYTE *)v3 + 294)
                  || (*((_BYTE *)this + 294) = 1,
                      v292 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[1] + 4) + 24)
                                                                                         + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944),
                      v293 = (WebCore::LocalFrameView *)*((_QWORD *)v292 + 31),
                      v294 = WebCore::RenderView::rendererForRootBackground(v292),
                      WebCore::LocalFrameView::removeSlowRepaintObject(v293, v294),
                      *((_BYTE *)this + 294)))
                {
                  v13 = this[11];
                  v302 = this + 11;
                  goto LABEL_251;
                }
                v3 = (WebCore::RenderLayerBacking *)this;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
  }
  v299 = (char *)v3 + 294;
  if (*((_BYTE *)v3 + 294))
    *((_BYTE *)v3 + 294) = 0;
LABEL_13:
  v13 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 11);
  v302 = (_QWORD *)((char *)v3 + 88);
  if (*((_BYTE *)v3 + 295))
  {
LABEL_251:
    v14 = v13 == 0;
    if (v13)
      goto LABEL_252;
    WebCore::RenderLayer::name((WebCore::RenderLayer *)v312, *((_BYTE **)this[1] + 4));
    WTF::makeString<WTF::String,WTF::ASCIILiteral>(v312, (int8x16_t *)" (background)", 14, v305);
    v243 = (WTF::StringImpl *)v312[0];
    v312[0] = 0;
    if (v243)
    {
      if (*(_DWORD *)v243 == 2)
        WTF::StringImpl::destroy(v243, v242);
      else
        *(_DWORD *)v243 -= 2;
    }
    WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v307, (uint64_t)this, (uint64_t)v305, 0);
    v244 = v307;
    v307 = 0;
    v245 = this[11];
    this[11] = v244;
    if (v245)
    {
      v246 = *((_DWORD *)v245 + 2) - 1;
      if (*((_DWORD *)v245 + 2) != 1)
      {
LABEL_460:
        *((_DWORD *)v245 + 2) = v246;
        goto LABEL_461;
      }
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v245 + 16))(v245);
      v245 = v307;
      v307 = 0;
      if (v245)
      {
        v246 = *((_DWORD *)v245 + 2) - 1;
        if (*((_DWORD *)v245 + 2) != 1)
          goto LABEL_460;
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v245 + 16))(v245);
      }
    }
LABEL_461:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v302 + 216))(*v302, 1);
    v247 = *v302;
    LODWORD(v308) = 0;
    v307 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v247 + 152))(v247, &v307);
    v249 = v305[0];
    v305[0] = 0;
    if (v249)
    {
      if (*(_DWORD *)v249 == 2)
        WTF::StringImpl::destroy(v249, v248);
      else
        *(_DWORD *)v249 -= 2;
    }
LABEL_252:
    v3 = (WebCore::RenderLayerBacking *)this;
    if (this[8])
      goto LABEL_17;
    WebCore::RenderLayer::name((WebCore::RenderLayer *)&v306, *((_BYTE **)this[1] + 4));
    WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v306, (int8x16_t *)" (contents containment)", 24, &v307);
    v157 = v306;
    v306 = 0;
    if (v157)
    {
      if (*(_DWORD *)v157 == 2)
        WTF::StringImpl::destroy(v157, v156);
      else
        *(_DWORD *)v157 -= 2;
    }
    WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)v305, (uint64_t)this, (uint64_t)&v307, 0);
    v158 = v305[0];
    v305[0] = 0;
    v159 = this[8];
    this[8] = v158;
    if (v159)
    {
      v160 = *((_DWORD *)v159 + 2) - 1;
      if (*((_DWORD *)v159 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v159 + 16))(v159);
        v159 = v305[0];
        v305[0] = 0;
        if (!v159)
          goto LABEL_259;
        v160 = *((_DWORD *)v159 + 2) - 1;
        if (*((_DWORD *)v159 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v159 + 16))(v159);
          goto LABEL_259;
        }
      }
      *((_DWORD *)v159 + 2) = v160;
    }
LABEL_259:
    (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)this[8] + 680))(this[8], 1);
    (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)this[9] + 680))(this[9], 0);
    v162 = v307;
    v307 = 0;
    if (v162)
    {
      if (*(_DWORD *)v162 == 2)
        WTF::StringImpl::destroy(v162, v161);
      else
        *(_DWORD *)v162 -= 2;
    }
    v3 = (WebCore::RenderLayerBacking *)this;
    goto LABEL_403;
  }
  v14 = v13 != 0;
  if (v13)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v13);
    WebCore::GraphicsLayer::unparentAndClear(v302);
  }
  v15 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 8);
  if (v15)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v15);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v3 + 16);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v3 + 9) + 680))(*((_QWORD *)v3 + 9), 1);
    goto LABEL_403;
  }
LABEL_17:
  if (v14)
  {
LABEL_403:
    v16 = 1;
    goto LABEL_19;
  }
  v16 = v8 | v12;
LABEL_19:
  v17 = *((_QWORD *)v3 + 1);
  v18 = *(uint64_t **)(v17 + 96);
  if (v18)
  {
    v104 = *((unsigned int *)v18 + 3);
    if ((_DWORD)v104)
    {
      v105 = *v18;
      v106 = 8 * v104;
      while (!*(_QWORD *)(*(_QWORD *)v105 + 256) && (*(_BYTE *)(*(_QWORD *)v105 + 27) & 4) == 0)
      {
        v105 += 8;
        v106 -= 8;
        if (!v106)
          goto LABEL_20;
      }
      v20 = (_QWORD *)((char *)v3 + 80);
      if (*((_QWORD *)v3 + 10))
      {
        v3 = (WebCore::RenderLayerBacking *)this;
        goto LABEL_21;
      }
      WebCore::RenderLayer::name((WebCore::RenderLayer *)v305, *(_BYTE **)(v17 + 32));
      WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)v305, (int8x16_t *)" (foreground)", 14, &v307);
      v255 = v305[0];
      v305[0] = 0;
      if (v255)
      {
        if (*(_DWORD *)v255 == 2)
          WTF::StringImpl::destroy(v255, v254);
        else
          *(_DWORD *)v255 -= 2;
      }
      WebCore::RenderLayerBacking::createGraphicsLayer(v312, (uint64_t)this, (uint64_t)&v307, 0);
      v256 = v312[0];
      v312[0] = 0;
      v257 = this[10];
      this[10] = (WTF::StringImpl *)v256;
      if (!v257)
        goto LABEL_481;
      v258 = *((_DWORD *)v257 + 2) - 1;
      if (*((_DWORD *)v257 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v257 + 16))(v257);
        v257 = (WTF::StringImpl *)v312[0];
        v312[0] = 0;
        if (!v257)
          goto LABEL_481;
        v258 = *((_DWORD *)v257 + 2) - 1;
        if (*((_DWORD *)v257 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v257 + 16))(v257);
          goto LABEL_481;
        }
      }
      *((_DWORD *)v257 + 2) = v258;
LABEL_481:
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v20 + 216))(*v20, 1);
      v260 = v307;
      v307 = 0;
      if (v260)
      {
        if (*(_DWORD *)v260 == 2)
          WTF::StringImpl::destroy(v260, v259);
        else
          *(_DWORD *)v260 -= 2;
      }
      v3 = (WebCore::RenderLayerBacking *)this;
      goto LABEL_401;
    }
  }
LABEL_20:
  v20 = (_QWORD *)((char *)v3 + 80);
  v19 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 10);
  if (v19)
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v19);
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)v3 + 20);
LABEL_401:
    v17 = *((_QWORD *)v3 + 1);
    v16 = 1;
  }
LABEL_21:
  v21 = *(_QWORD *)(v17 + 264);
  v301 = v20;
  if (!v21 || !*(_BYTE *)(v21 + 79))
  {
    v22 = *(_QWORD *)(v17 + 24);
    if ((v22 & 0x4000000) != 0)
    {
      v93 = *(_QWORD *)(v17 + 32);
      v94 = *(_DWORD *)(v93 + 20);
      if ((v94 & 0x1800000) == 0x1000000)
      {
        if ((v94 & 0x10000) == 0
          && (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v93 + 88) + 40) + 642) << 48) & 0x20000000000000) == 0)
        {
          goto LABEL_23;
        }
      }
      else if ((v94 & 0x10000) == 0)
      {
        goto LABEL_23;
      }
      if ((v22 & 0x8000000) == 0)
      {
        canUseDescendantClippingLayer = WebCore::canUseDescendantClippingLayer(v22, (const WebCore::RenderLayer *)v93);
        v23 = 0;
        goto LABEL_24;
      }
    }
LABEL_23:
    v23 = 0;
    canUseDescendantClippingLayer = 0;
    goto LABEL_24;
  }
  v95 = *(_QWORD *)(v17 + 32);
  if ((*(_BYTE *)(v95 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19434D880);
  }
  v96 = (WebCore::RenderStyle *)(v95 + 80);
  v97 = *(_QWORD *)(v95 + 160);
  v307 = 0;
  v308 = v97;
  WebCore::RenderStyle::getRoundedInnerBorderFor(v96, (const WebCore::LayoutRect *)&v307, 1, 1, (uint64_t)v305);
  v98 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v99 = *((_QWORD *)v98 + 50);
  if (!v99)
  {
    v261 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v99 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v261, v98);
    v262 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v98 + 50);
    *((_QWORD *)v98 + 50) = v99;
    if (v262)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v262);
      WTF::fastFree(v263, v264);
      v99 = *((_QWORD *)v98 + 50);
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v305, *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 8) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 364), (uint64_t)&v307);
  canUseDescendantClippingLayer = !WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)v309);
  v23 = 1;
LABEL_24:
  v25 = v16 | WebCore::RenderLayerBacking::updateScrollingLayers(v3, v23);
  v26 = (const WebCore::GraphicsLayer *)*((_QWORD *)v3 + 12);
  v303 = (_QWORD *)((char *)v3 + 96);
  if (canUseDescendantClippingLayer)
  {
    if (!v26 && !*((_BYTE *)v3 + 290))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v307, (uint64_t)v3, (uint64_t)v305, 0);
      v226 = v307;
      v307 = 0;
      v227 = (_DWORD *)*((_QWORD *)v3 + 12);
      *((_QWORD *)v3 + 12) = v226;
      if (v227)
      {
        if (v227[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v227 + 16))(v227);
          v275 = v307;
          v307 = 0;
          if (v275)
          {
            if (*((_DWORD *)v275 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v275 + 16))(v275);
            else
              --*((_DWORD *)v275 + 2);
          }
        }
        else
        {
          --v227[2];
          v307 = 0;
        }
      }
      v228 = v305[0];
      v305[0] = 0;
      if (v228)
      {
        if (*(_DWORD *)v228 == 2)
          WTF::StringImpl::destroy(v228, v225);
        else
          *(_DWORD *)v228 -= 2;
      }
      v25 = 1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v303 + 208))(*v303, 1);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v303 + 384))(*v303, 1);
      v3 = (WebCore::RenderLayerBacking *)this;
    }
  }
  else if (v26 && !*((_BYTE *)v3 + 290))
  {
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)v3, v26);
    WebCore::GraphicsLayer::unparentAndClear(v303);
    v25 = 1;
  }
  if (!a2 || (v27 = *((_QWORD *)v3 + 1), (*(_BYTE *)(*(_QWORD *)(v27 + 32) + 22) & 0x40) != 0))
  {
LABEL_221:
    v48 = 0;
    goto LABEL_61;
  }
  v29 = *((_QWORD *)a2 + 3);
  v28 = *((_QWORD *)a2 + 4);
  if ((v29 & 0x400000000000) == 0 || (v31 = a2, (v29 & 0xA) == 0))
  {
    if ((*(_BYTE *)(v28 + 45) & 4) == 0)
      goto LABEL_35;
    if (!v28)
      goto LABEL_35;
    if ((*(_DWORD *)(v28 + 20) & 0x1800000) != 0x1000000)
      goto LABEL_35;
    if (((*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v28 + 88) + 40) + 636) | ((unint64_t)(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v28 + 88) + 40) + 640) | (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v28 + 88) + 40) + 642) << 16)) << 32)) & 0x20000000000000) == 0)
      goto LABEL_35;
    v221 = *(_QWORD *)(v28 + 160);
    v307 = 0;
    v222 = (WTF::StringImpl *)WebCore::RenderBox::clipRect((WebCore::RenderBox *)v28, (const WebCore::LayoutPoint *)&v307, 0);
    v224 = v223;
    v305[0] = v222;
    v305[1] = v223;
    v307 = 0;
    v308 = v221;
    v3 = (WebCore::RenderLayerBacking *)this;
    WebCore::LayoutRect::intersect((int *)&v307, (const WebCore::LayoutRect *)v305);
    v31 = a2;
    if (v222 == v307)
    {
      v31 = a2;
      if (v224 == (WTF::StringImpl *)v308)
      {
LABEL_35:
        v30 = (const WebCore::RenderLayer *)v27;
        while (v30)
        {
          v31 = v30;
          v30 = (const WebCore::RenderLayer *)*((_QWORD *)v30 + 5);
          if (v30 == a2)
          {
            if (v31 == (const WebCore::RenderLayer *)v27)
              goto LABEL_221;
            goto LABEL_39;
          }
        }
        goto LABEL_221;
      }
    }
  }
LABEL_39:
  v32 = v25;
  v307 = v31;
  LODWORD(v308) = 5;
  BYTE4(v308) = 1;
  WebCore::RenderLayer::parentClipRects((WTF *)v305, v27, (uint64_t)&v307);
  v34 = v305[0];
  v35 = *(_QWORD *)(v27 + 32);
  v36 = (*(_DWORD *)(v35 + 96) >> 19) & 7;
  v37 = (int *)((char *)v305[0] + 8);
  if (v36 == 6)
    v37 = (int *)((char *)v305[0] + 28);
  if (v36 == 2)
    v38 = (int *)((char *)v305[0] + 48);
  else
    v38 = v37;
  v39 = *v38;
  v40 = v38[1];
  v41 = v38[2];
  v42 = v38[3];
  if (*((_BYTE *)v305[0] + 4))
  {
    v182 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 24) + 8) + 40) + 8) + 1944);
    v183 = *((_QWORD *)v31 + 4);
    v43 = v40;
    v44 = v39;
    if (v183 == v182)
    {
      v184 = v39 == -1073741808 && v40 == -1073741808;
      v185 = v184 && v41 == 2147483615;
      v186 = v185 && v42 == 2147483615;
      v43 = -1073741808;
      v44 = -1073741808;
      if (!v186)
      {
        v187 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v182 + 248));
        v44 = __OFADD__(v39, (_DWORD)v187) ? (v39 >> 31) + 0x7FFFFFFF : v39 + v187;
        v43 = v40 + HIDWORD(v187);
        if (__OFADD__(v40, HIDWORD(v187)))
          v43 = (v40 >> 31) + 0x7FFFFFFF;
      }
    }
  }
  else
  {
    v43 = v38[1];
    v44 = *v38;
  }
  if (*(_DWORD *)v34 == 1)
    WTF::fastFree(v34, v33);
  else
    --*(_DWORD *)v34;
  v3 = (WebCore::RenderLayerBacking *)this;
  v46 = v41 != 2147483615 || v42 != 2147483615;
  v48 = v44 != -1073741808 || v43 != -1073741808 || v46;
  v25 = v32;
LABEL_61:
  updated = WebCore::RenderLayerBacking::updateAncestorClipping(v3, (void *)v48, a2);
  v50 = *((_QWORD *)v3 + 1);
  v51 = *(_QWORD *)(v50 + 264);
  if (v51)
  {
    v89 = *(_QWORD *)(v51 + 128);
    if (v89)
    {
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 272))(v89);
      v50 = *((_QWORD *)v3 + 1);
      v51 = *(_QWORD *)(v50 + 264);
      if (!v51)
        goto LABEL_63;
    }
    else
    {
      v52 = 0;
    }
    v107 = *(_QWORD *)(v51 + 136);
    if (v107)
    {
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 272))(v107);
      v50 = *((_QWORD *)v3 + 1);
      goto LABEL_64;
    }
  }
  else
  {
    v52 = 0;
  }
LABEL_63:
  v53 = 0;
LABEL_64:
  if ((*(_BYTE *)(*(_QWORD *)(v50 + 32) + 45) & 4) != 0
    && (v54 = *(WebCore::RenderLayerScrollableArea **)(v50 + 264)) != 0)
  {
    WebCore::RenderLayerScrollableArea::overflowControlsRects(v54, (uint64_t)&v307);
    v90 = v310;
    if (v310[1] < 1 || v310[0] < 1)
      v90 = (int *)&v311;
    v92 = *v90 < 1 || v90[1] < 1;
    if (!v92 && ((v220 = *((_QWORD *)v54 + 17)) != 0 || (v220 = *((_QWORD *)v54 + 16)) != 0))
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 272))(v220);
    else
      v55 = 0;
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  else
  {
    v55 = 0;
  }
  v57 = WebCore::RenderLayerBacking::updateOverflowControlsLayers(v3, v52, v53, v55) | updated | v25;
  if (v57 == 1)
  {
    v115 = (_DWORD *)*((_QWORD *)v3 + 6);
    if (!v115)
    {
      LODWORD(v116) = 0;
      v307 = (WTF::StringImpl *)v309;
      v308 = 6;
LABEL_187:
      v117 = 1;
      goto LABEL_188;
    }
    WebCore::RenderLayerBacking::connectClippingStackLayers(v115, v56);
    v172 = (uint64_t *)*((_QWORD *)v3 + 6);
    v173 = *((unsigned int *)v172 + 3);
    if (!(_DWORD)v173)
    {
      __break(0xC471u);
      JUMPOUT(0x19434E2F4);
    }
    v174 = v173 - 1;
    v175 = *v172;
    v116 = *(_QWORD *)(*v172 + 96 * v174 + 88);
    if (v116)
    {
      v307 = (WTF::StringImpl *)v309;
      LODWORD(v308) = 6;
    }
    else
    {
      v116 = *(_QWORD *)(v175 + 96 * v174 + 80);
      v307 = (WTF::StringImpl *)v309;
      v308 = 6;
      if (!v116)
        goto LABEL_187;
    }
    v117 = 0;
    v309[0] = v116;
    LODWORD(v116) = 1;
    HIDWORD(v308) = 1;
LABEL_188:
    if (*v300)
    {
      v176 = &v307 + v116;
      LODWORD(v116) = v116 + 1;
      v176[2] = *v300;
      HIDWORD(v308) = v116;
    }
    v118 = (_DWORD *)*((_QWORD *)v3 + 8);
    if (v118)
    {
      WebCore::GraphicsLayer::removeAllChildren(v118);
      v209 = *((_QWORD *)v3 + 8);
      v210 = (WTF::StringImpl *)*((_QWORD *)v3 + 11);
      ++*((_DWORD *)v210 + 2);
      v305[0] = v210;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v209 + 64))(v209, v305);
      v211 = v305[0];
      v305[0] = 0;
      if (v211)
      {
        if (*((_DWORD *)v211 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v211 + 16))(v211);
        else
          --*((_DWORD *)v211 + 2);
        v3 = (WebCore::RenderLayerBacking *)this;
      }
      v212 = (WTF::StringImpl *)*((_QWORD *)v3 + 8);
      v305[0] = v212;
      v213 = v308;
      v214 = HIDWORD(v308);
      if (HIDWORD(v308) == (_DWORD)v308)
      {
        WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer *>((uint64_t)&v307, (unint64_t)v305);
        v213 = v308;
        LODWORD(v116) = HIDWORD(v308);
      }
      else
      {
        LODWORD(v116) = HIDWORD(v308) + 1;
        *((_QWORD *)v307 + HIDWORD(v308)) = v212;
        HIDWORD(v308) = v214 + 1;
      }
      v3 = (WebCore::RenderLayerBacking *)this;
      v120 = (uint64_t *)(this + 9);
      v119 = this[9];
      v305[0] = v119;
      if ((_DWORD)v116 == v213)
      {
        WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer *>((uint64_t)&v307, (unint64_t)v305);
        goto LABEL_193;
      }
      v121 = v307;
    }
    else
    {
      v120 = (uint64_t *)((char *)v3 + 72);
      v119 = (WTF::StringImpl *)*((_QWORD *)v3 + 9);
      v121 = (WTF::StringImpl *)v309;
    }
    *((_QWORD *)v121 + v116) = v119;
    HIDWORD(v308) = v116 + 1;
LABEL_193:
    v122 = *((_QWORD *)v3 + 15);
    if (v122)
    {
      if ((v117 & 1) != 0)
      {
        if (!HIDWORD(v308))
        {
          __break(0xC471u);
          JUMPOUT(0x19434E394);
        }
        v215 = *(WTF::StringImpl **)v307;
      }
      else
      {
        v233 = (_DWORD *)*((_QWORD *)v3 + 6);
        if (!v233[3])
        {
          __break(0xC471u);
          JUMPOUT(0x19434E39CLL);
        }
        v215 = *(WTF::StringImpl **)(*(_QWORD *)v233 + 80);
      }
      ++*((_DWORD *)v215 + 2);
      v305[0] = v215;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v122 + 64))(v122, v305);
      v234 = v305[0];
      v305[0] = 0;
      if (v234)
      {
        if (*((_DWORD *)v234 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v234 + 16))(v234);
        else
          --*((_DWORD *)v234 + 2);
      }
      v3 = (WebCore::RenderLayerBacking *)this;
    }
    v123 = *v303;
    v124 = HIDWORD(v308);
    if (*v303)
    {
      v305[0] = *(WTF::StringImpl **)v303;
      if (HIDWORD(v308) == (_DWORD)v308)
      {
        WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer *>((uint64_t)&v307, (unint64_t)v305);
        v124 = HIDWORD(v308);
      }
      else
      {
        *((_QWORD *)v307 + HIDWORD(v308)) = v123;
        HIDWORD(v308) = ++v124;
      }
      v3 = (WebCore::RenderLayerBacking *)this;
    }
    v125 = *((_QWORD *)v3 + 20);
    if (v125)
    {
      v305[0] = *((WTF::StringImpl **)v3 + 20);
      if (v124 == (_DWORD)v308)
      {
        WTF::Vector<WebCore::GraphicsLayer *,6ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::GraphicsLayer *>((uint64_t)&v307, (unint64_t)v305);
        v124 = HIDWORD(v308);
      }
      else
      {
        *((_QWORD *)v307 + v124++) = v125;
        HIDWORD(v308) = v124;
      }
    }
    if (v124)
    {
      v126 = 0;
      v127 = v307;
      v128 = 8 * v124;
      do
      {
        v129 = *(WTF::StringImpl **)v127;
        if (v126)
        {
          ++*((_DWORD *)v129 + 2);
          v305[0] = v129;
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v126 + 64))(v126, v305);
          v130 = v305[0];
          v305[0] = 0;
          if (v130)
          {
            if (*((_DWORD *)v130 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v130 + 16))(v130);
            else
              --*((_DWORD *)v130 + 2);
          }
        }
        v127 = (WTF::StringImpl *)((char *)v127 + 8);
        v126 = v129;
        v128 -= 8;
      }
      while (v128);
    }
    v131 = (WTF::StringImpl *)*((_QWORD *)v3 + 19);
    if (v131)
    {
      v132 = (WTF::StringImpl *)*((_QWORD *)v3 + 16);
      if (v132)
      {
        ++*((_DWORD *)v132 + 2);
        v305[0] = v132;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v131 + 64))(v131, v305);
        v171 = v305[0];
        v305[0] = 0;
        if (v171)
        {
          if (*((_DWORD *)v171 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v171 + 16))(v171);
          else
            --*((_DWORD *)v171 + 2);
        }
        v131 = (WTF::StringImpl *)*((_QWORD *)v3 + 19);
      }
      v133 = (WTF::StringImpl *)*((_QWORD *)v3 + 17);
      if (v133)
      {
        ++*((_DWORD *)v133 + 2);
        v305[0] = v133;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v131 + 64))(v131, v305);
        v134 = v305[0];
        v305[0] = 0;
        if (v134)
        {
          if (*((_DWORD *)v134 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v134 + 16))(v134);
          else
            --*((_DWORD *)v134 + 2);
        }
        v131 = (WTF::StringImpl *)*((_QWORD *)v3 + 19);
      }
      v135 = (WTF::StringImpl *)*((_QWORD *)v3 + 18);
      if (v135)
      {
        ++*((_DWORD *)v135 + 2);
        v305[0] = v135;
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v131 + 64))(v131, v305);
        v217 = v305[0];
        v305[0] = 0;
        if (v217)
        {
          if (*((_DWORD *)v217 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v217 + 16))(v217);
          else
            --*((_DWORD *)v217 + 2);
          v3 = (WebCore::RenderLayerBacking *)this;
        }
        v131 = (WTF::StringImpl *)*((_QWORD *)v3 + 19);
      }
      v136 = *v120;
      ++*((_DWORD *)v131 + 2);
      v305[0] = v131;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v136 + 64))(v136, v305);
      v137 = v305[0];
      v305[0] = 0;
      if (v137)
      {
        if (*((_DWORD *)v137 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v137 + 16))(v137);
        else
          --*((_DWORD *)v137 + 2);
      }
    }
    v138 = v307;
    if (v309 != (_QWORD *)v307 && v307 != 0)
    {
      v307 = 0;
      LODWORD(v308) = 0;
      WTF::fastFree(v138, v56);
    }
  }
  v58 = *((_QWORD *)v3 + 19);
  if (v58)
  {
    v100 = *((_QWORD *)v3 + 9);
    if (*(_QWORD *)(v58 + 200) != v100)
    {
      ++*(_DWORD *)(v58 + 8);
      v307 = (WTF::StringImpl *)v58;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v100 + 64))(v100, &v307);
      v101 = v307;
      v307 = 0;
      if (v101)
      {
        if (*((_DWORD *)v101 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v101 + 16))(v101);
        else
          --*((_DWORD *)v101 + 2);
      }
      v102 = *((_QWORD *)v3 + 1);
      *(_DWORD *)(v102 + 12) |= 0x40u;
      if ((*(_BYTE *)(v102 + 24) & 4) != 0)
      {
        v102 = *(_QWORD *)(v102 + 40);
        if (v102)
        {
LABEL_155:
          do
          {
            v103 = *(_DWORD *)(v102 + 12);
            if ((v103 & 2) != 0)
              break;
            *(_DWORD *)(v102 + 12) = v103 | 2;
            if ((*(_BYTE *)(v102 + 24) & 4) == 0)
            {
              while (1)
              {
                v102 = *(_QWORD *)(v102 + 40);
                if (!v102)
                  goto LABEL_69;
                if ((*(_BYTE *)(v102 + 24) & 0x4A) != 0)
                  goto LABEL_159;
              }
            }
            v102 = *(_QWORD *)(v102 + 40);
LABEL_159:
            ;
          }
          while (v102);
        }
      }
      else
      {
        while (1)
        {
          v102 = *(_QWORD *)(v102 + 40);
          if (!v102)
            break;
          if ((*(_BYTE *)(v102 + 24) & 0x4A) != 0)
            goto LABEL_155;
        }
      }
    }
  }
LABEL_69:
  if (*((_BYTE *)v3 + 290))
  {
    v163 = *v303;
    if (*v303)
    {
      if (v57)
      {
        v164 = *((_QWORD *)v3 + 9);
      }
      else
      {
        v164 = *((_QWORD *)v3 + 9);
        if (*(_QWORD *)(v163 + 200) == v164)
          goto LABEL_70;
      }
      ++*(_DWORD *)(v163 + 8);
      v307 = (WTF::StringImpl *)v163;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v164 + 64))(v164, &v307);
      v216 = v307;
      v307 = 0;
      if (v216)
      {
        if (*((_DWORD *)v216 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v216 + 16))(v216);
        else
          --*((_DWORD *)v216 + 2);
      }
    }
  }
LABEL_70:
  v59 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 32) + 88);
  v60 = *(_QWORD *)(*(_QWORD *)(v59 + 32) + 48);
  v61 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  if (*(_QWORD *)(v60 + 8))
  {
    v3 = (WebCore::RenderLayerBacking *)this;
    while (!*(_QWORD *)(v60 + 16))
    {
      v60 = *(_QWORD *)(v60 + 8);
      if (!v60)
        goto LABEL_75;
    }
    v63 = 1;
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  else
  {
    if (*(_QWORD *)(v60 + 16))
      v62 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    else
      v62 = 0;
    if (v62)
    {
      v63 = 1;
    }
    else
    {
LABEL_75:
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 40) + 216) + 8))
        v61 = 0;
      v63 = v61 != 0;
    }
  }
  if (WebCore::RenderLayerBacking::updateMaskingLayer(v3, v63, *(_QWORD *)(*(_QWORD *)(v59 + 40) + 264) != 0))v57 = 1;
  v64 = *(WebCore::RenderObject **)(*((_QWORD *)v3 + 1) + 32);
  if ((*((_BYTE *)v64 + 21) & 0x40) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(v64))
  {
    v188 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 208);
    if (v188)
    {
      v189 = *(_QWORD *)(*(_QWORD *)(v188 + 144) + 256);
      if (v189)
      {
        v190 = *(WTF::StringImpl **)(v189 + 72);
        v191 = *((_QWORD *)v3 + 9);
        if (v190)
          ++*((_DWORD *)v190 + 2);
        v307 = v190;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v191 + 120))(v191, &v307);
        v192 = v307;
        v307 = 0;
        if (v192)
        {
          if (*((_DWORD *)v192 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v192 + 16))(v192);
          else
            --*((_DWORD *)v192 + 2);
        }
        v3 = (WebCore::RenderLayerBacking *)this;
      }
    }
  }
  else
  {
    v65 = *((_QWORD *)v3 + 9);
    v307 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v65 + 120))(v65, &v307);
    v67 = v307;
    v307 = 0;
    if (v67)
    {
      if (*((_DWORD *)v67 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 16))(v67);
      else
        --*((_DWORD *)v67 + 2);
    }
  }
  v307 = v3;
  v308 = 0;
  LODWORD(v309[0]) = 0;
  v68 = *((_QWORD *)v3 + 1);
  v69 = *(_QWORD *)(v68 + 24);
  if ((v69 & 1) == 0)
  {
    if ((v69 & 0x80000) != 0)
      WebCore::RenderLayerBacking::updateDirectlyCompositedBackgroundColor((uint64_t)v3, (const WebCore::RenderBoxModelObject *)&v307, v305);
    goto LABEL_87;
  }
  if (!*((_BYTE *)v3 + 290))
    goto LABEL_87;
  v305[0] = 0;
  v165 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 24) + 8)
                                                         + 40)
                                             + 8)
                                 + 1944);
  v166 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v165 + 50);
  if (!v166)
  {
    v271 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v166 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v271, v165);
    v272 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v165 + 50);
    *((_QWORD *)v165 + 50) = v166;
    if (v272)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v272);
      WTF::fastFree(v273, v274);
      v166 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v165 + 50);
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  HasTransparentBackground = WebCore::RenderLayerCompositor::viewHasTransparentBackground(v166, (WebCore::Color *)v305);
  if (*v299 && *v302)
  {
    if (*((_BYTE *)v3 + 289))
    {
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*v302 + 256))(*v302, v305);
      (*(void (**)(_QWORD, BOOL))(*(_QWORD *)*v302 + 264))(*v302, !HasTransparentBackground);
    }
    v218 = *((_QWORD *)v3 + 9);
    v312[0] = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v218 + 256))(v218, v312);
    if ((v312[0] & 0x8000000000000) != 0)
    {
      v295 = (unsigned int *)(v312[0] & 0xFFFFFFFFFFFFLL);
      do
      {
        v296 = __ldaxr(v295);
        v297 = v296 - 1;
      }
      while (__stlxr(v297, v295));
      v3 = (WebCore::RenderLayerBacking *)this;
      if (!v297)
      {
        atomic_store(1u, v295);
        WTF::fastFree((WTF *)v295, v219);
      }
    }
    v177 = *(void (**)(void))(**((_QWORD **)v3 + 9) + 264);
    goto LABEL_285;
  }
  if (*((_BYTE *)v3 + 289))
  {
    (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v3 + 9) + 256))(*((_QWORD *)v3 + 9), v305);
    v177 = *(void (**)(void))(**((_QWORD **)v3 + 9) + 264);
LABEL_285:
    v177();
  }
  if (((unint64_t)v305[0] & 0x8000000000000) != 0)
  {
    v168 = (unsigned int *)((unint64_t)v305[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v169 = __ldaxr(v168);
      v170 = v169 - 1;
    }
    while (__stlxr(v170, v168));
    v3 = (WebCore::RenderLayerBacking *)this;
    if (!v170)
    {
      atomic_store(1u, v168);
      WTF::fastFree((WTF *)v168, v66);
    }
  }
LABEL_87:
  v70 = v309[0];
  if (!LODWORD(v309[0]))
  {
    if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(v307, &v307) & 1) != 0)
    {
      v70 = 1;
    }
    else
    {
      v88 = v307;
      if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage(v307) & 1) != 0)
      {
        v70 = 2;
      }
      else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly(v88))
      {
        v70 = 3;
      }
      else
      {
        v70 = 4;
      }
    }
    LODWORD(v309[0]) = v70;
  }
  if (v70 == 2)
  {
    WebCore::RenderLayerBacking::updateImageContents((uint64_t)v3, (WebCore::PaintedContentsInfo *)&v307);
    v70 = v309[0];
    if (!LODWORD(v309[0]))
    {
      if ((WebCore::RenderLayerBacking::isSimpleContainerCompositingLayer(v307, &v307) & 1) != 0)
      {
        v70 = 1;
      }
      else
      {
        v194 = v307;
        if ((WebCore::RenderLayerBacking::isDirectlyCompositedImage(v307) & 1) != 0)
        {
          v70 = 2;
        }
        else if (WebCore::RenderLayerBacking::isUnscaledBitmapOnly(v194))
        {
          v70 = 3;
        }
        else
        {
          v70 = 4;
        }
      }
      LODWORD(v309[0]) = v70;
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  v71 = *((_QWORD *)v3 + 9);
  if ((((v70 == 3) ^ ((unsigned __int16)(*(_WORD *)(v71 + 177) & 0x1000) >> 12)) & 1) == 0)
  {
    v195 = *(_WORD *)(v71 + 177) & 0xEFFF | (*(unsigned __int8 *)(v71 + 179) << 16);
    *(_BYTE *)(v71 + 179) = BYTE2(v195);
    *(_WORD *)(v71 + 177) = v195 | ((v70 != 3) << 12);
    v57 = 1;
  }
  if (v70 == 3 && (v196 = *((_QWORD *)v3 + 1), *(_BYTE *)(*(_QWORD *)(v196 + 32) + 46) == 13))
    v72 = (*(unsigned __int8 *)(v196 + 26) >> 3) & 1;
  else
    v72 = 0;
  if (*((unsigned __int8 *)v3 + 298) != v72)
  {
    *((_BYTE *)v3 + 298) = v72;
    v197 = *((_QWORD *)v3 + 9);
    v199 = *(unsigned __int16 *)(v197 + 177);
    v198 = v197 + 177;
    v200 = v199 | (*(unsigned __int8 *)(v198 + 2) << 16);
    if (v72)
      v201 = 0x100000;
    else
      v201 = 0;
    v202 = v200 & 0xFFEFFFFF;
    *(_WORD *)v198 = v202;
    *(_BYTE *)(v198 + 2) = (v202 | v201) >> 16;
    v57 = 1;
  }
  v73 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  v74 = *(unsigned __int8 *)(v73 + 46);
  if (v74 == 7)
  {
    v276 = WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing((WebCore::RenderEmbeddedObject *)v73);
    v73 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
    v74 = *(unsigned __int8 *)(v73 + 46);
    if (v276)
    {
      if (v74 != 7)
      {
        __break(0xC471u);
        JUMPOUT(0x19434E2D0);
      }
      v3 = (WebCore::RenderLayerBacking *)this;
      WebCore::RenderLayerBacking::updateConfiguration(WebCore::RenderLayer const*)::$_0::operator()((uint64_t)this, *(_QWORD *)(v73 + 232));
      goto LABEL_103;
    }
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  if (v74 != 48)
  {
LABEL_96:
    if ((*(_BYTE *)(v73 + 52) & 7) == 3 && (*(_BYTE *)(v73 + 53) & 4) != 0)
    {
      v110 = *(_QWORD **)(*(_QWORD *)(v73 + 24) + 8);
      v111 = (*(uint64_t (**)(_QWORD *))(*v110 + 192))(v110);
      if ((v111 & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19434DAC8);
      }
      v112 = v110[14];
      if (v112)
      {
        v113 = *(_QWORD *)(v112 + 8);
        if (v113)
        {
          if (*(_BYTE *)(v113 + 144))
          {
            v66 = *(void **)(v113 + 272);
            if (v66)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)v3 + 9) + 520))(*((_QWORD *)v3 + 9));
              goto LABEL_103;
            }
          }
        }
      }
    }
    v76 = *(unsigned __int8 **)(*((_QWORD *)v3 + 1) + 32);
    v77 = v76[46];
    if (v77 == 13)
    {
      v114 = WebCore::canvasCompositingStrategy((WebCore *)v76, (const WebCore::RenderObject *)v66);
      v76 = *(unsigned __int8 **)(*((_QWORD *)v3 + 1) + 32);
      if (v114 == 2)
      {
        v203 = WebCore::RenderElement::element((WebCore::RenderElement *)v76);
        v204 = *(_QWORD *)(WTF::downcast<WebCore::HTMLCanvasElement,WebCore::Element>(v203) + 248);
        if (v204)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v204 + 136))(v204, *((_QWORD *)v3 + 9));
LABEL_364:
        v57 = 1;
        goto LABEL_103;
      }
      v77 = v76[46];
    }
    if (v77 != 24)
      goto LABEL_103;
    v205 = (WebCore::HTMLModelElement *)WebCore::RenderElement::element((WebCore::RenderElement *)v76);
    v206 = (WebCore::HTMLModelElement *)WTF::downcast<WebCore::HTMLModelElement,WebCore::Element>((uint64_t)v205);
    if (WebCore::HTMLModelElement::usesPlatformLayer(v206))
    {
      v207 = *((_QWORD *)v3 + 9);
      v208 = WebCore::HTMLModelElement::platformLayer(v205);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v207 + 512))(v207, v208, 6);
    }
    else
    {
      WebCore::HTMLModelElement::model((uint64_t)v205, v305);
      if (v305[0])
      {
        v229 = *((_QWORD *)v3 + 9);
        isInteractive = WebCore::HTMLModelElement::isInteractive(v205);
        (*(void (**)(uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v229 + 560))(v229, v305, isInteractive ^ 1u);
        v232 = v305[0];
        v305[0] = 0;
        if (v232)
          WTF::RefCounted<WebCore::Model>::deref((uint64_t)v232, v231);
      }
    }
    WebCore::HTMLModelElement::sizeMayHaveChanged(v205);
    goto LABEL_364;
  }
  shouldDisplayVideo = WebCore::RenderVideo::shouldDisplayVideo((WebCore::RenderVideo *)v73);
  v73 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  if (!shouldDisplayVideo)
  {
    v3 = (WebCore::RenderLayerBacking *)this;
    goto LABEL_96;
  }
  v278 = (WebCore::HTMLMediaElement *)WebCore::RenderElement::element((WebCore::RenderElement *)v73);
  WTF::downcast<WebCore::HTMLVideoElement,WebCore::Element>((uint64_t)v278);
  if ((**(unsigned int (***)(WTF::StringImpl *))this[9])(this[9]) == 1
    && (v279 = *(_QWORD *)(*((_QWORD *)v278 + 5) + 8),
        (*(_QWORD *)(*(_QWORD *)(v279 + 680) + 704) & 0x1000000000000000) != 0)
    && (v282 = *(_QWORD *)(v279 + 528)) != 0
    && (v283 = *(_QWORD *)(v282 + 8)) != 0
    && (v284 = *(_QWORD *)(v283 + 24)) != 0
    && (v285 = *(_QWORD *)(v284 + 8)) != 0
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v285 + 48) + 16) + 1760))(*(_QWORD *)(*(_QWORD *)(v285 + 48) + 16)))
  {
    (*(void (**)(WTF::StringImpl *, WebCore::HTMLMediaElement *, uint64_t))(*(_QWORD *)this[9] + 536))(this[9], v278, 2);
  }
  else
  {
    v280 = this[9];
    v281 = WebCore::HTMLMediaElement::platformLayer(v278);
    (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)v280 + 512))(v280, v281, 2);
  }
  v3 = (WebCore::RenderLayerBacking *)this;
  WebCore::RenderLayerBacking::updateContentsRects((WebCore::RenderLayerBacking *)this);
LABEL_103:
  v78 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  v79 = *(_BYTE *)(v78 + 52);
  v80 = *(_BYTE *)(v78 + 53) & 4;
  if ((v79 & 7) != 3 || v80 == 0)
    goto LABEL_108;
  ++*(_DWORD *)(v78 + 16);
  v178 = WebCore::RenderLayerCompositor::attachWidgetContentLayersIfNecessary(v298, (WebCore::RenderWidget *)v78);
  if (v178 >= 0x100u)
  {
    v179 = *((_QWORD *)v3 + 1);
    *(_DWORD *)(v179 + 12) |= 0x40u;
    if ((*(_BYTE *)(v179 + 24) & 4) != 0)
    {
      v179 = *(_QWORD *)(v179 + 40);
      if (!v179)
      {
LABEL_473:
        v57 = 1;
        v3 = (WebCore::RenderLayerBacking *)this;
        goto LABEL_294;
      }
      v3 = (WebCore::RenderLayerBacking *)this;
LABEL_291:
      v57 = 1;
      while (1)
      {
        v180 = *(_DWORD *)(v179 + 12);
        if ((v180 & 2) != 0)
          break;
        *(_DWORD *)(v179 + 12) = v180 | 2;
        if ((*(_BYTE *)(v179 + 24) & 4) == 0)
        {
          while (1)
          {
            v179 = *(_QWORD *)(v179 + 40);
            if (!v179)
              goto LABEL_473;
            if ((*(_BYTE *)(v179 + 24) & 0x4A) != 0)
              goto LABEL_426;
          }
        }
        v179 = *(_QWORD *)(v179 + 40);
LABEL_426:
        v3 = (WebCore::RenderLayerBacking *)this;
        if (!v179)
          goto LABEL_294;
      }
    }
    else
    {
      while (1)
      {
        v179 = *(_QWORD *)(v179 + 40);
        if (!v179)
          break;
        if ((*(_BYTE *)(v179 + 24) & 0x4A) != 0)
          goto LABEL_291;
      }
    }
    v57 = 1;
  }
LABEL_294:
  v181 = *(_DWORD *)(v78 + 16);
  if (!v181)
  {
    __break(0xC471u);
    JUMPOUT(0x19434DF8CLL);
  }
  *(_DWORD *)(v78 + 16) = v181 - 1;
  v78 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
  v79 = *(_BYTE *)(v78 + 52);
  v80 = *(_BYTE *)(v78 + 53) & 4;
LABEL_108:
  if ((v79 & 7) == 3 && v80 != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v78 + 1696))(v78))
    {
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v3 + 9) + 384))(*((_QWORD *)v3 + 9), 1);
      WebCore::RenderLayerBacking::updateContentsRects(v3);
    }
  }
  v83 = *((_QWORD *)v3 + 1);
  v84 = *(_QWORD *)(v83 + 24);
  if ((v84 & 0x20) != 0 && (v84 & 0x10) != 0)
  {
    v85 = !WebCore::RenderLayerBacking::paintsIntoWindow(v3);
    v83 = *((_QWORD *)v3 + 1);
    v84 = *(_QWORD *)(v83 + 24);
  }
  else
  {
    v85 = 0;
  }
  if ((v84 & 1) != 0)
  {
    v108 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v83 + 32) + 24) + 8)
                                                           + 40)
                                               + 8)
                                   + 1944);
    v109 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v108 + 50);
    if (!v109)
    {
      v267 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v109 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v267, v108);
      v268 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v108 + 50);
      *((_QWORD *)v108 + 50) = v109;
      if (v268)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v268);
        WTF::fastFree(v269, v270);
        v109 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v108 + 50);
      }
      v3 = (WebCore::RenderLayerBacking *)this;
    }
    v85 = WebCore::RenderLayerCompositor::viewHasTransparentBackground(v109, 0) & v85;
  }
  v86 = (_BYTE *)*((_QWORD *)v3 + 9);
  if ((_DWORD)v85 == (v86[179] & 1))
  {
    if (!v57)
      return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v86 + 112))(v86, v85);
  }
  v235 = (_DWORD *)*v301;
  if (*v301)
  {
    if (*((_QWORD *)v3 + 21))
      v241 = 18;
    else
      v241 = 2;
    if (v235[43] != v241)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v235 + 320))(*v301);
      v235[43] = v241;
    }
    v236 = 1;
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  else
  {
    v236 = 3;
  }
  v237 = (_DWORD *)*v302;
  if (*v302)
  {
    if (v237[43] != 1)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v237 + 320))(*v302);
      v237[43] = 1;
    }
    v236 &= 2u;
  }
  v238 = (_DWORD *)*((_QWORD *)v3 + 21);
  if (v238)
  {
    if (*v301)
      v240 = 48;
    else
      v240 = 50;
    if (v238[43] != v240)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v238 + 320))(v238);
      v238[43] = v240;
    }
    v236 = v236 & 1 | 0x20;
    v3 = (WebCore::RenderLayerBacking *)this;
  }
  v239 = (_DWORD *)*((_QWORD *)v3 + 9);
  if (v239[43] != v236)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v239 + 320))(v239);
    v239[43] = v236;
  }
  return 1;
}

double WebCore::RenderLayerScrollableArea::paintScrollCorner(WebCore::RenderScrollbarPart **this, WebCore::GraphicsContext *a2, int32x2_t *a3, const WebCore::IntRect *a4)
{
  double result;
  int v9;
  signed int v10;
  int v12;
  int v13;
  int v16;
  WTF::StringImpl *v17;
  WebCore::RenderScrollbarPart *v18;
  int8x8_t v19;
  WebCore::ScrollbarTheme *hasOverlayScrollbars;
  uint64_t *v21;
  int32x4_t v22;
  int8x8_t v23;
  int32x2_t v24[4];
  int v25;
  int v26;
  int32x2_t v27;

  WebCore::RenderLayerScrollableArea::overflowControlsRects((WebCore::RenderLayerScrollableArea *)this, (uint64_t)v24);
  v24[1] = v27;
  v9 = a3->i32[0] + v25;
  v10 = a3->i32[1] + v26;
  v24[0] = (int32x2_t)__PAIR64__(v10, v9);
  if (v27.i32[0] >= 1 && v27.i32[1] >= 1)
  {
    v13 = *((_DWORD *)a4 + 2);
    v12 = *((_DWORD *)a4 + 3);
    if (v13 >= 1 && v12 >= 1 && v9 < *(_DWORD *)a4 + v13 && *(_DWORD *)a4 < v9 + v27.i32[0])
    {
      v16 = *((_DWORD *)a4 + 1);
      if (v10 < v16 + v12 && v16 < v10 + v27.i32[1])
      {
        if ((*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 56))(a2))
        {
          return WebCore::RenderLayerScrollableArea::updateScrollCornerStyle((WebCore::RenderLayerScrollableArea *)this, v17);
        }
        else
        {
          v18 = this[19];
          if (v18)
          {
            v19 = (int8x8_t)vcgt_s32(*a3, (int32x2_t)0xFE000000FE000000);
            v23 = vorr_s8((int8x8_t)(*(_QWORD *)&v19 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, *a3), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(*a3, 6uLL)), v19));
            WebCore::LayoutRect::LayoutRect((int8x8_t *)&v22, v24);
            WebCore::RenderScrollbarPart::paintIntoRect(v18, a2, (const WebCore::LayoutPoint *)&v23, &v22);
          }
          else
          {
            hasOverlayScrollbars = (WebCore::ScrollbarTheme *)WebCore::ScrollableArea::hasOverlayScrollbars((WebCore::ScrollableArea *)this);
            if ((hasOverlayScrollbars & 1) == 0)
            {
              v21 = WebCore::ScrollbarTheme::theme(hasOverlayScrollbars);
              (*(void (**)(uint64_t *, WebCore::RenderScrollbarPart **, WebCore::GraphicsContext *, int32x2_t *))(*v21 + 112))(v21, this, a2, v24);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::overflowControlsRects@<X0>(WebCore::RenderLayerScrollableArea *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t result;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  void *v51;
  int v52;
  void *v53;
  unint64_t v54;
  int v55;
  uint64_t *v56;
  int v57;
  unsigned int v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  const CGRect *v63;
  int v64;
  int v65;
  unsigned int v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  const CGRect *v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  CGRect v81;

  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 32);
  if ((*(_BYTE *)(v2 + 45) & 4) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19434E7E4);
  }
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 992))(*(_QWORD *)(*((_QWORD *)this + 12) + 32));
  v7 = *(_DWORD *)(v2 + 160);
  v8 = *(_DWORD *)(v2 + 164);
  v9 = __OFSUB__(v7, v6);
  v10 = v7 - v6;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v11 = v10;
  v9 = __OFSUB__(v11, HIDWORD(v4));
  v12 = v11 - HIDWORD(v4);
  v13 = (v11 >> 31) + 0x7FFFFFFF;
  if (v9)
    v12 = v13;
  v9 = __OFSUB__(v8, (_DWORD)v4);
  v14 = v8 - v4;
  v15 = (v8 >> 31) + 0x7FFFFFFF;
  if (v9)
    v14 = v15;
  v9 = __OFSUB__(v14, v5);
  v16 = v14 - v5;
  v17 = (v14 >> 31) + 0x7FFFFFFF;
  if (v9)
    v16 = v17;
  v18 = v6 + 63;
  if (v6 >= 0)
    v18 = v6;
  v79 = v18;
  v19 = v6 - (v18 & 0xFFFFFFC0);
  v20 = v4 + 63;
  if ((int)v4 >= 0)
    v20 = v4;
  v78 = v20;
  v21 = v4 - (v20 & 0xFFFFFFC0);
  v9 = __OFADD__(v19, v12);
  v22 = v19 + v12;
  if (v9)
    v23 = (v19 >> 31) + 0x7FFFFFFF;
  else
    v23 = v22;
  v9 = __OFADD__(v21, v16);
  v24 = v21 + v16;
  if (v9)
    v25 = (v21 >> 31) + 0x7FFFFFFF;
  else
    v25 = v24;
  v26 = v23 + 63;
  if (v23 >= 0)
    v26 = v23;
  v27 = v25 + 63;
  if (v25 >= 0)
    v27 = v25;
  v28 = *((_QWORD *)this + 16);
  if (v28)
  {
    v53 = *(void **)(v28 + 40);
    if (v53)
    {
      v77 = v27;
      v65 = v26;
      v73 = v21;
      v66 = v19;
      if (objc_msgSend(v53, "conformsToProtocol:", &unk_1EE342188))
        v53 = (void *)objc_msgSend(v53, "superview");
      objc_msgSend(v53, "frame");
      v81.origin.x = v67;
      v81.origin.y = v68;
      v81.size.width = v69;
      v81.size.height = v70;
      WebCore::enclosingIntRect(&v81, v71);
      v19 = v66;
      v21 = v73;
      v26 = v65;
      v27 = v77;
    }
    else
    {
      v54 = *(_QWORD *)(v28 + 56);
    }
    v74 = HIDWORD(v54);
  }
  else
  {
    LODWORD(v74) = 0;
  }
  v29 = *((_QWORD *)this + 17);
  if (v29)
  {
    v51 = *(void **)(v29 + 40);
    if (v51)
    {
      v76 = v27;
      v57 = v26;
      v72 = v21;
      v58 = v19;
      if (objc_msgSend(v51, "conformsToProtocol:", &unk_1EE342188))
        v51 = (void *)objc_msgSend(v51, "superview");
      objc_msgSend(v51, "frame");
      v81.origin.x = v59;
      v81.origin.y = v60;
      v81.size.width = v61;
      v81.size.height = v62;
      WebCore::enclosingIntRect(&v81, v63);
      LODWORD(v75) = v64;
      v19 = v58;
      v21 = v72;
      v26 = v57;
      v27 = v76;
    }
    else
    {
      v75 = *(_QWORD *)(v29 + 56);
    }
  }
  else
  {
    LODWORD(v75) = 0;
  }
  v30 = v21 + 32;
  v31 = v19 + 32;
  v32 = v26 >> 6;
  v33 = v23 - (v26 & 0xFFFFFFC0);
  v34 = v27 >> 6;
  v35 = v25 - (v27 & 0xFFFFFFC0);
  v36 = *((_QWORD *)this + 16);
  if (v36)
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 272))(v36) ^ 1;
  else
    v37 = 0;
  v38 = v35 + 32;
  result = *((_QWORD *)this + 17);
  v40 = v34 - (v30 >> 6);
  if (!result)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 151) & 0x38) == 0)
    {
      v45 = 0;
      v43 = 0;
      goto LABEL_37;
    }
    v41 = 0;
    v42 = v2 + 80;
LABEL_64:
    v44 = 0;
    v45 = 0;
    v43 = 0;
    v46 = 0;
    if ((v37 | v41) != 1)
      goto LABEL_38;
    goto LABEL_65;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  v41 = result ^ 1;
  v42 = v2 + 80;
  v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0x38000000;
  v44 = v43 == 0;
  if ((v37 & (result ^ 1) & 1) == 0)
  {
    if (!v43)
    {
      v45 = 0;
LABEL_37:
      v46 = 0;
      v44 = 1;
      goto LABEL_38;
    }
    goto LABEL_64;
  }
LABEL_65:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 40) + 586) == 2)
  {
    v45 = 0;
    v43 = 0;
    v46 = 0;
  }
  else
  {
    if ((_DWORD)v75)
      v43 = v75;
    else
      v43 = v74;
    if ((_DWORD)v74)
      v46 = v74;
    else
      v46 = v75;
    v45 = 1;
  }
LABEL_38:
  v47 = (v78 >> 6) + (v30 >> 6);
  v48 = (v79 >> 6) + (v31 >> 6);
  v49 = v32 - (v31 >> 6) + ((int)(v33 + 32) >> 6);
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v50 = v40 + (v38 >> 6);
  if (*((_QWORD *)this + 16))
  {
    *(_DWORD *)a2 = v48;
    *(_DWORD *)(a2 + 4) = v50 + v47 - v74;
    if (v45)
      v55 = v49 - v43;
    else
      v55 = v49;
    *(_DWORD *)(a2 + 8) = v55;
    *(_DWORD *)(a2 + 12) = v74 & ~((int)v74 >> 31);
  }
  if (*((_QWORD *)this + 17))
  {
    *(_DWORD *)(a2 + 16) = v49 + v48 - v75;
    *(_DWORD *)(a2 + 20) = v47;
    if (v45)
      v52 = v50 - v46;
    else
      v52 = v40 + (v38 >> 6);
    *(_DWORD *)(a2 + 24) = v75 & ~((int)v75 >> 31);
    *(_DWORD *)(a2 + 28) = v52;
  }
  if (v45)
  {
    *(_QWORD *)(a2 + 32) = (v49 + v48 - v43) | ((unint64_t)(v50 + v47 - v46) << 32);
    *(_QWORD *)(a2 + 40) = v43 | (unint64_t)(v46 << 32);
    if (!v44)
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 32);
  }
  else if (!v44)
  {
    v56 = WebCore::ScrollbarTheme::theme((WebCore::ScrollbarTheme *)result);
    result = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v56 + 40))(v56, 0, 1);
    *(_QWORD *)(a2 + 48) = (v49 + v48 - result) | ((unint64_t)(v50 + v47 - result) << 32);
    *(_QWORD *)(a2 + 56) = result | ((unint64_t)result << 32);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setReplicatedByLayer(uint64_t result, _DWORD **a2)
{
  uint64_t v2;

  if (*a2 != *(_DWORD **)(result + 216))
  {
    v2 = result;
    WebCore::GraphicsLayer::setReplicatedByLayer(result, a2);
    WebCore::GraphicsLayerCA::noteSublayersChanged(v2, 0);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 0x200000, 0);
  }
  return result;
}

uint64_t WebCore::RenderLayerBacking::updateMaskingLayer(WebCore::RenderLayerBacking *this, int a2, int a3)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  WTF::StringImpl *v24;
  _DWORD *v25;

  if ((a2 & 1) != 0 || a3)
  {
    if (a2)
    {
      if ((a3 & 1) != 0)
        v6 = 12;
      else
        v6 = 4;
    }
    else if (!a3
           || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 88) + 40)
                                    + 264)
                        + 12)
           && WebCore::GraphicsLayer::supportsLayerType(6u))
    {
      v6 = 0;
    }
    else
    {
      v6 = 8;
    }
    v23 = v6;
    if (v6)
      v9 = 0;
    else
      v9 = 6;
    v11 = (_DWORD **)((char *)this + 112);
    v10 = (unsigned __int8 *)*((_QWORD *)this + 14);
    if (!v10)
      goto LABEL_27;
    if (v10[169] == (_DWORD)v9)
      goto LABEL_22;
    v12 = *((_QWORD *)this + 9);
    v25 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v12 + 104))(v12, &v25);
    v13 = v25;
    v25 = 0;
    if (v13)
    {
      if (v13[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
      else
        --v13[2];
    }
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, *((const WebCore::GraphicsLayer **)this + 14));
    WebCore::GraphicsLayer::clear((_QWORD *)this + 14);
    v10 = (unsigned __int8 *)*((_QWORD *)this + 14);
    if (v10)
    {
LABEL_22:
      v4 = 0;
    }
    else
    {
LABEL_27:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v25, (uint64_t)this, (uint64_t)&v24, v9);
      v15 = (uint64_t)v25;
      v25 = 0;
      v16 = (_DWORD *)*((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v15;
      if (v16)
      {
        if (v16[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
          v22 = v25;
          v25 = 0;
          if (v22)
          {
            if (v22[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
            else
              --v22[2];
          }
        }
        else
        {
          --v16[2];
          v25 = 0;
        }
      }
      v17 = v24;
      v24 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v14);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *((_QWORD *)this + 9);
      v19 = *((_QWORD *)this + 14);
      if (v19)
        ++*(_DWORD *)(v19 + 8);
      v25 = (_DWORD *)v19;
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v18 + 104))(v18, &v25);
      v20 = v25;
      v25 = 0;
      if (v20)
      {
        if (v20[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
        else
          --v20[2];
      }
      WebCore::RenderLayer::setNeedsCompositingGeometryUpdate(*((_QWORD *)this + 1));
      v10 = (unsigned __int8 *)*((_QWORD *)this + 14);
      v4 = 1;
    }
    (*(void (**)(unsigned __int8 *, BOOL))(*(_QWORD *)v10 + 216))(v10, v23 != 0);
    v21 = *v11;
    if (v21[43] != v23)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 320))(v21);
      v21[43] = v23;
    }
  }
  else if (*((_QWORD *)this + 14))
  {
    v7 = *((_QWORD *)this + 9);
    v25 = 0;
    (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v7 + 104))(v7, &v25);
    v8 = v25;
    v25 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
      else
        --v8[2];
    }
    WebCore::RenderLayerBacking::willDestroyLayer((uint64_t)this, *((const WebCore::GraphicsLayer **)this + 14));
    WebCore::GraphicsLayer::clear((_QWORD *)this + 14);
    return 1;
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t WebCore::RenderLayerBacking::updateOverflowControlsLayers(WebCore::RenderLayerBacking *this, int a2, int a3, int a4)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = WebCore::RenderLayerBacking::updateOverflowControlsLayers(BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)this, (uint64_t *)this + 19, a3 | a4 | a2, 0, (uint64_t)"overflow controls container", 28);
  v9 = WebCore::RenderLayerBacking::updateOverflowControlsLayers(BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)this, (uint64_t *)this + 16, a2, 1, (uint64_t)"horizontal scrollbar", 21);
  v10 = WebCore::RenderLayerBacking::updateOverflowControlsLayers(BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)this, (uint64_t *)this + 17, a3, 1, (uint64_t)"vertical scrollbar", 19);
  v11 = WebCore::RenderLayerBacking::updateOverflowControlsLayers(BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)this, (uint64_t *)this + 18, a4, 1, (uint64_t)"scroll corner", 14);
  v12 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (v12)
  {
    v13 = *(_QWORD *)(*((_QWORD *)this + 1) + 264);
    if (v13)
    {
      v15 = v12;
      if (v9)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 456))(v12, v13, 0);
      if (v10)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 456))(v15, v13, 1);
    }
  }
  return v10 | v9 | v8 | v11;
}

uint64_t WebCore::RenderLayerBacking::updateScrollingLayers(WebCore::RenderLayerBacking *this, int a2)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebCore::RenderView *v20;
  WebCore::RenderLayerCompositor *v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  WebCore::RenderView *v25;
  WebCore::RenderLayerCompositor *v26;
  WTF **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::RenderLayerCompositor *v36;
  WTF *v37;
  void *v38;
  WebCore::RenderLayerCompositor *v39;
  WTF *v40;
  void *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;

  v3 = (_DWORD *)((char *)this + 160);
  v2 = *((_QWORD *)this + 20);
  v4 = (v2 == 0) ^ a2;
  if ((v4 & 1) == 0)
  {
    if (v2)
    {
      v20 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v21 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
      if (!v21)
      {
        v21 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v21, v20);
        v36 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
        *((_QWORD *)v20 + 50) = v21;
        if (v36)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v36);
          WTF::fastFree(v37, v38);
          v21 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v20 + 50);
        }
      }
      v22 = (_QWORD *)*((_QWORD *)this + 1);
      if (!WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v21 + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                          + 8)
                                                                              + 24)
                                                                  + 8)))
      {
        v29 = (_QWORD *)*((_QWORD *)v21 + 42);
        if (v29)
        {
          if (WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>((uint64_t)(v29 + 1), v22))
          {
            (*(void (**)(_QWORD))(**((_QWORD **)this + 20) + 584))(*((_QWORD *)this + 20));
            (*(void (**)(_QWORD))(**((_QWORD **)this + 21) + 584))(*((_QWORD *)this + 21));
            v30 = v22[4];
            if ((*(_BYTE *)(v30 + 45) & 1) == 0)
            {
              v31 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8);
              if (v31)
              {
                if ((*(_WORD *)(v31 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19434F318);
                }
              }
            }
            (*(void (**)(_QWORD))(*(_QWORD *)*v29 + 736))(*v29);
          }
        }
      }
      v23 = *(_BYTE **)v3;
      if (*(_QWORD *)v3 && !v23[169] && (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v23 + 832))(v23))
      {
        v34 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8)
                                                                                              + 40)
                                                                                  + 8)
                                                                      + 1944));
        --*(_DWORD *)(v34 + 204);
      }
      v24 = (_BYTE *)*((_QWORD *)this + 21);
      if (v24 && !v24[169] && (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v24 + 832))(v24))
      {
        v35 = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8)
                                                                                              + 40)
                                                                                  + 8)
                                                                      + 1944));
        --*(_DWORD *)(v35 + 204);
      }
      WebCore::GraphicsLayer::unparentAndClear(v3);
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 42);
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v42 = v43;
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v43, (uint64_t)this, (uint64_t)&v42, 4);
      v8 = v43;
      v43 = 0;
      v9 = (_DWORD *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v8;
      if (v9)
      {
        if (v9[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
          v32 = v43;
          v43 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 16))(v32);
            else
              --*((_DWORD *)v32 + 2);
          }
        }
        else
        {
          --v9[2];
          v43 = 0;
        }
      }
      v10 = v42;
      v42 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v7);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *(_DWORD **)v3;
      if (*(_DWORD *)(*(_QWORD *)v3 + 172))
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v11 + 320))(*(_QWORD *)v3);
        v11[43] = 0;
        v11 = *(_DWORD **)v3;
      }
      (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v11 + 216))(v11, 0);
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 208))(*((_QWORD *)this + 20), 1);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::RenderLayerBacking::createGraphicsLayer((uint64_t *)&v43, (uint64_t)this, (uint64_t)&v42, 5);
      v13 = v43;
      v43 = 0;
      v14 = (_DWORD *)*((_QWORD *)this + 21);
      *((_QWORD *)this + 21) = v13;
      if (v14)
      {
        if (v14[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
          v33 = v43;
          v43 = 0;
          if (v33)
          {
            if (*((_DWORD *)v33 + 2) == 1)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 16))(v33);
            else
              --*((_DWORD *)v33 + 2);
          }
        }
        else
        {
          --v14[2];
          v43 = 0;
        }
      }
      v15 = v42;
      v42 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v12);
        else
          *(_DWORD *)v15 -= 2;
      }
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 21) + 216))(*((_QWORD *)this + 21), 1);
      v16 = *((_QWORD *)this + 21);
      v44 = 0;
      v43 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v16 + 152))(v16, &v43);
      v17 = *((_QWORD *)this + 20);
      v18 = (WTF::StringImpl *)*((_QWORD *)this + 21);
      ++*((_DWORD *)v18 + 2);
      v43 = v18;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 64))(v17, &v43);
      v19 = v43;
      v43 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 16))(v19);
        else
          --*((_DWORD *)v19 + 2);
      }
    }
    if (*(_QWORD *)v3)
    {
      v25 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v26 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v25 + 50);
      if (!v26)
      {
        v26 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v26, v25);
        v39 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v25 + 50);
        *((_QWORD *)v25 + 50) = v26;
        if (v39)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v39);
          WTF::fastFree(v40, v41);
          v26 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v25 + 50);
        }
      }
      v27 = (WTF **)*((_QWORD *)this + 1);
      if (!WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                          + 8)
                                                                              + 24)
                                                                  + 8)))
      {
        v28 = *((_QWORD *)v26 + 42);
        if (v28)
          WTF::WeakHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderLayer>(v28 + 8, v27, (uint64_t)&v43);
      }
    }
  }
  return v4 ^ 1u;
}

uint64_t WebCore::Widget::setFrameRect(WebCore::Widget *this, const WebCore::IntRect *a2)
{
  void *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t result;
  NSRect v13;
  NSRect v14;

  *((_OWORD *)this + 3) = *(_OWORD *)a2;
  v3 = (void *)*((_QWORD *)this + 5);
  if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
    v3 = (void *)objc_msgSend(v3, "superview");
  v4 = *(_DWORD *)a2;
  v5 = *((_DWORD *)a2 + 1);
  v7 = *((_DWORD *)a2 + 2);
  v6 = *((_DWORD *)a2 + 3);
  objc_msgSend(v3, "frame");
  v14.origin.x = v8;
  v14.origin.y = v9;
  v14.size.width = v10;
  v14.size.height = v11;
  v13.origin.x = (double)v4;
  v13.origin.y = (double)v5;
  v13.size.width = (double)v7;
  v13.size.height = (double)v6;
  result = NSEqualRects(v13, v14);
  if ((result & 1) == 0)
  {
    objc_msgSend(v3, "setFrame:", (double)v4, (double)v5, (double)v7, (double)v6);
    return objc_msgSend(v3, "setNeedsDisplay:", 0);
  }
  return result;
}

void sub_19434F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  NSException *v20;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v20 = (NSException *)objc_begin_catch(exception_object);
  ReportBlockedObjCException(v20);
  objc_end_catch();
}

uint64_t WebCore::GraphicsLayerCA::setBackgroundColor(uint64_t this, const WebCore::Color *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  const WebCore::Color *v7;
  __int128 v8;
  __int128 v9;

  v2 = this;
  v3 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      v7 = a2;
      v9 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v8 = *(_OWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 4);
      this = WebCore::operator==<float,4ul>((float *)&v9, (float *)&v8);
      if ((_DWORD)this && (v6 = *(_QWORD *)(v2 + 120), HIBYTE(v6) == HIBYTE(*(_QWORD *)v7)))
      {
        a2 = v7;
        if (BYTE6(v6) == BYTE6(*(_QWORD *)v7))
          return this;
      }
      else
      {
        a2 = v7;
      }
    }
LABEL_6:
    WebCore::GraphicsLayer::setBackgroundColor(v2, a2);
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(v2, 512, 0);
  }
  if (v3 != v4 || (v4 & 0x8000000000000) != 0)
    goto LABEL_6;
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setContentsRectClipsDescendants(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t i;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x80) == 0) ^ a2) & 1) == 0)
  {
    v4 = a2 ? 128 : 0;
    *(_BYTE *)(this + 179) = (v3 & 0xFFFFFF7F) >> 16;
    *(_WORD *)(this + 177) = v3 & 0xFF7F | v4;
    if ((v3 & 1) == 0)
    {
      v5 = *(_QWORD *)(this + 616);
      *(_QWORD *)(this + 616) = v5 | 0x40004;
      if (!*(_BYTE *)(this + 889))
      {
        for (i = *(_QWORD *)(this + 200); i; i = *(_QWORD *)(i + 200))
        {
          if ((*(_BYTE *)(i + 890) & 0x40) != 0)
            break;
          *(_BYTE *)(i + 890) |= 0x40u;
        }
      }
      if (!v5)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 24) + 40))(*(_QWORD *)(this + 24), this);
    }
  }
  return this;
}

uint64_t WebCore::RenderLayerBacking::willDestroyLayer(uint64_t this, const WebCore::GraphicsLayer *a2)
{
  uint64_t v2;

  if (a2 && !*((_BYTE *)a2 + 169))
  {
    v2 = this;
    this = (*(uint64_t (**)(const WebCore::GraphicsLayer *))(*(_QWORD *)a2 + 832))(a2);
    if (this)
    {
      this = WebCore::RenderView::compositor(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 32) + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 1944));
      --*(_DWORD *)(this + 204);
    }
  }
  return this;
}

uint64_t WebCore::GCController::GCController(void)::$_0::operator()()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E3392860;
  v2 = v0;
  PAL::registerNotifyCallback("com.apple.WebKit.dumpGCHeap", 28, (uint64_t *)&v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::BackForwardCache::BackForwardCache(void)::$_0::operator()()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E33AF1B8;
  v2 = v0;
  PAL::registerNotifyCallback("com.apple.WebKit.showBackForwardCache", 38, (uint64_t *)&v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::Page::platformInitialize(void)::$_0::operator()()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E32EE8E0;
  v2 = v0;
  PAL::registerNotifyCallback("com.apple.WebKit.showAllDocuments", 34, (uint64_t *)&v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19434F784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::MemoryCache::MemoryCache(void)::$_0::operator()()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  v0 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v0 = off_1E33F8F70;
  v2 = v0;
  PAL::registerNotifyCallback("com.apple.WebKit.showMemoryCache", 33, (uint64_t *)&v2);
  result = (uint64_t)v2;
  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void PAL::registerNotifyCallback(const char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int out_token;

  out_token = 0;
  v4 = *a3;
  *a3 = 0;
  v5 = malloc_type_malloc(0x28uLL, 0x10E0040274B6D37uLL);
  *v5 = MEMORY[0x1E0C809A0];
  v5[1] = 50331650;
  v5[2] = WTF::BlockPtr<void ()(int)>::fromCallable<PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0>(PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0)::{lambda(void *,int)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(int)>::fromCallable<PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0>(PAL::registerNotifyCallback(WTF::ASCIILiteral,WTF::Function<void ()(void)> &&)::$_0)::descriptor;
  v5[4] = v4;
  notify_register_dispatch(a1, &out_token, MEMORY[0x1E0C80D38], v5);
  _Block_release(v5);
}

WTF::StringImpl *WebCore::setLocalizedDeviceModel(WTF::StringImpl *this, const WTF::String *a2)
{
  _DWORD *v2;

  {
    v2 = *(_DWORD **)this;
    if (byte_1ECE88A68)
    {
      if (v2)
        *v2 += 2;
      this = (WTF::StringImpl *)WebCore::cachedLocalizedDeviceModel(void)::deviceModel;
      WebCore::cachedLocalizedDeviceModel(void)::deviceModel = (uint64_t)v2;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    }
  }
  else
  {
    LOBYTE(WebCore::cachedLocalizedDeviceModel(void)::deviceModel) = 0;
    v2 = *(_DWORD **)this;
  }
  if (v2)
    *v2 += 2;
  WebCore::cachedLocalizedDeviceModel(void)::deviceModel = (uint64_t)v2;
  byte_1ECE88A68 = 1;
  return this;
}

void WebCore::RenderWidget::paint(WebCore::Widget **this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  WebCore::Widget *v13;
  int v14;
  char v15;
  int v16;
  WebCore::RenderStyle *v17;
  WebCore::Element *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  WebCore::Widget *v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  char v41;
  WebCore::RegionContext *v42;
  WebCore::Widget *v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  WebCore::LocalFrameView *v56;
  char v57;
  uint64_t *v58;
  int v59;
  int v60;
  WebCore::RenderLayer *v61;
  uint64_t v62;
  uint64_t v63;
  WebCore::GraphicsContext *v64;
  int32x2_t v65;
  int32x2_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  CGFloat v70;
  unint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  WebCore::Widget *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WebCore::SecurityOrigin *v92;
  WebCore::SecurityOrigin *v93;
  WTF::StringImpl *v94;
  const WebCore::SecurityOrigin *v95;
  uint64_t v96;
  const WebCore::LayoutRect *v97;
  unsigned int v98;
  __int32 v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  void *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  WebCore::ContainerNode *v111;
  int v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat v115;
  CGFloat v116;
  const CGRect *v117;
  char v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  float32x4_t v122;
  int32x4_t v123;
  CGFloat v124;
  CGRect v125;
  double v126;
  double v127;

  if (!WebCore::RenderReplaced::shouldPaint((WebCore::RenderReplaced *)this, a2, a3)
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 72))(*((_QWORD *)a2 + 10)) & 1) != 0)
  {
    return;
  }
  v7 = *((_DWORD *)this + 38);
  v6 = *((_DWORD *)this + 39);
  v8 = *((_DWORD *)a3 + 1);
  v9 = __OFADD__(*(_DWORD *)a3, v7);
  LODWORD(v10) = *(_DWORD *)a3 + v7;
  if (v9)
    v10 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v10 = v10;
  v9 = __OFADD__(v8, v6);
  LODWORD(v11) = v8 + v6;
  if (v9)
    v11 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v11 = v11;
  *(_QWORD *)&v124 = v10 | (v11 << 32);
  if ((*((_BYTE *)this + 23) & 0x60) != 0)
  {
    v76 = *((unsigned __int16 *)a2 + 8);
    if (v76 == 8 || v76 == 128)
      (*((void (**)(WebCore::Widget **, WebCore::PaintInfo *, CGFloat *))*this + 182))(this, a2, &v124);
  }
  v12 = *((unsigned __int16 *)a2 + 8);
  switch(v12)
  {
    case 16:
      goto LABEL_92;
    case 1024:
      (*((void (**)(WebCore::Widget **, WebCore::PaintInfo *, CGFloat *))*this + 183))(this, a2, &v124);
      return;
    case 64:
LABEL_92:
      if ((*(_BYTE *)(*((_QWORD *)this[11] + 2) + 52) & 0xE) != 0
        && WebCore::RenderStyle::outlineWidth((WebCore::RenderStyle *)(this + 10)) > 0.0)
      {
        goto LABEL_93;
      }
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
        v68 = *((_QWORD *)this[3] + 1);
        if (v68)
        {
          if ((*(_WORD *)(v68 + 28) & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19434FFF4);
          }
          if ((*(_WORD *)(v68 + 30) & 1) != 0)
          {
            v69 = *(_QWORD *)(*(_QWORD *)(v68 + 40) + 8);
            if (*(_BYTE *)(v69 + 3382)
              || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v69 + 1944) + 248) + 1149) & 0x20) != 0)
            {
LABEL_93:
              v70 = *((double *)this + 20);
              v125.origin.x = v124;
              v125.origin.y = v70;
              WebCore::RenderElement::paintOutline((WebCore::RenderElement *)this, a2, (const WebCore::LayoutRect *)&v125);
            }
          }
        }
      }
      break;
  }
  v13 = this[29];
  if (v13)
  {
    v14 = (*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v13 + 72))(this[29]);
    v15 = 0;
    v16 = *((unsigned __int16 *)a2 + 8);
    if (v14 && v16 == 4096)
    {
      v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 43) + 8) + 328) + 296);
      if (v79)
        v79 = *(_QWORD *)(v79 + 1944);
      if ((*((_QWORD *)v13 + 48) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*((_QWORD *)v13 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || v79 && (*(_BYTE *)(v79 + 20) & 0xF8) != 0
        || (v80 = *((_QWORD *)v13 + 58)) != 0 && *(_QWORD *)(v80 + 8))
      {
        LOBYTE(v81) = 1;
      }
      else
      {
        v81 = *((_DWORD *)v13 + 122);
        if (v81)
          LOBYTE(v81) = *((_BYTE *)v13 + 478) != 0;
      }
      v15 = v81 ^ 1;
      v16 = 4096;
    }
  }
  else
  {
    v15 = 0;
    v16 = *((unsigned __int16 *)a2 + 8);
  }
  if ((v15 & 1) == 0 && v16 != 8)
    return;
  v17 = (WebCore::RenderStyle *)(this + 10);
  if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(this + 10)))
  {
    v85 = (uint64_t)this[20];
    *(CGFloat *)v123.i64 = v124;
    v123.i64[1] = v85;
    if ((int)v85 < 1 || SHIDWORD(v85) < 1)
      return;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 96))(*((_QWORD *)a2 + 10), 1);
    WebCore::RenderBoxModelObject::roundedContentBoxRect((WebCore::RenderBoxModelObject *)this, (const WebCore::LayoutRect *)&v123, 1, 1, (uint64_t)&v122);
    WebCore::FloatRoundedRect::FloatRoundedRect((uint64_t)&v125, (uint64_t)&v122);
    v86 = *((_QWORD *)a2 + 10);
    v122 = vmulq_f32(vcvtq_f32_s32(v123), (float32x4_t)vdupq_n_s32(0x3C800000u));
    WebCore::BackgroundPainter::clipRoundedInnerRect(v86, (float32x2_t *)&v122, (float32x2_t *)&v125);
  }
  if (this[29])
  {
    if ((*((_BYTE *)this + 45) & 1) != 0)
    {
      v18 = 0;
    }
    else
    {
      v18 = (WebCore::Element *)*((_QWORD *)this[3] + 1);
      if (v18 && (*((_WORD *)v18 + 14) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19434FFD4);
      }
    }
    if ((v19 = (*(_DWORD *)(*((_QWORD *)this[11] + 5) + 636) >> 18) & 3) == 0
      || (v118 = *((_BYTE *)this + 96), (v118 & 0x1F) != 0xD) && (v118 & 0x1Eu) - 14 > 0xFFFFFFF5
      || v19 != 2 && (!v18 || WebCore::Element::isRelevantToUser(v18))
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 1944)
                              + 248)
                  + 479))
    {
      if (!*((_BYTE *)a2 + 56))
        goto LABEL_26;
      v87 = (_QWORD *)*((_QWORD *)this[3] + 1);
      if (((*(uint64_t (**)(_QWORD *))(*v87 + 192))(v87) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194350390);
      }
      v89 = v87[14];
      if (!v89
        || (v90 = *(_QWORD *)(v89 + 8)) == 0
        || *(_BYTE *)(v90 + 144)
        || (v91 = *(_QWORD *)(v90 + 296)) == 0
        || (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 192), v88), v93 = v92, WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v91 + 192), v94), WebCore::SecurityOrigin::isSameOriginDomain(v93, v95)))
      {
LABEL_26:
        v21 = *((_DWORD *)this + 38);
        v20 = *((_DWORD *)this + 39);
        v22 = *(_DWORD *)a3 + v21;
        if (__OFADD__(*(_DWORD *)a3, v21))
          v22 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
        v23 = *((_DWORD *)a3 + 1);
        v24 = v23 + v20;
        if (__OFADD__(v23, v20))
          v24 = (v23 >> 31) + 0x7FFFFFFF;
        v25 = WebCore::RenderBox::contentBoxRect((WebCore::RenderBox *)this);
        v26 = v22 + v25;
        if (__OFADD__(v22, (_DWORD)v25))
          v26 = (v22 >> 31) + 0x7FFFFFFF;
        v27 = v24 + HIDWORD(v25);
        if (__OFADD__(v24, HIDWORD(v25)))
          v27 = (v24 >> 31) + 0x7FFFFFFF;
        if (v26 >= 0)
          v28 = v26;
        else
          v28 = v26 + 63;
        if (v27 >= 0)
          v29 = v27;
        else
          v29 = v27 + 63;
        v31 = *(_DWORD *)a2;
        v30 = *((_DWORD *)a2 + 1);
        v32 = *((_QWORD *)a2 + 1);
        if ((*((_BYTE *)a2 + 21) & 8) == 0)
        {
          v120 = 0;
LABEL_42:
          v33 = this[29];
          v34 = (void *)*((_QWORD *)v33 + 5);
          if (v34)
          {
            v119 = v32;
            if (objc_msgSend(v34, "conformsToProtocol:", &unk_1EE342188))
              v34 = (void *)objc_msgSend(v34, "superview");
            objc_msgSend(v34, "frame");
            v125.origin.x = v113;
            v125.origin.y = v114;
            v125.size.width = v115;
            v125.size.height = v116;
            v35 = WebCore::enclosingIntRect(&v125, v117);
            v32 = v119;
          }
          else
          {
            v35 = *((_QWORD *)v33 + 6);
          }
          v36 = ((int)(v26 - (v28 & 0xFFFFFFC0) + 32) >> 6) + (v28 >> 6);
          v37 = ((int)(v27 - (v29 & 0xFFFFFFC0) + 32) >> 6) + (v29 >> 6);
          v38 = v37 - HIDWORD(v35);
          v39 = v36 - v35;
          v40 = v36 == (_DWORD)v35 && v37 == HIDWORD(v35);
          v41 = v40;
          if (!v40)
          {
            v71 = v32;
            (*(void (**)(_QWORD, float, float))(**((_QWORD **)a2 + 10) + 648))(*((_QWORD *)a2 + 10), (float)v39, (float)v38);
            if (v39 <= 0x2000000)
              v72 = -64 * v39;
            else
              v72 = 0x80000000;
            if (v39 >= -33554431)
              v73 = v72;
            else
              v73 = 0x7FFFFFFF;
            if (v38 <= 0x2000000)
              v74 = -64 * v38;
            else
              v74 = 0x80000000;
            if (v38 < -33554431)
              v74 = 0x7FFFFFFF;
            if (__OFADD__(v31, v73))
              v31 = (v31 >> 31) + 0x7FFFFFFF;
            else
              v31 += v73;
            v9 = __OFADD__(v30, v74);
            v75 = v30 + v74;
            v32 = v71;
            if (v9)
              v30 = (v30 >> 31) + 0x7FFFFFFF;
            else
              v30 = v75;
          }
          v42 = (WebCore::RegionContext *)*((_QWORD *)a2 + 9);
          if (v42)
          {
            v125 = *(CGRect *)ymmword_1969FD398;
            v126 = (float)v36;
            v127 = (float)v37;
            v77 = v32;
            WebCore::RegionContext::pushTransform(v42, (const WebCore::AffineTransform *)&v125);
            v32 = v77;
          }
          v43 = this[29];
          if (v31 >= 0)
            v44 = v31;
          else
            v44 = v31 + 63;
          v45 = v31 - (v44 & 0xFFFFFFC0);
          if (v30 >= 0)
            v46 = v30;
          else
            v46 = v30 + 63;
          v47 = v30 - (v46 & 0xFFFFFFC0);
          v48 = HIDWORD(v32);
          v49 = v45 + v32;
          if (__OFADD__(v45, (_DWORD)v32))
            v49 = (v45 >> 31) + 0x7FFFFFFF;
          v17 = (WebCore::RenderStyle *)(this + 10);
          v50 = v44 >> 6;
          v51 = v46 >> 6;
          v52 = v47 + v48;
          if (__OFADD__(v47, (_DWORD)v48))
            v52 = (v47 >> 31) + 0x7FFFFFFF;
          v53 = v47 + 32;
          v54 = v45 + 32;
          LODWORD(v125.origin.x) = v50 + (v54 >> 6);
          HIDWORD(v125.origin.x) = v51 + (v53 >> 6);
          LODWORD(v125.origin.y) = v49 / 64 - (v54 >> 6) + ((int)(v49 - (v50 & 0xFFFFFFC0) + 32) >> 6);
          HIDWORD(v125.origin.y) = v52 / 64 - (v53 >> 6) + ((int)(v52 - (v49 & 0xFFFFFFC0) + 32) >> 6);
          (*(void (**)(WebCore::Widget *))(*(_QWORD *)v43 + 24))(v43);
          v55 = *((_QWORD *)a2 + 9);
          if (v55)
          {
            v78 = *(_DWORD *)(v55 + 28);
            if (v78)
              *(_DWORD *)(v55 + 28) = v78 - 1;
          }
          if ((v41 & 1) == 0)
            (*(void (**)(_QWORD, float, float))(**((_QWORD **)a2 + 10) + 648))(*((_QWORD *)a2 + 10), (float)-v39, (float)-v38);
          v56 = this[29];
          if (v56)
          {
            ++*((_DWORD *)v56 + 2);
            if (((*(uint64_t (**)(WebCore::LocalFrameView *))(*(_QWORD *)v56 + 72))(v56) & 1) != 0)
            {
              v57 = WebCore::LocalFrameView::useSlowRepaints(v56, 0);
              v58 = (uint64_t *)*((_QWORD *)a2 + 5);
              if (v58 && (v57 & 1) == 0)
              {
                v123.i64[0] = (uint64_t)(this + 27);
                v122.i64[0] = WebCore::Widget::frameRect(this[29]);
                v122.i64[1] = v109;
                WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::inlineSet<WebCore::OverlapTestRequestClient *,WebCore::IntRect>(&v125, v58, v123.i64, &v122);
              }
              if ((*((_BYTE *)a2 + 21) & 8) != 0)
                *((_DWORD *)v56 + 287) = v120;
            }
            if (*((_DWORD *)v56 + 2) == 1)
              (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v56 + 8))(v56);
            else
              --*((_DWORD *)v56 + 2);
          }
          goto LABEL_76;
        }
        v82 = *((_QWORD *)a2 + 1);
        v83 = this[29];
        if (v83)
        {
          ++*((_DWORD *)v83 + 2);
          if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v83 + 72))(v83) & 1) != 0)
          {
            v120 = *((_DWORD *)v83 + 287);
            *((_DWORD *)v83 + 287) = v120 | 0x800;
            v84 = *((_DWORD *)v83 + 2) - 1;
            if (*((_DWORD *)v83 + 2) == 1)
            {
              (*(void (**)(WebCore::Widget *))(*(_QWORD *)v83 + 8))(v83);
              goto LABEL_130;
            }
LABEL_129:
            *((_DWORD *)v83 + 2) = v84;
LABEL_130:
            v32 = v82;
            goto LABEL_42;
          }
          v84 = *((_DWORD *)v83 + 2) - 1;
          if (*((_DWORD *)v83 + 2) != 1)
          {
            v120 = 0;
            goto LABEL_129;
          }
          (*(void (**)(WebCore::Widget *))(*(_QWORD *)v83 + 8))(v83);
        }
        v120 = 0;
        goto LABEL_130;
      }
    }
  }
LABEL_76:
  if (WebCore::RenderStyle::hasBorderRadius(v17))
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 10) + 104))(*((_QWORD *)a2 + 10), 1);
  v59 = *((unsigned __int16 *)a2 + 8);
  if (v59 != 4096 && v59 != 0x2000)
  {
    v60 = (*((_DWORD *)this + 5) >> 25) & 7;
    if (!v60)
    {
LABEL_81:
      if ((*((_BYTE *)this + 21) & 0x80) != 0)
      {
        v61 = this[18];
        v62 = *((_QWORD *)v61 + 4);
        if (((*(_BYTE *)(v62 + 22) & 1) != 0 || *(_BYTE *)(v62 + 46) == 14)
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v62 + 88) + 32) + 151) & 0x38) != 0)
        {
          v63 = WebCore::RenderLayer::scrollableArea(v61);
          v64 = (WebCore::GraphicsContext *)*((_QWORD *)a2 + 10);
          v65 = (int32x2_t)vsra_n_u32(*(uint32x2_t *)&v124, (uint32x2_t)vcltz_s32(*(int32x2_t *)&v124), 0x1AuLL);
          v66 = vsra_n_s32(vshr_n_s32(vadd_s32(vsub_s32(*(int32x2_t *)&v124, (int32x2_t)(*(_QWORD *)&v65 & 0xFFFFFFC0FFFFFFC0)), (int32x2_t)0x2000000020), 6uLL), v65, 6uLL);
          v67 = (int8x8_t)vcgt_s32(v66, (int32x2_t)0xFE000000FE000000);
          *(int8x8_t *)&v125.origin.x = vorr_s8((int8x8_t)(*(_QWORD *)&v67 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v66), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v66, 6uLL)), v67));
          WebCore::RenderLayerScrollableArea::paintResizer(v63, v64, (const WebCore::LayoutPoint *)&v125, a2);
        }
      }
      return;
    }
    if (v60 != 2)
    {
      v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 1944);
      v108 = *(_DWORD *)(v107 + 304);
      if (v60 == 1)
      {
        if (v108)
          goto LABEL_81;
      }
      else
      {
        v110 = *(_DWORD *)(v107 + 308);
        if (*(_QWORD *)(WebCore::RenderElement::element((WebCore::RenderElement *)this) + 80))
        {
          v111 = (WebCore::ContainerNode *)WebCore::RenderElement::element((WebCore::RenderElement *)this);
          v112 = WebCore::ContainerNode::countChildNodes(v111);
        }
        else
        {
          v112 = 1;
        }
        if (v60 == 4)
        {
          if (v108)
            goto LABEL_81;
        }
        else if (v60 != 3)
        {
          goto LABEL_81;
        }
        if (v110 != v112)
          goto LABEL_81;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this[3] + 1) + 40) + 8) + 3382))
    {
      v96 = WebCore::RenderReplaced::localSelectionRect((WebCore::RenderReplaced *)this, 1);
      *(_QWORD *)&v125.origin.y = v97;
      v98 = v96 + LODWORD(v124);
      if (__OFADD__((_DWORD)v96, LODWORD(v124)))
        v98 = (v96 >> 31) + 0x7FFFFFFF;
      LODWORD(v125.origin.x) = v98;
      v99 = HIDWORD(v96) + HIDWORD(v124);
      if (__OFADD__(HIDWORD(v96), HIDWORD(v124)))
        v99 = (HIDWORD(v96) >> 31) + 0x7FFFFFFF;
      HIDWORD(v125.origin.x) = v99;
      v100 = *((_QWORD *)a2 + 10);
      v123.i64[0] = WebCore::snappedIntRect((WebCore *)&v125, v97);
      v123.i64[1] = v101;
      WebCore::FloatRect::FloatRect(v122.f32, v123.i32);
      v102 = WebCore::RenderElement::selectionBackgroundColor((WebCore::RenderElement *)this, &v121);
      (*(void (**)(uint64_t, float32x4_t *, unint64_t *, double))(*(_QWORD *)v100 + 224))(v100, &v122, &v121, v102);
      if ((v121 & 0x8000000000000) != 0)
      {
        v104 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFLL);
        do
        {
          v105 = __ldaxr(v104);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v104));
        if (!v106)
        {
          atomic_store(1u, v104);
          WTF::fastFree((WTF *)v104, v103);
        }
      }
    }
    goto LABEL_81;
  }
}

void WebCore::RenderImage::paint(WebCore::RenderImage *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::Node *v15;
  WebCore::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  WebCore::Node *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  float64x2_t v51;
  WebCore::Node *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  WebCore::RenderReplaced::paint(this, a2, a3);
  if (*((_WORD *)a2 + 8) == 16)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    if (!*(_BYTE *)(v6 + 3382))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 528) + 8) + 296) + 3064);
      if ((*(_WORD *)(v7 + 256) & 4) != 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 8) + 528);
        if (v8)
        {
          v9 = *(_QWORD *)(v8 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 24);
            if (v10)
            {
              v11 = *(_QWORD *)(v10 + 8);
              if (v11)
              {
                if ((*(_WORD *)(*(_QWORD *)(v11 + 72) + 26) & 1) != 0
                  && (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10))
                   || (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 10) + 48))(*((_QWORD *)a2 + 10))))
                {
                  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                  + 1248);
                  if (v12)
                  {
                    if ((*(_WORD *)(v12 + 28) & 0x10) != 0
                      && *(_QWORD *)(*(_QWORD *)(v12 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::areaTag + 24))
                    {
                      *(_DWORD *)(v12 + 24) += 2;
                      v44 = (WebCore::Node *)v12;
                      WebCore::HTMLAreaElement::imageElement((unsigned int *)v12, (uint64_t *)&v52);
                      v13 = WebCore::RenderElement::element(this);
                      v15 = (WebCore::Node *)v13;
                      v16 = v52;
                      v52 = 0;
                      if (v16 && v16 == (WebCore::Node *)v13)
                      {
                        if (*((_DWORD *)v16 + 6) == 2)
                        {
                          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v16, v14);
                        }
                        else
                        {
                          *((_DWORD *)v16 + 6) -= 2;
                        }
                        v17 = WebCore::Node::computedStyle(v44);
                        if (!v17)
                          goto LABEL_20;
                        v18 = v17;
                        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 8) + 16);
                        if ((*(_BYTE *)(v19 + 52) & 0xF) == 0)
                          goto LABEL_20;
                        v20 = *(float *)(v19 + 48);
                        if ((*(_BYTE *)(v19 + 52) & 0x10) == 0 || (v21 = 3.0, v20 >= 3.0))
                        {
                          v21 = *(float *)(v19 + 48);
                          if (v20 == 0.0)
                            goto LABEL_20;
                        }
                        v48.f64[0] = *((float64_t *)this + 20);
                        WebCore::HTMLAreaElement::computePathForFocusRing(v44, (int32x2_t *)&v48, (uint64_t)&v52);
                        if ((WebCore::Path::isEmpty((WebCore::Path *)&v52) & 1) != 0)
                          goto LABEL_37;
                        v45 = xmmword_1969FCB90;
                        v46 = unk_1969FCBA0;
                        v47 = xmmword_1969FCBB0;
                        WebCore::AffineTransform::scale((float64x2_t *)&v45, *(float *)(*((_QWORD *)this + 13) + 184));
                        WebCore::Path::transform((WebCore::Path *)&v52, (float64x2_t *)&v45);
                        v22 = *((_DWORD *)a3 + 1);
                        v23 = *((_DWORD *)this + 38);
                        v24 = *((_DWORD *)this + 39);
                        v25 = __OFADD__(*(_DWORD *)a3, v23);
                        v26 = *(_DWORD *)a3 + v23;
                        if (v25)
                          v26 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
                        v25 = __OFADD__(v22, v24);
                        v27 = v22 + v24;
                        if (v25)
                          v27 = (v22 >> 31) + 0x7FFFFFFF;
                        v48 = (float64x2_t)0x3FF0000000000000uLL;
                        v49 = 0;
                        v50 = 0x3FF0000000000000;
                        v51 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v27, v26)), (float32x2_t)vdup_n_s32(0x3C800000u)));
                        WebCore::Path::transform((WebCore::Path *)&v52, &v48);
                        v28 = *((_QWORD *)a2 + 10);
                        WebCore::RenderStyle::visitedDependentColorWithColorFilter(v18, 186, 0, (unint64_t *)&v48);
                        (*(void (**)(uint64_t, WebCore::Node **, float64x2_t *, float))(*(_QWORD *)v28 + 616))(v28, &v52, &v48, v21);
                        if ((*(_QWORD *)&v48.f64[0] & 0x8000000000000) == 0)
                        {
LABEL_37:
                          if (v54 != -1)
                            ((void (*)(float64x2_t *, uint64_t *))off_1E3428F58[v54])(&v48, &v53);
LABEL_20:
                          if (*((_DWORD *)v44 + 6) == 2)
                          {
                            if ((*((_WORD *)v44 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v44, v14);
                          }
                          else
                          {
                            *((_DWORD *)v44 + 6) -= 2;
                          }
                          return;
                        }
                        v40 = (unsigned int *)(*(_QWORD *)&v48.f64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v43 = __ldaxr(v40);
                          v42 = --v43 == 0;
                        }
                        while (__stlxr(v43, v40));
                      }
                      else
                      {
                        if (v16)
                        {
                          if (*((_DWORD *)v16 + 6) == 2)
                          {
                            if ((*((_WORD *)v16 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v16, v14);
                          }
                          else
                          {
                            *((_DWORD *)v16 + 6) -= 2;
                          }
                        }
                        if (v16 != v15)
                          goto LABEL_20;
                        v29 = WebCore::Node::computedStyle(v44);
                        if (!v29)
                          goto LABEL_20;
                        v30 = v29;
                        v31 = *(_QWORD *)(*(_QWORD *)(v29 + 8) + 16);
                        if ((*(_BYTE *)(v31 + 52) & 0xF) == 0)
                          goto LABEL_20;
                        v32 = *(float *)(v31 + 48);
                        if ((*(_BYTE *)(v31 + 52) & 0x10) == 0 || (v33 = 3.0, v32 >= 3.0))
                        {
                          v33 = *(float *)(v31 + 48);
                          if (v32 == 0.0)
                            goto LABEL_20;
                        }
                        v48.f64[0] = *((float64_t *)this + 20);
                        WebCore::HTMLAreaElement::computePathForFocusRing(v44, (int32x2_t *)&v48, (uint64_t)&v52);
                        if (WebCore::Path::isEmpty((WebCore::Path *)&v52))
                          goto LABEL_37;
                        v45 = xmmword_1969FCB90;
                        v46 = unk_1969FCBA0;
                        v47 = xmmword_1969FCBB0;
                        WebCore::AffineTransform::scale((float64x2_t *)&v45, *(float *)(*((_QWORD *)this + 13) + 184));
                        WebCore::Path::transform((WebCore::Path *)&v52, (float64x2_t *)&v45);
                        v34 = *((_DWORD *)a3 + 1);
                        v35 = *((_DWORD *)this + 38);
                        v36 = *((_DWORD *)this + 39);
                        v25 = __OFADD__(*(_DWORD *)a3, v35);
                        v37 = *(_DWORD *)a3 + v35;
                        if (v25)
                          v37 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
                        v25 = __OFADD__(v34, v36);
                        v38 = v34 + v36;
                        if (v25)
                          v38 = (v34 >> 31) + 0x7FFFFFFF;
                        v48 = (float64x2_t)0x3FF0000000000000uLL;
                        v49 = 0;
                        v50 = 0x3FF0000000000000;
                        v51 = vcvtq_f64_f32(vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v38, v37)), (float32x2_t)vdup_n_s32(0x3C800000u)));
                        WebCore::Path::transform((WebCore::Path *)&v52, &v48);
                        v39 = *((_QWORD *)a2 + 10);
                        WebCore::RenderStyle::visitedDependentColorWithColorFilter(v30, 186, 0, (unint64_t *)&v48);
                        (*(void (**)(uint64_t, WebCore::Node **, float64x2_t *, float))(*(_QWORD *)v39 + 616))(v39, &v52, &v48, v33);
                        if ((*(_QWORD *)&v48.f64[0] & 0x8000000000000) == 0)
                          goto LABEL_37;
                        v40 = (unsigned int *)(*(_QWORD *)&v48.f64[0] & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v41 = __ldaxr(v40);
                          v42 = --v41 == 0;
                        }
                        while (__stlxr(v41, v40));
                      }
                      if (v42)
                      {
                        atomic_store(1u, v40);
                        WTF::fastFree((WTF *)v40, v14);
                      }
                      goto LABEL_37;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::RenderReplaced::paint(WebCore::RenderReplaced *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  WebCore::PaintInfo *v4;
  WebCore::RenderReplaced *v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  WebCore::RenderReplaced *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  signed int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t *v41;
  uint64_t v42;
  __int16 v43;
  uint64_t *v44;
  uint64_t v45;
  __int16 v46;
  _DWORD *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  unsigned int **v51;
  uint64_t v52;
  WTF *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int i;
  uint64_t v62;
  _DWORD *v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  WebCore::RenderReplaced *v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  _QWORD *v75;
  unsigned int **v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  WTF *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  float *v97;
  int v98;
  unsigned int v99;
  WTF *v100;
  uint64_t v101;
  int v102;
  unsigned int **v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int j;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  WTF *v122;
  _QWORD *v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  WTF *v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int **v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  float *v145;
  uint64_t v146;
  WebCore::RenderReplaced *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF *v154;
  WTF *v155;
  int v156;
  void *v157;
  int v158;
  uint64_t v159;
  BOOL v160;
  WebCore::Element *v161;
  int v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  float *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WebCore::RenderReplaced *v186;
  uint64_t v187;
  float RoundedBorderFor;
  WebCore::EventRegionContext *v189;
  WebCore::EventRegionContext *v190;
  float32x4_t v191;
  uint64_t v192;
  unsigned int v193;
  float v194;
  uint64_t v195;
  uint64_t v196;
  WTF *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const WebCore::RenderObject *v202;
  int v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  BOOL v209;
  uint64_t v210;
  uint64_t v211;
  const WebCore::HighlightRange **v212;
  uint64_t v213;
  int v214;
  const WebCore::RenderObject *v215;
  WTF::StringImpl **v216;
  WTF::StringImpl **v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  const WebCore::HighlightRange **v223;
  uint64_t v224;
  int v225;
  WTF::StringImpl *v226;
  WebCore::RenderStyle *CachedPseudoStyle;
  WTF::StringImpl *v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t v236;
  const WebCore::HighlightRange **v237;
  uint64_t v238;
  int v239;
  const WebCore::LayoutRect *v240;
  WTF *v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  int v245;
  double v246;
  char v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  int v260;
  uint64_t v261;
  WebCore::PaintInfo *v262;
  _DWORD *v263;
  unint64_t v264;
  unint64_t v265;
  WTF::StringImpl *v266[2];
  float32x4_t v267;
  float32x4_t v268;
  WTF *v269[2];
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  _QWORD v273[2];

  v4 = a2;
  v5 = this;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x100) != 0)
  {
    if ((WebCore::RenderReplaced::isSelected(this) & 1) != 0)
      return;
    v6 = *((_DWORD *)v4 + 5);
  }
  if ((v6 & 0x40000) != 0)
    return;
  v7 = *((unsigned __int16 *)v4 + 8);
  if (v7 > 0x3FF)
  {
    if (v7 != 4096 && v7 != 0x2000 && v7 != 1024)
      return;
  }
  else
  {
    v8 = v7 - 8 > 0x38 || ((1 << (v7 - 8)) & 0x100000000000101) == 0;
    if (v8 && v7 != 128)
      return;
  }
  v9 = (WebCore::RenderReplaced *)*((_QWORD *)v4 + 3);
  if ((!v9 || v9 == v5) && (*(_BYTE *)(*((_QWORD *)v5 + 13) + 239) & 4) == 0 && (*((_BYTE *)v5 + 120) & 0x30) == 0)
  {
    v10 = *((_QWORD *)v5 + 24);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 20);
      v12 = (uint64_t *)(v10 + 28);
    }
    else
    {
      v11 = 0;
      v12 = (uint64_t *)((char *)v5 + 160);
    }
    v13 = *v12;
    v14 = *((_DWORD *)v5 + 38);
    v15 = *((_DWORD *)v5 + 39);
    v17 = *(_DWORD *)a3;
    v16 = *((_DWORD *)a3 + 1);
    v18 = __OFADD__(*(_DWORD *)a3, v14);
    v19 = *(_DWORD *)a3 + v14;
    v20 = v18;
    if (v18)
      v21 = (v17 >> 31) + 0x7FFFFFFF;
    else
      v21 = v19;
    v22 = __OFADD__(v16, v15);
    v23 = v16 + v15;
    v24 = v22;
    if (v22)
      v25 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v25 = v23;
    v18 = __OFADD__((_DWORD)v11, v21);
    v26 = v11 + v21;
    LODWORD(v27) = (v11 >> 31) + 0x7FFFFFFF;
    if (v18)
      v27 = v27;
    else
      v27 = v26;
    v28 = HIDWORD(v11);
    v18 = __OFADD__((_DWORD)v28, v25);
    v29 = v28 + v25;
    v30 = (v28 >> 31) + 0x7FFFFFFF;
    if (!v18)
      v30 = v29;
    v31 = v30 + HIDWORD(v13);
    if (__OFADD__(v30, HIDWORD(v13)))
      v31 = (v30 >> 31) + 0x7FFFFFFF;
    v32 = *((_DWORD *)v4 + 2);
    v18 = __OFADD__(*(_DWORD *)v4, v32);
    v33 = *(_DWORD *)v4 + v32;
    if (v18)
      v33 = (*(_DWORD *)v4 >> 31) + 0x7FFFFFFF;
    if ((int)v27 < v33)
    {
      v18 = __OFADD__((_DWORD)v27, (_DWORD)v13);
      v34 = v27 + v13;
      if (v18)
        v34 = (v27 >> 31) + 0x7FFFFFFF;
      if (v34 > *(_DWORD *)v4)
      {
        v35 = *((_DWORD *)v4 + 1);
        v36 = *((_DWORD *)v4 + 3);
        v18 = __OFADD__(v35, v36);
        v37 = v35 + v36;
        if (v18)
          v37 = (v35 >> 31) + 0x7FFFFFFF;
        if ((int)v30 < v37 && v31 > v35)
        {
          if (v20)
            v19 = (v17 >> 31) + 0x7FFFFFFF;
          if (v24)
            v23 = (v16 >> 31) + 0x7FFFFFFF;
          v38 = v19 | (unint64_t)(v23 << 32);
          v273[0] = v38;
          if (v7 == 4096)
          {
            v182 = *((_QWORD *)v5 + 4);
            if (!v182
              || (v183 = *(_QWORD *)(v182 + 8)) == 0
              || (*(_BYTE *)(*(_QWORD *)(v183 + 104) + 239) & 0x18) == 0)
            {
              v184 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
              v185 = *(_QWORD *)(*(_QWORD *)(v184 + 40) + 8);
              if (!*(_BYTE *)(v185 + 3441) || *(_QWORD *)(v185 + 1272) == v184)
              {
                if ((*((_BYTE *)v5 + 45) & 2) != 0)
                  v186 = 0;
                else
                  v186 = v5;
                if (v182 && (*((_BYTE *)v5 + 45) & 2) != 0)
                  v186 = *(WebCore::RenderReplaced **)(v182 + 8);
                if ((*(_BYTE *)(*((_QWORD *)v186 + 13) + 239) & 1) == 0 && (*((_WORD *)v186 + 62) & 0x3C0) != 0)
                {
                  v187 = *((_QWORD *)v5 + 20);
                  v272.i64[0] = v38;
                  v272.i64[1] = v187;
                  RoundedBorderFor = WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderReplaced *)((char *)v5 + 80), (const WebCore::LayoutRect *)&v272, (const WebCore::LayoutSize *)1, 1, (uint64_t)v269);
                  v189 = (WebCore::EventRegionContext *)*((_QWORD *)v4 + 9);
                  if (v189)
                  {
                    if ((*(unsigned int (**)(_QWORD, float))(*(_QWORD *)v189 + 16))(*((_QWORD *)v4 + 9), RoundedBorderFor))
                    {
                      v190 = v189;
                    }
                    else
                    {
                      v190 = 0;
                    }
                  }
                  else
                  {
                    v190 = 0;
                  }
                  v191 = (float32x4_t)vdupq_n_s32(0x3C800000u);
                  *(float32x4_t *)v266 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)v269), v191);
                  v267 = vmulq_f32(vcvtq_f32_s32(v270), v191);
                  v268 = vmulq_f32(vcvtq_f32_s32(v271), v191);
                  WebCore::EventRegionContext::unite(v190, (const WebCore::FloatRoundedRect *)v266, v5, (WebCore::RenderReplaced *)((char *)v5 + 80), 0);
                }
              }
            }
            return;
          }
          if (v7 == 0x2000)
          {
            v201 = *((_QWORD *)v4 + 9);
            if (v201 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v201 + 24))(*((_QWORD *)v4 + 9)))
              v201 = 0;
            WebCore::AccessibilityRegionContext::takeBounds(v201, (uint64_t)v5, v38);
            return;
          }
          v261 = *((_QWORD *)v4 + 10);
          v262 = v4;
          if ((*((_BYTE *)v5 + 45) & 1) != 0)
            goto LABEL_425;
          v39 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
          if (!v39)
            goto LABEL_425;
          v40 = *(_WORD *)(v39 + 28);
          if ((v40 & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194351B08);
          }
          if ((v40 & 0x80) != 0)
          {
            v195 = *(_QWORD *)(v39 + 200);
            if (!v195)
              goto LABEL_425;
            v41 = (uint64_t *)(v195 + 8);
          }
          else
          {
            v41 = (uint64_t *)(v39 + 32);
          }
          v42 = *v41;
          if (!v42)
          {
LABEL_425:
            v102 = 0;
            goto LABEL_235;
          }
          v43 = *(_WORD *)(v42 + 28);
          if ((v43 & 0x80) != 0)
          {
            v199 = *(_QWORD *)(v42 + 200);
            if (!v199 || !*(_QWORD *)(v199 + 8))
              goto LABEL_425;
          }
          else if ((v43 & 8) == 0)
          {
            goto LABEL_425;
          }
          if ((v40 & 0x80) != 0)
          {
            v196 = *(_QWORD *)(v39 + 200);
            if (!v196)
              goto LABEL_427;
            v44 = (uint64_t *)(v196 + 8);
          }
          else
          {
            v44 = (uint64_t *)(v39 + 32);
          }
          v45 = *v44;
          if (v45)
          {
            v46 = *(_WORD *)(v45 + 28);
            if ((v46 & 0x80) == 0)
            {
              if ((v46 & 8) != 0)
                v47 = (_DWORD *)v45;
              else
                v47 = 0;
LABEL_73:
              v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 8) + 1496);
              if (v48)
              {
                ++*(_DWORD *)v48;
                v263 = (_DWORD *)v48;
                if ((*(_BYTE *)(v48 + 17) & 0x40) == 0)
                  goto LABEL_75;
                v57 = *(_QWORD *)(v48 + 8);
                if (!v57)
                  goto LABEL_75;
                v58 = 0;
                v59 = ((unint64_t)v47 + ~((_QWORD)v47 << 32)) ^ (((unint64_t)v47 + ~((_QWORD)v47 << 32)) >> 22);
                v60 = (9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8))) ^ ((9
                                                                                   * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8))) >> 15);
                for (i = ((v60 + ~(v60 << 27)) >> 31) ^ (v60 + ~((_DWORD)v60 << 27)); ; i = ++v58 + v62)
                {
                  v62 = i & *(_DWORD *)(v57 - 8);
                  v63 = *(_DWORD **)(v57 + 16 * v62);
                  if (v63 != (_DWORD *)-1)
                  {
                    if (!v63)
                      goto LABEL_75;
                    if (v63 == v47)
                      break;
                  }
                }
                v64 = *(uint64_t **)(v57 + 16 * v62 + 8);
                if (v64 && (v65 = *((_DWORD *)v64 + 3)) != 0)
                {
                  v4 = 0;
                  v66 = 0;
                  v49 = 0;
                  v67 = *v64;
                  v68 = *v64 + 160 * v65;
                  do
                  {
                    if ((*(_BYTE *)(v67 + 9) & 0x40) != 0)
                    {
                      if ((_DWORD)v4 == v66)
                      {
                        v69 = ((unint64_t)v66 >> 2) + v66;
                        if (v69 >= 0x10)
                          v70 = v69 + 1;
                        else
                          v70 = 16;
                        if (v70 <= (unint64_t)v4 + 1)
                          v70 = v4 + 1;
                        if (v70 >> 29)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194352180);
                        }
                        v71 = v5;
                        v72 = v68;
                        v259 = v70;
                        v73 = WTF::fastMalloc((WTF *)(8 * v70));
                        v74 = (WTF *)v73;
                        if ((_DWORD)v4)
                        {
                          v75 = (_QWORD *)v73;
                          v76 = (unsigned int **)v49;
                          do
                          {
                            v77 = *v76;
                            *v76 = 0;
                            *v75 = v77;
                            v78 = *v76;
                            *v76 = 0;
                            if (v78)
                            {
                              do
                              {
                                v79 = __ldaxr(v78);
                                v80 = v79 - 1;
                              }
                              while (__stlxr(v80, v78));
                              if (!v80)
                              {
                                atomic_store(1u, v78);
                                WTF::fastFree((WTF *)v78, (void *)v27);
                              }
                            }
                            ++v75;
                            ++v76;
                          }
                          while (v76 != (unsigned int **)((char *)v49 + 8 * v4));
                        }
                        if (v49)
                        {
                          if (v74 == v49)
                            v66 = 0;
                          else
                            v66 = v259;
                          if (v74 == v49)
                            v81 = 0;
                          else
                            v81 = v74;
                          WTF::fastFree(v49, (void *)v27);
                          v49 = v81;
                        }
                        else
                        {
                          v49 = v74;
                          v66 = v259;
                        }
                        v82 = *(_QWORD *)v67;
                        v68 = v72;
                        v5 = v71;
                        if (*(_QWORD *)v67)
                          goto LABEL_551;
                        v82 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v82 = 1;
                        *(_QWORD *)(v82 + 8) = v67;
                        v83 = *(unsigned int **)v67;
                        *(_QWORD *)v67 = v82;
                        if (!v83)
                          goto LABEL_551;
                        do
                        {
                          v84 = __ldaxr(v83);
                          v85 = v84 - 1;
                        }
                        while (__stlxr(v85, v83));
                        if (!v85)
                        {
                          atomic_store(1u, v83);
                          WTF::fastFree((WTF *)v83, (void *)v27);
                        }
                        v82 = *(_QWORD *)v67;
                        if (*(_QWORD *)v67)
                        {
LABEL_551:
                          do
                            v86 = __ldaxr((unsigned int *)v82);
                          while (__stlxr(v86 + 1, (unsigned int *)v82));
                        }
                        *((_QWORD *)v49 + v4) = v82;
                      }
                      else
                      {
                        v87 = *(_QWORD *)v67;
                        if (*(_QWORD *)v67)
                          goto LABEL_552;
                        v87 = WTF::fastCompactMalloc((WTF *)0x10);
                        *(_DWORD *)v87 = 1;
                        *(_QWORD *)(v87 + 8) = v67;
                        v88 = *(unsigned int **)v67;
                        *(_QWORD *)v67 = v87;
                        if (!v88)
                          goto LABEL_552;
                        do
                        {
                          v89 = __ldaxr(v88);
                          v90 = v89 - 1;
                        }
                        while (__stlxr(v90, v88));
                        if (!v90)
                        {
                          atomic_store(1u, v88);
                          WTF::fastFree((WTF *)v88, (void *)v27);
                        }
                        v87 = *(_QWORD *)v67;
                        if (*(_QWORD *)v67)
                        {
LABEL_552:
                          do
                            v91 = __ldaxr((unsigned int *)v87);
                          while (__stlxr(v91 + 1, (unsigned int *)v87));
                        }
                        *((_QWORD *)v49 + v4) = v87;
                      }
                      v4 = (WebCore::PaintInfo *)((_DWORD)v4 + 1);
                    }
                    v67 += 160;
                  }
                  while (v67 != v68);
                }
                else
                {
LABEL_75:
                  v4 = 0;
                  v49 = 0;
                }
                if ((*((_BYTE *)v5 + 45) & 1) != 0)
                {
                  v50 = 0;
                }
                else
                {
                  v50 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
                  if (v50 && (*(_WORD *)(v50 + 28) & 8) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194351B48);
                  }
                }
                if (!(_DWORD)v4)
                {
                  v92 = 0;
                  v4 = v262;
                  v54 = v263;
                  if (v49)
                    goto LABEL_149;
                  goto LABEL_150;
                }
                v51 = (unsigned int **)((char *)v49 + 8 * v4);
                v52 = 8 * v4;
                v53 = v49;
                v54 = v263;
                while (1)
                {
                  if (*(_QWORD *)v53)
                  {
                    v55 = *(_QWORD *)(*(_QWORD *)v53 + 8);
                    v56 = *(_DWORD *)(v55 + 8);
                    if (v56 == 0x20000)
                    {
                      if (*(_DWORD *)(v55 + 96) != 6)
                        goto LABEL_169;
                      goto LABEL_82;
                    }
                    if (v56 == 0x4000)
                    {
                      if (*(_DWORD *)(v55 + 96) != 4)
                      {
LABEL_169:
                        while (2)
                        {
                          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_170:
                          v108 = *((_QWORD *)v54 + 1);
                          if (v108)
                          {
                            v109 = 0;
                            v110 = ((unint64_t)v47 + ~((_QWORD)v47 << 32)) ^ (((unint64_t)v47
                                                                                    + ~((_QWORD)v47 << 32)) >> 22);
                            v111 = (9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8))) ^ ((9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8))) >> 15);
                            for (j = ((v111 + ~(v111 << 27)) >> 31) ^ (v111 + ~((_DWORD)v111 << 27)); ; j = v109 + v113)
                            {
                              v113 = j & *(_DWORD *)(v108 - 8);
                              v114 = *(_DWORD **)(v108 + 16 * v113);
                              if (v114 != (_DWORD *)-1)
                              {
                                if (!v114)
                                  goto LABEL_156;
                                if (v114 == v47)
                                  break;
                              }
                              ++v109;
                            }
                            v115 = *(_QWORD *)(v108 + 16 * v113 + 8);
                            if (v115)
                            {
                              v116 = *(_DWORD *)(v115 + 12);
                              if (v116)
                              {
                                LODWORD(v117) = 0;
                                v99 = 0;
                                v100 = 0;
                                v54 = *(_DWORD **)v115;
                                v118 = *(_QWORD *)v115 + 160 * v116;
                                do
                                {
                                  if ((*((_BYTE *)v54 + 10) & 2) != 0)
                                  {
                                    if (v99 == (_DWORD)v117)
                                    {
                                      v119 = ((unint64_t)v117 >> 2) + v117;
                                      if (v119 >= 0x10)
                                        v120 = v119 + 1;
                                      else
                                        v120 = 16;
                                      if (v120 <= (unint64_t)v99 + 1)
                                        v117 = v99 + 1;
                                      else
                                        v117 = v120;
                                      if (v117 >> 29)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x194352188);
                                      }
                                      v121 = WTF::fastMalloc((WTF *)(8 * v117));
                                      v122 = (WTF *)v121;
                                      if (v99)
                                      {
                                        v123 = (_QWORD *)v121;
                                        v124 = (unsigned int **)v100;
                                        do
                                        {
                                          v125 = *v124;
                                          *v124 = 0;
                                          *v123 = v125;
                                          v126 = *v124;
                                          *v124 = 0;
                                          if (v126)
                                          {
                                            do
                                            {
                                              v127 = __ldaxr(v126);
                                              v128 = v127 - 1;
                                            }
                                            while (__stlxr(v128, v126));
                                            if (!v128)
                                            {
                                              atomic_store(1u, v126);
                                              WTF::fastFree((WTF *)v126, (void *)v27);
                                            }
                                          }
                                          ++v123;
                                          ++v124;
                                        }
                                        while (v124 != (unsigned int **)((char *)v100 + 8 * v99));
                                      }
                                      if (v100)
                                      {
                                        if (v122 == v100)
                                        {
                                          LODWORD(v117) = 0;
                                          v129 = 0;
                                        }
                                        else
                                        {
                                          v129 = v122;
                                        }
                                        WTF::fastFree(v100, (void *)v27);
                                        v100 = v129;
                                      }
                                      else
                                      {
                                        v100 = v122;
                                      }
                                      v130 = *(_QWORD *)v54;
                                      v4 = v262;
                                      if (*(_QWORD *)v54)
                                        goto LABEL_553;
                                      v130 = WTF::fastCompactMalloc((WTF *)0x10);
                                      *(_DWORD *)v130 = 1;
                                      *(_QWORD *)(v130 + 8) = v54;
                                      v131 = *(unsigned int **)v54;
                                      *(_QWORD *)v54 = v130;
                                      if (!v131)
                                        goto LABEL_553;
                                      do
                                      {
                                        v132 = __ldaxr(v131);
                                        v133 = v132 - 1;
                                      }
                                      while (__stlxr(v133, v131));
                                      if (!v133)
                                      {
                                        atomic_store(1u, v131);
                                        WTF::fastFree((WTF *)v131, (void *)v27);
                                      }
                                      v130 = *(_QWORD *)v54;
                                      if (*(_QWORD *)v54)
                                      {
LABEL_553:
                                        do
                                          v134 = __ldaxr((unsigned int *)v130);
                                        while (__stlxr(v134 + 1, (unsigned int *)v130));
                                      }
                                      *((_QWORD *)v100 + v99) = v130;
                                    }
                                    else
                                    {
                                      v135 = *(_QWORD *)v54;
                                      if (*(_QWORD *)v54)
                                        goto LABEL_554;
                                      v135 = WTF::fastCompactMalloc((WTF *)0x10);
                                      *(_DWORD *)v135 = 1;
                                      *(_QWORD *)(v135 + 8) = v54;
                                      v136 = *(unsigned int **)v54;
                                      *(_QWORD *)v54 = v135;
                                      if (!v136)
                                        goto LABEL_554;
                                      do
                                      {
                                        v137 = __ldaxr(v136);
                                        v138 = v137 - 1;
                                      }
                                      while (__stlxr(v138, v136));
                                      if (!v138)
                                      {
                                        atomic_store(1u, v136);
                                        WTF::fastFree((WTF *)v136, (void *)v27);
                                      }
                                      v135 = *(_QWORD *)v54;
                                      if (*(_QWORD *)v54)
                                      {
LABEL_554:
                                        do
                                          v139 = __ldaxr((unsigned int *)v135);
                                        while (__stlxr(v139 + 1, (unsigned int *)v135));
                                      }
                                      *((_QWORD *)v100 + v99) = v135;
                                    }
                                    ++v99;
                                  }
                                  v54 += 40;
                                }
                                while (v54 != (_DWORD *)v118);
LABEL_157:
                                if ((*((_BYTE *)v5 + 45) & 1) != 0)
                                {
                                  v101 = 0;
                                }
                                else
                                {
                                  v101 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
                                  if (v101 && (*(_WORD *)(v101 + 28) & 8) == 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x194351B68);
                                  }
                                }
                                v102 = v259;
                                if (!v99)
                                {
                                  v140 = 0;
                                  v47 = v263;
                                  if (v100)
                                    goto LABEL_228;
                                  goto LABEL_229;
                                }
                                v103 = (unsigned int **)((char *)v100 + 8 * v99);
                                v104 = 8 * v99;
                                v105 = v100;
                                v47 = v263;
LABEL_165:
                                if (*(_QWORD *)v105)
                                {
                                  v106 = *(_QWORD *)(*(_QWORD *)v105 + 8);
                                  v107 = *(_DWORD *)(v106 + 8);
                                  if (v107 == 0x20000)
                                  {
                                    if (*(_DWORD *)(v106 + 96) != 6)
                                      continue;
LABEL_163:
                                    if (*(_QWORD *)(v106 + 32) == v101)
                                    {
                                      v140 = 1;
LABEL_221:
                                      v141 = (unsigned int **)v100;
                                      do
                                      {
                                        v142 = *v141;
                                        *v141 = 0;
                                        if (v142)
                                        {
                                          do
                                          {
                                            v143 = __ldaxr(v142);
                                            v144 = v143 - 1;
                                          }
                                          while (__stlxr(v144, v142));
                                          if (!v144)
                                          {
                                            atomic_store(1u, v142);
                                            WTF::fastFree((WTF *)v142, (void *)v27);
                                          }
                                        }
                                        ++v141;
                                      }
                                      while (v141 != v103);
                                      if (v100)
LABEL_228:
                                        WTF::fastFree(v100, (void *)v27);
LABEL_229:
                                      if (v140)
                                      {
                                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v261 + 96))(v261, 1);
                                        v145 = (float *)*((_QWORD *)v4 + 10);
                                        if (v145[84] != 0.0)
                                        {
                                          v145[84] = 0.0;
                                          *((_DWORD *)v145 + 46) |= 0x100u;
                                        }
                                        (*(void (**)(float *, _DWORD *))(*(_QWORD *)v145 + 88))(v145, (_DWORD *)v145 + 2);
                                        v102 = 1;
                                      }
                                      if (!*v47)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x194351B28);
                                      }
                                      --*v47;
                                      v7 = *((unsigned __int16 *)v4 + 8);
LABEL_235:
                                      if ((*((_BYTE *)v5 + 23) & 0x60) != 0 && v7 == 8)
                                      {
                                        (*(void (**)(WebCore::RenderReplaced *, WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)v5 + 1456))(v5, v4, v273);
                                        v7 = *((unsigned __int16 *)v4 + 8);
                                      }
                                      if (v7 == 1024)
                                      {
                                        (*(void (**)(WebCore::RenderReplaced *, WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)v5 + 1464))(v5, v4, v273);
                                        goto LABEL_302;
                                      }
                                      v146 = *((_QWORD *)v5 + 20);
                                      v272.i64[0] = v273[0];
                                      v272.i64[1] = v146;
                                      if (v7 != 8)
                                      {
                                        if (v7 == 16 || v7 == 64)
                                        {
                                          v192 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 16);
                                          v193 = *(unsigned __int8 *)(v192 + 52);
                                          if ((v193 & 0xF) != 0)
                                          {
                                            v194 = *(float *)(v192 + 48);
                                            if (((v194 < 3.0) & (v193 >> 4)) != 0 || v194 != 0.0)
                                              WebCore::RenderElement::paintOutline(v5, v4, (const WebCore::LayoutRect *)&v272);
                                          }
                                        }
                                        else if (v7 == 128)
                                        {
                                          goto LABEL_240;
                                        }
                                        goto LABEL_302;
                                      }
LABEL_240:
                                      v147 = (WebCore::RenderReplaced *)*((_QWORD *)v4 + 3);
                                      if (v147 && v147 != v5)
                                        goto LABEL_302;
                                      v265 = 0;
                                      v148 = *((_QWORD *)v5 + 3);
                                      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 8) + 40) + 8)
                                                     + 3382)
                                        && (*((_BYTE *)v4 + 21) & 1) == 0)
                                      {
                                        v270.i8[8] = 0;
                                        v269[1] = 0;
                                        v270.i64[0] = 0;
                                        v269[0] = 0;
                                        v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v148 + 8) + 40) + 8)
                                                         + 2480);
                                        if (v149 && *(_BYTE *)(v149 + 32))
                                        {
                                          v202 = v5;
                                          v203 = v102;
                                          v204 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin((_QWORD **)(v149 + 8));
                                          v205 = v204;
                                          v206 = (_QWORD *)v27;
                                          v207 = *(_QWORD *)(v149 + 8);
                                          v208 = v207 ? v207 + 16 * *(unsigned int *)(v207 - 4) : 0;
                                          v209 = v208 == (_QWORD)v204;
LABEL_455:
                                          v102 = v203;
                                          v4 = v262;
                                          v5 = v202;
                                          if (!v209)
                                          {
                                            v210 = v205[1];
                                            v211 = *(unsigned int *)(v210 + 20);
                                            if (!(_DWORD)v211)
                                              goto LABEL_461;
                                            v212 = *(const WebCore::HighlightRange ***)(v210 + 8);
                                            v213 = 8 * v211;
                                            while (1)
                                            {
                                              if (WebCore::RenderHighlight::setRenderRange(v269, *v212))
                                              {
                                                v214 = WebCore::RenderHighlight::highlightStateForRenderer((WebCore::RenderHighlight *)v269, v202);
                                                if (WebCore::RenderReplaced::isHighlighted(v202, v214, v270.i32[0], v270.i32[1]))goto LABEL_504;
                                              }
                                              ++v212;
                                              v213 -= 8;
                                              if (!v213)
                                              {
LABEL_461:
                                                while (1)
                                                {
                                                  v205 += 2;
                                                  if (v205 == v206)
                                                    break;
                                                  if ((unint64_t)(*v205 + 1) > 1)
                                                    goto LABEL_465;
                                                }
                                                v205 = v206;
LABEL_465:
                                                v209 = v205 == (_QWORD *)v208;
                                                goto LABEL_455;
                                              }
                                            }
                                          }
                                        }
                                        v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40)
                                                         + 8);
                                        if ((*(_QWORD *)(*(_QWORD *)(v150 + 680) + 680) & 0x40000) != 0)
                                        {
                                          v151 = *(_QWORD *)(v150 + 2464);
                                          if (v151)
                                          {
                                            v215 = v5;
                                            v260 = v102;
                                            v216 = (WTF::StringImpl **)WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin((_QWORD **)(v151 + 8));
                                            v217 = v216;
                                            v218 = v27;
                                            v219 = *(_QWORD *)(v151 + 8);
                                            v220 = v219 ? v219 + 16 * *(unsigned int *)(v219 - 4) : 0;
                                            v4 = v262;
                                            if ((WTF::StringImpl **)v220 != v216)
                                            {
                                              do
                                              {
                                                v221 = v217[1];
                                                v222 = *((unsigned int *)v221 + 5);
                                                if (!(_DWORD)v222)
                                                  goto LABEL_482;
                                                v223 = (const WebCore::HighlightRange **)*((_QWORD *)v221 + 1);
                                                v224 = 8 * v222;
                                                do
                                                {
                                                  if (WebCore::RenderHighlight::setRenderRange(v269, *v223))
                                                  {
                                                    v225 = WebCore::RenderHighlight::highlightStateForRenderer((WebCore::RenderHighlight *)v269, v215);
                                                    if (WebCore::RenderReplaced::isHighlighted(v215, v225, v270.i32[0], v270.i32[1]))
                                                    {
                                                      LODWORD(v266[0]) = 4;
                                                      v226 = *v217;
                                                      if (*v217)
                                                        *(_DWORD *)v226 += 2;
                                                      v266[1] = v226;
                                                      CachedPseudoStyle = (WebCore::RenderStyle *)WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v215, (uint64_t)v266, (uint64_t)v215 + 80);
                                                      v228 = v266[1];
                                                      v266[1] = 0;
                                                      if (v228)
                                                      {
                                                        if (*(_DWORD *)v228 == 2)
                                                          WTF::StringImpl::destroy(v228, (WTF::StringImpl *)v27);
                                                        else
                                                          *(_DWORD *)v228 -= 2;
                                                      }
                                                      if (CachedPseudoStyle)
                                                      {
                                                        WebCore::RenderStyle::colorResolvingCurrentColor(CachedPseudoStyle, (const WebCore::StyleColor *)(*(_QWORD *)(*((_QWORD *)CachedPseudoStyle + 1)+ 16)+ 16), 0);
                                                        v102 = v260;
                                                        v4 = v262;
                                                        v5 = v215;
                                                        goto LABEL_249;
                                                      }
                                                    }
                                                  }
                                                  ++v223;
                                                  v224 -= 8;
                                                }
                                                while (v224);
LABEL_482:
                                                while (1)
                                                {
                                                  v217 += 2;
                                                  if (v217 == (WTF::StringImpl **)v218)
                                                    break;
                                                  if ((unint64_t)*v217 + 1 > 1)
                                                    goto LABEL_486;
                                                }
                                                v217 = (WTF::StringImpl **)v218;
LABEL_486:
                                                v102 = v260;
                                                v4 = v262;
                                                v5 = v215;
                                              }
                                              while (v217 != (WTF::StringImpl **)v220);
                                            }
                                          }
                                        }
                                        v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40)
                                                         + 8);
                                        if ((*(_QWORD *)(*(_QWORD *)(v152 + 680) + 688) & 0x100000000000000) == 0)
                                          goto LABEL_248;
                                        v153 = *(_QWORD *)(v152 + 2472);
                                        if (!v153)
                                          goto LABEL_248;
                                        v202 = v5;
                                        v203 = v102;
                                        v229 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::Highlight,WTF::RawPtrTraits<WebCore::Highlight>,WTF::DefaultRefDerefTraits<WebCore::Highlight>>>,WTF::HashTableTraits>::begin((_QWORD **)(v153 + 8));
                                        v230 = v229;
                                        v231 = (_QWORD *)v27;
                                        v232 = *(_QWORD *)(v153 + 8);
                                        v233 = v232 ? v232 + 16 * *(unsigned int *)(v232 - 4) : 0;
                                        v234 = v233 == (_QWORD)v229;
LABEL_491:
                                        v102 = v203;
                                        v4 = v262;
                                        v5 = v202;
                                        if (!v234)
                                        {
                                          v235 = v230[1];
                                          v236 = *(unsigned int *)(v235 + 20);
                                          if (!(_DWORD)v236)
                                            goto LABEL_497;
                                          v237 = *(const WebCore::HighlightRange ***)(v235 + 8);
                                          v238 = 8 * v236;
                                          while (1)
                                          {
                                            if (WebCore::RenderHighlight::setRenderRange(v269, *v237))
                                            {
                                              v239 = WebCore::RenderHighlight::highlightStateForRenderer((WebCore::RenderHighlight *)v269, v202);
                                              if (WebCore::RenderReplaced::isHighlighted(v202, v239, v270.i32[0], v270.i32[1]))break;
                                            }
                                            ++v237;
                                            v238 -= 8;
                                            if (!v238)
                                            {
LABEL_497:
                                              while (1)
                                              {
                                                v230 += 2;
                                                if (v230 == v231)
                                                  break;
                                                if ((unint64_t)(*v230 + 1) > 1)
                                                  goto LABEL_501;
                                              }
                                              v230 = v231;
LABEL_501:
                                              v234 = v230 == (_QWORD *)v233;
                                              goto LABEL_491;
                                            }
                                          }
LABEL_504:
                                          {
                                            v255 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
                                            *(_OWORD *)(v255 + 40) = 0u;
                                            *(_OWORD *)(v255 + 24) = 0u;
                                            *(_QWORD *)v255 = &off_1E335BC30;
                                          }
                                          WebCore::RenderTheme::annotationHighlightColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, 2u, v266);
                                          v102 = v203;
                                          v4 = v262;
                                          v5 = v202;
                                        }
                                        else
                                        {
LABEL_248:
                                          v266[0] = 0;
                                        }
LABEL_249:
                                        v154 = v269[1];
                                        v269[1] = 0;
                                        if (v154)
                                        {
                                          if (*(_DWORD *)v154 == 1)
                                            WTF::fastFree(v154, (void *)v27);
                                          else
                                            --*(_DWORD *)v154;
                                        }
                                        v155 = v269[0];
                                        v269[0] = 0;
                                        if (v155)
                                        {
                                          if (*(_DWORD *)v155 == 1)
                                            WTF::fastFree(v155, (void *)v27);
                                          else
                                            --*(_DWORD *)v155;
                                        }
                                        if (v266[0])
                                          v265 = (unint64_t)v266[0];
                                      }
                                      v156 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)v5
                                                                                                  + 1688))(v5);
                                      if (*((_WORD *)v4 + 8) != 128)
                                      {
                                        v158 = v156;
                                        goto LABEL_259;
                                      }
                                      if ((*((_BYTE *)v5 + 23) & 0xE) == 0)
                                        goto LABEL_301;
                                      v158 = 0;
LABEL_259:
                                      v159 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 24);
                                      if (*(_BYTE *)(v159 + 212))
                                        v160 = *(_BYTE *)(v159 + 212) == 11;
                                      else
                                        v160 = 1;
                                      if (!v160)
                                      {
                                        if (*(_BYTE *)(v159 + 214))
                                        {
                                          if (*(float *)(v159 + 208) == 0.0)
                                            goto LABEL_265;
                                        }
                                        else if (!*(_DWORD *)(v159 + 208))
                                        {
LABEL_265:
                                          if (*(_BYTE *)(v159 + 228) && *(_BYTE *)(v159 + 228) != 11)
                                          {
                                            if (*(_BYTE *)(v159 + 230))
                                            {
                                              if (*(float *)(v159 + 224) == 0.0)
                                                goto LABEL_269;
                                            }
                                            else if (!*(_DWORD *)(v159 + 224))
                                            {
LABEL_269:
                                              if (*(_BYTE *)(v159 + 244) && *(_BYTE *)(v159 + 244) != 11)
                                              {
                                                if (*(_BYTE *)(v159 + 246))
                                                {
                                                  if (*(float *)(v159 + 240) == 0.0)
                                                    goto LABEL_273;
                                                }
                                                else if (!*(_DWORD *)(v159 + 240))
                                                {
LABEL_273:
                                                  if (!*(_BYTE *)(v159 + 260) || *(_BYTE *)(v159 + 260) == 11)
                                                    goto LABEL_363;
                                                  if (*(_BYTE *)(v159 + 262))
                                                  {
                                                    if (*(float *)(v159 + 256) != 0.0)
                                                      goto LABEL_363;
                                                    goto LABEL_277;
                                                  }
                                                  if (!*(_DWORD *)(v159 + 256))
                                                    goto LABEL_277;
LABEL_363:
                                                  if (*(_BYTE *)(v159 + 268) && *(_BYTE *)(v159 + 268) != 11)
                                                  {
                                                    if (*(_BYTE *)(v159 + 270))
                                                    {
                                                      if (*(float *)(v159 + 264) != 0.0)
                                                        goto LABEL_317;
                                                    }
                                                    else if (*(_DWORD *)(v159 + 264))
                                                    {
                                                      goto LABEL_317;
                                                    }
LABEL_277:
                                                    if ((*((_BYTE *)v5 + 45) & 1) != 0)
                                                    {
                                                      v161 = 0;
                                                    }
                                                    else
                                                    {
                                                      v161 = *(WebCore::Element **)(*((_QWORD *)v5 + 3) + 8);
                                                      if (v161 && (*((_WORD *)v161 + 14) & 8) == 0)
                                                      {
                                                        __break(0xC471u);
                                                        JUMPOUT(0x194351B88);
                                                      }
                                                    }
                                                    v162 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 636) >> 18) & 3;
                                                    if (!v162
                                                      || (v247 = *((_BYTE *)v5 + 96), (v247 & 0x1F) != 0xD)
                                                      && (v247 & 0x1Eu) - 14 > 0xFFFFFFF5
                                                      || v162 != 2
                                                      && (!v161 || WebCore::Element::isRelevantToUser(v161))
                                                      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8)
                                                                                          + 1944)
                                                                              + 248)
                                                                  + 479))
                                                    {
                                                      (*(void (**)(WebCore::RenderReplaced *, WebCore::PaintInfo *, _QWORD *))(*(_QWORD *)v5 + 1680))(v5, v4, v273);
                                                    }
                                                    v163 = *(_QWORD *)(*((_QWORD *)v5 + 11) + 24);
                                                    if (*(_BYTE *)(v163 + 212) && *(_BYTE *)(v163 + 212) != 11)
                                                    {
                                                      if (*(_BYTE *)(v163 + 214))
                                                      {
                                                        if (*(float *)(v163 + 208) == 0.0)
                                                          goto LABEL_286;
                                                      }
                                                      else if (!*(_DWORD *)(v163 + 208))
                                                      {
LABEL_286:
                                                        if (*(_BYTE *)(v163 + 228) && *(_BYTE *)(v163 + 228) != 11)
                                                        {
                                                          if (*(_BYTE *)(v163 + 230))
                                                          {
                                                            if (*(float *)(v163 + 224) == 0.0)
                                                              goto LABEL_290;
                                                          }
                                                          else if (!*(_DWORD *)(v163 + 224))
                                                          {
LABEL_290:
                                                            if (*(_BYTE *)(v163 + 244) && *(_BYTE *)(v163 + 244) != 11)
                                                            {
                                                              if (*(_BYTE *)(v163 + 246))
                                                              {
                                                                if (*(float *)(v163 + 240) == 0.0)
                                                                  goto LABEL_294;
                                                              }
                                                              else if (!*(_DWORD *)(v163 + 240))
                                                              {
LABEL_294:
                                                                if (!*(_BYTE *)(v163 + 260)
                                                                  || *(_BYTE *)(v163 + 260) == 11)
                                                                {
                                                                  goto LABEL_375;
                                                                }
                                                                if (*(_BYTE *)(v163 + 262))
                                                                {
                                                                  if (*(float *)(v163 + 256) != 0.0)
                                                                    goto LABEL_375;
                                                                  goto LABEL_298;
                                                                }
                                                                if (!*(_DWORD *)(v163 + 256))
                                                                  goto LABEL_298;
LABEL_375:
                                                                if (*(_BYTE *)(v163 + 268)
                                                                  && *(_BYTE *)(v163 + 268) != 11)
                                                                {
                                                                  if (!*(_BYTE *)(v163 + 270))
                                                                  {
                                                                    if (*(_DWORD *)(v163 + 264))
                                                                      goto LABEL_349;
LABEL_298:
                                                                    if (v158)
                                                                    {
                                                                      if (WebCore::RenderReplaced::isSelected(v5))
                                                                        v241 = (WTF *)*((_QWORD *)v5 + 20);
                                                                      else
                                                                        v241 = 0;
                                                                      v269[1] = v241;
                                                                      v269[0] = (WTF *)v273[0];
                                                                      v242 = *((_QWORD *)v262 + 10);
                                                                      v243 = WebCore::snappedIntRect((WebCore *)v269, v240);
                                                                      *(float *)v266 = (float)(int)v243;
                                                                      *((float *)v266 + 1) = (float)SHIDWORD(v243);
                                                                      *(float *)&v266[1] = (float)v244;
                                                                      *((float *)&v266[1] + 1) = (float)v245;
                                                                      v246 = WebCore::RenderElement::selectionBackgroundColor(v5, &v264);
                                                                      (*(void (**)(uint64_t, WTF::StringImpl **, unint64_t *, double))(*(_QWORD *)v242 + 224))(v242, v266, &v264, v246);
                                                                      if ((v264 & 0x8000000000000) != 0)
                                                                      {
                                                                        v256 = (unsigned int *)(v264 & 0xFFFFFFFFFFFFLL);
                                                                        do
                                                                        {
                                                                          v257 = __ldaxr(v256);
                                                                          v258 = v257 - 1;
                                                                        }
                                                                        while (__stlxr(v258, v256));
                                                                        if (!v258)
                                                                        {
                                                                          atomic_store(1u, v256);
                                                                          WTF::fastFree((WTF *)v256, v157);
                                                                        }
                                                                      }
                                                                      v4 = v262;
                                                                    }
                                                                    if ((v265 & 0x8000000000000) != 0)
                                                                    {
                                                                      if (*(float *)((v265 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
                                                                        goto LABEL_531;
                                                                    }
                                                                    else
                                                                    {
                                                                      if (!(_BYTE)v265)
                                                                        goto LABEL_301;
LABEL_531:
                                                                      v269[1] = *((WTF **)v5 + 20);
                                                                      v269[0] = (WTF *)v273[0];
                                                                      v248 = *((_QWORD *)v4 + 10);
                                                                      v249 = WebCore::snappedIntRect((WebCore *)v269, (const WebCore::LayoutRect *)v157);
                                                                      *(float *)v266 = (float)(int)v249;
                                                                      *((float *)v266 + 1) = (float)SHIDWORD(v249);
                                                                      *(float *)&v266[1] = (float)v250;
                                                                      *((float *)&v266[1] + 1) = (float)v251;
                                                                      (*(void (**)(uint64_t, WTF::StringImpl **, unint64_t *))(*(_QWORD *)v248 + 224))(v248, v266, &v265);
                                                                    }
LABEL_301:
                                                                    if ((v265 & 0x8000000000000) != 0)
                                                                    {
                                                                      v252 = (unsigned int *)(v265 & 0xFFFFFFFFFFFFLL);
                                                                      do
                                                                      {
                                                                        v253 = __ldaxr(v252);
                                                                        v254 = v253 - 1;
                                                                      }
                                                                      while (__stlxr(v254, v252));
                                                                      if (!v254)
                                                                      {
                                                                        atomic_store(1u, v252);
                                                                        WTF::fastFree((WTF *)v252, v157);
                                                                      }
                                                                    }
LABEL_302:
                                                                    if (v102)
                                                                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v261 + 104))(v261, 1);
                                                                    return;
                                                                  }
                                                                  if (*(float *)(v163 + 264) == 0.0)
                                                                    goto LABEL_298;
                                                                }
LABEL_349:
                                                                (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v4 + 10) + 104))(*((_QWORD *)v4 + 10), 1);
                                                                goto LABEL_298;
                                                              }
                                                            }
                                                            if (*(_BYTE *)(v163 + 252) && *(_BYTE *)(v163 + 252) != 11)
                                                            {
                                                              if (*(_BYTE *)(v163 + 254))
                                                              {
                                                                if (*(float *)(v163 + 248) == 0.0)
                                                                  goto LABEL_294;
                                                              }
                                                              else if (!*(_DWORD *)(v163 + 248))
                                                              {
                                                                goto LABEL_294;
                                                              }
                                                            }
                                                            goto LABEL_349;
                                                          }
                                                        }
                                                        if (*(_BYTE *)(v163 + 236) && *(_BYTE *)(v163 + 236) != 11)
                                                        {
                                                          if (*(_BYTE *)(v163 + 238))
                                                          {
                                                            if (*(float *)(v163 + 232) == 0.0)
                                                              goto LABEL_290;
                                                          }
                                                          else if (!*(_DWORD *)(v163 + 232))
                                                          {
                                                            goto LABEL_290;
                                                          }
                                                        }
                                                        goto LABEL_349;
                                                      }
                                                    }
                                                    if (*(_BYTE *)(v163 + 220) && *(_BYTE *)(v163 + 220) != 11)
                                                    {
                                                      if (*(_BYTE *)(v163 + 222))
                                                      {
                                                        if (*(float *)(v163 + 216) == 0.0)
                                                          goto LABEL_286;
                                                      }
                                                      else if (!*(_DWORD *)(v163 + 216))
                                                      {
                                                        goto LABEL_286;
                                                      }
                                                    }
                                                    goto LABEL_349;
                                                  }
LABEL_317:
                                                  if (*((int *)v5 + 40) >= 1 && *((int *)v5 + 41) >= 1)
                                                  {
                                                    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v4 + 10)
                                                                                            + 96))(*((_QWORD *)v4 + 10), 1);
                                                    v165 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)v5 + 992))(v5);
                                                    v167 = v166;
                                                    v168 = (*(uint64_t (**)(WebCore::RenderReplaced *))(*(_QWORD *)v5 + 920))(v5);
                                                    if (__OFADD__((_DWORD)v165, (_DWORD)v168))
                                                      v171 = (v165 >> 31) + 0x7FFFFFFF;
                                                    else
                                                      v171 = v165 + v168;
                                                    if (__OFADD__((_DWORD)v167, v169))
                                                      v172 = (v167 >> 31) + 0x7FFFFFFF;
                                                    else
                                                      v172 = v167 + v169;
                                                    if (__OFADD__(HIDWORD(v167), v170))
                                                      v173 = (HIDWORD(v167) >> 31) + 0x7FFFFFFF;
                                                    else
                                                      v173 = HIDWORD(v167) + v170;
                                                    if (__OFADD__(HIDWORD(v165), HIDWORD(v168)))
                                                      v174 = (HIDWORD(v165) >> 31) + 0x7FFFFFFF;
                                                    else
                                                      v174 = HIDWORD(v165) + HIDWORD(v168);
                                                    WebCore::RenderStyle::getRoundedInnerBorderFor((uint64_t)v5 + 80, v272.i32, v171, v172, v173, v174, 1, 1, (uint64_t)v266);
                                                    v175 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528);
                                                    v176 = 1.0;
                                                    if (v175)
                                                    {
                                                      v177 = *(_QWORD *)(v175 + 8);
                                                      if (v177)
                                                      {
                                                        v178 = *(_QWORD *)(v177 + 24);
                                                        if (v178)
                                                        {
                                                          v179 = *(float **)(v178 + 8);
                                                          if (v179)
                                                          {
                                                            v180 = (*(_DWORD *)v179)++;
                                                            v176 = v179[91];
                                                            if (v180)
                                                            {
                                                              *(_DWORD *)v179 = v180;
                                                            }
                                                            else
                                                            {
                                                              WebCore::Page::~Page((uint64_t)v179);
                                                              WTF::fastFree(v197, v198);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)v266, v176, (uint64_t)v269);
                                                    v181 = *((_QWORD *)v4 + 10);
                                                    *(float32x4_t *)v266 = vmulq_f32(vcvtq_f32_s32(v272), (float32x4_t)vdupq_n_s32(0x3C800000u));
                                                    WebCore::BackgroundPainter::clipRoundedInnerRect(v181, (float32x2_t *)v266, (float32x2_t *)v269);
                                                    goto LABEL_277;
                                                  }
                                                  goto LABEL_298;
                                                }
                                              }
                                              if (*(_BYTE *)(v159 + 252) && *(_BYTE *)(v159 + 252) != 11)
                                              {
                                                if (*(_BYTE *)(v159 + 254))
                                                {
                                                  if (*(float *)(v159 + 248) == 0.0)
                                                    goto LABEL_273;
                                                }
                                                else if (!*(_DWORD *)(v159 + 248))
                                                {
                                                  goto LABEL_273;
                                                }
                                              }
                                              goto LABEL_317;
                                            }
                                          }
                                          if (*(_BYTE *)(v159 + 236) && *(_BYTE *)(v159 + 236) != 11)
                                          {
                                            if (*(_BYTE *)(v159 + 238))
                                            {
                                              if (*(float *)(v159 + 232) == 0.0)
                                                goto LABEL_269;
                                            }
                                            else if (!*(_DWORD *)(v159 + 232))
                                            {
                                              goto LABEL_269;
                                            }
                                          }
                                          goto LABEL_317;
                                        }
                                      }
                                      if (*(_BYTE *)(v159 + 220))
                                        v164 = *(_BYTE *)(v159 + 220) == 11;
                                      else
                                        v164 = 1;
                                      if (!v164)
                                      {
                                        if (*(_BYTE *)(v159 + 222))
                                        {
                                          if (*(float *)(v159 + 216) == 0.0)
                                            goto LABEL_265;
                                        }
                                        else if (!*(_DWORD *)(v159 + 216))
                                        {
                                          goto LABEL_265;
                                        }
                                      }
                                      goto LABEL_317;
                                    }
                                  }
                                  else if (v107 == 0x4000)
                                  {
                                    if (*(_DWORD *)(v106 + 96) != 4)
                                      continue;
                                    goto LABEL_163;
                                  }
                                }
                                v105 = (WTF *)((char *)v105 + 8);
                                v104 -= 8;
                                if (!v104)
                                {
                                  v140 = 0;
                                  goto LABEL_221;
                                }
                                goto LABEL_165;
                              }
                            }
                          }
                          break;
                        }
LABEL_156:
                        v99 = 0;
                        v100 = 0;
                        goto LABEL_157;
                      }
LABEL_82:
                      if (*(_QWORD *)(v55 + 32) == v50)
                      {
                        v92 = 1;
                        goto LABEL_142;
                      }
                    }
                  }
                  v53 = (WTF *)((char *)v53 + 8);
                  v52 -= 8;
                  if (!v52)
                  {
                    v92 = 0;
LABEL_142:
                    v93 = (unsigned int **)v49;
                    v4 = v262;
                    do
                    {
                      v94 = *v93;
                      *v93 = 0;
                      if (v94)
                      {
                        do
                        {
                          v95 = __ldaxr(v94);
                          v96 = v95 - 1;
                        }
                        while (__stlxr(v96, v94));
                        if (!v96)
                        {
                          atomic_store(1u, v94);
                          WTF::fastFree((WTF *)v94, (void *)v27);
                        }
                      }
                      ++v93;
                    }
                    while (v93 != v51);
                    if (v49)
LABEL_149:
                      WTF::fastFree(v49, (void *)v27);
LABEL_150:
                    if (v92)
                    {
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v261 + 96))(v261, 1);
                      v97 = (float *)*((_QWORD *)v4 + 10);
                      if (v97[84] != 0.25)
                      {
                        v97[84] = 0.25;
                        *((_DWORD *)v97 + 46) |= 0x100u;
                      }
                      (*(void (**)(float *, _DWORD *))(*(_QWORD *)v97 + 88))(v97, (_DWORD *)v97 + 2);
                      v98 = 1;
                    }
                    else
                    {
                      v98 = 0;
                    }
                    v259 = v98;
                    if ((*((_BYTE *)v54 + 18) & 2) != 0)
                      goto LABEL_170;
                    goto LABEL_156;
                  }
                }
              }
              goto LABEL_425;
            }
            v200 = *(_QWORD *)(v45 + 200);
            if (v200)
            {
              v47 = *(_DWORD **)(v200 + 8);
              goto LABEL_73;
            }
          }
LABEL_427:
          v47 = 0;
          goto LABEL_73;
        }
      }
    }
  }
}

BOOL WebCore::RenderReplaced::shouldPaint(WebCore::RenderReplaced *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  WebCore::RenderReplaced *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  WebCore::PaintInfo *v32;
  WebCore::RenderReplaced *v33;
  const WebCore::LayoutPoint *v34;

  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x100) != 0)
  {
    v34 = a3;
    v32 = a2;
    v33 = this;
    if ((WebCore::RenderReplaced::isSelected(this) & 1) != 0)
      return 0;
    a2 = v32;
    this = v33;
    v3 = *((_DWORD *)v32 + 5);
    a3 = v34;
  }
  if ((v3 & 0x40000) != 0)
    return 0;
  v4 = 0;
  v5 = *((unsigned __int16 *)a2 + 8);
  if (v5 > 0x3FF)
  {
    if (v5 != 4096 && v5 != 0x2000 && v5 != 1024)
      return v4;
  }
  else
  {
    v6 = v5 - 8 > 0x38 || ((1 << (v5 - 8)) & 0x100000000000101) == 0;
    if (v6 && v5 != 128)
      return v4;
  }
  v8 = (WebCore::RenderReplaced *)*((_QWORD *)a2 + 3);
  if (v8)
  {
    if (v8 != this)
      return 0;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0 || (*((_BYTE *)this + 120) & 0x30) != 0)
    return 0;
  v9 = *((_QWORD *)this + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 20);
    v11 = (uint64_t *)(v9 + 28);
  }
  else
  {
    v10 = 0;
    v11 = (uint64_t *)((char *)this + 160);
  }
  v12 = *v11;
  v14 = *((_DWORD *)this + 38);
  v13 = *((_DWORD *)this + 39);
  v15 = *((_DWORD *)a3 + 1);
  v16 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a3, v14))
    v16 = *(_DWORD *)a3 + v14;
  v17 = __OFADD__(v15, v13);
  v18 = v15 + v13;
  v19 = (v15 >> 31) + 0x7FFFFFFF;
  if (v17)
    v18 = v19;
  v17 = __OFADD__((_DWORD)v10, v16);
  v20 = v10 + v16;
  if (v17)
    v20 = (v10 >> 31) + 0x7FFFFFFF;
  v21 = HIDWORD(v10);
  v17 = __OFADD__((_DWORD)v21, v18);
  v22 = v21 + v18;
  v23 = (v21 >> 31) + 0x7FFFFFFF;
  if (!v17)
    v23 = v22;
  v24 = v23 + HIDWORD(v12);
  if (__OFADD__(v23, HIDWORD(v12)))
    v24 = (v23 >> 31) + 0x7FFFFFFF;
  v25 = *((_DWORD *)a2 + 2);
  v17 = __OFADD__(*(_DWORD *)a2, v25);
  v26 = *(_DWORD *)a2 + v25;
  if (v17)
    v26 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  if ((int)v20 >= v26)
    return 0;
  v17 = __OFADD__(v20, (_DWORD)v12);
  v27 = v20 + v12;
  if (v17)
    v27 = (v20 >> 31) + 0x7FFFFFFF;
  if (v27 <= *(_DWORD *)a2)
    return 0;
  v28 = *((_DWORD *)a2 + 1);
  v29 = *((_DWORD *)a2 + 3);
  v17 = __OFADD__(v28, v29);
  v30 = v28 + v29;
  if (v17)
    v30 = (v28 >> 31) + 0x7FFFFFFF;
  return (int)v23 < v30 && v24 > v28;
}

BOOL WebCore::RenderReplaced::shouldDrawSelectionTint(WebCore::RenderReplaced *this)
{
  return (*((_BYTE *)this + 23) & 0xE) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3382) == 0;
}

uint64_t WebCore::Document::wheelEventHandlersChanged(uint64_t this, WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Page *v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  _BOOL8 v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  v2 = *(_QWORD *)(this + 528);
  if (!v2)
    return this;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return this;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return this;
  v5 = *(WebCore::Page **)(v4 + 8);
  if (!v5)
    return this;
  v7 = this;
  ++*(_DWORD *)v5;
  v8 = *(_DWORD **)(v3 + 288);
  if (v8)
  {
    ++v8[2];
    v9 = WebCore::Page::scrollingCoordinator(v5);
    if (!v9)
    {
LABEL_23:
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
      goto LABEL_25;
    }
    v10 = (_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
LABEL_10:
      ++*(_QWORD *)(v11 + 8);
      v13 = __ldxr((unsigned __int8 *)v11);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v11))
        {
LABEL_15:
          (*(void (**)(_QWORD *, _DWORD *))(*v10 + 88))(v10, v8);
          v15 = v10[1];
          if (__ldaxr((unsigned __int8 *)v15))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v15))
          {
LABEL_18:
            v17 = *(_QWORD *)(v15 + 8);
            v18 = v17 - 1;
            *(_QWORD *)(v15 + 8) = v17 - 1;
            if (v17 == 1)
            {
              v33 = *(_QWORD *)(v15 + 16);
              v19 = *(_QWORD *)(v15 + 24);
              *(_QWORD *)(v15 + 24) = 0;
              v20 = v33 != 0;
            }
            else
            {
              v19 = 0;
              v20 = 1;
            }
            v21 = __ldxr((unsigned __int8 *)v15);
            if (v21 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v15))
                goto LABEL_22;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_22:
            if (!v18)
            {
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
              if (!v20)
                WTF::fastFree((WTF *)v15, v14);
            }
            goto LABEL_23;
          }
          MEMORY[0x19AEA534C](v15);
          goto LABEL_18;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](v11);
    goto LABEL_10;
  }
LABEL_25:
  if (a2 && (*((_WORD *)a2 + 14) & 8) != 0)
  {
    *((_DWORD *)a2 + 6) += 2;
    WebCore::Element::invalidateStyle(a2);
    if (*((_DWORD *)a2 + 6) == 2)
    {
      if ((*((_WORD *)a2 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(a2);
    }
    else
    {
      *((_DWORD *)a2 + 6) -= 2;
    }
  }
  v22 = *(_QWORD *)(v7 + 528);
  if (v22 && (v23 = *(_QWORD **)(v22 + 8)) != 0)
  {
    v24 = (unsigned int *)(v23 + 1);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    WebCore::LocalFrame::invalidateContentEventRegionsIfNeeded(v23, 1);
    do
    {
      v26 = __ldaxr(v24);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v24));
    if (!v27)
    {
      atomic_store(1u, v24);
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E31FE290;
      v34[1] = v24;
      v35 = v34;
      WTF::ensureOnMainThread();
      if (v35)
        (*(void (**)(_QWORD *))(*v35 + 8))(v35);
    }
  }
  else
  {
    WebCore::LocalFrame::invalidateContentEventRegionsIfNeeded(0, 1);
  }
  v28 = *(uint64_t **)(v7 + 2304);
  v30 = v28 && (v29 = *v28) != 0 && *(_DWORD *)(v29 - 12) != 0;
  this = (*(uint64_t (**)(_QWORD, _BOOL8))(**(_QWORD **)(*((_QWORD *)v5 + 6) + 16) + 1344))(*(_QWORD *)(*((_QWORD *)v5 + 6) + 16), v30);
  if (*(_DWORD *)v5 == 1)
  {
    WebCore::Page::~Page(v5);
    return WTF::fastFree(v31, v32);
  }
  else
  {
    --*(_DWORD *)v5;
  }
  return this;
}

uint64_t WebCore::LocalFrameView::useSlowRepaints(WebCore::LocalFrameView *this, int a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int isEmptyIgnoringNullReferences;
  int v12;
  _BOOL8 hasViewportConstrainedObjects;
  WebCore::LocalFrameView *v14;
  WebCore::LocalFrameView *v15;
  int v16;
  int v17;
  int v18;

  while (1)
  {
    v2 = (_QWORD **)*((_QWORD *)this + 71);
    if (!v2
      || (v14 = this,
          v17 = a2,
          isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v2),
          a2 = v17,
          v12 = isEmptyIgnoringNullReferences,
          this = v14,
          v12))
    {
      v3 = *((_QWORD *)this + 5);
      if (v3)
      {
        v15 = this;
        v18 = a2;
        hasViewportConstrainedObjects = WebCore::LocalFrameView::hasViewportConstrainedObjects(this);
        a2 = v18;
        v3 = hasViewportConstrainedObjects;
        this = v15;
      }
    }
    else
    {
      v3 = 1;
    }
    v4 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 1944);
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 21) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v5 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194352770);
          }
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 144) + 256);
          if (v6)
          {
            v9 = *(_QWORD *)(v6 + 72);
            if (v9)
            {
              if ((*(_WORD *)(v9 + 177) & 0x20) != 0 && !*((_QWORD *)this + 5))
                break;
            }
          }
        }
      }
    }
    v7 = *((_BYTE *)this + 1366);
    if (v7)
      v7 = a2;
    if ((v3 & 1) != 0)
      return 1;
    v8 = *((_BYTE *)this + 1365) ? 1 : v7;
    if ((v8 & 1) != 0 || !*((_BYTE *)this + 1367))
      return 1;
    v16 = a2;
    this = (WebCore::LocalFrameView *)WebCore::LocalFrameView::parentFrameView(this);
    a2 = v16;
    if (!this)
      return 0;
  }
  return v3;
}

_QWORD *WebCore::LocalFrame::invalidateContentEventRegionsIfNeeded(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::RenderView *v5;
  _QWORD *v6;
  int v7;
  WebCore::RenderLayerCompositor *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::RenderLayerCompositor *v13;
  WTF *v14;
  void *v15;
  _QWORD *v16;

  v2 = result[3];
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = result[37];
  if (!v4)
    return result;
  v5 = *(WebCore::RenderView **)(v4 + 1944);
  if (!v5)
    return result;
  v6 = *(_QWORD **)(v4 + 2304);
  if (v6)
  {
    v6 = (_QWORD *)*v6;
    if (v6)
      LODWORD(v6) = *((_DWORD *)v6 - 3) != 0;
  }
  if (a2 == 1)
    LODWORD(v6) = 1;
  if (*(_BYTE *)(v4 + 3444))
  {
    if (*(_BYTE *)(v3 + 1100))
    {
LABEL_15:
      v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
      if (!v8)
      {
        v16 = result;
        v8 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        WebCore::RenderLayerCompositor::RenderLayerCompositor(v8, v5);
        v13 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
        *((_QWORD *)v5 + 50) = v8;
        if (v13)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v13);
          WTF::fastFree(v14, v15);
          v8 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
        }
        result = v16;
      }
      v9 = *((_QWORD *)v8 + 1);
      if ((*(_BYTE *)(v9 + 21) & 0x80) == 0)
        goto LABEL_19;
      if ((*(_BYTE *)(v9 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19435294CLL);
      }
      if (!*(_QWORD *)(*(_QWORD *)(v9 + 144) + 256))
      {
LABEL_19:
        v10 = result[15];
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
          {
            *(_DWORD *)(v11 + 24) += 2;
            v12 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
            *(_DWORD *)(v12 + 24) += 2;
            result = (_QWORD *)WebCore::Document::invalidateEventRegionsForFrame(v12, (WebCore::HTMLFrameOwnerElement *)v11);
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                result = (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v12);
            }
            else
            {
              *(_DWORD *)(v12 + 24) -= 2;
            }
            if (*(_DWORD *)(v11 + 24) == 2)
            {
              if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                return (_QWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v11);
            }
            else
            {
              *(_DWORD *)(v11 + 24) -= 2;
            }
          }
        }
      }
      return result;
    }
    v7 = (*(unsigned __int8 *)(*(_QWORD *)(v3 + 112) + 612) >> 3) & 1;
  }
  else
  {
    v7 = 0;
  }
  if (*(_BYTE *)(v4 + 3443))
    v7 = 1;
  if ((v7 | v6) == 1)
    goto LABEL_15;
  return result;
}

uint64_t WebCore::RenderLayer::flagsForUpdateLayerPositions(WebCore::RenderLayer *this, WebCore::RenderLayer *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WebCore::TransformationMatrix *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL isAffine;
  unsigned int v11;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 1;
  v4 = *(_QWORD *)(v2 + 24);
  if ((v4 & 0x20000000) != 0
    || (v4 & 1) == 0 && WebCore::RenderElement::canContainFixedPositionObjects(*(WebCore::RenderElement **)(v2 + 32)))
  {
    result = 33;
  }
  else
  {
    result = 1;
  }
  v5 = *(_QWORD *)(v2 + 24);
  if ((v5 & 0x40000000) != 0 || *(_QWORD *)(v2 + 200))
    result = result | 0x40;
  if ((v5 & 0x80000000) != 0
    || (v6 = *(WebCore::TransformationMatrix **)(v2 + 200)) != 0
    && (v11 = result, isAffine = WebCore::TransformationMatrix::isAffine(v6), result = v11, !isAffine))
  {
    result = result | 0x80;
  }
  v7 = *(_QWORD *)(v2 + 24);
  if ((v7 & 0x800000) != 0)
    goto LABEL_22;
  v8 = *(_QWORD *)(v2 + 32);
  if ((*(_DWORD *)(v8 + 20) & 0x1800000) == 0x1000000)
  {
    if ((*(_BYTE *)(v8 + 45) & 2) != 0)
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
    if ((*(_QWORD *)(v8 + 96) & 0x380000) == 0x300000 && (v7 & 0x20000000) == 0)
LABEL_22:
      result = result | 0x10;
  }
  if ((v7 & 0x10000000) != 0)
    return result | 0x100;
  v9 = *(_QWORD *)(v2 + 264);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 79))
      return result | 0x100;
  }
  return result;
}

_OWORD *WebCore::RegionContext::pushTransform(WebCore::RegionContext *this, const WebCore::AffineTransform *a2)
{
  _OWORD *result;
  unsigned int v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  result = (_OWORD *)((char *)this + 16);
  v4 = *((_DWORD *)this + 7);
  if (v4)
  {
    v12 = *((_QWORD *)this + 2);
    v13 = v12 + 48 * v4;
    v15 = *(_OWORD *)(v13 - 32);
    v14 = *(_OWORD *)(v13 - 16);
    v23 = *(_OWORD *)(v13 - 48);
    v24 = v15;
    v25 = v14;
    *(_QWORD *)&v15 = *((_QWORD *)a2 + 1);
    v16 = *(double *)&v15 * *(double *)&v24 + *(double *)a2 * *(double *)&v23;
    *(double *)&v14 = *(double *)&v15 * *((double *)&v24 + 1) + *(double *)a2 * *((double *)&v23 + 1);
    *(_QWORD *)&v15 = *((_QWORD *)a2 + 2);
    v17 = *((double *)a2 + 3);
    v18 = *(double *)&v24 * v17 + *(double *)&v15 * *(double *)&v23;
    *(double *)&v15 = *((double *)&v24 + 1) * v17 + *(double *)&v15 * *((double *)&v23 + 1);
    v19 = *((double *)a2 + 4);
    v20 = *((double *)a2 + 5);
    v21 = *(double *)&v25 + *(double *)&v24 * v20 + v19 * *(double *)&v23;
    v22 = *((double *)&v24 + 1) * v20 + v19 * *((double *)&v23 + 1) + *((double *)&v25 + 1);
    *(double *)&v23 = v16;
    *((_QWORD *)&v23 + 1) = v14;
    *(double *)&v24 = v18;
    *((_QWORD *)&v24 + 1) = v15;
    *(double *)&v25 = v21;
    *((double *)&v25 + 1) = v22;
    if (v4 == *((_DWORD *)this + 6))
      return (_OWORD *)WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::AffineTransform>((uint64_t)result, (unint64_t)&v23);
    v5 = (_OWORD *)(v12 + 48 * v4);
    v6 = v23;
    v7 = v24;
    v8 = v25;
  }
  else
  {
    if (!*((_DWORD *)this + 6))
    {
      result = (_OWORD *)WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, 1uLL, (unint64_t)a2);
      v9 = (_OWORD *)(*((_QWORD *)this + 2) + 48 * *((unsigned int *)this + 7));
      v11 = result[1];
      v10 = result[2];
      *v9 = *result;
      v9[1] = v11;
      v9[2] = v10;
      goto LABEL_5;
    }
    v5 = (_OWORD *)*((_QWORD *)this + 2);
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 1);
    v8 = *((_OWORD *)a2 + 2);
  }
  v5[1] = v7;
  v5[2] = v8;
  *v5 = v6;
LABEL_5:
  ++*((_DWORD *)this + 7);
  return result;
}

uint64_t WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 48 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::AffineTransform,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x5555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 48 * v8;
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v9)
    {
      v13 = 48 * v9;
      v14 = v5;
      do
      {
        v15 = *(_OWORD *)v14;
        v16 = *((_OWORD *)v14 + 2);
        v11[1] = *((_OWORD *)v14 + 1);
        v11[2] = v16;
        *v11 = v15;
        v11 += 3;
        v14 = (WTF *)((char *)v14 + 48);
        v13 -= 48;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t WebCore::jsNode_nodeType(uint64_t a1, uint64_t a2)
{
  unsigned int v2;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v2 = *(unsigned __int8 *)(a2 + 5);
  if (v2 <= 0xEF)
    return JSC::throwDOMAttributeGetterTypeError();
  else
    return v2 & 0xF | 0xFFFE000000000000;
}

uint64_t WebCore::JSMutationRecord::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::ScrollableArea::scrollbarsCanBeActive(WebCore::ScrollableArea *this)
{
  uint64_t v1;

  v1 = WebCore::ScrollableArea::scrollbarsController(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t WebCore::ResourceResponseBase::isInHTTPFamily(WebCore::ResourceResponseBase *this)
{
  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 1);
  return (*((unsigned __int8 *)this + 8) >> 1) & 1;
}

uint64_t WebCore::Region::Shape::Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  const void *v7;
  const void *v8;
  int v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v17;
  int v18;

  v6 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 32;
  v8 = (const void *)(a2 + 16);
  v7 = *(const void **)a2;
  if (v7 == v8)
  {
    memcpy(v6, v7, 4 * *(unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)a2 = v8;
    *(_QWORD *)a1 = v7;
    v17 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 32;
    *(_DWORD *)(a1 + 8) = v17;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = (_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 16;
  v11 = *(__int128 **)a3;
  if (*(_QWORD *)a3 == a3 + 16)
  {
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12)
    {
      v13 = 16 * v12;
      do
      {
        v14 = *v11++;
        *v10++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a1 + 144) = v11;
    v18 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 16;
    *(_DWORD *)(a1 + 152) = v18;
  }
  v15 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a1 + 156) = v15;
  return a1;
}

{
  void *v6;
  const void *v7;
  const void *v8;
  int v9;
  _OWORD *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  int v17;
  int v18;

  v6 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 32;
  v8 = (const void *)(a2 + 16);
  v7 = *(const void **)a2;
  if (v7 == v8)
  {
    memcpy(v6, v7, 4 * *(unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)a2 = v8;
    *(_QWORD *)a1 = v7;
    v17 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 32;
    *(_DWORD *)(a1 + 8) = v17;
  }
  v9 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v9;
  v10 = (_OWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 16;
  v11 = *(__int128 **)a3;
  if (*(_QWORD *)a3 == a3 + 16)
  {
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12)
    {
      v13 = 16 * v12;
      do
      {
        v14 = *v11++;
        *v10++ = v14;
        v13 -= 16;
      }
      while (v13);
    }
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a1 + 144) = v11;
    v18 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = 16;
    *(_DWORD *)(a1 + 152) = v18;
  }
  v15 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(a1 + 156) = v15;
  return a1;
}

void WebCore::ScrollView::paint(uint64_t a1, WebCore::GraphicsContext *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  float v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  const WebCore::IntPoint *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  WebCore::ScrollView *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::ScrollView *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  CGFloat v75;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v79;
  double v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  void *v85;
  double v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  double v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  int v96;
  uint64_t v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  double v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  unsigned int v113;
  float MaxX;
  unsigned int v115;
  double v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  unsigned int v121;
  float v122;
  unsigned int v123;
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;

  if (*(_QWORD *)(a1 + 40))
  {
    WebCore::Widget::paint(a1, (uint64_t)a2, a3);
    return;
  }
  if (!(*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2)
    || (v11 = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 48))(a2), a5)
    || v11)
  {
    v124 = *(_OWORD *)a3;
    if (*(_BYTE *)(a1 + 322))
    {
      v12 = DWORD2(v124);
      v13 = HIDWORD(v124);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
      {
        if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
          v14 = objc_msgSend((id)v14, "superview");
        objc_msgSend((id)v14, "frame");
        v75 = v74;
        y = v129.origin.y;
        width = v129.size.width;
        height = v129.size.height;
        *(float *)&v74 = v74;
        LODWORD(v14) = vcvtms_s32_f32(*(float *)&v74);
        *(float *)&v74 = v129.origin.y;
        LODWORD(v5) = vcvtms_s32_f32(*(float *)&v74);
        v129.origin.x = v75;
        CGRectGetMaxX(v129);
        v130.origin.x = v75;
        v130.origin.y = y;
        v130.size.width = width;
        v130.size.height = height;
        CGRectGetMaxY(v130);
        v5 = v14 | (v5 << 32);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 48);
      }
      v15 = v5;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 704))(a1 + 64))
      {
        v70 = *(_QWORD *)(a1 + 160);
        v15 = v5;
        if (v70)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v70 + 272))(*(_QWORD *)(a1 + 160)) & 1) != 0)
          {
            LODWORD(v71) = 0;
          }
          else
          {
            v79 = *(void **)(v70 + 40);
            if (v79)
            {
              if (objc_msgSend(*(id *)(v70 + 40), "conformsToProtocol:", &unk_1EE342188))
                v79 = (void *)objc_msgSend(v79, "superview");
              objc_msgSend(v79, "frame");
              v109 = v108;
              v110 = v141.origin.y;
              v111 = v141.size.width;
              v112 = v141.size.height;
              *(float *)&v108 = v108;
              v113 = vcvtms_s32_f32(*(float *)&v108);
              v141.origin.x = v109;
              MaxX = CGRectGetMaxX(v141);
              v115 = vcvtps_s32_f32(MaxX);
              v142.origin.x = v109;
              v142.origin.y = v110;
              v142.size.width = v111;
              v142.size.height = v112;
              CGRectGetMaxY(v142);
              LODWORD(v71) = v115 - v113;
            }
            else
            {
              v71 = *(_QWORD *)(v70 + 56);
            }
          }
          v15 = v71 + v5;
        }
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
      if ((int)v124 <= v15)
        v18 = v15;
      else
        v18 = v124;
      v19 = DWORD2(v124) + v124;
      if (SDWORD1(v124) <= SHIDWORD(v5))
        v20 = HIDWORD(v5);
      else
        v20 = DWORD1(v124);
      if (v16 + v15 < v19)
        v19 = v16 + v15;
      v21 = HIDWORD(v124) + DWORD1(v124);
      if (v17 + HIDWORD(v5) < HIDWORD(v124) + DWORD1(v124))
        v21 = v17 + HIDWORD(v5);
      if (v18 >= v19 || v20 >= v21)
      {
        v18 = 0;
        v20 = 0;
        v19 = 0;
        v21 = 0;
      }
      *(_QWORD *)&v124 = __PAIR64__(v20, v18);
      v12 = v19 - v18;
      v13 = v21 - v20;
      *((_QWORD *)&v124 + 1) = __PAIR64__(v13, v12);
    }
    if (v12 >= 1 && v13 >= 1)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
      v23 = *(_QWORD *)(a1 + 40);
      if (v23)
      {
        if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
          v23 = objc_msgSend((id)v23, "superview");
        objc_msgSend((id)v23, "frame");
        v81 = v80;
        v82 = v131.origin.y;
        v83 = v131.size.width;
        v84 = v131.size.height;
        *(float *)&v80 = v80;
        LODWORD(v23) = vcvtms_s32_f32(*(float *)&v80);
        *(float *)&v80 = v131.origin.y;
        LODWORD(v5) = vcvtms_s32_f32(*(float *)&v80);
        v131.origin.x = v81;
        CGRectGetMaxX(v131);
        v132.origin.x = v81;
        v132.origin.y = v82;
        v132.size.width = v83;
        v132.size.height = v84;
        CGRectGetMaxY(v132);
        v24 = v23 | (v5 << 32);
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 48);
      }
      v25 = a1 + 64;
      v26 = v24;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 704))(a1 + 64))
      {
        v72 = *(_QWORD *)(a1 + 160);
        v26 = v24;
        if (v72)
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v72 + 272))(*(_QWORD *)(a1 + 160)) & 1) != 0)
          {
            LODWORD(v73) = 0;
          }
          else
          {
            v85 = *(void **)(v72 + 40);
            if (v85)
            {
              if (objc_msgSend(*(id *)(v72 + 40), "conformsToProtocol:", &unk_1EE342188))
                v85 = (void *)objc_msgSend(v85, "superview");
              objc_msgSend(v85, "frame");
              v117 = v116;
              v118 = v143.origin.y;
              v119 = v143.size.width;
              v120 = v143.size.height;
              *(float *)&v116 = v116;
              v121 = vcvtms_s32_f32(*(float *)&v116);
              v143.origin.x = v117;
              v122 = CGRectGetMaxX(v143);
              v123 = vcvtps_s32_f32(v122);
              v144.origin.x = v117;
              v144.origin.y = v118;
              v144.size.width = v119;
              v144.size.height = v120;
              CGRectGetMaxY(v144);
              LODWORD(v73) = v123 - v121;
            }
            else
            {
              v73 = *(_QWORD *)(v72 + 56);
            }
          }
          v26 = v73 + v24;
        }
      }
      v27 = HIDWORD(v24);
      (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, (float)v26, (float)(int)v27);
      v28 = v124 - v26;
      v5 = (DWORD1(v124) - v27);
      LODWORD(v124) = v28;
      DWORD1(v124) -= v27;
      if (!*(_BYTE *)(a1 + 322))
      {
        v29 = (float)-(*(int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 832))(a1 + 64, 0, 1);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 832))(a1 + 64, 0, 1);
        (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, v29, (float)-v30);
        v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 832))(a1 + 64, 0, 1);
        LODWORD(v124) = v28 + v31;
        DWORD1(v124) = v5 + HIDWORD(v31);
        v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v25 + 832))(a1 + 64, 0, 1);
        *(float *)&v128 = (float)(int)v32;
        *((float *)&v128 + 1) = (float)SHIDWORD(v32);
        *((float *)&v128 + 2) = (float)v33;
        *((float *)&v128 + 3) = (float)v34;
        (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 456))(a2, &v128);
      }
      (*(void (**)(uint64_t, WebCore::GraphicsContext *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 552))(a1, a2, &v124, a4, a5);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
    }
    v128 = 0uLL;
    v126 = 0;
    v127 = 0;
    WebCore::ScrollView::calculateOverhangAreasForPainting((WebCore::ScrollView *)a1, (WebCore::IntRect *)&v128, (WebCore::IntRect *)&v126);
    v36 = a3[2];
    if (v36 >= 1)
    {
      v37 = a3[3];
      if (v37 >= 1)
      {
        if (SDWORD2(v128) >= 1
          && SHIDWORD(v128) >= 1
          && *a3 < (int)v128 + DWORD2(v128)
          && (int)v128 < *a3 + v36
          && (v38 = a3[1], v38 < DWORD1(v128) + HIDWORD(v128))
          && SDWORD1(v128) < v38 + v37
          || (int)v127 >= 1
          && SHIDWORD(v127) >= 1
          && *a3 < (int)v126 + (int)v127
          && (int)v126 < *a3 + v36
          && (v39 = a3[1], v39 < HIDWORD(v126) + HIDWORD(v127))
          && SHIDWORD(v126) < v39 + v37)
        {
          (*(void (**)(uint64_t, WebCore::GraphicsContext *, __int128 *, uint64_t *, int *))(*(_QWORD *)a1 + 560))(a1, a2, &v128, &v126, a3);
        }
      }
    }
    if (*(_BYTE *)(a1 + 318) || !*(_QWORD *)(a1 + 152) && !*(_QWORD *)(a1 + 160))
      goto LABEL_72;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
    v128 = *(_OWORD *)a3;
    v40 = *(_QWORD *)(a1 + 40);
    if (v40)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
        v40 = objc_msgSend((id)v40, "superview");
      objc_msgSend((id)v40, "frame");
      v87 = v86;
      v88 = v133.origin.y;
      v89 = v133.size.width;
      v90 = v133.size.height;
      *(float *)&v86 = v86;
      LODWORD(v40) = vcvtms_s32_f32(*(float *)&v86);
      *(float *)&v86 = v133.origin.y;
      LODWORD(a4) = vcvtms_s32_f32(*(float *)&v86);
      v133.origin.x = v87;
      CGRectGetMaxX(v133);
      v134.origin.x = v87;
      v134.origin.y = v88;
      v134.size.width = v89;
      v134.size.height = v90;
      CGRectGetMaxY(v134);
      v41 = v40 | (a4 << 32);
    }
    else
    {
      v41 = *(_QWORD *)(a1 + 48);
    }
    WebCore::ScrollView::unobscuredContentRect(a1, 1);
    v44 = v42;
    if ((int)v128 <= (int)v41)
      v45 = v41;
    else
      v45 = v128;
    v46 = DWORD2(v128) + v128;
    if (SDWORD1(v128) <= SHIDWORD(v41))
      v47 = HIDWORD(v41);
    else
      v47 = DWORD1(v128);
    if ((int)v42 + (int)v41 < v46)
      v46 = v42 + v41;
    v48 = HIDWORD(v128) + DWORD1(v128);
    v49 = HIDWORD(v42);
    if (HIDWORD(v42) + HIDWORD(v41) < HIDWORD(v128) + DWORD1(v128))
      v48 = HIDWORD(v42) + HIDWORD(v41);
    if (v45 >= v46 || v47 >= v48)
    {
      v45 = 0;
      v47 = 0;
      v46 = 0;
      v48 = 0;
    }
    *(_QWORD *)&v128 = __PAIR64__(v47, v45);
    DWORD2(v128) = v46 - v45;
    HIDWORD(v128) = v48 - v47;
    v50 = *(void **)(a1 + 40);
    if (v50)
    {
      v5 = (uint64_t)&selRef_setVideoElement_;
      if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
        v50 = (void *)objc_msgSend(v50, "superview");
      objc_msgSend(v50, "frame");
      v92 = v91;
      v93 = v135.origin.y;
      v94 = v135.size.width;
      v95 = v135.size.height;
      *(float *)&v91 = v91;
      v96 = vcvtms_s32_f32(*(float *)&v91);
      v135.origin.x = v92;
      CGRectGetMaxX(v135);
      v136.origin.x = v92;
      v136.origin.y = v93;
      v136.size.width = v94;
      v136.size.height = v95;
      v43.n128_f64[0] = CGRectGetMaxY(v136);
      v97 = *(_QWORD *)(a1 + 40);
      if (v97)
      {
        if (objc_msgSend((id)v97, "conformsToProtocol:", &unk_1EE342188))
          v97 = objc_msgSend((id)v97, "superview");
        objc_msgSend((id)v97, "frame");
        v99 = v98;
        v100 = v137.origin.y;
        v101 = v137.size.width;
        v102 = v137.size.height;
        *(float *)&v98 = v137.origin.y;
        LODWORD(v97) = vcvtms_s32_f32(*(float *)&v98);
        v137.origin.x = v99;
        CGRectGetMaxX(v137);
        v138.origin.x = v99;
        v138.origin.y = v100;
        v138.size.width = v101;
        v138.size.height = v102;
        v43.n128_f64[0] = CGRectGetMaxY(v138);
        v51 = v97 << 32;
        v43.n128_f32[0] = (float)v96;
        goto LABEL_69;
      }
      v43.n128_f32[0] = (float)v96;
    }
    else
    {
      v43.n128_f32[0] = (float)*(int *)(a1 + 48);
    }
    v51 = *(_QWORD *)(a1 + 48);
LABEL_69:
    (*(void (**)(WebCore::GraphicsContext *, __n128, float))(*(_QWORD *)a2 + 648))(a2, v43, (float)SHIDWORD(v51));
    v52 = *(_QWORD *)(a1 + 40);
    if (v52)
    {
      if (objc_msgSend(*(id *)(a1 + 40), "conformsToProtocol:", &unk_1EE342188))
        v52 = objc_msgSend((id)v52, "superview");
      objc_msgSend((id)v52, "frame");
      v104 = v103;
      v105 = v139.origin.y;
      v106 = v139.size.width;
      v107 = v139.size.height;
      *(float *)&v103 = v103;
      LODWORD(v52) = vcvtms_s32_f32(*(float *)&v103);
      *(float *)&v103 = v139.origin.y;
      LODWORD(v5) = vcvtms_s32_f32(*(float *)&v103);
      v139.origin.x = v104;
      CGRectGetMaxX(v139);
      v140.origin.x = v104;
      v140.origin.y = v105;
      v140.size.width = v106;
      v140.size.height = v107;
      CGRectGetMaxY(v140);
      v53 = v52 | (v5 << 32);
    }
    else
    {
      v53 = *(_QWORD *)(a1 + 48);
    }
    LODWORD(v128) = v128 - v53;
    DWORD1(v128) -= HIDWORD(v53);
    v126 = 0;
    *(float *)&v127 = (float)v44;
    *((float *)&v127 + 1) = (float)(int)v49;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *))(*(_QWORD *)a2 + 456))(a2, &v126);
    WebCore::ScrollView::paintScrollbars((WebCore::ScrollView *)a1, a2, (const WebCore::IntRect *)&v128);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
LABEL_72:
    if (*(_BYTE *)(a1 + 320))
    {
      if ((_MergedGlobals_220 & 1) == 0)
      {
        WebCore::ImageAdapter::loadPlatformResource((WebCore::ImageAdapter *)"panIcon", (uint64_t **)&v128);
        qword_1ECE83B78 = v128;
        _MergedGlobals_220 = 1;
      }
      v54 = *(_QWORD *)(a1 + 296);
      v125 = v54;
      v55 = *(_QWORD *)(a1 + 32);
      if (v55)
      {
        v56 = *(WebCore::ScrollView **)(v55 + 8);
        if (v56)
        {
          v54 = WebCore::ScrollView::windowToContents(v56, (const WebCore::IntPoint *)&v125, v35);
          v125 = v54;
        }
      }
      v57 = qword_1ECE83B78;
      *(float *)&v58 = (float)(int)v54;
      *(float *)&v59 = (float)SHIDWORD(v54);
      *(float *)&v60 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)qword_1ECE83B78 + 168))(qword_1ECE83B78, 0);
      *(_QWORD *)&v128 = __PAIR64__(v59, v58);
      *((_QWORD *)&v128 + 1) = __PAIR64__(v61, v60);
      *(float *)&v62 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 168))(v57, 0);
      v126 = 0;
      v127 = __PAIR64__(v63, v62);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 360))(a2, v57, &v128, &v126, 545);
    }
    if (a5
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    {
      *(_QWORD *)&v128 = WebCore::ScrollView::frameRectShrunkByInset((WebCore::ScrollView *)a1);
      *((_QWORD *)&v128 + 1) = v64;
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 120);
      if (v65)
      {
        v66 = *(_QWORD *)(v65 + 8);
        if (v66)
        {
          v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 40) + 8) + 528);
          if (v67)
          {
            v68 = *(_QWORD *)(v67 + 8);
            if (v68)
            {
              v69 = *(WebCore::ScrollView **)(v68 + 288);
              if (v69)
                WebCore::ScrollView::contentsToRootView(v69, (const WebCore::IntRect *)&v128);
            }
          }
        }
      }
      WebCore::LocalFrameView::axObjectCache((WebCore::LocalFrameView *)a1);
    }
  }
}

uint64_t WebCore::RegionContext::isAccessibilityRegionContext(WebCore::RegionContext *this)
{
  return 0;
}

void WebCore::RenderLayer::paint(uint64_t a1, WTF *a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  signed int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  signed int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[2];
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;

  v48 = 0;
  v12 = *(_QWORD *)a3;
  v13 = HIDWORD(*(_QWORD *)a3);
  v14 = *(_DWORD *)(a3 + 8);
  if (v14)
  {
    v15 = __OFADD__((_DWORD)v12, v14);
    v16 = v12 + v14;
    if (v15)
      v16 = (v12 >> 31) + 0x7FFFFFFF;
    if (v16 > 2147483583)
    {
      v17 = 0x1FFFFFF;
    }
    else if (v16 >= 0)
    {
      v17 = (v16 + 63) >> 6;
    }
    else
    {
      v17 = -(-v16 >> 6);
    }
  }
  else
  {
    v17 = (int)*(_QWORD *)a3 >> 6;
  }
  v18 = *(_DWORD *)(a3 + 12);
  v19 = *(uint64_t *)a3 >> 38;
  if (v18)
  {
    v20 = v13 + v18;
    if (__OFADD__((_DWORD)v13, v18))
      v20 = (v13 >> 31) + 0x7FFFFFFF;
    v21 = -(-v20 >> 6);
    if (v20 >= 0)
      v21 = (v20 + 63) >> 6;
    if (v20 <= 2147483583)
      LODWORD(v19) = v21;
    else
      LODWORD(v19) = 0x1FFFFFF;
  }
  v22 = v17 - ((int)*(_QWORD *)a3 >> 6);
  v23 = v19 - (*(uint64_t *)a3 >> 38);
  v24 = v12 & 0xFFFFFFC0;
  v25 = v13 & 0xFFFFFFC0;
  v26 = v22 << 6;
  if (v22 < -33554432)
    v26 = 0x80000000;
  v37[0] = a1;
  v37[1] = a6;
  if (v22 > 0x1FFFFFF)
    v26 = 0x7FFFFFFF;
  if (v23 >= -33554432)
    v27 = v23 << 6;
  else
    v27 = 0x80000000;
  if (v23 <= 0x1FFFFFF)
    v28 = v27;
  else
    v28 = 0x7FFFFFFF;
  v38 = v24;
  v39 = v25;
  v40 = v26;
  v41 = v28;
  v42 = *a4;
  v43 = &v48;
  v44 = a5;
  v45 = a8 == 1;
  v46 = 1;
  v47 = 0;
  if (a9)
  {
    v47 = a9;
    if ((*(unsigned int (**)(void))(*(_QWORD *)a9 + 16))())
      a7 |= 0x8000u;
  }
  WebCore::RenderLayer::paintLayer(a1, a2, (uint64_t)v37, a7);
  v30 = v48;
  if (!v48)
  {
    v31 = 0;
    LODWORD(v32) = 0;
LABEL_30:
    v33 = &v48[3 * v32];
    goto LABEL_31;
  }
  v32 = *((unsigned int *)v48 - 1);
  v33 = &v48[3 * v32];
  if (!*((_DWORD *)v48 - 3))
  {
    v31 = &v48[3 * v32];
    goto LABEL_30;
  }
  v31 = v48;
  if ((_DWORD)v32)
  {
    v36 = 24 * v32;
    v31 = v48;
    while ((unint64_t)(*v31 + 1) <= 1)
    {
      v31 += 3;
      v36 -= 24;
      if (!v36)
      {
        v31 = v33;
        break;
      }
    }
  }
LABEL_31:
  if (v48)
    v34 = &v48[3 * *((unsigned int *)v48 - 1)];
  else
    v34 = 0;
  if (v34 != v31)
  {
    do
    {
      v35 = v31 + 3;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v31 + 16))(*v31, 0);
      v31 = v33;
      if (v35 != v33)
      {
        v31 = v35;
        while ((unint64_t)(*v31 + 1) <= 1)
        {
          v31 += 3;
          if (v31 == v33)
          {
            v31 = v33;
            break;
          }
        }
      }
    }
    while (v31 != v34);
    v30 = v48;
  }
  if (v30)
    WTF::fastFree((WTF *)(v30 - 2), v29);
}

void WebCore::RenderLayer::paintLayer(uint64_t a1, WTF *a2, uint64_t a3, uint64_t a4)
{
  WTF *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RenderView *v12;
  WebCore::RenderLayerCompositor *v13;
  WebCore::RenderView *v14;
  WebCore::RenderLayerCompositor *v15;
  uint64_t v16;
  WebCore::RenderLayerModelObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t (*v25)();
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BOOL4 v29;
  __int128 *v30;
  int v31;
  int8x16_t v32;
  __int128 v33;
  int8x16_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  uint64_t v42;
  WebCore::RegionContext *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  int *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  __int128 *v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  signed int v61;
  int v62;
  int v64;
  signed int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const WebCore::LayoutRect **v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  int v80;
  int v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  uint64_t v95;
  float v96;
  float v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double (*v106)[4][4];
  WebCore::RegionContext *v107;
  uint64_t v108;
  unsigned __int16 *v109;
  double v110;
  double v111;
  int v112;
  double v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  double v144;
  double v145;
  float v146;
  double v147;
  double v148;
  float v149;
  float v150;
  double v151;
  double v152;
  float v153;
  double v154;
  double v155;
  float v156;
  float v157;
  float v158;
  int v160;
  float v161;
  int v163;
  float v164;
  float v165;
  float v166;
  unsigned int v168;
  float v169;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  float v176;
  float v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  float v191;
  float v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  WTF *v197;
  void *v198;
  WTF *v199;
  void *v200;
  int v201;
  uint64_t v202;
  WebCore::RenderView *v203;
  WebCore::RenderLayerCompositor *v204;
  WebCore::RenderView *v205;
  WebCore::RenderLayerCompositor *v206;
  int v207;
  const WebCore::RenderLayerModelObject *v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  unsigned int v225;
  unint64_t v226;
  float v227;
  float v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double *v236;
  unsigned __int16 *v237;
  float v238;
  double v239;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  float v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  float v259;
  float v260;
  float v261;
  double v262;
  double v263;
  double v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v273;
  float v274;
  float v276;
  float v278;
  float v279;
  float v280;
  WebCore::RenderLayerCompositor *v282;
  WebCore::RenderLayerCompositor *v283;
  WTF *v284;
  void *v285;
  int v286;
  WebCore::RenderLayerCompositor *v287;
  WebCore::RenderLayerCompositor *v288;
  WTF *v289;
  void *v290;
  WTF *v292;
  unint64_t v293;
  int v294;
  unsigned int v295;
  int v296;
  uint64_t v297;
  float v298;
  float v299;
  float v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  WTF *v305;
  WebCore::RenderLayerCompositor *v306;
  WebCore::RenderLayerCompositor *v307;
  WTF *v308;
  void *v309;
  unint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  int v316;
  unsigned int v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  void (*v327)(void);
  uint64_t v328;
  WTF *v329;
  WebCore::RenderObject *v330;
  WebCore::RenderLayerCompositor *v331;
  WebCore::RenderLayerCompositor *v332;
  WTF *v333;
  void *v334;
  int v335;
  double v336;
  int v337;
  double v338;
  int v339;
  double v340;
  int v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  unsigned int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int v356;
  WTF *v357;
  float v358;
  WebCore::RegionContext *v359;
  __int128 v360;
  char v361;
  __int128 v362;
  int8x16_t v363;
  __int128 v364;
  float64x2_t v365;
  int8x16_t v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  double v375;
  uint64_t v376;
  double v377;
  uint64_t v378;
  double v379;
  int v380[12];
  __int128 v381;
  int8x16_t v382;
  __int128 v383;
  float64x2_t v384;
  int8x16_t v385;
  int8x16_t v386;
  __int128 v387;
  __int128 v388;
  WTF *v389[16];

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 80);
  if (v8 && *(_QWORD *)(v8 + 8))
    goto LABEL_8;
  v9 = *(_QWORD *)(a1 + 256);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 290))
      goto LABEL_336;
    v11 = *(_QWORD *)(v9 + 8);
    if ((*(_BYTE *)(v11 + 24) & 1) == 0)
      goto LABEL_336;
    v12 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 24) + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v13 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v12 + 50);
    if (!v13)
    {
      v282 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v13 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v282, v12);
      v283 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v12 + 50);
      *((_QWORD *)v12 + 50) = v13;
      if (v283)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v283);
        WTF::fastFree(v284, v285);
        v13 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v12 + 50);
      }
    }
    if (*((_BYTE *)v13 + 198))
      goto LABEL_336;
    v14 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8)
                                                                                              + 32)
                                                                                  + 24)
                                                                      + 8)
                                                          + 40)
                                              + 8)
                                  + 1944);
    v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
    if (!v15)
    {
      v287 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v15 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v287, v14);
      v288 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
      *((_QWORD *)v14 + 50) = v15;
      if (v288)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v288);
        WTF::fastFree(v289, v290);
        v15 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v14 + 50);
      }
    }
    if (*((_DWORD *)v15 + 54) == 2)
    {
LABEL_336:
      if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 291))
      {
        if ((a4 & 8) == 0
          || (v236 = *(double **)(a1 + 200)) != 0
          && (v236[2] != 0.0
           || v236[3] != 0.0
           || v236[6] != 0.0
           || v236[7] != 0.0
           || v236[8] != 0.0
           || v236[9] != 0.0
           || v236[10] != 1.0
           || v236[11] != 0.0
           || v236[14] != 0.0
           || v236[15] != 1.0))
        {
          v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8);
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 1272) != v10 || (a4 & 0x800) == 0)
          {
LABEL_8:
            if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v6 + 48))(v6) & 1) == 0
              && (*(_BYTE *)(a3 + 49) & 2) == 0)
            {
              return;
            }
            a4 = a4 | 4;
          }
        }
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  if ((v16 & 0x18000000000) == 0x8000000000)
  {
    if ((v16 & 0x1800) == 0 || (*(_DWORD *)(a3 + 48) & 0x10000) == 0)
      return;
  }
  else if ((v16 & 0x1800) == 0)
  {
    return;
  }
  v17 = *(WebCore::RenderLayerModelObject **)(a1 + 32);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v18 + 3414))
    return;
  v19 = *((_QWORD *)v17 + 11);
  v20 = *(_QWORD *)(v19 + 32);
  v21 = *(float *)(v20 + 4);
  if (v21 == 0.0)
    return;
  v22 = *(_DWORD *)(a3 + 48);
  if (v21 >= 1.0)
  {
    v23 = *(_QWORD *)(v20 + 48);
    v24 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    if (*(_QWORD *)(v23 + 8))
    {
      while (!*(_QWORD *)(v23 + 16))
      {
        v23 = *(_QWORD *)(v23 + 8);
        if (!v23)
          goto LABEL_29;
      }
    }
    else
    {
      if (*(_QWORD *)(v23 + 16))
        v25 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v25 = 0;
      if (!v25)
      {
LABEL_29:
        v26 = *(_QWORD *)(v19 + 40);
        if (!*(_QWORD *)(*(_QWORD *)(v26 + 216) + 8))
          v24 = 0;
        if (!v24
          && (*(_DWORD *)(v26 + 636) & 0x1F00000) == 0x100000
          && ((v16 & 0x800000000000) == 0 || (v16 & 0xA) == 0))
        {
          if ((*(_QWORD *)(*(_QWORD *)(v18 + 680) + 680) & 0x800000000000) == 0)
            goto LABEL_35;
          v304 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(v17);
          if (!v304)
            goto LABEL_35;
          WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(v304, v389);
          v305 = v389[0];
          v389[0] = 0;
          if (v305)
          {
            if (*((_DWORD *)v305 + 6) == 2)
            {
              if ((*((_WORD *)v305 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v305, a2);
            }
            else
            {
              *((_DWORD *)v305 + 6) -= 2;
            }
            goto LABEL_35;
          }
        }
      }
    }
  }
  if ((v22 & 0x200) != 0 || !*(_QWORD *)(a1 + 256))
    a4 = a4 | 1;
LABEL_35:
  v27 = *(_DWORD *)(a3 + 48);
  v28 = *(_QWORD *)(a1 + 256);
  if (v28)
  {
    if (*(_BYTE *)(v28 + 290))
      goto LABEL_257;
    v202 = *(_QWORD *)(v28 + 8);
    if ((*(_BYTE *)(v202 + 24) & 1) == 0)
      goto LABEL_257;
    v203 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v202 + 32) + 24) + 8)
                                                           + 40)
                                               + 8)
                                   + 1944);
    v204 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v203 + 50);
    if (!v204)
    {
      v306 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v204 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v306, v203);
      v307 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v203 + 50);
      *((_QWORD *)v203 + 50) = v204;
      if (v307)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v307);
        WTF::fastFree(v308, v309);
        v204 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v203 + 50);
      }
    }
    if (*((_BYTE *)v204 + 198))
    {
LABEL_257:
      v29 = 0;
    }
    else
    {
      v205 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8)
                                                                                                 + 32)
                                                                                     + 24)
                                                                         + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944);
      v206 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v205 + 50);
      if (!v206)
      {
        v331 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v206 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v331, v205);
        v332 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v205 + 50);
        *((_QWORD *)v205 + 50) = v206;
        if (v332)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v332);
          WTF::fastFree(v333, v334);
          v206 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v205 + 50);
        }
      }
      v29 = *((_DWORD *)v206 + 54) != 2;
    }
  }
  else
  {
    v29 = 1;
  }
  v30 = *(__int128 **)(a1 + 200);
  if (v30 && (v29 | ((unsigned __int16)(v27 & 0x200) >> 9)) == 1 && (a4 & 2) == 0)
  {
    v31 = *(_DWORD *)(a3 + 48);
    v32 = (int8x16_t)v30[5];
    v366 = (int8x16_t)v30[4];
    v367 = (__int128)v32;
    v33 = v30[7];
    v368 = v30[6];
    v369 = v33;
    v34 = (int8x16_t)v30[1];
    v362 = *v30;
    v363 = v34;
    v35 = (float64x2_t)v30[3];
    v364 = v30[2];
    v365 = v35;
    if ((v31 & 0x200) != 0)
    {
      v363 = 0uLL;
      v38 = 0uLL;
      v365 = 0u;
      v366 = 0u;
      v39 = (float64x2_t)xmmword_1968A14C0;
      v367 = xmmword_1968A14B0;
      v369 = xmmword_1968A14C0;
      v37 = 1.0;
      v36 = 0uLL;
      v40 = 0uLL;
    }
    else
    {
      v36 = v365;
      v37 = *((double *)&v369 + 1);
      v38 = (float64x2_t)vextq_s8(v363, v363, 8uLL);
      v39 = (float64x2_t)vextq_s8(v366, (int8x16_t)v367, 8uLL);
      v40 = (float64x2_t)vextq_s8((int8x16_t)v367, v366, 8uLL);
    }
    if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v38), (int32x4_t)vceqzq_f64(v36)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v40), (int32x4_t)vceqq_f64(v39, (float64x2_t)xmmword_1968A14C0)))))) & 1) != 0|| v37 != 1.0)
    {
      goto LABEL_339;
    }
    if (*((double *)&v362 + 1) == 0.0
      && *(double *)&v364 == 0.0
      && *(double *)&v362 == 1.0
      && *((double *)&v364 + 1) == 1.0)
    {
      goto LABEL_51;
    }
    if (*(double *)&v369 == 0.0)
      v41 = *(double *)&v362 * *((double *)&v364 + 1) - *((double *)&v362 + 1) * *(double *)&v364;
    else
LABEL_339:
      v41 = WebCore::determinant4x4((WebCore *)&v362, (const double (*)[4][4])a2);
    if (((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
      return;
LABEL_51:
    if ((a4 & 1) != 0)
    {
      if (*(_QWORD *)a3 == a1 || (v190 = *(_QWORD *)(a1 + 40)) == 0)
        v190 = a1;
      WebCore::RenderLayer::beginTransparencyLayers(v190, (uint64_t)v6, a3, (const WebCore::LayoutRect *)(a3 + 16));
    }
    v42 = *(_QWORD *)(a1 + 216);
    if (v42)
    {
      v193 = a4;
      v194 = a1;
      do
      {
        v195 = *(_QWORD *)(v42 + 8);
        if (!v195)
          break;
        if (*(_QWORD *)(v195 + 256))
          goto LABEL_53;
        if (v195 == v194)
          break;
        if (*(_QWORD *)(v194 + 256))
          goto LABEL_53;
        v328 = a4;
        v329 = v6;
        if ((*(_BYTE *)(v194 + 24) & 4) == 0)
        {
          v330 = *(WebCore::RenderObject **)(v194 + 32);
          while (1)
          {
            v330 = WebCore::RenderObject::containingBlock(v330);
            v6 = v329;
            LODWORD(a4) = v328;
            if (!v330 || *((_BYTE *)v330 + 46) == 49)
              goto LABEL_248;
            if ((*((_BYTE *)v330 + 21) & 0x80) != 0)
            {
              v194 = *((_QWORD *)v330 + 18);
              goto LABEL_469;
            }
          }
        }
        v194 = *(_QWORD *)(v194 + 40);
LABEL_469:
        v42 = *(_QWORD *)(v194 + 216);
        v6 = v329;
        a4 = v328;
      }
      while (v42);
LABEL_248:
      v196 = *(_QWORD *)(a1 + 216);
      if (v196)
      {
        if (*(_QWORD *)(v196 + 8))
        {
          WebCore::RenderLayer::paintTransformedLayerIntoFragments(a1, v6, a3, v193);
          return;
        }
      }
    }
LABEL_53:
    v360 = *(_OWORD *)(a3 + 16);
    v361 = 0;
    v43 = *(WebCore::RegionContext **)(a3 + 56);
    if (v43)
      ++*((_DWORD *)v43 + 2);
    v359 = v43;
    if (!*(_QWORD *)(a1 + 40))
    {
      v355 = 0;
      v81 = 0;
      goto LABEL_111;
    }
    v354 = *(_QWORD *)a3;
    v374 = *(_QWORD *)a3;
    LODWORD(v375) = ((int)((_DWORD)a4 << 29) >> 31) & 5;
    BYTE4(v375) = (a4 & 0x400) == 0;
    WebCore::RenderLayer::parentClipRects((WTF *)v389, a1, (uint64_t)&v374);
    v45 = v389[0];
    v46 = *(_QWORD *)(a1 + 32);
    v47 = (*(_DWORD *)(v46 + 96) >> 19) & 7;
    if (v47 == 2)
    {
      v48 = (int *)((char *)v389[0] + 48);
    }
    else if (v47 == 6)
    {
      v48 = (int *)((char *)v389[0] + 28);
    }
    else
    {
      v48 = (int *)((char *)v389[0] + 8);
    }
    v356 = a4;
    v357 = v6;
    v49 = *v48;
    v50 = v48[1];
    v51 = v48[2];
    v52 = v48[3];
    v53 = v48[4];
    if (!*((_BYTE *)v389[0] + 4))
    {
      v54 = *v48;
      v55 = v48[1];
      goto LABEL_60;
    }
    v231 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 24) + 8) + 40) + 8) + 1944);
    v54 = *v48;
    v55 = v48[1];
    if (*(_QWORD *)(v354 + 32) != v231)
    {
LABEL_60:
      if (*(_DWORD *)v45 == 1)
        WTF::fastFree(v45, v44);
      else
        --*(_DWORD *)v45;
      v56 = (__int128 *)(a3 + 16);
      *(_QWORD *)&v360 = __PAIR64__(v55, v54);
      *((_QWORD *)&v360 + 1) = __PAIR64__(v52, v51);
      v361 = v53;
      v58 = *(_DWORD *)(a3 + 16);
      v57 = *(_DWORD *)(a3 + 20);
      if (v58 != -1073741808
        || v57 != -1073741808
        || *(_DWORD *)(a3 + 24) != 2147483615
        || *(_DWORD *)(a3 + 28) != 2147483615)
      {
        if (v54 == -1073741808 && v51 == 2147483615)
        {
          if (v55 != -1073741808 || v52 != 2147483615)
          {
            if (v58 >= -1073741808)
              v59 = *(_DWORD *)(a3 + 16);
            else
              v59 = -1073741808;
            if ((int)v55 <= (int)v57)
              v60 = v57;
            else
              v60 = v55;
            v61 = 1073741807;
            if (__OFADD__(-1073741808, 2147483615))
              v61 = 0x80000000;
            v62 = *(_DWORD *)(a3 + 24);
            _VF = __OFADD__(v58, v62);
            v64 = v58 + v62;
            if (_VF)
              v64 = (v58 >> 31) + 0x7FFFFFFF;
            if (v64 >= v61)
              v65 = v61;
            else
              v65 = v64;
            v66 = v55 + v52;
            if (__OFADD__(v55, v52))
              v66 = (v55 >> 31) + 0x7FFFFFFF;
            v67 = *(_DWORD *)(a3 + 28);
            _VF = __OFADD__(v57, v67);
            v68 = v57 + v67;
            if (_VF)
              v68 = (v57 >> 31) + 0x7FFFFFFF;
            if (v68 >= v66)
              v69 = v66;
            else
              v69 = v68;
            if (v59 >= v65 || (int)v60 >= v69)
            {
              v65 = 0;
              v69 = 0;
              v59 = 0;
              v60 = 0;
            }
            *(_QWORD *)&v360 = v59 | (unint64_t)(v60 << 32);
            _VF = __OFSUB__(v65, v59);
            v70 = v65 - v59;
            if (_VF)
              v70 = (v65 >> 31) + 0x7FFFFFFF;
            _VF = __OFSUB__(v69, (_DWORD)v60);
            v71 = (v69 - v60);
            if (_VF)
              v71 = (v69 >> 31) + 0x7FFFFFFF;
            v72 = v70 | (unint64_t)(v71 << 32);
LABEL_97:
            *((_QWORD *)&v360 + 1) = v72;
            goto LABEL_98;
          }
        }
        else if (v54 != -1073741808 || v55 != -1073741808 || v51 != 2147483615 || v52 != 2147483615)
        {
          if (v54 <= v58)
            v341 = *(_DWORD *)(a3 + 16);
          else
            v341 = v54;
          if ((int)v55 <= (int)v57)
            v342 = v57;
          else
            v342 = v55;
          v343 = v54 + v51;
          if (__OFADD__(v54, v51))
            v343 = (v54 >> 31) + 0x7FFFFFFF;
          v344 = *(_DWORD *)(a3 + 24);
          _VF = __OFADD__(v58, v344);
          v345 = v58 + v344;
          if (_VF)
            v345 = (v58 >> 31) + 0x7FFFFFFF;
          if (v345 >= v343)
            v346 = v343;
          else
            v346 = v345;
          v347 = v55 + v52;
          if (__OFADD__(v55, v52))
            v347 = (v55 >> 31) + 0x7FFFFFFF;
          v348 = *(_DWORD *)(a3 + 28);
          _VF = __OFADD__(v57, v348);
          v349 = v57 + v348;
          if (_VF)
            v349 = (v57 >> 31) + 0x7FFFFFFF;
          if (v349 >= v347)
            v350 = v347;
          else
            v350 = v349;
          if (v341 >= v346 || (int)v342 >= v350)
          {
            v346 = 0;
            v350 = 0;
            v341 = 0;
            v342 = 0;
          }
          *(_QWORD *)&v360 = v341 | (unint64_t)(v342 << 32);
          _VF = __OFSUB__(v346, v341);
          v351 = v346 - v341;
          LODWORD(v352) = (v346 >> 31) + 0x7FFFFFFF;
          if (_VF)
            v352 = v352;
          else
            v352 = v351;
          _VF = __OFSUB__(v350, (_DWORD)v342);
          v353 = (v350 - v342);
          if (_VF)
            v353 = (v350 >> 31) + 0x7FFFFFFF;
          v72 = v352 | (v353 << 32);
          goto LABEL_97;
        }
        v360 = *v56;
      }
LABEL_98:
      v73 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v73 + 46) == 83)
      {
        ++*(_DWORD *)(v73 + 16);
        if (WebCore::RenderSVGRoot::shouldApplyViewportClip((WebCore::RenderSVGRoot *)v73))
        {
          v292 = *(WTF **)(v73 + 160);
          v389[0] = 0;
          v389[1] = v292;
          v293 = WebCore::RenderLayer::offsetFromAncestor(a1, v354, 0);
          v294 = *(_DWORD *)(a3 + 32);
          _VF = __OFADD__((_DWORD)v293, v294);
          v295 = v293 + v294;
          if (_VF)
            v295 = (v293 >> 31) + 0x7FFFFFFF;
          v296 = *(_DWORD *)(a3 + 36);
          _VF = __OFADD__(HIDWORD(v293), v296);
          v297 = (HIDWORD(v293) + v296);
          if (_VF)
            v297 = ((HIDWORD(v293) >> 31) + 0x7FFFFFFF);
          *(_QWORD *)&v381 = v295 | (unint64_t)(v297 << 32);
          v298 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                        + 40)
                                                                            + 8));
          v299 = WebCore::roundPointToDevicePixels((WebCore *)&v381, (const WebCore::LayoutPoint *)1, v298);
          WebCore::LayoutSize::expand<float,float>((int *)v389, v299, v300);
          WebCore::ClipRect::intersect((int *)&v360, (const WebCore::LayoutRect *)v389);
        }
        v301 = *(_DWORD *)(v73 + 16);
        if (!v301)
        {
          __break(0xC471u);
          JUMPOUT(0x194355B0CLL);
        }
        *(_DWORD *)(v73 + 16) = v301 - 1;
      }
      v74 = *(const WebCore::LayoutRect ***)(a1 + 40);
      v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v74[4] + 3) + 8) + 40) + 8) + 528);
      v76 = 1.0;
      LODWORD(a4) = v356;
      v6 = v357;
      v43 = v359;
      if (v75)
      {
        v77 = *(_QWORD *)(v75 + 8);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 + 24);
          if (v78)
          {
            v79 = *(float **)(v78 + 8);
            if (v79)
            {
              v80 = (*(_DWORD *)v79)++;
              v76 = v79[91];
              if (v80)
              {
                *(_DWORD *)v79 = v80;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v79);
                WTF::fastFree(v199, v200);
              }
            }
          }
        }
      }
      if (v360 == __PAIR128__(0x7FFFFFDF7FFFFFDFLL, 0xC0000010C0000010)
        || (_DWORD)v360 == *(_DWORD *)(a3 + 16)
        && *(_QWORD *)((char *)&v360 + 4) == *(_QWORD *)(a3 + 20)
        && HIDWORD(v360) == *(_DWORD *)(a3 + 28))
      {
        if (!v361)
        {
          v81 = 0;
          v355 = 0;
          goto LABEL_111;
        }
        (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v357 + 96))(v357, 1);
        v355 = 0;
      }
      else
      {
        (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v357 + 96))(v357, 1);
        *(_OWORD *)v389 = v360;
        v210 = *(_DWORD *)(a3 + 32);
        v209 = *(_DWORD *)(a3 + 36);
        _VF = __OFADD__((_DWORD)v360, v210);
        v211 = v360 + v210;
        if (_VF)
          v211 = (v360 >> 31) + 0x7FFFFFFF;
        LODWORD(v389[0]) = v211;
        _VF = __OFADD__(HIDWORD(v389[0]), v209);
        v212 = HIDWORD(v389[0]) + v209;
        if (_VF)
          v212 = (HIDWORD(v389[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v389[0]) = v212;
        WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v389, v74[4], v208);
        *(_QWORD *)&v381 = __PAIR64__(v214, v213);
        *((_QWORD *)&v381 + 1) = __PAIR64__(v216, v215);
        (*(void (**)(WTF *, __int128 *))(*(_QWORD *)v357 + 456))(v357, &v381);
        v217 = floorf(*(float *)&v381);
        if (v217 < 2147500000.0 && v217 > -2147500000.0
          || (v218 = 2147500000.0, v217 < 2147500000.0) && (v218 = -2147500000.0, v217 > -2147500000.0))
        {
          v218 = (float)(int)v217;
        }
        v219 = floorf(*((float *)&v381 + 1));
        if (v219 < 2147500000.0 && v219 > -2147500000.0
          || (v220 = 2147500000.0, v219 < 2147500000.0) && (v220 = -2147500000.0, v219 > -2147500000.0))
        {
          v220 = (float)(int)v219;
        }
        v221 = ceilf(*(float *)&v381 + *((float *)&v381 + 2));
        if (v221 < 2147500000.0 && v221 > -2147500000.0
          || (v222 = 2147500000.0, v221 < 2147500000.0) && (v222 = -2147500000.0, v221 > -2147500000.0))
        {
          v222 = (float)(int)v221;
        }
        v223 = ceilf(*((float *)&v381 + 1) + *((float *)&v381 + 3));
        if (v223 < 2147500000.0 && v223 > -2147500000.0
          || (v224 = 2147500000.0, v223 < 2147500000.0) && (v224 = -2147500000.0, v223 > -2147500000.0))
        {
          v224 = (float)(int)v223;
        }
        if (v218 >= 2147500000.0 || v218 <= -2147500000.0)
        {
          if (v218 >= 2147500000.0)
          {
            v225 = 0x7FFFFFFF;
          }
          else if (v218 <= -2147500000.0)
          {
            v225 = 0x80000000;
          }
          else
          {
            v225 = (int)v218;
          }
          LODWORD(a4) = v356;
          v6 = v357;
          v43 = v359;
        }
        else
        {
          v225 = (int)v218;
        }
        if (v220 >= 2147500000.0 || v220 <= -2147500000.0)
        {
          if (v220 >= 2147500000.0)
          {
            v226 = 0x7FFFFFFF00000000;
          }
          else if (v220 <= -2147500000.0)
          {
            v226 = 0x8000000000000000;
          }
          else
          {
            v226 = (unint64_t)(int)v220 << 32;
          }
          LODWORD(a4) = v356;
          v6 = v357;
          v43 = v359;
        }
        else
        {
          v226 = (unint64_t)(int)v220 << 32;
        }
        v227 = v222 - v218;
        v228 = v224 - v220;
        if (v227 >= 2147500000.0 || v227 <= -2147500000.0)
        {
          if (v227 >= 2147500000.0)
          {
            v229 = 0x7FFFFFFF;
          }
          else if (v227 <= -2147500000.0)
          {
            v229 = 0x80000000;
          }
          else
          {
            v229 = (int)v227;
          }
          LODWORD(a4) = v356;
          v6 = v357;
          v43 = v359;
        }
        else
        {
          v229 = (int)v227;
        }
        if (v228 >= 2147500000.0 || v228 <= -2147500000.0)
        {
          if (v228 >= 2147500000.0)
          {
            v230 = 0x7FFFFFFF00000000;
          }
          else if (v228 <= -2147500000.0)
          {
            v230 = 0x8000000000000000;
          }
          else
          {
            v230 = (unint64_t)(int)v228 << 32;
          }
          LODWORD(a4) = v356;
          v6 = v357;
          v43 = v359;
        }
        else
        {
          v230 = (unint64_t)(int)v228 << 32;
        }
        *(_QWORD *)&v370 = v226 | v225;
        *((_QWORD *)&v370 + 1) = v230 | v229;
        if (v43)
          WebCore::RegionContext::pushClip(v43, (const WebCore::IntRect *)&v370);
        v355 = 1;
        v81 = 1;
        if (!v361)
          goto LABEL_111;
      }
      v233 = (uint64_t)v74;
      v81 = 1;
      while (1)
      {
        if ((a4 & 0x400) != 0)
        {
          v234 = *(_QWORD *)(v233 + 264);
          if (v234)
          {
            if (*(_BYTE *)(v234 + 79) && *(_QWORD *)(*(_QWORD *)(v234 + 96) + 256))
              break;
          }
        }
        v235 = *(_QWORD *)(v233 + 32);
        if ((*(_BYTE *)(v235 + 22) & 1) != 0
          && WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v235 + 80))
          && WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)v74, (const WebCore::RenderLayer *)v233, 0))
        {
          v310 = WebCore::RenderLayer::offsetFromAncestor(v233, *(_QWORD *)a3, 1);
          v311 = *(_DWORD *)(v233 + 164);
          v312 = *(_DWORD *)(v233 + 168);
          LODWORD(v313) = v311 << 6;
          if (v311 < -33554432)
            LODWORD(v313) = 0x80000000;
          if (v311 <= 0x1FFFFFF)
            v313 = v313;
          else
            v313 = 0x7FFFFFFFLL;
          if (v312 >= -33554432)
            v314 = v312 << 6;
          else
            v314 = 0x80000000;
          if (v312 <= 0x1FFFFFF)
            v315 = v314;
          else
            v315 = 0x7FFFFFFFLL;
          *((_QWORD *)&v370 + 1) = v313 | (v315 << 32);
          v316 = *(_DWORD *)(a3 + 32);
          _VF = __OFADD__((_DWORD)v310, v316);
          v317 = v310 + v316;
          if (_VF)
            v317 = (v310 >> 31) + 0x7FFFFFFF;
          v318 = *(_DWORD *)(a3 + 36);
          _VF = __OFADD__(HIDWORD(v310), v318);
          v319 = HIDWORD(v310) + v318;
          v320 = (HIDWORD(v310) >> 31) + 0x7FFFFFFF;
          if (!_VF)
            v320 = v319;
          *(_QWORD *)&v370 = __PAIR64__(v320, v317);
          WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)(v233 + 32) + 80), (const WebCore::LayoutRect *)&v370, 1, 1, (uint64_t)&v381);
          WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v381, v76, (uint64_t)v389);
          LODWORD(v381) = WebCore::LayoutRect::operator WebCore::FloatRect((int *)(a3 + 16));
          *(_QWORD *)((char *)&v381 + 4) = __PAIR64__(v322, v321);
          HIDWORD(v381) = v323;
          if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v389, (const WebCore::FloatRect *)&v381))
          {
            v381 = *v56;
            WebCore::LayoutRect::intersect((int *)&v381, (const WebCore::LayoutRect *)&v370);
            *(_OWORD *)v380 = v381;
            LODWORD(v381) = WebCore::snapRectToDevicePixels(v380, v76);
            *(_QWORD *)((char *)&v381 + 4) = __PAIR64__(v325, v324);
            HIDWORD(v381) = v326;
            v327 = *(void (**)(void))(*(_QWORD *)v357 + 456);
          }
          else
          {
            v327 = *(void (**)(void))(*(_QWORD *)v357 + 464);
          }
          v327();
          LODWORD(a4) = v356;
          v6 = v357;
          v43 = v359;
        }
        if (v233 == *(_QWORD *)a3)
          break;
        v233 = *(_QWORD *)(v233 + 40);
        if (!v233)
          goto LABEL_111;
      }
      v81 = 1;
LABEL_111:
      v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8)
                      + 528);
      v83 = 1.0;
      if (v82)
      {
        v84 = *(_QWORD *)(v82 + 8);
        if (v84)
        {
          v85 = *(_QWORD *)(v84 + 24);
          if (v85)
          {
            v86 = *(float **)(v85 + 8);
            if (v86)
            {
              v87 = (*(_DWORD *)v86)++;
              v83 = v86[91];
              if (v87)
              {
                *(_DWORD *)v86 = v87;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v86);
                WTF::fastFree(v197, v198);
              }
            }
          }
        }
      }
      v88 = WebCore::RenderLayer::offsetFromAncestor(a1, *(_QWORD *)a3, 0);
      v89 = *(_QWORD *)(a1 + 200);
      if (v89)
      {
        v90 = *(_DWORD *)(a3 + 48);
        v385 = *(int8x16_t *)(v89 + 64);
        v386 = *(int8x16_t *)(v89 + 80);
        v387 = *(_OWORD *)(v89 + 96);
        v388 = *(_OWORD *)(v89 + 112);
        v381 = *(_OWORD *)v89;
        v382 = *(int8x16_t *)(v89 + 16);
        v383 = *(_OWORD *)(v89 + 32);
        v384 = *(float64x2_t *)(v89 + 48);
        if ((v90 & 0x200) != 0)
        {
          v382 = 0uLL;
          v384 = 0u;
          v385 = 0u;
          v386 = (int8x16_t)xmmword_1968A14B0;
          v388 = xmmword_1968A14C0;
        }
      }
      else
      {
        v385 = (int8x16_t)xmmword_1969FCC00;
        v386 = (int8x16_t)xmmword_1969FCC10;
        v387 = xmmword_1969FCC20;
        v388 = unk_1969FCC30;
        v381 = constinit_103;
        v382 = *(int8x16_t *)algn_1969FCBD0;
        v383 = xmmword_1969FCBE0;
        v384 = xmmword_1969FCBF0;
      }
      v91 = *(_DWORD *)(a3 + 32);
      v92 = v88 + v91;
      if (__OFADD__((_DWORD)v88, v91))
        v92 = (v88 >> 31) + 0x7FFFFFFF;
      v93 = *(_DWORD *)(a3 + 36);
      v94 = HIDWORD(v88) + v93;
      if (__OFADD__(HIDWORD(v88), v93))
        v94 = (HIDWORD(v88) >> 31) + 0x7FFFFFFF;
      v95 = *(_QWORD *)(a1 + 32);
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 24) + 8) + 40) + 8)
                                  + 680)
                      + 680) & 0x800000000000) != 0
        && WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32))
        && *(_BYTE *)(v95 + 46) != 83)
      {
        v96 = (float)(int)v92 * 0.015625;
        v97 = (float)v94 * 0.015625;
      }
      else
      {
        LODWORD(v389[0]) = v92;
        HIDWORD(v389[0]) = v94;
        v96 = WebCore::roundPointToDevicePixels((WebCore *)v389, (const WebCore::LayoutPoint *)1, v83);
      }
      v98 = v96;
      if (v96 != 0.0)
      {
        *(double *)&v381 = *(double *)&v381 + *(double *)&v382.i64[1] * v98;
        *(double *)&v383 = *(double *)&v383 + v384.f64[1] * v98;
        *(double *)v385.i64 = *(double *)v385.i64 + *(double *)&v386.i64[1] * v98;
        *(double *)&v387 = *(double *)&v387 + *((double *)&v388 + 1) * v98;
      }
      v358 = v83;
      v99 = v97;
      if (v97 == 0.0)
      {
        v100 = *((double *)&v381 + 1);
        v101 = *((double *)&v383 + 1);
        v102 = *((double *)&v387 + 1);
      }
      else
      {
        v100 = *((double *)&v381 + 1) + *(double *)&v382.i64[1] * v99;
        v101 = *((double *)&v383 + 1) + v384.f64[1] * v99;
        v102 = *((double *)&v387 + 1) + *((double *)&v388 + 1) * v99;
        *((double *)&v381 + 1) = v100;
        *((double *)&v383 + 1) = v101;
        *(double *)&v385.i64[1] = *(double *)&v385.i64[1] + *(double *)&v386.i64[1] * v99;
        *((double *)&v387 + 1) = v102;
      }
      (*(void (**)(int *__return_ptr, WTF *, uint64_t))(*(_QWORD *)v6 + 672))(v380, v6, 1);
      v103 = *(double *)&v381;
      v104 = *(double *)&v383;
      v105 = *(double *)&v387;
      v374 = v381;
      v375 = v100;
      v376 = v383;
      v377 = v101;
      v378 = v387;
      v379 = v102;
      (*(void (**)(WTF *, uint64_t *))(*(_QWORD *)v6 + 656))(v6, &v374);
      v107 = *(WebCore::RegionContext **)(a3 + 56);
      if (v107)
        WebCore::RegionContext::pushTransform(v107, (const WebCore::AffineTransform *)&v374);
      v108 = *(_QWORD *)(a1 + 32);
      v109 = &WebCore::lookup[6508];
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 24) + 8) + 40) + 8)
                                  + 680)
                      + 680) & 0x800000000000) != 0)
      {
        if (WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32))
          && *(_BYTE *)(v108 + 46) != 83)
        {
          v117 = 0;
          v116 = 0;
          v43 = v359;
          v109 = WebCore::lookup + 13016;
          goto LABEL_145;
        }
        v108 = *(_QWORD *)(a1 + 32);
        v43 = v359;
        v109 = WebCore::lookup + 13016;
      }
      if (*(_BYTE *)(v108 + 46) == 83)
      {
        v117 = 0;
        v116 = 0;
      }
      else
      {
        v110 = v98 * 64.0;
        v111 = *((double *)v109 + 458);
        if (v98 * 64.0 >= v111 || v110 <= -2147483650.0)
        {
          if (v110 >= v111)
          {
            v112 = 0x7FFFFFFF;
          }
          else if (v110 <= -2147483650.0)
          {
            v112 = 0x80000000;
          }
          else
          {
            v112 = (int)v110;
          }
          v43 = v359;
        }
        else
        {
          v112 = (int)v110;
        }
        v113 = v99 * 64.0;
        if (v99 * 64.0 >= v111 || v113 <= -2147483650.0)
        {
          if (v113 >= v111)
          {
            v114 = 0x7FFFFFFF;
          }
          else if (v113 <= -2147483650.0)
          {
            v114 = 0x80000000;
          }
          else
          {
            v114 = (int)v113;
          }
          v43 = v359;
        }
        else
        {
          v114 = (int)v113;
        }
        _VF = __OFSUB__(v92, v112);
        v115 = v92 - v112;
        if (_VF)
          v115 = (v92 >> 31) + 0x7FFFFFFF;
        v116 = (v94 - v114);
        if (__OFSUB__(v94, v114))
          v116 = (v94 >> 31) + 0x7FFFFFFF;
        v117 = v115;
      }
LABEL_145:
      v118 = *(_OWORD *)(a3 + 16);
      v370 = *(_OWORD *)a3;
      v371 = v118;
      v119 = *(_OWORD *)(a3 + 48);
      v372 = *(_OWORD *)(a3 + 32);
      v373 = v119;
      *(_QWORD *)&v370 = a1;
      if ((_DWORD)v371 == -1073741808
        && *(_QWORD *)((char *)&v371 + 4) == 0x7FFFFFDFC0000010
        && HIDWORD(v371) == 2147483615)
      {
LABEL_226:
        *(_QWORD *)&v372 = v117 | (v116 << 32);
        v187 = *(_QWORD *)(a1 + 208);
        if (v187)
        {
          v302 = *(_QWORD *)(a1 + 24);
          if ((v302 & 0x8000) == 0)
          {
            *(_QWORD *)(a1 + 24) = v302 | 0x8000;
            WebCore::RenderLayer::paintLayer(*(_QWORD *)(v187 + 144), v6, &v370, a4 & 0xFFFFFFF5 | 8);
            *(_QWORD *)(a1 + 24) &= ~0x8000uLL;
          }
        }
        WebCore::RenderLayer::paintLayerContents(a1, (uint64_t)v6, (uint64_t)&v370, a4 & 0xFFFFFF9D | 0x60);
        v188 = *(_QWORD *)(a3 + 56);
        if (v188)
        {
          v207 = *(_DWORD *)(v188 + 28);
          if (v207)
            *(_DWORD *)(v188 + 28) = v207 - 1;
        }
        (*(void (**)(WTF *, int *))(*(_QWORD *)v6 + 664))(v6, v380);
        if (v43)
        {
          if (v355)
          {
            v286 = *((_DWORD *)v43 + 11);
            if (v286)
              *((_DWORD *)v43 + 11) = v286 - 1;
          }
          v201 = *((_DWORD *)v43 + 2);
          if (!v201)
          {
            __break(0xC471u);
            JUMPOUT(0x19435503CLL);
          }
          *((_DWORD *)v43 + 2) = v201 - 1;
        }
        if (v81)
          (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
        return;
      }
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(v382, v382, 8uLL)), (int32x4_t)vceqzq_f64(v384)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)vextq_s8(v386, v385, 8uLL)), (int32x4_t)vceqq_f64((float64x2_t)vextq_s8(v385, v386, 8uLL), (float64x2_t)xmmword_1968A14C0)))))) & 1) == 0)
      {
        v120 = 1.0;
        if (*((double *)&v388 + 1) == 1.0)
        {
          if (v100 == 0.0 && v104 == 0.0 && v103 == 1.0 && v101 == 1.0)
          {
            v127 = 0.0;
            v123 = 1.0;
            if (v105 == 0.0 && v102 == 0.0 && *(double *)&v388 == 0.0)
            {
              v130 = 0uLL;
              v122 = 0.0;
              v129 = 0.0;
              v128 = 0.0;
            }
            else
            {
              v128 = -v105;
              v129 = -v102;
              v122 = -*(double *)&v388;
              v130 = 0uLL;
            }
            v120 = 1.0;
            goto LABEL_244;
          }
          if (*(double *)&v388 == 0.0)
          {
            v121 = v103 * v101 - v100 * v104;
            v122 = 0.0;
            if ((unint64_t)(COERCE__INT64(fabs(v121)) - 0x10000000000000) >> 53 <= 0x3FE)
            {
              v123 = 1.0;
              v124 = 1.0 / v121;
              v125 = v101 * (1.0 / v121);
              v126 = 1.0 / v121 * -v100;
              v127 = -(v104 * (1.0 / v121));
              v120 = v103 * v124;
              v128 = v124 * (v104 * v102 - v101 * v105);
              v129 = v124 * (v100 * v105 - v103 * v102);
              v130 = 0uLL;
              _Q19 = 0uLL;
              v132 = 0uLL;
              v133 = (float64x2_t)xmmword_1968A14C0;
              v134 = (float64x2_t)xmmword_1968A14C0;
LABEL_157:
              v135 = v358;
              goto LABEL_158;
            }
            v130 = 0uLL;
            v123 = 1.0;
            v129 = 0.0;
            v128 = 0.0;
            v127 = 0.0;
LABEL_244:
            v126 = 0.0;
            v125 = 1.0;
            _Q19 = 0uLL;
            v133 = (float64x2_t)xmmword_1968A14C0;
            v134 = (float64x2_t)xmmword_1968A14C0;
            v132 = 0uLL;
            goto LABEL_157;
          }
        }
      }
      v237 = v109;
      *(_OWORD *)&v389[10] = *(_OWORD *)&qword_1969F8F60;
      *(_OWORD *)&v389[12] = xmmword_1969F8F70;
      *(_OWORD *)&v389[14] = unk_1969F8F80;
      *(_OWORD *)v389 = constinit_5;
      *(_OWORD *)&v389[2] = unk_1969F8F20;
      *(_OWORD *)&v389[4] = xmmword_1969F8F30;
      memset(&v389[6], 0, 32);
      if (WebCore::inverse((WebCore *)&v381, (const double (*)[4][4])v389, v106))
      {
        v125 = *(double *)v389;
        v126 = *(double *)&v389[1];
        v127 = *(double *)&v389[4];
        v120 = *(double *)&v389[5];
        _Q19 = *(float64x2_t *)&v389[6];
        v128 = *(double *)&v389[12];
        v129 = *(double *)&v389[13];
        v130 = (float64x2_t)vextq_s8(*(int8x16_t *)&v389[2], *(int8x16_t *)&v389[2], 8uLL);
        v134 = (float64x2_t)vextq_s8(*(int8x16_t *)&v389[8], *(int8x16_t *)&v389[10], 8uLL);
        v132 = (float64x2_t)vextq_s8(*(int8x16_t *)&v389[10], *(int8x16_t *)&v389[8], 8uLL);
        v122 = *(double *)&v389[14];
        v123 = *(double *)&v389[15];
        v43 = v359;
        v133 = (float64x2_t)xmmword_1968A14C0;
      }
      else
      {
        v130 = 0uLL;
        v122 = 0.0;
        v123 = 1.0;
        v129 = 0.0;
        v128 = 0.0;
        v120 = 1.0;
        v127 = 0.0;
        v126 = 0.0;
        v125 = 1.0;
        _Q19 = 0uLL;
        v133 = (float64x2_t)xmmword_1968A14C0;
        v134 = (float64x2_t)xmmword_1968A14C0;
        v132 = 0uLL;
        v43 = v359;
      }
      v135 = v358;
      v109 = v237;
LABEL_158:
      v136 = (float)*(int *)(a3 + 16) * 0.015625;
      v137 = (float)*(int *)(a3 + 20) * 0.015625;
      v138 = (float)*(int *)(a3 + 24) * 0.015625;
      v139 = (float)*(int *)(a3 + 28) * 0.015625;
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v130), (int32x4_t)vceqzq_f64(_Q19)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v132), (int32x4_t)vceqq_f64(v134, v133)))))) & 1) == 0&& v123 == 1.0)
      {
        if (v126 == 0.0 && v127 == 0.0 && v125 == 1.0 && v120 == 1.0)
        {
          v191 = v128;
          v192 = v129;
          v156 = v136 + v191;
          v157 = v137 + v192;
LABEL_188:
          v158 = floorf(v156 * 64.0);
          if (v158 >= 2147500000.0 || v158 <= -2147500000.0)
          {
            if (v158 >= 2147500000.0)
            {
              v160 = 0x7FFFFFFF;
            }
            else if (v158 <= -2147500000.0)
            {
              v160 = 0x80000000;
            }
            else
            {
              v160 = (int)v158;
            }
            v43 = v359;
            v135 = v358;
          }
          else
          {
            v160 = (int)v158;
          }
          v161 = floorf(v157 * 64.0);
          if (v161 >= 2147500000.0 || v161 <= -2147500000.0)
          {
            if (v161 >= 2147500000.0)
            {
              v163 = 0x7FFFFFFF;
            }
            else if (v161 <= -2147500000.0)
            {
              v163 = 0x80000000;
            }
            else
            {
              v163 = (int)v161;
            }
            v43 = v359;
            v135 = v358;
          }
          else
          {
            v163 = (int)v161;
          }
          v164 = v156 + v138;
          v165 = v157 + v139;
          v166 = ceilf(v164 * 64.0);
          if (v166 >= 2147500000.0 || v166 <= -2147500000.0)
          {
            if (v166 >= 2147500000.0)
            {
              v168 = 0x7FFFFFFF;
            }
            else if (v166 > -2147500000.0)
            {
              v168 = (int)v166;
            }
            else
            {
              v168 = 0x80000000;
            }
            v43 = v359;
            v135 = v358;
          }
          else
          {
            v168 = (int)v166;
          }
          v169 = ceilf(v165 * 64.0);
          if (v169 >= 2147500000.0 || v169 <= -2147500000.0)
          {
            if (v169 >= 2147500000.0)
            {
              v171 = 0x7FFFFFFF;
            }
            else if (v169 <= -2147500000.0)
            {
              v171 = 0x80000000;
            }
            else
            {
              v171 = (int)v169;
            }
            v43 = v359;
            v135 = v358;
          }
          else
          {
            v171 = (int)v169;
          }
          v172 = v168 - v160;
          if (__OFSUB__(v168, v160))
            v172 = (v168 >> 31) + 0x7FFFFFFF;
          v173 = v171 - v163;
          if (__OFSUB__(v171, v163))
            v173 = (v171 >> 31) + 0x7FFFFFFF;
          v174 = v160 + v172;
          if (__OFADD__(v160, v172))
            v174 = (v160 >> 31) + 0x7FFFFFFF;
          v175 = v163 + v173;
          if (__OFADD__(v163, v173))
            v175 = (v163 >> 31) + 0x7FFFFFFF;
          v176 = floorf((float)(v135 * (float)v163) * 0.015625) / v135;
          v177 = floorf((float)(v135 * (float)v160) * 0.015625) / v135;
          v178 = v177 * 64.0;
          v179 = v176;
          v180 = v176 * 64.0;
          v181 = (float)((float)(ceilf((float)(v135 * (float)v174) * 0.015625) / v135) - v177);
          v182 = (float)((float)(ceilf((float)(v135 * (float)v175) * 0.015625) / v135) - v176);
          v183 = *((double *)v109 + 458);
          if (v180 >= v183
            || (v184 = v181 * 64.0, v181 * 64.0 >= v183)
            || (v185 = v182 * 64.0, v182 * 64.0 >= v183)
            || v178 <= -2147483650.0
            || v180 <= -2147483650.0
            || v184 <= -2147483650.0
            || v185 <= -2147483650.0
            || v178 >= v183)
          {
            if (v178 >= v183)
            {
              v335 = 0x7FFFFFFF;
            }
            else if (v178 <= -2147483650.0)
            {
              v335 = 0x80000000;
            }
            else
            {
              v335 = (int)v178;
            }
            LODWORD(v371) = v335;
            v336 = v179 * 64.0;
            if (v336 >= v183)
            {
              v337 = 0x7FFFFFFF;
            }
            else if (v336 <= -2147483650.0)
            {
              v337 = 0x80000000;
            }
            else
            {
              v337 = (int)v336;
            }
            DWORD1(v371) = v337;
            v338 = v181 * 64.0;
            if (v338 >= v183)
            {
              v339 = 0x7FFFFFFF;
            }
            else if (v338 <= -2147483650.0)
            {
              v339 = 0x80000000;
            }
            else
            {
              v339 = (int)v338;
            }
            DWORD2(v371) = v339;
            v340 = v182 * 64.0;
            if (v340 >= v183)
            {
              v186 = 0x7FFFFFFF;
            }
            else if (v340 <= -2147483650.0)
            {
              v186 = 0x80000000;
            }
            else
            {
              v186 = (int)v340;
            }
            v43 = v359;
          }
          else
          {
            LODWORD(v371) = (int)v178;
            DWORD1(v371) = (int)v180;
            DWORD2(v371) = (int)v184;
            v186 = (int)v185;
          }
          HIDWORD(v371) = v186;
          goto LABEL_226;
        }
        if (v122 == 0.0)
        {
          v140 = v136 + v138;
          v141 = v137 + v139;
          if (v125 <= 0.0)
            v142 = v136 + v138;
          else
            v142 = (float)*(int *)(a3 + 16) * 0.015625;
          if (v125 <= 0.0)
            v143 = (float)*(int *)(a3 + 16) * 0.015625;
          else
            v143 = v136 + v138;
          v144 = v125 * v143;
          v145 = v125 * v142;
          if (v126 <= 0.0)
            v146 = v136 + v138;
          else
            v146 = (float)*(int *)(a3 + 16) * 0.015625;
          if (v126 <= 0.0)
            v140 = (float)*(int *)(a3 + 16) * 0.015625;
          v147 = v126 * v140;
          v148 = v126 * v146;
          if (v127 <= 0.0)
            v149 = (float)*(int *)(a3 + 20) * 0.015625;
          else
            v149 = v141;
          if (v127 <= 0.0)
            v150 = v141;
          else
            v150 = (float)*(int *)(a3 + 20) * 0.015625;
          v151 = v144 + v127 * v149;
          v152 = v145 + v127 * v150;
          if (v120 <= 0.0)
            v153 = (float)*(int *)(a3 + 20) * 0.015625;
          else
            v153 = v141;
          if (v120 > 0.0)
            v141 = (float)*(int *)(a3 + 20) * 0.015625;
          v154 = v147 + v120 * v153;
          v155 = v148 + v120 * v141;
          v156 = v128 + v152;
          v157 = v129 + v155;
          v138 = v151 - v152;
          v139 = v154 - v155;
          goto LABEL_188;
        }
      }
      v238 = v136 + v138;
      v239 = v136;
      _D25 = v137;
      v241 = v128 + v136 * v125;
      v242 = v241 + v137 * v127;
      v243 = v129 + v136 * v126;
      v244 = v243 + v137 * v120;
      v245 = vmlad_n_f64(v123, v239, v130.f64[0]);
      __asm { FMLA            D27, D25, V19.D[1] }
      if (_D27 != 1.0 && _D27 != 0.0)
      {
        v242 = v242 / _D27;
        v244 = v244 / _D27;
      }
      v249 = v137 + v139;
      v250 = v128 + v238 * v125;
      v251 = v250 + _D25 * v127;
      v252 = v129 + v238 * v126;
      v253 = v252 + _D25 * v120;
      v254 = v123 + v238 * v130.f64[0];
      v255 = v254 + _D25 * _Q19.f64[1];
      if (v255 != 1.0 && v255 != 0.0)
      {
        v251 = v251 / v255;
        v253 = v253 / v255;
      }
      v256 = v249;
      _Q19.f64[0] = v250 + v249 * v127;
      v257 = v252 + v249 * v120;
      v258 = v254 + v249 * _Q19.f64[1];
      if (v258 != 1.0 && v258 != 0.0)
      {
        _Q19.f64[0] = _Q19.f64[0] / v258;
        v257 = v257 / v258;
      }
      v259 = v242;
      v260 = v251;
      v261 = _Q19.f64[0];
      v262 = v241 + v256 * v127;
      v263 = v243 + v256 * v120;
      v264 = v245 + v256 * _Q19.f64[1];
      if (v264 != 1.0 && v264 != 0.0)
      {
        v262 = v262 / v264;
        v263 = v263 / v264;
      }
      v265 = v244;
      v266 = v253;
      v267 = v257;
      v268 = v262;
      v269 = v263;
      if (v268 >= v261)
        v156 = _Q19.f64[0];
      else
        v156 = v262;
      if (v260 >= v259)
        v270 = v242;
      else
        v270 = v260;
      if (v156 >= v270)
        v156 = v270;
      v271 = fabsf(v156);
      if (v271 == INFINITY || v271 > 2147500000.0)
        v156 = (float)((SLODWORD(v156) >> 31) ^ 0x7FFFFFFF);
      if (v269 >= v267)
        v157 = v267;
      else
        v157 = v269;
      if (v266 >= v265)
        v273 = v265;
      else
        v273 = v266;
      if (v157 >= v273)
        v157 = v273;
      v274 = fabsf(v157);
      if (v274 == INFINITY || v274 > 2147500000.0)
        v157 = (float)((SLODWORD(v157) >> 31) ^ 0x7FFFFFFF);
      if (v259 < v260)
        v259 = v260;
      if (v261 < v268)
        v261 = v268;
      if (v259 < v261)
        v259 = v261;
      v276 = fabsf(v259);
      if (v276 == INFINITY || v276 > 2147500000.0)
        v259 = (float)((SLODWORD(v259) >> 31) ^ 0x7FFFFFFF);
      if (v265 >= v266)
        v278 = v265;
      else
        v278 = v266;
      if (v267 >= v269)
        v279 = v267;
      else
        v279 = v269;
      if (v278 < v279)
        v278 = v279;
      v280 = fabsf(v278);
      if (v280 == INFINITY || v280 > 2147500000.0)
        v278 = (float)((SLODWORD(v278) >> 31) ^ 0x7FFFFFFF);
      v138 = v259 - v156;
      v139 = v278 - v157;
      v43 = v359;
      v135 = v358;
      goto LABEL_188;
    }
    if (v49 == -1073741808 && v51 == 2147483615)
    {
      if (v50 == -1073741808)
        goto LABEL_304;
    }
    else if (v49 == -1073741808 && v50 == -1073741808 && v51 == 2147483615)
    {
LABEL_304:
      v54 = -1073741808;
      v55 = -1073741808;
      if (v52 == 2147483615)
        goto LABEL_60;
    }
    v232 = WebCore::LocalFrameView::scrollPositionForFixedPosition(*(int32x2_t **)(v231 + 248));
    v54 = v49 + v232;
    if (__OFADD__(v49, (_DWORD)v232))
      v54 = (v49 >> 31) + 0x7FFFFFFF;
    v55 = v50 + HIDWORD(v232);
    if (__OFADD__(v50, HIDWORD(v232)))
      v55 = (v50 >> 31) + 0x7FFFFFFF;
    goto LABEL_60;
  }
  v189 = *(_QWORD *)(a1 + 208);
  if (v189)
  {
    v303 = *(_QWORD *)(a1 + 24);
    if ((v303 & 0x8000) == 0)
    {
      *(_QWORD *)(a1 + 24) = v303 | 0x8000;
      WebCore::RenderLayer::paintLayer(*(_QWORD *)(v189 + 144), v6, a3, a4 & 0xFFFFFFF5 | 8);
      *(_QWORD *)(a1 + 24) &= ~0x8000uLL;
    }
  }
  WebCore::RenderLayer::paintLayerContents(a1, (uint64_t)v6, a3, a4 & 0xFFFFFF9D | 0x60);
}

BOOL WebCore::NullGraphicsContext::performingPaintInvalidation(WebCore::NullGraphicsContext *this)
{
  return *((_BYTE *)this + 717) != 0;
}

uint64_t WebCore::JSElement::prototype(WebCore::JSElement *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSElement::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSElement::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
    Structure = WebCore::JSElementPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSElementPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSElement::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSElement::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSCharacterDataPrototype::create(WebCore::JSCharacterDataPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::Structure *v25;
  int v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  JSC::Structure *v31;
  int v32;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  uint64_t v37;
  int *v38;
  JSC::Structure **v39;
  int *v40;
  int v41;
  int v42;
  JSC::Structure *v43;
  int v44;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v34);
    *((_QWORD *)this + 4865) = SlowCase + (int)v34;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<14u>(this, (uint64_t)&WebCore::JSCharacterData::s_info, (uint64_t)&WebCore::JSCharacterDataPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(_QWORD *)(v9 + 56);
  v11 = *(_DWORD *)(v9 + 932);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = 8 * *(unsigned __int8 *)(v12 + 14);
  v14 = JSC::allocateCell<JSC::JSFinalObject>(v10, v13 + 16);
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v14 = v12 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  bzero((void *)(v14 + 16), v13);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v16 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v16, 7, 0, (uint64_t)&v35);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v18, 7, 0, (uint64_t)&v35);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v20, 7, 0, (uint64_t)&v35);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v22 = v35;
  v35 = 0;
  v36 = v14;
  v37 = 0x1000000FFFFFFFFLL;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v22, 7, 0, (uint64_t)&v35);
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v23);
    else
      *(_DWORD *)v22 -= 2;
  }
  v24 = *(_QWORD *)(v6[381] + 2784);
  v25 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v44 = *(_DWORD *)SlowCase;
  v43 = v25;
  v26 = JSC::Structure::outOfLineCapacity(v25);
  v41 = 0;
  v42 = v26;
  v35 = (WTF::StringImpl *)&v42;
  v36 = SlowCase;
  v37 = (uint64_t)this;
  v38 = &v44;
  v39 = &v43;
  v40 = &v41;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v25, this, v24, 6, (uint64_t)&v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v41, v14);
  *((_DWORD *)v25 + 4) |= 0x10u;
  v27 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v29 = JSC::JSString::create((uint64_t)this, &v35);
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v28);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v44 = *(_DWORD *)SlowCase;
  v43 = v31;
  v32 = JSC::Structure::outOfLineCapacity(v31);
  v41 = 0;
  v42 = v32;
  v35 = (WTF::StringImpl *)&v42;
  v36 = SlowCase;
  v37 = (uint64_t)this;
  v38 = &v44;
  v39 = &v43;
  v40 = &v41;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v31, this, v27, 6, (uint64_t)&v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v41, v29);
  *((_DWORD *)v31 + 4) |= 0x10u;
  return SlowCase;
}

WTF::StringImpl *WebCore::JSMediaQueryListPrototype::finishCreation(WebCore::JSMediaQueryListPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(a2, (uint64_t)&WebCore::JSMediaQueryList::s_info, &WebCore::JSMediaQueryListPrototypeTableValues, this);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = JSC::jsNontrivialString((uint64_t)a2, &v8);
  JSC::JSObject::putDirectWithoutTransition((int *)this, a2, v4, v5, 6);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t JSC::JSObject::putDirectWithoutTransition(int *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, char a5)
{
  JSC::Structure *v10;
  uint64_t result;
  _QWORD v12[6];
  int v13;
  int v14;
  JSC::Structure *v15;
  int v16;

  v10 = (JSC::Structure *)(16 * (*a1 & 0xFFFFFFFE));
  v16 = *a1;
  v15 = v10;
  v13 = 0;
  v14 = JSC::Structure::outOfLineCapacity(v10);
  v12[0] = &v14;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = &v16;
  v12[4] = &v15;
  v12[5] = &v13;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v10, a2, a3, a5, (uint64_t)v12);
  if ((*(_BYTE *)((16 * *a1) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  result = JSC::JSObject::putDirectOffset((uint64_t)a1, (uint64_t)a2, v13, a4);
  if ((a5 & 2) != 0)
    *((_DWORD *)v10 + 4) |= 0x10u;
  return result;
}

unint64_t WebCore::JSDocumentFragmentPrototype::create(WebCore::JSDocumentFragmentPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::Structure *v29;
  int v30;
  unint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  JSC::Structure **v37;
  int *v38;
  int v39;
  int v40;
  JSC::Structure *v41;
  int v42;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v32);
    *((_QWORD *)this + 4865) = SlowCase + (int)v32;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSDocumentFragment::s_info, (uint64_t)&WebCore::JSDocumentFragmentPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v10 = *(_QWORD *)(v9 + 56);
  v11 = *(_DWORD *)(v9 + 932);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = 8 * *(unsigned __int8 *)(v12 + 14);
  v14 = JSC::allocateCell<JSC::JSFinalObject>(v10, v13 + 16);
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v14 = v12 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  bzero((void *)(v14 + 16), v13);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v16 = v33;
  v33 = 0;
  v34 = v14;
  v35 = 0x1000000FFFFFFFFLL;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v16, 7, 0, (uint64_t)&v33);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v18 = v33;
  v33 = 0;
  v34 = v14;
  v35 = 0x1000000FFFFFFFFLL;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v18, 7, 0, (uint64_t)&v33);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v19);
    else
      *(_DWORD *)v18 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v20 = v33;
  v33 = 0;
  v34 = v14;
  v35 = 0x1000000FFFFFFFFLL;
  v36 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v14, this, (unint64_t)v20, 7, 0, (uint64_t)&v33);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  v22 = *(_QWORD *)(v6[381] + 2784);
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v42 = *(_DWORD *)SlowCase;
  v41 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v39 = 0;
  v40 = v24;
  v33 = (WTF::StringImpl *)&v40;
  v34 = SlowCase;
  v35 = (uint64_t)this;
  v36 = &v42;
  v37 = &v41;
  v38 = &v39;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v22, 6, (uint64_t)&v33);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v39, v14);
  *((_DWORD *)v23 + 4) |= 0x10u;
  v25 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = JSC::JSString::create((uint64_t)this, &v33);
  v28 = v33;
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v42 = *(_DWORD *)SlowCase;
  v41 = v29;
  v30 = JSC::Structure::outOfLineCapacity(v29);
  v39 = 0;
  v40 = v30;
  v33 = (WTF::StringImpl *)&v40;
  v34 = SlowCase;
  v35 = (uint64_t)this;
  v36 = &v42;
  v37 = &v41;
  v38 = &v39;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v29, this, v25, 6, (uint64_t)&v33);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v39, v27);
  *((_DWORD *)v29 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::JSElementPrototype::create(WebCore::JSElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Document *v22;
  WebCore::Quirks *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Document *v27;
  WebCore::Quirks *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::Document *v32;
  WebCore::Quirks *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Document *v43;
  WebCore::Quirks *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::Document *v48;
  WebCore::Quirks *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::Document *v53;
  WebCore::Quirks *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::Document *v58;
  WebCore::Quirks *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  size_t v64;
  unint64_t v65;
  int v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  JSC::Structure *v84;
  int v85;
  unint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  JSC::Structure *v90;
  int v91;
  WTF::StringImpl *v93;
  int v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  int v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  int v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  int v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  int v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  unint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  uint64_t v129;
  int *v130;
  JSC::Structure **v131;
  int *v132;
  int v133;
  int v134;
  JSC::Structure *v135;
  int v136;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v126 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v126);
    *((_QWORD *)this + 4865) = SlowCase + (int)v126;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSElementPrototypeTableValues;
  v11 = 148;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSElementPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v127;
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSElement::s_info, (unint64_t *)&v127, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v15 && *(_BYTE *)(v15 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1943579E8);
  }
  v16 = v15 - 192;
  if (!v15)
    v16 = 0;
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 680) + 672);
  v18 = (v17 & 0x400000000000000) == 0;
  if ((v17 & 0x400000000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v114 = v127;
    v115 = *v9;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v115;
    if (v114)
    {
      if (*(_DWORD *)v114 == 2)
        WTF::StringImpl::destroy(v114, v116);
      else
        *(_DWORD *)v114 -= 2;
    }
  }
  v19 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v19 && *(_BYTE *)(v19 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357A08);
  }
  v20 = v19 - 192;
  if (!v19)
    v20 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v20 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_168;
  v21 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v21 && *(_BYTE *)(v21 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357A48);
  }
  v22 = (WebCore::Document *)(v21 - 192);
  if (!v21)
    v22 = 0;
  v23 = (WebCore::Quirks *)*((_QWORD *)v22 + 86);
  if (!v23)
    v23 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v22);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v23))
  {
LABEL_168:
    WTF::AtomStringImpl::addLiteral();
    v93 = v127;
    v94 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v94;
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
        WTF::StringImpl::destroy(v93, v95);
      else
        *(_DWORD *)v93 -= 2;
    }
  }
  v24 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v24 && *(_BYTE *)(v24 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357A28);
  }
  v25 = v24 - 192;
  if (!v24)
    v25 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v25 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_171;
  v26 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v26 && *(_BYTE *)(v26 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357A88);
  }
  v27 = (WebCore::Document *)(v26 - 192);
  if (!v26)
    v27 = 0;
  v28 = (WebCore::Quirks *)*((_QWORD *)v27 + 86);
  if (!v28)
    v28 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v27);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v28))
  {
LABEL_171:
    WTF::AtomStringImpl::addLiteral();
    v96 = v127;
    v97 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v97;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
        WTF::StringImpl::destroy(v96, v98);
      else
        *(_DWORD *)v96 -= 2;
    }
  }
  v29 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v29 && *(_BYTE *)(v29 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357A68);
  }
  v30 = v29 - 192;
  if (!v29)
    v30 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v30 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_174;
  v31 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v31 && *(_BYTE *)(v31 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357AC8);
  }
  v32 = (WebCore::Document *)(v31 - 192);
  if (!v31)
    v32 = 0;
  v33 = (WebCore::Quirks *)*((_QWORD *)v32 + 86);
  if (!v33)
    v33 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v32);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v33))
  {
LABEL_174:
    WTF::AtomStringImpl::addLiteral();
    v99 = v127;
    v100 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v100;
    if (v99)
    {
      if (*(_DWORD *)v99 == 2)
        WTF::StringImpl::destroy(v99, v101);
      else
        *(_DWORD *)v99 -= 2;
    }
  }
  v34 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v34 && *(_BYTE *)(v34 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357AA8);
  }
  v35 = v34 - 192;
  if (!v34)
    v35 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v35 + 680) + 672) & 0x10000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v117 = v127;
    v118 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v118;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
        WTF::StringImpl::destroy(v117, v119);
      else
        *(_DWORD *)v117 -= 2;
    }
  }
  v36 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v36 && *(_BYTE *)(v36 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357AE8);
  }
  v37 = v36 - 192;
  if (!v36)
    v37 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v37 + 680) + 672) & 0x20000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v120 = v127;
    v121 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v121;
    if (v120)
    {
      if (*(_DWORD *)v120 == 2)
        WTF::StringImpl::destroy(v120, v122);
      else
        *(_DWORD *)v120 -= 2;
    }
  }
  v38 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v38 && *(_BYTE *)(v38 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357B08);
  }
  v39 = v38 - 192;
  if (!v38)
    v39 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v39 + 680) + 712) & 0x100) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v123 = v127;
    v124 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v124;
    if (v123)
    {
      if (*(_DWORD *)v123 == 2)
        WTF::StringImpl::destroy(v123, v125);
      else
        *(_DWORD *)v123 -= 2;
    }
  }
  v40 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v40 && *(_BYTE *)(v40 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357B28);
  }
  v41 = v40 - 192;
  if (!v40)
    v41 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v41 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_177;
  v42 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v42 && *(_BYTE *)(v42 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357B68);
  }
  v43 = (WebCore::Document *)(v42 - 192);
  if (!v42)
    v43 = 0;
  v44 = (WebCore::Quirks *)*((_QWORD *)v43 + 86);
  if (!v44)
    v44 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v43);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v44))
  {
LABEL_177:
    WTF::AtomStringImpl::addLiteral();
    v102 = v127;
    v103 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v103;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, v104);
      else
        *(_DWORD *)v102 -= 2;
    }
  }
  v45 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v45 && *(_BYTE *)(v45 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357B48);
  }
  v46 = v45 - 192;
  if (!v45)
    v46 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v46 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_180;
  v47 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v47 && *(_BYTE *)(v47 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357BA8);
  }
  v48 = (WebCore::Document *)(v47 - 192);
  if (!v47)
    v48 = 0;
  v49 = (WebCore::Quirks *)*((_QWORD *)v48 + 86);
  if (!v49)
    v49 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v48);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v49))
  {
LABEL_180:
    WTF::AtomStringImpl::addLiteral();
    v105 = v127;
    v106 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v106;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, v107);
      else
        *(_DWORD *)v105 -= 2;
    }
  }
  v50 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v50 && *(_BYTE *)(v50 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357B88);
  }
  v51 = v50 - 192;
  if (!v50)
    v51 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v51 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_183;
  v52 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v52 && *(_BYTE *)(v52 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357BE8);
  }
  v53 = (WebCore::Document *)(v52 - 192);
  if (!v52)
    v53 = 0;
  v54 = (WebCore::Quirks *)*((_QWORD *)v53 + 86);
  if (!v54)
    v54 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v53);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v54))
  {
LABEL_183:
    WTF::AtomStringImpl::addLiteral();
    v108 = v127;
    v109 = *v9;
    v18 = 1;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v109;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, v110);
      else
        *(_DWORD *)v108 -= 2;
    }
  }
  v55 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v55 && *(_BYTE *)(v55 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357BC8);
  }
  v56 = v55 - 192;
  if (!v55)
    v56 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v56 + 680) + 704) & 0x80000000000000) == 0)
    goto LABEL_186;
  v57 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if (v57 && *(_BYTE *)(v57 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x194357C30);
  }
  v58 = (WebCore::Document *)(v57 - 192);
  if (!v57)
    v58 = 0;
  v59 = (WebCore::Quirks *)*((_QWORD *)v58 + 86);
  if (!v59)
    v59 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v58);
  if (WebCore::Quirks::shouldDisableElementFullscreenQuirk(v59))
  {
LABEL_186:
    WTF::AtomStringImpl::addLiteral();
    v111 = v127;
    v112 = *v9;
    *v9 = 1;
    LODWORD(v127) = -1;
    WORD2(v127) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v112;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v113);
      else
        *(_DWORD *)v111 -= 2;
    }
  }
  else if (!v18)
  {
    goto LABEL_122;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
    JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
LABEL_122:
  v60 = *(_QWORD *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28);
  v61 = *(_QWORD *)(v60 + 56);
  v62 = *(_DWORD *)(v60 + 932);
  if (v62)
    v63 = 16 * (v62 & 0xFFFFFFFE);
  else
    v63 = 0;
  v64 = 8 * *(unsigned __int8 *)(v63 + 14);
  v65 = JSC::allocateCell<JSC::JSFinalObject>(v61, v64 + 16);
  v66 = *(_DWORD *)(v63 + 8);
  *(_DWORD *)v65 = v63 >> 4;
  *(_DWORD *)(v65 + 4) = v66;
  *(_QWORD *)(v65 + 8) = 0;
  bzero((void *)(v65 + 16), v64);
  if (*(_BYTE *)(v61 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral();
  v67 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v67, 7, 0, (uint64_t)&v127);
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, v68);
    else
      *(_DWORD *)v67 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v69 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v69, 7, 0, (uint64_t)&v127);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v70);
    else
      *(_DWORD *)v69 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v71 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v71, 7, 0, (uint64_t)&v127);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v72);
    else
      *(_DWORD *)v71 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v73 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v73, 7, 0, (uint64_t)&v127);
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, v74);
    else
      *(_DWORD *)v73 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v75 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v75, 7, 0, (uint64_t)&v127);
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v76);
    else
      *(_DWORD *)v75 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v77 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v77, 7, 0, (uint64_t)&v127);
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, v78);
    else
      *(_DWORD *)v77 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v79 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v79, 7, 0, (uint64_t)&v127);
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v80);
    else
      *(_DWORD *)v79 -= 2;
  }
  WTF::AtomStringImpl::addLiteral();
  v81 = v127;
  v127 = 0;
  v128 = v65;
  v129 = 0x1000000FFFFFFFFLL;
  v130 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v65, this, (unint64_t)v81, 7, 0, (uint64_t)&v127);
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, v82);
    else
      *(_DWORD *)v81 -= 2;
  }
  v83 = *(_QWORD *)(v6[381] + 2784);
  v84 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v136 = *(_DWORD *)SlowCase;
  v135 = v84;
  v85 = JSC::Structure::outOfLineCapacity(v84);
  v133 = 0;
  v134 = v85;
  v127 = (WTF::StringImpl *)&v134;
  v128 = SlowCase;
  v129 = (uint64_t)this;
  v130 = &v136;
  v131 = &v135;
  v132 = &v133;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v84, this, v83, 6, (uint64_t)&v127);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v133, v65);
  *((_DWORD *)v84 + 4) |= 0x10u;
  v86 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v88 = JSC::JSString::create((uint64_t)this, &v127);
  v89 = v127;
  v127 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, v87);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v136 = *(_DWORD *)SlowCase;
  v135 = v90;
  v91 = JSC::Structure::outOfLineCapacity(v90);
  v133 = 0;
  v134 = v91;
  v127 = (WTF::StringImpl *)&v134;
  v128 = SlowCase;
  v129 = (uint64_t)this;
  v130 = &v136;
  v131 = &v135;
  v132 = &v133;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v90, this, v86, 6, (uint64_t)&v127);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v133, v88);
  *((_DWORD *)v90 + 4) |= 0x10u;
  return SlowCase;
}

BOOL JSC::JSObject::putDirect(unsigned __int8 *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[2];
  int v8;
  int v9;
  uint64_t v10;

  v7[0] = 0;
  v7[1] = a1;
  v8 = -1;
  v9 = 0x1000000;
  v10 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a1, a2, a3, a4, a5, (uint64_t)v7);
  return v5 == 0;
}

uint64_t JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(unsigned __int8 *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  JSC::Heap *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  char v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  JSC::Structure *v89;
  JSC::Structure *v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  JSC::Heap *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  unint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  JSC::Structure *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  uint64_t MoreOutOfLineStorage;
  JSC::Heap *v142;
  uint64_t v143;
  int v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned __int8 *v172;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  JSC::Structure *v200;
  JSC::Structure *v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  unsigned __int8 *v206;
  int v207;
  uint64_t v208;
  JSC::Heap *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unsigned int v215;
  unsigned int v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  unint64_t v222;
  int v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  int v233;
  unint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  JSC::Structure *v240;
  unint64_t v241;
  JSC::Structure **v242;
  unsigned __int8 *v243;
  JSC::VM *v244;
  int *v245;
  JSC::Structure *v246;
  int v247;
  _BYTE v248[4];
  char v249;
  uint64_t v250;
  char v251;
  JSC::VM *v252;
  JSC::VM *v253;
  uint64_t v254;

  v7 = a5;
  v254 = *MEMORY[0x1E0C80C00];
  v247 = *(_DWORD *)a1;
  v12 = 16 * (v247 & 0xFFFFFFFE);
  v246 = (JSC::Structure *)v12;
  v13 = *(_DWORD *)(v12 + 0x10);
  if (a1)
    v14 = a4 == 0;
  else
    v14 = 1;
  v15 = v14;
  v16 = (a4 & 0xFFFE000000000002) != 0 || a4 == 0;
  if (!v16 || (a5 & 0x72) == 0 || !v15)
  {
    if ((v13 & 3) == 0)
    {
      if ((v13 & 0x8000000) == 0)
      {
        v132 = JSC::StructureTransitionTable::get((uint64_t *)(v12 + 80), a3, a5, 1);
        if (v132)
        {
          v133 = v132;
          v134 = *(unsigned __int16 *)(v132 + 22);
          if (v134 == 65534)
          {
            v134 = -1;
          }
          else if (v134 == 0xFFFF)
          {
            v134 = *(_DWORD *)(*(_QWORD *)(v132 + 64) + 88);
          }
          v135 = *(unsigned __int16 *)(16 * (v247 & 0xFFFFFFFE) + 0x18);
          if (v135 == 65534
            || (v135 == 0xFFFF
              ? (v136 = *(_DWORD *)(*(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x40) + 84))
              : (v136 = *(unsigned __int16 *)(16 * (v247 & 0xFFFFFFFE) + 0x18)),
                v136 <= 63))
          {
            v137 = 0;
          }
          else if ((v136 - 63) >= 5)
          {
            v168 = (v136 - 64) | ((v136 - 64) >> 1) | (((v136 - 64) | ((v136 - 64) >> 1)) >> 2);
            v169 = v168 | (v168 >> 4) | ((v168 | (v168 >> 4)) >> 8);
            v137 = (v169 | HIWORD(v169)) + 1;
          }
          else
          {
            v137 = 4;
          }
          v138 = *(unsigned __int16 *)(v132 + 24);
          if (v138 == 65534
            || (v138 == 0xFFFF
              ? (v139 = *(_DWORD *)(*(_QWORD *)(v132 + 64) + 84))
              : (v139 = *(unsigned __int16 *)(v132 + 24)),
                v139 <= 63))
          {
            v140 = 0;
          }
          else if ((v139 - 63) >= 5)
          {
            v170 = (v139 - 64) | ((v139 - 64) >> 1) | (((v139 - 64) | ((v139 - 64) >> 1)) >> 2);
            v171 = v170 | (v170 >> 4) | ((v170 | (v170 >> 4)) >> 8);
            v140 = (v171 | HIWORD(v171)) + 1;
          }
          else
          {
            v140 = 4;
          }
          if (v137 != v140)
          {
            MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, a2);
            v142 = (JSC::VM *)((char *)a2 + 192);
            if (*((_BYTE *)a2 + 755))
            {
              *(_DWORD *)a1 = v247 | 1;
              __dmb(0xAu);
              *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
              if (*((_DWORD *)a2 + 190) >= a1[7])
                JSC::Heap::writeBarrierSlowPath(v142, (const JSCell *)a1);
              __dmb(0xAu);
            }
            else
            {
              *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
              if (*((_DWORD *)a2 + 190) >= a1[7])
                JSC::Heap::writeBarrierSlowPath(v142, (const JSCell *)a1);
            }
          }
          if (v134 <= 63)
          {
            v143 = (uint64_t)(a1 + 16);
            v144 = v134;
          }
          else
          {
            v143 = *((_QWORD *)a1 + 1) - 8;
            v144 = 63 - v134;
          }
          *(_QWORD *)(v143 + 8 * v144) = a4;
          if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
          v30 = v133 >> 4;
          *(_DWORD *)a1 = v133 >> 4;
          a1[6] = a1[6] & 0x80 | *(_BYTE *)(v133 + 10);
          a1[5] = *(_BYTE *)(v133 + 9);
          v145 = a1 + 4;
          if (a1[4] != *(unsigned __int8 *)(v133 + 8))
          {
            do
            {
              while (1)
              {
                v236 = *v145;
                v237 = __ldxr(v145);
                if (v237 == v236)
                  break;
                __clrex();
              }
            }
            while (__stxr(v236 & 0xC0 | *(_BYTE *)(v133 + 8), v145));
          }
          if (*((_DWORD *)a2 + 190) >= a1[7])
          {
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
            LODWORD(v30) = *(_DWORD *)a1;
          }
          *(_BYTE *)(a6 + 21) = 2;
          *(_QWORD *)a6 = a1;
          *(_DWORD *)(a6 + 16) = v134;
          goto LABEL_42;
        }
      }
      LODWORD(v242) = 0;
      if ((a3 >> 4) && ((a3 >> 4) & ~*(_DWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v157 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x58);
        if (v157
          || (v199 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v199 + 5) == 1 || *(_DWORD *)(v199 + 80) >= 2u)
          && (v157 = JSC::Structure::materializePropertyTable((JSC::Structure *)v12, a2)) != 0)
        {
          if (*(_DWORD *)(v157 + 24))
          {
            v158 = *(_QWORD *)(v157 + 16);
            v159 = v158 & 0xFFFFFFFFFFFFFFFELL;
            v160 = *(unsigned int *)(v157 + 8);
            v161 = *(_DWORD *)(a3 + 16);
            if ((v158 & 1) != 0)
            {
              if ((v161 & 0x20) != 0)
                v161 = *(_DWORD *)(a3 + 32);
              v162 = *(_DWORD *)(v157 + 12);
              v163 = (v161 >> 8) & *(_QWORD *)&v162;
              v164 = *(unsigned __int8 *)(v159 + v163);
              if (!*(_BYTE *)(v159 + v163))
                goto LABEL_346;
              v165 = v159 + v160;
              v166 = 1;
              while (1)
              {
                v167 = *(_QWORD *)(v165 + 8 * (v164 - 1));
                if (a3 == (v167 & 0xFFFFFFFFFFFFLL))
                  break;
                v163 = ((_DWORD)v163 + v166) & v162;
                v164 = *(unsigned __int8 *)(v159 + v163);
                ++v166;
                if (!*(_BYTE *)(v159 + v163))
                  goto LABEL_346;
              }
              v102 = (v167 >> 16) & 0xFF00000000 | HIBYTE(v167);
            }
            else
            {
              if ((v161 & 0x20) != 0)
                v161 = *(_DWORD *)(a3 + 32);
              v226 = *(_DWORD *)(v157 + 12);
              v227 = v226 & (v161 >> 8);
              v228 = *(_DWORD *)(v159 + 4 * v227);
              if (!v228)
                goto LABEL_346;
              v229 = v159 + 4 * v160;
              v230 = 1;
              while (1)
              {
                v231 = (v228 - 1);
                if (*(_QWORD *)(v229 + 16 * v231) == a3)
                  break;
                v227 = (v227 + v230) & v226;
                v228 = *(_DWORD *)(v159 + 4 * v227);
                ++v230;
                if (!v228)
                  goto LABEL_346;
              }
              v102 = *(unsigned int *)(v229 + 16 * v231 + 8) | ((unint64_t)*(unsigned __int8 *)(v229 + 16 * v231 + 12) << 32);
            }
            if ((_DWORD)v102 != -1)
            {
              LODWORD(v242) = v102;
              if ((*(_BYTE *)(16 * (v247 & 0xFFFFFFFE) + 0x12) & 4) != 0)
                JSC::Structure::didReplacePropertySlow((JSC::Structure *)v12);
              JSC::JSObject::putDirectOffset((uint64_t)a1, (uint64_t)a2, v102, a4);
              if ((v7 & 0x70) == 0 && HIDWORD(v102) == v7)
                goto LABEL_162;
              JSC::WatchpointSet::WatchpointSet();
              v252 = a2;
              v253 = (JSC::VM *)(16 * (v247 & 0xFFFFFFFE));
              v213 = JSC::Structure::attributeChangeTransition();
              JSC::JSObject::setStructure((JSCell *)a1, a2, v213);
              if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
                JSC::VM::invalidateStructureChainIntegrity();
              if (v249 == 1)
LABEL_145:
                JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((JSC::DeferredStructureTransitionWatchpointFire *)v248);
LABEL_146:
              JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)v248);
              return 0;
            }
          }
        }
      }
LABEL_346:
      LODWORD(v242) = -1;
      JSC::WatchpointSet::WatchpointSet();
      v252 = a2;
      v253 = (JSC::VM *)(16 * (v247 & 0xFFFFFFFE));
      v200 = (JSC::Structure *)JSC::Structure::addNewPropertyTransition();
      v201 = v200;
      v202 = *((unsigned __int16 *)v246 + 12);
      if (v202 == 65534)
        goto LABEL_367;
      if (v202 == 0xFFFF)
        v202 = *(_DWORD *)(*((_QWORD *)v246 + 8) + 84);
      if (v202 <= 63)
      {
LABEL_367:
        v203 = 0;
      }
      else if ((v202 - 63) >= 5)
      {
        v210 = (v202 - 64) | ((v202 - 64) >> 1) | (((v202 - 64) | ((v202 - 64) >> 1)) >> 2);
        v211 = v210 | (v210 >> 4) | ((v210 | (v210 >> 4)) >> 8);
        v203 = (v211 | HIWORD(v211)) + 1;
      }
      else
      {
        v203 = 4;
      }
      if (v203 != JSC::Structure::outOfLineCapacity(v200))
      {
        v208 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, a2);
        v209 = (JSC::VM *)((char *)a2 + 192);
        if (*((_BYTE *)a2 + 755))
        {
          *(_DWORD *)a1 = v247 | 1;
          __dmb(0xAu);
          *((_QWORD *)a1 + 1) = v208;
          if (*((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath(v209, (const JSCell *)a1);
          __dmb(0xAu);
        }
        else
        {
          *((_QWORD *)a1 + 1) = v208;
          if (*((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath(v209, (const JSCell *)a1);
        }
      }
      v204 = (int)v242;
      if ((int)v242 <= 63)
      {
        v205 = (uint64_t)(a1 + 16);
      }
      else
      {
        v205 = *((_QWORD *)a1 + 1) - 8;
        v204 = 63 - (_DWORD)v242;
      }
      *(_QWORD *)(v205 + 8 * v204) = a4;
      if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *((_DWORD *)a2 + 190) >= a1[7])
        JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
      *(_DWORD *)a1 = (unint64_t)v201 >> 4;
      a1[6] = a1[6] & 0x80 | *((_BYTE *)v201 + 10);
      a1[5] = *((_BYTE *)v201 + 9);
      v206 = a1 + 4;
      if (a1[4] != *((unsigned __int8 *)v201 + 8))
      {
        do
        {
          while (1)
          {
            v238 = *v206;
            v239 = __ldxr(v206);
            if (v239 == v238)
              break;
            __clrex();
          }
        }
        while (__stxr(v238 & 0xC0 | *((_BYTE *)v201 + 8), v206));
      }
      if (*((_DWORD *)a2 + 190) >= a1[7])
        JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
      v207 = (int)v242;
      *(_BYTE *)(a6 + 21) = 2;
      *(_QWORD *)a6 = a1;
      *(_DWORD *)(a6 + 16) = v207;
      if ((v7 & 2) != 0)
        *((_DWORD *)v201 + 4) |= 0x10u;
      if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
        JSC::VM::invalidateStructureChainIntegrity();
      if (v249 != 1)
        goto LABEL_146;
      goto LABEL_145;
    }
    v242 = &v246;
    v243 = a1;
    v244 = a2;
    v245 = &v247;
    v146 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x58);
    if (!v146)
      v146 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v247 & 0xFFFFFFFE)), a2);
    v147 = *(_QWORD *)(v146 + 16);
    v148 = v147 & 0xFFFFFFFFFFFFFFFELL;
    v149 = *(unsigned int *)(v146 + 8);
    v150 = *(_DWORD *)(a3 + 16);
    if ((v147 & 1) != 0)
    {
      if ((v150 & 0x20) != 0)
        v150 = *(_DWORD *)(a3 + 32);
      v151 = *(_DWORD *)(v146 + 12);
      v152 = (v150 >> 8) & *(_QWORD *)&v151;
      v153 = *(unsigned __int8 *)(v148 + v152);
      if (!*(_BYTE *)(v148 + v152))
        goto LABEL_293;
      v154 = v148 + v149;
      v155 = 1;
      while (1)
      {
        v156 = *(_QWORD *)(v154 + 8 * (v153 - 1));
        if (a3 == (v156 & 0xFFFFFFFFFFFFLL))
          break;
        v152 = ((_DWORD)v152 + v155) & v151;
        v153 = *(unsigned __int8 *)(v148 + v152);
        ++v155;
        if (!*(_BYTE *)(v148 + v152))
          goto LABEL_293;
      }
      v59 = (v156 >> 16) & 0xFF00000000 | HIBYTE(v156);
    }
    else
    {
      if ((v150 & 0x20) != 0)
        v150 = *(_DWORD *)(a3 + 32);
      v220 = *(_DWORD *)(v146 + 12);
      LODWORD(v152) = v220 & (v150 >> 8);
      v221 = *(_DWORD *)(v148 + 4 * v152);
      if (!v221)
        goto LABEL_293;
      v222 = v148 + 4 * v149;
      v223 = 1;
      while (1)
      {
        v224 = (v221 - 1);
        if (*(_QWORD *)(v222 + 16 * v224) == a3)
          break;
        LODWORD(v152) = (v152 + v223) & v220;
        v221 = *(_DWORD *)(v148 + 4 * v152);
        ++v223;
        if (!v221)
          goto LABEL_293;
      }
      v59 = *(unsigned int *)(v222 + 16 * v224 + 8) | ((unint64_t)*(unsigned __int8 *)(v222 + 16 * v224 + 12) << 32);
    }
    if ((_DWORD)v59 != -1)
    {
      JSC::JSObject::putDirectOffset((uint64_t)a1, (uint64_t)a2, v59, a4);
      if ((*((_BYTE *)v246 + 18) & 4) != 0)
        JSC::Structure::didReplacePropertySlow(v246);
      if ((v7 & 0x70) == 0 && HIDWORD(v59) == v7)
        goto LABEL_223;
      v240 = v246;
      JSC::WatchpointSet::WatchpointSet();
      v252 = a2;
      v253 = v240;
      v241 = JSC::Structure::attributeChangeTransition();
      JSC::JSObject::setStructure((JSCell *)a1, a2, v241);
      if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
LABEL_227:
        JSC::VM::invalidateStructureChainIntegrity();
LABEL_228:
      JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire((JSC::DeferredStructureTransitionWatchpointFire *)v248);
      return 0;
    }
LABEL_293:
    v172 = (unsigned __int8 *)(v12 + 15);
    LOBYTE(v252) = 0;
    v250 = v12 + 15;
    v251 = 1;
    if (__ldaxr((unsigned __int8 *)(v12 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v172))
    {
LABEL_296:
      LOBYTE(v252) = 1;
      v253 = a2;
      ++*((_DWORD *)a2 + 229);
      *(_DWORD *)(v12 + 16) |= 4u;
      if (v146)
      {
        *(_QWORD *)(v12 + 88) = v146;
        if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v12 + 7))
          JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)v12);
      }
      else
      {
        *(_QWORD *)(v12 + 88) = 0;
      }
      v174 = *(_QWORD *)(v12 + 64);
      if (!v174 || *(_BYTE *)(v174 + 5) == 1)
        *(_QWORD *)(v12 + 64) = 0;
      else
        *(_DWORD *)(v174 + 80) = 0;
      v175 = *(unsigned int *)(v12 + 72);
      *(_DWORD *)(v12 + 72) = 0;
      if ((_DWORD)v175)
      {
        v176 = (WTF::StringImpl *)(16 * v175);
        v177 = *(_DWORD *)(16 * v175) - 2;
        if (v177)
          *(_DWORD *)v176 = v177;
        else
          WTF::StringImpl::destroy(v176, a2);
      }
      if ((v7 & 4) != 0)
      {
        v225 = *(_DWORD *)(v12 + 16) & 0xFFFFFF9F | 0x40;
      }
      else
      {
        if (!a3 || (*(_BYTE *)(a3 + 16) & 0x20) == 0)
        {
LABEL_307:
          if ((v7 & 8) != 0)
          {
            v178 = *(_DWORD *)(v12 + 16);
            *(_DWORD *)(v12 + 16) = v178 | 0x40000000;
            if ((v7 & 0x72) != 0)
              *(_DWORD *)(v12 + 16) = v178 | 0xC0000000;
          }
          if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 16) == a3)
            *(_DWORD *)(v12 + 16) |= 0x20000000u;
          v179 = *(unsigned __int8 *)(v12 + 14);
          v180 = *(_QWORD *)(v146 + 32);
          if (v180 && (v198 = *(unsigned int *)(v180 + 12), (_DWORD)v198))
          {
            v184 = *(unsigned int *)(*(_QWORD *)v180 + 4 * v198 - 4);
            *(_DWORD *)(v180 + 12) = v198 - 1;
          }
          else
          {
            v181 = *(_DWORD *)(v146 + 24);
            v69 = __OFSUB__(v181, v179);
            v182 = v181 - v179;
            v70 = (v182 < 0) ^ v69;
            v183 = v182 + 64;
            if (v70)
              v184 = v181;
            else
              v184 = v183;
          }
          v185 = *(_DWORD *)(a3 + 16);
          if ((v185 & 0x20) != 0)
            v185 = *(_DWORD *)(a3 + 32);
          v186 = *(_DWORD *)(v12 + 28) ^ (v185 >> 8);
          v187 = *(_DWORD *)(v12 + 32) | (a3 >> 4);
          *(_DWORD *)(v12 + 28) = v186;
          *(_DWORD *)(v12 + 32) = v187;
          *(_DWORD *)a3 += 2;
          v188 = *(_DWORD *)(v146 + 24);
          if ((*(_DWORD *)(v146 + 28) + v188) >= *(_DWORD *)(v146 + 8) >> 1
            || (v189 = *(_QWORD *)(v146 + 16), (v189 & 1) != 0) && (int)v184 > 255)
          {
            JSC::PropertyTable::rehash((JSC::PropertyTable *)v146, a2, v188 + 1, (int)v184 < 256);
            v189 = *(_QWORD *)(v146 + 16);
            v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
            v214 = *(unsigned int *)(v146 + 8);
            v215 = *(_DWORD *)(a3 + 16);
            if ((v189 & 1) != 0)
            {
              if ((v215 & 0x20) != 0)
                v215 = *(_DWORD *)(a3 + 32);
              v216 = *(_DWORD *)(v146 + 12);
              v152 = (v215 >> 8) & *(_QWORD *)&v216;
              v217 = *(unsigned __int8 *)(v190 + v152);
              if (*(_BYTE *)(v190 + v152))
              {
                v218 = v190 + v214;
                v219 = 1;
                do
                {
                  if (a3 == (*(_QWORD *)(v218 + 8 * (v217 - 1)) & 0xFFFFFFFFFFFFLL))
                    break;
                  v152 = ((_DWORD)v152 + v219) & v216;
                  v217 = *(unsigned __int8 *)(v190 + v152);
                  ++v219;
                }
                while (*(_BYTE *)(v190 + v152));
              }
            }
            else
            {
              if ((v215 & 0x20) != 0)
                v215 = *(_DWORD *)(a3 + 32);
              v232 = *(_DWORD *)(v146 + 12);
              LODWORD(v152) = v232 & (v215 >> 8);
              v233 = *(_DWORD *)(v190 + 4 * v152);
              if (v233)
              {
                v234 = v190 + 4 * v214;
                v235 = 1;
                do
                {
                  if (*(_QWORD *)(v234 + 16 * (v233 - 1)) == a3)
                    break;
                  LODWORD(v152) = (v152 + v235) & v232;
                  v233 = *(_DWORD *)(v190 + 4 * v152);
                  ++v235;
                }
                while (v233);
              }
            }
          }
          else
          {
            v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
          }
          v191 = *(_DWORD *)(v146 + 28) + *(_DWORD *)(v146 + 24);
          v192 = v191 + 1;
          if ((v189 & 1) != 0)
          {
            *(_BYTE *)(v190 + v152) = v192;
            *(_QWORD *)(v190 + *(unsigned int *)(v146 + 8) + 8 * v191) = a3 | ((unint64_t)(v7 | ((_DWORD)v184 << 8)) << 48);
          }
          else
          {
            *(_DWORD *)(v190 + 4 * v152) = v192;
            v212 = v190 + 4 * *(unsigned int *)(v146 + 8) + 16 * v191;
            *(_QWORD *)v212 = a3;
            *(_DWORD *)(v212 + 8) = v184;
            *(_BYTE *)(v212 + 12) = v7;
          }
          ++*(_DWORD *)(v146 + 24);
          v193 = *(unsigned __int16 *)(v12 + 24);
          if (v193 == 65534)
          {
            v193 = -1;
          }
          else if (v193 == 0xFFFF)
          {
            v193 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 84);
          }
          if ((int)v184 <= v193)
            v194 = v193;
          else
            v194 = v184;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(JSC::VM &,JSC::PropertyName,JSC::JSValue,unsigned int,JSC::PutPropertySlot &)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()((JSC::Heap *)&v242, (uint64_t)v248, v184, v194);
          JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v248);
          if ((int)v184 <= 63)
          {
            v195 = (uint64_t)(a1 + 16);
            v196 = v184;
          }
          else
          {
            v195 = *((_QWORD *)a1 + 1) - 8;
            v196 = 63 - v184;
          }
          *(_QWORD *)(v195 + 8 * v196) = a4;
          if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *((_DWORD *)a2 + 190) >= a1[7])
            JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
          *(_BYTE *)(a6 + 21) = 2;
          *(_QWORD *)a6 = a1;
          *(_DWORD *)(a6 + 16) = v184;
          v197 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10);
          if ((v7 & 2) != 0)
          {
            v197 |= 0x10u;
            *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10) = v197;
          }
          if ((v197 & 0x80000) != 0)
            goto LABEL_118;
          return 0;
        }
        v225 = *(_DWORD *)(v12 + 16) & 0xFFFFFFDF;
      }
      *(_DWORD *)(v12 + 16) = v225;
      goto LABEL_307;
    }
    MEMORY[0x19AEA534C](v172, a2, a3, a4);
    goto LABEL_296;
  }
  if ((v13 & 3) == 0)
  {
    if ((v13 & 0x8000000) == 0)
    {
      v17 = JSC::StructureTransitionTable::get((uint64_t *)(v12 + 80), a3, a5, 1);
      if (v17)
      {
        v18 = v17;
        v19 = *(unsigned __int16 *)(v17 + 22);
        if (v19 == 65534)
        {
          v19 = -1;
        }
        else if (v19 == 0xFFFF)
        {
          v19 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 88);
        }
        v20 = *(unsigned __int16 *)(16 * (v247 & 0xFFFFFFFE) + 0x18);
        if (v20 == 65534
          || (v20 == 0xFFFF
            ? (v21 = *(_DWORD *)(*(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x40) + 84))
            : (v21 = *(unsigned __int16 *)(16 * (v247 & 0xFFFFFFFE) + 0x18)),
              v21 < 64))
        {
          v22 = 0;
        }
        else if ((v21 - 63) >= 5)
        {
          v55 = (v21 - 64) | ((v21 - 64) >> 1) | (((v21 - 64) | ((v21 - 64) >> 1)) >> 2);
          v56 = v55 | (v55 >> 4) | ((v55 | (v55 >> 4)) >> 8);
          v22 = (v56 | HIWORD(v56)) + 1;
        }
        else
        {
          v22 = 4;
        }
        v23 = *(unsigned __int16 *)(v17 + 24);
        if (v23 == 65534
          || (v23 == 0xFFFF
            ? (v24 = *(_DWORD *)(*(_QWORD *)(v17 + 64) + 84))
            : (v24 = *(unsigned __int16 *)(v17 + 24)),
              v24 < 64))
        {
          v25 = 0;
        }
        else if ((v24 - 63) >= 5)
        {
          v57 = (v24 - 64) | ((v24 - 64) >> 1) | (((v24 - 64) | ((v24 - 64) >> 1)) >> 2);
          v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
          v25 = (v58 | HIWORD(v58)) + 1;
        }
        else
        {
          v25 = 4;
        }
        if (v22 != v25)
        {
          v26 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, a2);
          v27 = (JSC::VM *)((char *)a2 + 192);
          if (*((_BYTE *)a2 + 755))
          {
            *(_DWORD *)a1 = v247 | 1;
            __dmb(0xAu);
            *((_QWORD *)a1 + 1) = v26;
            if (*((_DWORD *)a2 + 190) >= a1[7])
              JSC::Heap::writeBarrierSlowPath(v27, (const JSCell *)a1);
            __dmb(0xAu);
          }
          else
          {
            *((_QWORD *)a1 + 1) = v26;
            if (*((_DWORD *)a2 + 190) >= a1[7])
              JSC::Heap::writeBarrierSlowPath(v27, (const JSCell *)a1);
          }
        }
        if (v19 <= 63)
        {
          v28 = (uint64_t)(a1 + 16);
          v29 = v19;
        }
        else
        {
          v28 = *((_QWORD *)a1 + 1) - 8;
          v29 = 63 - v19;
        }
        *(_QWORD *)(v28 + 8 * v29) = a4;
        v30 = v18 >> 4;
        *(_DWORD *)a1 = v18 >> 4;
        a1[6] = a1[6] & 0x80 | *(_BYTE *)(v18 + 10);
        a1[5] = *(_BYTE *)(v18 + 9);
        v31 = a1 + 4;
        if (a1[4] != *(unsigned __int8 *)(v18 + 8))
        {
          do
          {
            while (1)
            {
              v126 = *v31;
              v127 = __ldxr(v31);
              if (v127 == v126)
                break;
              __clrex();
            }
          }
          while (__stxr(v126 & 0xC0 | *(_BYTE *)(v18 + 8), v31));
        }
        if (*((_DWORD *)a2 + 190) >= a1[7])
        {
          JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
          LODWORD(v30) = *(_DWORD *)a1;
        }
        *(_BYTE *)(a6 + 21) = 2;
        *(_QWORD *)a6 = a1;
        *(_DWORD *)(a6 + 16) = v19;
LABEL_42:
        if ((*(_BYTE *)((16 * v30) | 0x12) & 8) != 0)
          JSC::VM::invalidateStructureChainIntegrity();
        return 0;
      }
    }
    LODWORD(v242) = 0;
    if ((a3 >> 4) && ((a3 >> 4) & ~*(_DWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v44 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x58);
      if (v44
        || (v88 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v88 + 5) == 1 || *(_DWORD *)(v88 + 80) >= 2u)
        && (v44 = JSC::Structure::materializePropertyTable((JSC::Structure *)v12, a2)) != 0)
      {
        if (*(_DWORD *)(v44 + 24))
        {
          v45 = *(_QWORD *)(v44 + 16);
          v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
          v47 = *(unsigned int *)(v44 + 8);
          v48 = *(_DWORD *)(a3 + 16);
          if ((v45 & 1) != 0)
          {
            if ((v48 & 0x20) != 0)
              v48 = *(_DWORD *)(a3 + 32);
            v49 = *(_DWORD *)(v44 + 12);
            v50 = (v48 >> 8) & *(_QWORD *)&v49;
            v51 = *(unsigned __int8 *)(v46 + v50);
            if (!*(_BYTE *)(v46 + v50))
              goto LABEL_125;
            v52 = v46 + v47;
            v53 = 1;
            while (1)
            {
              v54 = *(_QWORD *)(v52 + 8 * (v51 - 1));
              if (a3 == (v54 & 0xFFFFFFFFFFFFLL))
                break;
              v50 = ((_DWORD)v50 + v53) & v49;
              v51 = *(unsigned __int8 *)(v46 + v50);
              ++v53;
              if (!*(_BYTE *)(v46 + v50))
                goto LABEL_125;
            }
            v102 = (v54 >> 16) & 0xFF00000000 | HIBYTE(v54);
          }
          else
          {
            if ((v48 & 0x20) != 0)
              v48 = *(_DWORD *)(a3 + 32);
            v116 = *(_DWORD *)(v44 + 12);
            v117 = v116 & (v48 >> 8);
            v118 = *(_DWORD *)(v46 + 4 * v117);
            if (!v118)
              goto LABEL_125;
            v119 = v46 + 4 * v47;
            v120 = 1;
            while (1)
            {
              v121 = (v118 - 1);
              if (*(_QWORD *)(v119 + 16 * v121) == a3)
                break;
              v117 = (v117 + v120) & v116;
              v118 = *(_DWORD *)(v46 + 4 * v117);
              ++v120;
              if (!v118)
                goto LABEL_125;
            }
            v102 = *(unsigned int *)(v119 + 16 * v121 + 8) | ((unint64_t)*(unsigned __int8 *)(v119 + 16 * v121 + 12) << 32);
          }
          if ((_DWORD)v102 != -1)
          {
            LODWORD(v242) = v102;
            if ((*(_BYTE *)(16 * (v247 & 0xFFFFFFFE) + 0x12) & 4) != 0)
              JSC::Structure::didReplacePropertySlow((JSC::Structure *)v12);
            JSC::JSObject::putDirectOffset((uint64_t)a1, (uint64_t)a2, v102, a4);
            if ((v7 & 0x70) == 0 && HIDWORD(v102) == v7)
            {
LABEL_162:
              *(_BYTE *)(a6 + 21) = 1;
              *(_QWORD *)a6 = a1;
              *(_DWORD *)(a6 + 16) = v102;
              return 0;
            }
            JSC::WatchpointSet::WatchpointSet();
            v252 = a2;
            v253 = (JSC::VM *)(16 * (v247 & 0xFFFFFFFE));
            v115 = JSC::Structure::attributeChangeTransition();
            JSC::JSObject::setStructure((JSCell *)a1, a2, v115);
            if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
              JSC::VM::invalidateStructureChainIntegrity();
            if (v249 == 1)
              goto LABEL_145;
            goto LABEL_146;
          }
        }
      }
    }
LABEL_125:
    LODWORD(v242) = -1;
    JSC::WatchpointSet::WatchpointSet();
    v252 = a2;
    v253 = (JSC::VM *)(16 * (v247 & 0xFFFFFFFE));
    v89 = (JSC::Structure *)JSC::Structure::addNewPropertyTransition();
    v90 = v89;
    v91 = *((unsigned __int16 *)v246 + 12);
    if (v91 == 65534)
      goto LABEL_147;
    if (v91 == 0xFFFF)
      v91 = *(_DWORD *)(*((_QWORD *)v246 + 8) + 84);
    if (v91 < 64)
    {
LABEL_147:
      v92 = 0;
    }
    else if ((v91 - 63) >= 5)
    {
      v99 = (v91 - 64) | ((v91 - 64) >> 1) | (((v91 - 64) | ((v91 - 64) >> 1)) >> 2);
      v100 = v99 | (v99 >> 4) | ((v99 | (v99 >> 4)) >> 8);
      v92 = (v100 | HIWORD(v100)) + 1;
    }
    else
    {
      v92 = 4;
    }
    if (v92 != JSC::Structure::outOfLineCapacity(v89))
    {
      v97 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, a2);
      v98 = (JSC::VM *)((char *)a2 + 192);
      if (*((_BYTE *)a2 + 755))
      {
        *(_DWORD *)a1 = v247 | 1;
        __dmb(0xAu);
        *((_QWORD *)a1 + 1) = v97;
        if (*((_DWORD *)a2 + 190) >= a1[7])
          JSC::Heap::writeBarrierSlowPath(v98, (const JSCell *)a1);
        __dmb(0xAu);
      }
      else
      {
        *((_QWORD *)a1 + 1) = v97;
        if (*((_DWORD *)a2 + 190) >= a1[7])
          JSC::Heap::writeBarrierSlowPath(v98, (const JSCell *)a1);
      }
    }
    v93 = (int)v242;
    if ((int)v242 <= 63)
    {
      v94 = (uint64_t)(a1 + 16);
    }
    else
    {
      v94 = *((_QWORD *)a1 + 1) - 8;
      v93 = 63 - (_DWORD)v242;
    }
    *(_QWORD *)(v94 + 8 * v93) = a4;
    if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *((_DWORD *)a2 + 190) >= a1[7])
      JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
    *(_DWORD *)a1 = (unint64_t)v90 >> 4;
    a1[6] = a1[6] & 0x80 | *((_BYTE *)v90 + 10);
    a1[5] = *((_BYTE *)v90 + 9);
    v95 = a1 + 4;
    if (a1[4] != *((unsigned __int8 *)v90 + 8))
    {
      do
      {
        while (1)
        {
          v128 = *v95;
          v129 = __ldxr(v95);
          if (v129 == v128)
            break;
          __clrex();
        }
      }
      while (__stxr(v128 & 0xC0 | *((_BYTE *)v90 + 8), v95));
    }
    if (*((_DWORD *)a2 + 190) >= a1[7])
      JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)a1);
    v96 = (int)v242;
    *(_BYTE *)(a6 + 21) = 2;
    *(_QWORD *)a6 = a1;
    *(_DWORD *)(a6 + 16) = v96;
    if ((v7 & 2) != 0)
      *((_DWORD *)v90 + 4) |= 0x10u;
    if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
      JSC::VM::invalidateStructureChainIntegrity();
    if (v249 != 1)
      goto LABEL_146;
    goto LABEL_145;
  }
  v242 = &v246;
  v243 = a1;
  v244 = a2;
  v245 = &v247;
  v33 = *(_QWORD *)(16 * (v247 & 0xFFFFFFFE) + 0x58);
  if (!v33)
    v33 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v247 & 0xFFFFFFFE)), a2);
  v34 = *(_QWORD *)(v33 + 16);
  v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
  v36 = *(unsigned int *)(v33 + 8);
  v37 = *(_DWORD *)(a3 + 16);
  if ((v34 & 1) != 0)
  {
    if ((v37 & 0x20) != 0)
      v37 = *(_DWORD *)(a3 + 32);
    v38 = *(_DWORD *)(v33 + 12);
    v39 = (v37 >> 8) & *(_QWORD *)&v38;
    v40 = *(unsigned __int8 *)(v35 + v39);
    if (*(_BYTE *)(v35 + v39))
    {
      v41 = v35 + v36;
      v42 = 1;
      while (1)
      {
        v43 = *(_QWORD *)(v41 + 8 * (v40 - 1));
        if (a3 == (v43 & 0xFFFFFFFFFFFFLL))
          break;
        v39 = ((_DWORD)v39 + v42) & v38;
        v40 = *(unsigned __int8 *)(v35 + v39);
        ++v42;
        if (!*(_BYTE *)(v35 + v39))
          goto LABEL_76;
      }
      v59 = (v43 >> 16) & 0xFF00000000 | HIBYTE(v43);
      goto LABEL_75;
    }
  }
  else
  {
    if ((v37 & 0x20) != 0)
      v37 = *(_DWORD *)(a3 + 32);
    v109 = *(_DWORD *)(v33 + 12);
    LODWORD(v39) = v109 & (v37 >> 8);
    v110 = *(_DWORD *)(v35 + 4 * v39);
    if (v110)
    {
      v111 = v35 + 4 * v36;
      v112 = 1;
      while (1)
      {
        v113 = (v110 - 1);
        if (*(_QWORD *)(v111 + 16 * v113) == a3)
          break;
        LODWORD(v39) = (v39 + v112) & v109;
        v110 = *(_DWORD *)(v35 + 4 * v39);
        ++v112;
        if (!v110)
          goto LABEL_76;
      }
      v59 = *(unsigned int *)(v111 + 16 * v113 + 8) | ((unint64_t)*(unsigned __int8 *)(v111 + 16 * v113 + 12) << 32);
LABEL_75:
      if ((_DWORD)v59 == -1)
        goto LABEL_76;
      JSC::JSObject::putDirectOffset((uint64_t)a1, (uint64_t)a2, v59, a4);
      if ((*((_BYTE *)v246 + 18) & 4) != 0)
        JSC::Structure::didReplacePropertySlow(v246);
      if ((v7 & 0x70) == 0 && HIDWORD(v59) == v7)
      {
LABEL_223:
        *(_BYTE *)(a6 + 21) = 1;
        *(_QWORD *)a6 = a1;
        *(_DWORD *)(a6 + 16) = v59;
        return 0;
      }
      v130 = v246;
      JSC::WatchpointSet::WatchpointSet();
      v252 = a2;
      v253 = v130;
      v131 = JSC::Structure::attributeChangeTransition();
      JSC::JSObject::setStructure((JSCell *)a1, a2, v131);
      if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
        goto LABEL_227;
      goto LABEL_228;
    }
  }
LABEL_76:
  v60 = (unsigned __int8 *)(v12 + 15);
  LOBYTE(v252) = 0;
  v250 = v12 + 15;
  v251 = 1;
  if (__ldaxr((unsigned __int8 *)(v12 + 15)))
  {
    __clrex();
LABEL_78:
    MEMORY[0x19AEA534C](v60, a2, a3, a4);
    goto LABEL_79;
  }
  if (__stxr(1u, v60))
    goto LABEL_78;
LABEL_79:
  LOBYTE(v252) = 1;
  v253 = a2;
  ++*((_DWORD *)a2 + 229);
  *(_DWORD *)(v12 + 16) |= 4u;
  if (v33)
  {
    *(_QWORD *)(v12 + 88) = v33;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v12 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), (const JSCell *)v12);
  }
  else
  {
    *(_QWORD *)(v12 + 88) = 0;
  }
  v62 = *(_QWORD *)(v12 + 64);
  if (!v62 || *(_BYTE *)(v62 + 5) == 1)
    *(_QWORD *)(v12 + 64) = 0;
  else
    *(_DWORD *)(v62 + 80) = 0;
  v63 = *(unsigned int *)(v12 + 72);
  *(_DWORD *)(v12 + 72) = 0;
  if ((_DWORD)v63)
  {
    v64 = (WTF::StringImpl *)(16 * v63);
    v65 = *(_DWORD *)(16 * v63) - 2;
    if (v65)
      *(_DWORD *)v64 = v65;
    else
      WTF::StringImpl::destroy(v64, a2);
  }
  if ((v7 & 4) != 0)
  {
    v114 = *(_DWORD *)(v12 + 16) & 0xFFFFFF9F | 0x40;
LABEL_180:
    *(_DWORD *)(v12 + 16) = v114;
    goto LABEL_90;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v114 = *(_DWORD *)(v12 + 16) & 0xFFFFFFDF;
    goto LABEL_180;
  }
LABEL_90:
  if ((v7 & 8) != 0)
    *(_DWORD *)(v12 + 16) |= 0xC0000000;
  if (*(_QWORD *)(*((_QWORD *)a2 + 5244) + 16) == a3)
    *(_DWORD *)(v12 + 16) |= 0x20000000u;
  v66 = *(unsigned __int8 *)(v12 + 14);
  v67 = *(_QWORD *)(v33 + 32);
  if (v67 && (v87 = *(unsigned int *)(v67 + 12), (_DWORD)v87))
  {
    v73 = *(unsigned int *)(*(_QWORD *)v67 + 4 * v87 - 4);
    *(_DWORD *)(v67 + 12) = v87 - 1;
  }
  else
  {
    v68 = *(_DWORD *)(v33 + 24);
    v69 = __OFSUB__(v68, v66);
    v71 = v68 - v66;
    v70 = (v71 < 0) ^ v69;
    v72 = v71 + 64;
    if (v70)
      v73 = v68;
    else
      v73 = v72;
  }
  v74 = *(_DWORD *)(a3 + 16);
  if ((v74 & 0x20) != 0)
    v74 = *(_DWORD *)(a3 + 32);
  v75 = *(_DWORD *)(v12 + 28) ^ (v74 >> 8);
  v76 = *(_DWORD *)(v12 + 32) | (a3 >> 4);
  *(_DWORD *)(v12 + 28) = v75;
  *(_DWORD *)(v12 + 32) = v76;
  *(_DWORD *)a3 += 2;
  v77 = *(_DWORD *)(v33 + 24);
  if ((*(_DWORD *)(v33 + 28) + v77) >= *(_DWORD *)(v33 + 8) >> 1
    || (v78 = *(_QWORD *)(v33 + 16), (v78 & 1) != 0) && (int)v73 > 255)
  {
    JSC::PropertyTable::rehash((JSC::PropertyTable *)v33, a2, v77 + 1, (int)v73 < 256);
    v78 = *(_QWORD *)(v33 + 16);
    v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
    v103 = *(unsigned int *)(v33 + 8);
    v104 = *(_DWORD *)(a3 + 16);
    if ((v78 & 1) != 0)
    {
      if ((v104 & 0x20) != 0)
        v104 = *(_DWORD *)(a3 + 32);
      v105 = *(_DWORD *)(v33 + 12);
      v39 = (v104 >> 8) & *(_QWORD *)&v105;
      v106 = *(unsigned __int8 *)(v79 + v39);
      if (*(_BYTE *)(v79 + v39))
      {
        v107 = v79 + v103;
        v108 = 1;
        do
        {
          if (a3 == (*(_QWORD *)(v107 + 8 * (v106 - 1)) & 0xFFFFFFFFFFFFLL))
            break;
          v39 = ((_DWORD)v39 + v108) & v105;
          v106 = *(unsigned __int8 *)(v79 + v39);
          ++v108;
        }
        while (*(_BYTE *)(v79 + v39));
      }
    }
    else
    {
      if ((v104 & 0x20) != 0)
        v104 = *(_DWORD *)(a3 + 32);
      v122 = *(_DWORD *)(v33 + 12);
      LODWORD(v39) = v122 & (v104 >> 8);
      v123 = *(_DWORD *)(v79 + 4 * v39);
      if (v123)
      {
        v124 = v79 + 4 * v103;
        v125 = 1;
        do
        {
          if (*(_QWORD *)(v124 + 16 * (v123 - 1)) == a3)
            break;
          LODWORD(v39) = (v39 + v125) & v122;
          v123 = *(_DWORD *)(v79 + 4 * v39);
          ++v125;
        }
        while (v123);
      }
    }
  }
  else
  {
    v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
  }
  v80 = *(_DWORD *)(v33 + 28) + *(_DWORD *)(v33 + 24);
  v81 = v80 + 1;
  if ((v78 & 1) != 0)
  {
    *(_BYTE *)(v79 + v39) = v81;
    *(_QWORD *)(v79 + *(unsigned int *)(v33 + 8) + 8 * v80) = a3 | ((unint64_t)(v7 | ((_DWORD)v73 << 8)) << 48);
  }
  else
  {
    *(_DWORD *)(v79 + 4 * v39) = v81;
    v101 = v79 + 4 * *(unsigned int *)(v33 + 8) + 16 * v80;
    *(_QWORD *)v101 = a3;
    *(_DWORD *)(v101 + 8) = v73;
    *(_BYTE *)(v101 + 12) = v7;
  }
  ++*(_DWORD *)(v33 + 24);
  v82 = *(unsigned __int16 *)(v12 + 24);
  if (v82 == 65534)
  {
    v82 = -1;
  }
  else if (v82 == 0xFFFF)
  {
    v82 = *(_DWORD *)(*(_QWORD *)(v12 + 64) + 84);
  }
  if ((int)v73 <= v82)
    v83 = v82;
  else
    v83 = v73;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(JSC::VM &,JSC::PropertyName,JSC::JSValue,unsigned int,JSC::PutPropertySlot &)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()((JSC::Heap *)&v242, (uint64_t)v248, v73, v83);
  JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker((JSC::GCSafeConcurrentJSLocker *)v248);
  if ((int)v73 <= 63)
  {
    v84 = (uint64_t)(a1 + 16);
    v85 = v73;
  }
  else
  {
    v84 = *((_QWORD *)a1 + 1) - 8;
    v85 = 63 - v73;
  }
  *(_QWORD *)(v84 + 8 * v85) = a4;
  *(_BYTE *)(a6 + 21) = 2;
  *(_QWORD *)a6 = a1;
  *(_DWORD *)(a6 + 16) = v73;
  v86 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10);
  if ((v7 & 2) != 0)
  {
    v86 |= 0x10u;
    *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10) = v86;
  }
  if ((v86 & 0x80000) != 0)
LABEL_118:
    JSC::VM::invalidateStructureChainIntegrity();
  return 0;
}

void sub_194359904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, WTF::Lock *a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  JSC::WatchpointSet::~WatchpointSet((JSC::WatchpointSet *)&a15);
  _Unwind_Resume(a1);
}

void sub_1943599BC()
{
  JUMPOUT(0x194359968);
}

uint64_t JSC::Structure::outOfLineCapacity(JSC::Structure *this)
{
  int v1;
  unsigned int v3;
  unsigned int v4;

  v1 = *((unsigned __int16 *)this + 12);
  if (v1 == 65534)
    return 0;
  if (v1 == 0xFFFF)
    v1 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  if (v1 < 64)
    return 0;
  if ((v1 - 63) < 5)
    return 4;
  v3 = (v1 - 64) | ((v1 - 64) >> 1) | (((v1 - 64) | ((v1 - 64) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  return (v4 | HIWORD(v4)) + 1;
}

JSC::Heap *JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(JSC::VM &,JSC::PropertyName,JSC::JSValue,unsigned int,JSC::PutPropertySlot &)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}::operator()(JSC::Heap *result, uint64_t a2, uint64_t a3, int a4)
{
  JSC::Heap *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  JSC::VM *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t MoreOutOfLineStorage;
  uint64_t v19;
  JSC::Structure *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  JSC::Structure *v26;

  v5 = result;
  v6 = **(_QWORD **)result;
  v7 = *(unsigned __int16 *)(v6 + 24);
  if (v7 == 65534
    || (v7 == 0xFFFF ? (v8 = *(_DWORD *)(*(_QWORD *)(v6 + 64) + 84)) : (v8 = *(unsigned __int16 *)(v6 + 24)), v8 < 64))
  {
    v9 = 0;
  }
  else if ((v8 - 63) >= 5)
  {
    v15 = (v8 - 64) | ((v8 - 64) >> 1) | (((v8 - 64) | ((v8 - 64) >> 1)) >> 2);
    v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
    v9 = (v16 | HIWORD(v16)) + 1;
  }
  else
  {
    v9 = 4;
  }
  if (a4 < 64)
  {
    v13 = 0;
  }
  else
  {
    v10 = (a4 - 64) | ((a4 - 64) >> 1) | (((a4 - 64) | ((a4 - 64) >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = v11 | HIWORD(v11);
    if ((a4 - 63) >= 5)
      v13 = v12 + 1;
    else
      v13 = 4;
  }
  v14 = (JSC::VM *)*((_QWORD *)result + 2);
  if (v13 != v9)
  {
    v17 = *((_QWORD *)result + 1);
    MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)v17, v14);
    v19 = *((_QWORD *)v5 + 2);
    result = (JSC::Heap *)(v19 + 192);
    if (*(_BYTE *)(v19 + 755))
    {
      *(_DWORD *)v17 = **((_DWORD **)v5 + 3) | 1;
      __dmb(0xAu);
      *(_QWORD *)(v17 + 8) = MoreOutOfLineStorage;
      if (*(_DWORD *)(v19 + 760) >= *(unsigned __int8 *)(v17 + 7))
        result = (JSC::Heap *)JSC::Heap::writeBarrierSlowPath(result, (const JSCell *)v17);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v17 + 8) = MoreOutOfLineStorage;
      if (*(_DWORD *)(v19 + 760) >= *(unsigned __int8 *)(v17 + 7))
        result = (JSC::Heap *)JSC::Heap::writeBarrierSlowPath(result, (const JSCell *)v17);
    }
    v20 = **(JSC::Structure ***)v5;
    if (a4 == -1)
    {
      v25 = -2;
    }
    else
    {
      if (a4 <= 65533)
      {
        *((_WORD *)v20 + 12) = a4;
LABEL_24:
        __dmb(0xAu);
        *(_DWORD *)v17 = **((_DWORD **)v5 + 3);
        return result;
      }
      v23 = *((__int16 *)v20 + 12);
      v26 = **(JSC::Structure ***)v5;
      v24 = *((_QWORD *)v20 + 8);
      if (v23 == -1)
      {
        *(_DWORD *)(v24 + 84) = a4;
        goto LABEL_24;
      }
      if (!v24 || *(_BYTE *)(v24 + 5) == 1)
      {
        result = (JSC::Heap *)JSC::Structure::allocateRareData(v26, *((JSC::VM **)v5 + 2));
        v24 = *((_QWORD *)v26 + 8);
      }
      *(_DWORD *)(v24 + 84) = a4;
      __dmb(0xAu);
      v25 = -1;
      v20 = v26;
    }
    *((_WORD *)v20 + 12) = v25;
    goto LABEL_24;
  }
  if (a4 == -1)
  {
    *(_WORD *)(v6 + 24) = -2;
  }
  else if (a4 > 65533)
  {
    v21 = **(_QWORD **)result;
    v22 = *(_QWORD *)(v6 + 64);
    if (v7 == 0xFFFF)
    {
      *(_DWORD *)(v22 + 84) = a4;
    }
    else
    {
      if (!v22 || *(_BYTE *)(v22 + 5) == 1)
      {
        result = (JSC::Heap *)JSC::Structure::allocateRareData((JSC::Structure *)v21, v14);
        v22 = *(_QWORD *)(v21 + 64);
      }
      *(_DWORD *)(v22 + 84) = a4;
      __dmb(0xAu);
      *(_WORD *)(v21 + 24) = -1;
    }
  }
  else
  {
    *(_WORD *)(v6 + 24) = a4;
  }
  return result;
}

void JSC::GCSafeConcurrentJSLocker::~GCSafeConcurrentJSLocker(JSC::GCSafeConcurrentJSLocker *this)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 16) = 0;
    v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v3 = __ldxr(v2);
    if (v3 == 1)
    {
      if (!__stlxr(0, v2))
        goto LABEL_7;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
LABEL_7:
  v4 = *((_QWORD *)this + 4);
  --*(_DWORD *)(v4 + 916);
  if (*(_BYTE *)(v4 + 1198) || *(_BYTE *)(MEMORY[0x1E0CC10F8] + 1489))
    JSC::Heap::decrementDeferralDepthAndGCIfNeededSlow((JSC::Heap *)(v4 + 192));
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 16))
  {
    v5 = (unsigned __int8 *)*((_QWORD *)this + 1);
    v6 = __ldxr(v5);
    if (v6 == 1)
    {
      if (!__stlxr(0, v5))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
}

void sub_194359D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  JSC::DeferGC::~DeferGC((JSC::DeferGC *)(v1 + 32));
  JSC::ConcurrentJSLockerBase::~ConcurrentJSLockerBase((JSC::ConcurrentJSLockerBase *)v1);
  _Unwind_Resume(a1);
}

uint64_t JSC::PropertyTable::rehash(JSC::PropertyTable *this, JSC::VM *a2, unsigned int a3, char a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[4];
  unsigned int v37;
  int v38;
  uint64_t v39;
  _QWORD v40[5];
  unint64_t v41;
  unint64_t v42;

  v5 = *((_QWORD *)this + 2);
  v39 = v5;
  v6 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
  v7 = *((unsigned int *)this + 2);
  v37 = v6;
  v38 = v7;
  v8 = 4;
  if ((v5 & 1) != 0)
  {
    v8 = 3;
    v9 = v7;
  }
  else
  {
    v9 = 4 * v7;
  }
  if (a3 < 8)
  {
    v12 = 16;
  }
  else
  {
    v10 = a3 | (a3 >> 1) | ((a3 | (a3 >> 1)) >> 2);
    v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
    v12 = 2 * (v11 | HIWORD(v11)) + 2;
  }
  v13 = (unint64_t)((v7 >> 1) + 1) << v8;
  *((_DWORD *)this + 2) = v12;
  *((_DWORD *)this + 3) = v12 - 1;
  *((_QWORD *)this + 3) = 0;
  if ((v5 & 1) != 0 && (a4 & 1) != 0)
  {
    v14 = v12;
    if (v12 < 0x1FE)
    {
      v15 = 3;
      v16 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    v14 = v12;
  }
  v16 = 0;
  v14 *= 4;
  v15 = 4;
LABEL_10:
  v17 = v13 + v9;
  v18 = WTF::fastZeroedMalloc((WTF *)(((unint64_t)((v12 >> 1) + 1) << v15) + v14));
  *((_QWORD *)this + 2) = v16 | v18;
  v36[0] = this;
  v36[1] = &v38;
  v36[2] = &v37;
  v36[3] = &v39;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (((v16 | v18) & 1) != 0)
  {
    v41 = v19 + *((unsigned int *)this + 2);
    v42 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v40[0] = this;
    v40[1] = &v38;
    v40[2] = &v37;
    v40[3] = &v42;
    v40[4] = &v41;
    v20 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
    {
      if (v6)
      {
        v21 = &v20[v7];
        do
        {
          v22 = *(_QWORD *)v21;
          if ((*(_QWORD *)v21 & 0xFFFFFFFFFFFFLL) != 1)
          {
            v23 = *(_DWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v23 & 0x20) != 0)
              v23 = *(_DWORD *)((*(_QWORD *)v21 & 0xFFFFFFFFFFFFLL) + 0x20);
            v24 = 0;
            v25 = v41;
            v26 = v23 >> 8;
            v27 = *((unsigned int *)this + 3);
            do
            {
              v28 = v26 & v27;
              v29 = *(unsigned __int8 *)(v42 + (v26 & v27));
              v26 = ++v24 + (v26 & v27);
            }
            while (v29);
            v30 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
            *(_BYTE *)(v42 + v28) = *((_BYTE *)this + 28) + *((_BYTE *)this + 24) + 1;
            *(_QWORD *)(v25 + 8 * v30) = v22;
            ++*((_DWORD *)this + 6);
          }
          v21 += 8;
        }
        while (v21 != &v20[8 * v6 + v7]);
      }
    }
    else
    {
      _ZZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIhEEDaS4_ENKUlPKS3_E_clIjEES7_S9_((uint64_t)v40, (uint64_t)v20);
    }
  }
  else
  {
    _ZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIjEEDaS4_((uint64_t)v36, v19);
  }
  result = WTF::fastFree((WTF *)(v39 & 0xFFFFFFFFFFFFFFFELL), v20);
  v32 = *((unsigned int *)this + 2);
  v33 = 3;
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v34 = *((unsigned int *)this + 2);
  }
  else
  {
    v33 = 4;
    v34 = 4 * v32;
  }
  v35 = ((unint64_t)((v32 >> 1) + 1) << v33) + v34;
  if (v35 > v17 && v35 - v17 >= 0x101)
    return JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  return result;
}

JSC::VM *JSC::reifyStaticProperties<11u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 440; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::JSWindowProxy::setWindow(WebCore::JSWindowProxy *this, WebCore::DOMWindow *a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t SlowCase;
  uint64_t v9;
  int v10;
  JSC::JSObject *Object;
  uint64_t v12;
  JSC::VM *v13;
  _QWORD *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  JSC::JSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  WebCore::JSDOMWindowProperties *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  JSC::Heap *v38;
  unint64_t v39;
  WebCore::DOMWindow *v40;

  v4 = *((unsigned __int8 *)a2 + 56);
  v5 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v5 = (uint64_t)v40;
  WebCore::g_commonVMOrNull = (uint64_t)v40;
  if (__ldaxr((unsigned int *)v40 + 274))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)v40 + 274))
  {
    goto LABEL_46;
  }
  JSC::Heap::acquireAccessSlow((WebCore::DOMWindow *)((char *)v40 + 192));
LABEL_46:
  if (webThreadStarted == 1)
    *(_BYTE *)(*((_QWORD *)v40 + 14) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v5 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v5, 0);
LABEL_2:
  v6 = (uint64_t *)(v5 + 40136);
  v7 = (uint64_t *)(v5 + 38904);
  LODWORD(v40) = 4202519;
  v38 = (JSC::Heap *)(v5 + 192);
  SlowCase = *(_QWORD *)(v5 + 40136);
  if (SlowCase < *(_QWORD *)(v5 + 40144))
  {
LABEL_3:
    *v6 = SlowCase + 128;
    goto LABEL_4;
  }
  SlowCase = *(_QWORD *)(v5 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = SlowCase + HIDWORD(v32);
    *(_QWORD *)(v5 + 40152) = SlowCase + (int)v32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v5, 0, 2, &v40, &WebCore::JSDOMWindowPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v9 = *v7;
  if ((unint64_t)*v7 >= *(_QWORD *)(v5 + 38912))
  {
    v9 = *(_QWORD *)(v5 + 38920);
    if ((v9 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v9 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_8;
    }
    v33 = *(_QWORD *)(v9 + 8) ^ *(_QWORD *)(v5 + 38928);
    *(_QWORD *)(v5 + 38912) = v9 + HIDWORD(v33);
    *(_QWORD *)(v5 + 38920) = v9 + (int)v33;
  }
  *v7 = v9 + 16;
LABEL_8:
  *(_DWORD *)v9 = 0;
  v10 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v9 = SlowCase >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  v39 = SlowCase;
  *(_QWORD *)(v9 + 8) = 0;
  WebCore::JSDOMWindowPrototype::finishCreation((uint64_t *)&v39, (WebCore::JSDOMWindowPrototype *)v9, (JSC::VM *)v5);
  LODWORD(v40) = 222767667;
  if ((v9 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v9);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v5);
  }
  v12 = *v6;
  if ((unint64_t)*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_12;
  v12 = *(_QWORD *)(v5 + 40152);
  if ((v12 & 1) == 0)
  {
    v34 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v12 + HIDWORD(v34);
    *(_QWORD *)(v5 + 40152) = v12 + (int)v34;
LABEL_12:
    *v6 = v12 + 128;
    goto LABEL_13;
  }
  JSC::sanitizeStackForVM();
  v12 = JSC::LocalAllocator::allocateSlowCase();
LABEL_13:
  *(_DWORD *)v12 = 0;
  MEMORY[0x19AEA4278](v12, v5, 0, v9, &v40, &WebCore::JSDOMWindow::s_info, 32, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  ++*((_DWORD *)a2 + 6);
  v14 = (_QWORD *)WebCore::JSDOMWindow::subspaceForImpl((WebCore::JSDOMWindow *)v5, v13);
  v15 = v14[3];
  if (v15 < v14[4])
    goto LABEL_16;
  v15 = v14[5];
  if ((v15 & 1) == 0)
  {
    v35 = *(_QWORD *)(v15 + 8) ^ v14[6];
    v14[4] = v15 + HIDWORD(v35);
    v14[5] = v15 + (int)v35;
LABEL_16:
    v14[3] = v15 + 3424;
    goto LABEL_17;
  }
  JSC::sanitizeStackForVM();
  v15 = JSC::LocalAllocator::allocateSlowCase();
LABEL_17:
  *(_DWORD *)v15 = 0;
  v40 = a2;
  WebCore::JSDOMWindowBase::JSDOMWindowBase(v15, v5, v12, (uint64_t *)&v40, (uint64_t)this);
  if (v40)
  {
    if (*((_DWORD *)v40 + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)v40 + 72))();
    else
      --*((_DWORD *)v40 + 6);
  }
  WebCore::JSDOMWindow::finishCreation((WebCore::JSDOMWindow *)v15, (JSC::VM *)v5, this);
  if (!v4)
  {
    v17 = WTF::linkedOnOrAfterSDKWithBehavior();
    v18 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8);
    if (*(_BYTE *)(v18 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x19435A5FCLL);
    }
    if (*(_BYTE *)(v18 - 14))
      v19 = 0;
    else
      v19 = v17;
    if (v19 == 1)
      *((_BYTE *)a2 + 312) = 1;
  }
  v20 = *(_DWORD *)v9 & 0xFFFFFFFE;
  *(_QWORD *)(16 * v20 + 0x28) = v15;
  if ((_DWORD)v20 && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(16 * v20 + 7))
    JSC::Heap::writeBarrierSlowPath(v38, (const JSCell *)(16 * v20));
  v21 = WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)v5, (JSC::VM *)v15, v16);
  v22 = v21;
  LODWORD(v40) = 566233111;
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v23 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v21);
    if (v23)
      JSC::JSObject::didBecomePrototype(v23, (JSC::VM *)v5);
  }
  v24 = *v6;
  if ((unint64_t)*v6 < *(_QWORD *)(v5 + 40144))
    goto LABEL_32;
  v24 = *(_QWORD *)(v5 + 40152);
  if ((v24 & 1) == 0)
  {
    v36 = *(_QWORD *)(v24 + 8) ^ *(_QWORD *)(v5 + 40160);
    *(_QWORD *)(v5 + 40144) = v24 + HIDWORD(v36);
    *(_QWORD *)(v5 + 40152) = v24 + (int)v36;
LABEL_32:
    *v6 = v24 + 128;
    goto LABEL_33;
  }
  JSC::sanitizeStackForVM();
  v24 = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)v24 = 0;
  MEMORY[0x19AEA4278](v24, v5, v15, v22, &v40, &WebCore::JSDOMWindowProperties::s_info, 32, 0);
  if (*(_BYTE *)(v5 + 755))
    __dmb(0xAu);
  v25 = *(_QWORD **)(*(_QWORD *)(v15 + 56) + 41456);
  v26 = v25[2868];
  if (v26 >= v25[2869])
  {
    v26 = v25[2870];
    if ((v26 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v26 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_37;
    }
    v37 = *(_QWORD *)(v26 + 8) ^ v25[2871];
    v25[2869] = v26 + HIDWORD(v37);
    v25[2870] = v26 + (int)v37;
  }
  v25[2868] = v26 + 32;
LABEL_37:
  *(_DWORD *)v26 = 0;
  v27 = (WebCore::JSDOMWindowProperties *)WebCore::JSDOMObject::JSDOMObject(v26, v24);
  WebCore::JSDOMWindowProperties::finishCreation(v27, (JSC::JSGlobalObject *)v15);
  JSC::JSObject::didBecomePrototype((JSC::JSObject *)v26, (JSC::VM *)v5);
  v28 = *(_DWORD *)v9 & 0xFFFFFFFE;
  *(_QWORD *)(16 * v28 + 0x30) = v26;
  if ((v26 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(16 * v28 + 7))
    JSC::Heap::writeBarrierSlowPath(v38, (const JSCell *)(16 * v28));
  JSC::JSGlobalProxy::setTarget();
  v29 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  *(_QWORD *)(v29 + 40) = v15;
  if (*(_DWORD *)(v5 + 760) >= *(unsigned __int8 *)(v29 + 7))
    JSC::Heap::writeBarrierSlowPath(v38, (const JSCell *)v29);
  {
    WebCore::GCController::GCController((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
  }
  return WebCore::GCController::garbageCollectSoon((WebCore::GCController *)&WebCore::GCController::singleton(void)::controller);
}

uint64_t JSC::Structure::create(uint64_t *a1, int a2, JSC::JSCell *this)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)this & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(this);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::JSObject::didBecomePrototype(JSC::JSObject *this, JSC::VM *a2)
{
  JSC::VM *v4;
  JSC::DeferredStructureTransitionWatchpointFire *v5;
  unint64_t v6;
  _BYTE v7[24];
  JSC::VM *v8;
  JSC::VM *v9;

  v4 = (JSC::VM *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  if ((*((_BYTE *)v4 + 18) & 8) == 0)
  {
    JSC::WatchpointSet::WatchpointSet();
    v8 = a2;
    v9 = v4;
    v6 = JSC::Structure::becomePrototypeTransition(a2, v4, (JSC::Structure *)v7, v5);
    JSC::JSObject::setStructure((JSCell *)this, a2, v6);
    JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire((JSC::DeferredStructureTransitionWatchpointFire *)v7);
  }
  if (*((_BYTE *)this + 5) == 32)
    JSC::JSObject::didBecomePrototype(*((JSC::JSObject **)this + 2), a2);
}

void sub_19435A8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire((JSC::DeferredStructureTransitionWatchpointFire *)va);
  _Unwind_Resume(a1);
}

uint64_t WebCore::JSEventTarget::prototype(WebCore::JSEventTarget *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t Structure;
  JSC::Structure *v14;
  JSC::JSCell *v15;
  uint64_t v16;
  int v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) ^ (((unint64_t)&WebCore::JSEventTarget::s_info + ~((_QWORD)&WebCore::JSEventTarget::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSEventTarget::s_info)
  {
    v18 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v18) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v18;
      if (v11 == &WebCore::JSEventTarget::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    Structure = WebCore::JSEventTargetPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v15 = (JSC::JSCell *)WebCore::JSEventTargetPrototype::create(this, a2, Structure, v14);
    v16 = WebCore::JSEventTarget::createStructure((uint64_t *)this, (uint64_t)a2, v15);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v16, (uint64_t)&WebCore::JSEventTarget::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

JSCell *JSC::JSObject::setStructure(JSCell *this, JSC::VM *a2, unint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;

  *(_DWORD *)this = a3 >> 4;
  *((_BYTE *)this + 6) = *((_BYTE *)this + 6) & 0x80 | *(_BYTE *)(a3 + 10);
  *((_BYTE *)this + 5) = *(_BYTE *)(a3 + 9);
  v3 = (unsigned __int8 *)this + 4;
  if (*((unsigned __int8 *)this + 4) != *(unsigned __int8 *)(a3 + 8))
  {
    do
    {
      while (1)
      {
        v4 = *v3;
        v5 = __ldxr(v3);
        if (v5 == v4)
          break;
        __clrex();
      }
    }
    while (__stxr(v4 & 0xC0 | *(_BYTE *)(a3 + 8), v3));
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    return (JSCell *)JSC::Heap::writeBarrierSlowPath((JSC::VM *)((char *)a2 + 192), this);
  return this;
}

void JSC::DeferredStructureTransitionWatchpointFire::~DeferredStructureTransitionWatchpointFire(JSC::DeferredStructureTransitionWatchpointFire *this)
{
  if (*((_BYTE *)this + 4) == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(this);
  JSC::WatchpointSet::~WatchpointSet(this);
}

void sub_19435AAD0(_Unwind_Exception *a1)
{
  JSC::WatchpointSet *v1;

  JSC::WatchpointSet::~WatchpointSet(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::GCController::garbageCollectSoon(WebCore::GCController *this)
{
  WTF::ThreadGroup ***v1;
  WTF::RunLoop *v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v1 = (WTF::ThreadGroup ***)WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_2;
  WTF::RunLoop::webIfExists(this);
  JSC::VM::create();
  v1 = (WTF::ThreadGroup ***)v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v8 + 1096)))
  {
    goto LABEL_7;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v8 + 192));
LABEL_7:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v8 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(*v1[73]);
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v1, 0);
LABEL_2:
  v2 = (WTF::RunLoop *)MEMORY[0x19AEA3294](&v7, v1);
  v3 = WebCore::g_commonVMOrNull;
  if (WebCore::g_commonVMOrNull)
    goto LABEL_3;
  WTF::RunLoop::webIfExists(v2);
  JSC::VM::create();
  v3 = v8;
  WebCore::g_commonVMOrNull = v8;
  if (__ldaxr((unsigned int *)(v8 + 1096)))
  {
    __clrex();
  }
  else if (!__stlxr(4u, (unsigned int *)(v8 + 1096)))
  {
    goto LABEL_13;
  }
  JSC::Heap::acquireAccessSlow((JSC::Heap *)(v3 + 192));
LABEL_13:
  if (webThreadStarted == 1)
    *(_BYTE *)(*(_QWORD *)(v3 + 112) + 5) = 1;
  WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(v3 + 584));
  WebCore::JSVMClientData::initNormalWorld((JSC::VM *)v3, 0);
LABEL_3:
  JSC::Heap::reportAbandonedObjectGraph((JSC::Heap *)(v3 + 192));
  return MEMORY[0x19AEA32A0](&v7);
}

uint64_t WebCore::LocalDOMWindow::document(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
    return v2 - 288;
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t JSC::jsNontrivialString(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v2 = *a2;
  *a2 = 0;
  v7 = v2;
  v4 = JSC::JSString::create(a1, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebCore::CloneDeserializer::CachedString::jsString(WebCore::CloneDeserializer::CachedString *this, WebCore::CloneDeserializer *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  objc_class *v9;
  WTF::StringImpl *v10;
  JSC::MarkedVectorBase *v11;
  uint64_t v12;
  WebCore::CloneDeserializer *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  JSValue v17;
  WTF::StringImpl *v18;

  result = *((_QWORD *)this + 1);
  if (result)
    return result;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 56);
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
LABEL_19:
    v9 = *(objc_class **)(v5 + 41968);
    goto LABEL_6;
  }
  v7 = *(_DWORD *)(v6 + 4);
  if (v7 != 1)
  {
    if (v7)
      goto LABEL_5;
    goto LABEL_19;
  }
  v14 = *(unsigned __int8 **)(v6 + 8);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    v15 = *v14;
  }
  else
  {
    v16 = *(unsigned __int16 *)v14;
    if (v16 > 0xFF)
    {
LABEL_5:
      *(_DWORD *)v6 += 2;
      v18 = (WTF::StringImpl *)v6;
      v9 = (objc_class *)JSC::JSString::create(v5, &v18);
      v10 = v18;
      v18 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      goto LABEL_6;
    }
    v15 = v16;
  }
  v9 = *(objc_class **)(v5 + 8 * v15 + 42216);
LABEL_6:
  *((_QWORD *)this + 1) = v9;
  v12 = *((unsigned int *)a2 + 6);
  v11 = (WebCore::CloneDeserializer *)((char *)a2 + 24);
  if ((_DWORD)v12 == *((_DWORD *)a2 + 7)
    || (v13 = (WebCore::CloneDeserializer *)*((_QWORD *)a2 + 4), v13 != (WebCore::CloneDeserializer *)((char *)a2 + 48))
    && v13)
  {
    v17.super.isa = v9;
    if (JSC::MarkedVectorBase::slowAppend(v11, v17) == 1)
    {
      *((_BYTE *)a2 + 16) = 1;
      goto LABEL_24;
    }
  }
  else
  {
    *((_QWORD *)v13 + v12) = v9;
    *(_DWORD *)v11 = v12 + 1;
  }
  if (*((_BYTE *)a2 + 16))
  {
LABEL_24:
    result = 184;
    __break(0xC471u);
    return result;
  }
  return *((_QWORD *)this + 1);
}

unint64_t WebCore::JSEventTargetPrototype::create(WebCore::JSEventTargetPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSEventTarget::s_info, &WebCore::JSEventTargetPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<4u>(JSC::VM *result, uint64_t a2, _QWORD *a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = a3[1];
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v21;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v21, (uint64_t)a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = a3[6];
  if (v11)
  {
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v12 = v21;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v21, (uint64_t)(a3 + 5), (unsigned __int8 *)this);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v14 = a3[11];
  if (v14)
  {
    if (v14 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v15 = v21;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v21, (uint64_t)(a3 + 10), (unsigned __int8 *)this);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[16];
  if (v17)
  {
    v18 = (uint64_t)(a3 + 15);
    if (v17 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v19 = v21;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v21, v18, (unsigned __int8 *)this);
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v19, v20);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSEventTargetPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::toJS(WebCore::DOMWrapperWorld **this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Document *a4)
{
  uint64_t v7;
  unint64_t v8;
  WebCore::Node *v10;
  WebCore::Node *v11;

  v7 = WebCore::cachedDocumentWrapper(this, a2, a3, a4);
  if (v7)
    return v7;
  *((_DWORD *)a3 + 6) += 2;
  v11 = a3;
  v8 = WebCore::toJSNewlyCreated((uint64_t)this, a2, &v11);
  v10 = v11;
  v11 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  return v8;
}

uint64_t WebCore::cachedDocumentWrapper(WebCore::DOMWrapperWorld **this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Document *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  BOOL v17;
  char **v18;
  BOOL v19;
  WebCore::JSDOMGlobalObject *v21;

  v6 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v6 + 48))
  {
    v21 = a3;
    result = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v6 + 32), &v21);
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (!v7 || (*(_BYTE *)(v7 + 8) & 3) != 0)
      goto LABEL_6;
    result = *(_QWORD *)v7;
  }
  if (result)
    return result;
LABEL_6:
  result = *((_QWORD *)a3 + 87);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
    if (result)
    {
      result = WebCore::WindowProxy::jsWindowProxy(*(WebCore::WindowProxy **)(result + 112), this[415]);
      if (result)
      {
        if ((result & 0xFFFE000000000002) == 0)
        {
          result = JSC::JSCell::getObject((JSC::JSCell *)result);
          if (!result)
            return result;
          if (*(_BYTE *)(result + 5) == 32)
          {
            result = *(_QWORD *)(result + 16);
            v16 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
            v17 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
            v18 = (char **)(16 * v16);
            if ((_DWORD)v16)
              v19 = v18 == &WebCore::JSDOMWindow::s_info;
            else
              v19 = 1;
            if (!v19)
            {
              do
              {
                v18 = (char **)v18[2];
                v17 = v18 != 0;
              }
              while (v18 != &WebCore::JSDOMWindow::s_info && v18 != 0);
            }
            if (!v17)
              return 0;
          }
          else
          {
            v9 = *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C);
            v10 = *(_DWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) != 0;
            v11 = (char **)(16 * v9);
            if ((_DWORD)v9)
              v12 = v11 == &WebCore::JSDOMWindow::s_info;
            else
              v12 = 1;
            if (!v12)
            {
              do
              {
                v11 = (char **)v11[2];
                v10 = v11 != 0;
              }
              while (v11 != &WebCore::JSDOMWindow::s_info && v11 != 0);
            }
            if (!v10)
              return 0;
          }
          v13 = *(_QWORD *)(result + 3320);
          if (*(_DWORD *)(v13 + 48))
          {
            v21 = a3;
            return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v13 + 32), &v21);
          }
          v14 = (_BYTE *)*((_QWORD *)a3 + 1);
          if (v14 && (v14[8] & 3) == 0)
            return *(_QWORD *)v14;
        }
        return 0;
      }
    }
  }
  return result;
}

unint64_t WebCore::JSHTMLDocument::createPrototype(WebCore::JSHTMLDocument *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSDocument::prototype(this, a2, a3);
  Structure = WebCore::JSHTMLDocumentPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSHTMLDocumentPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSDocument::prototype(WebCore::JSDocument *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSDocument::s_info + ~((_QWORD)&WebCore::JSDocument::s_info << 32)) ^ (((unint64_t)&WebCore::JSDocument::s_info + ~((_QWORD)&WebCore::JSDocument::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSDocument::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSDocument::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSNode::prototype(this, a2, a3);
    Structure = WebCore::JSDocumentPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSDocumentPrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSDocument::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSDocument::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSNode::prototype(WebCore::JSNode *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  JSC::Structure *v15;
  JSC::JSCell *v16;
  uint64_t v17;
  int v19;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSNode::s_info + ~((_QWORD)&WebCore::JSNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSNode::s_info
                                                                                                  + ~((_QWORD)&WebCore::JSNode::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSNode::s_info)
  {
    v19 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v19) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v19;
      if (v11 == &WebCore::JSNode::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSNodePrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v16 = (JSC::JSCell *)WebCore::JSNodePrototype::create(this, a2, Structure, v15);
    v17 = WebCore::JSNode::createStructure((uint64_t *)this, (uint64_t)a2, v16);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v17, (uint64_t)&WebCore::JSNode::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::cacheDOMStructure(JSCell *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v6 = *((_QWORD *)a1 + 7);
  if (!*(_BYTE *)(v6 + 755))
  {
    v16 = a3;
    v14 = a2;
    if (a2 && *(_DWORD *)(v6 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v6 + 192), a1);
    WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::inlineSet<JSC::ClassInfo const* const&,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>((uint64_t *)a1 + 412, &v16, &v14, (uint64_t)v15);
    return *(_QWORD *)(v15[0] + 8);
  }
  v9 = (unsigned __int8 *)a1 + 3329;
  if (__ldaxr((unsigned __int8 *)a1 + 3329))
  {
    __clrex();
LABEL_7:
    MEMORY[0x19AEA534C]((char *)a1 + 3329);
    goto LABEL_8;
  }
  if (__stxr(1u, v9))
    goto LABEL_7;
LABEL_8:
  v11 = (uint64_t *)((char *)a1 + 3296);
  v16 = a3;
  v12 = *((_QWORD *)a1 + 7);
  v14 = a2;
  if (a2 && *(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v12 + 192), a1);
    v11 = (uint64_t *)((char *)a1 + 3296);
  }
  WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::inlineSet<JSC::ClassInfo const* const&,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>(v11, &v16, &v14, (uint64_t)v15);
  v7 = *(_QWORD *)(v15[0] + 8);
  v13 = __ldxr(v9);
  if (v13 == 1)
  {
    if (!__stlxr(0, v9))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
  return v7;
}

uint64_t *WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::inlineSet<JSC::ClassInfo const* const&,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::ClassInfo const*,WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ClassInfo const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v27;
        *(_BYTE *)(a4 + 16) = 0;
        v16[1] = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_17;
    goto LABEL_19;
  }
  if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
LABEL_24:
      result = (uint64_t *)WTF::HashTable<JSC::ClassInfo const*,WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ClassInfo const*>>::rehash(v6, v26, v16);
      v16 = result;
      v22 = *v6;
      if (*v6)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_17;
    }
LABEL_19:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
    goto LABEL_24;
  }
LABEL_17:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<JSC::ClassInfo const*,WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashMap<JSC::ClassInfo const*,JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>,WTF::DefaultHash<JSC::ClassInfo const*>,WTF::HashTraits<JSC::ClassInfo const*>,WTF::HashTraits<JSC::WriteBarrier<JSC::Structure,WTF::RawPtrTraits<JSC::Structure>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ClassInfo const*>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (_QWORD *)(v6 + 16 * v13);
      if ((unint64_t)(*v15 + 1) >= 2)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*v15 << 32) + *v15) ^ ((~(*v15 << 32) + *v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(_QWORD *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_15;
  }
  v14 = 0;
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v14;
  }
  return result;
}

uint64_t WebCore::JSDocumentPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSNodePrototype::create(WebCore::JSNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t i;
  char *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  for (i = 0; i != 240; i += 5)
  {
    v10 = (&WebCore::JSNodePrototypeTableValues)[i + 1];
    if (v10)
    {
      if (v10 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSNodePrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v11 = v22[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSNode::s_info, (unint64_t *)v22, (uint64_t)&(&WebCore::JSNodePrototypeTableValues)[i], (unsigned __int8 *)SlowCase);
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v12);
        else
          *(_DWORD *)v11 -= 2;
      }
    }
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create((uint64_t)this, v22);
  v16 = v14;
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v13, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSNode::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSHTMLDocumentPrototype::create(WebCore::JSHTMLDocumentPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSHTMLDocument::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSHTMLDocumentPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<1u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v11;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v11, a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSHTMLDocumentPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMWindowProperties::finishCreation(WebCore::JSDOMWindowProperties *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  JSC::Structure *v9;
  int v10;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v13[6];
  int v14;
  int v15;
  JSC::Structure *v16;
  int v17;

  v4 = *((_QWORD *)a2 + 7);
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = JSC::JSString::create(v4, v13);
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE));
  v17 = *(_DWORD *)this;
  v16 = (JSC::Structure *)(16 * (v17 & 0xFFFFFFFE));
  v10 = JSC::Structure::outOfLineCapacity(v16);
  v14 = 0;
  v15 = v10;
  v13[0] = (WTF::StringImpl *)&v15;
  v13[1] = this;
  v13[2] = (WTF::StringImpl *)v4;
  v13[3] = (WTF::StringImpl *)&v17;
  v13[4] = (WTF::StringImpl *)&v16;
  v13[5] = (WTF::StringImpl *)&v14;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v9, (JSC::VM *)v4, v5, 6, (uint64_t)v13);
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset((uint64_t)this, v4, v14, v7);
  *((_DWORD *)v9 + 4) |= 0x10u;
  return JSC::JSObject::preventExtensions(this, a2, v11);
}

unint64_t WebCore::JSDocumentPrototype::create(WebCore::JSDocumentPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  JSC::VM *v4;
  unint64_t v5;
  int v6;
  unint64_t v8;
  WebCore::JSDOMGlobalObject *v10;
  uint64_t SlowCase;
  unint64_t v12;

  v4 = this;
  v5 = *((_QWORD *)this + 4863);
  if (v5 >= *((_QWORD *)this + 4864))
  {
    v5 = *((_QWORD *)this + 4865);
    if ((v5 & 1) != 0)
    {
      v10 = (WebCore::JSDOMGlobalObject *)a3;
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      a3 = (unint64_t)v10;
      v4 = this;
      v5 = SlowCase;
      goto LABEL_3;
    }
    v8 = *(_QWORD *)(v5 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v5 + HIDWORD(v8);
    *((_QWORD *)this + 4865) = v5 + (int)v8;
  }
  *((_QWORD *)this + 4863) = v5 + 16;
LABEL_3:
  *(_DWORD *)v5 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v5 = a3 >> 4;
  *(_DWORD *)(v5 + 4) = v6;
  v12 = a3;
  *(_QWORD *)(v5 + 8) = 0;
  WebCore::JSDocumentPrototype::finishCreation((uint64_t *)&v12, (WebCore::JSDocumentPrototype *)v5, v4);
  return v5;
}

uint64_t WebCore::JSHTMLDocument::subspaceForImpl(WebCore::JSHTMLDocument *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4304);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v20 = *(_QWORD *)(v9 + 4304);
  if (!v20)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v22, "IsoSpace T");
    v21 = 0;
    MEMORY[0x19AEA3204](v14, &v22, (char *)this + 192, (char *)this + 1872, 40, 8, &v21);
    v16 = v21;
    v21 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v20 = v14;
    v18 = *(_QWORD *)(v9 + 4304);
    *(_QWORD *)(v9 + 4304) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v20);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
      *(_DWORD *)(v7 + 2844) = v19 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 4304);
  *(_QWORD *)(v3 + 4304) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSHTMLDocument::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSEventTarget::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_QWORD *WebCore::cacheWrapper<WebCore::CDATASection,WebCore::JSCDATASection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSDocument::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::RenderTreeBuilder::removeAnonymousWrappersForInlineChildrenIfNeeded(uint64_t this, WebCore::RenderElement *a2)
{
  WebCore::RenderBlock *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  uint64_t v19;
  int v20;

  if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    v2 = a2;
  else
    v2 = 0;
  if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
  {
    v4 = this;
    ++*((_DWORD *)a2 + 4);
    this = (*(uint64_t (**)(WebCore::RenderElement *))(*(_QWORD *)a2 + 1688))(a2);
    if ((_DWORD)this)
    {
      v5 = *((unsigned int *)a2 + 16);
      if (v5 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
      {
        v6 = *(_QWORD *)((v5 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          do
          {
            if ((*(_BYTE *)(v6 + 45) & 2) != 0)
              v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 96);
            else
              v9 = *(_QWORD *)(v6 + 96);
            if ((v9 & 0xE000000) == 0 && (v9 & 0x180000) != 0x100000)
            {
              if ((*(_BYTE *)(v6 + 45) & 1) == 0)
                goto LABEL_45;
              if ((*(_BYTE *)(v6 + 45) & 2) != 0)
              {
                v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 8) + 96);
                if ((v19 & 0x1F) != 1 && (v19 & 0x1F) != 14)
                  goto LABEL_45;
              }
              else
              {
                v19 = *(_QWORD *)(v6 + 96);
                if ((v19 & 0x1F) != 1 && (v19 & 0x1F) != 0xE)
                  goto LABEL_45;
              }
              if ((*(_BYTE *)(v6 + 45) & 0x40) == 0)
                goto LABEL_45;
              if ((v19 & 0xF80000000000) != 0)
                goto LABEL_45;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
              if ((this & 1) != 0)
                goto LABEL_45;
              v20 = *(unsigned __int8 *)(v6 + 46);
              if (v20 == 20 || (*(_BYTE *)(v6 + 52) & 7) == 1 && (*(_BYTE *)(v6 + 53) & 2) != 0)
                goto LABEL_45;
              if (v20 == 26 || v20 == 49)
                goto LABEL_45;
              if ((*(_BYTE *)(v6 + 45) & 0x40) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19435D2ACLL);
              }
              if ((*(_WORD *)(v6 + 69) & 0x20) != 0)
                goto LABEL_45;
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
              if (this)
              {
                if (v7)
                {
                  if (((*(_BYTE *)(this + 20) & 1) == 0) != v8)
                    goto LABEL_45;
                  v7 = 1;
                }
                else
                {
                  v7 = 1;
                  v8 = (*(_BYTE *)(this + 20) & 1) == 0;
                }
              }
            }
            v10 = *(unsigned int *)(v6 + 47);
            if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)))
              break;
            v6 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
          }
          while (v6);
          v11 = *((unsigned int *)a2 + 16);
          if (v11 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32))
          {
            v12 = *(_QWORD *)((v11 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
            while (v12)
            {
              v13 = (_BYTE *)v12;
              v14 = *(unsigned int *)(v12 + 47);
              if (v14 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
                v12 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
              else
                v12 = 0;
              if ((v13[45] & 1) != 0)
              {
                v15 = (v13[45] & 2) != 0
                    ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 4) + 8) + 96)
                    : *((_QWORD *)v13 + 12);
                if (((v15 & 0x1F) == 1 || (v15 & 0x1F) == 14) && (v13[45] & 0x40) != 0 && (v15 & 0xF80000000000) == 0)
                {
                  this = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 176))(v13);
                  if ((this & 1) == 0)
                  {
                    v17 = v13[46];
                    if (v17 != 20)
                    {
                      if ((v13[52] & 7) == 1)
                      {
                        if ((v13[53] & 2) == 0 && v17 != 26 && v17 != 49)
                          goto LABEL_38;
                      }
                      else if (v17 != 49 && v17 != 26)
                      {
LABEL_38:
                        if ((v13[45] & 0x40) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19435D260);
                        }
                        this = WebCore::RenderTreeBuilder::Block::dropAnonymousBoxChild(*(WebCore::RenderTreeBuilder::Block **)(v4 + 72), v2, (WebCore::RenderBlock *)v13);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    v18 = *((_DWORD *)a2 + 4);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x19435D194);
    }
    *((_DWORD *)a2 + 4) = v18 - 1;
  }
  return this;
}

uint64_t WebCore::RenderBlock::canDropAnonymousBlockChild(WebCore::RenderBlock *this)
{
  return 1;
}

__n64 WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::KeyframeEffect *this, WebCore::LayoutRect *a2)
{
  uint64_t v4;
  __n64 result;
  WebCore::KeyframeEffect *v6;
  float v7;
  int v8;
  int v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::FloatRect *v15;
  char v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const WebCore::FloatRect *v21;
  __int128 *v22;
  WebCore::KeyframeEffect *v23;
  _DWORD *v24;
  __int128 *v25;
  __int128 v26;
  _DWORD v27[4];
  uint64_t v28;
  char v29;
  _BYTE v30[8];
  __int16 v31;
  int v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = WebCore::KeyframeEffect::renderer(this);
  if (v4 && (*(_BYTE *)(v4 + 45) & 4) != 0)
  {
    v28 = v4;
    v6 = *(WebCore::KeyframeEffect **)(v4 + 160);
    v22 = 0;
    v23 = v6;
    v7 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)
                                                                                + 40)
                                                                    + 8));
    v27[0] = WebCore::snapRectToDevicePixels((int *)&v22, v7);
    v27[1] = v8;
    v27[2] = v9;
    v27[3] = v10;
    v26 = 0uLL;
    v22 = (__int128 *)this;
    v23 = (WebCore::KeyframeEffect *)&v28;
    v21 = (const WebCore::FloatRect *)WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::LayoutRect &)const::$_0::operator()((WTF::StringImpl *)&v22, v11);
    v22 = (__int128 *)a2;
    v23 = this;
    v24 = v27;
    v25 = &v26;
    v12 = *((unsigned int *)this + 39);
    if ((_DWORD)v12)
    {
      v13 = *((_QWORD *)this + 18);
      v14 = 48 * v12;
      while (1)
      {
        v15 = *(const WebCore::FloatRect **)(v13 + 24);
        v31 = 273;
        v32 = 0;
        v33 = 0;
        v16 = WebCore::BlendingKeyframe::animatesProperty(v13, (uint64_t)v30);
        if (v33 != -1)
          ((void (*)(char *, __int16 *))off_1E3391BB0[v33])(&v29, &v31);
        v33 = -1;
        if ((v16 & 1) != 0 || (v15 = v21, *(double *)(v13 + 8) == 0.0))
        {
          result.n64_u64[0] = WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::LayoutRect &)const::$_1::operator()(&v22, v15).n64_u64[0];
          if (!v17)
            break;
        }
        v13 += 48;
        v14 -= 48;
        if (!v14)
        {
          v18 = *((_DWORD *)this + 39);
          if (v18)
          {
            v19 = *((_QWORD *)this + 18);
            if (*(double *)(v19 + 8) != 0.0 || *(double *)(v19 + 48 * v18 - 40) != 1.0)
            {
              result.n64_u64[0] = WebCore::KeyframeEffect::computeExtentOfTransformAnimation(WebCore::LayoutRect &)const::$_1::operator()(&v22, v21).n64_u64[0];
              if (!v20)
                return result;
            }
          }
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      result.n64_u64[0] = v26;
      *(_OWORD *)a2 = v26;
    }
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::computeTransformedExtentViaTransformList(WebCore::KeyframeEffect *this, const WebCore::FloatRect *a2, const WebCore::RenderStyle *a3, WebCore::LayoutRect *a4)
{
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const WebCore::FloatRect *v18;
  int v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  float v29;
  float v30;
  int v31;
  int v32;
  _QWORD v34[9];
  float64x2_t v35[8];
  float v36;
  float v37;
  int v38;
  int v39;

  v7 = WebCore::LayoutRect::operator WebCore::FloatRect((int *)a3);
  v9 = v8;
  v36 = v7;
  v37 = v8;
  v38 = v10;
  v39 = v11;
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 40);
  v15 = *(_QWORD *)(v12 + 8);
  v13 = v12 + 8;
  v14 = v15;
  v16 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    while (*(_BYTE *)(*(_QWORD *)v14 + 12) != 8)
    {
      v14 += 8;
      v17 -= 8;
      if (!v17)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if (!WebCore::TransformOperations::affectedByTransformOrigin((uint64_t **)v13))
    {
      v19 = 0;
      v20 = 0.0;
      v21 = 0.0;
      goto LABEL_8;
    }
  }
  v20 = WebCore::RenderStyle::computeTransformOrigin(a2, this);
  v21 = v22;
  v7 = v7 - v20;
  v9 = v9 - v22;
  v36 = v7;
  v37 = v9;
  v19 = 1;
LABEL_8:
  v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 40);
  v24 = *(unsigned int *)(v23 + 20);
  if ((_DWORD)v24)
  {
    v25 = *(uint64_t **)(v23 + 8);
    for (i = 8 * v24; i; i -= 8)
    {
      v27 = *v25;
      if (*(_BYTE *)(*v25 + 12) == 8)
      {
        v29 = WebCore::boundsOfRotatingRect((WebCore *)&v36, v18);
      }
      else
      {
        v35[5] = (float64x2_t)unk_1968DF950;
        v35[6] = (float64x2_t)xmmword_1968DF960;
        v35[7] = (float64x2_t)unk_1968DF970;
        v35[0] = (float64x2_t)xmmword_1968DF900;
        v35[1] = *(float64x2_t *)algn_1968DF910;
        v35[2] = (float64x2_t)xmmword_1968DF920;
        memset(&v35[3], 0, 32);
        v34[0] = *((_QWORD *)this + 1);
        (*(void (**)(uint64_t, float64x2_t *, _QWORD *))(*(_QWORD *)v27 + 48))(v27, v35, v34);
        if (!WebCore::TransformationMatrix::isAffine((WebCore::TransformationMatrix *)v35))
          return 0;
        v28 = *(unsigned __int8 *)(*v25 + 12);
        if ((v28 == 12 || v28 == 19)
          && (!WebCore::TransformationMatrix::decompose2((uint64_t)v35, (uint64_t)v34)
           || *(double *)&v34[4] != 0.0))
        {
          return 0;
        }
        WebCore::TransformationMatrix::mapRect(v35, (const WebCore::FloatRect *)&v36);
      }
      v7 = v29;
      v9 = v30;
      v36 = v29;
      v37 = v30;
      v38 = v31;
      v39 = v32;
      ++v25;
    }
  }
  if (v19)
  {
    v36 = v20 + v7;
    v37 = v21 + v9;
  }
  WebCore::LayoutRect::LayoutRect((int *)v35, (const WebCore::FloatRect *)&v36);
  *(float64x2_t *)a3 = v35[0];
  return 1;
}

void WebCore::BorderPainter::paintBorder(unsigned int **a1, int *a2, uint64_t a3, int a4, const WebCore::LayoutSize *a5, int a6)
{
  uint64_t v12;
  uint64_t v14;
  _BOOL4 v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  int v22;
  char v23;
  char v24;
  __int16 v25;
  char v26;
  void *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  __int32 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  BOOL v49;
  signed int v50;
  int v51;
  WTF *v53;
  void *v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  int32x4_t v70[9];
  _BYTE v71[64];
  char v72;
  uint64_t *v73;
  char v74;
  int v75;
  char v76;
  char v77;
  BOOL v78;
  BOOL v79;
  uint64_t v80;
  float v81;
  unsigned __int8 v82;
  char v83;
  char v84;
  uint64_t v85;
  float v86;
  unsigned __int8 v87;
  char v88;
  char v89;
  uint64_t v90;
  float v91;
  unsigned __int8 v92;
  char v93;
  char v94;
  uint64_t v95;
  float v96;
  unsigned __int8 v97;
  char v98;
  char v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  _QWORD v109[3];

  v12 = *((_QWORD *)a1[1] + 10);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) & 1) == 0)
  {
    if (a2[2] >= 1 && a2[3] > 0)
      goto LABEL_6;
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
    v41 = *(_QWORD *)(v39 + 200);
    v40 = (uint64_t *)(v39 + 200);
    v42 = *(_QWORD *)(v41 + 8);
    if (v42)
    {
      v43 = *((_QWORD *)a2 + 1);
      if ((*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)v42 + 56))(v42, *a1))
      {
        if ((*(unsigned int (**)(uint64_t, unsigned int *, float))(*(_QWORD *)v42 + 208))(v42, *a1, *(float *)(*(_QWORD *)(a3 + 24) + 184)))
        {
          v44 = WebCore::RenderStyle::imageOutsets(a3, v40);
          v47 = (v46 >> 31) + 0x7FFFFFFF;
          if (!__OFADD__(v46, HIDWORD(v44)))
            v47 = v46 + HIDWORD(v44);
          v48 = v44 + v45;
          if (__OFADD__((_DWORD)v44, v45))
            v48 = (v44 >> 31) + 0x7FFFFFFF;
          v49 = __OFADD__((_DWORD)v43, v47);
          v50 = v43 + v47;
          if (v49)
            v50 = (v43 >> 31) + 0x7FFFFFFF;
          v49 = __OFADD__(HIDWORD(v43), v48);
          v51 = HIDWORD(v43) + v48;
          if (v49)
            v51 = (HIDWORD(v43) >> 31) + 0x7FFFFFFF;
          if (v50 >= 1 && v51 >= 1)
          {
LABEL_6:
            v109[0] = (*(uint64_t (**)(unsigned int *, int *))(*(_QWORD *)*a1 + 768))(*a1, a2);
            v109[1] = v14;
            v16 = (int)v14 > 0 && SHIDWORD(v14) > 0;
            if (v16)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(v12, 1);
              v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 3) + 8) + 40) + 8) + 528);
              v31 = 1.0;
              if (v30)
              {
                v32 = *(_QWORD *)(v30 + 8);
                if (v32)
                {
                  v33 = *(_QWORD *)(v32 + 24);
                  if (v33)
                  {
                    v34 = *(float **)(v33 + 8);
                    if (v34)
                    {
                      v35 = (*(_DWORD *)v34)++;
                      v31 = v34[91];
                      if (v35)
                      {
                        *(_DWORD *)v34 = v35;
                      }
                      else
                      {
                        WebCore::Page::~Page((uint64_t)v34);
                        WTF::fastFree(v53, v54);
                      }
                    }
                  }
                }
              }
              v70[0].i32[0] = WebCore::snapRectToDevicePixels((int *)v109, v31);
              *(uint64_t *)((char *)v70[0].i64 + 4) = __PAIR64__(v37, v36);
              v70[0].i32[3] = v38;
              (*(void (**)(uint64_t, int32x4_t *))(*(_QWORD *)v12 + 472))(v12, v70);
            }
            if ((WebCore::BorderPainter::paintNinePieceImage((uint64_t *)a1, (__int128 *)a2, a3, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 200), 2) & 1) == 0)
            {
              WebCore::RenderStyle::getRoundedBorderFor((WebCore::RenderStyle *)a3, (const WebCore::LayoutRect *)a2, a5, a6, (uint64_t)&v106);
              if (a4 == 3)
              {
                v55 = *((_QWORD *)a1[1] + 10);
                v56 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 3) + 8)
                                                                                             + 40)
                                                                                 + 8));
                v70[0].i64[0] = WebCore::shrinkRectByOneDevicePixel(v55, *(_QWORD *)a2, v56);
                v70[0].i64[1] = v57;
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)a3, (const WebCore::LayoutRect *)v70, (int)a5, a6, (uint64_t)&v103);
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)a3, (const WebCore::LayoutRect *)a2, (int)a5, a6, (uint64_t)&v100);
              }
              else
              {
                v70[0] = *(int32x4_t *)a2;
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)a3, (const WebCore::LayoutRect *)v70, (int)a5, a6, (uint64_t)&v103);
                v100 = v103;
                v101 = v104;
                v102 = v105;
              }
              v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a1 + 3) + 8) + 40) + 8) + 528);
              v18 = 1.0;
              if (v17)
              {
                v19 = *(_QWORD *)(v17 + 8);
                if (v19)
                {
                  v20 = *(_QWORD *)(v19 + 24);
                  if (v20)
                  {
                    v21 = *(float **)(v20 + 8);
                    if (v21)
                    {
                      v22 = (*(_DWORD *)v21)++;
                      v18 = v21[91];
                      if (v22)
                      {
                        *(_DWORD *)v21 = v22;
                      }
                      else
                      {
                        WebCore::Page::~Page((uint64_t)v21);
                        WTF::fastFree(v28, v29);
                      }
                    }
                  }
                }
              }
              WebCore::borderEdges((WebCore *)a3, a5, v18, a6, (uint64_t)&v80);
              if ((!v84 || v81 == 0.0 || v82 < 2u || v83 || v82 == 8)
                && (!v89 || v86 == 0.0 || v87 < 2u || v88 || v87 == 8)
                && (!v94 || v91 == 0.0 || v92 < 2u || v93 || v92 == 8)
                && (!v99 || v96 == 0.0 || v97 < 2u || v98 || v97 == 8))
              {
                if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v107), (int16x8_t)vceqzq_s32(v108))))) & 1) != 0&& WebCore::BorderPainter::allCornersClippedOut((uint64_t)&v106, a1[1]))
                {
                  v107 = 0u;
                  v108 = 0u;
                }
                v23 = 1;
              }
              else
              {
                v23 = 0;
              }
              v70[0] = v106;
              v70[1] = v107;
              v70[2] = v108;
              v70[3] = v103;
              v70[4] = v104;
              v70[5] = v105;
              v70[7] = v101;
              v70[8] = v102;
              v70[6] = v100;
              if (WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)a3))
              {
                WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v71, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 208);
                v24 = 1;
              }
              else
              {
                v24 = 0;
                v71[0] = 0;
              }
              v72 = v24;
              v73 = &v80;
              v74 = v23;
              v75 = a4;
              v76 = (char)a5;
              v77 = a6;
              v78 = v16;
              v25 = (unsigned __int16)*(_DWORD *)(a3 + 44) >> 13;
              v26 = 2;
              switch((unsigned __int16)*(_DWORD *)(a3 + 44) >> 13)
              {
                case 1:
                case 2:
                  goto LABEL_48;
                case 3:
                case 5:
                  LOBYTE(v25) = 3;
                  goto LABEL_48;
                case 4:
                  goto LABEL_49;
                default:
                  LOBYTE(v25) = 0;
LABEL_48:
                  v26 = v25;
LABEL_49:
                  v79 = (v26 & 6) != 2;
                  WebCore::BorderPainter::paintSides((uint64_t)a1, v70);
                  if (v72)
                    WebCore::BorderDataRadii::~BorderDataRadii((WebCore::BorderDataRadii *)v71);
                  if ((v95 & 0x8000000000000) != 0)
                  {
                    v58 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v59 = __ldaxr(v58);
                      v60 = v59 - 1;
                    }
                    while (__stlxr(v60, v58));
                    if (!v60)
                    {
                      atomic_store(1u, v58);
                      WTF::fastFree((WTF *)v58, v27);
                    }
                  }
                  if ((v90 & 0x8000000000000) != 0)
                  {
                    v61 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v62 = __ldaxr(v61);
                      v63 = v62 - 1;
                    }
                    while (__stlxr(v63, v61));
                    if (!v63)
                    {
                      atomic_store(1u, v61);
                      WTF::fastFree((WTF *)v61, v27);
                    }
                  }
                  if ((v85 & 0x8000000000000) != 0)
                  {
                    v64 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v65 = __ldaxr(v64);
                      v66 = v65 - 1;
                    }
                    while (__stlxr(v66, v64));
                    if (!v66)
                    {
                      atomic_store(1u, v64);
                      WTF::fastFree((WTF *)v64, v27);
                    }
                  }
                  if ((v80 & 0x8000000000000) != 0)
                  {
                    v67 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v68 = __ldaxr(v67);
                      v69 = v68 - 1;
                    }
                    while (__stlxr(v69, v67));
                    if (!v69)
                    {
                      atomic_store(1u, v67);
                      WTF::fastFree((WTF *)v67, v27);
                    }
                  }
                  break;
              }
            }
            if (v16)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 104))(v12, 1);
          }
        }
      }
    }
  }
}

uint64_t WebCore::BorderPainter::paintNinePieceImage(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  float v12;
  uint64_t v13;
  __int32 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;

  v5 = *(_QWORD *)(*a4 + 8);
  if (!v5)
    return 0;
  v20 = *(_QWORD *)(*a4 + 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, *a1))
    return 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v20 + 208))(v20, *a1, *(float *)(*(_QWORD *)(a3 + 24) + 184));
  if ((_DWORD)result)
  {
    result = 0;
    v11 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v11 + 45) & 8) != 0)
      {
        ++*(_DWORD *)(v11 + 16);
        v12 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8));
        v27 = *a2;
        v25 = WebCore::RenderStyle::imageOutsets(a3, a4);
        v26 = v13;
        WebCore::LayoutRect::expand(&v27, (unsigned int *)&v25);
        LODWORD(v22) = WebCore::snapRectToDevicePixels((int *)&v27, v12);
        HIDWORD(v22) = v14;
        v23 = v15;
        v24 = v16;
        WebCore::LayoutRect::LayoutRect((int *)&v25, (const WebCore::FloatRect *)&v22);
        v21 = v26;
        v22 = WebCore::RenderBoxModelObject::calculateImageIntrinsicDimensions(v11, v20, (int *)&v21, 0);
        v17 = *a1;
        *(float *)&v21 = (float)(int)v22 * 0.015625;
        *((float *)&v21 + 1) = (float)SHIDWORD(v22) * 0.015625;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, float))(*(_QWORD *)v20 + 216))(v20, v17, &v21, *(float *)(*(_QWORD *)(a3 + 24) + 184));
        WebCore::NinePieceImage::paint((float **)a4, *(_QWORD *)(a1[1] + 80), v12, *a1, a3, (int32x2_t *)&v25, (int32x2_t *)&v22, a5);
        v18 = *(_DWORD *)(v11 + 16);
        if (!v18)
        {
          result = 286;
          __break(0xC471u);
          return result;
        }
        *(_DWORD *)(v11 + 16) = v18 - 1;
        return 1;
      }
    }
  }
  return result;
}

int *WebCore::LayoutRect::LayoutRect(int *this, const WebCore::FloatRect *a2)
{
  double v2;
  int v3;
  int v4;
  double v5;
  int v6;
  float v7;
  double v8;
  int v9;
  int v10;
  double v11;
  int v12;

  v2 = *(float *)a2 * 64.0;
  if (v2 > -2147483650.0)
    v3 = (int)v2;
  else
    v3 = 0x80000000;
  if (v2 < 2147483650.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  v5 = *((float *)a2 + 1) * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 >= 2147483650.0)
    v6 = 0x7FFFFFFF;
  *this = v4;
  this[1] = v6;
  v7 = *((float *)a2 + 3);
  v8 = *((float *)a2 + 2) * 64.0;
  if (v8 > -2147483650.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147483650.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFF;
  this[2] = v10;
  v11 = v7 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 0x7FFFFFFF;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = 0x80000000;
  }
  else
  {
    v12 = (int)v11;
  }
  this[3] = v12;
  return this;
}

{
  float v2;
  double v3;
  int v5;
  double v6;
  int v8;
  float v9;
  double v10;
  int v12;
  double v13;
  int v15;
  int v16;
  int v17;

  v2 = *((float *)a2 + 1);
  v3 = *(float *)a2 * 64.0;
  if (v3 >= 2147483650.0 || v3 <= -2147483650.0)
  {
    if (v3 > -2147483650.0)
      v15 = (int)v3;
    else
      v15 = 0x80000000;
    if (v3 < 2147483650.0)
      v5 = v15;
    else
      v5 = 0x7FFFFFFF;
  }
  else
  {
    v5 = (int)v3;
  }
  *this = v5;
  v6 = v2 * 64.0;
  if (v6 >= 2147483650.0 || v6 <= -2147483650.0)
  {
    if (v6 > -2147483650.0)
      v16 = (int)v6;
    else
      v16 = 0x80000000;
    if (v6 < 2147483650.0)
      v8 = v16;
    else
      v8 = 0x7FFFFFFF;
  }
  else
  {
    v8 = (int)v6;
  }
  this[1] = v8;
  v9 = *((float *)a2 + 3);
  v10 = *((float *)a2 + 2) * 64.0;
  if (v10 >= 2147483650.0 || v10 <= -2147483650.0)
  {
    if (v10 > -2147483650.0)
      v17 = (int)v10;
    else
      v17 = 0x80000000;
    if (v10 < 2147483650.0)
      v12 = v17;
    else
      v12 = 0x7FFFFFFF;
  }
  else
  {
    v12 = (int)v10;
  }
  this[2] = v12;
  v13 = v9 * 64.0;
  if (v13 < 2147483650.0 && v13 > -2147483650.0)
    goto LABEL_20;
  if (v13 >= 2147483650.0)
  {
    this[3] = 0x7FFFFFFF;
  }
  else
  {
    if (v13 > -2147483650.0)
    {
LABEL_20:
      this[3] = (int)v13;
      return this;
    }
    this[3] = 0x80000000;
  }
  return this;
}

unint64_t WebCore::RenderBlock::paintRectToClipOutFromBorder(WebCore::RenderBlock *this, const WebCore::LayoutRect *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t FieldsetLegend;
  uint64_t v8;
  double v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  if ((*((_BYTE *)this + 45) & 1) == 0
    && (v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) != 0
    && (*(_WORD *)(v2 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24)
    && (WebCore::RenderElement::isSkippedContentRoot(this) & 1) == 0
    && (FieldsetLegend = WebCore::RenderBlock::findFieldsetLegend((uint64_t)this, 0)) != 0)
  {
    v8 = FieldsetLegend;
    v9 = WebCore::RenderStyle::borderBeforeWidth((WebCore::RenderBlock *)((char *)this + 80)) * 64.0;
    if (v9 >= 2147483650.0)
    {
      v10 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v10 = 0x80000000;
    }
    else
    {
      v10 = (int)v9;
    }
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        v4 = *(_DWORD *)a2;
        goto LABEL_26;
      case 3:
      case 5:
        v20 = *((_DWORD *)a2 + 2);
        v12 = __OFADD__(*(_DWORD *)a2, v20);
        v21 = *(_DWORD *)a2 + v20;
        if (v12)
          v21 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        v12 = __OFSUB__(v21, v10);
        v22 = v21 - v10;
        v4 = (v21 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v4 = v22;
LABEL_26:
        v17 = *((_DWORD *)a2 + 1);
        v18 = *(_DWORD *)(v8 + 156);
        v12 = __OFADD__(v17, v18);
        v19 = v17 + v18;
        LODWORD(v3) = (v17 >> 31) + 0x7FFFFFFF;
        if (v12)
          v3 = v3;
        else
          v3 = v19;
        break;
      default:
        v11 = *(_DWORD *)(v8 + 152);
        v3 = *((unsigned int *)a2 + 1);
        v12 = __OFADD__(*(_DWORD *)a2, v11);
        v4 = *(_DWORD *)a2 + v11;
        if (v12)
          v4 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if (((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1 <= 4)
        {
          v13 = *((_DWORD *)a2 + 3);
          v12 = __OFADD__((_DWORD)v3, v13);
          v14 = v3 + v13;
          v15 = (v3 >> 31) + 0x7FFFFFFF;
          if (!v12)
            v15 = v14;
          v12 = __OFSUB__(v15, v10);
          v16 = v15 - v10;
          LODWORD(v3) = (v15 >> 31) + 0x7FFFFFFF;
          if (v12)
            v3 = v3;
          else
            v3 = v16;
        }
        break;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  return v4 | (unint64_t)(v3 << 32);
}

uint64_t WebCore::StyleImage::canRender(WebCore::StyleImage *this, const WebCore::RenderElement *a2, float a3)
{
  return 1;
}

uint64_t WebCore::StyleGeneratedImage::setContainerContextForRenderer(uint64_t this, const WebCore::RenderElement *a2, const WebCore::FloatSize *a3, float a4)
{
  *(_QWORD *)(this + 28) = *(_QWORD *)a3;
  return this;
}

float WebCore::Document::deviceScaleFactor(WebCore::Document *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  float *v5;
  int v6;
  WTF *v8;
  void *v9;

  v1 = *((_QWORD *)this + 66);
  v2 = 1.0;
  if (!v1)
    return v2;
  v3 = *(_QWORD *)(v1 + 8);
  if (!v3)
    return v2;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
    return v2;
  v5 = *(float **)(v4 + 8);
  if (!v5)
    return v2;
  v6 = (*(_DWORD *)v5)++;
  v2 = v5[91];
  if (v6)
  {
    *(_DWORD *)v5 = v6;
    return v2;
  }
  WebCore::Page::~Page((WebCore::Page *)v5);
  WTF::fastFree(v8, v9);
  return v2;
}

unint64_t WebCore::RenderStyle::imageOutsets(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  double v5;
  int v6;
  int v7;
  float v8;
  double v9;
  unsigned int v10;
  double v11;
  float v12;
  double v13;
  int v14;
  float v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v20;
  uint64_t v21;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v4 = 0.0;
  if ((*(_BYTE *)(v3 + 172) & 0xE) != 0)
  {
    v21 = *(_QWORD *)(v3 + 200);
    if (*(_BYTE *)(v21 + 5) && *(_BYTE *)(v21 + 52) == 4)
    {
      if (*(_BYTE *)(v21 + 54))
        v4 = *(float *)(v21 + 48);
      else
        v4 = (float)*(int *)(v21 + 48);
    }
    else
    {
      v4 = *(float *)(v3 + 168);
    }
  }
  v5 = v4 * 64.0;
  if (v5 > -2147483650.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147483650.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v8 = *(float *)(v2 + 80);
  if (!*(_BYTE *)(v2 + 86))
    v8 = (float)SLODWORD(v8);
  if (*(_BYTE *)(v2 + 84) == 2)
  {
    v9 = (float)((float)((float)v7 * 0.015625) * v8) * 64.0;
    if (v9 < 2147483650.0)
    {
      if (v9 <= -2147483650.0)
        v10 = 0x80000000;
      else
        v10 = (int)v9;
      goto LABEL_18;
    }
LABEL_37:
    v10 = 0x7FFFFFFF;
    goto LABEL_18;
  }
  v11 = v8 * 64.0;
  if (v11 >= 2147483650.0)
    goto LABEL_37;
  if (v11 > -2147483650.0)
    v10 = (int)v11;
  else
    v10 = 0x80000000;
LABEL_18:
  v12 = 0.0;
  if ((*(_BYTE *)(v3 + 148) & 0xE) != 0)
  {
    v20 = *(_QWORD *)(v3 + 200);
    if (*(_BYTE *)(v20 + 5) && *(_BYTE *)(v20 + 60) == 4)
    {
      if (*(_BYTE *)(v20 + 62))
        v12 = *(float *)(v20 + 56);
      else
        v12 = (float)*(int *)(v20 + 56);
    }
    else
    {
      v12 = *(float *)(v3 + 144);
    }
  }
  v13 = v12 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = 0x80000000;
  }
  else
  {
    v14 = (int)v13;
  }
  v15 = *(float *)(v2 + 88);
  if (!*(_BYTE *)(v2 + 94))
    v15 = (float)SLODWORD(v15);
  if (*(_BYTE *)(v2 + 92) == 2)
  {
    v16 = (float)((float)((float)v14 * 0.015625) * v15) * 64.0;
    if (v16 < 2147483650.0)
    {
      if (v16 <= -2147483650.0)
        v17 = 0x80000000;
      else
        v17 = (int)v16;
      return v10 | (unint64_t)(v17 << 32);
    }
LABEL_39:
    v17 = 0x7FFFFFFFLL;
    return v10 | (unint64_t)(v17 << 32);
  }
  v18 = v15 * 64.0;
  if (v18 >= 2147483650.0)
    goto LABEL_39;
  if (v18 > -2147483650.0)
    v17 = (int)v18;
  else
    v17 = 0x80000000;
  return v10 | (unint64_t)(v17 << 32);
}

uint64_t WebCore::StyleImage::isLoaded(WebCore::StyleImage *this, const WebCore::RenderElement *a2)
{
  return 1;
}

_DWORD *WebCore::LayoutRect::expand(_DWORD *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;

  v2 = a2[3];
  if (v2 == 0x80000000)
    v3 = 0x7FFFFFFF;
  else
    v3 = -v2;
  if (*a2 == 0x80000000)
    v4 = 0x7FFFFFFF;
  else
    v4 = -*a2;
  v5 = result[1];
  v6 = __OFADD__(*result, v3);
  v7 = *result + v3;
  if (v6)
    v7 = (*result >> 31) + 0x7FFFFFFF;
  v6 = __OFADD__(v5, v4);
  v8 = v5 + v4;
  if (v6)
    v8 = (v5 >> 31) + 0x7FFFFFFF;
  *result = v7;
  result[1] = v8;
  v10 = *a2;
  v9 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v6 = __OFADD__(v11, v9);
  v13 = v11 + v9;
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (v6)
    v13 = v14;
  v6 = __OFADD__(v10, v12);
  v15 = v10 + v12;
  v16 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v6)
    v16 = v15;
  v17 = result[2];
  v18 = result[3];
  v6 = __OFADD__(v17, v13);
  v19 = v17 + v13;
  v20 = (v17 >> 31) + 0x7FFFFFFF;
  if (v6)
    v19 = v20;
  v6 = __OFADD__(v18, v16);
  v21 = v18 + v16;
  if (v6)
    v21 = (v18 >> 31) + 0x7FFFFFFF;
  result[2] = v19;
  result[3] = v21;
  return result;
}

unsigned int *WebCore::borderEdges@<X0>(WebCore *this@<X0>, const WebCore::RenderStyle *a2@<X1>, float a3@<S0>, char a4@<W2>, uint64_t a5@<X8>)
{
  __int16 v9;
  char v10;
  uint64_t v11;
  char v12;
  float v13;
  int v14;
  char v15;
  void *v16;
  unint64_t v17;
  int v18;
  double v19;
  int v20;
  uint64_t v21;
  char v22;
  float v23;
  void *v24;
  unint64_t v25;
  int v26;
  double v27;
  int v28;
  uint64_t v29;
  char v30;
  float v31;
  char v32;
  void *v33;
  unint64_t v34;
  int v35;
  double v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  float v41;
  BOOL v42;
  unsigned int *result;
  void *v44;
  unint64_t v45;
  int v46;
  double v47;
  char v48;
  int v49;
  float v50;
  float v51;
  float v52;
  char v53;
  char v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  double v75;
  float v76;
  double v77;
  float v78;
  double v79;
  float v80;
  double v81;
  float v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  char v94;
  BOOL v95;
  char v96;
  int v97;
  unint64_t v98;
  BOOL v99;
  char v100;
  int v101;
  unint64_t v102;
  char v103;
  BOOL v104;
  char v105;
  unint64_t v106;

  v9 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
  v10 = 2;
  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_3;
    case 3:
    case 5:
      LOBYTE(v9) = 3;
      goto LABEL_3;
    case 4:
      goto LABEL_4;
    default:
      LOBYTE(v9) = 0;
LABEL_3:
      v10 = v9;
LABEL_4:
      v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      v12 = *(_BYTE *)(v11 + 172);
      v13 = 0.0;
      if ((v12 & 0xE) != 0)
      {
        v66 = *(_QWORD *)(v11 + 200);
        if (*(_BYTE *)(v66 + 5) && *(_BYTE *)(v66 + 52) == 4)
        {
          if (*(_BYTE *)(v66 + 54))
            v13 = *(float *)(v66 + 48);
          else
            v13 = (float)*(int *)(v66 + 48);
        }
        else
        {
          v13 = *(float *)(v11 + 168);
        }
      }
      v14 = v10 & 6;
      if (*(_DWORD *)(v11 + 160) || (v55 = *(_QWORD *)(v11 + 152), (v55 & 0x4000000000000) == 0))
      {
        v104 = 0;
      }
      else
      {
        if ((v55 & 0x8000000000000) != 0)
          v56 = *(float *)((v55 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
        else
          v56 = *(_QWORD *)(v11 + 152) != 0;
        v104 = !v56;
      }
      v105 = (char)a2;
      if (v14 == 2)
        v15 = (char)a2;
      else
        v15 = 1;
      v103 = v15;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this, 382, 0, &v106);
      v17 = v106;
      if ((v106 & 0x8000000000000) != 0)
      {
        v67 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 + 1, v67));
      }
      v18 = v12 & 0xF;
      v19 = v13 * 64.0;
      if (v19 >= 2147483650.0)
      {
        v20 = 0x7FFFFFFF;
      }
      else if (v19 <= -2147483650.0)
      {
        v20 = 0x80000000;
      }
      else
      {
        v20 = (int)v19;
      }
      v101 = v20;
      v102 = v17;
      if (v18 == 9)
      {
        v75 = (float)(3.0 / a3) * 64.0;
        if (v75 >= 2147483650.0)
        {
          v76 = 33554000.0;
        }
        else if (v75 <= -2147483650.0)
        {
          v76 = -33554000.0;
        }
        else
        {
          v76 = (float)(int)v75 * 0.015625;
        }
        if (v76 > v13)
          LOBYTE(v18) = 8;
        else
          LOBYTE(v18) = 9;
      }
      v100 = v18;
      if ((v106 & 0x8000000000000) != 0)
      {
        v83 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v84 = __ldaxr(v83);
          v85 = v84 - 1;
        }
        while (__stlxr(v85, v83));
        if (!v85)
        {
          atomic_store(1u, v83);
          WTF::fastFree((WTF *)v83, v16);
        }
      }
      v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      v22 = *(_BYTE *)(v21 + 148);
      v23 = 0.0;
      if ((v22 & 0xE) != 0)
      {
        v64 = *(_QWORD *)(v21 + 200);
        if (*(_BYTE *)(v64 + 5) && *(_BYTE *)(v64 + 60) == 4)
        {
          if (*(_BYTE *)(v64 + 62))
            v23 = *(float *)(v64 + 56);
          else
            v23 = (float)*(int *)(v64 + 56);
        }
        else
        {
          v23 = *(float *)(v21 + 144);
        }
      }
      if (*(_DWORD *)(v21 + 136) || (v57 = *(_QWORD *)(v21 + 128), (v57 & 0x4000000000000) == 0))
      {
        v99 = 0;
      }
      else
      {
        if ((v57 & 0x8000000000000) != 0)
          v58 = *(float *)((v57 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
        else
          v58 = v57 != 0;
        v99 = !v58;
      }
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this, 377, 0, &v106);
      v25 = v106;
      if ((v106 & 0x8000000000000) != 0)
      {
        v69 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 + 1, v69));
      }
      v26 = v22 & 0xF;
      v27 = v23 * 64.0;
      if (v27 >= 2147483650.0)
      {
        v28 = 0x7FFFFFFF;
      }
      else if (v27 <= -2147483650.0)
      {
        v28 = 0x80000000;
      }
      else
      {
        v28 = (int)v27;
      }
      v97 = v28;
      v98 = v25;
      if (v26 == 9)
      {
        v77 = (float)(3.0 / a3) * 64.0;
        if (v77 >= 2147483650.0)
        {
          v78 = 33554000.0;
        }
        else if (v77 <= -2147483650.0)
        {
          v78 = -33554000.0;
        }
        else
        {
          v78 = (float)(int)v77 * 0.015625;
        }
        if (v78 > v23)
          LOBYTE(v26) = 8;
        else
          LOBYTE(v26) = 9;
      }
      v96 = v26;
      if ((v106 & 0x8000000000000) != 0)
      {
        v86 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v86);
          WTF::fastFree((WTF *)v86, v24);
        }
      }
      v29 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      v30 = *(_BYTE *)(v29 + 196);
      v31 = 0.0;
      if ((v30 & 0xE) != 0)
      {
        v63 = *(_QWORD *)(v29 + 200);
        if (*(_BYTE *)(v63 + 5) && *(_BYTE *)(v63 + 68) == 4)
        {
          if (*(_BYTE *)(v63 + 70))
            v31 = *(float *)(v63 + 64);
          else
            v31 = (float)*(int *)(v63 + 64);
        }
        else
        {
          v31 = *(float *)(v29 + 192);
        }
      }
      if (*(_DWORD *)(v29 + 184) || (v59 = *(_QWORD *)(v29 + 176), (v59 & 0x4000000000000) == 0))
      {
        v95 = 0;
      }
      else
      {
        if ((v59 & 0x8000000000000) != 0)
          v60 = *(float *)((v59 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
        else
          v60 = v59 != 0;
        v95 = !v60;
      }
      if (v14 == 2)
        v32 = a4;
      else
        v32 = 1;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this, 361, 0, &v106);
      v34 = v106;
      if ((v106 & 0x8000000000000) != 0)
      {
        v71 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 + 1, v71));
      }
      v35 = v30 & 0xF;
      v36 = v31 * 64.0;
      v94 = v32;
      v37 = v14;
      if (v36 >= 2147483650.0)
      {
        v38 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147483650.0)
      {
        v38 = 0x80000000;
      }
      else
      {
        v38 = (int)v36;
      }
      if (v35 == 9)
      {
        v79 = (float)(3.0 / a3) * 64.0;
        if (v79 >= 2147483650.0)
        {
          v80 = 33554000.0;
        }
        else if (v79 <= -2147483650.0)
        {
          v80 = -33554000.0;
        }
        else
        {
          v80 = (float)(int)v79 * 0.015625;
        }
        if (v80 > v31)
          LOBYTE(v35) = 8;
        else
          LOBYTE(v35) = 9;
      }
      if ((v106 & 0x8000000000000) != 0)
      {
        v89 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          atomic_store(1u, v89);
          WTF::fastFree((WTF *)v89, v33);
        }
      }
      v39 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      v40 = *(_BYTE *)(v39 + 124);
      v41 = 0.0;
      if ((v40 & 0xE) != 0)
      {
        v65 = *(_QWORD *)(v39 + 200);
        if (*(_BYTE *)(v65 + 5) && *(_BYTE *)(v65 + 76) == 4)
        {
          if (*(_BYTE *)(v65 + 78))
            v41 = *(float *)(v65 + 72);
          else
            v41 = (float)*(int *)(v65 + 72);
        }
        else
        {
          v41 = *(float *)(v39 + 120);
        }
      }
      if (*(_DWORD *)(v39 + 112) || (v61 = *(_QWORD *)(v39 + 104), (v61 & 0x4000000000000) == 0))
      {
        v42 = 0;
      }
      else
      {
        if ((v61 & 0x8000000000000) != 0)
          v62 = *(float *)((v61 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
        else
          v62 = v61 != 0;
        v42 = !v62;
      }
      result = WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this, 374, 0, &v106);
      v45 = v106;
      if ((v106 & 0x8000000000000) != 0)
      {
        v73 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
      }
      v46 = v40 & 0xF;
      v47 = v41 * 64.0;
      v48 = v105;
      if (v47 >= 2147483650.0)
      {
        v49 = 0x7FFFFFFF;
      }
      else if (v47 <= -2147483650.0)
      {
        v49 = 0x80000000;
      }
      else
      {
        v49 = (int)v47;
      }
      if (v46 == 9)
      {
        v81 = (float)(3.0 / a3) * 64.0;
        if (v81 >= 2147483650.0)
        {
          v82 = 33554000.0;
        }
        else if (v81 <= -2147483650.0)
        {
          v82 = -33554000.0;
        }
        else
        {
          v82 = (float)(int)v81 * 0.015625;
        }
        if (v82 > v41)
          LOBYTE(v46) = 8;
        else
          LOBYTE(v46) = 9;
        v48 = v105;
      }
      if ((v106 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v92 = __ldaxr(result);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, result));
        v48 = v105;
        if (!v93)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v44);
          v48 = v105;
        }
      }
      v50 = floorf(v41 * a3);
      v51 = floorf(v31 * a3) / a3;
      v52 = floorf(v23 * a3);
      if (v37 == 2)
        v53 = 1;
      else
        v53 = a4;
      *(_QWORD *)a5 = v102;
      *(_DWORD *)(a5 + 8) = v101;
      *(float *)(a5 + 12) = floorf(v13 * a3) / a3;
      *(float *)(a5 + 16) = a3;
      *(_BYTE *)(a5 + 20) = v100;
      *(_BYTE *)(a5 + 21) = v104;
      *(_BYTE *)(a5 + 22) = v103;
      *(_QWORD *)(a5 + 24) = v98;
      *(_DWORD *)(a5 + 32) = v97;
      *(float *)(a5 + 36) = v52 / a3;
      *(float *)(a5 + 40) = a3;
      *(_BYTE *)(a5 + 44) = v96;
      *(_BYTE *)(a5 + 45) = v99;
      *(_BYTE *)(a5 + 46) = v53;
      *(_QWORD *)(a5 + 48) = v34;
      *(_DWORD *)(a5 + 56) = v38;
      *(float *)(a5 + 60) = v51;
      *(float *)(a5 + 64) = a3;
      *(_BYTE *)(a5 + 68) = v35;
      *(_BYTE *)(a5 + 69) = v95;
      *(_BYTE *)(a5 + 70) = v94;
      *(_QWORD *)(a5 + 72) = v45;
      *(_DWORD *)(a5 + 80) = v49;
      *(float *)(a5 + 84) = v50 / a3;
      *(float *)(a5 + 88) = a3;
      *(_BYTE *)(a5 + 92) = v46;
      if (v37 == 2)
        v54 = 1;
      else
        v54 = v48;
      *(_BYTE *)(a5 + 93) = v42;
      *(_BYTE *)(a5 + 94) = v54;
      return result;
  }
}

void WebCore::BorderPainter::paintSides(uint64_t a1, int32x4_t *a2)
{
  WebCore::GraphicsContext *v2;
  const WebCore::LayoutRect *v5;
  WebCore::GraphicsContext *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  const WebCore::Color *v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  WebCore::RoundedRect *v28;
  uint64_t v29;
  float *v30;
  int v31;
  __int32 v32;
  __int32 v33;
  __int32 v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  __int32 v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  _BOOL4 v48;
  __n128 v49;
  char v50;
  __int32 v51;
  unsigned __int32 v52;
  int v53;
  char v54;
  int v55;
  unsigned __int32 v56;
  __int32 v57;
  int v58;
  uint64_t v59;
  WebCore::BorderDataRadii *v60;
  __n128 v61;
  const WebCore::Color *v62;
  char v63;
  int v64;
  WTF *v65;
  void *v66;
  BOOL v67;
  char v68;
  _BOOL4 isZero;
  _BOOL4 v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  int32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  const WebCore::Color *v107;
  const WebCore::Color *v108;
  unsigned int v109;
  WebCore::GraphicsContext *v110;
  uint64_t v111;
  float32x4_t v112;
  uint64_t v113;
  _BYTE v114[64];
  char v115;
  _BYTE v116[64];
  char v117;
  _DWORD v118[4];
  uint64_t v119;
  _DWORD v120[4];
  _BYTE v121[32];
  int32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  double v126;
  double v127;
  double v128;
  double v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v5 = *(const WebCore::LayoutRect **)(a1 + 8);
  v6 = (WebCore::GraphicsContext *)*((_QWORD *)v5 + 10);
  if (WebCore::RoundedRect::contains((WebCore::RoundedRect *)&a2[3], v5))
    return;
  v110 = v6;
  v111 = a1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[13].i64[1];
  v13 = 4;
  v14 = 1;
  v15 = 1;
  v16 = WebCore::allBoxSides;
  do
  {
    v17 = WebCore::allBoxSides[v7];
    if (v17 >= 4)
      goto LABEL_179;
    v18 = v12 + 24 * WebCore::allBoxSides[v7];
    if (*(_BYTE *)(v18 + 22) && *(float *)(v12 + 24 * WebCore::allBoxSides[v7] + 12) != 0.0)
    {
      v2 = (WebCore::GraphicsContext *)*(unsigned __int8 *)(v12 + 24 * WebCore::allBoxSides[v7] + 20);
      if (v2 >= 2)
      {
        v19 = 1 << v17;
        if (*(_BYTE *)(v12 + 24 * WebCore::allBoxSides[v7] + 21))
          LOBYTE(v19) = 0;
        v11 |= v19;
        if (!*(_BYTE *)(v12 + 24 * WebCore::allBoxSides[v7] + 21))
        {
          v20 = *(_QWORD *)v18;
          if (!v9)
          {
            v22 = v20 & 0x8000000000000;
            v10 = (const WebCore::Color *)WebCore::allBoxSides[v7];
            goto LABEL_23;
          }
          v21 = *(_QWORD *)(v12 + 24 * v10);
          v22 = v20 & 0x8000000000000;
          if (((v20 | v21) & 0x8000000000000) != 0)
          {
            v107 = v10;
            v103 = v15;
            v105 = v8;
            v67 = WebCore::outOfLineComponentsEqualIgnoringSemanticColor(*(_QWORD *)v18, v21, v10);
            v15 = v103;
            v8 = v105;
            v16 = WebCore::allBoxSides;
            v10 = v107;
            if (v67)
              goto LABEL_23;
          }
          else if ((_DWORD)v20 == (_DWORD)v21 && ((v21 ^ v20) & 0xFE000000000000) == 0)
          {
            goto LABEL_17;
          }
          v15 = 0;
LABEL_23:
          if (v22)
          {
            if (*(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
              goto LABEL_25;
            goto LABEL_18;
          }
LABEL_17:
          if ((_BYTE)v20 != 0xFF)
LABEL_25:
            v8 = 1;
LABEL_18:
          v14 = ((_DWORD)v2 == 9) & v14;
          v9 = 1;
          goto LABEL_19;
        }
      }
      v15 = 0;
    }
    --v13;
LABEL_19:
    ++v7;
  }
  while (v7 != 4);
  v24 = v111;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v111 + 24) + 8) + 40) + 8) + 528);
  v26 = 1.0;
  if (v25)
  {
    v27 = *(_QWORD *)(v25 + 8);
    v28 = (WebCore::RoundedRect *)&a2[3];
    v2 = v110;
    if (v27)
    {
      v29 = *(_QWORD *)(v27 + 24);
      if (v29)
      {
        v30 = *(float **)(v29 + 8);
        if (v30)
        {
          v31 = (*(_DWORD *)v30)++;
          v26 = v30[91];
          if (v31)
          {
            *(_DWORD *)v30 = v31;
          }
          else
          {
            v106 = v9;
            v62 = v10;
            v63 = v8;
            v64 = v15;
            WebCore::Page::~Page((uint64_t)v30);
            WTF::fastFree(v65, v66);
            v15 = v64;
            LOBYTE(v8) = v63;
            v16 = WebCore::allBoxSides;
            v24 = v111;
            v10 = v62;
            v9 = v106;
          }
        }
      }
    }
  }
  else
  {
    v28 = (WebCore::RoundedRect *)&a2[3];
    v2 = v110;
  }
  if ((((a2[14].i8[0] != 0) | v14) & v15 & 1) == 0)
    goto LABEL_59;
  v32 = a2[4].i32[0];
  if (v32 < 0)
    goto LABEL_59;
  v33 = a2[4].i32[1];
  if (v33 < 0)
    goto LABEL_59;
  v34 = a2[5].i32[0];
  if (v34 < 0)
    goto LABEL_59;
  v35 = a2[5].i32[1];
  if (v35 < 0)
    goto LABEL_59;
  v36 = a2[4].i32[2];
  if (v36 < 0)
    goto LABEL_59;
  v37 = a2[4].i32[3];
  if (v37 < 0)
    goto LABEL_59;
  v38 = a2[5].i32[2];
  if (v38 < 0)
    goto LABEL_59;
  v39 = a2[5].i32[3];
  if (v39 < 0)
    goto LABEL_59;
  v40 = __OFADD__(v32, v36);
  v41 = v32 + v36;
  if (v40)
    v41 = 0x7FFFFFFF;
  v42 = a2[3].i32[2];
  if (v41 > v42)
    goto LABEL_59;
  v40 = __OFADD__(v34, v38);
  v43 = v34 + v38;
  if (v40)
    v43 = 0x7FFFFFFF;
  if (v43 > v42)
    goto LABEL_59;
  v40 = __OFADD__(v33, v35);
  v44 = v33 + v35;
  if (v40)
    v44 = 0x7FFFFFFF;
  v45 = a2[3].i32[3];
  if (v44 > v45)
    goto LABEL_59;
  v40 = __OFADD__(v37, v39);
  v46 = v37 + v39;
  if (v40)
    v46 = 0x7FFFFFFF;
  if (v46 > v45)
    goto LABEL_59;
  if (v13 == 4)
  {
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(a2[1], a2[1]))) & 1) != 0
      || a2[2].i64[0]
      || a2[2].i32[2]
      || (a2[2].i32[3] != 0) | v8 & 1)
    {
      if (a2[14].i8[0])
        goto LABEL_80;
      v108 = v10;
      v68 = v8;
      isZero = WebCore::RoundedRectRadii::isZero((WebCore::RoundedRectRadii *)&a2[1]);
      LOBYTE(v8) = v68;
      v24 = v111;
      if (isZero)
      {
        v70 = WebCore::RoundedRectRadii::isZero((WebCore::RoundedRectRadii *)&a2[4]);
        LOBYTE(v8) = v68;
        v10 = v108;
        if (v70)
        {
LABEL_80:
          v11 = v10;
          v130 = 0;
          WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)a2, v26, (uint64_t)&v124);
          if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)&v125) || a2[14].i32[1] == 2)
            WebCore::Path::addRect((WebCore::Path *)&v126, (const WebCore::FloatRect *)&v124);
          else
            WebCore::Path::addRoundedRect((WebCore::Path *)&v126, (WebCore::FloatRect *)&v124, 0);
          if ((v14 & 1) != 0)
          {
            v78 = 0;
            v122 = *a2;
            v123 = v122;
            v113 = a2[13].i64[1];
            v79 = v122.u32[3];
            v109 = v9;
            v9 = v122.u32[2];
            v80 = v122.u32[3];
            v81 = v122.u32[1];
            v101 = v122.i32[0];
            v102 = v122.i32[0];
            v104 = *(uint64_t *)((char *)v122.i64 + 4);
            while (2)
            {
              v2 = (WebCore::GraphicsContext *)WebCore::allBoxSides[v78];
              v120[0] = 0;
              v118[0] = 0;
              if (v2 >= 4)
                goto LABEL_179;
              WebCore::BorderEdge::getDoubleBorderStripeWidths(v113 + 24 * v2, (WebCore::LayoutUnit *)v120, (WebCore::LayoutUnit *)v118);
              switch((int)v2)
              {
                case 0:
                  LODWORD(v82) = v81 + v118[0];
                  if (__OFADD__((_DWORD)v81, v118[0]))
                    v82 = (v81 >> 31) + 0x7FFFFFFF;
                  else
                    v82 = v82;
                  v83 = v82 - v81;
                  if (__OFSUB__((_DWORD)v82, (_DWORD)v81))
                    v83 = (v82 >> 31) + 0x7FFFFFFF;
                  v123.i32[1] = v82;
                  v40 = __OFSUB__(v79, v83);
                  v84 = v79 - v83;
                  if (v40)
                    v84 = (v79 >> 31) + 0x7FFFFFFF;
                  v79 = v84 & ~(v84 >> 31);
                  v123.i32[3] = v79;
                  v85 = v104 + v120[0];
                  if (__OFADD__((_DWORD)v104, v120[0]))
                    v85 = (v104 >> 31) + 0x7FFFFFFF;
                  v86 = v85 - v104;
                  if (__OFSUB__(v85, (_DWORD)v104))
                    v86 = (v85 >> 31) + 0x7FFFFFFF;
                  v40 = __OFSUB__(v80, v86);
                  v87 = v80 - v86;
                  if (v40)
                    v87 = (v80 >> 31) + 0x7FFFFFFF;
                  v80 = v87 & ~(v87 >> 31);
                  v122.i32[1] = v85;
                  v122.i32[3] = v80;
                  LODWORD(v104) = v85;
                  goto LABEL_175;
                case 1:
                  v94 = HIDWORD(v104) - v118[0];
                  if (__OFSUB__(HIDWORD(v104), v118[0]))
                    v94 = (HIDWORD(v104) >> 31) + 0x7FFFFFFF;
                  HIDWORD(v104) = v94;
                  v123.i32[2] = v94;
                  if (__OFSUB__(v9, v120[0]))
                    v9 = (v9 >> 31) + 0x7FFFFFFF;
                  else
                    v9 -= v120[0];
                  v122.i32[2] = v9;
                  goto LABEL_174;
                case 2:
                  if (__OFSUB__(v79, v118[0]))
                    v79 = (v79 >> 31) + 0x7FFFFFFF;
                  else
                    v79 -= v118[0];
                  v123.i32[3] = v79;
                  if (__OFSUB__(v80, v120[0]))
                    v80 = (v80 >> 31) + 0x7FFFFFFF;
                  else
                    v80 -= v120[0];
                  v122.i32[3] = v80;
                  goto LABEL_174;
                case 3:
                  v88 = (v101 >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__(v101, v118[0]))
                    v88 = v101 + v118[0];
                  v89 = v88 - v101;
                  if (__OFSUB__(v88, v101))
                    v89 = (v88 >> 31) + 0x7FFFFFFF;
                  v123.i32[0] = v88;
                  v40 = __OFSUB__(HIDWORD(v104), v89);
                  v90 = HIDWORD(v104) - v89;
                  if (v40)
                    v90 = (HIDWORD(v104) >> 31) + 0x7FFFFFFF;
                  HIDWORD(v104) = v90 & ~(v90 >> 31);
                  v123.i32[2] = HIDWORD(v104);
                  v91 = (v102 >> 31) + 0x7FFFFFFF;
                  if (!__OFADD__(v102, v120[0]))
                    v91 = v102 + v120[0];
                  v92 = v91 - v102;
                  if (__OFSUB__(v91, v102))
                    v92 = (v91 >> 31) + 0x7FFFFFFF;
                  v40 = __OFSUB__(v9, v92);
                  v93 = v9 - v92;
                  if (v40)
                    v93 = (v9 >> 31) + 0x7FFFFFFF;
                  v9 = v93 & ~(v93 >> 31);
                  v122.i32[0] = v91;
                  v122.i32[2] = v9;
                  v82 = v81;
                  v101 = v88;
                  v102 = v91;
                  goto LABEL_175;
                default:
LABEL_174:
                  v82 = v81;
LABEL_175:
                  ++v78;
                  v81 = v82;
                  if (v78 != 4)
                    continue;
                  WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)a2, v26, (uint64_t)v120);
                  v120[0] = WebCore::snapRectToDevicePixels(v122.i32, v26);
                  v120[1] = v95;
                  v120[2] = v96;
                  v120[3] = v97;
                  if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)v121)
                    || a2[14].i32[1] == 2)
                  {
                    WebCore::Path::addRect((WebCore::Path *)&v126, (const WebCore::FloatRect *)v120);
                  }
                  else
                  {
                    WebCore::Path::addRoundedRect((WebCore::Path *)&v126, (WebCore::FloatRect *)v120, 0);
                  }
                  WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&a2[3], v26, (uint64_t)v118);
                  v118[0] = WebCore::snapRectToDevicePixels(v123.i32, v26);
                  v118[1] = v98;
                  v118[2] = v99;
                  v118[3] = v100;
                  if (WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)&v119)
                    || a2[14].i32[1] == 2)
                  {
                    WebCore::Path::addRect((WebCore::Path *)&v126, (const WebCore::FloatRect *)v118);
                  }
                  else
                  {
                    WebCore::Path::addRoundedRect((WebCore::Path *)&v126, (WebCore::FloatRect *)v118, 0);
                  }
                  v28 = (WebCore::RoundedRect *)&a2[3];
                  v2 = v110;
                  v9 = v109;
                  break;
              }
              break;
            }
          }
          WebCore::RoundedRect::pixelSnappedRoundedRectForPainting(v28, v26, (uint64_t)v120);
          if (!WebCore::FloatRoundedRect::Radii::isZero((WebCore::FloatRoundedRect::Radii *)v121))
          {
            v61.n128_f64[0] = WebCore::Path::addRoundedRect((WebCore::Path *)&v126, (WebCore::FloatRect *)v120, 0);
            goto LABEL_86;
          }
          goto LABEL_180;
        }
      }
    }
LABEL_59:
    v47 = v8;
    if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(a2[1]), (int16x8_t)vceqzq_s32(a2[2]))))) & 1) != 0)
    {
      v48 = a2[14].i8[10] == 0;
      if (!a2[14].i8[10])
        (*(void (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::Color *))(*(_QWORD *)v2 + 96))(v2, 1, v10);
      if (a2[14].i32[1] != 2)
      {
        WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)a2, v26, (uint64_t)&v126);
        (*(void (**)(WebCore::GraphicsContext *, double *))(*(_QWORD *)v2 + 464))(v2, &v126);
      }
      if (WebCore::RoundedRect::isRenderable(v28))
      {
        WebCore::RoundedRect::pixelSnappedRoundedRectForPainting(v28, v26, (uint64_t)&v126);
        (*(void (**)(WebCore::GraphicsContext *, double *))(*(_QWORD *)v2 + 488))(v2, &v126);
      }
    }
    else
    {
      v48 = 0;
    }
    (*(void (**)(double *__return_ptr, WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v2 + 672))(&v126, v2, 1);
    v49.n128_f64[0] = v126;
    if (v126 == 1.0 && (v49.n128_f64[0] = v127, v127 == 0.0) && (v49.n128_f64[0] = v128, v128 == 0.0))
    {
      v49.n128_f64[0] = v129;
      v50 = v129 != 1.0 && v129 != -1.0 || v13 == 1;
      v2 = v110;
      v24 = v111;
    }
    else
    {
      v50 = 1;
    }
    v51 = a2[6].i32[0];
    v52 = a2[3].u32[0];
    v40 = __OFSUB__(v52, v51);
    v53 = v52 - v51;
    v54 = v47;
    if (v40)
      v53 = (v52 >> 31) + 0x7FFFFFFF;
    v55 = v53 / 64;
    v56 = a2[3].u32[1];
    v57 = a2[6].i32[1];
    v40 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v40)
      v58 = (v56 >> 31) + 0x7FFFFFFF;
    LODWORD(v126) = v55;
    HIDWORD(v126) = v58 / 64;
    v59 = a2[13].i64[1];
    if ((v54 & 1) != 0)
    {
      v116[0] = 0;
      v117 = 0;
      if (a2[13].i8[0])
      {
        WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v116, (uint64_t)a2[9].i64);
        v117 = 1;
      }
      v60 = (WebCore::BorderDataRadii *)v116;
      WebCore::BorderPainter::paintTranslucentBorderSides(v111, a2, (uint64_t)a2[6].i64, (uint64_t)&v126, v59, v11, (uint64_t)v116, a2[14].i32[1], v49, a2[14].i16[4], HIBYTE(a2[14].i16[4]), v50, a2[14].i8[11]);
      v2 = v110;
      if (!v117)
        goto LABEL_72;
    }
    else
    {
      v114[0] = 0;
      v115 = 0;
      if (a2[13].i8[0])
      {
        WebCore::BorderDataRadii::BorderDataRadii((WebCore::Length *)v114, (uint64_t)a2[9].i64);
        v115 = 1;
      }
      v60 = (WebCore::BorderDataRadii *)v114;
      WebCore::BorderPainter::paintBorderSides(v24, a2, (uint64_t)a2[6].i64, (uint64_t)&v126, v59, v11, (uint64_t)v114, a2[14].i32[1], a2[14].i16[4], HIBYTE(a2[14].i16[4]), v50, a2[14].i8[11], 0);
      if (!v115)
        goto LABEL_72;
    }
    WebCore::BorderDataRadii::~BorderDataRadii(v60);
LABEL_72:
    if (v48)
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v2 + 104))(v2, 1);
    return;
  }
  if (!a2[14].i8[0]
    || (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(a2[1], a2[1]))) & 1) != 0
    || a2[2].i64[0]
    || a2[2].i32[2]
    || ((a2[2].i32[3] == 0) & v8) != 1)
  {
    goto LABEL_59;
  }
  v2 = (WebCore::GraphicsContext *)&v122;
  v71 = v9;
  v9 = v10;
  v72 = 0;
  v130 = 0;
  v112 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  while (1)
  {
    v73 = v16[v72];
    if (v73 >= 4)
      break;
    v74 = a2[13].i64[1];
    if (*(_BYTE *)(v74 + 24 * v16[v72] + 22)
      && *(float *)(v74 + 24 * v16[v72] + 12) != 0.0
      && *(unsigned __int8 *)(v74 + 24 * v16[v72] + 20) >= 2u
      && !*(_BYTE *)(v74 + 24 * v16[v72] + 21))
    {
      v75 = v16;
      v76.i64[0] = WebCore::calculateSideRect(a2->i64[0], a2->i64[1], v74, v73);
      v76.i64[1] = v77;
      v124 = vmulq_f32(vcvtq_f32_s32(v76), v112);
      WebCore::Path::addRect((WebCore::Path *)&v126, (const WebCore::FloatRect *)&v124);
      v16 = v75;
    }
    if (++v72 == 4)
    {
      if (*((_BYTE *)v110 + 192))
      {
        *((_BYTE *)v110 + 192) = 0;
        *((_DWORD *)v110 + 46) |= 2u;
      }
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v110 + 88))(v110, (uint64_t)v110 + 8);
      if (v71)
      {
        WebCore::GraphicsContext::setFillColor(v110, (const WebCore::Color *)(a2[13].i64[1] + 24 * v9));
        (*(void (**)(WebCore::GraphicsContext *, double *))(*(_QWORD *)v110 + 176))(v110, &v126);
        goto LABEL_90;
      }
      goto LABEL_179;
    }
  }
  do
  {
LABEL_179:
    __break(1u);
LABEL_180:
    v61.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)&v126, (const WebCore::FloatRect *)v120);
LABEL_86:
    if (!*((_BYTE *)v2 + 192))
    {
      *((_BYTE *)v2 + 192) = 1;
      *((_DWORD *)v2 + 46) |= 2u;
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t, __n128))(*(_QWORD *)v2 + 88))(v2, (uint64_t)v2 + 8, v61);
  }
  while (!v9);
  WebCore::GraphicsContext::setFillColor(v2, (const WebCore::Color *)(a2[13].i64[1] + 24 * v11));
  (*(void (**)(WebCore::GraphicsContext *, double *))(*(_QWORD *)v2 + 176))(v2, &v126);
LABEL_90:
  if (v130 != -1)
    ((void (*)(float32x4_t *, double *))off_1E341E1B0[v130])(&v124, &v127);
}

void WebCore::RoundedRect::pixelSnappedRoundedRectForPainting(WebCore::RoundedRect *this@<X0>, float a2@<S0>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int32x2_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __int128 v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float32x4_t v66;
  float v67;
  int32x4_t v68;
  float v70;
  float v71;
  float v72;
  float v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v4 = *(_DWORD *)this;
  v3 = *((_DWORD *)this + 1);
  v6 = *((_DWORD *)this + 2);
  v5 = *((_DWORD *)this + 3);
  if (v6 < 1 || v5 <= 0)
  {
    v66 = (float32x4_t)vdupq_n_s32(0x3C800000u);
    v67 = (float)*((int *)this + 11) * 0.015625;
    *(float *)a3 = (float)v4 * 0.015625;
    v68.i64[0] = __PAIR64__(v6, v3);
    v68.i32[2] = v5;
    v68.i32[3] = *((_DWORD *)this + 4);
    *(float32x4_t *)(a3 + 4) = vmulq_f32(vcvtq_f32_s32(v68), v66);
    *(float32x4_t *)(a3 + 20) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)((char *)this + 20)), v66);
    *(float32x2_t *)(a3 + 36) = vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)this + 36)), *(float32x2_t *)v66.f32);
    *(float *)(a3 + 44) = v67;
  }
  else
  {
    v8 = (double)v4 * 0.015625;
    if (v8 < 0.0)
      v9 = round((v8 + (double)-v4) * a2) / a2 - (double)-v4;
    else
      v9 = round(v8 * a2) / a2;
    v10 = (double)v3 * 0.015625;
    if (v10 < 0.0)
      v11 = round((v10 + (double)-v3) * a2) / a2 - (double)-v3;
    else
      v11 = round(v10 * a2) / a2;
    v12 = -v4 < 0;
    v13 = -v4 & 0x3F;
    v14 = *(_DWORD *)this & 0x3F;
    if (!v12)
      v14 = -v13;
    v15 = v14 + v6;
    if (__OFADD__(v14, v6))
      v15 = (v14 >> 31) + 0x7FFFFFFF;
    v16 = (double)v15 * 0.015625;
    if (v16 < 0.0)
      v17 = round((v16 + (double)-v15) * a2) / a2 - (double)-v15;
    else
      v17 = round(v16 * a2) / a2;
    v18 = (double)v14 * 0.015625;
    if (v18 < 0.0)
      v19 = round((v18 + (double)-v14) * a2) / a2 - (double)-v14;
    else
      v19 = round(v18 * a2) / a2;
    v12 = -v3 < 0;
    v20 = -v3 & 0x3F;
    v21 = *((_DWORD *)this + 1) & 0x3F;
    if (!v12)
      v21 = -v20;
    v22 = v21 + v5;
    if (__OFADD__(v21, v5))
      v22 = (v21 >> 31) + 0x7FFFFFFF;
    v23 = (double)v22 * 0.015625;
    if (v23 < 0.0)
      v24 = round((v23 + (double)-v22) * a2) / a2 - (double)-v22;
    else
      v24 = round(v23 * a2) / a2;
    v25 = (double)v21 * 0.015625;
    if (v25 < 0.0)
      v26 = round((v25 + (double)-v21) * a2) / a2 - (double)-v21;
    else
      v26 = round(v25 * a2) / a2;
    v27 = v11;
    v28 = v9;
    v29 = v17;
    v30 = v19;
    v31 = v29 - v30;
    v32 = v24;
    v33 = v26;
    v34 = v32 - v33;
    v35 = (int32x2_t *)((char *)this + 16);
    v36 = *((_DWORD *)this + 4);
    if (v36 < 0)
      goto LABEL_84;
    v37 = *((_DWORD *)this + 5);
    if (v37 < 0)
      goto LABEL_84;
    v38 = *((_DWORD *)this + 8);
    if (v38 < 0)
      goto LABEL_84;
    v39 = *((_DWORD *)this + 9);
    if (v39 < 0)
      goto LABEL_84;
    v40 = *((_DWORD *)this + 6);
    if (v40 < 0)
      goto LABEL_84;
    v41 = *((_DWORD *)this + 7);
    if (v41 < 0)
      goto LABEL_84;
    v42 = *((_DWORD *)this + 10);
    if (v42 < 0)
      goto LABEL_84;
    v43 = *((_DWORD *)this + 11);
    if (v43 < 0)
      goto LABEL_84;
    v44 = v36 + v40;
    if (__OFADD__(v36, v40))
      v44 = 0x7FFFFFFF;
    if (v44 > v6)
      goto LABEL_84;
    v45 = v38 + v42;
    if (__OFADD__(v38, v42))
      v45 = 0x7FFFFFFF;
    if (v45 > v6)
      goto LABEL_84;
    v46 = v37 + v39;
    if (__OFADD__(v37, v39))
      v46 = 0x7FFFFFFF;
    if (v46 > v5)
      goto LABEL_84;
    v47 = v41 + v43;
    if (__OFADD__(v41, v43))
      v47 = 0x7FFFFFFF;
    if (v47 > v5)
    {
LABEL_84:
      v70 = v34;
      v71 = v31;
      v72 = v27;
      v73 = v28;
      WebCore::FloatRoundedRect::Radii::Radii((float32x2_t *)(a3 + 16), v35);
      *(float *)a3 = v73;
      *(float *)(a3 + 4) = v72;
      *(float *)(a3 + 8) = v71;
      *(float *)(a3 + 12) = v70;
    }
    else
    {
      v48 = (float)v36 * 0.015625;
      v49 = (float)v37 * 0.015625;
      *(float *)&v76 = v48;
      *((float *)&v76 + 1) = v49;
      v50 = (float)v41 * 0.015625;
      *((float *)&v76 + 2) = (float)v40 * 0.015625;
      *((float *)&v76 + 3) = v50;
      v51 = (float)v39 * 0.015625;
      *(float *)&v77 = (float)v38 * 0.015625;
      *((float *)&v77 + 1) = v51;
      v52 = (float)v42 * 0.015625;
      v53 = (float)v43 * 0.015625;
      *((float *)&v77 + 2) = v52;
      *((float *)&v77 + 3) = v53;
      v54 = v31 / (float)((float)v6 * 0.015625);
      v55 = v34 / (float)((float)v5 * 0.015625);
      if (v54 != 1.0 || v55 != 1.0)
      {
        *(float *)&v76 = v54 * v48;
        *((float *)&v76 + 1) = v55 * v49;
        if ((float)(v54 * v48) == 0.0 || (float)(v55 * v49) == 0.0)
          *(_QWORD *)&v76 = 0;
        *((float *)&v76 + 2) = v54 * (float)((float)v40 * 0.015625);
        *((float *)&v76 + 3) = v55 * v50;
        if (*((float *)&v76 + 2) == 0.0 || (float)(v55 * v50) == 0.0)
          *((_QWORD *)&v76 + 1) = 0;
        *(float *)&v77 = v54 * (float)((float)v38 * 0.015625);
        *((float *)&v77 + 1) = v55 * v51;
        if (*(float *)&v77 == 0.0 || (float)(v55 * v51) == 0.0)
          *(_QWORD *)&v77 = 0;
        *((float *)&v77 + 2) = v54 * v52;
        *((float *)&v77 + 3) = v55 * v53;
        if ((float)(v54 * v52) == 0.0 || (float)(v55 * v53) == 0.0)
          *((_QWORD *)&v77 + 1) = 0;
      }
      *(float *)a3 = v28;
      *(float *)(a3 + 4) = v27;
      *(float *)(a3 + 8) = v31;
      *(float *)(a3 + 12) = v34;
      v57 = v77;
      *(_OWORD *)(a3 + 16) = v76;
      *(_OWORD *)(a3 + 32) = v57;
      v58 = *(float *)(a3 + 16);
      if (v58 < 0.0
        || (v59 = *(float *)(a3 + 20), v59 < 0.0)
        || (v60 = *(float *)(a3 + 32), v60 < 0.0)
        || (v61 = *(float *)(a3 + 36), v61 < 0.0)
        || (v62 = *(float *)(a3 + 24), v62 < 0.0)
        || (v63 = *(float *)(a3 + 28), v63 < 0.0)
        || (v64 = *(float *)(a3 + 40), v64 < 0.0)
        || (v65 = *(float *)(a3 + 44), v65 < 0.0)
        || (float)(v58 + v62) > v31
        || (float)(v60 + v64) > v31
        || (float)(v59 + v61) > v34
        || (float)(v63 + v65) > v34)
      {
        v74 = (_OWORD *)(a3 + 16);
        WebCore::FloatRoundedRect::Radii::expand((WebCore::FloatRoundedRect::Radii *)&v76, -1.0 / a2, -1.0 / a2, -1.0 / a2, -1.0 / a2);
        v75 = v77;
        *v74 = v76;
        v74[1] = v75;
      }
    }
  }
}

BOOL WebCore::FloatRoundedRect::Radii::isZero(WebCore::FloatRoundedRect::Radii *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v1 = *(float *)this;
  if (*(float *)this != 0.0)
  {
    if (v1 < 0.0)
      v1 = -v1;
    if (v1 >= 0.00000011921)
      return 0;
  }
  v2 = *((float *)this + 1);
  if (v2 != 0.0)
  {
    if (v2 < 0.0)
      v2 = -v2;
    if (v2 >= 0.00000011921)
      return 0;
  }
  v3 = *((float *)this + 2);
  if (v3 != 0.0)
  {
    if (v3 < 0.0)
      v3 = -v3;
    if (v3 >= 0.00000011921)
      return 0;
  }
  v4 = *((float *)this + 3);
  if (v4 != 0.0)
  {
    if (v4 < 0.0)
      v4 = -v4;
    if (v4 >= 0.00000011921)
      return 0;
  }
  v5 = *((float *)this + 4);
  if (v5 != 0.0)
  {
    if (v5 < 0.0)
      v5 = -v5;
    if (v5 >= 0.00000011921)
      return 0;
  }
  v6 = *((float *)this + 5);
  if (v6 != 0.0)
  {
    if (v6 < 0.0)
      v6 = -v6;
    if (v6 >= 0.00000011921)
      return 0;
  }
  v7 = *((float *)this + 6);
  if (v7 != 0.0)
  {
    if (v7 < 0.0)
      v7 = -v7;
    if (v7 >= 0.00000011921)
      return 0;
  }
  v8 = *((float *)this + 7);
  v9 = 0.0;
  if (v8 != 0.0)
  {
    if (v8 < 0.0)
      v9 = -v8;
    else
      v9 = *((float *)this + 7);
  }
  return v9 < 0.00000011921;
}

BOOL WebCore::RoundedRect::contains(WebCore::RoundedRect *this, const WebCore::LayoutRect *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 result;
  unsigned int v17;
  int v18;
  int v19;
  const WebCore::FloatPoint *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  float v35;
  unsigned int v36;
  int v37;
  float v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  float v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  float v52;
  int v53;
  float v54;
  float v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  float v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  float v65;
  int v66;
  float v67;
  unsigned int v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  int v73;
  float32_t v74;
  float v75;
  _BOOL4 v76;
  unsigned int v77;
  int v78;
  BOOL v79;
  int v80;
  int v81;
  int v82;
  _BOOL4 v83;
  unsigned int v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  int v89;
  const WebCore::LayoutRect *v90;
  const WebCore::LayoutRect *v91;
  const WebCore::LayoutRect *v92;
  WebCore::RoundedRect *v93;
  WebCore::RoundedRect *v94;
  WebCore::RoundedRect *v95;
  float32x2_t v96;
  float32x2_t v97;
  float v98;
  float v99;

  v2 = *(_DWORD *)this;
  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)this > *(_DWORD *)a2)
    return 0;
  v4 = *((_DWORD *)this + 2);
  v5 = v2 + v4;
  if (__OFADD__(v2, v4))
    v5 = (v2 >> 31) + 0x7FFFFFFF;
  v6 = *((_DWORD *)a2 + 2);
  v41 = __OFADD__(v3, v6);
  v7 = v3 + v6;
  v8 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v41)
    v8 = v7;
  if (v5 < v8)
    return 0;
  v9 = *((_DWORD *)this + 1);
  v10 = *((_DWORD *)a2 + 1);
  if ((int)v9 > v10)
    return 0;
  v11 = *((_DWORD *)this + 3);
  v12 = v9 + v11;
  if (__OFADD__(v9, v11))
    v12 = (v9 >> 31) + 0x7FFFFFFF;
  v13 = *((_DWORD *)a2 + 3);
  v41 = __OFADD__(v10, v13);
  v14 = v10 + v13;
  v15 = (v10 >> 31) + 0x7FFFFFFF;
  if (!v41)
    v15 = v14;
  if (v12 < v15)
    return 0;
  v17 = *((_DWORD *)this + 4);
  if ((v17 & 0x80000000) != 0)
    return 0;
  v18 = *((_DWORD *)this + 5);
  if (v18 < 0)
    return 0;
  v19 = *((_DWORD *)this + 8);
  if (v19 < 0)
    return 0;
  v20 = (const WebCore::FloatPoint *)*((unsigned int *)this + 9);
  if ((v20 & 0x80000000) != 0)
    return 0;
  v21 = *((_DWORD *)this + 6);
  if (v21 < 0)
    return 0;
  v22 = *((_DWORD *)this + 7);
  if (v22 < 0)
    return 0;
  v23 = *((_DWORD *)this + 10);
  if (v23 < 0)
    return 0;
  v24 = *((_DWORD *)this + 11);
  if (v24 < 0)
    return 0;
  v25 = v17 + v21;
  if (__OFADD__(v17, v21))
    v25 = 0x7FFFFFFF;
  if (v25 > v4)
    return 0;
  v41 = __OFADD__(v19, v23);
  v26 = v19 + v23;
  if (v41)
    v26 = 0x7FFFFFFF;
  if (v26 > v4)
    return 0;
  v27 = v18 + (_DWORD)v20;
  if (__OFADD__(v18, (_DWORD)v20))
    v27 = 0x7FFFFFFF;
  if (v27 > v11)
    return 0;
  v28 = v22 + v24;
  if (__OFADD__(v22, v24))
    v28 = 0x7FFFFFFF;
  if (v28 > v11)
    return 0;
  if (v17 && v18)
  {
    v29 = v2 + v17;
    if (__OFADD__(v2, v17))
      v29 = (v2 >> 31) + 0x7FFFFFFF;
    v30 = v9 + v18;
    if (__OFADD__(v9, v18))
      v30 = (v9 >> 31) + 0x7FFFFFFF;
    v98 = (float)v29 * 0.015625;
    v99 = (float)v30 * 0.015625;
    if ((float)((float)v3 * 0.015625) <= v98 && (float)((float)v10 * 0.015625) <= (float)((float)v30 * 0.015625))
    {
      v90 = a2;
      v93 = this;
      v97 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v18, v17)), (float32x2_t)vdup_n_s32(0x3C800000u));
      v74 = (float)*((int *)a2 + 1) * 0.015625;
      v96.f32[0] = (float)*(int *)a2 * 0.015625;
      v96.f32[1] = v74;
      result = WebCore::ellipseContainsPoint((WebCore *)&v98, (const WebCore::FloatPoint *)&v97, (const WebCore::FloatSize *)&v96, v20);
      if (!result)
        return result;
      a2 = v90;
      this = v93;
      v21 = *((_DWORD *)v93 + 6);
    }
  }
  if (v21 >= 1)
  {
    v31 = *((_DWORD *)this + 7);
    if (v31 >= 1)
    {
      v32 = *((_DWORD *)this + 2);
      v41 = __OFADD__(*(_DWORD *)this, v32);
      v33 = *(_DWORD *)this + v32;
      if (v41)
        v33 = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
      v34 = v33 - v21;
      if (__OFSUB__(v33, v21))
        v34 = (v33 >> 31) + 0x7FFFFFFF;
      v35 = (float)v34 * 0.015625;
      v36 = *((_DWORD *)this + 1);
      v37 = v36 + v31;
      if (__OFADD__(v36, v31))
        v37 = (v36 >> 31) + 0x7FFFFFFF;
      v38 = (float)v37 * 0.015625;
      v98 = v35;
      v99 = v38;
      v39 = *(_DWORD *)a2;
      v40 = *((_DWORD *)a2 + 2);
      v41 = __OFADD__(*(_DWORD *)a2, v40);
      v42 = *(_DWORD *)a2 + v40;
      v43 = v41;
      v44 = v42;
      if (v41)
        v44 = (v39 >> 31) + 0x7FFFFFFF;
      if ((float)((float)v44 * 0.015625) >= v35)
      {
        v75 = (float)*((int *)a2 + 1) * 0.015625;
        if (v75 <= v38)
        {
          v91 = a2;
          v94 = this;
          v97 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v31, v21)), (float32x2_t)vdup_n_s32(0x3C800000u));
          if (v43)
            v42 = (v39 >> 31) + 0x7FFFFFFF;
          v96.f32[0] = (float)v42 * 0.015625;
          v96.f32[1] = v75;
          v76 = WebCore::ellipseContainsPoint((WebCore *)&v98, (const WebCore::FloatPoint *)&v97, (const WebCore::FloatSize *)&v96, v20);
          a2 = v91;
          this = v94;
          if (!v76)
            return 0;
        }
      }
    }
  }
  v45 = *((_DWORD *)this + 8);
  if (v45 >= 1)
  {
    v46 = *((_DWORD *)this + 9);
    if (v46 >= 1)
    {
      v47 = *(_DWORD *)this + v45;
      if (__OFADD__(*(_DWORD *)this, v45))
        v47 = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
      v48 = (float)v47;
      v49 = *((_DWORD *)this + 1);
      v50 = *((_DWORD *)this + 3);
      v41 = __OFADD__(v49, v50);
      v51 = v49 + v50;
      if (v41)
        v51 = (v49 >> 31) + 0x7FFFFFFF;
      v52 = v48 * 0.015625;
      v53 = v51 - v46;
      if (__OFSUB__(v51, v46))
        v53 = (v51 >> 31) + 0x7FFFFFFF;
      v54 = (float)v53 * 0.015625;
      v98 = v48 * 0.015625;
      v99 = v54;
      v55 = (float)*(int *)a2 * 0.015625;
      if (v55 <= v52)
      {
        v92 = a2;
        v95 = this;
        v77 = *((_DWORD *)a2 + 1);
        v78 = *((_DWORD *)a2 + 3);
        v79 = __OFADD__(v77, v78);
        v80 = v77 + v78;
        v81 = v79;
        v82 = v80;
        if (v79)
          v82 = (v77 >> 31) + 0x7FFFFFFF;
        if ((float)((float)v82 * 0.015625) >= v54)
        {
          v97 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v46, v45)), (float32x2_t)vdup_n_s32(0x3C800000u));
          if (v81)
            v80 = (v77 >> 31) + 0x7FFFFFFF;
          v96.f32[0] = v55;
          v96.f32[1] = (float)v80 * 0.015625;
          v83 = WebCore::ellipseContainsPoint((WebCore *)&v98, (const WebCore::FloatPoint *)&v97, (const WebCore::FloatSize *)&v96, v20);
          a2 = v92;
          this = v95;
          if (!v83)
            return 0;
        }
      }
    }
  }
  v56 = *((_DWORD *)this + 10);
  if (v56 < 1)
    return 1;
  v57 = *((_DWORD *)this + 11);
  if (v57 < 1)
    return 1;
  v58 = *((_DWORD *)this + 2);
  v41 = __OFADD__(*(_DWORD *)this, v58);
  v59 = *(_DWORD *)this + v58;
  if (v41)
    v59 = (*(_DWORD *)this >> 31) + 0x7FFFFFFF;
  v60 = v59 - v56;
  if (__OFSUB__(v59, v56))
    v60 = (v59 >> 31) + 0x7FFFFFFF;
  v61 = (float)v60;
  v62 = *((_DWORD *)this + 1);
  v63 = *((_DWORD *)this + 3);
  v41 = __OFADD__(v62, v63);
  v64 = v62 + v63;
  if (v41)
    v64 = (v62 >> 31) + 0x7FFFFFFF;
  v65 = v61 * 0.015625;
  v66 = v64 - v57;
  if (__OFSUB__(v64, v57))
    v66 = (v64 >> 31) + 0x7FFFFFFF;
  v67 = (float)v66 * 0.015625;
  v98 = v65;
  v99 = v67;
  v68 = *(_DWORD *)a2;
  v69 = *((_DWORD *)a2 + 2);
  v70 = __OFADD__(*(_DWORD *)a2, v69);
  v71 = *(_DWORD *)a2 + v69;
  v72 = v70;
  v73 = v71;
  if (v70)
    v73 = (v68 >> 31) + 0x7FFFFFFF;
  if ((float)((float)v73 * 0.015625) < v65)
    return 1;
  v84 = *((_DWORD *)a2 + 1);
  v85 = *((_DWORD *)a2 + 3);
  v86 = __OFADD__(v84, v85);
  v87 = v84 + v85;
  v88 = v86;
  v89 = v87;
  if (v86)
    v89 = (v84 >> 31) + 0x7FFFFFFF;
  if ((float)((float)v89 * 0.015625) < v67)
    return 1;
  v97 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v57, v56)), (float32x2_t)vdup_n_s32(0x3C800000u));
  if (v72)
    v71 = (v68 >> 31) + 0x7FFFFFFF;
  if (v88)
    v87 = (v84 >> 31) + 0x7FFFFFFF;
  v96 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v87, v71)), (float32x2_t)vdup_n_s32(0x3C800000u));
  result = WebCore::ellipseContainsPoint((WebCore *)&v98, (const WebCore::FloatPoint *)&v97, (const WebCore::FloatSize *)&v96, v20);
  if (result)
    return 1;
  return result;
}

BOOL WebCore::BorderPainter::allCornersClippedOut(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  signed int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;

  v3 = *(_DWORD *)a1;
  v2 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *a2;
  v7 = a2[2];
  if ((signed int)*a2 <= *(_DWORD *)a1)
  {
    v8 = v6 + v7;
    if (__OFADD__(v6, v7))
      v8 = (v6 >> 31) + 0x7FFFFFFF;
    v9 = (v3 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v3, v4))
      v9 = v3 + v4;
    if (v8 >= v9)
    {
      v10 = a2[1];
      if (v10 <= (int)v2)
      {
        v11 = a2[3];
        v27 = __OFADD__(v10, v11);
        v12 = v10 + v11;
        v13 = (v10 >> 31) + 0x7FFFFFFF;
        if (!v27)
          v13 = v12;
        v14 = v2 + v5;
        if (__OFADD__(v2, v5))
          v14 = (v2 >> 31) + 0x7FFFFFFF;
        if (v13 >= v14)
          return 0;
      }
    }
  }
  v17 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  if (v7 >= 1)
  {
    v19 = a2[3];
    if (v19 >= 1)
    {
      v20 = *(_QWORD *)(a1 + 16);
      if ((int)v20 >= 1)
      {
        v21 = HIDWORD(v20);
        if (SHIDWORD(v20) >= 1)
        {
          v22 = v3 + v20;
          if (__OFADD__(v3, (_DWORD)v20))
            v22 = (v3 >> 31) + 0x7FFFFFFF;
          if ((int)v6 < v22)
          {
            v23 = (v6 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(v6, v7))
              v23 = v6 + v7;
            if (v23 > (int)v3)
            {
              v24 = a2[1];
              v25 = v2 + v21;
              if (__OFADD__(v2, (_DWORD)v21))
                v25 = (v2 >> 31) + 0x7FFFFFFF;
              if ((int)v24 < v25)
              {
                v27 = __OFADD__(v24, v19);
                v26 = v24 + v19;
                if (v27)
                  v26 = (v24 >> 31) + 0x7FFFFFFF;
                if (v26 > (int)v2)
                  return 0;
              }
            }
          }
        }
      }
    }
  }
  v27 = __OFADD__(v3, v4);
  v28 = v3 + v4;
  v29 = v27;
  v30 = v28;
  if (v27)
    v30 = (v3 >> 31) + 0x7FFFFFFF;
  v27 = __OFSUB__(v30, (_DWORD)v17);
  v31 = v30 - v17;
  v32 = (v30 >> 31) + 0x7FFFFFFF;
  if (v27)
    v31 = v32;
  if (v7 >= 1)
  {
    v33 = a2[3];
    if (v33 >= 1 && (int)v17 >= 1)
    {
      v34 = HIDWORD(v17);
      if (SHIDWORD(v17) >= 1)
      {
        v27 = __OFADD__(v31, (_DWORD)v17);
        v35 = v31 + v17;
        if (v27)
          v35 = (v31 >> 31) + 0x7FFFFFFF;
        if ((int)v6 < v35)
        {
          v36 = v6 + v7;
          if (__OFADD__(v6, v7))
            v36 = (v6 >> 31) + 0x7FFFFFFF;
          if (v31 < v36)
          {
            v37 = a2[1];
            v38 = v2 + v34;
            if (__OFADD__(v2, (_DWORD)v34))
              v38 = (v2 >> 31) + 0x7FFFFFFF;
            if ((int)v37 < v38)
            {
              v27 = __OFADD__(v37, v33);
              v39 = v37 + v33;
              if (v27)
                v39 = (v37 >> 31) + 0x7FFFFFFF;
              if (v39 > (int)v2)
                return 0;
            }
          }
        }
      }
    }
  }
  v40 = __OFADD__(v2, v5);
  v41 = v2 + v5;
  v42 = v40;
  v43 = HIDWORD(v16);
  v44 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v40)
    v44 = v41;
  v45 = (v44 >> 31) + 0x7FFFFFFF;
  if (!__OFSUB__(v44, HIDWORD(v16)))
    v45 = v44 - HIDWORD(v16);
  if (v7 >= 1)
  {
    v46 = a2[3];
    if (v46 >= 1 && (int)v16 >= 1 && SHIDWORD(v16) >= 1)
    {
      v27 = __OFADD__(v3, (_DWORD)v16);
      v47 = v3 + v16;
      if (v27)
        v47 = (v3 >> 31) + 0x7FFFFFFF;
      if ((int)v6 < v47)
      {
        v48 = v6 + v7;
        if (__OFADD__(v6, v7))
          v48 = (v6 >> 31) + 0x7FFFFFFF;
        if (v48 > (int)v3)
        {
          v49 = a2[1];
          v27 = __OFADD__(v45, (_DWORD)v43);
          v50 = v45 + v43;
          if (v27)
            v50 = (v45 >> 31) + 0x7FFFFFFF;
          if ((int)v49 < v50)
          {
            v27 = __OFADD__(v49, v46);
            v51 = v49 + v46;
            if (v27)
              v51 = (v49 >> 31) + 0x7FFFFFFF;
            if (v45 < v51)
              return 0;
          }
        }
      }
    }
  }
  v52 = HIDWORD(v18);
  v53 = (v3 >> 31) + 0x7FFFFFFF;
  if (!v29)
    v53 = v28;
  v27 = __OFSUB__(v53, (_DWORD)v18);
  v54 = v53 - v18;
  v55 = (v53 >> 31) + 0x7FFFFFFF;
  if (v27)
    v54 = v55;
  v56 = (v2 >> 31) + 0x7FFFFFFF;
  if (!v42)
    v56 = v41;
  v27 = __OFSUB__(v56, HIDWORD(v18));
  v57 = v56 - HIDWORD(v18);
  v58 = (v56 >> 31) + 0x7FFFFFFF;
  if (!v27)
    v58 = v57;
  if (v7 < 1)
    return 1;
  v59 = a2[3];
  if (v59 < 1)
    return 1;
  result = 1;
  if ((int)v18 >= 1 && SHIDWORD(v18) >= 1)
  {
    v27 = __OFADD__(v54, (_DWORD)v18);
    v60 = v54 + v18;
    if (v27)
      v60 = (v54 >> 31) + 0x7FFFFFFF;
    if ((int)v6 < v60)
    {
      v27 = __OFADD__(v6, v7);
      v61 = v6 + v7;
      if (v27)
        v61 = (v6 >> 31) + 0x7FFFFFFF;
      if (v54 < v61)
      {
        v62 = a2[1];
        v63 = v58 + v52;
        if (__OFADD__(v58, (_DWORD)v52))
          v63 = (v58 >> 31) + 0x7FFFFFFF;
        if ((int)v62 < v63)
        {
          v64 = v62 + v59;
          if (__OFADD__(v62, v59))
            v64 = (v62 >> 31) + 0x7FFFFFFF;
          return v58 >= v64;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::transformFunctionListPrefix(WebCore::KeyframeEffect *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *((_QWORD *)this + 15);
  if ((v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0
     || (v9 = *((_QWORD *)this + 33)) != 0 && (v4 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0
    && (*((_BYTE *)this + 307) || *((_BYTE *)this + 332))
    || WebCore::KeyframeEffect::preventsAcceleration(this, a2))
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v7 = *((_QWORD *)this + 40) & 0xFFFFFF00;
    v5 = *((_QWORD *)this + 40);
    v6 = 0x100000000;
  }
  return v6 | v5 | v7;
}

float WebCore::LayoutRect::operator WebCore::FloatRect(int *a1)
{
  return (float)*a1 * 0.015625;
}

float WebCore::boundsOfRotatingRect(WebCore *this, const WebCore::FloatRect *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  v3 = *(float *)this;
  v4 = *((float *)this + 1);
  v5 = 0.0 - *(float *)this;
  v6 = hypotf(v5, 0.0 - v4);
  v7 = 0.0 - (float)(v3 + *((float *)this + 2));
  v8 = hypotf(v7, 0.0 - v4);
  if (v6 < v8)
    v6 = v8;
  v9 = 0.0 - (float)(v4 + *((float *)this + 3));
  v10 = hypotf(v5, v9);
  if (v6 >= v10)
    v11 = v6;
  else
    v11 = v10;
  v12 = hypotf(v7, v9);
  if (v11 >= v12)
    v13 = v11;
  else
    v13 = v12;
  return -v13;
}

__n128 WebCore::LayoutRect::unite(WebCore::LayoutRect *this, const WebCore::LayoutRect *a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __n128 result;

  v3 = *((_DWORD *)a2 + 2);
  v2 = *((_DWORD *)a2 + 3);
  if (v3 >= 1 && v2 >= 1)
  {
    v5 = *((_DWORD *)this + 2);
    if (v5 < 1 || (v6 = *((_DWORD *)this + 3), v6 <= 0))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)this = *(_OWORD *)a2;
    }
    else
    {
      v7 = *(_DWORD *)this;
      v8 = *((_DWORD *)this + 1);
      v9 = *(_DWORD *)a2;
      v10 = *((_DWORD *)a2 + 1);
      if (*(_DWORD *)a2 >= *(_DWORD *)this)
        v11 = v7;
      else
        v11 = v9;
      if ((int)v10 >= (int)v8)
        v12 = v8;
      else
        v12 = v10;
      v13 = __OFADD__(v7, v5);
      v14 = v7 + v5;
      v15 = (v7 >> 31) + 0x7FFFFFFF;
      if (v13)
        v14 = v15;
      v13 = __OFADD__(v9, v3);
      v16 = v9 + v3;
      if (v13)
        v16 = (v9 >> 31) + 0x7FFFFFFF;
      if (v14 > v16)
        v16 = v14;
      v13 = __OFADD__(v8, v6);
      v17 = v8 + v6;
      if (v13)
        v17 = (v8 >> 31) + 0x7FFFFFFF;
      v13 = __OFADD__(v10, v2);
      v18 = v10 + v2;
      if (v13)
        v18 = (v10 >> 31) + 0x7FFFFFFF;
      if (v17 > v18)
        v18 = v17;
      *(_QWORD *)this = v11 | (v12 << 32);
      v13 = __OFSUB__(v16, (_DWORD)v11);
      v19 = v16 - v11;
      v20 = (v16 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v20 = v19;
      v13 = __OFSUB__(v18, (_DWORD)v12);
      v21 = v18 - v12;
      v22 = (v18 >> 31) + 0x7FFFFFFF;
      if (!v13)
        v22 = v21;
      *((_DWORD *)this + 2) = v20;
      *((_DWORD *)this + 3) = v22;
    }
  }
  return result;
}

void WebCore::registerMemoryReleaseNotifyCallbacks(WebCore *this)
{
  char v1;

  std::call_once[abi:sn180100]<WebCore::registerMemoryReleaseNotifyCallbacks(void)::$_0>((uint64_t)&v1);
}

uint64_t WebCore::IOSApplication::isFirefox(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81752 == 1)
    return byte_1ECE81751 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81751 = IsEqualTo;
  byte_1ECE81752 = 1;
  return result;
}

void sub_194360F38(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebCore::CSSToStyleMap::mapFillImage(uint64_t **a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _DWORD *result;
  int v7;
  int v8;
  _DWORD *v9;

  if (((*(unsigned __int16 *)(a4 + 4) | (*(unsigned __int8 *)(a4 + 6) << 16)) & 0x3F87F) == 0x50)
  {
    v8 = *(unsigned __int16 *)(a4 + 8);
    if (v8 == 2 || v8 == 3 && !WebCore::isInheritedPropertyTable[a2])
    {
      result = *(_DWORD **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      if (!result)
        goto LABEL_5;
      v7 = result[2] - 1;
      if (result[2] == 1)
      {
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  WebCore::Style::BuilderState::createStyleImage((uint64_t *)&v9, *a1, (const WebCore::CSSValue *)a4);
  v5 = (uint64_t)v9;
  v9 = 0;
  result = *(_DWORD **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v5;
  if (!result)
  {
LABEL_5:
    *(_DWORD *)(a3 + 60) |= 0x80u;
    return result;
  }
  v7 = result[2] - 1;
  if (result[2] != 1)
  {
LABEL_4:
    result[2] = v7;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  result = v9;
  *(_DWORD *)(a3 + 60) |= 0x80u;
  v9 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *WebCore::CSSImageValue::createStyleImage@<X0>(WTF **this@<X0>, const WebCore::Document **a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  const WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  char v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::CachedResource *v22;
  _DWORD *result;
  WTF::StringImpl *v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  WTF **v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  WebCore::CSSImageValue::reresolvedURL((WebCore::CSSImageValue *)this, a2[3], (uint64_t)&v30);
  v6 = v30;
  if (v30)
    *(_DWORD *)v30 += 2;
  v27 = v32;
  v28 = v31;
  if (WTF::equal(this[1], v6, v5) && WTF::equal(this[2], v6, v7))
  {
    *(_DWORD *)this += 2;
    v29 = this;
    WebCore::StyleCachedImage::create((uint64_t *)&v29, (uint64_t *)&v30, 1.0);
    result = v29;
    *a3 = v30;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v24);
      else
        *result -= 2;
    }
    if (v6)
    {
      v25 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 == 2)
      {
        result = (_DWORD *)WTF::StringImpl::destroy(v6, v24);
        v25 = *(_DWORD *)v6;
      }
      else
      {
        *(_DWORD *)v6 = v25;
      }
      v26 = v25 - 2;
      if (v26)
        *(_DWORD *)v6 = v26;
      else
        return (_DWORD *)WTF::StringImpl::destroy(v6, v24);
    }
  }
  else
  {
    v8 = *((_BYTE *)this + 80);
    v10 = WTF::fastCompactMalloc((WTF *)0x78);
    *(_DWORD *)v10 = 2;
    v11 = *(_BYTE *)(v10 + 6);
    *(_WORD *)(v10 + 4) = 2048;
    *(_BYTE *)(v10 + 6) = v11 & 0xFC;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(v10 + 16) = v6;
    *(_OWORD *)(v10 + 24) = v28;
    *(_OWORD *)(v10 + 40) = v27;
    *(_BYTE *)(v10 + 56) = 0;
    v12 = v10 + 56;
    *(_BYTE *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    *(_BYTE *)(v10 + 80) = v8;
    *(_QWORD *)(v10 + 88) = 0;
    *(_BYTE *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_BYTE *)(v10 + 112) = 0;
    if (*((_BYTE *)this + 64))
    {
      v13 = this[7];
      if (v13)
      {
        do
          v14 = __ldaxr((unsigned int *)v13);
        while (__stlxr(v14 + 1, (unsigned int *)v13));
        *(_QWORD *)v12 = v13;
        v15 = *((_QWORD *)v13 + 1);
        if (v15)
        {
          v33 = v10 + 56;
          ++*(_DWORD *)(v15 + 548);
          v16 = *(_QWORD *)(v15 + 488);
          if (v16)
          {
            if (*(_QWORD *)(v16 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), &v33, (uint64_t)&v30);
          }
        }
      }
      else
      {
        *(_QWORD *)v12 = 0;
      }
      *(_BYTE *)(v10 + 64) = 1;
    }
    v17 = this[9];
    if (v17)
      *(_DWORD *)v17 += 2;
    v18 = *(WTF::StringImpl **)(v10 + 72);
    *(_QWORD *)(v10 + 72) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v9);
      else
        *(_DWORD *)v18 -= 2;
    }
    WTF::RefPtr<WebCore::CSSValueContainingVector const,WTF::RawPtrTraits<WebCore::CSSValueContainingVector const>,WTF::DefaultRefDerefTraits<WebCore::CSSValueContainingVector const>>::operator=((WTF::StringImpl **)(v10 + 88), (WTF::StringImpl *)this);
    v19 = WTF::fastMalloc((WTF *)0x48);
    v20 = v19;
    *(_DWORD *)(v19 + 8) = 1;
    *(_QWORD *)(v19 + 16) = 0;
    *(_BYTE *)(v19 + 24) = 0;
    *(_QWORD *)v19 = off_1E3441AE8;
    *(_QWORD *)(v19 + 32) = v10;
    *(_BYTE *)(v19 + 40) = 1;
    *(_DWORD *)(v19 + 44) = 1065353216;
    *(_QWORD *)(v19 + 48) = 0;
    v21 = v19 + 48;
    *(_WORD *)(v19 + 56) = 0;
    *(_DWORD *)(v19 + 60) = 0;
    *(_DWORD *)(v19 + 64) = 0;
    if (*(_BYTE *)(v10 + 64) && *(_QWORD *)v12)
      v22 = *(WebCore::CachedResource **)(*(_QWORD *)v12 + 8);
    else
      v22 = 0;
    result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(v19 + 48), v22);
    if (*(_QWORD *)v21)
    {
      if (*(_QWORD *)(*(_QWORD *)v21 + 8))
        *(_BYTE *)(v20 + 40) = 0;
    }
    *a3 = (WTF::StringImpl *)v20;
  }
  return result;
}

uint64_t WebCore::CSSImageValue::loadImage(uint64_t this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  uint64_t *v3;
  uint64_t v6;
  _DWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  char v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _DWORD **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  WTF::StringImpl *v27;
  WebCore::CachedResource *v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t i;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  __int128 v39;
  __int128 v40;
  char v41;
  WTF::StringImpl *v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[5];
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD v58[19];
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _WORD v65[76];
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int16 v69;
  _DWORD v70[2];
  _DWORD *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  char v79;
  __int16 v80;
  _DWORD *v81;
  _DWORD *v82;
  char v83;
  __int128 v84;
  _DWORD *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(this + 56);
  if (!*(_BYTE *)(this + 64))
  {
    v6 = this;
    v70[0] = *(_DWORD *)a3;
    *(_DWORD *)((char *)v70 + 3) = *(_DWORD *)((char *)a3 + 3);
    v7 = (_DWORD *)*((_QWORD *)a3 + 1);
    if (v7)
      *v7 += 2;
    v8 = *((_OWORD *)a3 + 2);
    v72 = *((_OWORD *)a3 + 1);
    v73 = v8;
    v9 = *((_QWORD *)a3 + 6);
    v71 = v7;
    v74 = v9;
    v75 = 0;
    v10 = *((unsigned int *)a3 + 17);
    v76 = 0;
    v77 = v10;
    if ((_DWORD)v10)
    {
      if (v10 >> 28)
        goto LABEL_63;
      v33 = WTF::fastMalloc((WTF *)(16 * v10));
      v76 = v10;
      v75 = v33;
      v34 = *((unsigned int *)a3 + 17);
      if ((_DWORD)v34)
      {
        v35 = *((_QWORD *)a3 + 7);
        v36 = v35 + 16 * v34;
        do
        {
          v37 = *(_DWORD **)v35;
          if (*(_QWORD *)v35)
            *v37 += 2;
          *(_QWORD *)v33 = v37;
          *(_BYTE *)(v33 + 8) = *(_BYTE *)(v35 + 8);
          v35 += 16;
          v33 += 16;
        }
        while (v35 != v36);
      }
    }
    v78 = *((_DWORD *)a3 + 18);
    v79 = *((_BYTE *)a3 + 76);
    LOBYTE(v80) = 0;
    v83 = 0;
    if (*((_BYTE *)a3 + 104))
    {
      v80 = *((_WORD *)a3 + 40);
      v11 = (_DWORD *)*((_QWORD *)a3 + 11);
      if (v11)
        *v11 += 2;
      v81 = v11;
      v12 = (_DWORD *)*((_QWORD *)a3 + 12);
      if (v12)
        *v12 += 2;
      v82 = v12;
      v83 = 1;
    }
    v84 = *((_OWORD *)a3 + 7);
    v13 = (_DWORD *)*((_QWORD *)a3 + 16);
    if (v13)
      *v13 += 2;
    v85 = v13;
    *(_DWORD *)((char *)&v84 + 2) = *(_DWORD *)((_BYTE *)&v84 + 2) & 0xFFBFFFFF | (*(unsigned __int8 *)(v6 + 80) << 22);
    WebCore::CSSImageValue::reresolvedURL((WebCore::CSSImageValue *)v6, *(const WebCore::Document **)(*((_QWORD *)a2 + 9) + 8), (uint64_t)&v38);
    v14 = v38;
    if (v38)
      *(_DWORD *)v38 += 2;
    v42 = v14;
    v43 = v39;
    v44 = v40;
    v45[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v45);
    v46 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v47 = v58[0];
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0x10000;
    v15 = v52 & 0x80 | 4;
    v52 = v15;
    *(_QWORD *)&v53 = 0;
    v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v16 += 2;
      v15 = v52;
    }
    *((_QWORD *)&v53 + 1) = v16;
    v54 = 0;
    LOBYTE(v55) = 0;
    BYTE4(v55) = 0;
    v56 = v56 & 0xE0 | 5;
    v52 = v15 | 2;
    v57 = 0;
    WebCore::ResourceRequestBase::RequestData::RequestData((uint64_t)v58, (uint64_t *)&v42);
    v17 = v53;
    v53 = 0u;
    v59 = v17;
    v60 = v54;
    v61 = v55;
    v62 = v56;
    v18 = v57;
    v54 = 0;
    v57 = 0;
    v63 = v18;
    v64 = 0;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)v65, (const WebCore::ResourceLoaderOptions *)v70);
    v65[72] = 0;
    v66 = 0;
    v67 = 0u;
    WebCore::CachedResourceRequest::splitFragmentIdentifierFromRequestURL((WebCore::ResourceRequest *)v58, &v68);
    v69 = 0;
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v42, v19);
    v21 = v38;
    v38 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        v21 = (WTF::StringImpl *)WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = (_DWORD **)(v6 + 72);
    v23 = *(_QWORD *)(v6 + 72);
    if (!v23 || !*(_DWORD *)(v23 + 4))
    {
      v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v24 || (v25 = *(_QWORD *)(v24 + 96)) == 0)
        v25 = WebCore::threadGlobalDataSlow(v21);
      v22 = *(_DWORD ***)(v25 + 32);
      if (!v22)
      {
        WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v25);
        v22 = *(_DWORD ***)(v25 + 32);
      }
    }
    v26 = *v22;
    if (v26)
      *v26 += 2;
    v27 = (WTF::StringImpl *)v67;
    *(_QWORD *)&v67 = v26;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v20);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (*((_BYTE *)a3 + 1) == 3)
      WebCore::CachedResourceRequest::updateForAccessControl((WebCore::CachedResourceRequest *)v58, *(WebCore::Document **)(*((_QWORD *)a2 + 9) + 8));
    WebCore::CachedResourceLoader::requestImage((WebCore::ResourceRequest *)v58, a2, 0, (uint64_t)&v42);
    if ((_DWORD)v46)
      v38 = 0;
    else
      WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)&v38, (const WebCore::CachedResourceHandleBase *)&v42);
    if (*(_BYTE *)(v6 + 64))
    {
      if (v38)
        v28 = (WebCore::CachedResource *)*((_QWORD *)v38 + 1);
      else
        v28 = 0;
      WebCore::CachedResourceHandleBase::setResource(v3, v28);
    }
    else
    {
      WebCore::CachedResourceHandleBase::CachedResourceHandleBase((WebCore::CachedResourceHandleBase *)v3, (const WebCore::CachedResourceHandleBase *)&v38);
      *(_BYTE *)(v6 + 64) = 1;
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v38, v29);
    if ((_DWORD)v46 != -1)
      (*(&off_1E33984A0 + v46))((int)&v41, (WebCore::CachedResourceHandleBase *)&v42);
    for (i = *(_QWORD *)(v6 + 88); i; i = *(_QWORD *)(i + 88))
      std::optional<WebCore::CachedResourceHandle<WebCore::CachedImage>>::operator=[abi:sn180100]((WebCore::CachedResourceHandleBase *)(i + 56), *(WebCore::CachedResource **)(v6 + 56), *(_BYTE *)(v6 + 64));
    WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v58, v30);
    WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v70, v32);
    if (*(_BYTE *)(v6 + 64))
      goto LABEL_43;
    this = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_63:
    __break(0xC471u);
    return this;
  }
LABEL_43:
  if (*v3)
    return *(_QWORD *)(*v3 + 8);
  else
    return 0;
}

__n128 WebCore::CSSImageValue::reresolvedURL@<Q0>(WebCore::CSSImageValue *this@<X0>, const WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  __n128 result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];

  v6 = (uint64_t *)((char *)this + 16);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    v7 = *(unsigned int *)(v5 + 4);
    v8 = (WTF::StringImpl *)(v7 | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32));
    v13[0] = *(WTF::StringImpl **)(v5 + 8);
    v13[1] = v8;
    if ((_DWORD)v7)
    {
      if (!WTF::StringView::startsWith())
      {
        if (*(v6 - 1) && WTF::StringImpl::startsWith())
        {
          v13[0] = 0;
          WTF::URL::invalidate((WTF::URL *)v13);
          WebCore::Document::completeURL(a2, v6 - 1, (uint64_t)v13, 0, (WTF::URL *)a3);
          v12 = v13[0];
          v13[0] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v11);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
        else
        {
          WebCore::Document::completeURL(a2, v6, (uint64_t)a2 + 848, 0, (WTF::URL *)a3);
        }
        return result;
      }
      v5 = *v6;
    }
  }
  if (v5)
    *(_DWORD *)v5 += 2;
  *(_QWORD *)a3 = v5;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)this + 24);
  result = *(__n128 *)((char *)this + 40);
  *(__n128 *)(a3 + 24) = result;
  return result;
}

void WebCore::CachedScriptFetcher::requestScriptWithCache(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, __int16 a6@<W5>, WebCore::CachedResourceHandleBase *a7@<X8>)
{
  uint64_t v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  __int16 v21;
  unsigned int v22;
  WebCore::CachedResourceHandleBase *v23;
  WTF::StringImpl *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  WebCore::CachedResourceHandleBase *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  char v36;
  _DWORD *v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WebCore::CachedResourceLoader *v44;
  void *v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF *v48;
  void *v49;
  WTF::StringImpl *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  WTF::StringImpl *v57;
  int v58;
  uint64_t *v59;
  char v60;
  WTF::StringImpl *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64[5];
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  char v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  _QWORD v79[25];
  WTF::StringImpl *v80;
  __int16 v81;
  WTF::StringImpl *v82;
  _BYTE v83[7];
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  char v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  _DWORD *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v14 = a2[85];
  if (!*(_BYTE *)(v14 + 245))
  {
    if ((*(_QWORD *)(v14 + 688) & 0x10000000000000) != 0)
      goto LABEL_3;
LABEL_64:
    *(_QWORD *)a7 = 0;
    return;
  }
  if (!*(_BYTE *)(v14 + 244))
    goto LABEL_64;
LABEL_3:
  v15 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(a2 + 24));
  v17 = v15;
  v59 = a4;
  if (v15)
  {
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 + 1, v15));
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    v21 = a6;
    v23 = a7;
    v19 = 1;
    goto LABEL_12;
  }
  if (!v15[37])
  {
LABEL_7:
    v19 = 1;
    goto LABEL_8;
  }
  WTF::String::trim();
  v50 = v61;
  if (v61)
  {
    if (*((_DWORD *)v61 + 1))
    {
      v79[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForScriptNonce;
      v79[1] = 0;
      v19 = WebCore::ContentSecurityPolicy::allPoliciesWithDispositionAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::String const&)const,WTF::String&>((uint64_t)v17, 0, (uint64_t)v79, (uint64_t)&v61);
      v50 = v61;
      v61 = 0;
      if (!v50)
        goto LABEL_8;
    }
    else
    {
      v19 = 0;
      v61 = 0;
    }
    if (*(_DWORD *)v50 == 2)
    {
      v56 = v19;
      WTF::StringImpl::destroy(v50, v16);
      v19 = v56;
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
    goto LABEL_8;
  }
  v19 = 0;
LABEL_8:
  if (!atomic_load(v17))
    goto LABEL_84;
  v21 = a6;
  do
    v22 = __ldaxr(v17);
  while (__stlxr(v22 - 1, v17));
  v23 = a7;
LABEL_12:
  {
    v58 = v19;
    WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
    v19 = v58;
  }
  *(_DWORD *)v83 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
  *(_DWORD *)&v83[3] = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options + 3);
  v24 = (WTF::StringImpl *)qword_1ECE90818;
  if (qword_1ECE90818)
    *(_DWORD *)qword_1ECE90818 += 2;
  v85 = xmmword_1ECE90820;
  v86 = *(_OWORD *)algn_1ECE90830;
  v25 = dword_1ECE90854;
  v88 = 0;
  v89 = 0;
  v87 = qword_1ECE90840;
  v90 = dword_1ECE90854;
  if (!dword_1ECE90854)
    goto LABEL_17;
  v57 = v24;
  if (dword_1ECE90854 >> 28)
  {
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x194361E10);
  }
  v51 = v19;
  v52 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
  v89 = v25;
  v88 = v52;
  v19 = v51;
  v24 = v57;
  if (dword_1ECE90854)
  {
    v53 = qword_1ECE90848;
    v54 = qword_1ECE90848 + 16 * dword_1ECE90854;
    do
    {
      v55 = *(_DWORD **)v53;
      if (*(_QWORD *)v53)
        *v55 += 2;
      *(_QWORD *)v52 = v55;
      *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
      v53 += 16;
      v52 += 16;
    }
    while (v53 != v54);
  }
LABEL_17:
  v91 = dword_1ECE90858;
  v92 = byte_1ECE9085C;
  LOBYTE(v93) = 0;
  v96 = 0;
  if (byte_1ECE90878)
  {
    v93 = word_1ECE90860;
    v26 = qword_1ECE90868;
    if (qword_1ECE90868)
      *(_DWORD *)qword_1ECE90868 += 2;
    v94 = v26;
    v27 = qword_1ECE90870;
    if (qword_1ECE90870)
      *(_DWORD *)qword_1ECE90870 += 2;
    v95 = v27;
    v96 = 1;
  }
  v97 = xmmword_1ECE90880;
  v28 = (WTF::StringImpl *)qword_1ECE90890;
  if (qword_1ECE90890)
    *(_DWORD *)qword_1ECE90890 += 2;
  if (v19)
    v29 = 0;
  else
    v29 = 256;
  v30 = *a5;
  v31 = v29 | *(_DWORD *)((_BYTE *)&v97 + 2) & 0xF9FFF6FF;
  *a5 = 0;
  v84 = v30;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v16);
    else
      *(_DWORD *)v24 -= 2;
  }
  v83[5] = *(_BYTE *)(a1 + 41);
  *(_DWORD *)((char *)&v97 + 2) = v31 | ((*(_BYTE *)(a1 + 42) & 3) << 25);
  v32 = *(_DWORD **)(a1 + 16);
  if (v32)
    *v32 += 2;
  v98 = v32;
  v33 = v23;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v16);
    else
      *(_DWORD *)v28 -= 2;
  }
  v34 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v34 += 2;
  v61 = v34;
  v35 = *(_OWORD *)(a3 + 24);
  v62 = *(_OWORD *)(a3 + 8);
  v63 = v35;
  v64[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v64);
  v65 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v66 = v79[0];
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0x10000;
  v36 = v71 & 0x80 | 4;
  v71 = v36;
  v72 = 0;
  v37 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v37 += 2;
    v36 = v71;
  }
  v73 = v37;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = v77 & 0xE0 | 5;
  v71 = v36 | 2;
  v78 = 0;
  WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v61, (WTF::StringImpl *)v83, (uint64_t)a2, v59, 0, (uint64_t)v79);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v61, v38);
  WebCore::upgradeInsecureResourceRequestIfNeeded((WebCore::ResourceRequest *)v79, (uint64_t)a2, 0);
  v40 = *(WTF::StringImpl **)(a1 + 24);
  if (v40)
    *(_DWORD *)v40 += 2;
  v41 = v80;
  v80 = v40;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, v39);
    else
      *(_DWORD *)v41 -= 2;
  }
  v81 = v21;
  v42 = *(WTF::StringImpl **)(a1 + 32);
  if (v42)
  {
    *(_DWORD *)v42 += 2;
    v43 = v82;
    v82 = v42;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v39);
      else
        *(_DWORD *)v43 -= 2;
    }
  }
  v44 = (WebCore::CachedResourceLoader *)a2[90];
  if (!v44)
    v44 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)a2, v39);
  ++*(_DWORD *)v44;
  WebCore::CachedResourceLoader::requestScript(v44, (WebCore::ResourceRequest *)v79, (uint64_t)&v61);
  v46 = v65;
  if ((_DWORD)v65)
  {
    *(_QWORD *)v33 = 0;
  }
  else
  {
    WebCore::CachedResourceHandleBase::CachedResourceHandleBase(v33, (const WebCore::CachedResourceHandleBase *)&v61);
    v46 = v65;
  }
  if (v46 != -1)
    (*(&off_1E33923E0 + v46))((int)&v60, (WebCore::CachedResourceHandleBase *)&v61);
  LODWORD(v65) = -1;
  if (*(_DWORD *)v44 == 1)
  {
    WebCore::CachedResourceLoader::~CachedResourceLoader(v44, v45);
    WTF::fastFree(v48, v49);
  }
  else
  {
    --*(_DWORD *)v44;
  }
  WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v79, (WTF::StringImpl *)v45);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v83, v47);
}

WebCore::CachedResourceHandleBase *WebCore::CachedResourceHandleBase::CachedResourceHandleBase(WebCore::CachedResourceHandleBase *this, const WebCore::CachedResourceHandleBase *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::CachedResourceHandleBase *v9;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    *(_QWORD *)this = v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v9 = this;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v9, (uint64_t)&v8);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::CachedResourceHandleBase *v9;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
    *(_QWORD *)this = v3;
    v5 = *(_QWORD *)(v3 + 8);
    if (v5)
    {
      v9 = this;
      ++*(_DWORD *)(v5 + 548);
      v6 = *(_QWORD *)(v5 + 488);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v5 + 464), (uint64_t *)&v9, (uint64_t)&v8);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  return this;
}

void WebCore::CachedResourceLoader::requestScript(_QWORD *a1@<X0>, WebCore::ResourceRequest *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19[10];
  unsigned int *v20;
  unsigned int **v21;
  WTF::StringImpl *v22[10];
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WebCore::CachedResourceLoader::requestResource(v22, a2, a1, (WTF::StringImpl *)3, 0, 0);
  if (!v23)
  {
    if (!v22[0])
      goto LABEL_4;
    v5 = *((_QWORD *)v22[0] + 1);
    if (!v5)
      goto LABEL_4;
    v7 = *(unsigned int **)(v5 + 8);
    if (v7
      || (v14 = *((_QWORD *)v22[0] + 1),
          v7 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10),
          *v7 = 1,
          *((_QWORD *)v7 + 1) = v14,
          v15 = *(unsigned int **)(v14 + 8),
          v18 = v14,
          *(_QWORD *)(v14 + 8) = v7,
          !v15))
    {
      do
LABEL_13:
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v20 = v7;
      v9 = *((_QWORD *)v7 + 1);
      if (!v9
        || (v21 = &v20, ++*(_DWORD *)(v9 + 548), (v10 = *(_QWORD *)(v9 + 488)) == 0)
        || !*(_QWORD *)(v10 + 8)
        || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v21, (uint64_t)v19), (v7 = v20) != 0))
      {
        do
          v11 = __ldaxr(v7);
        while (__stlxr(v11 + 1, v7));
        *(_QWORD *)a3 = v7;
        v12 = *((_QWORD *)v7 + 1);
        if (v12)
        {
          v21 = (unsigned int **)a3;
          ++*(_DWORD *)(v12 + 548);
          v13 = *(_QWORD *)(v12 + 488);
          if (v13)
          {
            if (*(_QWORD *)(v13 + 8))
              WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v12 + 464), (uint64_t *)&v21, (uint64_t)v19);
          }
        }
        goto LABEL_6;
      }
LABEL_5:
      *(_QWORD *)a3 = 0;
LABEL_6:
      *(_DWORD *)(a3 + 80) = 0;
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v4);
      goto LABEL_7;
    }
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (v17)
    {
LABEL_27:
      v7 = *(unsigned int **)(v18 + 8);
      if (!v7)
      {
LABEL_4:
        v20 = 0;
        goto LABEL_5;
      }
      goto LABEL_13;
    }
LABEL_30:
    atomic_store(1u, v15);
    WTF::fastFree((WTF *)v15, v4);
    goto LABEL_27;
  }
  if (v23 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_30;
  }
  makeUnexpected<WebCore::ResourceError &>((uint64_t)v19, (uint64_t)v22);
  std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected(a3, v19);
  WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v19, v6);
LABEL_7:
  if (v23 != -1)
    (*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
     + v23))((int)v19, (WebCore::CachedResourceHandleBase *)v22);
}

uint64_t *WebCore::Style::BuilderState::createStyleImage@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>, const WebCore::CSSValue *a3@<X1>)
{
  unsigned int v3;

  v3 = (*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800;
  if (v3 > 0x27FF)
  {
    if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800u) >= 0x5000)
    {
      if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800u) <= 0x77FF)
      {
        if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800u) > 0x67FF)
        {
          if (v3 == 28672)
          {
            return (uint64_t *)WebCore::CSSPrefixedLinearGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
          }
          else
          {
            if (v3 != 26624)
              goto LABEL_11;
            return (uint64_t *)WebCore::CSSDeprecatedRadialGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
          }
        }
        else
        {
          switch(v3)
          {
            case 0x6000u:
              return (uint64_t *)WebCore::CSSDeprecatedLinearGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
            case 0x5000u:
              return (uint64_t *)WebCore::CSSRadialGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
            case 0x5800u:
              return (uint64_t *)WebCore::CSSConicGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
            default:
              goto LABEL_11;
          }
        }
      }
      else if (v3 == 129024)
      {
        return WebCore::CSSImageSetValue::createStyleImage(a3, (WebCore::Style::BuilderState *)this, a1);
      }
      else
      {
        if (v3 != 30720)
          goto LABEL_11;
        return (uint64_t *)WebCore::CSSPrefixedRadialGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, (WebCore::Style::BuilderState **)a1);
      }
    }
    else if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800u) < 0x4000)
    {
      switch(v3)
      {
        case 0x3000u:
          return (uint64_t *)WebCore::CSSNamedImageValue::createStyleImage(a3, a1);
        case 0x3800u:
          return (uint64_t *)WebCore::CSSCrossfadeValue::createStyleImage((const WebCore::CSSValue **)a3, (WebCore::Style::BuilderState *)this, a1);
        case 0x2800u:
          return WebCore::CSSPaintImageValue::createStyleImage(a3, a1);
        default:
          goto LABEL_11;
      }
    }
    else
    {
      if (v3 != 18432)
      {
        if (v3 == 0x4000)
          return (uint64_t *)WebCore::CSSFilterImageValue::createStyleImage((const WebCore::CSSValue **)a3, (const WebCore::Document **)this, a1);
        goto LABEL_11;
      }
      return (uint64_t *)WebCore::CSSLinearGradientValue::createStyleImage((uint64_t)a3, (WebCore::Style::BuilderState *)this, a1);
    }
  }
  else
  {
    switch(v3)
    {
      case 0x800u:
        return (uint64_t *)WebCore::CSSImageValue::createStyleImage((WTF **)a3, (const WebCore::Document **)this, (WTF::StringImpl **)a1);
      case 0x1800u:
        return WebCore::CSSCursorImageValue::createStyleImage((const WebCore::CSSValue **)a3, (WebCore::Style::BuilderState *)this, a1);
      case 0x2000u:
        return (uint64_t *)WebCore::CSSCanvasValue::createStyleImage(a3, a1);
      default:
LABEL_11:
        *a1 = 0;
        return this;
    }
  }
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int *v38;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v7;
  v9 = (unsigned int *)(v6 + 32 * v8);
  result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if ((result & 1) == 0)
  {
    v36 = a3;
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = v9[6];
      if ((_DWORD)v13 == -1)
      {
        v33 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
        return (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v33, v34, v35);
      }
      v38 = (unsigned int *)&v37;
      result = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E32048A8[v13])(&v38, v9);
      if ((result & 1) != 0)
      {
        v11 = v9;
      }
      else
      {
        if (v9 == (unsigned int *)a2)
        {
          v9 = (unsigned int *)a2;
LABEL_49:
          v31 = *a1;
          if (*a1)
            v32 = *(unsigned int *)(v31 - 4);
          else
            v32 = 0;
          a3 = v36;
          v30 = 0;
          v29 = v31 + 32 * v32;
          goto LABEL_47;
        }
        v14 = v9[6];
        v15 = *(_DWORD *)(a2 + 24);
        v17 = v15 == (_DWORD)v14 && v15 != -1;
        if ((_DWORD)v14 == -1 || !v17)
        {
          v18 = v15 == -1;
          if ((_DWORD)v14 == -1)
            v19 = v18;
          else
            v19 = v17;
          if (v19)
            goto LABEL_49;
        }
        else
        {
          v38 = (unsigned int *)&v37;
          result = ((uint64_t (*)(unsigned int **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v14])(&v38, v9, a2);
          if ((result & 1) != 0)
            goto LABEL_49;
        }
      }
      v8 = ((_DWORD)v8 + v12) & v7;
      v9 = (unsigned int *)(v6 + 32 * v8);
      result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
      ++v12;
    }
    while (!(_DWORD)result);
    a3 = v36;
    if (v11)
    {
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v9 = v11;
    }
  }
  v20 = v9[6];
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 == -1)
      goto LABEL_32;
  }
  else if ((_DWORD)v21 == -1)
  {
    result = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E3204898[v20])(&v38, v9);
    v9[6] = -1;
    goto LABEL_32;
  }
  v38 = v9;
  result = ((uint64_t (*)(unsigned int **, unsigned int *, uint64_t))off_1E3204BF8[v21])(&v38, v9, a2);
LABEL_32:
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_39;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_42:
      result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v28, (uint64_t)v9);
      v9 = (unsigned int *)result;
      v24 = *a1;
      if (*a1)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_46;
    }
LABEL_39:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_42;
  }
LABEL_46:
  v29 = v24 + 32 * v27;
  v30 = 1;
LABEL_47:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v30;
  return result;
}

{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int *v38;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, 8u, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v7;
  v9 = (unsigned int *)(v6 + 32 * v8);
  result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if ((result & 1) == 0)
  {
    v36 = a3;
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = v9[6];
      if ((_DWORD)v13 == -1)
      {
        v33 = std::__throw_bad_variant_access[abi:sn180100]();
        return WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData const&>(v33, v34, v35);
      }
      v38 = (unsigned int *)&v37;
      result = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E33D84A0[v13])(&v38, v9);
      if ((result & 1) != 0)
      {
        v11 = v9;
      }
      else
      {
        if (v9 == (unsigned int *)a2)
        {
          v9 = (unsigned int *)a2;
LABEL_49:
          v31 = *a1;
          if (*a1)
            v32 = *(unsigned int *)(v31 - 4);
          else
            v32 = 0;
          a3 = v36;
          v30 = 0;
          v29 = v31 + 32 * v32;
          goto LABEL_47;
        }
        v14 = v9[6];
        v15 = *(_DWORD *)(a2 + 24);
        v17 = v15 == (_DWORD)v14 && v15 != -1;
        if ((_DWORD)v14 == -1 || !v17)
        {
          v18 = v15 == -1;
          if ((_DWORD)v14 == -1)
            v19 = v18;
          else
            v19 = v17;
          if (v19)
            goto LABEL_49;
        }
        else
        {
          v38 = (unsigned int *)&v37;
          result = ((uint64_t (*)(unsigned int **, unsigned int *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v14])(&v38, v9, a2);
          if ((result & 1) != 0)
            goto LABEL_49;
        }
      }
      v8 = ((_DWORD)v8 + v12) & v7;
      v9 = (unsigned int *)(v6 + 32 * v8);
      result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
      ++v12;
    }
    while (!(_DWORD)result);
    a3 = v36;
    if (v11)
    {
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      --*(_DWORD *)(*a1 - 16);
      v9 = v11;
    }
  }
  v20 = v9[6];
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
  {
    if ((_DWORD)v21 == -1)
      goto LABEL_32;
  }
  else if ((_DWORD)v21 == -1)
  {
    result = ((uint64_t (*)(unsigned int **, unsigned int *))off_1E33D84D0[v20])(&v38, v9);
    v9[6] = -1;
    goto LABEL_32;
  }
  v38 = v9;
  result = ((uint64_t (*)(unsigned int **, unsigned int *, uint64_t))off_1E33D84E0[v21])(&v38, v9, a2);
LABEL_32:
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a1;
  if (*a1)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
      goto LABEL_39;
  }
  else if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v28 = 8;
LABEL_42:
      result = (uint64_t)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v28, (uint64_t)v9);
      v9 = (unsigned int *)result;
      v24 = *a1;
      if (*a1)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_46;
    }
LABEL_39:
    v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
    goto LABEL_42;
  }
LABEL_46:
  v29 = v24 + 32 * v27;
  v30 = 1;
LABEL_47:
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v29;
  *(_BYTE *)(a3 + 16) = v30;
  return result;
}

uint64_t (**WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3))()
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**result)();
  _Unwind_Exception *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v33)();
  char v34;
  char *v35;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 32 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = off_1E32048A8;
    v30 = v4;
    do
    {
      v14 = v4 + 32 * v11;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 == -1)
      {
LABEL_33:
        v28 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:sn180100]();
        v29 = *((unsigned int *)v13 + 6);
        if ((_DWORD)v29 != -1)
          ((void (*)(char **, uint64_t (**)()))off_1E3204898[v29])(&v35, v13);
        *((_DWORD *)v13 + 6) = -1;
        _Unwind_Resume(v28);
      }
      v35 = &v34;
      if ((((uint64_t (*)(char **, uint64_t))off_1E32048A8[v15])(&v35, v4 + 32 * v11) & 1) == 0)
      {
        if (WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 32 * v11)))
        {
          v16 = *(unsigned int *)(v14 + 24);
          if ((_DWORD)v16 != -1)
            ((void (*)(char **, uint64_t))off_1E3204898[v16])(&v35, v4 + 32 * v11);
          *(_DWORD *)(v14 + 24) = -1;
        }
        else
        {
          v33 = v12;
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(v4 + 32 * v11);
          v20 = 0;
          do
          {
            v21 = v19 & v18;
            v13 = (uint64_t (**)())(v17 + 32 * v21);
            v22 = *((unsigned int *)v13 + 6);
            if ((_DWORD)v22 == -1)
              goto LABEL_33;
            v35 = &v34;
            v23 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData6isNullEvEUlRKNS9_5TupleEE_JZNKS9_6isNullEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v22])(&v35, v17 + 32 * v21);
            v19 = ++v20 + v21;
          }
          while (!v23);
          v24 = *((unsigned int *)v13 + 6);
          if ((_DWORD)v24 != -1)
            ((void (*)(char **, uint64_t))off_1E3204898[v24])(&v35, v17 + 32 * v21);
          *(_BYTE *)v13 = 0;
          *((_DWORD *)v13 + 6) = -1;
          v25 = *(unsigned int *)(v14 + 24);
          v4 = v30;
          if ((_DWORD)v25 != -1)
          {
            ((void (*)(char *, uint64_t (**)(), uint64_t))off_1E3204BE8[v25])(&v34, v13, v14);
            *((_DWORD *)v13 + 6) = v25;
            v26 = *(unsigned int *)(v14 + 24);
            if ((_DWORD)v26 != -1)
              ((void (*)(char **, uint64_t))off_1E3204898[v26])(&v35, v14);
          }
          *(_DWORD *)(v14 + 24) = -1;
          v12 = v33;
          if (v14 == a3)
            v12 = v13;
          v13 = off_1E32048A8;
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t *WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(uint64_t *a1, unsigned int **a2)
{
  unsigned int *v3;
  int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16[2];

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = *(v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(v3 - 3));
      v8 = WTF::fastMalloc((WTF *)((32 * v7) | 0x10));
      v9 = v8;
      v10 = v8 + 16;
      if (v7)
        bzero((void *)(v8 + 16), 32 * v7);
      *a1 = v10;
      *(_DWORD *)(v9 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v11 = (unsigned int *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(a2);
      v12 = v11;
      v16[0] = v11;
      v16[1] = v13;
      if (*a2)
        v14 = &(*a2)[8 * *(*a2 - 1)];
      else
        v14 = 0;
      if (v14 != v11)
      {
        do
        {
          v15 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(a1, (uint64_t)v12);
          WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WebCore::SecurityOriginData const&>(v15, (uint64_t)v12, (uint64_t)v12);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::operator++(v16);
          v12 = v16[0];
        }
        while (v16[0] != v14);
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char *v10;

  v1 = *a1;
  if (!*a1)
    return 0;
  v4 = *(v1 - 1);
  v5 = &v1[8 * v4];
  if (!*(v1 - 3))
    return (uint64_t)&v1[8 * v4];
  if (!(_DWORD)v4)
    return (uint64_t)v1;
  v6 = 32 * v4;
  while ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v1) & 1) != 0)
  {
LABEL_11:
    v1 += 8;
    v6 -= 32;
    if (!v6)
      return (uint64_t)v5;
  }
  v7 = v1[6];
  if ((_DWORD)v7 != -1)
  {
    v10 = &v9;
    if (!((unsigned int (*)(char **, unsigned int *))off_1E33D84A0[v7])(&v10, v1))
      return (uint64_t)v1;
    goto LABEL_11;
  }
  v8 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(v8);
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  int isNull;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    isNull = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v2 + 32 * v6));
    v4 = ++v5 + v6;
  }
  while (!isNull);
  return v2 + 32 * v6;
}

uint64_t WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::operator++(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  WebCore::RenderTable *v7;
  char v8;
  char *v9;

  v2 = a1[1];
  v3 = *a1 + 8;
  *a1 = v3;
  if (v3 == v2)
    return (uint64_t)a1;
  while ((WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v3) & 1) != 0)
  {
LABEL_5:
    v5 = a1[1];
    v3 = *a1 + 8;
    *a1 = v3;
    if (v3 == v5)
      return (uint64_t)a1;
  }
  v4 = v3[6];
  if ((_DWORD)v4 != -1)
  {
    v9 = &v8;
    if (!((unsigned int (*)(char **, unsigned int *))off_1E33D84A0[v4])(&v9, v3))
      return (uint64_t)a1;
    goto LABEL_5;
  }
  v7 = (WebCore::RenderTable *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RenderTable::layout(v7);
}

uint64_t WebCore::RenderTable::layout(WebCore::RenderTable *this)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  void *v12;
  char *v13;
  char *v14;
  WebCore::RenderTableCaption *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  float v35;
  double v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WebCore::RenderTable *v78;
  uint64_t v79;
  unint64_t j;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  char *v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  int v92;
  unint64_t v93;
  int v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  char v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  int *v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  int *v119;
  int v120;
  int v121;
  int v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  unint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  unint64_t v148;
  int v149;
  unint64_t k;
  WebCore::RenderTableCaption *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  unsigned int *v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int *v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  WebCore::RenderStyle *v195;
  int v196;
  _DWORD *v197;
  unsigned int v198;
  unsigned int v199;
  int *v200;
  int v201;
  unsigned int v202;
  int v203;
  char *v204;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  _BOOL4 v208;
  WebCore::LocalFrameViewLayoutContext *v209;
  int v210;
  __int128 v211;
  int *v212;
  unsigned int v213;
  unsigned __int8 v214;
  char v215;
  char v216;
  unsigned int v217;
  unsigned __int8 v218;
  char v219;
  char v220;
  int v221;
  int v222;
  _BYTE v223[60];
  unsigned int v224;
  unsigned __int8 v225;
  char v226;
  char v227;
  char v228;

  result = WebCore::RenderBlock::simplifiedLayout(this);
  if ((result & 1) != 0)
    return result;
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, v3);
  *((_DWORD *)this + 85) = WebCore::RenderTable::calcBorderStart(this);
  *((_DWORD *)this + 86) = WebCore::RenderTable::calcBorderEnd(this);
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v223, this, 0, 0, 1);
  v4 = *((_QWORD *)this + 19);
  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x20000) != 0)
  {
    v78 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v78 = *(WebCore::RenderTable **)(*((_QWORD *)this + 4) + 8);
    v79 = *((_QWORD *)v78 + 11);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 32) + 40) + 20))
      goto LABEL_152;
    v172 = *(_QWORD **)(v79 + 40);
    if (v172[41] || v172[38] || v172[39] || v172[40] || (v5 & 0x100000) != 0)
      goto LABEL_152;
  }
  if ((v5 & 0x4000) != 0 && *(_BYTE *)WebCore::RenderObject::rareData(this))
  {
LABEL_152:
    v7 = 1;
  }
  else
  {
    v6 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    v196 = 2;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_8;
      case 3:
      case 5:
        v6 = 3;
        goto LABEL_8;
      case 4:
        goto LABEL_9;
      default:
        v6 = 0;
LABEL_8:
        v196 = v6;
LABEL_9:
        v7 = (v196 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  *(_QWORD *)&v211 = v4;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v209 = (WebCore::LocalFrameViewLayoutContext *)(v8 + 336);
  v9 = WebCore::LocalFrameViewLayoutContext::pushLayoutState(v8 + 336, this, (int *)&v211, 0, 0);
  if (v7 && v9)
    ++*(_DWORD *)(v8 + 492);
  v210 = v9;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v10 = (char *)this + 164;
  else
    v10 = (char *)this + 160;
  v11 = *(_DWORD *)v10;
  if (((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 1592))(this) & 1) != 0
    || (v48 = *((_QWORD *)this + 4)) != 0
    && (v49 = *(_BYTE **)(v48 + 8)) != 0
    && (v49[45] & 0x40) != 0
    && (*(unsigned int (**)(_BYTE *, WebCore::RenderTable *))(*(_QWORD *)v49 + 1704))(v49, this))
  {
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v13 = (char *)this + 160;
    else
      v13 = (char *)this + 164;
    *(_DWORD *)v13 = 0;
  }
  WebCore::RenderTable::updateLogicalWidth(this, v12);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v14 = (char *)this + 164;
  else
    v14 = (char *)this + 160;
  if (*(_DWORD *)v14 != v11 && *((_DWORD *)this + 61))
  {
    v174 = 0;
    do
    {
      v175 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * v174);
      if (v175)
        v176 = *(_QWORD *)(v175 + 8);
      else
        v176 = 0;
      v177 = *(_DWORD *)(v176 + 20);
      if ((v177 & 8) == 0)
      {
        *(_DWORD *)(v176 + 20) = v177 | 8;
        if ((v177 & 0x8000) != 0)
          WebCore::RenderObject::setLayerNeedsFullRepaint(v176);
      }
      ++v174;
    }
    while (v174 < *((unsigned int *)this + 61));
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 37) + 40))(*((_QWORD *)this + 37));
  v16 = *((unsigned int *)this + 61);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v152 = (uint64_t *)*((_QWORD *)this + 29);
    v153 = *((unsigned int *)this + 61);
    while (1)
    {
      v154 = *v152;
      if (*v152)
      {
        v155 = *(_DWORD **)(v154 + 8);
        if ((v155[30] & 6) != 2)
          goto LABEL_303;
      }
      else if ((MEMORY[0x78] & 6) != 2)
      {
        v155 = 0;
LABEL_303:
        v118 = ((v155[31] >> 13) & 6u) - 2 >= 4;
        v156 = v155 + 40;
        v157 = v155 + 41;
        if (v118)
          v156 = v157;
        v158 = *(_QWORD *)(v154 + 8);
        v159 = (unsigned __int16)*(_DWORD *)(v158 + 124) >> 13;
        if ((v159 - 1) > 4)
          v160 = 0;
        else
          v160 = qword_1969FCEE8[v159 - 1];
        v161 = *v156;
        v162 = v158 + 168;
        v163 = *(_DWORD *)(v162 + 4 * v160);
        v90 = __OFADD__(v161, v163);
        v164 = v161 + v163;
        v165 = (v161 >> 31) + 0x7FFFFFFF;
        if (!v90)
          v165 = v164;
        v166 = v159 - 1;
        if (v166 > 4)
          v167 = 2;
        else
          v167 = qword_1969FCF10[v166];
        v168 = *(_DWORD *)(v162 + 4 * v167);
        v90 = __OFADD__(v165, v168);
        v169 = v165 + v168;
        if (v90)
          v169 = (v165 >> 31) + 0x7FFFFFFF;
        v90 = __OFADD__(v17, v169);
        v170 = v17 + v169;
        if (v90)
          v17 = (v17 >> 31) + 0x7FFFFFFF;
        else
          v17 = v170;
      }
      ++v152;
      if (!--v153)
        goto LABEL_25;
    }
  }
  v17 = 0;
LABEL_25:
  v18 = *((_DWORD *)this + 31);
  v19 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v22 + 47))
  {
    v21 = i | (v19 << 32);
    if (!v21 || (v22 = *(_QWORD *)(v21 + 8)) == 0)
    {
      v23 = 0;
      goto LABEL_37;
    }
    if ((*(_BYTE *)(v22 + 45) & 2) == 0)
      break;
    v19 = *(unsigned __int8 *)(v22 + 51);
  }
  v23 = 0;
LABEL_30:
  v24 = *(unsigned __int8 *)(v22 + 46);
  if (v24 == 40)
  {
    v185 = (int *)(v22 + 16);
    ++*(_DWORD *)(v22 + 16);
    if ((*((_BYTE *)this + 328) & 0x10) != 0)
    {
      v186 = *(_DWORD *)(v22 + 20);
      if ((v186 & 0x20) == 0)
        *(_DWORD *)(v22 + 20) = v186 | 0x20;
    }
    WebCore::RenderElement::layoutIfNeeded(v22);
    v187 = WebCore::RenderTableSection::calcRowLogicalHeight((WebCore::RenderTableSection *)v22);
    if (__OFADD__(v23, v187))
      v23 = (v23 >> 31) + 0x7FFFFFFF;
    else
      v23 += v187;
    if ((v18 & 4) != 0)
      WebCore::RenderTableSection::recalcOuterBorder((WebCore::RenderTableSection *)v22);
    v188 = *v185;
    if (!*v185)
    {
      __break(0xC471u);
      JUMPOUT(0x19436404CLL);
    }
    goto LABEL_408;
  }
  if (v24 == 38)
  {
    v185 = (int *)(v22 + 16);
    ++*(_DWORD *)(v22 + 16);
    WebCore::RenderElement::layoutIfNeeded(v22);
    v188 = *(_DWORD *)(v22 + 16);
    if (!v188)
    {
      __break(0xC471u);
      JUMPOUT(0x194363DF0);
    }
LABEL_408:
    *v185 = v188 - 1;
  }
  while (1)
  {
    v25 = *(unsigned int *)(v22 + 47);
    if (!(v25 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)))
      break;
    v22 = *(_QWORD *)((v25 | ((unint64_t)*(unsigned __int8 *)(v22 + 51) << 32)) + 8);
    if (!v22)
      break;
    if ((*(_BYTE *)(v22 + 45) & 2) == 0)
      goto LABEL_30;
  }
  v16 = *((unsigned int *)this + 61);
LABEL_37:
  v208 = v7;
  v206 = v8;
  if (!v16)
  {
    v26 = 0;
    v27 = *((_DWORD *)this + 31);
    goto LABEL_39;
  }
  for (j = 0; j < v16; ++j)
  {
    v15 = *(WebCore::RenderTableCaption **)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * j) + 8);
    if ((*((_DWORD *)v15 + 30) & 6) != 2)
    {
      WebCore::RenderTable::layoutCaption(this, v15);
      v16 = *((unsigned int *)this + 61);
    }
  }
  v27 = *((_DWORD *)this + 31);
  if (!v16)
    goto LABEL_168;
  if (((v27 >> 13) & 6) - 2 <= 3)
    LODWORD(v16) = *((_DWORD *)this + 40);
  else
    LODWORD(v16) = *((_DWORD *)this + 41);
  if ((_DWORD)v16 == v17)
  {
    LODWORD(v16) = 0;
LABEL_168:
    v26 = 0;
    goto LABEL_39;
  }
  if (v17 < (int)v16)
    LODWORD(v16) = v17;
  v26 = 1;
LABEL_39:
  v207 = v16;
  if ((v27 & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, v15);
    v28 = WebCore::RenderTable::outerBorderBefore(this);
  }
  else
  {
    v28 = WebCore::RenderBlock::borderBefore(this);
  }
  v30 = v28;
  if ((v18 & 4) != 0)
    v31 = 0;
  else
    v31 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 960))(this);
  v32 = v30 + v31;
  if (__OFADD__(v30, v31))
    v32 = (v30 >> 31) + 0x7FFFFFFF;
  v33 = *((_DWORD *)this + 31);
  if ((v33 & 4) != 0)
  {
    if ((*((_BYTE *)this + 328) & 8) != 0)
      WebCore::RenderTable::recalcSections(this, v29);
    v37 = WebCore::RenderTable::outerBorderAfter(this, v29);
  }
  else
  {
    v195 = (WebCore::RenderTable *)((char *)this + 80);
    switch((unsigned __int16)v33 >> 13)
    {
      case 1:
        v35 = WebCore::RenderStyle::borderTopWidth(v195);
        break;
      case 2:
      case 4:
        v35 = WebCore::RenderStyle::borderRightWidth(v195);
        break;
      case 3:
      case 5:
        v35 = WebCore::RenderStyle::borderLeftWidth(v195);
        break;
      default:
        v34 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
        v35 = 0.0;
        if ((*(_BYTE *)(v34 + 196) & 0xE) != 0)
        {
          v171 = *(_QWORD *)(v34 + 200);
          if (*(_BYTE *)(v171 + 5) && *(_BYTE *)(v171 + 68) == 4)
          {
            if (*(_BYTE *)(v171 + 70))
              v35 = *(float *)(v171 + 64);
            else
              v35 = (float)*(int *)(v171 + 64);
          }
          else
          {
            v35 = *(float *)(v34 + 192);
          }
        }
        break;
    }
    v36 = v35 * 64.0;
    if (v36 >= 2147483650.0)
    {
      v37 = 0x7FFFFFFF;
    }
    else if (v36 <= -2147483650.0)
    {
      v37 = 0x80000000;
    }
    else
    {
      v37 = (int)v36;
    }
  }
  if ((v18 & 4) != 0)
    v38 = 0;
  else
    v38 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 968))(this);
  v39 = v37 + v38;
  if (__OFADD__(v37, v38))
    v39 = (v37 >> 31) + 0x7FFFFFFF;
  v222 = v39;
  v40 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  if (v40 < 4)
    v41 = (char *)this + 160;
  else
    v41 = (char *)this + 164;
  v42 = *(_DWORD *)v41;
  v43 = *(_DWORD *)v41 + v32;
  if (__OFADD__(v42, v32))
    v43 = (v42 >> 31) + 0x7FFFFFFF;
  if (v40 < 4)
    v44 = (char *)this + 160;
  else
    v44 = (char *)this + 164;
  *(_DWORD *)v44 = v43;
  if ((*((_DWORD *)this + 5) & 0x1800000) != 0x1000000)
  {
    WebCore::RenderBox::updateLogicalHeight(this);
    v40 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  }
  v221 = 0;
  v45 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (v40 < 4)
    v46 = v45 + 4;
  else
    v46 = v45 + 12;
  *(float *)&v224 = 0.0;
  v227 = 0;
  v225 = *(_BYTE *)(v46 + 4);
  v47 = v225;
  v226 = *(_BYTE *)(v46 + 5);
  if (v225 - 2 >= 9)
  {
    if (v225 == 11)
    {
      v224 = *(unsigned int *)v46;
      WebCore::Length::ref((int *)&v224);
      v47 = v225;
    }
  }
  else
  {
    v227 = *(_BYTE *)(v46 + 6);
    v224 = *(unsigned int *)v46;
  }
  if ((v47 - 7) < 4)
    goto LABEL_78;
  if ((v47 - 3) >= 2)
  {
    if (v47 != 11)
      goto LABEL_79;
LABEL_78:
    v221 = WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight(this, (const WebCore::Length *)&v224);
    goto LABEL_79;
  }
  if (!v227)
  {
    if ((int)v224 < 1)
      goto LABEL_79;
    goto LABEL_78;
  }
  if (*(float *)&v224 > 0.0)
    goto LABEL_78;
LABEL_79:
  v50 = WebCore::RenderBox::overridingLogicalHeight(this);
  if ((v50 & 0xFF00000000) != 0)
  {
    v189 = v50 - v222;
    if (__OFSUB__((_DWORD)v50, v222))
      v189 = (v50 >> 31) + 0x7FFFFFFF;
    v190 = WebCore::RenderTable::sumCaptionsLogicalHeight((uint64_t)this);
    v191 = v189 - v190;
    if (__OFSUB__(v189, v190))
      v191 = (v189 >> 31) + 0x7FFFFFFF;
    if (v221 > v191)
      v191 = v221;
    v221 = v191;
  }
  v51 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v52 = v51 + 28;
  else
    v52 = v51 + 44;
  *(float *)&v217 = 0.0;
  v220 = 0;
  v218 = *(_BYTE *)(v52 + 4);
  v53 = v218;
  v219 = *(_BYTE *)(v52 + 5);
  if (v218 - 2 >= 9)
  {
    if (v218 == 11)
    {
      v217 = *(unsigned int *)v52;
      WebCore::Length::ref((int *)&v217);
      v53 = v218;
    }
  }
  else
  {
    v220 = *(_BYTE *)(v52 + 6);
    v217 = *(unsigned int *)v52;
  }
  if ((v53 - 3) < 2)
  {
    if (v220)
    {
      if (*(float *)&v217 < 0.0)
        goto LABEL_97;
    }
    else if ((v217 & 0x80000000) != 0)
    {
      goto LABEL_97;
    }
  }
  else if (v53 != 11 && v53 != 9)
  {
    goto LABEL_97;
  }
  v54 = WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight(this, (const WebCore::Length *)&v217);
  v55 = v221;
  if (v54 < v221)
    v55 = v54;
  v221 = v55;
LABEL_97:
  v56 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v57 = v56 + 20;
  else
    v57 = v56 + 36;
  *(float *)&v213 = 0.0;
  v216 = 0;
  v214 = *(_BYTE *)(v57 + 4);
  v58 = v214;
  v215 = *(_BYTE *)(v57 + 5);
  if (v214 - 2 >= 9)
  {
    if (v214 == 11)
    {
      v213 = *(unsigned int *)v57;
      WebCore::Length::ref((int *)&v213);
      v58 = v214;
    }
  }
  else
  {
    v216 = *(_BYTE *)(v57 + 6);
    v213 = *(unsigned int *)v57;
  }
  if (v58 <= 0xA && ((1 << v58) & 0x580) != 0)
  {
    *(_DWORD *)((char *)&v211 + 3) = 0;
    LODWORD(v211) = 0;
    WebCore::Length::operator=(&v213, (unsigned int *)&v211);
    if (BYTE4(v211) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v211);
    }
    v58 = v214;
  }
  if (v58 - 7 >= 4)
  {
    if (v58 - 3 >= 2)
    {
      if (v58 != 11)
        goto LABEL_114;
    }
    else if (v216)
    {
      if (*(float *)&v213 < 0.0)
        goto LABEL_114;
    }
    else if ((v213 & 0x80000000) != 0)
    {
      goto LABEL_114;
    }
  }
  v59 = WebCore::RenderTable::convertStyleLogicalHeightToComputedHeight(this, (const WebCore::Length *)&v213);
  v60 = v221;
  if (v221 <= v59)
    v60 = v59;
  v221 = v60;
LABEL_114:
  v61 = v221 - v23;
  if (__OFSUB__(v221, v23))
    v61 = (v221 >> 31) + 0x7FFFFFFF;
  if (v61 >= 1)
  {
    v69 = *((_QWORD *)this + 36);
    if (v69)
    {
      v70 = *(_QWORD *)(v69 + 8);
      if (v70)
        WebCore::RenderTableSection::distributeExtraLogicalHeightToRows(v70, v61);
    }
  }
  v62 = *((_QWORD *)this + 34);
  if (v62 && (v71 = *(_QWORD *)(v62 + 8)) != 0
    || (v63 = *((_QWORD *)this + 36)) != 0 && (v71 = *(_QWORD *)(v63 + 8)) != 0)
  {
    while (1)
    {
LABEL_133:
      WebCore::RenderTableSection::layoutRows((WebCore::RenderTableSection *)v71);
      if ((*((_BYTE *)this + 328) & 8) != 0)
        WebCore::RenderTable::recalcSections(this, v72);
      v64 = *((_QWORD *)this + 35);
      v73 = v64 ? *(_QWORD *)(v64 + 8) : 0;
      v62 = *((_QWORD *)this + 34);
      if (v73 == v71)
        break;
      if (v62)
        v74 = *(_QWORD *)(v62 + 8);
      else
        v74 = 0;
      if (v74 == v71)
      {
        v75 = *((unsigned __int8 *)this + 68);
        v76 = *((unsigned int *)this + 16);
      }
      else
      {
        v75 = *(unsigned __int8 *)(v71 + 51);
        v76 = *(unsigned int *)(v71 + 47);
      }
      v77 = v76 | (v75 << 32);
      if (!v77)
        goto LABEL_120;
      v71 = *(_QWORD *)(v77 + 8);
      if (!v71)
        goto LABEL_120;
      if (v62)
      {
        if (v64)
        {
          while (*(_BYTE *)(v71 + 46) != 40 || *(_QWORD *)(v62 + 8) == v71 || *(_QWORD *)(v64 + 8) == v71)
          {
            v183 = *(unsigned int *)(v71 + 47);
            if (v183 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32))
            {
              v71 = *(_QWORD *)((v183 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32)) + 8);
              if (v71)
                continue;
            }
            goto LABEL_120;
          }
        }
        else
        {
          while (*(_BYTE *)(v71 + 46) != 40 || *(_QWORD *)(v62 + 8) == v71)
          {
            v180 = *(unsigned int *)(v71 + 47);
            if (v180 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32))
            {
              v71 = *(_QWORD *)((v180 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32)) + 8);
              if (v71)
                continue;
            }
            goto LABEL_120;
          }
        }
      }
      else if (v64)
      {
        while (*(_BYTE *)(v71 + 46) != 40 || *(_QWORD *)(v64 + 8) == v71)
        {
          v181 = *(unsigned int *)(v71 + 47);
          if (v181 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32))
          {
            v71 = *(_QWORD *)((v181 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32)) + 8);
            if (v71)
              continue;
          }
          goto LABEL_120;
        }
      }
      else
      {
        while (*(_BYTE *)(v71 + 46) != 40)
        {
          v178 = *(unsigned int *)(v71 + 47);
          if (v178 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32))
          {
            v71 = *(_QWORD *)((v178 | ((unint64_t)*(unsigned __int8 *)(v71 + 51) << 32)) + 8);
            if (v71)
              continue;
          }
          goto LABEL_120;
        }
      }
    }
  }
  else
  {
    v64 = *((_QWORD *)this + 35);
LABEL_120:
    if (v64)
    {
      v71 = *(_QWORD *)(v64 + 8);
      if (v71)
        goto LABEL_133;
    }
  }
  if (v62 && *(_QWORD *)(v62 + 8)
    || (v65 = *((_QWORD *)this + 36)) != 0 && *(_QWORD *)(v65 + 8)
    || v64 && *(_QWORD *)(v64 + 8)
    || v221 <= v23
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3384) == 2)
  {
    v68 = 1;
  }
  else
  {
    *(_QWORD *)&v211 = this;
    *((_QWORD *)&v211 + 1) = &v222;
    v212 = &v221;
    v66 = WebCore::RenderTable::layout(void)::$_0::operator()((uint64_t)&v211);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v67 = (char *)this + 160;
    else
      v67 = (char *)this + 164;
    v68 = 0;
    *(_DWORD *)v67 = v66;
  }
  if ((*((_BYTE *)this + 123) & 4) != 0)
  {
    v81 = *((_DWORD *)this + 86);
    if ((v18 & 4) != 0)
      goto LABEL_175;
    v105 = 123;
LABEL_220:
    v106 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 8 * v105))(this);
    if (__OFADD__(v81, v106))
      v81 = (v81 >> 31) + 0x7FFFFFFF;
    else
      v81 += v106;
    goto LABEL_175;
  }
  v81 = *((_DWORD *)this + 85);
  if ((v18 & 4) == 0)
  {
    v105 = 122;
    goto LABEL_220;
  }
LABEL_175:
  v82 = *((_QWORD *)this + 34);
  if (v82 && (v107 = *(_QWORD *)(v82 + 8)) != 0
    || (v83 = *((_QWORD *)this + 36)) != 0 && (v107 = *(_QWORD *)(v83 + 8)) != 0
    || (v84 = *((_QWORD *)this + 35)) != 0 && (v107 = *(_QWORD *)(v84 + 8)) != 0)
  {
    v85 = 0;
    while (1)
    {
      if ((v26 & 1) != 0)
      {
        v111 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
        v108 = ((*(_DWORD *)(v107 + 124) >> 13) & 6) - 2;
        v26 = 1;
      }
      else
      {
        v108 = ((*(_DWORD *)(v107 + 124) >> 13) & 6) - 2;
        v109 = (int *)(v108 < 4 ? v107 + 152 : v107 + 156);
        v110 = *v109;
        v111 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
        v112 = v111 <= 3 ? *((_DWORD *)this + 40) : *((_DWORD *)this + 41);
        if (v110 == v112)
        {
          v26 = 0;
        }
        else
        {
          v131 = (int *)(v108 < 4 ? v107 + 152 : v107 + 156);
          v132 = *(_QWORD *)(v107 + 192);
          if (v111 < 4)
          {
            if (v132)
              v132 = *(_QWORD *)(v132 + 20);
          }
          else
          {
            if (v132)
              v132 = *(_QWORD *)(v132 + 20);
            v132 >>= 32;
          }
          v133 = *v131;
          if (v133 < (int)v112)
            v112 = v133;
          v90 = __OFADD__(v112, (_DWORD)v132);
          v134 = v112 + v132;
          v135 = (v112 >> 31) + 0x7FFFFFFF;
          if (!v90)
            v135 = v134;
          v207 = v135;
          v26 = 1;
        }
      }
      if (v111 >= 4)
        v113 = (char *)this + 164;
      else
        v113 = (char *)this + 160;
      v114 = v81 | ((unint64_t)*(unsigned int *)v113 << 32);
      v115 = __ROR8__(v114, 32);
      if (v108 <= 3)
        v114 = v115;
      *(_QWORD *)(v107 + 152) = v114;
      v116 = 164;
      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
        v116 = 160;
      v117 = *(_DWORD *)((char *)this + v116);
      v118 = v108 >= 4;
      v119 = (int *)(v107 + 160);
      if (v118)
        v119 = (int *)(v107 + 164);
      v120 = *v119;
      v90 = __OFADD__(v117, v120);
      v121 = v117 + v120;
      v122 = (v117 >> 31) + 0x7FFFFFFF;
      if (v90)
        v121 = v122;
      *(_DWORD *)((char *)this + v116) = v121;
      WebCore::RenderBox::addVisualEffectOverflow((WebCore::RenderBox *)v107);
      if ((*((_BYTE *)this + 328) & 8) != 0)
        WebCore::RenderTable::recalcSections(this, v123);
      v124 = *((_QWORD *)this + 35);
      v125 = v124 ? *(_QWORD *)(v124 + 8) : 0;
      ++v85;
      if (v125 == v107)
        break;
      v126 = *((_QWORD *)this + 34);
      if (v126)
        v127 = *(_QWORD *)(v126 + 8);
      else
        v127 = 0;
      if (v127 == v107)
      {
        v128 = *((unsigned __int8 *)this + 68);
        v129 = *((unsigned int *)this + 16);
      }
      else
      {
        v128 = *(unsigned __int8 *)(v107 + 51);
        v129 = *(unsigned int *)(v107 + 47);
      }
      v130 = v129 | (v128 << 32);
      if (v130 && (v107 = *(_QWORD *)(v130 + 8)) != 0)
      {
        if (v126)
        {
          if (v124)
          {
            while (*(_BYTE *)(v107 + 46) != 40 || *(_QWORD *)(v126 + 8) == v107 || *(_QWORD *)(v124 + 8) == v107)
            {
              v184 = *(unsigned int *)(v107 + 47);
              if (v184 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32))
              {
                v107 = *(_QWORD *)((v184 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32)) + 8);
                if (v107)
                  continue;
              }
              goto LABEL_255;
            }
          }
          else
          {
            while (*(_BYTE *)(v107 + 46) != 40 || *(_QWORD *)(v126 + 8) == v107)
            {
              v179 = *(unsigned int *)(v107 + 47);
              if (v179 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32))
              {
                v107 = *(_QWORD *)((v179 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32)) + 8);
                if (v107)
                  continue;
              }
              goto LABEL_255;
            }
          }
        }
        else if (v124)
        {
          while (*(_BYTE *)(v107 + 46) != 40 || *(_QWORD *)(v124 + 8) == v107)
          {
            v182 = *(unsigned int *)(v107 + 47);
            if (v182 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32))
            {
              v107 = *(_QWORD *)((v182 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32)) + 8);
              if (v107)
                continue;
            }
            goto LABEL_255;
          }
        }
        else
        {
          while (*(_BYTE *)(v107 + 46) != 40)
          {
            v173 = *(unsigned int *)(v107 + 47);
            if (v173 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32))
            {
              v107 = *(_QWORD *)((v173 | ((unint64_t)*(unsigned __int8 *)(v107 + 51) << 32)) + 8);
              if (v107)
                continue;
            }
            goto LABEL_255;
          }
        }
      }
      else
      {
LABEL_255:
        if (!v124)
          break;
        v107 = *(_QWORD *)(v124 + 8);
        if (!v107)
          break;
      }
    }
  }
  else
  {
    v85 = 0;
  }
  v86 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
  v87 = (char *)this + 164;
  if (v86 >= 4)
    v88 = (char *)this + 164;
  else
    v88 = (char *)this + 160;
  v89 = *(_DWORD *)v88;
  v90 = __OFADD__(v89, v222);
  v91 = v89 + v222;
  v92 = (v89 >> 31) + 0x7FFFFFFF;
  if (!v90)
    v92 = v91;
  if (v86 < 4)
    v87 = (char *)this + 160;
  *(_DWORD *)v87 = v92;
  v93 = *((unsigned int *)this + 61);
  if ((_DWORD)v93)
  {
    for (k = 0; k < v93; ++k)
    {
      v151 = *(WebCore::RenderTableCaption **)(*(_QWORD *)(*((_QWORD *)this + 29) + 8 * k) + 8);
      if ((*((_DWORD *)v151 + 30) & 6) == 2)
      {
        WebCore::RenderTable::layoutCaption(this, v151);
        v93 = *((unsigned int *)this + 61);
      }
    }
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
    WebCore::RenderBox::updateLogicalHeight(this);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 <= 3)
  {
    if (v11 == *((_DWORD *)this + 41))
      goto LABEL_191;
  }
  else if (v11 == *((_DWORD *)this + 40))
  {
LABEL_191:
    v94 = v210;
    goto LABEL_192;
  }
  v94 = v210;
LABEL_192:
  WebCore::RenderBlock::layoutPositionedObjects((uint64_t)this);
  (*(void (**)(WebCore::RenderTable *))(*(_QWORD *)this + 856))(this);
  WebCore::RenderTable::invalidateCollapsedBorders((uint64_t)this, 0);
  *(_QWORD *)((char *)this + 348) = 0xFFFFFFC0FFFFFFC0;
  v95 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 1048))(this);
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v96 = WebCore::RenderBox::clientWidth(this);
  else
    v96 = WebCore::RenderBox::clientHeight(this);
  if (__OFADD__(v95, v96))
    v97 = (v95 >> 31) + 0x7FFFFFFF;
  else
    v97 = v95 + v96;
  (*(void (**)(WebCore::RenderTable *, uint64_t, _QWORD))(*(_QWORD *)this + 1752))(this, v97, 0);
  if (v214 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v213);
  }
  if (v218 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v217);
  }
  if (v225 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v224);
  }
  if (v94)
  {
    WebCore::LocalFrameViewLayoutContext::popLayoutState((uint64_t)v209, v98);
    if (v208)
      --*(_DWORD *)(v206 + 492);
  }
  v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                  + 248);
  v100 = *(unsigned int *)(v99 + 508);
  if ((_DWORD)v100)
  {
    v101 = *(_DWORD **)(*(_QWORD *)(v99 + 496) + 8 * v100 - 8);
    if (v101)
    {
      if (v101[18])
      {
        v193 = 156;
        if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
          v193 = 152;
        v194 = WebCore::RenderLayoutState::pageLogicalOffset(v101, (uint64_t)this, *(_DWORD *)((char *)this + v193));
        WebCore::RenderBlock::setPageLogicalOffset((uint64_t)this, (void *)v194);
      }
      v102 = 0;
      goto LABEL_206;
    }
  }
  else
  {
    v101 = 0;
  }
  v102 = 1;
LABEL_206:
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v223);
  if ((result & 1) == 0 && ((v26 ^ 1) & 1) == 0)
  {
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    {
      v197 = (_DWORD *)*((_QWORD *)this + 24);
      if (v197)
      {
        v199 = v197[5];
        v198 = v197[6];
        v200 = v197 + 7;
      }
      else
      {
        v198 = 0;
        v199 = 0;
        v200 = (int *)((char *)this + 160);
      }
      v201 = *v200;
      v90 = __OFADD__(v199, v201);
      v202 = v199 + v201;
      if (v90)
        v202 = (v199 >> 31) + 0x7FFFFFFF;
      v203 = v202 - v207;
      if (__OFSUB__(v202, v207))
        v203 = (v202 >> 31) + 0x7FFFFFFF;
      if (v197)
        v204 = (char *)(v197 + 7);
      else
        v204 = (char *)this + 160;
      v205 = *((_DWORD *)v204 + 1);
      *(_QWORD *)&v211 = __PAIR64__(v198, v207);
      *((_QWORD *)&v211 + 1) = __PAIR64__(v205, v203);
      result = WebCore::RenderObject::repaintRectangle((uint64_t)this, (const WebCore::LayoutRect *)&v211);
    }
    else
    {
      v136 = *((_QWORD *)this + 24);
      if (v136)
      {
        v137 = *(_DWORD *)(v136 + 20);
        v138 = *(_DWORD *)(v136 + 24);
        v139 = (uint64_t *)(v136 + 28);
      }
      else
      {
        v137 = 0;
        v138 = 0;
        v139 = (uint64_t *)((char *)this + 160);
      }
      v140 = *v139;
      v141 = v138 + HIDWORD(v140);
      if (__OFADD__(v138, HIDWORD(v140)))
        v141 = (v138 >> 31) + 0x7FFFFFFF;
      v142 = v141 - v207;
      if (__OFSUB__(v141, v207))
        v142 = (v141 >> 31) + 0x7FFFFFFF;
      v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v143 + 24) + 8) + 40) + 8) + 3382))
      {
        v144 = *(_QWORD *)(v143 + 248);
        v145 = *(unsigned int *)(v144 + 508);
        if ((_DWORD)v145 && (v145 = *(_QWORD *)(*(_QWORD *)(v144 + 496) + 8 * v145 - 8)) != 0)
        {
          v146 = *(_DWORD *)(v145 + 64);
          LODWORD(v145) = *(_DWORD *)(v145 + 68);
        }
        else
        {
          v146 = 0;
        }
        v90 = __OFADD__(v137, v146);
        v147 = v137 + v146;
        if (v90)
          v147 = (v137 >> 31) + 0x7FFFFFFF;
        v148 = v140 | ((unint64_t)v142 << 32);
        v149 = v207 + v145;
        if (__OFADD__(v207, (_DWORD)v145))
          v149 = (v207 >> 31) + 0x7FFFFFFF;
        *(_QWORD *)&v211 = __PAIR64__(v149, v147);
        *((_QWORD *)&v211 + 1) = v148;
        LOBYTE(v212) = 1;
        LOBYTE(v224) = 0;
        v228 = 0;
        result = WebCore::RenderObject::issueRepaint((uint64_t)this, &v211, 1, 0, (uint64_t)&v224);
      }
    }
  }
  if ((v102 & 1) == 0 && (v26 & ((*(_BYTE *)v101 & 2) >> 1)) == 1)
  {
    v192 = *((_DWORD *)this + 89);
    if (v192 < v85)
    {
      *((_DWORD *)this + 89) = v192 + 1;
      WebCore::RenderTable::markForPaginationRelayoutIfNeeded((uint64_t)this);
      result = WebCore::RenderElement::layoutIfNeeded((uint64_t)this);
      *((_DWORD *)this + 89) = v192;
    }
  }
  if (v68)
  {
    v103 = WebCore::RenderBox::contentLogicalHeight(this);
    result = WebCore::RenderBox::cacheIntrinsicContentLogicalHeightForFlexItem((unint64_t)this, v103);
  }
  *((_BYTE *)this + 328) &= ~0x10u;
  v104 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v104;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v104 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::RenderTable::borderBefore(WebCore::RenderTable *this, void *a2)
{
  if ((*((_BYTE *)this + 124) & 4) == 0)
    return WebCore::RenderBlock::borderBefore(this);
  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  return WebCore::RenderTable::outerBorderBefore(this);
}

uint64_t WebCore::RenderTable::sectionBelow(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(a1 + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections((WebCore::RenderTable *)a1, (void *)a2);
  v6 = *(_QWORD *)(a1 + 280);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if (v7 == a2)
    return 0;
  v8 = *(_QWORD *)(a1 + 272);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if (v9 == a2)
  {
    v10 = *(unsigned __int8 *)(a1 + 68);
    v11 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 51);
    v11 = *(unsigned int *)(a2 + 47);
  }
  v12 = v11 | (v10 << 32);
  if (v12 && (result = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (a3)
    {
      if (v8)
      {
        if (v6)
        {
          while (*(_BYTE *)(result + 46) != 40
               || *(_QWORD *)(v8 + 8) == result
               || *(_QWORD *)(v6 + 8) == result
               || !*(_DWORD *)(result + 212))
          {
            v17 = *(unsigned int *)(result + 47);
            if (v17 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
            {
              result = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
              if (result)
                continue;
            }
            goto LABEL_12;
          }
        }
        else
        {
          while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v8 + 8) == result || !*(_DWORD *)(result + 212))
          {
            v15 = *(unsigned int *)(result + 47);
            if (v15 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
            {
              result = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
              if (result)
                continue;
            }
            goto LABEL_12;
          }
        }
      }
      else if (v6)
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v6 + 8) == result || !*(_DWORD *)(result + 212))
        {
          v16 = *(unsigned int *)(result + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
          {
            result = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
      else
      {
        while (*(_BYTE *)(result + 46) != 40 || !*(_DWORD *)(result + 212))
        {
          v14 = *(unsigned int *)(result + 47);
          if (v14 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
          {
            result = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
    }
    else if (v8)
    {
      if (v6)
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v8 + 8) == result || *(_QWORD *)(v6 + 8) == result)
        {
          v21 = *(unsigned int *)(result + 47);
          if (v21 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
          {
            result = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
      else
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v8 + 8) == result)
        {
          v20 = *(unsigned int *)(result + 47);
          if (v20 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
          {
            result = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
    }
    else
    {
      while (1)
      {
        if (*(_BYTE *)(result + 46) == 40)
        {
          v19 = v6 ? *(_QWORD *)(v6 + 8) : 0;
          if (v19 != result)
            break;
        }
        v18 = *(unsigned int *)(result + 47);
        if (v18 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32))
        {
          result = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(result + 51) << 32)) + 8);
          if (result)
            continue;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    if (!v6)
      return 0;
    result = *(_QWORD *)(v6 + 8);
    if (result)
    {
      if (a3 && !*(_DWORD *)(result + 212))
        return 0;
    }
  }
  return result;
}

void WebCore::RenderBlock::computeOverflow(const WebCore::RenderBox *a1, void *a2)
{
  unsigned int v2;
  WTF *v4;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  _BOOL4 v23;
  WebCore::RenderStyle *v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  int *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  WebCore::RenderFragmentedFlow *v58;
  unsigned int v59;
  unsigned int v60;
  void (**v61)(WebCore::RenderThemeIOS *__hidden);
  double v62;
  int v63;
  double v64;
  int v65;
  double v66;
  int v67;
  double v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  BOOL v78;
  int v79;
  int32x2_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int32x4_t v85;
  int v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  WebCore::RenderFragmentedFlow *v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t (*v106)();
  float v107;
  float v108;
  float v109;
  WebCore::RenderFragmentedFlow *v110;
  uint64_t v111;
  int8x16_t v112;
  unint64_t v113;
  unint64_t v114;

  v2 = a2;
  v4 = (WTF *)*((_QWORD *)a1 + 24);
  *((_QWORD *)a1 + 24) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v110 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
    if (v110)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v110, a1);
  }
  (*(void (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 1784))(a1);
  {
    v5 = DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) + 1;
  }
  else
  {
    WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
    unk_1ECE91358 = 0u;
    v5 = 1;
  }
  DWORD2(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants) = v5;
  v6 = *((_QWORD *)a1 + 1);
  if (v6 && *(_QWORD *)(v6 + 8) && (_QWORD)WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants)
  {
    v7 = *(_DWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants - 8);
    v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    for (i = 1; ; ++i)
    {
      v13 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v11);
      if (!v13)
        break;
      if (v13 != -1 && v13 == v6)
      {
        v15 = *(_QWORD *)(WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants + 16 * v11 + 8);
        if (v15)
        {
          v113 = WebCore::RenderBox::flippedClientBoxRect(a1);
          v114 = v16;
          v18 = *(_QWORD **)(v15 + 8);
          if (v18)
          {
            while (1)
            {
              v19 = *(_QWORD *)(*v18 + 8);
              if (v19)
                break;
              v18 = (_QWORD *)v18[2];
              if (!v18)
                goto LABEL_27;
            }
LABEL_21:
            if ((*(_QWORD *)(v19 + 96) & 0x380000) != 0x300000)
            {
              v112.i64[0] = *(_QWORD *)(v19 + 152);
              v17.n128_u64[0] = v112.i64[0];
              WebCore::RenderBox::addOverflowFromChild(a1, v19, (const WebCore::LayoutSize *)&v112, (const WebCore::LayoutRect *)&v113, v17);
            }
            while (1)
            {
              v18 = (_QWORD *)v18[2];
              if (!v18)
                break;
              v19 = *(_QWORD *)(*v18 + 8);
              if (v19)
              {
                ++*(_DWORD *)(v15 + 24);
                goto LABEL_21;
              }
            }
            ++*(_DWORD *)(v15 + 24);
          }
        }
        break;
      }
      v11 = (v11 + i) & v7;
    }
  }
LABEL_27:
  if ((*((_BYTE *)a1 + 22) & 1) != 0)
  {
    if ((*(unsigned int (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1)
      && (*((_BYTE *)a1 + 46) == 12 || *((char *)a1 + 45) < 0))
    {
      v113 = WebCore::RenderBox::layoutOverflowRect(a1);
      v114 = v29;
      v30 = *((_DWORD *)a1 + 5);
      v31 = *((_QWORD *)a1 + 24);
      if (!v31)
        goto LABEL_59;
      v32 = v29;
      v33 = *(_DWORD *)(v31 + 4);
      v34 = *(_QWORD *)(v31 + 12);
      v35 = WebCore::RenderBox::flippedClientBoxRect(a1);
      if ((int)v33 < (int)v35)
        goto LABEL_46;
      v39 = v33 + v34;
      if (__OFADD__(v33, (_DWORD)v34))
        v39 = (v33 >> 31) + 0x7FFFFFFF;
      v40 = v35 + v36;
      if (__OFADD__(v35, v36))
        v40 = (v35 >> 31) + 0x7FFFFFFF;
      if (v39 > v40)
      {
LABEL_46:
        if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
          LODWORD(v32) = HIDWORD(v32);
        v37 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1);
        v38 = v32 + v37;
        if (__OFADD__((_DWORD)v32, v37))
          v38 = (v32 >> 31) + 0x7FFFFFFF;
      }
      else
      {
LABEL_59:
        v41 = *((unsigned int *)a1 + 16);
        if (v41 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32)
          && (v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)a1 + 68) << 32)) + 8)) != 0)
        {
          v43 = 0;
          while ((*(_BYTE *)(v42 + 45) & 4) == 0)
          {
            v94 = *(unsigned int *)(v42 + 47);
            if (!(v94 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)))
              goto LABEL_118;
            v42 = *(_QWORD *)((v94 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)) + 8);
            if (!v42)
              goto LABEL_119;
          }
          v43 = 0;
LABEL_64:
          if ((*(_DWORD *)(v42 + 20) & 0x1800000) != 0x1000000)
          {
            if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
              v44 = (unsigned int *)(v42 + 156);
            else
              v44 = (unsigned int *)(v42 + 152);
            v45 = *v44;
            v46 = (int *)(v42 + 160);
            if ((*((_DWORD *)a1 + 5) & 0x1000) != 0)
              v46 = (int *)(v42 + 164);
            v47 = *v46;
            v48 = __OFADD__(v45, v47);
            v49 = v45 + v47;
            v50 = (v45 >> 31) + 0x7FFFFFFF;
            if (v48)
              v51 = v50;
            else
              v51 = v49;
            v52 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v42 + 1136))(v42, (_QWORD *)a1 + 10);
            v53 = v52 & ~(v52 >> 31);
            v48 = __OFADD__(v51, v53);
            v54 = v51 + v53;
            if (v48)
              v54 = (v51 >> 31) + 0x7FFFFFFF;
            if (v43 <= v54)
              v43 = v54;
          }
          while (1)
          {
            v55 = *(unsigned int *)(v42 + 47);
            if (!(v55 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)))
              break;
            v42 = *(_QWORD *)((v55 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)) + 8);
            if (!v42)
              break;
            if ((*(_BYTE *)(v42 + 45) & 4) != 0)
              goto LABEL_64;
          }
        }
        else
        {
LABEL_118:
          v43 = 0;
        }
LABEL_119:
        v95 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 984))(a1);
        v96 = v43 + v95;
        if (__OFADD__(v43, v95))
          v96 = 0x7FFFFFFF;
        v97 = 1000;
        if ((*((_DWORD *)a1 + 5) & 0x1000) == 0)
          v97 = 1016;
        v98 = (*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + v97))(a1);
        v38 = v96 - v98;
        if (__OFSUB__(v96, v98))
          v38 = (v96 >> 31) + 0x7FFFFFFF;
      }
      if ((v30 & 0x1000) != 0)
        HIDWORD(v114) = v38;
      else
        LODWORD(v114) = v38;
      WebCore::RenderBox::addLayoutOverflow(a1, (const WebCore::LayoutRect *)&v113);
    }
    v100 = WebCore::RenderBox::flippedClientBoxRect(a1);
    v113 = v100;
    v114 = v101;
    if ((*((_BYTE *)a1 + 21) & 0x10) != 0)
    {
      v104 = v2 - v100;
      if (__OFSUB__(v2, (_DWORD)v100))
        v104 = (v2 >> 31) + 0x7FFFFFFF;
      LODWORD(v114) = v104 & ~(v104 >> 31);
      v103 = 64;
    }
    else
    {
      LODWORD(v114) = 64;
      v102 = v2 - HIDWORD(v100);
      if (__OFSUB__(v2, HIDWORD(v100)))
        v102 = (v2 >> 31) + 0x7FFFFFFF;
      v103 = v102 & ~(v102 >> 31);
    }
    HIDWORD(v114) = v103;
    WebCore::RenderBox::addLayoutOverflow(a1, (const WebCore::LayoutRect *)&v113);
    v105 = *((_QWORD *)a1 + 24);
    v106 = WTF::RefPtr<WebCore::RenderOverflow,WTF::RawPtrTraits<WebCore::RenderOverflow>,WTF::DefaultRefDerefTraits<WebCore::RenderOverflow>>::unspecifiedBoolTypeInstance;
    if (!v105)
      v106 = 0;
    if (v106)
      *(_DWORD *)(v105 + 36) = v2;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 88);
  v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 24) + 200);
  if (*(_QWORD *)(v21 + 8))
    v22 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v22 = 0;
  if (v22)
    v23 = !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v21 + 80));
  else
    LOBYTE(v23) = 0;
  v24 = (WebCore::RenderStyle *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 424))(a1);
  v25 = *(_QWORD *)(*((_QWORD *)v24 + 1) + 16);
  v26 = *(unsigned __int8 *)(v25 + 52);
  if ((v26 & 0xE) != 0
    && (v26 & 0xF) != 0
    && ((v107 = *(float *)(v25 + 48), v108 = 3.0, ((v107 < 3.0) & (v26 >> 4)) != 0) || v107 > 0.0))
  {
    if (v107 >= 3.0)
      v108 = *(float *)(v25 + 48);
    if ((v26 & 0x10) != 0)
      v109 = v108;
    else
      v109 = *(float *)(v25 + 48);
    v27 = (float)(WebCore::RenderStyle::outlineOffset(v24) + v109) > 0.0;
  }
  else
  {
    v27 = 0;
  }
  if (v20)
    v28 = 1;
  else
    v28 = v23;
  if ((v28 & 1) != 0 || v27)
  {
    v56 = *((_QWORD *)a1 + 20);
    v112.i64[0] = 0;
    v112.i64[1] = v56;
    v113 = WebCore::RenderBox::applyVisualEffectOverflow(a1, (const WebCore::LayoutRect *)&v112);
    v114 = v57;
    WebCore::RenderBox::addVisualOverflow((uint64_t)a1, (const WebCore::LayoutRect *)&v113);
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v58 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
      if (v58)
        WebCore::RenderFragmentedFlow::addFragmentsVisualEffectOverflow(v58, a1);
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 32) + 148) & 0x1FC000) != 0)
  {
    *(float *)&v59 = (float)*((int *)a1 + 40) * 0.015625;
    *(float *)&v60 = (float)*((int *)a1 + 41) * 0.015625;
    v113 = 0;
    v114 = __PAIR64__(v60, v59);
    {
      v61 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v111 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v111 + 40) = 0u;
      *(_OWORD *)(v111 + 24) = 0u;
      v61 = &off_1E335BC30;
      *(_QWORD *)v111 = &off_1E335BC30;
    }
    ((void (*)(uint64_t *, const WebCore::RenderBox *, unint64_t *))v61[22])(&WebCore::RenderTheme::singleton(void)::theme, a1, &v113);
    v62 = *(float *)&v113 * 64.0;
    if (v62 >= 2147483650.0)
    {
      v63 = 0x7FFFFFFF;
    }
    else if (v62 <= -2147483650.0)
    {
      v63 = 0x80000000;
    }
    else
    {
      v63 = (int)v62;
    }
    v64 = *((float *)&v113 + 1) * 64.0;
    if (v64 >= 2147483650.0)
    {
      v65 = 0x7FFFFFFF;
    }
    else if (v64 <= -2147483650.0)
    {
      v65 = 0x80000000;
    }
    else
    {
      v65 = (int)v64;
    }
    v66 = *(float *)&v114 * 64.0;
    if (v66 >= 2147483650.0)
    {
      v67 = 0x7FFFFFFF;
    }
    else if (v66 <= -2147483650.0)
    {
      v67 = 0x80000000;
    }
    else
    {
      v67 = (int)v66;
    }
    v68 = *((float *)&v114 + 1) * 64.0;
    v69 = (int)v68;
    if (v68 > -2147483650.0)
      v70 = (int)v68;
    else
      v70 = 0x80000000;
    if (v68 >= 2147483650.0)
      v70 = 0x7FFFFFFF;
    v71 = v63 / 64;
    v72 = v63 - (v69 & 0xFFFFFFC0);
    v73 = v65 / 64;
    v74 = v65 - (v69 & 0xFFFFFFC0);
    v48 = __OFADD__(v72, v67);
    v75 = v72 + v67;
    if (v48)
      v75 = (v72 >> 31) + 0x7FFFFFFF;
    v48 = __OFADD__(v74, v70);
    v76 = v74 + v70;
    v77 = (v74 >> 31) + 0x7FFFFFFF;
    if (!v48)
      v77 = v76;
    v78 = -v75 < 0;
    v79 = v75 & 0x3F;
    v80 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v77, v75), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v77, v75)), 0x1AuLL), 6uLL);
    v81 = -v75 & 0x3F;
    if (v78)
      v82 = v79;
    else
      v82 = -v81;
    v78 = -v77 < 0;
    v83 = -v77 & 0x3F;
    v84 = v77 & 0x3F;
    v85.i64[0] = __PAIR64__(v74, v72);
    v85.i32[2] = v82;
    if (v78)
      v86 = v84;
    else
      v86 = -v83;
    v85.i32[3] = v86;
    v87.i64[0] = 0x2000000020;
    v87.i64[1] = 0x2000000020;
    v88 = vaddq_s32(v85, v87);
    v87.i64[0] = __PAIR64__(v73, v71);
    v87.u64[1] = (unint64_t)vsub_s32(v80, (int32x2_t)*(_OWORD *)&vshrq_n_s32(v88, 6uLL));
    v89 = vsraq_n_s32(v87, v88, 6uLL);
    v90.i64[0] = 0xFE000000FE000000;
    v90.i64[1] = 0xFE000000FE000000;
    v91 = (int8x16_t)vcgtq_s32(v89, v90);
    v88.i64[0] = 0xFE000000FE000000;
    v88.i64[1] = 0xFE000000FE000000;
    v92.i64[0] = 0x8000000080000000;
    v92.i64[1] = 0x8000000080000000;
    v112 = vorrq_s8((int8x16_t)(*(_OWORD *)&v91 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v88, v89), v92, (int8x16_t)vshlq_n_s32(v89, 6uLL)), v91));
    WebCore::RenderBox::addVisualOverflow((uint64_t)a1, (const WebCore::LayoutRect *)&v112);
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v93 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(const WebCore::RenderBox *))(*(_QWORD *)a1 + 648))(a1);
      if (v93)
        WebCore::RenderFragmentedFlow::addFragmentsVisualOverflowFromTheme(v93, a1);
    }
  }
}

uint64_t WebCore::RenderBox::addLayoutOverflow(WebCore::RenderBox *this, const WebCore::LayoutRect *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v25;
  unsigned int v26;
  signed int v27;
  int v28;
  int v29;
  int v30;
  signed int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  signed int v67;
  int v68;
  BOOL v69;
  signed int v70;
  int v71;
  int v72;
  _BOOL4 v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  _BOOL4 v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  char v94;
  int v95;
  char v96;
  int v97;
  char v98;

  result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  v6 = HIDWORD(v5);
  v7 = result;
  v9 = *((_DWORD *)this + 40);
  v8 = *((_DWORD *)this + 41);
  v10 = v9 - HIDWORD(v5);
  v11 = (v9 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v9, HIDWORD(v5)))
    v10 = (v9 >> 31) + 0x7FFFFFFF;
  v12 = __OFSUB__(v10, HIDWORD(result));
  v13 = v10 - HIDWORD(result);
  v14 = (v10 >> 31) + 0x7FFFFFFF;
  if (v12)
    v15 = v14;
  else
    v15 = v13;
  v16 = v8 - result;
  v17 = (v8 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v8, (_DWORD)result))
    v16 = (v8 >> 31) + 0x7FFFFFFF;
  v12 = __OFSUB__(v16, (_DWORD)v5);
  v18 = v16 - v5;
  v19 = (v16 >> 31) + 0x7FFFFFFF;
  if (v12)
    v20 = v19;
  else
    v20 = v18;
  v21 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v22 = v21 > 5;
  v23 = (1 << v21) & 0x2A;
  if (v22 || v23 == 0)
  {
    v25 = *((_DWORD *)this + 5);
  }
  else
  {
    v25 = *((_DWORD *)this + 5);
    v88 = HIDWORD(v5) + v15;
    if (__OFADD__(HIDWORD(v5), v15))
      v88 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
    v12 = __OFSUB__(v9, v88);
    v89 = v9 - v88;
    if (v12)
      v89 = v11;
    v90 = (result >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)result, (_DWORD)v20))
      v90 = result + v20;
    v12 = __OFSUB__(v8, v90);
    v91 = v8 - v90;
    if (v12)
      v91 = v17;
    if ((v25 & 0x1000) != 0)
    {
      LODWORD(v6) = v89;
      v7 = result;
    }
    else
    {
      v7 = v91;
    }
  }
  if ((v25 & 0x10000) != 0)
  {
    v54 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    result = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
    if (v54 <= 0x2000000)
      v55 = -64 * v54;
    else
      v55 = 0x80000000;
    if (v54 < -33554431)
      v55 = 0x7FFFFFFF;
    v12 = __OFADD__(v15, v55);
    v56 = v15 + v55;
    if (v12)
      v15 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v15 = v56;
    if ((int)result <= 0x2000000)
      v57 = -64 * result;
    else
      v57 = 0x80000000;
    if ((int)result < -33554431)
      v57 = 0x7FFFFFFF;
    v12 = __OFADD__((_DWORD)v20, v57);
    v58 = v20 + v57;
    if (v12)
      v20 = (v20 >> 31) + 0x7FFFFFFF;
    else
      v20 = v58;
  }
  v26 = *(_DWORD *)a2;
  if ((int)v6 > *(_DWORD *)a2)
  {
    v35 = 0;
    v28 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v27 = v6 + v15;
    if (__OFADD__((_DWORD)v6, v15))
      v27 = (v6 >> 31) + 0x7FFFFFFF;
    v28 = *((_DWORD *)a2 + 2);
    v29 = (v26 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v26, v28))
      v29 = v26 + v28;
    if (v27 < v29 || (v30 = *((_DWORD *)a2 + 1), (int)v7 > v30))
    {
      v35 = 0;
    }
    else
    {
      v31 = v7 + v20;
      if (__OFADD__((_DWORD)v7, (_DWORD)v20))
        v31 = (v7 >> 31) + 0x7FFFFFFF;
      v32 = *((_DWORD *)a2 + 3);
      v12 = __OFADD__(v30, v32);
      v33 = v30 + v32;
      v34 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v12)
        v34 = v33;
      v35 = v31 >= v34;
    }
  }
  if (!v35 && v28 >= 1)
  {
    v36 = *((_DWORD *)a2 + 3);
    if (v36 >= 1)
    {
      v37 = *((_DWORD *)a2 + 1);
      if ((*((_BYTE *)this + 22) & 1) == 0
        || ((*((_BYTE *)this + 45) & 2) != 0
          ? (v59 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96))
          : (v59 = *((_QWORD *)this + 12)),
            (v60 = v59 & 0x1C00, v60 == 2048) || !v60))
      {
        if (*((_BYTE *)this + 46) != 49)
          goto LABEL_190;
      }
      result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, WebCore::RenderBox *))(*(_QWORD *)this + 1184))(&v92, this);
      if (BYTE4(v92))
      {
        v61 = v7 - v92;
        if (__OFSUB__((_DWORD)v7, (_DWORD)v92))
          v61 = (v7 >> 31) + 0x7FFFFFFF;
        if ((int)v37 > (int)v61)
          v61 = v37;
        v62 = (v61 >> 31) + 0x7FFFFFFF;
        if (!__OFSUB__(v61, v37))
          v62 = v61 - v37;
        v12 = __OFSUB__(v36, v62);
        v63 = v36 - v62;
        if (v12)
          v63 = 0x7FFFFFFF;
        v36 = v63 & ~(v63 >> 31);
        v37 = v61;
      }
      if (v96)
      {
        v72 = v37 + v36;
        v73 = __OFADD__(v37, v36);
        v74 = v37 + v36;
        if (__OFADD__(v37, v36))
          v74 = (v37 >> 31) + 0x7FFFFFFF;
        v75 = v7 + v20;
        if (__OFADD__((_DWORD)v7, (_DWORD)v20))
          v75 = (v7 >> 31) + 0x7FFFFFFF;
        v12 = __OFADD__(v75, v95);
        v76 = v75 + v95;
        v77 = (v75 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v77 = v76;
        if (v77 < v74)
          v74 = v77;
        if (v73)
          v72 = (v37 >> 31) + 0x7FFFFFFF;
        v12 = __OFSUB__(v74, v72);
        v78 = v74 - v72;
        if (v12)
          v78 = (v74 >> 31) + 0x7FFFFFFF;
        v12 = __OFADD__(v36, v78);
        v79 = v36 + v78;
        if (v12)
          v79 = 0x7FFFFFFF;
        v36 = v79 & ~(v79 >> 31);
      }
      if (v98)
      {
        v64 = v6 - v97;
        if (__OFSUB__((_DWORD)v6, v97))
          v64 = (v6 >> 31) + 0x7FFFFFFF;
        if ((int)v26 > (int)v64)
          v64 = v26;
        v65 = (v64 >> 31) + 0x7FFFFFFF;
        if (!__OFSUB__(v64, v26))
          v65 = v64 - v26;
        v12 = __OFSUB__(v28, v65);
        v66 = v28 - v65;
        if (v12)
          v66 = 0x7FFFFFFF;
        v28 = v66 & ~(v66 >> 31);
        v26 = v64;
      }
      if (v94)
      {
        v80 = v26 + v28;
        v81 = __OFADD__(v26, v28);
        v82 = v26 + v28;
        if (__OFADD__(v26, v28))
          v82 = (v26 >> 31) + 0x7FFFFFFF;
        v83 = v6 + v15;
        if (__OFADD__((_DWORD)v6, v15))
          v83 = (v6 >> 31) + 0x7FFFFFFF;
        v12 = __OFADD__(v83, v93);
        v84 = v83 + v93;
        v85 = (v83 >> 31) + 0x7FFFFFFF;
        if (!v12)
          v85 = v84;
        if (v85 < v82)
          v82 = v85;
        if (v81)
          v80 = (v26 >> 31) + 0x7FFFFFFF;
        v12 = __OFSUB__(v82, v80);
        v86 = v82 - v80;
        if (v12)
          v86 = (v82 >> 31) + 0x7FFFFFFF;
        v12 = __OFADD__(v28, v86);
        v87 = v28 + v86;
        if (v12)
          v87 = 0x7FFFFFFF;
        v28 = v87 & ~(v87 >> 31);
      }
      if ((int)v6 > (int)v26)
      {
        v69 = 0;
      }
      else
      {
        v67 = v6 + v15;
        if (__OFADD__((_DWORD)v6, v15))
          v67 = (v6 >> 31) + 0x7FFFFFFF;
        v68 = v26 + v28;
        if (__OFADD__(v26, v28))
          v68 = (v26 >> 31) + 0x7FFFFFFF;
        v69 = 0;
        if (v67 >= v68 && (int)v7 <= (int)v37)
        {
          v70 = v7 + v20;
          if (__OFADD__((_DWORD)v7, (_DWORD)v20))
            v70 = (v7 >> 31) + 0x7FFFFFFF;
          v71 = v37 + v36;
          if (__OFADD__(v37, v36))
            v71 = (v37 >> 31) + 0x7FFFFFFF;
          v69 = v70 >= v71;
        }
      }
      if (!v69 && v28 >= 1 && v36)
      {
LABEL_190:
        if (!*((_QWORD *)this + 24))
        {
          v39 = WTF::fastMalloc((WTF *)0x28);
          v40 = *((_QWORD *)this + 20);
          *(_DWORD *)v39 = 1;
          *(_QWORD *)(v39 + 4) = (v7 << 32) | v6;
          *(_QWORD *)(v39 + 12) = v15 | (unint64_t)(v20 << 32);
          *(_QWORD *)(v39 + 20) = 0;
          *(_QWORD *)(v39 + 28) = v40;
          *(_DWORD *)(v39 + 36) = 0;
          result = *((_QWORD *)this + 24);
          *((_QWORD *)this + 24) = v39;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WTF::fastFree((WTF *)result, v38);
            else
              --*(_DWORD *)result;
          }
        }
        v41 = (_DWORD *)*((_QWORD *)this + 24);
        v42 = v26 + v28;
        if (__OFADD__(v26, v28))
          v42 = (v26 >> 31) + 0x7FFFFFFF;
        v43 = v41[1];
        v44 = v41[3];
        v12 = __OFADD__(v43, v44);
        v45 = v43 + v44;
        if (v12)
          v45 = (v43 >> 31) + 0x7FFFFFFF;
        if ((int)v42 <= v45)
          v42 = v45;
        v46 = v37 + v36;
        if (__OFADD__(v37, v36))
          v46 = (v37 >> 31) + 0x7FFFFFFF;
        v47 = v41[2];
        v48 = v41[4];
        v12 = __OFADD__(v47, v48);
        v49 = v47 + v48;
        if (v12)
          v49 = (v47 >> 31) + 0x7FFFFFFF;
        if ((int)v46 <= v49)
          v46 = v49;
        if ((int)v43 >= (int)v26)
          v43 = v26;
        if ((int)v47 >= (int)v37)
          v47 = v37;
        v12 = __OFSUB__(v42, v43);
        v50 = v42 - v43;
        if (v12)
          v50 = (v42 >> 31) + 0x7FFFFFFF;
        v41[3] = v50;
        v12 = __OFSUB__(v46, v47);
        v51 = v46 - v47;
        if (v12)
          v51 = (v46 >> 31) + 0x7FFFFFFF;
        v41[4] = v51;
        v12 = __OFSUB__(v42, v50);
        v52 = v42 - v50;
        if (v12)
          v52 = (v42 >> 31) + 0x7FFFFFFF;
        v41[1] = v52;
        v53 = v46 - v51;
        if (__OFSUB__(v46, v51))
          v53 = (v46 >> 31) + 0x7FFFFFFF;
        v41[2] = v53;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderBox::addVisualOverflow(uint64_t this, const WebCore::LayoutRect *a2)
{
  WebCore::RenderBox *v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  WTF *v35;

  v3 = (WebCore::RenderBox *)this;
  v4 = *(_QWORD *)(this + 160);
  v5 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x80000000) != 0)
  {
    v6 = *((_DWORD *)a2 + 2);
LABEL_13:
    if (v6 >= 1 && *((_DWORD *)a2 + 3) >= 1)
    {
      if (!*(_QWORD *)(this + 192))
      {
        v32 = WTF::fastMalloc((WTF *)0x28);
        v33 = WebCore::RenderBox::flippedClientBoxRect(v3);
        *(_DWORD *)v32 = 1;
        *(_QWORD *)(v32 + 4) = v33;
        *(_QWORD *)(v32 + 12) = v34;
        *(_QWORD *)(v32 + 20) = 0;
        *(_QWORD *)(v32 + 28) = v4;
        *(_DWORD *)(v32 + 36) = 0;
        v35 = (WTF *)*((_QWORD *)v3 + 24);
        *((_QWORD *)v3 + 24) = v32;
        if (v35)
        {
          if (*(_DWORD *)v35 == 1)
            WTF::fastFree(v35, v34);
          else
            --*(_DWORD *)v35;
        }
      }
      v13 = (_DWORD *)*((_QWORD *)v3 + 24);
      v14 = *(_DWORD *)a2;
      v15 = *((_DWORD *)a2 + 1);
      v16 = *((_DWORD *)a2 + 2);
      v17 = *((_DWORD *)a2 + 3);
      v7 = __OFADD__(*(_DWORD *)a2, v16);
      v18 = *(_DWORD *)a2 + v16;
      if (v7)
        v18 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
      v19 = v13[5];
      v20 = v13[6];
      v21 = v13[7];
      v22 = v13[8];
      v7 = __OFADD__(v19, v21);
      v23 = v19 + v21;
      this = (v19 >> 31) + 0x7FFFFFFF;
      if (v7)
        v23 = (v19 >> 31) + 0x7FFFFFFF;
      if (v18 <= v23)
        v18 = v23;
      v7 = __OFADD__(v15, v17);
      v24 = v15 + v17;
      v25 = (v15 >> 31) + 0x7FFFFFFF;
      if (!v7)
        v25 = v24;
      v26 = v20 + v22;
      if (__OFADD__(v20, v22))
        v26 = (v20 >> 31) + 0x7FFFFFFF;
      if (v25 <= v26)
        v25 = v26;
      if ((int)v19 < v14)
        v14 = v13[5];
      v13[5] = v14;
      v27 = *((_DWORD *)a2 + 1);
      if ((int)v20 < v27)
        v27 = v20;
      v7 = __OFSUB__(v18, v14);
      v28 = v18 - v14;
      v29 = (v18 >> 31) + 0x7FFFFFFF;
      if (v7)
        v28 = v29;
      v13[6] = v27;
      v13[7] = v28;
      v7 = __OFSUB__(v25, v27);
      v30 = v25 - v27;
      v31 = (v25 >> 31) + 0x7FFFFFFF;
      if (v7)
        v30 = v31;
      v13[8] = v30;
    }
    return this;
  }
  v6 = *((_DWORD *)a2 + 2);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (v7)
    v8 = 0x7FFFFFFF;
  if (v8 > (int)v4)
    goto LABEL_13;
  v9 = *((_DWORD *)a2 + 1);
  if (v9 < 0)
    goto LABEL_13;
  v10 = *((_DWORD *)a2 + 3);
  v7 = __OFADD__(v9, v10);
  v11 = v9 + v10;
  if (v7)
    v11 = 0x7FFFFFFF;
  if (v11 > SHIDWORD(v4))
    goto LABEL_13;
  return this;
}

__n128 WebCore::RenderBlockFlow::allowedLayoutOverflow@<Q0>(WebCore::RenderBlockFlow *this@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  BOOL v5;
  __n128 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __n128 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  __n128 v19;
  __n128 v20;

  a2->n128_u8[0] = 0;
  a2->n128_u8[4] = 0;
  v2 = &a2->n128_u8[4];
  a2->n128_u8[8] = 0;
  a2->n128_u8[12] = 0;
  a2[1].n128_u8[0] = 0;
  a2[1].n128_u8[4] = 0;
  a2[1].n128_u8[8] = 0;
  a2[1].n128_u8[12] = 0;
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x1000) != 0)
  {
    a2[1].n128_u8[12] = 1;
    a2[1].n128_u32[2] = 0;
    if ((*((_DWORD *)this + 30) & 0x4000000) != 0)
    {
      v2 = &a2[1].n128_u8[4];
      v6 = a2 + 1;
    }
    else
    {
      v6 = a2;
    }
  }
  else
  {
    a2->n128_u8[4] = 1;
    a2->n128_u32[0] = 0;
    v4 = *((_DWORD *)this + 30);
    v5 = (v4 & 0x4000000) == 0;
    if ((v4 & 0x4000000) != 0)
      v2 = &a2->n128_u8[12];
    else
      v2 = &a2[1].n128_u8[12];
    if (v5)
      v6 = (__n128 *)((char *)a2 + 24);
    else
      v6 = (__n128 *)&a2->n128_i8[8];
  }
  *v2 = 1;
  v6->n128_u32[0] = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
  v8 = *((_QWORD *)this + 28);
  if ((*(_BYTE *)(v7 + 120) & 0xF) != 0)
  {
    if (!v8)
      return result;
    v9 = *(_DWORD *)(v8 + 20);
    if (v9 == 0x80000000)
      v10 = 0x7FFFFFFF;
    else
      v10 = -v9;
    v11 = 6;
    if ((v3 & 0x1000) == 0)
      v11 = 0;
    v12 = 28;
    if ((v3 & 0x1000) == 0)
      v12 = 4;
    a2->n128_u32[v11] = v10;
    a2->n128_u8[v12] = 1;
  }
  else if (!v8)
  {
    return result;
  }
  v13 = *(_QWORD *)(v8 + 24);
  if (v13 && *(_QWORD *)(v13 + 8) && *(unsigned __int8 *)(*(_QWORD *)(v7 + 24) + 56) >= 0x40u)
  {
    v15 = a2 + 1;
    v16 = &a2->n128_u8[8];
    v17 = &a2[1].n128_u8[8];
    if (((((v3 & 0x1000) == 0) ^ WebCore::RenderStyle::hasInlineColumnAxis((WebCore::RenderBlockFlow *)((char *)this + 80))) & 1) != 0)
    {
      v19 = *a2;
      v20 = a2[1];
      v19.n128_u8[4] = v15->n128_u8[4];
      v19.n128_u32[0] = v15->n128_u32[0];
      v20.n128_u8[4] = a2->n128_u8[4];
      v20.n128_u32[0] = a2->n128_u32[0];
      result = v20;
    }
    else
    {
      v19 = *a2;
      v20 = a2[1];
      v20.n128_u8[12] = v16[4];
      v20.n128_u32[2] = *(_DWORD *)v16;
      v19.n128_u8[12] = v17[4];
      v19.n128_u32[2] = *(_DWORD *)v17;
      result = v19;
    }
    *a2 = v19;
    a2[1] = v20;
  }
  return result;
}

uint64_t WebCore::RenderBlock::layoutOverflowLogicalBottom(WebCore::RenderBlock *this, const WebCore::RenderBlock *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int *v10;
  int *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  if (*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
    && (v3 = *(_QWORD *)((*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0)
  {
    v4 = 0;
    while ((*(_BYTE *)(v3 + 45) & 4) == 0)
    {
      v5 = *(unsigned int *)(v3 + 47);
      if (!(v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
        goto LABEL_8;
      v3 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
      if (!v3)
        goto LABEL_9;
    }
    v4 = 0;
LABEL_16:
    if ((*(_DWORD *)(v3 + 20) & 0x1800000) != 0x1000000)
    {
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
        v10 = (unsigned int *)(v3 + 152);
        v11 = (int *)(v3 + 160);
      }
      else
      {
        v10 = (unsigned int *)(v3 + 156);
        v11 = (int *)(v3 + 164);
      }
      v12 = *v10;
      v13 = *v11;
      v14 = __OFADD__(v12, v13);
      v15 = v12 + v13;
      v16 = (v12 >> 31) + 0x7FFFFFFF;
      if (v14)
        v17 = v16;
      else
        v17 = v15;
      v18 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 1120))(v3, (char *)this + 80);
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        v19 = (v17 >> 31) + 0x7FFFFFFF;
      if (v4 <= v19)
        v4 = v19;
    }
    while (1)
    {
      v20 = *(unsigned int *)(v3 + 47);
      if (!(v20 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)))
        break;
      v3 = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8);
      if (!v3)
        break;
      if ((*(_BYTE *)(v3 + 45) & 4) != 0)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_8:
    v4 = 0;
  }
LABEL_9:
  v6 = WebCore::RenderBox::clientLogicalBottom(this);
  v7 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)this + 968))(this);
  v8 = v4 + v7;
  if (__OFADD__(v4, v7))
    v8 = 0x7FFFFFFF;
  if (v6 <= v8)
    return v8;
  else
    return v6;
}

uint64_t WebCore::RenderBox::containingBlockLogicalHeightForPositioned(WebCore::RenderBox *this, const WebCore::RenderBoxModelObject *a2, int a3)
{
  uint64_t *v5;
  WebCore::RenderObject *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  WebCore::RenderBox *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int i;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a3 && ((*((_BYTE *)a2 + 21) & 0x10) == 0) != ((*((_BYTE *)this + 21) & 0x10) == 0))
    return WebCore::RenderBox::containingBlockLogicalWidthForPositioned(this, a2, 0, 0);
  v5 = (uint64_t *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
  if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
  {
    ++*(_DWORD *)(WebCore::gOverridingContainingBlockContentLogicalHeightMap + 8);
    v20 = *((_QWORD *)this + 1);
    if (v20 && *(_QWORD *)(v20 + 8))
    {
      v21 = *v5;
      if (*v5)
      {
        v22 = *(_DWORD *)(v21 - 8);
        v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        for (i = 1; ; ++i)
        {
          v28 = *(_QWORD *)(v21 + 16 * v26);
          if (!v28)
          {
            v30 = *(unsigned int *)(v21 - 4);
            v31 = v21 + 16 * v30;
            v32 = v31;
            goto LABEL_41;
          }
          if (v28 != -1 && v28 == v20)
            break;
          v26 = (v26 + i) & v22;
        }
        v31 = v21 + 16 * v26;
        v30 = *(unsigned int *)(v21 - 4);
        v32 = v21 + 16 * v30;
LABEL_41:
        v42 = v31;
        v33 = v21 + 16 * v30;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v42 = 0;
        v43 = 0;
      }
LABEL_42:
      while (v31 != v33 && !*(_QWORD *)(*(_QWORD *)v31 + 8))
      {
        v34 = v31 + 16;
        v42 = v34;
        v31 = v32;
        if (v34 != v32)
        {
          v31 = v34;
          while ((unint64_t)(*(_QWORD *)v31 + 1) <= 1)
          {
            v31 += 16;
            v42 = v31;
            if (v31 == v32)
            {
              v31 = v32;
              goto LABEL_42;
            }
          }
        }
      }
    }
    else
    {
      WTF::WeakHashMap<WebCore::LoadableScriptClient,unsigned int,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v41, v5);
      v21 = *(_QWORD *)WebCore::gOverridingContainingBlockContentLogicalHeightMap;
    }
    if (v21)
      v21 += 16 * *(unsigned int *)(v21 - 4);
    if (v42 != v21)
    {
      v17 = *(_QWORD *)(v42 + 8);
      if ((v17 & 0xFF00000000) != 0)
        return v17;
    }
  }
  if ((*((_BYTE *)a2 + 45) & 4) == 0)
  {
    if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
      return WebCore::RenderInline::innerPaddingBoxHeight(a2, (WebCore::RenderObject *)v5);
    return 0;
  }
  if ((*((_DWORD *)this + 5) & 0x1800000) == 0x1000000)
  {
    v19 = this;
    if ((*((_BYTE *)this + 45) & 2) != 0)
      v19 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
    if ((*((_QWORD *)v19 + 12) & 0x380000) == 0x300000 && *((_BYTE *)a2 + 46) == 49)
      return WebCore::RenderView::clientLogicalHeightForFixedPosition(a2);
  }
  v6 = a2;
  if ((*((_BYTE *)a2 + 45) & 0x40) == 0)
    v6 = WebCore::RenderObject::containingBlock(a2);
  v7 = *(_QWORD *)v6;
  if (((*((_DWORD *)v6 + 31) >> 13) & 6u) - 2 < 4)
  {
    v37 = *((_DWORD *)v6 + 40);
    v38 = (*(uint64_t (**)(WebCore::RenderObject *))(v7 + 1016))(v6);
    if (__OFSUB__(v37, v38))
      v39 = (v37 >> 31) + 0x7FFFFFFF;
    else
      v39 = v37 - v38;
    v40 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 1024))(v6);
    if (__OFSUB__(v39, v40))
      v12 = (v39 >> 31) + 0x7FFFFFFF;
    else
      v12 = v39 - v40;
    v13 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 1352))(v6);
  }
  else
  {
    v8 = *((_DWORD *)v6 + 41);
    v9 = (*(uint64_t (**)(WebCore::RenderObject *))(v7 + 1000))(v6);
    if (__OFSUB__(v8, v9))
      v10 = (v8 >> 31) + 0x7FFFFFFF;
    else
      v10 = v8 - v9;
    v11 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 1008))(v6);
    if (__OFSUB__(v10, v11))
      v12 = (v10 >> 31) + 0x7FFFFFFF;
    else
      v12 = v10 - v11;
    v13 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v6 + 1360))(v6);
  }
  v14 = v13 << 6;
  if (v13 < -33554432)
    v14 = 0x80000000;
  if (v13 > 0x1FFFFFF)
    v14 = 0x7FFFFFFF;
  v15 = __OFSUB__(v12, v14);
  v16 = v12 - v14;
  if (v15)
    v16 = (v12 >> 31) + 0x7FFFFFFF;
  v17 = v16 & ~(v16 >> 31);
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return v17;
  v35 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 648))(this);
  if (!v35
    || ((*(_BYTE *)(v35 + 21) & 0x10) == 0) != ((*((_BYTE *)a2 + 21) & 0x10) == 0)
    || (*((_BYTE *)a2 + 52) & 7) != 1
    || (*((_BYTE *)a2 + 53) & 2) == 0)
  {
    return v17;
  }
  return WebCore::RenderFragmentedFlow::contentLogicalHeightOfFirstFragment(a2, v36);
}

uint64_t WebCore::RenderBox::clientHeight(WebCore::RenderBox *this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v2 = *((_DWORD *)this + 41);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1000))(this);
  if (__OFSUB__(v2, v3))
    v4 = (v2 >> 31) + 0x7FFFFFFF;
  else
    v4 = v2 - v3;
  v5 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1008))(this);
  if (__OFSUB__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 - v5;
  v7 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
    v10 = (v6 >> 31) + 0x7FFFFFFF;
  return v10 & ~(v10 >> 31);
}

uint64_t WebCore::RenderBox::marginAfter(WebCore::RenderBox *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (WebCore::RenderBox *)((char *)this + 80);
  if (a2)
    v2 = a2;
  v3 = ((unsigned __int16)*((_DWORD *)v2 + 11) >> 13) - 1;
  if (v3 > 4)
    v4 = 2;
  else
    v4 = qword_1969F1FB8[v3];
  return *((unsigned int *)this + v4 + 42);
}

uint64_t WebCore::RenderTable::invalidateCollapsedBorders(uint64_t this, WebCore::RenderTableCell *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  unint64_t j;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = this;
  *(_BYTE *)(this + 328) &= ~1u;
  if (*(_DWORD *)(this + 312))
  {
    v21 = *(_DWORD *)(this + 316);
    if (v21)
    {
      WTF::VectorDestructor<true,WebCore::CollapsedBorderValue>::destruct(*(_QWORD **)(this + 304), (_QWORD *)(*(_QWORD *)(this + 304) + 24 * v21));
      *(_DWORD *)(v3 + 316) = 0;
    }
    this = *(_QWORD *)(v3 + 304);
    if (this)
    {
      *(_QWORD *)(v3 + 304) = 0;
      *(_DWORD *)(v3 + 312) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  v4 = *(unsigned __int8 *)(v3 + 68);
  for (i = *(unsigned int *)(v3 + 64); ; i = *(unsigned int *)(v7 + 47))
  {
    v6 = i | (v4 << 32);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      break;
    if (*(_BYTE *)(v7 + 46) == 40)
    {
LABEL_6:
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
      v9 = *(unsigned __int8 *)(v8 + 46);
      if (v9 != 35 && v9 != 63)
      {
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x194366010);
      }
      if ((*(_BYTE *)(v8 + 124) & 4) != 0)
      {
        this = *(_QWORD *)(v7 + 272);
        if (this)
        {
          *(_QWORD *)(v7 + 272) = 0;
          this = WTF::HashTable<std::pair<WebCore::RenderTableCell const*,int>,WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue>>,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>>::deallocateTable(this, a2);
        }
      }
      while (1)
      {
        v10 = *(unsigned int *)(v7 + 47);
        if (!(v10 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)))
          goto LABEL_15;
        v7 = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
        if (!v7)
          goto LABEL_15;
        if (*(_BYTE *)(v7 + 46) == 40)
          goto LABEL_6;
      }
    }
    v4 = *(unsigned __int8 *)(v7 + 51);
  }
LABEL_15:
  v11 = *(_BYTE *)(v3 + 328);
  if ((v11 & 2) != 0)
  {
    if (a2)
    {
      *((_DWORD *)a2 + 62) &= 0xFFFFFFFu;
      v22 = WebCore::RenderTable::cellBelow((WebCore::RenderTable *)v3, a2);
      if (v22)
        *(_DWORD *)(v22 + 248) &= 0xFFFFFFFu;
      v23 = WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v3, a2);
      if (v23)
        *(_DWORD *)(v23 + 248) &= 0xFFFFFFFu;
      v24 = WebCore::RenderTable::cellBefore((WebCore::RenderTable *)v3, a2);
      if (v24)
        *(_DWORD *)(v24 + 248) &= 0xFFFFFFFu;
      this = WebCore::RenderTable::cellAfter((WebCore::RenderTable *)v3, a2);
      if (this)
        *(_DWORD *)(this + 248) &= 0xFFFFFFFu;
    }
    else
    {
      for (j = *(unsigned int *)(v3 + 64) | ((unint64_t)*(unsigned __int8 *)(v3 + 68) << 32);
            j;
            j = *(unsigned int *)(v13 + 47) | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32))
      {
        v13 = *(_QWORD *)(j + 8);
        if (!v13)
          break;
        if (*(_BYTE *)(v13 + 46) == 40)
        {
LABEL_21:
          v14 = *(unsigned int *)(v13 + 64);
          if (v14 | ((unint64_t)*(unsigned __int8 *)(v13 + 68) << 32))
          {
            v15 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(v13 + 68) << 32)) + 8);
            if (v15)
            {
              if (*(_BYTE *)(v15 + 46) != 39)
              {
                __break(0xC471u);
                JUMPOUT(0x194366050);
              }
              while (1)
              {
                v16 = *(unsigned int *)(v15 + 64);
                if (v16 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32))
                {
                  v17 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v15 + 68) << 32)) + 8);
                  if (v17)
                  {
                    if (*(_BYTE *)(v17 + 46) != 37)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194366030);
                    }
                    while (1)
                    {
                      *(_DWORD *)(v17 + 248) &= 0xFFFFFFFu;
                      v18 = *(unsigned int *)(v17 + 47) | ((unint64_t)*(unsigned __int8 *)(v17 + 51) << 32);
                      if (!v18)
                        break;
                      v17 = *(_QWORD *)(v18 + 8);
                      if (!v17)
                        break;
                      if (*(_BYTE *)(v17 + 46) != 37)
                        goto LABEL_58;
                    }
                  }
                }
                v19 = *(unsigned int *)(v15 + 47) | ((unint64_t)*(unsigned __int8 *)(v15 + 51) << 32);
                if (!v19)
                  break;
                v15 = *(_QWORD *)(v19 + 8);
                if (!v15)
                  break;
                if (*(_BYTE *)(v15 + 46) != 39)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194366070);
                }
              }
            }
          }
          while (1)
          {
            v20 = *(unsigned int *)(v13 + 47) | ((unint64_t)*(unsigned __int8 *)(v13 + 51) << 32);
            if (!v20)
              break;
            v13 = *(_QWORD *)(v20 + 8);
            if (!v13)
              break;
            if (*(_BYTE *)(v13 + 46) == 40)
              goto LABEL_21;
          }
          v11 = *(_BYTE *)(v3 + 328);
          break;
        }
      }
      *(_BYTE *)(v3 + 328) = v11 & 0xFD;
    }
  }
  return this;
}

unint64_t WebCore::RenderBox::applyVisualEffectOverflow(WebCore::RenderBox *this, const WebCore::LayoutRect *a2)
{
  int v4;
  uint64_t v5;
  WebCore::ShadowData *v6;
  uint64_t v7;
  uint64_t (*v8)();
  WebCore::RenderStyle *v9;
  uint64_t v10;
  unsigned int v11;
  int v14;
  int v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  WebCore::RenderStyle *v20;
  uint64_t v21;
  float v22;
  double v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;

  v4 = *(_DWORD *)a2;
  v5 = *((unsigned int *)a2 + 1);
  v6 = *(WebCore::ShadowData **)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 88);
  if (v6)
  {
    v14 = WebCore::ShadowData::shadowOutsetExtent(v6);
    v16 = *((_DWORD *)a2 + 1);
    if (__OFADD__(*(_DWORD *)a2, v15))
      v4 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    else
      v4 = *(_DWORD *)a2 + v15;
    if (__OFADD__(v16, v14))
      v5 = (v16 >> 31) + 0x7FFFFFFF;
    else
      v5 = v16 + v14;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200);
  if (*(_QWORD *)(v7 + 8))
    v8 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
  else
    v8 = 0;
  if (v8 && !WebCore::LengthBox::isZero((WebCore::LengthBox *)(v7 + 80)))
  {
    v28 = WebCore::RenderStyle::imageOutsets((uint64_t)this + 80, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 24) + 200));
    v29 = *((_DWORD *)a2 + 1);
    v31 = *(_DWORD *)a2 - v30;
    if (__OFSUB__(*(_DWORD *)a2, v30))
      v31 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    if (v31 < v4)
      v4 = v31;
    v32 = v29 - v28;
    if (__OFSUB__(v29, v28))
      v32 = (v29 >> 31) + 0x7FFFFFFF;
    if (v32 >= (int)v5)
      v5 = v5;
    else
      v5 = v32;
  }
  v9 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 424))(this);
  v10 = *(_QWORD *)(*((_QWORD *)v9 + 1) + 16);
  v11 = *(unsigned __int8 *)(v10 + 52);
  if ((v11 & 0xE) != 0 && (v11 & 0xF) != 0)
  {
    v17 = *(float *)(v10 + 48);
    v18 = 3.0;
    if (((v17 < 3.0) & (v11 >> 4)) != 0 || v17 > 0.0)
    {
      if (v17 >= 3.0)
        v18 = *(float *)(v10 + 48);
      if ((v11 & 0x10) != 0)
        v19 = v18;
      else
        v19 = *(float *)(v10 + 48);
      if ((float)(WebCore::RenderStyle::outlineOffset(v9) + v19) > 0.0)
      {
        v20 = (WebCore::RenderStyle *)(*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 424))(this);
        v21 = *(_QWORD *)(*((_QWORD *)v20 + 1) + 16);
        v22 = 0.0;
        if ((*(_BYTE *)(v21 + 52) & 0xF) != 0)
        {
          v22 = *(float *)(v21 + 48);
          if ((*(_BYTE *)(v21 + 52) & 0x10) != 0 && v22 < 3.0)
            v22 = 3.0;
        }
        v23 = fmaxf(v22 + WebCore::RenderStyle::outlineOffset(v20), 0.0) * 64.0;
        if (v23 >= 2147483650.0)
        {
          v24 = 0x7FFFFFFF;
        }
        else if (v23 <= -2147483650.0)
        {
          v24 = 0x80000000;
        }
        else
        {
          v24 = (int)v23;
        }
        v25 = *(_DWORD *)a2 - v24;
        if (__OFSUB__(*(_DWORD *)a2, v24))
          v25 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
        if (v25 < v4)
          v4 = v25;
        v26 = *((_DWORD *)a2 + 1);
        v27 = v26 - v24;
        if (__OFSUB__(v26, v24))
          v27 = (v26 >> 31) + 0x7FFFFFFF;
        if (v27 >= (int)v5)
          v5 = v5;
        else
          v5 = v27;
      }
    }
  }
  return v4 | (unint64_t)(v5 << 32);
}

unint64_t WebCore::ShadowData::shadowOutsetExtent(WebCore::ShadowData *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  float v5;
  double v6;
  unsigned int v7;
  float v8;
  double v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  double v17;
  unsigned int v18;
  int v19;
  int v20;
  double v21;
  unsigned int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  double v27;
  unsigned int v28;
  int v29;
  double v30;
  unsigned int v31;
  int v32;

  if (this)
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (*((_BYTE *)this + 30))
        v5 = *((float *)this + 6);
      else
        v5 = (float)*((int *)this + 6);
      v6 = ceilf(v5 * 1.4) * 64.0;
      if (v6 >= 2147483650.0)
      {
        v7 = 0x7FFFFFFF;
      }
      else if (v6 <= -2147483650.0)
      {
        v7 = 0x80000000;
      }
      else
      {
        v7 = (int)v6;
      }
      if (*((_BYTE *)this + 22))
        v8 = *((float *)this + 4);
      else
        v8 = (float)*((int *)this + 4);
      v9 = v8 * 64.0;
      if (v9 >= 2147483650.0)
      {
        v10 = 0x7FFFFFFF;
      }
      else if (v9 <= -2147483650.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v9;
      }
      v11 = __OFADD__(v7, v10);
      v12 = v7 + v10;
      v13 = (v7 >> 31) + 0x7FFFFFFF;
      if (!v11)
        v13 = v12;
      if (*((_BYTE *)this + 48) != 1)
      {
        if (*((_BYTE *)this + 6))
        {
          v16 = *(float *)this;
          v14 = *(float *)this;
          v15 = *(float *)this;
        }
        else
        {
          v14 = *(float *)this;
          v15 = (float)*(int *)this;
          v16 = *(float *)this;
        }
        v17 = v15 * 64.0;
        v18 = (int)v17;
        if (v17 <= -2147483650.0)
          v18 = 0x80000000;
        if (v17 >= 2147483650.0)
          v18 = 0x7FFFFFFF;
        v11 = __OFSUB__(v18, v13);
        v19 = v18 - v13;
        v20 = (v18 >> 31) + 0x7FFFFFFF;
        if (!v11)
          v20 = v19;
        if (v4 >= v20)
          v4 = v20;
        if (!*((_BYTE *)this + 6))
          v16 = (float)SLODWORD(v14);
        v21 = v16 * 64.0;
        if (v21 >= 2147483650.0)
        {
          v22 = 0x7FFFFFFF;
        }
        else if (v21 <= -2147483650.0)
        {
          v22 = 0x80000000;
        }
        else
        {
          v22 = (int)v21;
        }
        v23 = v22 + v13;
        if (__OFADD__(v22, v13))
          v23 = (v22 >> 31) + 0x7FFFFFFF;
        if (v23 <= (int)v2)
          v2 = v2;
        else
          v2 = v23;
        if (*((_BYTE *)this + 14))
        {
          v26 = *((float *)this + 2);
          *(float *)&v24 = v26;
          v25 = v26;
        }
        else
        {
          v24 = *((int *)this + 2);
          v25 = (float)v24;
          v26 = *(float *)&v24;
        }
        v27 = v25 * 64.0;
        if (v27 >= 2147483650.0)
        {
          v28 = 0x7FFFFFFF;
        }
        else
        {
          v28 = (int)v27;
          if (v27 <= -2147483650.0)
            v28 = 0x80000000;
        }
        v29 = v28 - v13;
        if (__OFSUB__(v28, v13))
          v29 = (v28 >> 31) + 0x7FFFFFFF;
        if (v1 >= v29)
          v1 = v29;
        if (!*((_BYTE *)this + 14))
          v26 = (float)v24;
        v30 = v26 * 64.0;
        if (v30 >= 2147483650.0)
        {
          v31 = 0x7FFFFFFF;
        }
        else if (v30 <= -2147483650.0)
        {
          v31 = 0x80000000;
        }
        else
        {
          v31 = (int)v30;
        }
        v11 = __OFADD__(v31, v13);
        v32 = v31 + v13;
        if (v11)
          v32 = (v31 >> 31) + 0x7FFFFFFF;
        if (v32 > v3)
          v3 = v32;
      }
      this = (WebCore::ShadowData *)*((_QWORD *)this + 7);
    }
    while (this);
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  return v1 | (unint64_t)(v2 << 32);
}

uint64_t WebCore::RenderTable::shouldResetLogicalHeightBeforeLayout(WebCore::RenderTable *this)
{
  return 1;
}

void WebCore::AutoTableLayout::layout(WebCore::AutoTableLayout *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  float v27;
  uint64_t v28;
  char v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  int v43;
  float v44;
  float v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float v65;
  unsigned int v66;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  float v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  uint64_t v90;
  int v91;
  WebCore::Length *v92;
  float v93;
  double v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  unint64_t v115;
  float v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  uint64_t v125;
  float v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  double v138;
  float v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  float v144;
  uint64_t v145;
  float v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  float v154;
  float v155;
  float v157;
  int v158;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  v4 = v3[31];
  v5 = v3 + 41;
  if (((v4 >> 13) & 6) - 2 >= 4)
    v5 = v3 + 40;
  v6 = *v5;
  v7 = v3[85];
  v8 = v3[86];
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (v9)
    v12 = v11;
  else
    v12 = v10;
  if ((v4 & 4) != 0)
  {
    v22 = 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 976))(*((_QWORD *)this + 1));
    v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 984))(v3);
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      v15 = (v13 >> 31) + 0x7FFFFFFF;
    v16 = v3[57];
    if (v16)
    {
      v17 = v16 + 1;
      v18 = (int)v3[83];
      LODWORD(v19) = v17 << 6;
      if (v17 <= 0x1FFFFFE)
        v19 = v19;
      else
        v19 = 0x7FFFFFFFLL;
      v20 = v18 * v19 / 64;
      if (HIDWORD(v20) != (int)v20 >> 31)
        LODWORD(v20) = (v18 >> 31) + 0x7FFFFFFF;
    }
    else
    {
      LODWORD(v20) = 0;
    }
    v9 = __OFADD__(v15, (_DWORD)v20);
    v21 = v15 + v20;
    v22 = (v15 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v22 = v21;
  }
  v9 = __OFADD__(v12, v22);
  v23 = v12 + v22;
  if (v9)
    v23 = (v12 >> 31) + 0x7FFFFFFF;
  v9 = __OFSUB__(v6, v23);
  v24 = v6 - v23;
  if (v9)
    v25 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v25 = v24;
  v26 = *(_DWORD *)(*((_QWORD *)this + 1) + 228);
  if (*((_DWORD *)this + 7) != v26)
  {
    WebCore::AutoTableLayout::fullRecalc(this, a2);
    v26 = *(_DWORD *)(*((_QWORD *)this + 1) + 228);
  }
  if ((*((_BYTE *)this + 48) & 2) != 0)
    WebCore::AutoTableLayout::calcEffectiveLogicalWidth(this);
  v27 = (float)v25 * 0.015625;
  if (!v26)
  {
    v32 = 0;
    v37 = 0.0;
    goto LABEL_74;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = *((unsigned int *)this + 7);
  v35 = (float)v25 * 0.015625;
  v36 = 0.0;
  v37 = 0.0;
  v38 = 0.0;
  v39 = 0.0;
  do
  {
    if (40 * v34 == v28)
    {
      __break(0xC471u);
      JUMPOUT(0x194367294);
    }
    v40 = *((_QWORD *)this + 2);
    v41 = v40 + v28;
    v42 = *(float *)(v40 + v28 + 24);
    *(float *)(v40 + v28 + 32) = v42;
    v43 = *(unsigned __int8 *)(v40 + v28 + 12);
    if (v43 == 3)
    {
      if (*(_BYTE *)(v41 + 14))
        v44 = *(float *)(v41 + 8);
      else
        v44 = (float)*(int *)(v41 + 8);
      v37 = v37 + v44;
      v29 = 1;
    }
    else if (v43 == 4)
    {
      ++v30;
      v36 = v36 + *(float *)(v40 + v28 + 28);
    }
    else if (!*(_BYTE *)(v40 + v28 + 12))
    {
      if (*(_BYTE *)(v40 + v28 + 36))
      {
        ++v32;
      }
      else
      {
        ++v31;
        if (v33)
          v45 = v39;
        else
          v45 = 0.0;
        v39 = v45 + *(float *)(v40 + v28 + 28);
        v38 = v38 + v42;
        v33 = 1;
      }
    }
    v35 = v35 - v42;
    v28 += 40;
  }
  while (40 * v26 != v28);
  if (((v35 > 0.0) & v29) == 1)
  {
    v86 = 0;
    v87 = 32;
    v88 = v27;
    v89 = (float)(int)vcvtd_n_s64_f64(v27, 6uLL);
    while (1)
    {
      if (v86 >= v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1943672B4);
      }
      v90 = v40 + v87;
      v91 = *(unsigned __int8 *)(v40 + v87 - 20);
      if ((v91 & 0xFFFFFFF7) != 3)
        goto LABEL_132;
      v92 = (WebCore::Length *)(v90 - 24);
      if (v91 == 4)
      {
        v93 = *(float *)v92;
        if (!*(_BYTE *)(v40 + v87 - 18))
          v93 = (float)*(int *)v92;
        v94 = v93 * 64.0;
      }
      else
      {
        if (v91 != 3)
        {
          if (v91 == 11)
          {
            v158 = v33;
            v157 = v89;
            v135 = v89 * 0.015625;
            if (v88 * 64.0 <= -2147483650.0)
              v135 = -33554000.0;
            v136 = 33554000.0;
            if (v88 * 64.0 < 2147483650.0)
              v136 = v135;
            WebCore::Length::nonNanCalculatedValue(v92, v136);
            v138 = v137 * 64.0;
            if (v138 >= 2147483650.0)
            {
              v95 = 0x7FFFFFFF;
              v33 = v158;
            }
            else
            {
              v33 = v158;
              if (v138 <= -2147483650.0)
                v95 = 0x80000000;
              else
                v95 = (int)v138;
            }
            v89 = v157;
          }
          else
          {
            v95 = 0;
          }
          goto LABEL_128;
        }
        v97 = v89 * 0.015625;
        if (v88 * 64.0 <= -2147483650.0)
          v97 = -33554000.0;
        if (v88 * 64.0 < 2147483650.0)
          v98 = v97;
        else
          v98 = 33554000.0;
        v99 = *(float *)v92;
        if (!*(_BYTE *)(v40 + v87 - 18))
          v99 = (float)*(int *)v92;
        v94 = (float)((float)(v98 * v99) / 100.0) * 64.0;
      }
      if (v94 >= 2147483650.0)
      {
        v95 = 0x7FFFFFFF;
      }
      else if (v94 <= -2147483650.0)
      {
        v95 = 0x80000000;
      }
      else
      {
        v95 = (int)v94;
      }
LABEL_128:
      v34 = *((unsigned int *)this + 7);
      if (v86 >= v34)
      {
        __break(0xC471u);
        goto LABEL_250;
      }
      v96 = (float)v95 * 0.015625;
      if (*(float *)(v90 - 8) >= v96)
        v96 = *(float *)(v90 - 8);
      v40 = *((_QWORD *)this + 2);
      v35 = v35 + (float)(*(float *)(v40 + v87) - v96);
      *(float *)(v40 + v87) = v96;
LABEL_132:
      ++v86;
      v87 += 40;
      if (v26 == v86)
      {
        if (v37 > 100.0)
        {
          if (v26 - 1 >= v34)
          {
            __break(0xC471u);
            JUMPOUT(0x194367314);
          }
          v100 = (float)(v27 * (float)(v37 + -100.0)) / 100.0;
          v101 = v26 - 1;
          do
          {
            v102 = v101;
            if ((*(_BYTE *)(v40 + 40 * v101 + 12) & 0xF7) == 3)
            {
              v103 = v40 + 40 * v101;
              v104 = *(float *)(v103 + 32);
              if (v100 >= v104)
                v105 = *(float *)(v103 + 32);
              else
                v105 = v100;
              v100 = v100 - v105;
              v106 = v104 - v105;
              if (*(float *)(v103 + 24) >= v106)
                v106 = *(float *)(v103 + 24);
              v35 = v35 + (float)(v104 - v106);
              *(float *)(v103 + 32) = v106;
            }
            --v101;
          }
          while (v102);
        }
        break;
      }
    }
  }
  v34 = v34;
  if (v35 > 0.0)
  {
    v46 = 0;
    v47 = (float *)(v40 + 32);
    v48 = v34;
    v49 = v26;
    while (1)
    {
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1943672ACLL);
      }
      if (*((_BYTE *)v47 - 20) != 4)
        goto LABEL_52;
      if (*((_BYTE *)v47 - 18))
        break;
      v50 = (float)*((int *)v47 - 6);
      if (*v47 < v50)
      {
        v51 = *v47 - v50;
        v52 = v47;
LABEL_57:
        v35 = v35 + v51;
        *v52 = v50;
      }
LABEL_52:
      ++v46;
      v47 += 10;
      --v48;
      if (!--v49)
        goto LABEL_58;
    }
    v50 = *(v47 - 6);
    if (v50 <= *v47)
      goto LABEL_52;
    v52 = (float *)(v40 + 40 * v46 + 32);
    v51 = *v47 - v50;
    goto LABEL_57;
  }
LABEL_58:
  if (v35 > 0.0 && v31)
  {
    if (v33)
    {
      v35 = v38 + v35;
      v53 = 0.0;
      if (v39 == 0.0)
        v53 = v35 / (float)v31;
      v54 = (float *)(v40 + 36);
      v55 = v34;
      v56 = v26;
      v57 = v39;
      while (1)
      {
        if (!v55)
        {
          __break(0xC471u);
          JUMPOUT(0x1943672D4);
        }
        if (!(*((unsigned __int8 *)v54 - 24) | *(unsigned __int8 *)v54))
        {
          if (v39 == 0.0)
          {
            v139 = *(v54 - 1);
            if (v139 < v53)
              v139 = v53;
            *(v54 - 1) = v139;
            v35 = v35 - v139;
          }
          else
          {
            v58 = *(v54 - 2);
            v59 = *(v54 - 1);
            if (v59 < (float)((float)(v35 * v58) / v57))
              v59 = (float)(v35 * v58) / v57;
            *(v54 - 1) = v59;
            v35 = v35 - v59;
            v57 = v57 - v58;
            if (v57 <= 0.0)
              goto LABEL_71;
          }
        }
        v54 += 10;
        --v55;
        if (!--v56)
          goto LABEL_71;
      }
    }
LABEL_250:
    __break(1u);
LABEL_251:
    __break(0xC471u);
    JUMPOUT(0x1943672C4);
  }
LABEL_71:
  if (v35 > 0.0 && v30)
  {
    v110 = (float *)(v40 + 32);
    v111 = v26;
    do
    {
      if (!v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1943672E4);
      }
      if (*((_BYTE *)v110 - 20) == 4)
      {
        v112 = *(v110 - 1);
        v113 = (float)(v35 * v112) / v36;
        v35 = v35 - v113;
        v36 = v36 - v112;
        *v110 = *v110 + v113;
      }
      v110 += 10;
      --v34;
      --v111;
    }
    while (v111);
  }
  v27 = v35;
LABEL_74:
  if (v27 > 0.0 && v26 && (*((_BYTE *)this + 48) & 1) != 0 && v37 < 100.0)
  {
    v60 = 0;
    v61 = 40 * *((unsigned int *)this + 7);
    while (v61 != v60)
    {
      v62 = *((_QWORD *)this + 2);
      v63 = v62 + v60;
      if (*(_BYTE *)(v62 + v60 + 12) != 3
        || (*(_BYTE *)(v63 + 14) ? (v64 = *(float *)(v63 + 8)) : (v64 = (float)*(int *)(v63 + 8)),
            (v65 = (float)(v27 * v64) / v37,
             v27 = v27 - v65,
             *(float *)(v62 + v60 + 32) = *(float *)(v62 + v60 + 32) + v65,
             v27 != 0.0)
         && (v37 = v37 - v64, v37 != 0.0)))
      {
        v60 += 40;
        if (40 * v26 != v60)
          continue;
      }
      goto LABEL_88;
    }
LABEL_263:
    __break(0xC471u);
    JUMPOUT(0x194367284);
  }
LABEL_88:
  if (v27 > 0.0)
  {
    v66 = v26 - v32;
    if (v26 > v32)
    {
      v140 = v26;
LABEL_215:
      v141 = v140;
      while (v141)
      {
        v142 = v141--;
        if (*((_DWORD *)this + 7) <= v141)
        {
          __break(0xC471u);
          JUMPOUT(0x1943672F4);
        }
        v143 = *((_QWORD *)this + 2);
        if (*(_BYTE *)(v143 + 40 * v141 + 12) || !*(_BYTE *)(v143 + 40 * v141 + 36))
        {
          v144 = v27 / (float)v66;
          v27 = v27 - v144;
          --v66;
          *(float *)(v143 + 40 * v141 + 32) = v144 + *(float *)(v143 + 40 * v141 + 32);
          v140 = v142 - 1;
          goto LABEL_215;
        }
      }
    }
  }
  if (v27 > 0.0 && v32 != 0 && v26 == v32)
  {
    v107 = 0;
    v108 = v27 / (float)v26;
    v109 = 40 * *((unsigned int *)this + 7);
    do
    {
      if (v109 == v107)
      {
        __break(0xC471u);
        JUMPOUT(0x1943672DCLL);
      }
      *(float *)(*((_QWORD *)this + 2) + v107 + 32) = v108;
      v27 = v27 - v108;
      v107 += 40;
    }
    while (40 * v26 != v107);
  }
  if (v27 < 0.0)
  {
    if (v26)
    {
      if (v26 - 1 >= *((_DWORD *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1943672ECLL);
      }
      v114 = *((_QWORD *)this + 2);
      v115 = v26 - 1;
      v116 = 0.0;
      v117 = v26 - 1;
      do
      {
        v118 = v117;
        if (!*(_BYTE *)(v114 + 40 * v117 + 12))
          v116 = v116 + (float)(*(float *)(v114 + 40 * v117 + 32) - *(float *)(v114 + 40 * v117 + 24));
        --v117;
      }
      while (v118);
      if (v116 > 0.0)
      {
        v119 = *((unsigned int *)this + 7);
        v120 = 40 * v26;
        do
        {
          if (v115 >= v119)
          {
            __break(0xC471u);
            JUMPOUT(0x1943672CCLL);
          }
          v121 = *((_QWORD *)this + 2) + v120;
          if (!*(_BYTE *)(v121 - 28))
          {
            v122 = *(float *)(v121 - 8);
            v123 = v122 - *(float *)(v121 - 16);
            v124 = (float)(v27 * v123) / v116;
            *(float *)(v121 - 8) = v122 + v124;
            v27 = v27 - v124;
            if (v27 >= 0.0)
              break;
            v116 = v116 - v123;
          }
          v120 -= 40;
        }
        while (v120 && v116 > 0.0);
      }
      if (v27 < 0.0)
      {
        if (v26 - 1 >= *((_DWORD *)this + 7))
          goto LABEL_263;
        v145 = *((_QWORD *)this + 2);
        v146 = 0.0;
        v147 = v26 - 1;
        do
        {
          v148 = v147;
          if (*(_BYTE *)(v145 + 40 * v147 + 12) == 4)
            v146 = v146 + (float)(*(float *)(v145 + 40 * v147 + 32) - *(float *)(v145 + 40 * v147 + 24));
          --v147;
        }
        while (v148);
        if (v146 > 0.0)
        {
          v149 = *((unsigned int *)this + 7);
          v150 = 40 * v26;
          v151 = v26 - 1;
          do
          {
            if (v115 >= v149)
            {
              __break(0xC471u);
              JUMPOUT(0x19436730CLL);
            }
            v152 = *((_QWORD *)this + 2) + v150;
            if (*(_BYTE *)(v152 - 28) == 4)
            {
              v153 = *(float *)(v152 - 8);
              v154 = v153 - *(float *)(v152 - 16);
              v155 = (float)(v27 * v154) / v146;
              *(float *)(v152 - 8) = v153 + v155;
              v27 = v27 - v155;
              if (v27 >= 0.0)
                break;
              v146 = v146 - v154;
            }
            if (v151-- == 0)
              break;
            v150 -= 40;
          }
          while (v146 > 0.0);
        }
      }
    }
    if (v27 < 0.0)
    {
      if (!v26)
      {
        v71 = 0;
        v69 = *((_QWORD *)this + 1);
        goto LABEL_113;
      }
      if (v26 - 1 >= *((_DWORD *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x19436731CLL);
      }
      v125 = *((_QWORD *)this + 2);
      v126 = 0.0;
      v127 = v26 - 1;
      do
      {
        v128 = v127;
        if ((*(_BYTE *)(v125 + 40 * v127 + 12) & 0xF7) == 3)
          v126 = v126 + (float)(*(float *)(v125 + 40 * v127 + 32) - *(float *)(v125 + 40 * v127 + 24));
        --v127;
      }
      while (v128);
      if (v126 > 0.0)
      {
        v129 = *((unsigned int *)this + 7);
        v130 = 40 * v26;
        do
        {
          if ((unint64_t)v26 - 1 >= v129)
          {
            __break(0xC471u);
            JUMPOUT(0x194367304);
          }
          v131 = *((_QWORD *)this + 2) + v130;
          if ((*(_BYTE *)(v131 - 28) & 0xF7) == 3)
          {
            v132 = *(float *)(v131 - 8);
            v133 = v132 - *(float *)(v131 - 16);
            v134 = (float)(v27 * v133) / v126;
            *(float *)(v131 - 8) = v132 + v134;
            v27 = v27 - v134;
            if (v27 >= 0.0)
              break;
            v126 = v126 - v133;
          }
          v130 -= 40;
        }
        while (v130 && v126 > 0.0);
      }
    }
  }
  v69 = *((_QWORD *)this + 1);
  if (v26)
  {
    v70 = 0;
    v71 = 0;
    v72 = 32;
    do
    {
      if (*(_DWORD *)(v69 + 212) <= v70)
      {
        __break(0xC471u);
        JUMPOUT(0x19436729CLL);
      }
      v73 = *(_QWORD *)(v69 + 200);
      if (*(_DWORD *)(v73 + 4 * v70) == v71)
        v74 = *(_BYTE *)(v69 + 328) & 0x10;
      else
        v74 = 16;
      *(_BYTE *)(v69 + 328) = v74 | *(_BYTE *)(v69 + 328) & 0xEF;
      *(_DWORD *)(v73 + 4 * v70) = v71;
      if (v70 >= *((unsigned int *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1943672A4);
      }
      v75 = ceilf(*(float *)(*((_QWORD *)this + 2) + v72) * 64.0);
      if (v75 >= 2147500000.0)
      {
        v76 = 0x7FFFFFFF;
      }
      else if (v75 <= -2147500000.0)
      {
        v76 = 0x80000000;
      }
      else
      {
        v76 = (int)v75;
      }
      v69 = *((_QWORD *)this + 1);
      v77 = *(_DWORD *)(v69 + 332);
      v9 = __OFADD__(v76, v77);
      v78 = v76 + v77;
      v79 = (v76 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v79 = v78;
      v9 = __OFADD__(v71, v79);
      v80 = v71 + v79;
      v71 = (v71 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v71 = v80;
      ++v70;
      v72 += 40;
    }
    while (v26 != v70);
  }
  else
  {
    v71 = 0;
  }
LABEL_113:
  v81 = *(_DWORD *)(v69 + 212);
  if (!v81)
    goto LABEL_251;
  v82 = v81 - 1;
  v83 = *(_QWORD *)(v69 + 200);
  v84 = *(_BYTE *)(v69 + 328);
  if (*(_DWORD *)(v83 + 4 * v82) == v71)
    v85 = v84 & 0x10;
  else
    v85 = 16;
  *(_BYTE *)(v69 + 328) = v85 | v84 & 0xEF;
  *(_DWORD *)(v83 + 4 * v82) = v71;
}

void WebCore::RenderTable::addOverflowFromChildren(WebCore::RenderTable *this, void *a2)
{
  int v3;
  unsigned int v4;
  int v5;
  void *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  void *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  void *v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  float v23;
  double v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t i;
  uint64_t v50;
  const WebCore::RenderBox *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::RenderStyle *v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  int v60;

  v3 = *((_DWORD *)this + 31);
  if ((v3 & 4) != 0)
  {
    v4 = *((_DWORD *)this + 40);
    switch((unsigned __int16)v3 >> 13)
    {
      case 2:
      case 4:
        v5 = WebCore::RenderTable::outerBorderAfter(this, a2);
        break;
      case 3:
      case 5:
        v5 = WebCore::RenderTable::outerBorderBefore(this);
        break;
      default:
        if ((*((_BYTE *)this + 123) & 4) != 0)
          v5 = WebCore::RenderTable::outerBorderStart(this, a2);
        else
          v5 = WebCore::RenderTable::outerBorderEnd(this, a2);
        break;
    }
    v7 = v4 + v5;
    if (__OFADD__(v4, v5))
      v7 = (v4 >> 31) + 0x7FFFFFFF;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        v8 = WebCore::RenderTable::borderAfter(this, v6);
        break;
      case 3:
      case 5:
        v8 = WebCore::RenderTable::borderBefore(this, v6);
        break;
      default:
        if ((*((_BYTE *)this + 123) & 4) != 0)
          v8 = *((_DWORD *)this + 85);
        else
          v8 = *((_DWORD *)this + 86);
        break;
    }
    v9 = v7 - v8;
    if (__OFSUB__(v7, v8))
      v9 = (v7 >> 31) + 0x7FFFFFFF;
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        v57 = WebCore::RenderTable::borderBefore(this, v6);
        goto LABEL_131;
      case 3:
      case 5:
        v57 = WebCore::RenderTable::borderAfter(this, v6);
LABEL_131:
        v10 = v57;
        break;
      default:
        if ((*((_BYTE *)this + 123) & 4) != 0)
          v10 = *((_DWORD *)this + 86);
        else
          v10 = *((_DWORD *)this + 85);
        break;
    }
    switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
    {
      case 2:
      case 4:
        v11 = WebCore::RenderTable::outerBorderBefore(this);
        break;
      case 3:
      case 5:
        v11 = WebCore::RenderTable::outerBorderAfter(this, v6);
        break;
      default:
        if ((*((_BYTE *)this + 123) & 4) != 0)
          v11 = WebCore::RenderTable::outerBorderEnd(this, v6);
        else
          v11 = WebCore::RenderTable::outerBorderStart(this, v6);
        break;
    }
    v13 = v10 - v11;
    if (__OFSUB__(v10, v11))
      v13 = (v10 >> 31) + 0x7FFFFFFF;
    v14 = *((_DWORD *)this + 41);
    v15 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v15 - 2) < 4)
    {
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v16 = WebCore::RenderTable::outerBorderStart(this, v12);
      else
        v16 = WebCore::RenderTable::outerBorderEnd(this, v12);
    }
    else if (v15 == 1)
    {
      v16 = WebCore::RenderTable::outerBorderBefore(this);
    }
    else
    {
      v16 = WebCore::RenderTable::outerBorderAfter(this, v12);
    }
    v18 = v14 + v16;
    if (__OFADD__(v14, v16))
      v18 = (v14 >> 31) + 0x7FFFFFFF;
    v19 = *((_DWORD *)this + 31);
    v20 = (unsigned __int16)v19 >> 13;
    if ((v20 - 2) < 4)
    {
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v25 = *((_DWORD *)this + 85);
      else
        v25 = *((_DWORD *)this + 86);
    }
    else
    {
      v21 = v20 - 1;
      if (v21)
      {
        if ((v19 & 4) != 0)
        {
          if ((*((_BYTE *)this + 328) & 8) != 0)
            WebCore::RenderTable::recalcSections(this, v17);
          v25 = WebCore::RenderTable::outerBorderAfter(this, v17);
        }
        else
        {
          v56 = (WebCore::RenderTable *)((char *)this + 80);
          switch(v21)
          {
            case 0:
              v23 = WebCore::RenderStyle::borderTopWidth(v56);
              break;
            case 1:
            case 3:
              v23 = WebCore::RenderStyle::borderRightWidth(v56);
              break;
            case 2:
            case 4:
              v23 = WebCore::RenderStyle::borderLeftWidth(v56);
              break;
            default:
              v22 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
              v23 = 0.0;
              if ((*(_BYTE *)(v22 + 196) & 0xE) != 0)
              {
                v52 = *(_QWORD *)(v22 + 200);
                if (*(_BYTE *)(v52 + 5) && *(_BYTE *)(v52 + 68) == 4)
                {
                  if (*(_BYTE *)(v52 + 70))
                    v23 = *(float *)(v52 + 64);
                  else
                    v23 = (float)*(int *)(v52 + 64);
                }
                else
                {
                  v23 = *(float *)(v22 + 192);
                }
              }
              break;
          }
          v24 = v23 * 64.0;
          if (v24 >= 2147483650.0)
          {
            v25 = 0x7FFFFFFF;
          }
          else if (v24 <= -2147483650.0)
          {
            v25 = 0x80000000;
          }
          else
          {
            v25 = (int)v24;
          }
        }
      }
      else
      {
        v25 = WebCore::RenderTable::borderBefore(this, v17);
      }
    }
    v26 = v18 - v25;
    if (__OFSUB__(v18, v25))
      v26 = (v18 >> 31) + 0x7FFFFFFF;
    v27 = *((_DWORD *)this + 31);
    v28 = (unsigned __int16)v27 >> 13;
    if ((v28 - 2) < 4)
    {
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v30 = *((_DWORD *)this + 86);
      else
        v30 = *((_DWORD *)this + 85);
    }
    else
    {
      if (v28 == 1)
      {
        v29 = WebCore::RenderTable::borderAfter(this, v17);
      }
      else if ((v27 & 4) != 0)
      {
        if ((*((_BYTE *)this + 328) & 8) != 0)
          WebCore::RenderTable::recalcSections(this, v17);
        v29 = WebCore::RenderTable::outerBorderBefore(this);
      }
      else
      {
        v29 = WebCore::RenderBlock::borderBefore(this);
      }
      v30 = v29;
    }
    v31 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if ((v31 - 2) < 4)
    {
      if ((*((_BYTE *)this + 123) & 4) != 0)
        v32 = WebCore::RenderTable::outerBorderEnd(this, v17);
      else
        v32 = WebCore::RenderTable::outerBorderStart(this, v17);
    }
    else if (v31 == 1)
    {
      v32 = WebCore::RenderTable::outerBorderAfter(this, v17);
    }
    else
    {
      v32 = WebCore::RenderTable::outerBorderBefore(this);
    }
    v33 = v30 - v32;
    if (__OFSUB__(v30, v32))
      v33 = (v30 >> 31) + 0x7FFFFFFF;
    v34 = v9 - v13;
    if (__OFSUB__(v9, v13))
      v34 = (v9 >> 31) + 0x7FFFFFFF;
    v35 = v26 - v33;
    if (__OFSUB__(v26, v33))
      v35 = (v26 >> 31) + 0x7FFFFFFF;
    v58 = __PAIR64__(v33, v13);
    v59 = v34;
    v60 = v35;
    if (v13 | v33 || v34 != *((_DWORD *)this + 40) || v35 != *((_DWORD *)this + 41))
    {
      WebCore::RenderBox::addLayoutOverflow(this, (const WebCore::LayoutRect *)&v58);
      WebCore::RenderBox::addVisualOverflow((uint64_t)this, (const WebCore::LayoutRect *)&v58);
    }
  }
  v36 = *((unsigned int *)this + 61);
  if ((_DWORD)v36)
  {
    for (i = 0; i < v36; ++i)
    {
      v50 = *(_QWORD *)(*((_QWORD *)this + 29) + 8 * i);
      if (v50)
      {
        v51 = *(const WebCore::RenderBox **)(v50 + 8);
        if (v51)
        {
          v58 = *((_QWORD *)v51 + 19);
          WebCore::RenderBox::addOverflowFromChild(this, v51, (const WebCore::LayoutSize *)&v58);
          v36 = *((unsigned int *)this + 61);
        }
      }
    }
  }
  v37 = *((_QWORD *)this + 34);
  if (v37 && (v40 = *(_QWORD *)(v37 + 8)) != 0
    || (v38 = *((_QWORD *)this + 36)) != 0 && (v40 = *(_QWORD *)(v38 + 8)) != 0)
  {
    while (1)
    {
      v58 = *(_QWORD *)(v40 + 152);
      WebCore::RenderBox::addOverflowFromChild(this, (const WebCore::RenderBox *)v40, (const WebCore::LayoutSize *)&v58);
      if ((*((_BYTE *)this + 328) & 8) != 0)
        WebCore::RenderTable::recalcSections(this, v41);
      v39 = *((_QWORD *)this + 35);
      v42 = v39 ? *(_QWORD *)(v39 + 8) : 0;
      if (v42 == v40)
        break;
      v43 = *((_QWORD *)this + 34);
      if (v43)
        v44 = *(_QWORD *)(v43 + 8);
      else
        v44 = 0;
      if (v44 == v40)
      {
        v45 = *((unsigned __int8 *)this + 68);
        v46 = *((unsigned int *)this + 16);
      }
      else
      {
        v45 = *(unsigned __int8 *)(v40 + 51);
        v46 = *(unsigned int *)(v40 + 47);
      }
      v47 = v46 | (v45 << 32);
      if (v47 && (v40 = *(_QWORD *)(v47 + 8)) != 0)
      {
        if (v43)
        {
          if (v39)
          {
            while (*(_BYTE *)(v40 + 46) != 40 || *(_QWORD *)(v43 + 8) == v40 || *(_QWORD *)(v39 + 8) == v40)
            {
              v55 = *(unsigned int *)(v40 + 47);
              if (v55 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32))
              {
                v40 = *(_QWORD *)((v55 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32)) + 8);
                if (v40)
                  continue;
              }
              goto LABEL_93;
            }
          }
          else
          {
            while (*(_BYTE *)(v40 + 46) != 40 || *(_QWORD *)(v43 + 8) == v40)
            {
              v53 = *(unsigned int *)(v40 + 47);
              if (v53 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32))
              {
                v40 = *(_QWORD *)((v53 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32)) + 8);
                if (v40)
                  continue;
              }
              goto LABEL_93;
            }
          }
        }
        else if (v39)
        {
          while (*(_BYTE *)(v40 + 46) != 40 || *(_QWORD *)(v39 + 8) == v40)
          {
            v54 = *(unsigned int *)(v40 + 47);
            if (v54 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32))
            {
              v40 = *(_QWORD *)((v54 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32)) + 8);
              if (v40)
                continue;
            }
            goto LABEL_93;
          }
        }
        else
        {
          while (*(_BYTE *)(v40 + 46) != 40)
          {
            v48 = *(unsigned int *)(v40 + 47);
            if (v48 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32))
            {
              v40 = *(_QWORD *)((v48 | ((unint64_t)*(unsigned __int8 *)(v40 + 51) << 32)) + 8);
              if (v40)
                continue;
            }
            goto LABEL_93;
          }
        }
      }
      else
      {
LABEL_93:
        if (!v39)
          return;
LABEL_55:
        v40 = *(_QWORD *)(v39 + 8);
        if (!v40)
          return;
      }
    }
  }
  else
  {
    v39 = *((_QWORD *)this + 35);
    if (v39)
      goto LABEL_55;
  }
}

void WebCore::RenderTable::recalcSections(WebCore::RenderTable *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  char v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  WTF *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  WTF *v89;
  int v90;
  WTF *v91;
  uint64_t v92;
  _DWORD *v93;
  WTF *v94;
  int v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;

  v3 = (WTF *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  v4 = (WTF *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree(v4, a2);
    else
      --*(_DWORD *)v4;
  }
  v5 = (WTF *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = *((_BYTE *)this + 328);
  *((_BYTE *)this + 328) = v6 & 0xFB;
  v7 = *((unsigned int *)this + 57);
  if ((_DWORD)v7)
  {
    v8 = (_DWORD *)*((_QWORD *)this + 27);
    if (*v8 > 1u)
    {
      v12 = 1;
    }
    else
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v7 == v9)
          break;
        v11 = v8[v9++];
      }
      while (v11 < 2);
      v12 = v10 < v7;
    }
    if (v12)
      LOBYTE(v7) = 64;
    else
      LOBYTE(v7) = 0;
  }
  *((_BYTE *)this + 328) = v7 | v6 & 0xBB;
  v13 = *((unsigned int *)this + 16);
  if (!(v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)))
    goto LABEL_120;
  v14 = *(_QWORD *)((v13 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
  if (!v14)
    goto LABEL_120;
  do
  {
    v15 = v14;
    v16 = *(unsigned int *)(v14 + 47);
    if (v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
      v14 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
    else
      v14 = 0;
    v17 = v15;
    if ((*(_BYTE *)(v15 + 45) & 2) != 0)
      v17 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8);
    v18 = *(_DWORD *)(v17 + 96) & 0x1F;
    if (v18 == 6)
    {
      v19 = *(unsigned __int8 *)(v15 + 46);
      if (v19 == 40)
        v20 = v15;
      else
        v20 = 0;
      if (v20)
      {
        ++*(_DWORD *)(v20 + 16);
        if (v19 == 40)
        {
LABEL_31:
          v21 = *((_QWORD *)this + 36);
          if (v21 && *(_QWORD *)(v21 + 8))
            goto LABEL_37;
          v22 = *(_QWORD *)(v15 + 8);
          if (v22)
            goto LABEL_33;
          v22 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v22 = 1;
          *(_QWORD *)(v22 + 8) = v15;
          v82 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = v22;
          if (!v82)
            goto LABEL_33;
          if (*(_DWORD *)v82 != 1)
          {
            --*(_DWORD *)v82;
            goto LABEL_33;
          }
          WTF::fastFree(v82, a2);
          v22 = *(_QWORD *)(v15 + 8);
          if (v22)
LABEL_33:
            ++*(_DWORD *)v22;
          v23 = (WTF *)*((_QWORD *)this + 36);
          *((_QWORD *)this + 36) = v22;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, a2);
            else
              --*(_DWORD *)v23;
          }
LABEL_37:
          if (*(_BYTE *)(v15 + 282))
            WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v15);
        }
        v24 = *(_DWORD *)(v20 + 16);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x194368164);
        }
        goto LABEL_40;
      }
      if (v19 == 40)
        goto LABEL_31;
    }
    else if (v18 == 7)
    {
      v25 = *(unsigned __int8 *)(v15 + 46);
      if (v25 == 40)
        v20 = v15;
      else
        v20 = 0;
      if (v20)
      {
        ++*(_DWORD *)(v20 + 16);
        if (v25 == 40)
        {
LABEL_50:
          v26 = *((_QWORD *)this + 34);
          if (v26 && *(_QWORD *)(v26 + 8))
          {
            v83 = *((_QWORD *)this + 36);
            if (!v83 || !*(_QWORD *)(v83 + 8))
            {
              WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v98, v15);
              v84 = v98;
              v98 = 0;
              v85 = (WTF *)*((_QWORD *)this + 36);
              *((_QWORD *)this + 36) = v84;
              if (v85)
              {
                v86 = *(_DWORD *)v85 - 1;
                if (*(_DWORD *)v85 != 1)
                  goto LABEL_171;
                WTF::fastFree(v85, a2);
                v85 = v98;
                v98 = 0;
                if (v85)
                {
                  v86 = *(_DWORD *)v85 - 1;
                  if (*(_DWORD *)v85 == 1)
LABEL_180:
                    WTF::fastFree(v85, a2);
                  else
LABEL_171:
                    *(_DWORD *)v85 = v86;
                }
              }
            }
            goto LABEL_56;
          }
          v27 = *(_QWORD *)(v15 + 8);
          if (v27)
            goto LABEL_52;
          v27 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v27 = 1;
          *(_QWORD *)(v27 + 8) = v15;
          v91 = *(WTF **)(v15 + 8);
          *(_QWORD *)(v15 + 8) = v27;
          if (!v91)
            goto LABEL_52;
          if (*(_DWORD *)v91 != 1)
          {
            --*(_DWORD *)v91;
            goto LABEL_52;
          }
          WTF::fastFree(v91, a2);
          v27 = *(_QWORD *)(v15 + 8);
          if (v27)
LABEL_52:
            ++*(_DWORD *)v27;
          v28 = (WTF *)*((_QWORD *)this + 34);
          *((_QWORD *)this + 34) = v27;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
            {
              v85 = v28;
              goto LABEL_180;
            }
            --*(_DWORD *)v28;
          }
LABEL_56:
          if (*(_BYTE *)(v15 + 282))
            WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v15);
        }
        v24 = *(_DWORD *)(v20 + 16);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x194368218);
        }
        goto LABEL_40;
      }
      if (v25 == 40)
        goto LABEL_50;
    }
    else if ((v18 - 10) < 2)
    {
      *((_BYTE *)this + 328) |= 4u;
    }
    else if (v18 == 8)
    {
      v29 = *(unsigned __int8 *)(v15 + 46);
      if (v29 == 40)
        v20 = v15;
      else
        v20 = 0;
      if (v20)
      {
        ++*(_DWORD *)(v20 + 16);
        if (v29 == 40)
        {
LABEL_69:
          v30 = *((_QWORD *)this + 35);
          if (v30 && *(_QWORD *)(v30 + 8))
          {
            v96 = *((_QWORD *)this + 36);
            if (v96 && *(_QWORD *)(v96 + 8))
              goto LABEL_73;
            WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v98, v15);
            v97 = v98;
            v98 = 0;
            v32 = (WTF *)*((_QWORD *)this + 36);
            *((_QWORD *)this + 36) = v97;
            if (!v32)
              goto LABEL_73;
LABEL_71:
            v33 = *(_DWORD *)v32 - 1;
            if (*(_DWORD *)v32 == 1)
            {
              WTF::fastFree(v32, a2);
              v32 = v98;
              v98 = 0;
              if (v32)
              {
                v33 = *(_DWORD *)v32 - 1;
                if (*(_DWORD *)v32 != 1)
                  goto LABEL_72;
                WTF::fastFree(v32, a2);
              }
            }
            else
            {
LABEL_72:
              *(_DWORD *)v32 = v33;
            }
          }
          else
          {
            WTF::WeakPtr<WebCore::CachedRawResourceClient,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v98, v15);
            v31 = v98;
            v98 = 0;
            v32 = (WTF *)*((_QWORD *)this + 35);
            *((_QWORD *)this + 35) = v31;
            if (v32)
              goto LABEL_71;
          }
LABEL_73:
          if (*(_BYTE *)(v15 + 282))
            WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v15);
        }
        v24 = *(_DWORD *)(v20 + 16);
        if (!v24)
        {
          __break(0xC471u);
          JUMPOUT(0x194367CB4);
        }
LABEL_40:
        *(_DWORD *)(v20 + 16) = v24 - 1;
        continue;
      }
      if (v29 == 40)
        goto LABEL_69;
    }
  }
  while (v14);
  v34 = *((unsigned int *)this + 16);
  if (!(v34 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || (v35 = *(_QWORD *)((v34 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) == 0)
  {
LABEL_120:
    LODWORD(v36) = 0;
    goto LABEL_121;
  }
  while (*(_BYTE *)(v35 + 46) != 40)
  {
    v59 = *(unsigned int *)(v35 + 47) | ((unint64_t)*(unsigned __int8 *)(v35 + 51) << 32);
    if (!v59)
      goto LABEL_120;
    LODWORD(v36) = 0;
    v35 = *(_QWORD *)(v59 + 8);
    if (!v35)
      goto LABEL_121;
  }
  LODWORD(v36) = 0;
LABEL_81:
  v37 = *(unsigned int *)(v35 + 212);
  if ((_DWORD)v37)
  {
    v38 = *(_QWORD *)(*(_QWORD *)(v35 + 32) + 8);
    v39 = *(unsigned __int8 *)(v38 + 46);
    if (v39 != 63 && v39 != 35)
    {
      __break(0xC471u);
      JUMPOUT(0x1943682B4);
    }
    v40 = 0;
    v41 = 0;
    v42 = *(unsigned int *)(v38 + 228);
    do
    {
      if (v41 < v42)
      {
        if (v40 >= v37)
        {
          __break(0xC471u);
          JUMPOUT(0x1943682DCLL);
        }
        v43 = *(_QWORD *)(v35 + 200) + 40 * v40;
        v44 = *(_DWORD *)(v43 + 12);
        v45 = v44 >= v41;
        v46 = v44 - v41;
        if (!v45)
          v46 = 0;
        if (v46 <= v42 + ~v41)
        {
          __break(0xC471u);
          JUMPOUT(0x1943682E4);
        }
        v47 = v41;
        v48 = (_BYTE *)(*(_QWORD *)v43 + 32 * v41 + 24);
        do
        {
          if (*((_DWORD *)v48 - 3) || *v48)
            v41 = v47;
          ++v47;
          v48 += 32;
        }
        while (v42 != v47);
      }
      ++v40;
    }
    while (v40 != v37);
  }
  else
  {
    v41 = 0;
  }
  if (v41 + 1 > v36)
    v36 = v41 + 1;
  else
    v36 = v36;
  while (1)
  {
    v49 = *(unsigned int *)(v35 + 47) | ((unint64_t)*(unsigned __int8 *)(v35 + 51) << 32);
    if (!v49)
      break;
    v35 = *(_QWORD *)(v49 + 8);
    if (!v35)
      break;
    if (*(_BYTE *)(v35 + 46) == 40)
      goto LABEL_81;
  }
  v50 = *((unsigned int *)this + 57);
  if (v50 < v36)
  {
    v51 = *((unsigned int *)this + 56);
    v52 = (WTF *)*((_QWORD *)this + 27);
    if (v51 < v36)
    {
      v53 = v51 + (v51 >> 2);
      if (v53 >= 0x10)
        v54 = v53 + 1;
      else
        v54 = 16;
      if (v54 <= v36)
        v55 = v36;
      else
        v55 = v54;
      if (v55 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1943682ECLL);
      }
      v56 = WTF::fastMalloc((WTF *)(4 * v55));
      *((_DWORD *)this + 56) = v55;
      *((_QWORD *)this + 27) = v56;
      if ((_DWORD)v50)
      {
        v92 = 4 * v50;
        v93 = (_DWORD *)v56;
        v94 = v52;
        do
        {
          v95 = *(_DWORD *)v94;
          v94 = (WTF *)((char *)v94 + 4);
          *v93++ = v95;
          v92 -= 4;
        }
        while (v92);
      }
      if (!v52)
      {
LABEL_113:
        v58 = *((unsigned int *)this + 57);
        if ((_DWORD)v58 != (_DWORD)v36)
          memset_pattern16((void *)(v56 + 4 * v58), &unk_1969FCF40, (4 * v36 - 4 * v58) & 0xFFFFFFFFFFFFFFFCLL);
        goto LABEL_121;
      }
      if ((WTF *)v56 == v52)
      {
        *((_QWORD *)this + 27) = 0;
        *((_DWORD *)this + 56) = 0;
      }
      WTF::fastFree(v52, v57);
      v52 = (WTF *)*((_QWORD *)this + 27);
    }
    v56 = (uint64_t)v52;
    if (v52)
      goto LABEL_113;
  }
LABEL_121:
  *((_DWORD *)this + 57) = v36;
  v60 = (v36 + 1);
  v61 = *((unsigned int *)this + 53);
  if (v61 < v60)
  {
    v62 = *((unsigned int *)this + 52);
    v63 = (WTF *)*((_QWORD *)this + 25);
    if (v62 < v60)
    {
      v64 = v62 + (v62 >> 2);
      if (v64 >= 0x10)
        v65 = v64 + 1;
      else
        v65 = 16;
      if (v65 <= v60)
        v66 = v60;
      else
        v66 = v65;
      if (v66 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1943682D4);
      }
      v67 = WTF::fastMalloc((WTF *)(4 * v66));
      *((_DWORD *)this + 52) = v66;
      *((_QWORD *)this + 25) = v67;
      if ((_DWORD)v61)
      {
        v87 = 4 * v61;
        v88 = (_DWORD *)v67;
        v89 = v63;
        do
        {
          v90 = *(_DWORD *)v89;
          v89 = (WTF *)((char *)v89 + 4);
          *v88++ = v90;
          v87 -= 4;
        }
        while (v87);
      }
      if (!v63)
      {
LABEL_132:
        v69 = *((unsigned int *)this + 53);
        if ((_DWORD)v69 != (_DWORD)v60)
          bzero((void *)(v67 + 4 * v69), (4 * v60 - 4 * v69) & 0xFFFFFFFFFFFFFFFCLL);
        goto LABEL_134;
      }
      if ((WTF *)v67 == v63)
      {
        *((_QWORD *)this + 25) = 0;
        *((_DWORD *)this + 52) = 0;
      }
      WTF::fastFree(v63, v68);
      v63 = (WTF *)*((_QWORD *)this + 25);
    }
    v67 = (uint64_t)v63;
    if (v63)
      goto LABEL_132;
  }
LABEL_134:
  *((_DWORD *)this + 53) = v60;
  v70 = *((unsigned __int8 *)this + 68);
  for (i = *((unsigned int *)this + 16); ; i = *(unsigned int *)(v73 + 47))
  {
    v72 = i | (v70 << 32);
    if (!v72)
      break;
    v73 = *(_QWORD *)(v72 + 8);
    if (!v73)
      break;
    if (*(_BYTE *)(v73 + 46) == 40)
    {
LABEL_138:
      v74 = *(_QWORD *)(*(_QWORD *)(v73 + 32) + 8);
      v75 = *(unsigned __int8 *)(v74 + 46);
      if (v75 != 35 && v75 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x194368294);
      }
      v76 = *(unsigned int *)(v73 + 212);
      if ((_DWORD)v76)
      {
        v77 = *(unsigned int *)(v74 + 228);
        v78 = (_DWORD *)(*(_QWORD *)(v73 + 200) + 12);
        v79 = 40 * v76;
        do
        {
          v80 = *v78;
          if (v80 > v77)
          {
            WTF::VectorTypeOperations<WebCore::RenderTableSection::CellStruct>::destruct(*(_QWORD *)(v78 - 3) + 32 * v77, (void *)(*(_QWORD *)(v78 - 3) + 32 * v80));
            *v78 = v77;
          }
          v78 += 10;
          v79 -= 40;
        }
        while (v79);
      }
      while (1)
      {
        v81 = *(unsigned int *)(v73 + 47);
        if (!(v81 | ((unint64_t)*(unsigned __int8 *)(v73 + 51) << 32)))
          goto LABEL_149;
        v73 = *(_QWORD *)((v81 | ((unint64_t)*(unsigned __int8 *)(v73 + 51) << 32)) + 8);
        if (!v73)
          goto LABEL_149;
        if (*(_BYTE *)(v73 + 46) == 40)
          goto LABEL_138;
      }
    }
    v70 = *(unsigned __int8 *)(v73 + 51);
  }
LABEL_149:
  *((_BYTE *)this + 328) &= ~8u;
}

uint64_t WebCore::RenderBox::marginEnd(WebCore::RenderBox *this, const WebCore::RenderStyle *a2)
{
  const WebCore::RenderStyle *v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v9;

  v2 = (WebCore::RenderBox *)((char *)this + 80);
  if (a2)
    v2 = a2;
  v3 = *((_DWORD *)v2 + 10);
  v4 = *((_DWORD *)v2 + 11);
  v5 = (v3 >> 26) & 1;
  v6 = (unsigned __int16)v4 >> 13;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v5 = (v3 & 0x4000000) == 0;
    }
    else if (v6 != 5)
    {
      v7 = 3;
      if ((v3 & 0x4000000) == 0)
        v7 = 1;
      return *((unsigned int *)this + v7 + 42);
    }
  }
  v9 = v5 == 0;
  v7 = 2;
  if (!v9)
    v7 = 0;
  return *((unsigned int *)this + v7 + 42);
}

unint64_t WebCore::RenderBox::layoutOverflowRect(WebCore::RenderBox *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 4);
  v3 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
  v5 = v3;
  v6 = HIDWORD(v4);
  v7 = *((_DWORD *)this + 40);
  v8 = *((_DWORD *)this + 41);
  v9 = v7 - HIDWORD(v4);
  if (__OFSUB__(v7, HIDWORD(v4)))
    v9 = (v7 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v9, HIDWORD(v3));
  v11 = v9 - HIDWORD(v3);
  v12 = (v9 >> 31) + 0x7FFFFFFF;
  if (v10)
    v13 = v12;
  else
    v13 = v11;
  v14 = v8 - v3;
  if (__OFSUB__(v8, (_DWORD)v3))
    v14 = (v8 >> 31) + 0x7FFFFFFF;
  v10 = __OFSUB__(v14, (_DWORD)v4);
  v15 = v14 - v4;
  v16 = (v14 >> 31) + 0x7FFFFFFF;
  if (v10)
    v17 = v16;
  else
    v17 = v15;
  v18 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v18 <= 5 && ((1 << v18) & 0x2A) != 0)
  {
    v19 = *((_DWORD *)this + 5);
    v21 = HIDWORD(v4) + v13;
    if (__OFADD__(HIDWORD(v4), v13))
      v21 = (HIDWORD(v4) >> 31) + 0x7FFFFFFF;
    v10 = __OFSUB__(v7, v21);
    v22 = v7 - v21;
    v23 = (v7 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v23 = v22;
    v24 = v3 + v17;
    if (__OFADD__((_DWORD)v3, v17))
      v24 = (v3 >> 31) + 0x7FFFFFFF;
    v10 = __OFSUB__(v8, v24);
    v25 = v8 - v24;
    v26 = (v8 >> 31) + 0x7FFFFFFF;
    if (!v10)
      v26 = v25;
    if ((v19 & 0x1000) != 0)
    {
      LODWORD(v6) = v23;
      v5 = v3;
    }
    else
    {
      v5 = v26;
    }
  }
  else
  {
    v19 = *((_DWORD *)this + 5);
  }
  if ((v19 & 0x10000) != 0)
  {
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
    (*(void (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
  }
  return v6 | (unint64_t)(v5 << 32);
}

uint64_t WebCore::JSDOMWindowBase::javaScriptRuntimeFlags(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 3408) + 104))(*(_QWORD *)(a1 + 3408));
  if (result)
    return *(unsigned int *)(*(_QWORD *)(result + 136) + 424);
  return result;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeDeprecatedGradientColorStops(WebCore::CSSPropertyParserHelpers *this, int **a2, const WebCore::CSSParserContext *a3)
{
  _BYTE *v6;
  int *v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  WebCore::CSSParserTokenRange *v11;
  int *v13;
  char v14;
  int *v15;
  __int128 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  char v19;
  int *v20;
  unsigned __int16 *v21;
  int v22;
  unsigned __int16 **v23;
  int *v24;
  int v25;
  _OWORD *v26;
  WTF *v27;
  uint64_t v28;
  int v29;
  WTF *result;
  int v32;
  uint64_t v33;
  _DWORD **v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned __int16 *v43;
  int *v44;
  WTF *v45;
  uint64_t v46;
  _BYTE v47[32];
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  char v50;
  __int128 *v51;
  __int128 *v52;
  unsigned __int16 *v53[2];
  char v54;
  _QWORD v55[2];

  v6 = v47;
  v45 = (WTF *)v47;
  v46 = 2;
  while (WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, (WebCore::CSSParserTokenRange *)a2))
  {
    v43 = 0;
    v44 = 0;
    v7 = *a2;
    if (*a2 >= a2[1])
    {
      v7 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v7 = (int *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    v8 = WebCore::CSSParserToken::functionId(v7);
    if (v8 - 779 > 2)
      goto LABEL_36;
    v9 = v8;
    v51 = (__int128 *)WebCore::CSSPropertyParserHelpers::consumeFunction((__int128 **)a2, (WebCore::CSSParserTokenRange *)a2);
    v52 = (__int128 *)a2;
    switch(v9)
    {
      case 0x30Bu:
        v10 = 0.0;
        break;
      case 0x30Du:
        v53[0] = 0;
        v55[0] = 0;
        WebCore::CSSPropertyParserHelpers::MetaResolver<std::optional<std::variant<WebCore::PercentRaw,WebCore::NumberRaw>>,WebCore::CSSPropertyParserHelpers::RawResolverBase,WebCore::PercentRaw,WebCore::NumberRaw>::consumeAndResolve((uint64_t)&v51, v53, (uint64_t)v55, 0x10100000000, &v48);
        if (v55[0])
          WTF::fastFree((WTF *)(v55[0] - 16), a2);
        if (v53[0])
          WTF::fastFree((WTF *)(v53[0] - 8), a2);
        if (!v50)
          goto LABEL_36;
        v53[0] = v48;
        v53[1] = v49;
        if (v49 == 0xFFFFFFFFLL)
        {
          v37 = std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::CSSPrefixedLinearGradientValue::create(v37, v38, v39, v40, v41, v42);
        }
        v55[0] = &v54;
        v10 = ((double (*)(_QWORD *, unsigned __int16 **))off_1E339DA78[v49])(v55, v53);
        if (!WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v51, v11))
        {
LABEL_36:
          v19 = 0;
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 48) = 0;
          goto LABEL_37;
        }
        break;
      case 0x30Cu:
        v10 = 1.0;
        break;
      default:
        goto LABEL_36;
    }
    if ((int)v10 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v10))
    {
      v13 = &WebCore::staticCSSValuePool[4 * (int)v10 + 2064];
      *v13 += 2;
    }
    else
    {
      v13 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v13 = 2;
      v14 = *((_BYTE *)v13 + 6);
      *((_WORD *)v13 + 2) = 1;
      *((_BYTE *)v13 + 6) = v14 & 0xFC;
      *((double *)v13 + 1) = v10;
    }
    v15 = v44;
    v44 = v13;
    if (v15)
    {
      if (*v15 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v15, (WTF::StringImpl *)a2);
      else
        *v15 -= 2;
    }
    v16 = v51;
    if (v51 >= v52)
    {
      v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v16 & 0x3F) != 0)
      goto LABEL_30;
    v25 = *((_DWORD *)v16 + 4);
    if (v25 < 0)
    {
      v25 = WebCore::cssValueKeywordID(*((_QWORD *)v16 + 1), *((unsigned int *)v16 + 1) | ((unint64_t)((*(_DWORD *)v16 >> 22) & 1) << 32));
      *((_DWORD *)v16 + 4) = v25;
    }
    if ((unsigned __int16)v25 != 124)
    {
LABEL_30:
      LOWORD(v53[0]) = 1792;
      WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)&v51, (uint64_t)a3, v53, (int **)&v48);
      v17 = v48;
    }
    else
    {
      v17 = 0;
    }
    v18 = v43;
    v43 = v17;
    if (!v18)
      goto LABEL_34;
    if (*(_DWORD *)v18 != 2)
    {
      *(_DWORD *)v18 -= 2;
LABEL_34:
      if (!v17)
        goto LABEL_36;
      goto LABEL_35;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, (WTF::StringImpl *)a2);
    v17 = v43;
    if (!v43)
      goto LABEL_36;
LABEL_35:
    if (v51 != v52)
      goto LABEL_36;
    if (HIDWORD(v46) == (_DWORD)v46)
    {
      WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSGradientColorStop>((unsigned int *)&v45, (unint64_t)&v43);
    }
    else
    {
      v22 = HIDWORD(v46) + 1;
      v23 = (unsigned __int16 **)((char *)v45 + 16 * HIDWORD(v46));
      v43 = 0;
      *v23 = v17;
      v24 = v44;
      v44 = 0;
      v23[1] = (unsigned __int16 *)v24;
      HIDWORD(v46) = v22;
    }
    v19 = 1;
LABEL_37:
    v20 = v44;
    v44 = 0;
    if (v20)
    {
      if (*v20 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, (WTF::StringImpl *)a2);
      else
        *v20 -= 2;
    }
    v21 = v43;
    v43 = 0;
    if (!v21)
      goto LABEL_44;
    if (*(_DWORD *)v21 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, (WTF::StringImpl *)a2);
      if ((v19 & 1) == 0)
      {
LABEL_66:
        if (HIDWORD(v46))
        {
          v33 = 16 * HIDWORD(v46);
          v34 = (_DWORD **)((char *)v45 + 8);
          do
          {
            v35 = *v34;
            *v34 = 0;
            if (v35)
            {
              if (*v35 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, (WTF::StringImpl *)a2);
              else
                *v35 -= 2;
            }
            v36 = *(v34 - 1);
            *(v34 - 1) = 0;
            if (v36)
            {
              if (*v36 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, (WTF::StringImpl *)a2);
              else
                *v36 -= 2;
            }
            v34 += 2;
            v33 -= 16;
          }
          while (v33);
        }
        goto LABEL_67;
      }
    }
    else
    {
      *(_DWORD *)v21 -= 2;
LABEL_44:
      if ((v19 & 1) == 0)
        goto LABEL_66;
    }
  }
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v45, (WTF::StringImpl *)HIDWORD(v46));
  v26 = (_OWORD *)((char *)this + 16);
  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 2;
  v27 = v45;
  if (v45 == (WTF *)v47)
  {
    if (HIDWORD(v46))
    {
      v28 = 16 * HIDWORD(v46);
      do
      {
        *v26++ = *(_OWORD *)v6;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        v6 += 16;
        v28 -= 16;
      }
      while (v28);
    }
  }
  else
  {
    v45 = (WTF *)v47;
    *(_QWORD *)this = v27;
    v32 = v46;
    LODWORD(v46) = 2;
    *((_DWORD *)this + 2) = v32;
  }
  v29 = HIDWORD(v46);
  HIDWORD(v46) = 0;
  *((_DWORD *)this + 3) = v29;
  *((_BYTE *)this + 48) = 1;
LABEL_67:
  result = v45;
  if (v47 != (_BYTE *)v45 && v45 != 0)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *WebCore::CSSPrefixedLinearGradientValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF *result;
  int v25;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF *v31;
  uint64_t v32;
  _BYTE v33[32];

  v12 = WTF::fastCompactMalloc((WTF *)0x70);
  v31 = (WTF *)v33;
  v32 = 2;
  v13 = *(WTF **)a5;
  if (*(_QWORD *)a5 == a5 + 16)
  {
    v14 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v14)
    {
      v15 = (WTF *)((char *)v13 + 16 * v14);
      v16 = v33;
      do
      {
        v17 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        *v16 = v17;
        v18 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        v16[1] = v18;
        v19 = (_DWORD *)*((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v11);
          else
            *v19 -= 2;
        }
        v20 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v11);
          else
            *v20 -= 2;
        }
        v13 = (WTF *)((char *)v13 + 16);
        v16 += 2;
      }
      while (v13 != v15);
    }
  }
  else
  {
    *(_QWORD *)a5 = a5 + 16;
    v31 = v13;
    v25 = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = 2;
    LODWORD(v32) = v25;
  }
  v21 = *(_DWORD *)(a5 + 12);
  *(_DWORD *)(a5 + 12) = 0;
  HIDWORD(v32) = v21;
  WebCore::CSSPrefixedLinearGradientValue::CSSPrefixedLinearGradientValue(v12, a1, a2, a3, a4, (uint64_t)&v31);
  *a6 = v12;
  if (HIDWORD(v32))
  {
    v26 = 16 * HIDWORD(v32);
    v27 = (_DWORD **)((char *)v31 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v22);
        else
          *v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v22);
        else
          *v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
  }
  result = v31;
  if (v33 != (_BYTE *)v31 && v31 != 0)
  {
    v31 = 0;
    LODWORD(v32) = 0;
    return (WTF *)WTF::fastFree(result, v22);
  }
  return result;
}

uint64_t WebCore::CSSPrefixedLinearGradientValue::CSSPrefixedLinearGradientValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  int v25;
  char v26;

  *(_DWORD *)a1 = 2;
  v12 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 28672;
  *(_BYTE *)(a1 + 6) = v12 & 0xFC;
  *(_BYTE *)(a1 + 8) = 0;
  v13 = (WTF::StringImpl *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  v14 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v14 != -1)
  {
    ((void (*)(char *, WTF::StringImpl *))off_1E339D948[v14])(&v26, v13);
    *(_DWORD *)(a1 + 24) = v14;
  }
  v15 = (_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 2;
  v16 = *(_QWORD **)a6;
  if (*(_QWORD *)a6 == a6 + 16)
  {
    v17 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v17)
    {
      v18 = &v16[2 * v17];
      do
      {
        v19 = (_DWORD *)*v16;
        *v16 = 0;
        *v15 = v19;
        v20 = v16[1];
        v16[1] = 0;
        v15[1] = v20;
        v21 = (_DWORD *)v16[1];
        v16[1] = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v13);
          else
            *v21 -= 2;
        }
        v22 = (_DWORD *)*v16;
        *v16 = 0;
        if (v22)
        {
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v13);
          else
            *v22 -= 2;
        }
        v16 += 2;
        v15 += 2;
      }
      while (v16 != v18);
    }
  }
  else
  {
    *(_QWORD *)a6 = a6 + 16;
    *(_QWORD *)(a1 + 32) = v16;
    v25 = *(_DWORD *)(a6 + 8);
    *(_DWORD *)(a6 + 8) = 2;
    *(_DWORD *)(a1 + 40) = v25;
  }
  v23 = *(_DWORD *)(a6 + 12);
  *(_DWORD *)(a6 + 12) = 0;
  *(_DWORD *)(a1 + 44) = v23;
  *(_BYTE *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 84) = a4;
  *(_QWORD *)(a1 + 92) = a5;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumePrefixedLinearGradient(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  WebCore::CSSParserTokenRange *v10;
  __int128 *v11;
  int v12;
  uint64_t result;
  WTF::StringImpl *v14;
  int v15;
  WTF *v16;
  WTF *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  int v27;
  int v28;
  unint64_t v29;
  __int128 *v30;
  char v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  __int128 *v35;
  char v36;
  unsigned int v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  unint64_t v40;
  __int128 *v41;
  char v42;
  unsigned int v43;
  unsigned __int16 v44;
  int v45;
  unint64_t v46;
  __int128 *v47;
  char v48;
  unsigned int v49;
  unsigned __int16 v50;
  __int16 v51;
  uint64_t v52;
  _DWORD **v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD **v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF *v60;
  uint64_t v61;
  _BYTE v62[32];
  _BYTE v63[16];
  int v64;
  WTF *v65;
  int v66;
  unsigned int v67;
  int v68;
  char v69;
  char v70;
  uint64_t v71[2];
  int v72;
  char v73;
  unsigned __int16 *v74;
  _BYTE v75[16];
  int v76;
  char v77;
  _QWORD v78[2];
  int v79;
  char v80;

  v75[0] = 0;
  v77 = 0;
  v8 = *(unsigned __int8 *)(a3 + 48);
  v74 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>(a2, &v74, v8 | 0x100000000, (uint64_t)&v65);
  if (v74)
    WTF::fastFree((WTF *)(v74 - 8), v9);
  if (!v69)
  {
    v11 = *(__int128 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v11 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if ((*(_DWORD *)v11 & 0x3F) != 0)
    {
LABEL_11:
      LOBYTE(v71[0]) = 0;
      v73 = 0;
      goto LABEL_12;
    }
    v28 = *((_DWORD *)v11 + 4);
    if (v28 < 0)
    {
      v28 = WebCore::cssValueKeywordID(*((_QWORD *)v11 + 1), *((unsigned int *)v11 + 1) | ((unint64_t)((*(_DWORD *)v11 >> 22) & 1) << 32));
      *((_DWORD *)v11 + 4) = v28;
    }
    switch((__int16)v28)
    {
      case 254:
        v30 = *(__int128 **)a2;
        v29 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)a2 == v29)
          goto LABEL_168;
        v30 = (__int128 *)((char *)v30 + 24);
        *(_QWORD *)a2 = v30;
        goto LABEL_89;
      case 255:
        v41 = *(__int128 **)a2;
        v40 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)a2 == v40)
        {
          v42 = 1;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v41 = *(__int128 **)a2;
          }
        }
        else
        {
          v41 = (__int128 *)((char *)v41 + 24);
          *(_QWORD *)a2 = v41;
        }
        while (1)
        {
          if ((unint64_t)v41 < v40 || (v42 & 1) != 0)
          {
            if ((unint64_t)v41 >= v40)
              v41 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v43 = *(_DWORD *)v41;
          }
          else
          {
            v43 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v43;
            v42 = 1;
          }
          if ((v43 & 0x3F) != 0x10)
            break;
          v41 = (__int128 *)(*(_QWORD *)a2 + 24);
          *(_QWORD *)a2 = v41;
        }
        v44 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Horizontal> [2]> const>(a2);
        if (v44 < 0x100u)
        {
          LOBYTE(v78[0]) = 1;
          goto LABEL_124;
        }
        v51 = v44 | 0x100;
        goto LABEL_142;
      case 258:
        v35 = *(__int128 **)a2;
        v34 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)a2 == v34)
        {
          v36 = 1;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v35 = *(__int128 **)a2;
          }
        }
        else
        {
          v35 = (__int128 *)((char *)v35 + 24);
          *(_QWORD *)a2 = v35;
        }
        while (1)
        {
          if ((unint64_t)v35 < v34 || (v36 & 1) != 0)
          {
            if ((unint64_t)v35 >= v34)
              v35 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v37 = *(_DWORD *)v35;
          }
          else
          {
            v37 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v37;
            v36 = 1;
          }
          if ((v37 & 0x3F) != 0x10)
            break;
          v35 = (__int128 *)(*(_QWORD *)a2 + 24);
          *(_QWORD *)a2 = v35;
        }
        v38 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Vertical> [2]> const>(a2);
        if (v38 < 0x100u)
        {
          LOBYTE(v78[0]) = 0;
          goto LABEL_137;
        }
        v51 = v38 << 8;
        goto LABEL_142;
      case 259:
        v47 = *(__int128 **)a2;
        v46 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)a2 == v46)
        {
          v48 = 1;
          {
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
            v47 = *(__int128 **)a2;
          }
        }
        else
        {
          v47 = (__int128 *)((char *)v47 + 24);
          *(_QWORD *)a2 = v47;
        }
        while (1)
        {
          if ((unint64_t)v47 < v46 || (v48 & 1) != 0)
          {
            if ((unint64_t)v47 >= v46)
              v47 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v49 = *(_DWORD *)v47;
          }
          else
          {
            v49 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v49;
            v48 = 1;
          }
          if ((v49 & 0x3F) != 0x10)
            break;
          v47 = (__int128 *)(*(_QWORD *)a2 + 24);
          *(_QWORD *)a2 = v47;
        }
        v50 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Vertical> [2]> const>(a2);
        if (v50 >= 0x100u)
        {
          v51 = (v50 << 8) | 1;
          goto LABEL_142;
        }
        LOBYTE(v78[0]) = 1;
LABEL_137:
        v45 = 3;
        break;
      default:
        goto LABEL_11;
    }
LABEL_143:
    v79 = v45;
    LOBYTE(v71[0]) = 0;
    v72 = -1;
    ((void (*)(char *, uint64_t *, _QWORD *))off_1E339D948[v45])(&v80, v71, v78);
    v72 = v45;
    v73 = 1;
    if (v79 != -1)
      ((void (*)(char *, _QWORD *))off_1E339D8E8[v79])(&v80, v78);
LABEL_12:
    if (!v73)
      goto LABEL_25;
    if (!v77)
    {
      v75[0] = 0;
      v76 = -1;
      v27 = v72;
      if (v72 != -1)
      {
        ((void (*)(_QWORD *, _BYTE *, uint64_t *))off_1E339D948[v72])(v78, v75, v71);
        v76 = v27;
      }
      v77 = 1;
      goto LABEL_75;
    }
    if (v76 == -1)
    {
      if (v72 == -1)
        goto LABEL_75;
    }
    else if (v72 == -1)
    {
      ((void (*)(_QWORD *, _BYTE *))off_1E339D8E8[v76])(v78, v75);
      v76 = -1;
LABEL_75:
      result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, (WebCore::CSSParserTokenRange *)v9);
      if ((result & 1) == 0)
      {
        *a1 = 0;
        if (v73 && v72 != -1)
          result = ((uint64_t (*)(_QWORD *, uint64_t *))off_1E339D8E8[v72])(v78, v71);
        goto LABEL_34;
      }
      if (v73 && v72 != -1)
        ((void (*)(_QWORD *, uint64_t *))off_1E339D8E8[v72])(v78, v71);
      goto LABEL_25;
    }
    v78[0] = v75;
    ((void (*)(_QWORD *, _BYTE *, uint64_t *))off_1E339D918[v72])(v78, v75, v71);
    goto LABEL_75;
  }
  if (v68 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_168:
    v31 = 1;
    {
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      v30 = *(__int128 **)a2;
    }
    while (1)
    {
LABEL_89:
      if ((unint64_t)v30 < v29 || (v31 & 1) != 0)
      {
        if ((unint64_t)v30 >= v29)
          v30 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v32 = *(_DWORD *)v30;
      }
      else
      {
        v32 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v32;
        v31 = 1;
      }
      if ((v32 & 0x3F) != 0x10)
        break;
      v30 = (__int128 *)(*(_QWORD *)a2 + 24);
      *(_QWORD *)a2 = v30;
    }
    v39 = WebCore::CSSPropertyParserHelpers::consumeIdentUsingMapping<WTF::SortedArrayMap<std::pair<WebCore::CSSValueID,WebCore::CSSPrefixedLinearGradientValue::Horizontal> [2]> const>(a2);
    if (v39 >= 0x100u)
    {
      v51 = v39;
LABEL_142:
      LOWORD(v78[0]) = v51;
      v45 = 5;
    }
    else
    {
      LOBYTE(v78[0]) = 0;
LABEL_124:
      v45 = 4;
    }
    goto LABEL_143;
  }
  v78[0] = &v80;
  ((void (*)(uint64_t *__return_ptr, _QWORD *, WTF **))off_1E339D8D8[v68])(v71, v78, &v65);
  if (!v77)
  {
    v75[0] = 0;
    v76 = -1;
    v12 = v72;
    if (v72 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, uint64_t *))off_1E339D948[v72])(v78, v75, v71);
      v76 = v12;
    }
    v77 = 1;
    goto LABEL_22;
  }
  if (v76 == -1)
  {
    if (v72 == -1)
      goto LABEL_24;
  }
  else if (v72 == -1)
  {
    ((void (*)(_QWORD *, _BYTE *))off_1E339D8E8[v76])(v78, v75);
    v76 = -1;
    goto LABEL_22;
  }
  v78[0] = v75;
  ((void (*)(_QWORD *, _BYTE *, uint64_t *))off_1E339D918[v72])(v78, v75, v71);
LABEL_22:
  if (v72 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_1E339D8E8[v72])(v78, v71);
LABEL_24:
  result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)a2, v10);
  if ((result & 1) == 0)
  {
LABEL_33:
    *a1 = 0;
LABEL_34:
    if (v69 && v68 != -1)
      result = ((uint64_t (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v68])(v71, &v65);
    goto LABEL_66;
  }
LABEL_25:
  if (v69 && v68 != -1)
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v68])(v71, &v65);
  result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthColorStopList((uint64_t)&v65, (__int128 **)a2, a3, 0);
  if (!v70)
  {
    *a1 = 0;
    goto LABEL_66;
  }
  if (v77)
  {
    v63[0] = 0;
    v64 = -1;
    v15 = v76;
    if (v76 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, _BYTE *, _BYTE *))off_1E339D978[v76])(v71, v63, v75);
      v64 = v15;
      if (!v70)
      {
        __break(1u);
        goto LABEL_33;
      }
    }
  }
  else
  {
    v64 = 0;
  }
  v60 = (WTF *)v62;
  v61 = 2;
  v16 = v65;
  if (v65 == (WTF *)&v68)
  {
    if (v67)
    {
      v17 = (WTF *)((char *)v65 + 16 * v67);
      v18 = v62;
      do
      {
        v19 = *(_DWORD **)v16;
        *(_QWORD *)v16 = 0;
        *v18 = v19;
        v20 = *((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        v18[1] = v20;
        v21 = (_DWORD *)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = 0;
        if (v21)
        {
          if (*v21 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v14);
          else
            *v21 -= 2;
        }
        v22 = *(_DWORD **)v16;
        *(_QWORD *)v16 = 0;
        if (v22)
        {
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v14);
          else
            *v22 -= 2;
        }
        v16 = (WTF *)((char *)v16 + 16);
        v18 += 2;
      }
      while (v16 != v17);
    }
  }
  else
  {
    v65 = (WTF *)&v68;
    v60 = v16;
    v33 = v66;
    v66 = 2;
    LODWORD(v61) = v33;
  }
  v23 = v67;
  v67 = 0;
  HIDWORD(v61) = v23;
  WebCore::CSSPrefixedLinearGradientValue::create((uint64_t)v63, a4, 0x600000000, 0, (uint64_t)&v60, v71);
  *a1 = v71[0];
  v71[0] = 0;
  if (HIDWORD(v61))
  {
    v52 = 16 * HIDWORD(v61);
    v53 = (_DWORD **)((char *)v60 + 8);
    do
    {
      v54 = *v53;
      *v53 = 0;
      if (v54)
      {
        if (*v54 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v54, v24);
        else
          *v54 -= 2;
      }
      v55 = *(v53 - 1);
      *(v53 - 1) = 0;
      if (v55)
      {
        if (*v55 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, v24);
        else
          *v55 -= 2;
      }
      v53 += 2;
      v52 -= 16;
    }
    while (v52);
  }
  result = (uint64_t)v60;
  if (v62 != (_BYTE *)v60 && v60 != 0)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    result = WTF::fastFree((WTF *)result, v24);
  }
  if (v64 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E339D8E8[v64])(v78, v63);
  v64 = -1;
  if (v70)
  {
    if (v67)
    {
      v56 = 16 * v67;
      v57 = (_DWORD **)((char *)v65 + 8);
      do
      {
        v58 = *v57;
        *v57 = 0;
        if (v58)
        {
          if (*v58 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v58, v24);
          else
            *v58 -= 2;
        }
        v59 = *(v57 - 1);
        *(v57 - 1) = 0;
        if (v59)
        {
          if (*v59 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v24);
          else
            *v59 -= 2;
        }
        v57 += 2;
        v56 -= 16;
      }
      while (v56);
    }
    result = (uint64_t)v65;
    if (&v68 != (int *)v65 && v65 != 0)
    {
      v65 = 0;
      v66 = 0;
      result = WTF::fastFree((WTF *)result, v24);
    }
  }
LABEL_66:
  if (v77)
  {
    if (v76 != -1)
      return ((uint64_t (*)(WTF **, _BYTE *))off_1E339D8E8[v76])(&v65, v75);
  }
  return result;
}

unsigned int *WebCore::CSSLinearGradientValue::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WTF::StringImpl *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  unsigned int v15[12];

  v12 = WTF::fastCompactMalloc((WTF *)0x70);
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v15, a5);
  WebCore::CSSLinearGradientValue::CSSLinearGradientValue(v12, a1, a2, a3, a4, (WTF::StringImpl *)v15);
  *a6 = v12;
  return WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v15, v13);
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeLinearGradient(_QWORD *a1, WebCore::CSSPropertyParserHelpers *this, uint64_t a3, char a4)
{
  WebCore::CSSPropertyParserHelpers *v6;
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WebCore::CSSParserTokenRange *v13;
  __int128 *v14;
  uint64_t result;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  WebCore::CSSPropertyParserHelpers *v20;
  __int128 *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v26;
  _DWORD **v27;
  _DWORD *v28;
  _DWORD *v29;
  unsigned int v30[12];
  _BYTE v31[16];
  int v32;
  WTF *v33;
  int v34;
  unsigned int v35;
  int v36;
  char v37;
  char v38;
  uint64_t v39[2];
  unsigned int v40;
  char v41;
  unsigned __int16 *v42;
  _BYTE v43[16];
  unsigned int v44;
  char v45;
  char v46;
  char *v47;

  v6 = this;
  v8 = *(__int128 **)this;
  if (*(_QWORD *)this >= *((_QWORD *)this + 1))
  {
    v8 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v8 & 0x3F) != 0)
    goto LABEL_3;
  v17 = *((_DWORD *)v8 + 4);
  if (v17 < 0)
  {
    v17 = WebCore::cssValueKeywordID(*((_QWORD *)v8 + 1), *((unsigned int *)v8 + 1) | ((unint64_t)((*(_DWORD *)v8 >> 22) & 1) << 32));
    *((_DWORD *)v8 + 4) = v17;
  }
  if ((unsigned __int16)v17 != 952)
  {
LABEL_3:
    v9 = 0;
    v10 = 0;
  }
  else
  {
    result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod((__int128 **)v6, this);
    if ((v18 & 0xFF00000000) == 0)
    {
      *a1 = 0;
      return result;
    }
    v9 = result;
    v10 = v18 & 0xFFFFFFFFFFLL;
  }
  v43[0] = 0;
  v45 = 0;
  v11 = *(unsigned __int8 *)(a3 + 48);
  v42 = 0;
  WebCore::CSSPropertyParserHelpers::MetaConsumer<WebCore::AngleRaw>::consume<>((uint64_t)v6, &v42, v11 | 0x100000000, (uint64_t)&v33);
  if (v42)
    WTF::fastFree((WTF *)(v42 - 8), v12);
  if (!v37)
    goto LABEL_53;
  if (v36 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_77:
    v26 = 16 * v24;
    v27 = (_DWORD **)((char *)v33 + 8);
    do
    {
      v28 = *v27;
      *v27 = 0;
      if (v28)
      {
        if (*v28 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v23);
        else
          *v28 -= 2;
      }
      v29 = *(v27 - 1);
      *(v27 - 1) = 0;
      if (v29)
      {
        if (*v29 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v29, v23);
        else
          *v29 -= 2;
      }
      v27 += 2;
      v26 -= 16;
    }
    while (v26);
    goto LABEL_65;
  }
  v47 = &v46;
  ((void (*)(uint64_t *__return_ptr, char **, WTF **))off_1E339D9A8[v36])(v39, &v47, &v33);
  if (v45)
  {
    if (v44 == -1)
    {
      if (v40 == -1)
        goto LABEL_14;
    }
    else if (v40 == -1)
    {
      ((void (*)(char **, _BYTE *))off_1E339D9B8[v44])(&v47, v43);
      v44 = -1;
      goto LABEL_12;
    }
    v47 = v43;
    ((void (*)(char **, _BYTE *, uint64_t *))off_1E339D9E8[v40])(&v47, v43, v39);
  }
  else
  {
    v43[0] = 0;
    v44 = -1;
    v16 = v40;
    if (v40 != -1)
    {
      ((void (*)(char **, _BYTE *, uint64_t *))off_1E339DA18[v40])(&v47, v43, v39);
      v44 = v16;
    }
    v45 = 1;
  }
LABEL_12:
  if (v40 != -1)
    ((void (*)(char **, uint64_t *))off_1E339D9B8[v40])(&v47, v39);
  while (1)
  {
LABEL_14:
    if (v37 && v36 != -1)
      ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(v39, &v33);
    if (v45)
    {
      if (HIDWORD(v10))
        goto LABEL_22;
      v14 = *(__int128 **)v6;
      if (*(_QWORD *)v6 >= *((_QWORD *)v6 + 1))
      {
        v14 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
      }
      if ((*(_DWORD *)v14 & 0x3F) == 0)
      {
        v19 = *((_DWORD *)v14 + 4);
        if (v19 < 0)
        {
          v19 = WebCore::cssValueKeywordID(*((_QWORD *)v14 + 1), *((unsigned int *)v14 + 1) | ((unint64_t)((*(_DWORD *)v14 >> 22) & 1) << 32));
          *((_DWORD *)v14 + 4) = v19;
        }
        if ((unsigned __int16)v19 == 952)
        {
          result = WebCore::CSSPropertyParserHelpers::consumeColorInterpolationMethod((__int128 **)v6, v13);
          if (((unint64_t)v13 & 0xFF00000000) == 0)
          {
LABEL_24:
            *a1 = 0;
            goto LABEL_25;
          }
          v9 = result;
          v10 = (unint64_t)v13 & 0xFFFFFFFFFFLL;
        }
      }
      if (v45)
        goto LABEL_22;
    }
    if ((v10 & 0xFF00000000) != 0)
    {
LABEL_22:
      result = WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace((__int128 **)v6, v13);
      if ((result & 1) == 0)
        goto LABEL_24;
    }
    result = (uint64_t)WebCore::CSSPropertyParserHelpers::consumeLengthColorStopList((uint64_t)&v33, (__int128 **)v6, a3, 1);
    if (!v38)
      goto LABEL_24;
    a3 = WebCore::CSSPropertyParserHelpers::computeGradientColorInterpolationMethod(v9, v10, (uint64_t *)v33, v35);
    v6 = v20;
    if (!v45)
      break;
    v31[0] = 0;
    v32 = -1;
    v9 = v44;
    if (v44 == -1)
      goto LABEL_61;
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E339DA48[v44])(v39, v31, v43);
    v32 = v9;
    if (v38)
      goto LABEL_61;
    __break(1u);
LABEL_53:
    v21 = *(__int128 **)v6;
    if (*(_QWORD *)v6 >= *((_QWORD *)v6 + 1))
    {
      v21 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
      }
    }
    if (WebCore::CSSParserToken::id((unsigned int *)v21) == 780)
    {
      result = WebCore::CSSPropertyParserHelpers::consumeLinearGradient(WebCore::CSSParserTokenRange &,WebCore::CSSParserContext const&,WebCore::CSSGradientRepeat)::$_3::operator()((uint64_t)v39, (__int128 **)v6);
      if (!v41)
      {
        *a1 = 0;
        if (v37 && v36 != -1)
          result = ((uint64_t (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore8AngleRawENS6_15UnevaluatedCalcIS7_EEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v36])(v39, &v33);
        goto LABEL_25;
      }
      std::optional<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>>>::operator=[abi:sn180100]<std::variant<std::monostate,WebCore::AngleRaw,WebCore::UnevaluatedCalc<WebCore::AngleRaw>,WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical,std::pair<WebCore::CSSLinearGradientValue::Horizontal,WebCore::CSSLinearGradientValue::Vertical>>,void>((uint64_t)v43, (uint64_t)v39);
      if (v41)
        goto LABEL_12;
    }
  }
  v32 = 0;
LABEL_61:
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v30, (WTF::StringImpl *)&v33);
  WebCore::CSSLinearGradientValue::create((uint64_t)v31, a4, a3, (uint64_t)v6, (WTF::StringImpl *)v30, v39);
  *a1 = v39[0];
  v39[0] = 0;
  result = (uint64_t)WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, v22);
  if (v32 != -1)
    result = ((uint64_t (*)(char **, _BYTE *))off_1E339D9B8[v32])(&v47, v31);
  v32 = -1;
  if (!v38)
    goto LABEL_25;
  v24 = v35;
  if (v35)
    goto LABEL_77;
LABEL_65:
  result = (uint64_t)v33;
  if (&v36 != (int *)v33 && v33 != 0)
  {
    v33 = 0;
    v34 = 0;
    result = WTF::fastFree((WTF *)result, v23);
  }
LABEL_25:
  if (v45)
  {
    if (v44 != -1)
      return ((uint64_t (*)(WTF **, _BYTE *))off_1E339D9B8[v44])(&v33, v43);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, WTF::StringImpl *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  int v14;

  v4 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2;
  v5 = *(_QWORD **)a2;
  if (*(WTF::StringImpl **)a2 == (WTF::StringImpl *)((char *)a2 + 16))
  {
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = &v5[2 * v6];
      do
      {
        v8 = (_DWORD *)*v5;
        *v5 = 0;
        *v4 = v8;
        v9 = v5[1];
        v5[1] = 0;
        v4[1] = v9;
        v10 = (_DWORD *)v5[1];
        v5[1] = 0;
        if (v10)
        {
          if (*v10 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
          else
            *v10 -= 2;
        }
        v11 = (_DWORD *)*v5;
        *v5 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
          else
            *v11 -= 2;
        }
        v5 += 2;
        v4 += 2;
      }
      while (v5 != v7);
    }
  }
  else
  {
    *(_QWORD *)a2 = (char *)a2 + 16;
    *(_QWORD *)a1 = v5;
    v14 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 2;
    *(_DWORD *)(a1 + 8) = v14;
  }
  v12 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v12;
  return a1;
}

unsigned int *WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(unsigned int *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v7;
  _DWORD **v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = a1[3];
  if ((_DWORD)v3)
  {
    v7 = 16 * v3;
    v8 = (_DWORD **)(*(_QWORD *)a1 + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, a2);
        else
          *v9 -= 2;
      }
      v10 = *(v8 - 1);
      *(v8 - 1) = 0;
      if (v10)
      {
        if (*v10 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
        else
          *v10 -= 2;
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v4 = *(WTF **)a1;
  if (a1 + 4 != *(unsigned int **)a1 && v4 != 0)
  {
    *(_QWORD *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WebCore::CSSPropertyParserHelpers::consumeLengthColorStopList(uint64_t a1, __int128 **a2, uint64_t a3, int a4)
{
  int v7;
  WTF::StringImpl *v8;
  _BOOL4 v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  WTF *v16;
  int *v17;
  _DWORD *v18;
  _DWORD *v19;
  int *v20;
  int v21;
  int v22;
  int **v23;
  int *v24;
  int *v25;
  _DWORD *v26;
  int *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  char v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF *result;
  _OWORD *v37;
  WTF *v38;
  _BYTE *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _DWORD **v43;
  _DWORD *v44;
  _DWORD *v45;
  int v46;
  _DWORD *v47;
  int *v48;
  _DWORD *v49;
  WTF *v50;
  void *v51;
  _BYTE v52[32];

  v50 = (WTF *)v52;
  v51 = (void *)2;
  v46 = a4 ^ 1;
  v7 = 1;
  while (1)
  {
    LOWORD(v47) = 1792;
    WebCore::CSSPropertyParserHelpers::consumeColor((WebCore::CSSPropertyParserHelpers *)a2, a3, &v47, &v48);
    WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *(unsigned __int8 *)(a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v49);
    v9 = v48 == 0;
    if (v48)
    {
      if (!v49)
        goto LABEL_23;
      WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, *(unsigned __int8 *)(a3 + 48), 0, 1, 0, 0, 0, (uint64_t *)&v47);
      if (!v47)
        goto LABEL_23;
      v10 = HIDWORD(v51);
      if (HIDWORD(v51) == (_DWORD)v51)
      {
        v11 = WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v50, HIDWORD(v51) + 1, (unint64_t)&v48);
        v10 = HIDWORD(v51);
        v12 = v50;
        v13 = *(_DWORD **)v11;
        if (*(_QWORD *)v11)
          *v13 += 2;
        *((_QWORD *)v12 + 2 * v10) = v13;
        v14 = *(_DWORD **)(v11 + 8);
        if (v14)
          *v14 += 2;
        *((_QWORD *)v12 + 2 * v10 + 1) = v14;
      }
      else
      {
        v16 = v50;
        v17 = v48;
        if (v48)
          *v48 += 2;
        *((_QWORD *)v16 + 2 * v10) = v17;
        v18 = v49;
        if (v49)
          *v49 += 2;
        *((_QWORD *)v16 + 2 * v10 + 1) = v18;
      }
      HIDWORD(v51) = v10 + 1;
      v19 = v47;
      v47 = 0;
      v20 = v49;
      v49 = v19;
      if (!v20)
        goto LABEL_23;
      v21 = *v20 - 2;
      if (*v20 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
        v20 = v47;
        v47 = 0;
        if (!v20)
          goto LABEL_23;
        v21 = *v20 - 2;
        if (*v20 == 2)
        {
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v8);
          goto LABEL_23;
        }
      }
      *v20 = v21;
    }
    else
    {
      if (!v49)
      {
        v15 = 0;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 48) = 0;
        v49 = 0;
        goto LABEL_29;
      }
      if (((v46 | v7) & 1) != 0)
      {
        v15 = 0;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 48) = 0;
        goto LABEL_26;
      }
    }
LABEL_23:
    if (HIDWORD(v51) == (_DWORD)v51)
    {
      WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSGradientColorStop>((unsigned int *)&v50, (unint64_t)&v48);
    }
    else
    {
      v22 = HIDWORD(v51) + 1;
      v23 = (int **)((char *)v50 + 16 * HIDWORD(v51));
      v24 = v48;
      v48 = 0;
      *v23 = v24;
      v25 = v49;
      v49 = 0;
      v23[1] = v25;
      HIDWORD(v51) = v22;
    }
    v15 = 1;
    v7 = v9;
LABEL_26:
    v26 = v49;
    v49 = 0;
    if (v26)
    {
      if (*v26 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v8);
      else
        *v26 -= 2;
    }
LABEL_29:
    v27 = v48;
    v48 = 0;
    if (v27)
    {
      if (*v27 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v8);
      else
        *v27 -= 2;
    }
    if (!v15)
      goto LABEL_54;
    v29 = *a2;
    v28 = a2[1];
    if (*a2 >= v28)
    {
      v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v29 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v29 & 0x3F) != 0x15)
      break;
    v30 = *a2;
    if (*a2 == v28)
    {
      v32 = 1;
      {
        v31 = v28;
      }
      else
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v31 = *a2;
      }
    }
    else
    {
      v31 = (__int128 *)((char *)v30 + 24);
      *a2 = (__int128 *)((char *)v30 + 24);
    }
    while (1)
    {
      if (v31 < v28 || (v32 & 1) != 0)
      {
        if (v31 >= v28)
          v31 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v33 = *(_DWORD *)v31;
      }
      else
      {
        v33 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v33;
        v32 = 1;
      }
      if ((v33 & 0x3F) != 0x10)
        break;
      v31 = (__int128 *)((char *)*a2 + 24);
      *a2 = v31;
    }
  }
  if ((v7 & 1) != 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
LABEL_54:
    v34 = (WTF::StringImpl *)HIDWORD(v51);
LABEL_55:
    if ((_DWORD)v34)
    {
      v42 = 16 * v34;
      v43 = (_DWORD **)((char *)v50 + 8);
      do
      {
        v44 = *v43;
        *v43 = 0;
        if (v44)
        {
          if (*v44 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v34);
          else
            *v44 -= 2;
        }
        v45 = *(v43 - 1);
        *(v43 - 1) = 0;
        if (v45)
        {
          if (*v45 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v45, v34);
          else
            *v45 -= 2;
        }
        v43 += 2;
        v42 -= 16;
      }
      while (v42);
    }
    goto LABEL_56;
  }
  v34 = (WTF::StringImpl *)HIDWORD(v51);
  if (HIDWORD(v51) <= 1)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    goto LABEL_55;
  }
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v50, (WTF::StringImpl *)HIDWORD(v51));
  v37 = (_OWORD *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  v38 = v50;
  if (v50 == (WTF *)v52)
  {
    v39 = v52;
    if (HIDWORD(v51))
    {
      v40 = 16 * HIDWORD(v51);
      do
      {
        *v37++ = *(_OWORD *)v39;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        v39 += 16;
        v40 -= 16;
      }
      while (v40);
    }
  }
  else
  {
    v50 = (WTF *)v52;
    *(_QWORD *)a1 = v38;
    *(_DWORD *)(a1 + 8) = (_DWORD)v51;
  }
  v41 = HIDWORD(v51);
  HIDWORD(v51) = 0;
  *(_DWORD *)(a1 + 12) = v41;
  *(_BYTE *)(a1 + 48) = 1;
LABEL_56:
  result = v50;
  if (v52 != (_BYTE *)v50 && v50 != 0)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    return (WTF *)WTF::fastFree(result, v34);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  uint64_t v5;

  if (*(unsigned int *)(result + 8) > (unint64_t)a2)
  {
    v3 = result;
    if (*(unsigned int *)(result + 12) > (unint64_t)a2)
      result = WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF::StringImpl ***)v3;
    if (a2)
    {
      v5 = *(unsigned int *)(v3 + 12);
      result = WTF::VectorBuffer<WebCore::CSSGradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v3, (unint64_t)a2);
      if (*(WTF::StringImpl ***)v3 != v4)
        result = (uint64_t)WTF::VectorTypeOperations<WebCore::CSSGradientColorStop>::move((WTF::StringImpl *)v4, (WTF::StringImpl *)&v4[2 * v5], *(WTF::StringImpl ***)v3);
    }
    if ((WTF::StringImpl **)(v3 + 16) != v4 && v4 != 0)
    {
      if (*(WTF::StringImpl ***)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v4, a2);
    }
    if (!*(_QWORD *)v3)
    {
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 2;
    }
  }
  return result;
}

uint64_t WebCore::CSSLinearGradientValue::CSSLinearGradientValue(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, WTF::StringImpl *a6)
{
  char v11;
  uint64_t v12;
  char v14;

  *(_DWORD *)a1 = 2;
  v11 = *(_BYTE *)(a1 + 6);
  *(_WORD *)(a1 + 4) = 18432;
  *(_BYTE *)(a1 + 6) = v11 & 0xFC;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v12 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v12 != -1)
  {
    ((void (*)(char *, uint64_t))off_1E339DA18[v12])(&v14, a1 + 8);
    *(_DWORD *)(a1 + 24) = v12;
  }
  WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 32, a6);
  *(_BYTE *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 84) = a4;
  *(_QWORD *)(a1 + 92) = a5;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::CSSGradientColorStop>::move(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *a3 = v6;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      a3[1] = v7;
      v8 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v8)
      {
        if (*v8 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
        else
          *v8 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 16);
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::CSSGradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 28))
  {
    v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSGradientColorStop>(unsigned int *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = (uint64_t *)WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = a1[3];
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v8 = result[1];
  result[1] = 0;
  v6[1] = v8;
  a1[3] = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v6 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::CSSGradientColorStop,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * *((unsigned int *)result + 3));
    WTF::VectorBuffer<WebCore::CSSGradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)result, a2);
    result = WTF::VectorTypeOperations<WebCore::CSSGradientColorStop>::move(v3, v4, *(WTF::StringImpl ***)v2);
    if ((WTF::StringImpl *)((char *)v2 + 16) != v3 && v3 != 0)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v5);
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::horizontalNativeScrollbarVisibility(WebCore::RenderLayerScrollableArea *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 16);
  if (!v1)
  {
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
      return 0;
    }
    if (!BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      return 0;
    return 2;
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 280))(*((_QWORD *)this + 16)) & 1) == 0)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        return 2;
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    if (!v1[137])
      return 0;
    return 2;
  }
  return 1;
}

BOOL WebCore::Scrollbar::isHiddenByStyle(WebCore::Scrollbar *this)
{
  return *((_BYTE *)this + 73) == 2;
}

Class ___ZN3PALL20initVKCImageAnalysisEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL20VisionKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EE50 != -1)
    dispatch_once(&qword_1ECE7EE50, block);
  result = objc_getClass("VKCImageAnalysis");
  qword_1ECE7EEA0 = (uint64_t)result;
  PAL::getVKCImageAnalysisClass[0] = PAL::VKCImageAnalysisFunction;
  return result;
}

Class ___ZN3PALL10initRVItemEv_block_invoke()
{
  Class result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17RevealCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 1;
  if (qword_1ECE7EA08 != -1)
    dispatch_once(&qword_1ECE7EA08, block);
  result = objc_getClass("RVItem");
  qword_1ECE7EA38 = (uint64_t)result;
  PAL::getRVItemClass = PAL::RVItemFunction;
  return result;
}

uint64_t WebCore::JSCSSStyleDeclarationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v26;

  v4 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  (*(void (**)(_QWORD *))(*v4 + 16))(v4);
  if (*(_DWORD *)(a3 + 48))
  {
    v9 = *(_QWORD *)(a3 + 32);
    v8 = (uint64_t *)(a3 + 32);
    v7 = v9;
    if (v9)
    {
      v10 = *(_DWORD *)(v7 - 8);
      v11 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      v15 = *(_QWORD **)(v7 + 16 * v14);
      if (v15 != v4)
      {
        v26 = 1;
        while (v15)
        {
          v14 = ((_DWORD)v14 + v26) & v10;
          v15 = *(_QWORD **)(v7 + 16 * v14);
          ++v26;
          if (v15 == v4)
            goto LABEL_7;
        }
        v14 = *(unsigned int *)(v7 - 4);
      }
LABEL_7:
      if (v14 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v14);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v8 - 16);
        v20 = *v8;
        if (*v8)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v8;
        if (*v8)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v24 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v5 = v4[1];
    if (v5)
    {
      *(_QWORD *)(v5 + 8) = 3;
      v4[1] = 0;
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

uint64_t WebCore::SharedWorkerProvider::setSharedProvider(uint64_t result)
{
  if (qword_1ECE866B8)
  {
    result = 48;
    __break(0xC471u);
  }
  else
  {
    qword_1ECE866B8 = result;
  }
  return result;
}

uint64_t WebCore::ResourceLoadObserver::setShared(uint64_t this, WebCore::ResourceLoadObserver *a2)
{
  if (WebCore::sharedObserver(void)::observer)
  {
    this = 40;
    __break(0xC471u);
  }
  else
  {
    WebCore::sharedObserver(void)::observer = this;
  }
  return this;
}

uint64_t WebCore::SystemSoundManager::setSystemSoundDelegate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t PAL::currentUserInterfaceIdiom(PAL *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 v3;
  PAL *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v1 <= 0xFF)
  {
    v2 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v2 <= 0x100)
      v3 = 0;
    else
      v3 = v2;
    v4 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass(this), "sharedApplication");
    if (v4)
    {
      v5 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v4), "currentDevice"), "userInterfaceIdiom");
      if ((v5 & 0xFFFFFFFFFFFFFFFBLL) != 0)
      {
        if (v5 == 6)
        {
          v6 = 2;
          v7 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
          if (v7 < 0x100)
            goto LABEL_15;
          goto LABEL_14;
        }
LABEL_13:
        v6 = 0;
        v9 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
        if (v9 < 0x100)
        {
LABEL_15:
          atomic_store(v6 | 0x100, &PAL::s_currentUserInterfaceIdiom);
          goto LABEL_16;
        }
LABEL_14:
        if (v6 == v3)
          goto LABEL_16;
        goto LABEL_15;
      }
    }
    else if (!PAL::deviceClassIsSmallScreen(0))
    {
      goto LABEL_13;
    }
    v6 = 1;
    v8 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v8 < 0x100)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_16:
  v10 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v10 <= 0x100)
    LOBYTE(v10) = 0;
  return v10;
}

uint64_t WebCore::PerformanceNavigationTiming::PerformanceNavigationTiming(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, WebCore::SecurityOrigin *a6, unsigned int a7, double a8)
{
  uint64_t *v16;
  uint64_t *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  _QWORD v31[27];
  char v32;
  _QWORD *v33;

  v16 = *(uint64_t **)(a2 + 400);
  if (!v16)
  {
    v28 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v28 != -1)
    {
      v31[0] = &v30;
      v33 = v31;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v16 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v16, 1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = *(uint64_t **)(a2 + 400);
  if (!v17)
  {
    v29 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v29 != -1)
    {
      v31[0] = &v32;
      v33 = v31;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v17 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceTiming::ResourceTiming((uint64_t)v31, (uint64_t)v16, (_DWORD **)&v30, a3, a4, (uint64_t)v17, a6);
  WebCore::PerformanceResourceTiming::PerformanceResourceTiming(a1, (uint64_t)v31, a8);
  WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)v31, v18);
  v20 = v30;
  v30 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  *(_QWORD *)a1 = off_1E34019E0;
  v21 = *a5;
  v22 = a5[1];
  *(_QWORD *)(a1 + 312) = *((_QWORD *)a5 + 4);
  *(_OWORD *)(a1 + 280) = v21;
  *(_OWORD *)(a1 + 296) = v22;
  v23 = *a3;
  v24 = a3[1];
  v25 = a3[2];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a3 + 6);
  *(_OWORD *)(a1 + 336) = v24;
  *(_OWORD *)(a1 + 352) = v25;
  *(_OWORD *)(a1 + 320) = v23;
  v26 = 0x1020000uLL >> (8 * a7);
  if (a7 >= 6)
    LOBYTE(v26) = 0;
  *(_BYTE *)(a1 + 376) = v26;
  return a1;
}

WTF::MonotonicTime *WebCore::Performance::addResourceTiming(uint64_t a1, uint64_t a2)
{
  double v4;
  WebCore::PerformanceEntry *v5;
  WTF::MonotonicTime *result;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char v23;
  int v24;
  WebCore::PerformanceEntry *v25;

  v4 = *(double *)(a1 + 168);
  v5 = (WebCore::PerformanceEntry *)WTF::fastMalloc((WTF *)0x118);
  result = (WTF::MonotonicTime *)WebCore::PerformanceResourceTiming::PerformanceResourceTiming((uint64_t)v5, a2, v4);
  v25 = result;
  if (*(_BYTE *)(a1 + 161))
  {
    v22 = *(unsigned int *)(a1 + 156);
    if ((_DWORD)v22 != *(_DWORD *)(a1 + 152))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * v22) = v5;
      *(_DWORD *)(a1 + 156) = v22 + 1;
      return result;
    }
    result = (WTF::MonotonicTime *)WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>(a1 + 144, (uint64_t *)&v25);
    goto LABEL_35;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    v16 = *(uint64_t **)(a1 + 208);
    if (!v16)
    {
LABEL_21:
      if (*((_DWORD *)v5 + 2) == 1)
        return (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v5 + 8))(v5);
      --*((_DWORD *)v5 + 2);
      return result;
    }
    v23 = 0;
    do
    {
      while (1)
      {
        v24 = *(unsigned __int8 *)(*v16 + 40);
        result = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v5 + 32))(v5);
        if ((result & v24) == 0)
          break;
        WebCore::PerformanceObserver::queueEntry(*v16, v5);
        v16 = (uint64_t *)v16[2];
        v23 = 1;
        if (!v16)
          goto LABEL_44;
      }
      v16 = (uint64_t *)v16[2];
    }
    while (v16);
    if ((v23 & 1) != 0)
LABEL_44:
      result = (WTF::MonotonicTime *)WebCore::Performance::scheduleTaskIfNeeded((_QWORD *)a1);
LABEL_35:
    v5 = v25;
    if (!v25)
      return result;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a1 + 76) >= *(_DWORD *)(a1 + 80))
  {
    v19 = *(unsigned int *)(a1 + 156);
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 152))
    {
      result = (WTF::MonotonicTime *)WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>(a1 + 144, (uint64_t *)&v25);
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 144);
      v25 = 0;
      *(_QWORD *)(v20 + 8 * v19) = v5;
      *(_DWORD *)(a1 + 156) = v19 + 1;
    }
    *(_BYTE *)(a1 + 161) = 1;
    *(_QWORD *)(a1 + 112) = 0;
    WTF::MonotonicTime::now(result);
    result = (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime(a1 + 88, v21 + 0.0);
    goto LABEL_35;
  }
  v7 = *(uint64_t **)(a1 + 208);
  if (v7)
  {
    v17 = 0;
    do
    {
      while (1)
      {
        v18 = *(unsigned __int8 *)(*v7 + 40);
        result = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::PerformanceEntry *))(*(_QWORD *)v5 + 32))(v5);
        if ((result & v18) == 0)
          break;
        WebCore::PerformanceObserver::queueEntry(*v7, v5);
        v7 = (uint64_t *)v7[2];
        v17 = 1;
        if (!v7)
          goto LABEL_28;
      }
      v7 = (uint64_t *)v7[2];
    }
    while (v7);
    if ((v17 & 1) != 0)
LABEL_28:
      result = (WTF::MonotonicTime *)WebCore::Performance::scheduleTaskIfNeeded((_QWORD *)a1);
  }
  v8 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 72))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v12 = *(void **)(a1 + 64);
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 64) = v13;
      result = (WTF::MonotonicTime *)memcpy(v13, v12, 8 * v8);
      if (v12)
      {
        if (*(void **)(a1 + 64) == v12)
        {
          *(_QWORD *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 72) = 0;
        }
        result = (WTF::MonotonicTime *)WTF::fastFree((WTF *)v12, v14);
      }
      v15 = *(unsigned int *)(a1 + 76);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = v5;
      *(_DWORD *)(a1 + 76) = v15 + 1;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v8) = v5;
    *(_DWORD *)(a1 + 76) = v8 + 1;
  }
  return result;
}

uint64_t WebCore::PerformanceResourceTiming::PerformanceResourceTiming(uint64_t a1, uint64_t a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(_BYTE *)(a2 + 162) & 0x40) == 0 && *(_WORD *)(a2 + 160))
  {
    v4 = *(double *)(a2 + 64);
LABEL_5:
    if (v4 != 0.0)
      goto LABEL_6;
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a2 + 162) & 0x40) == 0)
  {
    v4 = *(double *)(a2 + 72);
    goto LABEL_5;
  }
LABEL_14:
  v4 = *(double *)(a2 + 48);
  if (v4 == 0.0)
  {
    v5 = 0.0;
    goto LABEL_7;
  }
LABEL_6:
  v5 = *(double *)&WebCore::timePrecision * floor((v4 - a3) / *(double *)&WebCore::timePrecision) * 1000.0;
LABEL_7:
  v6 = *(double *)(a2 + 136);
  if (v6 == 0.0 && (v6 = *(double *)(a2 + 56), v6 == 0.0))
    v7 = 0.0;
  else
    v7 = *(double *)&WebCore::timePrecision * floor((v6 - a3) / *(double *)&WebCore::timePrecision) * 1000.0;
  *(_DWORD *)(a1 + 8) = 1;
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  *(_QWORD *)(a1 + 16) = v8;
  *(double *)(a1 + 24) = v5;
  *(double *)(a1 + 32) = v7 - v5;
  *(_QWORD *)a1 = off_1E3401A20;
  *(double *)(a1 + 40) = a3;
  v9 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_DWORD *)(a1 + 56) & 0xFFFFFFFE | *(_DWORD *)(a2 + 8) & 1;
  *(_DWORD *)(a1 + 56) = v10;
  v11 = v10 & 0xFFFFFFFD | (2 * ((*(_DWORD *)(a2 + 8) >> 1) & 1));
  *(_DWORD *)(a1 + 56) = v11;
  v12 = v11 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 8) >> 2) & 1));
  *(_DWORD *)(a1 + 56) = v12;
  v13 = v12 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 8) >> 3) & 7));
  *(_DWORD *)(a1 + 56) = v13;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 8) & 0xFFFFFFC0 | v13 & 0x3F;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 8) &= ~1u;
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 88) = v14;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v16;
  *(_OWORD *)(a1 + 176) = v15;
  *(_OWORD *)(a1 + 144) = v17;
  v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 128) = v18;
  v19 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 200) = v19;
  v20 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 208) = v20;
  v21 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 240) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a2 + 200) = 0;
  *(_DWORD *)(a1 + 248) = v22;
  LODWORD(v22) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_DWORD *)(a1 + 252) = v22;
  *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 208);
  WebCore::ResourceTiming::populateServerTiming(a1 + 48, a1 + 264);
  return a1;
}

uint64_t WebCore::RenderLayerCompositor::layerStyleChanged(uint64_t result, uint64_t a2, WebCore::RenderLayer *this, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderLayerBacking **v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WebCore::ScrollingCoordinator *v19;
  WebCore::LocalFrameView *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::RenderWidget *v23;
  WebCore::RenderLayer *v24;
  int v25;
  WebCore::RenderLayer *v26;
  int v27;
  WebCore::RenderLayer *v28;
  int v29;
  WebCore::RenderLayer *v30;
  uint64_t v31;
  WebCore::RenderLayer *v32;
  int v33;
  WebCore::RenderLayer *v34;
  int v35;
  WebCore::RenderLayer *v36;
  int v37;
  uint64_t v38;
  int v40;
  int v41;
  uint64_t v42;
  WebCore::RenderLayer *v43;
  int v44;
  int v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  int v49;
  int v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  float v79;
  float v80;
  int v81;
  float v82;
  float v83;
  uint64_t v84;
  int v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  float v94;
  float v95;
  int v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  __int16 v110;
  int v111;
  int v112;
  unsigned int v113;
  __int16 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  WebCore::RenderLayerBacking *v118;
  WebCore::RenderLayer *v119;
  int v120;
  WebCore::RenderLayer *v121;
  int v122;
  WebCore::RenderLayer *v123;
  int v124;
  WebCore::RenderLayer *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v131;
  int v132;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)();
  uint64_t v139;
  uint64_t (*v140)();
  uint64_t v141;
  uint64_t (*v142)();
  _BOOL4 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)();
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  WebCore::RenderLayer *v152;
  uint64_t v153;
  WebCore::RenderLayer *v154;
  int v155;
  WebCore::RenderLayer *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  float v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WebCore::RenderLayer *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  _QWORD *v181;
  _DWORD *v182;
  WebCore::RenderLayer *v183;
  int v184;
  WebCore::RenderLayer *v185;
  int v186;
  uint64_t v187;
  int v188;
  char v189[4];
  int v190;
  __int16 v191;
  _DWORD *v192;

  if (!(_DWORD)a2)
    return result;
  v6 = a2;
  v7 = result;
  v190 = 0;
  v191 = 0;
  v189[0] = 0;
  if (!*(_BYTE *)(result + 132)
    || (*((_BYTE *)this + 25) & 8) == 0
    || (a2 = *((_QWORD *)this + 4), (v8 = *(_QWORD *)(a2 + 32)) != 0)
    && (v9 = *(_QWORD *)(v8 + 8)) != 0
    && (*(_BYTE *)(*(_QWORD *)(v9 + 104) + 239) & 0x18) != 0
    || (*(_BYTE *)(a2 + 23) & 0x10) != 0 && (*(_BYTE *)(a2 + 52) & 7) == 1 && (*(_BYTE *)(a2 + 53) & 2) != 0)
  {
LABEL_11:
    v11 = (WebCore::RenderLayerBacking **)((char *)this + 256);
    if (!*((_QWORD *)this + 32))
    {
LABEL_12:
      v12 = 0;
      goto LABEL_13;
    }
    goto LABEL_38;
  }
  if ((WebCore::RenderLayerCompositor::requiresCompositingLayer((WebCore::RenderLayerCompositor *)result, (WebCore::RenderObject *)a2, (uint64_t)v189) & 1) != 0|| (v10 = *((_QWORD *)this + 3), (v10 & 0x7800000000) != 0))
  {
    v11 = (WebCore::RenderLayerBacking **)((char *)this + 256);
    if (*((_QWORD *)this + 32))
      goto LABEL_72;
    goto LABEL_245;
  }
  if (!*(_BYTE *)(v7 + 195))
    goto LABEL_11;
  v11 = (WebCore::RenderLayerBacking **)((char *)this + 256);
  v21 = *((_QWORD *)this + 32);
  if ((v10 & 1) == 0)
  {
    if (!v21)
      goto LABEL_12;
LABEL_38:
    v22 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v22 + 46) == 30)
    {
      v177 = *(_QWORD *)(v22 + 32);
      if (v177)
        v177 = *(_QWORD *)(v177 + 8);
      if ((*(_BYTE *)(v177 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19436CE80);
      }
      v178 = *(_QWORD *)(*(_QWORD *)(v177 + 144) + 256);
      if (v178)
      {
        v179 = *(_QWORD *)(v178 + 72);
        v192 = 0;
        (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v179 + 120))(v179, &v192);
        v180 = v192;
        v192 = 0;
        if (v180)
        {
          if (v180[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v180 + 16))(v180);
          else
            --v180[2];
        }
      }
    }
    WebCore::RenderLayer::clearBacking(this);
    WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(this);
    WebCore::RenderLayerCompositor::repaintOnCompositingChange((WebCore::RenderLayerCompositor *)v7, this);
    goto LABEL_92;
  }
  if (!v21)
LABEL_245:
    WebCore::RenderLayerCompositor::repaintOnCompositingChange((WebCore::RenderLayerCompositor *)v7, this);
LABEL_72:
  v31 = *((_QWORD *)this + 10);
  if (v31)
  {
    v117 = *(_QWORD *)(v31 + 8);
    if (v117)
    {
      v118 = *(WebCore::RenderLayerBacking **)(v117 + 256);
      if (v118)
        WebCore::RenderLayerBacking::removeBackingSharingLayer(v118, this);
    }
  }
  WebCore::RenderLayerCompositor::enableCompositingMode((_QWORD *)v7, 1);
  if (*v11)
    goto LABEL_12;
  WebCore::RenderLayer::ensureBacking((uint64_t)this);
  if ((*((_BYTE *)this + 24) & 1) != 0
    && ((v160 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                              + 8)
                                                                                  + 24)
                                                                      + 8))) != 0
     && ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v160 + 40))(v160, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 248)) & 1) != 0|| (v187 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 8) + 40) + 8) + 528)+ 8)+ 24)+ 8))) != 0&& (*(unsigned int (**)(uint64_t, WebCore::RenderLayer *))(*(_QWORD *)v187 + 48))(v187, this)))
  {
    v161 = *(_QWORD *)(v7 + 8);
    v162 = *(_QWORD *)(v161 + 248);
    v163 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v161 + 24) + 8) + 40) + 8) + 528)
                                                                                         + 8)
                                                                             + 24)
                                                                 + 8));
    if (v163)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 96))(v163, v162);
    v164 = v162;
    (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v7 + 224) + 208))(*(_QWORD *)(v7 + 224), (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 8) + 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 112)+ 664) & 0x4000000000) == 0);
    v165 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v11 + 9) + 832))(*((_QWORD *)*v11 + 9));
    if (v165)
    {
      v166 = v165;
      v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v164 + 720))(v164);
      v168 = (unsigned int *)(v167 + 8);
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 + 1, v168));
      v170 = 0.0;
      if (*(_QWORD *)(*(_QWORD *)(v167 + 128) + 8) == v167)
      {
        v173 = *(_QWORD *)(v167 + 24);
        if (v173)
        {
          v174 = *(_QWORD *)(v173 + 8);
          if (v174)
            v170 = *(float *)(v174 + 372);
        }
      }
      do
      {
        v171 = __ldaxr(v168);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v168));
      if (!v172)
      {
        atomic_store(1u, v168);
        v181 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v181 = off_1E31FE290;
        v181[1] = v168;
        v192 = v181;
        WTF::ensureOnMainThread();
        v182 = v192;
        v192 = 0;
        if (v182)
          (*(void (**)(_DWORD *))(*(_QWORD *)v182 + 8))(v182);
      }
      (*(void (**)(uint64_t, float))(*(_QWORD *)v166 + 104))(v166, v170);
    }
  }
  if (*((_QWORD *)this + 5))
    WebCore::RenderLayer::computeRepaintRectsIncludingDescendants(this);
  *((_DWORD *)this + 3) |= 0x40u;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
    v32 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
    if (v32)
    {
LABEL_81:
      do
      {
        v33 = *((_DWORD *)v32 + 3);
        if ((v33 & 2) != 0)
          break;
        *((_DWORD *)v32 + 3) = v33 | 2;
        if ((*((_BYTE *)v32 + 24) & 4) == 0)
        {
          while (1)
          {
            v32 = (WebCore::RenderLayer *)*((_QWORD *)v32 + 5);
            if (!v32)
              goto LABEL_82;
            if ((*((_BYTE *)v32 + 24) & 0x4A) != 0)
              goto LABEL_403;
          }
        }
        v32 = (WebCore::RenderLayer *)*((_QWORD *)v32 + 5);
LABEL_403:
        ;
      }
      while (v32);
    }
  }
  else
  {
    v32 = this;
    while (1)
    {
      v32 = (WebCore::RenderLayer *)*((_QWORD *)v32 + 5);
      if (!v32)
        break;
      if ((*((_BYTE *)v32 + 24) & 0x4A) != 0)
        goto LABEL_81;
    }
  }
LABEL_82:
  *((_DWORD *)this + 3) |= 0x80u;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
    v34 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
    if (v34)
    {
LABEL_86:
      do
      {
        v35 = *((_DWORD *)v34 + 3);
        if ((v35 & 2) != 0)
          break;
        *((_DWORD *)v34 + 3) = v35 | 2;
        if ((*((_BYTE *)v34 + 24) & 4) == 0)
        {
          while (1)
          {
            v34 = (WebCore::RenderLayer *)*((_QWORD *)v34 + 5);
            if (!v34)
              goto LABEL_87;
            if ((*((_BYTE *)v34 + 24) & 0x4A) != 0)
              goto LABEL_408;
          }
        }
        v34 = (WebCore::RenderLayer *)*((_QWORD *)v34 + 5);
LABEL_408:
        ;
      }
      while (v34);
    }
  }
  else
  {
    v34 = this;
    while (1)
    {
      v34 = (WebCore::RenderLayer *)*((_QWORD *)v34 + 5);
      if (!v34)
        break;
      if ((*((_BYTE *)v34 + 24) & 0x4A) != 0)
        goto LABEL_86;
    }
  }
LABEL_87:
  *((_DWORD *)this + 3) |= 4u;
  if ((*((_BYTE *)this + 24) & 4) != 0)
  {
    v36 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
    if (v36)
    {
LABEL_91:
      do
      {
        v37 = *((_DWORD *)v36 + 3);
        if ((v37 & 1) != 0)
          break;
        *((_DWORD *)v36 + 3) = v37 | 1;
        if ((*((_BYTE *)v36 + 24) & 4) == 0)
        {
          while (1)
          {
            v36 = (WebCore::RenderLayer *)*((_QWORD *)v36 + 5);
            if (!v36)
              goto LABEL_92;
            if ((*((_BYTE *)v36 + 24) & 0x4A) != 0)
              goto LABEL_413;
          }
        }
        v36 = (WebCore::RenderLayer *)*((_QWORD *)v36 + 5);
LABEL_413:
        ;
      }
      while (v36);
    }
  }
  else
  {
    v36 = this;
    while (1)
    {
      v36 = (WebCore::RenderLayer *)*((_QWORD *)v36 + 5);
      if (!v36)
        break;
      if ((*((_BYTE *)v36 + 24) & 0x4A) != 0)
        goto LABEL_91;
    }
  }
LABEL_92:
  v38 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v38 + 46) == 48)
  {
    ++*(_DWORD *)(v38 + 16);
    WebCore::RenderVideo::acceleratedRenderingStateChanged((WebCore::RenderVideo *)v38);
    v188 = *(_DWORD *)(v38 + 16);
    if (!v188)
    {
      __break(0xC471u);
      JUMPOUT(0x19436CEACLL);
    }
    *(_DWORD *)(v38 + 16) = v188 - 1;
    v38 = *((_QWORD *)this + 4);
  }
  if ((*(_BYTE *)(v38 + 52) & 7) == 3 && (*(_BYTE *)(v38 + 53) & 4) != 0)
  {
    ++*(_DWORD *)(v38 + 224);
    v175 = WebCore::RenderLayerCompositor::frameContentsCompositor(*(WebCore::RenderLayerCompositor **)(*(_QWORD *)(v38 + 24) + 8), v23);
    if (v175 && *(_BYTE *)(v175 + 195))
      WebCore::RenderLayerCompositor::ensureRootLayer((_QWORD *)v175);
    if (*(_DWORD *)(v38 + 224) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    else
      --*(_DWORD *)(v38 + 224);
  }
  WebCore::RenderLayer::clearClipRectsIncludingDescendants(this, 0);
  v12 = 1;
LABEL_13:
  v13 = *((_QWORD *)this + 4);
  if ((*(_DWORD *)(v13 + 20) & 0x1800000) != 0x1000000)
    goto LABEL_14;
  if ((*(_BYTE *)(v13 + 45) & 2) != 0)
    v13 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8);
  if ((*(_QWORD *)(v13 + 96) & 0x380000) != 0x300000)
  {
LABEL_14:
    *((_QWORD *)this + 3) &= 0xFFFFFE7FFFFFFFFFLL;
    goto LABEL_15;
  }
  v17 = *((_QWORD *)this + 3);
  if (((v17 >> 39) & 3) == v190)
  {
    if (!v12)
      goto LABEL_15;
  }
  else
  {
    *((_QWORD *)this + 3) = v17 & 0xFFFFFE7FFFFFFFFFLL | ((unint64_t)(v190 & 3) << 39);
  }
  v18 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 8) + 40) + 8)
                                                                                                  + 528)
                                                                                      + 8)
                                                                          + 24)
                                                              + 8));
  if (v18)
  {
    v19 = (WebCore::ScrollingCoordinator *)v18;
    v20 = *(WebCore::LocalFrameView **)(*(_QWORD *)(v7 + 8) + 248);
    if ((*(unsigned int (**)(uint64_t, WebCore::LocalFrameView *))(*(_QWORD *)v18 + 40))(v18, v20))
      WebCore::ScrollingCoordinator::updateSynchronousScrollingReasons(v19, v20);
  }
  v12 = 1;
LABEL_15:
  if (*v11)
    WebCore::RenderLayerBacking::updateDebugIndicators(*v11, *(unsigned __int8 *)(v7 + 192), *(unsigned __int8 *)(v7 + 193));
  if (v12)
  {
    *((_DWORD *)this + 3) |= 0x400u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v119 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v119)
      {
LABEL_273:
        do
        {
          v120 = *((_DWORD *)v119 + 3);
          if ((v120 & 2) != 0)
            break;
          *((_DWORD *)v119 + 3) = v120 | 2;
          if ((*((_BYTE *)v119 + 24) & 4) == 0)
          {
            while (1)
            {
              v119 = (WebCore::RenderLayer *)*((_QWORD *)v119 + 5);
              if (!v119)
                goto LABEL_274;
              if ((*((_BYTE *)v119 + 24) & 0x4A) != 0)
                goto LABEL_418;
            }
          }
          v119 = (WebCore::RenderLayer *)*((_QWORD *)v119 + 5);
LABEL_418:
          ;
        }
        while (v119);
      }
    }
    else
    {
      v119 = this;
      while (1)
      {
        v119 = (WebCore::RenderLayer *)*((_QWORD *)v119 + 5);
        if (!v119)
          break;
        if ((*((_BYTE *)v119 + 24) & 0x4A) != 0)
          goto LABEL_273;
      }
    }
LABEL_274:
    *((_DWORD *)this + 3) |= 0x200u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v121 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v121)
      {
LABEL_278:
        do
        {
          v122 = *((_DWORD *)v121 + 3);
          if ((v122 & 2) != 0)
            break;
          *((_DWORD *)v121 + 3) = v122 | 2;
          if ((*((_BYTE *)v121 + 24) & 4) == 0)
          {
            while (1)
            {
              v121 = (WebCore::RenderLayer *)*((_QWORD *)v121 + 5);
              if (!v121)
                goto LABEL_279;
              if ((*((_BYTE *)v121 + 24) & 0x4A) != 0)
                goto LABEL_423;
            }
          }
          v121 = (WebCore::RenderLayer *)*((_QWORD *)v121 + 5);
LABEL_423:
          ;
        }
        while (v121);
      }
    }
    else
    {
      v121 = this;
      while (1)
      {
        v121 = (WebCore::RenderLayer *)*((_QWORD *)v121 + 5);
        if (!v121)
          break;
        if ((*((_BYTE *)v121 + 24) & 0x4A) != 0)
          goto LABEL_278;
      }
    }
LABEL_279:
    *((_DWORD *)this + 3) |= 0x20u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v123 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v123)
      {
LABEL_283:
        do
        {
          v124 = *((_DWORD *)v123 + 3);
          if ((v124 & 1) != 0)
            break;
          *((_DWORD *)v123 + 3) = v124 | 1;
          if ((*((_BYTE *)v123 + 24) & 4) == 0)
          {
            while (1)
            {
              v123 = (WebCore::RenderLayer *)*((_QWORD *)v123 + 5);
              if (!v123)
                goto LABEL_284;
              if ((*((_BYTE *)v123 + 24) & 0x4A) != 0)
                goto LABEL_428;
            }
          }
          v123 = (WebCore::RenderLayer *)*((_QWORD *)v123 + 5);
LABEL_428:
          ;
        }
        while (v123);
      }
    }
    else
    {
      v123 = this;
      while (1)
      {
        v123 = (WebCore::RenderLayer *)*((_QWORD *)v123 + 5);
        if (!v123)
          break;
        if ((*((_BYTE *)v123 + 24) & 0x4A) != 0)
          goto LABEL_283;
      }
    }
LABEL_284:
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v125 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v125)
      {
LABEL_288:
        do
        {
          v126 = *((_DWORD *)v125 + 3);
          if ((v126 & 8) != 0)
            break;
          *((_DWORD *)v125 + 3) = v126 | 8;
          if ((*((_BYTE *)v125 + 24) & 4) == 0)
          {
            while (1)
            {
              v125 = (WebCore::RenderLayer *)*((_QWORD *)v125 + 5);
              if (!v125)
                goto LABEL_18;
              if ((*((_BYTE *)v125 + 24) & 0x4A) != 0)
                goto LABEL_292;
            }
          }
          v125 = (WebCore::RenderLayer *)*((_QWORD *)v125 + 5);
LABEL_292:
          ;
        }
        while (v125);
      }
    }
    else
    {
      v125 = this;
      while (1)
      {
        v125 = (WebCore::RenderLayer *)*((_QWORD *)v125 + 5);
        if (!v125)
          break;
        if ((*((_BYTE *)v125 + 24) & 0x4A) != 0)
          goto LABEL_288;
      }
    }
  }
LABEL_18:
  v14 = HIBYTE(v191);
  v15 = *((_QWORD *)this + 3);
  if ((HIBYTE(v191) != 0) == ((v15 & 0x4000000000000) == 0))
  {
    *((_QWORD *)this + 3) = v15 & 0xFFFBFFFFFFFFFFFFLL | ((unint64_t)(HIBYTE(v191) != 0) << 50);
    if (v14)
    {
      v152 = this;
      do
      {
        v153 = *((_QWORD *)v152 + 3);
        if ((v153 & 0x18000000000000) == 0x8000000000000)
          break;
        *((_QWORD *)v152 + 3) = v153 & 0xFFE7FFFFFFFFFFFFLL | 0x8000000000000;
        v152 = (WebCore::RenderLayer *)*((_QWORD *)v152 + 5);
      }
      while (v152);
    }
    else
    {
      v156 = this;
      do
      {
        v157 = *((_QWORD *)v156 + 3);
        if ((v157 & 0x10000000000000) != 0)
          break;
        *((_QWORD *)v156 + 3) = v157 | 0x10000000000000;
        v156 = (WebCore::RenderLayer *)*((_QWORD *)v156 + 5);
      }
      while (v156);
    }
    v158 = *((_QWORD *)this + 3);
    if ((v158 & 0x80000) == 0 && (v158 & 4) == 0)
      WebCore::RenderLayer::dirtyHiddenStackingContextAncestorZOrderLists(this, (void *)a2);
  }
  if ((_BYTE)v191)
  {
    *((_DWORD *)this + 3) |= 8u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v154 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v154)
      {
LABEL_359:
        do
        {
          v155 = *((_DWORD *)v154 + 3);
          if ((v155 & 1) != 0)
            break;
          *((_DWORD *)v154 + 3) = v155 | 1;
          if ((*((_BYTE *)v154 + 24) & 4) == 0)
          {
            while (1)
            {
              v154 = (WebCore::RenderLayer *)*((_QWORD *)v154 + 5);
              if (!v154)
                goto LABEL_20;
              if ((*((_BYTE *)v154 + 24) & 0x4A) != 0)
                goto LABEL_363;
            }
          }
          v154 = (WebCore::RenderLayer *)*((_QWORD *)v154 + 5);
LABEL_363:
          ;
        }
        while (v154);
      }
    }
    else
    {
      v154 = this;
      while (1)
      {
        v154 = (WebCore::RenderLayer *)*((_QWORD *)v154 + 5);
        if (!v154)
          break;
        if ((*((_BYTE *)v154 + 24) & 0x4A) != 0)
          goto LABEL_359;
      }
    }
  }
LABEL_20:
  v16 = *((_QWORD *)this + 4);
  if (v6 >= 5 && *(_DWORD *)(v7 + 200))
  {
    *((_DWORD *)this + 3) |= 8u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v24 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v24)
      {
LABEL_46:
        do
        {
          v25 = *((_DWORD *)v24 + 3);
          if ((v25 & 1) != 0)
            break;
          *((_DWORD *)v24 + 3) = v25 | 1;
          if ((*((_BYTE *)v24 + 24) & 4) == 0)
          {
            while (1)
            {
              v24 = (WebCore::RenderLayer *)*((_QWORD *)v24 + 5);
              if (!v24)
                goto LABEL_47;
              if ((*((_BYTE *)v24 + 24) & 0x4A) != 0)
                goto LABEL_249;
            }
          }
          v24 = (WebCore::RenderLayer *)*((_QWORD *)v24 + 5);
LABEL_249:
          ;
        }
        while (v24);
      }
    }
    else
    {
      v24 = this;
      while (1)
      {
        v24 = (WebCore::RenderLayer *)*((_QWORD *)v24 + 5);
        if (!v24)
          break;
        if ((*((_BYTE *)v24 + 24) & 0x4A) != 0)
          goto LABEL_46;
      }
    }
LABEL_47:
    *((_DWORD *)this + 3) |= 0x40u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v26 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v26)
      {
LABEL_51:
        do
        {
          v27 = *((_DWORD *)v26 + 3);
          if ((v27 & 2) != 0)
            break;
          *((_DWORD *)v26 + 3) = v27 | 2;
          if ((*((_BYTE *)v26 + 24) & 4) == 0)
          {
            while (1)
            {
              v26 = (WebCore::RenderLayer *)*((_QWORD *)v26 + 5);
              if (!v26)
                goto LABEL_52;
              if ((*((_BYTE *)v26 + 24) & 0x4A) != 0)
                goto LABEL_254;
            }
          }
          v26 = (WebCore::RenderLayer *)*((_QWORD *)v26 + 5);
LABEL_254:
          ;
        }
        while (v26);
      }
    }
    else
    {
      v26 = this;
      while (1)
      {
        v26 = (WebCore::RenderLayer *)*((_QWORD *)v26 + 5);
        if (!v26)
          break;
        if ((*((_BYTE *)v26 + 24) & 0x4A) != 0)
          goto LABEL_51;
      }
    }
LABEL_52:
    if (v6 >= 8)
    {
      if (!a4)
        goto LABEL_54;
      if (((*(_DWORD *)(v16 + 96) ^ *(_DWORD *)(a4 + 16)) & 0xFC00) != 0
        || (v127 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40),
            v128 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 40),
            ((*(unsigned __int8 *)(v127 + 642) >> 5) & 1) != ((*(unsigned __int8 *)(v128 + 642) >> 5) & 1))
        || (WebCore::operator==((unsigned __int8 *)(v127 + 96), (unsigned __int8 *)(v128 + 96)) & 1) == 0)
      {
        v176 = this;
        if ((*((_BYTE *)this + 24) & 0x4A) != 0)
        {
          WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate((uint64_t)this);
          WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)this);
          WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate((uint64_t)this);
        }
        else
        {
          while (1)
          {
            v176 = (WebCore::RenderLayer *)*((_QWORD *)v176 + 5);
            if (!v176)
              break;
            if ((*((_BYTE *)v176 + 24) & 0x4A) != 0)
            {
              WebCore::RenderLayer::setDescendantsNeedUpdateBackingAndHierarchyTraversal((uint64_t)v176);
              break;
            }
          }
        }
      }
      v129 = (*(_DWORD *)(a4 + 16) >> 19) & 7;
      v131 = v129 == 6 || v129 == 3;
      v132 = (*(_DWORD *)(v16 + 96) >> 19) & 7;
      v134 = v132 == 6 || v132 == 3;
      if (v134 != v131)
        WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)this);
      v135 = *(_QWORD *)(a4 + 8);
      v136 = *(_QWORD *)(v16 + 88);
      v137 = *(_QWORD *)(v136 + 32);
      v138 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      if (*(float *)(v137 + 4) >= 1.0)
      {
        v139 = *(_QWORD *)(v137 + 48);
        if (*(_QWORD *)(v139 + 8))
        {
          while (!*(_QWORD *)(v139 + 16))
          {
            v139 = *(_QWORD *)(v139 + 8);
            if (!v139)
              goto LABEL_317;
          }
        }
        else
        {
          if (*(_QWORD *)(v139 + 16))
            v140 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v140 = 0;
          if (!v140)
          {
LABEL_317:
            v141 = *(_QWORD *)(v136 + 40);
            if (*(_QWORD *)(*(_QWORD *)(v141 + 216) + 8))
              v142 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
            else
              v142 = 0;
            if (!v142
              && !*(_QWORD *)(v141 + 264)
              && !*(_DWORD *)(*(_QWORD *)(v137 + 32) + 20)
              && !*(_DWORD *)(*(_QWORD *)(v141 + 72) + 20))
            {
              v143 = (*(_DWORD *)(v141 + 636) & 0x1F00000) != 0x100000;
              goto LABEL_325;
            }
          }
        }
      }
      v143 = 1;
LABEL_325:
      v144 = *(_QWORD *)(v135 + 32);
      if (*(float *)(v144 + 4) >= 1.0)
      {
        v145 = *(_QWORD *)(v144 + 48);
        if (*(_QWORD *)(v145 + 8))
        {
          while (!*(_QWORD *)(v145 + 16))
          {
            v145 = *(_QWORD *)(v145 + 8);
            if (!v145)
              goto LABEL_331;
          }
        }
        else
        {
          if (*(_QWORD *)(v145 + 16))
            v146 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          else
            v146 = 0;
          if (!v146)
          {
LABEL_331:
            v147 = *(_QWORD *)(v135 + 40);
            if (!*(_QWORD *)(*(_QWORD *)(v147 + 216) + 8))
              v138 = 0;
            if (!v138
              && !*(_QWORD *)(v147 + 264)
              && !*(_DWORD *)(*(_QWORD *)(v144 + 32) + 20)
              && !*(_DWORD *)(*(_QWORD *)(v147 + 72) + 20))
            {
              v148 = *(unsigned int *)(v147 + 636) | ((unint64_t)(*(unsigned __int16 *)(v147 + 640) | (*(unsigned __int8 *)(v147 + 642) << 16)) << 32);
              if (((v143 ^ ((*(_DWORD *)(v147 + 636) & 0x1F00000) != 0x100000)) & 1) != 0)
                goto LABEL_393;
LABEL_338:
              v149 = *(_QWORD *)(v136 + 40);
              if (((v148 >> 25) & 1) != (((*(unsigned int *)(v149 + 636) | ((unint64_t)(*(unsigned __int16 *)(v149 + 640) | (*(unsigned __int8 *)(v149 + 642) << 16)) << 32)) >> 25) & 1))
                goto LABEL_393;
              if (*(_DWORD *)(*(_QWORD *)(v137 + 40) + 20))
              {
                if (*(_DWORD *)(*(_QWORD *)(v144 + 40) + 20))
                {
LABEL_341:
                  if (*(_QWORD *)(v149 + 208) == *(_QWORD *)(v147 + 208))
                  {
                    v150 = (*(_DWORD *)(v149 + 636) >> 7) & 3;
                    if ((*(_DWORD *)(v149 + 636) & 0x200) != 0)
                      v150 = 0;
                    v151 = (v148 & 0x200) != 0 ? 0 : (v148 >> 7) & 3;
                    if (v150 == v151 && (*(float *)(v149 + 260) != -1.0) == (*(float *)(v147 + 260) != -1.0))
                    {
LABEL_54:
                      *((_DWORD *)this + 3) |= 0x40u;
                      if ((*((_BYTE *)this + 24) & 4) != 0)
                      {
                        v28 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
                        if (v28)
                        {
LABEL_58:
                          while (1)
                          {
                            v29 = *((_DWORD *)v28 + 3);
                            if ((v29 & 2) != 0)
                              break;
                            *((_DWORD *)v28 + 3) = v29 | 2;
                            if ((*((_BYTE *)v28 + 24) & 4) == 0)
                            {
                              while (1)
                              {
                                v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
                                if (!v28)
                                  goto LABEL_22;
                                if ((*((_BYTE *)v28 + 24) & 0x4A) != 0)
                                  goto LABEL_62;
                              }
                            }
                            v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
LABEL_62:
                            if (!v28)
                              goto LABEL_22;
                          }
                        }
                      }
                      else
                      {
                        v28 = this;
                        while (1)
                        {
                          v28 = (WebCore::RenderLayer *)*((_QWORD *)v28 + 5);
                          if (!v28)
                            break;
                          if ((*((_BYTE *)v28 + 24) & 0x4A) != 0)
                            goto LABEL_58;
                        }
                      }
                      goto LABEL_22;
                    }
                  }
LABEL_393:
                  WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdate((uint64_t)this);
                  goto LABEL_54;
                }
                v159 = *(_QWORD *)(v147 + 328);
              }
              else
              {
                v159 = *(_QWORD *)(v149 + 328);
                if (!*(_DWORD *)(*(_QWORD *)(v144 + 40) + 20))
                {
                  if ((v159 != 0) != (*(_QWORD *)(v147 + 328) != 0))
                    goto LABEL_393;
                  goto LABEL_341;
                }
              }
              if (!v159)
                goto LABEL_393;
              goto LABEL_341;
            }
          }
        }
      }
      if (!v143)
        goto LABEL_393;
      v147 = *(_QWORD *)(v135 + 40);
      v148 = *(unsigned int *)(v147 + 636) | ((unint64_t)(*(unsigned __int16 *)(v147 + 640) | (*(unsigned __int8 *)(v147 + 642) << 16)) << 32);
      goto LABEL_338;
    }
  }
LABEL_22:
  if (v6 < 2 || !a4)
  {
    result = (uint64_t)*v11;
    if (!*v11)
      return result;
    result = (uint64_t)WebCore::RenderLayerBacking::updateConfigurationAfterStyleChange((WebCore::RenderLayerBacking *)result);
LABEL_116:
    if (*v11)
    {
      if (a4)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a4 + 24) + 239) & 1) != 0)
          v45 = 0;
        else
          v45 = (*(_DWORD *)(a4 + 44) >> 6) & 0xF;
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 1) != 0)
          v46 = 0;
        else
          v46 = (*(_DWORD *)(v16 + 124) >> 6) & 0xF;
        v47 = v45 != v46;
      }
      else
      {
        v47 = 0;
      }
      v48 = *((_QWORD *)this + 4);
      v49 = *(_BYTE *)(v48 + 52) & 7;
      v50 = (*(unsigned __int8 *)(v48 + 53) >> 2) & 1;
      if (v49 != 3)
        LOBYTE(v50) = 0;
      if ((v50 & 1) != 0 || v47)
        result = WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)this);
      if (!a4)
        return result;
      v51 = *(float *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 4);
      v52 = *(float *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 4);
      if (v51 != v52 && (v51 == 0.0 || v52 == 0.0))
        result = WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)this);
    }
    else if (!a4)
    {
      return result;
    }
    v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 32) + 40);
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 32) + 40);
    v55 = *(unsigned int *)(v53 + 20);
    if ((_DWORD)v55 != *(_DWORD *)(v54 + 20))
      goto LABEL_498;
    v56 = *(_QWORD *)(v54 + 8);
    v57 = *(_QWORD **)(v53 + 8);
    if ((_DWORD)v55)
    {
      v58 = 8 * v55 - 8;
      v59 = v57;
      v60 = *(_QWORD **)(v54 + 8);
      while (1)
      {
        v61 = v58;
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v59 + 32))(*v59, *v60);
        if (!(_DWORD)result)
          goto LABEL_498;
        ++v59;
        ++v60;
        v58 = v61 - 8;
        if (!v61)
          goto LABEL_134;
      }
    }
    v60 = *(_QWORD **)(v54 + 8);
    v59 = *(_QWORD **)(v53 + 8);
LABEL_134:
    if (v59 != &v57[v55])
      goto LABEL_498;
    if (v60 != (_QWORD *)(v56 + 8 * v55))
      goto LABEL_498;
    v62 = *(_QWORD *)(a4 + 8);
    v63 = *(_QWORD **)(v62 + 40);
    v64 = *(_QWORD *)(v16 + 88);
    v65 = *(_QWORD **)(v64 + 40);
    if (v63[40] != v65[40])
      goto LABEL_498;
    if (v63[39] != v65[39])
      goto LABEL_498;
    if (v63[38] != v65[38])
      goto LABEL_498;
    v66 = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 40);
    v67 = *(_QWORD *)(*(_QWORD *)(v64 + 32) + 40);
    if (*(unsigned __int8 *)(v66 + 44) != *(unsigned __int8 *)(v67 + 44))
      goto LABEL_498;
    v68 = *(unsigned __int8 *)(v66 + 28);
    if (v68 != *(unsigned __int8 *)(v67 + 28) || (*(_BYTE *)(v66 + 29) != 0) != (*(_BYTE *)(v67 + 29) != 0))
      goto LABEL_498;
    if (v68 != 13)
    {
      result = v66 + 24;
      if (v68 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)(v67 + 24));
        if (!(_DWORD)result)
          goto LABEL_498;
        v62 = *(_QWORD *)(a4 + 8);
        v66 = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 40);
        v64 = *(_QWORD *)(v16 + 88);
        v67 = *(_QWORD *)(*(_QWORD *)(v64 + 32) + 40);
      }
      else
      {
        if (*(_BYTE *)(v66 + 30))
          v69 = *(float *)result;
        else
          v69 = (float)*(int *)result;
        v70 = *(float *)(v67 + 24);
        if (!*(_BYTE *)(v67 + 30))
          v70 = (float)SLODWORD(v70);
        if (v69 != v70)
          goto LABEL_498;
      }
    }
    v71 = *(unsigned __int8 *)(v66 + 36);
    if (v71 != *(unsigned __int8 *)(v67 + 36) || (*(_BYTE *)(v66 + 37) != 0) != (*(_BYTE *)(v67 + 37) != 0))
      goto LABEL_498;
    if (v71 != 13)
    {
      result = v66 + 32;
      if (v71 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)(v67 + 32));
        if (!(_DWORD)result)
          goto LABEL_498;
        v62 = *(_QWORD *)(a4 + 8);
        v66 = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 40);
        v64 = *(_QWORD *)(v16 + 88);
        v67 = *(_QWORD *)(*(_QWORD *)(v64 + 32) + 40);
      }
      else
      {
        if (*(_BYTE *)(v66 + 38))
          v72 = *(float *)result;
        else
          v72 = (float)*(int *)result;
        v73 = *(float *)(v67 + 32);
        if (!*(_BYTE *)(v67 + 38))
          v73 = (float)SLODWORD(v73);
        if (v72 != v73)
          goto LABEL_498;
      }
    }
    if (*(float *)(v66 + 40) != *(float *)(v67 + 40))
      goto LABEL_498;
    v74 = *(_QWORD *)(v62 + 40);
    v75 = (*(_DWORD *)(v74 + 636) & 0x200) != 0 ? 0 : (*(_DWORD *)(v74 + 636) >> 7) & 3;
    v76 = *(_QWORD *)(v64 + 40);
    v77 = (*(_DWORD *)(v76 + 636) & 0x200) != 0 ? 0 : (*(_DWORD *)(v76 + 636) >> 7) & 3;
    if (v75 != v77)
      goto LABEL_498;
    if (*(float *)(v74 + 260) != *(float *)(v76 + 260))
      goto LABEL_498;
    v78 = *(unsigned __int8 *)(v74 + 32);
    if (v78 != *(unsigned __int8 *)(v76 + 32) || (*(_BYTE *)(v74 + 33) != 0) != (*(_BYTE *)(v76 + 33) != 0))
      goto LABEL_498;
    if (v78 != 13)
    {
      result = v74 + 28;
      if (v78 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)(v76 + 28));
        if (!(_DWORD)result)
          goto LABEL_498;
        v74 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
        v76 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 40);
      }
      else
      {
        if (*(_BYTE *)(v74 + 34))
          v79 = *(float *)result;
        else
          v79 = (float)*(int *)result;
        v80 = *(float *)(v76 + 28);
        if (!*(_BYTE *)(v76 + 34))
          v80 = (float)SLODWORD(v80);
        if (v79 != v80)
          goto LABEL_498;
      }
    }
    v81 = *(unsigned __int8 *)(v74 + 40);
    if (v81 != *(unsigned __int8 *)(v76 + 40) || (*(_BYTE *)(v74 + 41) != 0) != (*(_BYTE *)(v76 + 41) != 0))
      goto LABEL_498;
    if (v81 != 13)
    {
      result = v74 + 36;
      if (v81 == 11)
      {
        result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)(v76 + 36));
        if (!(_DWORD)result)
          goto LABEL_498;
        v74 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
        v76 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 40);
      }
      else
      {
        if (*(_BYTE *)(v74 + 42))
          v82 = *(float *)result;
        else
          v82 = (float)*(int *)result;
        v83 = *(float *)(v76 + 36);
        if (!*(_BYTE *)(v76 + 42))
          v83 = (float)SLODWORD(v83);
        if (v82 != v83)
          goto LABEL_498;
      }
    }
    if (((*(_DWORD *)(v76 + 636) ^ *(_DWORD *)(v74 + 636)) & 0x400) == 0)
    {
      result = *(_QWORD *)(v74 + 328);
      v84 = *(_QWORD *)(v76 + 328);
      if (result != v84)
      {
        if (!result)
          goto LABEL_498;
        if (!v84)
          goto LABEL_498;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        if (!(_DWORD)result)
          goto LABEL_498;
        v74 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
        v76 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 40);
      }
      v85 = *(unsigned __int8 *)(v74 + 428);
      if (v85 == *(unsigned __int8 *)(v76 + 428) && (*(_BYTE *)(v74 + 429) != 0) == (*(_BYTE *)(v76 + 429) != 0))
      {
        if (v85 != 13)
        {
          if (v85 == 11)
          {
            result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v74 + 424), (const WebCore::Length *)(v76 + 424));
            if ((result & 1) == 0)
              goto LABEL_498;
          }
          else
          {
            v86 = *(float *)(v74 + 424);
            if (!*(_BYTE *)(v74 + 430))
              v86 = (float)SLODWORD(v86);
            v87 = *(float *)(v76 + 424);
            if (!*(_BYTE *)(v76 + 430))
              v87 = (float)SLODWORD(v87);
            if (v86 != v87)
              goto LABEL_498;
          }
        }
        v88 = *(unsigned __int8 *)(v74 + 436);
        if (v88 != *(unsigned __int8 *)(v76 + 436) || (*(_BYTE *)(v74 + 437) != 0) != (*(_BYTE *)(v76 + 437) != 0))
          goto LABEL_498;
        if (v88 != 13)
        {
          if (v88 == 11)
          {
            result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v74 + 432), (const WebCore::Length *)(v76 + 432));
            if ((result & 1) == 0)
              goto LABEL_498;
          }
          else
          {
            v89 = *(float *)(v74 + 432);
            if (!*(_BYTE *)(v74 + 438))
              v89 = (float)SLODWORD(v89);
            v90 = *(float *)(v76 + 432);
            if (!*(_BYTE *)(v76 + 438))
              v90 = (float)SLODWORD(v90);
            if (v89 != v90)
              goto LABEL_498;
          }
        }
        v91 = *(unsigned __int8 **)(*(_QWORD *)(a4 + 8) + 40);
        v92 = *(unsigned __int8 **)(*(_QWORD *)(v16 + 88) + 40);
        v93 = v91[412];
        if (v93 != v92[412] || (v91[413] != 0) != (v92[413] != 0))
          goto LABEL_498;
        if (v93 != 13)
        {
          if (v93 == 11)
          {
            result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v91 + 408), (const WebCore::Length *)(v92 + 408));
            if ((result & 1) == 0)
              goto LABEL_498;
          }
          else
          {
            v94 = *((float *)v91 + 102);
            if (!v91[414])
              v94 = (float)SLODWORD(v94);
            v95 = *((float *)v92 + 102);
            if (!v92[414])
              v95 = (float)SLODWORD(v95);
            if (v94 != v95)
              goto LABEL_498;
          }
        }
        v96 = v91[420];
        if (v96 != v92[420] || (v91[421] != 0) != (v92[421] != 0))
          goto LABEL_498;
        if (v96 != 13)
        {
          if (v96 == 11)
          {
            result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v91 + 416), (const WebCore::Length *)(v92 + 416));
            if ((result & 1) == 0)
              goto LABEL_498;
          }
          else
          {
            v97 = *((float *)v91 + 104);
            if (!v91[422])
              v97 = (float)SLODWORD(v97);
            v98 = *((float *)v92 + 104);
            if (!v92[422])
              v98 = (float)SLODWORD(v98);
            if (v97 != v98)
              goto LABEL_498;
          }
        }
        v99 = *(_QWORD *)(a4 + 8);
        v100 = *(_QWORD *)(v99 + 40);
        v101 = *(_QWORD *)(v16 + 88);
        v102 = *(_QWORD *)(v101 + 40);
        v103 = *(unsigned __int8 *)(v100 + 404);
        if (v103 != *(unsigned __int8 *)(v102 + 404) || (*(_BYTE *)(v100 + 405) != 0) != (*(_BYTE *)(v102 + 405) != 0))
          goto LABEL_498;
        if (v103 != 13)
        {
          result = v100 + 400;
          if (v103 == 11)
          {
            result = WebCore::Length::isCalculatedEqual((WebCore::Length *)result, (const WebCore::Length *)(v102 + 400));
            if (!(_DWORD)result)
              goto LABEL_498;
            v99 = *(_QWORD *)(a4 + 8);
            v100 = *(_QWORD *)(v99 + 40);
            v101 = *(_QWORD *)(v16 + 88);
            v102 = *(_QWORD *)(v101 + 40);
          }
          else
          {
            if (*(_BYTE *)(v100 + 406))
              v104 = *(float *)result;
            else
              v104 = (float)*(int *)result;
            v105 = *(float *)(v102 + 400);
            if (!*(_BYTE *)(v102 + 406))
              v105 = (float)SLODWORD(v105);
            if (v104 != v105)
              goto LABEL_498;
          }
        }
        if (*(float *)(v100 + 440) != *(float *)(v102 + 440)
          || *(unsigned __int8 *)(v100 + 444) != *(unsigned __int8 *)(v102 + 444))
        {
          goto LABEL_498;
        }
        result = *(_QWORD *)(v100 + 264);
        v106 = *(_QWORD *)(v102 + 264);
        if (result != v106)
        {
          if (!result)
            goto LABEL_498;
          if (!v106)
            goto LABEL_498;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          if (!(_DWORD)result)
            goto LABEL_498;
          v99 = *(_QWORD *)(a4 + 8);
          v100 = *(_QWORD *)(v99 + 40);
          v101 = *(_QWORD *)(v16 + 88);
          v102 = *(_QWORD *)(v101 + 40);
        }
        if (((*(_DWORD *)(v102 + 636) ^ *(_DWORD *)(v100 + 636)) & 0x1ELL) == 0)
        {
LABEL_236:
          v107 = *(_QWORD *)(v99 + 40);
          v108 = *(_QWORD *)(v101 + 40);
          if ((*(float *)(v107 + 260) != -1.0) != (*(float *)(v108 + 260) != -1.0))
            return WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate((uint64_t)this);
          v109 = *(_DWORD *)(v107 + 636);
          v110 = v109;
          v111 = (v109 >> 7) & 3;
          v112 = (v110 & 0x200) != 0 ? 0 : v111;
          v113 = *(_DWORD *)(v108 + 636);
          v114 = v113;
          v115 = (v113 >> 7) & 3;
          if ((v114 & 0x200) != 0)
            v115 = 0;
          if (v112 != v115)
            return WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate((uint64_t)this);
          return result;
        }
      }
    }
LABEL_498:
    *((_DWORD *)this + 3) |= 8u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v183 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v183)
      {
LABEL_502:
        do
        {
          v184 = *((_DWORD *)v183 + 3);
          if ((v184 & 1) != 0)
            break;
          *((_DWORD *)v183 + 3) = v184 | 1;
          if ((*((_BYTE *)v183 + 24) & 4) == 0)
          {
            while (1)
            {
              v183 = (WebCore::RenderLayer *)*((_QWORD *)v183 + 5);
              if (!v183)
                goto LABEL_503;
              if ((*((_BYTE *)v183 + 24) & 0x4A) != 0)
                goto LABEL_512;
            }
          }
          v183 = (WebCore::RenderLayer *)*((_QWORD *)v183 + 5);
LABEL_512:
          ;
        }
        while (v183);
      }
    }
    else
    {
      v183 = this;
      while (1)
      {
        v183 = (WebCore::RenderLayer *)*((_QWORD *)v183 + 5);
        if (!v183)
          break;
        if ((*((_BYTE *)v183 + 24) & 0x4A) != 0)
          goto LABEL_502;
      }
    }
LABEL_503:
    *((_DWORD *)this + 3) |= 0x40u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v185 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v185)
      {
LABEL_507:
        do
        {
          v186 = *((_DWORD *)v185 + 3);
          if ((v186 & 2) != 0)
            break;
          *((_DWORD *)v185 + 3) = v186 | 2;
          if ((*((_BYTE *)v185 + 24) & 4) == 0)
          {
            while (1)
            {
              v185 = (WebCore::RenderLayer *)*((_QWORD *)v185 + 5);
              if (!v185)
                goto LABEL_508;
              if ((*((_BYTE *)v185 + 24) & 0x4A) != 0)
                goto LABEL_517;
            }
          }
          v185 = (WebCore::RenderLayer *)*((_QWORD *)v185 + 5);
LABEL_517:
          ;
        }
        while (v185);
      }
    }
    else
    {
      v185 = this;
      while (1)
      {
        v185 = (WebCore::RenderLayer *)*((_QWORD *)v185 + 5);
        if (!v185)
          break;
        if ((*((_BYTE *)v185 + 24) & 0x4A) != 0)
          goto LABEL_507;
      }
    }
LABEL_508:
    v99 = *(_QWORD *)(a4 + 8);
    v101 = *(_QWORD *)(v16 + 88);
    goto LABEL_236;
  }
  if ((*((_BYTE *)this + 24) & 0x4A) == 0
    && (*(_BYTE *)(*((_QWORD *)this + 4) + 22) & 1) != 0
    && (WebCore::operator==(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 24) + 104, *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24) + 104) & 1) == 0)
  {
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v30 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v30)
LABEL_70:
        WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate((uint64_t)v30);
    }
    else
    {
      v30 = this;
      while (1)
      {
        v30 = (WebCore::RenderLayer *)*((_QWORD *)v30 + 5);
        if (!v30)
          break;
        if ((*((_BYTE *)v30 + 24) & 0x4A) != 0)
          goto LABEL_70;
      }
    }
  }
  result = (uint64_t)*v11;
  if (*v11)
  {
    result = (uint64_t)WebCore::RenderLayerBacking::updateConfigurationAfterStyleChange((WebCore::RenderLayerBacking *)result);
    if ((*(_BYTE *)(*(_QWORD *)(a4 + 24) + 239) & 4) != 0)
      v40 = 1;
    else
      v40 = (*(_DWORD *)(a4 + 40) >> 4) & 3;
    if ((*(_BYTE *)(*(_QWORD *)(v16 + 104) + 239) & 4) != 0)
      v41 = 1;
    else
      v41 = (*(_DWORD *)(v16 + 120) >> 4) & 3;
    if (v40 != v41)
      result = WebCore::RenderLayer::setNeedsCompositingGeometryUpdate((uint64_t)this);
    if (*v11)
    {
      v42 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
      if (((*(unsigned int *)(v42 + 636) | ((unint64_t)(*(unsigned __int16 *)(v42 + 640) | (*(unsigned __int8 *)(v42 + 642) << 16)) << 32)) & 0x20000000000000) != 0
        || *(_QWORD *)(v42 + 264)
        || (result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)a4), (result & 1) != 0)
        || (v116 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 40),
            ((*(unsigned int *)(v116 + 636) | ((unint64_t)(*(unsigned __int16 *)(v116 + 640) | (*(unsigned __int8 *)(v116 + 642) << 16)) << 32)) & 0x20000000000000) != 0)
        || *(_QWORD *)(v116 + 264)
        || (result = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v16 + 80)), (_DWORD)result))
      {
        *((_DWORD *)this + 3) |= 0x40u;
        if ((*((_BYTE *)this + 24) & 4) != 0)
        {
          v43 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
          if (v43)
          {
LABEL_113:
            do
            {
              v44 = *((_DWORD *)v43 + 3);
              if ((v44 & 2) != 0)
                break;
              *((_DWORD *)v43 + 3) = v44 | 2;
              if ((*((_BYTE *)v43 + 24) & 4) == 0)
              {
                while (1)
                {
                  v43 = (WebCore::RenderLayer *)*((_QWORD *)v43 + 5);
                  if (!v43)
                    goto LABEL_114;
                  if ((*((_BYTE *)v43 + 24) & 0x4A) != 0)
                    goto LABEL_397;
                }
              }
              v43 = (WebCore::RenderLayer *)*((_QWORD *)v43 + 5);
LABEL_397:
              ;
            }
            while (v43);
          }
        }
        else
        {
          v43 = this;
          while (1)
          {
            v43 = (WebCore::RenderLayer *)*((_QWORD *)v43 + 5);
            if (!v43)
              break;
            if ((*((_BYTE *)v43 + 24) & 0x4A) != 0)
              goto LABEL_113;
          }
        }
      }
    }
LABEL_114:
    if (((*(_DWORD *)(*(_QWORD *)(v16 + 104) + 232) ^ *(_DWORD *)(*(_QWORD *)(a4 + 24) + 232)) & 0x70000) != 0)
      result = WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)this);
    goto LABEL_116;
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::requiresCompositingLayer(WebCore::RenderLayerCompositor *this, WebCore::RenderObject *a2, uint64_t a3)
{
  WTF::StringImpl *v3;
  WebCore::RenderObject *v5;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  WebCore::RenderObject *v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (**v82)();
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  WebCore::ViewTransition *v89;
  uint64_t v90;
  __int16 v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  int v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  unsigned int v184;
  int v185;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  int v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  _WORD *v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  const WebCore::LayoutRect *v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v251;
  int v252;
  uint64_t *v254;
  uint64_t v255;
  unsigned int v256;
  int v257;
  BOOL v258;
  unsigned int v259;
  int v260;
  BOOL v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  double *v265;
  BOOL v266;
  uint64_t v267;
  WebCore::RenderObject *v268;
  uint64_t v269;
  int v270;
  WTF::StringImpl *v271;
  char v272;
  WTF *v273;
  const WebCore::LayoutRect *v274;
  uint64_t v275;
  char v276;

  v5 = a2;
  if (*((_BYTE *)a2 + 46) == 30)
  {
    v245 = *((_QWORD *)a2 + 4);
    if (v245)
    {
      v5 = *(WebCore::RenderObject **)(v245 + 8);
      if (v5 && (*((_BYTE *)v5 + 45) & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19436E364);
      }
    }
    else
    {
      v5 = 0;
    }
  }
  if (!*((_QWORD *)v5 + 18))
    return 0;
  if ((*((_BYTE *)this + 128) & 1) == 0)
    goto LABEL_5;
  v7 = *((_DWORD *)v5 + 5);
  if ((v7 & 0x20000) == 0)
    goto LABEL_5;
  v45 = v5;
  if ((*((_BYTE *)v5 + 45) & 2) != 0)
    v45 = *(WebCore::RenderObject **)(*((_QWORD *)v5 + 4) + 8);
  v46 = *((_QWORD *)v45 + 11);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 32) + 40) + 20))
  {
    v69 = *(_QWORD **)(v46 + 40);
    if (!v69[41] && !v69[38] && !v69[39] && !v69[40] && (v7 & 0x100000) == 0)
      goto LABEL_5;
  }
  if ((*((_BYTE *)v5 + 45) & 1) == 0)
  {
    v47 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    if (v47)
    {
      v48 = *(_WORD *)(v47 + 28);
      if ((v48 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19436E01CLL);
      }
      if ((v48 & 0x10) != 0
        && *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
      {
        v175 = *(_DWORD *)(v47 + 120);
        v174 = *(_DWORD *)(v47 + 124);
        if (v175 < 0)
          v175 = -v175;
        if (v174 < 0)
          v174 = -v174;
        v176 = v174 * (unint64_t)v175;
        if ((v176 & 0xFFFFFFFF00000000) == 0 && v176 >> 3 < 0x271)
          goto LABEL_275;
      }
    }
  }
  if (*((_BYTE *)this + 133))
  {
LABEL_275:
    v177 = *((_QWORD *)v5 + 11);
    v178 = *(_QWORD *)(v177 + 32);
    v179 = *(_QWORD *)(v178 + 40);
    v3 = *(WTF::StringImpl **)(v179 + 8);
    v180 = *(unsigned int *)(v179 + 20);
    v181 = 8 * v180;
    if ((_DWORD)v180)
    {
      v182 = 8 * v180;
      v183 = v3;
      while (1)
      {
        v184 = *(unsigned __int8 *)(*(_QWORD *)v183 + 12);
        v108 = v184 > 0x14;
        v185 = (1 << v184) & 0x1DE0C0;
        if (!v108 && v185 != 0)
          break;
        v183 = (WTF::StringImpl *)((char *)v183 + 8);
        v182 -= 8;
        if (!v182)
          goto LABEL_283;
      }
    }
    else
    {
LABEL_283:
      v187 = *(_QWORD **)(v177 + 40);
      v188 = v187[40];
      if (!v188
        || ((v256 = *(unsigned __int8 *)(v188 + 12), v108 = v256 > 0x14, v257 = (1 << v256) & 0x1DE0C0, !v108)
          ? (v258 = v257 == 0)
          : (v258 = 1),
            v258))
      {
        v189 = v187[39];
        if (!v189
          || ((v259 = *(unsigned __int8 *)(v189 + 12), v108 = v259 > 0x14, v260 = (1 << v259) & 0x1DE0C0, !v108)
            ? (v261 = v260 == 0)
            : (v261 = 1),
              v261))
        {
          v190 = v187[38];
          if (!v190
            || ((v191 = *(unsigned __int8 *)(v190 + 12), v108 = v191 > 0x14, v192 = (1 << v191) & 0x1DE0C0, !v108)
              ? (v193 = v192 == 0)
              : (v193 = 1),
                v193))
          {
LABEL_484:
            if ((_DWORD)v180)
            {
              do
              {
                if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v3 + 88))(*(_QWORD *)v3) & 1) == 0)
                  goto LABEL_337;
                v3 = (WTF::StringImpl *)((char *)v3 + 8);
                v181 -= 8;
              }
              while (v181);
              v177 = *((_QWORD *)v5 + 11);
            }
            v262 = *(_QWORD **)(v177 + 40);
            v263 = v262[40];
            if (v263)
            {
              if (*(_BYTE *)(v263 + 36))
                v266 = *(_BYTE *)(v263 + 36) == 11;
              else
                v266 = 1;
              if (v266)
                goto LABEL_337;
              if (*(_BYTE *)(v263 + 38))
              {
                if (*(float *)(v263 + 32) != 0.0)
                  goto LABEL_337;
              }
              else if (*(_DWORD *)(v263 + 32))
              {
                goto LABEL_337;
              }
            }
            v264 = v262[39];
            if (v264 && *(double *)(v264 + 32) != 1.0)
              goto LABEL_337;
            v265 = (double *)v262[38];
            if (v265 && (v265[2] != 0.0 || v265[3] != 0.0) && v265[5] != 0.0)
              goto LABEL_337;
            goto LABEL_5;
          }
        }
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(v178 + 32) + 20))
      goto LABEL_337;
    goto LABEL_484;
  }
  v49 = *((_QWORD *)v5 + 11);
  v50 = *(_QWORD *)(*(_QWORD *)(v49 + 32) + 40);
  v51 = *(unsigned int *)(v50 + 20);
  if ((_DWORD)v51)
  {
    v52 = *(_QWORD *)(v50 + 8);
    v53 = 8 * v51;
    do
    {
      v54 = *(unsigned __int8 *)(*(_QWORD *)v52 + 12);
      v108 = v54 > 0x14;
      v55 = (1 << v54) & 0x1DE0C0;
      if (!v108 && v55 != 0)
        goto LABEL_337;
      v52 += 8;
      v53 -= 8;
    }
    while (v53);
  }
  v57 = *(_QWORD **)(v49 + 40);
  v58 = v57[40];
  if (v58)
  {
    v248 = *(unsigned __int8 *)(v58 + 12);
    v108 = v248 > 0x14;
    v249 = (1 << v248) & 0x1DE0C0;
    if (!v108 && v249 != 0)
      goto LABEL_337;
  }
  v59 = v57[39];
  if (v59)
  {
    v251 = *(unsigned __int8 *)(v59 + 12);
    v108 = v251 > 0x14;
    v252 = (1 << v251) & 0x1DE0C0;
    if (!v108 && v252 != 0)
      goto LABEL_337;
  }
  v60 = v57[38];
  if (v60)
  {
    v61 = *(unsigned __int8 *)(v60 + 12);
    v108 = v61 > 0x14;
    v62 = (1 << v61) & 0x1DE0C0;
    if (!v108 && v62 != 0)
      goto LABEL_337;
  }
LABEL_5:
  if ((*((_BYTE *)this + 128) & 0x10) == 0)
    goto LABEL_19;
  v8 = (*((_QWORD *)v5 + 12) >> 43) & 0x1FLL;
  if ((_DWORD)v8)
  {
    switch((int)v8)
    {
      case 5:
        v71 = *((_QWORD *)v5 + 4);
        if (!v71)
          goto LABEL_19;
        while (2)
        {
          v72 = *(_QWORD *)(v71 + 8);
          if (!v72)
            goto LABEL_19;
          if (*(_BYTE *)(v72 + 46) != 19
            || !WebCore::RenderElement::element((WebCore::RenderElement *)v72)
            || (v73 = *(_QWORD *)(v72 + 248)) == 0
            || *(WebCore::RenderObject **)(v73 + 8) != v5)
          {
            v71 = *(_QWORD *)(v72 + 32);
            if (!v71)
              goto LABEL_19;
            continue;
          }
          break;
        }
        v12 = WebCore::RenderElement::element((WebCore::RenderElement *)v72);
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v3 += 4;
        LODWORD(v8) = 5;
        goto LABEL_433;
      case 6:
      case 7:
        goto LABEL_7;
      case 9:
        v254 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 3096);
        if (!v254)
          goto LABEL_19;
        break;
      case 12:
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272);
        if (!v12)
          goto LABEL_19;
        v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
        if (*MEMORY[0x1E0CBF2F8])
          *(_DWORD *)v3 += 4;
        LODWORD(v8) = 12;
        goto LABEL_433;
      case 13:
      case 14:
      case 15:
      case 16:
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 3) + 8) + 40) + 8) + 1272);
        if (!v12)
          goto LABEL_19;
        v3 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 592);
        if (v3)
          *(_DWORD *)v3 += 4;
        goto LABEL_433;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      v255 = *(_QWORD *)(*v254 + 64) & 0xFFFFFFFFFFFFLL;
      if (v255)
      {
        if ((*(_BYTE *)((*(_QWORD *)(*v254 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19436E5B8);
        }
        WebCore::RenderElement::backdropRenderer(v255, &v273);
        if (v273)
        {
          v268 = (WebCore::RenderObject *)*((_QWORD *)v273 + 1);
          if (*(_DWORD *)v273 == 1)
            WTF::fastFree(v273, a2);
          else
            --*(_DWORD *)v273;
          if (v268 == v5)
            break;
        }
      }
      v254 = (uint64_t *)v254[2];
      if (!v254)
        goto LABEL_19;
    }
    v12 = *v254;
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v3 += 4;
    LODWORD(v8) = 9;
LABEL_433:
    v270 = v8;
    v271 = v3;
    v272 = 1;
    v273 = (WTF *)v12;
    LODWORD(v274) = v8;
    v276 = 1;
    v275 = 0;
    WebCore::Styleable::~Styleable((WebCore::Styleable *)&v273, a2);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v270, v246);
  }
  else
  {
LABEL_7:
    if ((*((_BYTE *)v5 + 45) & 1) != 0)
      goto LABEL_19;
    v9 = *(unsigned __int16 **)(*((_QWORD *)v5 + 3) + 8);
    if (!v9)
      goto LABEL_19;
    v10 = v9[14];
    if ((v10 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19436DEE4);
    }
    if ((~v10 & 0x408) != 0 || !(*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v9 + 368))(v9))
    {
      LODWORD(v8) = 0;
      v11 = 1;
      v12 = (uint64_t)v9;
      goto LABEL_12;
    }
    v41 = *((_QWORD *)v9 + 14);
    if (v41)
      v12 = *(_QWORD *)(v41 + 8);
    else
      v12 = 0;
    if ((~v9[14] & 0x408) != 0)
      LODWORD(v8) = 0;
    else
      LODWORD(v8) = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v9 + 368))(v9);
    v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v42 = *(_DWORD *)v3;
      *(_DWORD *)v3 += 4;
      v43 = v42 + 2;
      if (v43 || (WTF::StringImpl::destroy(v3, a2), v43 = *(_DWORD *)v3, *(_DWORD *)v3 += 2, v43))
      {
        v11 = 0;
        *(_DWORD *)v3 = v43;
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v3, a2);
    }
  }
  v11 = 0;
LABEL_12:
  v13 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
LABEL_13:
    v14 = 1;
    goto LABEL_14;
  }
  v64 = *(unsigned int *)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if ((_DWORD)v64)
  {
    v74 = *(uint64_t **)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v75 = 8 * v64;
    if ((v11 & 1) != 0)
    {
      while (1)
      {
        v76 = *v74;
        if (!*(_BYTE *)(*v74 + 96))
          break;
        ++v74;
        v75 -= 8;
        if (!v75)
          goto LABEL_152;
      }
    }
    else
    {
      while (1)
      {
        v76 = *v74;
        if (*(_BYTE *)(*v74 + 96))
        {
          if (*(_DWORD *)(v76 + 80) == (_DWORD)v8 && *(_QWORD *)(v76 + 88) == (_QWORD)v3)
            break;
        }
        ++v74;
        v75 -= 8;
        if (!v75)
          goto LABEL_152;
      }
    }
    if (*(_QWORD *)v76)
    {
      if ((WebCore::KeyframeEffectStack::hasAcceleratedEffects(*(WebCore::KeyframeEffectStack **)v76, *(const WebCore::Settings **)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8) + 680)) & 1) != 0)
      {
LABEL_261:
        v14 = 0;
        LOBYTE(v12) = 1;
        goto LABEL_14;
      }
      v13 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL;
    }
LABEL_152:
    if (!v13)
      goto LABEL_13;
  }
  v65 = *(unsigned int *)(v13 + 164);
  if (!(_DWORD)v65)
    goto LABEL_13;
  v66 = *(uint64_t **)(v13 + 152);
  v67 = 8 * v65;
  v14 = 1;
  if ((v11 & 1) != 0)
  {
    while (1)
    {
      v68 = (uint64_t *)*v66;
      if (!*(_BYTE *)(*v66 + 96))
        break;
      ++v66;
      v67 -= 8;
      if (!v67)
        goto LABEL_14;
    }
  }
  else
  {
    while (1)
    {
      v68 = (uint64_t *)*v66;
      if (*(_BYTE *)(*v66 + 96))
      {
        if (*((_DWORD *)v68 + 20) == (_DWORD)v8 && v68[11] == (_QWORD)v3)
          break;
      }
      ++v66;
      v67 -= 8;
      if (!v67)
        goto LABEL_14;
    }
  }
  v79 = *v68;
  if (!*v68)
    goto LABEL_13;
  v80 = WTF::fastMalloc((WTF *)0x10);
  v81 = v80;
  v82 = off_1E3391D58;
  *(_QWORD *)v80 = off_1E3391D58;
  *(_WORD *)(v80 + 8) = 183;
  v83 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v83)
  {
    v84 = *(uint64_t **)v79;
    v85 = 8 * v83 - 8;
    do
    {
      v86 = *v84++;
      v87 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v81 + 16))(v81, *(_QWORD *)(v86 + 8));
      if ((v87 & 1) != 0)
        break;
      v88 = v85;
      v85 -= 8;
    }
    while (v88);
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    v82 = off_1E3391D58;
    if (v87 && (*((_BYTE *)this + 195) || (*((_BYTE *)this + 128) & 0x80) != 0))
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v80);
  }
  v110 = WTF::fastMalloc((WTF *)0x10);
  v111 = v110;
  *(_QWORD *)v110 = off_1E3391D58;
  *(_WORD *)(v110 + 8) = 117;
  v112 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v112)
  {
    v113 = *(uint64_t **)v79;
    v114 = 8 * v112 - 8;
    do
    {
      v115 = *v113++;
      v116 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v111 + 16))(v111, *(_QWORD *)(v115 + 8));
      if ((v116 & 1) != 0)
        break;
      v117 = v114;
      v114 -= 8;
    }
    while (v117);
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
    v82 = off_1E3391D58;
    if ((v116 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v110);
  }
  v118 = WTF::fastMalloc((WTF *)0x10);
  v119 = v118;
  *(_QWORD *)v118 = off_1E3391D58;
  *(_WORD *)(v118 + 8) = 351;
  v120 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v120)
  {
    v121 = *(uint64_t **)v79;
    v122 = 8 * v120 - 8;
    do
    {
      v123 = *v121++;
      v124 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v119 + 16))(v119, *(_QWORD *)(v123 + 8));
      if ((v124 & 1) != 0)
        break;
      v125 = v122;
      v122 -= 8;
    }
    while (v125);
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
    v82 = off_1E3391D58;
    if ((v124 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v118);
  }
  v126 = WTF::fastMalloc((WTF *)0x10);
  v127 = v126;
  *(_QWORD *)v126 = off_1E3391D58;
  *(_WORD *)(v126 + 8) = 451;
  v128 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v128)
  {
    v129 = *(uint64_t **)v79;
    v130 = 8 * v128 - 8;
    do
    {
      v131 = *v129++;
      v132 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 16))(v127, *(_QWORD *)(v131 + 8));
      if ((v132 & 1) != 0)
        break;
      v133 = v130;
      v130 -= 8;
    }
    while (v133);
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
    v82 = off_1E3391D58;
    if ((v132 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v126);
  }
  v134 = WTF::fastMalloc((WTF *)0x10);
  v135 = v134;
  *(_QWORD *)v134 = off_1E3391D58;
  *(_WORD *)(v134 + 8) = 284;
  v136 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v136)
  {
    v137 = *(uint64_t **)v79;
    v138 = 8 * v136 - 8;
    do
    {
      v139 = *v137++;
      v140 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v135 + 16))(v135, *(_QWORD *)(v139 + 8));
      if ((v140 & 1) != 0)
        break;
      v141 = v138;
      v138 -= 8;
    }
    while (v141);
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
    v82 = off_1E3391D58;
    if ((v140 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v134);
  }
  v142 = WTF::fastMalloc((WTF *)0x10);
  v143 = v142;
  *(_QWORD *)v142 = off_1E3391D58;
  *(_WORD *)(v142 + 8) = 214;
  v144 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v144)
  {
    v145 = *(uint64_t **)v79;
    v146 = 8 * v144 - 8;
    do
    {
      v147 = *v145++;
      v148 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v143 + 16))(v143, *(_QWORD *)(v147 + 8));
      if ((v148 & 1) != 0)
        break;
      v149 = v146;
      v146 -= 8;
    }
    while (v149);
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
    v82 = off_1E3391D58;
    if ((v148 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v142);
  }
  v150 = WTF::fastMalloc((WTF *)0x10);
  v151 = v150;
  *(_QWORD *)v150 = off_1E3391D58;
  *(_WORD *)(v150 + 8) = 210;
  v152 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v152)
  {
    v153 = *(uint64_t **)v79;
    v154 = 8 * v152 - 8;
    do
    {
      v155 = *v153++;
      v156 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v151 + 16))(v151, *(_QWORD *)(v155 + 8));
      if ((v156 & 1) != 0)
        break;
      v157 = v154;
      v154 -= 8;
    }
    while (v157);
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
    v82 = off_1E3391D58;
    if ((v156 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v150);
  }
  v158 = WTF::fastMalloc((WTF *)0x10);
  v159 = v158;
  *(_QWORD *)v158 = off_1E3391D58;
  *(_WORD *)(v158 + 8) = 273;
  v160 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v160)
  {
    v161 = *(uint64_t **)v79;
    v162 = 8 * v160 - 8;
    do
    {
      v163 = *v161++;
      v164 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v159 + 16))(v159, *(_QWORD *)(v163 + 8));
      if ((v164 & 1) != 0)
        break;
      v165 = v162;
      v162 -= 8;
    }
    while (v165);
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
    v82 = off_1E3391D58;
    if ((v164 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v158);
  }
  v166 = WTF::fastMalloc((WTF *)0x10);
  v167 = v166;
  *(_QWORD *)v166 = off_1E3391D58;
  *(_WORD *)(v166 + 8) = 178;
  v168 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v168)
  {
    v169 = *(uint64_t **)v79;
    v170 = 8 * v168 - 8;
    do
    {
      v171 = *v169++;
      v172 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v167 + 16))(v167, *(_QWORD *)(v171 + 8));
      if ((v172 & 1) != 0)
        break;
      v173 = v170;
      v170 -= 8;
    }
    while (v173);
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
    v82 = off_1E3391D58;
    if ((v172 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v166);
  }
  v194 = WTF::fastMalloc((WTF *)0x10);
  v195 = v194;
  *(_QWORD *)v194 = off_1E3391D58;
  *(_WORD *)(v194 + 8) = 179;
  v196 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v196)
  {
    v197 = *(uint64_t **)v79;
    v198 = 8 * v196 - 8;
    do
    {
      v199 = *v197++;
      v200 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v195 + 16))(v195, *(_QWORD *)(v199 + 8));
      if ((v200 & 1) != 0)
        break;
      v201 = v198;
      v198 -= 8;
    }
    while (v201);
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
    v82 = off_1E3391D58;
    if ((v200 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v194);
  }
  v202 = WTF::fastMalloc((WTF *)0x10);
  v203 = v202;
  *(_QWORD *)v202 = off_1E3391D58;
  *(_WORD *)(v202 + 8) = 180;
  v204 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v204)
  {
    v205 = *(uint64_t **)v79;
    v206 = 8 * v204 - 8;
    do
    {
      v207 = *v205++;
      v208 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v203 + 16))(v203, *(_QWORD *)(v207 + 8));
      if ((v208 & 1) != 0)
        break;
      v209 = v206;
      v206 -= 8;
    }
    while (v209);
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
    v82 = off_1E3391D58;
    if ((v208 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v202);
  }
  v210 = WTF::fastMalloc((WTF *)0x10);
  v211 = v210;
  *(_QWORD *)v210 = off_1E3391D58;
  *(_WORD *)(v210 + 8) = 181;
  v212 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v212)
  {
    v213 = *(uint64_t **)v79;
    v214 = 8 * v212 - 8;
    do
    {
      v215 = *v213++;
      v216 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v211 + 16))(v211, *(_QWORD *)(v215 + 8));
      if ((v216 & 1) != 0)
        break;
      v217 = v214;
      v214 -= 8;
    }
    while (v217);
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
    v82 = off_1E3391D58;
    if ((v216 & 1) != 0)
      goto LABEL_261;
  }
  else
  {
    WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::isCurrentlyAffectingProperty(WebCore::CSSPropertyID)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v210);
  }
  v218 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v218 = off_1E3391D58;
  v218[4] = 182;
  v219 = *(unsigned int *)(v79 + 12);
  if ((_DWORD)v219)
  {
    v220 = *(uint64_t **)v79;
    v221 = 8 * v219 - 8;
    do
    {
      v222 = *v220++;
      LOBYTE(v12) = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v218 + 16))(v218, *(_QWORD *)(v222 + 8));
      if ((v12 & 1) != 0)
        break;
      v223 = v221;
      v221 -= 8;
    }
    while (v223);
    v82 = *(uint64_t (***)())v218;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  ((void (*)(_WORD *))v82[1])(v218);
  v14 = 0;
LABEL_14:
  if (v3)
    v15 = v11;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (!(v14 & 1 | ((v12 & 1) == 0)))
    goto LABEL_337;
LABEL_19:
  v16 = *((_DWORD *)v5 + 5);
  if ((v16 & 0x1800000) == 0)
    goto LABEL_31;
  v17 = *((_QWORD *)v5 + 18);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 24) + 8) + 40) + 8)
                  + 1992);
  if (!v18)
    goto LABEL_28;
  v19 = *(_DWORD *)(v18 + 8) + 1;
  *(_DWORD *)(v18 + 8) = v19;
  v20 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8);
  v21 = *(_QWORD **)(v20 + 3096);
  if (v21)
  {
    v230 = 0;
    v231 = (_QWORD *)(v20 + 3104);
    do
    {
      if (v230)
        v232 = v230 + 1;
      else
        v232 = v231;
      v230 = (_QWORD *)*v232;
      v22 = *v230;
      if ((*(_BYTE *)(*v230 + 54) & 0x40) != 0)
        break;
      v22 = 0;
    }
    while (v230 != v21);
  }
  else
  {
    v22 = 0;
  }
  if (*(_QWORD *)(v18 + 56))
  {
    if (v22)
    {
      v226 = *(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL;
      if (v226)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19436E570);
        }
        if ((*(_BYTE *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) != 0)
        {
          v227 = *(_QWORD *)((*(_QWORD *)(v22 + 64) & 0xFFFFFFFFFFFFLL) + 0x90);
          if (v227)
          {
            WebCore::RenderElement::backdropRenderer(v226, &v273);
            if (v273 && (v267 = *((_QWORD *)v273 + 1)) != 0 && v267 == *(_QWORD *)(v17 + 32))
            {
              v23 = 0;
            }
            else
            {
              if (v227 == v17)
              {
                v23 = 0;
              }
              else
              {
                v228 = v17;
                do
                  v228 = *(_QWORD *)(v228 + 40);
                while (v228 != v227 && v228 != 0);
                v23 = v228 == 0;
              }
              if (!v273)
                goto LABEL_371;
            }
            if (*(_DWORD *)v273 == 1)
              WTF::fastFree(v273, a2);
            else
              --*(_DWORD *)v273;
LABEL_371:
            v19 = *(_DWORD *)(v18 + 8);
            goto LABEL_25;
          }
        }
      }
    }
  }
  v23 = 2;
LABEL_25:
  if (!v19)
  {
    __break(0xC471u);
    JUMPOUT(0x19436DF4CLL);
  }
  *(_DWORD *)(v18 + 8) = v19 - 1;
  if (v23 == 1)
    goto LABEL_31;
  v16 = *((_DWORD *)v5 + 5);
LABEL_28:
  v24 = *((_QWORD *)v5 + 12);
  v25 = (v24 >> 19) & 7;
  if ((v16 & 0x1800000) != 0x1000000)
    goto LABEL_30;
  if ((*((_BYTE *)v5 + 45) & 2) != 0)
    v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 4) + 8) + 96);
  if ((v24 & 0x380000) == 0x300000)
  {
    if ((*(_BYTE *)(v17 + 24) & 0x4A) == 0)
      goto LABEL_31;
    v44 = (v25 == 3) & (v16 >> 23);
  }
  else
  {
LABEL_30:
    if ((v16 & 0x800000) == 0 || v25 != 3)
      goto LABEL_31;
    v44 = 1;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40)
                                                                                          + 8)
                                                                              + 528)
                                                                  + 8)
                                                      + 24)
                                          + 8)
                              + 112)
                  + 664) & 0x20) != 0)
  {
    if (v44)
    {
      if (WebCore::RenderLayerCompositor::isAsyncScrollableStickyLayer(this, *(const WebCore::RenderLayer **)(v17 + 40), 0))
      {
        goto LABEL_337;
      }
    }
    else if (*(_BYTE *)a3)
    {
      if (WebCore::RenderObject::container(v5) == *((_QWORD *)this + 1))
      {
        if (WebCore::RenderLayer::isVisuallyNonEmpty(v17, 0) || (*(_BYTE *)(v17 + 26) & 0x20) != 0)
        {
          if (WebCore::RenderLayerCompositor::fixedLayerIntersectsViewport(this, (const WebCore::RenderLayer *)v17, v224))
          {
            goto LABEL_337;
          }
          v225 = 1;
        }
        else
        {
          v225 = 3;
        }
      }
      else
      {
        v225 = 2;
      }
      *(_DWORD *)(a3 + 4) = v225;
    }
    else
    {
      *(_BYTE *)(a3 + 8) = 1;
      if (*(_QWORD *)(v17 + 256))
        goto LABEL_337;
    }
  }
LABEL_31:
  if ((*((_BYTE *)this + 128) & 8) != 0 && *((_BYTE *)v5 + 46) == 13)
  {
    v90 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
    v91 = *(_WORD *)(v90 + 28);
    if ((v91 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19436E1E0);
    }
    if ((v91 & 0x10) == 0
      || *(_QWORD *)(*(_QWORD *)(v90 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19436DF6CLL);
    }
    v92 = *(_DWORD *)(v90 + 120);
    v93 = *(_DWORD *)(v90 + 124);
    v94 = WebCore::canvasCompositingStrategy(v5, a2);
    if (v94 == 2)
      goto LABEL_337;
    v95 = v93 >= 0 ? v93 : -v93;
    v96 = v92 >= 0 ? v92 : -v92;
    v97 = v95 * (unint64_t)v96;
    if (v94 == 1 && !*((_BYTE *)this + 133) && v97 >> 3 >= 0x271 && (v97 & 0xFFFFFFFF00000000) == 0)
      goto LABEL_337;
  }
  v26 = *((_QWORD *)v5 + 11);
  v27 = *(_QWORD *)(v26 + 40);
  if (*(_DWORD *)(*(_QWORD *)(v27 + 72) + 20)
    || (*((_BYTE *)this + 128) & 0x20) != 0 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 32) + 20))
  {
    goto LABEL_337;
  }
  v28 = *(_QWORD *)(v27 + 200);
  if (!v28 || !*(_BYTE *)(v28 + 33))
    goto LABEL_46;
  v29 = *((_QWORD *)v5 + 18);
  if (v29)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) + 24) + 8) + 40) + 8)
                    + 1992);
    if (v30)
    {
      v31 = *(_DWORD *)(v30 + 8) + 1;
      *(_DWORD *)(v30 + 8) = v31;
      v32 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8);
      v33 = *(_QWORD **)(v32 + 3096);
      if (v33)
      {
        v237 = 0;
        v238 = (_QWORD *)(v32 + 3104);
        do
        {
          if (v237)
            v239 = v237 + 1;
          else
            v239 = v238;
          v237 = (_QWORD *)*v239;
          v34 = *v237;
          if ((*(_BYTE *)(*v237 + 54) & 0x40) != 0)
            break;
          v34 = 0;
        }
        while (v237 != v33);
      }
      else
      {
        v34 = 0;
      }
      if (!*(_QWORD *)(v30 + 56))
        goto LABEL_42;
      if (!v34)
        goto LABEL_42;
      v233 = *(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v233)
        goto LABEL_42;
      if ((*(_BYTE *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19436E598);
      }
      if ((*(_BYTE *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) == 0
        || (v234 = *(_QWORD *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x90)) == 0)
      {
LABEL_42:
        v35 = 2;
        goto LABEL_43;
      }
      WebCore::RenderElement::backdropRenderer(v233, &v273);
      if (v273 && (v269 = *((_QWORD *)v273 + 1)) != 0 && v269 == *(_QWORD *)(v29 + 32))
      {
        v35 = 0;
      }
      else
      {
        if (v234 == v29)
        {
          v35 = 0;
        }
        else
        {
          do
            v29 = *(_QWORD *)(v29 + 40);
          while (v29 != v234 && v29 != 0);
          v35 = v29 == 0;
        }
        if (!v273)
          goto LABEL_395;
      }
      if (*(_DWORD *)v273 == 1)
        WTF::fastFree(v273, v235);
      else
        --*(_DWORD *)v273;
LABEL_395:
      v31 = *(_DWORD *)(v30 + 8);
LABEL_43:
      if (!v31)
      {
        __break(0xC471u);
        JUMPOUT(0x19436E03CLL);
      }
      *(_DWORD *)(v30 + 8) = v31 - 1;
      if (v35 == 1)
        goto LABEL_46;
    }
  }
  if (!*((_BYTE *)this + 133)
    && ((*((_BYTE *)v5 + 45) & 4) != 0
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 200) + 34)))
  {
    goto LABEL_337;
  }
LABEL_46:
  if ((*((_BYTE *)this + 128) & 1) != 0 && (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 40) + 636) & 0x400) != 0)
  {
    v240 = *((_QWORD *)v5 + 18);
    if ((*(_BYTE *)(v240 + 27) & 0x80) != 0)
      goto LABEL_337;
    do
    {
      v240 = *(_QWORD *)(v240 + 40);
      if (!v240)
        goto LABEL_48;
    }
    while ((*(_BYTE *)(v240 + 24) & 0x4A) == 0);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v240 + 32) + 88) + 40) + 636) & 0x380) == 0x80)
      goto LABEL_337;
  }
LABEL_48:
  v36 = *(_QWORD *)(*((_QWORD *)v5 + 3) + 8);
  v37 = *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8);
  if (*(_QWORD *)(v37 + 1272) != v36)
  {
    if (*((_BYTE *)v5 + 46) == 49)
    {
      v89 = *(WebCore::ViewTransition **)(v37 + 2112);
      if (v89 && (WebCore::ViewTransition::documentElementIsCaptured(v89) & 1) != 0)
        goto LABEL_337;
    }
    else if ((*((_BYTE *)v5 + 22) & 0x40) != 0)
    {
      goto LABEL_337;
    }
  }
  if ((*((_BYTE *)v5 + 52) & 7) == 3 && (*((_BYTE *)v5 + 53) & 8) != 0)
    goto LABEL_337;
  v38 = *((unsigned __int8 *)v5 + 46);
  if ((*((_BYTE *)this + 128) & 2) != 0 && v38 == 48)
  {
    ++*((_DWORD *)v5 + 4);
    if (((WebCore::RenderVideo::requiresImmediateCompositing(v5) & 1) != 0
       || WebCore::RenderVideo::shouldDisplayVideo(v5))
      && *((_BYTE *)this + 132)
      && WebCore::RenderVideo::supportsAcceleratedRendering(v5))
    {
      v244 = *((_DWORD *)v5 + 4);
      if (v244)
      {
        *((_DWORD *)v5 + 4) = v244 - 1;
        goto LABEL_337;
      }
    }
    else
    {
      v247 = *((_DWORD *)v5 + 4);
      if (v247)
      {
        *((_DWORD *)v5 + 4) = v247 - 1;
        v38 = *((unsigned __int8 *)v5 + 46);
        goto LABEL_54;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19436E708);
  }
LABEL_54:
  if (v38 == 24)
    goto LABEL_337;
  if ((*((_BYTE *)v5 + 52) & 7) == 3 && (*((_BYTE *)v5 + 53) & 4) != 0)
  {
    ++*((_DWORD *)v5 + 56);
    if ((*(_BYTE *)(*((_QWORD *)v5 + 13) + 239) & 4) == 0
      && (*((_BYTE *)v5 + 120) & 0x30) == 0
      && (*(unsigned int (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 1696))(v5))
    {
      if (*(_BYTE *)a3)
      {
        v99 = WebCore::RenderBox::contentBoxRect(v5);
        if ((int)v99 <= 0)
          v102 = -(-(int)v99 & 0x3F);
        else
          v102 = v99 & 0x3F;
        if (SHIDWORD(v99) <= 0)
          v103 = -(-HIDWORD(v99) & 0x3F);
        else
          v103 = BYTE4(v99) & 0x3F;
        v104 = v102 + v100;
        if (__OFADD__(v102, v100))
          v104 = (v102 >> 31) + 0x7FFFFFFF;
        v105 = v103 + v101;
        v106 = (v103 >> 31) + 0x7FFFFFFF;
        if (__OFADD__(v103, v101))
          v105 = (v103 >> 31) + 0x7FFFFFFF;
        v107 = v105 / 64 - ((int)(v103 + 32) >> 6) + ((int)(v105 - (v104 & 0xFFFFFFC0) + 32) >> 6);
        v108 = v104 / 64 - ((int)(v102 + 32) >> 6) + ((int)(v104 - (v106 & 0xFFFFFFC0) + 32) >> 6) <= 0 || v107 <= 0;
        v109 = !v108;
        goto LABEL_326;
      }
      *(_BYTE *)(a3 + 8) = 1;
      if ((*((_BYTE *)v5 + 21) & 0x80) != 0)
      {
        if ((*((_BYTE *)v5 + 45) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19436E414);
        }
        v109 = *(_QWORD *)(*((_QWORD *)v5 + 18) + 256) != 0;
LABEL_326:
        if (*((_DWORD *)v5 + 56) == 1)
        {
          (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v5 + 8))(v5);
          if (v109)
            goto LABEL_337;
        }
        else
        {
          --*((_DWORD *)v5 + 56);
          if (v109)
            goto LABEL_337;
        }
        goto LABEL_57;
      }
    }
    v109 = 0;
    goto LABEL_326;
  }
LABEL_57:
  if ((*((_BYTE *)this + 128) & 4) != 0
    && *((_BYTE *)v5 + 46) == 7
    && WebCore::RenderEmbeddedObject::requiresAcceleratedCompositing(v5))
  {
    if ((*((_BYTE *)v5 + 52) & 7) != 3 || (*((_BYTE *)v5 + 53) & 4) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19436E6E8);
    }
    if ((*(_BYTE *)(*((_QWORD *)v5 + 13) + 239) & 4) == 0 && (*((_BYTE *)v5 + 120) & 0x30) == 0)
    {
      if (*(_BYTE *)a3)
      {
        v273 = (WTF *)WebCore::RenderBox::contentBoxRect(v5);
        v274 = v241;
        WebCore::snappedIntRect((WebCore *)&v273, v241);
        if (v243 * v242 > 1)
          goto LABEL_337;
      }
      else
      {
        *(_BYTE *)(a3 + 8) = 1;
        if ((WebCore::RenderObject::isComposited(v5) & 1) != 0)
          goto LABEL_337;
      }
    }
  }
  v39 = *((_QWORD *)v5 + 18);
  result = *(_QWORD *)(v39 + 264);
  if (!result)
    return result;
  result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling((WebCore::RenderLayerScrollableArea *)result);
  if (!(_DWORD)result)
    return result;
  if (!*(_BYTE *)a3)
  {
    *(_BYTE *)(a3 + 8) = 1;
    if (!*(_QWORD *)(v39 + 256))
      return 0;
LABEL_337:
    result = 1;
    *(_BYTE *)(a3 + 9) = 1;
    return result;
  }
  result = *(_QWORD *)(v39 + 264);
  if (result)
  {
    WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(result, 1);
    v70 = *(_QWORD *)(v39 + 264);
    if (v70 && *(_BYTE *)(v70 + 79))
      goto LABEL_337;
    return 0;
  }
  return result;
}

uint64_t WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(uint64_t a1, char a2)
{
  uint64_t result;
  int v4;
  int v5;
  WebCore::RenderBox *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  WebCore::RenderBox *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  WebCore::RenderView *v18;
  WebCore::RenderLayerCompositor *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderLayerCompositor *v22;
  WebCore::RenderLayerCompositor *v23;
  WTF *v24;
  void *v25;
  WebCore::RenderBox *v26;
  WebCore::RenderBox *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::RenderBox *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[4];
  int v34;
  __int16 v35;

  if ((a2 & 1) != 0)
  {
    result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling((WebCore::RenderLayerScrollableArea *)a1);
    if (!(_DWORD)result)
      goto LABEL_16;
    if (*(_BYTE *)(a1 + 76))
    {
      *(_BYTE *)(a1 + 76) = 0;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 45) & 4) != 0)
        v30 = *(WebCore::RenderBox **)(*(_QWORD *)(a1 + 96) + 32);
      else
        v30 = 0;
      v31 = *((_QWORD *)v30 + 24);
      if (v31)
        v32 = *(_QWORD *)(v31 + 12);
      else
        WebCore::RenderBox::flippedClientBoxRect(v30);
      *(_DWORD *)(a1 + 88) = ((int)(v32 - (v31 & 0xFFFFFFC0) + 32) >> 6) + (int)v32 / 64;
      *(_DWORD *)(a1 + 92) = ((int)(HIDWORD(v32) - (v4 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v32) / 64;
      WebCore::RenderLayerScrollableArea::computeScrollOrigin((WebCore::RenderLayerScrollableArea *)a1);
      WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(a1, 1);
    }
    v5 = *(_DWORD *)(a1 + 88);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 32) + 45) & 4) != 0)
      v6 = *(WebCore::RenderBox **)(*(_QWORD *)(a1 + 96) + 32);
    else
      v6 = 0;
    result = WebCore::RenderBox::clientWidth(v6);
    v9 = ((int)(result - (v8 & 0xFFFFFFC0) + 32) >> 6) + (int)result / 64;
    v10 = *(_QWORD *)(a1 + 96);
    if (v5 > v9)
    {
      v21 = *(_QWORD *)(v10 + 32);
      if ((*(_BYTE *)(v21 + 45) & 4) == 0)
        v21 = 0;
      if ((*(_BYTE *)(v21 + 22) & 1) != 0 && ((*(_DWORD *)(v21 + 96) >> 10) & 7u) - 3 < 2)
      {
        v16 = 1;
        goto LABEL_20;
      }
    }
    if (*(_BYTE *)(a1 + 76))
    {
      *(_BYTE *)(a1 + 76) = 0;
      v26 = *(WebCore::RenderBox **)(v10 + 32);
      if ((*((_BYTE *)v26 + 45) & 4) != 0)
        v27 = v26;
      else
        v27 = 0;
      v28 = *((_QWORD *)v27 + 24);
      if (v28)
        v29 = *(_QWORD *)(v28 + 12);
      else
        WebCore::RenderBox::flippedClientBoxRect(v27);
      *(_DWORD *)(a1 + 88) = ((int)(v29 - (v28 & 0xFFFFFFC0) + 32) >> 6) + (int)v29 / 64;
      *(_DWORD *)(a1 + 92) = ((int)(HIDWORD(v29) - (v7 & 0xFFFFFFC0) + 32) >> 6) + SHIDWORD(v29) / 64;
      WebCore::RenderLayerScrollableArea::computeScrollOrigin((WebCore::RenderLayerScrollableArea *)a1);
      WebCore::RenderLayerScrollableArea::computeHasCompositedScrollableOverflow(a1, 1);
      v10 = *(_QWORD *)(a1 + 96);
    }
    v11 = *(_DWORD *)(a1 + 92);
    v12 = *(_QWORD *)(v10 + 32);
    v13 = (*(_BYTE *)(v12 + 45) & 4) != 0 ? (WebCore::RenderBox *)v12 : 0;
    result = WebCore::RenderBox::clientHeight(v13);
    if (v11 <= ((int)(result - (v14 & 0xFFFFFFC0) + 32) >> 6) + (int)result / 64)
      goto LABEL_16;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32);
    if ((*(_BYTE *)(v15 + 45) & 4) == 0)
      v15 = 0;
    if ((*(_BYTE *)(v15 + 22) & 1) == 0)
    {
LABEL_16:
      v16 = 0;
      goto LABEL_20;
    }
    v16 = ((unsigned __int16)*(_DWORD *)(v15 + 96) >> 13) - 3 < 2;
  }
  else
  {
    v17 = *(unsigned __int8 *)(a1 + 79);
    result = WebCore::RenderLayerScrollableArea::canUseCompositedScrolling((WebCore::RenderLayerScrollableArea *)a1);
    if (v17)
      v16 = result;
    else
      v16 = 0;
  }
LABEL_20:
  if (*(unsigned __int8 *)(a1 + 79) != v16)
  {
    result = *(_QWORD *)(a1 + 96);
    while (1)
    {
      result = *(_QWORD *)(result + 40);
      if (!result)
        break;
      if ((*(_BYTE *)(result + 24) & 0x4A) != 0)
      {
        *(_DWORD *)(result + 12) |= 0x800u;
        result = WebCore::RenderLayer::setAncestorsHaveCompositingDirtyFlag(result, 2);
        break;
      }
    }
    *(_BYTE *)(a1 + 79) = v16;
    if (v16)
    {
      v18 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96)
                                                                                                + 32)
                                                                                    + 24)
                                                                        + 8)
                                                            + 40)
                                                + 8)
                                    + 1944);
      v19 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v18 + 50);
      if (!v19)
      {
        v22 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
        v19 = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::RenderLayerCompositor(v22, v18);
        v23 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v18 + 50);
        *((_QWORD *)v18 + 50) = v19;
        if (v23)
        {
          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v23);
          WTF::fastFree(v24, v25);
          v19 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v18 + 50);
        }
      }
      v20 = *(_QWORD *)(a1 + 96);
      v34 = 0;
      v35 = 0;
      v33[0] = 0;
      if (WebCore::RenderLayerCompositor::updateBacking(v19, v20, (uint64_t)v33, 0, 1))
      {
        WebCore::RenderLayer::setChildrenNeedCompositingGeometryUpdate(v20);
        WebCore::RenderLayer::setNeedsCompositingLayerConnection(v20);
        WebCore::RenderLayer::setSubsequentLayersNeedCompositingRequirementsTraversal(v20);
        WebCore::RenderLayer::setNeedsPostLayoutCompositingUpdateOnAncestors(v20);
      }
      result = *(_QWORD *)(v20 + 256);
      if (result)
        return (uint64_t)WebCore::RenderLayerBacking::updateConfigurationAfterStyleChange((WebCore::RenderLayerBacking *)result);
    }
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::isCurrentlyAffectingProperty(WebCore::KeyframeEffect *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::WebAnimation *v22;
  __int16 v23;
  unsigned int v24;
  char v25;
  char *v26;

  if (a3)
  {
    v19 = *((_QWORD *)this + 15);
    if ((v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0
       || (v21 = *((_QWORD *)this + 33)) != 0 && (v20 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8)) != 0)
      && (*(_QWORD *)(*(_QWORD *)(v20 + 680) + 712) & 0x800000000000) != 0)
    {
      if (*((_BYTE *)this + 328))
      {
        if (WebCore::KeyframeEffect::canBeAccelerated(this))
        {
          v22 = *(WebCore::WebAnimation **)(*((_QWORD *)this + 12) + 8);
          if (!*((_BYTE *)v22 + 156) && WebCore::WebAnimation::playState(v22) == 1)
            goto LABEL_2;
        }
      }
    }
    else if (*((_BYTE *)this + 310) == 1)
    {
      goto LABEL_2;
    }
    if (!*((_BYTE *)this + 308) || *((_BYTE *)this + 304) == 4)
      return 0;
  }
LABEL_2:
  v23 = a2;
  v24 = 0;
  v5 = *((_QWORD *)this + 20);
  if (!v5)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v10 = ((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) >> 16);
  while (1)
  {
    v11 = v10 & v8;
    v12 = (unsigned __int16 *)(v5 + 16 * (v10 & v8));
    v13 = *((unsigned int *)v12 + 2);
    v14 = v6 != v13 || v6 == 0xFFFFFFFFLL;
    v15 = !v14;
    if ((_DWORD)v13 != -1 && v15)
      break;
    if (v13 == 0xFFFFFFFFLL)
      LOBYTE(v15) = v6 == 0xFFFFFFFFLL;
    if (v15)
      goto LABEL_31;
LABEL_21:
    if (v13)
      v17 = 0;
    else
      v17 = *v12 == 0;
    if (v17)
    {
      if (v24 != -1)
        ((void (*)(char **, __int16 *))off_1E33919E8[v24])(&v26, &v23);
      return 0;
    }
    v10 = ++v7 + v11;
    v6 = v24;
  }
  v26 = &v25;
  if (!((unsigned int (*)(char **, uint64_t, __int16 *))off_1E3391BC0[v6])(&v26, v5 + 16 * v11, &v23))
  {
    v13 = *((unsigned int *)v12 + 2);
    goto LABEL_21;
  }
  v6 = v24;
LABEL_31:
  if (v6 != 0xFFFFFFFFLL)
    ((void (*)(char **, __int16 *))off_1E33919E8[v6])(&v26, &v23);
  if (!*((_BYTE *)this + 288))
    return *((unsigned __int8 *)this + 309) == 1;
  if (*((_DWORD *)this + 68) != 5)
    return *((unsigned __int8 *)this + 309) == 1;
  result = WebCore::Style::isValidMarkerStyleProperty(a2);
  if ((_DWORD)result)
    return *((unsigned __int8 *)this + 309) == 1;
  return result;
}

uint64_t WTF::HashSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTableTraits>::contains(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int i;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  _BOOL4 v13;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  char v19;
  char *v20;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 != -1)
  {
    v5 = *(_DWORD *)(v2 - 8);
    v20 = &v19;
    v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v20, a2);
    for (i = 0; ; v6 = i + v8)
    {
      v8 = v6 & v5;
      v9 = (unsigned __int16 *)(v2 + 16 * (v6 & v5));
      v10 = *((unsigned int *)v9 + 2);
      v11 = *(_DWORD *)(a2 + 8);
      v13 = v11 == (_DWORD)v10 && v11 != -1;
      if ((_DWORD)v10 == -1 || !v13)
      {
        v15 = v11 == -1;
        if ((_DWORD)v10 != -1)
          v15 = v13;
        if (v15)
          return 1;
      }
      else
      {
        v20 = &v19;
        if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v10])(&v20, v2 + 16 * v8, a2) & 1) != 0)return 1;
        LODWORD(v10) = *((_DWORD *)v9 + 2);
      }
      if ((_DWORD)v10)
        v16 = 0;
      else
        v16 = *v9 == 0;
      if (v16)
        return 0;
      ++i;
    }
  }
  v18 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(v18);
}

uint64_t WebCore::CSSPropertyAnimation::animationOfPropertyIsAccelerated(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::PropertyWrapperFilter *v4;
  const WebCore::Settings *v5;
  uint64_t v6;
  uint64_t *v7;

  v6 = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::PropertyWrapperFilter *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::PropertyWrapperFilter::animationIsAccelerated(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation32animationOfPropertyIsAcceleratedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_8SettingsEE3__0JZNS9_32animationOfPropertyIsAcceleratedESF_SI_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v2])(&v7, a1);
  }
}

BOOL WebCore::PropertyWrapperFilter::animationIsAccelerated(WebCore::PropertyWrapperFilter *this, const WebCore::Settings *a2)
{
  int v2;
  _BOOL4 v3;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = v2 == 451;
  if (v2 == 351)
    v3 = 1;
  return v2 == 117 || v3;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::TranslateTransformOperation>::animationIsAccelerated()
{
  return 1;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::RotateTransformOperation>::animationIsAccelerated()
{
  return 1;
}

uint64_t WebCore::AcceleratedIndividualTransformPropertyWrapper<WebCore::ScaleTransformOperation>::animationIsAccelerated()
{
  return 1;
}

uint64_t WebCore::NinePieceImage::Data::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == v5)
    goto LABEL_2;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if ((_DWORD)result)
  {
LABEL_2:
    result = WebCore::operator==((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(a2 + 16));
    if (!(_DWORD)result)
      return result;
    if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4))
    {
      result = WebCore::operator==((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a2 + 48));
      if (!(_DWORD)result)
        return result;
      if (*(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5))
      {
        result = WebCore::operator==((unsigned __int8 *)(a1 + 80), (unsigned __int8 *)(a2 + 80));
        if (!(_DWORD)result)
          return result;
        if (*(unsigned __int8 *)(a1 + 6) == *(unsigned __int8 *)(a2 + 6))
          return *(unsigned __int8 *)(a1 + 7) == *(unsigned __int8 *)(a2 + 7);
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  char isCalculatedEqual;
  char v16;
  char v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  v2 = a1[4];
  if (v2 != a2[4] || (a1[5] != 0) != (a2[5] != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v18 = a2;
      v21 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)a1, (const WebCore::Length *)a2);
      a2 = v18;
      a1 = v21;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v3 = *(float *)a1;
      if (!a1[6])
        v3 = (float)*(int *)a1;
      v4 = *(float *)a2;
      if (!a2[6])
        v4 = (float)*(int *)a2;
      if (v3 != v4)
        return 0;
    }
  }
  v5 = a1[12];
  if (v5 != a2[12] || (a1[13] != 0) != (a2[13] != 0))
    return 0;
  if (v5 != 13)
  {
    if (v5 == 11)
    {
      v19 = a2;
      v22 = a1;
      v16 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 8), (const WebCore::Length *)(a2 + 8));
      a2 = v19;
      a1 = v22;
      if ((v16 & 1) == 0)
        return 0;
    }
    else
    {
      v6 = *((float *)a1 + 2);
      if (!a1[14])
        v6 = (float)SLODWORD(v6);
      v7 = *((float *)a2 + 2);
      if (!a2[14])
        v7 = (float)SLODWORD(v7);
      if (v6 != v7)
        return 0;
    }
  }
  v8 = a1[20];
  if (v8 != a2[20] || (a1[21] != 0) != (a2[21] != 0))
    return 0;
  if (v8 != 13)
  {
    if (v8 == 11)
    {
      v20 = a2;
      v23 = a1;
      v17 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 16), (const WebCore::Length *)(a2 + 16));
      a2 = v20;
      a1 = v23;
      if ((v17 & 1) == 0)
        return 0;
    }
    else
    {
      v9 = *((float *)a1 + 4);
      if (!a1[22])
        v9 = (float)SLODWORD(v9);
      v10 = *((float *)a2 + 4);
      if (!a2[22])
        v10 = (float)SLODWORD(v10);
      if (v9 != v10)
        return 0;
    }
  }
  v11 = a1[28];
  if (v11 != a2[28] || (a1[29] != 0) != (a2[29] != 0))
    return 0;
  if (v11 == 13)
    return 1;
  if (v11 == 11)
    return (WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 24), (const WebCore::Length *)(a2 + 24)) & 1) != 0;
  v12 = *((float *)a1 + 6);
  if (!a1[30])
    v12 = (float)SLODWORD(v12);
  v13 = *((float *)a2 + 6);
  if (!a2[30])
    v13 = (float)SLODWORD(v13);
  return v12 == v13;
}

{
  int v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char isCalculatedEqual;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  if (*a1 != *a2)
    return 0;
  v2 = a1[8];
  if (v2 != a2[8] || (a1[9] != 0) != (a2[9] != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v10 = a2;
      v11 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 4), (const WebCore::Length *)(a2 + 4));
      a2 = v10;
      a1 = v11;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v3 = *((float *)a1 + 1);
      if (!a1[10])
        v3 = (float)SLODWORD(v3);
      v4 = *((float *)a2 + 1);
      if (!a2[10])
        v4 = (float)SLODWORD(v4);
      if (v3 != v4)
        return 0;
    }
  }
  v5 = a1[16];
  if (v5 != a2[16] || (a1[17] != 0) != (a2[17] != 0))
    return 0;
  if (v5 == 13)
    return 1;
  if (v5 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 12));
  v6 = *((float *)a1 + 3);
  if (!a1[18])
    v6 = (float)*((int *)a1 + 3);
  v7 = *((float *)a2 + 3);
  if (!a2[18])
    v7 = (float)SLODWORD(v7);
  return v6 == v7;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1 != *a2
    || *((float *)a1 + 1) != *((float *)a2 + 1)
    || (float)((float)*((__int16 *)a1 + 4) * 0.25) != (float)((float)*((__int16 *)a2 + 4) * 0.25)
    || (float)((float)*((__int16 *)a1 + 5) * 0.25) != (float)((float)*((__int16 *)a2 + 5) * 0.25))
  {
    return 0;
  }
  if (a1[14] && a2[14])
  {
    if ((float)((float)*((__int16 *)a1 + 6) * 0.25) != (float)((float)*((__int16 *)a2 + 6) * 0.25))
      return 0;
  }
  else if ((a1[14] != 0) != (a2[14] != 0))
  {
    return 0;
  }
  if (*((_QWORD *)a1 + 2) != *((_QWORD *)a2 + 2) || *((_QWORD *)a1 + 3) != *((_QWORD *)a2 + 3))
    return 0;
  v5 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a2 + 4);
  if (v5 == v6
    || (result = 0, v5)
    && v6
    && (result = WebCore::FontDescriptionKeyRareData::operator==(*((_QWORD *)a1 + 4), v6), (_DWORD)result))
  {
    result = WebCore::operator==((uint64_t *)a1 + 5, (uint64_t *)a2 + 5);
    if ((_DWORD)result)
    {
      if (a1[52] && a2[52])
      {
        if ((float)((float)*((__int16 *)a1 + 24) * 0.25) != (float)((float)*((__int16 *)a2 + 24) * 0.25)
          || (float)((float)*((__int16 *)a1 + 25) * 0.25) != (float)((float)*((__int16 *)a2 + 25) * 0.25))
        {
          return 0;
        }
      }
      else if ((a1[52] != 0) != (a2[52] != 0))
      {
        return 0;
      }
      if (a1[58] && a2[58])
      {
        if ((float)((float)*((__int16 *)a1 + 27) * 0.25) != (float)((float)*((__int16 *)a2 + 27) * 0.25)
          || (float)((float)*((__int16 *)a1 + 28) * 0.25) != (float)((float)*((__int16 *)a2 + 28) * 0.25))
        {
          return 0;
        }
      }
      else if ((a1[58] != 0) != (a2[58] != 0))
      {
        return 0;
      }
      if (a1[64] && a2[64])
      {
        if ((float)((float)*((__int16 *)a1 + 30) * 0.25) != (float)((float)*((__int16 *)a2 + 30) * 0.25)
          || (float)((float)*((__int16 *)a1 + 31) * 0.25) != (float)((float)*((__int16 *)a2 + 31) * 0.25))
        {
          return 0;
        }
        goto LABEL_34;
      }
      if ((a1[64] != 0) == (a2[64] != 0))
      {
LABEL_34:
        v7 = *((_QWORD *)a1 + 9);
        v8 = *((_QWORD *)a2 + 9);
        if (v7 == v8)
          return 1;
        result = 0;
        if (v7)
        {
          if (v8)
            return WebCore::FontCreationContextRareData::operator==(*((_QWORD *)a1 + 9), v8);
        }
        return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::AcceleratedPropertyWrapper<float>::animationIsAccelerated()
{
  return 1;
}

uint64_t WebCore::Document::updateResizeObservations(WebCore::Document *this, WebCore::Page *a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t i;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WebCore::ResizeObserver *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *j;
  uint64_t v19;
  WebCore::ResizeObserver *v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unsigned int *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  WebCore::Quirks *v27;
  WTF *v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF::StringImpl *v32;

  v4 = *((_QWORD *)this + 86);
  if (!v4)
  {
    v4 = WTF::fastMalloc((WTF *)0x60);
    v24 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v24)
    {
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 + 1, v24));
    }
    *(_QWORD *)v4 = v24;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = 0;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_QWORD *)(v4 + 71) = 0;
    v27 = (WebCore::Quirks *)*((_QWORD *)this + 86);
    *((_QWORD *)this + 86) = v4;
    if (v27)
    {
      WebCore::Quirks::~Quirks(v27, v25);
      WTF::fastFree(v28, v29);
      v4 = *((_QWORD *)this + 86);
    }
  }
  result = WebCore::Quirks::shouldSilenceResizeObservers((WebCore::Quirks *)v4);
  if ((_DWORD)result)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(this, 16, 4, &v32, 0);
    result = (uint64_t)v32;
    v32 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v30);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else if (*((_DWORD *)this + 527) || *((_QWORD *)this + 432) || *((_QWORD *)this + 198))
  {
    for (i = 0; ; i = v11)
    {
      do
      {
        WebCore::Page::layoutIfNeeded((uint64_t)a2, 0);
        result = *((_QWORD *)this + 198);
        if (!result)
          break;
        result = WebCore::ContentVisibilityDocumentState::determineInitialVisibleContentVisibility((WebCore::ContentVisibilityDocumentState *)result, v7);
      }
      while ((result & 1) != 0);
      if (!i)
      {
        result = *((_QWORD *)this + 432);
        if (result)
        {
          result = WebCore::ResizeObserver::gatherObservations((WebCore::ResizeObserver *)result, 0);
          if (result != -1)
            result = (uint64_t)WebCore::Document::deliverResizeObservations(this, v7);
        }
      }
      v8 = *((unsigned int *)this + 527);
      if (!(_DWORD)v8)
        break;
      v9 = *((_QWORD *)this + 262);
      v10 = 8 * v8;
      v11 = -1;
      do
      {
        if (*(_QWORD *)v9)
        {
          v12 = *(WebCore::ResizeObserver **)(*(_QWORD *)v9 + 8);
          if (v12)
          {
            ++*(_DWORD *)v12;
            if (*((_DWORD *)v12 + 13))
            {
              v13 = WebCore::ResizeObserver::gatherObservations(v12, i);
              if (v13 < v11)
                v11 = v13;
            }
            result = (uint64_t)WTF::RefCounted<WebCore::ResizeObserver>::deref(v12, v7);
          }
        }
        v9 += 8;
        v10 -= 8;
      }
      while (v10);
      if (v11 == -1)
      {
        v14 = *((unsigned int *)this + 527);
        if ((_DWORD)v14)
        {
          v15 = (uint64_t *)*((_QWORD *)this + 262);
          v16 = 8 * v14;
          v17 = 8 * v14;
          for (j = v15; !*(_BYTE *)(*(_QWORD *)(*j + 8) + 104); ++j)
          {
            v17 -= 8;
            if (!v17)
              return result;
          }
          do
          {
            v19 = *v15++;
            v20 = *(WebCore::ResizeObserver **)(v19 + 8);
            ++*(_DWORD *)v20;
            *((_BYTE *)v20 + 104) = 0;
            WTF::RefCounted<WebCore::ResizeObserver>::deref(v20, v7);
            v16 -= 8;
          }
          while (v16);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v31 = 0;
          WebCore::ScriptExecutionContext::reportException((WebCore::Document *)((char *)this + 192), (_DWORD **)&v32, 0, 0, (WebCore::Document *)((char *)this + 736), 0, &v31, 0, 0);
          v22 = v31;
          v31 = 0;
          if (v22)
            WTF::RefCounted<Inspector::ScriptCallStack>::deref(v22);
          v23 = v32;
          v32 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v21);
            else
              *(_DWORD *)v23 -= 2;
          }
          return (uint64_t)WebCore::Document::scheduleRenderingUpdate(this, 512);
        }
        return result;
      }
      WebCore::Document::deliverResizeObservations(this, v7);
    }
  }
  return result;
}

uint64_t WebCore::Quirks::shouldSilenceResizeObservers(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  v4 = *(_QWORD *)(v1 + 528);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || !*(_BYTE *)(v7 + 1680))
    return 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v23;
  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v9 = *(_QWORD *)(v9 + 8);
  if (*(_BYTE *)(v9 + 3362) || *(_BYTE *)(v9 + 3405))
  {
    while (1)
    {
      v19 = *(_QWORD *)(v9 + 528);
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 8);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 120);
      if (!v21)
        break;
      v22 = *(_QWORD *)(v21 + 8);
      if (!v22)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)(v22 + 40) + 8);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 528);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 8);
        if (v12)
        {
          if (!*(_BYTE *)(v12 + 144))
          {
            v13 = *(_QWORD *)(v12 + 296);
            if (v13)
              v9 = v13;
          }
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v23, (const WTF::URL *)(v9 + 736));
  v16 = WTF::equal(v23, v8, v14);
  v17 = v23;
  v23 = 0;
  if (!v17)
  {
LABEL_23:
    if (!v8)
      return v16;
    goto LABEL_24;
  }
  if (*(_DWORD *)v17 != 2)
  {
    *(_DWORD *)v17 -= 2;
    goto LABEL_23;
  }
  WTF::StringImpl::destroy(v17, v15);
  if (!v8)
    return v16;
LABEL_24:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v15);
  else
    *(_DWORD *)v8 -= 2;
  return v16;
}

_DWORD **WTF::RefPtr<WebCore::MockContentFilterSettingsClient,WTF::RawPtrTraits<WebCore::MockContentFilterSettingsClient>,WTF::DefaultRefDerefTraits<WebCore::MockContentFilterSettingsClient>>::operator=(_DWORD **a1, _DWORD *a2)
{
  _DWORD *v3;

  if (a2)
    ++a2[2];
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return a1;
}

WebCore::StorageMap *WebCore::StorageMap::StorageMap(WebCore::StorageMap *this, int a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 2) = a2;
  return this;
}

{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 2) = a2;
  return this;
}

void WebCore::realizeNextFallback(WebCore *this, const WebCore::FontCascadeDescription *a2, unsigned int *a3, WebCore::FontSelector *a4)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::String *v17;
  uint64_t v18;
  WebCore::Font *v19;
  WebCore::FontCascadeDescription *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25[4];
  WebCore::FontSelector *v26;
  uint64_t *v27;

  v26 = a4;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(this);
  v9 = *(WTF::StringImpl **)(v8 + 80);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v8);
    v9 = *(WTF::StringImpl **)(v8 + 80);
  }
  v10 = *a3;
  if (v10 >= WebCore::FontCascadeDescription::effectiveFamilyCount(a2))
  {
LABEL_13:
    v15 = *((_QWORD *)a2 + 21);
    v16 = *(unsigned int *)(v15 + 4);
    if ((_DWORD)v16)
    {
      v17 = (const WTF::String *)(v15 + 8);
      v18 = 8 * v16;
      while (1)
      {
        WebCore::FontCache::similarFont(v9, a2, v17, v25);
        if (v25[0])
          break;
        v17 = (const WTF::String *)((char *)v17 + 8);
        v18 -= 8;
        if (!v18)
          goto LABEL_17;
      }
      WebCore::FontRanges::FontRanges((uint64_t)this, v25);
      v19 = (WebCore::Font *)v25[0];
      v25[0] = 0;
      if (v19)
        WTF::RefCounted<WebCore::Font>::deref(v19);
    }
    else
    {
LABEL_17:
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = (char *)this + 16;
      *((_QWORD *)this + 1) = 1;
    }
  }
  else
  {
    while (1)
    {
      v25[0] = (uint64_t)&v26;
      v25[1] = (uint64_t)a2;
      v25[2] = (uint64_t)v9;
      v25[3] = (uint64_t)a2;
      v11 = *a3;
      *a3 = v11 + 1;
      WebCore::FontCascadeDescription::effectiveFamilyAt(a2, v11, &v23);
      if (v24 == -1)
      {
        v20 = (WebCore::FontCascadeDescription *)std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::FontCascadeDescription::effectiveFamilyAt(v20, v21, v22);
        return;
      }
      v27 = v25;
      ((void (*)(uint64_t **, uint64_t *))*(&off_1E340B7F0 + v24))(&v27, &v23);
      if (*((_DWORD *)this + 3))
        break;
      v13 = *(WTF **)this;
      if ((WebCore *)((char *)this + 16) != *(WebCore **)this && v13)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
        WTF::fastFree(v13, v12);
      }
      if (v24 != -1)
        ((void (*)(uint64_t **, uint64_t *))off_1E340B800[v24])(&v27, &v23);
      v14 = *a3;
      if (v14 >= WebCore::FontCascadeDescription::effectiveFamilyCount(a2))
        goto LABEL_13;
    }
    if (v24 != -1)
      ((void (*)(uint64_t **, uint64_t *))off_1E340B800[v24])(&v27, &v23);
  }
}

void WebCore::FontCascadeDescription::effectiveFamilyAt(WebCore::FontCascadeDescription *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::FontCascadeDescription *v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t StatusReg;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFString *v13;
  uint64_t v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF *v20;
  const void *v21;
  uint64_t v22;
  _DWORD *isa;
  _DWORD *v24;
  uint64_t v25;
  WTF *v26;
  int v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v4 = *((_QWORD *)this + 21);
  if (*(_DWORD *)(v4 + 4))
  {
    v6 = this;
    v7 = 0;
    v8 = a3 + 1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v10 = *(_QWORD *)(StatusReg + 736);
      if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
        v11 = WebCore::threadGlobalDataSlow(this);
      v12 = *(_QWORD *)(v11 + 80);
      if (!v12)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v11);
        v12 = *(_QWORD *)(v11 + 80);
      }
      v13 = (__CFString *)(v4 + 8 * v7 + 8);
      this = (WebCore::FontCascadeDescription *)WebCore::SystemFontDatabaseCoreText::matchSystemFontUse((WebCore::SystemFontDatabaseCoreText *)(v12 + 344), v13);
      if ((unsigned __int16)this >= 0x100u)
        break;
      if (!(_DWORD)a2)
      {
        isa = v13->isa;
        if (v13->isa)
          *isa += 2;
        *a3 = isa;
        goto LABEL_34;
      }
      v14 = (a2 - 1);
LABEL_11:
      ++v7;
      v4 = *((_QWORD *)v6 + 21);
      a2 = v14;
      if (v7 >= *(unsigned int *)(v4 + 4))
        goto LABEL_37;
    }
    v15 = this;
    v16 = *((_BYTE *)v6 + 166) & 1;
    v17 = WebCore::SystemFontDatabaseCoreText::forCurrentThread(this);
    WebCore::SystemFontDatabaseCoreText::systemFontParameters((WTF::StringImpl **)v6, (WTF::StringImpl *)v13, v15, v16, (uint64_t)&v29);
    WebCore::SystemFontDatabaseCoreText::cascadeList(v17, (uint64_t)&v29, v15, (uint64_t)&v26);
    v19 = v30;
    v30 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    this = v29;
    v29 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (WebCore::FontCascadeDescription *)WTF::StringImpl::destroy(this, v18);
      else
        *(_DWORD *)this -= 2;
    }
    v25 = v28;
    if (a2 >= v28)
    {
      v20 = v26;
      v14 = a2 - v28;
      if (!v28)
        goto LABEL_27;
    }
    else
    {
      v20 = v26;
      v21 = (const void *)*((_QWORD *)v26 + a2);
      *a3 = v21;
      if (v21)
        CFRetain(v21);
      *v8 = 1;
      v14 = a2;
    }
    v22 = 0;
    do
    {
      this = *(WebCore::FontCascadeDescription **)((char *)v20 + v22);
      *(_QWORD *)((char *)v20 + v22) = 0;
      if (this)
        CFRelease(this);
      v22 += 8;
    }
    while (8 * v25 != v22);
LABEL_27:
    if (v20)
    {
      v26 = 0;
      v27 = 0;
      this = (WebCore::FontCascadeDescription *)WTF::fastFree(v20, v18);
    }
    if (v25 > a2)
      return;
    goto LABEL_11;
  }
LABEL_37:
  v24 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v24 += 2;
  *a3 = v24;
  v8 = a3 + 1;
LABEL_34:
  *v8 = 0;
}

uint64_t WebCore::FontCascadeDescription::effectiveFamilyCount(WebCore::FontCascadeDescription *this)
{
  uint64_t v1;
  WebCore::FontCascadeDescription *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t StatusReg;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  WebCore::FontCascadeDescription *v23;
  WTF *v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v1 = *((_QWORD *)this + 21);
  if (!*(_DWORD *)(v1 + 4))
    return 0;
  v2 = this;
  v3 = 0;
  LODWORD(v4) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v6 = *(_QWORD *)(StatusReg + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(this);
    v8 = *(_QWORD *)(v7 + 80);
    if (!v8)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v7);
      v8 = *(_QWORD *)(v7 + 80);
    }
    v9 = (__CFString *)(v1 + 8 * v3 + 8);
    this = (WebCore::FontCascadeDescription *)WebCore::SystemFontDatabaseCoreText::matchSystemFontUse((WebCore::SystemFontDatabaseCoreText *)(v8 + 344), v9);
    if ((unsigned __int16)this >= 0x100u)
    {
      v11 = this;
      v12 = *((unsigned __int8 *)v2 + 166);
      v13 = *((unsigned __int16 *)v2 + 82);
      v14 = *(_QWORD *)(StatusReg + 736);
      if (!v14 || (this = *(WebCore::FontCascadeDescription **)(v14 + 96)) == 0)
        this = (WebCore::FontCascadeDescription *)WebCore::threadGlobalDataSlow(this);
      v15 = *((_QWORD *)this + 10);
      if (!v15)
      {
        v23 = this;
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)this);
        v15 = *((_QWORD *)v23 + 10);
      }
      v16 = v15 + 344;
      WebCore::SystemFontDatabaseCoreText::systemFontParameters((WTF::StringImpl **)v2, (WTF::StringImpl *)v9, v11, ((v13 | (v12 << 16)) >> 16) & 1, (uint64_t)&v26);
      WebCore::SystemFontDatabaseCoreText::cascadeList(v16, (uint64_t)&v26, v11, (uint64_t)&v24);
      v18 = v27;
      v27 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v17);
        else
          *(_DWORD *)v18 -= 2;
      }
      this = v26;
      v26 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = (WebCore::FontCascadeDescription *)WTF::StringImpl::destroy(this, v17);
        else
          *(_DWORD *)this -= 2;
      }
      v10 = v25;
      v19 = v24;
      if (v25)
      {
        v20 = 8 * v25;
        v21 = v24;
        do
        {
          this = *(WebCore::FontCascadeDescription **)v21;
          *(_QWORD *)v21 = 0;
          if (this)
            CFRelease(this);
          v21 = (WTF *)((char *)v21 + 8);
          v20 -= 8;
        }
        while (v20);
      }
      if (v19)
        this = (WebCore::FontCascadeDescription *)WTF::fastFree(v19, v17);
    }
    else
    {
      v10 = 1;
    }
    v4 = (v10 + v4);
    ++v3;
    v1 = *((_QWORD *)v2 + 21);
  }
  while (v3 < *(unsigned int *)(v1 + 4));
  return v4;
}

uint64_t WebCore::SystemFontDatabaseCoreText::matchSystemFontUse(WebCore::SystemFontDatabaseCoreText *this, const __CFString *a2)
{
  _QWORD *isa;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  const __CFString *v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  const __CFString *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  const WTF::AtomString *v60;
  uint64_t v62[2];
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  isa = a2->isa;
  if (a2->isa)
  {
    switch(*((_DWORD *)isa + 1))
    {
      case 8:
        v21 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v21 & 0xDF) != 0x55
            || (*(_BYTE *)(v21 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v21 + 2) & 0xDF) != 0xD
            || (*(_BYTE *)(v21 + 3) & 0xDF) != 0x53
            || (*(_BYTE *)(v21 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v21 + 5) & 0xDF) != 0x52
            || (*(_BYTE *)(v21 + 6) & 0xDF) != 0x49
            || (*(_BYTE *)(v21 + 7) & 0xDF) != 0x46)
          {
            break;
          }
        }
        else if ((*(_WORD *)v21 & 0xFFDF) != 0x55
               || (*(_WORD *)(v21 + 2) & 0xFFDF) != 0x49
               || (*(_WORD *)(v21 + 4) & 0xFFDF) != 0xD
               || (*(_WORD *)(v21 + 6) & 0xFFDF) != 0x53
               || (*(_WORD *)(v21 + 8) & 0xFFDF) != 0x45
               || (*(_WORD *)(v21 + 10) & 0xFFDF) != 0x52
               || (*(_WORD *)(v21 + 12) & 0xFFDF) != 0x49
               || (*(_WORD *)(v21 + 14) & 0xFFDF) != 0x46)
        {
          break;
        }
        v12 = 1;
        v13 = 1;
        return v12 | (v13 << 8);
      case 9:
        v20 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v20 & 0xDF) != 0x53
            || (*(_BYTE *)(v20 + 1) & 0xDF) != 0x59
            || (*(_BYTE *)(v20 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(v20 + 3) & 0xDF) != 0x54
            || (*(_BYTE *)(v20 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v20 + 5) & 0xDF) != 0x4D
            || (*(_BYTE *)(v20 + 6) & 0xDF) != 0xD
            || (*(_BYTE *)(v20 + 7) & 0xDF) != 0x55
            || (*(_BYTE *)(v20 + 8) & 0xDF) != 0x49)
          {
            break;
          }
          goto LABEL_81;
        }
        if ((*(_WORD *)v20 & 0xFFDF) == 0x53
          && (*(_WORD *)(v20 + 2) & 0xFFDF) == 0x59
          && (*(_WORD *)(v20 + 4) & 0xFFDF) == 0x53
          && (*(_WORD *)(v20 + 6) & 0xFFDF) == 0x54
          && (*(_WORD *)(v20 + 8) & 0xFFDF) == 0x45
          && (*(_WORD *)(v20 + 10) & 0xFFDF) == 0x4D
          && (*(_WORD *)(v20 + 12) & 0xFFDF) == 0xD
          && (*(_WORD *)(v20 + 14) & 0xFFDF) == 0x55
          && (*(_WORD *)(v20 + 16) & 0xFFDF) == 0x49)
        {
          goto LABEL_81;
        }
        break;
      case 0xA:
        v23 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v23 & 0xDF) != 0x55
            || (*(_BYTE *)(v23 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v23 + 2) & 0xDF) != 0xD
            || (*(_BYTE *)(v23 + 3) & 0xDF) != 0x52
            || (*(_BYTE *)(v23 + 4) & 0xDF) != 0x4F
            || (*(_BYTE *)(v23 + 5) & 0xDF) != 0x55
            || (*(_BYTE *)(v23 + 6) & 0xDF) != 0x4E
            || (*(_BYTE *)(v23 + 7) & 0xDF) != 0x44
            || (*(_BYTE *)(v23 + 8) & 0xDF) != 0x45
            || (*(_BYTE *)(v23 + 9) & 0xDF) != 0x44)
          {
            break;
          }
        }
        else if ((*(_WORD *)v23 & 0xFFDF) != 0x55
               || (*(_WORD *)(v23 + 2) & 0xFFDF) != 0x49
               || (*(_WORD *)(v23 + 4) & 0xFFDF) != 0xD
               || (*(_WORD *)(v23 + 6) & 0xFFDF) != 0x52
               || (*(_WORD *)(v23 + 8) & 0xFFDF) != 0x4F
               || (*(_WORD *)(v23 + 10) & 0xFFDF) != 0x55
               || (*(_WORD *)(v23 + 12) & 0xFFDF) != 0x4E
               || (*(_WORD *)(v23 + 14) & 0xFFDF) != 0x44
               || (*(_WORD *)(v23 + 16) & 0xFFDF) != 0x45
               || (*(_WORD *)(v23 + 18) & 0xFFDF) != 0x44)
        {
          break;
        }
        v13 = 1;
        v12 = 3;
        return v12 | (v13 << 8);
      case 0xC:
        v22 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v22 & 0xDF) != 0x55
            || (*(_BYTE *)(v22 + 1) & 0xDF) != 0x49
            || (*(_BYTE *)(v22 + 2) & 0xDF) != 0xD
            || (*(_BYTE *)(v22 + 3) & 0xDF) != 0x4D
            || (*(_BYTE *)(v22 + 4) & 0xDF) != 0x4F
            || (*(_BYTE *)(v22 + 5) & 0xDF) != 0x4E
            || (*(_BYTE *)(v22 + 6) & 0xDF) != 0x4F
            || (*(_BYTE *)(v22 + 7) & 0xDF) != 0x53
            || (*(_BYTE *)(v22 + 8) & 0xDF) != 0x50
            || (*(_BYTE *)(v22 + 9) & 0xDF) != 0x41
            || (*(_BYTE *)(v22 + 10) & 0xDF) != 0x43
            || (*(_BYTE *)(v22 + 11) & 0xDF) != 0x45)
          {
            break;
          }
        }
        else if ((*(_WORD *)v22 & 0xFFDF) != 0x55
               || (*(_WORD *)(v22 + 2) & 0xFFDF) != 0x49
               || (*(_WORD *)(v22 + 4) & 0xFFDF) != 0xD
               || (*(_WORD *)(v22 + 6) & 0xFFDF) != 0x4D
               || (*(_WORD *)(v22 + 8) & 0xFFDF) != 0x4F
               || (*(_WORD *)(v22 + 10) & 0xFFDF) != 0x4E
               || (*(_WORD *)(v22 + 12) & 0xFFDF) != 0x4F
               || (*(_WORD *)(v22 + 14) & 0xFFDF) != 0x53
               || (*(_WORD *)(v22 + 16) & 0xFFDF) != 0x50
               || (*(_WORD *)(v22 + 18) & 0xFFDF) != 0x41
               || (*(_WORD *)(v22 + 20) & 0xFFDF) != 0x43
               || (*(_WORD *)(v22 + 22) & 0xFFDF) != 0x45)
        {
          break;
        }
        v13 = 1;
        v12 = 2;
        return v12 | (v13 << 8);
      case 0xD:
        v17 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          v18 = *(_BYTE *)v17 & 0xDF;
          if (v18 == 13)
          {
            if ((*(_BYTE *)(v17 + 1) & 0xDF) == 0x41
              && (*(_BYTE *)(v17 + 2) & 0xDF) == 0x50
              && (*(_BYTE *)(v17 + 3) & 0xDF) == 0x50
              && (*(_BYTE *)(v17 + 4) & 0xDF) == 0x4C
              && (*(_BYTE *)(v17 + 5) & 0xDF) == 0x45
              && (*(_BYTE *)(v17 + 6) & 0xDF) == 0xD
              && (*(_BYTE *)(v17 + 7) & 0xDF) == 0x53
              && (*(_BYTE *)(v17 + 8) & 0xDF) == 0x59
              && (*(_BYTE *)(v17 + 9) & 0xDF) == 0x53
              && (*(_BYTE *)(v17 + 10) & 0xDF) == 0x54
              && (*(_BYTE *)(v17 + 11) & 0xDF) == 0x45
              && (*(_BYTE *)(v17 + 12) & 0xDF) == 0x4D)
            {
              goto LABEL_81;
            }
          }
          else if (v18 == 85
                 && (*(_BYTE *)(v17 + 1) & 0xDF) == 0x49
                 && (*(_BYTE *)(v17 + 2) & 0xDF) == 0xD
                 && (*(_BYTE *)(v17 + 3) & 0xDF) == 0x53
                 && (*(_BYTE *)(v17 + 4) & 0xDF) == 0x41
                 && (*(_BYTE *)(v17 + 5) & 0xDF) == 0x4E
                 && (*(_BYTE *)(v17 + 6) & 0xDF) == 0x53
                 && (*(_BYTE *)(v17 + 7) & 0xDF) == 0xD
                 && (*(_BYTE *)(v17 + 8) & 0xDF) == 0x53
                 && (*(_BYTE *)(v17 + 9) & 0xDF) == 0x45
                 && (*(_BYTE *)(v17 + 10) & 0xDF) == 0x52
                 && (*(_BYTE *)(v17 + 11) & 0xDF) == 0x49
                 && (*(_BYTE *)(v17 + 12) & 0xDF) == 0x46)
          {
            goto LABEL_81;
          }
        }
        else
        {
          v59 = *(_WORD *)v17 & 0xFFDF;
          if (v59 == 13)
          {
            if ((*(_WORD *)(v17 + 2) & 0xFFDF) == 0x41
              && (*(_WORD *)(v17 + 4) & 0xFFDF) == 0x50
              && (*(_WORD *)(v17 + 6) & 0xFFDF) == 0x50
              && (*(_WORD *)(v17 + 8) & 0xFFDF) == 0x4C
              && (*(_WORD *)(v17 + 10) & 0xFFDF) == 0x45
              && (*(_WORD *)(v17 + 12) & 0xFFDF) == 0xD
              && (*(_WORD *)(v17 + 14) & 0xFFDF) == 0x53
              && (*(_WORD *)(v17 + 16) & 0xFFDF) == 0x59
              && (*(_WORD *)(v17 + 18) & 0xFFDF) == 0x53
              && (*(_WORD *)(v17 + 20) & 0xFFDF) == 0x54
              && (*(_WORD *)(v17 + 22) & 0xFFDF) == 0x45
              && (*(_WORD *)(v17 + 24) & 0xFFDF) == 0x4D)
            {
              goto LABEL_81;
            }
          }
          else if (v59 == 85
                 && (*(_WORD *)(v17 + 2) & 0xFFDF) == 0x49
                 && (*(_WORD *)(v17 + 4) & 0xFFDF) == 0xD
                 && (*(_WORD *)(v17 + 6) & 0xFFDF) == 0x53
                 && (*(_WORD *)(v17 + 8) & 0xFFDF) == 0x41
                 && (*(_WORD *)(v17 + 10) & 0xFFDF) == 0x4E
                 && (*(_WORD *)(v17 + 12) & 0xFFDF) == 0x53
                 && (*(_WORD *)(v17 + 14) & 0xFFDF) == 0xD
                 && (*(_WORD *)(v17 + 16) & 0xFFDF) == 0x53
                 && (*(_WORD *)(v17 + 18) & 0xFFDF) == 0x45
                 && (*(_WORD *)(v17 + 20) & 0xFFDF) == 0x52
                 && (*(_WORD *)(v17 + 22) & 0xFFDF) == 0x49
                 && (*(_WORD *)(v17 + 24) & 0xFFDF) == 0x46)
          {
            goto LABEL_81;
          }
        }
        break;
      case 0x12:
        v19 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v19 & 0xDF) == 0xD
            && (*(_BYTE *)(v19 + 1) & 0xDF) == 0x41
            && (*(_BYTE *)(v19 + 2) & 0xDF) == 0x50
            && (*(_BYTE *)(v19 + 3) & 0xDF) == 0x50
            && (*(_BYTE *)(v19 + 4) & 0xDF) == 0x4C
            && (*(_BYTE *)(v19 + 5) & 0xDF) == 0x45
            && (*(_BYTE *)(v19 + 6) & 0xDF) == 0xD
            && (*(_BYTE *)(v19 + 7) & 0xDF) == 0x53
            && (*(_BYTE *)(v19 + 8) & 0xDF) == 0x59
            && (*(_BYTE *)(v19 + 9) & 0xDF) == 0x53
            && (*(_BYTE *)(v19 + 10) & 0xDF) == 0x54
            && (*(_BYTE *)(v19 + 11) & 0xDF) == 0x45
            && (*(_BYTE *)(v19 + 12) & 0xDF) == 0x4D
            && (*(_BYTE *)(v19 + 13) & 0xDF) == 0xD
            && (*(_BYTE *)(v19 + 14) & 0xDF) == 0x46
            && (*(_BYTE *)(v19 + 15) & 0xDF) == 0x4F
            && (*(_BYTE *)(v19 + 16) & 0xDF) == 0x4E
            && (*(_BYTE *)(v19 + 17) & 0xDF) == 0x54)
          {
            goto LABEL_81;
          }
        }
        else if ((*(_WORD *)v19 & 0xFFDF) == 0xD
               && (*(_WORD *)(v19 + 2) & 0xFFDF) == 0x41
               && (*(_WORD *)(v19 + 4) & 0xFFDF) == 0x50
               && (*(_WORD *)(v19 + 6) & 0xFFDF) == 0x50
               && (*(_WORD *)(v19 + 8) & 0xFFDF) == 0x4C
               && (*(_WORD *)(v19 + 10) & 0xFFDF) == 0x45
               && (*(_WORD *)(v19 + 12) & 0xFFDF) == 0xD
               && (*(_WORD *)(v19 + 14) & 0xFFDF) == 0x53
               && (*(_WORD *)(v19 + 16) & 0xFFDF) == 0x59
               && (*(_WORD *)(v19 + 18) & 0xFFDF) == 0x53
               && (*(_WORD *)(v19 + 20) & 0xFFDF) == 0x54
               && (*(_WORD *)(v19 + 22) & 0xFFDF) == 0x45
               && (*(_WORD *)(v19 + 24) & 0xFFDF) == 0x4D
               && (*(_WORD *)(v19 + 26) & 0xFFDF) == 0xD
               && (*(_WORD *)(v19 + 28) & 0xFFDF) == 0x46
               && (*(_WORD *)(v19 + 30) & 0xFFDF) == 0x4F
               && (*(_WORD *)(v19 + 32) & 0xFFDF) == 0x4E
               && (*(_WORD *)(v19 + 34) & 0xFFDF) == 0x54)
        {
          goto LABEL_81;
        }
        break;
      case 0x13:
        v15 = isa[1];
        if ((isa[2] & 4) != 0)
        {
          if ((*(_BYTE *)v15 & 0xDF) != 0xD
            || (*(_BYTE *)(v15 + 1) & 0xDF) != 0x57
            || (*(_BYTE *)(v15 + 2) & 0xDF) != 0x45
            || (*(_BYTE *)(v15 + 3) & 0xDF) != 0x42
            || (*(_BYTE *)(v15 + 4) & 0xDF) != 0x4B
            || (*(_BYTE *)(v15 + 5) & 0xDF) != 0x49
            || (*(_BYTE *)(v15 + 6) & 0xDF) != 0x54
            || (*(_BYTE *)(v15 + 7) & 0xDF) != 0xD
            || (*(_BYTE *)(v15 + 8) & 0xDF) != 0x53
            || (*(_BYTE *)(v15 + 9) & 0xDF) != 0x59
            || (*(_BYTE *)(v15 + 10) & 0xDF) != 0x53
            || (*(_BYTE *)(v15 + 11) & 0xDF) != 0x54
            || (*(_BYTE *)(v15 + 12) & 0xDF) != 0x45
            || (*(_BYTE *)(v15 + 13) & 0xDF) != 0x4D
            || (*(_BYTE *)(v15 + 14) & 0xDF) != 0xD
            || (*(_BYTE *)(v15 + 15) & 0xDF) != 0x46
            || (*(_BYTE *)(v15 + 16) & 0xDF) != 0x4F
            || (*(_BYTE *)(v15 + 17) & 0xDF) != 0x4E)
          {
            break;
          }
          v16 = *(unsigned __int8 *)(v15 + 18);
        }
        else
        {
          if ((*(_WORD *)v15 & 0xFFDF) != 0xD
            || (*(_WORD *)(v15 + 2) & 0xFFDF) != 0x57
            || (*(_WORD *)(v15 + 4) & 0xFFDF) != 0x45
            || (*(_WORD *)(v15 + 6) & 0xFFDF) != 0x42
            || (*(_WORD *)(v15 + 8) & 0xFFDF) != 0x4B
            || (*(_WORD *)(v15 + 10) & 0xFFDF) != 0x49
            || (*(_WORD *)(v15 + 12) & 0xFFDF) != 0x54
            || (*(_WORD *)(v15 + 14) & 0xFFDF) != 0xD
            || (*(_WORD *)(v15 + 16) & 0xFFDF) != 0x53
            || (*(_WORD *)(v15 + 18) & 0xFFDF) != 0x59
            || (*(_WORD *)(v15 + 20) & 0xFFDF) != 0x53
            || (*(_WORD *)(v15 + 22) & 0xFFDF) != 0x54
            || (*(_WORD *)(v15 + 24) & 0xFFDF) != 0x45
            || (*(_WORD *)(v15 + 26) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v15 + 28) & 0xFFDF) != 0xD
            || (*(_WORD *)(v15 + 30) & 0xFFDF) != 0x46
            || (*(_WORD *)(v15 + 32) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v15 + 34) & 0xFFDF) != 0x4E)
          {
            break;
          }
          v16 = *(unsigned __int16 *)(v15 + 36);
        }
        if ((v16 & 0xFFFFFFDF) != 0x54)
          break;
LABEL_81:
        v12 = 0;
        v13 = 1;
        return v12 | (v13 << 8);
      default:
        break;
    }
  }
  v3 = (_QWORD *)((char *)this + 752);
  v4 = *((unsigned int *)this + 191);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)*v3;
  }
  else
  {
    v60 = (const WTF::AtomString *)a2;
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8650], a2);
    v63 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8620], v24);
    v64 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA86A0], v25);
    v65 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA86A8], v26);
    v66 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA86B0], v27);
    v67 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8688], v28);
    v68 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8640], v29);
    v69 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8630], v30);
    v70 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8638], v31);
    v71 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8678], v32);
    v72 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8660], v33);
    v73 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8680], v34);
    v74 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8670], v35);
    v75 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8668], v36);
    v76 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8690], v37);
    v77 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA8698], v38);
    v78 = (WTF::StringImpl *)v62[0];
    WTF::AtomStringImpl::add((WTF::AtomStringImpl *)*MEMORY[0x1E0CA86B8], v39);
    v79 = (WTF::StringImpl *)v62[0];
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v62, (_DWORD **)&v63, 0x11uLL);
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v3, v62);
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v62, v40);
    v42 = v79;
    v79 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = v78;
    v78 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, v41);
      else
        *(_DWORD *)v43 -= 2;
    }
    v44 = v77;
    v77 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v41);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v76;
    v76 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
        WTF::StringImpl::destroy(v45, v41);
      else
        *(_DWORD *)v45 -= 2;
    }
    v46 = v75;
    v75 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v41);
      else
        *(_DWORD *)v46 -= 2;
    }
    v47 = v74;
    v74 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v41);
      else
        *(_DWORD *)v47 -= 2;
    }
    v48 = v73;
    v73 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v41);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = v72;
    v72 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v41);
      else
        *(_DWORD *)v49 -= 2;
    }
    v50 = v71;
    v71 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v41);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = v70;
    v70 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v41);
      else
        *(_DWORD *)v51 -= 2;
    }
    v52 = v69;
    v69 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
        WTF::StringImpl::destroy(v52, v41);
      else
        *(_DWORD *)v52 -= 2;
    }
    v53 = v68;
    v68 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v41);
      else
        *(_DWORD *)v53 -= 2;
    }
    v54 = v67;
    v67 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
        WTF::StringImpl::destroy(v54, v41);
      else
        *(_DWORD *)v54 -= 2;
    }
    v55 = v66;
    v66 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v41);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = v65;
    v65 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v41);
      else
        *(_DWORD *)v56 -= 2;
    }
    v57 = v64;
    v64 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v41);
      else
        *(_DWORD *)v57 -= 2;
    }
    v58 = v63;
    v63 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v41);
      else
        *(_DWORD *)v58 -= 2;
    }
    std::sort[abi:sn180100]<WTF::AtomString *,WebCore::SystemFontDatabaseCoreText::matchSystemFontUse(WTF::AtomString const&)::$_0>(*((_QWORD *)this + 94), (WTF::StringImpl *)(*((_QWORD *)this + 94) + 8 * *((unsigned int *)this + 191)));
    v4 = *((unsigned int *)this + 191);
    if (!(_DWORD)v4)
      goto LABEL_11;
    a2 = (const __CFString *)v60;
    v5 = (_QWORD *)*((_QWORD *)this + 94);
  }
  v6 = &v5[v4];
  v7 = a2->isa;
  do
  {
    v8 = v4 >> 1;
    v9 = &v5[v4 >> 1];
    v11 = *v9;
    v10 = v9 + 1;
    v4 += ~(v4 >> 1);
    if (v11 < (unint64_t)v7)
      v5 = v10;
    else
      v4 = v8;
  }
  while (v4);
  if (v5 != v6 && *v5 <= (unint64_t)v7)
  {
    v13 = 1;
    v12 = 4;
    return v12 | (v13 << 8);
  }
LABEL_11:
  v12 = 0;
  v13 = 0;
  return v12 | (v13 << 8);
}

WTF::StringImpl *WebCore::CSSFontSelector::fontRangesForFamily@<X0>(WebCore::CSSFontSelector *this@<X0>, const WebCore::FontDescription *a2@<X1>, WTF::StringImpl **a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  WTF *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::Thread *v28;
  WTF::MonotonicTime *v29;
  double v30;
  const WebCore::FontPlatformData *v31;
  void *v32;
  WTF **v33;
  WTF *v34;
  WebCore::FontFeatureValues *v35;
  WTF *v36;
  void *v37;
  _QWORD *v38;
  WTF *v39;
  int v40;
  WTF::StringImpl *result;
  WTF *v42;
  uint64_t v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void *v60;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  WebCore::FontFeatureValues *v64;
  __int128 v65;
  char v66;
  WTF *v67;
  uint64_t v68;
  _DWORD *v69;
  __int128 v70;
  uint64_t v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF **v74;

  if (*((_DWORD *)this + 47) <= 6u)
  {
    __break(0xC471u);
    JUMPOUT(0x194371690);
  }
  v8 = *a3;
  v9 = *(WTF::StringImpl **)(*((_QWORD *)this + 22) + 48);
  if (*a3)
    *(_DWORD *)v8 += 2;
  v73 = v8;
  v10 = *((unsigned __int8 *)a2 + 104);
  if ((_MergedGlobals_160 & 1) == 0)
  {
    xmmword_1ECE82918[1] = 0u;
    xmmword_1ECE82918[0] = 0u;
    _MergedGlobals_160 = 1;
  }
  v11 = (uint64_t *)xmmword_1ECE82918;
  if (v10 == 3)
  {
    v50 = (WTF::StringImpl *)*((_QWORD *)a2 + 14);
    if (v50)
      *(_DWORD *)v50 += 2;
    v51 = *a3;
    if (*a3)
      *(_DWORD *)v51 += 2;
    *(_QWORD *)&v70 = v51;
    if (v50)
      *(_DWORD *)v50 += 2;
    *((_QWORD *)&v70 + 1) = v50;
    v52 = WTF::HashMap<std::pair<WTF::AtomString,WTF::AtomString>,WebCore::FontPaletteValues,WebCore::CSSFontSelector::PaletteMapHash,WTF::HashTraits<std::pair<WTF::AtomString,WTF::AtomString>>,WTF::HashTraits<WebCore::FontPaletteValues>,WTF::HashTableTraits>::find(*((_QWORD *)this + 14), (uint64_t)v51, (uint64_t)v50);
    WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair((WTF::StringImpl **)&v70, v53);
    v55 = (uint64_t *)*((_QWORD *)this + 14);
    if (v55)
      v55 += 6 * *((unsigned int *)v55 - 1);
    if (v55 != v52)
      v11 = v52 + 2;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v54);
      else
        *(_DWORD *)v50 -= 2;
    }
  }
  WTF::String::convertToLowercaseWithoutLocale((WTF::String *)a3);
  v14 = (WTF *)*((_QWORD *)this + 15);
  if (!v14)
    goto LABEL_8;
  v56 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v14, (WTF::StringImpl **)&v70, v13);
  v57 = *((_QWORD *)this + 15);
  if (!v56)
  {
    if (!v57)
      goto LABEL_8;
    v63 = *(unsigned int *)(v57 - 4);
    v56 = (WTF *)(v57 + 16 * v63);
LABEL_132:
    if (v56 != (WTF *)(v57 + 16 * v63))
      goto LABEL_108;
LABEL_8:
    v15 = 0;
    goto LABEL_9;
  }
  if (v57)
  {
    v63 = *(unsigned int *)(v57 - 4);
    goto LABEL_132;
  }
LABEL_108:
  v15 = (_DWORD *)*((_QWORD *)v56 + 1);
  ++v15[2];
LABEL_9:
  v16 = (WTF::StringImpl *)v70;
  *(_QWORD *)&v70 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v8 == v9
    && (WebCore::CSSFontSelector::resolveGenericFamily((WebCore::CSSFontSelector *)&v70, this, a2, (uint64_t *)a3),
        BYTE8(v70)))
  {
    v46 = (WTF::StringImpl *)v70;
    if ((_QWORD)v70)
      *(_DWORD *)v70 += 2;
    v47 = v73;
    v73 = v46;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, v45);
      else
        *(_DWORD *)v47 -= 2;
    }
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v45);
      else
        *(_DWORD *)v46 -= 2;
    }
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  v18 = *((_QWORD *)this + 10);
  if (v18 && (v19 = *(_QWORD *)(v18 + 8)) != 0)
  {
    v20 = *(_BYTE *)(v19 + 178);
    v21 = v19 - 288;
    if (v20)
      v22 = 0;
    else
      v22 = v21;
  }
  else
  {
    v22 = 0;
  }
  v23 = WebCore::CSSFontFaceSet::fontFace(*((_QWORD *)this + 12), *((_QWORD *)a2 + 18), (WTF::ASCIICaseInsensitiveHash *)&v73);
  if (v23)
  {
    v58 = (uint64_t)v23;
    if (v22 && (*(_QWORD *)(*(_QWORD *)(v22 + 680) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v59 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v59 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      (*(void (**)(uint64_t *, uint64_t, WTF::StringImpl **, uint64_t))(*v59 + 40))(v59, v22, &v73, 1);
    }
    if (v15)
      ++v15[2];
    v69 = v15;
    WebCore::CSSSegmentedFontFace::fontRanges(v58, (uint64_t)a2, v11, &v69, (uint64_t)&v70);
    WebCore::FontRanges::FontRanges(a4, (uint64_t)&v70, v17);
    WebCore::FontRanges::~FontRanges((WTF **)&v70, v60);
    v61 = v69;
    v69 = 0;
    if (v61)
    {
      if (v61[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
      else
        --v61[2];
    }
  }
  else
  {
    if (v8 != v9)
    {
      v23 = WebCore::CSSFontSelector::resolveGenericFamily((WebCore::CSSFontSelector *)&v70, this, a2, (uint64_t *)a3);
      if (BYTE8(v70))
      {
        v25 = (WTF::StringImpl *)v70;
        if ((_QWORD)v70)
          *(_DWORD *)v70 += 2;
        v23 = v73;
        v73 = v25;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v24);
          else
            *(_DWORD *)v23 -= 2;
        }
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v25, v24);
          else
            *(_DWORD *)v25 -= 2;
        }
        v17 = 1;
      }
    }
    v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
      v27 = WebCore::threadGlobalDataSlow(v23);
    v28 = *(WTF::Thread **)(v27 + 80);
    if (!v28)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v27);
      v28 = *(WTF::Thread **)(v27 + 80);
    }
    v67 = 0;
    v68 = 0;
    LOBYTE(v65) = 0;
    BYTE4(v65) = 0;
    BYTE6(v65) = 0;
    BYTE10(v65) = 0;
    BYTE12(v65) = 0;
    v66 = 0;
    if (v15)
      ++v15[2];
    v64 = (WebCore::FontFeatureValues *)v15;
    v29 = (WTF::MonotonicTime *)WebCore::FontCreationContext::FontCreationContext((uint64_t)&v70, (uint64_t)&v67, &v65, (uint64_t)v11, &v64, 1.0);
    if ((*((_QWORD *)v28 + 4) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*((_QWORD *)v28 + 4) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      *((_QWORD *)v28 + 3) = 0;
      WTF::MonotonicTime::now(v29);
      WebCore::TimerBase::setNextFireTime((uint64_t)v28, v30 + 0.0);
    }
    v31 = (const WebCore::FontPlatformData *)WebCore::FontCache::cachedFontPlatformData(v28, a2, &v73, &v70, 0);
    if (v31)
    {
      WebCore::FontCache::fontForPlatformData(v28, v31, &v74);
      v33 = v74;
    }
    else
    {
      v33 = 0;
    }
    v74 = v33;
    v34 = v72;
    v72 = 0;
    if (v34)
      WTF::RefCounted<WebCore::FontCreationContextRareData>::deref((uint64_t)v34, v32);
    v35 = v64;
    v64 = 0;
    if (v35)
    {
      if (*((_DWORD *)v35 + 2) == 1)
        (*(void (**)(WebCore::FontFeatureValues *))(*(_QWORD *)v35 + 8))(v35);
      else
        --*((_DWORD *)v35 + 2);
    }
    v36 = v67;
    if (v67)
    {
      v67 = 0;
      LODWORD(v68) = 0;
      WTF::fastFree(v36, v32);
    }
    if (v22 && (*(_QWORD *)(*(_QWORD *)(v22 + 680) + 704) & 0x4000) != 0)
    {
      {
        WebCore::ResourceLoadObserver::shared(void)::emptyObserver = (uint64_t)off_1E33F6E78;
      }
      if (WebCore::sharedObserver(void)::observer)
        v62 = (uint64_t *)WebCore::sharedObserver(void)::observer;
      else
        v62 = &WebCore::ResourceLoadObserver::shared(void)::emptyObserver;
      (*(void (**)(uint64_t *, uint64_t, WTF::StringImpl **, BOOL))(*v62 + 40))(v62, v22, &v73, v33 != 0);
    }
    WebCore::FontRanges::FontRanges((uint64_t)&v70, (uint64_t *)&v74);
    v38 = (_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 1;
    v39 = (WTF *)v70;
    if ((uint64_t *)v70 == &v71)
    {
      if (HIDWORD(v70))
      {
        v42 = (WTF *)(v70 + 16 * HIDWORD(v70));
        do
        {
          *v38 = *(_QWORD *)v39;
          v43 = *((_QWORD *)v39 + 1);
          *((_QWORD *)v39 + 1) = 0;
          v38[1] = v43;
          v44 = (_DWORD *)*((_QWORD *)v39 + 1);
          *((_QWORD *)v39 + 1) = 0;
          if (v44)
          {
            if (v44[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
            else
              --v44[2];
          }
          v39 = (WTF *)((char *)v39 + 16);
          v38 += 2;
        }
        while (v39 != v42);
        v39 = (WTF *)v70;
      }
      v40 = HIDWORD(v70);
      HIDWORD(v70) = 0;
      *(_DWORD *)(a4 + 12) = v40;
      *(_BYTE *)(a4 + 32) = v17;
      if (&v71 != (uint64_t *)v39 && v39)
      {
        *(_QWORD *)&v70 = 0;
        DWORD2(v70) = 0;
        WTF::fastFree(v39, v37);
      }
    }
    else
    {
      *(_OWORD *)a4 = v70;
      *(_BYTE *)(a4 + 32) = v17;
    }
    if (v74)
    {
      if (*(_DWORD *)v74 == 1)
      {
        WebCore::Font::~Font(v74);
        WTF::fastFree(v48, v49);
      }
      else
      {
        --*(_DWORD *)v74;
      }
    }
  }
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v37);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FontCreationContext::FontCreationContext(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, WebCore::FontFeatureValues **a5, float a6)
{
  __int128 v7;
  BOOL v8;
  BOOL isEmpty;
  WebCore::FontFeatureValues *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WebCore::FontFeatureValues *v18;
  WebCore::FontFeatureValues **v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::FontFeatureValues *v23;
  uint64_t v24;

  v7 = *a3;
  *(_WORD *)(a1 + 16) = *((_WORD *)a3 + 8);
  *(_OWORD *)a1 = v7;
  *(_QWORD *)(a1 + 24) = 0;
  if (*(_DWORD *)(a2 + 12))
    v8 = 0;
  else
    v8 = *(_BYTE *)(a4 + 8) == 0;
  if (v8 && *(_DWORD *)(a4 + 28) == 0)
  {
    if (!*a5)
    {
      if (a6 == 1.0)
        return a1;
      v12 = 0;
      goto LABEL_16;
    }
    v21 = a2;
    v22 = a4;
    v20 = a6;
    v19 = a5;
    isEmpty = WebCore::FontFeatureValues::isEmpty(*a5);
    a5 = v19;
    a2 = v21;
    a4 = v22;
    a6 = v20;
    if (v20 == 1.0 && isEmpty)
      return a1;
  }
  v12 = *a5;
  if (*a5)
    ++*((_DWORD *)v12 + 2);
LABEL_16:
  v23 = v12;
  WebCore::FontCreationContextRareData::create(a2, (uint64_t *)a4, (uint64_t *)&v23, &v24, a6);
  v14 = v24;
  v24 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v14;
  if (v15)
  {
    WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v15, v13);
    v17 = v24;
    v24 = 0;
    if (v17)
      WTF::RefCounted<WebCore::FontCreationContextRareData>::deref(v17, v16);
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    if (*((_DWORD *)v18 + 2) == 1)
      (*(void (**)(WebCore::FontFeatureValues *))(*(_QWORD *)v18 + 8))(v18);
    else
      --*((_DWORD *)v18 + 2);
  }
  return a1;
}

void WebCore::FontRanges::~FontRanges(WTF **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *v8;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v7 = (_DWORD **)((char *)*this + 8);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  v4 = *this;
  if (this + 2 != (WTF **)*this && v4 != 0)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF::StringImpl *WebCore::CSSFontSelector::resolveGenericFamily(WebCore::CSSFontSelector *this, const WebCore::FontDescription *a2, const WTF::AtomString *a3, uint64_t *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[2];

  result = WebCore::FontDescription::platformResolveGenericFamily((WebCore::SystemFontDatabaseCoreText *)((*((_DWORD *)a3 + 40) >> 6) & 0x7F), (WTF::StringImpl **)a3 + 16, a4, v18);
  if (v18[0])
  {
    *(WTF::StringImpl **)this = v18[0];
    *((_BYTE *)this + 8) = 1;
  }
  else
  {
    v10 = *((_QWORD *)a2 + 10);
    if (v10
      && (v11 = *(_QWORD *)(v10 + 8)) != 0
      && (v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 136))(v11 - 96),
          v13 = *((unsigned int *)a2 + 47),
          (_DWORD)v13))
    {
      v14 = 0;
      v9 = (WTF::StringImpl *)((*((_DWORD *)a3 + 40) >> 6) & 0x7F);
      while (*(_QWORD *)(*((_QWORD *)a2 + 22) + 8 * v14) != *a4)
      {
        if (v13 == ++v14)
          goto LABEL_8;
      }
      if ((_DWORD)v14 != 6)
      {
        switch((int)v14)
        {
          case 0:
            v16 = (WTF *)(v12 + 56);
            goto LABEL_15;
          case 1:
            v16 = (WTF *)(v12 + 64);
            goto LABEL_15;
          case 2:
            v16 = (WTF *)(v12 + 40);
            goto LABEL_15;
          case 3:
            v16 = (WTF *)(v12 + 72);
            goto LABEL_15;
          case 4:
            v16 = (WTF *)(v12 + 48);
            goto LABEL_15;
          case 5:
            v16 = (WTF *)(v12 + 32);
            goto LABEL_15;
          default:
            goto LABEL_8;
        }
      }
      v16 = (WTF *)(v12 + 24);
LABEL_15:
      v17 = *(WTF::StringImpl **)WebCore::genericFontFamilyForScript(v16, (int)v9);
      if (v17)
      {
        if ((*((_BYTE *)v17 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v17 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v17, v9);
          v17 = v18[1];
        }
      }
      *(_QWORD *)this = v17;
      v15 = 1;
    }
    else
    {
LABEL_8:
      v15 = 0;
      *(_BYTE *)this = 0;
    }
    *((_BYTE *)this + 8) = v15;
    result = v18[0];
    v18[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WebCore::SystemFontDatabaseCoreText *WebCore::FontDescription::platformResolveGenericFamily@<X0>(WebCore::SystemFontDatabaseCoreText *result@<X0>, WTF::StringImpl **a2@<X1>, uint64_t *a3@<X2>, WTF::StringImpl **a4@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::SystemFontDatabaseCoreText *v11;
  WTF::StringImpl *v12;
  WebCore::SystemFontDatabaseCoreText *v13;
  WebCore::SystemFontDatabaseCoreText *v14;
  WebCore::SystemFontDatabaseCoreText *v15;
  WTF::StringImpl *v16;
  WebCore::SystemFontDatabaseCoreText *v17;
  WTF::StringImpl *v18;

  if (!(_DWORD)result)
  {
LABEL_7:
    v7 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v7 += 2;
    *a4 = v7;
    return result;
  }
  v6 = *a3;
  if (*a3 == WebCore::WebKitFontFamilyNames::serifFamily)
  {
    v13 = (WebCore::SystemFontDatabaseCoreText *)WebCore::SystemFontDatabaseCoreText::forCurrentThread(result);
    WebCore::SystemFontDatabaseCoreText::serifFamily(v13, a2, &v18);
LABEL_18:
    WTF::AtomString::AtomString(a4, &v18);
    result = v18;
    v18 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WebCore::SystemFontDatabaseCoreText *)WTF::StringImpl::destroy(result, v12);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  if (v6 != WebCore::WebKitFontFamilyNames::sansSerifFamily)
  {
    if (v6 == WebCore::WebKitFontFamilyNames::cursiveFamily)
    {
      v14 = (WebCore::SystemFontDatabaseCoreText *)WebCore::SystemFontDatabaseCoreText::forCurrentThread(result);
      WebCore::SystemFontDatabaseCoreText::cursiveFamily(v14, a2, &v18);
    }
    else if (v6 == WebCore::WebKitFontFamilyNames::fantasyFamily)
    {
      v15 = (WebCore::SystemFontDatabaseCoreText *)WebCore::SystemFontDatabaseCoreText::forCurrentThread(result);
      WebCore::SystemFontDatabaseCoreText::fantasyFamily(v15, a2, &v18);
    }
    else
    {
      if (v6 != WebCore::WebKitFontFamilyNames::monospaceFamily)
        goto LABEL_7;
      v11 = (WebCore::SystemFontDatabaseCoreText *)WebCore::SystemFontDatabaseCoreText::forCurrentThread(result);
      WebCore::SystemFontDatabaseCoreText::monospaceFamily(v11, a2, &v18);
    }
    goto LABEL_18;
  }
  v8 = WebCore::SystemFontDatabaseCoreText::forCurrentThread(result);
  result = (WebCore::SystemFontDatabaseCoreText *)WebCore::genericFamily(&v16, a2, v8 + 656, *MEMORY[0x1E0CA81B0]);
  v9 = v16;
  if (v16)
  {
    v17 = v16;
    if ((*((_BYTE *)v16 + 16) & 0x10) == 0)
    {
      WTF::AtomStringImpl::addSlowCase();
      result = v17;
      v9 = v18;
      v17 = 0;
      v18 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebCore::SystemFontDatabaseCoreText *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  *a4 = v9;
  return result;
}

_QWORD *WebCore::CSSSegmentedFontFace::fontRanges@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _DWORD **a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int i;
  unsigned int v24;
  WTF::StringImpl *v25;
  float v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v33;
  BOOL v34;
  WTF::StringImpl *v35;
  int v36;
  unint64_t v37;
  __int128 v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  _QWORD *result;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  WTF **v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  __int128 *v89;
  int v90;
  __int128 *v91;
  unsigned int v92;
  int v93;
  char v94;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t *v128;
  _QWORD *v129;
  _DWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  WTF *v136;
  uint64_t v137;
  WTF *v138;
  WTF *v139;
  uint64_t v140;
  _DWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD **v146;
  _DWORD *v147;
  BOOL v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  WTF::StringImpl *v161[2];
  __int128 v162;
  uint64_t v163;
  WTF::StringImpl *v164[2];
  uint64_t v165;
  int v166;
  WTF *v167[2];

  WebCore::FontDescriptionKey::FontDescriptionKey((WebCore::FontDescriptionKey *)&v159, (const WebCore::FontDescription *)a2);
  v163 = v160;
  v8 = *(_OWORD *)v161;
  *(_OWORD *)v161 = 0u;
  v162 = v159;
  *(_OWORD *)v164 = v8;
  v165 = *a3;
  v166 = *((_DWORD *)a3 + 2);
  v155 = a3;
  v9 = *((unsigned int *)a3 + 7);
  *(_OWORD *)v167 = 0u;
  HIDWORD(v167[1]) = v9;
  if ((_DWORD)v9)
  {
    if (v9 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1943729ACLL);
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(16 * v9));
    LODWORD(v167[1]) = v9;
    v167[0] = v10;
    v11 = *((unsigned int *)v155 + 7);
    if ((_DWORD)v11)
    {
      v12 = v155[2];
      v13 = v12 + 16 * v11;
      do
      {
        *(_DWORD *)v10 = *(_DWORD *)v12;
        v14 = *(_QWORD *)(v12 + 8);
        *((_QWORD *)v10 + 1) = v14;
        if ((v14 & 0x8000000000000) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
        v10 = (WTF *)((char *)v10 + 16);
        v12 += 16;
      }
      while (v12 != v13);
    }
  }
  v17 = (uint64_t *)(a1 + 24);
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v18 = *(_QWORD *)(a1 + 24);
  v151 = a1;
  if (v18
    || (WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::rehash((uint64_t *)(a1 + 24), 8u, 0), (v18 = *v17) != 0))
  {
    v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = WTF::TupleHash<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>::hash<0ul>((uint64_t)&v162);
  v22 = 0;
  for (i = 1; ; ++i)
  {
    v24 = v20 & v19;
    v25 = (WTF::StringImpl *)(v18 + 112 * (v20 & v19));
    v26 = *((float *)v25 + 1);
    if (!*(_BYTE *)v25 && v26 == 0.0 && (float)((float)*((__int16 *)v25 + 4) * 0.25) == 0.0)
    {
      v27 = (float)((float)*((__int16 *)v25 + 5) * 0.25) == 0.0 && *((_BYTE *)v25 + 14) == 0;
      v28 = v27 && *((_QWORD *)v25 + 2) == 0;
      v29 = v28 && *((_QWORD *)v25 + 3) == 0;
      v30 = v29 && *((_QWORD *)v25 + 4) == 0;
      v31 = v30 && *((_BYTE *)v25 + 48) == 0;
      if (v31 && *((_DWORD *)v25 + 17) == 0)
        break;
    }
    v33 = *(unsigned __int8 *)v25 == v162 && v26 == *((float *)&v162 + 1);
    if (v33
      && (float)((float)*((__int16 *)v25 + 4) * 0.25) == (float)((float)SWORD4(v162) * 0.25)
      && (float)((float)*((__int16 *)v25 + 5) * 0.25) == (float)((float)SWORD5(v162) * 0.25))
    {
      if (*((_BYTE *)v25 + 14))
        v34 = BYTE14(v162) == 0;
      else
        v34 = 1;
      if (v34)
      {
        if ((*((_BYTE *)v25 + 14) != 0) != (BYTE14(v162) != 0))
          goto LABEL_41;
      }
      else if ((float)((float)*((__int16 *)v25 + 6) * 0.25) != (float)((float)SWORD6(v162) * 0.25))
      {
        goto LABEL_41;
      }
      if (*((_QWORD *)v25 + 2) != v163)
        goto LABEL_41;
      if (*((WTF::StringImpl **)v25 + 3) != v164[0])
        goto LABEL_41;
      v35 = (WTF::StringImpl *)*((_QWORD *)v25 + 4);
      v21 = v164[1];
      if (v35 != v164[1]
        && (!v35 || !v164[1] || !WebCore::FontDescriptionKeyRareData::operator==((uint64_t)v35, (uint64_t)v164[1])))
      {
        goto LABEL_41;
      }
      if (*((_BYTE *)v25 + 48) && (_BYTE)v166)
      {
        v36 = *((unsigned __int8 *)v25 + 40);
        if (v36 != v165 || v36 == 2 && *((_DWORD *)v25 + 11) != HIDWORD(v165))
          goto LABEL_41;
      }
      else if ((*((_BYTE *)v25 + 48) != 0) != (v166 != 0))
      {
        goto LABEL_41;
      }
      v37 = *((unsigned int *)v25 + 17);
      if ((_DWORD)v37 == HIDWORD(v167[1])
        && WTF::VectorComparer<false,std::pair<unsigned int,WebCore::Color>>::compare(*((_DWORD **)v25 + 7), (_DWORD *)v167[0], v37))
      {
        v61 = 1;
        v62 = v151;
        goto LABEL_105;
      }
    }
LABEL_41:
    if (*(_BYTE *)v25)
      v22 = v18 + 112 * v24;
    v20 = i + v24;
  }
  if (v22)
  {
    *(_QWORD *)(v22 + 56) = 0;
    *(_QWORD *)(v22 + 64) = 0;
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_DWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 96) = 0;
    *(_QWORD *)(v22 + 104) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    *(_QWORD *)(v22 + 72) = v22 + 88;
    *(_QWORD *)(v22 + 80) = 1;
    --*(_DWORD *)(*v17 - 16);
    v25 = (WTF::StringImpl *)v22;
  }
  v38 = v162;
  *((_QWORD *)v25 + 2) = v163;
  *(_OWORD *)v25 = v38;
  v39 = v164[0];
  v164[0] = 0;
  v40 = (WTF::StringImpl *)*((_QWORD *)v25 + 3);
  *((_QWORD *)v25 + 3) = v39;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v21);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v164[1];
  v164[1] = 0;
  v42 = *((_QWORD *)v25 + 4);
  *((_QWORD *)v25 + 4) = v41;
  if (v42)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref(v42, v21);
  v43 = v165;
  *((_BYTE *)v25 + 48) = v166;
  *((_QWORD *)v25 + 5) = v43;
  v44 = *((unsigned int *)v25 + 17);
  v45 = (WTF *)*((_QWORD *)v25 + 7);
  if ((_DWORD)v44)
  {
    v46 = (WTF *)((char *)v45 + 16 * v44);
    do
    {
      v47 = *((_QWORD *)v45 + 1);
      if ((v47 & 0x8000000000000) != 0)
      {
        v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFLL);
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v48);
          WTF::fastFree((WTF *)v48, v21);
        }
      }
      v45 = (WTF *)((char *)v45 + 16);
    }
    while (v45 != v46);
    v45 = (WTF *)*((_QWORD *)v25 + 7);
  }
  if (v45)
  {
    *((_QWORD *)v25 + 7) = 0;
    *((_DWORD *)v25 + 16) = 0;
    WTF::fastFree(v45, v21);
  }
  v51 = v167[0];
  v167[0] = 0;
  *((_QWORD *)v25 + 7) = v51;
  LODWORD(v51) = v167[1];
  LODWORD(v167[1]) = 0;
  *((_DWORD *)v25 + 16) = (_DWORD)v51;
  LODWORD(v51) = HIDWORD(v167[1]);
  HIDWORD(v167[1]) = 0;
  *((_DWORD *)v25 + 17) = (_DWORD)v51;
  v52 = *((unsigned int *)v25 + 21);
  v53 = (WTF *)*((_QWORD *)v25 + 9);
  v62 = v151;
  if ((_DWORD)v52)
  {
    v145 = 16 * v52;
    v146 = (_DWORD **)((char *)v53 + 8);
    do
    {
      v147 = *v146;
      *v146 = 0;
      if (v147)
      {
        if (v147[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v147 + 8))(v147);
        else
          --v147[2];
      }
      v146 += 2;
      v145 -= 16;
    }
    while (v145);
    v53 = (WTF *)*((_QWORD *)v25 + 9);
  }
  if (v53 != (WTF::StringImpl *)((char *)v25 + 88))
  {
    if (v53)
    {
      *((_QWORD *)v25 + 9) = 0;
      *((_DWORD *)v25 + 20) = 0;
      WTF::fastFree(v53, v21);
    }
    *((_QWORD *)v25 + 9) = (char *)v25 + 88;
  }
  *((_DWORD *)v25 + 20) = 1;
  *((_DWORD *)v25 + 21) = 0;
  *((_BYTE *)v25 + 104) = v158;
  v54 = *v17;
  if (*v17)
    v55 = *(_DWORD *)(v54 - 12) + 1;
  else
    v55 = 1;
  *(_DWORD *)(v54 - 12) = v55;
  v56 = *v17;
  if (*v17)
    v57 = *(_DWORD *)(v56 - 12);
  else
    v57 = 0;
  v58 = (*(_DWORD *)(v56 - 16) + v57);
  v59 = *(unsigned int *)(v56 - 4);
  if (v59 > 0x400)
  {
    if (v59 <= 2 * v58)
    {
LABEL_100:
      v60 = (_DWORD)v59 << (6 * *(_DWORD *)(v56 - 12) >= (2 * v59));
      goto LABEL_103;
    }
  }
  else if (3 * v59 <= 4 * v58)
  {
    if ((_DWORD)v59)
      goto LABEL_100;
    v60 = 8;
LABEL_103:
    v25 = WTF::HashTable<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges>>,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashMap<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>,WebCore::FontRanges,WTF::DefaultHash<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>,WTF::HashTraits<WebCore::FontRanges>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>>>::rehash(v17, v60, (__int128 *)v25);
  }
  v61 = 0;
LABEL_105:
  v63 = v167[0];
  if (HIDWORD(v167[1]))
  {
    v64 = (WTF *)((char *)v167[0] + 16 * HIDWORD(v167[1]));
    do
    {
      v65 = *((_QWORD *)v63 + 1);
      if ((v65 & 0x8000000000000) != 0)
      {
        v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, v66);
          WTF::fastFree((WTF *)v66, v21);
        }
      }
      v63 = (WTF *)((char *)v63 + 16);
    }
    while (v63 != v64);
    v63 = v167[0];
  }
  if (v63)
  {
    v167[0] = 0;
    LODWORD(v167[1]) = 0;
    WTF::fastFree(v63, v21);
  }
  v69 = v164[1];
  v164[1] = 0;
  if (v69)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref((uint64_t)v69, v21);
  v70 = v164[0];
  v164[0] = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, v21);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = v161[1];
  v161[1] = 0;
  if (v71)
    WTF::RefCounted<WebCore::FontDescriptionKeyRareData>::deref((uint64_t)v71, v21);
  v72 = v161[0];
  v161[0] = 0;
  if (!v72)
  {
LABEL_126:
    if (!v61)
      goto LABEL_136;
    goto LABEL_127;
  }
  if (*(_DWORD *)v72 != 2)
  {
    *(_DWORD *)v72 -= 2;
    goto LABEL_126;
  }
  WTF::StringImpl::destroy(v72, v21);
  if (v61)
  {
LABEL_127:
    v73 = *((unsigned int *)v25 + 21);
    result = (_QWORD *)(a5 + 16);
    *(_QWORD *)a5 = a5 + 16;
    *(_DWORD *)(a5 + 8) = 1;
    *(_DWORD *)(a5 + 12) = v73;
    if (v73 >= 2)
    {
      if (v73 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x1943729C4);
      }
      result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v73));
      *(_DWORD *)(a5 + 8) = v73;
      *(_QWORD *)a5 = result;
    }
    v75 = *((unsigned int *)v25 + 21);
    if ((_DWORD)v75)
    {
      v76 = (_QWORD *)*((_QWORD *)v25 + 9);
      v77 = &v76[2 * v75];
      do
      {
        *result = *v76;
        v78 = v76[1];
        ++*(_DWORD *)(v78 + 8);
        result[1] = v78;
        v76 += 2;
        result += 2;
      }
      while (v76 != v77);
    }
    goto LABEL_221;
  }
LABEL_136:
  v149 = a5;
  v79 = (WTF **)((char *)v25 + 72);
  v80 = *(unsigned int *)(v62 + 44);
  if ((_DWORD)v80)
  {
    v81 = *(uint64_t **)(v62 + 32);
    v82 = &v81[v80];
    v83 = *(_DWORD *)(a2 + 148);
    v152 = *(__int16 *)(a2 + 144);
    v150 = v83 & 0xFF0000;
    v148 = (__int16)v83 > 55;
    do
    {
      v84 = *v81;
      if (*(_BYTE *)(*v81 + 138) != 4)
      {
        v85 = *(unsigned int *)(v84 + 92);
        if ((_DWORD)v85)
        {
          v86 = *(_QWORD *)(v84 + 80);
          v87 = 8 * v85;
          while (*(_DWORD *)(*(_QWORD *)v86 + 88) == 3)
          {
            v86 += 8;
            v87 -= 8;
            if (!v87)
              goto LABEL_197;
          }
          v88 = 0;
          v89 = (__int128 *)(v84 + 120);
          LODWORD(v162) = 104859200;
          if (!*(_BYTE *)(v84 + 124))
            v89 = &v162;
          v90 = *((__int16 *)v89 + 1);
          v91 = (__int128 *)(v84 + 132);
          if (!*(_BYTE *)(v84 + 136))
            v91 = &v162;
          LODWORD(v162) = 0;
          v92 = *(_DWORD *)(a2 + 160);
          v93 = (v90 < 2400) & (v92 >> 13);
          if (v152 > 2399)
            v94 = v93;
          else
            v94 = 0;
          if ((v92 & 0x4000) != 0 && *((__int16 *)v91 + 1) <= 55 && v150 != 0)
            v88 = v148;
          v96 = *a4;
          if (*a4)
          {
            ++v96[2];
            v97 = WTF::fastMalloc((WTF *)0x100);
            ++v96[2];
          }
          else
          {
            v97 = WTF::fastMalloc((WTF *)0x100);
          }
          *(_DWORD *)(v97 + 8) = 1;
          *(_QWORD *)v97 = off_1E3398AB0;
          *(_BYTE *)(v97 + 16) = 0;
          *(_BYTE *)(v97 + 24) = 0;
          ++*(_DWORD *)(v84 + 8);
          *(_QWORD *)(v97 + 32) = v84;
          WebCore::FontDescription::FontDescription((WebCore::FontDescription *)(v97 + 40), (const WebCore::FontDescription *)a2);
          if (v96)
            ++v96[2];
          *(_QWORD *)(v97 + 208) = v96;
          v98 = *v155;
          *(_DWORD *)(v97 + 224) = *((_DWORD *)v155 + 2);
          *(_QWORD *)(v97 + 216) = v98;
          v99 = *((unsigned int *)v155 + 7);
          *(_QWORD *)(v97 + 232) = 0;
          *(_QWORD *)(v97 + 240) = 0;
          *(_DWORD *)(v97 + 244) = v99;
          if ((_DWORD)v99)
          {
            if (v99 >> 28)
              goto LABEL_256;
            v100 = WTF::fastMalloc((WTF *)(16 * v99));
            *(_DWORD *)(v97 + 240) = v99;
            *(_QWORD *)(v97 + 232) = v100;
            v101 = *((unsigned int *)v155 + 7);
            if ((_DWORD)v101)
            {
              v102 = v155[2];
              v103 = v102 + 16 * v101;
              do
              {
                *(_DWORD *)v100 = *(_DWORD *)v102;
                v104 = *(_QWORD *)(v102 + 8);
                *(_QWORD *)(v100 + 8) = v104;
                if ((v104 & 0x8000000000000) != 0)
                {
                  v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFLL);
                  do
                    v106 = __ldaxr(v105);
                  while (__stlxr(v106 + 1, v105));
                }
                v100 += 16;
                v102 += 16;
              }
              while (v102 != v103);
            }
          }
          *(_BYTE *)(v97 + 248) = v94;
          *(_BYTE *)(v97 + 249) = v88;
          if (v96)
          {
            v107 = v96[2] - 1;
            if (v96[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
              v107 = v96[2];
            }
            else
            {
              v96[2] = v107;
            }
            v108 = v107 - 1;
            if (v108)
              v96[2] = v108;
            else
              (*(void (**)(_DWORD *))(*(_QWORD *)v96 + 8))(v96);
          }
          if (*((_DWORD *)v25 + 21) || WebCore::CSSFontAccessor::font(v97, 0))
          {
            v109 = *(unsigned int *)(*v81 + 52);
            if (!(_DWORD)v109)
            {
              *(_QWORD *)&v162 = 0x7FFFFFFF00000000;
              *((_QWORD *)&v162 + 1) = v97;
              v126 = *((unsigned int *)v25 + 21);
              if ((_DWORD)v126 == *((_DWORD *)v25 + 20))
              {
                v131 = (_QWORD *)WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25 + 72, v126 + 1, (unint64_t)&v162);
                v132 = (_QWORD *)(*((_QWORD *)v25 + 9) + 16 * *((unsigned int *)v25 + 21));
                *v132 = *v131;
                v128 = v132 + 1;
                v133 = v131[1];
                v129 = v131 + 1;
                v97 = v133;
              }
              else
              {
                v127 = (_QWORD *)((char *)*v79 + 16 * v126);
                *v127 = v162;
                v128 = v127 + 1;
                v129 = (_QWORD *)&v162 + 1;
              }
              *v129 = 0;
              *v128 = v97;
              ++*((_DWORD *)v25 + 21);
              v130 = (_DWORD *)*((_QWORD *)&v162 + 1);
              *((_QWORD *)&v162 + 1) = 0;
              if (v130)
              {
                if (v130[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v130 + 8))(v130);
                else
                  --v130[2];
              }
              goto LABEL_197;
            }
            if (v109 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1943729B4);
            }
            v110 = *(_QWORD *)(*v81 + 40);
            v111 = 8 * v109;
            v112 = WTF::fastMalloc((WTF *)(8 * v109));
            v114 = (WTF *)v112;
            v115 = 0;
            do
            {
              *(_QWORD *)(v112 + v115) = *(_QWORD *)(v110 + v115);
              v115 += 8;
            }
            while (v111 != v115);
            v116 = 0;
            do
            {
              ++*(_DWORD *)(v97 + 8);
              *(_QWORD *)&v162 = *(_QWORD *)((char *)v114 + v116);
              *((_QWORD *)&v162 + 1) = v97;
              v117 = *((unsigned int *)v25 + 21);
              if ((_DWORD)v117 == *((_DWORD *)v25 + 20))
              {
                v123 = (uint64_t *)WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25 + 72, v117 + 1, (unint64_t)&v162);
                v124 = *v123;
                v120 = v123 + 1;
                v125 = (_QWORD *)(*((_QWORD *)v25 + 9) + 16 * *((unsigned int *)v25 + 21));
                *v125 = v124;
                v119 = v125 + 1;
              }
              else
              {
                v118 = (_QWORD *)((char *)*v79 + 16 * v117);
                *v118 = v162;
                v119 = v118 + 1;
                v120 = (uint64_t *)&v162 + 1;
              }
              v121 = *v120;
              *v120 = 0;
              *v119 = v121;
              ++*((_DWORD *)v25 + 21);
              v122 = (_DWORD *)*((_QWORD *)&v162 + 1);
              *((_QWORD *)&v162 + 1) = 0;
              if (v122)
              {
                if (v122[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v122 + 8))(v122);
                else
                  --v122[2];
              }
              v116 += 8;
            }
            while (v111 != v116);
            WTF::fastFree(v114, v113);
          }
          if (*(_DWORD *)(v97 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
          else
            --*(_DWORD *)(v97 + 8);
        }
      }
LABEL_197:
      ++v81;
    }
    while (v81 != v82);
  }
  v134 = *((unsigned int *)v25 + 21);
  if (*((_DWORD *)v25 + 20) <= v134)
  {
    a5 = v149;
  }
  else
  {
    v135 = *v79;
    if ((_DWORD)v134)
    {
      if ((_DWORD)v134 == 1)
      {
        v136 = (WTF::StringImpl *)((char *)v25 + 88);
        *((_QWORD *)v25 + 9) = (char *)v25 + 88;
        *((_DWORD *)v25 + 20) = 1;
      }
      else
      {
        if (v134 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1943729BCLL);
        }
        v136 = (WTF *)WTF::fastMalloc((WTF *)(16 * v134));
        *((_DWORD *)v25 + 20) = v134;
        *((_QWORD *)v25 + 9) = v136;
      }
      if (v136 != v135)
      {
        v138 = (WTF *)((char *)v135 + 16 * v134);
        v139 = v135;
        do
        {
          *(_QWORD *)v136 = *(_QWORD *)v139;
          v140 = *((_QWORD *)v139 + 1);
          *((_QWORD *)v139 + 1) = 0;
          *((_QWORD *)v136 + 1) = v140;
          v141 = (_DWORD *)*((_QWORD *)v139 + 1);
          *((_QWORD *)v139 + 1) = 0;
          if (v141)
          {
            if (v141[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 8))(v141);
            else
              --v141[2];
          }
          v139 = (WTF *)((char *)v139 + 16);
          v136 = (WTF *)((char *)v136 + 16);
        }
        while (v139 != v138);
      }
    }
    a5 = v149;
    if ((WTF::StringImpl *)((char *)v25 + 88) != v135 && v135)
    {
      if (*v79 == v135)
      {
        *((_QWORD *)v25 + 9) = 0;
        *((_DWORD *)v25 + 20) = 0;
      }
      WTF::fastFree(v135, v21);
      a5 = v149;
    }
    if (!*v79)
    {
      *((_QWORD *)v25 + 9) = (char *)v25 + 88;
      *((_DWORD *)v25 + 20) = 1;
    }
    LODWORD(v134) = *((_DWORD *)v25 + 21);
  }
  result = (_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = a5 + 16;
  *(_DWORD *)(a5 + 8) = 1;
  *(_DWORD *)(a5 + 12) = v134;
  if (v134 >= 2)
  {
    if (v134 >> 28)
    {
LABEL_256:
      __break(0xC471u);
      JUMPOUT(0x1943729A4);
    }
    result = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v134));
    a5 = v149;
    *(_DWORD *)(v149 + 8) = v134;
    *(_QWORD *)v149 = result;
  }
  v137 = *((unsigned int *)v25 + 21);
  if ((_DWORD)v137)
  {
    v142 = (_QWORD *)*((_QWORD *)v25 + 9);
    v143 = &v142[2 * v137];
    do
    {
      *result = *v142;
      v144 = v142[1];
      ++*(_DWORD *)(v144 + 8);
      result[1] = v144;
      v142 += 2;
      result += 2;
    }
    while (v142 != v143);
  }
LABEL_221:
  *(_BYTE *)(a5 + 32) = *((_BYTE *)v25 + 104);
  return result;
}

uint64_t WebCore::FontRanges::operator=(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WebCore::FontRanges::Range>::destruct(*(_DWORD **)a1, (_DWORD *)(*(_QWORD *)a1 + 16 * v4));
  v6 = (_QWORD *)(a1 + 16);
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    if (v5)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v5, a2);
    }
    *(_QWORD *)a1 = v6;
  }
  v7 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 2)
  {
    v8 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v8)
    {
      v12 = &v7[2 * v8];
      do
      {
        *v6 = *v7;
        v13 = v7[1];
        v7[1] = 0;
        v6[1] = v13;
        v14 = (_DWORD *)v7[1];
        v7[1] = 0;
        if (v14)
        {
          if (v14[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          else
            --v14[2];
        }
        v7 += 2;
        v6 += 2;
      }
      while (v7 != v12);
    }
    v9 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = a2 + 2;
    *(_QWORD *)a1 = v7;
    v9 = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 1;
  }
  *(_DWORD *)(a1 + 8) = v9;
  v10 = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v10;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  return a1;
}

unint64_t WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::FontRanges::Range,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  v3 = result;
  v4 = *(WTF **)result;
  v5 = *(unsigned int *)(result + 12);
  if (a2 < 2)
  {
    v6 = (_QWORD *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
    if ((_DWORD)v5)
      goto LABEL_9;
    goto LABEL_7;
  }
  if (!(a2 >> 28))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
LABEL_9:
      v7 = (WTF *)((char *)v4 + 16 * v5);
      v8 = v4;
      do
      {
        *v6 = *(_QWORD *)v8;
        v9 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        v6[1] = v9;
        v10 = (_DWORD *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        v8 = (WTF *)((char *)v8 + 16);
        v6 += 2;
      }
      while (v8 != v7);
    }
LABEL_7:
    if ((WTF *)(v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, (void *)a2);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::TupleHash<WebCore::FontDescriptionKey,WebCore::FontPaletteValues>::hash<0ul>(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint32x2_t v13;
  int8x8_t v14;
  uint32x2_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int32x2_t v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  char v24;

  v22 = -1640531527;
  v23 = 0;
  v24 = 0;
  WTF::add<float,WebCore::FontSelectionRequest,std::array<unsigned int,2ul>,WTF::AtomString>(&v22, (_DWORD *)(a1 + 4), (unsigned __int16 *)(a1 + 8), (_DWORD *)(a1 + 16), (_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WTF::add<WebCore::FontTaggedSettings<int>,WebCore::FontTaggedSettings<float>,WebCore::FontVariantAlternates,WebCore::FontPalette,WebCore::FontSizeAdjust>(&v22, v2 + 8, v2 + 24, v2 + 40, (unsigned __int8 *)(v2 + 112), (unsigned __int8 *)(v2 + 128));
  v3 = v22;
  if (v24)
  {
    v20 = (v22 + v23) ^ ((v22 + v23) << 11);
    v3 = v20 + (v20 >> 17);
  }
  v23 = 0;
  v24 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = ((v5 - 1640531527) ^ ((v5 - 1640531527) << 16))
     + (((v5 - 1640531527) ^ ((v5 - 1640531527) << 16)) >> 11);
  v22 = v6;
  if (v5)
  {
    v7 = (v6 + v4) ^ ((v6 + v4) << 16);
    v6 = v7 + (v7 >> 11);
    v22 = v6;
    if (v4 == 2)
    {
      v8 = v6 + WORD2(v4);
      v9 = (v4 >> 37) & 0x7FFF800 ^ (v8 << 16);
      v6 = (v9 ^ v8) + ((v9 ^ v8) >> 11);
      v22 = v6;
    }
  }
  v10 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(a1 + 56);
    v12 = v11 + 16 * v10;
    do
    {
      WTF::addArgs<unsigned int,WebCore::Color>(&v22, (_DWORD *)v11, (unint64_t *)(v11 + 8));
      v11 += 16;
    }
    while (v11 != v12);
    v6 = v22;
    if (v24)
    {
      v21 = (v22 + v23) ^ ((v22 + v23) << 11);
      v6 = v21 + (v21 >> 17);
    }
  }
  v13 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v3, v6), 3uLL), (int8x8_t)__PAIR64__(v3, v6));
  v14 = (int8x8_t)vsra_n_u32(v13, v13, 5uLL);
  v15 = (uint32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v14, 2uLL), v14);
  v16 = (int8x8_t)vsra_n_u32(v15, v15, 0xFuLL);
  v17 = (int32x2_t)veor_s8((int8x8_t)vshl_n_s32((int32x2_t)v16, 0xAuLL), v16);
  v18 = (int32x2_t)vbsl_s8((int8x8_t)vceqz_s32(v17), (int8x8_t)0x7C800000FF000000, (int8x8_t)vmul_s32(v17, (int32x2_t)0x109132F905AC73FELL));
  return (0xD7862706ELL * (unint64_t)vadd_s32(v18, vdup_lane_s32(v18, 1)).u32[0]) >> 4;
}

BOOL WTF::VectorComparer<false,std::pair<unsigned int,WebCore::Color>>::compare(_DWORD *a1, _DWORD *a2, unint64_t a3)
{
  BOOL v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  int v11;
  int v12;

  if (a3)
  {
    if (*a1 == *a2)
    {
      v3 = 0;
      v4 = a1 + 4;
      v5 = a2 + 4;
      v6 = 1;
      while (1)
      {
        v7 = *((_QWORD *)v4 - 1);
        v8 = *((_QWORD *)v5 - 1);
        if ((v7 & 0x8000000000000) != 0)
        {
          if ((v8 & 0x8000000000000) == 0
            || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v7) != HIBYTE(v8)
            || BYTE6(v7) != BYTE6(v8))
          {
            return v3;
          }
        }
        else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
        {
          return v3;
        }
        v3 = v6 >= a3;
        if (a3 != v6)
        {
          v11 = *v4;
          v4 += 4;
          v10 = v11;
          v12 = *v5;
          v5 += 4;
          ++v6;
          if (v10 == v12)
            continue;
        }
        return v3;
      }
    }
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t WebCore::genericFontFamilyForScript(WTF *a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_10;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v4 & (v6 ^ HIWORD(v6));
  v8 = *(_DWORD *)(v3 + 16 * v7);
  if (v8 != a2)
  {
    v10 = 1;
    while (v8 != -2)
    {
      v7 = ((_DWORD)v7 + v10) & v4;
      v8 = *(_DWORD *)(v3 + 16 * v7);
      ++v10;
      if (v8 == a2)
        goto LABEL_3;
    }
    v7 = *(unsigned int *)(v3 - 4);
  }
LABEL_3:
  if (v7 != *(_DWORD *)(v3 - 4))
    return v3 + 16 * v7 + 8;
LABEL_10:
  if (a2 == 17)
  {
    if (WTF::userPrefersSimplifiedChinese(a1))
      v15 = 73;
    else
      v15 = 74;
    v3 = *(_QWORD *)a1;
    v16 = WTF::HashMap<int,WTF::String,WTF::DefaultHash<int>,WebCore::UScriptCodeHashTraits,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::find(*(_QWORD *)a1, v15);
    if (v3)
      v17 = v3 + 16 * *(unsigned int *)(v3 - 4);
    else
      v17 = 0;
    if (v17 != v16)
      return v16 + 8;
  }
  else if (!a2)
  {
    return MEMORY[0x1E0CBF3B8];
  }
  result = MEMORY[0x1E0CBF3B8];
  if (v3)
  {
    v11 = *(_DWORD *)(v3 - 8);
    v12 = v11 & 0x4636B9C9;
    v13 = *(_DWORD *)(v3 + 16 * v12);
    if (v13)
    {
      v14 = 1;
      while (v13 != -2)
      {
        v12 = ((_DWORD)v12 + v14) & v11;
        v13 = *(_DWORD *)(v3 + 16 * v12);
        ++v14;
        if (!v13)
          goto LABEL_14;
      }
      v12 = *(unsigned int *)(v3 - 4);
    }
LABEL_14:
    if (v12 != *(_DWORD *)(v3 - 4))
      return v3 + 16 * v12 + 8;
  }
  return result;
}

uint64_t WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
    WTF::VectorTypeOperations<WebCore::FontFamilyName>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(_QWORD *)a1 + 8 * v4));
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v6;
  LODWORD(v6) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(v6) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v6;
  return a1;
}

uint64_t *WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, _DWORD **a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2;
      if (*a2)
        *v9 += 2;
      *(_QWORD *)(v7 + 8 * v8) = v9;
      ++a2;
      ++v8;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::SettingsBase::imagesEnabledChanged(WebCore::SettingsBase *this)
{
  char *v1;
  double v2;

  v1 = (char *)this + 24;
  *((_QWORD *)this + 6) = 0;
  WTF::MonotonicTime::now(this);
  return WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
}

uint64_t WebCore::Settings::setSampleBufferContentKeySessionSupportEnabled(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(unsigned int *)(this + 720);
  if (((((v2 & 0x8000000) == 0) ^ a2) & 1) == 0)
  {
    v3 = *(_QWORD *)(this + 712);
    v4 = *(_QWORD *)(this + 704);
    v5 = *(_QWORD *)(this + 696);
    v6 = *(_QWORD *)(this + 688);
    v7 = *(_QWORD *)(this + 680);
    v8 = *(_QWORD *)(this + 672);
    v9 = 0x8000000;
    if (!a2)
      v9 = 0;
    v10 = v2 & 0xFFFFFFFFF7FFFFFFLL | ((unint64_t)*(unsigned __int8 *)(this + 724) << 32);
    *(_QWORD *)(this + 664) = *(_QWORD *)(this + 664);
    *(_QWORD *)(this + 672) = v8;
    *(_QWORD *)(this + 680) = v7;
    *(_QWORD *)(this + 688) = v6;
    *(_QWORD *)(this + 696) = v5;
    *(_QWORD *)(this + 704) = v4;
    *(_QWORD *)(this + 712) = v3;
    *(_BYTE *)(this + 724) = BYTE4(v10);
    *(_DWORD *)(this + 720) = v10 | v9;
    v11 = *(_QWORD *)(this + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        WebCore::s_sampleBufferContentKeySessionSupportEnabled = (*(_DWORD *)(*(_QWORD *)(v12 + 112) + 720) & 0x8000000) != 0;
    }
  }
  return this;
}

WebCore::IntersectionObserverEntry *WebCore::JSIntersectionObserverEntry::destroy(WebCore::JSIntersectionObserverEntry *this, JSC::JSCell *a2)
{
  WebCore::IntersectionObserverEntry *result;
  bmalloc::api *v4;
  void *v5;

  result = (WebCore::IntersectionObserverEntry *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(result, a2);
      return (WebCore::IntersectionObserverEntry *)bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::IntersectionObserverEntry::~IntersectionObserverEntry(WebCore::IntersectionObserverEntry *this, void *a2)
{
  uint64_t v3;
  bmalloc::api *v4;
  bmalloc::api *v5;
  bmalloc::api *v6;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (bmalloc::api *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 2) == 1)
    {
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
        *(_QWORD *)v4 = 0;
      }
      bmalloc::api::isoDeallocate(v4, a2);
    }
    else
    {
      --*((_DWORD *)v4 + 2);
    }
  }
  v5 = (bmalloc::api *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
    {
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
        *(_QWORD *)v5 = 0;
      }
      bmalloc::api::isoDeallocate(v5, a2);
    }
    else
    {
      --*((_DWORD *)v5 + 2);
    }
  }
  v6 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 2) == 1)
    {
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
        *(_QWORD *)v6 = 0;
      }
      bmalloc::api::isoDeallocate(v6, a2);
    }
    else
    {
      --*((_DWORD *)v6 + 2);
    }
  }
}

uint64_t WebCore::SettingsBase::imageLoadingSettingsTimerFired(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Document *v6;
  WebCore::CachedResourceLoader *v7;
  _BOOL4 v8;
  void *v9;
  WebCore::CachedResourceLoader *v10;

  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 160);
      if (v4)
      {
        v5 = this;
        do
        {
          if (!*(_BYTE *)(v4 + 144))
          {
            v6 = *(WebCore::Document **)(v4 + 296);
            if (v6)
            {
              v7 = (WebCore::CachedResourceLoader *)*((_QWORD *)v6 + 90);
              if (!v7)
                v7 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(v6, a2);
              v8 = WebCore::Settings::areImagesEnabled(*(WebCore::Settings **)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8)
                                                                             + 112));
              WebCore::CachedResourceLoader::setImagesEnabled(v7, v8);
              v10 = *(WebCore::CachedResourceLoader **)(*(_QWORD *)(v4 + 296) + 720);
              if (!v10)
                v10 = (WebCore::CachedResourceLoader *)WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(v4 + 296), v9);
              WebCore::CachedResourceLoader::setAutoLoadImages(v10, (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 112) + 680) & 0x2000000000000000) != 0);
            }
          }
          this = WebCore::FrameTree::traverseNext((_QWORD *)(v4 + 48), 0);
          v4 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

BOOL WebCore::Settings::areImagesEnabled(WebCore::Settings *this)
{
  if (*((_BYTE *)this + 237))
    return *((_BYTE *)this + 236) != 0;
  else
    return (*((_QWORD *)this + 85) >> 24) & 1;
}

void WebCore::CachedResourceLoader::setAutoLoadImages(WebCore::CachedResourceLoader *this, int a2)
{
  if (*((unsigned __int8 *)this + 272) != a2)
  {
    *((_BYTE *)this + 272) = a2;
    if (a2)
      WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(this);
  }
}

void WebCore::CachedResourceLoader::setImagesEnabled(WebCore::CachedResourceLoader *this, int a2)
{
  if (*((unsigned __int8 *)this + 273) != a2)
  {
    *((_BYTE *)this + 273) = a2;
    if (a2)
      WebCore::CachedResourceLoader::reloadImagesIfNotDeferred(this);
  }
}

void WebCore::SQLiteDatabase::prepareHeapStatement(unsigned int *a1@<X0>, const char *a2@<X1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  int v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  sqlite3_stmt ***v12;
  uint64_t v13;
  int v14;
  _BYTE buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  WebCore::constructAndPrepareStatement((int *)&v13, (uint64_t)a1, a2, a3);
  v7 = v14;
  if (v14)
  {
    v11 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = a2;
      _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, "SQLiteDatabase::prepareHeapStatement: Failed to prepare statement %{public}s", buf, 0xCu);
    }
    if (v7 == 1)
    {
      *a4 = v13;
      a4[2] = 1;
    }
    else
    {
      v12 = (sqlite3_stmt ***)std::__throw_bad_variant_access[abi:sn180100]();
      WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef(v12);
    }
  }
  else
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v9 = v13;
    *v8 = a1;
    do
      v10 = __ldaxr(a1);
    while (__stlxr(v10 + 1, a1));
    v8[1] = v9;
    *(_QWORD *)buf = 0;
    *(_QWORD *)a4 = v8;
    a4[2] = 0;
    WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef((sqlite3_stmt ***)buf);
  }
}

uint64_t WTF::UniqueRef<WebCore::SQLiteStatement>::~UniqueRef(sqlite3_stmt ***a1)
{
  sqlite3_stmt **v2;
  void *v3;
  unsigned int *v4;
  unsigned int v6;
  uint64_t result;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return (uint64_t)a1;
  sqlite3_finalize(v2[1]);
  v4 = (unsigned int *)*v2;
  *v2 = 0;
  if (!v4)
  {
LABEL_5:
    WTF::fastFree((WTF *)v2, v3);
    return (uint64_t)a1;
  }
  if (atomic_load(v4))
  {
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 - 1, v4));
    goto LABEL_5;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::IOSApplication::isLutron(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8177E == 1)
    return byte_1ECE8177D != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE8177D = IsEqualTo;
  byte_1ECE8177E = 1;
  return result;
}

void sub_194373744(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef WebCore::mac(WebCore *this, const WebCore::AuthenticationChallenge *a2)
{
  CFTypeRef result;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  result = (CFTypeRef)*((_QWORD *)this + 53);
  if (!result)
  {
    v4 = objc_alloc(MEMORY[0x1E0C92C48]);
    v5 = WebCore::ProtectionSpace::nsSpace((WebCore *)((char *)this + 8));
    v6 = WebCore::Credential::nsCredential((WebCore *)((char *)this + 40));
    v7 = *((unsigned int *)this + 18);
    v8 = *((_QWORD *)this + 40);
    if (!v8)
    {
      if ((*((_BYTE *)this + 218) & 1) != 0)
      {
        v8 = 0;
      }
      else
      {
        WebCore::ResourceResponse::initNSURLResponse((WebCore *)((char *)this + 80));
        v8 = *((_QWORD *)this + 40);
      }
    }
    v9 = (const void *)objc_msgSend(v4, "initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:", v5, v6, v7, v8, WebCore::ResourceError::nsError((WebCore *)((char *)this + 336)), *((_QWORD *)this + 52));
    return (id)CFMakeCollectable(v9);
  }
  return result;
}

uint64_t WebCore::Credential::nsCredential(WebCore::Credential *this)
{
  uint64_t result;
  uint64_t v3;
  id v4;
  const __CFString *v5;
  const __CFString *v6;
  int v7;
  uint64_t v8;
  const void *v9;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    if (*(_QWORD *)this && *(_DWORD *)(*(_QWORD *)this + 4)
      || (v3 = *((_QWORD *)this + 1)) != 0 && *(_DWORD *)(v3 + 4))
    {
      v4 = objc_alloc(MEMORY[0x1E0C92C60]);
      if (*(_QWORD *)this)
        v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v5 = &stru_1E3487BC0;
      if (*((_QWORD *)this + 1))
        v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v6 = &stru_1E3487BC0;
      v7 = *((unsigned __int8 *)this + 16);
      if (v7 == 2)
        v8 = 2;
      else
        v8 = v7 == 1;
      result = objc_msgSend(v4, "initWithUser:password:persistence:", v5, v6, v8);
      v9 = (const void *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = result;
      if (v9)
      {
        CFRelease(v9);
        return *((_QWORD *)this + 3);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::ProtectionSpace::getPlatformDataToSerialize@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  WebCore::ProtectionSpace *v4;
  void *v5;
  uint64_t v6;
  char v7;

  if (WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
    && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0)
  {
    this = 204;
    __break(0xC471u);
  }
  else
  {
    v4 = (WebCore::ProtectionSpace *)this;
    v5 = *(void **)(this + 24);
    if (v5 && (objc_msgSend(*(id *)(this + 24), "distinguishedNames") || (this = objc_msgSend(v5, "serverTrust")) != 0))
    {
      this = WebCore::ProtectionSpace::nsSpace(v4);
      v6 = this;
      if (this)
        this = (uint64_t)CFRetain((CFTypeRef)this);
      *(_QWORD *)a2 = v6;
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_BYTE *)a2 = 0;
    }
    *(_BYTE *)(a2 + 8) = v7;
  }
  return this;
}

uint64_t WebCore::ProtectionSpace::nsSpace(WebCore::ProtectionSpace *this)
{
  uint64_t result;
  uint64_t v3;
  const __CFString *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  const __CFString *v13;
  uint64_t v14;
  const __CFString *v15;
  const void *v16;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    switch(*((_BYTE *)this + 20))
    {
      case 1:
        v3 = 0;
        v4 = CFSTR("http");
        break;
      case 2:
        v3 = 0;
        v4 = CFSTR("https");
        break;
      case 3:
        v3 = 0;
        v4 = CFSTR("ftp");
        break;
      case 4:
        v3 = 0;
        v4 = CFSTR("ftps");
        break;
      case 5:
        v4 = 0;
        v5 = (uint64_t *)MEMORY[0x1E0C92B98];
        goto LABEL_12;
      case 6:
        v4 = 0;
        v5 = (uint64_t *)MEMORY[0x1E0C92BA8];
        goto LABEL_12;
      case 7:
        v4 = 0;
        v5 = (uint64_t *)MEMORY[0x1E0C92B88];
        goto LABEL_12;
      case 8:
        v4 = 0;
        v5 = (uint64_t *)MEMORY[0x1E0C92BB0];
LABEL_12:
        v3 = *v5;
        break;
      default:
        v4 = 0;
        v3 = 0;
        break;
    }
    switch(*((_BYTE *)this + 21))
    {
      case 1:
        v6 = (uint64_t *)MEMORY[0x1E0C92B38];
        goto LABEL_24;
      case 2:
        v6 = (uint64_t *)MEMORY[0x1E0C92B48];
        goto LABEL_24;
      case 3:
        v6 = (uint64_t *)MEMORY[0x1E0C92B50];
        goto LABEL_24;
      case 4:
        v6 = (uint64_t *)MEMORY[0x1E0C92B40];
        goto LABEL_24;
      case 5:
        v6 = (uint64_t *)MEMORY[0x1E0C92B58];
        goto LABEL_24;
      case 6:
        v6 = (uint64_t *)MEMORY[0x1E0C92B60];
        goto LABEL_24;
      case 7:
        v6 = (uint64_t *)MEMORY[0x1E0C92B30];
        goto LABEL_24;
      case 8:
        v6 = (uint64_t *)MEMORY[0x1E0C92B70];
        goto LABEL_24;
      case 9:
        v6 = (uint64_t *)MEMORY[0x1E0C92B68];
LABEL_24:
        v7 = *v6;
        break;
      default:
        v7 = 0;
        break;
    }
    v8 = objc_alloc(MEMORY[0x1E0C92C70]);
    v9 = *(_QWORD *)this;
    if (v3)
    {
      if (v9)
        v10 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v10 = &stru_1E3487BC0;
      v11 = *((int *)this + 4);
      if (*((_QWORD *)this + 1))
        v12 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v12 = &stru_1E3487BC0;
      result = objc_msgSend(v8, "initWithProxyHost:port:type:realm:authenticationMethod:", v10, v11, v3, v12, v7);
    }
    else
    {
      if (v9)
        v13 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v13 = &stru_1E3487BC0;
      v14 = *((int *)this + 4);
      if (*((_QWORD *)this + 1))
        v15 = (const __CFString *)WTF::StringImpl::operator NSString *();
      else
        v15 = &stru_1E3487BC0;
      result = objc_msgSend(v8, "initWithHost:port:protocol:realm:authenticationMethod:", v13, v14, v4, v15, v7);
    }
    v16 = (const void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = result;
    if (v16)
    {
      CFRelease(v16);
      return *((_QWORD *)this + 3);
    }
  }
  return result;
}

uint64_t WebCore::ResourceError::nsError(WebCore::ResourceError *this)
{
  uint64_t result;
  const void *v3;
  uint64_t v4;

  if (!*((_BYTE *)this + 60))
    return 0;
  result = *((_QWORD *)this + 8);
  if (!result)
  {
    WebCore::createNSErrorFromResourceErrorBase((WebCore *)&v4, this);
    result = v4;
    v3 = (const void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v4;
    if (v3)
    {
      CFRelease(v3);
      return *((_QWORD *)this + 8);
    }
  }
  return result;
}

BOOL WebCore::SharedWorkerThreadProxy::hasInstances(WebCore::SharedWorkerThreadProxy *this)
{
  _BOOL8 result;

  {
    return WebCore::allSharedWorkerThreadProxies(void)::map
        && *(_DWORD *)(WebCore::allSharedWorkerThreadProxies(void)::map - 12) != 0;
  }
  else
  {
    result = 0;
    WebCore::allSharedWorkerThreadProxies(void)::map = 0;
  }
  return result;
}

__int16 *WebCore::Style::ElementRuleCollector::matchUARules(WebCore::Style::ElementRuleCollector *this, void *a2)
{
  uint64_t *v3;
  BOOL (*v4)(uint64_t, uint64_t);
  WTF *v5;
  __int16 *result;
  WTF::StringImpl *v7;
  unint64_t v8;
  BOOL (*v9)(uint64_t, uint64_t);
  WTF *v10;
  unint64_t v11;
  BOOL (*v12)(uint64_t, uint64_t);
  WTF *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  BOOL (***v22)(uint64_t, uint64_t);
  BOOL (**v23)(uint64_t, uint64_t);
  BOOL (*v24)(uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL (**v39)(uint64_t, uint64_t);
  _QWORD *v40;
  int v41;
  _DWORD *v42;
  _DWORD **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  unint64_t j;
  uint64_t v51;
  BOOL (***v52)(uint64_t, uint64_t);
  BOOL (**v53)(uint64_t, uint64_t);
  BOOL (*v54)(uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL (**v69)(uint64_t, uint64_t);
  _QWORD *v70;
  int v71;
  _DWORD *v72;
  _DWORD **v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL (***v83)(uint64_t, uint64_t);
  BOOL (**v84)(uint64_t, uint64_t);
  BOOL (*v85)(uint64_t, uint64_t);
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL (**v100)(uint64_t, uint64_t);
  _QWORD *v101;
  int v102;
  _DWORD *v103;
  _DWORD **v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  WTF *v122;
  uint64_t v124;
  WTF *v125;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v132;
  __int16 *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  uint64_t v137;
  __int16 *v138;
  WTF *v139;
  WTF *v140;
  uint64_t v141;
  uint64_t v142;
  __int16 *v143;
  WTF *v144;
  WTF *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD **v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD **v154;
  _DWORD *v155;
  WTF *v156;
  uint64_t v158;
  WTF *v159;
  WTF *v160;
  uint64_t v162;
  WTF *v163;
  uint64_t v164;
  uint64_t v165;
  _DWORD **v166;
  _DWORD *v167;
  WTF *v168;
  uint64_t v170;
  WTF *v171;
  unint64_t v172;
  unsigned int *v173;
  _DWORD *v174;
  unsigned int *v175;
  unint64_t v176;
  unsigned int *v177;
  _DWORD *v178;
  unsigned int *v179;
  unint64_t v180;
  unsigned int *v181;
  _DWORD *v182;
  unsigned int *v183;
  BOOL (*v184)(uint64_t, uint64_t);
  uint64_t v185;
  BOOL (*v186)(uint64_t, uint64_t);
  uint64_t v187;
  BOOL (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF *v196;
  WTF *v197;
  WTF *v198;
  WTF *v199;
  WTF *v200;
  WTF *v201;
  BOOL (*v202)(uint64_t, uint64_t);
  __int16 v203;
  char v204;
  char v205;
  __int16 v206;
  BOOL v207;
  char v208;

  if (*((_BYTE *)this + 49))
    v3 = &WebCore::Style::UserAgentStyle::defaultPrintStyle;
  else
    v3 = &WebCore::Style::UserAgentStyle::defaultStyle;
  v4 = (BOOL (*)(uint64_t, uint64_t))*v3;
  if (!*((_DWORD *)this + 30))
    goto LABEL_9;
  if (*((_DWORD *)this + 31))
    *((_DWORD *)this + 31) = 0;
  v5 = (WTF *)*((_QWORD *)this + 14);
  if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v5)
  {
    if (!v5)
      goto LABEL_264;
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v5, a2);
    v5 = (WTF *)*((_QWORD *)this + 14);
  }
  if (!v5)
  {
LABEL_264:
    *((_QWORD *)this + 14) = (char *)this + 128;
    *((_DWORD *)this + 30) = 64;
  }
LABEL_9:
  *((_QWORD *)this + 208) = 0;
  v202 = v4;
  v203 = 0;
  result = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v202);
  v8 = *((unsigned int *)this + 31);
  if ((_DWORD)v8)
  {
    v15 = *((_QWORD *)this + 14);
    v202 = WebCore::Style::compareRules;
    result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v15, (__int128 *)(v15 + 24 * v8), (uint64_t (**)(__int128 *, __int128 *))&v202, 126 - 2 * __clz(v8), 1);
    if (*((_BYTE *)this + 104) != 1)
    {
      v16 = *((_QWORD *)this + 212);
      v17 = *((unsigned int *)this + 31);
      if (*(_DWORD *)(v16 + 16) < v17)
      {
        if (v17 >> 28)
          goto LABEL_288;
        v18 = *(WTF **)(v16 + 8);
        v19 = *(unsigned int *)(v16 + 20);
        result = (__int16 *)WTF::fastMalloc((WTF *)(16 * v17));
        *(_DWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v16 + 8) = result;
        if ((_DWORD)v19)
        {
          v133 = result;
          v134 = (WTF *)((char *)v18 + 16 * v19);
          v135 = v18;
          do
          {
            v136 = *(_QWORD *)v135;
            *(_QWORD *)v135 = 0;
            *(_QWORD *)v133 = v136;
            *((_QWORD *)v133 + 1) = *((_QWORD *)v135 + 1);
            v137 = *(_QWORD *)v135;
            *(_QWORD *)v135 = 0;
            if (v137)
            {
              if (*(_DWORD *)v137 == 1)
              {
                v196 = v134;
                v199 = v135;
                if ((*(_BYTE *)(v137 + 4) & 8) != 0)
                {
                  v148 = *(unsigned int *)(v137 + 28);
                  if ((_DWORD)v148)
                  {
                    v149 = 16 * v148;
                    v150 = (_DWORD **)(*(_QWORD *)(v137 + 16) + 8);
                    do
                    {
                      v151 = *v150;
                      *v150 = 0;
                      if (v151)
                      {
                        if (*v151 == 2)
                        {
                          v193 = v149;
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v151, v7);
                          v149 = v193;
                        }
                        else
                        {
                          *v151 -= 2;
                        }
                      }
                      v150 += 2;
                      v149 -= 16;
                    }
                    while (v149);
                  }
                  v156 = *(WTF **)(v137 + 16);
                  if ((WTF *)(v137 + 32) != v156 && v156 != 0)
                  {
                    *(_QWORD *)(v137 + 16) = 0;
                    *(_DWORD *)(v137 + 24) = 0;
                    WTF::fastFree(v156, v7);
                  }
                  v158 = *(_QWORD *)(v137 + 8);
                  *(_QWORD *)(v137 + 8) = 0;
                  if (v158)
                    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
                  v159 = (WTF *)v137;
                }
                else
                {
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v137, v7);
                }
                result = (__int16 *)WTF::fastFree(v159, v7);
                v134 = v196;
                v135 = v199;
              }
              else
              {
                --*(_DWORD *)v137;
              }
            }
            v133 += 8;
            v135 = (WTF *)((char *)v135 + 16);
          }
          while (v135 != v134);
        }
        if (v18)
        {
          if (*(WTF **)(v16 + 8) == v18)
          {
            *(_QWORD *)(v16 + 8) = 0;
            *(_DWORD *)(v16 + 16) = 0;
          }
          result = (__int16 *)WTF::fastFree(v18, v7);
        }
      }
    }
    for (i = *((_QWORD *)this + 208); i < *((unsigned int *)this + 31); *((_QWORD *)this + 208) = i)
    {
      v21 = *((_QWORD *)this + 14);
      v22 = (BOOL (***)(uint64_t, uint64_t))(v21 + 24 * i);
      if (*((_BYTE *)this + 104) == 1)
      {
        result = (__int16 *)((char *)this + 1672);
        v184 = **v22;
        v202 = v184;
        v185 = *((unsigned int *)this + 421);
        if ((_DWORD)v185 == *((_DWORD *)this + 420))
        {
          result = (__int16 *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)result, (_DWORD **)&v202);
        }
        else
        {
          v190 = *(_QWORD *)result;
          if (v184)
            ++*(_DWORD *)v184;
          *(_QWORD *)(v190 + 8 * v185) = v184;
          *((_DWORD *)this + 421) = v185 + 1;
        }
        goto LABEL_48;
      }
      v23 = *v22;
      v24 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)**v22 + 1);
      v25 = *(_DWORD *)v24 + 1;
      *(_DWORD *)v24 = v25;
      v202 = v24;
      v26 = ((unint64_t)v23[1] >> 58) & 3;
      LOBYTE(v203) = ((unint64_t)v23[1] >> 58) & 3;
      v27 = ((unint64_t)v23[1] >> 60) & 3;
      HIBYTE(v203) = ((unint64_t)v23[1] >> 60) & 3;
      v28 = v21 + 24 * i;
      v29 = *(unsigned __int8 *)(v28 + 16);
      v204 = *(_BYTE *)(v28 + 16);
      v205 = 0;
      v30 = *(unsigned __int16 *)(v28 + 18);
      v206 = *(_WORD *)(v28 + 18);
      v31 = (unint64_t)v23[1] & 0x4000000000000000;
      v207 = v31 != 0;
      v208 = 2;
      v32 = *((_QWORD *)this + 212);
      result = (__int16 *)(v32 + 8);
      v33 = *(unsigned int *)(v32 + 20);
      if ((_DWORD)v33
        && (v34 = v33 - 1,
            v35 = *(_QWORD *)result,
            *(BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * (v33 - 1)) == v24)
        && (v36 = v35 + 16 * v34,
            v7 = (WTF::StringImpl *)*(unsigned __int8 *)(v36 + 8),
            __PAIR64__(*(unsigned __int8 *)(v36 + 9), v7) == __PAIR64__(v27, v26))
        && (v37 = v35 + 16 * v34, *(unsigned __int8 *)(v37 + 10) == v29)
        && !*(_BYTE *)(v37 + 11)
        && (v38 = v35 + 16 * v34, *(unsigned __int16 *)(v38 + 12) == v30)
        && (v31 != 0) != (*(_BYTE *)(v38 + 14) == 0)
        && *(_BYTE *)(v35 + 16 * v34 + 15) == 2)
      {
        v202 = 0;
      }
      else
      {
        if (v31 >> 62)
          *(_BYTE *)(v32 + 2) = 1;
        if ((_DWORD)v33 == *(_DWORD *)(v32 + 16))
        {
          v106 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v33 + 1, (unint64_t)&v202);
          v107 = *(_QWORD *)(v32 + 8);
          v108 = *v106;
          *v106 = 0;
          result = (__int16 *)(v106 + 1);
          v109 = (_QWORD *)(v107 + 16 * *(unsigned int *)(v32 + 20));
          *v109 = v108;
          v40 = v109 + 1;
        }
        else
        {
          v39 = (BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * v33);
          v202 = 0;
          *v39 = v24;
          v40 = v39 + 1;
          result = &v203;
        }
        *v40 = *(_QWORD *)result;
        ++*(_DWORD *)(v32 + 20);
        v24 = v202;
        v202 = 0;
        if (!v24)
          goto LABEL_48;
        v25 = *(_DWORD *)v24;
      }
      v41 = v25 - 1;
      if (v41)
      {
        *(_DWORD *)v24 = v41;
      }
      else
      {
        v118 = *((unsigned int *)v24 + 1);
        if ((v118 & 8) != 0)
        {
          v119 = *((unsigned int *)v24 + 7);
          if ((_DWORD)v119)
          {
            v44 = 16 * v119;
            v43 = (_DWORD **)(*((_QWORD *)v24 + 2) + 8);
            do
            {
              v42 = *v43;
              *v43 = 0;
              if (v42)
              {
                if (*v42 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v42, v7);
                else
                  *v42 -= 2;
              }
              v43 += 2;
              v44 -= 16;
            }
            while (v44);
          }
          v122 = (WTF *)*((_QWORD *)v24 + 2);
          if ((WTF *)((char *)v24 + 32) != v122 && v122 != 0)
          {
            *((_QWORD *)v24 + 2) = 0;
            *((_DWORD *)v24 + 6) = 0;
            WTF::fastFree(v122, v7);
          }
          v124 = *((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = 0;
          if (v124)
            (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
        }
        else if (v118 >= 0x10)
        {
          v172 = 0;
          v173 = (unsigned int *)((char *)v24 + ((v118 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v174 = (_DWORD *)(*v173 | ((unint64_t)*((unsigned __int8 *)v173 + 4) << 32));
            if (*v174 == 2)
            {
              v175 = v173;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v174, v7);
              v173 = v175;
            }
            else
            {
              *v174 -= 2;
            }
            ++v172;
            v173 = (unsigned int *)((char *)v173 + 5);
          }
          while (v172 < (unint64_t)*((unsigned int *)v24 + 1) >> 4);
        }
        result = (__int16 *)WTF::fastFree((WTF *)v24, v7);
      }
LABEL_48:
      i = *((_QWORD *)this + 208) + 1;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8) + 3384) == 2)
    result = (__int16 *)WebCore::Style::ElementRuleCollector::matchUARules(this, (const WebCore::Style::RuleSet *)WebCore::Style::UserAgentStyle::defaultQuirksStyle);
  v9 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)this + 3);
  if (v9)
  {
    if (*((_DWORD *)this + 30))
    {
      if (*((_DWORD *)this + 31))
        *((_DWORD *)this + 31) = 0;
      v10 = (WTF *)*((_QWORD *)this + 14);
      if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v10)
      {
        if (!v10
          || (*((_QWORD *)this + 14) = 0, *((_DWORD *)this + 30) = 0, WTF::fastFree(v10, v7), !*((_QWORD *)this + 14)))
        {
          *((_QWORD *)this + 14) = (char *)this + 128;
          *((_DWORD *)this + 30) = 64;
        }
      }
    }
    *((_QWORD *)this + 208) = 0;
    v202 = v9;
    v203 = 0;
    result = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v202);
    v11 = *((unsigned int *)this + 31);
    if ((_DWORD)v11)
    {
      v45 = *((_QWORD *)this + 14);
      v202 = WebCore::Style::compareRules;
      result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v45, (__int128 *)(v45 + 24 * v11), (uint64_t (**)(__int128 *, __int128 *))&v202, 126 - 2 * __clz(v11), 1);
      if (*((_BYTE *)this + 104) != 1)
      {
        v46 = *((_QWORD *)this + 212);
        v47 = *((unsigned int *)this + 31);
        if (*(_DWORD *)(v46 + 16) < v47)
        {
          if (v47 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x194374CF0);
          }
          v48 = *(WTF **)(v46 + 8);
          v49 = *(unsigned int *)(v46 + 20);
          result = (__int16 *)WTF::fastMalloc((WTF *)(16 * v47));
          *(_DWORD *)(v46 + 16) = v47;
          *(_QWORD *)(v46 + 8) = result;
          if ((_DWORD)v49)
          {
            v138 = result;
            v139 = (WTF *)((char *)v48 + 16 * v49);
            v140 = v48;
            do
            {
              v141 = *(_QWORD *)v140;
              *(_QWORD *)v140 = 0;
              *(_QWORD *)v138 = v141;
              *((_QWORD *)v138 + 1) = *((_QWORD *)v140 + 1);
              v142 = *(_QWORD *)v140;
              *(_QWORD *)v140 = 0;
              if (v142)
              {
                if (*(_DWORD *)v142 == 1)
                {
                  v197 = v139;
                  v200 = v140;
                  if ((*(_BYTE *)(v142 + 4) & 8) != 0)
                  {
                    v152 = *(unsigned int *)(v142 + 28);
                    if ((_DWORD)v152)
                    {
                      v153 = 16 * v152;
                      v154 = (_DWORD **)(*(_QWORD *)(v142 + 16) + 8);
                      do
                      {
                        v155 = *v154;
                        *v154 = 0;
                        if (v155)
                        {
                          if (*v155 == 2)
                          {
                            v194 = v153;
                            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v155, v7);
                            v153 = v194;
                          }
                          else
                          {
                            *v155 -= 2;
                          }
                        }
                        v154 += 2;
                        v153 -= 16;
                      }
                      while (v153);
                    }
                    v160 = *(WTF **)(v142 + 16);
                    if ((WTF *)(v142 + 32) != v160 && v160 != 0)
                    {
                      *(_QWORD *)(v142 + 16) = 0;
                      *(_DWORD *)(v142 + 24) = 0;
                      WTF::fastFree(v160, v7);
                    }
                    v162 = *(_QWORD *)(v142 + 8);
                    *(_QWORD *)(v142 + 8) = 0;
                    if (v162)
                      (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
                    v163 = (WTF *)v142;
                  }
                  else
                  {
                    WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v142, v7);
                  }
                  result = (__int16 *)WTF::fastFree(v163, v7);
                  v139 = v197;
                  v140 = v200;
                }
                else
                {
                  --*(_DWORD *)v142;
                }
              }
              v138 += 8;
              v140 = (WTF *)((char *)v140 + 16);
            }
            while (v140 != v139);
          }
          if (v48)
          {
            if (*(WTF **)(v46 + 8) == v48)
            {
              *(_QWORD *)(v46 + 8) = 0;
              *(_DWORD *)(v46 + 16) = 0;
            }
            result = (__int16 *)WTF::fastFree(v48, v7);
          }
        }
      }
      for (j = *((_QWORD *)this + 208); j < *((unsigned int *)this + 31); *((_QWORD *)this + 208) = j)
      {
        v51 = *((_QWORD *)this + 14);
        v52 = (BOOL (***)(uint64_t, uint64_t))(v51 + 24 * j);
        if (*((_BYTE *)this + 104) == 1)
        {
          result = (__int16 *)((char *)this + 1672);
          v186 = **v52;
          v202 = v186;
          v187 = *((unsigned int *)this + 421);
          if ((_DWORD)v187 == *((_DWORD *)this + 420))
          {
            result = (__int16 *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)result, (_DWORD **)&v202);
          }
          else
          {
            v191 = *(_QWORD *)result;
            if (v186)
              ++*(_DWORD *)v186;
            *(_QWORD *)(v191 + 8 * v187) = v186;
            *((_DWORD *)this + 421) = v187 + 1;
          }
          goto LABEL_79;
        }
        v53 = *v52;
        v54 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)**v52 + 1);
        v55 = *(_DWORD *)v54 + 1;
        *(_DWORD *)v54 = v55;
        v202 = v54;
        v56 = ((unint64_t)v53[1] >> 58) & 3;
        LOBYTE(v203) = ((unint64_t)v53[1] >> 58) & 3;
        v57 = ((unint64_t)v53[1] >> 60) & 3;
        HIBYTE(v203) = ((unint64_t)v53[1] >> 60) & 3;
        v58 = v51 + 24 * j;
        v59 = *(unsigned __int8 *)(v58 + 16);
        v204 = *(_BYTE *)(v58 + 16);
        v205 = 0;
        v60 = *(unsigned __int16 *)(v58 + 18);
        v206 = *(_WORD *)(v58 + 18);
        v61 = (unint64_t)v53[1] & 0x4000000000000000;
        v207 = v61 != 0;
        v208 = 2;
        v62 = *((_QWORD *)this + 212);
        result = (__int16 *)(v62 + 8);
        v63 = *(unsigned int *)(v62 + 20);
        if ((_DWORD)v63
          && (v64 = v63 - 1,
              v65 = *(_QWORD *)result,
              *(BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * (v63 - 1)) == v54)
          && (v66 = v65 + 16 * v64,
              v7 = (WTF::StringImpl *)*(unsigned __int8 *)(v66 + 8),
              __PAIR64__(*(unsigned __int8 *)(v66 + 9), v7) == __PAIR64__(v57, v56))
          && (v67 = v65 + 16 * v64, *(unsigned __int8 *)(v67 + 10) == v59)
          && !*(_BYTE *)(v67 + 11)
          && (v68 = v65 + 16 * v64, *(unsigned __int16 *)(v68 + 12) == v60)
          && (v61 != 0) != (*(_BYTE *)(v68 + 14) == 0)
          && *(_BYTE *)(v65 + 16 * v64 + 15) == 2)
        {
          v202 = 0;
        }
        else
        {
          if (v61 >> 62)
            *(_BYTE *)(v62 + 2) = 1;
          if ((_DWORD)v63 == *(_DWORD *)(v62 + 16))
          {
            v110 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v63 + 1, (unint64_t)&v202);
            v111 = *(_QWORD *)(v62 + 8);
            v112 = *v110;
            *v110 = 0;
            result = (__int16 *)(v110 + 1);
            v113 = (_QWORD *)(v111 + 16 * *(unsigned int *)(v62 + 20));
            *v113 = v112;
            v70 = v113 + 1;
          }
          else
          {
            v69 = (BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * v63);
            v202 = 0;
            *v69 = v54;
            v70 = v69 + 1;
            result = &v203;
          }
          *v70 = *(_QWORD *)result;
          ++*(_DWORD *)(v62 + 20);
          v54 = v202;
          v202 = 0;
          if (!v54)
            goto LABEL_79;
          v55 = *(_DWORD *)v54;
        }
        v71 = v55 - 1;
        if (v71)
        {
          *(_DWORD *)v54 = v71;
        }
        else
        {
          v120 = *((unsigned int *)v54 + 1);
          if ((v120 & 8) != 0)
          {
            v121 = *((unsigned int *)v54 + 7);
            if ((_DWORD)v121)
            {
              v74 = 16 * v121;
              v73 = (_DWORD **)(*((_QWORD *)v54 + 2) + 8);
              do
              {
                v72 = *v73;
                *v73 = 0;
                if (v72)
                {
                  if (*v72 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, v7);
                  else
                    *v72 -= 2;
                }
                v73 += 2;
                v74 -= 16;
              }
              while (v74);
            }
            v125 = (WTF *)*((_QWORD *)v54 + 2);
            if ((WTF *)((char *)v54 + 32) != v125 && v125 != 0)
            {
              *((_QWORD *)v54 + 2) = 0;
              *((_DWORD *)v54 + 6) = 0;
              WTF::fastFree(v125, v7);
            }
            v127 = *((_QWORD *)v54 + 1);
            *((_QWORD *)v54 + 1) = 0;
            if (v127)
              (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
          }
          else if (v120 >= 0x10)
          {
            v176 = 0;
            v177 = (unsigned int *)((char *)v54 + ((v120 >> 3) & 0x1FFFFFFE) + 8);
            do
            {
              v178 = (_DWORD *)(*v177 | ((unint64_t)*((unsigned __int8 *)v177 + 4) << 32));
              if (*v178 == 2)
              {
                v179 = v177;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v178, v7);
                v177 = v179;
              }
              else
              {
                *v178 -= 2;
              }
              ++v176;
              v177 = (unsigned int *)((char *)v177 + 5);
            }
            while (v176 < (unint64_t)*((unsigned int *)v54 + 1) >> 4);
          }
          result = (__int16 *)WTF::fastFree((WTF *)v54, v7);
        }
LABEL_79:
        j = *((_QWORD *)this + 208) + 1;
      }
    }
  }
  v12 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)this + 4);
  if (v12)
  {
    if (*((_DWORD *)this + 30))
    {
      if (*((_DWORD *)this + 31))
        *((_DWORD *)this + 31) = 0;
      v13 = (WTF *)*((_QWORD *)this + 14);
      if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v13)
      {
        if (!v13
          || (*((_QWORD *)this + 14) = 0, *((_DWORD *)this + 30) = 0, WTF::fastFree(v13, v7), !*((_QWORD *)this + 14)))
        {
          *((_QWORD *)this + 14) = (char *)this + 128;
          *((_DWORD *)this + 30) = 64;
        }
      }
    }
    *((_QWORD *)this + 208) = 0;
    v202 = v12;
    v203 = 0;
    result = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v202);
    v14 = *((unsigned int *)this + 31);
    if ((_DWORD)v14)
    {
      v75 = *((_QWORD *)this + 14);
      v202 = WebCore::Style::compareRules;
      result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v75, (__int128 *)(v75 + 24 * v14), (uint64_t (**)(__int128 *, __int128 *))&v202, 126 - 2 * __clz(v14), 1);
      if (*((_BYTE *)this + 104) == 1)
        goto LABEL_92;
      v77 = *((_QWORD *)this + 212);
      v78 = *((unsigned int *)this + 31);
      if (*(_DWORD *)(v77 + 16) >= v78)
        goto LABEL_92;
      if (!(v78 >> 28))
      {
        v79 = *(WTF **)(v77 + 8);
        v80 = *(unsigned int *)(v77 + 20);
        result = (__int16 *)WTF::fastMalloc((WTF *)(16 * v78));
        *(_DWORD *)(v77 + 16) = v78;
        *(_QWORD *)(v77 + 8) = result;
        if ((_DWORD)v80)
        {
          v143 = result;
          v144 = (WTF *)((char *)v79 + 16 * v80);
          v145 = v79;
          do
          {
            v146 = *(_QWORD *)v145;
            *(_QWORD *)v145 = 0;
            *(_QWORD *)v143 = v146;
            *((_QWORD *)v143 + 1) = *((_QWORD *)v145 + 1);
            v147 = *(_QWORD *)v145;
            *(_QWORD *)v145 = 0;
            if (v147)
            {
              if (*(_DWORD *)v147 == 1)
              {
                v198 = v144;
                v201 = v145;
                if ((*(_BYTE *)(v147 + 4) & 8) != 0)
                {
                  v164 = *(unsigned int *)(v147 + 28);
                  if ((_DWORD)v164)
                  {
                    v165 = 16 * v164;
                    v166 = (_DWORD **)(*(_QWORD *)(v147 + 16) + 8);
                    do
                    {
                      v167 = *v166;
                      *v166 = 0;
                      if (v167)
                      {
                        if (*v167 == 2)
                        {
                          v195 = v165;
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v167, v76);
                          v165 = v195;
                        }
                        else
                        {
                          *v167 -= 2;
                        }
                      }
                      v166 += 2;
                      v165 -= 16;
                    }
                    while (v165);
                  }
                  v168 = *(WTF **)(v147 + 16);
                  if ((WTF *)(v147 + 32) != v168 && v168 != 0)
                  {
                    *(_QWORD *)(v147 + 16) = 0;
                    *(_DWORD *)(v147 + 24) = 0;
                    WTF::fastFree(v168, v76);
                  }
                  v170 = *(_QWORD *)(v147 + 8);
                  *(_QWORD *)(v147 + 8) = 0;
                  if (v170)
                    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
                  v171 = (WTF *)v147;
                }
                else
                {
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v147, v76);
                }
                result = (__int16 *)WTF::fastFree(v171, v76);
                v144 = v198;
                v145 = v201;
              }
              else
              {
                --*(_DWORD *)v147;
              }
            }
            v143 += 8;
            v145 = (WTF *)((char *)v145 + 16);
          }
          while (v145 != v144);
        }
        if (v79)
        {
          if (*(WTF **)(v77 + 8) == v79)
          {
            *(_QWORD *)(v77 + 8) = 0;
            *(_DWORD *)(v77 + 16) = 0;
          }
          result = (__int16 *)WTF::fastFree(v79, v76);
        }
LABEL_92:
        v81 = *((_QWORD *)this + 208);
        if (v81 >= *((unsigned int *)this + 31))
          return result;
        while (1)
        {
          v82 = *((_QWORD *)this + 14);
          v83 = (BOOL (***)(uint64_t, uint64_t))(v82 + 24 * v81);
          if (*((_BYTE *)this + 104) == 1)
          {
            result = (__int16 *)((char *)this + 1672);
            v188 = **v83;
            v202 = v188;
            v189 = *((unsigned int *)this + 421);
            if ((_DWORD)v189 == *((_DWORD *)this + 420))
            {
              result = (__int16 *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)result, (_DWORD **)&v202);
            }
            else
            {
              v192 = *(_QWORD *)result;
              if (v188)
                ++*(_DWORD *)v188;
              *(_QWORD *)(v192 + 8 * v189) = v188;
              *((_DWORD *)this + 421) = v189 + 1;
            }
            goto LABEL_110;
          }
          v84 = *v83;
          v85 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)**v83 + 1);
          v86 = *(_DWORD *)v85 + 1;
          *(_DWORD *)v85 = v86;
          v202 = v85;
          v87 = ((unint64_t)v84[1] >> 58) & 3;
          LOBYTE(v203) = ((unint64_t)v84[1] >> 58) & 3;
          v88 = ((unint64_t)v84[1] >> 60) & 3;
          HIBYTE(v203) = ((unint64_t)v84[1] >> 60) & 3;
          v89 = v82 + 24 * v81;
          v90 = *(unsigned __int8 *)(v89 + 16);
          v204 = *(_BYTE *)(v89 + 16);
          v205 = 0;
          v91 = *(unsigned __int16 *)(v89 + 18);
          v206 = *(_WORD *)(v89 + 18);
          v92 = (unint64_t)v84[1] & 0x4000000000000000;
          v207 = v92 != 0;
          v208 = 2;
          v93 = *((_QWORD *)this + 212);
          result = (__int16 *)(v93 + 8);
          v94 = *(unsigned int *)(v93 + 20);
          if ((_DWORD)v94
            && (v95 = v94 - 1,
                v96 = *(_QWORD *)result,
                *(BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * (v94 - 1)) == v85)
            && (v97 = v96 + 16 * v95,
                v76 = (WTF::StringImpl *)*(unsigned __int8 *)(v97 + 8),
                __PAIR64__(*(unsigned __int8 *)(v97 + 9), v76) == __PAIR64__(v88, v87))
            && (v98 = v96 + 16 * v95, *(unsigned __int8 *)(v98 + 10) == v90)
            && !*(_BYTE *)(v98 + 11)
            && (v99 = v96 + 16 * v95, *(unsigned __int16 *)(v99 + 12) == v91)
            && (v92 != 0) != (*(_BYTE *)(v99 + 14) == 0)
            && *(_BYTE *)(v96 + 16 * v95 + 15) == 2)
          {
            v202 = 0;
          }
          else
          {
            if (v92 >> 62)
              *(_BYTE *)(v93 + 2) = 1;
            if ((_DWORD)v94 == *(_DWORD *)(v93 + 16))
            {
              v114 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v94 + 1, (unint64_t)&v202);
              v115 = *(_QWORD *)(v93 + 8);
              v116 = *v114;
              *v114 = 0;
              result = (__int16 *)(v114 + 1);
              v117 = (_QWORD *)(v115 + 16 * *(unsigned int *)(v93 + 20));
              *v117 = v116;
              v101 = v117 + 1;
            }
            else
            {
              v100 = (BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * v94);
              v202 = 0;
              *v100 = v85;
              v101 = v100 + 1;
              result = &v203;
            }
            *v101 = *(_QWORD *)result;
            ++*(_DWORD *)(v93 + 20);
            v85 = v202;
            v202 = 0;
            if (!v85)
              goto LABEL_110;
            v86 = *(_DWORD *)v85;
          }
          v102 = v86 - 1;
          if (v102)
          {
            *(_DWORD *)v85 = v102;
          }
          else
          {
            v128 = *((unsigned int *)v85 + 1);
            if ((v128 & 8) != 0)
            {
              v129 = *((unsigned int *)v85 + 7);
              if ((_DWORD)v129)
              {
                v105 = 16 * v129;
                v104 = (_DWORD **)(*((_QWORD *)v85 + 2) + 8);
                do
                {
                  v103 = *v104;
                  *v104 = 0;
                  if (v103)
                  {
                    if (*v103 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v103, v76);
                    else
                      *v103 -= 2;
                  }
                  v104 += 2;
                  v105 -= 16;
                }
                while (v105);
              }
              v130 = (WTF *)*((_QWORD *)v85 + 2);
              if ((WTF *)((char *)v85 + 32) != v130 && v130 != 0)
              {
                *((_QWORD *)v85 + 2) = 0;
                *((_DWORD *)v85 + 6) = 0;
                WTF::fastFree(v130, v76);
              }
              v132 = *((_QWORD *)v85 + 1);
              *((_QWORD *)v85 + 1) = 0;
              if (v132)
                (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
            }
            else if (v128 >= 0x10)
            {
              v180 = 0;
              v181 = (unsigned int *)((char *)v85 + ((v128 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v182 = (_DWORD *)(*v181 | ((unint64_t)*((unsigned __int8 *)v181 + 4) << 32));
                if (*v182 == 2)
                {
                  v183 = v181;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v182, v76);
                  v181 = v183;
                }
                else
                {
                  *v182 -= 2;
                }
                ++v180;
                v181 = (unsigned int *)((char *)v181 + 5);
              }
              while (v180 < (unint64_t)*((unsigned int *)v85 + 1) >> 4);
            }
            result = (__int16 *)WTF::fastFree((WTF *)v85, v76);
          }
LABEL_110:
          v81 = *((_QWORD *)this + 208) + 1;
          *((_QWORD *)this + 208) = v81;
          if (v81 >= *((unsigned int *)this + 31))
            return result;
        }
      }
LABEL_288:
      __break(0xC471u);
      JUMPOUT(0x194374CE8);
    }
  }
  return result;
}

uint64_t WebCore::Style::ElementRuleCollector::collectMatchingRules(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  __n128 v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  unsigned int v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  WTF::StringImpl *v62;
  __n128 v63;
  __n128 *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int i;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  unsigned int v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  unsigned int v120;
  _BYTE *v121;
  int v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  WTF *v127;
  uint64_t v128;
  uint64_t v130;
  unint64_t v131;
  __int16 v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  WTF::StringImpl *v137;
  __n128 v138;
  __n128 *v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int16 *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unint64_t v163;
  unsigned int v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  char v170;
  uint64_t v171;
  unsigned int v172;
  _QWORD *v173;
  _BYTE *v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  WTF *v180;
  uint64_t v181;
  uint64_t v183;
  unint64_t v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  WTF::StringImpl *v190;
  __n128 v191;
  __n128 *v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  const WebCore::CSSSelector *v208;
  const WebCore::Element *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  WTF *v216;
  _OWORD *v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  const WebCore::CSSSelector *v224;
  const WebCore::Element *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  WTF *v235;
  _OWORD *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  const WebCore::CSSSelector *v244;
  const WebCore::Element *v245;
  uint64_t v246;
  void *v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _OWORD *v261;
  WTF *v262;
  uint64_t v263;
  __int128 v264;
  void *v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  WTF *v277;
  __int128 v278;
  void *v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int *v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  WTF *v291;
  __int128 v292;
  uint64_t v293;
  WTF *v294;
  __int128 v295;
  void *v296;
  void *v297;
  uint64_t v298;
  void *v299;
  int v300;
  unsigned int v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  unsigned int v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  unsigned int v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  WTF *v318;
  int v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  WTF::StringImpl *v329;
  BOOL v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unsigned __int16 *v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int *v340;
  unint64_t v341;
  unsigned int v342;
  _DWORD *v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  unsigned int v347;
  char v348;
  uint64_t v349;
  unsigned int v350;
  _QWORD *v351;
  _BYTE *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  WTF *v357;
  uint64_t v358;
  uint64_t v360;
  unint64_t v361;
  __int16 v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  WTF::StringImpl *v367;
  __n128 v368;
  __n128 *v369;
  uint64_t v370;
  unsigned int *v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  const WebCore::CSSSelector *v381;
  const WebCore::Element *v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  WTF *v387;
  _OWORD *v388;
  uint64_t v389;
  __int128 v390;
  void *v391;
  unsigned int *v392;
  unsigned int v393;
  unsigned int *v394;
  unsigned int v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  WTF *v403;
  __int128 v404;
  void *v405;
  int v406;
  unsigned int v407;
  uint64_t *v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned __int16 *v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int *v419;
  unint64_t v420;
  unsigned int v421;
  _DWORD *v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  unsigned int v426;
  char v427;
  uint64_t v428;
  unsigned int v429;
  _QWORD *v430;
  unsigned int v431;
  _BYTE *v432;
  int v433;
  int v434;
  int v435;
  int v436;
  WTF *v437;
  uint64_t v438;
  uint64_t v440;
  unint64_t v441;
  __int16 v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  WTF::StringImpl *v447;
  __n128 v448;
  __n128 *v449;
  uint64_t v450;
  unsigned int *v451;
  unsigned int v452;
  unsigned int v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  const WebCore::CSSSelector *v461;
  const WebCore::Element *v462;
  uint64_t v463;
  _OWORD *v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  WTF *v468;
  uint64_t v469;
  __int128 v470;
  void *v471;
  unsigned int *v472;
  unsigned int v473;
  unsigned int *v474;
  unsigned int v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  WTF *v483;
  __int128 v484;
  void *v485;
  int v486;
  unsigned int v487;
  uint64_t *v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  WTF *v492;
  __n128 *v493;
  uint64_t v494;
  uint64_t v495;
  _QWORD *v496;
  uint64_t v497;
  int v498;
  WTF *v499;
  WTF *v500;
  WTF *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  int v505;
  unsigned int v506;
  uint64_t v507;
  unsigned int v508;
  WTF *v509;
  WTF *v510;
  uint64_t *v511;
  uint64_t v512;
  _QWORD *v513;
  WTF::StringImpl *v514;
  uint64_t *v515;
  WTF *v516;
  int v517;
  unsigned int v518;
  char v519;
  unsigned int v520;
  BOOL v521;
  char v522;
  WTF::StringImpl *v523[2];
  __n128 v524;
  unsigned __int8 v525;
  uint64_t v526;
  uint64_t v527;
  __int16 v528;
  uint64_t v529;
  WTF *v530;
  uint64_t v531;
  _BYTE v532[128];
  int v533;
  char v534;
  uint64_t v535;

  result = MEMORY[0x1E0C80A78](a1, a2);
  v5 = v3;
  v6 = (_QWORD *)result;
  v535 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)result;
  v8 = **(_QWORD **)(*(_QWORD *)result + 40);
  if (v8)
    v9 = (*(_WORD *)(v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  v512 = result;
  if (!v9 && !*(_BYTE *)(v8 + 193))
  {
    result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules((_QWORD *)result, v3);
    v6 = (_QWORD *)v512;
  }
  if ((*(_WORD *)(v7 + 28) & 0x10) != 0)
  {
    v10 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 3358) & 1;
    v11 = *(_QWORD *)(v7 + 104);
    v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
    v511 = v5;
    if (!v11)
      goto LABEL_9;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(v7 + 104);
    v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
    v511 = v5;
    if (!v11)
    {
LABEL_9:
      v13 = *v12;
      if (!*v12)
        goto LABEL_10;
      goto LABEL_135;
    }
  }
  v13 = *(uint64_t **)(v11 + 24);
  if (!v13)
    goto LABEL_9;
LABEL_135:
  v92 = *(_QWORD *)(*v5 + 8);
  if (!v92)
    goto LABEL_10;
  v93 = 0;
  for (i = *((_DWORD *)v13 + 4) >> 8; ; i = v93 + v95)
  {
    v95 = i & *(_DWORD *)(v92 - 8);
    v96 = *(uint64_t **)(v92 + 16 * v95);
    if (!v96)
      goto LABEL_10;
    if (v96 != (uint64_t *)-1 && v96 == v13)
      break;
    ++v93;
  }
  v154 = *(_QWORD *)(v92 + 16 * v95 + 8);
  if (v154)
  {
    v155 = *(unsigned int *)(v154 + 12);
    if ((_DWORD)v155)
    {
      v508 = v10;
      v156 = 0;
      v503 = *(unsigned int *)(v154 + 12);
      while (1)
      {
        v157 = *(_QWORD *)v154 + 32 * v156;
        v159 = (unsigned __int16 *)(v157 + 8);
        v158 = *(_QWORD *)(v157 + 8);
        if (v158 < 0 && ((v158 & 0x100000000000000) != 0 || !*((_BYTE *)v6 + 96)))
        {
          v160 = v6[5];
          if (!v160)
            goto LABEL_244;
          v161 = *(_QWORD *)v154 + 32 * v156;
          v164 = *(_DWORD *)(v161 + 16);
          v162 = (unsigned int *)(v161 + 16);
          v163 = v164;
          if (!v164
            || (v176 = v160 + 16, *(_BYTE *)(v160 + 16 + (v163 & 0xFFF)))
            && *(_BYTE *)(v176 + ((v163 >> 16) & 0xFFF))
            && ((v189 = v162[1], !(_DWORD)v189)
             || *(_BYTE *)(v176 + (v189 & 0xFFF))
             && *(_BYTE *)(v176 + ((v189 >> 16) & 0xFFF))
             && ((v211 = v162[2], !(_DWORD)v211)
              || *(_BYTE *)(v176 + (v211 & 0xFFF))
              && *(_BYTE *)(v176 + ((v211 >> 16) & 0xFFF))
              && ((v212 = v162[3], !(_DWORD)v212)
               || *(_BYTE *)(v176 + (v212 & 0xFFF)) && *(_BYTE *)(v176 + ((v212 >> 16) & 0xFFF))))))
          {
LABEL_244:
            v165 = (_DWORD *)*v5;
            if (!*(_DWORD *)(*v5 + 748))
              goto LABEL_245;
            result = WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v6, *(_QWORD *)v154 + 32 * v156, v5);
            v6 = (_QWORD *)v512;
            if ((_DWORD)result)
              break;
          }
        }
LABEL_260:
        if (++v156 == v155)
        {
          v11 = *(_QWORD *)(v7 + 104);
          v10 = v508;
          goto LABEL_10;
        }
      }
      v165 = (_DWORD *)*v5;
LABEL_245:
      LOBYTE(v516) = 0;
      v519 = 0;
      if (v165[195])
      {
        result = (uint64_t)WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v523, v6, (WTF::StringImpl *)v157, v165);
        if (!LOBYTE(v523[0]))
        {
          if (v524.n128_u8[8])
          {
            result = (uint64_t)v523[1];
            if (v523[1])
              result = WTF::fastFree(v523[1], v3);
          }
          v5 = v511;
          v6 = (_QWORD *)v512;
          v155 = v503;
          goto LABEL_256;
        }
        result = std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v516, (uint64_t *)&v523[1]);
        if (v524.n128_u8[8])
        {
          result = (uint64_t)v523[1];
          if (v523[1])
            result = WTF::fastFree(v523[1], v3);
        }
        v5 = v511;
        v6 = (_QWORD *)v512;
        v155 = v503;
      }
      v166 = *(_QWORD *)v157;
      v167 = *(_QWORD *)(*(_QWORD *)v157 + 8);
      v168 = *(_DWORD *)(v167 + 4);
      if ((v168 & 8) != 0)
        v169 = *(_DWORD *)(v167 + 28);
      else
        v169 = v168 >> 4;
      if (!v169 && !*((_BYTE *)v6 + 48))
      {
LABEL_256:
        if (v519)
        {
          result = (uint64_t)v516;
          if (v516)
          {
            v516 = 0;
            v517 = 0;
            result = WTF::fastFree((WTF *)result, v3);
            v6 = (_QWORD *)v512;
          }
        }
        goto LABEL_260;
      }
      v513 = v6;
      v514 = (WTF::StringImpl *)v157;
      v515 = v5;
      if (v519)
      {
        v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
        if (v518)
        {
          v314 = (uint64_t *)v516;
          v315 = (uint64_t *)((char *)v516 + 16 * v518);
          do
          {
            v316 = *v314;
            v317 = v314[1];
            v314 += 2;
            result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v513, v316, v317, v4);
            v6 = (_QWORD *)v512;
          }
          while (v314 != v315);
        }
        goto LABEL_255;
      }
      v520 = 0;
      v170 = *((_BYTE *)v5 + 8);
      v171 = (*(_QWORD *)v159 >> 53) & 7;
      if ((_DWORD)v171 && (*(_WORD *)(*v6 + 28) & 0x10) != 0)
      {
        if ((_DWORD)v171 == 4)
        {
          v520 = 1;
          v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
        }
        else
        {
          v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
          if ((_DWORD)v171 == 3)
          {
            v520 = 256;
          }
          else if ((_DWORD)v171 == 2)
          {
            v520 = 0x10000;
          }
        }
        goto LABEL_281;
      }
      v172 = WORD1(*(_QWORD *)v159);
      v173 = *(_QWORD **)(v166 + 24);
      if (!v173)
      {
        v280 = *(unsigned int **)(v166 + 16);
        if (!v280)
          goto LABEL_520;
        v281 = *v280;
        if ((*v280 & 0x20000) != 0)
        {
          v283 = 1;
        }
        else
        {
          v282 = v280 + 4;
          v283 = 1;
          do
          {
            v283 += (v281 >> 19) & 1;
            v284 = *v282;
            v282 += 4;
            v281 = v284;
          }
          while ((v284 & 0x20000) == 0);
        }
        if (v283 <= v172)
        {
LABEL_520:
          __break(0xC471u);
          JUMPOUT(0x194376930);
        }
        v285 = v283;
        v286 = 24 * v283;
        v287 = (_QWORD *)WTF::fastMalloc((WTF *)(v286 + 16));
        *v287 = 24;
        v287[1] = v285;
        v173 = v287 + 2;
        bzero(v287 + 2, 24 * ((v286 - 24) / 0x18uLL) + 24);
        v288 = *(_QWORD *)(v166 + 24);
        *(_QWORD *)(v166 + 24) = v173;
        if (v288)
        {
          v289 = *(_QWORD *)(v288 - 8);
          if (v289)
          {
            v197 = v288 + 24 * v289;
            do
            {
              v194 = *(unsigned int **)(v197 - 8);
              *(_QWORD *)(v197 - 8) = 0;
              if (v194)
              {
                do
                {
                  v195 = __ldaxr(v194);
                  v196 = v195 - 1;
                }
                while (__stlxr(v196, v194));
                if (!v196)
                {
                  atomic_store(1u, v194);
                  v523[0] = (WTF::StringImpl *)v194;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v523);
                }
              }
              v197 -= 24;
            }
            while (v197 != v288);
          }
          WTF::fastFree((WTF *)(v288 - 16), v299);
          v173 = *(_QWORD **)(v166 + 24);
        }
        v6 = (_QWORD *)v512;
      }
      v174 = &v173[3 * v172];
      v175 = *v174;
      if (!*v174)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
        {
          *v174 = 1;
          v6 = (_QWORD *)v512;
          goto LABEL_262;
        }
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v523, (WebCore *)(*(_QWORD *)(*(_QWORD *)v157 + 16) + 16 * *v159), 0);
        *v174 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v523, (int **)&v173[3 * v172 + 1]);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v523, v279);
        v175 = *v174;
        v6 = (_QWORD *)v512;
      }
      if (v175 == 2)
      {
        result = ((uint64_t (*)(_QWORD, unsigned int *))v173[3 * v172 + 1])(*v6, &v520);
        v6 = (_QWORD *)v512;
        v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
        v155 = v503;
        if (!(_DWORD)result)
        {
LABEL_255:
          v5 = v511;
          goto LABEL_256;
        }
        if ((*(_BYTE *)(v157 + 15) & 2) != 0)
          *(_BYTE *)(v512 + 1688) = 1;
LABEL_281:
        v183 = *v515;
        v184 = *((_DWORD *)v514 + 3) & 0x1FFFFF;
        if (v184 < *(unsigned int *)(*v515 + 716))
        {
          v312 = *(_DWORD *)(*(_QWORD *)(v183 + 704) + 4 * v184);
          if (v312)
          {
            v313 = v312 - 1;
            if (*(_DWORD *)(v183 + 700) <= v313)
            {
              __break(0xC471u);
              JUMPOUT(0x194376B14);
            }
            v185 = *(_WORD *)(*(_QWORD *)(v183 + 688) + 24 * v313 + 20);
          }
          else
          {
            v185 = -1;
          }
          v6 = (_QWORD *)v512;
          v155 = v503;
        }
        else
        {
          v185 = -1;
        }
        result = (uint64_t)(v6 + 14);
        v523[0] = v514;
        v523[1] = (WTF::StringImpl *)(v520 | 0xFFFFFFFF00000000);
        v524.n128_u8[0] = *((_BYTE *)v515 + 8);
        v524.n128_u16[1] = v185;
        v186 = *((unsigned int *)v6 + 31);
        if ((_DWORD)v186 == *((_DWORD *)v6 + 30))
        {
          result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v186 + 1), (unint64_t)v523);
          v6 = (_QWORD *)v512;
          v187 = *(_QWORD *)(v512 + 112) + 24 * *(unsigned int *)(v512 + 124);
          v4 = *(__n128 *)result;
          v188 = *(_QWORD *)(result + 16);
        }
        else
        {
          v187 = *(_QWORD *)result + 24 * v186;
          v4 = *(__n128 *)v523;
          v188 = v524.n128_u64[0];
        }
        *(_QWORD *)(v187 + 16) = v188;
        *(__n128 *)v187 = v4;
        ++*((_DWORD *)v6 + 31);
        goto LABEL_255;
      }
LABEL_262:
      LOBYTE(v523[0]) = *((_BYTE *)v6 + 104);
      HIDWORD(v523[0]) = 0;
      v523[1] = 0;
      v524.n128_u8[0] = 0;
      v525 = 0;
      v526 = 0;
      v527 = 0;
      v528 = 0;
      v530 = (WTF *)v532;
      v531 = 8;
      v533 = 0;
      v534 = 0;
      if (*((_BYTE *)v6 + 96))
      {
        HIDWORD(v523[0]) = *((_DWORD *)v6 + 14);
        v190 = (WTF::StringImpl *)v6[8];
        if (v190)
          *(_DWORD *)v190 += 2;
        v523[1] = v190;
        v4 = *(__n128 *)(v6 + 9);
        v524 = v4;
        v525 = *((_BYTE *)v6 + 88);
      }
      HIBYTE(v528) = v170;
      v529 = v6[5];
      v526 = 0;
      if (*v174 == 3)
      {
        v177 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v173[3 * v172 + 1])(*v6, v523, &v520) != 0;
      }
      else
      {
        v244 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v157 + 16) + 16 * *v159);
        v245 = (const WebCore::Element *)*v6;
        v246 = *(_QWORD *)(*(_QWORD *)(*v6 + 40) + 8);
        v521 = *(_BYTE *)(v246 + 3384) != 2;
        v522 = *(_BYTE *)(v246 + 3358) & 1;
        v177 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v521, v244, v245, (WebCore::SelectorChecker::CheckingContext *)v523, v4);
        if (v177)
          v520 = WebCore::selectorSpecificity(v244, (const WebCore::CSSSelector *)v3);
      }
      v178 = v533;
      if (v533)
        v179 = 1;
      else
        v179 = v177;
      v6 = (_QWORD *)v512;
      if ((*((_BYTE *)v159 + 7) & 2) != 0 && v179)
        *(_BYTE *)(v512 + 1688) = 1;
      *(_DWORD *)(v512 + 1848) |= v178;
      v180 = v530;
      v181 = HIDWORD(v531);
      if (HIDWORD(v531))
      {
        v220 = *(unsigned int *)(v512 + 1716);
        v221 = v220 + HIDWORD(v531);
        v222 = *(unsigned int *)(v512 + 1712);
        if (v221 > v222)
        {
          v258 = v222 + (v222 >> 2);
          if (v258 >= 0x10)
            v259 = v258 + 1;
          else
            v259 = 16;
          if (v259 <= v221)
            v260 = v220 + HIDWORD(v531);
          else
            v260 = v259;
          v499 = (WTF *)(v512 + 1720);
          v501 = *(WTF **)(v512 + 1704);
          if (v260 < 9)
          {
            v261 = (_OWORD *)(v512 + 1720);
            *(_QWORD *)(v512 + 1704) = v499;
            *(_DWORD *)(v512 + 1712) = 8;
          }
          else
          {
            if (v260 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x194376B0CLL);
            }
            v261 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v260));
            *(_DWORD *)(v512 + 1712) = v260;
            *(_QWORD *)(v512 + 1704) = v261;
          }
          v262 = v501;
          if (v499 == v501 && v501)
          {
            v6 = (_QWORD *)v512;
            if ((_DWORD)v220)
            {
              v263 = 16 * v220;
              do
              {
                v264 = *(_OWORD *)v262;
                v262 = (WTF *)((char *)v262 + 16);
                *v261++ = v264;
                v263 -= 16;
              }
              while (v263);
            }
          }
          else
          {
            if ((_DWORD)v220)
            {
              v293 = 16 * v220;
              v294 = v501;
              do
              {
                v295 = *(_OWORD *)v294;
                v294 = (WTF *)((char *)v294 + 16);
                *v261++ = v295;
                v293 -= 16;
              }
              while (v293);
            }
            v6 = (_QWORD *)v512;
            if (v499 != v501 && v501)
            {
              if (*(WTF **)(v512 + 1704) == v501)
              {
                *(_QWORD *)(v512 + 1704) = 0;
                *(_DWORD *)(v512 + 1712) = 0;
              }
              WTF::fastFree(v501, v3);
              v6 = (_QWORD *)v512;
            }
          }
        }
        v223 = *((unsigned int *)v6 + 429);
        if (v221 < v223)
        {
          __break(0xC471u);
          JUMPOUT(0x194376B04);
        }
        v192 = (__n128 *)(v6[213] + 16 * v223);
        v193 = 16 * v181;
        do
        {
          v191 = *(__n128 *)v180;
          v180 = (WTF *)((char *)v180 + 16);
          v4 = v191;
          *v192++ = v191;
          v193 -= 16;
        }
        while (v193);
        *((_DWORD *)v6 + 429) = v221;
        v180 = v530;
      }
      v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
      if (v532 != (_BYTE *)v180 && v180 != 0)
      {
        v530 = 0;
        LODWORD(v531) = 0;
        WTF::fastFree(v180, v3);
        v6 = (_QWORD *)v512;
      }
      result = (uint64_t)v523[1];
      v523[1] = 0;
      v155 = v503;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
          v6 = (_QWORD *)v512;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      if (!v177)
        goto LABEL_255;
      goto LABEL_281;
    }
  }
LABEL_10:
  if (!v11)
    goto LABEL_102;
  v14 = *(_QWORD *)(v11 + 16);
  if (!v14)
    goto LABEL_98;
  v15 = *(unsigned int *)(v14 + 12);
  if (!(_DWORD)v15 || !*(_QWORD *)(*v5 + 16))
    goto LABEL_98;
  v506 = v10;
  v16 = v14 + 16;
  v493 = (__n128 *)(v6 + 9);
  v492 = (WTF *)(v6 + 215);
  v496 = v6 + 14;
  v17 = v14 + 16 + 8 * v15;
  do
  {
    v18 = *(_QWORD *)(*v5 + 16);
    if (v18)
    {
      v19 = 0;
      v20 = *(_DWORD *)(v18 - 8);
      v21 = (*(_DWORD *)(*(_QWORD *)v16 + 16) >> 8) & v20;
      v22 = *(_QWORD *)(v18 + 16 * v21);
      if (v22)
      {
        while (v22 == -1 || v22 != *(_QWORD *)v16)
        {
          v21 = (++v19 + (_DWORD)v21) & v20;
          v22 = *(_QWORD *)(v18 + 16 * v21);
          if (!v22)
            goto LABEL_22;
        }
        v24 = v18 + 16 * v21;
        v25 = *(_QWORD *)(v24 + 8);
        if (v25)
        {
          v26 = *(unsigned int *)(v25 + 12);
          if ((_DWORD)v26)
          {
            v27 = 0;
            v494 = *(_QWORD *)(v24 + 8);
            v495 = v17;
            v497 = *(unsigned int *)(v25 + 12);
            while (1)
            {
              v28 = *(_QWORD *)v25 + 32 * v27;
              v30 = (unsigned __int16 *)(v28 + 8);
              v29 = *(_QWORD *)(v28 + 8);
              if (v29 < 0 && ((v29 & 0x100000000000000) != 0 || !*((_BYTE *)v6 + 96)))
              {
                v31 = v6[5];
                if (!v31)
                  goto LABEL_34;
                v32 = *(_QWORD *)v25 + 32 * v27;
                v35 = *(_DWORD *)(v32 + 16);
                v33 = (unsigned int *)(v32 + 16);
                v34 = v35;
                if (!v35
                  || (v48 = v31 + 16, *(_BYTE *)(v31 + 16 + (v34 & 0xFFF)))
                  && *(_BYTE *)(v48 + ((v34 >> 16) & 0xFFF))
                  && ((v49 = v33[1], !(_DWORD)v49)
                   || *(_BYTE *)(v48 + (v49 & 0xFFF))
                   && *(_BYTE *)(v48 + ((v49 >> 16) & 0xFFF))
                   && ((v152 = v33[2], !(_DWORD)v152)
                    || *(_BYTE *)(v48 + (v152 & 0xFFF))
                    && *(_BYTE *)(v48 + ((v152 >> 16) & 0xFFF))
                    && ((v153 = v33[3], !(_DWORD)v153)
                     || *(_BYTE *)(v48 + (v153 & 0xFFF)) && *(_BYTE *)(v48 + ((v153 >> 16) & 0xFFF))))))
                {
LABEL_34:
                  v36 = (_DWORD *)*v5;
                  if (!*(_DWORD *)(*v5 + 748))
                    goto LABEL_35;
                  result = WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v6, *(_QWORD *)v25 + 32 * v27, v5);
                  v6 = (_QWORD *)v512;
                  if ((_DWORD)result)
                    break;
                }
              }
LABEL_28:
              if (++v27 == v26)
                goto LABEL_22;
            }
            v36 = (_DWORD *)*v5;
LABEL_35:
            LOBYTE(v516) = 0;
            v519 = 0;
            if (v36[195])
            {
              result = (uint64_t)WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v523, v6, (WTF::StringImpl *)v28, v36);
              if (!LOBYTE(v523[0]))
              {
                if (v524.n128_u8[8])
                {
                  result = (uint64_t)v523[1];
                  if (v523[1])
                    result = WTF::fastFree(v523[1], v3);
                }
                v5 = v511;
                v6 = (_QWORD *)v512;
                v25 = v494;
                goto LABEL_46;
              }
              result = std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v516, (uint64_t *)&v523[1]);
              if (v524.n128_u8[8])
              {
                result = (uint64_t)v523[1];
                if (v523[1])
                  result = WTF::fastFree(v523[1], v3);
              }
              v5 = v511;
              v6 = (_QWORD *)v512;
              v25 = v494;
              v26 = v497;
            }
            v37 = *(_QWORD *)v28;
            v38 = *(_QWORD *)(*(_QWORD *)v28 + 8);
            v39 = *(_DWORD *)(v38 + 4);
            if ((v39 & 8) != 0)
              v40 = *(_DWORD *)(v38 + 28);
            else
              v40 = v39 >> 4;
            if (!v40 && !*((_BYTE *)v6 + 48))
              goto LABEL_47;
            v513 = v6;
            v514 = (WTF::StringImpl *)v28;
            v515 = v5;
            if (v519)
            {
              if (v518)
              {
                v302 = (uint64_t *)v516;
                v303 = (uint64_t *)((char *)v516 + 16 * v518);
                do
                {
                  v304 = *v302;
                  v305 = v302[1];
                  v302 += 2;
                  result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v513, v304, v305, v4);
                  v6 = (_QWORD *)v512;
                }
                while (v302 != v303);
              }
              goto LABEL_45;
            }
            v520 = 0;
            v41 = *((_BYTE *)v5 + 8);
            v42 = (*(_QWORD *)v30 >> 53) & 7;
            if ((_DWORD)v42 && (*(_WORD *)(*v6 + 28) & 0x10) != 0)
            {
              switch((_DWORD)v42)
              {
                case 4:
                  v520 = 1;
                  break;
                case 3:
                  v520 = 256;
                  break;
                case 2:
                  v520 = 0x10000;
                  break;
              }
              goto LABEL_73;
            }
            v43 = WORD1(*(_QWORD *)v30);
            v44 = *(_QWORD **)(v37 + 24);
            if (!v44)
            {
              v248 = *(unsigned int **)(v37 + 16);
              if (!v248)
                goto LABEL_887;
              v249 = *v248;
              if ((*v248 & 0x20000) != 0)
              {
                v251 = 1;
              }
              else
              {
                v250 = v248 + 4;
                v251 = 1;
                do
                {
                  v251 += (v249 >> 19) & 1;
                  v252 = *v250;
                  v250 += 4;
                  v249 = v252;
                }
                while ((v252 & 0x20000) == 0);
              }
              if (v251 <= v43)
              {
LABEL_887:
                __break(0xC471u);
                JUMPOUT(0x19437667CLL);
              }
              v253 = v251;
              v254 = 24 * v251;
              v255 = (_QWORD *)WTF::fastMalloc((WTF *)(v254 + 16));
              *v255 = 24;
              v255[1] = v253;
              v44 = v255 + 2;
              bzero(v255 + 2, 24 * ((v254 - 24) / 0x18uLL) + 24);
              v256 = *(_QWORD *)(v37 + 24);
              *(_QWORD *)(v37 + 24) = v44;
              if (v256)
              {
                v257 = *(_QWORD *)(v256 - 8);
                if (v257)
                {
                  v69 = v256 + 24 * v257;
                  do
                  {
                    v66 = *(unsigned int **)(v69 - 8);
                    *(_QWORD *)(v69 - 8) = 0;
                    if (v66)
                    {
                      do
                      {
                        v67 = __ldaxr(v66);
                        v68 = v67 - 1;
                      }
                      while (__stlxr(v68, v66));
                      if (!v68)
                      {
                        atomic_store(1u, v66);
                        v523[0] = (WTF::StringImpl *)v66;
                        WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v523);
                      }
                    }
                    v69 -= 24;
                  }
                  while (v69 != v256);
                }
                WTF::fastFree((WTF *)(v256 - 16), v296);
                v44 = *(_QWORD **)(v37 + 24);
              }
              v6 = (_QWORD *)v512;
            }
            v45 = v43;
            v46 = &v44[3 * v43];
            v47 = *v46;
            if (!*v46)
            {
              if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
              {
                *v46 = 1;
                v6 = (_QWORD *)v512;
                goto LABEL_54;
              }
              WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v523, (WebCore *)(*(_QWORD *)(*(_QWORD *)v28 + 16) + 16 * *v30), 0);
              *v46 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v523, (int **)&v44[3 * v45 + 1]);
              WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v523, v247);
              v47 = *v46;
              v6 = (_QWORD *)v512;
            }
            if (v47 == 2)
            {
              result = ((uint64_t (*)(_QWORD, unsigned int *))v44[3 * v45 + 1])(*v6, &v520);
              v6 = (_QWORD *)v512;
              v25 = v494;
              v17 = v495;
              if (!(_DWORD)result)
              {
LABEL_45:
                v5 = v511;
LABEL_46:
                v26 = v497;
LABEL_47:
                if (v519)
                {
                  result = (uint64_t)v516;
                  if (v516)
                  {
                    v516 = 0;
                    v517 = 0;
                    result = WTF::fastFree((WTF *)result, v3);
                    v6 = (_QWORD *)v512;
                  }
                }
                v12 = (uint64_t **)MEMORY[0x1E0CBF2F8];
                goto LABEL_28;
              }
              if ((*(_BYTE *)(v28 + 15) & 2) != 0)
                *(_BYTE *)(v512 + 1688) = 1;
LABEL_73:
              v56 = *v515;
              v57 = *((_DWORD *)v514 + 3) & 0x1FFFFF;
              if (v57 < *(unsigned int *)(*v515 + 716))
              {
                v300 = *(_DWORD *)(*(_QWORD *)(v56 + 704) + 4 * v57);
                if (v300)
                {
                  v301 = v300 - 1;
                  if (*(_DWORD *)(v56 + 700) <= v301)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194376AE4);
                  }
                  v58 = *(_WORD *)(*(_QWORD *)(v56 + 688) + 24 * v301 + 20);
                }
                else
                {
                  v58 = -1;
                }
                v6 = (_QWORD *)v512;
                v25 = v494;
              }
              else
              {
                v58 = -1;
              }
              v523[0] = v514;
              v523[1] = (WTF::StringImpl *)(v520 | 0xFFFFFFFF00000000);
              v524.n128_u8[0] = *((_BYTE *)v515 + 8);
              v524.n128_u16[1] = v58;
              v59 = *((unsigned int *)v6 + 31);
              if ((_DWORD)v59 == *((_DWORD *)v6 + 30))
              {
                result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v496, (void *)(v59 + 1), (unint64_t)v523);
                v6 = (_QWORD *)v512;
                v60 = *(_QWORD *)(v512 + 112) + 24 * *(unsigned int *)(v512 + 124);
                v4 = *(__n128 *)result;
                v61 = *(_QWORD *)(result + 16);
              }
              else
              {
                v60 = *v496 + 24 * v59;
                v4 = *(__n128 *)v523;
                v61 = v524.n128_u64[0];
              }
              *(_QWORD *)(v60 + 16) = v61;
              *(__n128 *)v60 = v4;
              ++*((_DWORD *)v6 + 31);
              goto LABEL_45;
            }
LABEL_54:
            LOBYTE(v523[0]) = *((_BYTE *)v6 + 104);
            HIDWORD(v523[0]) = 0;
            v523[1] = 0;
            v524.n128_u8[0] = 0;
            v525 = 0;
            v526 = 0;
            v527 = 0;
            v528 = 0;
            v530 = (WTF *)v532;
            v531 = 8;
            v533 = 0;
            v534 = 0;
            if (*((_BYTE *)v6 + 96))
            {
              HIDWORD(v523[0]) = *((_DWORD *)v6 + 14);
              v62 = (WTF::StringImpl *)v6[8];
              if (v62)
                *(_DWORD *)v62 += 2;
              v523[1] = v62;
              v4 = *v493;
              v524 = *v493;
              v525 = v493[1].n128_u8[0];
            }
            HIBYTE(v528) = v41;
            v529 = v6[5];
            v526 = 0;
            if (*v46 == 3)
            {
              v50 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v44[3 * v45 + 1])(*v6, v523, &v520) != 0;
            }
            else
            {
              v208 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v28 + 16) + 16 * *v30);
              v209 = (const WebCore::Element *)*v6;
              v210 = *(_QWORD *)(*(_QWORD *)(*v6 + 40) + 8);
              v521 = *(_BYTE *)(v210 + 3384) != 2;
              v522 = *(_BYTE *)(v210 + 3358) & 1;
              v50 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v521, v208, v209, (WebCore::SelectorChecker::CheckingContext *)v523, v4);
              if (v50)
                v520 = WebCore::selectorSpecificity(v208, (const WebCore::CSSSelector *)v3);
            }
            v51 = v533;
            if (v533)
              v52 = 1;
            else
              v52 = v50;
            v6 = (_QWORD *)v512;
            if ((*((_BYTE *)v30 + 7) & 2) != 0 && v52)
              *(_BYTE *)(v512 + 1688) = 1;
            *(_DWORD *)(v512 + 1848) |= v51;
            v53 = v530;
            v54 = HIDWORD(v531);
            if (HIDWORD(v531))
            {
              v198 = *(unsigned int *)(v512 + 1716);
              v199 = v198 + HIDWORD(v531);
              v200 = *(unsigned int *)(v512 + 1712);
              if (v199 > v200)
              {
                v213 = v200 + (v200 >> 2);
                if (v213 >= 0x10)
                  v214 = v213 + 1;
                else
                  v214 = 16;
                if (v214 <= v199)
                  v215 = v198 + HIDWORD(v531);
                else
                  v215 = v214;
                v216 = *(WTF **)(v512 + 1704);
                if (v215 < 9)
                {
                  v217 = v492;
                  *(_QWORD *)(v512 + 1704) = v492;
                  *(_DWORD *)(v512 + 1712) = 8;
                }
                else
                {
                  if (v215 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194376ADCLL);
                  }
                  v217 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v215));
                  v6 = (_QWORD *)v512;
                  *(_DWORD *)(v512 + 1712) = v215;
                  *(_QWORD *)(v512 + 1704) = v217;
                }
                if (v492 == v216 && v216)
                {
                  if ((_DWORD)v198)
                  {
                    v218 = 16 * v198;
                    do
                    {
                      v219 = *(_OWORD *)v216;
                      v216 = (WTF *)((char *)v216 + 16);
                      *v217++ = v219;
                      v218 -= 16;
                    }
                    while (v218);
                  }
                }
                else
                {
                  if ((_DWORD)v198)
                  {
                    v276 = 16 * v198;
                    v277 = v216;
                    do
                    {
                      v278 = *(_OWORD *)v277;
                      v277 = (WTF *)((char *)v277 + 16);
                      *v217++ = v278;
                      v276 -= 16;
                    }
                    while (v276);
                  }
                  v6 = (_QWORD *)v512;
                  if (v492 != v216 && v216)
                  {
                    if (*(WTF **)(v512 + 1704) == v216)
                    {
                      *(_QWORD *)(v512 + 1704) = 0;
                      *(_DWORD *)(v512 + 1712) = 0;
                    }
                    WTF::fastFree(v216, v3);
                    v6 = (_QWORD *)v512;
                  }
                }
              }
              v201 = *((unsigned int *)v6 + 429);
              if (v199 < v201)
              {
                __break(0xC471u);
                JUMPOUT(0x194376AD4);
              }
              v64 = (__n128 *)(v6[213] + 16 * v201);
              v65 = 16 * v54;
              do
              {
                v63 = *(__n128 *)v53;
                v53 = (WTF *)((char *)v53 + 16);
                v4 = v63;
                *v64++ = v63;
                v65 -= 16;
              }
              while (v65);
              *((_DWORD *)v6 + 429) = v199;
              v53 = v530;
            }
            v17 = v495;
            if (v532 != (_BYTE *)v53 && v53 != 0)
            {
              v530 = 0;
              LODWORD(v531) = 0;
              WTF::fastFree(v53, v3);
              v6 = (_QWORD *)v512;
            }
            result = (uint64_t)v523[1];
            v523[1] = 0;
            v25 = v494;
            if (result)
            {
              if (*(_DWORD *)result == 2)
              {
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
                v6 = (_QWORD *)v512;
              }
              else
              {
                *(_DWORD *)result -= 2;
              }
            }
            if (!v50)
              goto LABEL_45;
            goto LABEL_73;
          }
        }
      }
    }
LABEL_22:
    v16 += 8;
  }
  while (v16 != v17);
  v11 = *(_QWORD *)(v7 + 104);
  v10 = v506;
  if (v11)
  {
LABEL_98:
    v70 = *(_DWORD *)(v11 + 4);
    if ((v70 & 1) != 0)
      v71 = *(_DWORD *)(v11 + 52);
    else
      v71 = v70 >> 5;
    if (v71)
    {
      v72 = *(_QWORD *)(*v5 + 24);
      if (v72)
      {
        if (*(_DWORD *)(v72 - 12))
        {
          v523[0] = (WTF::StringImpl *)&v524;
          v4.n128_u64[0] = 4;
          v523[1] = (WTF::StringImpl *)4;
          if ((v70 & 1) != 0)
          {
            v85 = *(_QWORD *)(v11 + 40);
            v86 = *(_DWORD *)(v11 + 52);
            if (v86)
              goto LABEL_125;
          }
          else
          {
            v85 = v11 + 32;
            v86 = v70 >> 5;
            if (v70 >> 5)
            {
LABEL_125:
              v87 = 0;
              do
              {
                v516 = 0;
                v320 = *v511;
                if ((_DWORD)v10)
                  v321 = (uint64_t *)(v320 + 32);
                else
                  v321 = (uint64_t *)(v320 + 24);
                v322 = *v321;
                if (v322)
                {
                  v323 = 0;
                  v324 = *(_DWORD *)(v322 - 8);
                  v325 = *(_QWORD *)(*(_QWORD *)(v85 + 16 * v87) + 24);
                  v326 = (*(_DWORD *)(v325 + 16) >> 8) & v324;
                  v327 = *(_QWORD *)(v322 + 16 * v326);
                  if (v327)
                  {
                    while (v327 == -1 || v327 != v325)
                    {
                      v326 = (++v323 + (_DWORD)v326) & v324;
                      v327 = *(_QWORD *)(v322 + 16 * v326);
                      if (!v327)
                        goto LABEL_561;
                    }
                    v318 = *(WTF **)(v322 + 16 * v326 + 8);
                    v516 = v318;
                    if (v318)
                    {
                      v331 = HIDWORD(v523[1]);
                      if (HIDWORD(v523[1]) == LODWORD(v523[1]))
                      {
                        result = (uint64_t)WTF::Vector<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*&>((uint64_t)v523, (unint64_t)&v516);
                        v6 = (_QWORD *)v512;
                      }
                      else
                      {
                        *((_QWORD *)v523[0] + HIDWORD(v523[1])) = v318;
                        HIDWORD(v523[1]) = v331 + 1;
                      }
                    }
                  }
                }
LABEL_561:
                v319 = v87 + 1;
                v87 = (v87 + 1);
              }
              while (v86 != v319);
              v329 = v523[0];
              if (HIDWORD(v523[1]))
              {
                v332 = 8 * HIDWORD(v523[1]);
                do
                {
                  v333 = *(_QWORD *)v329;
                  v329 = (WTF::StringImpl *)((char *)v329 + 8);
                  result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)v6, v333);
                  v6 = (_QWORD *)v512;
                  v332 -= 8;
                }
                while (v332);
                v329 = v523[0];
              }
              v330 = &v524 == (__n128 *)v329 || v329 == 0;
              v5 = v511;
              if (!v330)
              {
                v523[0] = 0;
                LODWORD(v523[1]) = 0;
                result = WTF::fastFree(v329, v3);
                v6 = (_QWORD *)v512;
              }
            }
          }
        }
      }
    }
  }
LABEL_102:
  if (*((_BYTE *)v6 + 96))
  {
    v3 = (uint64_t *)v6[8];
    if (v3 != *v12)
    {
      v298 = WebCore::Style::RuleSet::namedPseudoElementRules(*(_QWORD *)(*v5 + 64), (uint64_t)v3);
      result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(v512, v298);
      v6 = (_QWORD *)v512;
    }
  }
  if ((*(_WORD *)(v7 + 30) & 1) != 0)
  {
    v98 = *v5;
    v99 = *(unsigned int *)(*v5 + 84);
    if ((_DWORD)v99)
    {
      v100 = 0;
      v502 = *(unsigned int *)(*v5 + 84);
      v507 = *v5;
      while (1)
      {
        v101 = *(_QWORD *)(v98 + 72);
        v102 = v101 + 32 * v100;
        v104 = (unsigned __int16 *)(v102 + 8);
        v103 = *(_QWORD *)(v102 + 8);
        if (v103 < 0 && ((v103 & 0x100000000000000) != 0 || !*((_BYTE *)v6 + 96)))
        {
          v105 = v6[5];
          if (!v105)
            goto LABEL_150;
          v106 = v101 + 32 * v100;
          v109 = *(_DWORD *)(v106 + 16);
          v107 = (unsigned int *)(v106 + 16);
          v108 = v109;
          if (!v109
            || (v123 = v105 + 16, *(_BYTE *)(v105 + 16 + (v108 & 0xFFF)))
            && *(_BYTE *)(v123 + ((v108 >> 16) & 0xFFF))
            && ((v136 = v107[1], !(_DWORD)v136)
             || *(_BYTE *)(v123 + (v136 & 0xFFF))
             && *(_BYTE *)(v123 + ((v136 >> 16) & 0xFFF))
             && ((v202 = v107[2], !(_DWORD)v202)
              || *(_BYTE *)(v123 + (v202 & 0xFFF))
              && *(_BYTE *)(v123 + ((v202 >> 16) & 0xFFF))
              && ((v203 = v107[3], !(_DWORD)v203)
               || *(_BYTE *)(v123 + (v203 & 0xFFF)) && *(_BYTE *)(v123 + ((v203 >> 16) & 0xFFF))))))
          {
LABEL_150:
            v110 = (_DWORD *)*v5;
            if (!*(_DWORD *)(*v5 + 748))
              goto LABEL_151;
            result = WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v6, v102, v5);
            v6 = (_QWORD *)v512;
            if ((_DWORD)result)
              break;
          }
        }
LABEL_166:
        if (++v100 == v99)
          goto LABEL_106;
      }
      v110 = (_DWORD *)*v5;
LABEL_151:
      LOBYTE(v516) = 0;
      v519 = 0;
      if (v110[195])
      {
        result = (uint64_t)WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v523, v6, (WTF::StringImpl *)v102, v110);
        if (!LOBYTE(v523[0]))
        {
          if (v524.n128_u8[8])
          {
            result = (uint64_t)v523[1];
            if (v523[1])
              result = WTF::fastFree(v523[1], v3);
          }
          v5 = v511;
          v6 = (_QWORD *)v512;
          v99 = v502;
          v98 = v507;
          goto LABEL_162;
        }
        result = std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v516, (uint64_t *)&v523[1]);
        if (v524.n128_u8[8])
        {
          result = (uint64_t)v523[1];
          if (v523[1])
            result = WTF::fastFree(v523[1], v3);
        }
        v5 = v511;
        v6 = (_QWORD *)v512;
        v99 = v502;
        v98 = v507;
      }
      v111 = *(_QWORD *)v102;
      v112 = *(_QWORD *)(*(_QWORD *)v102 + 8);
      v113 = *(_DWORD *)(v112 + 4);
      if ((v113 & 8) != 0)
        v114 = *(_DWORD *)(v112 + 28);
      else
        v114 = v113 >> 4;
      if (!v114 && !*((_BYTE *)v6 + 48))
      {
LABEL_162:
        if (v519)
        {
          result = (uint64_t)v516;
          if (v516)
          {
            v516 = 0;
            v517 = 0;
            result = WTF::fastFree((WTF *)result, v3);
            v6 = (_QWORD *)v512;
          }
        }
        goto LABEL_166;
      }
      v513 = v6;
      v514 = (WTF::StringImpl *)v102;
      v515 = v5;
      if (v519)
      {
        if (v518)
        {
          v308 = (uint64_t *)v516;
          v309 = (uint64_t *)((char *)v516 + 16 * v518);
          do
          {
            v310 = *v308;
            v311 = v308[1];
            v308 += 2;
            result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v513, v310, v311, v4);
            v6 = (_QWORD *)v512;
          }
          while (v308 != v309);
        }
        goto LABEL_161;
      }
      v520 = 0;
      v115 = *((_BYTE *)v5 + 8);
      v116 = (*(_QWORD *)v104 >> 53) & 7;
      if ((_DWORD)v116 && (*(_WORD *)(*v6 + 28) & 0x10) != 0)
      {
        switch((_DWORD)v116)
        {
          case 4:
            v520 = 1;
            break;
          case 3:
            v520 = 256;
            break;
          case 2:
            v520 = 0x10000;
            break;
        }
        goto LABEL_187;
      }
      v117 = v10;
      v118 = WORD1(*(_QWORD *)v104);
      v119 = *(_QWORD **)(v111 + 24);
      if (!v119)
      {
        v266 = *(unsigned int **)(v111 + 16);
        if (!v266)
          goto LABEL_480;
        v267 = *v266;
        if ((*v266 & 0x20000) != 0)
        {
          v269 = 1;
        }
        else
        {
          v268 = v266 + 4;
          v269 = 1;
          do
          {
            v269 += (v267 >> 19) & 1;
            v270 = *v268;
            v268 += 4;
            v267 = v270;
          }
          while ((v270 & 0x20000) == 0);
        }
        if (v269 <= v118)
        {
LABEL_480:
          __break(0xC471u);
          JUMPOUT(0x1943766B4);
        }
        v271 = v269;
        v272 = 24 * v269;
        v273 = (_QWORD *)WTF::fastMalloc((WTF *)(v272 + 16));
        *v273 = 24;
        v273[1] = v271;
        v119 = v273 + 2;
        bzero(v273 + 2, 24 * ((v272 - 24) / 0x18uLL) + 24);
        v274 = *(_QWORD *)(v111 + 24);
        *(_QWORD *)(v111 + 24) = v119;
        if (v274)
        {
          v275 = *(_QWORD *)(v274 - 8);
          if (v275)
          {
            v144 = v274 + 24 * v275;
            do
            {
              v141 = *(unsigned int **)(v144 - 8);
              *(_QWORD *)(v144 - 8) = 0;
              if (v141)
              {
                do
                {
                  v142 = __ldaxr(v141);
                  v143 = v142 - 1;
                }
                while (__stlxr(v143, v141));
                if (!v143)
                {
                  atomic_store(1u, v141);
                  v523[0] = (WTF::StringImpl *)v141;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v523);
                }
              }
              v144 -= 24;
            }
            while (v144 != v274);
          }
          WTF::fastFree((WTF *)(v274 - 16), v297);
          v119 = *(_QWORD **)(v111 + 24);
        }
        v6 = (_QWORD *)v512;
      }
      v120 = v118;
      v121 = &v119[3 * v118];
      v122 = *v121;
      if (!*v121)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
        {
          *v121 = 1;
          v6 = (_QWORD *)v512;
          goto LABEL_168;
        }
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v523, (WebCore *)(*(_QWORD *)(*(_QWORD *)v102 + 16) + 16 * *v104), 0);
        *v121 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v523, (int **)&v119[3 * v118 + 1]);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v523, v265);
        v122 = *v121;
        v6 = (_QWORD *)v512;
      }
      if (v122 == 2)
      {
        v10 = v117;
        result = ((uint64_t (*)(_QWORD, unsigned int *))v119[3 * v120 + 1])(*v6, &v520);
        v6 = (_QWORD *)v512;
        v99 = v502;
        v98 = v507;
        if (!(_DWORD)result)
        {
LABEL_161:
          v5 = v511;
          goto LABEL_162;
        }
        if ((*(_BYTE *)(v102 + 15) & 2) != 0)
          *(_BYTE *)(v512 + 1688) = 1;
LABEL_187:
        v130 = *v515;
        v131 = *((_DWORD *)v514 + 3) & 0x1FFFFF;
        if (v131 < *(unsigned int *)(*v515 + 716))
        {
          v306 = *(_DWORD *)(*(_QWORD *)(v130 + 704) + 4 * v131);
          if (v306)
          {
            v307 = v306 - 1;
            if (*(_DWORD *)(v130 + 700) <= v307)
            {
              __break(0xC471u);
              JUMPOUT(0x194376AFCLL);
            }
            v132 = *(_WORD *)(*(_QWORD *)(v130 + 688) + 24 * v307 + 20);
          }
          else
          {
            v132 = -1;
          }
          v6 = (_QWORD *)v512;
          v99 = v502;
          v98 = v507;
        }
        else
        {
          v132 = -1;
        }
        result = (uint64_t)(v6 + 14);
        v523[0] = v514;
        v523[1] = (WTF::StringImpl *)(v520 | 0xFFFFFFFF00000000);
        v524.n128_u8[0] = *((_BYTE *)v515 + 8);
        v524.n128_u16[1] = v132;
        v133 = *((unsigned int *)v6 + 31);
        if ((_DWORD)v133 == *((_DWORD *)v6 + 30))
        {
          result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v133 + 1), (unint64_t)v523);
          v6 = (_QWORD *)v512;
          v134 = *(_QWORD *)(v512 + 112) + 24 * *(unsigned int *)(v512 + 124);
          v4 = *(__n128 *)result;
          v135 = *(_QWORD *)(result + 16);
        }
        else
        {
          v134 = *(_QWORD *)result + 24 * v133;
          v4 = *(__n128 *)v523;
          v135 = v524.n128_u64[0];
        }
        *(_QWORD *)(v134 + 16) = v135;
        *(__n128 *)v134 = v4;
        ++*((_DWORD *)v6 + 31);
        goto LABEL_161;
      }
LABEL_168:
      LOBYTE(v523[0]) = *((_BYTE *)v6 + 104);
      HIDWORD(v523[0]) = 0;
      v523[1] = 0;
      v524.n128_u8[0] = 0;
      v525 = 0;
      v526 = 0;
      v527 = 0;
      v528 = 0;
      v530 = (WTF *)v532;
      v531 = 8;
      v533 = 0;
      v534 = 0;
      if (*((_BYTE *)v6 + 96))
      {
        HIDWORD(v523[0]) = *((_DWORD *)v6 + 14);
        v137 = (WTF::StringImpl *)v6[8];
        if (v137)
          *(_DWORD *)v137 += 2;
        v523[1] = v137;
        v4 = *(__n128 *)(v6 + 9);
        v524 = v4;
        v525 = *((_BYTE *)v6 + 88);
      }
      HIBYTE(v528) = v115;
      v529 = v6[5];
      v526 = 0;
      if (*v121 == 3)
      {
        v124 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v119[3 * v118 + 1])(*v6, v523, &v520) != 0;
      }
      else
      {
        v224 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v102 + 16) + 16 * *v104);
        v225 = (const WebCore::Element *)*v6;
        v226 = *(_QWORD *)(*(_QWORD *)(*v6 + 40) + 8);
        v521 = *(_BYTE *)(v226 + 3384) != 2;
        v522 = *(_BYTE *)(v226 + 3358) & 1;
        v124 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v521, v224, v225, (WebCore::SelectorChecker::CheckingContext *)v523, v4);
        if (v124)
          v520 = WebCore::selectorSpecificity(v224, (const WebCore::CSSSelector *)v3);
      }
      v125 = v533;
      if (v533)
        v126 = 1;
      else
        v126 = v124;
      v6 = (_QWORD *)v512;
      if ((*((_BYTE *)v104 + 7) & 2) != 0 && v126)
        *(_BYTE *)(v512 + 1688) = 1;
      *(_DWORD *)(v512 + 1848) |= v125;
      v127 = v530;
      v128 = HIDWORD(v531);
      if (HIDWORD(v531))
      {
        v204 = *(unsigned int *)(v512 + 1716);
        v205 = v204 + HIDWORD(v531);
        v206 = *(unsigned int *)(v512 + 1712);
        if (v205 > v206)
        {
          v500 = (WTF *)(v512 + 1720);
          v232 = v206 + (v206 >> 2);
          if (v232 >= 0x10)
            v233 = v232 + 1;
          else
            v233 = 16;
          if (v233 <= v205)
            v234 = v204 + HIDWORD(v531);
          else
            v234 = v233;
          v235 = *(WTF **)(v512 + 1704);
          if (v234 < 9)
          {
            v236 = (_OWORD *)(v512 + 1720);
            *(_QWORD *)(v512 + 1704) = v500;
            *(_DWORD *)(v512 + 1712) = 8;
          }
          else
          {
            if (v234 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x194376AF4);
            }
            v498 = v234;
            v236 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v234));
            v6 = (_QWORD *)v512;
            *(_DWORD *)(v512 + 1712) = v498;
            *(_QWORD *)(v512 + 1704) = v236;
          }
          if (v500 == v235 && v235)
          {
            if ((_DWORD)v204)
            {
              v237 = 16 * v204;
              do
              {
                v238 = *(_OWORD *)v235;
                v235 = (WTF *)((char *)v235 + 16);
                *v236++ = v238;
                v237 -= 16;
              }
              while (v237);
            }
          }
          else
          {
            if ((_DWORD)v204)
            {
              v290 = 16 * v204;
              v291 = v235;
              do
              {
                v292 = *(_OWORD *)v291;
                v291 = (WTF *)((char *)v291 + 16);
                *v236++ = v292;
                v290 -= 16;
              }
              while (v290);
            }
            v6 = (_QWORD *)v512;
            if (v500 != v235 && v235)
            {
              if (*(WTF **)(v512 + 1704) == v235)
              {
                *(_QWORD *)(v512 + 1704) = 0;
                *(_DWORD *)(v512 + 1712) = 0;
              }
              WTF::fastFree(v235, v3);
              v6 = (_QWORD *)v512;
            }
          }
        }
        v207 = *((unsigned int *)v6 + 429);
        if (v205 < v207)
        {
          __break(0xC471u);
          JUMPOUT(0x194376AECLL);
        }
        v139 = (__n128 *)(v6[213] + 16 * v207);
        v140 = 16 * v128;
        do
        {
          v138 = *(__n128 *)v127;
          v127 = (WTF *)((char *)v127 + 16);
          v4 = v138;
          *v139++ = v138;
          v140 -= 16;
        }
        while (v140);
        *((_DWORD *)v6 + 429) = v205;
        v127 = v530;
      }
      if (v532 != (_BYTE *)v127 && v127 != 0)
      {
        v530 = 0;
        LODWORD(v531) = 0;
        WTF::fastFree(v127, v3);
        v6 = (_QWORD *)v512;
      }
      result = (uint64_t)v523[1];
      v523[1] = 0;
      v10 = v117;
      v99 = v502;
      v98 = v507;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
          v6 = (_QWORD *)v512;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      if (!v124)
        goto LABEL_161;
      goto LABEL_187;
    }
  }
LABEL_106:
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v227 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
    v228 = *(_QWORD *)(v227 + 528);
    if (v228)
    {
      v229 = *(_QWORD *)(v228 + 8);
      if (v229)
      {
        v230 = *(_QWORD *)(v229 + 24);
        if (v230)
        {
          v231 = *(_QWORD *)(v230 + 8);
          if (v231)
            goto LABEL_909;
        }
      }
    }
    v239 = *(_QWORD *)(v227 + 2632);
    if (v239)
    {
      v240 = *(_QWORD *)(v239 + 8);
      if (v240)
      {
        v241 = *(_QWORD *)(v240 + 528);
        if (v241)
        {
          v242 = *(_QWORD *)(v241 + 8);
          if (v242)
          {
            v243 = *(_QWORD *)(v242 + 24);
            if (v243)
            {
              v231 = *(_QWORD *)(v243 + 8);
              if (v231)
              {
LABEL_909:
                result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v231 + 80) + 8) + 112);
                if (result)
                {
                  result = WebCore::InspectorCSSAgent::forcePseudoState(result, v7, 29);
                  v6 = (_QWORD *)v512;
                  if ((result & 1) != 0)
                    goto LABEL_226;
                }
              }
            }
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v7 + 54) & 2) != 0
    && (result = WebCore::Element::isUserActionElementFocused((WebCore::Element *)v7),
        v6 = (_QWORD *)v512,
        (result & 1) != 0)
    || (*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v91 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0
    && (*(_BYTE *)(v91 + 192) & 0x10) != 0)
  {
    v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 528);
    if (v145)
    {
      v146 = *(_QWORD *)(v145 + 8);
      if (v146)
      {
        v147 = *(_QWORD *)(*(_QWORD *)(v146 + 296) + 3064);
        if ((*(_WORD *)(v147 + 256) & 4) != 0)
        {
          v148 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v147 + 32) + 8) + 528);
          if (v148)
          {
            v149 = *(_QWORD *)(v148 + 8);
            if (v149)
            {
              v150 = *(_QWORD *)(v149 + 24);
              if (v150)
              {
                v151 = *(_QWORD *)(v150 + 8);
                if (v151)
                {
                  if ((*(_WORD *)(*(_QWORD *)(v151 + 72) + 26) & 1) != 0)
                  {
LABEL_226:
                    result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)v6, *v5 + 312);
                    v6 = (_QWORD *)v512;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v7 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 1272))
  {
    result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)v6, *v5 + 360);
    v6 = (_QWORD *)v512;
  }
  v74 = *v5;
  v75 = (uint64_t *)(*v5 + 40);
  if ((_DWORD)v10)
    v75 = (uint64_t *)(*v5 + 48);
  v76 = *v75;
  if (!v76)
    goto LABEL_120;
  v77 = 0;
  v78 = *(_DWORD *)(v76 - 8);
  v79 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
  v80 = (*(_DWORD *)(v79 + 16) >> 8) & v78;
  v81 = *(_QWORD *)(v76 + 16 * v80);
  if (!v81)
    goto LABEL_120;
  while (v81 == -1 || v81 != v79)
  {
    v80 = (++v77 + (_DWORD)v80) & v78;
    v81 = *(_QWORD *)(v76 + 16 * v80);
    if (!v81)
      goto LABEL_120;
  }
  v88 = *(_QWORD *)(v76 + 16 * v80 + 8);
  if (!v88 || (v89 = *(unsigned int *)(v88 + 12), !(_DWORD)v89))
  {
LABEL_120:
    v83 = *(unsigned int *)(v74 + 420);
    if (!(_DWORD)v83)
      return result;
    goto LABEL_121;
  }
  for (j = 0; j != v89; ++j)
  {
    v335 = *(_QWORD *)v88 + 32 * j;
    v337 = (unsigned __int16 *)(v335 + 8);
    v336 = *(_QWORD *)(v335 + 8);
    if ((v336 & 0x8000000000000000) == 0 || (v336 & 0x100000000000000) == 0 && *((_BYTE *)v6 + 96))
      continue;
    v338 = v6[5];
    if (v338)
    {
      v339 = *(_QWORD *)v88 + 32 * j;
      v342 = *(_DWORD *)(v339 + 16);
      v340 = (unsigned int *)(v339 + 16);
      v341 = v342;
      if (v342)
      {
        v334 = v338 + 16;
        if (!*(_BYTE *)(v338 + 16 + (v341 & 0xFFF)))
          continue;
        if (!*(_BYTE *)(v334 + ((v341 >> 16) & 0xFFF)))
          continue;
        v366 = v340[1];
        if ((_DWORD)v366)
        {
          if (!*(_BYTE *)(v334 + (v366 & 0xFFF)))
            continue;
          if (!*(_BYTE *)(v334 + ((v366 >> 16) & 0xFFF)))
            continue;
          v375 = v340[2];
          if ((_DWORD)v375)
          {
            if (!*(_BYTE *)(v334 + (v375 & 0xFFF)))
              continue;
            if (!*(_BYTE *)(v334 + ((v375 >> 16) & 0xFFF)))
              continue;
            v376 = v340[3];
            if ((_DWORD)v376)
            {
              if (!*(_BYTE *)(v334 + (v376 & 0xFFF)) || !*(_BYTE *)(v334 + ((v376 >> 16) & 0xFFF)))
                continue;
            }
          }
        }
      }
    }
    v343 = (_DWORD *)*v5;
    if (*(_DWORD *)(*v5 + 748))
    {
      result = WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v6, *(_QWORD *)v88 + 32 * j, v5);
      v6 = (_QWORD *)v512;
      if (!(_DWORD)result)
        continue;
      v343 = (_DWORD *)*v5;
    }
    LOBYTE(v516) = 0;
    v519 = 0;
    if (v343[195])
    {
      result = (uint64_t)WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v523, v6, (WTF::StringImpl *)v335, v343);
      if (!LOBYTE(v523[0]))
      {
        if (v524.n128_u8[8])
        {
          result = (uint64_t)v523[1];
          if (v523[1])
            result = WTF::fastFree(v523[1], v3);
        }
        v5 = v511;
        v6 = (_QWORD *)v512;
        goto LABEL_604;
      }
      result = std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v516, (uint64_t *)&v523[1]);
      if (v524.n128_u8[8])
      {
        result = (uint64_t)v523[1];
        if (v523[1])
          result = WTF::fastFree(v523[1], v3);
      }
      v5 = v511;
      v6 = (_QWORD *)v512;
    }
    v344 = *(_QWORD *)v335;
    v345 = *(_QWORD *)(*(_QWORD *)v335 + 8);
    v346 = *(_DWORD *)(v345 + 4);
    if ((v346 & 8) != 0)
      v347 = *(_DWORD *)(v345 + 28);
    else
      v347 = v346 >> 4;
    if (v347 || *((_BYTE *)v6 + 48))
    {
      v513 = v6;
      v514 = (WTF::StringImpl *)v335;
      v515 = v5;
      if (v519)
      {
        if (v518)
        {
          v408 = (uint64_t *)v516;
          v409 = (uint64_t *)((char *)v516 + 16 * v518);
          do
          {
            v410 = *v408;
            v411 = v408[1];
            v408 += 2;
            result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v513, v410, v411, v4);
            v6 = (_QWORD *)v512;
          }
          while (v408 != v409);
        }
        goto LABEL_603;
      }
      v520 = 0;
      v348 = *((_BYTE *)v5 + 8);
      v349 = (*(_QWORD *)v337 >> 53) & 7;
      if ((_DWORD)v349 && (*(_WORD *)(*v6 + 28) & 0x10) != 0)
      {
        switch((_DWORD)v349)
        {
          case 4:
            v520 = 1;
            break;
          case 3:
            v520 = 256;
            break;
          case 2:
            v520 = 0x10000;
            break;
        }
        goto LABEL_626;
      }
      v350 = WORD1(*(_QWORD *)v337);
      v351 = *(_QWORD **)(v344 + 24);
      if (!v351)
      {
        v392 = *(unsigned int **)(v344 + 16);
        if (!v392)
          goto LABEL_710;
        v393 = *v392;
        if ((*v392 & 0x20000) != 0)
        {
          v395 = 1;
        }
        else
        {
          v394 = v392 + 4;
          v395 = 1;
          do
          {
            v395 += (v393 >> 19) & 1;
            v396 = *v394;
            v394 += 4;
            v393 = v396;
          }
          while ((v396 & 0x20000) == 0);
        }
        if (v395 <= v350)
        {
LABEL_710:
          __break(0xC471u);
          JUMPOUT(0x194377348);
        }
        v397 = v395;
        v398 = 24 * v395;
        v399 = (_QWORD *)WTF::fastMalloc((WTF *)(v398 + 16));
        *v399 = 24;
        v399[1] = v397;
        v351 = v399 + 2;
        bzero(v399 + 2, 24 * ((v398 - 24) / 0x18uLL) + 24);
        v400 = *(_QWORD *)(v344 + 24);
        *(_QWORD *)(v344 + 24) = v351;
        if (v400)
        {
          v401 = *(_QWORD *)(v400 - 8);
          if (v401)
          {
            v374 = v400 + 24 * v401;
            do
            {
              v371 = *(unsigned int **)(v374 - 8);
              *(_QWORD *)(v374 - 8) = 0;
              if (v371)
              {
                do
                {
                  v372 = __ldaxr(v371);
                  v373 = v372 - 1;
                }
                while (__stlxr(v373, v371));
                if (!v373)
                {
                  atomic_store(1u, v371);
                  v523[0] = (WTF::StringImpl *)v371;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v523);
                }
              }
              v374 -= 24;
            }
            while (v374 != v400);
          }
          WTF::fastFree((WTF *)(v400 - 16), v405);
          v351 = *(_QWORD **)(v344 + 24);
        }
        v6 = (_QWORD *)v512;
      }
      v352 = &v351[3 * v350];
      v353 = *v352;
      if (!*v352)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
        {
          *v352 = 1;
          v6 = (_QWORD *)v512;
          goto LABEL_607;
        }
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v523, (WebCore *)(*(_QWORD *)(*(_QWORD *)v335 + 16) + 16 * *v337), 0);
        *v352 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v523, (int **)&v351[3 * v350 + 1]);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v523, v391);
        v353 = *v352;
        v6 = (_QWORD *)v512;
      }
      if (v353 == 2)
      {
        result = ((uint64_t (*)(_QWORD, unsigned int *))v351[3 * v350 + 1])(*v6, &v520);
        v6 = (_QWORD *)v512;
        if (!(_DWORD)result)
        {
LABEL_603:
          v5 = v511;
          goto LABEL_604;
        }
        if ((*(_BYTE *)(v335 + 15) & 2) != 0)
          *(_BYTE *)(v512 + 1688) = 1;
LABEL_626:
        v360 = *v515;
        v361 = *((_DWORD *)v514 + 3) & 0x1FFFFF;
        if (v361 < *(unsigned int *)(*v515 + 716))
        {
          v406 = *(_DWORD *)(*(_QWORD *)(v360 + 704) + 4 * v361);
          if (v406)
          {
            v407 = v406 - 1;
            if (*(_DWORD *)(v360 + 700) <= v407)
            {
              __break(0xC471u);
              JUMPOUT(0x194377498);
            }
            v362 = *(_WORD *)(*(_QWORD *)(v360 + 688) + 24 * v407 + 20);
          }
          else
          {
            v362 = -1;
          }
          v6 = (_QWORD *)v512;
        }
        else
        {
          v362 = -1;
        }
        result = (uint64_t)(v6 + 14);
        v523[0] = v514;
        v523[1] = (WTF::StringImpl *)(v520 | 0xFFFFFFFF00000000);
        v524.n128_u8[0] = *((_BYTE *)v515 + 8);
        v524.n128_u16[1] = v362;
        v363 = *((unsigned int *)v6 + 31);
        if ((_DWORD)v363 == *((_DWORD *)v6 + 30))
        {
          result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v363 + 1), (unint64_t)v523);
          v6 = (_QWORD *)v512;
          v364 = *(_QWORD *)(v512 + 112) + 24 * *(unsigned int *)(v512 + 124);
          v4 = *(__n128 *)result;
          v365 = *(_QWORD *)(result + 16);
        }
        else
        {
          v364 = *(_QWORD *)result + 24 * v363;
          v4 = *(__n128 *)v523;
          v365 = v524.n128_u64[0];
        }
        *(_QWORD *)(v364 + 16) = v365;
        *(__n128 *)v364 = v4;
        ++*((_DWORD *)v6 + 31);
        goto LABEL_603;
      }
LABEL_607:
      LOBYTE(v523[0]) = *((_BYTE *)v6 + 104);
      HIDWORD(v523[0]) = 0;
      v523[1] = 0;
      v524.n128_u8[0] = 0;
      v525 = 0;
      v526 = 0;
      v527 = 0;
      v528 = 0;
      v530 = (WTF *)v532;
      v531 = 8;
      v533 = 0;
      v534 = 0;
      if (*((_BYTE *)v6 + 96))
      {
        HIDWORD(v523[0]) = *((_DWORD *)v6 + 14);
        v367 = (WTF::StringImpl *)v6[8];
        if (v367)
          *(_DWORD *)v367 += 2;
        v523[1] = v367;
        v4 = *(__n128 *)(v6 + 9);
        v524 = v4;
        v525 = *((_BYTE *)v6 + 88);
      }
      HIBYTE(v528) = v348;
      v529 = v6[5];
      v526 = 0;
      if (*v352 == 3)
      {
        v354 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v351[3 * v350 + 1])(*v6, v523, &v520) != 0;
      }
      else
      {
        v381 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v335 + 16) + 16 * *v337);
        v382 = (const WebCore::Element *)*v6;
        v383 = *(_QWORD *)(*(_QWORD *)(*v6 + 40) + 8);
        v521 = *(_BYTE *)(v383 + 3384) != 2;
        v522 = *(_BYTE *)(v383 + 3358) & 1;
        v354 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v521, v381, v382, (WebCore::SelectorChecker::CheckingContext *)v523, v4);
        if (v354)
          v520 = WebCore::selectorSpecificity(v381, (const WebCore::CSSSelector *)v3);
      }
      v355 = v533;
      if (v533)
        v356 = 1;
      else
        v356 = v354;
      v6 = (_QWORD *)v512;
      if ((*((_BYTE *)v337 + 7) & 2) != 0 && v356)
        *(_BYTE *)(v512 + 1688) = 1;
      *(_DWORD *)(v512 + 1848) |= v355;
      v357 = v530;
      v358 = HIDWORD(v531);
      if (HIDWORD(v531))
      {
        v377 = *(unsigned int *)(v512 + 1716);
        v378 = v377 + HIDWORD(v531);
        v379 = *(unsigned int *)(v512 + 1712);
        if (v378 > v379)
        {
          v509 = (WTF *)(v512 + 1720);
          v384 = v379 + (v379 >> 2);
          if (v384 >= 0x10)
            v385 = v384 + 1;
          else
            v385 = 16;
          if (v385 <= v378)
            v386 = v377 + HIDWORD(v531);
          else
            v386 = v385;
          v387 = *(WTF **)(v512 + 1704);
          if (v386 < 9)
          {
            v388 = (_OWORD *)(v512 + 1720);
            *(_QWORD *)(v512 + 1704) = v509;
            *(_DWORD *)(v512 + 1712) = 8;
          }
          else
          {
            if (v386 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x194377490);
            }
            v504 = v386;
            v388 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v386));
            v6 = (_QWORD *)v512;
            *(_DWORD *)(v512 + 1712) = v504;
            *(_QWORD *)(v512 + 1704) = v388;
          }
          if (v509 == v387 && v387)
          {
            if ((_DWORD)v377)
            {
              v389 = 16 * v377;
              do
              {
                v390 = *(_OWORD *)v387;
                v387 = (WTF *)((char *)v387 + 16);
                *v388++ = v390;
                v389 -= 16;
              }
              while (v389);
            }
          }
          else
          {
            if ((_DWORD)v377)
            {
              v402 = 16 * v377;
              v403 = v387;
              do
              {
                v404 = *(_OWORD *)v403;
                v403 = (WTF *)((char *)v403 + 16);
                *v388++ = v404;
                v402 -= 16;
              }
              while (v402);
            }
            v6 = (_QWORD *)v512;
            if (v509 != v387 && v387)
            {
              if (*(WTF **)(v512 + 1704) == v387)
              {
                *(_QWORD *)(v512 + 1704) = 0;
                *(_DWORD *)(v512 + 1712) = 0;
              }
              WTF::fastFree(v387, v3);
              v6 = (_QWORD *)v512;
            }
          }
        }
        v380 = *((unsigned int *)v6 + 429);
        if (v378 < v380)
        {
          __break(0xC471u);
          JUMPOUT(0x194377488);
        }
        v369 = (__n128 *)(v6[213] + 16 * v380);
        v370 = 16 * v358;
        do
        {
          v368 = *(__n128 *)v357;
          v357 = (WTF *)((char *)v357 + 16);
          v4 = v368;
          *v369++ = v368;
          v370 -= 16;
        }
        while (v370);
        *((_DWORD *)v6 + 429) = v378;
        v357 = v530;
      }
      if (v532 != (_BYTE *)v357 && v357 != 0)
      {
        v530 = 0;
        LODWORD(v531) = 0;
        WTF::fastFree(v357, v3);
        v6 = (_QWORD *)v512;
      }
      result = (uint64_t)v523[1];
      v523[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
        {
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
          v6 = (_QWORD *)v512;
        }
        else
        {
          *(_DWORD *)result -= 2;
        }
      }
      if (!v354)
        goto LABEL_603;
      goto LABEL_626;
    }
LABEL_604:
    if (v519)
    {
      result = (uint64_t)v516;
      if (v516)
      {
        v516 = 0;
        v517 = 0;
        result = WTF::fastFree((WTF *)result, v3);
        v6 = (_QWORD *)v512;
      }
    }
  }
  v74 = *v5;
  v83 = *(unsigned int *)(*v5 + 420);
  if ((_DWORD)v83)
  {
LABEL_121:
    for (k = 0; k != v83; ++k)
    {
      while (1)
      {
        v413 = *(_QWORD *)(v74 + 408);
        v414 = v413 + 32 * k;
        v416 = (unsigned __int16 *)(v414 + 8);
        v415 = *(_QWORD *)(v414 + 8);
        if ((v415 & 0x8000000000000000) == 0 || (v415 & 0x100000000000000) == 0 && *((_BYTE *)v6 + 96))
          goto LABEL_738;
        v417 = v6[5];
        if (v417)
        {
          v418 = v413 + 32 * k;
          v421 = *(_DWORD *)(v418 + 16);
          v419 = (unsigned int *)(v418 + 16);
          v420 = v421;
          if (v421)
          {
            v412 = v417 + 16;
            if (!*(_BYTE *)(v417 + 16 + (v420 & 0xFFF)))
              goto LABEL_738;
            if (!*(_BYTE *)(v412 + ((v420 >> 16) & 0xFFF)))
              goto LABEL_738;
            v446 = v419[1];
            if ((_DWORD)v446)
            {
              if (!*(_BYTE *)(v412 + (v446 & 0xFFF)))
                goto LABEL_738;
              if (!*(_BYTE *)(v412 + ((v446 >> 16) & 0xFFF)))
                goto LABEL_738;
              v455 = v419[2];
              if ((_DWORD)v455)
              {
                if (!*(_BYTE *)(v412 + (v455 & 0xFFF)))
                  goto LABEL_738;
                if (!*(_BYTE *)(v412 + ((v455 >> 16) & 0xFFF)))
                  goto LABEL_738;
                v456 = v419[3];
                if ((_DWORD)v456)
                {
                  if (!*(_BYTE *)(v412 + (v456 & 0xFFF)) || !*(_BYTE *)(v412 + ((v456 >> 16) & 0xFFF)))
                    goto LABEL_738;
                }
              }
            }
          }
        }
        v422 = (_DWORD *)*v5;
        if (*(_DWORD *)(*v5 + 748))
          break;
LABEL_745:
        LOBYTE(v516) = 0;
        v519 = 0;
        if (v422[195])
        {
          result = (uint64_t)WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v523, v6, (WTF::StringImpl *)v414, v422);
          if (!LOBYTE(v523[0]))
          {
            if (v524.n128_u8[8])
            {
              result = (uint64_t)v523[1];
              if (v523[1])
                result = WTF::fastFree(v523[1], v3);
            }
            v5 = v511;
            v6 = (_QWORD *)v512;
            goto LABEL_756;
          }
          result = std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v516, (uint64_t *)&v523[1]);
          if (v524.n128_u8[8])
          {
            result = (uint64_t)v523[1];
            if (v523[1])
              result = WTF::fastFree(v523[1], v3);
          }
          v5 = v511;
          v6 = (_QWORD *)v512;
        }
        v423 = *(_QWORD *)v414;
        v424 = *(_QWORD *)(*(_QWORD *)v414 + 8);
        v425 = *(_DWORD *)(v424 + 4);
        if ((v425 & 8) != 0)
          v426 = *(_DWORD *)(v424 + 28);
        else
          v426 = v425 >> 4;
        if (v426 || *((_BYTE *)v6 + 48))
        {
          v513 = v6;
          v514 = (WTF::StringImpl *)v414;
          v515 = v5;
          if (v519)
          {
            if (v518)
            {
              v488 = (uint64_t *)v516;
              v489 = (uint64_t *)((char *)v516 + 16 * v518);
              do
              {
                v490 = *v488;
                v491 = v488[1];
                v488 += 2;
                result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v513, v490, v491, v4);
                v6 = (_QWORD *)v512;
              }
              while (v488 != v489);
            }
            goto LABEL_755;
          }
          v520 = 0;
          v427 = *((_BYTE *)v5 + 8);
          v428 = (*(_QWORD *)v416 >> 53) & 7;
          if ((_DWORD)v428 && (*(_WORD *)(*v6 + 28) & 0x10) != 0)
          {
            switch((_DWORD)v428)
            {
              case 4:
                v520 = 1;
                break;
              case 3:
                v520 = 256;
                break;
              case 2:
                v520 = 0x10000;
                break;
            }
            goto LABEL_779;
          }
          v429 = WORD1(*(_QWORD *)v416);
          v430 = *(_QWORD **)(v423 + 24);
          if (!v430)
          {
            v472 = *(unsigned int **)(v423 + 16);
            if (!v472)
              goto LABEL_861;
            v473 = *v472;
            if ((*v472 & 0x20000) != 0)
            {
              v475 = 1;
            }
            else
            {
              v474 = v472 + 4;
              v475 = 1;
              do
              {
                v475 += (v473 >> 19) & 1;
                v476 = *v474;
                v474 += 4;
                v473 = v476;
              }
              while ((v476 & 0x20000) == 0);
            }
            if (v475 <= v429)
            {
LABEL_861:
              __break(0xC471u);
              JUMPOUT(0x194377B58);
            }
            v477 = v475;
            v478 = 24 * v475;
            v479 = (_QWORD *)WTF::fastMalloc((WTF *)(v478 + 16));
            *v479 = 24;
            v479[1] = v477;
            v430 = v479 + 2;
            bzero(v479 + 2, 24 * ((v478 - 24) / 0x18uLL) + 24);
            v480 = *(_QWORD *)(v423 + 24);
            *(_QWORD *)(v423 + 24) = v430;
            if (v480)
            {
              v481 = *(_QWORD *)(v480 - 8);
              if (v481)
              {
                v454 = v480 + 24 * v481;
                do
                {
                  v451 = *(unsigned int **)(v454 - 8);
                  *(_QWORD *)(v454 - 8) = 0;
                  if (v451)
                  {
                    do
                    {
                      v452 = __ldaxr(v451);
                      v453 = v452 - 1;
                    }
                    while (__stlxr(v453, v451));
                    if (!v453)
                    {
                      atomic_store(1u, v451);
                      v523[0] = (WTF::StringImpl *)v451;
                      WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v523);
                    }
                  }
                  v454 -= 24;
                }
                while (v454 != v480);
              }
              WTF::fastFree((WTF *)(v480 - 16), v485);
              v430 = *(_QWORD **)(v423 + 24);
            }
            v6 = (_QWORD *)v512;
          }
          v431 = v429;
          v432 = &v430[3 * v429];
          v433 = *v432;
          if (*v432)
          {
LABEL_753:
            if (v433 == 2)
            {
              result = ((uint64_t (*)(_QWORD, unsigned int *))v430[3 * v431 + 1])(*v6, &v520);
              v6 = (_QWORD *)v512;
              if (!(_DWORD)result)
              {
LABEL_755:
                v5 = v511;
                goto LABEL_756;
              }
              if ((*(_BYTE *)(v414 + 15) & 2) != 0)
                *(_BYTE *)(v512 + 1688) = 1;
LABEL_779:
              v440 = *v515;
              v441 = *((_DWORD *)v514 + 3) & 0x1FFFFF;
              if (v441 < *(unsigned int *)(*v515 + 716))
              {
                v486 = *(_DWORD *)(*(_QWORD *)(v440 + 704) + 4 * v441);
                if (v486)
                {
                  v487 = v486 - 1;
                  if (*(_DWORD *)(v440 + 700) <= v487)
                    goto LABEL_887;
                  v442 = *(_WORD *)(*(_QWORD *)(v440 + 688) + 24 * v487 + 20);
                }
                else
                {
                  v442 = -1;
                }
                v6 = (_QWORD *)v512;
              }
              else
              {
                v442 = -1;
              }
              result = (uint64_t)(v6 + 14);
              v523[0] = v514;
              v523[1] = (WTF::StringImpl *)(v520 | 0xFFFFFFFF00000000);
              v524.n128_u8[0] = *((_BYTE *)v515 + 8);
              v524.n128_u16[1] = v442;
              v443 = *((unsigned int *)v6 + 31);
              if ((_DWORD)v443 == *((_DWORD *)v6 + 30))
              {
                result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v443 + 1), (unint64_t)v523);
                v6 = (_QWORD *)v512;
                v444 = *(_QWORD *)(v512 + 112) + 24 * *(unsigned int *)(v512 + 124);
                v4 = *(__n128 *)result;
                v445 = *(_QWORD *)(result + 16);
              }
              else
              {
                v444 = *(_QWORD *)result + 24 * v443;
                v4 = *(__n128 *)v523;
                v445 = v524.n128_u64[0];
              }
              *(_QWORD *)(v444 + 16) = v445;
              *(__n128 *)v444 = v4;
              ++*((_DWORD *)v6 + 31);
              goto LABEL_755;
            }
          }
          else
          {
            if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
            {
              WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v523, (WebCore *)(*(_QWORD *)(*(_QWORD *)v414 + 16) + 16 * *v416), 0);
              *v432 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v523, (int **)&v430[3 * v431 + 1]);
              WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v523, v471);
              v433 = *v432;
              v6 = (_QWORD *)v512;
              goto LABEL_753;
            }
            *v432 = 1;
            v6 = (_QWORD *)v512;
          }
          LOBYTE(v523[0]) = *((_BYTE *)v6 + 104);
          HIDWORD(v523[0]) = 0;
          v523[1] = 0;
          v524.n128_u8[0] = 0;
          v525 = 0;
          v526 = 0;
          v527 = 0;
          v528 = 0;
          v530 = (WTF *)v532;
          v531 = 8;
          v533 = 0;
          v534 = 0;
          if (*((_BYTE *)v6 + 96))
          {
            HIDWORD(v523[0]) = *((_DWORD *)v6 + 14);
            v447 = (WTF::StringImpl *)v6[8];
            if (v447)
              *(_DWORD *)v447 += 2;
            v523[1] = v447;
            v4 = *(__n128 *)(v6 + 9);
            v524 = v4;
            v525 = *((_BYTE *)v6 + 88);
          }
          HIBYTE(v528) = v427;
          v529 = v6[5];
          v526 = 0;
          if (*v432 == 3)
          {
            v434 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v430[3 * v431 + 1])(*v6, v523, &v520) != 0;
          }
          else
          {
            v461 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v414 + 16) + 16 * *v416);
            v462 = (const WebCore::Element *)*v6;
            v463 = *(_QWORD *)(*(_QWORD *)(*v6 + 40) + 8);
            v521 = *(_BYTE *)(v463 + 3384) != 2;
            v522 = *(_BYTE *)(v463 + 3358) & 1;
            v434 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)&v521, v461, v462, (WebCore::SelectorChecker::CheckingContext *)v523, v4);
            if (v434)
              v520 = WebCore::selectorSpecificity(v461, (const WebCore::CSSSelector *)v3);
          }
          v435 = v533;
          if (v533)
            v436 = 1;
          else
            v436 = v434;
          v6 = (_QWORD *)v512;
          if ((*((_BYTE *)v416 + 7) & 2) != 0 && v436)
            *(_BYTE *)(v512 + 1688) = 1;
          *(_DWORD *)(v512 + 1848) |= v435;
          v437 = v530;
          v438 = HIDWORD(v531);
          if (HIDWORD(v531))
          {
            v457 = *(unsigned int *)(v512 + 1716);
            v458 = v457 + HIDWORD(v531);
            v459 = *(unsigned int *)(v512 + 1712);
            if (v458 > v459)
            {
              v464 = (_OWORD *)(v512 + 1720);
              v465 = v459 + (v459 >> 2);
              if (v465 >= 0x10)
                v466 = v465 + 1;
              else
                v466 = 16;
              if (v466 <= v458)
                v467 = v457 + HIDWORD(v531);
              else
                v467 = v466;
              v468 = *(WTF **)(v512 + 1704);
              v510 = (WTF *)(v512 + 1720);
              if (v467 < 9)
              {
                *(_QWORD *)(v512 + 1704) = v464;
                *(_DWORD *)(v512 + 1712) = 8;
              }
              else
              {
                if (v467 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194377C9CLL);
                }
                v505 = v467;
                v464 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v467));
                v6 = (_QWORD *)v512;
                *(_DWORD *)(v512 + 1712) = v505;
                *(_QWORD *)(v512 + 1704) = v464;
              }
              if (v510 == v468 && v468)
              {
                if ((_DWORD)v457)
                {
                  v469 = 16 * v457;
                  do
                  {
                    v470 = *(_OWORD *)v468;
                    v468 = (WTF *)((char *)v468 + 16);
                    *v464++ = v470;
                    v469 -= 16;
                  }
                  while (v469);
                }
              }
              else
              {
                if ((_DWORD)v457)
                {
                  v482 = 16 * v457;
                  v483 = v468;
                  do
                  {
                    v484 = *(_OWORD *)v483;
                    v483 = (WTF *)((char *)v483 + 16);
                    *v464++ = v484;
                    v482 -= 16;
                  }
                  while (v482);
                }
                if (v510 != v468 && v468)
                {
                  if ((WTF *)v6[213] == v468)
                  {
                    *(_QWORD *)(v512 + 1704) = 0;
                    *(_DWORD *)(v512 + 1712) = 0;
                  }
                  WTF::fastFree(v468, v3);
                  v6 = (_QWORD *)v512;
                }
              }
            }
            v460 = *((unsigned int *)v6 + 429);
            if (v458 < v460)
            {
              __break(0xC471u);
              JUMPOUT(0x194377C94);
            }
            v449 = (__n128 *)(v6[213] + 16 * v460);
            v450 = 16 * v438;
            do
            {
              v448 = *(__n128 *)v437;
              v437 = (WTF *)((char *)v437 + 16);
              v4 = v448;
              *v449++ = v448;
              v450 -= 16;
            }
            while (v450);
            *((_DWORD *)v6 + 429) = v458;
            v437 = v530;
          }
          if (v532 != (_BYTE *)v437 && v437 != 0)
          {
            v530 = 0;
            LODWORD(v531) = 0;
            WTF::fastFree(v437, v3);
            v6 = (_QWORD *)v512;
          }
          result = (uint64_t)v523[1];
          v523[1] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v3);
              v6 = (_QWORD *)v512;
            }
            else
            {
              *(_DWORD *)result -= 2;
            }
          }
          if (!v434)
            goto LABEL_755;
          goto LABEL_779;
        }
LABEL_756:
        if (!v519)
          goto LABEL_738;
        result = (uint64_t)v516;
        if (!v516)
          goto LABEL_738;
        v516 = 0;
        v517 = 0;
        result = WTF::fastFree((WTF *)result, v3);
        v6 = (_QWORD *)v512;
        if (++k == v83)
          return result;
      }
      result = WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v6, v414, v5);
      v6 = (_QWORD *)v512;
      if ((_DWORD)result)
      {
        v422 = (_DWORD *)*v5;
        goto LABEL_745;
      }
LABEL_738:
      ;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::createPtrWithRegisteredInitialValues@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  WebCore::RenderStyle **v9;
  void *v10;
  void *v11;
  uint64_t v12;
  WebCore::RenderStyle *v13;
  WebCore::RenderStyle *v14;

  if (*(_BYTE *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 32) = 0;
    v9 = (WebCore::RenderStyle **)(a1 + 24);
    v12 = a1;
    WebCore::RenderStyle::createPtr(&v13);
    std::exchange[abi:sn180100]<std::unique_ptr<WebCore::RenderStyle>,std::unique_ptr<WebCore::RenderStyle>>(v9, &v13, &v14);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v13, v10);
    WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v12, (_QWORD *)(v12 + 16));
    WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v12, (_QWORD *)(v12 + 8));
    WebCore::RenderStyle::deduplicateCustomProperties(*(_QWORD **)(v12 + 24), (WTF **)v14);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v14, v11);
    a1 = v12;
  }
  v3 = *(_QWORD **)(a1 + 24);
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)result = 0;
  v5 = (_DWORD *)v3[1];
  ++*v5;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v3[2];
  v6 = (_DWORD *)v3[3];
  ++*v6;
  *(_QWORD *)(result + 24) = v6;
  v7 = (_DWORD *)v3[4];
  ++*v7;
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v3[5];
  *(_QWORD *)(result + 48) = 0;
  v8 = (_DWORD *)v3[7];
  ++*v8;
  *(_QWORD *)(result + 56) = v8;
  *a2 = result;
  return result;
}

WTF::StringImpl *WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *result;
  unsigned int *v3;
  _BYTE *v4;
  __n128 v5;
  unsigned int *v6;
  uint64_t v7;
  _BYTE *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  unsigned int v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  __n128 v46;
  __n128 *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  const WebCore::CSSSelector *v60;
  const WebCore::Element *v61;
  uint64_t v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  WTF *v68;
  __int128 v69;
  void *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _BYTE *v93;
  WTF *v94;
  int v95;
  unsigned int v96;
  char v97;
  unsigned int v98;
  _BYTE v99[2];
  WTF::StringImpl *v100[2];
  __n128 v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  _BYTE v109[128];
  int v110;
  char v111;
  uint64_t v112;

  result = (WTF::StringImpl *)MEMORY[0x1E0C80A78](a1, a2);
  v112 = *MEMORY[0x1E0C80C00];
  if (v3)
  {
    v6 = v3;
    v7 = v3[3];
    if ((_DWORD)v7)
    {
      v8 = v4;
      v9 = result;
      v10 = 0;
      v90 = v3[3];
      while (1)
      {
        v11 = *(_QWORD *)v6 + 32 * v10;
        v13 = (unsigned __int16 *)(v11 + 8);
        v12 = *(_QWORD *)(v11 + 8);
        if ((v12 & 0x8000000000000000) == 0 || (v12 & 0x100000000000000) == 0 && *((_BYTE *)v9 + 96))
          goto LABEL_24;
        v14 = *((_QWORD *)v9 + 5);
        if (v14)
        {
          v15 = *(_QWORD *)v6 + 32 * v10;
          v18 = *(_DWORD *)(v15 + 16);
          v16 = (unsigned int *)(v15 + 16);
          v17 = v18;
          if (v18)
          {
            v31 = v14 + 16;
            if (!*(_BYTE *)(v14 + 16 + (v17 & 0xFFF)))
              goto LABEL_24;
            if (!*(_BYTE *)(v31 + ((v17 >> 16) & 0xFFF)))
              goto LABEL_24;
            v44 = v16[1];
            if ((_DWORD)v44)
            {
              if (!*(_BYTE *)(v31 + (v44 & 0xFFF)))
                goto LABEL_24;
              if (!*(_BYTE *)(v31 + ((v44 >> 16) & 0xFFF)))
                goto LABEL_24;
              v54 = v16[2];
              if ((_DWORD)v54)
              {
                if (!*(_BYTE *)(v31 + (v54 & 0xFFF)))
                  goto LABEL_24;
                if (!*(_BYTE *)(v31 + ((v54 >> 16) & 0xFFF)))
                  goto LABEL_24;
                v55 = v16[3];
                if ((_DWORD)v55)
                {
                  if (!*(_BYTE *)(v31 + (v55 & 0xFFF)) || !*(_BYTE *)(v31 + ((v55 >> 16) & 0xFFF)))
                    goto LABEL_24;
                }
              }
            }
          }
        }
        v19 = *(_DWORD **)v8;
        if (!*(_DWORD *)(*(_QWORD *)v8 + 748))
          goto LABEL_10;
        result = (WTF::StringImpl *)WebCore::Style::ElementRuleCollector::containerQueriesMatch((WebCore::Node **)v9, *(_QWORD *)v6 + 32 * v10, v8);
        if ((_DWORD)result)
          break;
LABEL_24:
        if (++v10 == v7)
          return result;
      }
      v19 = *(_DWORD **)v8;
LABEL_10:
      LOBYTE(v94) = 0;
      v97 = 0;
      if (v19[195])
      {
        result = WebCore::Style::ElementRuleCollector::scopeRulesMatch((uint64_t)v100, (uint64_t *)v9, (WTF::StringImpl *)v11, v19);
        if (!LOBYTE(v100[0]))
        {
          if (v101.n128_u8[8])
          {
            result = v100[1];
            if (v100[1])
              result = (WTF::StringImpl *)WTF::fastFree(v100[1], v3);
          }
          v7 = v90;
          goto LABEL_20;
        }
        result = (WTF::StringImpl *)std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)&v94, (uint64_t *)&v100[1]);
        if (v101.n128_u8[8])
        {
          result = v100[1];
          if (v100[1])
            result = (WTF::StringImpl *)WTF::fastFree(v100[1], v3);
        }
        v7 = v90;
      }
      v20 = *(_QWORD *)v11;
      v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      v22 = *(_DWORD *)(v21 + 4);
      if ((v22 & 8) != 0)
        v23 = *(_DWORD *)(v21 + 28);
      else
        v23 = v22 >> 4;
      if (!v23 && !*((_BYTE *)v9 + 48))
      {
LABEL_20:
        if (v97)
        {
          result = v94;
          if (v94)
          {
            v94 = 0;
            v95 = 0;
            result = (WTF::StringImpl *)WTF::fastFree(result, v3);
          }
        }
        goto LABEL_24;
      }
      v91 = v9;
      v92 = (WTF::StringImpl *)v11;
      v93 = v8;
      if (v97)
      {
        if (v96)
        {
          v83 = (uint64_t *)v94;
          v84 = (uint64_t *)((char *)v94 + 16 * v96);
          do
          {
            v85 = *v83;
            v86 = v83[1];
            v83 += 2;
            result = (WTF::StringImpl *)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()((uint64_t *)&v91, v85, v86, v5);
          }
          while (v83 != v84);
        }
        goto LABEL_20;
      }
      v98 = 0;
      v24 = v8[8];
      v25 = (*(_QWORD *)v13 >> 53) & 7;
      if ((_DWORD)v25 && (*(_WORD *)(*(_QWORD *)v9 + 28) & 0x10) != 0)
      {
        switch((_DWORD)v25)
        {
          case 4:
            v53 = 1;
            break;
          case 3:
            v53 = 256;
            break;
          case 2:
            v53 = 0x10000;
            break;
          default:
            goto LABEL_45;
        }
        v98 = v53;
LABEL_45:
        v38 = *(_QWORD *)v93;
        v39 = *((_DWORD *)v92 + 3) & 0x1FFFFF;
        if (v39 < *(unsigned int *)(*(_QWORD *)v93 + 716))
        {
          v81 = *(_DWORD *)(*(_QWORD *)(v38 + 704) + 4 * v39);
          if (v81)
          {
            v82 = v81 - 1;
            if (*(_DWORD *)(v38 + 700) <= v82)
              goto LABEL_148;
            v40 = *(_WORD *)(*(_QWORD *)(v38 + 688) + 24 * v82 + 20);
          }
          else
          {
            v40 = -1;
          }
          v7 = v90;
        }
        else
        {
          v40 = -1;
        }
        result = (WTF::StringImpl *)((char *)v9 + 112);
        v100[0] = v92;
        v100[1] = (WTF::StringImpl *)(v98 | 0xFFFFFFFF00000000);
        v101.n128_u8[0] = v93[8];
        v101.n128_u16[1] = v40;
        v41 = *((unsigned int *)v9 + 31);
        if ((_DWORD)v41 == *((_DWORD *)v9 + 30))
        {
          result = (WTF::StringImpl *)WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v41 + 1), (unint64_t)v100);
          v42 = *((_QWORD *)v9 + 14) + 24 * *((unsigned int *)v9 + 31);
          v5 = *(__n128 *)result;
          v43 = *((_QWORD *)result + 2);
        }
        else
        {
          v42 = *(_QWORD *)result + 24 * v41;
          v5 = *(__n128 *)v100;
          v43 = v101.n128_u64[0];
        }
        *(_QWORD *)(v42 + 16) = v43;
        *(__n128 *)v42 = v5;
        ++*((_DWORD *)v9 + 31);
        goto LABEL_20;
      }
      v26 = WORD1(*(_QWORD *)v13);
      v27 = *(_QWORD **)(v20 + 24);
      if (!v27)
      {
        v71 = *(unsigned int **)(v20 + 16);
        if (!v71)
          goto LABEL_148;
        v72 = *v71;
        if ((*v71 & 0x20000) != 0)
        {
          v74 = 1;
        }
        else
        {
          v73 = v71 + 4;
          v74 = 1;
          do
          {
            v74 += (v72 >> 19) & 1;
            v75 = *v73;
            v73 += 4;
            v72 = v75;
          }
          while ((v75 & 0x20000) == 0);
        }
        if (v74 <= v26)
        {
LABEL_148:
          __break(0xC471u);
          JUMPOUT(0x1943784E8);
        }
        v76 = v74;
        v88 = 24 * v74;
        v77 = (_QWORD *)WTF::fastMalloc((WTF *)(v88 + 16));
        *v77 = 24;
        v77[1] = v76;
        v27 = v77 + 2;
        bzero(v77 + 2, 24 * ((v88 - 24) / 0x18uLL) + 24);
        v80 = *(_QWORD *)(v20 + 24);
        *(_QWORD *)(v20 + 24) = v27;
        if (v80)
        {
          v78 = *(_QWORD *)(v80 - 8);
          if (v78)
          {
            v52 = v80 + 24 * v78;
            do
            {
              v49 = *(unsigned int **)(v52 - 8);
              *(_QWORD *)(v52 - 8) = 0;
              if (v49)
              {
                do
                {
                  v50 = __ldaxr(v49);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v49));
                if (!v51)
                {
                  atomic_store(1u, v49);
                  v100[0] = (WTF::StringImpl *)v49;
                  v89 = v80;
                  WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v100);
                  v80 = v89;
                }
              }
              v52 -= 24;
            }
            while (v52 != v80);
          }
          WTF::fastFree((WTF *)(v80 - 16), v79);
          v27 = *(_QWORD **)(v20 + 24);
        }
      }
      v28 = v26;
      v29 = &v27[3 * v26];
      v30 = *v29;
      if (!*v29)
      {
        if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 577))
        {
          *v29 = 1;
          goto LABEL_26;
        }
        WebCore::SelectorCompiler::SelectorCodeGenerator::SelectorCodeGenerator((uint64_t)v100, (WebCore *)(*(_QWORD *)(*(_QWORD *)v11 + 16) + 16 * *v13), 0);
        *v29 = WebCore::SelectorCompiler::SelectorCodeGenerator::compile((uint64_t)v100, (int **)&v27[3 * v28 + 1]);
        WebCore::SelectorCompiler::SelectorCodeGenerator::~SelectorCodeGenerator((WebCore::SelectorCompiler::SelectorCodeGenerator *)v100, v70);
        v30 = *v29;
      }
      if (v30 == 2)
      {
        result = (WTF::StringImpl *)((uint64_t (*)(_QWORD, unsigned int *))v27[3 * v28 + 1])(*(_QWORD *)v9, &v98);
        v7 = v90;
        if (!(_DWORD)result)
          goto LABEL_20;
        if ((*(_BYTE *)(v11 + 15) & 2) != 0)
          *((_BYTE *)v9 + 1688) = 1;
        goto LABEL_45;
      }
LABEL_26:
      LOBYTE(v100[0]) = *((_BYTE *)v9 + 104);
      HIDWORD(v100[0]) = 0;
      v100[1] = 0;
      v101.n128_u8[0] = 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v107 = (WTF *)v109;
      v108 = 8;
      v110 = 0;
      v111 = 0;
      if (*((_BYTE *)v9 + 96))
      {
        HIDWORD(v100[0]) = *((_DWORD *)v9 + 14);
        v45 = (WTF::StringImpl *)*((_QWORD *)v9 + 8);
        if (v45)
          *(_DWORD *)v45 += 2;
        v100[1] = v45;
        v5 = *(__n128 *)((char *)v9 + 72);
        v101 = v5;
        v102 = *((_BYTE *)v9 + 88);
      }
      HIBYTE(v105) = v24;
      v106 = *((_QWORD *)v9 + 5);
      v103 = 0;
      if (*v29 == 3)
      {
        v32 = ((uint64_t (*)(_QWORD, WTF::StringImpl **, unsigned int *))v27[3 * v28 + 1])(*(_QWORD *)v9, v100, &v98) != 0;
        v7 = v90;
      }
      else
      {
        v60 = (const WebCore::CSSSelector *)(*(_QWORD *)(*(_QWORD *)v11 + 16) + 16 * *v13);
        v61 = *(const WebCore::Element **)v9;
        v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 40) + 8);
        v99[0] = *(_BYTE *)(v62 + 3384) != 2;
        v99[1] = *(_BYTE *)(v62 + 3358) & 1;
        v32 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v99, v60, v61, (WebCore::SelectorChecker::CheckingContext *)v100, v5);
        v7 = v90;
        if (v32)
          v98 = WebCore::selectorSpecificity(v60, (const WebCore::CSSSelector *)v3);
      }
      v33 = v110;
      if (v110)
        v34 = 1;
      else
        v34 = v32;
      if ((*((_BYTE *)v13 + 7) & 2) != 0 && v34)
        *((_BYTE *)v9 + 1688) = 1;
      *((_DWORD *)v9 + 462) |= v33;
      v35 = v107;
      v36 = HIDWORD(v108);
      if (HIDWORD(v108))
      {
        v56 = *((unsigned int *)v9 + 429);
        v57 = v56 + HIDWORD(v108);
        v58 = *((unsigned int *)v9 + 428);
        if (v57 > v58)
        {
          v63 = (_OWORD *)((char *)v9 + 1720);
          v64 = v58 + (v58 >> 2);
          if (v64 >= 0x10)
            v65 = v64 + 1;
          else
            v65 = 16;
          if (v65 <= v57)
            v66 = v56 + HIDWORD(v108);
          else
            v66 = v65;
          v87 = (WTF *)*((_QWORD *)v9 + 213);
          if (v66 < 9)
          {
            *((_QWORD *)v9 + 213) = v63;
            *((_DWORD *)v9 + 428) = 8;
          }
          else
          {
            if (v66 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x19437861CLL);
            }
            v63 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v66));
            *((_DWORD *)v9 + 428) = v66;
            *((_QWORD *)v9 + 213) = v63;
          }
          v7 = v90;
          if ((_DWORD)v56)
          {
            v67 = 16 * v56;
            v68 = v87;
            do
            {
              v69 = *(_OWORD *)v68;
              v68 = (WTF *)((char *)v68 + 16);
              *v63++ = v69;
              v67 -= 16;
            }
            while (v67);
          }
          if ((WTF::StringImpl *)((char *)v9 + 1720) != v87 && v87)
          {
            if (*((WTF **)v9 + 213) == v87)
            {
              *((_QWORD *)v9 + 213) = 0;
              *((_DWORD *)v9 + 428) = 0;
            }
            WTF::fastFree(v87, v3);
            v7 = v90;
          }
        }
        v59 = *((unsigned int *)v9 + 429);
        if (v57 < v59)
        {
          __break(0xC471u);
          JUMPOUT(0x194378614);
        }
        v47 = (__n128 *)(*((_QWORD *)v9 + 213) + 16 * v59);
        v48 = 16 * v36;
        do
        {
          v46 = *(__n128 *)v35;
          v35 = (WTF *)((char *)v35 + 16);
          v5 = v46;
          *v47++ = v46;
          v48 -= 16;
        }
        while (v48);
        *((_DWORD *)v9 + 429) = v57;
        v35 = v107;
      }
      if (v109 != (_BYTE *)v35 && v35 != 0)
      {
        v107 = 0;
        LODWORD(v108) = 0;
        WTF::fastFree(v35, v3);
      }
      result = v100[1];
      v100[1] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v3);
        else
          *(_DWORD *)result -= 2;
      }
      if (!v32)
        goto LABEL_20;
      goto LABEL_45;
    }
  }
  return result;
}

BOOL WebCore::Layout::TextUtil::mayBreakInBetween(WebCore::Layout::TextUtil *this, const WebCore::Layout::InlineTextItem *a2, const WebCore::Layout::InlineTextItem *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BOOL8 v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v28;
  _QWORD v29[2];
  WTF::StringImpl *v30;
  _BYTE v31[88];
  char v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if ((*(_WORD *)(*(_QWORD *)this + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194378874);
  }
  v7 = *(_QWORD *)(v4 + 120);
  if (v7)
    *(_DWORD *)v7 += 2;
  v8 = *(_QWORD **)a2;
  if ((*(_WORD *)(*(_QWORD *)a2 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194378894);
  }
  v9 = (WTF::StringImpl *)v8[15];
  if (v9)
    *(_DWORD *)v9 += 2;
  v28 = v9;
  if (v7 && (*(_BYTE *)(v7 + 16) & 4) == 0)
  {
    WTF::String::convertTo16Bit((WTF::String *)&v28);
    v9 = v28;
    v4 = *(_QWORD *)this;
    v8 = *(_QWORD **)a2;
  }
  if (v9)
  {
    v10 = *((_QWORD *)v9 + 1);
    v11 = *((unsigned int *)v9 + 1) | ((unint64_t)((*((_DWORD *)v9 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v12 = v8[6];
  v13 = *(_DWORD *)(v8[5] + 228);
  v14 = (v13 >> 12) & 7;
  if (((v13 >> 12) & 4) != 0)
    LOBYTE(v14) = 0;
  v15 = *(_DWORD *)(v8[5] + 228) & 0x1C0;
  v29[0] = v10;
  v29[1] = v11;
  v16 = *(WTF::StringImpl **)(v12 + 176);
  if (v16)
    *(_DWORD *)v16 += 2;
  v30 = v16;
  v31[0] = 0;
  v32 = 0;
  v33 = 0;
  v34 = v14;
  v35 = v15 != 256;
  v36 = 0;
  if (!v7 || (v17 = *(_DWORD *)(v7 + 4)) == 0)
  {
    v21 = 0;
LABEL_43:
    v23 = 0;
    goto LABEL_24;
  }
  v18 = v17 - 1;
  v19 = *(_DWORD *)(v7 + 16);
  v20 = *(_QWORD *)(v7 + 8);
  if ((v19 & 4) != 0)
    v21 = *(unsigned __int8 *)(v20 + v18);
  else
    v21 = *(unsigned __int16 *)(v20 + 2 * v18);
  if (v21 == 173 && (*(_BYTE *)(*(_QWORD *)(v4 + 40) + 230) & 0xC0) == 0)
  {
    v24 = 0;
    goto LABEL_26;
  }
  v22 = v17 - 2;
  if (v17 < 2)
    goto LABEL_43;
  if ((v19 & 4) != 0)
    v23 = *(unsigned __int8 *)(v20 + v22);
  else
    v23 = *(unsigned __int16 *)(v20 + 2 * v22);
LABEL_24:
  v36 = v23 | (v21 << 16);
  v24 = WebCore::Layout::TextUtil::findNextBreakablePosition((WebCore::Layout::TextUtil *)v29, 0, (uint64_t)(v8 + 2), a4) == 0;
  if (v32)
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v31);
LABEL_26:
  v25 = v30;
  v30 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v24;
}

unint64_t WebCore::Layout::TextUtil::findNextBreakablePosition(WebCore::Layout::TextUtil *this, WTF::CachedLineBreakIteratorFactory *a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  WTF::CachedLineBreakIteratorFactory *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t result;
  unsigned int v12;
  unsigned __int8 v13;

  v4 = this;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 + 24) + 228);
  v6 = (v5 >> 6) & 7;
  v7 = a2;
  if (v6 == 4)
    return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)3,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v4, v7);
  v8 = ((*(_BYTE *)(a3 + 43) & 0x40) == 0) & (v5 >> 11);
  if (v6 == 2)
  {
    if (v8)
      return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)1>((uint64_t *)this, a2);
    else
      return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)0>((uint64_t *)this, a2);
  }
  else
  {
    if (!*((_BYTE *)this + 128))
    {
      if (v8)
        return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>((uint64_t *)this, a2);
      v9 = a2;
      v10 = *(_QWORD *)this;
      if ((*((_QWORD *)this + 1) & 0xFF00000000) == 0)
        return WebCore::BreakLines::nextBreakablePosition<char16_t,(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>((unsigned __int16 *)this, v10, *((_QWORD *)this + 1), v7);
      result = *((_QWORD *)this + 1);
      LOWORD(v12) = *((_WORD *)v4 + 66);
      if (v9 || *((_WORD *)v4 + 66))
      {
        if (v9 >= 2)
        {
          v4 = (WTF::CachedLineBreakIteratorFactory *)(v7 - 2);
          if (result <= v7 - 2)
          {
LABEL_40:
            __break(1u);
            return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)3,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v4, v7);
          }
          v4 = (WTF::CachedLineBreakIteratorFactory *)*((unsigned __int8 *)v4 + v10);
LABEL_11:
          if (result > v7 - 1)
          {
            LOBYTE(v12) = *(_BYTE *)(v10 + v7 - 1);
            goto LABEL_13;
          }
          goto LABEL_40;
        }
        v4 = (WTF::CachedLineBreakIteratorFactory *)*((unsigned __int16 *)v4 + 65);
        if (!v9)
        {
          v7 = 0;
LABEL_13:
          if (v7 >= result)
            return result;
          while (1)
          {
            v13 = v12;
            v12 = *(unsigned __int8 *)(v10 + v7);
            if (v12 <= 0x20 && ((1 << v12) & 0x100000600) != 0)
              return v7;
            if (v13 != 45)
              break;
            if (v12 - 48 > 9)
            {
              if (v12 < 0x21)
                goto LABEL_28;
              goto LABEL_27;
            }
            if (((_BYTE)v4 - 48) < 0xAu
              || ((v4 | 0x20) - 97) < 0x1Au)
            {
              return v7;
            }
LABEL_28:
            ++v7;
            LOBYTE(v4) = v13;
            if (result == v7)
              return result;
          }
          if (v13 < 0x21u || v12 <= 0x20)
            goto LABEL_28;
LABEL_27:
          if (((WebCore::BreakLines::LineBreakTable::breakTable[28 * v13 - 924 + ((v12 - 33) >> 3)] >> ((v12 - 33) & 7)) & 1) != 0)
            return v7;
          goto LABEL_28;
        }
      }
      else
      {
        if (result < 2)
          return result;
        v4 = (WTF::CachedLineBreakIteratorFactory *)*((unsigned __int8 *)v4 + 130);
      }
      v7 = 1;
      goto LABEL_11;
    }
    if (v8)
      return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>((uint64_t *)this, a2);
    else
      return WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>((uint64_t *)this, a2);
  }
}

uint64_t WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0xAAAAAAB)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 24 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 24 * v9);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::classifyVariableRange(__int128 *a1, __int128 *a2)
{
  char v3;
  unsigned int v4;
  char v5;
  __int128 *v6;
  int v7;
  __int128 *v8;
  uint8x8_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint16x8_t v12;
  uint64_t v13;
  uint32x4_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  int8x16_t v17;
  __int128 *v19;
  unsigned int v20;
  int v21;
  unsigned __int16 v22;
  __int32 v23;

  v4 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    while (1)
    {
      v6 = a1;
      if (a1 >= a2)
        break;
      a1 = (__int128 *)((char *)a1 + 24);
      v7 = *(_DWORD *)v6;
      if ((*(_DWORD *)v6 & 0x3F) != 0x10)
        goto LABEL_4;
    }
    if ((v5 & 1) == 0)
    {
      v4 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v4;
      v3 = 1;
      a1 = (__int128 *)((char *)a1 + 24);
      goto LABEL_15;
    }
    a1 = (__int128 *)((char *)a1 + 24);
    v5 = 1;
  }
  while ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0x3F) == 0x10);
  {
    v4 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v4;
  }
  v3 = 1;
LABEL_15:
  LOBYTE(v7) = v4;
LABEL_4:
  if ((v7 & 0x3F) != 0)
  {
    v8 = v6;
  }
  else
  {
    if (v6 == a2)
    {
      v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      if ((v3 & 1) == 0)
      {
        v4 = v4 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v4;
      }
      v3 = 1;
      a1 = a2;
    }
    do
    {
      if (a1 < a2 || (v3 & 1) != 0)
      {
        if (a1 >= a2)
          v19 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        else
          v19 = a1;
        v20 = *(_DWORD *)v19;
      }
      else
      {
        v20 = v4 & 0xFF000000 | 0x1E;
        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v20;
        v3 = 1;
        v4 = v20;
      }
      a1 = (__int128 *)((char *)a1 + 24);
    }
    while ((v20 & 0x3F) == 0x10);
    v8 = (__int128 *)((char *)a1 - 24);
    if ((*(_DWORD *)v6 & 0x3F) == 0)
    {
      v21 = *((_DWORD *)v6 + 4);
      if (v21 < 0)
      {
        v21 = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
        *((_DWORD *)v6 + 4) = v21;
      }
      if (v8 == a2 && (unsigned __int16)v21 - 1 <= 4)
      {
        v11 = 0;
        v10 = v21;
        v12.i64[0] = 1;
        goto LABEL_8;
      }
    }
  }
  LOBYTE(v22) = 0;
  LOBYTE(v23) = 0;
  BYTE2(v23) = 0;
  if (!WebCore::classifyBlock(v8, a2, (_BYTE *)&v23 + 2, 1))
  {
    v13 = 0;
    v10 = 0;
    v11 = 0;
    v12.i64[0] = 1;
    goto LABEL_9;
  }
  v10 = 0;
  v11 = (unint64_t)v22 >> 8;
  v9.i32[0] = v23;
  v12 = vmovl_u8(v9);
LABEL_8:
  v13 = 0x1000000000000;
LABEL_9:
  v14 = vmovl_u16((uint16x4_t)(v12.i64[0] & 0xFF00FF00FF00FFLL));
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v16 = v15;
  v15.i64[0] = v14.u32[2];
  v15.i64[1] = v14.u32[3];
  v17 = vorrq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1969EFF70), (int8x16_t)vshlq_u64(v15, (uint64x2_t)xmmword_1969EFF60));
  return *(_QWORD *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)) | (v11 << 8) | v13 & 0x1000000000000 | v10;
}

uint64_t WebCore::classifyBlock(__int128 *a1, __int128 *a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  __int128 *v7;
  __int128 *v8;
  unsigned int v9;
  __int128 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  unsigned int v15;
  __int128 *v16;
  int v17;
  __int128 *v18;
  char v19;
  __int128 *v20;
  int v21;
  int v22;
  int v23;
  __int128 *v24;
  __int128 *v25;
  WebCore::CSSParserTokenRange *v26;
  char v27;
  unsigned int v28;
  __int128 *v29;
  unsigned int v30;
  __int128 *v31;
  __int128 *v34;
  __int128 *v35;

  v4 = 1;
  if (a2 != a1)
  {
    v7 = a1;
    while (1)
    {
      if (v7 >= a2)
      {
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        if ((WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xC0) == 0x40)
        {
          v14 = 1;
          {
            v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
          }
          v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
LABEL_30:
          v17 = 0;
          v18 = v7;
          v19 = v14;
          while (1)
          {
            if (v18 == a2)
            {
              v18 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
              if ((v19 & 1) != 0)
              {
                v20 = a2;
              }
              else
              {
                v15 = v15 & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v15;
                v14 = 1;
                v20 = v7;
              }
              v19 = 1;
            }
            else
            {
              v7 = (__int128 *)((char *)v18 + 24);
              v20 = (__int128 *)((char *)v18 + 24);
            }
            v21 = *(_DWORD *)v18 >> 6;
            v22 = v21 == 2 ? -1 : 0;
            v23 = v21 == 1 ? 1 : v22;
            v17 += v23;
            if (!v17)
              break;
            v18 = v20;
            if (v20 >= a2)
            {
              if ((v14 & 1) == 0)
              {
                *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
              }
              goto LABEL_46;
            }
          }
          if ((v14 & 1) == 0)
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          }
          v20 = (__int128 *)((char *)v20 - 24);
LABEL_46:
          if ((__int128 *)((char *)v16 + 24) == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
            v24 = a2;
          else
            v24 = (__int128 *)((char *)v16 + 24);
          if (v20 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
            v25 = a2;
          else
            v25 = v20;
          if (WebCore::CSSParserToken::functionId((int *)v16) == 610)
          {
            v34 = v24;
            v35 = v25;
            v28 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            while (1)
            {
              if (v24 < v25 || (v27 & 1) != 0)
              {
                v29 = v24 >= v25 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v24;
                v30 = *(_DWORD *)v29;
              }
              else
              {
                v30 = v28 & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v30;
                v27 = 1;
                v28 = v30;
              }
              if ((v30 & 0x3F) != 0x10)
                break;
              v24 = (__int128 *)((char *)v24 + 24);
              v34 = v24;
            }
            if (v24 != v25)
            {
              v31 = (__int128 *)((char *)v24 + 24);
              goto LABEL_80;
            }
            v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            if ((v27 & 1) == 0)
            {
              v28 = v28 & 0xFF000000 | 0x1E;
              WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v28;
            }
            v31 = v25;
            v27 = 1;
            while (1)
            {
              if (v31 < v25 || (v27 & 1) != 0)
              {
                v10 = v31 >= v25 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v31;
                v11 = *(_DWORD *)v10;
              }
              else
              {
                v11 = v28 & 0xFF000000 | 0x1E;
                WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v11;
                v27 = 1;
                v28 = v11;
              }
              if ((v11 & 0x3F) != 0x10)
                break;
              v31 = (__int128 *)((char *)v31 + 24);
LABEL_80:
              v34 = v31;
            }
            if ((*(_DWORD *)v24 & 0x3F) != 0 || *((_DWORD *)v24 + 1) < 3u)
              return 0;
            v12 = *((_QWORD *)v24 + 1);
            if ((*(_DWORD *)v24 & 0x400000) != 0)
            {
              if (*(_BYTE *)v12 != 45)
                return 0;
              v13 = *(unsigned __int8 *)(v12 + 1);
            }
            else
            {
              if (*(_WORD *)v12 != 45)
                return 0;
              v13 = *(unsigned __int16 *)(v12 + 2);
            }
            if (v13 != 45
              || v31 != v25
              && (!WebCore::CSSPropertyParserHelpers::consumeCommaIncludingWhitespace(&v34, v26)
               || v34 != v35 && (WebCore::classifyBlock(v34) & 1) == 0))
            {
              return 0;
            }
            goto LABEL_28;
          }
          if (WebCore::CSSParserToken::functionId((int *)v16) == 611)
          {
            if ((WebCore::isValidConstantReference(v24, v25) & 1) == 0)
              return 0;
LABEL_28:
            *a3 = 1;
            goto LABEL_12;
          }
          if ((WebCore::classifyBlock(v24) & 1) == 0)
            return 0;
          goto LABEL_12;
        }
      }
      else if ((*(_DWORD *)v7 & 0xC0) == 0x40)
      {
        v15 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        v16 = v7;
        goto LABEL_30;
      }
      if (v7 == a2)
      {
        v7 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        }
        v8 = a2;
      }
      else
      {
        v8 = (__int128 *)((char *)v7 + 24);
      }
      v9 = *(_DWORD *)v7 & 0x3F;
      if (v9 > 0x1D)
        goto LABEL_11;
      if (v9 == 6)
      {
        if (*((_WORD *)v7 + 8) != 33)
          goto LABEL_11;
        v7 = v8;
        if ((a4 & 1) != 0)
          return 0;
      }
      else
      {
        if (((1 << v9) & 0x2A800020) != 0)
          return 0;
        if (v9 != 20)
        {
LABEL_11:
          v7 = v8;
          goto LABEL_12;
        }
        v7 = v8;
        if (a4)
          return 0;
      }
LABEL_12:
      if (v7 == a2)
        return 1;
    }
  }
  return v4;
}

_QWORD *WebCore::cacheWrapper<WebCore::CSSStyleDeclaration,WebCore::JSCSSStyleDeclaration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *Allocator;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v18;
  uint64_t v19;

  if ((byte_1EE334E58 & 1) == 0)
  {
    qword_1EE334E50 = (uint64_t)&off_1E32385F8;
    byte_1EE334E58 = 1;
  }
  v3 = (_QWORD *)(a2 + 8);
  if (!a2)
    v3 = 0;
  if (*(_DWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v19 = a2;
    if (a3)
    {
      v13 = (uint64_t *)(a1 + 32);
      if ((a3 & 8) != 0)
        v10 = (a3 - 112) | 1;
      else
        v10 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v10 & 1) != 0)
        v11 = v10 + 47;
      else
        v11 = *(_QWORD *)v10 + 32;
      Allocator = *(_QWORD **)(v11 + 16);
      if (!Allocator)
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v11 + 16) = *Allocator;
      *Allocator = a3;
      Allocator[1] = &qword_1EE334E50;
      Allocator[2] = a1;
      v6 = v13;
    }
    else
    {
      Allocator = 0;
    }
    v18 = Allocator;
    result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v6, &v19, (uint64_t *)&v18);
    if (v18)
      v18[1] = 3;
  }
  else
  {
    if (a3)
    {
      v12 = v3;
      if ((a3 & 8) != 0)
        v8 = (a3 - 112) | 1;
      else
        v8 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = v8 + 47;
      else
        v9 = *(_QWORD *)v8 + 32;
      result = *(_QWORD **)(v9 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v9 + 16) = *result;
      *result = a3;
      result[1] = &qword_1EE334E50;
      result[2] = a1;
      v3 = v12;
    }
    else
    {
      result = 0;
    }
    v5 = *v3;
    *v3 = result;
    if (v5)
      *(_QWORD *)(v5 + 8) = 3;
  }
  return result;
}

uint64_t WebCore::JSCSSStyleDeclaration::subspaceForImpl(WebCore::JSCSSStyleDeclaration *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2856);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v21 = *(_QWORD *)(v9 + 2856);
  if (!v21)
  {
    v14 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v14, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, v15);
      else
        --*(_DWORD *)v17;
    }
    v21 = v14;
    v18 = *(_QWORD *)(v9 + 2856);
    *(_QWORD *)(v9 + 2856) = v14;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v19 == *(_DWORD *)(v7 + 2840))
    {
      v20 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 2832, v19 + 1, (unint64_t)&v21);
      v19 = *(unsigned int *)(v7 + 2844);
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = *v20;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v19) = v14;
    }
    *(_DWORD *)(v7 + 2844) = v19 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v10 = *(_QWORD *)(v3 + 2856);
  *(_QWORD *)(v3 + 2856) = v4;
  if (v10)
  {
    v11 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v11, v12);
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::CSSStyleDeclaration *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  int v17;
  uint64_t v18;
  uint64_t CachedDOMStructure;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  JSC::JSCell *v30;
  JSC::JSObject *Object;
  uint64_t *v32;
  unint64_t SlowCase;
  uint64_t v34;
  int v35;
  JSC::JSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *Allocator;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v6 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v6 + 48))
  {
    v10 = *(_QWORD *)(v6 + 32);
    if (!v10)
      goto LABEL_12;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(WebCore::JSDOMGlobalObject **)(v10 + 16 * v15);
    if (v16 != a3)
    {
      v17 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v17) & v11;
        v16 = *(WebCore::JSDOMGlobalObject **)(v10 + 16 * v15);
        ++v17;
        if (v16 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v7 = *(_QWORD *)(v10 + 16 * v15 + 8);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
    v7 = *((_QWORD *)a3 + 1);
    if (!v7)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v7 + 8) & 3) == 0)
  {
    v8 = *(_QWORD *)v7;
    if (*(_QWORD *)v7)
      return v8;
  }
LABEL_12:
  (*(void (**)(WebCore::JSDOMGlobalObject *))(*(_QWORD *)a3 + 16))(a3);
  v18 = *((_QWORD *)a2 + 7);
  CachedDOMStructure = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSCSSStyleDeclaration::s_info);
  if (CachedDOMStructure)
  {
    v20 = CachedDOMStructure;
    goto LABEL_14;
  }
  v29 = (unint64_t *)(v18 + 40136);
  v30 = (JSC::JSCell *)*((_QWORD *)a2 + 82);
  LODWORD(v62) = 23;
  if (((unint64_t)v30 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v30);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v18);
  }
  v32 = (uint64_t *)(v18 + 38904);
  SlowCase = *v29;
  if (*v29 < *(_QWORD *)(v18 + 40144))
    goto LABEL_35;
  SlowCase = *(_QWORD *)(v18 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v56 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v18 + 40160);
    *(_QWORD *)(v18 + 40144) = SlowCase + HIDWORD(v56);
    *(_QWORD *)(v18 + 40152) = SlowCase + (int)v56;
LABEL_35:
    *v29 = SlowCase + 128;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_36:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v18, a2, v30, &v62, &WebCore::JSCSSStyleDeclarationPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v34 = *v32;
  if (*(_QWORD *)(v18 + 38904) >= *(_QWORD *)(v18 + 38912))
  {
    v34 = *(_QWORD *)(v18 + 38920);
    if ((v34 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v34 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v57 = *(_QWORD *)(v34 + 8) ^ *(_QWORD *)(v18 + 38928);
    *(_QWORD *)(v18 + 38912) = v34 + HIDWORD(v57);
    *(_QWORD *)(v18 + 38920) = v34 + (int)v57;
  }
  *v32 = v34 + 16;
LABEL_40:
  *(_DWORD *)v34 = 0;
  v35 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v34 = SlowCase >> 4;
  *(_DWORD *)(v34 + 4) = v35;
  v59 = SlowCase;
  *(_QWORD *)(v34 + 8) = 0;
  WebCore::JSCSSStyleDeclarationPrototype::finishCreation((uint64_t *)&v59, (WebCore::JSCSSStyleDeclarationPrototype *)v34, (JSC::VM *)v18);
  LODWORD(v62) = 84019223;
  if ((v34 & 0xFFFE000000000002) == 0)
  {
    v36 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v34);
    if (v36)
      JSC::JSObject::didBecomePrototype(v36, (JSC::VM *)v18);
  }
  v37 = *v29;
  if (*v29 >= *(_QWORD *)(v18 + 40144))
  {
    v37 = *(_QWORD *)(v18 + 40152);
    if ((v37 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v37 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_45;
    }
    v58 = *(_QWORD *)(v37 + 8) ^ *(_QWORD *)(v18 + 40160);
    *(_QWORD *)(v18 + 40144) = v37 + HIDWORD(v58);
    *(_QWORD *)(v18 + 40152) = v37 + (int)v58;
  }
  *v29 = v37 + 128;
LABEL_45:
  *(_DWORD *)v37 = 0;
  MEMORY[0x19AEA4278](v37, v18, a2, v34, &v62, &WebCore::JSCSSStyleDeclaration::s_info, 32, 0);
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  v20 = WebCore::cacheDOMStructure((JSCell *)a2, v37, (uint64_t)&WebCore::JSCSSStyleDeclaration::s_info);
  v18 = *((_QWORD *)a2 + 7);
LABEL_14:
  v21 = *(_QWORD *)(v18 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2856);
  if (v23)
    goto LABEL_15;
  v38 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
LABEL_50:
    MEMORY[0x19AEA534C](v38);
    goto LABEL_51;
  }
  if (__stxr(1u, (unsigned __int8 *)v38))
    goto LABEL_50;
LABEL_51:
  v40 = *(_QWORD *)(v38 + 2824);
  v60 = *(_QWORD *)(v40 + 2856);
  if (!v60)
  {
    v45 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v45, &v62, v18 + 192, v18 + 1872, 32, 8, &v61);
    v47 = (uint64_t)v61;
    v61 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    v48 = v62;
    v62 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::fastFree(v48, v46);
      else
        --*(_DWORD *)v48;
    }
    v60 = v45;
    v49 = *(_QWORD *)(v40 + 2856);
    *(_QWORD *)(v40 + 2856) = v45;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = *(unsigned int *)(v38 + 2844);
    if ((_DWORD)v50 == *(_DWORD *)(v38 + 2840))
    {
      v51 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v38 + 2832, v50 + 1, (unint64_t)&v60);
      v50 = *(unsigned int *)(v38 + 2844);
      *(_QWORD *)(*(_QWORD *)(v38 + 2832) + 8 * v50) = *v51;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v38 + 2832) + 8 * v50) = v45;
    }
    *(_DWORD *)(v38 + 2844) = v50 + 1;
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v41 = *(_QWORD *)(v22 + 2856);
  *(_QWORD *)(v22 + 2856) = v23;
  if (v41)
  {
    v42 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v42, v43);
  }
  v44 = __ldxr((unsigned __int8 *)v38);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_58;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
LABEL_58:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_15:
  v8 = v23[3];
  if (v8 < v23[4])
  {
LABEL_16:
    v23[3] = v8 + 32;
    goto LABEL_17;
  }
  v8 = v23[5];
  if ((v8 & 1) == 0)
  {
    v55 = *(_QWORD *)(v8 + 8) ^ v23[6];
    v23[4] = v8 + HIDWORD(v55);
    v23[5] = v8 + (int)v55;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM();
  v8 = JSC::LocalAllocator::allocateSlowCase();
LABEL_17:
  *(_DWORD *)v8 = 0;
  WebCore::JSDOMObject::JSDOMObject(v8, v20);
  *(_QWORD *)(v8 + 24) = a3;
  if (*(_BYTE *)(v18 + 755))
    __dmb(0xAu);
  v24 = *((_QWORD *)a2 + 415);
  if ((byte_1EE334E58 & 1) == 0)
  {
    qword_1EE334E50 = (uint64_t)&off_1E32385F8;
    byte_1EE334E58 = 1;
  }
  if (*(_DWORD *)(v24 + 48))
  {
    v62 = a3;
    if ((v8 & 8) != 0)
      v52 = (v8 - 112) | 1;
    else
      v52 = v8 & 0xFFFFFFFFFFFFC000;
    if ((v52 & 1) != 0)
      v53 = v52 + 47;
    else
      v53 = *(_QWORD *)v52 + 32;
    Allocator = *(_QWORD **)(v53 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v53 + 16) = *Allocator;
    *Allocator = v8;
    Allocator[1] = &qword_1EE334E50;
    Allocator[2] = v24;
    v61 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v24 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
    v28 = (uint64_t)v61;
    if (v61)
      goto LABEL_30;
  }
  else
  {
    if ((v8 & 8) != 0)
      v25 = (v8 - 112) | 1;
    else
      v25 = v8 & 0xFFFFFFFFFFFFC000;
    if ((v25 & 1) != 0)
      v26 = v25 + 47;
    else
      v26 = *(_QWORD *)v25 + 32;
    v27 = *(_QWORD **)(v26 + 16);
    if (!v27)
      v27 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v26 + 16) = *v27;
    *v27 = v8;
    v27[1] = &qword_1EE334E50;
    v27[2] = v24;
    v28 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v27;
    if (v28)
LABEL_30:
      *(_QWORD *)(v28 + 8) = 3;
  }
  return v8;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::ref(uint64_t this)
{
  ++**(_DWORD **)(this + 24);
  return this;
}

_BYTE *WebCore::jsElementPrototypeFunction_getBoundingClientRect(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v18;
  void *v19;

  v4 = *((_QWORD *)a2 + 5);
  v18 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v18, "Element", "getBoundingClientRect");
  v5 = *(JSC::VM **)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::Element::boundingClientRect(*(WebCore::Element **)(v4 + 24));
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = (double *)bmalloc::api::isoAllocate();
  *v14 = 0.0;
  *((_DWORD *)v14 + 2) = 1;
  v14[2] = v7;
  v14[3] = v9;
  v14[4] = v11;
  v14[5] = v13;
  v19 = v14;
  v15 = WebCore::toJSNewlyCreated((uint64_t)this, v5, (uint64_t *)&v19);
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (v16[2] == 1)
    {
      if (*(_QWORD *)v16)
      {
        *(_QWORD *)(*(_QWORD *)v16 + 8) = 3;
        *(_QWORD *)v16 = 0;
      }
      WebCore::DOMRectReadOnly::operator delete(v16);
    }
    else
    {
      --v16[2];
    }
  }
  return (_BYTE *)v15;
}

_QWORD *WebCore::cacheWrapper<WebCore::DOMRect,WebCore::JSDOMRect>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v17;
  uint64_t *v18;

  if ((byte_1EE335168 & 1) == 0)
  {
    qword_1EE335160 = (uint64_t)&off_1E3259E38;
    byte_1EE335168 = 1;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    if (a3)
    {
      v11 = a2;
      if ((a3 & 8) != 0)
        v7 = (a3 - 112) | 1;
      else
        v7 = a3 & 0xFFFFFFFFFFFFC000;
      if ((v7 & 1) != 0)
        v8 = v7 + 47;
      else
        v8 = *(_QWORD *)v7 + 32;
      result = *(_QWORD **)(v8 + 16);
      if (!result)
        result = (_QWORD *)JSC::WeakSet::findAllocator();
      *(_QWORD *)(v8 + 16) = *result;
      a2 = v11;
      *result = a3;
      result[1] = &qword_1EE335160;
      result[2] = a1;
    }
    else
    {
      result = 0;
    }
    v4 = *a2;
    *a2 = (uint64_t)result;
    if (!v4)
      return result;
LABEL_11:
    *(_QWORD *)(v4 + 8) = 3;
    return result;
  }
  v5 = (uint64_t *)(a1 + 32);
  v18 = a2;
  if (a3)
  {
    v12 = (uint64_t *)(a1 + 32);
    if ((a3 & 8) != 0)
      v9 = (a3 - 112) | 1;
    else
      v9 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v9 & 1) != 0)
      v10 = v9 + 47;
    else
      v10 = *(_QWORD *)v9 + 32;
    Allocator = *(_QWORD **)(v10 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v10 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = &qword_1EE335160;
    Allocator[2] = a1;
    v5 = v12;
  }
  else
  {
    Allocator = 0;
  }
  v17 = Allocator;
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v5, (uint64_t *)&v18, (uint64_t *)&v17);
  v4 = (uint64_t)v17;
  if (v17)
    goto LABEL_11;
  return result;
}

uint64_t WebCore::JSDOMRect::subspaceForImpl(WebCore::JSDOMRect *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3528);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 3528))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 3528);
    *(_QWORD *)(v9 + 3528) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 3528);
  *(_QWORD *)(v3 + 3528) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::JSDOMRect::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMRect::createPrototype(WebCore::JSDOMRect *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  unint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  JSC::JSCell *v19;
  JSC::JSObject *Object;
  uint64_t *v21;
  unint64_t SlowCase;
  uint64_t v23;
  int v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::Structure *v29;
  int v30;
  int v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35[6];
  int v36;
  int v37;
  JSC::Structure *v38;
  int v39;

  v5 = (unint64_t *)((char *)this + 40136);
  v6 = *((_QWORD *)a2 + 412);
  if (!v6)
    goto LABEL_4;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSDOMRectReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMRectReadOnly::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMRectReadOnly::s_info + ~((_QWORD)&WebCore::JSDOMRectReadOnly::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSDOMRectReadOnly::s_info)
  {
    v32 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v32) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v32;
      if (v12 == &WebCore::JSDOMRectReadOnly::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_4:
    Structure = WebCore::JSDOMRectReadOnlyPrototype::createStructure((uint64_t *)this, (uint64_t)a2, *((JSC::JSCell **)a2 + 82));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSDOMRectReadOnlyPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSDOMRectReadOnly::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSDOMRectReadOnly::s_info);
  }
  v19 = *(JSC::JSCell **)(v13 + 48);
  LODWORD(v35[0]) = 23;
  if (((unint64_t)v19 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v19);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v21 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v5;
  if (*v5 < v5[1])
    goto LABEL_9;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v33 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v33);
    v5[2] = SlowCase + (int)v33;
LABEL_9:
    *v5 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v19, v35, &WebCore::JSDOMRectPrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v23 = *v21;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_13;
  v23 = *((_QWORD *)this + 4865);
  if ((v23 & 1) == 0)
  {
    v34 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v23 + HIDWORD(v34);
    *((_QWORD *)this + 4865) = v23 + (int)v34;
LABEL_13:
    *v21 = v23 + 16;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  v23 = JSC::LocalAllocator::allocateSlowCase();
LABEL_14:
  *(_DWORD *)v23 = 0;
  v24 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v23 = SlowCase >> 4;
  *(_DWORD *)(v23 + 4) = v24;
  *(_QWORD *)(v23 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSDOMRect::s_info, &WebCore::JSDOMRectPrototypeTableValues, (JSC::JSObject *)v23);
  v25 = *(_QWORD *)(v5[227] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v27 = JSC::JSString::create((uint64_t)this, v35);
  v28 = v35[0];
  v35[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (JSC::Structure *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE));
  v39 = *(_DWORD *)v23;
  v38 = v29;
  v30 = JSC::Structure::outOfLineCapacity(v29);
  v36 = 0;
  v37 = v30;
  v35[0] = (WTF::StringImpl *)&v37;
  v35[1] = (WTF::StringImpl *)v23;
  v35[2] = this;
  v35[3] = (WTF::StringImpl *)&v39;
  v35[4] = (WTF::StringImpl *)&v38;
  v35[5] = (WTF::StringImpl *)&v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v29, this, v25, 6, (uint64_t)v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)v23) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v23, (uint64_t)this, v36, v27);
  *((_DWORD *)v29 + 4) |= 0x10u;
  return v23;
}

unint64_t WebCore::JSDOMRectReadOnlyPrototype::create(WebCore::JSDOMRectReadOnlyPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>(this, (uint64_t)&WebCore::JSDOMRectReadOnly::s_info, (uint64_t)&WebCore::JSDOMRectReadOnlyPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSDOMRectReadOnlyPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMRectReadOnly::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::VM *JSC::reifyStaticProperties<10u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 400; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSDOMConstructor<WebCore::JSMessageChannel>::construct(JSC *a1, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::ScriptExecutionContext *v6;
  WebCore::MessageChannel *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char **v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t SlowCase;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  WebCore::MessageChannel *Allocator;
  JSC::JSCell *v32;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v34;
  JSC::JSGlobalObject *v35;
  int v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t FunctionRealm;
  JSC::JSObject *v47;
  JSC::Structure *v48;
  unint64_t SubclassStructure;
  unint64_t v50;
  JSC::VM *v52;
  uint64_t v53;
  WebCore::MessageChannel *v54;
  WebCore::MessageChannel *v55;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v52 = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v4 + 40));
  if (!v5)
    return WebCore::throwConstructorScriptExecutionContextUnavailableError(a1, &v52, (uint64_t)"MessageChannel", 15);
  v6 = (WebCore::ScriptExecutionContext *)v5;
  v7 = (WebCore::MessageChannel *)WTF::fastMalloc((WTF *)0x18);
  WebCore::MessageChannel::MessageChannel(v7, v6);
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v8 + 3296);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)&WebCore::JSMessageChannel::s_info + ~((_QWORD)&WebCore::JSMessageChannel::s_info << 32)) ^ (((unint64_t)&WebCore::JSMessageChannel::s_info + ~((_QWORD)&WebCore::JSMessageChannel::s_info << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(char ***)(v9 + 16 * v14);
    if (v15 == &WebCore::JSMessageChannel::s_info)
    {
LABEL_4:
      v16 = *(_QWORD *)(v9 + 16 * v14 + 8);
      if (v16)
        goto LABEL_6;
    }
    else
    {
      v37 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v37) & v10;
        v15 = *(char ***)(v9 + 16 * v14);
        ++v37;
        if (v15 == &WebCore::JSMessageChannel::s_info)
          goto LABEL_4;
      }
    }
  }
  v17 = *(uint64_t **)(v8 + 56);
  Structure = WebCore::JSMessageChannelPrototype::createStructure(v17, v8, *(JSC::JSCell **)(v8 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSMessageChannelPrototype::create((WebCore::JSMessageChannelPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSMessageChannel::createStructure(v17, v8, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)v8, v22, (uint64_t)&WebCore::JSMessageChannel::s_info);
LABEL_6:
  v23 = *(_QWORD *)(v8 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 3744);
  if (v26)
    goto LABEL_7;
  v38 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v38))
  {
    __clrex();
LABEL_33:
    MEMORY[0x19AEA534C](v38);
    goto LABEL_34;
  }
  if (__stxr(1u, (unsigned __int8 *)v38))
    goto LABEL_33;
LABEL_34:
  v40 = *(_QWORD *)(v38 + 2824);
  v55 = *(WebCore::MessageChannel **)(v40 + 3744);
  if (!v55)
  {
    v53 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", v23 + 192, v23 + 1872, &v53, JSC::JSCell::numberOfLowerTierCells, (uint64_t *)&v54);
    v42 = (uint64_t)v54;
    v55 = v54;
    v43 = *(_QWORD *)(v40 + 3744);
    *(_QWORD *)(v40 + 3744) = v54;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = *(unsigned int *)(v38 + 2844);
    if ((_DWORD)v44 == *(_DWORD *)(v38 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v38 + 2832, (unint64_t)&v55);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v38 + 2832) + 8 * v44) = v42;
      *(_DWORD *)(v38 + 2844) = v44 + 1;
    }
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  v54 = (WebCore::MessageChannel *)JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSMessageChannel::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v25, (uint64_t *)&v54);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100]((uint64_t *)&v54);
  v41 = __ldxr((unsigned __int8 *)v38);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, (unsigned __int8 *)v38))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
LABEL_7:
  SlowCase = v26[3];
  if (SlowCase >= v26[4])
  {
    SlowCase = v26[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_9;
    }
    v50 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v50);
    v26[5] = SlowCase + (int)v50;
  }
  v26[3] = SlowCase + 32;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = v7;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v28 = *(_QWORD *)(v8 + 3320);
  if ((byte_1EE336148 & 1) == 0)
  {
    qword_1EE336140 = (uint64_t)&off_1E32BE538;
    byte_1EE336148 = 1;
  }
  v55 = v7;
  if ((SlowCase & 8) != 0)
    v29 = (SlowCase - 112) | 1;
  else
    v29 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v29 & 1) != 0)
    v30 = v29 + 47;
  else
    v30 = *(_QWORD *)v29 + 32;
  Allocator = *(WebCore::MessageChannel **)(v30 + 16);
  if (!Allocator)
    Allocator = (WebCore::MessageChannel *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v30 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = SlowCase;
  *((_QWORD *)Allocator + 1) = &qword_1EE336140;
  *((_QWORD *)Allocator + 2) = v28;
  v54 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v28 + 32), (uint64_t *)&v55, (uint64_t *)&v54);
  if (v54)
    *((_QWORD *)v54 + 1) = 3;
  v32 = *(JSC::JSCell **)(a2 + 40);
  if (((unint64_t)v32 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v32);
    if (Object)
    {
      v35 = Object;
      if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
      {
        v45 = *((_QWORD *)a1 + 7);
        FunctionRealm = JSC::getFunctionRealm(a1, Object, v34);
        if (!*(_DWORD *)(v45 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v45) & 1) == 0)
        {
          v47 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSMessageChannel>((uint64_t *)v45, FunctionRealm);
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v35, v47, v48);
          if (!*(_DWORD *)(v45 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v45) & 1) == 0)
            JSC::JSObject::setStructure((JSCell *)SlowCase, (JSC::VM *)v45, SubclassStructure);
        }
      }
    }
  }
  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
    return 0;
  return (_QWORD *)SlowCase;
}

uint64_t WebCore::getDOMStructure<WebCore::JSMessageChannel>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSMessageChannel::s_info);
  if (!result)
  {
    Structure = WebCore::JSMessageChannelPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSMessageChannelPrototype::create((WebCore::JSMessageChannelPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSMessageChannel::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSMessageChannel::s_info);
  }
  return result;
}

JSC::MarkedVectorBase *JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(uint64_t a1, JSValue a2)
{
  JSC::MarkedVectorBase *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  result = (JSC::MarkedVectorBase *)(a1 + 8);
  if ((_DWORD)v4 != v5 && ((v6 = *(_QWORD *)(a1 + 16), v6 != a1 + 32) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    *(JSValue *)(v6 + 8 * v4) = a2;
    *(_DWORD *)result = v4 + 1;
  }
  else
  {
    result = (JSC::MarkedVectorBase *)JSC::MarkedVectorBase::slowAppend(result, a2);
    if ((_DWORD)result == 1)
      *(_BYTE *)a1 = 1;
  }
  return result;
}

uint64_t WebCore::wrap<WebCore::MutationRecord>(uint64_t a1, _DWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v8;

  v4 = (uint64_t *)(*(_QWORD *)(a1 + 3320) + 32);
  v8 = a2;
  v5 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get(v4, &v8);
  if (v5)
    return v5;
  ++a2[2];
  v8 = a2;
  v6 = WebCore::createWrapper<WebCore::MutationRecord,WebCore::MutationRecord>(a1, (uint64_t *)&v8);
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(void))(*(_QWORD *)v8 + 8))();
    else
      --v8[2];
  }
  return v6;
}

uint64_t WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ~(*a2 << 32) + *a2;
    v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
    v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
    v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ ((_DWORD)v6 + ~((_DWORD)v6 << 27)));
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == *a2)
    {
LABEL_6:
      v10 = *(_BYTE **)(v2 + 16 * v7 + 8);
      if (v10 && (v10[8] & 3) == 0)
        return *(_QWORD *)v10;
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == *a2)
          goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t WebCore::getDOMStructure<WebCore::JSMutationRecord>(WebCore::JSMutationRecord *a1, JSC::JSCell **a2)
{
  uint64_t result;
  WebCore::JSDOMGlobalObject *v5;
  JSC::JSCell *Prototype;
  uint64_t v7;

  result = WebCore::getCachedDOMStructure((uint64_t)a2, (uint64_t)&WebCore::JSMutationRecord::s_info);
  if (!result)
  {
    Prototype = (JSC::JSCell *)WebCore::JSMutationRecord::createPrototype(a1, a2, v5);
    v7 = JSC::Structure::create((uint64_t *)a1, (int)a2, Prototype);
    return WebCore::cacheDOMStructure((JSCell *)a2, v7, (uint64_t)&WebCore::JSMutationRecord::s_info);
  }
  return result;
}

uint64_t WebCore::getCachedDOMStructure(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v2 = *(_QWORD *)(a1 + 3296);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 == a2)
      return *(_QWORD *)(v2 + 16 * v7 + 8);
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(_QWORD *)(v2 + 16 * v7);
      ++v10;
      if (v8 == a2)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

uint64_t *WebCore::cacheWrapper<WebCore::MutationRecord,WebCore::JSMutationRecord>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  if ((byte_1EE336178 & 1) == 0)
  {
    qword_1EE336170 = (uint64_t)&off_1E32BE598;
    byte_1EE336178 = 1;
  }
  v3 = (uint64_t *)(a1 + 32);
  v6 = a2;
  JSC::Weak<JSC::JSObject>::Weak(&v5, a3, (uint64_t)&qword_1EE336170, a1);
  result = JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>(v3, &v6, &v5);
  if (v5)
    *(_QWORD *)(v5 + 8) = 3;
  return result;
}

_QWORD *JSC::Weak<JSC::JSObject>::Weak(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *Allocator;
  unint64_t v7;
  uint64_t v8;

  v4 = a1;
  if (a2)
  {
    if ((a2 & 8) != 0)
      v7 = (a2 - 112) | 1;
    else
      v7 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v7 & 1) != 0)
      v8 = v7 + 47;
    else
      v8 = *(_QWORD *)v7 + 32;
    Allocator = *(_QWORD **)(v8 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v8 + 16) = *Allocator;
    *Allocator = a2;
    Allocator[1] = a3;
    Allocator[2] = a4;
    v4 = a1;
  }
  else
  {
    Allocator = 0;
  }
  *v4 = Allocator;
  return v4;
}

unint64_t JSC::allocateCell<WebCore::JSMutationRecord>(WebCore::JSMutationRecord *a1, JSC::VM *a2)
{
  _QWORD *v2;
  unint64_t result;
  unint64_t v4;

  v2 = (_QWORD *)WebCore::JSMutationRecord::subspaceForImpl(a1, a2);
  result = v2[3];
  if (result >= v2[4])
  {
    result = v2[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      result = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_3;
    }
    v4 = *(_QWORD *)(result + 8) ^ v2[6];
    v2[4] = result + HIDWORD(v4);
    v2[5] = result + (int)v4;
  }
  v2[3] = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WebCore::JSMutationRecord::subspaceForImpl(WebCore::JSMutationRecord *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3792);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 3792);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 3792);
    *(_QWORD *)(v9 + 3792) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSMutationRecord::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

_QWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v17 = (uint64_t *)(v6 + 16 * v11);
      v18 = *v17;
      if (*v17)
      {
        if (v18 != -1)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
          v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          v24 = v20 & ((v23 >> 31) ^ v23);
          v25 = 1;
          do
          {
            v26 = v24;
            v10 = *(void **)(v19 + 16 * v24);
            v24 = (v24 + v25++) & v20;
          }
          while (v10);
          v27 = (_QWORD *)(v19 + 16 * v26);
          v28 = v27 + 1;
          v29 = v27[1];
          if (v29)
          {
            *(_QWORD *)(v29 + 8) = 3;
            *v28 = 0;
          }
          *v27 = v18;
          v30 = v6 + 16 * v11;
          v32 = *(_QWORD *)(v30 + 8);
          v31 = v30 + 8;
          *(_QWORD *)v31 = 0;
          *v28 = v32;
          if (*(_QWORD *)v31)
          {
            *(_QWORD *)(*(_QWORD *)v31 + 8) = 3;
            *(_QWORD *)v31 = 0;
          }
          if (v17 == a3)
            v12 = v27;
        }
      }
      else
      {
        v16 = v17[1];
        v14 = v17 + 1;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v15 + 8) = 3;
          *v14 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  if (!*a1)
    return 0;
  result = WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(a1, a2);
  v4 = *a1;
  if (!result)
  {
    if (v4)
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    else
      return 0;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2) & v4;
    v6 = *(_QWORD *)(v2 + 8 * v5);
    if (v6 == *a2)
      return v2 + 8 * v5;
    v8 = 1;
    while (v6)
    {
      v5 = ((_DWORD)v5 + v8) & v4;
      v6 = *(_QWORD *)(v2 + 8 * v5);
      ++v8;
      if (v6 == *a2)
        return v2 + 8 * v5;
    }
  }
  return 0;
}

uint64_t WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

void WebCore::CachedFont::createFont(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, __int16 *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *v11;
  const void *v12;
  float v13[8];
  uint64_t v14;

  v7 = *(uint64_t **)(a1 + 664);
  if (v7)
  {
    ++*(_DWORD *)v7;
    WebCore::FontCustomPlatformData::fontPlatformData((uint64_t)v7, a2, a3, a4, a5, v13);
    if (*(_DWORD *)v7 == 1)
    {
      v10 = (WTF::StringImpl *)v7[3];
      v7[3] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v8);
        else
          *(_DWORD *)v10 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v7 + 2, v8);
      v12 = (const void *)v7[1];
      v7[1] = 0;
      if (v12)
        CFRelease(v12);
      WTF::fastFree((WTF *)v7, v11);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  else
  {
    WebCore::FontCustomPlatformData::fontPlatformData(0, a2, a3, a4, a5, v13);
  }
  WebCore::Font::create((uint64_t)v13, 0, 0, 0, 0, 0, 0, &v14);
  *a6 = v14;
  WebCore::FontPlatformData::~FontPlatformData((WebCore::FontPlatformData *)v13, v9);
}

void WebCore::FontCustomPlatformData::fontPlatformData(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, __int16 *a5@<X4>, float *a6@<X8>)
{
  float v12;
  uint64_t v13;
  const __CFAllocator *v14;
  CFMutableDictionaryRef Mutable;
  const void *v16;
  CFNumberRef v17;
  __CFDictionary *v18;
  CFNumberRef v19;
  uint64_t *v20;
  char v21;
  double v22;
  WebCore::FontCache *v23;
  double v24;
  void *v25;
  WTF *v26;
  CFTypeRef v27;
  float v28;
  WebCore::FontCache *v29;
  float v30;
  CTFontRef CopyWithAttributes;
  CTFontRef v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  CFTypeRef cf;
  char v37;
  uint64_t v38;
  _QWORD v39[3];
  int v40;
  WTF *v41;
  uint64_t v42;
  double valuePtr;
  double v44;

  v12 = *(float *)(a2 + 156) * 1.0;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
    CFRetain(*(CFTypeRef *)(a1 + 8));
  v34 = v13;
  v35 = 1;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  cf = Mutable;
  v37 = 1;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v39[0] = 0;
  v38 = 0;
  *(_QWORD *)((char *)v39 + 5) = 0;
  valuePtr = v12;
  if (std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::UnrealizedCoreTextFont::operator BOOL(void)::$_0,WebCore::UnrealizedCoreTextFont::operator BOOL(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RetainPtr<__CTFont const*>,std::__variant_detail::_Trait<__CTFontDescriptor const*>> const&>((uint64_t)&v44, &v34))
  {
    v16 = (const void *)*MEMORY[0x1E0CA83D8];
    v17 = CFNumberCreate(v14, kCFNumberCGFloatType, &valuePtr);
    CFDictionarySetValue(Mutable, v16, v17);
    if (v17)
      CFRelease(v17);
  }
  if (v35 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
    WebCore::overrideEnhanceTextLegibility(void)::overrideEnhanceTextLegibility = 0;
    *((_BYTE *)v20 + 3330) = 1;
    goto LABEL_12;
  }
  v44 = COERCE_DOUBLE(&valuePtr);
  if (((unsigned int (*)(double *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22UnrealizedCoreTextFontcvbEvE3__0JZNKS9_cvbEvE3__1EEEEEJRKNS0_6__implIJNS6_9RetainPtrIPK8__CTFontEENSF_IPK18__CTFontDescriptorEEEEEEEEDcOT_DpOT0____fmatrix[v35])(&v44, &v34))
  {
    if (((*(unsigned __int16 *)(a2 + 164) | (*(unsigned __int8 *)(a2 + 166) << 16)) & 0x10000) == 0)
    {
      v18 = (__CFDictionary *)cf;
      *(_QWORD *)&v44 = 1;
      v19 = CFNumberCreate(v14, kCFNumberSInt64Type, &v44);
      CFDictionaryAddValue(v18, (const void *)*MEMORY[0x1E0CA82F8], v19);
      if (v19)
        CFRelease(v19);
    }
  }
  LODWORD(Mutable) = *(_DWORD *)(a2 + 160);
  v20 = &qword_1EE2F8000;
    goto LABEL_36;
LABEL_12:
  {
    v21 = WebCore::platformShouldEnhanceTextLegibility(void)::shouldEnhanceTextLegibility;
  }
  else
  {
    v21 = _AXSEnhanceTextLegibilityEnabled() != 0;
    WebCore::platformShouldEnhanceTextLegibility(void)::shouldEnhanceTextLegibility = v21;
  }
  if (HIBYTE(WebCore::overrideEnhanceTextLegibility(void)::overrideEnhanceTextLegibility))
    v21 = WebCore::overrideEnhanceTextLegibility(void)::overrideEnhanceTextLegibility;
  WebCore::UnrealizedCoreTextFont::modifyFromContext((uint64_t)&v34, a2, a5, 1, 1, v21 != 0);
  WebCore::UnrealizedCoreTextFont::realize((WebCore::UnrealizedCoreTextFont *)&v34, (CTFontRef *)&valuePtr);
  v22 = valuePtr;
  v44 = valuePtr;
  if (valuePtr == 0.0)
  {
    v23 = (WebCore::FontCache *)WebCore::FontPlatformData::FontPlatformData((uint64_t)a6, (CFTypeRef *)&v44, a3, a4, Mutable & 1, (Mutable >> 2) & 3, (*(_BYTE *)(a2 + 160) >> 4) & 3, (_DWORD *)a1, v12);
  }
  else
  {
    CFRetain(*(CFTypeRef *)&valuePtr);
    WebCore::FontPlatformData::FontPlatformData((uint64_t)a6, (CFTypeRef *)&v44, a3, a4, Mutable & 1, (Mutable >> 2) & 3, (*(_BYTE *)(a2 + 160) >> 4) & 3, (_DWORD *)a1, v12);
    CFRelease(*(CFTypeRef *)&v22);
  }
  v33 = *(_QWORD *)(a2 + 120);
  v28 = *(float *)(a2 + 156);
  v29 = (WebCore::FontCache *)WebCore::FontCache::forCurrentThread(v23);
  WebCore::FontCache::fontForPlatformData(v29, (const WebCore::FontPlatformData *)a6, &v44);
  v30 = WebCore::Style::adjustedFontSize((float *)&v33, (float *)(*(_QWORD *)&v44 + 16), v28);
  if (v30 != a6[2])
  {
    if (v30 > 1000000.0)
      v30 = 1000000.0;
    a6[2] = v30;
    CopyWithAttributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)a6, v30, 0, 0);
    v32 = *(CTFontRef *)a6;
    *(_QWORD *)a6 = CopyWithAttributes;
    if (v32)
      CFRelease(v32);
  }
  WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>::~Ref((WTF ***)&v44);
  v24 = valuePtr;
  valuePtr = 0.0;
  if (v24 != 0.0)
    CFRelease(*(CFTypeRef *)&v24);
  v26 = v41;
  if (v41)
  {
    v41 = 0;
    LODWORD(v42) = 0;
    WTF::fastFree(v26, v25);
  }
  v27 = cf;
  cf = 0;
  if (v27)
    CFRelease(v27);
  if (v35 != -1)
    ((void (*)(double *, uint64_t *))off_1E34130B8[v35])(&v44, &v34);
}

void WebCore::UnrealizedCoreTextFont::modifyFromContext(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5, int a6)
{
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;
  _BOOL4 v18;
  float v19;
  float v20;
  _BOOL4 v21;
  double v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  const __CFNumber *Value;
  uint64_t v30;
  int v31;
  double v33;
  CFNumberRef v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  const __CFDictionary *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  __int16 v43;
  __n128 v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  _DWORD *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  CFAllocatorRef *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  CFNumberRef v67;
  _DWORD *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  const __CFNumber *v84;
  unsigned int *v85;
  int v86;
  const __CFArray *v87;
  const __CFAllocator *v88;
  CFMutableArrayRef MutableCopy;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  CFStringRef v99;
  CFNumberRef v100;
  CFDictionaryRef v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  int v107;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  CFNumberRef Mutable;
  const void **v121;
  const __CFAllocator *v122;
  CFNumberType v123;
  CFNumberRef v124;
  const __CFAllocator *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int *v128;
  WebCore *v129;
  unsigned int v130;
  CFNumberRef v131;
  const WebCore::Color *v132;
  const void *v133;
  uint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  void *key;
  char **v138;
  uint64_t v139;
  __CFArray *theArray;
  char *v141;
  _DWORD *v142;
  uint64_t valuePtr[2];
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  _DWORD *v149;
  UInt8 bytes[8];
  char **v151;
  uint64_t *v152;
  uint64_t *v153;
  void *values[4];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 24) = a5;
  if (a5)
  {
    v9 = *(_QWORD *)(a2 + 144);
    v10 = (float)(__int16)v9 * 0.25;
    v11 = (float)((int)v9 >> 16) * 0.25;
    *(float *)(a1 + 28) = v10;
    *(float *)(a1 + 32) = v11;
    v12 = (float)((int)(v9 >> 16) >> 16) * 0.25;
    if ((v9 & 0xFF000000000000) == 0)
      v12 = 0.0;
    *(float *)(a1 + 36) = v12;
    *(_BYTE *)(a1 + 48) = *(unsigned __int16 *)(a2 + 164) >> 15;
    if (*((_BYTE *)a3 + 4))
    {
      v13 = (float)a3[1] * 0.25;
      v14 = (float)*a3 * 0.25;
      v15 = v10 < v14;
      if (v13 < v10)
      {
        v15 = v13 < v14;
        v10 = (float)a3[1] * 0.25;
      }
      if (v15)
        v10 = (float)*a3 * 0.25;
      *(float *)(a1 + 28) = v10;
    }
    if (*((_BYTE *)a3 + 10))
    {
      v16 = (float)a3[3];
      v17 = (float)a3[4] * 0.25;
      v18 = v11 < (float)(v16 * 0.25);
      if (v17 < v11)
      {
        v18 = v17 < (float)(v16 * 0.25);
        v11 = (float)a3[4] * 0.25;
      }
      if (v18)
        v11 = v16 * 0.25;
      *(float *)(a1 + 32) = v11;
    }
    if (*((_BYTE *)a3 + 4))
    {
      v19 = (float)*a3;
      v20 = (float)a3[1] * 0.25;
      v21 = v12 < (float)(v19 * 0.25);
      if (v20 < v12)
      {
        v21 = v20 < (float)(v19 * 0.25);
        v12 = (float)a3[1] * 0.25;
      }
      if (v21)
        v12 = v19 * 0.25;
      *(float *)(a1 + 36) = v12;
    }
    if (!a4 && a6)
    {
      CTFontGetAccessibilityBoldWeightOfWeight();
      v23 = v22;
      v24 = 30.0;
      v25 = -0.8;
      if (v23 >= -0.8)
      {
        if (v23 > -0.4)
        {
          v25 = -0.4;
          if (v23 < -0.4 || v23 > 0.0)
          {
            if (v23 < 0.0 || v23 > 0.23)
            {
              v25 = 0.23;
              if (v23 < 0.23 || v23 > 0.3)
              {
                v25 = 0.3;
                if (v23 < 0.3 || v23 > 0.4)
                {
                  v25 = 0.4;
                  if (v23 < 0.4 || v23 > 0.56)
                  {
                    v25 = 0.56;
                    v24 = 1000.0;
                    if (v23 < 0.56 || v23 > 0.62)
                      goto LABEL_46;
                    v27 = 0.62;
                    v28 = 7;
                    v26 = 6;
                  }
                  else
                  {
                    v27 = 0.56;
                    v28 = 6;
                    v26 = 5;
                  }
                }
                else
                {
                  v27 = 0.4;
                  v28 = 5;
                  v26 = 4;
                }
              }
              else
              {
                v27 = 0.3;
                v28 = 4;
                v26 = 3;
              }
            }
            else
            {
              v25 = 0.0;
              v27 = 0.23;
              v28 = 3;
              v26 = 2;
            }
          }
          else
          {
            v27 = 0.0;
            v28 = 2;
            v26 = 1;
          }
        }
        else
        {
          v26 = 0;
          v27 = -0.4;
          v28 = 1;
        }
        v24 = *(float *)&WebCore::keyframes[2 * v26 + 1]
            + (float)((float)((float)(v23 - v25) / (float)(v27 - v25))
                    * (float)(*(float *)&WebCore::keyframes[2 * v28 + 1] - *(float *)&WebCore::keyframes[2 * v26 + 1]));
      }
LABEL_46:
      *(float *)(a1 + 28) = v24;
    }
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), (const void *)*MEMORY[0x1E0CA83D8]);
  if (!Value
    || (valuePtr[0] = 0, !CFNumberGetValue(Value, kCFNumberCGFloatType, valuePtr))
    || (v33 = *(double *)valuePtr, *(double *)valuePtr == 0.0))
  {
    v30 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v30 == -1)
      goto LABEL_241;
    valuePtr[0] = (uint64_t)values;
    ((void (*)(UInt8 *__return_ptr, uint64_t *, uint64_t))off_1E3412EB8[v30])(bytes, valuePtr, a1);
    if (*(_QWORD *)bytes)
    {
      valuePtr[0] = 0;
      v31 = CFNumberGetValue(*(CFNumberRef *)bytes, kCFNumberCGFloatType, valuePtr);
      if (*(double *)valuePtr == 0.0 || v31 == 0)
        v33 = 0.0;
      else
        v33 = *(double *)valuePtr;
      v34 = *(CFNumberRef *)bytes;
      *(_QWORD *)bytes = 0;
      if (v34)
        CFRelease(v34);
    }
    else
    {
      v33 = 0.0;
    }
  }
  *(double *)(a1 + 40) = v33;
  WebCore::FontTaggedSettings<float>::operator=((WTF *)(a1 + 72), (WTF *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 160) & 0x30) == 0x20)
  {
    if (*(_DWORD *)(a1 + 64) != 2)
      *(_DWORD *)(a1 + 64) = 2;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v35 = *(_DWORD *)(a1 + 64);
    if ((*(_WORD *)(a2 + 164) & 0x4000) != 0)
    {
      if (v35)
        *(_DWORD *)(a1 + 64) = 0;
    }
    else if (v35 != 1)
    {
      *(_DWORD *)(a1 + 64) = 1;
    }
  }
  v36 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v36 == -1)
    goto LABEL_241;
  valuePtr[0] = (uint64_t)bytes;
  if (!((unsigned int (*)(uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22UnrealizedCoreTextFontcvbEvE3__0JZNKS9_cvbEvE3__1EEEEEJRKNS0_6__implIJNS6_9RetainPtrIPK8__CTFontEENSF_IPK18__CTFontDescriptorEEEEEEEEDcOT_DpOT0____fmatrix[v36])(valuePtr, a1))return;
  v38 = *(const __CFDictionary **)(a1 + 16);
  v39 = *(unsigned __int8 *)(a1 + 24);
  v40 = *(_DWORD *)(a1 + 28);
  v41 = *(_DWORD *)(a1 + 36);
  v42 = *(_QWORD *)(a1 + 40);
  v146 = *(_DWORD *)(a1 + 32);
  v147 = v40;
  v145 = v41;
  v43 = *(_WORD *)(a2 + 164);
  WebCore::FontDescription::variantSettings(a2, v37, (uint64_t)valuePtr);
  v45 = *(_DWORD *)(a2 + 160);
  v46 = *(unsigned __int8 *)(a2 + 166);
  v47 = *(unsigned __int16 *)(a2 + 164);
  v141 = 0;
  v142 = 0;
  if (v39)
  {
    LODWORD(values[0]) = 1952999287;
    WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,float &>((uint64_t)bytes, (uint64_t *)&v141, (unsigned int *)values, (float *)&v147);
    LODWORD(values[0]) = 1752458359;
    WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,float &>((uint64_t)bytes, (uint64_t *)&v141, (unsigned int *)values, (float *)&v146);
    if (v43 < 0)
    {
      LODWORD(values[0]) = 1818326121;
      LODWORD(v149) = 1;
      v44.n128_f32[0] = WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t)bytes, (uint64_t *)&v141, (unsigned int *)values, (int *)&v149);
    }
    else
    {
      LODWORD(values[0]) = 1953393779;
      v44.n128_f32[0] = WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,float &>((uint64_t)bytes, (uint64_t *)&v141, (unsigned int *)values, (float *)&v145);
    }
  }
  v48 = *((_QWORD *)a3 + 3);
  if (v48)
  {
    v134 = *(unsigned int *)(v48 + 20);
    if ((_DWORD)v134)
    {
      v135 = *(_DWORD **)(v48 + 8);
      v136 = &v135[2 * v134];
      do
      {
        LODWORD(values[0]) = *v135;
        LODWORD(v149) = v135[1];
        WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v149, (uint64_t)bytes);
        v135 += 2;
      }
      while (v135 != v136);
    }
  }
  v149 = v38;
  v148 = v42;
  *(_QWORD *)bytes = &v149;
  v151 = &v141;
  v152 = &v148;
  v153 = (uint64_t *)&v149;
  v49 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v49 == -1)
LABEL_241:
    std::__throw_bad_variant_access[abi:sn180100]();
  values[0] = bytes;
  ((void (*)(void **, uint64_t, __n128))off_1E3412ED8[v49])(values, a1 + 56, v44);
  v50 = *((_QWORD *)a3 + 3);
  if (v50)
  {
    v50 = *(_QWORD *)(v50 + 56);
    if (v50)
      ++*(_DWORD *)(v50 + 8);
  }
  v149 = (_DWORD *)v50;
  WebCore::computeFeatureSettingsFromVariants(valuePtr, (uint64_t *)&v149, (uint64_t *)bytes);
  v52 = v149;
  v149 = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *(CFNumberRef *)bytes;
  if (*(_QWORD *)bytes)
  {
    v55 = *(unsigned int *)(*(_QWORD *)bytes - 4);
    v56 = *(_QWORD *)bytes + 8 * v55;
    if (*(_DWORD *)(*(_QWORD *)bytes - 12))
    {
      v54 = *(CFNumberRef *)bytes;
      if ((_DWORD)v55)
      {
        v58 = 8 * v55;
        v54 = *(CFNumberRef *)bytes;
        while ((*(_DWORD *)v54 + 1) <= 1)
        {
          v54 = (CFNumberRef)((char *)v54 + 8);
          v58 -= 8;
          if (!v58)
          {
            v54 = (CFNumberRef)v56;
            goto LABEL_85;
          }
        }
      }
      goto LABEL_85;
    }
    v54 = (CFNumberRef)(*(_QWORD *)bytes + 8 * v55);
  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
  v56 = *(_QWORD *)bytes + 8 * v55;
LABEL_85:
  if (*(_QWORD *)bytes)
    v57 = *(_QWORD *)bytes + 8 * *(unsigned int *)(*(_QWORD *)bytes - 4);
  else
    v57 = 0;
  if ((CFNumberRef)v57 == v54)
  {
    if (*(_QWORD *)bytes)
      goto LABEL_150;
    goto LABEL_96;
  }
  do
  {
    v68 = v142;
    if (v142
      || (WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand((uint64_t *)&v142, 0), (v68 = v142) != 0))
    {
      v69 = *(v68 - 2);
    }
    else
    {
      v69 = 0;
    }
    v70 = *(_DWORD *)v54;
    v71 = (v70 - 1640531527) ^ ((v70 - 1640531527) << 16);
    v72 = (v71 + BYTE1(v70) + (v71 >> 11)) ^ ((v71 + BYTE1(v70) + (v71 >> 11)) << 16);
    v73 = (v72 + BYTE2(v70) + (v72 >> 11)) ^ ((v72 + BYTE2(v70) + (v72 >> 11)) << 16);
    v74 = (v73 + HIBYTE(v70) + (v73 >> 11)) ^ ((v73 + HIBYTE(v70) + (v73 >> 11)) << 16);
    v75 = (v74 + (v74 >> 11)) ^ (8 * (v74 + (v74 >> 11)));
    v76 = (v75 + (v75 >> 5)) ^ (4 * (v75 + (v75 >> 5)));
    v77 = (v76 + (v76 >> 15)) ^ ((v76 + (v76 >> 15)) << 10);
    if (!v77)
      v77 = 0x800000;
    v78 = v77 & v69;
    v51 = &v68[2 * (v77 & v69)];
    v79 = *v51;
    if (*v51)
    {
      v85 = 0;
      v86 = 1;
      do
      {
        if (v79 == v70)
        {
          v51[1] = *((_DWORD *)v54 + 1);
          goto LABEL_131;
        }
        if (v79 == -1)
          v85 = v51;
        v78 = (v78 + v86) & v69;
        v51 = &v68[2 * v78];
        v79 = *v51;
        ++v86;
      }
      while (*v51);
      if (v85)
      {
        *(_QWORD *)v85 = 0;
        --*(v142 - 4);
        v70 = *(_DWORD *)v54;
        v51 = v85;
      }
    }
    *v51 = v70;
    v51[1] = *((_DWORD *)v54 + 1);
    if (v142)
      v80 = *(v142 - 3) + 1;
    else
      v80 = 1;
    *(v142 - 3) = v80;
    if (v142)
      v81 = *(v142 - 3);
    else
      v81 = 0;
    v82 = (*(v142 - 4) + v81);
    v83 = *(v142 - 1);
    if (v83 > 0x400)
    {
      if (v83 > 2 * v82)
        goto LABEL_131;
    }
    else if (3 * v83 > 4 * v82)
    {
      goto LABEL_131;
    }
    WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand((uint64_t *)&v142, v51);
LABEL_131:
    v84 = (CFNumberRef)((char *)v54 + 8);
    v54 = (CFNumberRef)v56;
    if (v84 != (const __CFNumber *)v56)
    {
      v54 = v84;
      while ((*(_DWORD *)v54 + 1) <= 1)
      {
        v54 = (CFNumberRef)((char *)v54 + 8);
        if (v54 == (CFNumberRef)v56)
        {
          v54 = (CFNumberRef)v56;
          break;
        }
      }
    }
  }
  while (v54 != (CFNumberRef)v57);
  v53 = *(CFNumberRef *)bytes;
  if (*(_QWORD *)bytes)
LABEL_150:
    WTF::fastFree((CFNumberRef)((char *)v53 - 16), v51);
LABEL_96:
  v59 = v47 | (v46 << 16);
  if ((v45 & 0x30) == 0x10)
  {
    LODWORD(values[0]) = 1634167148;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962275;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962276;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962280;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1953259875;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    if ((v59 & 0x20000) != 0)
      goto LABEL_177;
  }
  else
  {
    if ((v59 & 0x20000) == 0)
      goto LABEL_98;
LABEL_177:
    LODWORD(values[0]) = 1634167148;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962275;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962276;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
    LODWORD(values[0]) = 1734962280;
    LODWORD(v148) = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
  }
LABEL_98:
  v60 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v60)
  {
    v96 = *(_DWORD **)a2;
    v97 = *(_QWORD *)a2 + 8 * v60;
    do
    {
      LODWORD(values[0]) = *v96;
      LODWORD(v148) = v96[1];
      WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>((uint64_t *)&v142, (unsigned int *)values, (unsigned int *)&v148, (uint64_t)bytes);
      v96 += 2;
    }
    while (v96 != (_DWORD *)v97);
  }
  v61 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v61)
  {
    v102 = *(unsigned int **)(a2 + 16);
    v103 = &v102[2 * v61];
    while (1)
    {
      v104 = *v102;
      v105 = v102[1];
      v106 = v141;
      if (v141
        || (WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,float>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand((uint64_t *)&v141, 0), (v106 = v141) != 0))
      {
        v107 = *((_DWORD *)v106 - 2);
      }
      else
      {
        v107 = 0;
      }
      v108 = WTF::HashMapTranslator<WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHash>::hash<std::array<char,4ul>>(v104) & v107;
      v109 = (unsigned int *)&v106[8 * v108];
      v110 = *v109;
      if (*v109)
      {
        v111 = 0;
        v112 = 1;
        do
        {
          if (v110 == v104)
          {
            v109[1] = v105;
            goto LABEL_198;
          }
          if (v110 == -1)
            v111 = v109;
          v108 = (v108 + v112) & v107;
          v109 = (unsigned int *)&v106[8 * v108];
          v110 = *v109;
          ++v112;
        }
        while (*v109);
        if (v111)
        {
          *(_QWORD *)v111 = 0x7F80000000000000;
          --*((_DWORD *)v141 - 4);
          v109 = v111;
        }
      }
      *v109 = v104;
      v109[1] = v105;
      v113 = v141 ? *((_DWORD *)v141 - 3) + 1 : 1;
      *((_DWORD *)v141 - 3) = v113;
      v114 = v141 ? *((_DWORD *)v141 - 3) : 0;
      v115 = (*((_DWORD *)v141 - 4) + v114);
      v116 = *((unsigned int *)v141 - 1);
      if (v116 > 0x400)
        break;
      if (3 * v116 <= 4 * v115)
        goto LABEL_196;
LABEL_198:
      v102 += 2;
      if (v102 == v103)
        goto LABEL_100;
    }
    if (v116 > 2 * v115)
      goto LABEL_198;
LABEL_196:
    WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,float>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand((uint64_t *)&v141, v109);
    goto LABEL_198;
  }
LABEL_100:
  v62 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v142 && *(v142 - 3))
  {
    key = (void *)*MEMORY[0x1E0CA8320];
    v87 = (const __CFArray *)CFDictionaryGetValue(v38, (const void *)*MEMORY[0x1E0CA8320]);
    v88 = *v62;
    if (v87)
      MutableCopy = CFArrayCreateMutableCopy(*v62, 0, v87);
    else
      MutableCopy = CFArrayCreateMutable(*v62, 0, MEMORY[0x1E0C9B378]);
    theArray = MutableCopy;
    v90 = v142;
    v91 = WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::begin(v142);
    v92 = v91;
    v94 = v93;
    if (v90)
      v95 = &v90[2 * *(v90 - 1)];
    else
      v95 = 0;
    if (v95 != v91)
    {
      v138 = (char **)*MEMORY[0x1E0CA8390];
      v139 = *MEMORY[0x1E0CA8388];
      do
      {
        v98 = v92[1];
        *(_DWORD *)bytes = *v92;
        v99 = CFStringCreateWithBytes(v88, bytes, 4, 0x600u, 0);
        LODWORD(v148) = v98;
        v100 = CFNumberCreate(v88, kCFNumberIntType, &v148);
        *(_QWORD *)bytes = v139;
        v151 = v138;
        values[0] = (void *)v99;
        values[1] = v100;
        v101 = CFDictionaryCreate(v88, (const void **)bytes, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFArrayAppendValue(theArray, v101);
        if (v101)
          CFRelease(v101);
        if (v100)
          CFRelease(v100);
        if (v99)
          CFRelease(v99);
        while (1)
        {
          v92 += 2;
          if (v92 == v94)
            break;
          if ((*v92 + 1) > 1)
            goto LABEL_172;
        }
        v92 = v94;
LABEL_172:
        ;
      }
      while (v92 != v95);
    }
    CFDictionarySetValue(v38, key, theArray);
    v62 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (theArray)
      CFRelease(theArray);
  }
  WebCore::UnrealizedCoreTextFont::applyVariations(v38, &v141);
  v64 = *((_QWORD *)a3 + 3);
  if (v64)
    v65 = v64 + 24;
  else
    v65 = 0;
  v66 = *(unsigned __int8 *)(a2 + 104);
  if (v66 != 3)
  {
    if (v66 == 2)
    {
      v117 = -2;
    }
    else
    {
      if (v66 != 1)
        goto LABEL_108;
      v117 = -1;
    }
    *(_QWORD *)bytes = v117;
    Mutable = CFNumberCreate(*v62, kCFNumberCFIndexType, bytes);
    v121 = (const void **)MEMORY[0x1E0CA83A8];
LABEL_214:
    CFDictionarySetValue(v38, *v121, Mutable);
    goto LABEL_215;
  }
  if (!v65)
    goto LABEL_108;
  if (!*(_BYTE *)(v65 + 8))
    goto LABEL_223;
  v118 = *(_QWORD *)v65;
  if (v118 == 2)
  {
    *(_QWORD *)bytes = HIDWORD(*(_QWORD *)v65);
    v122 = *v62;
    v123 = kCFNumberSInt64Type;
LABEL_221:
    v124 = CFNumberCreate(v122, v123, bytes);
    CFDictionarySetValue(v38, (const void *)*MEMORY[0x1E0CA83A8], v124);
    if (v124)
      CFRelease(v124);
    goto LABEL_223;
  }
  if (v118 == 1)
  {
    v119 = -2;
LABEL_219:
    *(_QWORD *)bytes = v119;
    v122 = *v62;
    v123 = kCFNumberCFIndexType;
    goto LABEL_221;
  }
  if (!*(_QWORD *)v65)
  {
    v119 = -1;
    goto LABEL_219;
  }
LABEL_223:
  if (!*(_DWORD *)(v65 + 28))
    goto LABEL_108;
  v125 = *v62;
  Mutable = CFDictionaryCreateMutable(*v62, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v126 = *(unsigned int *)(v65 + 28);
  if ((_DWORD)v126)
  {
    v127 = *(unsigned int **)(v65 + 16);
    v128 = &v127[4 * v126];
    while (1)
    {
      v130 = *v127;
      v129 = (WebCore *)(v127 + 2);
      *(_QWORD *)bytes = v130;
      v131 = CFNumberCreate(v125, kCFNumberSInt64Type, bytes);
      WebCore::cachedCGColor(v129, v132, values);
      CFDictionarySetValue(Mutable, v131, values[0]);
      v133 = values[0];
      values[0] = 0;
      if (v133)
        break;
      if (v131)
        goto LABEL_228;
LABEL_229:
      v127 = (unsigned int *)((char *)v129 + 8);
      if (v127 == v128)
        goto LABEL_233;
    }
    CFRelease(v133);
    if (!v131)
      goto LABEL_229;
LABEL_228:
    CFRelease(v131);
    goto LABEL_229;
  }
LABEL_233:
  if (CFDictionaryGetCount(Mutable))
  {
    v121 = (const void **)MEMORY[0x1E0CA83B0];
    goto LABEL_214;
  }
LABEL_215:
  if (Mutable)
    CFRelease(Mutable);
LABEL_108:
  if (((*(unsigned __int16 *)(a2 + 164) | (*(unsigned __int8 *)(a2 + 166) << 16)) & 0x10000) == 0)
  {
    CFDictionaryAddValue(v38, (const void *)*MEMORY[0x1E0CA8468], (const void *)*MEMORY[0x1E0C9AE40]);
    *(_QWORD *)bytes = 1;
    v67 = CFNumberCreate(*v62, kCFNumberSInt64Type, bytes);
    CFDictionaryAddValue(v38, (const void *)*MEMORY[0x1E0CA82F8], v67);
    if (v67)
      CFRelease(v67);
  }
  if (v141)
    WTF::fastFree((WTF *)(v141 - 16), v63);
  if (v142)
    WTF::fastFree((WTF *)(v142 - 4), v63);
  WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)&v144, (WTF::StringImpl *)v63);
}

float WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,float &>(uint64_t a1, uint64_t *a2, unsigned int *a3, float *a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  int v22;
  float result;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;

  v8 = *a2;
  if (*a2)
    goto LABEL_3;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x50);
  v9[2] = 0x7F80000000000000;
  v9[3] = 0x7F80000000000000;
  v9 += 2;
  v9[2] = 0x7F80000000000000;
  v9[3] = 0x7F80000000000000;
  v9[4] = 0x7F80000000000000;
  v9[5] = 0x7F80000000000000;
  v9[6] = 0x7F80000000000000;
  v9[7] = 0x7F80000000000000;
  *a2 = (uint64_t)v9;
  *((_DWORD *)v9 - 1) = 8;
  *(_DWORD *)(*a2 - 8) = 7;
  *(_DWORD *)(*a2 - 16) = 0;
  *(_DWORD *)(*a2 - 12) = 0;
  v8 = *a2;
  if (*a2)
  {
LABEL_3:
    v10 = 0;
    v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v11 = 0;
    v10 = 1;
  }
  v12 = *a3;
  v13 = (v12 - 1640531527) ^ ((v12 - 1640531527) << 16);
  v14 = (v13 + BYTE1(v12) + (v13 >> 11)) ^ ((v13 + BYTE1(v12) + (v13 >> 11)) << 16);
  v15 = (v14 + BYTE2(v12) + (v14 >> 11)) ^ ((v14 + BYTE2(v12) + (v14 >> 11)) << 16);
  v16 = (v15 + HIBYTE(v12) + (v15 >> 11)) ^ ((v15 + HIBYTE(v12) + (v15 >> 11)) << 16);
  v17 = (v16 + (v16 >> 11)) ^ (8 * (v16 + (v16 >> 11)));
  v18 = (v17 + (v17 >> 5)) ^ (4 * (v17 + (v17 >> 5)));
  v19 = (v18 + (v18 >> 15)) ^ ((v18 + (v18 >> 15)) << 10);
  if (!v19)
    v19 = 0x800000;
  v20 = v19 & v11;
  v21 = (_DWORD *)(v8 + 8 * (v19 & v11));
  v22 = *v21;
  if (*v21)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v22 == v12)
      {
        if ((v10 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a1 = v21;
        *(_QWORD *)(a1 + 8) = v8 + 8 * v32;
        *(_BYTE *)(a1 + 16) = 0;
        result = *a4;
        v21[1] = *(_DWORD *)a4;
        return result;
      }
      if (v22 == -1)
        v30 = v21;
      v20 = (v20 + v31) & v11;
      v21 = (_DWORD *)(v8 + 8 * v20);
      v22 = *v21;
      ++v31;
    }
    while (*v21);
    if (v30)
    {
      *v30 = 0x7F80000000000000;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v21 = v30;
    }
  }
  *v21 = v12;
  result = *a4;
  v21[1] = *(_DWORD *)a4;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_13;
LABEL_15:
    v21 = WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,float>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(a2, v21);
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_13;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_15;
LABEL_13:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v26 + 8 * v29;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t *WebCore::computeFeatureSettingsFromVariants@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  const WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  int v27;
  char v28;
  uint64_t *v29[2];
  char v30;
  _QWORD v31[3];
  unsigned int v32;

  v4 = result;
  *a3 = 0;
  v6 = *(unsigned __int8 *)result;
  if (v6 == 2)
  {
    LODWORD(v29[0]) = 1634167148;
    v32 = 0;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
    LODWORD(v29[0]) = 1734962275;
    v32 = 0;
  }
  else
  {
    if (v6 != 1)
      goto LABEL_3;
    LODWORD(v29[0]) = 1634167148;
    v32 = 1;
    WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
    LODWORD(v29[0]) = 1734962275;
    v32 = 1;
  }
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_3:
  v7 = *((unsigned __int8 *)v4 + 1);
  if (v7 == 2)
  {
    LODWORD(v29[0]) = 1734962276;
    v32 = 0;
  }
  else
  {
    if (v7 != 1)
      goto LABEL_5;
    LODWORD(v29[0]) = 1734962276;
    v32 = 1;
  }
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_5:
  v8 = *((unsigned __int8 *)v4 + 2);
  if (v8 == 2)
  {
    LODWORD(v29[0]) = 1734962280;
    v32 = 0;
  }
  else
  {
    if (v8 != 1)
      goto LABEL_7;
    LODWORD(v29[0]) = 1734962280;
    v32 = 1;
  }
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_7:
  v9 = *((unsigned __int8 *)v4 + 3);
  if (v9 == 2)
  {
    LODWORD(v29[0]) = 1953259875;
    v32 = 0;
  }
  else
  {
    if (v9 != 1)
      goto LABEL_9;
    LODWORD(v29[0]) = 1953259875;
    v32 = 1;
  }
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_9:
  v10 = *((unsigned __int8 *)v4 + 4);
  if (v10 == 2)
  {
    v18 = 1936749939;
LABEL_50:
    LODWORD(v29[0]) = v18;
    v32 = 1;
    result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
    goto LABEL_39;
  }
  if (v10 == 1)
  {
    v18 = 1935832435;
    goto LABEL_50;
  }
LABEL_39:
  switch(*((_BYTE *)v4 + 5))
  {
    case 1:
      goto LABEL_41;
    case 2:
      LODWORD(v29[0]) = 1668493923;
      v32 = 1;
      WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_41:
      v16 = 1885564275;
      goto LABEL_67;
    case 3:
      goto LABEL_66;
    case 4:
      LODWORD(v29[0]) = 1668297315;
      v32 = 1;
      WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_66:
      v16 = 1885430640;
      goto LABEL_67;
    case 5:
      v16 = 1667853941;
      goto LABEL_67;
    case 6:
      v16 = 1819568500;
LABEL_67:
      LODWORD(v29[0]) = v16;
      v32 = 1;
      result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
      break;
    default:
      break;
  }
  v11 = *((unsigned __int8 *)v4 + 6);
  if (v11 == 2)
  {
    v19 = 1836412527;
  }
  else
  {
    if (v11 != 1)
      goto LABEL_14;
    v19 = 1836412524;
  }
  LODWORD(v29[0]) = v19;
  v32 = 1;
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_14:
  v12 = *((unsigned __int8 *)v4 + 7);
  if (v12 == 2)
  {
    v15 = 1836412532;
  }
  else
  {
    if (v12 != 1)
      goto LABEL_16;
    v15 = 1836412528;
  }
  LODWORD(v29[0]) = v15;
  v32 = 1;
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_16:
  v13 = *((unsigned __int8 *)v4 + 8);
  if (v13 == 2)
  {
    v20 = 1668441697;
  }
  else
  {
    if (v13 != 1)
      goto LABEL_18;
    v20 = 1667330662;
  }
  LODWORD(v29[0]) = v20;
  v32 = 1;
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_18:
  if (*((_BYTE *)v4 + 9))
  {
    LODWORD(v29[0]) = 1852076655;
    v32 = 1;
    result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
  }
  if (*((_BYTE *)v4 + 10))
  {
    LODWORD(v29[0]) = 1869768058;
    v32 = 1;
    result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
  }
  if (!*((_BYTE *)v4 + 81))
  {
    if (*((_BYTE *)v4 + 80))
    {
      LODWORD(v29[0]) = 1953720680;
      v32 = 1;
      result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
    }
    v21 = *a2;
    if (*a2)
    {
      v30 = 0;
      v29[0] = a3;
      v29[1] = (uint64_t *)&v30;
      v28 = 0;
      v31[0] = &v30;
      v31[1] = a3;
      v31[2] = &v28;
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_0::operator()<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>((uint64_t)v31, (const WTF::StringImpl **)v4[3], (const WTF::StringImpl *)*((unsigned int *)v4 + 9), (uint64_t *)(v21 + 16), 0x7373u);
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_0::operator()<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>((uint64_t)v31, (const WTF::StringImpl **)v4[5], (const WTF::StringImpl *)*((unsigned int *)v4 + 13), (uint64_t *)(*a2 + 32), 0x7663u);
      v22 = (const WTF::StringImpl *)(*a2 + 24);
      v32 = 1953259891;
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(v29, (const WTF::StringImpl **)v4 + 2, v22, &v32);
      v23 = (const WTF::StringImpl *)(*a2 + 40);
      v32 = 1752397683;
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(v29, (const WTF::StringImpl **)v4 + 7, v23, &v32);
      v24 = (const WTF::StringImpl *)(*a2 + 40);
      v32 = 1752658787;
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(v29, (const WTF::StringImpl **)v4 + 7, v24, &v32);
      v25 = (const WTF::StringImpl *)(*a2 + 48);
      v32 = 1835954799;
      WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(v29, (const WTF::StringImpl **)v4 + 8, v25, &v32);
      v26 = (const WTF::StringImpl *)(*a2 + 56);
      v32 = 1953259886;
      result = (uint64_t *)WebCore::computeFeatureSettingsFromVariants(WebCore::FontVariantSettings const&,WTF::RefPtr<WebCore::FontFeatureValues,WTF::RawPtrTraits<WebCore::FontFeatureValues>,WTF::DefaultRefDerefTraits<WebCore::FontFeatureValues>>)::$_2::operator()<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(v29, (const WTF::StringImpl **)v4 + 9, v26, &v32);
    }
  }
  switch(*((_BYTE *)v4 + 88))
  {
    case 1:
      v17 = 943157354;
      goto LABEL_75;
    case 2:
      v17 = 859336810;
      goto LABEL_75;
    case 3:
      v17 = 809070698;
      goto LABEL_75;
    case 4:
      v17 = 875589738;
      goto LABEL_75;
    case 5:
      v17 = 1819307379;
      goto LABEL_75;
    case 6:
      v17 = 1684107892;
LABEL_75:
      LODWORD(v29[0]) = v17;
      v32 = 1;
      result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
      break;
    default:
      break;
  }
  v14 = *((unsigned __int8 *)v4 + 89);
  if (v14 == 2)
  {
    v27 = 1684633456;
  }
  else
  {
    if (v14 != 1)
      goto LABEL_26;
    v27 = 1684633446;
  }
  LODWORD(v29[0]) = v27;
  v32 = 1;
  result = WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
LABEL_26:
  if (*((_BYTE *)v4 + 90) == 1)
  {
    LODWORD(v29[0]) = 2036495730;
    v32 = 1;
    return WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>(a3, (unsigned int *)v29, &v32, (uint64_t)v31);
  }
  return result;
}

void WebCore::UnrealizedCoreTextFont::applyVariations(const __CFDictionary *a1, char **a2)
{
  const void *v4;
  const __CFDictionary *Value;
  const __CFAllocator *v6;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  char *v17;
  uint64_t valuePtr;

  if (!*a2 || !*((_DWORD *)*a2 - 3))
    return;
  v4 = (const void *)*MEMORY[0x1E0CA8470];
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8470]);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (Value)
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Value);
  else
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = MutableCopy;
  v9 = *a2;
  if (*a2)
  {
    v10 = *((unsigned int *)v9 - 1);
    v11 = &v9[8 * v10];
    if (*((_DWORD *)v9 - 3))
    {
      v12 = *a2;
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        v12 = *a2;
        while ((*(_DWORD *)v12 + 1) <= 1)
        {
          v12 += 8;
          v13 -= 8;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_14;
          }
        }
      }
      goto LABEL_14;
    }
    v12 = &v9[8 * v10];
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = &v9[8 * v10];
LABEL_14:
  if (v9)
    v14 = &v9[8 * *((unsigned int *)v9 - 1)];
  else
    v14 = 0;
  while (v12 != v14)
  {
    valuePtr = 0;
    valuePtr = ((uint64_t)v12[1] << 16) | ((uint64_t)*v12 << 24) | ((uint64_t)v12[2] << 8) | v12[3];
    v15 = CFNumberCreate(v6, kCFNumberLongLongType, &valuePtr);
    v16 = CFNumberCreate(v6, kCFNumberFloatType, v12 + 4);
    CFDictionarySetValue(v8, v15, v16);
    if (v16)
      CFRelease(v16);
    if (v15)
      CFRelease(v15);
    v17 = v12 + 8;
    v12 = v11;
    if (v17 != v11)
    {
      v12 = v17;
      while ((*(_DWORD *)v12 + 1) <= 1)
      {
        v12 += 8;
        if (v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
  CFDictionarySetValue(a1, v4, v8);
  if (v8)
    CFRelease(v8);
}

uint64_t *WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul>,int>@<X0>(uint64_t *result@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = (v11 - 1640531527) ^ ((v11 - 1640531527) << 16);
  v13 = (v12 + BYTE1(v11) + (v12 >> 11)) ^ ((v12 + BYTE1(v11) + (v12 >> 11)) << 16);
  v14 = (v13 + BYTE2(v11) + (v13 >> 11)) ^ ((v13 + BYTE2(v11) + (v13 >> 11)) << 16);
  v15 = (v14 + HIBYTE(v11) + (v14 >> 11)) ^ ((v14 + HIBYTE(v11) + (v14 >> 11)) << 16);
  v16 = (v15 + (v15 >> 11)) ^ (8 * (v15 + (v15 >> 11)));
  v17 = (v16 + (v16 >> 5)) ^ (4 * (v16 + (v16 >> 5)));
  v18 = (v17 + (v17 >> 15)) ^ ((v17 + (v17 >> 15)) << 10);
  if (!v18)
    v18 = 0x800000;
  v19 = v18 & v10;
  v20 = (unsigned int *)(v8 + 8 * (v18 & v10));
  v21 = *v20;
  if (*v20)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v21 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v20;
        *(_QWORD *)(a4 + 8) = v8 + 8 * v30;
        *(_BYTE *)(a4 + 16) = 0;
        v20[1] = *a3;
        return result;
      }
      if (v21 == -1)
        v28 = v20;
      v19 = (v19 + v29) & v10;
      v20 = (unsigned int *)(v8 + 8 * v19);
      v21 = *v20;
      ++v29;
    }
    while (*v20);
    if (v28)
    {
      *(_QWORD *)v28 = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v20 = v28;
    }
  }
  *v20 = v11;
  v20[1] = *a3;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_12;
LABEL_25:
    result = WTF::HashTable<std::array<char,4ul>,WTF::KeyValuePair<std::array<char,4ul>,int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::array<char,4ul>,int>>,WebCore::FourCharacterTagHash,WTF::HashMap<std::array<char,4ul>,int,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<int>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::FourCharacterTagHashTraits>::expand(v6, v20);
    v20 = (unsigned int *)result;
    v24 = *v6;
    if (*v6)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_12;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_25;
LABEL_12:
  *(_QWORD *)a4 = v20;
  *(_QWORD *)(a4 + 8) = v24 + 8 * v27;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t WebCore::IOSApplication::isSafariViewService(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81744 == 1)
    return byte_1ECE81743 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81743 = IsEqualTo;
  byte_1ECE81744 = 1;
  return result;
}

void sub_19437DC48(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::OverlapMapContainer::ClippingScope const&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v19;
  uint64_t v20;

  v3 = WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 72 * v4;
  v7 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v3;
  *(_QWORD *)(v6 + 16) = v7;
  v8 = *(unsigned int *)(v3 + 36);
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  v9 = v6 + 24;
  *(_DWORD *)(v9 + 12) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >= 0x38E38E4)
      goto LABEL_10;
    v19 = 72 * v8;
    v20 = WTF::fastMalloc((WTF *)(72 * v8));
    *(_DWORD *)(v5 + 72 * v4 + 32) = (v19 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)v9 = v20;
    WTF::VectorCopier<false,WebCore::OverlapMapContainer::ClippingScope>::uninitializedCopy<WebCore::OverlapMapContainer::ClippingScope>(*(__int128 **)(v3 + 24), (__int128 *)(*(_QWORD *)(v3 + 24) + 72 * *(unsigned int *)(v3 + 36)), v20);
  }
  v10 = v5 + 72 * v4;
  v11 = *(unsigned int *)(v3 + 52);
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  v12 = v10 + 40;
  *(_DWORD *)(v12 + 12) = v11;
  if (!(_DWORD)v11)
    goto LABEL_7;
  if (v11 >> 28)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x19437DDBCLL);
  }
  v13 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
  *(_DWORD *)(v5 + 72 * v4 + 48) = v11;
  *(_QWORD *)v12 = v13;
  v14 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v14)
  {
    v15 = *(__int128 **)(v3 + 40);
    v16 = 16 * v14;
    do
    {
      v17 = *v15++;
      *v13++ = v17;
      v16 -= 16;
    }
    while (v16);
  }
LABEL_7:
  *(_OWORD *)(v5 + 72 * v4 + 56) = *(_OWORD *)(v3 + 56);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

WTF *WebCore::OverlapMapContainer::ClippingScope::addChildWithLayerAndBounds(uint64_t a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WTF *result;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[24];
  WTF *v16[2];
  WTF *v17[2];
  __int128 v18;

  v3 = (_QWORD *)(a1 + 24);
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *(_OWORD *)&v15[8] = *(_OWORD *)(a2 + 8);
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v4 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 32))
  {
    v5 = WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 24, v4 + 1, (unint64_t)v15);
    v6 = *(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 36);
    v7 = *(_QWORD *)(v5 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 16) = v7;
    v8 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v6 + 24) = v8;
    LODWORD(v8) = *(_DWORD *)(v5 + 32);
    *(_DWORD *)(v5 + 32) = 0;
    *(_DWORD *)(v6 + 32) = v8;
    LODWORD(v8) = *(_DWORD *)(v5 + 36);
    *(_DWORD *)(v5 + 36) = 0;
    *(_DWORD *)(v6 + 36) = v8;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    v9 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v6 + 40) = v9;
    LODWORD(v9) = *(_DWORD *)(v5 + 48);
    *(_DWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v6 + 48) = v9;
    LODWORD(v9) = *(_DWORD *)(v5 + 52);
    *(_DWORD *)(v5 + 52) = 0;
    *(_DWORD *)(v6 + 52) = v9;
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(v5 + 56);
    v10 = v17[0];
    ++*(_DWORD *)(a1 + 36);
    if (v10)
    {
      v17[0] = 0;
      LODWORD(v17[1]) = 0;
      WTF::fastFree(v10, a2);
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24) + 72 * v4;
    v14 = *(_OWORD *)v15;
    *(_QWORD *)(v13 + 16) = *(_QWORD *)&v15[16];
    *(_OWORD *)v13 = v14;
    *(_QWORD *)(v13 + 32) = 0;
    v16[0] = 0;
    *(_QWORD *)(v13 + 24) = 0;
    LODWORD(v16[1]) = 0;
    *(_DWORD *)(v13 + 32) = 0;
    HIDWORD(v16[1]) = 0;
    *(_QWORD *)(v13 + 44) = 0;
    *(_QWORD *)(v13 + 36) = 0;
    *(_DWORD *)(v13 + 52) = 0;
    v17[0] = 0;
    *(_QWORD *)(v13 + 40) = 0;
    LODWORD(v17[1]) = 0;
    *(_DWORD *)(v13 + 48) = 0;
    HIDWORD(v17[1]) = 0;
    *(_DWORD *)(v13 + 52) = 0;
    *(_OWORD *)(v13 + 56) = v18;
    ++*(_DWORD *)(a1 + 36);
  }
  result = v16[0];
  if (HIDWORD(v16[1]))
  {
    WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(v16[0], (WTF *)((char *)v16[0] + 72 * HIDWORD(v16[1])));
    result = v16[0];
  }
  if (result)
  {
    v16[0] = 0;
    LODWORD(v16[1]) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v12 = *(_DWORD *)(a1 + 36);
  if (v12)
    return (WTF *)(*v3 + 72 * v12 - 72);
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WebCore::OverlapMapContainer::ClippingScope,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::OverlapMapContainer::ClippingScope *v13;
  void *v14;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x38E38E4)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 72 * v4;
      v9 = WTF::fastMalloc((WTF *)(72 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v11 = v9;
        v12 = 72 * v7;
        v13 = v6;
        do
        {
          WebCore::OverlapMapContainer::ClippingScope::ClippingScope(v11, (uint64_t)v13);
          WebCore::OverlapMapContainer::ClippingScope::~ClippingScope(v13, v14);
          v11 += 72;
          v13 = (WebCore::OverlapMapContainer::ClippingScope *)((char *)v13 + 72);
          v12 -= 72;
        }
        while (v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

uint64_t WebCore::ScrollingTree::updateTreeFromStateNodeRecursive(WebCore::ScrollingTree *this, const WebCore::ScrollingStateNode *a2, WebCore::CommitTreeState *a3)
{
  WebCore::ScrollingTree *v3;
  WebCore::CommitTreeState *v4;
  const WebCore::ScrollingStateNode *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  WTF *v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  uint64_t *v62;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  unsigned __int8 *v76;
  WTF *v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  unsigned int v82;
  _OWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  WTF **v112;
  WTF *v113;
  WTF *v114;
  WTF **v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  int v142;
  int v143;
  uint64_t v144;
  int v146;
  void *v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v155;
  int v157;
  void *v158;
  WTF *v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  int v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  int v173;
  uint64_t v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  BOOL v179;
  int v180;
  const WebCore::ScrollingStateNode *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t *v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unint64_t v211;
  unsigned int v212;
  uint64_t v213;
  const WebCore::ScrollingStateNode **v214;
  uint64_t v215;
  WebCore::ScrollingTree *v216;
  uint64_t v217;
  int v219;
  WebCore::CommitTreeState *v220;
  WebCore::ScrollingTree *v221;
  uint64_t v222;
  WTF *v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  WTF **v229;
  WTF *v230;
  uint64_t *v231;
  WTF *v232;
  WTF *v233;
  WTF **v234;
  uint64_t v235;
  int v236;
  int v237;
  WTF *v238;
  unsigned int v239;
  int v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  WTF *v252;
  WebCore::ScrollingStateTree **v253;
  uint64_t v254;
  WebCore::ScrollingStateTree *v255;
  WTF *v256;
  WTF *v257;
  uint64_t v258;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  BOOL v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  int v268;
  uint64_t v269;
  int v271;
  uint64_t v272;
  uint64_t *v273;
  int v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unsigned int v278;
  WTF **v279;
  WTF *v280;
  WTF **v281;
  int v282;
  uint64_t v283;
  int v285;
  WTF *v286;
  uint64_t v287;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  BOOL v306;
  int v307;
  uint64_t v308;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  BOOL v313;
  int v314;
  uint64_t v315;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  BOOL v320;
  int v321;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v337;
  int v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  BOOL v347;
  int v348;
  uint64_t v349;
  unint64_t v350;
  WebCore::CommitTreeState *v351;
  WTF *v353;
  WTF *v354[2];
  WTF *v355;
  __int128 v356;

  v3 = this;
  if (!a2)
  {
    WebCore::ScrollingTree::removeAllNodes((uint64_t)this, 0);
    v10 = *((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = 0;
    if (!v10)
      return 1;
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_37:
    v40 = *(_QWORD *)(v11 + 8);
    v41 = v40 - 1;
    *(_QWORD *)(v11 + 8) = v40 - 1;
    if (v40 == 1)
    {
      v324 = *(_QWORD *)(v11 + 16);
      v42 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 24) = 0;
      v43 = v324 != 0;
    }
    else
    {
      v42 = 0;
      v43 = 1;
    }
    v44 = __ldxr((unsigned __int8 *)v11);
    if (v44 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
      {
        if (!v41)
          goto LABEL_45;
        return 1;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    if (!v41)
    {
LABEL_45:
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      if (!v43)
        WTF::fastFree((WTF *)v11, v9);
    }
    return 1;
  }
  v4 = a3;
  v5 = a2;
  v356 = *(_OWORD *)((char *)a2 + 24);
  v6 = *((_QWORD *)a3 + 6);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 48);
    v8 = *(_QWORD *)(v6 + 56);
    goto LABEL_9;
  }
  v13 = *((_QWORD *)a2 + 7);
  if (!v13)
  {
    v7 = 0;
    v8 = 0;
    goto LABEL_9;
  }
  v337 = (_QWORD *)*((_QWORD *)a2 + 8);
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_574;
  }
  MEMORY[0x19AEA534C](v13);
LABEL_574:
  if (*(_QWORD *)(v13 + 24))
    ++*(_QWORD *)(v13 + 8);
  else
    v337 = 0;
  v339 = __ldxr((unsigned __int8 *)v13);
  if (v339 != 1)
  {
    __clrex();
    goto LABEL_580;
  }
  if (__stlxr(0, (unsigned __int8 *)v13))
LABEL_580:
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
  if (!v337)
  {
    v7 = 0;
    v3 = this;
    v8 = 0;
    v5 = a2;
    goto LABEL_9;
  }
  v341 = v337[3];
  v340 = v337[4];
  v342 = v337[1];
  if (__ldaxr((unsigned __int8 *)v342))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v342))
  {
    goto LABEL_587;
  }
  MEMORY[0x19AEA534C](v342);
LABEL_587:
  v344 = *(_QWORD *)(v342 + 8);
  v345 = v344 - 1;
  *(_QWORD *)(v342 + 8) = v344 - 1;
  if (v344 == 1)
  {
    v349 = *(_QWORD *)(v342 + 16);
    v346 = *(_QWORD *)(v342 + 24);
    *(_QWORD *)(v342 + 24) = 0;
    v347 = v349 != 0;
  }
  else
  {
    v346 = 0;
    v347 = 1;
  }
  v348 = __ldxr((unsigned __int8 *)v342);
  if (v348 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v342))
      goto LABEL_594;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v342);
LABEL_594:
  if (!v345)
  {
    if (v346)
      (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
    if (!v347)
      WTF::fastFree((WTF *)v342, a2);
  }
  v4 = a3;
  v3 = this;
  v5 = a2;
  v8 = v340;
  v7 = v341;
LABEL_9:
  v14 = (uint64_t *)((char *)v3 + 24);
  v15 = *((_QWORD *)v3 + 3);
  if (!v15
    || (v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*((_QWORD *)v3 + 3), v356, *((unint64_t *)&v356 + 1))) == 0|| v16 == (uint64_t *)(v15 + 24 * *(unsigned int *)(v15 - 4)))
  {
    (*(void (**)(WTF **__return_ptr, WebCore::ScrollingTree *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 88))(v354, v3, *((unsigned __int8 *)v5 + 16), v356, *((_QWORD *)&v356 + 1));
    v17 = v354[0];
    if (v7)
    {
LABEL_16:
      v21 = *v14;
      if (*v14
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)v3 + 3, 8u, 0), (v21 = *v14) != 0))
      {
        v22 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v22 = 0;
      }
      v23 = (v356 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v356 - 1640531527) << 16) ^ ((unsigned __int16)v356 - 1640531527);
      v24 = ((unint64_t)v356 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v356) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v356) + (v23 >> 11));
      v25 = (DWORD2(v356) >> 5) & 0x7FFF800 ^ ((v24 + WORD4(v356) + (v24 >> 11)) << 16) ^ (v24
                                                                                         + WORD4(v356)
                                                                                         + (v24 >> 11));
      v26 = (*((_QWORD *)&v356 + 1) >> 37) & 0x7FFF800 ^ ((v25 + WORD6(v356) + (v25 >> 11)) << 16) ^ (v25 + WORD6(v356) + (v25 >> 11));
      v27 = (v26 + (v26 >> 11)) ^ (8 * (v26 + (v26 >> 11)));
      v28 = (v27 + (v27 >> 5)) ^ (4 * (v27 + (v27 >> 5)));
      v29 = (v28 + (v28 >> 15)) ^ ((v28 + (v28 >> 15)) << 10);
      if (!v29)
        v29 = 0x800000;
      v30 = v29 & v22;
      v31 = (unint64_t *)(v21 + 24 * (v29 & v22));
      v33 = *v31;
      v32 = v31[1];
      if (*(_OWORD *)v31 != 0)
      {
        v34 = 0;
        v35 = 1;
        while (__PAIR128__(v32, v33) != v356)
        {
          if (v32 == -1)
            v34 = v31;
          v30 = (v30 + v35) & v22;
          v31 = (unint64_t *)(v21 + 24 * v30);
          v33 = *v31;
          v32 = v31[1];
          ++v35;
          if (*(_OWORD *)v31 == 0)
          {
            if (v34)
            {
              *v34 = 0;
              v34[1] = 0;
              v34[2] = 0;
              --*(_DWORD *)(*v14 - 16);
              v31 = v34;
            }
            goto LABEL_29;
          }
        }
        if (!v17)
        {
LABEL_98:
          v68 = v31[2];
          v31[2] = (unint64_t)v17;
          if (!v68)
            goto LABEL_116;
          v69 = *(_QWORD *)(v68 + 8);
          if (__ldaxr((unsigned __int8 *)v69))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v69))
          {
            goto LABEL_103;
          }
          MEMORY[0x19AEA534C](v69);
LABEL_103:
          v71 = *(_QWORD *)(v69 + 8);
          v72 = v71 - 1;
          *(_QWORD *)(v69 + 8) = v71 - 1;
          if (v71 == 1)
          {
            v328 = *(_QWORD *)(v69 + 16);
            v73 = *(_QWORD *)(v69 + 24);
            *(_QWORD *)(v69 + 24) = 0;
            v74 = v328 != 0;
          }
          else
          {
            v73 = 0;
            v74 = 1;
          }
          v75 = __ldxr((unsigned __int8 *)v69);
          if (v75 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v69))
            {
LABEL_110:
              if (!v72)
              {
                if (v73)
                  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
                if (!v74)
                  WTF::fastFree((WTF *)v69, v20);
              }
LABEL_116:
              v76 = (unsigned __int8 *)v3 + 32;
              if (__ldaxr((unsigned __int8 *)v3 + 32))
              {
                v78 = v17;
                __clrex();
              }
              else
              {
                v78 = v17;
                if (!__stxr(1u, v76))
                {
LABEL_120:
                  v350 = v7;
                  v80 = (uint64_t *)((char *)v3 + 40);
                  v79 = *((_QWORD *)v3 + 5);
                  if (v79
                    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)v3 + 5, 8u, 0), (v79 = *v80) != 0))
                  {
                    v81 = v8;
                    v82 = *(_DWORD *)(v79 - 8);
                  }
                  else
                  {
                    v81 = v8;
                    v82 = 0;
                  }
                  v83 = (_OWORD *)((char *)v4 + 56);
                  v84 = *((_QWORD *)v4 + 7);
                  v85 = *((_QWORD *)v4 + 8);
                  v86 = (v84 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v84 - 1640531527) << 16) ^ ((unsigned __int16)v84 - 1640531527);
                  v87 = (v84 >> 37) & 0x7FFF800 ^ ((v86 + WORD2(v84) + (v86 >> 11)) << 16) ^ (v86
                                                                                            + WORD2(v84)
                                                                                            + (v86 >> 11));
                  v88 = (v85 >> 5) & 0x7FFF800 ^ ((v87 + (unsigned __int16)v85 + (v87 >> 11)) << 16) ^ (v87 + (unsigned __int16)v85 + (v87 >> 11));
                  v89 = (v85 >> 37) & 0x7FFF800 ^ ((v88 + WORD2(v85) + (v88 >> 11)) << 16) ^ (v88
                                                                                            + WORD2(v85)
                                                                                            + (v88 >> 11));
                  v90 = (v89 + (v89 >> 11)) ^ (8 * (v89 + (v89 >> 11)));
                  v91 = (v90 + (v90 >> 5)) ^ (4 * (v90 + (v90 >> 5)));
                  v92 = (v91 + (v91 >> 15)) ^ ((v91 + (v91 >> 15)) << 10);
                  if (!v92)
                    v92 = 0x800000;
                  v93 = v92 & v82;
                  v94 = (unint64_t *)(v79 + 24 * (v92 & v82));
                  v96 = *v94;
                  v95 = v94[1];
                  if (*(_OWORD *)v94 != 0)
                  {
                    v97 = 0;
                    v98 = 1;
                    while (v96 != v84 || v95 != v85)
                    {
                      if (v95 == -1)
                        v97 = v94;
                      v93 = (v93 + v98) & v82;
                      v94 = (unint64_t *)(v79 + 24 * v93);
                      v96 = *v94;
                      v95 = v94[1];
                      ++v98;
                      if (*(_OWORD *)v94 == 0)
                      {
                        if (v97)
                        {
                          *v97 = 0;
                          v97[1] = 0;
                          v97[2] = 0;
                          --*(_DWORD *)(*v80 - 16);
                          v94 = v97;
                        }
                        goto LABEL_134;
                      }
                    }
LABEL_149:
                    v109 = v94[2];
                    v108 = (uint64_t *)(v94 + 2);
                    v107 = v109;
                    v17 = v78;
                    *(_OWORD *)v354 = *((_OWORD *)v78 + 3);
                    if (v109
                      || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v108, 0), (v107 = *v108) != 0))
                    {
                      v110 = *(_DWORD *)(v107 - 8);
                    }
                    else
                    {
                      v110 = 0;
                    }
                    v111 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v354) & v110;
                    v112 = (WTF **)(v107 + 16 * v111);
                    v114 = *v112;
                    v113 = v112[1];
                    if (*(_OWORD *)v112 != 0)
                    {
                      v115 = 0;
                      v116 = 1;
                      while (v114 != v354[0] || v113 != v354[1])
                      {
                        if (v113 == (WTF *)-1)
                          v115 = v112;
                        v111 = (v111 + v116) & v110;
                        v112 = (WTF **)(v107 + 16 * v111);
                        v114 = *v112;
                        v113 = v112[1];
                        ++v116;
                        if (*(_OWORD *)v112 == 0)
                        {
                          if (v115)
                          {
                            *v115 = 0;
                            v115[1] = 0;
                            --*(_DWORD *)(*v108 - 16);
                            v112 = v115;
                          }
                          goto LABEL_161;
                        }
                      }
LABEL_168:
                      v123 = __ldxr(v76);
                      if (v123 == 1)
                      {
                        if (!__stlxr(0, v76))
                          goto LABEL_173;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WebCore::ScrollingTree *)((char *)v3 + 32));
LABEL_173:
                      *((_OWORD *)v17 + 4) = *v83;
                      v8 = v81;
                      v7 = v350;
                      goto LABEL_174;
                    }
LABEL_161:
                    *(_OWORD *)v112 = *(_OWORD *)v354;
                    v117 = *v108;
                    if (*v108)
                      v118 = *(_DWORD *)(v117 - 12) + 1;
                    else
                      v118 = 1;
                    *(_DWORD *)(v117 - 12) = v118;
                    v119 = *v108;
                    if (*v108)
                      v120 = *(_DWORD *)(v119 - 12);
                    else
                      v120 = 0;
                    v121 = (*(_DWORD *)(v119 - 16) + v120);
                    v122 = *(unsigned int *)(v119 - 4);
                    if (v122 > 0x400)
                    {
                      if (v122 > 2 * v121)
                        goto LABEL_168;
                    }
                    else if (3 * v122 > 4 * v121)
                    {
                      goto LABEL_168;
                    }
                    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::expand(v108, v112);
                    goto LABEL_168;
                  }
LABEL_134:
                  *(_OWORD *)v94 = *v83;
                  v99 = v94[2];
                  v94[2] = 0;
                  if (v99)
                    WTF::fastFree((WTF *)(v99 - 16), v20);
                  v100 = *v80;
                  if (*v80)
                    v101 = *(_DWORD *)(v100 - 12) + 1;
                  else
                    v101 = 1;
                  *(_DWORD *)(v100 - 12) = v101;
                  v102 = *v80;
                  if (*v80)
                    v103 = *(_DWORD *)(v102 - 12);
                  else
                    v103 = 0;
                  v104 = (*(_DWORD *)(v102 - 16) + v103);
                  v105 = *(unsigned int *)(v102 - 4);
                  if (v105 > 0x400)
                  {
                    if (v105 > 2 * v104)
                      goto LABEL_149;
                  }
                  else
                  {
                    if (3 * v105 > 4 * v104)
                      goto LABEL_149;
                    if (!(_DWORD)v105)
                    {
                      v106 = 8;
                      goto LABEL_148;
                    }
                  }
                  v106 = (_DWORD)v105 << (6 * *(_DWORD *)(v102 - 12) >= (2 * v105));
LABEL_148:
                  v94 = (unint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::HashSet<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)v3 + 5, v106, v94);
                  goto LABEL_149;
                }
              }
              MEMORY[0x19AEA534C]((char *)v3 + 32);
              goto LABEL_120;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v69);
          goto LABEL_110;
        }
        v51 = *((_QWORD *)v17 + 1);
        if (__ldaxr((unsigned __int8 *)v51))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v51))
        {
          goto LABEL_93;
        }
        MEMORY[0x19AEA534C](v51);
LABEL_93:
        ++*(_QWORD *)(v51 + 8);
        v67 = __ldxr((unsigned __int8 *)v51);
        if (v67 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v51))
            goto LABEL_98;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v51);
        goto LABEL_98;
      }
LABEL_29:
      *(_OWORD *)v31 = v356;
      WTF::GenericHashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>::assignToEmpty<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WebCore::ScrollingTreeNode*>((uint64_t)(v31 + 2), v17);
      v36 = *v14;
      if (*v14)
        v37 = *(_DWORD *)(v36 - 12) + 1;
      else
        v37 = 1;
      *(_DWORD *)(v36 - 12) = v37;
      v46 = *v14;
      if (*v14)
        v47 = *(_DWORD *)(v46 - 12);
      else
        v47 = 0;
      v48 = (*(_DWORD *)(v46 - 16) + v47);
      v49 = *(unsigned int *)(v46 - 4);
      if (v49 > 0x400)
      {
        if (v49 > 2 * v48)
          goto LABEL_116;
      }
      else
      {
        if (3 * v49 > 4 * v48)
          goto LABEL_116;
        if (!(_DWORD)v49)
        {
          v50 = 8;
          goto LABEL_85;
        }
      }
      v50 = (_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49));
LABEL_85:
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash((uint64_t *)v3 + 3, v50, v31);
      goto LABEL_116;
    }
    if (!v354[0])
      return 0;
    if (*((unsigned __int8 *)v354[0] + 40) > 1u)
      goto LABEL_366;
    v38 = *((_QWORD *)v354[0] + 1);
    if (__ldaxr((unsigned __int8 *)v38))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v38))
    {
      goto LABEL_201;
    }
    MEMORY[0x19AEA534C](v38);
LABEL_201:
    ++*(_QWORD *)(v38 + 8);
    v134 = __ldxr((unsigned __int8 *)v38);
    if (v134 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v38))
      {
LABEL_206:
        v135 = *((_QWORD *)v3 + 2);
        *((_QWORD *)v3 + 2) = v17;
        if (!v135)
        {
LABEL_223:
          WebCore::ScrollingTree::removeAllNodes((uint64_t)v3, v20);
          goto LABEL_16;
        }
        v136 = *(_QWORD *)(v135 + 8);
        if (__ldaxr((unsigned __int8 *)v136))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v136))
        {
          goto LABEL_211;
        }
        MEMORY[0x19AEA534C](v136);
LABEL_211:
        v138 = *(_QWORD *)(v136 + 8);
        v139 = v138 - 1;
        *(_QWORD *)(v136 + 8) = v138 - 1;
        if (v138 == 1)
        {
          v332 = *(_QWORD *)(v136 + 16);
          v140 = *(_QWORD *)(v136 + 24);
          *(_QWORD *)(v136 + 24) = 0;
          v141 = v332 != 0;
        }
        else
        {
          v140 = 0;
          v141 = 1;
        }
        v142 = __ldxr((unsigned __int8 *)v136);
        if (v142 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v136))
          {
LABEL_218:
            if (!v139)
            {
              if (v140)
                (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
              if (!v141)
                WTF::fastFree((WTF *)v136, v20);
            }
            goto LABEL_223;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v136);
        goto LABEL_218;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v38);
    goto LABEL_206;
  }
  v17 = (WTF *)v16[2];
  if (!v17)
    goto LABEL_68;
  v18 = *((_QWORD *)v17 + 1);
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v18))
  {
    goto LABEL_63;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_63:
  ++*(_QWORD *)(v18 + 8);
  v53 = __ldxr((unsigned __int8 *)v18);
  if (v53 != 1)
  {
    __clrex();
    goto LABEL_67;
  }
  if (__stlxr(0, (unsigned __int8 *)v18))
LABEL_67:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_68:
  v54 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
    goto LABEL_174;
  v55 = *(_DWORD *)(v54 - 8);
  v56 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>>::hash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(&v356) & v55;
  v57 = (uint64_t *)(v54 + 16 * v56);
  v58 = *v57;
  v59 = v57[1];
  if (*v57 == (_QWORD)v356 && v59 == *((_QWORD *)&v356 + 1))
  {
LABEL_80:
    v64 = (_OWORD *)(v54 + 16 * v56);
    v65 = *(_QWORD *)v4;
    if (!*(_QWORD *)v4)
    {
LABEL_89:
      if ((_OWORD *)v65 != v64)
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t *)v4, v64);
      goto LABEL_174;
    }
    v66 = *(unsigned int *)(v65 - 4);
LABEL_88:
    v65 += 16 * v66;
    if ((_OWORD *)v65 == v64)
      goto LABEL_174;
    goto LABEL_89;
  }
  v61 = 1;
  while (v58 | v59)
  {
    v56 = ((_DWORD)v56 + v61) & v55;
    v62 = (uint64_t *)(v54 + 16 * v56);
    v58 = *v62;
    v59 = v62[1];
    ++v61;
    if (v58 == (_QWORD)v356 && v59 == *((_QWORD *)&v356 + 1))
      goto LABEL_80;
  }
  v65 = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
  {
    v66 = *(unsigned int *)(v65 - 4);
    v64 = (_OWORD *)(v65 + 16 * v66);
    goto LABEL_88;
  }
LABEL_174:
  if (!v7)
    goto LABEL_323;
  v124 = *v14;
  if (!*v14)
    goto LABEL_323;
  v125 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(*v14, v7, v8);
  if (v125 && v125 != (uint64_t *)(v124 + 24 * *(unsigned int *)(v124 - 4)))
  {
    v126 = v125[2];
    if (!v126)
      goto LABEL_195;
    v127 = *(_QWORD *)(v126 + 8);
    if (__ldaxr((unsigned __int8 *)v127))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v127))
    {
      goto LABEL_190;
    }
    MEMORY[0x19AEA534C](v127);
LABEL_190:
    ++*(_QWORD *)(v127 + 8);
    v130 = __ldxr((unsigned __int8 *)v127);
    if (v130 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v127))
      {
LABEL_195:
        v131 = *((_QWORD *)v17 + 10);
        if (!v131)
        {
          v132 = 0;
          goto LABEL_236;
        }
        v132 = *((_QWORD *)v17 + 11);
        if (__ldaxr((unsigned __int8 *)v131))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v131))
        {
          goto LABEL_226;
        }
        MEMORY[0x19AEA534C](v131);
LABEL_226:
        if (*(_QWORD *)(v131 + 24))
          ++*(_QWORD *)(v131 + 8);
        else
          v132 = 0;
        v143 = __ldxr((unsigned __int8 *)v131);
        if (v143 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v131))
          {
LABEL_234:
            if (v132)
              WebCore::ScrollingTreeNode::removeChild((unsigned int *)v132, v17);
LABEL_236:
            if (v132 == v126)
              goto LABEL_263;
            if (!v126)
            {
              WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=((uint64_t *)v17 + 10, 0);
              *((_QWORD *)v17 + 11) = 0;
              goto LABEL_263;
            }
            v144 = *(_QWORD *)(v126 + 8);
            if (__ldaxr((unsigned __int8 *)v144))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v144))
            {
              goto LABEL_242;
            }
            MEMORY[0x19AEA534C](v144);
LABEL_242:
            ++*(_QWORD *)(v144 + 8);
            v146 = __ldxr((unsigned __int8 *)v144);
            if (v146 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v144))
              {
LABEL_247:
                WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=((uint64_t *)v17 + 10, *(_QWORD *)(v126 + 8));
                *((_QWORD *)v17 + 11) = v126;
                v148 = *(_QWORD *)(v126 + 8);
                if (__ldaxr((unsigned __int8 *)v148))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v148))
                {
                  goto LABEL_251;
                }
                MEMORY[0x19AEA534C](v148);
LABEL_251:
                v150 = *(_QWORD *)(v148 + 8);
                v151 = v150 - 1;
                *(_QWORD *)(v148 + 8) = v150 - 1;
                if (v150 == 1)
                {
                  v334 = *(_QWORD *)(v148 + 16);
                  v152 = *(_QWORD *)(v148 + 24);
                  *(_QWORD *)(v148 + 24) = 0;
                  v153 = v334 != 0;
                }
                else
                {
                  v152 = 0;
                  v153 = 1;
                }
                v154 = __ldxr((unsigned __int8 *)v148);
                if (v154 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v148))
                  {
LABEL_258:
                    if (!v151)
                    {
                      if (v152)
                        (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
                      if (!v153)
                        WTF::fastFree((WTF *)v148, v147);
                    }
LABEL_263:
                    v155 = *((_QWORD *)v17 + 1);
                    if (__ldaxr((unsigned __int8 *)v155))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v155))
                    {
                      goto LABEL_267;
                    }
                    MEMORY[0x19AEA534C](v155);
LABEL_267:
                    ++*(_QWORD *)(v155 + 8);
                    v157 = __ldxr((unsigned __int8 *)v155);
                    if (v157 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v155))
                      {
LABEL_272:
                        v354[0] = v17;
                        WebCore::ScrollingTreeNode::appendChild(v126, (char *)v354);
                        v159 = v354[0];
                        v354[0] = 0;
                        if (!v159)
                          goto LABEL_289;
                        v160 = *((_QWORD *)v159 + 1);
                        if (__ldaxr((unsigned __int8 *)v160))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, (unsigned __int8 *)v160))
                        {
                          goto LABEL_277;
                        }
                        MEMORY[0x19AEA534C](v160);
LABEL_277:
                        v162 = *(_QWORD *)(v160 + 8);
                        v163 = v162 - 1;
                        *(_QWORD *)(v160 + 8) = v162 - 1;
                        if (v162 == 1)
                        {
                          v333 = *(_QWORD *)(v160 + 16);
                          v164 = *(_QWORD *)(v160 + 24);
                          *(_QWORD *)(v160 + 24) = 0;
                          v165 = v333 != 0;
                        }
                        else
                        {
                          v164 = 0;
                          v165 = 1;
                        }
                        v166 = __ldxr((unsigned __int8 *)v160);
                        if (v166 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v160))
                          {
LABEL_284:
                            if (!v163)
                            {
                              if (v164)
                                (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
                              if (!v165)
                                WTF::fastFree((WTF *)v160, v158);
                            }
LABEL_289:
                            if (!v132)
                              goto LABEL_306;
                            v167 = *(_QWORD *)(v132 + 8);
                            if (__ldaxr((unsigned __int8 *)v167))
                            {
                              __clrex();
                            }
                            else if (!__stxr(1u, (unsigned __int8 *)v167))
                            {
                              goto LABEL_294;
                            }
                            MEMORY[0x19AEA534C](v167);
LABEL_294:
                            v169 = *(_QWORD *)(v167 + 8);
                            v170 = v169 - 1;
                            *(_QWORD *)(v167 + 8) = v169 - 1;
                            if (v169 == 1)
                            {
                              v329 = *(_QWORD *)(v167 + 16);
                              v171 = *(_QWORD *)(v167 + 24);
                              *(_QWORD *)(v167 + 24) = 0;
                              v172 = v329 != 0;
                            }
                            else
                            {
                              v171 = 0;
                              v172 = 1;
                            }
                            v173 = __ldxr((unsigned __int8 *)v167);
                            if (v173 == 1)
                            {
                              if (!__stlxr(0, (unsigned __int8 *)v167))
                              {
LABEL_301:
                                if (!v170)
                                {
                                  if (v171)
                                    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
                                  if (!v172)
                                    WTF::fastFree((WTF *)v167, v158);
                                }
LABEL_306:
                                if (!v126)
                                  goto LABEL_323;
                                v174 = *(_QWORD *)(v126 + 8);
                                if (__ldaxr((unsigned __int8 *)v174))
                                {
                                  __clrex();
                                }
                                else if (!__stxr(1u, (unsigned __int8 *)v174))
                                {
                                  goto LABEL_311;
                                }
                                MEMORY[0x19AEA534C](v174);
LABEL_311:
                                v176 = *(_QWORD *)(v174 + 8);
                                v177 = v176 - 1;
                                *(_QWORD *)(v174 + 8) = v176 - 1;
                                if (v176 == 1)
                                {
                                  v330 = *(_QWORD *)(v174 + 16);
                                  v178 = *(_QWORD *)(v174 + 24);
                                  *(_QWORD *)(v174 + 24) = 0;
                                  v179 = v330 != 0;
                                }
                                else
                                {
                                  v178 = 0;
                                  v179 = 1;
                                }
                                v180 = __ldxr((unsigned __int8 *)v174);
                                if (v180 == 1)
                                {
                                  if (!__stlxr(0, (unsigned __int8 *)v174))
                                  {
LABEL_318:
                                    if (!v177)
                                    {
                                      if (v178)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
                                      if (!v179)
                                        WTF::fastFree((WTF *)v174, v158);
                                    }
                                    goto LABEL_323;
                                  }
                                }
                                else
                                {
                                  __clrex();
                                }
                                WTF::Lock::unlockSlow((WTF::Lock *)v174);
                                goto LABEL_318;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            WTF::Lock::unlockSlow((WTF::Lock *)v167);
                            goto LABEL_301;
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow((WTF::Lock *)v160);
                        goto LABEL_284;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v155);
                    goto LABEL_272;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v148);
                goto LABEL_258;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v144);
            goto LABEL_247;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v131);
        goto LABEL_234;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v127);
    goto LABEL_195;
  }
  v129 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::UniqueRef<WebCore::ScrollingStateTree>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::ScrollingStateTree>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>(v124, v356, *((unint64_t *)&v356 + 1));
  if (v129 && v129 != (uint64_t *)(v124 + 24 * *(unsigned int *)(v124 - 4)))
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::remove((uint64_t)v3 + 24, v129);
LABEL_323:
  v181 = a2;
  if (!(*(unsigned int (**)(WTF *, const WebCore::ScrollingStateNode *))(*(_QWORD *)v17 + 16))(v17, a2))
    goto LABEL_366;
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v17 + 48))(v17) & 1) != 0)
    goto LABEL_363;
  v351 = v4;
  v182 = (uint64_t *)*((_QWORD *)v17 + 2);
  v183 = *((unsigned int *)v17 + 7);
  if ((_DWORD)v183)
  {
    v184 = (uint64_t *)((char *)v4 + 16);
    v185 = &v182[v183];
    while (1)
    {
      v186 = *v182;
      WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=((uint64_t *)(*v182 + 80), 0);
      *(_QWORD *)(v186 + 88) = 0;
      v187 = (_QWORD *)*v182;
      v189 = *(_QWORD *)(*v182 + 48);
      v188 = *(_QWORD *)(*v182 + 56);
      v190 = *v184;
      if (*v184
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v184, 8u, 0), (v190 = *v184) != 0))
      {
        v191 = *(_DWORD *)(v190 - 8);
      }
      else
      {
        v191 = 0;
      }
      v192 = (v189 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v189 - 1640531527) << 16) ^ ((unsigned __int16)v189 - 1640531527);
      v193 = (v189 >> 37) & 0x7FFF800 ^ ((v192 + WORD2(v189) + (v192 >> 11)) << 16) ^ (v192 + WORD2(v189) + (v192 >> 11));
      v194 = (v188 >> 5) & 0x7FFF800 ^ ((v193 + (unsigned __int16)v188 + (v193 >> 11)) << 16) ^ (v193 + (unsigned __int16)v188 + (v193 >> 11));
      v195 = v194 + WORD2(v188) + (v194 >> 11);
      v196 = (v188 >> 37) & 0x7FFF800 ^ (v195 << 16);
      v197 = ((v196 ^ v195) + ((v196 ^ v195) >> 11)) ^ (8
                                                                    * ((v196 ^ v195)
                                                                     + ((v196 ^ v195) >> 11)));
      v198 = (v197 + (v197 >> 5)) ^ (4 * (v197 + (v197 >> 5)));
      v199 = (v198 + (v198 >> 15)) ^ ((v198 + (v198 >> 15)) << 10);
      if (!v199)
        v199 = 0x800000;
      v200 = v191 & v199;
      v201 = (unint64_t *)(v190 + 24 * (v191 & v199));
      v203 = *v201;
      v202 = v201[1];
      if (*(_OWORD *)v201 != 0)
      {
        v204 = 0;
        v205 = 1;
        while (v203 != v189 || v202 != v188)
        {
          if (v202 == -1)
            v204 = v201;
          v200 = (v200 + v205) & v191;
          v201 = (unint64_t *)(v190 + 24 * v200);
          v203 = *v201;
          v202 = v201[1];
          ++v205;
          if (*(_OWORD *)v201 == 0)
          {
            if (v204)
            {
              *v204 = 0;
              v204[1] = 0;
              v204[2] = 0;
              --*(_DWORD *)(*v184 - 16);
              v201 = v204;
            }
            goto LABEL_341;
          }
        }
        goto LABEL_354;
      }
LABEL_341:
      *v201 = v189;
      v201[1] = v188;
      WTF::GenericHashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>::assignToEmpty<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WebCore::ScrollingTreeNode*>((uint64_t)(v201 + 2), v187);
      v206 = *v184;
      v207 = *v184 ? *(_DWORD *)(v206 - 12) + 1 : 1;
      *(_DWORD *)(v206 - 12) = v207;
      v208 = *v184;
      v209 = *v184 ? *(_DWORD *)(v208 - 12) : 0;
      v210 = (*(_DWORD *)(v208 - 16) + v209);
      v211 = *(unsigned int *)(v208 - 4);
      if (v211 > 0x400)
        break;
      if (3 * v211 <= 4 * v210)
      {
        if ((_DWORD)v211)
          goto LABEL_350;
        v212 = 8;
        goto LABEL_353;
      }
LABEL_354:
      if (++v182 == v185)
        goto LABEL_358;
    }
    if (v211 > 2 * v210)
      goto LABEL_354;
LABEL_350:
    v212 = (_DWORD)v211 << (6 * *(_DWORD *)(v208 - 12) >= (2 * v211));
LABEL_353:
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::rehash(v184, v212, v201);
    goto LABEL_354;
  }
LABEL_358:
  if (!*(_BYTE *)(*((_QWORD *)v17 + 4) + 343))
  {
    __break(0xC471u);
    JUMPOUT(0x19437FA64);
  }
  WTF::Vector<WTF::RefPtr<WebCore::AXCoreObject,WTF::RawPtrTraits<WebCore::AXCoreObject>,WTF::DefaultRefDerefTraits<WebCore::AXCoreObject>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)((char *)v17 + 16), 0);
  v4 = v351;
  v181 = a2;
  v213 = *((unsigned int *)a2 + 21);
  if (!(_DWORD)v213)
  {
LABEL_363:
    if ((*(unsigned int (**)(WTF *, const WebCore::ScrollingStateNode *))(*(_QWORD *)v17 + 24))(v17, v181))
    {
      v216 = v3;
      (*(void (**)(WTF *))(*(_QWORD *)v17 + 32))(v17);
      v217 = *((_QWORD *)v17 + 1);
      if (__ldaxr((unsigned __int8 *)v217))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v217))
      {
        goto LABEL_371;
      }
      MEMORY[0x19AEA534C](v217);
LABEL_371:
      ++*(_QWORD *)(v217 + 8);
      v219 = __ldxr((unsigned __int8 *)v217);
      if (v219 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v217))
          goto LABEL_376;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v217);
LABEL_376:
      v220 = v4;
      if (*((_BYTE *)v17 + 40) == 2)
      {
        if (*((_BYTE *)v17 + 104))
        {
          v221 = v216;
          v222 = *((_QWORD *)v216 + 39);
          if (v222)
          {
            v223 = (WTF *)*((_QWORD *)v17 + 12);
            v224 = *(_DWORD *)(v222 - 8);
            v225 = ((unint64_t)v223 + ~((_QWORD)v223 << 32)) ^ (((unint64_t)v223 + ~((_QWORD)v223 << 32)) >> 22);
            v226 = 9 * ((v225 + ~(v225 << 13)) ^ ((v225 + ~(v225 << 13)) >> 8));
            v227 = (v226 ^ (v226 >> 15)) + ~((v226 ^ (v226 >> 15)) << 27);
            v228 = v224 & ((v227 >> 31) ^ v227);
            v229 = (WTF **)(v222 + 24 * v228);
            v230 = *v229;
            if (*v229 == v223)
            {
LABEL_380:
              if ((WTF **)(v222 + 24 * *(unsigned int *)(v222 - 4)) == v229)
              {
                v232 = 0;
                v233 = 0;
              }
              else
              {
                v231 = (uint64_t *)((char *)v216 + 312);
                v232 = v229[1];
                v233 = v229[2];
                v229[1] = 0;
                v229[2] = 0;
                v234 = (WTF **)*((_QWORD *)v221 + 39);
                if (!v234 || (v234 += 3 * *((unsigned int *)v234 - 1), v234 != v229))
                {
                  if (v234 != v229)
                  {
                    *v229 = (WTF *)-1;
                    ++*(_DWORD *)(*v231 - 16);
                    v235 = *v231;
                    v236 = *v231 ? *(_DWORD *)(v235 - 12) - 1 : -1;
                    *(_DWORD *)(v235 - 12) = v236;
                    v241 = *v231;
                    if (*v231)
                    {
                      v242 = 6 * *(_DWORD *)(v241 - 12);
                      v243 = *(_DWORD *)(v241 - 4);
                      if (v242 < v243 && v243 >= 9)
                      {
                        v353 = v233;
                        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v231, v243 >> 1, 0);
                        v233 = v353;
                      }
                    }
                  }
                }
              }
              v245 = (unsigned int *)((char *)v4 + 24);
              v354[0] = v223;
              v354[1] = v232;
              v355 = v233;
              v246 = *((unsigned int *)v4 + 9);
              if ((_DWORD)v246 == *((_DWORD *)v4 + 8))
              {
                v247 = WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Vector<std::unique_ptr<WebCore::ScrollingStateTree>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v245, v246 + 1, (unint64_t)v354);
                v248 = *((_QWORD *)v4 + 3) + 24 * *((unsigned int *)v4 + 9);
                v249 = *(_QWORD *)v247;
                *(_QWORD *)(v248 + 8) = 0;
                *(_QWORD *)(v248 + 16) = 0;
                *(_QWORD *)v248 = v249;
                v250 = *(_QWORD *)(v247 + 8);
                *(_QWORD *)(v247 + 8) = 0;
                *(_QWORD *)(v248 + 8) = v250;
                LODWORD(v250) = *(_DWORD *)(v247 + 16);
                *(_DWORD *)(v247 + 16) = 0;
                *(_DWORD *)(v248 + 16) = v250;
                v251 = *(_DWORD *)(v247 + 20);
                *(_DWORD *)(v247 + 20) = 0;
              }
              else
              {
                v248 = *(_QWORD *)v245 + 24 * v246;
                *(_QWORD *)(v248 + 8) = 0;
                *(_QWORD *)(v248 + 16) = 0;
                *(_QWORD *)v248 = v223;
                v252 = v354[1];
                v354[1] = 0;
                *(_QWORD *)(v248 + 8) = v252;
                LODWORD(v252) = (_DWORD)v355;
                LODWORD(v355) = 0;
                *(_DWORD *)(v248 + 16) = (_DWORD)v252;
                v251 = HIDWORD(v355);
                HIDWORD(v355) = 0;
              }
              *(_DWORD *)(v248 + 20) = v251;
              ++*((_DWORD *)v4 + 9);
              if (HIDWORD(v355))
              {
                v253 = (WebCore::ScrollingStateTree **)v354[1];
                v254 = 8 * HIDWORD(v355);
                do
                {
                  v255 = *v253;
                  *v253 = 0;
                  if (v255)
                  {
                    WebCore::ScrollingStateTree::~ScrollingStateTree(v255, v20);
                    if (*(_DWORD *)v256)
                    {
                      *((_OWORD *)v256 + 3) = 0u;
                      *((_OWORD *)v256 + 4) = 0u;
                      *((_OWORD *)v256 + 1) = 0u;
                      *((_OWORD *)v256 + 2) = 0u;
                      *(_OWORD *)v256 = 0u;
                    }
                    else
                    {
                      WTF::fastFree(v256, v20);
                    }
                  }
                  ++v253;
                  v254 -= 8;
                }
                while (v254);
              }
              v257 = v354[1];
              if (v354[1])
              {
                v354[1] = 0;
                LODWORD(v355) = 0;
                WTF::fastFree(v257, v20);
              }
            }
            else
            {
              v237 = 1;
              v238 = *v229;
              v239 = v228;
              while (v238)
              {
                v239 = (v239 + v237) & v224;
                v238 = *(WTF **)(v222 + 24 * v239);
                ++v237;
                if (v238 == v223)
                {
                  if (v230 != v223)
                  {
                    v240 = 1;
                    while (v230)
                    {
                      v228 = (v228 + v240) & v224;
                      v229 = (WTF **)(v222 + 24 * v228);
                      v230 = *v229;
                      ++v240;
                      if (*v229 == v223)
                        goto LABEL_380;
                    }
                    v229 = (WTF **)(v222 + 24 * *(unsigned int *)(v222 - 4));
                  }
                  goto LABEL_380;
                }
              }
            }
          }
        }
      }
      v258 = *((_QWORD *)v17 + 1);
      if (__ldaxr((unsigned __int8 *)v258))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v258))
      {
        goto LABEL_420;
      }
      MEMORY[0x19AEA534C](v258);
LABEL_420:
      v260 = *(_QWORD *)(v258 + 8);
      v261 = v260 - 1;
      *(_QWORD *)(v258 + 8) = v260 - 1;
      if (v260 == 1)
      {
        v325 = *(_QWORD *)(v258 + 16);
        v262 = *(_QWORD *)(v258 + 24);
        *(_QWORD *)(v258 + 24) = 0;
        v263 = v325 != 0;
      }
      else
      {
        v262 = 0;
        v263 = 1;
      }
      v264 = __ldxr((unsigned __int8 *)v258);
      if (v264 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v258))
        {
LABEL_427:
          if (!v261)
          {
            if (v262)
              (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
            if (!v263)
              WTF::fastFree((WTF *)v258, v20);
          }
          v265 = *((_QWORD *)v220 + 6);
          if (!v265)
            goto LABEL_533;
          v266 = *(_QWORD *)(v265 + 8);
          if (__ldaxr((unsigned __int8 *)v266))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v266))
          {
            goto LABEL_437;
          }
          MEMORY[0x19AEA534C](v266);
LABEL_437:
          ++*(_QWORD *)(v266 + 8);
          v268 = __ldxr((unsigned __int8 *)v266);
          if (v268 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v266))
            {
LABEL_442:
              v269 = *((_QWORD *)v17 + 1);
              if (__ldaxr((unsigned __int8 *)v269))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v269))
              {
                goto LABEL_446;
              }
              MEMORY[0x19AEA534C](v269);
LABEL_446:
              ++*(_QWORD *)(v269 + 8);
              v271 = __ldxr((unsigned __int8 *)v269);
              if (v271 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v269))
                  goto LABEL_451;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v269);
LABEL_451:
              v273 = (uint64_t *)(v265 + 112);
              v272 = *(_QWORD *)(v265 + 112);
              if (v272
                || (WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::rehash((uint64_t *)(v265 + 112), 8u), (v272 = *v273) != 0))
              {
                v274 = *(_DWORD *)(v272 - 8);
              }
              else
              {
                v274 = 0;
              }
              v275 = ((unint64_t)v17 + ~((_QWORD)v17 << 32)) ^ (((unint64_t)v17 + ~((_QWORD)v17 << 32)) >> 22);
              v276 = 9 * ((v275 + ~(v275 << 13)) ^ ((v275 + ~(v275 << 13)) >> 8));
              v277 = (v276 ^ (v276 >> 15)) + ~((v276 ^ (v276 >> 15)) << 27);
              v278 = v274 & ((v277 >> 31) ^ v277);
              v279 = (WTF **)(v272 + 8 * v278);
              v280 = *v279;
              if (*v279)
              {
                v281 = 0;
                v282 = 1;
                while (v280 != v17)
                {
                  if (v280 == (WTF *)-1)
                    v281 = v279;
                  v278 = (v278 + v282) & v274;
                  v279 = (WTF **)(v272 + 8 * v278);
                  v280 = *v279;
                  ++v282;
                  if (!*v279)
                  {
                    if (v281)
                    {
                      *v281 = 0;
                      --*(_DWORD *)(*v273 - 16);
                      v279 = v281;
                    }
                    goto LABEL_462;
                  }
                }
LABEL_501:
                v301 = *((_QWORD *)v17 + 1);
                if (__ldaxr((unsigned __int8 *)v301))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v301))
                {
                  goto LABEL_505;
                }
                MEMORY[0x19AEA534C](v301);
LABEL_505:
                v303 = *(_QWORD *)(v301 + 8);
                v304 = v303 - 1;
                *(_QWORD *)(v301 + 8) = v303 - 1;
                if (v303 == 1)
                {
                  v326 = *(_QWORD *)(v301 + 16);
                  v305 = *(_QWORD *)(v301 + 24);
                  *(_QWORD *)(v301 + 24) = 0;
                  v306 = v326 != 0;
                }
                else
                {
                  v305 = 0;
                  v306 = 1;
                }
                v307 = __ldxr((unsigned __int8 *)v301);
                if (v307 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v301))
                  {
LABEL_512:
                    if (!v304)
                    {
                      if (v305)
                        (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
                      if (!v306)
                        WTF::fastFree((WTF *)v301, v20);
                    }
                    v308 = *(_QWORD *)(v265 + 8);
                    if (__ldaxr((unsigned __int8 *)v308))
                    {
                      __clrex();
                    }
                    else if (!__stxr(1u, (unsigned __int8 *)v308))
                    {
                      goto LABEL_521;
                    }
                    MEMORY[0x19AEA534C](v308);
LABEL_521:
                    v310 = *(_QWORD *)(v308 + 8);
                    v311 = v310 - 1;
                    *(_QWORD *)(v308 + 8) = v310 - 1;
                    if (v310 == 1)
                    {
                      v327 = *(_QWORD *)(v308 + 16);
                      v312 = *(_QWORD *)(v308 + 24);
                      *(_QWORD *)(v308 + 24) = 0;
                      v313 = v327 != 0;
                    }
                    else
                    {
                      v312 = 0;
                      v313 = 1;
                    }
                    v314 = __ldxr((unsigned __int8 *)v308);
                    if (v314 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)v308))
                      {
LABEL_528:
                        if (!v311)
                        {
                          if (v312)
                            (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
                          if (!v313)
                            WTF::fastFree((WTF *)v308, v20);
                        }
LABEL_533:
                        v45 = 1;
                        goto LABEL_534;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow((WTF::Lock *)v308);
                    goto LABEL_528;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v301);
                goto LABEL_512;
              }
LABEL_462:
              v283 = *((_QWORD *)v17 + 1);
              if (__ldaxr((unsigned __int8 *)v283))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v283))
              {
                goto LABEL_466;
              }
              MEMORY[0x19AEA534C](v283);
LABEL_466:
              ++*(_QWORD *)(v283 + 8);
              v285 = __ldxr((unsigned __int8 *)v283);
              if (v285 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v283))
                {
LABEL_471:
                  v286 = *v279;
                  *v279 = v17;
                  if (!v286)
                    goto LABEL_488;
                  v287 = *((_QWORD *)v286 + 1);
                  if (__ldaxr((unsigned __int8 *)v287))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v287))
                  {
                    goto LABEL_476;
                  }
                  MEMORY[0x19AEA534C](v287);
LABEL_476:
                  v289 = *(_QWORD *)(v287 + 8);
                  v290 = v289 - 1;
                  *(_QWORD *)(v287 + 8) = v289 - 1;
                  if (v289 == 1)
                  {
                    v331 = *(_QWORD *)(v287 + 16);
                    v291 = *(_QWORD *)(v287 + 24);
                    *(_QWORD *)(v287 + 24) = 0;
                    v292 = v331 != 0;
                  }
                  else
                  {
                    v291 = 0;
                    v292 = 1;
                  }
                  v293 = __ldxr((unsigned __int8 *)v287);
                  if (v293 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v287))
                    {
LABEL_483:
                      if (!v290)
                      {
                        if (v291)
                          (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
                        if (!v292)
                          WTF::fastFree((WTF *)v287, v20);
                      }
LABEL_488:
                      v294 = *v273;
                      if (*v273)
                        v295 = *(_DWORD *)(v294 - 12) + 1;
                      else
                        v295 = 1;
                      *(_DWORD *)(v294 - 12) = v295;
                      v296 = *v273;
                      if (*v273)
                        v297 = *(_DWORD *)(v296 - 12);
                      else
                        v297 = 0;
                      v298 = (*(_DWORD *)(v296 - 16) + v297);
                      v299 = *(unsigned int *)(v296 - 4);
                      if (v299 > 0x400)
                      {
                        if (v299 > 2 * v298)
                          goto LABEL_501;
                      }
                      else
                      {
                        if (3 * v299 > 4 * v298)
                          goto LABEL_501;
                        if (!(_DWORD)v299)
                        {
                          v300 = 8;
                          goto LABEL_500;
                        }
                      }
                      v300 = (_DWORD)v299 << (6 * *(_DWORD *)(v296 - 12) >= (2 * v299));
LABEL_500:
                      WTF::HashTable<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingTreeNode,WTF::RawPtrTraits<WebCore::ScrollingTreeNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeNode>>>>::rehash((uint64_t *)(v265 + 112), v300);
                      goto LABEL_501;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v287);
                  goto LABEL_483;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v283);
              goto LABEL_471;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v266);
          goto LABEL_442;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v258);
      goto LABEL_427;
    }
LABEL_366:
    v45 = 0;
    goto LABEL_534;
  }
  v214 = (const WebCore::ScrollingStateNode **)*((_QWORD *)a2 + 9);
  v215 = 8 * v213;
  while ((WebCore::ScrollingTree::updateTreeFromStateNodeRecursive(v3, *v214, v351) & 1) != 0)
  {
    ++v214;
    v215 -= 8;
    if (!v215)
      goto LABEL_363;
  }
  v45 = 0;
  if (v17)
  {
LABEL_534:
    v315 = *((_QWORD *)v17 + 1);
    if (__ldaxr((unsigned __int8 *)v315))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v315))
    {
      goto LABEL_538;
    }
    MEMORY[0x19AEA534C](v315);
LABEL_538:
    v317 = *(_QWORD *)(v315 + 8);
    v318 = v317 - 1;
    *(_QWORD *)(v315 + 8) = v317 - 1;
    if (v317 == 1)
    {
      v323 = *(_QWORD *)(v315 + 16);
      v319 = *(_QWORD *)(v315 + 24);
      *(_QWORD *)(v315 + 24) = 0;
      v320 = v323 != 0;
    }
    else
    {
      v319 = 0;
      v320 = 1;
    }
    v321 = __ldxr((unsigned __int8 *)v315);
    if (v321 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v315))
      {
        if (v318)
          return v45;
        goto LABEL_546;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v315);
    if (v318)
      return v45;
LABEL_546:
    if (v319)
      (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
    if (!v320)
      WTF::fastFree((WTF *)v315, v20);
  }
  return v45;
}

uint64_t WebCore::ScrollingTreeScrollingNode::didCompleteCommitForNode(uint64_t this)
{
  *(_BYTE *)(this + 261) = 0;
  return this;
}

uint64_t WebCore::ScrollingTreeScrollingNode::commitStateAfterChildren(WebCore::ScrollingTreeScrollingNode *this, const WebCore::ScrollingStateNode *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v8;

  v2 = *((unsigned __int8 *)a2 + 16);
  v3 = v2 > 5;
  v4 = (1 << v2) & 0x2B;
  if (v3 || v4 == 0)
    return 0;
  v8 = *((_QWORD *)a2 + 5);
  if ((v8 & 0x80) != 0)
  {
    WebCore::ScrollingTreeScrollingNode::handleScrollPositionRequest((uint64_t)this, (uint64_t)a2 + 452);
    v8 = *((_QWORD *)a2 + 5);
  }
  if ((v8 & 0x200000) != 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD, char *))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4), *((_QWORD *)this + 6), *((_QWORD *)this + 7), (char *)a2 + 496);
  *((_BYTE *)this + 260) = 0;
  return 1;
}

uint64_t *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v20 = 0;
        else
          v20 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v27 = v6 + 8 * v20;
        goto LABEL_33;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
      goto LABEL_28;
  }
  else if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v25 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v25 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_29:
    result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(v4, v25, v14);
    v14 = result;
    v21 = *v4;
    if (*v4)
      v24 = *(unsigned int *)(v21 - 4);
    else
      v24 = 0;
  }
  v27 = v21 + 8 * v24;
  v26 = 1;
LABEL_33:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v27;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

uint64_t *WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v13;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_12;
  }
  if (__ldaxr((unsigned __int8 *)a2))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](a2);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)a2))
    goto LABEL_4;
LABEL_5:
  if (*(_QWORD *)(a2 + 24))
  {
    ++*(_QWORD *)(a2 + 16);
    v5 = a2;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)a2);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)a2))
LABEL_11:
    WTF::Lock::unlockSlow((WTF::Lock *)a2);
LABEL_12:
  v7 = *a1;
  *a1 = v5;
  if (!v7)
    return a1;
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
LABEL_15:
    MEMORY[0x19AEA534C](v7);
    goto LABEL_16;
  }
  if (__stxr(1u, (unsigned __int8 *)v7))
    goto LABEL_15;
LABEL_16:
  v9 = *(_QWORD *)(v7 + 16) - 1;
  *(_QWORD *)(v7 + 16) = v9;
  if (!v9)
  {
    v10 = *(_QWORD *)(v7 + 8);
    v11 = __ldxr((unsigned __int8 *)v7);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v7))
        goto LABEL_19;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_19:
    if (!v10)
      WTF::fastFree((WTF *)v7, (void *)a2);
    return a1;
  }
  v13 = __ldxr((unsigned __int8 *)v7);
  if (v13 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return a1;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return a1;
}

_QWORD *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (!v7)
  {
    v12 = 0;
    if (!v6)
      return v12;
    goto LABEL_16;
  }
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (uint64_t *)(v6 + 8 * v11);
    v14 = *v13;
    if ((unint64_t)(*v13 + 1) >= 2)
    {
      v15 = *a1;
      if (*a1)
        v16 = *(_DWORD *)(v15 - 8);
      else
        v16 = 0;
      v17 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
      v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      v20 = v16 & ((v19 >> 31) ^ v19);
      v21 = 1;
      do
      {
        v22 = v20;
        v23 = *(_QWORD *)(v15 + 8 * v20);
        v20 = (v20 + v21++) & v16;
      }
      while (v23);
      v24 = (_QWORD *)(v15 + 8 * v22);
      *v24 = v14;
      if (v13 == a3)
        v12 = v24;
    }
    ++v11;
  }
  while (v11 != v7);
  if (v6)
LABEL_16:
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WebCore::ScrollingTree::removeAllNodes(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;

  v2 = this;
  v3 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 24 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      v6 = v3;
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v6 = v3;
        while (*(_OWORD *)v6 == 0 || *(_QWORD *)(v6 + 8) == -1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v6 = v3 + 24 * v4;
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v3 + 24 * v4;
  if (v3)
  {
LABEL_12:
    v9 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_17;
  }
  v9 = 0;
LABEL_17:
  if (v9 == v6)
    goto LABEL_58;
  do
  {
    v10 = *(_QWORD **)(v6 + 16);
    if (!v10)
      goto LABEL_28;
    v11 = v10[1];
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_23;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_23:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 != 1)
    {
      __clrex();
LABEL_27:
      WTF::Lock::unlockSlow((WTF::Lock *)v11);
      goto LABEL_28;
    }
    if (__stlxr(0, (unsigned __int8 *)v11))
      goto LABEL_27;
LABEL_28:
    (*(void (**)(_QWORD *))(*v10 + 40))(v10);
    v14 = v10[1];
    if (__ldaxr((unsigned __int8 *)v14))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v14))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C](v14);
LABEL_32:
    v16 = *(_QWORD *)(v14 + 8);
    v17 = v16 - 1;
    *(_QWORD *)(v14 + 8) = v16 - 1;
    if (v16 == 1)
    {
      v23 = *(_QWORD *)(v14 + 16);
      v18 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      v19 = v23 != 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    v20 = __ldxr((unsigned __int8 *)v14);
    if (v20 != 1)
    {
      __clrex();
LABEL_39:
      WTF::Lock::unlockSlow((WTF::Lock *)v14);
      if (v17)
        goto LABEL_44;
      goto LABEL_40;
    }
    if (__stlxr(0, (unsigned __int8 *)v14))
      goto LABEL_39;
    if (v17)
      goto LABEL_44;
LABEL_40:
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (!v19)
      WTF::fastFree((WTF *)v14, a2);
LABEL_44:
    v21 = v6 + 24;
    v6 = v5;
    if (v21 != v5)
    {
      v6 = v21;
      while (*(_OWORD *)v6 == 0 || *(_QWORD *)(v6 + 8) == -1)
      {
        v6 += 24;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v9);
  this = *(_QWORD *)(v2 + 24);
  if (this)
  {
    *(_QWORD *)(v2 + 24) = 0;
    this = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(this, a2);
  }
LABEL_58:
  v24 = (unsigned __int8 *)(v2 + 32);
  if (__ldaxr((unsigned __int8 *)(v2 + 32)))
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stxr(1u, v24))
LABEL_61:
    this = MEMORY[0x19AEA534C](v2 + 32);
  v26 = *(_QWORD *)(v2 + 40);
  if (v26)
  {
    *(_QWORD *)(v2 + 40) = 0;
    v27 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v27)
    {
      v28 = (_QWORD *)(v26 + 16);
      do
      {
        if (*(v28 - 1) != -1)
        {
          if (*v28)
            WTF::fastFree((WTF *)(*v28 - 16), a2);
        }
        v28 += 3;
        --v27;
      }
      while (v27);
    }
    this = WTF::fastFree((WTF *)(v26 - 16), a2);
  }
  v29 = __ldxr(v24);
  if (v29 == 1)
  {
    if (!__stlxr(0, v24))
    {
      if (v3)
        return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
      return this;
    }
  }
  else
  {
    __clrex();
  }
  this = WTF::Lock::unlockSlow((WTF::Lock *)v24);
  if (v3)
    return WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v3, a2);
  return this;
}

BOOL WebCore::ScrollingTreeFrameHostingNode::commitStateBeforeChildren(WebCore::ScrollingTreeFrameHostingNode *this, const WebCore::ScrollingStateNode *a2)
{
  int v2;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 != 2 || (*((_BYTE *)a2 + 40) & 2) == 0)
    return v2 == 2;
  v4 = *((_QWORD *)a2 + 16);
  v5 = *((unsigned __int8 *)a2 + 136);
  v6 = *((unsigned __int8 *)this + 104);
  if (*((_BYTE *)a2 + 136))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (*((_QWORD *)this + 12) == v4)
    {
      *((_QWORD *)this + 12) = v4;
      *((_BYTE *)this + 104) = v5;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if ((v5 != 0) != (v6 != 0))
LABEL_12:
    WebCore::ScrollingTreeFrameHostingNode::removeHostedChildren((uint64_t)this, a2);
  *((_QWORD *)this + 12) = v4;
  *((_BYTE *)this + 104) = v5;
  if (!v5)
    return v2 == 2;
LABEL_14:
  v8 = *((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_18:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_23:
  v12 = (uint64_t *)(v8 + 320);
  v13 = *(_QWORD *)(v8 + 320);
  if (v13
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(v8 + 320), 8u), (v13 = *v12) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v13 + 16 * v18);
  v20 = *v19;
  if (!*v19)
  {
LABEL_34:
    *v19 = v4;
    v23 = *((_QWORD *)this + 1);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_40;
    }
    MEMORY[0x19AEA534C](v23);
LABEL_40:
    ++*(_QWORD *)(v23 + 8);
    v27 = __ldxr((unsigned __int8 *)v23);
    if (v27 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
      {
LABEL_45:
        v28 = v19[1];
        v19[1] = this;
        if (!v28)
          goto LABEL_62;
        v29 = *(_QWORD *)(v28 + 8);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v29))
        {
          goto LABEL_50;
        }
        MEMORY[0x19AEA534C](v29);
LABEL_50:
        v31 = *(_QWORD *)(v29 + 8);
        v32 = v31 - 1;
        *(_QWORD *)(v29 + 8) = v31 - 1;
        if (v31 == 1)
        {
          v61 = *(_QWORD *)(v29 + 16);
          v33 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v29 + 24) = 0;
          v34 = v61 != 0;
        }
        else
        {
          v33 = 0;
          v34 = 1;
        }
        v35 = __ldxr((unsigned __int8 *)v29);
        if (v35 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
LABEL_57:
            if (!v32)
            {
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
              if (!v34)
                WTF::fastFree((WTF *)v29, a2);
            }
LABEL_62:
            v36 = *v12;
            if (*v12)
              v37 = *(_DWORD *)(v36 - 12) + 1;
            else
              v37 = 1;
            *(_DWORD *)(v36 - 12) = v37;
            v38 = *v12;
            if (*v12)
              v39 = *(_DWORD *)(v38 - 12);
            else
              v39 = 0;
            v40 = (*(_DWORD *)(v38 - 16) + v39);
            v41 = *(unsigned int *)(v38 - 4);
            if (v41 > 0x400)
            {
              if (v41 > 2 * v40)
                goto LABEL_101;
            }
            else
            {
              if (3 * v41 > 4 * v40)
                goto LABEL_101;
              if (!(_DWORD)v41)
              {
                v42 = 8;
                goto LABEL_84;
              }
            }
            v42 = (_DWORD)v41 << (6 * *(_DWORD *)(v38 - 12) >= (2 * v41));
LABEL_84:
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebCore::ScrollingTreeFrameHostingNode,WTF::RawPtrTraits<WebCore::ScrollingTreeFrameHostingNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingTreeFrameHostingNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v12, v42);
            goto LABEL_101;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        goto LABEL_57;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_45;
  }
  v21 = 0;
  v22 = 1;
  while (v20 != v4)
  {
    if (v20 == -1)
      v21 = v19;
    v18 = (v18 + v22) & v14;
    v19 = (_QWORD *)(v13 + 16 * v18);
    v20 = *v19;
    ++v22;
    if (!*v19)
    {
      if (v21)
      {
        *v21 = 0;
        v21[1] = 0;
        --*(_DWORD *)(*v12 - 16);
        v19 = v21;
      }
      goto LABEL_34;
    }
  }
  v25 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v25))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v25))
  {
    goto LABEL_75;
  }
  MEMORY[0x19AEA534C](v25);
LABEL_75:
  ++*(_QWORD *)(v25 + 8);
  v43 = __ldxr((unsigned __int8 *)v25);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_79;
  }
  if (__stlxr(0, (unsigned __int8 *)v25))
LABEL_79:
    WTF::Lock::unlockSlow((WTF::Lock *)v25);
  v44 = v19[1];
  v19[1] = this;
  if (!v44)
    goto LABEL_101;
  v45 = *(_QWORD *)(v44 + 8);
  if (__ldaxr((unsigned __int8 *)v45))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v45))
  {
    goto LABEL_89;
  }
  MEMORY[0x19AEA534C](v45);
LABEL_89:
  v47 = *(_QWORD *)(v45 + 8);
  v48 = v47 - 1;
  *(_QWORD *)(v45 + 8) = v47 - 1;
  if (v47 == 1)
  {
    v62 = *(_QWORD *)(v45 + 16);
    v49 = *(_QWORD *)(v45 + 24);
    *(_QWORD *)(v45 + 24) = 0;
    v50 = v62 != 0;
  }
  else
  {
    v49 = 0;
    v50 = 1;
  }
  v51 = __ldxr((unsigned __int8 *)v45);
  if (v51 != 1)
  {
    __clrex();
    goto LABEL_95;
  }
  if (__stlxr(0, (unsigned __int8 *)v45))
LABEL_95:
    WTF::Lock::unlockSlow((WTF::Lock *)v45);
  if (!v48)
  {
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    if (!v50)
      WTF::fastFree((WTF *)v45, a2);
  }
LABEL_101:
  v52 = *((_QWORD *)this + 1);
  if (__ldaxr((unsigned __int8 *)v52))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v52))
  {
    goto LABEL_105;
  }
  MEMORY[0x19AEA534C](v52);
LABEL_105:
  v54 = *(_QWORD *)(v52 + 8);
  v55 = v54 - 1;
  *(_QWORD *)(v52 + 8) = v54 - 1;
  if (v54 == 1)
  {
    v60 = *(_QWORD *)(v52 + 16);
    v56 = *(_QWORD *)(v52 + 24);
    *(_QWORD *)(v52 + 24) = 0;
    v57 = v60 != 0;
  }
  else
  {
    v56 = 0;
    v57 = 1;
  }
  v58 = __ldxr((unsigned __int8 *)v52);
  if (v58 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v52))
    {
      if (v55)
        return v2 == 2;
      goto LABEL_113;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v52);
  if (v55)
    return v2 == 2;
LABEL_113:
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  if (!v57)
    WTF::fastFree((WTF *)v52, a2);
  return v2 == 2;
}

uint64_t WebCore::ScrollingTreeNode::commitStateAfterChildren()
{
  return 1;
}

char *WTF::Vector<std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WebCore::ContentSecurityPolicyHeaderType>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v6 = v7;
  *(_BYTE *)(v6 + 8) = result[8];
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

char *WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[16 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v13 = *a1;
        return &v13[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (!(v10 >> 28))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(16 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
        memcpy(v11, v5, 16 * v6);
        v13 = *a1;
        if (v5)
        {
          if (v13 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v12);
          v13 = *a1;
        }
        return &v13[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x194380B08);
    }
  }
  v14 = *((unsigned int *)a1 + 2);
  v15 = v14 + (v14 >> 2);
  if (v15 >= 0x10)
    v16 = v15 + 1;
  else
    v16 = 16;
  if (v16 <= a2)
    v17 = a2;
  else
    v17 = v16;
  if (v17 > v14)
  {
    if (v17 >> 28)
      goto LABEL_30;
    v18 = *((unsigned int *)a1 + 3);
    v19 = (char *)WTF::fastMalloc((WTF *)(16 * v17));
    *((_DWORD *)a1 + 2) = v17;
    *a1 = v19;
    memcpy(v19, v5, 16 * v18);
    if (v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v20);
    }
  }
  return (char *)v3;
}

WTF *WebCore::ContainerNode::insertBefore@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, WebCore::Node **a3@<X2>, uint64_t a4@<X8>)
{
  WTF *result;
  WTF::StringImpl *v9;
  WebCore::Node *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  const WebCore::Style::RuleSet *v19;
  WebCore::TreeScope *v20;
  WTF *v21;
  WebCore::Node *v22;
  __int16 v23;
  char v24;
  char v25;
  __int16 v26;
  WebCore::Node *v27;
  uint64_t v28;
  WebCore::Node *v29;
  char v30;
  __int16 v31;
  WebCore::Style::Invalidator *v32;
  int v33;
  _BOOL4 v34;
  WebCore::Node *v35;
  WebCore::TreeScope *v36;
  WebCore::Node *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WebCore::Node **v42;
  void *v43;
  WebCore::ChildListMutationAccumulator *v44;
  void *v45;
  const WebCore::Style::RuleSet *v46;
  int v47;
  WebCore::Node *v48;
  WTF *v49;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::ChildListMutationAccumulator *v57;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  void *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Inspector::InspectorDebuggerAgent **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  _BOOL4 v84;
  _QWORD *v85;
  BOOL v86;
  uint64_t v87;
  WTF *v88;
  WebCore::ChildListMutationAccumulator *v89;
  char v90[8];
  WTF::StringImpl *v91;
  char v92;
  WTF *v93;
  uint64_t v94;
  _BYTE v95[88];
  uint64_t v96;
  WTF::StringImpl *v97;
  char v98;
  WebCore::ChildListMutationAccumulator *v99;
  WebCore::Style::Invalidator *v100[2];
  BOOL v101;
  BOOL v102;
  BOOL v103;
  WTF *v104;
  uint64_t v105;
  _BYTE v106[88];
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  result = (WTF *)WebCore::ContainerNode::ensurePreInsertionValidity(a1, (WebCore::Node *)a2, *a3, &v96);
  if (v98)
  {
    v82 = v97;
    v97 = 0;
    *(_BYTE *)a4 = v96;
    *(_QWORD *)(a4 + 8) = v82;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_6;
  }
  v10 = *a3;
  if (*a3 == (WebCore::Node *)a2)
  {
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)a3, a2[7]);
    v10 = *a3;
  }
  if (!v10)
  {
    result = (WTF *)WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck((WebCore::ContainerNode *)a4, (WebCore::Node *)a1, (uint64_t)a2);
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 24) += 2;
  *a3 = 0;
  v93 = (WTF *)v95;
  v94 = 11;
  WebCore::ContainerNode::removeSelfOrChildNodesForInsertion((WebCore::NodeTraversal *)v90, (uint64_t)a2, &v93);
  if (v92)
  {
    v81 = v91;
    v91 = 0;
    *(_BYTE *)a4 = v90[0];
    *(_QWORD *)(a4 + 8) = v81;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_97;
  }
  if (!HIDWORD(v94))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_97;
  }
  v11 = v93;
  v12 = (WTF *)((char *)v93 + 8 * HIDWORD(v94));
  while (2)
  {
    v13 = *(_QWORD *)v11;
    *(_DWORD *)(a1 + 24) += 2;
    v14 = a1;
    do
    {
      if (v14 == v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        LOBYTE(v104) = 1;
        v106[0] = 1;
        v105 = 0;
        *(_BYTE *)a4 = 1;
        *(_QWORD *)(a4 + 8) = 0;
        *(_BYTE *)(a4 + 16) = 1;
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v104, v9);
        goto LABEL_97;
      }
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 32);
      if (v14)
      {
LABEL_17:
        *(_DWORD *)(v14 + 24) += 2;
        goto LABEL_18;
      }
      v64 = *(_WORD *)(v15 + 28);
      if ((v64 & 0x80) != 0)
      {
        v72 = *(_QWORD *)(v15 + 200);
        if (!v72)
        {
LABEL_136:
          v14 = 0;
          goto LABEL_18;
        }
        v14 = *(_QWORD *)(v72 + 8);
        if (v14)
          goto LABEL_17;
      }
      else
      {
        if ((v64 & 0xF000) != 0xB000)
          goto LABEL_136;
        v80 = v15;
        if ((*(unsigned int (**)(void))(*(_QWORD *)v15 + 392))() && (v83 = *(_QWORD *)(v80 + 96)) != 0)
        {
          v14 = *(_QWORD *)(v83 + 8);
          v15 = v80;
          if (v14)
            goto LABEL_17;
        }
        else
        {
          v14 = 0;
          v15 = v80;
        }
      }
LABEL_18:
      if (*(_DWORD *)(v15 + 24) == 2)
      {
        if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v15);
      }
      else
      {
        *(_DWORD *)(v15 + 24) -= 2;
      }
    }
    while (v14);
    v11 = (WTF *)((char *)v11 + 8);
    if (v11 != v12)
      continue;
    break;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  *(_DWORD *)(v16 + 24) += 2;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v67 = *(_QWORD *)(v16 + 528);
    if (v67)
    {
      v68 = *(_QWORD *)(v67 + 8);
      if (v68)
      {
        v69 = *(_QWORD *)(v68 + 24);
        if (v69)
        {
          v70 = *(_QWORD *)(v69 + 8);
          if (v70)
            goto LABEL_150;
        }
      }
    }
    v73 = *(_QWORD *)(v16 + 2632);
    if (v73)
    {
      v74 = *(_QWORD *)(v73 + 8);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 528);
        if (v75)
        {
          v76 = *(_QWORD *)(v75 + 8);
          if (v76)
          {
            v77 = *(_QWORD *)(v76 + 24);
            if (v77)
            {
              v70 = *(_QWORD *)(v77 + 8);
              if (v70)
              {
LABEL_150:
                v71 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v70 + 80) + 8) + 152);
                if (v71)
                  WebCore::PageDOMDebuggerAgent::willInsertDOMNode(v71, (WebCore::Node *)a1);
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v16 + 24) == 2)
  {
    if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v16);
  }
  else
  {
    *(_DWORD *)(v16 + 24) -= 2;
  }
  WebCore::ChildListMutationScope::ChildListMutationScope(&v89, (WebCore::ContainerNode *)a1);
  if (HIDWORD(v94))
  {
    v21 = v93;
    v88 = (WTF *)((char *)v93 + 8 * HIDWORD(v94));
    do
    {
      if (*((_QWORD *)v10 + 4) != a1)
        break;
      v22 = *(WebCore::Node **)v21;
      if (*(_QWORD *)(*(_QWORD *)v21 + 32))
        break;
      v109 = 0;
      v107 = 0u;
      v108 = 0u;
      v23 = *((_WORD *)v22 + 14);
      if ((v23 & 2) != 0)
        v24 = 2;
      else
        v24 = 7;
      if ((v23 & 8) != 0)
        v25 = 0;
      else
        v25 = v24;
      v26 = *((_WORD *)v10 + 14);
      LOBYTE(v107) = v25;
      if ((v23 & 8) != 0)
        v27 = v22;
      else
        v27 = 0;
      *((_QWORD *)&v107 + 1) = v27;
      v28 = (uint64_t)v10;
      do
        v28 = *(_QWORD *)(v28 + 48) & 0xFFFFFFFFFFFFLL;
      while (v28 && (*(_WORD *)(v28 + 28) & 8) == 0);
      *(_QWORD *)&v108 = v28;
      v29 = v10;
      if ((v26 & 8) == 0)
      {
        v29 = v10;
        do
          v29 = (WebCore::Node *)*((_QWORD *)v29 + 7);
        while (v29 && (*((_WORD *)v29 + 14) & 8) == 0);
      }
      *((_QWORD *)&v108 + 1) = v29;
      LOBYTE(v109) = 1;
      if ((v23 & 8) != 0)
        v30 = 2;
      else
        v30 = 1;
      BYTE1(v109) = v30;
      v104 = (WTF *)v106;
      v105 = 11;
      ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      ++WebCore::ScriptDisallowedScope::s_count;
      v31 = *(_WORD *)(a1 + 28);
      if ((v31 & 8) != 0)
        v32 = (WebCore::Style::Invalidator *)a1;
      else
        v32 = 0;
      v100[0] = v32;
      v100[1] = (WebCore::Style::Invalidator *)&v107;
      if ((v31 & 8) != 0)
      {
        v84 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)a1);
        v101 = v84;
        if (v84)
        {
          v85 = (_QWORD *)*((_QWORD *)v100[0] + 5);
          if (*v85)
            v86 = (*(_WORD *)(*v85 + 28) & 0x80) == 0;
          else
            v86 = 1;
          if (v86)
            v87 = v85[1] + 1328;
          else
            v87 = *v85 + 216;
          v34 = *(unsigned __int8 *)(*(_QWORD *)v87 + 236) != 0;
          v33 = 1;
        }
        else
        {
          v33 = 0;
          v34 = 0;
        }
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v101 = 0;
      }
      v102 = v34;
      v103 = *(_QWORD *)(a1 + 80) == 0;
      if (v33 && v34)
        WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v100, (uint64_t)v18, v19);
      if ((*(_WORD *)(a1 + 28) & 0x80) != 0 || (*(_BYTE *)(a1 + 22) & 0x10) != 0)
      {
        v65 = **(_QWORD **)(a1 + 40);
        if ((*(_WORD *)(v65 + 28) & 0x80) == 0)
          v65 = 0;
        v66 = *(_QWORD *)(v65 + 224);
        if (v66)
        {
          ++*(_DWORD *)(v66 + 12);
          *(_BYTE *)(v66 + 9) = 0;
        }
      }
      v35 = *(WebCore::Node **)v21;
      v36 = *(WebCore::TreeScope **)(a1 + 40);
      v37 = *(WebCore::Node **)(*(_QWORD *)v21 + 40);
      if (v37 != v36)
      {
        WebCore::Node::moveTreeToNewScope(v35, v37, v36, v20);
        v35 = *(WebCore::Node **)v21;
      }
      v38 = WebCore::ScriptDisallowedScope::s_count++;
      v39 = *((_QWORD *)v10 + 6);
      v40 = v39 & 0xFFFFFFFFFFFFLL;
      if ((v39 & 0xFFFFFFFFFFFFLL) != 0)
      {
        *(_DWORD *)((v39 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        v41 = v39 & 0xFFFF000000000000 | (unint64_t)v35;
        v42 = (WebCore::Node **)(v40 + 56);
      }
      else
      {
        v41 = v39 & 0xFFFF000000000000 | (unint64_t)v35;
        v42 = (WebCore::Node **)(a1 + 80);
      }
      *v42 = v35;
      *((_QWORD *)v10 + 6) = v41;
      *((_QWORD *)v35 + 4) = a1;
      *((_DWORD *)v35 + 6) |= 1u;
      *((_QWORD *)v35 + 6) = v40 | ((unint64_t)*((unsigned __int16 *)v35 + 27) << 48);
      *((_QWORD *)v35 + 7) = v10;
      if (v40)
      {
        if (*(_DWORD *)(v40 + 24) == 2)
        {
          if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef((WebCore::Node *)v40);
            v38 = WebCore::ScriptDisallowedScope::s_count - 1;
          }
        }
        else
        {
          *(_DWORD *)(v40 + 24) -= 2;
        }
      }
      WebCore::ScriptDisallowedScope::s_count = v38;
      WebCore::ChildListMutationScope::ChildListMutationScope(&v99, (WebCore::ContainerNode *)a1);
      v44 = v99;
      if (v99)
      {
        if (!*((_QWORD *)v99 + 10))
        {
          v99 = 0;
LABEL_139:
          if (*(_DWORD *)v44 == 1)
          {
            WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v44, v43);
            WTF::fastFree(v78, v79);
          }
          else
          {
            --*(_DWORD *)v44;
          }
          goto LABEL_66;
        }
        WebCore::ChildListMutationAccumulator::childAdded(v99, v22);
        v44 = v99;
        v99 = 0;
        if (v44)
          goto LABEL_139;
      }
LABEL_66:
      WebCore::notifyChildNodeInserted(a1, (uint64_t)v22, (uint64_t)&v104);
      if (v101)
      {
        if (v102)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v100, (uint64_t)v45, v46);
        WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v100);
      }
      --WebCore::ScriptDisallowedScope::s_count;
      v47 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
        && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
      {
        WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v100, v45);
        v47 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
      }
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v47 - 1;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 376))(a1, &v107);
      if (HIDWORD(v105))
      {
        v51 = v104;
        v52 = 8 * HIDWORD(v105);
        do
        {
          v53 = *(_QWORD *)v51;
          v51 = (WTF *)((char *)v51 + 8);
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 280))(v53);
          v52 -= 8;
        }
        while (v52);
      }
      WebCore::dispatchChildInsertionEvents(v22, v48);
      if (HIDWORD(v105))
      {
        v54 = v104;
        v55 = 8 * HIDWORD(v105);
        do
        {
          v56 = *(_QWORD *)v54;
          *(_QWORD *)v54 = 0;
          if (v56)
          {
            if (*(_DWORD *)(v56 + 24) == 2)
            {
              if ((*(_WORD *)(v56 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v56);
            }
            else
            {
              *(_DWORD *)(v56 + 24) -= 2;
            }
          }
          v54 = (WTF *)((char *)v54 + 8);
          v55 -= 8;
        }
        while (v55);
      }
      v49 = v104;
      if (v106 != (_BYTE *)v104 && v104 != 0)
      {
        v104 = 0;
        LODWORD(v105) = 0;
        WTF::fastFree(v49, v18);
      }
      v21 = (WTF *)((char *)v21 + 8);
    }
    while (v21 != v88);
  }
  WebCore::Node::dispatchSubtreeModifiedEvent(a1);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v57 = v89;
  v89 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
    {
      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v57, v9);
      WTF::fastFree(v62, v63);
    }
    else
    {
      --*(_DWORD *)v57;
    }
  }
LABEL_97:
  if (v92 && v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v9);
    else
      *(_DWORD *)v91 -= 2;
  }
  if (HIDWORD(v94))
  {
    v59 = v93;
    v60 = 8 * HIDWORD(v94);
    do
    {
      v61 = *(_QWORD *)v59;
      *(_QWORD *)v59 = 0;
      if (v61)
      {
        if (*(_DWORD *)(v61 + 24) == 2)
        {
          if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v61);
        }
        else
        {
          *(_DWORD *)(v61 + 24) -= 2;
        }
      }
      v59 = (WTF *)((char *)v59 + 8);
      v60 -= 8;
    }
    while (v60);
  }
  result = v93;
  if (v95 != (_BYTE *)v93 && v93 != 0)
  {
    v93 = 0;
    LODWORD(v94) = 0;
    result = (WTF *)WTF::fastFree(result, v9);
  }
  if (*((_DWORD *)v10 + 6) == 2)
  {
    if ((*((_WORD *)v10 + 15) & 0x400) == 0)
      result = (WTF *)WebCore::Node::removedLastRef(v10);
  }
  else
  {
    *((_DWORD *)v10 + 6) -= 2;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)a1);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
  }
LABEL_6:
  if (v98)
  {
    result = v97;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
        return (WTF *)WTF::StringImpl::destroy(v97, v9);
      else
        *(_DWORD *)v97 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::Node::dispatchSubtreeModifiedEvent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::EventDispatcher *v3;
  _QWORD *v4;
  WebCore::Node *v5;
  WebCore::Event *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if ((*(_BYTE *)(this + 22) & 0x10) == 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(this + 40) + 8);
    if (!*(_BYTE *)(v1 + 3268) && (*(_WORD *)(v1 + 3292) & 1) != 0)
    {
      v2 = this;
      this = WebCore::eventNames((WebCore *)this);
      v3 = (WebCore::EventDispatcher *)v2;
      v4 = (_QWORD *)(this + 56);
      if (*(_QWORD *)(v2 + 32)
        || (v9 = *(_QWORD *)(v2 + 16), (v9 & 0x1000000000000) != 0)
        && (this = WebCore::EventListenerMap::find((v9 & 0xFFFFFFFFFFFFLL) + 16, v4),
            v3 = (WebCore::EventDispatcher *)v2,
            this))
      {
        v10 = 0;
        v11 = 0;
        v5 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
        WebCore::MutationEvent::MutationEvent((uint64_t)v5, v4, 1, 0, 0, (_DWORD **)&v11, (_DWORD **)&v10);
        WebCore::EventDispatcher::dispatchScopedEvent(v3, v5, v6);
        if (*((_DWORD *)v5 + 4) == 1)
          (*(void (**)(WebCore::Node *))(*(_QWORD *)v5 + 8))(v5);
        else
          --*((_DWORD *)v5 + 4);
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v7);
          else
            *(_DWORD *)v8 -= 2;
        }
        this = (uint64_t)v11;
        v11 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
          else
            *(_DWORD *)this -= 2;
        }
      }
    }
  }
  return this;
}

_BYTE *WebCore::dispatchChildInsertionEvents(_BYTE *this, WebCore::Node *a2)
{
  uint64_t v2;
  WebCore::Node *v3;
  _QWORD *v4;
  WebCore::Event *v5;
  WTF::StringImpl *v6;
  const WebCore::Node *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  WebCore::Event *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebCore::NodeTraversal *v24;

  if ((this[22] & 0x10) != 0)
    return this;
  *((_DWORD *)this + 6) += 2;
  v24 = (WebCore::NodeTraversal *)this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  if (*((_QWORD *)this + 4) && (*(_WORD *)(v2 + 3292) & 2) != 0)
  {
    v19 = v2;
    v11 = (uint64_t *)this;
    v12 = (_QWORD *)(WebCore::eventNames((WebCore *)this) + 24);
    v21 = (WebCore::Node *)v11;
    v13 = v11[4];
    if (v13)
      *(_DWORD *)(v13 + 24) += 2;
    v22 = 0;
    v23 = 0;
    v14 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
    WebCore::MutationEvent::MutationEvent((uint64_t)v14, v12, 1, 0, v13, (_DWORD **)&v23, (_DWORD **)&v22);
    WebCore::Node::dispatchScopedEvent(v21, v14);
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 4);
    v16 = v22;
    v22 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v23;
    v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v2 = v19;
    this = v21;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        v2 = v19;
        this = v21;
        if ((*(_WORD *)(v13 + 30) & 0x400) != 0)
          goto LABEL_4;
        WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
      v2 = v19;
      this = v21;
    }
  }
LABEL_4:
  if ((this[22] & 8) == 0 || (*(_WORD *)(v2 + 3292) & 0x10) == 0)
    goto LABEL_6;
  v18 = v2;
  v20 = (WebCore::Node *)this;
  v3 = (WebCore::Node *)this;
  do
  {
    v4 = (_QWORD *)(WebCore::eventNames((WebCore *)this) + 32);
    v22 = 0;
    v23 = 0;
    v5 = (WebCore::Event *)WebCore::MutationEvent::operator new(112);
    WebCore::MutationEvent::MutationEvent((uint64_t)v5, v4, 0, 0, 0, (_DWORD **)&v23, (_DWORD **)&v22);
    WebCore::Node::dispatchScopedEvent(v3, v5);
    if (*((_DWORD *)v5 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v5 + 8))(v5);
    else
      --*((_DWORD *)v5 + 4);
    v8 = v22;
    v22 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v23;
    v23 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = WebCore::NodeTraversal::next(v24, v20, v7);
    this = WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v24, v10);
    v3 = v24;
  }
  while (v24);
  if (v18)
  {
    this = 0;
    v2 = v18;
LABEL_6:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
        this = v24;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
    v24 = 0;
    if (this)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          return (_BYTE *)WebCore::Node::removedLastRef((WebCore::Node *)this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLLinkElement::sheetLoaded(WebCore::HTMLLinkElement *this)
{
  WebCore::HTMLLinkElement *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 291) & 1) != 0)
    return 0;
  v1 = this;
  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v3 + 68))
    {
      v6 = 0;
      v7 = v3;
      while ((WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v3 + 56) + 8 * v6)) & 1) == 0)
      {
        ++v6;
        v3 = v7;
        v1 = this;
        if (v6 >= *(unsigned int *)(v7 + 68))
          goto LABEL_4;
      }
      return 0;
    }
  }
LABEL_4:
  v4 = *((unsigned __int8 *)v1 + 292);
  *((_BYTE *)v1 + 292) = 0;
  if (v4)
  {
    if (v4 == 2)
      WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(*((WebCore::Style::Scope **)v1 + 23));
    else
      WebCore::Style::Scope::removePendingSheet(*((WebCore::Document ***)v1 + 23), v1);
  }
  return 1;
}

unsigned int *WebCore::InlineStyleSheetOwner::createSheet(WebCore::InlineStyleSheetOwner *this, WebCore::Element *a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  WTF::String *v13;
  __n128 v14;
  unsigned int *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  unsigned int v27;
  uint64_t v28;
  WebCore::CSSTokenizer *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  const WebCore::Document *v42;
  const WTF::URL *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  void *v53;
  _DWORD *v54;
  unsigned int v55;
  WTF *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  void *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unsigned int *result;
  void *v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  __int128 v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  WebCore::StyleSheetContents *v85;
  _DWORD *v86;
  unsigned int v87;
  WTF *v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  void *v93;
  WTF::StringImpl *v94;
  char v95;
  WTF::StringImpl *v96;
  WebCore::StyleSheetContents *v97;
  WTF *v98;
  void *v99;
  WTF *v100;
  void *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  WebCore::StyleSheetContents *v109;
  WTF::StringImpl *v110;
  __int128 v111;
  __int128 v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  __int16 v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  __int128 v118;
  __int128 v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[2];

  v6 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *((_QWORD *)this + 4);
  if (v7)
  {
    ++*(_DWORD *)(v7 + 8);
    v8 = *(_QWORD *)(v7 + 24);
    if (*(_DWORD *)(v8 + 68))
    {
      v104 = 0;
      while (!WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v8 + 56)
                                                                                              + 8 * v104)))
      {
        if (++v104 >= (unint64_t)*(unsigned int *)(v8 + 68))
          goto LABEL_3;
      }
      v106 = *((_QWORD *)this + 5);
      if (v106)
      {
        v107 = *(_QWORD *)(v106 + 8);
        if (v107)
        {
          ++*(_DWORD *)(v107 + 8);
          WebCore::Style::Scope::removePendingSheet((WebCore::Document **)v107, a2);
          v108 = *(_DWORD *)(v107 + 8);
          if (!v108)
            goto LABEL_196;
          *(_DWORD *)(v107 + 8) = v108 - 1;
        }
      }
    }
LABEL_3:
    WebCore::InlineStyleSheetOwner::clearSheet(this, a2);
    if (*(_DWORD *)(v7 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 8);
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 4))
    {
      result = (unsigned int *)WTF::equalLettersIgnoringASCIICase((uint64_t *)this + 2, "text/css", 9uLL);
      if (!(_DWORD)result)
        goto LABEL_95;
    }
  }
  v10 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v6 + 192));
  v15 = v10;
  if (v10)
  {
    do
      v16 = __ldaxr(v10);
    while (__stlxr(v16 + 1, v10));
  }
  v17 = *a3;
  if (*a3)
  {
    v18 = *((_QWORD *)v17 + 1);
    v19 = *((_DWORD *)v17 + 1);
    v20 = ((unint64_t)*((unsigned int *)v17 + 4) >> 2) & 1;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 1;
  }
  if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v102 = v20;
    if (WebCore::Element::isNonceable(a2, v11, v12, v13, v14))
      v21 = (*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 216;
    else
      v21 = MEMORY[0x1E0CBF3B8];
    v20 = v102;
  }
  else
  {
    v21 = MEMORY[0x1E0CBF3B8];
  }
  v22 = **((_QWORD **)a2 + 5);
  if (v22)
    v23 = (*(_WORD *)(v22 + 28) & 0x80) == 0;
  else
    v23 = 1;
  if (v23 || *(_BYTE *)(v22 + 193))
    v24 = (*(unsigned __int16 *)(v6 + 3358) >> 3) & 1;
  else
    LOBYTE(v24) = 1;
  v25 = WebCore::ContentSecurityPolicy::allowInlineStyle((uint64_t)v15, v6 + 736, (uint64_t)this + 4, v18, v19 | (v20 << 32), 0, (uint64_t)a2, v21, v24);
  if (v15)
  {
    if (atomic_load(v15))
    {
      do
        v27 = __ldaxr(v15);
      while (__stlxr(v27 - 1, v15));
      goto LABEL_21;
    }
LABEL_196:
    __break(0xC471u);
    JUMPOUT(0x194382168);
  }
LABEL_21:
  if ((v25 & 1) == 0)
  {
    result = (unsigned int *)(*(uint64_t (**)(WebCore::Element *, uint64_t))(*(_QWORD *)a2 + 224))(a2, 1);
    goto LABEL_95;
  }
  v28 = *(_QWORD *)(v6 + 528);
  if (v28)
  {
    v28 = *(_QWORD *)(v28 + 8);
    if (v28)
    {
      v28 = *(_QWORD *)(v28 + 24);
      if (v28)
      {
        v28 = *(_QWORD *)(v28 + 8);
        if (v28)
          LOBYTE(v28) = *(_BYTE *)(v28 + 450) != 0;
      }
    }
  }
  LOBYTE(v125[0]) = v28;
  BYTE1(v125[0]) = (*(_DWORD *)(*(_QWORD *)(v6 + 680) + 672) & 0x8000000) != 0;
  BYTE2(v125[0]) = 0;
  v29 = WebCore::CSSTokenizer::tryCreate((unsigned int **)this + 3, (uint64_t *)&v110);
  if (v110)
  {
    v31 = (WTF::StringImpl *)(*((_QWORD *)v110 + 6) + 24 * *((unsigned int *)v110 + 15));
    v116 = (WTF::StringImpl *)*((_QWORD *)v110 + 6);
    v117 = v31;
    WebCore::MQ::MediaQueryParser::consumeMediaQueryList(&v116, (WebCore::CSSParserTokenRange *)v125, (uint64_t)&v123);
    v29 = v110;
    v110 = 0;
    if (v29)
    {
      WebCore::CSSTokenizer::~CSSTokenizer(v29, v30);
      v29 = (WebCore::CSSTokenizer *)WTF::fastFree(v32, v33);
    }
  }
  else
  {
    v123 = 0;
    v124 = 0;
  }
  v34 = *((_QWORD *)this + 5);
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if (v35)
    {
      ++*(_DWORD *)(v35 + 8);
      v36 = *((_QWORD *)a2 + 4);
      if (v36 && (v37 = *(_WORD *)(v36 + 28), (v37 & 8) != 0))
      {
        while ((v37 & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v36 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
        {
          v36 = *(_QWORD *)(v36 + 32);
          if (v36)
          {
            v37 = *(_WORD *)(v36 + 28);
            if ((v37 & 8) != 0)
              continue;
          }
          goto LABEL_34;
        }
        v38 = v35 + 160;
      }
      else
      {
LABEL_34:
        v38 = v35 + 176;
      }
      v29 = (WebCore::CSSTokenizer *)WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(v38, a2, (uint64_t)&v116);
      v39 = *(_DWORD *)(v35 + 8);
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x194382188);
      }
      *(_DWORD *)(v35 + 8) = v39 - 1;
    }
  }
  v40 = (_QWORD *)*((_QWORD *)a2 + 5);
  if ((*(_WORD *)(*v40 + 28) & 0x80) != 0)
    v41 = *v40;
  else
    v41 = 0;
  if (!v41 || *(_BYTE *)(v41 + 193))
  {
    v42 = (const WebCore::Document *)v40[1];
    v43 = (const WebCore::Document *)((char *)v42 + 848);
  }
  else
  {
    v43 = (const WTF::URL *)WTF::aboutBlankURL(v29);
    v42 = *(const WebCore::Document **)(*((_QWORD *)a2 + 5) + 8);
  }
  WebCore::Document::encoding((uint64_t)v42, v30, &v116);
  v45 = v116;
  if (v116)
  {
    v46 = *(_DWORD *)v116;
    *(_DWORD *)v116 += 2;
    v125[0] = v45;
    if (v46)
      *(_DWORD *)v45 = v46;
    else
      WTF::StringImpl::destroy(v45, v44);
  }
  else
  {
    WTF::String::String(v125, (uint64_t)"UTF-8", 6);
  }
  WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v110, v42, v43, (const WTF::String *)v125);
  v48 = (WTF::StringImpl *)v125[0];
  v125[0] = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v47);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (v41 && !*(_BYTE *)(v41 + 193))
    LOBYTE(v114) = 4;
  v49 = *a3;
  if (*a3)
    *(_DWORD *)v49 += 2;
  v116 = v49;
  v117 = v110;
  v118 = v111;
  v119 = v112;
  v120 = v113;
  v121 = v114;
  v122 = v115;
  {
    WebCore::Style::StyleSheetContentsCache::singleton(void)::cache = 0;
  }
  v50 = WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>>>,std::pair<WTF::String,WebCore::CSSParserContext>>(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache, (uint64_t)&v116);
  if (v50)
  {
    v51 = *(WTF::StringImpl **)(v50 + 72);
    if (v51)
    {
      *(_DWORD *)v51 += 2;
      v110 = v51;
      v52 = WTF::fastMalloc((WTF *)0x98);
      LOWORD(v125[0]) = 257;
      WebCore::CSSStyleSheet::CSSStyleSheet(v52, (uint64_t *)&v110, (uint64_t)a2, (WebCore::InlineStyleSheetOwner *)((char *)this + 4), 1, v125);
      if (v110)
      {
        if (*(_DWORD *)v110 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v110, v53);
          WTF::fastFree(v74, v75);
        }
        else
        {
          --*(_DWORD *)v110;
        }
      }
      ++*(_DWORD *)(v52 + 8);
      v54 = (_DWORD *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v52;
      if (v54)
      {
        if (v54[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
        else
          --v54[2];
      }
      v55 = *(_DWORD *)(v52 + 60);
      if (v55)
        WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v52 + 48), (WTF::StringImpl *)(*(_QWORD *)(v52 + 48) + 56 * v55));
      v56 = *(WTF **)(v52 + 48);
      if (v56)
      {
        *(_QWORD *)(v52 + 48) = 0;
        *(_DWORD *)(v52 + 56) = 0;
        WTF::fastFree(v56, v53);
      }
      *(_QWORD *)(v52 + 48) = v123;
      v57 = v124;
      v123 = 0;
      v124 = 0;
      *(_QWORD *)(v52 + 56) = v57;
      if ((*((_BYTE *)a2 + 22) & 0x10) == 0)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 704))(&v110, a2);
        v59 = v110;
        if (v110)
          *(_DWORD *)v110 += 2;
        v60 = *(WTF::StringImpl **)(v52 + 40);
        *(_QWORD *)(v52 + 40) = v59;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
          {
            WTF::StringImpl::destroy(v60, v58);
            v59 = v110;
          }
          else
          {
            *(_DWORD *)v60 -= 2;
          }
        }
        v110 = 0;
        if (v59)
        {
          if (*(_DWORD *)v59 == 2)
            WTF::StringImpl::destroy(v59, v58);
          else
            *(_DWORD *)v59 -= 2;
        }
      }
      if (!*((_BYTE *)this + 1))
      {
        v61 = *((_QWORD *)this + 4);
        if (v61 && (v62 = *(_QWORD *)(v61 + 24), *(_DWORD *)(v62 + 68)))
        {
          v105 = 0;
          while ((WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v62 + 56) + 8 * v105)) & 1) == 0)
          {
            if (++v105 >= (unint64_t)*(unsigned int *)(v62 + 68))
              goto LABEL_77;
          }
        }
        else
        {
LABEL_77:
          v63 = *((_QWORD *)this + 5);
          if (v63)
          {
            v64 = *(_QWORD *)(v63 + 8);
            if (v64)
            {
              ++*(_DWORD *)(v64 + 8);
              WebCore::Style::Scope::removePendingSheet((WebCore::Document **)v64, a2);
              v65 = *(_DWORD *)(v64 + 8);
              if (!v65)
              {
                __break(0xC471u);
                JUMPOUT(0x1943821A8);
              }
              *(_DWORD *)(v64 + 8) = v65 - 1;
            }
          }
        }
      }
      (*(void (**)(WebCore::Element *, _QWORD))(*(_QWORD *)a2 + 224))(a2, 0);
      if (*(_DWORD *)(v52 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      else
        --*(_DWORD *)(v52 + 8);
      goto LABEL_83;
    }
  }
  *((_BYTE *)this + 1) = 1;
  v76 = WTF::fastMalloc((WTF *)0xD8);
  v51 = (WTF::StringImpl *)v76;
  *(_DWORD *)v76 = 1;
  *(_OWORD *)(v76 + 8) = 0u;
  *(_OWORD *)(v76 + 24) = 0u;
  *(_OWORD *)(v76 + 40) = 0u;
  *(_OWORD *)(v76 + 56) = 0u;
  *(_OWORD *)(v76 + 72) = 0u;
  *(_OWORD *)(v76 + 88) = 0u;
  *(_QWORD *)(v76 + 104) = 0;
  v77 = WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  *(_QWORD *)(v76 + 112) = v77;
  *(_WORD *)(v76 + 120) = 0;
  *(_BYTE *)(v76 + 122) = 1;
  *(_QWORD *)(v76 + 123) = 0;
  *(_BYTE *)(v76 + 131) = 0;
  v78 = v117;
  if (v117)
    *(_DWORD *)v117 += 2;
  *(_QWORD *)(v76 + 136) = v78;
  v79 = v119;
  *(_OWORD *)(v76 + 144) = v118;
  *(_OWORD *)(v76 + 160) = v79;
  v80 = v120;
  if (v120)
    *(_DWORD *)v120 += 2;
  v81 = v121;
  *(_QWORD *)(v76 + 176) = v80;
  *(_QWORD *)(v76 + 184) = v81;
  *(_WORD *)(v76 + 192) = v122;
  *(_QWORD *)(v76 + 200) = 0;
  *(_QWORD *)(v76 + 208) = 0;
  *(_DWORD *)v76 = 2;
  v110 = (WTF::StringImpl *)v76;
  v82 = WTF::fastMalloc((WTF *)0x98);
  LOWORD(v125[0]) = 257;
  WebCore::CSSStyleSheet::CSSStyleSheet(v82, (uint64_t *)&v110, (uint64_t)a2, (WebCore::InlineStyleSheetOwner *)((char *)this + 4), 1, v125);
  if (v110)
  {
    if (*(_DWORD *)v110 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v110, v83);
      WTF::fastFree(v100, v101);
    }
    else
    {
      --*(_DWORD *)v110;
    }
  }
  ++*(_DWORD *)(v82 + 8);
  v86 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v82;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = *(_DWORD *)(v82 + 60);
  if (v87)
    WTF::VectorTypeOperations<WebCore::MQ::MediaQuery>::destruct(*(WTF::StringImpl **)(v82 + 48), (WTF::StringImpl *)(*(_QWORD *)(v82 + 48) + 56 * v87));
  v88 = *(WTF **)(v82 + 48);
  if (v88)
  {
    *(_QWORD *)(v82 + 48) = 0;
    *(_DWORD *)(v82 + 56) = 0;
    WTF::fastFree(v88, v83);
  }
  *(_QWORD *)(v82 + 48) = v123;
  v89 = v124;
  v123 = 0;
  v124 = 0;
  *(_QWORD *)(v82 + 56) = v89;
  if ((*((_BYTE *)a2 + 22) & 0x10) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::Element *))(*(_QWORD *)a2 + 704))(&v110, a2);
    v91 = v110;
    if (v110)
      *(_DWORD *)v110 += 2;
    v92 = *(WTF::StringImpl **)(v82 + 40);
    *(_QWORD *)(v82 + 40) = v91;
    if (v92)
    {
      if (*(_DWORD *)v92 == 2)
      {
        WTF::StringImpl::destroy(v92, v90);
        v91 = v110;
      }
      else
      {
        *(_DWORD *)v92 -= 2;
      }
    }
    v110 = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 2)
        WTF::StringImpl::destroy(v91, v90);
      else
        *(_DWORD *)v91 -= 2;
    }
  }
  WebCore::StyleSheetContents::parseString(v51, (const WTF::String *)a3, v84, v85);
  *((_BYTE *)this + 1) = 0;
  WebCore::StyleSheetContents::checkLoaded((uint64_t)v51, v93);
  if (WebCore::StyleSheetContents::isCacheable(v51))
  {
    v94 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = off_1E3399E80;
    v110 = v94;
    v95 = WebCore::StyleSheetContents::traverseRules((uint64_t)v51, &v110);
    v96 = v110;
    v110 = 0;
    if (v96)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v96 + 8))(v96);
    if ((v95 & 1) == 0)
    {
      {
        WebCore::Style::StyleSheetContentsCache::singleton(void)::cache = 0;
      }
      ++*(_DWORD *)v51;
      v109 = v51;
      WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>&>(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache, (uint64_t)&v116, (_DWORD **)&v109, (uint64_t)&v110);
      v97 = v109;
      ++*((_DWORD *)v109 + 32);
      if (!WebCore::Style::StyleSheetContentsCache::singleton(void)::cache
        || *(_DWORD *)(WebCore::Style::StyleSheetContentsCache::singleton(void)::cache - 12) <= 0x100u)
      {
        v109 = 0;
        goto LABEL_162;
      }
      v103 = WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::random(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache);
      WebCore::StyleSheetContents::removedFromMemoryCache(v103[9]);
      WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::remove(&WebCore::Style::StyleSheetContentsCache::singleton(void)::cache, (WTF::StringImpl *)v103);
      v97 = v109;
      v109 = 0;
      if (v97)
      {
LABEL_162:
        if (*(_DWORD *)v97 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v97, v66);
          WTF::fastFree(v98, v99);
        }
        else
        {
          --*(_DWORD *)v97;
        }
      }
    }
  }
  if (*(_DWORD *)(v82 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  else
    --*(_DWORD *)(v82 + 8);
LABEL_83:
  if (*(_DWORD *)v51 == 1)
  {
    WebCore::StyleSheetContents::~StyleSheetContents(v51, v66);
    WTF::fastFree(v72, v73);
  }
  else
  {
    --*(_DWORD *)v51;
  }
  v67 = v120;
  v120 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v66);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = v117;
  v117 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v66);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = v116;
  v116 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v66);
    else
      *(_DWORD *)v69 -= 2;
  }
  result = (unsigned int *)WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v123, v66);
LABEL_95:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v71);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::StyleSheetContents::checkLoaded(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Node *v5;
  WTF *v6;
  void *v7;
  uint64_t v8;

  v2 = this;
  if (!*(_DWORD *)(this + 68))
  {
LABEL_2:
    ++*(_DWORD *)v2;
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && (this = *(_QWORD *)(v3 + 8)) != 0)
    {
      this = WebCore::StyleSheetContents::checkLoaded((WebCore::StyleSheetContents *)this);
    }
    else if (*(_DWORD *)(v2 + 212))
    {
      v4 = *(_QWORD *)(**(_QWORD **)(v2 + 200) + 96);
      if (v4)
      {
        v5 = *(WebCore::Node **)(v4 + 8);
        if (v5)
        {
          *((_DWORD *)v5 + 6) += 2;
          this = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)v5 + 216))(v5);
          *(_BYTE *)(v2 + 121) = this;
          if ((_DWORD)this)
            this = (*(uint64_t (**)(WebCore::Node *, _QWORD))(*(_QWORD *)v5 + 224))(v5, *(unsigned __int8 *)(v2 + 123));
          if (*((_DWORD *)v5 + 6) == 2)
          {
            if ((*((_WORD *)v5 + 15) & 0x400) == 0)
              this = WebCore::Node::removedLastRef(v5);
          }
          else
          {
            *((_DWORD *)v5 + 6) -= 2;
          }
          goto LABEL_10;
        }
      }
    }
    *(_BYTE *)(v2 + 121) = 1;
LABEL_10:
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)v2, a2);
      return WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v2;
    }
    return this;
  }
  v8 = 0;
  while (1)
  {
    this = WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v2 + 56) + 8 * v8));
    if ((this & 1) != 0)
      return this;
    if (++v8 >= (unint64_t)*(unsigned int *)(v2 + 68))
      goto LABEL_2;
  }
}

void WebCore::UserGestureToken::create(uint64_t *a1, char a2, char a3, uint64_t a4, __int128 *a5, char a6)
{
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  _QWORD v85[3];
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v12 = WTF::fastMalloc((WTF *)0x80);
  v13 = a5[1];
  v86 = *a5;
  v87 = v13;
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = 0;
  v14 = v12 + 48;
  *(_QWORD *)(v12 + 56) = 0;
  *(_BYTE *)(v12 + 64) = a6;
  *(_BYTE *)(v12 + 65) = 0;
  *(_DWORD *)(v12 + 68) = 0;
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
  *(_QWORD *)(v12 + 72) = v15;
  *(_BYTE *)(v12 + 80) = 0;
  v16 = v87;
  *(_OWORD *)(v12 + 96) = v86;
  *(_OWORD *)(v12 + 112) = v16;
  if (!a4)
    goto LABEL_73;
  if (*(_DWORD *)(v12 + 68))
    goto LABEL_73;
  if (*(_BYTE *)(v12 + 16) != 1)
    goto LABEL_73;
  WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v14, a4, (uint64_t)v85);
  v18 = *(_QWORD *)(a4 + 528);
  if (!v18)
    goto LABEL_73;
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
    goto LABEL_73;
  v20 = (unsigned int *)(v19 + 8);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  v22 = *(_QWORD *)(v19 + 56);
  if (v22)
  {
    v61 = *(_QWORD *)(v22 + 8);
    if (v61)
    {
      v62 = (unsigned int *)(v61 + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 + 1, v62));
      while (1)
      {
        v64 = (unsigned int *)(v61 + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 + 1, v64));
        if (*(_BYTE *)(v61 + 144))
        {
          do
          {
            v79 = __ldaxr(v64);
            v68 = --v79 == 0;
          }
          while (__stlxr(v79, v64));
        }
        else
        {
          v66 = *(_QWORD *)(v61 + 296);
          if (v66)
          {
            *(_DWORD *)(v66 + 24) += 2;
            WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v14, v66, (uint64_t)v85);
            if (*(_DWORD *)(v66 + 24) == 2)
            {
              if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v66);
            }
            else
            {
              *(_DWORD *)(v66 + 24) -= 2;
            }
          }
          do
          {
            v67 = __ldaxr(v64);
            v68 = --v67 == 0;
          }
          while (__stlxr(v67, v64));
        }
        if (v68)
        {
          atomic_store(1u, v64);
          v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v75 = off_1E31FE290;
          v75[1] = v64;
          v85[0] = v75;
          WTF::ensureOnMainThread();
          v76 = v85[0];
          v85[0] = 0;
          if (v76)
            (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        }
        v69 = *(_QWORD *)(v61 + 56);
        if (!v69)
          break;
        v61 = *(_QWORD *)(v69 + 8);
        if (!v61)
          goto LABEL_87;
        v71 = (unsigned int *)(v61 + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 + 1, v71));
        v70 = 0;
        do
        {
LABEL_92:
          v73 = __ldaxr(v64);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v64));
        if (!v74)
        {
          atomic_store(1u, v64);
          v77 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v77 = off_1E31FE290;
          v77[1] = v64;
          v85[0] = v77;
          WTF::ensureOnMainThread();
          v78 = v85[0];
          v85[0] = 0;
          if (v78)
            (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        }
        if ((v70 & 1) != 0)
          goto LABEL_9;
      }
      v61 = 0;
LABEL_87:
      v70 = 1;
      goto LABEL_92;
    }
  }
LABEL_9:
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a4 + 192), v17);
  v25 = v23;
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 + 1, v23));
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 48) + 8) + 128) + 8);
  v28 = (unsigned int *)(v27 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  do
  {
    v30 = (unsigned int *)(v27 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    if (!*(_BYTE *)(v27 + 144))
    {
      v32 = *(_QWORD *)(v27 + 296);
      if (v32)
      {
        *(_DWORD *)(v32 + 24) += 2;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v32 + 192), v24);
        v34 = v33;
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 + 1, v33));
        if (WebCore::SecurityOrigin::isSameOriginDomain((WebCore::SecurityOrigin *)v25, (const WebCore::SecurityOrigin *)v33))WTF::WeakHashSet<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Document>(v14, v32, (uint64_t)v85);
      }
      else
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)0xC0, v24);
        v34 = v47;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 + 1, v47));
      }
      if (!v34)
        goto LABEL_24;
      do
      {
        v36 = __ldaxr(v34);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v34));
      if (!v37)
      {
        atomic_store(1u, v34);
        v53 = (WTF::StringImpl *)*((_QWORD *)v34 + 6);
        *((_QWORD *)v34 + 6) = 0;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
            WTF::StringImpl::destroy(v53, v24);
          else
            *(_DWORD *)v53 -= 2;
        }
        v54 = (WTF::StringImpl *)*((_QWORD *)v34 + 5);
        *((_QWORD *)v34 + 5) = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v24);
          else
            *(_DWORD *)v54 -= 2;
        }
        v55 = v34[8];
        if ((_DWORD)v55 != -1)
          ((void (*)(_QWORD *, unsigned int *))off_1E33A88D0[v55])(v85, v34 + 2);
        v34[8] = -1;
        WTF::fastFree((WTF *)v34, v24);
        if (!v32)
          goto LABEL_27;
      }
      else
      {
LABEL_24:
        if (!v32)
        {
          do
          {
LABEL_27:
            v38 = __ldaxr(v30);
            v39 = --v38 == 0;
          }
          while (__stlxr(v38, v30));
          goto LABEL_28;
        }
      }
      if (*(_DWORD *)(v32 + 24) == 2)
      {
        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v32);
      }
      else
      {
        *(_DWORD *)(v32 + 24) -= 2;
      }
      goto LABEL_27;
    }
    do
    {
      v56 = __ldaxr(v30);
      v39 = --v56 == 0;
    }
    while (__stlxr(v56, v30));
LABEL_28:
    if (v39)
    {
      atomic_store(1u, v30);
      v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v49 = off_1E31FE290;
      v49[1] = v30;
      v85[0] = v49;
      WTF::ensureOnMainThread();
      v50 = v85[0];
      v85[0] = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    if (*(_QWORD *)(v27 + 88))
    {
      v27 = *(_QWORD *)(v27 + 88);
LABEL_38:
      v43 = (unsigned int *)(v27 + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
      v42 = 0;
      goto LABEL_41;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8);
    if (v40)
    {
      v27 = *(_QWORD *)(v27 + 72);
      if (v27)
        goto LABEL_38;
      while (1)
      {
        v41 = *(_QWORD *)(v40 + 56);
        if (!v41)
          break;
        v40 = *(_QWORD *)(v41 + 8);
        if (!v40)
          break;
        v27 = *(_QWORD *)(v40 + 72);
        if (v27)
          goto LABEL_38;
      }
    }
    v27 = 0;
    v42 = 1;
    do
    {
LABEL_41:
      v45 = __ldaxr(v30);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v30));
    if (!v46)
    {
      atomic_store(1u, v30);
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v51 = off_1E31FE290;
      v51[1] = v30;
      v85[0] = v51;
      WTF::ensureOnMainThread();
      v52 = v85[0];
      v85[0] = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  while ((v42 & 1) == 0);
  if (v25)
  {
    do
    {
      v57 = __ldaxr(v25);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v25));
    if (!v58)
    {
      atomic_store(1u, v25);
      v82 = (WTF::StringImpl *)*((_QWORD *)v25 + 6);
      *((_QWORD *)v25 + 6) = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
          WTF::StringImpl::destroy(v82, v24);
        else
          *(_DWORD *)v82 -= 2;
      }
      v83 = (WTF::StringImpl *)*((_QWORD *)v25 + 5);
      *((_QWORD *)v25 + 5) = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
          WTF::StringImpl::destroy(v83, v24);
        else
          *(_DWORD *)v83 -= 2;
      }
      v84 = v25[8];
      if ((_DWORD)v84 != -1)
        ((void (*)(_QWORD *, unsigned int *))off_1E33A88D0[v84])(v85, v25 + 2);
      v25[8] = -1;
      WTF::fastFree((WTF *)v25, v24);
    }
  }
  do
  {
    v59 = __ldaxr(v20);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v20));
  if (!v60)
  {
    atomic_store(1u, v20);
    v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v80 = off_1E31FE290;
    v80[1] = v20;
    v85[0] = v80;
    WTF::ensureOnMainThread();
    v81 = v85[0];
    v85[0] = 0;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  }
LABEL_73:
  *a1 = v12;
}

uint64_t WebCore::HTMLElement::title@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = *(_QWORD *)(this + 104);
  if (v2
    && ((v3 = *(_DWORD *)(v2 + 4), (v3 & 1) != 0)
      ? (v4 = *(_QWORD *)(v2 + 40), LODWORD(v5) = *(_DWORD *)(v2 + 52))
      : (v4 = v2 + 32, LODWORD(v5) = v3 >> 5),
        (_DWORD)v5))
  {
    v5 = v5;
    v6 = (_DWORD **)(v4 + 8);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 1);
      if (v7 == WebCore::HTMLNames::titleAttr
        || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
        && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
      {
        break;
      }
      v6 += 2;
      if (!--v5)
      {
        v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v8 = *v6;
  if (v8)
    *v8 += 2;
  *a2 = v8;
  return this;
}

uint64_t WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  WTF *v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v3;
  if (v3 > v2)
  {
    v6 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
LABEL_6:
      v7 = 0;
      *(_DWORD *)(a1 + 8) = 0;
LABEL_7:
      v8 = v7;
LABEL_8:
      *(_DWORD *)(a1 + 12) = 2 * v8;
      goto LABEL_2;
    }
    v9 = *(unsigned int *)(v6 - 4);
    if (!(_DWORD)v9)
      goto LABEL_22;
    v10 = 0;
    v11 = v9 - 1;
    do
    {
      v12 = v6 + 8 * v11;
      if ((unint64_t)(*(_QWORD *)v12 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v12 + 8))
      {
        v22 = a2;
        v24 = a1;
        v20 = v6;
        v21 = v10;
        v19 = v11;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket((uint64_t *)(v6 + 8 * v11), a2);
        v11 = v19;
        v6 = v20;
        a2 = v22;
        a1 = v24;
        v10 = v21 + 1;
      }
    }
    while ((unint64_t)v11--);
    v6 = *(_QWORD *)a1;
    if (v10)
    {
      v16 = v10;
      *(_DWORD *)(v6 - 16) += v10;
      v17 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v18 = *(_DWORD *)(v17 - 12);
      else
        v18 = 0;
      *(_DWORD *)(v17 - 12) = v18 - v16;
      v6 = *(_QWORD *)a1;
    }
    if (!v6)
      goto LABEL_6;
    v14 = *(_DWORD *)(v6 - 4);
    if (v14 < 9 || 6 * *(_DWORD *)(v6 - 12) >= v14)
    {
LABEL_22:
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      v23 = a2;
      v25 = a1;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)a1);
      a2 = v23;
      a1 = v25;
      v6 = *(_QWORD *)v25;
      *(_DWORD *)(v25 + 8) = 0;
      if (!v6)
      {
        v7 = 0;
        goto LABEL_7;
      }
    }
    v7 = *(_DWORD *)(v6 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_2:
  v4 = (WTF *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v4 && *((_QWORD *)v4 + 1))
    return WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a1, v4);
  else
    return 0;
}

_QWORD *WebCore::Document::didRemoveAllPendingStylesheet(WebCore::Document *this, WTF::StringImpl *a2)
{
  _QWORD *result;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  result = (_QWORD *)*((_QWORD *)this + 91);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if (result)
    {
      v4 = result;
      ++*((_DWORD *)result + 2);
      if ((result[8] & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((result[8] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 176))(result);
        if ((_DWORD)result)
        {
          v4[7] = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
          result = (_QWORD *)WebCore::TimerBase::setNextFireTime((uint64_t)(v4 + 4), v5 + 0.0);
        }
      }
      if (*((_DWORD *)v4 + 2) == 1)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
      else
        --*((_DWORD *)v4 + 2);
    }
  }
  if (*((_BYTE *)this + 3396))
  {
    v6 = *((_QWORD *)this + 66);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 288))
        {
          v8 = WebCore::Document::eventLoop(this, a2);
          *((_DWORD *)this + 6) += 2;
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = &off_1E33A36B0;
          v9[1] = this;
          v9[2] = this;
          v10 = v9;
          WebCore::EventLoopTaskGroup::queueTask(v8, 11, (uint64_t *)&v10);
          result = v10;
          v10 = 0;
          if (result)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Style::Scope::didRemovePendingStylesheet(WebCore::Document **this)
{
  uint64_t result;
  WTF::StringImpl *v3;
  double v4;

  result = WebCore::Style::Scope::hasPendingSheets((WebCore::Style::Scope *)this);
  if ((result & 1) == 0)
  {
    if (!*((_BYTE *)this + 233))
    {
      *((_WORD *)this + 116) = 256;
      if (this[3])
        *(_BYTE *)(*((_QWORD *)this[2] + 166) + 234) = 1;
    }
    if (((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)(((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      this[13] = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      result = WebCore::TimerBase::setNextFireTime((uint64_t)(this + 10), v4 + 0.0);
    }
    if (!this[3])
      return (uint64_t)WebCore::Document::didRemoveAllPendingStylesheet(this[2], v3);
  }
  return result;
}

double WebCore::HTMLStyleElement::notifyLoadedSheetAndAllCriticalSubresources(WebCore::HTMLStyleElement *this, char a2)
{
  WebCore::HTMLStyleElement *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;

  v2 = this;
  *((_BYTE *)this + 160) = a2 ^ 1;
  {
    if ((a2 & 1) != 0)
      goto LABEL_3;
LABEL_11:
    v6 = (WTF::StringImpl **)(WebCore::eventNames(this) + 1104);
    return WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, v2, v6);
  }
  this = (WebCore::HTMLStyleElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*((_BYTE *)v2 + 160))
    goto LABEL_11;
LABEL_3:
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
    v4 = WebCore::threadGlobalDataSlow(this);
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
    v5 = *(_QWORD *)(v4 + 40);
  }
  v6 = (WTF::StringImpl **)(v5 + 784);
  return WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, v2, v6);
}

uint64_t WebCore::eventNames(WebCore *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v1 = WTF::Thread::initializeCurrentTLS(this);
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
      goto LABEL_3;
  }
  v2 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v2 + 8) = 1;
  v4 = (unsigned int *)(v2 + 8);
  *(_QWORD *)v2 = off_1E31F4A70;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v5 = 0;
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v2 = off_1E3407108;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 28) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *(_WORD *)(v6 + 24) = 0;
  if (WTF::isUIThread((WTF *)v6))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v6, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v2 + 48) = v6;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_BYTE *)(v2 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v2;
    do
      v7 = __ldaxr(v4);
    while (__stlxr(v7 + 1, v4));
  }
  v8 = *(unsigned int **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = v2;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
LABEL_3:
  result = *(_QWORD *)(v2 + 40);
  if (!result)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v2);
    return *(_QWORD *)(v2 + 40);
  }
  return result;
}

uint64_t WebCore::HTMLStyleElement::sheetLoaded(WebCore::HTMLStyleElement *this)
{
  WebCore::HTMLStyleElement *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v8;

  if (*((_BYTE *)this + 113))
    return 0;
  v1 = this;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (*(_DWORD *)(v3 + 68))
    {
      v8 = 0;
      while ((WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v3 + 56) + 8 * v8)) & 1) == 0)
      {
        ++v8;
        v1 = this;
        if (v8 >= *(unsigned int *)(v3 + 68))
          goto LABEL_4;
      }
      return 0;
    }
  }
LABEL_4:
  v4 = *((_QWORD *)v1 + 19);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 8);
      WebCore::Style::Scope::removePendingSheet((WebCore::Document **)v5, v1);
      v6 = *(_DWORD *)(v5 + 8);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x19438320CLL);
      }
      *(_DWORD *)(v5 + 8) = v6 - 1;
    }
  }
  return 1;
}

double WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  WTF *v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF::StringImpl *v33;

  v5 = a1;
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_BYTE *)(v17 + 32) = 0;
    v18 = a2[2];
    a2[2] = v18 & 0xFFFF000000000000 | v17;
    a1 = v18 & 0xFFFFFFFFFFFFLL;
    if ((v18 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)a1);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)a1));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)a1);
        v21 = *(unsigned int *)(a1 + 28);
        if ((_DWORD)v21)
        {
          v31 = a1;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(_QWORD *)(a1 + 16) + 32 * v21));
          a1 = v31;
        }
        v22 = *(WTF **)(a1 + 16);
        if (v22)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
          v30 = a1;
          WTF::fastFree(v22, a2);
          a1 = v30;
        }
        a1 = WTF::fastFree((WTF *)a1, a2);
      }
    }
  }
  v6 = (unsigned int *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v32 = (WTF *)v6;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v33 = v8;
  v9 = *(unsigned int *)(v5 + 68);
  if ((_DWORD)v9 == *(_DWORD *)(v5 + 64))
  {
    v23 = (uint64_t *)WTF::Vector<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 56, v9 + 1, (unint64_t)&v32);
    v24 = *(unsigned int *)(v5 + 68);
    v25 = (_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v24);
    v26 = *v23;
    *v23 = 0;
    *v25 = v26;
    v27 = v23[1];
    v23[1] = 0;
    v25[1] = v27;
    a1 = (uint64_t)v33;
    *(_DWORD *)(v5 + 68) = v24 + 1;
    v33 = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
        a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)a1 -= 2;
    }
  }
  else
  {
    v10 = *(_QWORD *)(v5 + 56);
    v32 = 0;
    v11 = (unsigned int **)(v10 + 16 * v9);
    *v11 = v6;
    v11[1] = (unsigned int *)v8;
    *(_DWORD *)(v5 + 68) = v9 + 1;
    v33 = 0;
  }
  v12 = v32;
  v32 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
    {
      atomic_store(1u, (unsigned int *)v12);
      v28 = *((unsigned int *)v12 + 7);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v12 + 2), (WTF::StringImpl *)(*((_QWORD *)v12 + 2) + 32 * v28));
      v29 = (WTF *)*((_QWORD *)v12 + 2);
      if (v29)
      {
        *((_QWORD *)v12 + 2) = 0;
        *((_DWORD *)v12 + 6) = 0;
        WTF::fastFree(v29, a2);
      }
      a1 = WTF::fastFree(v12, a2);
    }
  }
  if ((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(v5 + 24) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    WebCore::TimerBase::setNextFireTime(v5, v15 + 0.0);
  }
  return result;
}

BOOL WebCore::HTMLDocumentParser::hasScriptsWaitingForStylesheets(WebCore::HTMLDocumentParser *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 409);
  return v1 && *(_BYTE *)(v1 + 60) != 0;
}

uint64_t WTF::Vector<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = (WTF *)((char *)v5 + 16 * *(unsigned int *)(result + 12));
    v11 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    WTF::VectorMover<false,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask>::move((uint64_t)v5, v10, v11);
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

double WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  double result;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF::StringImpl *v33;

  v5 = a1;
  if ((a2[2] & 0xFFFFFFFFFFFFLL) == 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v22 = 1;
    *(_QWORD *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 8) = a2;
    *(_BYTE *)(v22 + 32) = 0;
    v23 = a2[2];
    a2[2] = v23 & 0xFFFF000000000000 | v22;
    a1 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v24 = __ldaxr((unsigned int *)a1);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unsigned int *)a1));
      if (!v25)
      {
        atomic_store(1u, (unsigned int *)a1);
        v26 = *(unsigned int *)(a1 + 28);
        if ((_DWORD)v26)
        {
          v31 = a1;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(a1 + 16), (WTF::StringImpl *)(*(_QWORD *)(a1 + 16) + 32 * v26));
          a1 = v31;
        }
        v27 = *(WTF **)(a1 + 16);
        if (v27)
        {
          *(_QWORD *)(a1 + 16) = 0;
          *(_DWORD *)(a1 + 24) = 0;
          v30 = a1;
          WTF::fastFree(v27, a2);
          a1 = v30;
        }
        a1 = WTF::fastFree((WTF *)a1, a2);
      }
    }
  }
  v6 = (unsigned int *)(a2[2] & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v32 = (WTF *)v6;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v33 = v8;
  v9 = *(unsigned int *)(v5 + 68);
  if ((_DWORD)v9 == *(_DWORD *)(v5 + 64))
  {
    v10 = (uint64_t *)WTF::Vector<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 56, v9 + 1, (unint64_t)&v32);
    v11 = *(unsigned int *)(v5 + 68);
    v12 = (_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v11);
    v13 = *v10;
    *v10 = 0;
    *v12 = v13;
    v14 = v10[1];
    v10[1] = 0;
    v12[1] = v14;
    a1 = (uint64_t)v33;
    *(_DWORD *)(v5 + 68) = v11 + 1;
    v33 = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
        a1 = WTF::StringImpl::destroy((WTF::StringImpl *)a1, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)a1 -= 2;
    }
  }
  else
  {
    v20 = *(_QWORD *)(v5 + 56);
    v32 = 0;
    v21 = (unsigned int **)(v20 + 16 * v9);
    *v21 = v6;
    v21[1] = (unsigned int *)v8;
    *(_DWORD *)(v5 + 68) = v9 + 1;
    v33 = 0;
  }
  v15 = v32;
  v32 = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v28 = *((unsigned int *)v15 + 7);
      if ((_DWORD)v28)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v28));
      v29 = (WTF *)*((_QWORD *)v15 + 2);
      if (v29)
      {
        *((_QWORD *)v15 + 2) = 0;
        *((_DWORD *)v15 + 6) = 0;
        WTF::fastFree(v29, a2);
      }
      a1 = WTF::fastFree(v15, a2);
    }
  }
  if ((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(v5 + 24) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    WebCore::TimerBase::setNextFireTime(v5, v18 + 0.0);
  }
  return result;
}

double WebCore::HTMLLinkElement::notifyLoadedSheetAndAllCriticalSubresources(WebCore::HTMLLinkElement *this, int a2)
{
  WebCore::HTMLLinkElement *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;

  v2 = this;
  if (a2)
    v3 = 0;
  else
    v3 = 4;
  *((_BYTE *)this + 291) = *((_BYTE *)this + 291) & 0xFB | v3;
  {
    if ((a2 & 1) != 0)
      goto LABEL_6;
LABEL_14:
    v7 = (WTF::StringImpl **)(WebCore::eventNames(this) + 1104);
    return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v2, v7);
  }
  this = (WebCore::HTMLLinkElement *)WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if ((*((_BYTE *)v2 + 291) & 4) != 0)
    goto LABEL_14;
LABEL_6:
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = (WTF::StringImpl **)(v6 + 784);
  return WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchEventSoon((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v2, v7);
}

uint64_t WTF::Vector<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t *)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = (_QWORD *)v11;
      v14 = (uint64_t *)v5;
      do
      {
        v15 = *v14;
        *v14 = 0;
        *v13 = v15;
        v16 = v14[1];
        v14[1] = 0;
        v13[1] = v16;
        v14 = WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::DispatchTask::~DispatchTask(v14, v12)+ 2;
        v13 += 2;
      }
      while (v14 != (uint64_t *)((char *)v5 + 16 * v10));
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

BOOL `non-virtual thunk to'WebCore::MediaQueryList::virtualHasPendingActivity(WebCore::MediaQueryList *this)
{
  return *((_BYTE *)this + 61) && *((_QWORD *)this + 3) != 0;
}

uint64_t WebCore::ResourceResponseBase::isHTTP09(WebCore::ResourceResponseBase *this)
{
  uint64_t result;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  result = *((_QWORD *)this + 9);
  if (result)
    return WTF::StringImpl::startsWith();
  return result;
}

uint64_t WebCore::IPAddress::isolatedCopy@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(this + 16);
  if (v2 == 1)
  {
    *a2 = *(_DWORD *)this;
LABEL_3:
    a2[4] = v2;
    return this;
  }
  if (v2 == 2)
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    goto LABEL_3;
  }
  this = 131;
  __break(0xC471u);
  return this;
}

unsigned int *WebCore::FocusController::setActiveInternal(unsigned int *this, WebCore::Document *a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  int32x4_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160);
  if (v2)
    v3 = *(_BYTE *)(v2 + 144) == 0;
  else
    v3 = 0;
  if (v3)
  {
    v5 = this;
    v6 = (unsigned int *)(v2 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v8 = *(int32x4_t **)(v2 + 288);
    if (v8)
    {
      v9 = v8->i32[2];
      v8->i32[2] = v9 + 1;
      if (!v8[2].i64[1])
      {
        WebCore::LocalFrameView::updateLayoutAndStyleIfNeededRecursive(v8, 0);
        WebCore::LocalFrameView::updateControlTints(v8);
        v9 = v8->i32[2] - 1;
      }
      if (v9)
        v8->i32[2] = v9;
      else
        (*(void (**)(int32x4_t *))(v8->i64[0] + 8))(v8);
    }
    v10 = *((_QWORD *)v5 + 2);
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0 && !*(_BYTE *)(v11 + 144)
      || (v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 1) + 8) + 160), !*(_BYTE *)(v11 + 144)))
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      WebCore::FrameSelection::pageActivationChanged(*(WebCore::FrameSelection **)(*(_QWORD *)(v11 + 296) + 3064), a2);
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v12);
      v10 = *((_QWORD *)v5 + 2);
    }
    if (v10)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 144) && (*((_WORD *)v5 + 13) & 2) != 0)
        {
          v15 = *(_QWORD *)(v14 + 296);
          if (v15)
          {
            *(_DWORD *)(v15 + 24) += 2;
            WebCore::dispatchEventsOnWindowAndFocusedElement((unsigned int *)v15, a2);
            if (*(_DWORD *)(v15 + 24) == 2)
            {
              if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v15, v16);
            }
            else
            {
              *(_DWORD *)(v15 + 24) -= 2;
            }
          }
          else
          {
            WebCore::dispatchEventsOnWindowAndFocusedElement(0, a2);
          }
        }
      }
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v6);
  }
  return this;
}

uint64_t WebCore::FocusController::focusedOrMainFrame(WebCore::FocusController *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (!v1 || (v2 = *(_QWORD *)(v1 + 8)) == 0 || *(_BYTE *)(v2 + 144))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 160);
    if (*(_BYTE *)(v2 + 144))
      return 0;
  }
  return v2;
}

void WebCore::LocalFrameView::updateControlTints(int32x4_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char isCountingRelevantRepaintedObjects;
  char v8;
  WebCore::RenderObject *v9;
  uint64_t *v10;

  v1 = this[20].i64[1];
  v2 = *(_QWORD *)(v1 + 296);
  v3 = *(_QWORD *)(v2 + 736);
  if (!v3 || !*(_DWORD *)(v3 + 4))
    return;
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      isCountingRelevantRepaintedObjects = WebCore::Page::isCountingRelevantRepaintedObjects(*(WebCore::Page **)(v5 + 8));
      *(_BYTE *)(v6 + 768) = 0;
      v2 = *(_QWORD *)(this[20].i64[1] + 296);
      if (!v2)
      {
        if (WebCore::LocalFrameView::hasCustomScrollbars((WebCore::LocalFrameView *)this))
          WebCore::LocalFrameView::traverseForPaintInvalidation(this, 1);
        goto LABEL_15;
      }
      v8 = 0;
      goto LABEL_10;
    }
    isCountingRelevantRepaintedObjects = 0;
  }
  else
  {
    isCountingRelevantRepaintedObjects = 0;
    v6 = 0;
  }
  v8 = 1;
LABEL_10:
  v9 = *(WebCore::RenderObject **)(v2 + 1944);
  if (v9
    && (v10 = WebCore::RenderObject::theme(v9), ((*(uint64_t (**)(uint64_t *))(*v10 + 160))(v10) & 1) != 0)
    || (WebCore::LocalFrameView::hasCustomScrollbars((WebCore::LocalFrameView *)this) & 1) != 0)
  {
    WebCore::LocalFrameView::traverseForPaintInvalidation(this, 1);
  }
  if ((v8 & 1) == 0)
LABEL_15:
    *(_BYTE *)(v6 + 768) = isCountingRelevantRepaintedObjects;
}

void WebCore::FrameSelection::pageActivationChanged(WebCore::FrameSelection *this, WebCore::Document *a2)
{
  uint64_t v3;
  int isPageActive;
  int v5;
  uint64_t v6;
  void *v7;
  __int16 v8;
  void *v9;
  uint64_t v10[2];

  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  isPageActive = WebCore::isPageActive(v3, a2);
  v5 = isPageActive;
  v6 = *(_QWORD *)(v3 + 1248);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  WebCore::invalidateFocusedElementAndShadowIncludingAncestors(v10, (WebCore::Element *)v6, isPageActive & ((*((_WORD *)this + 128) & 4) >> 2));
  if (v5)
    v8 = 8;
  else
    v8 = 0;
  *((_WORD *)this + 128) = *((_WORD *)this + 128) & 0xFFF7 | v8;
  WTF::Vector<WebCore::Style::PseudoClassChangeInvalidation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
  WebCore::FrameSelection::focusedOrActiveStateChanged(this);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v9);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
}

uint64_t WebCore::isPageActive(uint64_t this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (this)
  {
    v2 = *(_QWORD *)(this + 528);
    if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 24)) != 0 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      return *(_WORD *)(*(_QWORD *)(v5 + 72) + 26) & 1;
    else
      return 0;
  }
  return this;
}

void WebCore::FrameSelection::focusedOrActiveStateChanged(WebCore::FrameSelection *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 4);
  if ((*((_WORD *)this + 128) & 4) == 0)
  {
    if (!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
    {
      WebCore::Document::updateStyleIfNeeded(0);
      WebCore::FrameSelection::setCaretVisible(this, 0);
      return;
    }
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 8)) == 0 || (v6 = *(_QWORD *)(v5 + 24)) == 0 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_9:
    v8 = 0;
    goto LABEL_10;
  }
  v8 = *(_WORD *)(*(_QWORD *)(v7 + 72) + 26) & 1;
LABEL_10:
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v3);
  if ((v8 & 1) != 0)
    WebCore::FrameSelection::setSelectionFromNone((uint64_t)this);
  WebCore::FrameSelection::setCaretVisible(this, v8);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
}

uint64_t WebCore::RenderView::pushMappingToContainer(WebCore::RenderView *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  const WebCore::LayoutSize *v16;
  WebCore::RenderGeometryMap *v17;
  const WebCore::RenderView *v18;
  const WebCore::TransformationMatrix *v19;
  WebCore::RenderView *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _OWORD v25[8];

  v6 = *((_QWORD *)this + 31);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 328) + 136) + 704) & 0x1000) != 0)
  {
    v10 = WebCore::LocalFrameView::scrollPositionForFixedPosition((int32x2_t *)v6);
    v13 = v10 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (*(_BYTE *)(v6 + 1176))
      v7 = *(_QWORD *)(v6 + 1180);
    else
      v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 + 64) + 832))(v6 + 64, 0, 1);
    v8 = HIDWORD(v7);
    v9 = (_DWORD)v7 << 6;
    if ((int)v7 < -33554432)
      v9 = 0x80000000;
    if ((int)v7 <= 0x1FFFFFF)
      LODWORD(v10) = v9;
    else
      LODWORD(v10) = 0x7FFFFFFF;
    v11 = v8 << 38;
    if ((int)v8 < -33554432)
      v11 = 0x8000000000000000;
    v12 = (int)v8 <= 0x1FFFFFF;
    v13 = 0x7FFFFFFF00000000;
    if (v12)
      v13 = v11;
  }
  v14 = v13 | v10;
  if (a2)
    goto LABEL_17;
  v15 = *((_DWORD *)this + 5);
  if ((v15 & 0x20000) == 0)
    goto LABEL_17;
  v21 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v21 = *(WebCore::RenderView **)(*((_QWORD *)this + 4) + 8);
  v22 = *((_QWORD *)v21 + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 40) + 20)
    || (v23 = *(_QWORD **)(v22 + 40), v23[41])
    || v23[38]
    || v23[39]
    || v23[40]
    || (v15 & 0x100000) != 0)
  {
    v25[5] = unk_1969FD278;
    v25[6] = xmmword_1969FD288;
    v25[7] = unk_1969FD298;
    v25[0] = xmmword_1969FD228;
    v25[1] = unk_1969FD238;
    v25[2] = xmmword_1969FD248;
    memset(&v25[3], 0, 32);
    v24 = 0;
    WebCore::RenderObject::getTransformFromContainer(this, (const WebCore::LayoutSize *)&v24, (WebCore::TransformationMatrix *)v25);
    v24 = v14;
    v16 = (const WebCore::LayoutSize *)&v24;
    v19 = (const WebCore::TransformationMatrix *)v25;
    v17 = a3;
    v18 = this;
  }
  else
  {
LABEL_17:
    *(_QWORD *)&v25[0] = v14;
    v16 = (const WebCore::LayoutSize *)v25;
    v17 = a3;
    v18 = this;
    v19 = 0;
  }
  WebCore::RenderGeometryMap::pushView(v17, v18, v16, v19);
  return 0;
}

unint64_t WebCore::LocalFrameView::scrollPositionForFixedPosition(int32x2_t *this)
{
  int32x2_t v1;
  int32x2_t *v2;
  uint64_t v3;
  void *v4;
  WebCore::ScrollableArea *v6;
  int32x2_t v8;
  unint64_t v9;
  int8x8_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int8x8_t v13;
  int32x2_t v14;
  int8x8_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::LayoutPoint *v20;
  int v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  const CGRect *v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  int32x2_t v30[2];
  CGRect v31;

  v1 = this[41];
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v1 + 136) + 704) & 0x1000) != 0)
  {
    if (this[138].i8[0])
    {
      v2 = this + 136;
    }
    else
    {
      v2 = this + 135;
      v3 = *(_QWORD *)(*(_QWORD *)&v1 + 296);
      if (!v3 || !*(_QWORD *)(v3 + 1944))
      {
        v4 = (void *)this[5];
        if (v4)
        {
          if (objc_msgSend(*(id *)&this[5], "conformsToProtocol:", &unk_1EE342188))
            v4 = (void *)objc_msgSend(v4, "superview");
          objc_msgSend(v4, "frame");
          v31.origin.x = v22;
          v31.origin.y = v23;
          v31.size.width = v24;
          v31.size.height = v25;
          WebCore::enclosingIntRect(&v31, v26);
        }
      }
    }
    return (unint64_t)*v2;
  }
  else
  {
    v6 = (WebCore::ScrollableArea *)&this[8];
    v30[0] = (int32x2_t)(*(uint64_t (**)(int32x2_t *, _QWORD, _QWORD))(*(_QWORD *)&this[8] + 832))(this + 8, 0, 0);
    v30[1] = v8;
    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v31, v30);
    v9 = WebCore::ScrollableArea::totalContentsSize(v6);
    v10 = (int8x8_t)vcgt_s32((int32x2_t)v9, (int32x2_t)0xFE000000FE000000);
    v29 = vorr_s8((int8x8_t)(*(_QWORD *)&v10 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, (int32x2_t)v9), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32((int32x2_t)v9, 6uLL)), v10));
    v11 = (int32x2_t)(*(uint64_t (**)(WebCore::ScrollableArea *, _QWORD, uint64_t))(*(_QWORD *)v6 + 832))(v6, 0, 1);
    v12 = (int8x8_t)vcgt_s32(v11, (int32x2_t)0xFE000000FE000000);
    v13 = vorr_s8((int8x8_t)(*(_QWORD *)&v12 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v11), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v11, 6uLL)), v12));
    v14 = this[12];
    v15 = (int8x8_t)vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
    v27 = vorr_s8((int8x8_t)(*(_QWORD *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v14, 6uLL)), v15));
    v28 = v13;
    v16 = WebCore::LocalFrameView::frameScaleFactor((WebCore::LocalFrameView *)this);
    v17 = *(_QWORD *)(*(_QWORD *)&this[41] + 136);
    v18 = (*(_QWORD *)(v17 + 680) >> 4) & 1;
    v19 = (*(_QWORD *)(v17 + 664) >> 38) & 1;
    v20 = (WebCore::LayoutPoint *)WebCore::FrameView::headerHeight((WebCore::FrameView *)this);
    v21 = WebCore::FrameView::footerHeight((WebCore::FrameView *)this);
    return WebCore::LocalFrameView::scrollPositionForFixedPosition((WebCore::ScrollableArea *)&v31, (WebCore::LayoutRect *)&v29, (const WebCore::LayoutSize *)&v28, (const WebCore::LayoutPoint *)&v27, v18, v19, v20, v21, v16);
  }
}

WTF *WebCore::RenderGeometryMap::pushView(WebCore::RenderGeometryMap *this, const WebCore::RenderView *a2, const WebCore::LayoutSize *a3, const WebCore::TransformationMatrix *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unsigned int v14;
  WTF *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  void *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[32];

  v7 = (uint64_t *)((char *)this + 24);
  v8 = *(_QWORD *)this;
  memset(&v35[8], 0, 19);
  *(_QWORD *)v35 = a2;
  v35[27] = a4 != 0;
  v9 = *((unsigned int *)this + 9);
  if ((_DWORD)v9 == *((_DWORD *)this + 8))
  {
    v10 = (_BYTE *)WTF::Vector<WebCore::RenderGeometryMapStep,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v9 + 1, (unint64_t)v35);
    LODWORD(v9) = *((_DWORD *)this + 9);
  }
  else
  {
    v10 = v35;
  }
  v11 = *((_QWORD *)this + 3);
  v12 = (_QWORD *)(v11 + 32 * v8);
  memmove(v12 + 4, v12, v11 + 32 * v9 - (_QWORD)v12);
  *v12 = *(_QWORD *)v10;
  v12[1] = *((_QWORD *)v10 + 1);
  v12[2] = 0;
  *((_DWORD *)v12 + 6) = *((_DWORD *)v10 + 6);
  v14 = *((_DWORD *)this + 9) + 1;
  *((_DWORD *)this + 9) = v14;
  result = *(WTF **)&v35[16];
  *(_QWORD *)&v35[16] = 0;
  if (result)
  {
    result = (WTF *)WTF::fastFree(result, v13);
    v14 = *((_DWORD *)this + 9);
  }
  v16 = *(_QWORD *)this;
  if (*(_QWORD *)this >= (unint64_t)v14)
  {
    __break(0xC471u);
  }
  else
  {
    v17 = *v7;
    v18 = (_QWORD *)(v17 + 32 * v16);
    v18[1] = *(_QWORD *)a3;
    v19 = v18 + 1;
    if (a4)
    {
      v28 = (_OWORD *)WTF::fastMalloc((WTF *)0x80);
      v29 = *((_OWORD *)a4 + 3);
      v31 = *(_OWORD *)a4;
      v30 = *((_OWORD *)a4 + 1);
      v28[2] = *((_OWORD *)a4 + 2);
      v28[3] = v29;
      *v28 = v31;
      v28[1] = v30;
      v32 = *((_OWORD *)a4 + 7);
      v34 = *((_OWORD *)a4 + 4);
      v33 = *((_OWORD *)a4 + 5);
      v28[6] = *((_OWORD *)a4 + 6);
      v28[7] = v32;
      v28[4] = v34;
      v28[5] = v33;
      result = (WTF *)v18[2];
      v18[2] = v28;
      if (result)
        result = (WTF *)WTF::fastFree(result, v27);
    }
    if (*(_BYTE *)(*v18 + 46) != 49)
    {
      v20 = *((_DWORD *)this + 266);
      v21 = v20 + *v19;
      if (__OFADD__(v20, *v19))
        v21 = (v20 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 266) = v21;
      v22 = *((_DWORD *)this + 267);
      v23 = *(_DWORD *)(v17 + 32 * v16 + 12);
      v24 = __OFADD__(v22, v23);
      v25 = v22 + v23;
      if (v24)
        v25 = (v22 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 267) = v25;
    }
    v26 = v17 + 32 * v16;
    if (*(_BYTE *)(v26 + 25))
      ++*((_DWORD *)this + 2);
    if (*(_QWORD *)(v26 + 16))
      ++*((_DWORD *)this + 3);
    if (*(_BYTE *)(v17 + 32 * v16 + 26))
      ++*((_DWORD *)this + 4);
  }
  return result;
}

const char *WebCore::provideNotification(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  const char *result;
  const char *v6;

  if (a1)
    v3 = (uint64_t *)(a1 + 8);
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E3364678;
  *(_QWORD *)(v4 + 8) = a2;
  v6 = (const char *)v4;
  WebCore::Supplement<WebCore::Page>::provideTo(v3, "NotificationController", (unsigned __int8 *)0x17, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

const char *WebCore::provideGeolocationTo(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const char *result;
  const char *v4;
  const char *v5;

  v2 = (uint64_t *)(a1 + 8);
  std::make_unique[abi:sn180100]<WebCore::GeolocationController,WebCore::Page &,WebCore::GeolocationClient &>((uint64_t *)&v4, a1, a2);
  v5 = v4;
  WebCore::Supplement<WebCore::Page>::provideTo(v2, "GeolocationController", (unsigned __int8 *)0x16, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WebCore::Page::addActivityStateChangeObserver(uint64_t a1, uint64_t a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::ActivityStateChangeObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ActivityStateChangeObserver>(a1 + 976, a2, (uint64_t)v3);
}

unsigned int *WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(unsigned int *result, uint64_t a2)
{
  unsigned int **v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  if (!*(_QWORD *)result)
  {
    v3 = (unsigned int **)result;
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    result = *v3;
    *v3 = (unsigned int *)v5;
    if (result)
    {
      do
      {
        v6 = __ldaxr(result);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, result));
      if (!v7)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

const char *WebCore::provideMediaKeySystemTo(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const char *result;
  const char *v4;
  const char *v5;

  v2 = (uint64_t *)(a1 + 8);
  std::make_unique[abi:sn180100]<WebCore::MediaKeySystemController,WebCore::MediaKeySystemClient &>(&v4, a2);
  v5 = v4;
  WebCore::Supplement<WebCore::Page>::provideTo(v2, "MediaKeySystemController", (unsigned __int8 *)0x19, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

const char *WebCore::provideUserMediaTo(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  const char *result;
  const char *v6;

  if (a1)
    v3 = (uint64_t *)(a1 + 8);
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v4 = off_1E33623B0;
  *(_QWORD *)(v4 + 8) = a2;
  v6 = (const char *)v4;
  WebCore::Supplement<WebCore::Page>::provideTo(v3, "UserMediaController", (unsigned __int8 *)0x14, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::CSSPropertyParser::consumeTransformOrigin(WebCore::CSSPropertyParser *this, int a2)
{
  BOOL v2;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int *v11;
  WTF::StringImpl *v12;
  int *v13;
  WTF::StringImpl *v14;
  int *v15;
  int *v17;
  _DWORD *v18;
  int *v19;
  int *v20;
  unsigned __int8 v21;

  WebCore::CSSPropertyParserHelpers::consumeOneOrTwoValuedPositionCoordinates((uint64_t *)this, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 1, (uint64_t)&v19);
  v6 = v21;
  if (v21)
  {
    WebCore::CSSParserTokenRange::consumeWhitespace((__int128 **)this);
    v7 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 1);
    WebCore::CSSPropertyParserHelpers::consumeLength((uint64_t)this, *(unsigned __int8 *)(*((_QWORD *)this + 2) + 48), 0, 1, &v18);
    v9 = v18;
    if (v18 || v7 == v8)
    {
      v10 = *((_QWORD *)this + 1);
      v2 = *(_QWORD *)this == v10;
      if (*(_QWORD *)this == v10)
      {
        v11 = v19;
        v19 = 0;
        v17 = v11;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 275, 537, &v17, a2, 0);
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v12);
          else
            *v17 -= 2;
        }
        v13 = v20;
        v20 = 0;
        v17 = v13;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 276, 537, &v17, a2, 0);
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v14);
          else
            *v17 -= 2;
        }
        v15 = v18;
        if (v18)
          *v18 += 2;
        v17 = v15;
        WebCore::CSSPropertyParser::addProperty((uint64_t)this, 277, 537, &v17, a2, 0);
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v5);
          else
            *v17 -= 2;
        }
        v9 = v18;
      }
      v18 = 0;
      if (v9)
      {
        if (*v9 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v9, v5);
        else
          *v9 -= 2;
      }
    }
    else
    {
      v2 = 0;
    }
  }
  std::optional<WebCore::CSSPropertyParserHelpers::PositionCoordinates>::~optional((uint64_t)&v19, v5);
  return (v6 != 0) & v2;
}

uint64_t std::optional<WebCore::CSSPropertyParserHelpers::PositionCoordinates>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(_DWORD **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*v3 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
      else
        *v3 -= 2;
    }
    v4 = *(_DWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*v4 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
      else
        *v4 -= 2;
    }
  }
  return a1;
}

_DWORD *WebCore::CSSPropertyParserHelpers::consumeOneOrTwoValuedPositionCoordinates@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _DWORD *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::CSSPrimitiveValue *v11;
  WebCore::CSSPrimitiveValue *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  WebCore::CSSPrimitiveValue *v16;
  _QWORD v17[2];
  WebCore::CSSPrimitiveValue *v18;
  WebCore::CSSPrimitiveValue *v19;

  result = WebCore::CSSPropertyParserHelpers::consumePositionComponent((uint64_t *)&v19, a1, a2, a3, 0);
  if (v19)
  {
    WebCore::CSSPropertyParserHelpers::consumePositionComponent((uint64_t *)&v18, a1, a2, a3, 0);
    if (v18)
    {
      WebCore::CSSPropertyParserHelpers::positionFromTwoValues((WebCore::CSSPropertyParserHelpers *)a4, v19, v18);
    }
    else
    {
      v12 = v19;
      v13 = (*((_WORD *)v19 + 2) & 0x7F) == 80;
      v14 = (*((_WORD *)v19 + 4) & 0xFFFE) == 254;
      v15 = !v13 || !v14;
      if (v13 && v14)
        v16 = (WebCore::CSSPrimitiveValue *)&WebCore::staticCSSValuePool[4128];
      else
        v16 = v19;
      if (v15)
        v12 = (WebCore::CSSPrimitiveValue *)&WebCore::staticCSSValuePool[4128];
      *(_DWORD *)v16 += 2;
      *(_DWORD *)v12 += 2;
      v17[0] = 0;
      v17[1] = 0;
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v12;
      *(_BYTE *)(a4 + 16) = 1;
      WebCore::CSSPropertyParserHelpers::PositionCoordinates::~PositionCoordinates((WebCore::CSSPropertyParserHelpers::PositionCoordinates *)v17, v9);
    }
    v11 = v18;
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v10);
      else
        *result -= 2;
    }
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  return result;
}

__int128 *WebCore::CSSPropertyParserHelpers::consumePositionComponent(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  int v5;
  __int128 *v6;
  int v8;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = a5;
  v6 = (__int128 *)*a2;
  if (*a2 >= (unint64_t)a2[1])
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      v11 = a2;
      v12 = a1;
      v10 = a3;
      v8 = a4;
      WebCore::CSSParserToken::CSSParserToken((uint64_t)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken, 30, 0);
      a2 = v11;
      a1 = v12;
      v5 = a5;
      a3 = v10;
      a4 = v8;
    }
  }
  if ((*(_BYTE *)v6 & 0x3F) != 0)
    return WebCore::CSSPropertyParserHelpers::consumeLengthOrPercent((uint64_t)a2, a3, 0, a4, 0, v5, 0, a1);
  else
    return (__int128 *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)258,(WebCore::CSSValueID)254,(WebCore::CSSValueID)255,(WebCore::CSSValueID)259,(WebCore::CSSValueID)260>((int **)a1, a2);
}

void WebCore::CSSPropertyParserHelpers::positionFromTwoValues(WebCore::CSSPropertyParserHelpers *this, WebCore::CSSPrimitiveValue *a2, WebCore::CSSPrimitiveValue *a3)
{
  int v3;
  int v4;
  __int16 v5;
  int v6;
  int v7;
  _BOOL4 v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_WORD *)a2 + 2) & 0x7F;
  v4 = *((_WORD *)a2 + 4) & 0xFFFE;
  v5 = *((_WORD *)a3 + 4);
  v6 = *((_WORD *)a3 + 2) & 0x7F;
  if (v3 == 80 && v4 == 258)
  {
    v7 = v5 & 0xFFFE;
LABEL_10:
    v8 = 1;
LABEL_11:
    v10 = v6 != 80 || v7 != 258;
    if (v8 && !v10)
      goto LABEL_25;
    if (!v10)
      goto LABEL_22;
LABEL_20:
    *(_DWORD *)a2 += 2;
    *(_DWORD *)a3 += 2;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)this = a2;
    *((_QWORD *)this + 1) = a3;
LABEL_21:
    *((_BYTE *)this + 16) = 1;
    WebCore::CSSPropertyParserHelpers::PositionCoordinates::~PositionCoordinates((WebCore::CSSPropertyParserHelpers::PositionCoordinates *)&v11, a2);
    return;
  }
  v7 = v5 & 0xFFFE;
  if (v6 == 80 && v7 == 254)
  {
    if (v3 == 80 && v4 == 254)
      goto LABEL_25;
    goto LABEL_20;
  }
  if (v3 != 80)
    goto LABEL_10;
  v8 = v6 != 80;
  if (v4 != 254)
    goto LABEL_11;
  if (v6 == 80)
  {
LABEL_22:
    *(_DWORD *)a3 += 2;
    *(_DWORD *)a2 += 2;
    v11 = 0;
    v12 = 0;
    *(_QWORD *)this = a3;
    *((_QWORD *)this + 1) = a2;
    goto LABEL_21;
  }
LABEL_25:
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 16) = 0;
}

__int128 **WebCore::CSSParserTokenRange::consumeWhitespace(__int128 **this)
{
  unint64_t v1;
  __int128 *v2;
  char v3;
  unsigned int v4;

  v2 = *this;
  v1 = (unint64_t)this[1];
  while (1)
  {
    if ((unint64_t)v2 < v1 || (v3 & 1) != 0)
    {
      if ((unint64_t)v2 >= v1)
        v2 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v4 = *(_DWORD *)v2;
    }
    else
    {
      v4 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v4;
      v3 = 1;
    }
    if ((v4 & 0x3F) != 0x10)
      break;
    v2 = (__int128 *)((char *)*this + 24);
    *this = v2;
  }
  return this;
}

uint64_t WebCore::RenderBox::computeReplacedLogicalWidthRespectingMinMaxWidth(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unsigned int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned __int8 v25;
  char v26;
  char v27;
  unsigned int v28;
  char v29;
  char v30;
  char v31;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      if (*(char *)(v6 + 45) < 0 && (*(_BYTE *)(a1 + 21) & 4) == 0 && *(_BYTE *)(v6 + 395))
        return v3;
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v8 = v7 + 36;
  v9 = v7 + 44;
  v10 = v7 + 20;
  v11 = v7 + 28;
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 < 4)
  {
    v12 = v9;
  }
  else
  {
    v8 = v10;
    v12 = v11;
  }
  v13 = *(unsigned __int8 *)(v8 + 4);
  if (a3 == 1)
  {
    if ((v13 & 0xFFFFFFF7) == 3)
    {
      v20 = *(unsigned __int8 *)(v12 + 4);
      v21 = v20 > 0xD;
      v22 = (1 << v20) & 0x2808;
      v23 = v21 || v22 == 0;
      v16 = a2;
      v17 = a2;
      if (v23)
        goto LABEL_16;
      goto LABEL_21;
    }
    v14 = *(unsigned __int8 *)(v12 + 4);
    if ((v14 & 0xFFFFFFF7) == 3)
    {
      v17 = a2;
      v16 = a2;
      if (v13 == 13)
        goto LABEL_21;
      v15 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(v12 + 4);
  }
  v15 = v14 == 13;
  if (v13 == 13)
  {
    v16 = a2;
    goto LABEL_15;
  }
LABEL_10:
  v28 = 0;
  v31 = 0;
  v29 = v13;
  v30 = *(_BYTE *)(v8 + 5);
  if ((v13 - 2) >= 9)
  {
    if (v13 == 11)
    {
      v28 = *(_DWORD *)v8;
      WebCore::Length::ref((int *)&v28);
    }
  }
  else
  {
    v31 = *(_BYTE *)(v8 + 6);
    v28 = *(_DWORD *)v8;
  }
  v16 = WebCore::RenderBox::computeReplacedLogicalWidthUsing((WebCore::RenderObject *)a1, 1, (WebCore::Length *)&v28);
  if (v29 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v28);
  }
LABEL_15:
  v17 = v3;
  if (!v15)
  {
LABEL_16:
    v24 = 0;
    v27 = 0;
    v25 = *(_BYTE *)(v12 + 4);
    v26 = *(_BYTE *)(v12 + 5);
    if (v25 - 2 >= 9)
    {
      if (v25 == 11)
      {
        v24 = *(_DWORD *)v12;
        WebCore::Length::ref((int *)&v24);
      }
    }
    else
    {
      v27 = *(_BYTE *)(v12 + 6);
      v24 = *(_DWORD *)v12;
    }
    v17 = WebCore::RenderBox::computeReplacedLogicalWidthUsing((WebCore::RenderObject *)a1, 2, (WebCore::Length *)&v24);
    if (v25 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v24);
    }
  }
LABEL_21:
  if (v17 >= (int)v3)
    v18 = v3;
  else
    v18 = v17;
  if (v16 <= v18)
    return v18;
  else
    return v16;
}

unint64_t WebCore::RenderBox::computeReplacedLogicalWidthUsing(WebCore::RenderObject *this, int a2, WebCore::Length *a3)
{
  unsigned int v5;
  unint64_t result;
  int v7;
  int v8;
  int v9;
  WebCore::RenderObject *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  float v17;
  double v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  unsigned int v26;
  int v27;
  const WebCore::RenderBoxModelObject *v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  int v35;
  unsigned __int8 v36;
  char v37;
  char v38;
  unsigned int v39;
  char v40;

  v5 = *((unsigned __int8 *)a3 + 4);
  if (a2 == 1 && !*((_BYTE *)a3 + 4))
    return 0;
  if (v5 == 4)
    return WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, (uint64_t)a3);
  result = 0;
  if (v5 > 0xD)
    return result;
  if (((1 << v5) & 0xE08) != 0)
  {
    v7 = *((_DWORD *)this + 5);
    if ((v7 & 0x1800000) == 0x1000000)
    {
      v28 = (const WebCore::RenderBoxModelObject *)WebCore::RenderObject::container(this);
      if ((*((_BYTE *)v28 + 45) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194385370);
      }
      v8 = WebCore::RenderBox::containingBlockLogicalWidthForPositioned(this, v28, 0, 1);
    }
    else if (((v7 & 0x1000) == 0) != ((*((_BYTE *)WebCore::RenderObject::containingBlock(this) + 21) & 0x10) == 0))
    {
      v8 = WebCore::RenderBox::perpendicularContainingBlockLogicalHeight(this);
    }
    else
    {
      v8 = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1144))(this);
    }
    v9 = v8;
    v10 = WebCore::RenderObject::containingBlock(this);
    v11 = *(_QWORD *)(*((_QWORD *)v10 + 11) + 8);
    v12 = (unsigned int *)(v11 + 12);
    v13 = (unsigned int *)(v11 + 4);
    if (((*((_DWORD *)v10 + 31) >> 13) & 6u) - 2 >= 4)
      v12 = v13;
    v38 = 0;
    v36 = *((_BYTE *)v12 + 4);
    v14 = v36;
    v37 = *((_BYTE *)v12 + 5);
    if (v36 - 2 >= 9)
    {
      v15 = 0;
      if (v36 == 11)
      {
        v15 = *v12;
        v35 = *v12;
        WebCore::Length::ref(&v35);
      }
    }
    else
    {
      v15 = *v12;
    }
    v16 = *((unsigned __int8 *)a3 + 4);
    if ((v16 - 7) <= 3)
    {
      WebCore::Length::Length((WebCore::Length *)&v33, a3);
      v29 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
      v30 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing((uint64_t)this, (uint64_t)&v33, v9, v29);
      v31 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
      if (__OFSUB__(v30, v31))
        v32 = (v30 >> 31) + 0x7FFFFFFF;
      else
        v32 = v30 - v31;
      if (v34 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
      }
      result = v32;
    }
    else
    {
      if (v9 > 0 || !v9 && (v14 <= 0xB ? (v24 = ((1 << v14) & 0x818) == 0) : (v24 = 1), !v24))
      {
        switch(v16)
        {
          case 4:
            v17 = *(float *)a3;
            if (!*((_BYTE *)a3 + 6))
              v17 = (float)*(int *)a3;
            break;
          case 3:
            v22 = *(float *)a3;
            if (!*((_BYTE *)a3 + 6))
              v22 = (float)*(int *)a3;
            v17 = (float)((float)((float)v9 * 0.015625) * v22) / 100.0;
            break;
          case 11:
            WebCore::Length::nonNanCalculatedValue(a3, (float)v9 * 0.015625);
            break;
          default:
            v19 = 0;
LABEL_24:
            result = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, v19, *((unsigned __int8 *)a3 + 4));
            goto LABEL_25;
        }
        v18 = v17 * 64.0;
        if (v18 >= 2147483650.0)
        {
          v19 = 0x7FFFFFFF;
        }
        else if (v18 <= -2147483650.0)
        {
          v19 = 0x80000000;
        }
        else
        {
          v19 = (int)v18;
        }
        goto LABEL_24;
      }
      result = 0;
    }
LABEL_25:
    if (v14 == 11)
    {
      v20 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      v21 = v15;
      goto LABEL_29;
    }
    return result;
  }
  if (((1 << v5) & 0x3067) != 0)
  {
    v23 = ((*((_DWORD *)this + 31) >> 13) & 6) - 2;
    result = (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 1320))(this);
    if (v23 <= 3)
      result >>= 32;
  }
  else if (((1 << v5) & 0x180) != 0)
  {
    WebCore::Length::Length((WebCore::Length *)&v39, a3);
    v25 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
    v26 = WebCore::RenderBox::computeIntrinsicLogicalWidthUsing((uint64_t)this, (uint64_t)&v39, 0, v25);
    v27 = WebCore::RenderBoxModelObject::borderAndPaddingLogicalWidth(this);
    if (__OFSUB__(v26, v27))
      v20 = (v26 >> 31) + 0x7FFFFFFF;
    else
      v20 = v26 - v27;
    if (v40 != 11)
      return v20;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    v21 = v39;
LABEL_29:
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
    return v20;
  }
  return result;
}

_DWORD *WebCore::JSDOMException::destroy(WebCore::JSDOMException *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::HTMLDocument::HTMLDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, unsigned __int16 a6, unsigned __int8 a7)
{
  __int128 v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a5[1];
  v13[0] = *a5;
  v13[1] = v8;
  v9 = WebCore::Document::Document(a1, a2, a3, a4, a6 & 0xFFFE | 1, a7, v13);
  *(_QWORD *)v9 = off_1E33BA1B0;
  *(_QWORD *)(v9 + 192) = &unk_1E33BA500;
  *(_QWORD *)(v9 + 288) = &unk_1E33BA6C0;
  *(_QWORD *)(v9 + 504) = &unk_1E33BA6E8;
  *(_QWORD *)(v9 + 512) = &unk_1E33BA710;
  *(_QWORD *)(v9 + 544) = &unk_1E33BA740;
  *(_QWORD *)(v9 + 552) = &unk_1E33BA768;
  *(_OWORD *)(v9 + 3512) = 0u;
  v11 = *(WTF::StringImpl **)(v9 + 1704);
  *(_QWORD *)(a1 + 1704) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  return a1;
}

unint64_t WebCore::Document::Document(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, char a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t WeakRandomUUIDVersion4;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  WTF *v20;
  __int128 v21;
  WebCore::Style::Scope *v22;
  _QWORD *v23;
  unint64_t StatusReg;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned int *v57;
  unsigned int v58;
  _QWORD *v59;
  unsigned int *v60;
  unsigned int v61;
  _QWORD *v62;
  unsigned int *v63;
  unsigned int v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int v67;
  _QWORD *v68;
  unsigned int *v69;
  unsigned int v70;
  _QWORD *v71;
  _QWORD *v72;
  _OWORD *v73;
  char v74;
  unsigned int *v75;
  unsigned int v76;
  WebCore::FrameSelection *v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  const WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::InspectorDOMAgent *v95;
  char v96;
  char **v97;
  char *v98;
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_WORD *)(a1 + 28) = -28668;
  *(_OWORD *)(a1 + 30) = 0u;
  *(_OWORD *)(a1 + 46) = 0u;
  *(_OWORD *)(a1 + 62) = 0u;
  *(_WORD *)(a1 + 78) = 0;
  ++*(_DWORD *)(a1 + 3324);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = off_1E33A2BA8;
  *(_QWORD *)(a1 + 192) = &unk_1E33A2EF8;
  *(_QWORD *)(a1 + 288) = &unk_1E33A30B8;
  *(_QWORD *)(a1 + 504) = &unk_1E33A30E0;
  *(_QWORD *)(a1 + 512) = &unk_1E33A3108;
  *(_QWORD *)(a1 + 544) = &unk_1E33A3138;
  *(_QWORD *)(a1 + 552) = &unk_1E33A3160;
  *(_QWORD *)(a1 + 96) = a1;
  *(_QWORD *)(a1 + 104) = a1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 40) = a1 + 96;
  v14 = *a7;
  v13 = a7[1];
  v99 = *((_OWORD *)a7 + 1);
  *(_WORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 7;
  *(_BYTE *)(a1 + 281) = 0;
  *(_QWORD *)(a1 + 273) = 0;
  *(_QWORD *)(a1 + 192) = off_1E33A73D8;
  *(_QWORD *)(a1 + 288) = &unk_1E33A7598;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  if (v14 | v13)
  {
    *(_QWORD *)(a1 + 416) = v14;
    *(_QWORD *)(a1 + 424) = v13;
    *(_OWORD *)(a1 + 432) = v99;
  }
  else
  {
    WeakRandomUUIDVersion4 = WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)a1);
    v17 = v16;
    v18 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v18 != -1)
    {
      v98 = &v96;
      v97 = &v98;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v97, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) == 0)
    {
      __break(1u);
LABEL_69:
      v85 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v86 = *(_QWORD *)(v85 + 528);
      if (v86)
      {
        v87 = *(_QWORD *)(v86 + 8);
        if (v87)
        {
          v88 = *(_QWORD *)(v87 + 24);
          if (v88)
          {
            v89 = *(_QWORD *)(v88 + 8);
            if (v89)
              goto LABEL_79;
          }
        }
      }
      v90 = *(_QWORD *)(v85 + 2632);
      if (v90)
      {
        v91 = *(_QWORD *)(v90 + 8);
        if (v91)
        {
          v92 = *(_QWORD *)(v91 + 528);
          if (v92)
          {
            v93 = *(_QWORD *)(v92 + 8);
            if (v93)
            {
              v94 = *(_QWORD *)(v93 + 24);
              if (v94)
              {
                v89 = *(_QWORD *)(v94 + 8);
                if (v89)
                {
LABEL_79:
                  v95 = *(WebCore::InspectorDOMAgent **)(*(_QWORD *)(*(_QWORD *)(v89 + 80) + 8) + 40);
                  if (v95)
                    WebCore::InspectorDOMAgent::addEventListenersToNode(v95, (WebCore::Node *)a1);
                }
              }
            }
          }
        }
      }
      goto LABEL_66;
    }
    v19 = WebCore::Process::globalIdentifier;
    *(_QWORD *)(a1 + 416) = WeakRandomUUIDVersion4;
    *(_QWORD *)(a1 + 424) = v17;
    *(_QWORD *)(a1 + 432) = v19;
  }
  *(_OWORD *)(a1 + 448) = 0u;
  *(_WORD *)(a1 + 464) = -256;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 466) = 0;
  *(_DWORD *)(a1 + 469) = 0;
  *(_QWORD *)(a1 + 504) = off_1E33A3340;
  *(_QWORD *)(a1 + 512) = off_1E33FEB10;
  *(_OWORD *)(a1 + 520) = 0u;
  WebCore::FrameDestructionObserver::observeFrame((WebCore::FrameDestructionObserver *)(a1 + 512), (WebCore::LocalFrame *)a2);
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)a1 = off_1E33A2BA8;
  *(_QWORD *)(a1 + 192) = &unk_1E33A2EF8;
  *(_QWORD *)(a1 + 288) = &unk_1E33A30B8;
  *(_QWORD *)(a1 + 504) = &unk_1E33A30E0;
  *(_QWORD *)(a1 + 512) = &unk_1E33A3108;
  *(_QWORD *)(a1 + 544) = &unk_1E33A3138;
  *(_QWORD *)(a1 + 552) = &unk_1E33A3160;
  *(_QWORD *)(a1 + 560) = 850045863;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 658) = 0u;
  ++*(_DWORD *)(a3 + 228);
  *(_QWORD *)(a1 + 680) = a3;
  *(_QWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 712) = 5;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  WTF::URL::invalidate((WTF::URL *)(a1 + 736));
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  v20 = *(WTF **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v20 += 2;
  *(_QWORD *)(a1 + 808) = v20;
  v21 = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a4 + 8);
  *(_OWORD *)(a1 + 832) = v21;
  *(_QWORD *)(a1 + 848) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 848));
  *(_QWORD *)(a1 + 888) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 888));
  *(_QWORD *)(a1 + 928) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 928));
  *(_QWORD *)(a1 + 968) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 968));
  *(_QWORD *)(a1 + 1008) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 1008));
  *(_QWORD *)(a1 + 1048) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 1048));
  *(_QWORD *)(a1 + 1088) = 0;
  WTF::URL::invalidate((WTF::URL *)(a1 + 1088));
  *(_QWORD *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1288) = ++WebCore::Document::s_globalTreeVersion;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  v22 = (WebCore::Style::Scope *)WTF::fastMalloc((WTF *)0x140);
  *(_QWORD *)(a1 + 1328) = WebCore::Style::Scope::Scope(v22, (WebCore::Document *)a1);
  *(_BYTE *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_QWORD *)(a1 + 1408) = 0x11040000000000FFLL;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1441) = 0u;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1488) = 0;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E33A35E0;
  v23[1] = a1;
  *(_QWORD *)(a1 + 1504) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  v25 = *(unsigned int **)(StatusReg + 736);
  if (!v25)
    v25 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  *(_QWORD *)(a1 + 1544) = v25;
  *(_QWORD *)(a1 + 1504) = off_1E31F7378;
  *(_QWORD *)(a1 + 1552) = v23;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_QWORD *)(a1 + 1640) = off_1E3407128;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  v27 = *(unsigned int **)(StatusReg + 736);
  if (!v27)
    v27 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  *(_QWORD *)(a1 + 1680) = v27;
  *(_QWORD *)(a1 + 1640) = off_1E31F7378;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v29 = off_1E33A3608;
  v29[1] = WebCore::Document::applyPendingXSLTransformsTimerFired;
  v29[2] = 0;
  v29[3] = a1;
  *(_QWORD *)(a1 + 1688) = v29;
  *(_QWORD *)(a1 + 1696) = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_QWORD *)(a1 + 1704) = v98;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_QWORD *)(a1 + 2032) = off_1E3407128;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  v30 = *(unsigned int **)(StatusReg + 736);
  if (!v30)
    v30 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 + 1, v30));
  *(_QWORD *)(a1 + 2072) = v30;
  *(_QWORD *)(a1 + 2032) = off_1E31F7378;
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v32 = off_1E33A3608;
  v32[1] = WebCore::Document::intersectionObserversInitialUpdateTimerFired;
  v32[2] = 0;
  v32[3] = a1;
  *(_QWORD *)(a1 + 2080) = v32;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_QWORD *)(a1 + 2120) = off_1E3407128;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  v33 = *(unsigned int **)(StatusReg + 736);
  if (!v33)
    v33 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 + 1, v33));
  *(_QWORD *)(a1 + 2160) = v33;
  *(_QWORD *)(a1 + 2120) = off_1E31F7378;
  v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v35 = off_1E33A3608;
  v35[1] = WebCore::Document::loadEventDelayTimerFired;
  v35[2] = 0;
  v35[3] = a1;
  *(_QWORD *)(a1 + 2168) = v35;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_OWORD *)(a1 + 2176) = 0u;
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)(a1 + 2196) = _Q1;
  *(_OWORD *)(a1 + 2212) = _Q1;
  *(_OWORD *)(a1 + 2228) = _Q1;
  *(_WORD *)(a1 + 2244) = 0;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  v41 = *(_QWORD *)(a1 + 528);
  if (v41
    && (v42 = *(_QWORD *)(v41 + 8)) != 0
    && (v43 = *(_QWORD *)(v42 + 24)) != 0
    && (v44 = *(_QWORD *)(v43 + 8)) != 0)
  {
    v45 = *(_QWORD *)(v44 + 1600);
    v46 = WTF::fastMalloc((WTF *)0x48);
    if (v45)
      ++*(_DWORD *)(v45 + 8);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x48);
    v45 = 0;
  }
  *(_QWORD *)v46 = off_1E3353270;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = &unk_1E33532C0;
  *(_QWORD *)(v46 + 24) = 0;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = 0;
  *(_QWORD *)(v46 + 48) = 0;
  *(_QWORD *)(v46 + 56) = v45;
  *(_BYTE *)(v46 + 64) = 0;
  *(_QWORD *)(a1 + 2344) = v46;
  v47 = WTF::fastMalloc((WTF *)0x60);
  v48 = (_QWORD *)WebCore::DeviceController::DeviceController(v47, v46);
  *v48 = off_1E33A28B0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v48[4] + 8) + 32))(*(_QWORD *)(v48[4] + 8), v47);
  *(_QWORD *)(a1 + 2352) = v47;
  v49 = *(_QWORD *)(a1 + 528);
  if (v49
    && (v50 = *(_QWORD *)(v49 + 8)) != 0
    && (v51 = *(_QWORD *)(v50 + 24)) != 0
    && (v52 = *(_QWORD *)(v51 + 8)) != 0)
  {
    v53 = *(_QWORD *)(v52 + 1600);
    v54 = WTF::fastMalloc((WTF *)0x48);
    if (v53)
      ++*(_DWORD *)(v53 + 8);
  }
  else
  {
    v54 = WTF::fastMalloc((WTF *)0x48);
    v53 = 0;
  }
  *(_QWORD *)v54 = off_1E33532F0;
  *(_QWORD *)(v54 + 8) = 0;
  *(_QWORD *)(v54 + 16) = &unk_1E3353340;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0;
  *(_QWORD *)(v54 + 48) = 0;
  *(_QWORD *)(v54 + 56) = v53;
  *(_BYTE *)(v54 + 64) = 0;
  *(_QWORD *)(a1 + 2360) = v54;
  v55 = WTF::fastMalloc((WTF *)0x60);
  v56 = (_QWORD *)WebCore::DeviceController::DeviceController(v55, v54);
  *v56 = off_1E33A2AB0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v56[4] + 8) + 32))(*(_QWORD *)(v56[4] + 8), v55);
  *(_QWORD *)(a1 + 2368) = v55;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2384) = off_1E3407128;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  v57 = *(unsigned int **)(StatusReg + 736);
  if (!v57)
    v57 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 + 1, v57));
  *(_QWORD *)(a1 + 2424) = v57;
  *(_QWORD *)(a1 + 2384) = off_1E31F7378;
  v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v59 = off_1E33A3608;
  v59[1] = WebCore::Document::pendingTasksTimerFired;
  v59[2] = 0;
  v59[3] = a1;
  *(_QWORD *)(a1 + 2432) = v59;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_QWORD *)(a1 + 2496) = off_1E3407128;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  v60 = *(unsigned int **)(StatusReg + 736);
  if (!v60)
    v60 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 + 1, v60));
  *(_QWORD *)(a1 + 2536) = v60;
  *(_QWORD *)(a1 + 2496) = off_1E31F7378;
  v62 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v62 = off_1E33A3608;
  v62[1] = WebCore::Document::visualUpdatesSuppressionTimerFired;
  v62[2] = 0;
  v62[3] = a1;
  *(_QWORD *)(a1 + 2544) = v62;
  *(_QWORD *)(a1 + 2552) = off_1E3407128;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_OWORD *)(a1 + 2576) = 0u;
  v63 = *(unsigned int **)(StatusReg + 736);
  if (!v63)
    v63 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 + 1, v63));
  *(_QWORD *)(a1 + 2592) = v63;
  *(_QWORD *)(a1 + 2552) = off_1E31F7378;
  v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v65 = off_1E33A3608;
  v65[1] = WebCore::Document::clearSharedObjectPool;
  v65[2] = 0;
  v65[3] = a1;
  *(_QWORD *)(a1 + 2600) = v65;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_QWORD *)(a1 + 2752) = off_1E3407128;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  v66 = *(unsigned int **)(StatusReg + 736);
  if (!v66)
    v66 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 + 1, v66));
  *(_QWORD *)(a1 + 2792) = v66;
  *(_QWORD *)(a1 + 2752) = off_1E31F7378;
  v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v68 = off_1E33A3608;
  v68[1] = WebCore::Document::didAssociateFormControlsTimerFired;
  v68[2] = 0;
  v68[3] = a1;
  *(_QWORD *)(a1 + 2800) = v68;
  *(_QWORD *)(a1 + 2808) = off_1E3407128;
  *(_OWORD *)(a1 + 2816) = 0u;
  *(_OWORD *)(a1 + 2832) = 0u;
  v69 = *(unsigned int **)(StatusReg + 736);
  if (!v69)
    v69 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v70 = __ldaxr(v69);
  while (__stlxr(v70 + 1, v69));
  *(_QWORD *)(a1 + 2848) = v69;
  *(_QWORD *)(a1 + 2808) = off_1E31F7378;
  v71 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v71 = off_1E33A3608;
  v71[1] = WebCore::Document::invalidateDOMCookieCache;
  v71[2] = 0;
  v71[3] = a1;
  *(_QWORD *)(a1 + 2856) = v71;
  v72 = *(_QWORD **)(a1 + 528);
  if (v72)
  {
    v72 = (_QWORD *)v72[1];
    v73 = (_OWORD *)(a1 + 3464);
    if (v72)
    {
      v72 = (_QWORD *)v72[3];
      v74 = a6;
      if (v72)
      {
        v72 = (_QWORD *)v72[1];
        if (v72)
        {
          v72 = (_QWORD *)v72[110];
          if (v72)
          {
            v75 = (unsigned int *)(v72 + 1);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 + 1, v75));
          }
        }
      }
    }
    else
    {
      v74 = a6;
    }
  }
  else
  {
    v73 = (_OWORD *)(a1 + 3464);
    v74 = a6;
  }
  *(_QWORD *)(a1 + 2864) = v72;
  *(_QWORD *)(a1 + 2872) = 0;
  *(_QWORD *)(a1 + 2880) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 2992) = 0;
  *(_BYTE *)(a1 + 2984) = 0;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  v77 = (WebCore::FrameSelection *)WTF::fastMalloc((WTF *)0x118);
  *(_QWORD *)(a1 + 3064) = WebCore::FrameSelection::FrameSelection(v77, (WebCore::Document *)a1);
  *(_QWORD *)(a1 + 3072) = 0;
  v78 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v78 = off_1E33A3368;
  v78[1] = 1;
  *(_QWORD *)(a1 + 3080) = v78;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_QWORD *)(a1 + 3309) = 0;
  *(_OWORD *)(a1 + 3088) = 0u;
  *(_OWORD *)(a1 + 3104) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_BYTE *)(a1 + 3232) = 0;
  *(_QWORD *)(a1 + 3240) = 0;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_QWORD *)(a1 + 3261) = 0;
  *(_QWORD *)(a1 + 3286) = 0;
  *(_OWORD *)(a1 + 3272) = 0u;
  *(_QWORD *)(a1 + 3349) = 0;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_WORD *)(a1 + 3358) = a5;
  *(_WORD *)(a1 + 3361) = 0;
  *(_BYTE *)(a1 + 3363) = 2;
  *(_QWORD *)(a1 + 3364) = 0;
  *(_BYTE *)(a1 + 3372) = 0;
  *(_DWORD *)(a1 + 3373) = 1;
  *(_BYTE *)(a1 + 3377) = 1;
  *(_DWORD *)(a1 + 3378) = 0;
  *(_WORD *)(a1 + 3382) = 0;
  *(_BYTE *)(a1 + 3384) = 1;
  *(_QWORD *)(a1 + 3385) = 0;
  *(_DWORD *)(a1 + 3393) = 0;
  *(_WORD *)(a1 + 3397) = 2;
  *(_BYTE *)(a1 + 3399) = v74 & 1;
  *(_BYTE *)(a1 + 3400) = (v74 & 2) != 0;
  *(_QWORD *)(a1 + 3406) = 0;
  *(_QWORD *)(a1 + 3401) = 0;
  *(_BYTE *)(a1 + 3414) = 1;
  *(_QWORD *)(a1 + 3415) = 0;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_QWORD *)(a1 + 3437) = 0;
  *(_DWORD *)(a1 + 3445) = 1;
  *(_QWORD *)(a1 + 3456) = 0;
  if (a2)
  {
    *v73 = *(_OWORD *)(a2 + 32);
    v79 = 1;
  }
  else
  {
    v79 = 0;
    *(_BYTE *)v73 = 0;
  }
  *(_BYTE *)(a1 + 3480) = v79;
  *(_WORD *)(a1 + 3488) = 0;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(_QWORD *)(a1 + 16) |= 0x8000000000000uLL;
  WebCore::Document::addToDocumentsMap(a1);
  if (a2 && (v82 = *(_QWORD *)(a2 + 120)) != 0 && *(_QWORD *)(v82 + 8)
    || *(_QWORD *)a4 && *(_DWORD *)(*(_QWORD *)a4 + 4))
  {
    WebCore::Document::setURL((WebCore::Document *)a1, (WTF **)a4, v81);
  }
  WebCore::Document::initSecurityContext(a1, v80, v81);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    goto LABEL_69;
LABEL_66:
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(*(_QWORD *)(a1 + 680) + 548);
  *(_BYTE *)(a1 + 3371) = 1;
  return a1;
}

{
  return WebCore::Document::Document(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t WebCore::DeviceController::DeviceController(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t StatusReg;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E33FE5B8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (!*(_QWORD *)(a2 + 8))
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = a2;
    v6 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v5;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v4);
      }
    }
  }
  v9 = *(unsigned int **)(a2 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v12 = *(unsigned int **)(StatusReg + 736);
  if (!v12)
    v12 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 40) = off_1E31F7378;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E33FE8C0;
  v14[1] = WebCore::DeviceController::fireDeviceEvent;
  v14[2] = 0;
  v14[3] = a1;
  *(_QWORD *)(a1 + 88) = v14;
  return a1;
}

uint64_t WebCore::Document::initSecurityContext(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WebCore::SecurityOrigin *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t IdentifierInternal;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore::ContentSecurityPolicy *v24;
  WTF *v25;
  WTF::StringImpl *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  WTF::StringImpl *v32;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  __n128 *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  unsigned int v58;
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  _BOOL4 v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  char v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  WTF::StringImpl *v111;
  unsigned int v113;
  unsigned int *v114;
  unsigned int *v115;
  unsigned int v116;
  WTF::StringImpl *v117;
  const WTF::StringImpl *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  _DWORD *v122;
  WTF::StringImpl *v123;
  _DWORD *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t isAboutSrcDoc;
  const WTF::StringImpl **v151;
  const WTF::StringImpl *v152;
  uint64_t v153;
  WebCore::SecurityOrigin *v154;
  WebCore::SecurityOrigin *v155;
  WTF::StringImpl *v156;
  const WebCore::SecurityOrigin *v157;
  uint64_t v158;
  _DWORD *v159;
  WTF::StringImpl *v160;
  _DWORD *v161;
  WTF::StringImpl *v162;
  unsigned int *v163;
  unsigned int v164;
  void *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  uint64_t *v174;
  int v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  int isAttachment;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  int hasAttributeWithoutSynchronization;
  char v195;
  _DWORD *v196;
  WTF::StringImpl *v197;
  __int128 v198;
  void *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  char v203;
  char v204;
  _BYTE *v205;
  char v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  uint64_t v209;
  WTF *v210;
  WTF::StringImpl *v211;
  __int128 v212;
  __int128 v213;
  const char *v214;
  int v215;
  const char *v216;
  int v217;
  WTF::StringImpl **v218;
  int v219;

  if (*(_BYTE *)(this + 274))
    return this;
  v3 = this;
  v4 = *(_QWORD *)(this + 528);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *(_BYTE *)(this + 274) = 1;
    *(_WORD *)(this + 280) = 257;
    return this;
  }
  v5 = (uint64_t *)(this + 192);
  v6 = (WebCore::SecurityOrigin *)(this + 736);
  WebCore::Document::setCookieURL((WebCore::Document *)this, (const WTF::URL *)(this + 736), a3);
  v7 = WebCore::FrameLoader::effectiveSandboxFlags(*(WebCore::FrameLoader **)(*(_QWORD *)(*(_QWORD *)(v3 + 528) + 8)
                                                                            + 280));
  WebCore::SecurityContext::enforceSandboxFlags((uint64_t *)(v3 + 192), v7, 1);
  v8 = WebCore::FrameLoader::effectiveReferrerPolicy(*(WebCore::FrameLoader **)(*(_QWORD *)(*(_QWORD *)(v3 + 528) + 8)
                                                                              + 280));
  if (v8)
    *(_BYTE *)(v3 + 272) = v8;
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 664) & 0x200000000000000) != 0 && !*(_BYTE *)(v3 + 3399))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 528) + 8);
    if (v9)
      goto LABEL_294;
  }
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 528) + 8) + 280) + 88);
    if (v10)
    {
      ++*(_DWORD *)(v10 + 24);
      v11 = (_BYTE *)(v3 + 268);
      if ((*(_BYTE *)(v3 + 268) & 4) == 0 && (*(_WORD *)(v10 + 1504) & 0x300) != 0x200)
      {
LABEL_20:
        WebCore::SecurityOrigin::create(v6, (uint64_t *)&v214);
        v12 = (char *)v214;
        goto LABEL_21;
      }
    }
    else
    {
      v11 = (_BYTE *)(v3 + 268);
      if ((*(_BYTE *)(v3 + 268) & 4) == 0)
        goto LABEL_20;
    }
    v12 = (char *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v12 = 1;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    v14 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v14 != -1)
    {
      v211 = (WTF::StringImpl *)&v210;
      v218 = &v211;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v218, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    v9 = WebCore::Process::globalIdentifier;
    if ((WebCore::Process::globalIdentifier & 1) != 0)
      break;
LABEL_293:
    __break(1u);
LABEL_294:
    v180 = *(_QWORD *)(v9 + 280);
    v181 = 88;
    if (!*(_BYTE *)(v180 + 80))
      v181 = 96;
    v182 = *(_DWORD **)(v180 + v181);
    if (v182)
    {
      ++v182[6];
      isAttachment = WebCore::ResourceResponseBase::isAttachment((WebCore::ResourceResponseBase *)(v182 + 318));
      v184 = isAttachment;
      if (v182[6] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v182 + 24))(v182);
        if (v184)
        {
LABEL_299:
          *(_BYTE *)(v3 + 272) = 1;
          if ((*(_WORD *)(v3 + 3358) & 0x10) != 0)
            v185 = 4;
          else
            v185 = -1;
          WebCore::SecurityContext::enforceSandboxFlags(v5, v185, 1);
        }
      }
      else
      {
        --v182[6];
        if ((isAttachment & 1) != 0)
          goto LABEL_299;
      }
    }
  }
  v15 = WebCore::Process::globalIdentifier;
  *((_QWORD *)v12 + 1) = IdentifierInternal;
  *((_QWORD *)v12 + 2) = v15;
  *((_DWORD *)v12 + 8) = 1;
  v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v16 += 2;
  *((_QWORD *)v12 + 5) = v16;
  *((_QWORD *)v12 + 6) = 0;
  *(_QWORD *)(v12 + 54) = 0;
  *((_WORD *)v12 + 31) = 1;
  v214 = v12;
LABEL_21:
  v17 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = v12;
  v216 = (const char *)v17;
  WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v5, (WTF::StringImpl *)&v216);
  v19 = (WTF *)v216;
  if (v216)
  {
    if (*(_DWORD *)v216 == 1)
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v216 + 1, v18);
      WTF::fastFree(v19, v165);
    }
    else
    {
      --*(_DWORD *)v216;
    }
  }
  v20 = *(WTF::StringImpl **)v6;
  if (*(_QWORD *)v6)
    *(_DWORD *)v20 += 2;
  v211 = v20;
  v21 = *(_OWORD *)(v3 + 760);
  v212 = *(_OWORD *)(v3 + 744);
  v213 = v21;
  v22 = WTF::fastMalloc((WTF *)0xF0);
  WebCore::ContentSecurityPolicy::ContentSecurityPolicy(v22, (uint64_t *)&v211, (uint64_t)v5);
  v24 = *(WebCore::ContentSecurityPolicy **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v22;
  if (v24)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v24, v23);
    if (atomic_load((unsigned int *)v25))
    {
      *((_OWORD *)v25 + 13) = 0u;
      *((_OWORD *)v25 + 14) = 0u;
      *((_OWORD *)v25 + 11) = 0u;
      *((_OWORD *)v25 + 12) = 0u;
      *((_OWORD *)v25 + 9) = 0u;
      *((_OWORD *)v25 + 10) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *((_OWORD *)v25 + 8) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 1) = 0u;
      *((_OWORD *)v25 + 2) = 0u;
      *(_OWORD *)v25 = 0u;
    }
    else
    {
      WTF::fastFree(v25, v23);
    }
  }
  *(_BYTE *)(v3 + 281) = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
      WTF::StringImpl::destroy(v211, v23);
    else
      *(_DWORD *)v211 -= 2;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 528)
                                                                                               + 8)
                                                                                   + 280)
                                                                       + 16)
                                                         + 800))(&v208);
  if (v208)
  {
    v28 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)v5);
    v29 = v28;
    if (v28)
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 + 1, v28));
    }
    WebCore::Document::referrer((_QWORD *)v3, &v211);
    if (v10)
    {
      WebCore::ResourceResponse::platformLazyInit(v10 + 1272, 1);
      v31 = *(__int16 *)(v10 + 1408);
    }
    else
    {
      v31 = 0;
    }
    WebCore::ContentSecurityPolicy::didReceiveHeader((uint64_t)v29, (WTF::StringImpl *)&v208, 1, 0, (uint64_t *)&v211, v31);
    v32 = v211;
    v211 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v27);
        if (!v29)
          goto LABEL_44;
LABEL_42:
        if (!atomic_load(v29))
        {
          __break(0xC471u);
          JUMPOUT(0x1943873E8);
        }
        do
          v34 = __ldaxr(v29);
        while (__stlxr(v34 - 1, v29));
        goto LABEL_44;
      }
      *(_DWORD *)v32 -= 2;
    }
    if (!v29)
      goto LABEL_44;
    goto LABEL_42;
  }
LABEL_44:
  if (*(_BYTE *)(v3 + 3399))
    goto LABEL_107;
  v35 = *(_QWORD *)(v3 + 528);
  if (!v35)
    goto LABEL_107;
  v36 = *(_QWORD *)(v35 + 8);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 280);
    v38 = *(unsigned __int8 *)(v37 + 80);
    v39 = 88;
    if (!*(_BYTE *)(v37 + 80))
      v39 = 96;
    v40 = *(_QWORD *)(v37 + v39);
    if (v40)
    {
      v41 = *(_DWORD *)(v40 + 24);
      *(_DWORD *)(v40 + 24) = v41 + 1;
      v42 = *(unsigned __int8 *)(v40 + 1520);
      if (v41)
      {
        *(_DWORD *)(v40 + 24) = v41;
        if (!v42)
          goto LABEL_83;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
        if (!v42)
          goto LABEL_83;
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 528) + 8) + 280);
        v38 = *(unsigned __int8 *)(v37 + 80);
      }
      v43 = v38 == 0;
      v44 = 88;
      if (v43)
        v44 = 96;
      v45 = *(__n128 **)(v37 + v44);
      ++v45[1].n128_u32[2];
      WebCore::DocumentLoader::documentURL(v45, (uint64_t)&v211);
      WebCore::ResourceResponse::platformLazyInit((uint64_t)&v45[79].n128_i64[1], 1);
      *(_BYTE *)(v3 + 464) = 2;
      WTF::URL::fileSystemPath((WTF::URL *)&v211);
      WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v45[79].n128_i8[8], (uint64_t *)&v210);
      v47 = v210;
      v48 = (WTF::StringImpl *)v218;
      if (v218)
        *(_DWORD *)v218 += 2;
      v49 = (WTF::StringImpl *)*((_QWORD *)v47 + 6);
      *((_QWORD *)v47 + 6) = v48;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::destroy(v49, v46);
          v48 = (WTF::StringImpl *)v218;
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      v218 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v46);
        else
          *(_DWORD *)v48 -= 2;
      }
      v50 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v50 = 1;
      v210 = 0;
      v50[1] = v47;
      v218 = v50;
      WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v5, (WTF::StringImpl *)&v218);
      v52 = (WTF *)v218;
      if (v218)
      {
        if (*(_DWORD *)v218 == 1)
        {
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v218 + 1, v51);
          WTF::fastFree(v52, v168);
        }
        else
        {
          --*(_DWORD *)v218;
        }
      }
      if ((_MergedGlobals_170 & 1) == 0)
      {
        v218 = (WTF::StringImpl **)"default-src ";
        v219 = 12;
        v216 = "x-apple-ql-id";
        v217 = 13;
        v214 = ": 'unsafe-inline'; base-uri 'none'; sandbox allow-same-origin allow-scripts";
        v215 = 75;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v218, (uint64_t)&v216, (uint64_t)&v214, &v209);
        if (!v209)
          goto LABEL_367;
        qword_1ECE831A0 = v209;
        _MergedGlobals_170 = 1;
      }
      if (!WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)v5))
      {
        __break(0xC471u);
        JUMPOUT(0x1943874DCLL);
      }
      v53 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)v5);
      v54 = v53;
      if (v53)
      {
        do
          v55 = __ldaxr(v53);
        while (__stlxr(v55 + 1, v53));
      }
      WebCore::Document::referrer((_QWORD *)v3, &v218);
      WebCore::ContentSecurityPolicy::didReceiveHeader((uint64_t)v54, (WTF::StringImpl *)&qword_1ECE831A0, 1, 2, (uint64_t *)&v218, 0);
      v56 = (WTF::StringImpl *)v218;
      v218 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::destroy(v56, v27);
          if (v54)
            goto LABEL_73;
          goto LABEL_75;
        }
        *(_DWORD *)v56 -= 2;
      }
      if (v54)
      {
LABEL_73:
        if (!atomic_load(v54))
        {
          __break(0xC471u);
          JUMPOUT(0x1943874FCLL);
        }
        do
          v58 = __ldaxr(v54);
        while (__stlxr(v58 - 1, v54));
      }
LABEL_75:
      *(_DWORD *)(v3 + 268) &= ~1u;
      *(_BYTE *)(v3 + 272) = 1;
      v59 = v210;
      v210 = 0;
      if (v59)
      {
        do
        {
          v60 = __ldaxr((unsigned int *)v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, (unsigned int *)v59));
        if (!v61)
        {
          atomic_store(1u, (unsigned int *)v59);
          v200 = (WTF::StringImpl *)*((_QWORD *)v59 + 6);
          *((_QWORD *)v59 + 6) = 0;
          if (v200)
          {
            if (*(_DWORD *)v200 == 2)
              WTF::StringImpl::destroy(v200, v27);
            else
              *(_DWORD *)v200 -= 2;
          }
          v201 = (WTF::StringImpl *)*((_QWORD *)v59 + 5);
          *((_QWORD *)v59 + 5) = 0;
          if (v201)
          {
            if (*(_DWORD *)v201 == 2)
              WTF::StringImpl::destroy(v201, v27);
            else
              *(_DWORD *)v201 -= 2;
          }
          v202 = *((unsigned int *)v59 + 8);
          if ((_DWORD)v202 != -1)
            ((void (*)(WTF::StringImpl ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v202])(&v218, (char *)v59 + 8);
          *((_DWORD *)v59 + 8) = -1;
          WTF::fastFree(v59, v27);
        }
      }
      v62 = v211;
      v211 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
          WTF::StringImpl::destroy(v62, v27);
        else
          *(_DWORD *)v62 -= 2;
      }
      if (v45[1].n128_u32[2] == 1)
        (*(void (**)(__n128 *))(v45->n128_u64[0] + 24))(v45);
      else
        --v45[1].n128_u32[2];
    }
  }
LABEL_83:
  if (!*(_BYTE *)(v3 + 3399))
  {
    v63 = *(_QWORD *)(v3 + 528);
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 8);
      if (v64)
      {
        v65 = *(_QWORD *)(v64 + 280);
        v66 = 88;
        if (!*(_BYTE *)(v65 + 80))
          v66 = 96;
        v67 = *(_QWORD *)(v65 + v66);
        if (v67)
        {
          ++*(_DWORD *)(v67 + 24);
          WebCore::ResourceResponse::platformLazyInit(v67 + 1272, 2);
          if (*(_QWORD *)(v67 + 1344))
          {
            v68 = WTF::StringImpl::startsWith();
            v69 = v68;
            if (*(_DWORD *)(v67 + 24) == 1)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
              if (!v69)
                goto LABEL_107;
            }
            else
            {
              --*(_DWORD *)(v67 + 24);
              if ((v68 & 1) == 0)
                goto LABEL_107;
            }
            WTF::URL::stringCenterEllipsizedToLength(v6);
            if (v207)
            {
              v70 = *((_DWORD *)v207 + 1);
              if (v70 < 0)
                goto LABEL_363;
            }
            else
            {
              v70 = 0;
            }
            v71 = __OFADD__(v70, 31);
            v72 = v70 + 31;
            if (v71 || __OFADD__(v72, 12))
            {
LABEL_363:
              v211 = 0;
LABEL_364:
              __break(0xC471u);
              JUMPOUT(0x194387664);
            }
            v73 = !v207 || (*((_BYTE *)v207 + 16) & 4) != 0;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v72 + 12), v73, (int8x16_t *)"Sandboxing '", 0xCu, (uint64_t)v207, (int8x16_t *)"' because it is using HTTP/0.9.", 0x1Fu, &v211);
            if (!v211)
              goto LABEL_364;
            v75 = v207;
            v207 = 0;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
                WTF::StringImpl::destroy(v75, v74);
              else
                *(_DWORD *)v75 -= 2;
            }
            WebCore::Document::addConsoleMessage((_QWORD *)v3, 8, 2, &v211, 0);
            WebCore::SecurityContext::enforceSandboxFlags(v5, 18, 1);
            v76 = v211;
            v211 = 0;
            if (v76)
            {
              if (*(_DWORD *)v76 == 2)
                WTF::StringImpl::destroy(v76, v27);
              else
                *(_DWORD *)v76 -= 2;
            }
          }
          else if (*(_DWORD *)(v67 + 24) == 1)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
          }
          else
          {
            --*(_DWORD *)(v67 + 24);
          }
        }
      }
    }
  }
LABEL_107:
  v77 = *(_QWORD *)(v3 + 680);
  if ((*(_QWORD *)(v77 + 688) & 0x100000) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v27);
    *(_BYTE *)(v78 + 60) = 1;
    v77 = *(_QWORD *)(v3 + 680);
  }
  if (*(_BYTE *)(v77 + 251))
  {
    v175 = *(unsigned __int8 *)(v77 + 250);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v27);
    if (!v175)
      goto LABEL_115;
  }
  else
  {
    v79 = *(_QWORD *)(v77 + 704);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v27);
    if ((v79 & 0x20000000) == 0)
    {
LABEL_115:
      *(_BYTE *)(v80 + 56) = 1;
      goto LABEL_116;
    }
  }
  if (*(_BYTE *)(v80 + 63))
  {
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 664) & 0x200000) != 0
      || (v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 528) + 8) + 280) + 16),
          (*(unsigned int (**)(uint64_t, WebCore::SecurityOrigin *))(*(_QWORD *)v82 + 976))(v82, v6)))
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v81);
      goto LABEL_115;
    }
    if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 664) & 0x8000) == 0)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v81);
      *(_BYTE *)(v166 + 59) = 1;
    }
  }
LABEL_116:
  v83 = *(_QWORD *)(v3 + 528);
  if (!v83
    || (v84 = *(_QWORD *)(v83 + 8)) == 0
    || (v85 = *(_QWORD *)(v84 + 120)) == 0
    || (v86 = *(_QWORD *)(v85 + 8)) == 0)
  {
    v87 = 0;
    goto LABEL_124;
  }
  v87 = *(_QWORD *)(*(_QWORD *)(v86 + 40) + 8);
  if (!v87)
  {
LABEL_124:
    v89 = 1;
    goto LABEL_125;
  }
  *(_DWORD *)(v87 + 24) += 2;
  v88 = *(_QWORD *)(v84 + 280);
  if (!WTF::URL::isAboutSrcDoc(v6))
    goto LABEL_122;
  v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 8) + 8) + 120);
  if (!v186)
    goto LABEL_122;
  v187 = *(_QWORD *)(v186 + 8);
  if (!v187)
    goto LABEL_122;
  v188 = *(_DWORD *)(v187 + 24);
  *(_DWORD *)(v187 + 24) = v188 + 2;
  if (*(_QWORD *)(*(_QWORD *)(v187 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
  {
    if (v188)
    {
      *(_DWORD *)(v187 + 24) = v188;
    }
    else if ((*(_WORD *)(v187 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v187);
    }
    goto LABEL_122;
  }
  hasAttributeWithoutSynchronization = WebCore::Element::hasAttributeWithoutSynchronization(v187, &WebCore::HTMLNames::srcdocAttr);
  v195 = hasAttributeWithoutSynchronization;
  if (*(_DWORD *)(v187 + 24) == 2)
  {
    if ((*(_WORD *)(v187 + 30) & 0x400) != 0)
    {
      if (hasAttributeWithoutSynchronization)
        goto LABEL_330;
      goto LABEL_122;
    }
    WebCore::Node::removedLastRef((WebCore::Node *)v187);
  }
  else
  {
    *(_DWORD *)(v187 + 24) -= 2;
  }
  if ((v195 & 1) != 0)
  {
LABEL_330:
    *(_BYTE *)(v3 + 3403) = 1;
    v196 = *(_DWORD **)(v87 + 848);
    if (v196)
      *v196 += 2;
    v197 = *(WTF::StringImpl **)(v3 + 888);
    *(_QWORD *)(v3 + 888) = v196;
    if (v197)
    {
      if (*(_DWORD *)v197 == 2)
        WTF::StringImpl::destroy(v197, v81);
      else
        *(_DWORD *)v197 -= 2;
    }
    v198 = *(_OWORD *)(v87 + 872);
    *(_OWORD *)(v3 + 896) = *(_OWORD *)(v87 + 856);
    *(_OWORD *)(v3 + 912) = v198;
    WebCore::Document::updateBaseURL((WebCore::Document *)v3);
  }
LABEL_122:
  v89 = 0;
  *(_BYTE *)(v3 + 277) = *(_BYTE *)(v87 + 277);
LABEL_125:
  if (*(_QWORD *)v6)
  {
    if (*(_DWORD *)(*(_QWORD *)v6 + 4))
    {
      if ((WTF::URL::isAboutBlank(v6) & 1) == 0)
      {
        isAboutSrcDoc = WTF::URL::isAboutSrcDoc(v6);
        if ((isAboutSrcDoc & 1) == 0)
        {
          v151 = (const WTF::StringImpl **)WTF::aboutBlankURL((WTF *)isAboutSrcDoc);
          if (!WTF::equalIgnoringASCIICase(*(WTF **)v6, *v151, v152))
            goto LABEL_209;
        }
      }
    }
  }
  v205 = v11;
  v90 = *(_QWORD *)(*(_QWORD *)(v3 + 528) + 8);
  v91 = *(_QWORD *)(v90 + 56);
  if (v91)
  {
    v92 = *(_QWORD *)(v91 + 8);
    if (v92)
    {
      v94 = (unsigned int *)(v92 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 + 1, v94));
      v93 = 0;
      v90 = *(_QWORD *)(*(_QWORD *)(v3 + 528) + 8);
      goto LABEL_133;
    }
  }
  else
  {
    v92 = 0;
  }
  v93 = 1;
LABEL_133:
  v96 = *(_QWORD *)(v90 + 160);
  if (!v96)
    goto LABEL_136;
  v97 = *(_QWORD *)(v96 + 8);
  if (!v97)
  {
LABEL_137:
    v98 = 1;
    goto LABEL_138;
  }
  if (*(_BYTE *)(v97 + 144))
  {
LABEL_136:
    v97 = 0;
    goto LABEL_137;
  }
  v163 = (unsigned int *)(v97 + 8);
  do
    v164 = __ldaxr(v163);
  while (__stlxr(v164 + 1, v163));
  v98 = 0;
LABEL_138:
  v206 = v98;
  if ((v93 & 1) != 0 || *(_BYTE *)(v92 + 144))
  {
    if ((v98 & 1) == 0)
    {
      v99 = (unsigned int *)(v97 + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 + 1, v99));
    }
    v101 = v97;
    if (!v97)
    {
      *(_BYTE *)(v3 + 274) = 0;
      v102 = v206;
      goto LABEL_201;
    }
  }
  else
  {
    v103 = (unsigned int *)(v92 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 + 1, v103));
    v101 = v92;
  }
  v203 = v93;
  v204 = v89;
  v105 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)v5);
  v6 = (WebCore::SecurityOrigin *)v105;
  if (v105)
  {
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 + 1, v105));
  }
  v107 = *(_QWORD *)(v101 + 296);
  if (v107)
    *(_DWORD *)(v107 + 24) += 2;
  v108 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v107 + 192));
  if (!v108)
  {
    WebCore::ContentSecurityPolicy::copyStateFrom(v6, 0, 0);
    if (!v107)
      goto LABEL_160;
    goto LABEL_158;
  }
  v109 = v108;
  do
    v110 = __ldaxr(v108);
  while (__stlxr(v110 + 1, v108));
  WebCore::ContentSecurityPolicy::copyStateFrom(v6, (uint64_t)v108, 0);
  if (!atomic_load(v109))
  {
LABEL_367:
    __break(0xC471u);
    JUMPOUT(0x19438733CLL);
  }
  do
    v113 = __ldaxr(v109);
  while (__stlxr(v113 - 1, v109));
  if (v107)
  {
LABEL_158:
    if (*(_DWORD *)(v107 + 24) == 2)
    {
      if ((*(_WORD *)(v107 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v107);
    }
    else
    {
      *(_DWORD *)(v107 + 24) -= 2;
    }
  }
LABEL_160:
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(*(_QWORD *)(v101 + 296) + 192), v111);
  v115 = v114;
  if (v114)
  {
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 + 1, v114));
  }
  WebCore::ContentSecurityPolicy::updateSourceSelf(v6, (const WebCore::SecurityOrigin *)v114);
  do
  {
    v119 = __ldaxr(v115);
    v120 = v119 - 1;
  }
  while (__stlxr(v120, v115));
  if (!v120)
  {
    atomic_store(1u, v115);
    v189 = (WTF::StringImpl *)*((_QWORD *)v115 + 6);
    *((_QWORD *)v115 + 6) = 0;
    if (v189)
    {
      if (*(_DWORD *)v189 == 2)
        WTF::StringImpl::destroy(v189, v117);
      else
        *(_DWORD *)v189 -= 2;
    }
    v190 = (WTF::StringImpl *)*((_QWORD *)v115 + 5);
    *((_QWORD *)v115 + 5) = 0;
    if (v190)
    {
      if (*(_DWORD *)v190 == 2)
        WTF::StringImpl::destroy(v190, v117);
      else
        *(_DWORD *)v190 -= 2;
    }
    v191 = v115[8];
    if ((_DWORD)v191 != -1)
      ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_4[v191])(&v211, v115 + 2);
    v115[8] = -1;
    WTF::fastFree((WTF *)v115, v117);
  }
  v121 = *(_QWORD *)(v101 + 296);
  *(_WORD *)(v3 + 216) = *(_WORD *)(v121 + 216);
  v122 = *(_DWORD **)(v121 + 224);
  if (v122)
    *v122 += 2;
  v123 = *(WTF::StringImpl **)(v3 + 224);
  *(_QWORD *)(v3 + 224) = v122;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, v117);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = *(_DWORD **)(v121 + 232);
  if (v124)
    *v124 += 2;
  v125 = *(WTF::StringImpl **)(v3 + 232);
  *(_QWORD *)(v3 + 232) = v124;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v117);
    else
      *(_DWORD *)v125 -= 2;
  }
  v126 = *(_QWORD *)(v3 + 528);
  if (v126)
    v126 = *(_QWORD *)(v126 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v126 + 128) + 8) == v126)
  {
    if (!v97)
      goto LABEL_186;
    v153 = *(_QWORD *)(v97 + 296);
    if (v153)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v153 + 192), v117);
      v155 = v154;
      WebCore::Document::topOrigin((WebCore::Document *)v153, v156);
      if (WebCore::SecurityOrigin::isSameOriginAs(v155, v157))
      {
        v158 = WebCore::Document::crossOriginOpenerPolicy(*(WebCore::Document **)(v97 + 296));
        *(_WORD *)(v3 + 240) = *(_WORD *)v158;
        v159 = *(_DWORD **)(v158 + 8);
        if (v159)
          *v159 += 2;
        v160 = *(WTF::StringImpl **)(v3 + 248);
        *(_QWORD *)(v3 + 248) = v159;
        if (v160)
        {
          if (*(_DWORD *)v160 == 2)
            WTF::StringImpl::destroy(v160, v117);
          else
            *(_DWORD *)v160 -= 2;
        }
        v161 = *(_DWORD **)(v158 + 16);
        if (v161)
          *v161 += 2;
        v162 = *(WTF::StringImpl **)(v3 + 256);
        *(_QWORD *)(v3 + 256) = v161;
        if (v162)
        {
          if (*(_DWORD *)v162 == 2)
            WTF::StringImpl::destroy(v162, v117);
          else
            *(_DWORD *)v162 -= 2;
        }
      }
    }
  }
  else if (!v97)
  {
    goto LABEL_186;
  }
  v127 = *(_QWORD *)(v97 + 296);
  if (v127)
  {
    *(_DWORD *)(v127 + 24) += 2;
    v128 = (unsigned int *)WebCore::SecurityContext::contentSecurityPolicy((WebCore::SecurityContext *)(v127 + 192));
    v129 = v128;
    if (v128)
    {
      do
        v130 = __ldaxr(v128);
      while (__stlxr(v130 + 1, v128));
    }
    WebCore::ContentSecurityPolicy::inheritInsecureNavigationRequestsToUpgradeFromOpener((uint64_t)v6, (const WebCore::ContentSecurityPolicy *)v128);
    if (!atomic_load(v129))
    {
      __break(0xC471u);
      JUMPOUT(0x19438741CLL);
    }
    do
      v132 = __ldaxr(v129);
    while (__stlxr(v132 - 1, v129));
    if (*(_DWORD *)(v127 + 24) == 2)
    {
      if ((*(_WORD *)(v127 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v127);
    }
    else
    {
      *(_DWORD *)(v127 + 24) -= 2;
    }
  }
LABEL_186:
  v133 = *(_QWORD *)(v101 + 296);
  if ((*v205 & 4) != 0)
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v133 + 192), v117);
    v89 = v204;
    if (*(_BYTE *)(v137 + 58))
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)v5, v81);
      *(_BYTE *)(v138 + 58) = 1;
    }
    goto LABEL_195;
  }
  WebCore::Document::setCookieURL((WebCore::Document *)v3, (const WTF::URL *)(v133 + 968), v118);
  v134 = *(_QWORD *)(v101 + 296);
  v135 = *(WTF::StringImpl **)(v134 + 200);
  v89 = v204;
  if (v135)
    goto LABEL_188;
  if (!*(_BYTE *)(v134 + 280))
  {
    v135 = 0;
    goto LABEL_189;
  }
  v3 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v3 = 1;
  v169 = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v170 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v170 != -1)
  {
    v211 = (WTF::StringImpl *)&v216;
    v218 = &v211;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v218, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  v9 = WebCore::Process::globalIdentifier;
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    goto LABEL_293;
  v171 = WebCore::Process::globalIdentifier;
  *(_QWORD *)(v3 + 8) = v169;
  *(_QWORD *)(v3 + 16) = v171;
  *(_DWORD *)(v3 + 32) = 1;
  v172 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v172 += 2;
  *(_QWORD *)(v3 + 40) = v172;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 54) = 0;
  *(_WORD *)(v3 + 62) = 1;
  v135 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v135 = 1;
  *((_QWORD *)v135 + 1) = v3;
  v174 = *(uint64_t **)(v134 + 200);
  *(_QWORD *)(v134 + 200) = v135;
  if (!v174)
  {
    v89 = v204;
    goto LABEL_188;
  }
  v89 = v204;
  if (*(_DWORD *)v174 != 1)
  {
    --*(_DWORD *)v174;
LABEL_188:
    ++*(_DWORD *)v135;
    goto LABEL_189;
  }
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v174 + 1, v173);
  WTF::fastFree((WTF *)v174, v199);
  v135 = *(WTF::StringImpl **)(v134 + 200);
  if (v135)
    goto LABEL_188;
LABEL_189:
  v211 = v135;
  WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v5, (WTF::StringImpl *)&v211);
  v136 = v211;
  if (!v211)
  {
LABEL_195:
    if (!v6)
      goto LABEL_198;
    goto LABEL_196;
  }
  if (*(_DWORD *)v211 == 1)
  {
    WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v211 + 1, v81);
    WTF::fastFree(v136, v167);
    if (!v6)
      goto LABEL_198;
  }
  else
  {
    --*(_DWORD *)v211;
    if (!v6)
      goto LABEL_198;
  }
LABEL_196:
  if (!atomic_load((unsigned int *)v6))
  {
    __break(0xC471u);
    JUMPOUT(0x1943873A0);
  }
  do
    v140 = __ldaxr((unsigned int *)v6);
  while (__stlxr(v140 - 1, (unsigned int *)v6));
LABEL_198:
  v141 = (unsigned int *)(v101 + 8);
  do
  {
    v142 = __ldaxr(v141);
    v143 = v142 - 1;
  }
  while (__stlxr(v143, v141));
  v93 = v203;
  v102 = v206;
  if (!v143)
  {
    atomic_store(1u, v141);
    v192 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v192 = off_1E31FE290;
    *((_QWORD *)v192 + 1) = v141;
    v211 = v192;
    WTF::ensureOnMainThread();
    v193 = v211;
    v211 = 0;
    if (v193)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v193 + 8))(v193);
  }
LABEL_201:
  if ((v102 & 1) == 0)
  {
    v144 = (unsigned int *)(v97 + 8);
    do
    {
      v145 = __ldaxr(v144);
      v146 = v145 - 1;
    }
    while (__stlxr(v146, v144));
    if (!v146)
    {
      atomic_store(1u, v144);
      v176 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v176 = off_1E31FE290;
      *((_QWORD *)v176 + 1) = v144;
      v211 = v176;
      WTF::ensureOnMainThread();
      v177 = v211;
      v211 = 0;
      if (v177)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v177 + 8))(v177);
    }
  }
  if ((v93 & 1) == 0)
  {
    v147 = (unsigned int *)(v92 + 8);
    do
    {
      v148 = __ldaxr(v147);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, v147));
    if (!v149)
    {
      atomic_store(1u, v147);
      v178 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v178 = off_1E31FE290;
      *((_QWORD *)v178 + 1) = v147;
      v211 = v178;
      WTF::ensureOnMainThread();
      v179 = v211;
      v211 = 0;
      if (v179)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v179 + 8))(v179);
    }
  }
LABEL_209:
  if ((v89 & 1) == 0)
  {
    if (*(_DWORD *)(v87 + 24) == 2)
    {
      if ((*(_WORD *)(v87 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v87);
    }
    else
    {
      *(_DWORD *)(v87 + 24) -= 2;
    }
  }
  this = (uint64_t)v208;
  v208 = 0;
  if (!this)
  {
LABEL_215:
    if (!v10)
      return this;
    goto LABEL_216;
  }
  if (*(_DWORD *)this != 2)
  {
    *(_DWORD *)this -= 2;
    goto LABEL_215;
  }
  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v81);
  if (v10)
  {
LABEL_216:
    if (*(_DWORD *)(v10 + 24) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    else
      --*(_DWORD *)(v10 + 24);
  }
  return this;
}

uint64_t WebCore::FrameLoader::effectiveSandboxFlags(WebCore::FrameLoader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = *((unsigned int *)this + 82);
  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 56);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 144))
      {
        v5 = (unsigned int *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v2 = *(_DWORD *)(*(_QWORD *)(v4 + 296) + 268) | v2;
        do
        {
          v7 = __ldaxr(v5);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v5));
        if (!v8)
        {
          atomic_store(1u, v5);
          v13 = v5;
          v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v14 = off_1E31FE290;
          v14[1] = v13;
          v15 = v14;
          WTF::ensureOnMainThread();
          if (v15)
            (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        }
      }
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 120);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 24) = v11 + 2;
      v2 = *(_DWORD *)(v10 + 120) | v2;
      if (v11)
      {
        *(_DWORD *)(v10 + 24) = v11;
      }
      else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
    }
  }
  return v2;
}

unint64_t WebCore::ResourceResponseBase::isAttachment(WebCore::ResourceResponseBase *this)
{
  WTF::StringImpl *v2;
  double v3;
  double v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *i;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;

  WebCore::ResourceResponse::platformLazyInit((uint64_t)this, 2);
  v6 = *((unsigned int *)this + 23);
  if ((_DWORD)v6)
  {
    v7 = 0;
    for (i = (_QWORD *)(*((_QWORD *)this + 10) + 8); *((_WORD *)i - 4) != 18; i += 2)
    {
      if (v6 == ++v7)
        return 0;
    }
    if (v7 >= v6)
    {
      __break(0xC471u);
      JUMPOUT(0x194387B64);
    }
    v11 = *i;
    if (*i)
    {
      v12 = *(unsigned int *)(v11 + 4);
      *(_DWORD *)v11 += 2;
      v13 = *(_DWORD *)(v11 + 16);
      v9 = *(_QWORD *)(v11 + 8);
      if ((v13 & 4) != 0)
      {
        if (!(_DWORD)v12)
          goto LABEL_26;
        v14 = 16;
        if (v12 < 0x10)
          v14 = v12;
        v15 = v14;
        v16 = *(_BYTE **)(v11 + 8);
        do
        {
          if (*v16 == 59)
            goto LABEL_18;
          ++v16;
          --v15;
        }
        while (v15);
        if (v12 >= 0x11)
        {
          v16 = memchr((void *)(v9 + v14), 59, v12 - v14);
          if (v16)
          {
LABEL_18:
            v17 = (_DWORD)v16 - v9;
            goto LABEL_19;
          }
          v17 = -1;
          goto LABEL_20;
        }
        v17 = -1;
      }
      else
      {
        v17 = WTF::find<char16_t,(void *)0>(*(_QWORD *)(v11 + 8), v12, 0x3Bu, 0, v3, v4, v5);
      }
LABEL_19:
      if (!(_DWORD)v12)
        goto LABEL_26;
LABEL_20:
      if (v12 <= v17)
        v18 = v12;
      else
        v18 = v17;
      v19 = v18 | ((unint64_t)((v13 >> 2) & 1) << 32);
      if (((v13 >> 2) & 1) != 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_25;
        v20 = 0;
        while (1)
        {
          v21 = *(unsigned __int8 *)(v9 + v20);
          if ((v21 - 9) >= 5 && v21 != 32)
            break;
          if (v18 == ++v20)
            goto LABEL_26;
        }
        if ((_DWORD)v18 != 1)
        {
          v22 = (v18 - 1);
          while (v22 < v18)
          {
            v23 = *(unsigned __int8 *)(v9 + v22);
            if ((v23 - 9) < 5 || v23 == 32)
            {
              if ((_DWORD)--v22)
                continue;
            }
            if (!(_DWORD)v20 && (_DWORD)v22 == (_DWORD)v18 - 1)
              goto LABEL_25;
            goto LABEL_43;
          }
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        if ((_DWORD)v20)
        {
          LODWORD(v22) = 0;
LABEL_43:
          v24 = (v22 - v20 + 1);
          if (v18 - v20 < v24)
            goto LABEL_61;
          v9 += v20;
          v19 = v24 | 0x100000000;
        }
      }
      else if ((_DWORD)v18)
      {
        v25 = 0;
        v26 = (unsigned __int16 *)v9;
        while (1)
        {
          v27 = *v26;
          if ((v27 - 9) >= 5 && v27 != 32)
            break;
          ++v25;
          ++v26;
          if (v18 == v25)
            goto LABEL_26;
        }
        if ((_DWORD)v18 != 1)
        {
          v28 = (v18 - 1);
          while (v28 < v18)
          {
            v29 = *(unsigned __int16 *)(v9 + 2 * v28);
            if ((v29 - 9) < 5 || v29 == 32)
            {
              if ((_DWORD)--v28)
                continue;
            }
            if (!(_DWORD)v25 && (_DWORD)v28 == (_DWORD)v18 - 1)
              goto LABEL_25;
            goto LABEL_60;
          }
          goto LABEL_61;
        }
        if ((_DWORD)v25)
        {
          LODWORD(v28) = 0;
LABEL_60:
          v19 = (v28 - v25 + 1);
          v9 = (unint64_t)v26;
          if (v18 - v25 < v19)
            goto LABEL_61;
        }
      }
LABEL_25:
      if ((_DWORD)v19 == 10)
      {
        if ((v19 & 0x100000000) != 0)
        {
          if ((*(_BYTE *)v9 & 0xDF) != 0x41
            || (*(_BYTE *)(v9 + 1) & 0xDF) != 0x54
            || (*(_BYTE *)(v9 + 2) & 0xDF) != 0x54
            || (*(_BYTE *)(v9 + 3) & 0xDF) != 0x41
            || (*(_BYTE *)(v9 + 4) & 0xDF) != 0x43
            || (*(_BYTE *)(v9 + 5) & 0xDF) != 0x48
            || (*(_BYTE *)(v9 + 6) & 0xDF) != 0x4D
            || (*(_BYTE *)(v9 + 7) & 0xDF) != 0x45
            || (*(_BYTE *)(v9 + 8) & 0xDF) != 0x4E)
          {
            goto LABEL_26;
          }
          v30 = *(unsigned __int8 *)(v9 + 9);
        }
        else
        {
          if ((*(_WORD *)v9 & 0xFFDF) != 0x41
            || (*(_WORD *)(v9 + 2) & 0xFFDF) != 0x54
            || (*(_WORD *)(v9 + 4) & 0xFFDF) != 0x54
            || (*(_WORD *)(v9 + 6) & 0xFFDF) != 0x41
            || (*(_WORD *)(v9 + 8) & 0xFFDF) != 0x43
            || (*(_WORD *)(v9 + 10) & 0xFFDF) != 0x48
            || (*(_WORD *)(v9 + 12) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v9 + 14) & 0xFFDF) != 0x45
            || (*(_WORD *)(v9 + 16) & 0xFFDF) != 0x4E)
          {
            goto LABEL_26;
          }
          v30 = *(unsigned __int16 *)(v9 + 18);
        }
        v9 = (v30 & 0xFFFFFFDF) == 84;
LABEL_27:
        if (*(_DWORD *)v11 != 2)
        {
          *(_DWORD *)v11 -= 2;
          return v9;
        }
LABEL_62:
        WTF::StringImpl::destroy((WTF::StringImpl *)v11, v2);
        return v9;
      }
LABEL_26:
      v9 = 0;
      goto LABEL_27;
    }
  }
  return 0;
}

uint64_t WebCore::ContentSecurityPolicy::ContentSecurityPolicy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const WebCore::SecurityOrigin *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  *(_DWORD *)a1 = 0;
  v6 = *(_QWORD *)(a3 + 104);
  if (v6)
    goto LABEL_26;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a3 + 96;
  v21 = *(unsigned int **)(a3 + 104);
  *(_QWORD *)(a3 + 104) = v6;
  if (!v21)
    goto LABEL_26;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, a2);
  }
  v6 = *(_QWORD *)(a3 + 104);
  if (v6)
  {
LABEL_26:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a3 + 274))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3))
      v8 = a3;
    else
      v8 = 0;
    if (v8)
      v9 = v8 + 440;
    else
      v9 = 0;
  }
  else
  {
    v9 = a3 + 360;
  }
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v10;
  v11 = *(_DWORD *)(a1 + 40) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 40) = v11;
  v12 = v11 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 40) = v12;
  v13 = v12 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 40) = v13;
  v14 = v13 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 40) = a2[1] & 0xFFFFFFC0 | v14 & 0x3F;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 60) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *(_BYTE *)(a1 + 181) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 182) = 0;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)a3, (WTF::StringImpl *)a2);
  WebCore::ContentSecurityPolicy::updateSourceSelf((WebCore::ContentSecurityPolicy *)a1, v15);
  if (!*(_BYTE *)(a3 + 274))
  {
    v17 = *(_QWORD *)(a3 + 336);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v20)
            *(_BYTE *)(a1 + 233) = *(_BYTE *)(v20 + 1808);
        }
      }
    }
  }
  return a1;
}

void WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(WebCore::ContentSecurityPolicy *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WebCore::ContentSecurityPolicyDirectiveList **v18;
  uint64_t v19;
  WebCore::ContentSecurityPolicyDirectiveList *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore::ContentSecurityPolicyDirectiveList *v30;
  WTF::StringImpl *v31;
  char v32;
  char *v33;
  char v34;

  if (*((_BYTE *)this + 224))
  {
    v3 = *((unsigned int *)this + 53);
    if ((_DWORD)v3)
    {
      v27 = (WTF::StringImpl **)*((_QWORD *)this + 25);
      v28 = 16 * v3;
      do
      {
        v29 = *v27;
        *v27 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, a2);
          else
            *(_DWORD *)v29 -= 2;
        }
        v27 += 2;
        v28 -= 16;
      }
      while (v28);
    }
    v4 = (WTF *)*((_QWORD *)this + 25);
    if (v4)
    {
      *((_QWORD *)this + 25) = 0;
      *((_DWORD *)this + 52) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  v5 = *((_QWORD *)this + 24);
  if (!v5)
    goto LABEL_6;
  v23 = *(unsigned int *)(v5 - 4);
  if (!(_DWORD)v23)
  {
LABEL_52:
    WTF::fastFree((WTF *)(v5 - 16), a2);
LABEL_6:
    v6 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = (WTF::StringImpl *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, a2);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = *((unsigned int *)this + 37);
    if ((_DWORD)v9)
    {
      v18 = (WebCore::ContentSecurityPolicyDirectiveList **)*((_QWORD *)this + 17);
      v19 = 8 * v9;
      do
      {
        v20 = *v18;
        *v18 = 0;
        if (v20)
        {
          WebCore::ContentSecurityPolicyDirectiveList::~ContentSecurityPolicyDirectiveList(v20, a2);
          WTF::fastFree(v21, v22);
        }
        ++v18;
        v19 -= 8;
      }
      while (v19);
    }
    v10 = (WTF *)*((_QWORD *)this + 17);
    if (v10)
    {
      *((_QWORD *)this + 17) = 0;
      *((_DWORD *)this + 36) = 0;
      WTF::fastFree(v10, a2);
    }
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    std::unique_ptr<WebCore::ContentSecurityPolicySource>::reset[abi:sn180100]((WTF::StringImpl **)this + 15, 0);
    if (*((_BYTE *)this + 112))
    {
      v13 = (WTF::StringImpl *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v12);
      }
    }
    return;
  }
  v24 = *((_QWORD *)this + 24);
  while (1)
  {
    v25 = *(unsigned int *)(v24 + 24);
    if ((_DWORD)v25 == -1)
      break;
    v33 = &v32;
    if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v25])(&v33, v24) & 1) == 0)
    {
      v26 = *(unsigned int *)(v24 + 24);
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v26])(&v34, v24);
      *(_DWORD *)(v24 + 24) = -1;
    }
    v24 += 32;
    if (!--v23)
      goto LABEL_52;
  }
  v30 = (WebCore::ContentSecurityPolicyDirectiveList *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::ContentSecurityPolicyDirectiveList::~ContentSecurityPolicyDirectiveList(v30, v31);
}

void WebCore::ContentSecurityPolicyDirectiveList::~ContentSecurityPolicyDirectiveList(WebCore::ContentSecurityPolicyDirectiveList *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((unsigned int *)this + 57);
  if ((_DWORD)v5)
  {
    v32 = (WTF::StringImpl **)*((_QWORD *)this + 27);
    v33 = 8 * v5;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      ++v32;
      v33 -= 8;
    }
    while (v33);
  }
  v6 = (WTF *)*((_QWORD *)this + 27);
  if (v6)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 53);
  if ((_DWORD)v7)
  {
    v35 = (WTF::StringImpl **)*((_QWORD *)this + 25);
    v36 = 8 * v7;
    do
    {
      v37 = *v35;
      *v35 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, a2);
        else
          *(_DWORD *)v37 -= 2;
      }
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  v8 = (WTF *)*((_QWORD *)this + 25);
  if (v8)
  {
    *((_QWORD *)this + 25) = 0;
    *((_DWORD *)this + 52) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
}

uint64_t WebCore::ContentSecurityPolicy::ContentSecurityPolicy(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::SecurityOrigin *v18;
  char v19;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_DWORD *)(a1 + 40) & 0xFFFFFFFE | a2[1] & 1;
  *(_DWORD *)(a1 + 40) = v6;
  v7 = v6 & 0xFFFFFFFD | (2 * ((*((_DWORD *)a2 + 2) >> 1) & 1));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = v7 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 2) >> 2) & 1));
  *(_DWORD *)(a1 + 40) = v8;
  v9 = v8 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 2) >> 3) & 7));
  *(_DWORD *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 40) = a2[1] & 0xFFFFFFC0 | v9 & 0x3F;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)(a1 + 60) = *(uint64_t *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 68) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 2) &= ~1u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *(_BYTE *)(a1 + 181) = 1;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 182) = 0;
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)(a1 + 32), (uint64_t *)&v18);
  v10 = v18;
  WebCore::ContentSecurityPolicy::updateSourceSelf((WebCore::ContentSecurityPolicy *)a1, v18);
  v18 = 0;
  do
  {
    v12 = __ldaxr((unsigned int *)v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v10));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v10);
    v15 = (WTF::StringImpl *)*((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 6) = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v11);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = (WTF::StringImpl *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v11);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *((unsigned int *)v10 + 8);
    if ((_DWORD)v17 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_14[v17])(&v19, (char *)v10 + 8);
    *((_DWORD *)v10 + 8) = -1;
    WTF::fastFree(v10, v11);
  }
  return a1;
}

void WebCore::ContentSecurityPolicy::updateSourceSelf(WebCore::ContentSecurityPolicy *this, const WebCore::SecurityOrigin *a2)
{
  uint64_t v2;
  char *v5;
  WTF::String *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  WebCore::ContentSecurityPolicySourceListDirective *v21;
  char v22;
  WTF::StringImpl *v23;

  v2 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v2 == -1)
    goto LABEL_17;
  v5 = (char *)a2 + 8;
  v23 = (WTF::StringImpl *)&v22;
  v6 = (WTF::String *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_2[v2])(&v23, (char *)a2 + 8);
  WTF::String::convertToASCIILowercase(v6);
  v8 = v23;
  v23 = 0;
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v8;
  if (!v9)
    goto LABEL_5;
  v10 = *(_DWORD *)v9 - 2;
  if (*(_DWORD *)v9 == 2)
  {
    WTF::StringImpl::destroy(v9, v7);
    v9 = v23;
    v23 = 0;
    if (!v9)
      goto LABEL_5;
    v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v20);
      goto LABEL_5;
    }
  }
  *(_DWORD *)v9 = v10;
LABEL_5:
  v11 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v11 == -1
    || (v23 = (WTF::StringImpl *)&v22,
        v12 = ((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_2[v11])(&v23, v5), v13 = *((unsigned int *)a2 + 8), (_DWORD)v13 == -1))
  {
LABEL_17:
    v21 = (WebCore::ContentSecurityPolicySourceListDirective *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::ContentSecurityPolicySourceListDirective::~ContentSecurityPolicySourceListDirective(v21);
    return;
  }
  v14 = (_DWORD **)v12;
  v23 = (WTF::StringImpl *)&v22;
  v15 = ((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_0[v13])(&v23, v5);
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v16 = this;
  v17 = (_DWORD *)*((_QWORD *)this + 16);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v16 + 8) = v17;
  v18 = *v14;
  if (*v14)
    *v18 += 2;
  *(_QWORD *)(v16 + 16) = v18;
  v19 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v19 += 2;
  *(_QWORD *)(v16 + 24) = v19;
  *(_DWORD *)(v16 + 32) = v15;
  *(_WORD *)(v16 + 36) = 0;
  *(_BYTE *)(v16 + 38) = 1;
  std::unique_ptr<WebCore::ContentSecurityPolicySource>::reset[abi:sn180100]((WTF::StringImpl **)this + 15, (WTF::StringImpl *)v16);
}

void WebCore::ContentSecurityPolicySourceListDirective::~ContentSecurityPolicySourceListDirective(WebCore::ContentSecurityPolicySourceListDirective *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E34036C8;
  WebCore::ContentSecurityPolicySourceList::~ContentSecurityPolicySourceList((WebCore::ContentSecurityPolicySourceListDirective *)((char *)this + 40), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E3403678;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::fastFree(this, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = off_1E34036C8;
  WebCore::ContentSecurityPolicySourceList::~ContentSecurityPolicySourceList((WebCore::ContentSecurityPolicySourceListDirective *)((char *)this + 40), a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  *(_QWORD *)this = &unk_1E3403678;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void WebCore::ContentSecurityPolicySourceList::~ContentSecurityPolicySourceList(WebCore::ContentSecurityPolicySourceList *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4 + 8;
      do
      {
        if (*(unsigned __int8 *)(v6 - 8) != 254)
        {
          v7 = *(WTF **)v6;
          if (*(_QWORD *)v6)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
            WTF::fastFree(v7, a2);
          }
        }
        v6 += 24;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 3);
  if (v8)
  {
    v16 = *((unsigned int *)this + 8);
    if ((_DWORD)v16)
    {
      v17 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        ++v17;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 5);
  if ((_DWORD)v9)
  {
    v10 = 40 * v9;
    v11 = (WTF::StringImpl **)(*((_QWORD *)this + 1) + 24);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(v11 - 1);
      *(v11 - 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = *(v11 - 2);
      *(v11 - 2) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, a2);
        else
          *(_DWORD *)v14 -= 2;
      }
      v11 += 5;
      v10 -= 40;
    }
    while (v10);
  }
  v15 = (WTF *)*((_QWORD *)this + 1);
  if (v15)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v15, a2);
  }
}

void WebCore::Document::setCookieURL(WebCore::Document *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;

  if ((WTF::equal(*((WTF **)this + 121), *(const WTF::StringImpl **)a2, a3) & 1) == 0)
  {
    v6 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v6 += 2;
    v7 = (WTF::StringImpl *)*((_QWORD *)this + 121);
    *((_QWORD *)this + 121) = v6;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v5);
      else
        *(_DWORD *)v7 -= 2;
    }
    v8 = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 61) = *(_OWORD *)((char *)a2 + 8);
    *((_OWORD *)this + 62) = v8;
    if ((*((_QWORD *)this + 355) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 2808));
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 359);
    *((_QWORD *)this + 359) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v5);
      else
        *(_DWORD *)v9 -= 2;
    }
    WebCore::Document::updateCachedCookiesEnabled(this, v5);
  }
}

uint64_t WebCore::FrameLoader::effectiveReferrerPolicy(WebCore::FrameLoader *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v2 = *(_QWORD *)(v1 + 56);
  if (v2 && (v5 = *(_QWORD *)(v2 + 8)) != 0 && !*(_BYTE *)(v5 + 144))
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 192) + 8))(*(_QWORD *)(v5 + 296) + 192);
    do
    {
      v8 = __ldaxr(v6);
      v9 = --v8 == 0;
    }
    while (__stlxr(v8, v6));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 160);
    if (!v3)
      return 7;
    v10 = *(_QWORD *)(v3 + 8);
    if (!v10 || *(_BYTE *)(v10 + 144))
      return 7;
    v6 = (unsigned int *)(v10 + 8);
    do
      v11 = __ldaxr(v6);
    while (__stlxr(v11 + 1, v6));
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 296) + 192) + 8))(*(_QWORD *)(v10 + 296) + 192);
    do
    {
      v12 = __ldaxr(v6);
      v9 = --v12 == 0;
    }
    while (__stlxr(v12, v6));
  }
  if (v9)
  {
    atomic_store(1u, v6);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v6;
    v15 = v14;
    WTF::ensureOnMainThread();
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  return v4;
}

unint64_t WebCore::Document::addToDocumentsMap(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v20;
  int v21;
  BOOL v22;
  void *v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _QWORD v44[5];

  v1 = this;
  {
    v2 = WebCore::Document::allDocumentsMap(void)::documents;
    v4 = *(_QWORD *)(this + 416);
    v3 = *(_QWORD *)(this + 424);
    v5 = *(_QWORD *)(this + 432);
    if (WebCore::Document::allDocumentsMap(void)::documents)
    {
LABEL_3:
      v6 = *(_DWORD *)(v2 - 8);
      goto LABEL_4;
    }
  }
  else
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
    v4 = *(_QWORD *)(this + 416);
    v3 = *(_QWORD *)(this + 424);
    v5 = *(_QWORD *)(this + 432);
  }
  this = (unint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand();
  v2 = WebCore::Document::allDocumentsMap(void)::documents;
  if (WebCore::Document::allDocumentsMap(void)::documents)
    goto LABEL_3;
  v6 = 0;
LABEL_4:
  v7 = (v3 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v3 - 1640531527) << 16) ^ ((unsigned __int16)v3
                                                                                          - 1640531527);
  v8 = (v3 >> 37) & 0x7FFF800 ^ ((v7 + WORD2(v3) + (v7 >> 11)) << 16) ^ (v7 + WORD2(v3) + (v7 >> 11));
  v9 = (v4 >> 5) & 0x7FFF800 ^ ((v8 + (unsigned __int16)v4 + (v8 >> 11)) << 16) ^ (v8
                                                                                               + (unsigned __int16)v4
                                                                                               + (v8 >> 11));
  v10 = (v4 >> 37) & 0x7FFF800 ^ ((v9 + WORD2(v4) + (v9 >> 11)) << 16) ^ (v9 + WORD2(v4) + (v9 >> 11));
  v11 = (v10 + (v10 >> 11)) ^ (8 * (v10 + (v10 >> 11)));
  v12 = (v11 + (v11 >> 5)) ^ (4 * (v11 + (v11 >> 5)));
  v13 = (v12 + (v12 >> 15)) ^ ((v12 + (v12 >> 15)) << 10);
  if (!v13)
    v13 = 0x800000;
  v14 = v13 & v6;
  v15 = (unint64_t *)(v2 + 48 * (v13 & v6));
  v17 = *v15;
  v16 = v15[1];
  v18 = v15[2];
  if (*(_OWORD *)v15 == 0 && v18 == 0)
  {
LABEL_27:
    *v15 = v4;
    v15[1] = v3;
    v15[2] = v5;
    this = WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v1);
    do
      v26 = __ldaxr((unsigned int *)this);
    while (__stlxr(v26 + 1, (unsigned int *)this));
    v27 = v15[4];
    v15[4] = this;
    if (v27)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)v27);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v27));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)v27);
        v35 = *(unsigned int *)(v27 + 28);
        if ((_DWORD)v35)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v35));
        v36 = *(WTF **)(v27 + 16);
        if (v36)
        {
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 0;
          WTF::fastFree(v36, v25);
        }
        this = WTF::fastFree((WTF *)v27, v25);
      }
    }
    if (WebCore::Document::allDocumentsMap(void)::documents)
      v28 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) + 1;
    else
      v28 = 1;
    *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) = v28;
    if (WebCore::Document::allDocumentsMap(void)::documents)
      v29 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 16) + v29);
    v31 = *(unsigned int *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_36;
    }
    else
    {
      if (3 * v31 > 4 * v30)
        goto LABEL_36;
      if (!(_DWORD)v31)
      {
        v37 = 8;
LABEL_50:
        this = (unint64_t)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(v37);
        goto LABEL_36;
      }
    }
    v37 = (_DWORD)v31 << (6 * *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12) >= (2 * v31));
    goto LABEL_50;
  }
  v20 = 0;
  v21 = 1;
  while (1)
  {
    v22 = v16 == v3 && v17 == v4;
    if (v22 && v18 == v5)
      break;
    if (v18 == -1)
      v20 = v15;
    v14 = (v14 + v21) & v6;
    v15 = (unint64_t *)(v2 + 48 * v14);
    v17 = *v15;
    v16 = v15[1];
    v18 = v15[2];
    ++v21;
    if (*(_OWORD *)v15 == 0 && v18 == 0)
    {
      if (v20)
      {
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        v20[4] = 0;
        --*(_DWORD *)(v2 - 16);
        v15 = v20;
      }
      goto LABEL_27;
    }
  }
LABEL_36:
  v32 = WebCore::staticSharedLogger(void)::logger;
  if (!WebCore::staticSharedLogger(void)::logger)
    return this;
  {
    if (WebCore::Document::allDocumentsMap(void)::documents
      && *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 12))
    {
      v38 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::begin(&WebCore::Document::allDocumentsMap(void)::documents);
      if (WebCore::Document::allDocumentsMap(void)::documents)
      {
        v40 = *(_DWORD *)(WebCore::Document::allDocumentsMap(void)::documents - 4);
        v41 = WebCore::Document::allDocumentsMap(void)::documents + 48 * v40;
      }
      else
      {
        v41 = 0;
        v40 = 0;
      }
      v44[0] = &WebCore::Document::allDocumentsMap(void)::documents;
      v44[1] = v38;
      v44[2] = v39;
      v44[3] = v41;
      v44[4] = WebCore::Document::allDocumentsMap(void)::documents + 48 * v40;
      this = WTF::allOf<WTF::SizedIteratorRange<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WebCore::Document::configureSharedLogger(void)::$_0>(v44);
      v42 = this;
      goto LABEL_59;
    }
  }
  else
  {
    WebCore::Document::allDocumentsMap(void)::documents = 0;
  }
  v42 = 0;
LABEL_59:
  {
    v43 = WebCore::sharedLoggerOwner(void)::owner;
  }
  else
  {
    this = WTF::cryptographicallyRandomNumber<unsigned int>();
    v43 = this;
    WebCore::sharedLoggerOwner(void)::owner = this;
  }
  if (*(_QWORD *)(v32 + 16) == v43)
    *(_BYTE *)(v32 + 12) = v42;
  return this;
}

WebCore::Style::Scope *WebCore::Style::Scope::Scope(WebCore::Style::Scope *this, WebCore::Document *a2)
{
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = a2;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v4 = *(unsigned int **)(StatusReg + 736);
  if (!v4)
    v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 15) = v4;
  *((_QWORD *)this + 10) = off_1E31F7378;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E3450210;
  v6[1] = WebCore::Style::Scope::pendingUpdateTimerFired;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)this + 16) = v6;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 256) = 0;
  *(_QWORD *)((char *)this + 230) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = this;
  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v8 = 0;
  v9 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 16) = qword_1ECE913C8;
  v10 = qword_1ECE913D0;
  v11 = (_DWORD *)qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D0;
  ++*v11;
  *(_QWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = qword_1ECE913E0;
  *(_QWORD *)(v8 + 48) = 0;
  v12 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(v8 + 56) = v12;
  *(_QWORD *)(v7 + 24) = v8;
  *(_BYTE *)(v7 + 32) = 0;
  *((_QWORD *)this + 37) = v7;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = 0;
  v13[1] = 0;
  *((_BYTE *)v13 + 8) = 1;
  *((_QWORD *)this + 38) = v13;
  *((_QWORD *)this + 39) = 0;
  return this;
}

uint64_t WebCore::DeviceOrientationClientIOS::setController(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t WebCore::DeviceMotionClientIOS::setController(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t *WebCore::SecurityContext::enforceSandboxFlags(uint64_t *this, int a2, int a3)
{
  WebCore::SecurityContext *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v3 = (WebCore::SecurityContext *)this;
  if (a3)
    *((_DWORD *)this + 18) |= a2;
  v4 = *((_DWORD *)this + 19) | a2;
  *((_DWORD *)this + 19) = v4;
  if ((v4 & 4) != 0)
  {
    this = (uint64_t *)WebCore::SecurityContext::securityOriginPolicy((WebCore::SecurityContext *)this);
    if (this)
    {
      this = (uint64_t *)WebCore::SecurityContext::securityOriginPolicy(v3);
      if (*(_DWORD *)(this[1] + 32) != 1)
      {
        WebCore::SecurityOrigin::createOpaque(&v9);
        v5 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v5 = 1;
        v6 = v9;
        v9 = 0;
        v10 = 0;
        *(_QWORD *)(v5 + 8) = v6;
        v11 = v5;
        WebCore::SecurityContext::setSecurityOriginPolicy((uint64_t)v3, (WTF::StringImpl *)&v11);
        if (v11)
          WTF::RefCounted<WebCore::SecurityOriginPolicy>::deref(v11, v7);
        WTF::Ref<WebCore::SecurityOriginPolicy,WTF::RawPtrTraits<WebCore::SecurityOriginPolicy>,WTF::DefaultRefDerefTraits<WebCore::SecurityOriginPolicy>>::~Ref(&v10, v7);
        return WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(&v9, v8);
      }
    }
  }
  return this;
}

uint64_t WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthWhenIgnoringScalingConstraints(WebCore::ViewportConfiguration *this, double a2)
{
  double v2;
  uint64_t result;
  double v5;
  double v6;
  BOOL v7;
  BOOL v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  float v13;
  double v14;
  double v15;
  float v16;
  float v17;
  float v18;

  v2 = *((double *)this + 28);
  if (v2 == a2)
    return 0;
  v5 = vabdd_f64(v2, a2);
  v6 = fabs(v2);
  v7 = v6 < 1.0 && v6 * 1.79769313e308 < v5;
  if (v7
    || (v6 * 2.22507386e-308 > v5 ? (v8 = v6 <= 1.0) : (v8 = 1),
        (v9 = v5 / v6, v8) ? (v10 = v9 > 2.22044605e-16) : (v10 = 0),
        v10
     || (v11 = fabs(a2), v11 < 1.0) && v11 * 1.79769313e308 < v5
     || ((result = 0, v11 * 2.22507386e-308 > v5) ? (v12 = v11 <= 1.0) : (v12 = 1), v12 && v5 / v11 > 2.22044605e-16)))
  {
    if (!*((_BYTE *)this + 232))
    {
      result = 0;
      *((double *)this + 28) = a2;
      return result;
    }
    *((double *)this + 28) = a2;
    if ((a2 != 0.0) == (v2 != 0.0))
      return 0;
    v13 = *((float *)this + 32);
    if (v13 == 0.0 || (v14 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v14 == 0.0))
    {
      v15 = *((double *)this + 25);
    }
    else
    {
      if (v14 < v13)
        v14 = v13;
      v15 = *((double *)this + 25) * v13 / v14;
    }
    v16 = v15;
    v17 = v13 / v16;
    v18 = *((float *)this + 33) / v16;
    *((float *)this + 30) = v17;
    *((float *)this + 31) = v18;
    if (v13 < 0.0 && v13 > 0.0 && (*((_BYTE *)this + 192) & 1) == 0)
    {
      *((_DWORD *)this + 30) = 0;
      *((float *)this + 31) = roundf(v18 * (float)(0.0 / v17));
    }
    WebCore::ViewportConfiguration::updateConfiguration(this);
    return 1;
  }
  return result;
}

uint64_t PAL::initMCProfileConnection(PAL *this)
{
  if (qword_1ECE7E430 != -1)
    dispatch_once(&qword_1ECE7E430, &__block_literal_global_4_5);
  return qword_1ECE7E438;
}

uint64_t PAL::CryptoDigest::computeHash@<X0>(uint64_t this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  WebCore::LocalFrameView *v19;

  *a2 = 0;
  a2[1] = 0;
  v3 = this;
  switch(**(_DWORD **)this)
  {
    case 0:
      v4 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x14);
      *a2 = v4;
      v5 = *(_QWORD *)v3;
      v6 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      a2[1] = (unsigned __int8 *)0x1400000014;
      if (v6)
        goto LABEL_12;
      this = CC_SHA1_Final(v4, *(CC_SHA1_CTX **)(v5 + 8));
      break;
    case 1:
      v7 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x1C);
      *a2 = v7;
      v8 = *(_QWORD *)v3;
      v9 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      a2[1] = (unsigned __int8 *)0x1C0000001CLL;
      if (v9 != 1)
        goto LABEL_12;
      this = CC_SHA224_Final(v7, *(CC_SHA256_CTX **)(v8 + 8));
      break;
    case 2:
      v10 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *a2 = v10;
      v11 = *(_QWORD *)v3;
      v12 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      a2[1] = (unsigned __int8 *)0x2000000020;
      if (v12 != 1)
        goto LABEL_12;
      this = CC_SHA256_Final(v10, *(CC_SHA256_CTX **)(v11 + 8));
      break;
    case 3:
      v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x30);
      *a2 = v13;
      v14 = *(_QWORD *)v3;
      v15 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      a2[1] = (unsigned __int8 *)0x3000000030;
      if (v15 != 2)
        goto LABEL_12;
      this = CC_SHA384_Final(v13, *(CC_SHA512_CTX **)(v14 + 8));
      break;
    case 4:
      v16 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x40);
      *a2 = v16;
      v17 = *(_QWORD *)v3;
      v18 = *(_DWORD *)(*(_QWORD *)v3 + 16);
      a2[1] = (unsigned __int8 *)0x4000000040;
      if (v18 == 2)
      {
        this = CC_SHA512_Final(v16, *(CC_SHA512_CTX **)(v17 + 8));
      }
      else
      {
LABEL_12:
        v19 = (WebCore::LocalFrameView *)std::__throw_bad_variant_access[abi:sn180100]();
        this = WebCore::LocalFrameView::viewportConstrainedObjectsRect(v19);
      }
      break;
    default:
      return this;
  }
  return this;
}

unint64_t WebCore::LocalFrameView::viewportConstrainedObjectsRect(WebCore::LocalFrameView *this)
{
  _QWORD *v2;
  int32x4_t v3;
  uint64_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  unint64_t v9;
  __int32 v10;
  unint64_t v11;
  int v12;
  int v13;
  int32x2_t v14;
  int8x8_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  int v20;
  WTF *v22;
  void *v23;
  int8x8_t v24;
  int8x16_t v25;

  v2 = (_QWORD *)((char *)this + 64);
  v3.i64[0] = (*(uint64_t (**)(char *, _QWORD, _QWORD))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 0);
  v3.i64[1] = v4;
  v5.i64[0] = 0xFE000000FE000000;
  v5.i64[1] = 0xFE000000FE000000;
  v6 = (int8x16_t)vcgtq_s32(v3, v5);
  v7.i64[0] = 0xFE000000FE000000;
  v7.i64[1] = 0xFE000000FE000000;
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v25 = vorrq_s8((int8x16_t)(*(_OWORD *)&v6 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v7, v3), v8, (int8x16_t)vshlq_n_s32(v3, 6uLL)), v6));
  v9 = (*(uint64_t (**)(_QWORD *))(*v2 + 496))(v2);
  v10 = v9;
  v11 = HIDWORD(v9);
  v12 = (*(uint64_t (**)(_QWORD *))(*v2 + 528))(v2);
  v13 = (*(uint64_t (**)(_QWORD *))(*v2 + 536))(v2);
  v14.i32[0] = v10;
  v14.i32[1] = v12 + v13 + v11;
  v15 = (int8x8_t)vcgt_s32(v14, (int32x2_t)0xFE000000FE000000);
  v24 = vorr_s8((int8x8_t)(*(_QWORD *)&v15 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v14), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v14, 6uLL)), v15));
  v16 = (_QWORD *)v2[33];
  v17 = v16[3];
  v18 = 1.0;
  if (v17)
  {
    v19 = *(_QWORD *)(v17 + 8);
    if (v19)
    {
      v20 = (*(_DWORD *)v19)++;
      if (*(_QWORD **)(v16[16] + 8) == v16 && !*(_BYTE *)(v19 + 1098))
        v18 = *(float *)(v19 + 356);
      if (v20)
      {
        *(_DWORD *)v19 = v20;
      }
      else
      {
        WebCore::Page::~Page(v19);
        WTF::fastFree(v22, v23);
        v16 = (_QWORD *)*((_QWORD *)this + 41);
      }
    }
  }
  return WebCore::LocalFrameView::rectForViewportConstrainedObjects(v25.i32, (int *)&v24, (*(_QWORD *)(v16[17] + 680) >> 4) & 1, (*(_QWORD *)(v16[17] + 664) & 0x4000000000) != 0, v18);
}

unint64_t WebCore::LocalFrameView::rectForViewportConstrainedObjects(int *a1, int *a2, int a3, char a4, float a5)
{
  int v6;
  int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  float v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unsigned int v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  int v45;
  signed int v46;
  unint64_t v47;
  CGAffineTransform v48;
  CGAffineTransform v49;
  CGAffineTransform v50;

  if (a3 || ((v7 = *a2, v6 = a2[1], *a2 >= 1) ? (v8 = v6 <= 0) : (v8 = 1), v8))
  {
    v9 = *a1;
    v10 = a1[1];
  }
  else
  {
    v13 = (float)a1[2] * 0.015625;
    if (v7 >= 0x10000)
      v14 = 0x10000;
    else
      v14 = *a2;
    v15 = (float)((float)(v13 * a5) / (float)((float)v14 * 0.015625)) * 1.5;
    v9 = *a1;
    v10 = a1[1];
    v16 = *((_QWORD *)a1 + 1);
    if (v15 < a5)
    {
      v17 = (float)v7 * 0.015625;
      v18 = (float)v6 * 0.015625;
      v19 = (float)(int)v10 * 0.015625;
      v20 = (float)SHIDWORD(v16) * 0.015625;
      v21 = v18 - v20;
      v22 = (float)(v17 - v13) + 0.0;
      v23 = (float)v9;
      v24 = (float)(v17 * (float)((float)v9 * 0.015625)) / (float)(v17 - v13);
      if (v22 <= 0.0)
        v24 = 0.0;
      v25 = (float)(v18 * v19) / v21;
      if ((float)(v21 + 0.0) <= 0.0)
        v25 = 0.0;
      v48.a = (float)(a5 / v15);
      v48.b = v48.a * 0.0;
      v48.c = v48.a * 0.0;
      v48.d = v48.a;
      v48.tx = v24;
      v48.ty = v25;
      CGAffineTransformTranslate(&v49, &v48, (float)-v24, (float)-v25);
      v50 = v49;
      *(float *)&v49.a = v23 * 0.015625;
      *((float *)&v49.a + 1) = v19;
      *(_QWORD *)&v49.b = __PAIR64__(LODWORD(v20), LODWORD(v13));
      v26 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v50, (const WebCore::FloatRect *)&v49);
      v30 = floorf(v26 * 64.0);
      if (v30 >= 2147500000.0)
      {
        v9 = 0x7FFFFFFF;
      }
      else if (v30 > -2147500000.0)
      {
        v9 = (int)v30;
      }
      else
      {
        v9 = 0x80000000;
      }
      v31 = floorf(v27 * 64.0);
      if (v31 >= 2147500000.0)
      {
        v10 = 0x7FFFFFFFLL;
      }
      else if (v31 <= -2147500000.0)
      {
        v10 = 0x80000000;
      }
      else
      {
        v10 = (int)v31;
      }
      v32 = v26 + v28;
      v33 = v27 + v29;
      v34 = ceilf(v32 * 64.0);
      if (v34 >= 2147500000.0)
      {
        v35 = 0x7FFFFFFF;
      }
      else if (v34 <= -2147500000.0)
      {
        v35 = 0x80000000;
      }
      else
      {
        v35 = (int)v34;
      }
      v36 = ceilf(v33 * 64.0);
      if (v36 >= 2147500000.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147500000.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)v36;
      }
      v38 = v35 - v9;
      if (__OFSUB__(v35, v9))
        v38 = (v35 >> 31) + 0x7FFFFFFF;
      v39 = v37 - v10;
      if (__OFSUB__(v37, (_DWORD)v10))
        v39 = (v37 >> 31) + 0x7FFFFFFF;
      v16 = v38 | (unint64_t)(v39 << 32);
    }
    if ((a4 & 1) == 0)
    {
      v40 = *(_QWORD *)a2;
      v41 = v9 & ~(v9 >> 31);
      v42 = __OFADD__(v9, (_DWORD)v16);
      v43 = v9 + v16;
      v44 = (v9 >> 31) + 0x7FFFFFFF;
      if (!v42)
        v44 = v43;
      if ((int)v40 >= v44)
        v45 = v44;
      else
        v45 = *(_QWORD *)a2;
      v46 = v10 + HIDWORD(v16);
      if (__OFADD__((_DWORD)v10, HIDWORD(v16)))
        v46 = (v10 >> 31) + 0x7FFFFFFF;
      v47 = HIDWORD(v40);
      if ((int)v47 >= v46)
        LODWORD(v47) = v46;
      if (v41 >= v45 || (v10 = v10 & ~((int)v10 >> 31), (int)v10 >= (int)v47))
      {
        v9 = 0;
        v10 = 0;
      }
      else
      {
        v9 = v41;
      }
    }
  }
  return v9 | (unint64_t)(v10 << 32);
}

uint64_t WebCore::JSPerformanceObserver::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 32) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), a2);
}

uint64_t ___ZN3PALL19initDDScannerResultEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E280 == -1)
  {
    result = (uint64_t)objc_getClass("DDScannerResult");
    qword_1ECE7E2A0 = result;
    if (result)
    {
LABEL_3:
      PAL::getDDScannerResultClass[0] = PAL::DDScannerResultFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E280, block);
    result = (uint64_t)objc_getClass("DDScannerResult");
    qword_1ECE7E2A0 = result;
    if (result)
      goto LABEL_3;
  }
  result = 34;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL19initCNPostalAddressEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNPostalAddress");
    qword_1ECE7E190 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNPostalAddressClass = (uint64_t)PAL::CNPostalAddressFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNPostalAddress");
    qword_1ECE7E190 = result;
    if (result)
      goto LABEL_3;
  }
  result = 37;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL19initAVOutputContextEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL19AVFoundationLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7D5F8 == -1)
  {
    result = (uint64_t)objc_getClass("AVOutputContext");
    qword_1ECE7DD70 = result;
    if (result)
    {
LABEL_3:
      PAL::getAVOutputContextClass[0] = PAL::AVOutputContextFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7D5F8, block);
    result = (uint64_t)objc_getClass("AVOutputContext");
    qword_1ECE7DD70 = result;
    if (result)
      goto LABEL_3;
  }
  result = 81;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL17initCNPhoneNumberEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL15ContactsLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7DFF0 == -1)
  {
    result = (uint64_t)objc_getClass("CNPhoneNumber");
    qword_1ECE7E180 = result;
    if (result)
    {
LABEL_3:
      PAL::getCNPhoneNumberClass = (uint64_t)PAL::CNPhoneNumberFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7DFF0, block);
    result = (uint64_t)objc_getClass("CNPhoneNumber");
    qword_1ECE7E180 = result;
    if (result)
      goto LABEL_3;
  }
  result = 36;
  __break(0xC471u);
  return result;
}

uint64_t ___ZN3PALL13initPKContactEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL18PassKitCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = 0;
  if (qword_1ECE7E478 == -1)
  {
    result = (uint64_t)objc_getClass("PKContact");
    qword_1ECE7E850 = result;
    if (result)
    {
LABEL_3:
      PAL::getPKContactClass = PAL::PKContactFunction;
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1ECE7E478, block);
    result = (uint64_t)objc_getClass("PKContact");
    qword_1ECE7E850 = result;
    if (result)
      goto LABEL_3;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RenderFlexibleBox::computeIntrinsicLogicalWidths(WebCore::RenderFlexibleBox *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  __int16 v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  signed int v25;
  uint64_t v26;
  signed int v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  signed int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v42[0] = (uint64_t)this;
  v42[1] = (uint64_t)a3;
  v42[2] = (uint64_t)a2;
  if (WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this))
  {
    v37 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
    if ((v37 & 0xFF00000000) != 0)
    {
      *(_DWORD *)a2 = v37;
      *(_DWORD *)a3 = v37;
    }
    return WebCore::RenderFlexibleBox::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)const::$_0::operator()(v42);
  }
  else
  {
    v41 = 0;
    v6 = (*(uint64_t (**)(WebCore::RenderFlexibleBox *, char *, uint64_t *))(*(_QWORD *)this + 1768))(this, (char *)&v41 + 4, &v41);
    v7 = *((unsigned int *)this + 16);
    if (v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)
      && (v8 = *(_QWORD *)((v7 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) != 0
      && (*(_BYTE *)(v8 + 45) & 4) != 0)
    {
      v9 = 0;
      do
      {
        if ((*(_DWORD *)(v8 + 20) & 0x1800000) != 0x1000000 && (*(_DWORD *)(v8 + 20) & 0x400) == 0)
        {
          v19 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
          v20 = 2;
          switch((unsigned __int16)*((_DWORD *)this + 31) >> 13)
          {
            case 1:
            case 2:
              goto LABEL_32;
            case 3:
            case 5:
              LOBYTE(v19) = 3;
              goto LABEL_32;
            case 4:
              goto LABEL_33;
            default:
              LOBYTE(v19) = 0;
LABEL_32:
              v20 = v19;
LABEL_33:
              v21 = v20 & 6;
              v22 = (unsigned __int16)*(_DWORD *)(v8 + 124) >> 13;
              if ((v22 - 2) < 2 || v22 == 4 || v22 == 5)
              {
                if (v21 == 2)
                  goto LABEL_37;
              }
              else if (v21 != 2)
              {
                goto LABEL_37;
              }
              WebCore::RenderElement::layoutIfNeeded(v8);
LABEL_37:
              v23 = WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(this, (WebCore::RenderBox *)v8);
              v40 = 0;
              WebCore::RenderBlock::computeChildPreferredLogicalWidths(this, (WebCore::RenderObject *)v8, (WebCore::LayoutUnit *)((char *)&v40 + 4), (WebCore::LayoutUnit *)&v40);
              v24 = (HIDWORD(v40) >> 31) + 0x7FFFFFFF;
              if (!__OFADD__(HIDWORD(v40), v23))
                v24 = HIDWORD(v40) + v23;
              v25 = v40 + v23;
              if (__OFADD__((_DWORD)v40, v23))
                v25 = (v40 >> 31) + 0x7FFFFFFF;
              v26 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16);
              if ((*(_BYTE *)(v26 + 20) & 2) != 0)
              {
                if (v24 <= *(_DWORD *)a2)
                  v24 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v24;
                v27 = *(_DWORD *)a3;
                if (v25 > *(_DWORD *)a3)
                  v27 = v25;
                *(_DWORD *)a3 = v27;
              }
              else
              {
                v16 = __OFADD__(*(_DWORD *)a3, v25);
                v29 = *(_DWORD *)a3 + v25;
                if (v16)
                  v29 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
                *(_DWORD *)a3 = v29;
                v30 = *(_BYTE *)(v26 + 20);
                v31 = *(_DWORD *)a2;
                if ((v30 & 0xC) != 0)
                {
                  if (v31 > v24)
                    v24 = *(_DWORD *)a2;
                }
                else
                {
                  v16 = __OFADD__(v31, v24);
                  v24 += v31;
                  if (v16)
                    v24 = (v31 >> 31) + 0x7FFFFFFF;
                }
                *(_DWORD *)a2 = v24;
              }
              ++v9;
              break;
          }
        }
        v28 = *(unsigned int *)(v8 + 47);
        if (!(v28 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
          break;
        v8 = *(_QWORD *)((v28 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
        if (!v8)
          break;
      }
      while ((*(_BYTE *)(v8 + 45) & 4) != 0);
    }
    else
    {
      v9 = 0;
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 2) != 0 || v9 <= 1)
    {
      v10 = *(_DWORD *)a2;
    }
    else
    {
      v32 = WebCore::RenderFlexibleBox::computeGap(this, (const WebCore::RenderBox *)1);
      v33 = (v9 << 6) - 64;
      if (v33 >= 0x7FFFFFFF)
        v33 = 0x7FFFFFFFLL;
      v34 = (uint64_t)(v33 * (int)v32) / 64;
      if (HIDWORD(v34) != (int)v34 >> 31)
        LODWORD(v34) = (v32 >> 31) + 0x7FFFFFFF;
      v35 = *(_DWORD *)a3 + v34;
      if (__OFADD__(*(_DWORD *)a3, (_DWORD)v34))
        v35 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
      *(_DWORD *)a3 = v35;
      v10 = *(_DWORD *)a2;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 16) + 20) & 0xC) == 0)
      {
        v16 = __OFADD__(v10, (_DWORD)v34);
        v36 = v10 + v34;
        if (v16)
          v10 = (v10 >> 31) + 0x7FFFFFFF;
        else
          v10 = v36;
        *(_DWORD *)a2 = v10;
      }
    }
    v11 = *(_DWORD *)a3;
    if (v10 > *(_DWORD *)a3)
      v11 = v10;
    *(_DWORD *)a3 = v11;
    *(_DWORD *)a2 &= ~(*(int *)a2 >> 31);
    *(_DWORD *)a3 &= ~(*(int *)a3 >> 31);
    if (v6)
    {
      v38 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 <= SHIDWORD(v41))
        v38 = HIDWORD(v41);
      *(_DWORD *)a2 = v38;
      v39 = *(_DWORD *)a3;
      if (*(_DWORD *)a3 <= (int)v41)
        v39 = v41;
      *(_DWORD *)a3 = v39;
    }
    v12 = 1352;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
      v12 = 1360;
    result = (*(uint64_t (**)(WebCore::RenderFlexibleBox *))(*(_QWORD *)this + v12))(this);
    v14 = (_DWORD)result << 6;
    if ((int)result < -33554432)
      v14 = 0x80000000;
    if ((int)result > 0x1FFFFFF)
      v14 = 0x7FFFFFFF;
    v15 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*(_DWORD *)a3, v14))
      v15 = *(_DWORD *)a3 + v14;
    *(_DWORD *)a3 = v15;
    v16 = __OFADD__(*(_DWORD *)a2, v14);
    v17 = *(_DWORD *)a2 + v14;
    if (v16)
      v17 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a2 = v17;
  }
  return result;
}

uint64_t WebCore::RenderFlexibleBox::computeGap(WebCore::RenderBox *a1, const WebCore::RenderBox *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  float v9;
  double v10;
  float v12;

  v2 = *((_QWORD *)a1 + 11);
  v4 = *(_QWORD *)(v2 + 32);
  v3 = *(_QWORD *)(v2 + 40);
  if (((_DWORD)a2 != 1) == (*(_BYTE *)(*(_QWORD *)(v4 + 16) + 20) & 2) >> 1)
  {
    if (*(_BYTE *)(v3 + 376))
      return 0;
    v6 = (unsigned __int8 *)(v3 + 376);
    LODWORD(v7) = WebCore::RenderBox::contentLogicalWidth(a1);
  }
  else
  {
    if (*(_BYTE *)(v3 + 388))
      return 0;
    v6 = (unsigned __int8 *)(v3 + 388);
    v7 = WebCore::RenderBlock::availableLogicalHeightForPercentageComputation(a1, a2);
    if ((v7 & 0xFF00000000) == 0)
      LODWORD(v7) = 0;
  }
  v8 = v6[8];
  switch(v8)
  {
    case 4:
      v9 = *((float *)v6 + 1);
      if (!v6[10])
        v9 = (float)SLODWORD(v9);
      break;
    case 3:
      v12 = *((float *)v6 + 1);
      if (!v6[10])
        v12 = (float)SLODWORD(v12);
      v9 = (float)((float)((float)(int)v7 * 0.015625) * v12) / 100.0;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v6 + 4), (float)(int)v7 * 0.015625);
      break;
    default:
      return 0;
  }
  v10 = v9 * 64.0;
  if (v10 < 2147483650.0 && v10 > -2147483650.0)
    return (int)v10;
  if (v10 >= 2147483650.0)
    return 0x7FFFFFFFLL;
  if (v10 > -2147483650.0)
    return (int)v10;
  return 0x80000000;
}

uint64_t WebCore::RenderBlock::marginIntrinsicLogicalWidthForChild(WebCore::RenderBlock *this, WebCore::RenderBox *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  void *v14;
  float v15;
  int v16;
  _BOOL4 v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  void *v23;
  float v24;
  int v25;
  unsigned __int16 *v26;
  float v27;
  double v28;
  uint64_t v29;
  double v30;
  char v32;
  uint64_t (*v33)(WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *);
  WebCore::RenderBlock *v34;
  WebCore::RenderBox *v35;
  float v36;
  int v37;
  unsigned __int16 *v38;
  char v39;
  int v40;
  float v41;
  float v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  float v46;
  unsigned __int8 v47;
  char v48;
  char v49;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
  v6 = *((_DWORD *)this + 30);
  v5 = *((_DWORD *)this + 31);
  v7 = v6 & 0x4000000;
  v8 = (v6 >> 26) & 1;
  v9 = (unsigned __int16)v5 >> 13;
  if ((v9 - 2) >= 2)
  {
    if (v9 == 4)
    {
      v8 = v7 == 0;
    }
    else if (v9 != 5)
    {
      v10 = 3;
      if (v7)
        v10 = 1;
      goto LABEL_6;
    }
  }
  v19 = v8 == 0;
  v10 = 2;
  if (v19)
    v10 = 0;
LABEL_6:
  v11 = v5 >> 13;
  v12 = (unsigned int *)(v4 + 40 + 8 * v10);
  v49 = 0;
  v47 = *((_BYTE *)v12 + 4);
  v13 = v47;
  v48 = *((_BYTE *)v12 + 5);
  if (v47 - 2 >= 9)
  {
    if (v47 == 11)
    {
      v14 = (void *)*v12;
      v46 = *(float *)v12;
      WebCore::Length::ref((int *)&v46);
      v4 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 24);
      v11 = *((_DWORD *)this + 31) >> 13;
      v7 = *((_DWORD *)this + 30) & 0x4000000;
      goto LABEL_9;
    }
    v14 = 0;
    v16 = 1;
    v15 = 0.0;
  }
  else
  {
    if (!*((_BYTE *)v12 + 6))
    {
      v14 = (void *)*v12;
LABEL_9:
      v15 = *(float *)&v14;
      v16 = 1;
      goto LABEL_12;
    }
    v16 = 0;
    v15 = *(float *)v12;
    v14 = (void *)*v12;
  }
LABEL_12:
  v17 = v7 != 0;
  v18 = v11 & 7;
  if ((v18 - 2) >= 2)
  {
    if (v18 == 4)
    {
      v17 = v7 == 0;
    }
    else if (v18 != 5)
    {
      v19 = v7 == 0;
      v20 = 3;
      if (v19)
        v20 = 1;
      goto LABEL_18;
    }
  }
  v20 = 2;
  if (v17)
    v20 = 0;
LABEL_18:
  v21 = (unsigned int *)(v4 + 40 + 8 * v20);
  v45 = 0;
  v43 = *((_BYTE *)v21 + 4);
  v22 = v43;
  v44 = *((_BYTE *)v21 + 5);
  if (v43 - 2 >= 9)
  {
    if (v43 != 11)
    {
      v23 = 0;
      v25 = 1;
      v24 = 0.0;
      goto LABEL_24;
    }
    v23 = (void *)*v21;
    v42 = *(float *)v21;
    WebCore::Length::ref((int *)&v42);
  }
  else
  {
    if (*((_BYTE *)v21 + 6))
    {
      v25 = 0;
      v24 = *(float *)v21;
      v23 = (void *)*v21;
      goto LABEL_24;
    }
    v23 = (void *)*v21;
  }
  v24 = *(float *)&v23;
  v25 = 1;
LABEL_24:
  v26 = &WebCore::lookup[6508];
  if (v13 != 4
    || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 461) & 4) != 0
    && (v41 = v24,
        v40 = v25,
        v32 = (*(uint64_t (**)(WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)this + 1584))(this, 4, a2), v26 = WebCore::lookup + 13016, v25 = v40, v24 = v41, (v32 & 1) != 0))
  {
    v29 = 0;
  }
  else
  {
    v27 = (float)SLODWORD(v15);
    if (!v16)
      v27 = v15;
    v28 = (float)(v27 + 0.0) * 64.0;
    if (v28 >= *((double *)v26 + 458))
    {
      v29 = 0x7FFFFFFFLL;
    }
    else if (v28 <= -2147483650.0)
    {
      v29 = 0x80000000;
    }
    else
    {
      v29 = (int)v28;
    }
  }
  if (v22 == 4)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 461) & 8) == 0)
      goto LABEL_33;
    v33 = *(uint64_t (**)(WebCore::RenderBlock *, uint64_t, WebCore::RenderBox *))(*(_QWORD *)this + 1584);
    v34 = this;
    v35 = a2;
    v36 = v24;
    v37 = v25;
    v38 = v26;
    v39 = v33(v34, 8, v35);
    v26 = v38;
    v25 = v37;
    v24 = v36;
    if ((v39 & 1) == 0)
    {
LABEL_33:
      if (v25)
        v24 = (float)SLODWORD(v24);
      v30 = (float)((float)((float)(int)v29 * 0.015625) + v24) * 64.0;
      if (v30 >= *((double *)v26 + 458))
      {
        v29 = 0x7FFFFFFFLL;
      }
      else if (v30 <= -2147483650.0)
      {
        v29 = 0x80000000;
      }
      else
      {
        v29 = (int)v30;
      }
    }
  }
  else if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v23);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v14);
  }
  return v29;
}

_QWORD *WebCore::ScrollingTreeScrollingNodeDelegate::ScrollingTreeScrollingNodeDelegate(_QWORD *this, WebCore::ScrollingTreeScrollingNode *a2)
{
  *this = off_1E34047D8;
  this[1] = a2;
  return this;
}

void WebCore::`anonymous namespace'::ChildListRecord::~ChildListRecord(WebCore::_anonymous_namespace_::ChildListRecord *this, void *a2)
{
  WTF *v2;
  void *v3;

  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, a2);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[4];
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
}

void WebCore::StaticNodeList::~StaticNodeList(WebCore::StaticNodeList *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
  bmalloc::api::isoDeallocate(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 3);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, a2);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 3;
    *((_QWORD *)this + 1) = 0;
  }
}

BOOL PAL::canLoad_VideoToolbox_VTRestrictVideoDecoders(PAL *this)
{
  _BOOL8 result;

  if (byte_1ECE7EE29 == 1)
    return _MergedGlobals_82 != 0;
  result = PAL::init_VideoToolbox_VTRestrictVideoDecoders(this);
  _MergedGlobals_82 = result;
  byte_1ECE7EE29 = 1;
  return result;
}

BOOL PAL::init_VideoToolbox_VTRestrictVideoDecoders(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3PAL19VideoToolboxLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  v3 = 0;
  if (qword_1ECE7EE38 != -1)
    dispatch_once(&qword_1ECE7EE38, block);
  PAL::softLinkVideoToolboxVTRestrictVideoDecoders = (uint64_t)dlsym((void *)qword_1ECE7EE30, "VTRestrictVideoDecoders");
  return PAL::softLinkVideoToolboxVTRestrictVideoDecoders != 0;
}

uint64_t WebCore::FontPlatformData::FontPlatformData(uint64_t a1, CFTypeRef *a2, char a3, char a4, char a5, char a6, char a7, _DWORD *a8, float a9)
{
  CFTypeRef v11;
  const void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  const __CTFontDescriptor *v18;
  const __CFAllocator *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontRef v23;
  CTFontRef v24;
  CTFontRef v25;
  int v27;
  int valuePtr;

  *(_QWORD *)a1 = 0;
  *(float *)(a1 + 8) = a9;
  *(_BYTE *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 13) = a6;
  *(_BYTE *)(a1 + 14) = a7;
  if (a8)
    ++*a8;
  *(_QWORD *)(a1 + 16) = a8;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = a4;
  *(_DWORD *)(a1 + 26) = 0;
  *(_BYTE *)(a1 + 30) = 0;
  v11 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v12 = *(const void **)a1;
    *(_QWORD *)a1 = v11;
    if (v12)
      CFRelease(v12);
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_BYTE *)(a1 + 26) = (CTFontGetSymbolicTraits((CTFontRef)*a2) & 0x2000) != 0;
  *(_BYTE *)(a1 + 28) = CTFontIsSystemUIFont();
  v13 = (const __CFDictionary *)CTFontCopyAttribute((CTFontRef)*a2, (CFStringRef)*MEMORY[0x1E0CA8470]);
  v14 = v13;
  if (v13)
    v15 = CFDictionaryGetCount(v13) != 0;
  else
    v15 = 0;
  *(_BYTE *)(a1 + 29) = v15;
  *(_BYTE *)(a1 + 30) = CTFontIsAppleColorEmoji();
  v16 = *(unsigned __int8 *)(a1 + 13);
  if (*(_BYTE *)(a1 + 13))
  {
    if (v16 >= 4)
      v17 = 0;
    else
      v17 = (v16 - 1) + 2;
    v27 = v17;
    valuePtr = 22;
    v18 = CTFontCopyFontDescriptor(*(CTFontRef *)a1);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    v21 = CFNumberCreate(v19, kCFNumberIntType, &v27);
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v18, v20, v21);
    v23 = CTFontCreateWithFontDescriptor(CopyWithFeature, *(float *)(a1 + 8), 0);
    if (v23)
    {
      v24 = v23;
      CFRetain(v23);
      v25 = *(CTFontRef *)a1;
      *(_QWORD *)a1 = v24;
      if (v25)
        CFRelease(v25);
      CFRelease(v24);
    }
    if (CopyWithFeature)
      CFRelease(CopyWithFeature);
    if (v21)
      CFRelease(v21);
    if (v20)
      CFRelease(v20);
    if (v18)
      CFRelease(v18);
  }
  if (v14)
    CFRelease(v14);
  return a1;
}

{
  CFTypeRef v11;
  const void *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  const __CTFontDescriptor *v18;
  const __CFAllocator *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CTFontDescriptor *CopyWithFeature;
  CTFontRef v23;
  CTFontRef v24;
  CTFontRef v25;
  int v27;
  int valuePtr;

  *(_QWORD *)a1 = 0;
  *(float *)(a1 + 8) = a9;
  *(_BYTE *)(a1 + 12) = a5;
  *(_BYTE *)(a1 + 13) = a6;
  *(_BYTE *)(a1 + 14) = a7;
  if (a8)
    ++*a8;
  *(_QWORD *)(a1 + 16) = a8;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = a4;
  *(_DWORD *)(a1 + 26) = 0;
  *(_BYTE *)(a1 + 30) = 0;
  v11 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v12 = *(const void **)a1;
    *(_QWORD *)a1 = v11;
    if (v12)
      CFRelease(v12);
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
  *(_BYTE *)(a1 + 26) = (CTFontGetSymbolicTraits((CTFontRef)*a2) & 0x2000) != 0;
  *(_BYTE *)(a1 + 28) = CTFontIsSystemUIFont();
  v13 = (const __CFDictionary *)CTFontCopyAttribute((CTFontRef)*a2, (CFStringRef)*MEMORY[0x1E0CA8470]);
  v14 = v13;
  if (v13)
    v15 = CFDictionaryGetCount(v13) != 0;
  else
    v15 = 0;
  *(_BYTE *)(a1 + 29) = v15;
  *(_BYTE *)(a1 + 30) = CTFontIsAppleColorEmoji();
  v16 = *(unsigned __int8 *)(a1 + 13);
  if (*(_BYTE *)(a1 + 13))
  {
    if (v16 >= 4)
      v17 = 0;
    else
      v17 = (v16 - 1) + 2;
    v27 = v17;
    valuePtr = 22;
    v18 = CTFontCopyFontDescriptor(*(CTFontRef *)a1);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    v21 = CFNumberCreate(v19, kCFNumberIntType, &v27);
    CopyWithFeature = CTFontDescriptorCreateCopyWithFeature(v18, v20, v21);
    v23 = CTFontCreateWithFontDescriptor(CopyWithFeature, *(float *)(a1 + 8), 0);
    if (v23)
    {
      v24 = v23;
      CFRetain(v23);
      v25 = *(CTFontRef *)a1;
      *(_QWORD *)a1 = v24;
      if (v25)
        CFRelease(v25);
      CFRelease(v24);
    }
    if (CopyWithFeature)
      CFRelease(CopyWithFeature);
    if (v21)
      CFRelease(v21);
    if (v20)
      CFRelease(v20);
    if (v18)
      CFRelease(v18);
  }
  if (v14)
    CFRelease(v14);
  return a1;
}

unint64_t WebCore::FontDatabase::collectionForFamily(WebCore::FontDatabase *this, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  int v17;
  unsigned int v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  unint64_t result;
  const __CFAllocator *v25;
  __CFDictionary *Mutable;
  uint64_t v27;
  uint64_t *v28;
  const void **v29;
  CFNumberRef v30;
  const __CTFontDescriptor *v31;
  uint64_t v32;
  uint64_t v33;
  const __CFSet *v34;
  const __CFArray *MatchingFontDescriptors;
  const __CFArray *v36;
  unint64_t v37;
  int v38;
  char *v39;
  CFIndex v40;
  _DWORD *v41;
  WebCore *ValueAtIndex;
  const __CTFontDescriptor *v43;
  WebCore *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *v49;
  WTF::StringImpl *v51;
  int v52;
  WTF *v53;
  void *v54;
  _OWORD *v55;
  WTF::StringImpl *v56;
  _OWORD *v57;
  WTF::StringImpl *v58;
  void *value;
  uint64_t valuePtr;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (*a2 && WTF::StringImpl::startsWith())
  {
    v56 = *a2;
    if (*a2)
      *(_DWORD *)v56 += 2;
    v58 = v56;
  }
  else
  {
    WTF::String::convertToASCIILowercase((WTF::String *)a2);
  }
  if (__ldaxr((unsigned __int8 *)this))
  {
    __clrex();
LABEL_6:
    MEMORY[0x19AEA534C](this);
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)this))
    goto LABEL_6;
LABEL_7:
  v9 = (uint64_t *)((char *)this + 8);
  v8 = *((_QWORD *)this + 1);
  v10 = *((unsigned int *)this + 4);
  if (v8)
  {
    v11 = v10 - 1;
    v12 = *((_DWORD *)this + 6);
    v13 = *((_DWORD *)v58 + 4);
    if (v13 < 0x100)
    {
      v2 = WTF::StringImpl::hashSlowCase(v58);
      v8 = *v9;
    }
    else
    {
      v2 = v13 >> 8;
    }
    v14 = (v2 ^ v12) & v11;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15)
    {
      v17 = -1;
      while (1)
      {
        v18 = *((_DWORD *)v16 + 4);
        v19 = v18 < 0x100 ? WTF::StringImpl::hashSlowCase(v16) : v18 >> 8;
        if (++v17 > ((v14 + v10 - ((v19 ^ v12) & v11)) & v11))
          break;
        if (v19 == (_DWORD)v2)
        {
          v20 = WTF::equal(*(WTF **)v15, v58, v6);
          v8 = *v9;
          if ((v20 & 1) != 0)
          {
            v10 = *((unsigned int *)this + 4);
            goto LABEL_20;
          }
        }
        else
        {
          v8 = *v9;
        }
        v14 = (v14 + 1) & v11;
        v15 = v8 + 16 * v14;
        v16 = *(WTF **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_79;
      }
      v8 = *v9;
    }
LABEL_79:
    v10 = *((unsigned int *)this + 4);
    v15 = v8 + 16 * v10;
  }
  else
  {
    v15 = 16 * v10;
  }
LABEL_20:
  v21 = v8 + 16 * v10;
  if (v21 != v15)
    v2 = *(_QWORD *)(v15 + 8);
  v22 = __ldxr((unsigned __int8 *)this);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)this))
LABEL_26:
    WTF::Lock::unlockSlow(this);
  if (v21 == v15)
  {
    WTF::String::createCFString((WTF::String *)&v58);
    v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v27 = *MEMORY[0x1E0CA8300];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8300], value);
    v28 = (uint64_t *)MEMORY[0x1E0CA8468];
    v29 = (const void **)MEMORY[0x1E0CA82F8];
    if (!*((_BYTE *)this + 56))
    {
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8468], (const void *)*MEMORY[0x1E0C9AE40]);
      valuePtr = 1;
      v30 = CFNumberCreate(v25, kCFNumberSInt64Type, &valuePtr);
      CFDictionaryAddValue(Mutable, *v29, v30);
      if (v30)
        CFRelease(v30);
    }
    v31 = CTFontDescriptorCreateWithAttributes(Mutable);
    if (*((_BYTE *)this + 56))
    {
      v34 = 0;
    }
    else
    {
      v32 = *MEMORY[0x1E0CA83B8];
      valuePtr = v27;
      v61 = v32;
      v33 = *v28;
      v62 = *MEMORY[0x1E0CA82F0];
      v63 = v33;
      v64 = *v29;
      v34 = CFSetCreate(v25, (const void **)&valuePtr, 5, MEMORY[0x1E0C9B3B0]);
    }
    MatchingFontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors(v31, v34);
    if (MatchingFontDescriptors)
    {
      v36 = MatchingFontDescriptors;
      result = CFArrayGetCount(MatchingFontDescriptors);
      valuePtr = 0;
      v61 = 0;
      if (result)
      {
        v37 = result;
        if (result >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v38 = 24 * result;
        v39 = (char *)WTF::fastMalloc((WTF *)(24 * result));
        v40 = 0;
        LODWORD(v61) = (v38 & 0xFFFFFFF8) / 0x18;
        valuePtr = (uint64_t)v39;
        v41 = v39 + 16;
        do
        {
          ValueAtIndex = (WebCore *)CFArrayGetValueAtIndex(v36, v40);
          v44 = ValueAtIndex;
          if (ValueAtIndex)
            CFRetain(ValueAtIndex);
          v45 = WebCore::capabilitiesForFontDescriptor(v44, v43);
          *((_QWORD *)v41 - 2) = v44;
          *((_QWORD *)v41 - 1) = v45;
          *v41 = v46;
          v41 += 6;
          HIDWORD(v61) = ++v40;
        }
        while (v37 != v40);
      }
      v47 = WTF::fastMalloc((WTF *)0x20);
      v57 = (_OWORD *)WebCore::FontDatabase::InstalledFontFamily::InstalledFontFamily(v47, &valuePtr);
      WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&valuePtr, v48);
      CFRelease(v36);
    }
    else
    {
      v55 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
      *v55 = 0u;
      v55[1] = 0u;
      *((_QWORD *)v55 + 2) = 112591708776040000;
      v57 = v55;
    }
    if (v34)
      CFRelease(v34);
    if (v31)
      CFRelease(v31);
    if (Mutable)
      CFRelease(Mutable);
    v49 = value;
    value = 0;
    if (v49)
      CFRelease(v49);
    if (__ldaxr((unsigned __int8 *)this))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)this))
    {
LABEL_58:
      WTF::String::isolatedCopy();
      WTF::HashMap<WTF::String,std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>,WTF::MemoryCompactRobinHoodHashTableTraits>::add<std::unique_ptr<WebCore::FontDatabase::InstalledFontFamily>>((uint64_t)&valuePtr, (unsigned int *)this + 2, (WTF::StringImpl **)&value, (uint64_t *)&v57);
      v51 = (WTF::StringImpl *)value;
      v2 = *(_QWORD *)(valuePtr + 8);
      value = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v5);
        else
          *(_DWORD *)v51 -= 2;
      }
      v52 = __ldxr((unsigned __int8 *)this);
      if (v52 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)this))
        {
LABEL_67:
          if (v57)
          {
            v53 = (WTF *)WTF::Vector<WebCore::FontDatabase::InstalledFont,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v57, v5);
            WTF::fastFree(v53, v54);
          }
          goto LABEL_28;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(this);
      goto LABEL_67;
    }
    MEMORY[0x19AEA534C](this);
    goto LABEL_58;
  }
LABEL_28:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v5);
    else
      *(_DWORD *)v23 -= 2;
  }
  return v2;
}

void WebCore::UnrealizedCoreTextFont::realize(WebCore::UnrealizedCoreTextFont *this@<X0>, CTFontRef *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  const __CTFont *v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  float v20;
  const __CFDictionary *Mutable;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  const __CTFontDescriptor *v26;
  WTF::StringImpl *v27;
  void *v28;
  CTFontRef v29;
  WTF::StringImpl *v30;
  double v31;
  __int128 v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char *v37;
  __int128 *v38;
  char v39;
  char v40;
  CTFontRef font;
  __int128 v42;
  double *v43;

  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3 == -1)
    goto LABEL_52;
  *(_QWORD *)&v42 = &v38;
  if ((((uint64_t (*)(__int128 *, WebCore::UnrealizedCoreTextFont *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22UnrealizedCoreTextFontcvbEvE3__0JZNKS9_cvbEvE3__1EEEEEJRKNS0_6__implIJNS6_9RetainPtrIPK8__CTFontEENSF_IPK18__CTFontDescriptorEEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v42, this) & 1) == 0)
  {
    *a2 = 0;
    return;
  }
  *(_QWORD *)&v42 = this;
  *((_QWORD *)&v42 + 1) = this;
  v5 = *((unsigned int *)this + 2);
  if ((_DWORD)v5 == -1)
  {
LABEL_52:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_53;
  }
  v38 = &v42;
  ((void (*)(CTFontRef *__return_ptr, __int128 **, WebCore::UnrealizedCoreTextFont *))off_1E3412EF0[v5])(&font, &v38, this);
  v6 = font;
  v7 = *((unsigned __int8 *)this + 24);
  LOBYTE(v38) = 0;
  v39 = 0;
  v40 = 0;
  LOBYTE(v42) = 0;
  BYTE8(v42) = 0;
  if (!v7)
  {
LABEL_41:
    *a2 = font;
    return;
  }
  WebCore::FontInterrogation::FontInterrogation((WebCore::FontInterrogation *)&v35, font);
  if (v35 != 1)
    goto LABEL_6;
  WebCore::defaultVariationValues(v6, 0, &v35);
  std::optional<WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>>::operator=[abi:sn180100]<WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>,void>((uint64_t *)&v42, (WTF::StringImpl *)&v35);
  WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>::~HashMap(&v35, v30);
  if (!BYTE8(v42))
    goto LABEL_53;
  LODWORD(v35) = 1952999287;
  if ((WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>::contains(v42, (unsigned int *)&v35) & 1) != 0)
  {
LABEL_44:
    v9 = 0;
    LOBYTE(v38) = 1;
    goto LABEL_7;
  }
  if (!BYTE8(v42))
    goto LABEL_53;
  LODWORD(v32) = 1752458359;
  if ((WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>::contains(v42, (unsigned int *)&v32) & 1) != 0)goto LABEL_44;
  if (!BYTE8(v42))
    goto LABEL_53;
  LODWORD(v37) = 1818326121;
  if ((WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>::contains(v42, (unsigned int *)&v37) & 1) != 0)goto LABEL_44;
  if (!BYTE8(v42))
  {
LABEL_53:
    __break(1u);
    return;
  }
  LODWORD(v34) = 1953393779;
  if ((WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>::contains(v42, (unsigned int *)&v34) & 1) != 0)goto LABEL_44;
LABEL_6:
  v9 = 1;
LABEL_7:
  if (BYTE8(v42))
  {
    v10 = v42;
    if ((_QWORD)v42)
    {
      v11 = *(unsigned int *)(v42 - 4);
      if ((_DWORD)v11)
      {
        v12 = (WTF::StringImpl **)(v42 + 8);
        do
        {
          if (*((_DWORD *)v12 - 2) != -1)
          {
            v13 = *v12;
            *v12 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v8);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      WTF::fastFree((WTF *)(v10 - 16), v8);
    }
  }
  if ((v9 & 1) != 0)
    goto LABEL_41;
  v37 = 0;
  LOBYTE(v35) = 0;
  v36 = 0;
  v34 = &v35;
  v14 = *((float *)this + 8);
  v15 = (*((float *)this + 7) + 109.3) / 523.7;
  if (v14 <= 125.0)
  {
    v19 = v14 / 100.0;
  }
  else
  {
    v16 = v14 > 150.0;
    v17 = (float)(v14 + 400.0) / 400.0;
    v18 = (float)(v14 + 125.0) / 200.0;
    if (v16)
      v19 = v17;
    else
      v19 = v18;
  }
  v20 = *((float *)this + 9);
  LODWORD(v32) = 1952999287;
  *(float *)&v33 = v15;
  WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul> const&,float &>((uint64_t)&v42, (uint64_t *)&v37, (unsigned int *)&v32, &v33);
  LODWORD(v32) = 1752458359;
  *(float *)&v33 = v19;
  WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul> const&,float &>((uint64_t)&v42, (uint64_t *)&v37, (unsigned int *)&v32, &v33);
  if (*((_BYTE *)this + 48) == 1)
  {
    LODWORD(v32) = 1818326121;
    LODWORD(v33) = 1065353216;
  }
  else
  {
    LODWORD(v32) = 1953393779;
    *(float *)&v33 = v20 / 300.0;
  }
  WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul> const&,float &>((uint64_t)&v42, (uint64_t *)&v37, (unsigned int *)&v32, &v33);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v33 = &v34;
  v32 = *(_OWORD *)((char *)this + 52);
  v31 = *((double *)this + 5);
  *(_QWORD *)&v42 = &v33;
  *((_QWORD *)&v42 + 1) = this;
  v43 = &v31;
  WTF::switchOn<std::variant<WebCore::UnrealizedCoreTextFont::OpticalSizingTypes::None,WebCore::UnrealizedCoreTextFont::OpticalSizingTypes::JustVariation,WebCore::UnrealizedCoreTextFont::OpticalSizingTypes::Everything> const&,WebCore::UnrealizedCoreTextFont::realize(void)::$_2,WebCore::UnrealizedCoreTextFont::realize(void)::$_3,WebCore::UnrealizedCoreTextFont::realize(void)::$_4>((uint64_t)this + 52, &v42, (uint64_t)&v33, (uint64_t)&v32);
  WebCore::UnrealizedCoreTextFont::addAttributesForOpticalSizing((uint64_t)Mutable, (uint64_t)&v37, (uint64_t)&v32, v31);
  v22 = *((unsigned int *)this + 21);
  if ((_DWORD)v22)
  {
    v23 = (_DWORD *)*((_QWORD *)this + 9);
    v24 = &v23[2 * v22];
    do
    {
      v25 = v23[1];
      LODWORD(v32) = *v23;
      LODWORD(v33) = v25;
      WTF::HashMap<std::array<char,4ul>,float,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<float>,WTF::HashTableTraits>::inlineSet<std::array<char,4ul> const&,float &>((uint64_t)&v42, (uint64_t *)&v37, (unsigned int *)&v32, &v33);
      v23 += 2;
    }
    while (v23 != v24);
  }
  WebCore::UnrealizedCoreTextFont::applyVariations(Mutable, &v37);
  v26 = CTFontDescriptorCreateWithAttributes(Mutable);
  *a2 = CTFontCreateCopyWithAttributes(font, *((CGFloat *)this + 5), 0, v26);
  if (v26)
    CFRelease(v26);
  if (Mutable)
    CFRelease(Mutable);
  std::optional<WTF::HashMap<std::array<char,4ul>,WebCore::VariationDefaults,WebCore::FourCharacterTagHash,WebCore::FourCharacterTagHashTraits,WTF::HashTraits<WebCore::VariationDefaults>,WTF::HashTableTraits>>::~optional(&v35, v27);
  if (v37)
    WTF::fastFree((WTF *)(v37 - 16), v28);
  WebCore::UnrealizedCoreTextFont::RebuildReason::~RebuildReason((WebCore::UnrealizedCoreTextFont::RebuildReason *)&v38, (WTF::StringImpl *)v28);
  v29 = font;
  font = 0;
  if (v29)
    CFRelease(v29);
}

WebCore::FontInterrogation *WebCore::FontInterrogation::FontInterrogation(WebCore::FontInterrogation *this, CTFontRef font)
{
  const __CFArray *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  char v8;
  int ValueAtIndex;
  int v10;
  char v11;
  BOOL v13;
  CFIndex v14;
  CFIndex v15;
  char v16;

  *(_DWORD *)this = 0;
  v3 = CTFontCopyAvailableTables(font, 0);
  if (!v3)
    return this;
  v4 = v3;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    goto LABEL_37;
  v6 = Count;
  v15 = Count - 1;
  v16 = 0;
  v7 = 0;
  v8 = 0;
  v14 = Count - 2;
  do
  {
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v7);
      if (ValueAtIndex <= 1719034225)
      {
        if (ValueAtIndex == 1196445523 || ValueAtIndex == 1196643650)
        {
LABEL_7:
          *((_BYTE *)this + 2) = 1;
        }
        else if (ValueAtIndex == 1398030676)
        {
LABEL_29:
          *(_BYTE *)this = 2;
          v16 = 1;
        }
        goto LABEL_8;
      }
      if (ValueAtIndex <= 1953653098)
        break;
      if (ValueAtIndex != 1953653099)
        goto LABEL_8;
      if (v7 + 1 == v6)
        goto LABEL_33;
      while (1)
      {
        v10 = CFArrayGetValueAtIndex(v4, v7 + 1);
        if (v10 <= 1196643649)
        {
          if (v10 != 1196445523)
            goto LABEL_45;
LABEL_21:
          ++v7;
          v8 = 1;
          goto LABEL_7;
        }
        if (v10 <= 1719034225)
        {
          if (v10 == 1196643650)
            goto LABEL_21;
          if (v10 != 1398030676)
            goto LABEL_45;
          ++v7;
          v8 = 1;
          goto LABEL_29;
        }
        if (v10 <= 1836020343)
          break;
        if (v10 == 1836020344)
          goto LABEL_17;
        if (v10 != 1953653099)
          goto LABEL_45;
        if (v15 == ++v7)
          goto LABEL_33;
      }
      if (v10 == 1719034226)
      {
        ++v7;
        v8 = 1;
        goto LABEL_26;
      }
      if (v10 == 1836020340)
      {
LABEL_17:
        ++v7;
        v8 = 1;
        goto LABEL_19;
      }
LABEL_45:
      v8 = 1;
      v13 = v14 == v7;
      v7 += 2;
      if (v13)
        goto LABEL_33;
    }
    switch(ValueAtIndex)
    {
      case 1836020344:
        goto LABEL_19;
      case 1719034226:
LABEL_26:
        if (!*(_BYTE *)this)
          *(_BYTE *)this = 1;
        break;
      case 1836020340:
LABEL_19:
        *((_BYTE *)this + 3) = 1;
        break;
    }
LABEL_8:
    ++v7;
  }
  while (v7 != v6);
  if ((v8 & 1) != 0)
  {
LABEL_33:
    if ((v16 & 1) != 0)
      v11 = 1;
    else
      v11 = 2;
    *((_BYTE *)this + 1) = v11;
  }
LABEL_37:
  CFRelease(v4);
  return this;
}

uint64_t WebCore::findClosestFont(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  WTF *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  WTF *v17;
  _QWORD v19[2];
  int v20;
  WTF **v21;
  WTF *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_16;
    }
    v5 = 12 * v4;
    v6 = (WTF *)WTF::fastMalloc((WTF *)(12 * v4));
    LODWORD(v23) = (v5 & 0xFFFFFFFC) / 0xC;
    v22 = v6;
    if (*(_DWORD *)(a1 + 12))
    {
      v7 = 0;
      v8 = 0;
      v9 = (_DWORD *)((char *)v6 + 8);
      do
      {
        v10 = *(_QWORD *)a1 + v7;
        v11 = *(_QWORD *)(v10 + 8);
        LODWORD(v10) = *(_DWORD *)(v10 + 16);
        *((_QWORD *)v9 - 1) = v11;
        *v9 = v10;
        v9 += 3;
        ++v8;
        v7 += 24;
      }
      while (v8 < *(unsigned int *)(a1 + 12));
      HIDWORD(v23) = v8;
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 24);
  v21 = &v22;
  v19[0] = a2;
  v19[1] = v12;
  v20 = v13;
  v14 = WebCore::FontSelectionAlgorithm::indexOfBestCapabilities((WebCore::FontSelectionAlgorithm *)v19);
  if (v14 != -1)
  {
    if (v14 < *(unsigned int *)(a1 + 12))
    {
      v16 = *(_QWORD *)a1 + 24 * v14;
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_16:
    JUMPOUT(0x19438B7B8);
  }
  v16 = 0;
LABEL_10:
  v17 = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v17, v15);
  }
  return v16;
}

uint64_t WebCore::FontSelectionAlgorithm::FontSelectionAlgorithm(uint64_t result, uint64_t a2, __int16 **a3, uint64_t a4, uint64_t a5)
{
  int v5;
  __int16 v6;
  __int16 v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 112591708776040000;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  if ((a5 & 0xFF00000000) != 0)
  {
    *(_QWORD *)(result + 8) = a4;
    *(_DWORD *)(result + 16) = a5;
  }
  else
  {
    v5 = *((_DWORD *)a3 + 3);
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = *a3;
      v9 = (uint64_t)&(*a3)[6 * v5];
      v10 = 1600;
      v11 = 400;
      v12 = 400;
      v13 = 1600;
      do
      {
        if (*v8 < v13)
          v13 = *v8;
        *(_WORD *)(result + 8) = v13;
        if (v10 <= v8[1])
          v10 = v8[1];
        *(_WORD *)(result + 10) = v10;
        if (v8[2] < v12)
          v12 = v8[2];
        *(_WORD *)(result + 12) = v12;
        if (v11 <= v8[3])
          v11 = v8[3];
        *(_WORD *)(result + 14) = v11;
        if (v8[4] < v7)
          v7 = v8[4];
        *(_WORD *)(result + 16) = v7;
        if (v6 <= v8[5])
          v6 = v8[5];
        *(_WORD *)(result + 18) = v6;
        v8 += 6;
      }
      while (v8 != (__int16 *)v9);
    }
  }
  return result;
}

WTF::StringImpl **WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl ***v11;
  int i;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF **v15;
  WTF::StringImpl **result;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl ***)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (!*v14)
      break;
    if (v15 == (WTF **)-1)
    {
      v11 = (WTF::StringImpl ***)(v7 + 8 * v13);
    }
    else
    {
      result = (WTF::StringImpl **)WTF::equal(*v15, *a2, a3);
      if ((result & 1) != 0)
      {
        v17 = 0;
        goto LABEL_10;
      }
    }
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    v14 = v11;
  }
  result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
  v19 = *a2;
  *a2 = 0;
  result[1] = 0;
  result[2] = 0;
  *result = v19;
  *v14 = result;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_20;
LABEL_29:
    v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, v14);
    result = *v14;
    goto LABEL_20;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_29;
LABEL_20:
  v26 = (_QWORD *)a1[2];
  result[1] = (WTF::StringImpl *)v26;
  result[2] = 0;
  if (v26)
    v27 = v26 + 2;
  else
    v27 = a1 + 1;
  *v27 = result;
  a1[2] = (uint64_t)result;
  v17 = 1;
LABEL_10:
  v18 = *v14;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl ***v11;
  int i;
  unsigned int v13;
  WTF::StringImpl ***v14;
  WTF **v15;
  WTF::StringImpl **result;
  char v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl ***)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (!*v14)
      break;
    if (v15 == (WTF **)-1)
    {
      v11 = (WTF::StringImpl ***)(v7 + 8 * v13);
    }
    else
    {
      result = (WTF::StringImpl **)WTF::equal(*v15, *a2, a3);
      if ((result & 1) != 0)
      {
        v17 = 0;
        goto LABEL_10;
      }
    }
    v10 = i + v13;
  }
  if (v11)
  {
    *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    v14 = v11;
  }
  result = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x18);
  v19 = *a2;
  if (*a2)
    *(_DWORD *)v19 += 2;
  result[1] = 0;
  result[2] = 0;
  *result = v19;
  *v14 = result;
  v20 = *a1;
  if (*a1)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a1;
  if (*a1)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_22;
LABEL_31:
    v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, v14);
    result = *v14;
    goto LABEL_22;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_31;
LABEL_22:
  v26 = (_QWORD *)a1[2];
  result[1] = (WTF::StringImpl *)v26;
  result[2] = 0;
  if (v26)
    v27 = v26 + 2;
  else
    v27 = a1 + 1;
  *v27 = result;
  a1[2] = (uint64_t)result;
  v17 = 1;
LABEL_10:
  v18 = *v14;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  WTF::StringImpl ***v12;
  _QWORD *v13;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (WTF::StringImpl ***)v6;
    do
    {
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = (_QWORD *)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>>,WTF::ListHashSetNode<WTF::String> *>(a1, v12);
        *v13 = *v12;
        if (v12 == a3)
          v11 = v13;
      }
      ++v12;
      --v7;
    }
    while (v7);
    goto LABEL_9;
  }
  result = 0;
  if (v6)
  {
LABEL_9:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a1, v5, a2);
}

uint64_t WebCore::ViewportConfiguration::setMinimumEffectiveDeviceWidthForShrinkToFit(WebCore::ViewportConfiguration *this, double a2)
{
  double v2;
  uint64_t result;
  double v5;
  double v6;
  BOOL v7;
  BOOL v8;
  double v9;
  BOOL v10;
  double v11;
  BOOL v12;
  float v13;
  BOOL v14;
  float v15;
  double v16;
  double v17;
  float v18;
  float v19;
  float v20;

  v2 = *((double *)this + 27);
  if (v2 == a2)
    return 0;
  v5 = vabdd_f64(v2, a2);
  v6 = fabs(v2);
  v7 = v6 < 1.0 && v6 * 1.79769313e308 < v5;
  if (v7
    || (v6 * 2.22507386e-308 > v5 ? (v8 = v6 <= 1.0) : (v8 = 1),
        (v9 = v5 / v6, v8) ? (v10 = v9 > 2.22044605e-16) : (v10 = 0),
        v10
     || (v11 = fabs(a2), v11 < 1.0) && v11 * 1.79769313e308 < v5
     || ((result = 0, v11 * 2.22507386e-308 > v5) ? (v12 = v11 <= 1.0) : (v12 = 1), v12 && v5 / v11 > 2.22044605e-16)))
  {
    *((double *)this + 27) = a2;
    if (*((_BYTE *)this + 232))
    {
      if (*((double *)this + 28) == 0.0)
        return 0;
    }
    else
    {
      v13 = *((float *)this + 35);
      if (v13 != -1.0
        || *((float *)this + 36) != -1.0
        || *((float *)this + 37) != -1.0
        || *((float *)this + 38) != -1.0
        || *((float *)this + 39) != -1.0
        || *((float *)this + 40) != -1.0
        || *((float *)this + 41) != -1.0
        || *((float *)this + 42) != -1.0
        || *((float *)this + 43) != -1.0
        || *((float *)this + 44) != -1.0
        || *((float *)this + 45) != -1.0
        || *((float *)this + 46) != -1.0
        || *((_BYTE *)this + 188)
        || *((_BYTE *)this + 189))
      {
        v14 = v13 == -2.0 || *((float *)this + 41) == 1.0;
        if (v14 && !*((_BYTE *)this + 234))
          return 0;
      }
    }
    v15 = *((float *)this + 32);
    if (v15 == 0.0 || (v16 = WebCore::ViewportConfiguration::minimumEffectiveDeviceWidth(this), v16 == 0.0))
    {
      v17 = *((double *)this + 25);
    }
    else
    {
      if (v16 < v15)
        v16 = v15;
      v17 = *((double *)this + 25) * v15 / v16;
    }
    v18 = v17;
    v19 = v15 / v18;
    v20 = *((float *)this + 33) / v18;
    *((float *)this + 30) = v19;
    *((float *)this + 31) = v20;
    if (v15 < 0.0 && v15 > 0.0 && (*((_BYTE *)this + 192) & 1) == 0)
    {
      *((_DWORD *)this + 30) = 0;
      *((float *)this + 31) = roundf(v20 * (float)(0.0 / v19));
    }
    WebCore::ViewportConfiguration::updateConfiguration(this);
    return 1;
  }
  return result;
}

uint64_t *WebCore::CDMFactory::registeredFactories(WebCore::CDMFactory *this)
{
  char v2;

  {
    WebCore::CDMFactory::registeredFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8AB8 = 0;
  }
  std::call_once[abi:sn180100]<WebCore::CDMFactory::registeredFactories(void)::$_0>((uint64_t)&v2);
  return &WebCore::CDMFactory::registeredFactories(void)::factories;
}

uint64_t WebCore::RenderTable::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  const WTF::StringImpl *v5;
  uint64_t result;
  int v7;
  int v8;
  float v9;
  double v10;
  int v11;
  double v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v37;

  WebCore::RenderBlock::styleDidChange(a1, a2, (const WebCore::RenderStyle *)a3);
  result = WebCore::RenderElement::propagateStyleToAnonymousChildren(a1, 0, v5);
  if (!a3 || (*(_BYTE *)(a3 + 19) & 0x10) == 0)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  if (((*(_DWORD *)(a3 + 44) >> 13) & 6u) - 2 <= 3)
  {
    v32 = *(unsigned __int8 *)(v17 + 16) - 3;
    if (v32 >= 9 || ((0x183u >> v32) & 1) == 0)
    {
      v19 = v17 + 12;
      goto LABEL_31;
    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(v17 + 8) - 3;
    if (v18 >= 9 || ((0x183u >> v18) & 1) == 0)
    {
      v19 = v17 + 4;
LABEL_31:
      v7 = *(unsigned __int8 *)(v19 + 4) == 7;
      goto LABEL_4;
    }
  }
  v7 = 1;
LABEL_4:
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 4) != 0)
    v9 = 0.0;
  else
    v9 = *(float *)(*(_QWORD *)(a1 + 112) + 4);
  v10 = v9 * 64.0;
  if (v10 >= 2147483650.0)
  {
    v11 = 0x7FFFFFFF;
  }
  else if (v10 <= -2147483650.0)
  {
    v11 = 0x80000000;
  }
  else
  {
    v11 = (int)v10;
  }
  *(_DWORD *)(a1 + 332) = v11;
  if ((v8 & 4) != 0)
  {
    v12 = 0.0;
    goto LABEL_12;
  }
  v12 = *(float *)(*(_QWORD *)(a1 + 112) + 8) * 64.0;
  if (v12 >= 2147483650.0)
  {
    v13 = 0x7FFFFFFF;
  }
  else
  {
    if (v12 > -2147483650.0)
    {
LABEL_12:
      v13 = (int)v12;
      goto LABEL_13;
    }
    v13 = 0x80000000;
  }
LABEL_13:
  *(_DWORD *)(a1 + 336) = v13;
  if (!*(_DWORD *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x19438C0D8);
  }
  **(_DWORD **)(a1 + 200) = *(_DWORD *)(a1 + 332);
  v14 = *(_QWORD *)(a1 + 96);
  if (!*(_QWORD *)(a1 + 296))
    goto LABEL_22;
  if ((v14 & 0x10000000) == 0)
  {
    v15 = 0;
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
  {
    v33 = *(unsigned __int8 *)(v20 + 16) - 3;
    if (v33 >= 9 || ((0x183u >> v33) & 1) == 0)
    {
      v22 = v20 + 12;
      goto LABEL_36;
    }
  }
  else
  {
    v21 = *(unsigned __int8 *)(v20 + 8) - 3;
    if (v21 >= 9 || ((0x183u >> v21) & 1) == 0)
    {
      v22 = v20 + 4;
LABEL_36:
      v15 = *(unsigned __int8 *)(v22 + 4) == 7;
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  if (v7 == v15)
    goto LABEL_18;
LABEL_22:
  if ((v14 & 0x10000000) == 0)
    goto LABEL_23;
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  if (((*(_DWORD *)(a1 + 124) >> 13) & 6u) - 2 <= 3)
  {
    v34 = *(unsigned __int8 *)(v23 + 16);
    v25 = v34 > 0xB;
    v35 = (1 << v34) & 0xC18;
    if (!v25 && v35 != 0)
      goto LABEL_44;
    v31 = v23 + 12;
  }
  else
  {
    v24 = *(unsigned __int8 *)(v23 + 8);
    v25 = v24 > 0xB;
    v26 = (1 << v24) & 0xC18;
    if (!v25 && v26 != 0)
      goto LABEL_44;
    v31 = v23 + 4;
  }
  if (*(_BYTE *)(v31 + 4) != 7)
  {
LABEL_23:
    v16 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v16 = off_1E341E100;
    *(_QWORD *)(v16 + 8) = a1;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_BYTE *)(v16 + 48) = *(_BYTE *)(v16 + 48) & 0xFC | 2;
    *(_DWORD *)(v16 + 52) = 0;
    result = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v16;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    goto LABEL_18;
  }
LABEL_44:
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  WebCore::FixedTableLayout::FixedTableLayout(v28, (WebCore::RenderTable *)a1);
  v37 = 0;
  v30 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v28;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  result = (uint64_t)std::unique_ptr<WebCore::FixedTableLayout>::~unique_ptr[abi:sn180100](&v37, v29);
LABEL_18:
  if (a3)
  {
    result = WebCore::RenderStyle::borderIsEquivalentForPainting((WebCore::RenderStyle *)a3, (const WebCore::RenderStyle *)(a1 + 80));
    if ((result & 1) == 0)
      return WebCore::RenderTable::invalidateCollapsedBorders(a1, 0);
  }
  return result;
}

WebCore::AXObjectCache *WebCore::Document::axObjectCache(WebCore::Document *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  BOOL v4;
  WebCore::AXObjectCache *v5;
  WebCore::AXObjectCache **v6;
  WebCore::AXObjectCache *v7;
  WebCore::AXObjectCache *v8;
  uint64_t v9;

  v1 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
  if ((v1 & 1) == 0)
    return 0;
  v3 = WebCore::Document::topDocument((uint64_t)this);
  *(_DWORD *)(v3 + 24) += 2;
  v9 = v3;
  if (*(_QWORD *)(v3 + 1944))
    v4 = *(_BYTE *)(v3 + 3405) == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (WebCore::AXObjectCache **)v3;
    v5 = *(WebCore::AXObjectCache **)(v3 + 1488);
    if (!v5)
    {
      v7 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
      v8 = WebCore::AXObjectCache::AXObjectCache(v7, (WebCore::Document *)v6);
      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v6 + 186, &v8);
      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v8);
      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
      v5 = v6[186];
    }
  }
  else
  {
    v5 = 0;
  }
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v9);
  return v5;
}

uint64_t WebCore::RenderElement::RenderElement(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, char a5, __int16 a6)
{
  unsigned int v12;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = off_1E342E320;
  *(_QWORD *)(a1 + 8) = 0;
  v12 = *(_DWORD *)(a1 + 20) & 0x80000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v12;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v24 = 1;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 8) = a3;
    *(_BYTE *)(v24 + 32) = 0;
    v26 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v26 & 0xFFFF000000000000 | v24;
    v27 = v26 & 0xFFFFFFFFFFFFLL;
    if ((v26 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v28 = __ldaxr((unsigned int *)v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unsigned int *)v27));
      if (!v29)
      {
        atomic_store(1u, (unsigned int *)v27);
        v30 = *(unsigned int *)(v27 + 28);
        if ((_DWORD)v30)
        {
          v33 = v27;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
          v27 = v33;
        }
        v31 = *(WTF **)(v27 + 16);
        if (v31)
        {
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 0;
          v32 = v27;
          WTF::fastFree(v31, v25);
          v27 = v32;
        }
        WTF::fastFree((WTF *)v27, v25);
      }
    }
  }
  v13 = a5;
  v14 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  if ((*(_WORD *)(a3 + 28) & 0xF000) == 0x9000)
    v13 = a5 & 0xFE | 1;
  *(_BYTE *)(a1 + 45) = v13;
  *(_BYTE *)(a1 + 46) = a2;
  *(_DWORD *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 51) = 0;
  *(_WORD *)(a1 + 52) = a6;
  *(_QWORD *)(a1 + 56) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 1944);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 + 16);
    ++*(_QWORD *)(v16 + 256);
    *(_DWORD *)(v16 + 16) = v17 + 1;
    if (v17 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19438C3F8);
    }
    *(_DWORD *)(v16 + 16) = v17;
  }
  *(_QWORD *)a1 = off_1E3422BC8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v18 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(a1 + 88) = v18;
  *(_QWORD *)(a1 + 96) = a4[2];
  v19 = a4[3];
  a4[3] = 0;
  *(_QWORD *)(a1 + 104) = v19;
  v20 = a4[4];
  a4[4] = 0;
  *(_QWORD *)(a1 + 112) = v20;
  *(_QWORD *)(a1 + 120) = a4[5];
  v21 = a4[6];
  a4[6] = 0;
  *(_QWORD *)(a1 + 128) = v21;
  v22 = a4[7];
  a4[7] = 0;
  *(_QWORD *)(a1 + 136) = v22;
  return a1;
}

uint64_t WebCore::TextContentData::createContentRenderer@<X0>(WebCore::TextContentData *this@<X0>, WebCore::Document *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v7 = (uint64_t *)((char *)this + 32);
  v8 = bmalloc::api::isoAllocate();
  result = WebCore::RenderText::RenderText(v8, 46, (uint64_t)a2, v7);
  *(_QWORD *)result = off_1E3436F38;
  *(_DWORD *)(result + 120) = 0;
  v10 = *((_QWORD *)this + 4);
  if (v10)
    LODWORD(v10) = *(_DWORD *)(v10 + 4);
  *(_DWORD *)(result + 124) = v10;
  *(_QWORD *)(result + 128) = 0;
  v11 = (_DWORD *)*v7;
  if (*v7)
    *v11 += 2;
  *(_QWORD *)(result + 136) = v11;
  *(_QWORD *)(result + 144) = 0;
  v12 = (_DWORD *)*((_QWORD *)this + 2);
  if (v12)
    *v12 += 2;
  *(_QWORD *)(result + 128) = v12;
  *a3 = result;
  return result;
}

uint64_t WebCore::RenderView::RenderView(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;

  v6 = WebCore::RenderObject::RenderObject(a1, 49, a2, 92, 1);
  *(_QWORD *)v6 = off_1E3422BC8;
  *(_QWORD *)(v6 + 70) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  v7 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(v6 + 88) = v7;
  *(_QWORD *)(v6 + 96) = a3[2];
  v8 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(v6 + 104) = v8;
  v9 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(v6 + 112) = v9;
  *(_QWORD *)(v6 + 120) = a3[5];
  v10 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(v6 + 128) = v10;
  v11 = (_DWORD *)a3[7];
  a3[7] = 0;
  *(_QWORD *)(v6 + 136) = v11;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_QWORD *)(v6 + 192) = 0;
  *(_DWORD *)(v6 + 200) = -1;
  *(_BYTE *)(v6 + 204) &= 0xFCu;
  *(_BYTE *)(v6 + 208) = 0;
  *(_BYTE *)(v6 + 212) = 0;
  *(_DWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_DWORD *)(v6 + 20) |= 0x40000u;
  *(_QWORD *)v6 = off_1E3438728;
  v12 = *(_QWORD *)(a2 + 528);
  if (v12)
  {
    v12 = *(_QWORD *)(v12 + 8);
    if (v12)
      v12 = *(_QWORD *)(v12 + 288);
  }
  *(_QWORD *)(a1 + 248) = v12;
  *(_QWORD *)(a1 + 256) = 1;
  v28 = 0;
  v13 = *(_DWORD **)(a1 + 88);
  ++*v13;
  v15 = *(_DWORD **)(a1 + 104);
  v30 = *(_QWORD *)(a1 + 96);
  v14 = v30;
  ++*v15;
  v16 = *(_DWORD **)(a1 + 112);
  ++*v16;
  v32 = *(_QWORD *)(a1 + 120);
  v17 = v32;
  ++*v11;
  v18 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v18 + 8) = 0;
  *(_WORD *)(v18 + 12) = *(_WORD *)(v18 + 12) & 0xF000 | 0xC0;
  *(_DWORD *)(v18 + 16) = 0;
  v29 = 0;
  *(_QWORD *)(v18 + 24) = v13;
  *(_QWORD *)(v18 + 32) = v14;
  v31 = 0u;
  *(_QWORD *)(v18 + 40) = v15;
  *(_QWORD *)(v18 + 48) = v16;
  *(_QWORD *)(v18 + 56) = v17;
  *(_QWORD *)(v18 + 64) = 0;
  v33 = 0u;
  *(_QWORD *)(v18 + 72) = v11;
  *(_BYTE *)(v18 + 148) = 0;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_BYTE *)(v18 + 144) = 0;
  *(_QWORD *)v18 = off_1E33F3080;
  *(_QWORD *)(a1 + 264) = v18;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v28, v19);
  v20 = *(_QWORD *)(a1 + 264);
  v21 = bmalloc::api::isoAllocate();
  *(_QWORD *)v21 = 0;
  *(_DWORD *)(v21 + 8) = 0;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_DWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = v20;
  ++*(_DWORD *)(v20 + 8);
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a2 + 192), v22);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  *(_QWORD *)(v21 + 64) = v23;
  v25 = *(unsigned __int8 *)(a2 + 3384);
  if (v25 == 4)
    v26 = 1;
  else
    v26 = 2 * (v25 == 2);
  *(_DWORD *)(v21 + 48) = v26;
  *(_QWORD *)(a1 + 272) = v21;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_BYTE *)(a1 + 312) = 1;
  *(_QWORD *)(a1 + 320) = a1;
  *(_BYTE *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 439) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 20) |= 1u;
  *(_QWORD *)(a1 + 184) = 0;
  WebCore::RenderObject::setPreferredLogicalWidthsDirty(a1, 1, 0);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xFE7FFFFF | 0x1000000;
  return a1;
}

uint64_t WebCore::Text::createTextRenderer@<X0>(WebCore::Text *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  __int16 v6;
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  WebCore::RenderSVGInlineText *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  WebCore::RenderCombineText *v16;

  v5 = *((_QWORD *)this + 4);
  v6 = *(_WORD *)(v5 + 28);
  if (v5)
    v7 = (v6 & 0x20) == 0;
  else
    v7 = 1;
  if ((v7 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
    && ((v8 = v6 & 0x80, v5) ? (v9 = v8 == 0) : (v9 = 1),
        v9
     || (v13 = *(_QWORD *)(v5 + 200)) == 0
     || ((v14 = *(_QWORD *)(v13 + 8)) != 0 ? (v15 = (*(_WORD *)(v14 + 28) & 0x20) == 0) : (v15 = 1),
         v15 || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::trefTag + 24))))
  {
    if ((*(_BYTE *)(*((_QWORD *)a2 + 3) + 231) & 1) != 0)
    {
      v16 = (WebCore::RenderCombineText *)WebCore::RenderCombineText::operator new(144);
      result = WebCore::RenderCombineText::RenderCombineText(v16, this, (WebCore::Text *)((char *)this + 80));
    }
    else
    {
      v10 = bmalloc::api::isoAllocate();
      result = WebCore::RenderText::RenderText(v10, 41, (uint64_t)this, (uint64_t *)this + 10);
    }
  }
  else
  {
    v12 = (WebCore::RenderSVGInlineText *)bmalloc::api::isoAllocate();
    result = (uint64_t)WebCore::RenderSVGInlineText::RenderSVGInlineText(v12, this, (const WTF::String **)this + 10);
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::RenderText::RenderText(uint64_t a1, char a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v12;
  unint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  __int16 v38;
  __int16 v39;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t *v50;
  uint64_t v51;
  int8x16_t v52;
  unsigned int v53;

  v6 = WebCore::RenderObject::RenderObject(a1, a2, a3, 2, 0);
  *(_QWORD *)v6 = off_1E3434D90;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 84) = xmmword_1969FCF50;
  v7 = *a4;
  if (*a4)
    *(_DWORD *)v7 += 2;
  *(_QWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 116) = 0;
  v8 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v8 & 0xFF80;
  v9 = *(_QWORD *)(*a4 + 8);
  v10 = *(unsigned int *)(*a4 + 4);
  v12 = (v9 & 7) == 0 || v10 == 0;
  if ((*(_BYTE *)(*a4 + 16) & 4) == 0)
  {
    v30 = v9 + 2 * v10;
    if (v12)
    {
      v31 = 0;
    }
    else
    {
      v31 = 0;
      v32 = 2 * v10 - 2;
      v33 = v9 + 2;
      do
      {
        v34 = *(unsigned __int16 *)v9;
        v9 += 2;
        *(_QWORD *)&v31 |= v34;
        if ((v33 & 7) == 0)
          break;
        v35 = v32;
        v32 -= 2;
        v33 += 2;
      }
      while (v35);
    }
    v42 = v30 & 0xFFFFFFFFFFFFFFF8;
    if (v9 >= (v30 & 0xFFFFFFFFFFFFFFF8))
    {
      v45 = (unsigned __int16 *)v9;
      goto LABEL_57;
    }
    v43 = v9 + 8;
    if (v42 > v9 + 8)
      v43 = v30 & 0xFFFFFFFFFFFFFFF8;
    v44 = v43 + ~v9;
    if (v44 >= 0x18)
    {
      v47 = (v44 >> 3) + 1;
      v45 = (unsigned __int16 *)(v9 + 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL));
      v48 = 0uLL;
      v49 = (int8x16_t)(unint64_t)v31;
      v50 = (int8x16_t *)(v9 + 16);
      v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = vorrq_s8(v50[-1], v49);
        v48 = vorrq_s8(*v50, v48);
        v50 += 2;
        v51 -= 4;
      }
      while (v51);
      v52 = vorrq_s8(v48, v49);
      v31 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
      if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        while (v45 != (unsigned __int16 *)v30)
        {
          v53 = *v45++;
          *(_QWORD *)&v31 |= v53;
        }
        v37 = *(_QWORD *)&v31 & 0xFF80FF80FF80FF80;
        goto LABEL_36;
      }
    }
    else
    {
      v45 = (unsigned __int16 *)v9;
    }
    do
    {
      v46 = *(_QWORD *)v45;
      v45 += 4;
      *(_QWORD *)&v31 |= v46;
    }
    while ((unint64_t)v45 < v42);
    goto LABEL_57;
  }
  v13 = v9 + v10;
  if (v12)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = v10 - 1;
    v16 = v9 + 1;
    do
    {
      v17 = *(unsigned __int8 *)v9++;
      *(_QWORD *)&v14 |= v17;
      if ((v16 & 7) == 0)
        break;
      v18 = v15--;
      ++v16;
    }
    while (v18);
  }
  v19 = v13 & 0xFFFFFFFFFFFFFFF8;
  if (v9 >= (v13 & 0xFFFFFFFFFFFFFFF8))
  {
    v22 = (uint64_t *)v9;
    goto LABEL_34;
  }
  v20 = v9 + 8;
  if (v19 > v9 + 8)
    v20 = v13 & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + ~v9;
  if (v21 < 0x18)
  {
    v22 = (uint64_t *)v9;
    do
    {
LABEL_21:
      v23 = *v22++;
      *(_QWORD *)&v14 |= v23;
    }
    while ((unint64_t)v22 < v19);
    goto LABEL_34;
  }
  v24 = (v21 >> 3) + 1;
  v22 = (uint64_t *)(v9 + 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL));
  v25 = 0uLL;
  v26 = (int8x16_t)(unint64_t)v14;
  v27 = (int8x16_t *)(v9 + 16);
  v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v26 = vorrq_s8(v27[-1], v26);
    v25 = vorrq_s8(*v27, v25);
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  v29 = vorrq_s8(v25, v26);
  v14 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
  if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_21;
LABEL_34:
  while (v22 != (uint64_t *)v13)
  {
    v36 = *(unsigned __int8 *)v22;
    v22 = (uint64_t *)((char *)v22 + 1);
    *(_QWORD *)&v14 |= v36;
  }
  v37 = *(_QWORD *)&v14 & 0x8080808080808080;
LABEL_36:
  v38 = v8 & 0xC000 | ((v37 == 0) << 7);
  *(_WORD *)(a1 + 118) = v38;
  if (!v7
    || !v37
    || (*(_BYTE *)(v7 + 16) & 4) != 0
    || (v41 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v7 + 8), *(unsigned int *)(v7 + 4)),
        v38 = *(_WORD *)(a1 + 118),
        v41 == 1))
  {
    v39 = 256;
  }
  else
  {
    v39 = 0;
  }
  *(_WORD *)(a1 + 118) = v38 & 0xFEFF | v39;
  return a1;
}

void WebCore::RenderElement::createFor(WebCore::Document *a1@<X0>, WebCore::Style *this@<X1>, int a3@<W2>, const WebCore::Element *a4@<X3>, uint64_t *a5@<X8>)
{
  char v5;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = a3;
  if (a3
    || (v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 80)) == 0
    || *(_DWORD *)(v9 + 24) != 1
    || *(_QWORD *)(v9 + 8)
    || (~*((unsigned __int16 *)a1 + 14) & 0x408) == 0
    && (v60 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 80),
        v58 = (*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)a1 + 368))(a1),
        v9 = v60,
        v58))
  {
    v10 = *((_BYTE *)this + 16);
    switch(v10 & 0x1F)
    {
      case 0:
        if ((v5 & 1) != 0)
          goto LABEL_62;
        goto LABEL_36;
      case 1:
      case 3:
      case 0x15:
        v11 = bmalloc::api::isoAllocate();
        *(_QWORD *)v11 = off_1E342E320;
        *(_QWORD *)(v11 + 8) = 0;
        v12 = *(_DWORD *)(v11 + 20) & 0x80000000;
        *(_DWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 20) = v12;
        if ((*((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFLL) == 0)
        {
          v26 = WTF::fastCompactMalloc((WTF *)0x28);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 16) = 0;
          *(_QWORD *)(v26 + 24) = 0;
          *(_QWORD *)(v26 + 8) = a1;
          *(_BYTE *)(v26 + 32) = 0;
          v28 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v28 & 0xFFFF000000000000 | v26;
          v29 = v28 & 0xFFFFFFFFFFFFLL;
          if ((v28 & 0xFFFFFFFFFFFFLL) != 0)
          {
            do
            {
              v30 = __ldaxr((unsigned int *)v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, (unsigned int *)v29));
            if (!v31)
            {
              atomic_store(1u, (unsigned int *)v29);
              v32 = *(unsigned int *)(v29 + 28);
              if ((_DWORD)v32)
              {
                v61 = v29;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v29 + 16), (WTF::StringImpl *)(*(_QWORD *)(v29 + 16) + 32 * v32));
                v29 = v61;
              }
              v33 = *(WTF **)(v29 + 16);
              if (v33)
              {
                *(_QWORD *)(v29 + 16) = 0;
                *(_DWORD *)(v29 + 24) = 0;
                v59 = v29;
                WTF::fastFree(v33, v27);
                v29 = v59;
              }
              WTF::fastFree((WTF *)v29, v27);
            }
          }
        }
        v13 = (unsigned int *)(*((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFLL);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 + 1, v13));
        *(_QWORD *)(v11 + 24) = v13;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 37) = 0;
        if ((*((_WORD *)a1 + 14) & 0xF000) == 0x9000)
          v15 = 93;
        else
          v15 = 92;
        *(_BYTE *)(v11 + 45) = v15;
        *(_BYTE *)(v11 + 46) = 1;
        *(_DWORD *)(v11 + 47) = 0;
        *(_BYTE *)(v11 + 51) = 0;
        *(_WORD *)(v11 + 52) = 1;
        *(_QWORD *)(v11 + 56) = 0;
        v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 1944);
        if (v16)
        {
          v17 = *(_DWORD *)(v16 + 16);
          ++*(_QWORD *)(v16 + 256);
          *(_DWORD *)(v16 + 16) = v17 + 1;
          if (v17 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x19438D39CLL);
          }
          *(_DWORD *)(v16 + 16) = v17;
        }
        *(_QWORD *)v11 = off_1E3422BC8;
        *(_QWORD *)(v11 + 64) = 0;
        *(_QWORD *)(v11 + 70) = 0;
        *(_DWORD *)(v11 + 80) = 0;
        v18 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        *(_QWORD *)(v11 + 88) = v18;
        *(_QWORD *)(v11 + 96) = *((_QWORD *)this + 2);
        v19 = *((_QWORD *)this + 3);
        *((_QWORD *)this + 3) = 0;
        *(_QWORD *)(v11 + 104) = v19;
        v20 = *((_QWORD *)this + 4);
        *((_QWORD *)this + 4) = 0;
        *(_QWORD *)(v11 + 112) = v20;
        *(_QWORD *)(v11 + 120) = *((_QWORD *)this + 5);
        v21 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = 0;
        *(_QWORD *)(v11 + 128) = v21;
        v22 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = 0;
        *(_QWORD *)(v11 + 136) = v22;
        *(_OWORD *)(v11 + 144) = 0u;
        *(_OWORD *)(v11 + 160) = 0u;
        *(_OWORD *)(v11 + 176) = 0u;
        *(_QWORD *)(v11 + 192) = 0;
        *(_QWORD *)v11 = off_1E341F9F8;
        *(_DWORD *)(v11 + 200) = -1;
        *(_BYTE *)(v11 + 204) &= 0xFCu;
        *(_BYTE *)(v11 + 208) = 0;
        *(_BYTE *)(v11 + 212) = 0;
        *(_DWORD *)(v11 + 240) = 0;
        *(_QWORD *)(v11 + 216) = 0;
        *(_QWORD *)(v11 + 224) = 0;
        *(_DWORD *)(v11 + 20) |= 0x40000u;
        goto LABEL_13;
      case 2:
        if ((v5 & 2) != 0)
          goto LABEL_62;
        v34 = bmalloc::api::isoAllocate();
        v24 = WebCore::RenderBlockFlow::RenderBlockFlow(v34, 19, (uint64_t)a1, this, 0);
        *(_QWORD *)v24 = off_1E3429E68;
        *(_QWORD *)(v24 + 248) = 0;
        *(_BYTE *)(v24 + 256) = 0;
        *(_BYTE *)(v24 + 260) = 0;
        *(_BYTE *)(v24 + 264) = 0;
LABEL_28:
        v25 = *(_DWORD *)(v24 + 20) | 1;
        goto LABEL_17;
      case 0xE:
      case 0xF:
        v41 = bmalloc::api::isoAllocate();
        v42 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v41, 5, (uint64_t)a1, this, 76, 0);
        *(_OWORD *)(v42 + 184) = 0u;
        *(_OWORD *)(v42 + 168) = 0u;
        *(_OWORD *)(v42 + 152) = 0u;
        *(_QWORD *)v42 = off_1E3421C90;
        *(_DWORD *)(v42 + 20) &= ~0x40000u;
        *(_BYTE *)(v42 + 200) = 0;
        *a5 = v42;
        return;
      case 0x10:
      case 0x11:
        v23 = bmalloc::api::isoAllocate();
        v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v23, 9, (uint64_t)a1, this, 204, 0);
        *(_OWORD *)(v24 + 184) = 0u;
        *(_OWORD *)(v24 + 168) = 0u;
        *(_OWORD *)(v24 + 152) = 0u;
        *(_QWORD *)v24 = off_1E3423D88;
        *(_OWORD *)(v24 + 200) = 0u;
        *(_OWORD *)(v24 + 216) = 0u;
        *(_QWORD *)(v24 + 248) = v24 + 256;
        *(_QWORD *)(v24 + 256) = 0;
        *(_QWORD *)(v24 + 232) = v24;
        *(_QWORD *)(v24 + 240) = 0;
        *(_QWORD *)(v24 + 264) = 0;
        *(_QWORD *)(v24 + 272) = v24 + 256;
        *(_WORD *)(v24 + 280) = 1;
        *(_BYTE *)(v24 + 288) = 0;
        *(_BYTE *)(v24 + 296) = 0;
        *(_BYTE *)(v24 + 304) = 0;
        *(_BYTE *)(v24 + 312) = 0;
        *(_QWORD *)(v24 + 384) = 0;
        *(_OWORD *)(v24 + 352) = 0u;
        *(_OWORD *)(v24 + 368) = 0u;
        *(_OWORD *)(v24 + 320) = 0u;
        *(_OWORD *)(v24 + 336) = 0u;
        *(_DWORD *)(v24 + 392) = 2;
        *(_QWORD *)(v24 + 400) = 0;
        goto LABEL_16;
      case 0x12:
      case 0x1A:
LABEL_63:
        *a5 = 0;
        return;
      case 0x13:
      case 0x14:
        v43 = bmalloc::api::isoAllocate();
        v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v43, 12, (uint64_t)a1, this, 76, 0);
        *(_OWORD *)(v24 + 184) = 0u;
        *(_OWORD *)(v24 + 168) = 0u;
        *(_OWORD *)(v24 + 152) = 0u;
        *(_QWORD *)v24 = off_1E3426B80;
        *(_OWORD *)(v24 + 224) = 0u;
        *(_QWORD *)(v24 + 208) = 0;
        *(_QWORD *)(v24 + 216) = v24 + 224;
        *(_QWORD *)(v24 + 200) = v24;
        *(_QWORD *)(v24 + 240) = v24 + 224;
        *(_WORD *)(v24 + 248) = 1;
        *(_QWORD *)(v24 + 256) = 0;
        *(_OWORD *)(v24 + 264) = 0u;
        *(_BYTE *)(v24 + 280) = 1;
        *(_OWORD *)(v24 + 288) = 0u;
        *(_OWORD *)(v24 + 304) = 0u;
        *(_QWORD *)(v24 + 320) = 0;
        *(_QWORD *)(v24 + 328) = v24 + 200;
        *(_WORD *)(v24 + 336) = 1;
        *(_BYTE *)(v24 + 338) = 0;
        *(_BYTE *)(v24 + 340) = 0;
        *(_BYTE *)(v24 + 344) = 0;
        *(_BYTE *)(v24 + 348) = 0;
        *(_BYTE *)(v24 + 352) = 0;
        *(_BYTE *)(v24 + 356) = 0;
        *(_BYTE *)(v24 + 360) = 0;
        *(_BYTE *)(v24 + 364) = 0;
        *(_BYTE *)(v24 + 368) = 0;
        *(_OWORD *)(v24 + 440) = 0u;
        *(_OWORD *)(v24 + 424) = 0u;
        *(_OWORD *)(v24 + 408) = 0u;
        *(_OWORD *)(v24 + 392) = 0u;
        *(_OWORD *)(v24 + 376) = 0u;
        *(_QWORD *)(v24 + 464) = v24 + 200;
        *(_QWORD *)(v24 + 472) = v24;
        *(_QWORD *)(v24 + 496) = 0;
        *(_OWORD *)(v24 + 480) = 0u;
        *(_BYTE *)(v24 + 504) = 0;
        *(_OWORD *)(v24 + 624) = 0u;
        *(_OWORD *)(v24 + 640) = 0u;
        *(_OWORD *)(v24 + 656) = 0u;
        *(_QWORD *)(v24 + 672) = 0;
        *(_OWORD *)(v24 + 520) = 0u;
        *(_OWORD *)(v24 + 536) = 0u;
        *(_OWORD *)(v24 + 552) = 0u;
        *(_OWORD *)(v24 + 568) = 0u;
        *(_OWORD *)(v24 + 584) = 0u;
        *(_OWORD *)(v24 + 600) = 0u;
        *(_QWORD *)(v24 + 680) = v24;
        *(_QWORD *)(v24 + 688) = 0;
        v44 = WebCore::GridPosition::gMaxPositionForTesting;
        if (!byte_1EE2F9580)
          v44 = 1000000;
        if (v44 >= 1)
          v45 = 1;
        else
          v45 = v44;
        if (-v44 > v45 - 1)
          v46 = -v44;
        else
          v46 = (v45 - 1);
        LODWORD(v47) = 1 - v44;
        if ((int)v47 <= v45)
          v47 = v45;
        else
          v47 = v47;
        *(_QWORD *)(v24 + 700) = v46 | (v47 << 32);
        *(_DWORD *)(v24 + 708) = 1;
        *(_QWORD *)(v24 + 712) = 0x200000004;
        *(_DWORD *)(v24 + 744) = 0;
        *(_OWORD *)(v24 + 728) = 0uLL;
LABEL_16:
        v25 = *(_DWORD *)(v24 + 20) & 0xFFFBFFFF;
        goto LABEL_17;
      case 0x16:
      case 0x18:
LABEL_36:
        v39 = bmalloc::api::isoAllocate();
        v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v39, 16, (uint64_t)a1, this, 40, 0);
        *(_QWORD *)v24 = off_1E3428870;
        *(_QWORD *)(v24 + 152) = 0;
        *(_QWORD *)(v24 + 160) = 0;
        v25 = *(_DWORD *)(v24 + 20) | 0x40000;
LABEL_17:
        *(_DWORD *)(v24 + 20) = v25;
        *a5 = v24;
        return;
      case 0x17:
      case 0x19:
        goto LABEL_62;
      default:
        if ((v5 & 4) != 0 && (v10 & 0x1Eu) - 4 <= 9)
        {
LABEL_62:
          v55 = bmalloc::api::isoAllocate();
          WebCore::RenderBlockFlow::RenderBlockFlow(v55, 1, (uint64_t)a1, this, 0);
          *a5 = v56;
        }
        else if ((v10 & 0x1F) == 0xC)
        {
          v11 = bmalloc::api::isoAllocate();
          v40 = WebCore::RenderBlockFlow::RenderBlockFlow(v11, 37, (uint64_t)a1, this, 0);
          *(_QWORD *)v40 = off_1E3433080;
          *(_QWORD *)(v40 + 248) = 0x1FFFFFFLL;
          *(_DWORD *)(v40 + 256) = 0;
          WebCore::RenderTableCell::updateColAndRowSpanFlags(v40);
LABEL_13:
          *a5 = v11;
        }
        else
        {
          switch(v10 & 0x1F)
          {
            case 4:
            case 5:
              v11 = bmalloc::api::isoAllocate();
              v50 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v11, 35, (uint64_t)a1, this, 76, 0);
              *(_OWORD *)(v50 + 184) = 0u;
              *(_OWORD *)(v50 + 168) = 0u;
              *(_OWORD *)(v50 + 152) = 0u;
              *(_QWORD *)v50 = off_1E3432148;
              *(_QWORD *)(v50 + 200) = 0;
              *(_QWORD *)(v50 + 208) = 0;
              *(_DWORD *)(v50 + 212) = 1;
              v51 = (void *)WTF::fastMalloc((WTF *)4);
              *(_DWORD *)(v11 + 208) = 1;
              *(_QWORD *)(v11 + 200) = v51;
              v52 = *(unsigned int *)(v11 + 212);
              if ((_DWORD)v52)
                bzero(v51, 4 * v52);
              *(_OWORD *)(v11 + 248) = 0u;
              *(_OWORD *)(v11 + 232) = 0u;
              *(_OWORD *)(v11 + 216) = 0u;
              *(_OWORD *)(v11 + 296) = 0u;
              *(_OWORD *)(v11 + 312) = 0u;
              *(_OWORD *)(v11 + 264) = 0u;
              *(_OWORD *)(v11 + 280) = 0u;
              *(_BYTE *)(v11 + 328) &= 0x80u;
              *(_QWORD *)(v11 + 340) = 0;
              *(_QWORD *)(v11 + 332) = 0;
              *(_DWORD *)(v11 + 348) = -64;
              *(_QWORD *)(v11 + 352) = 4294967232;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 168))(v11, 0);
              goto LABEL_13;
            case 6:
            case 7:
            case 8:
              v49 = bmalloc::api::isoAllocate();
              v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v49, 40, (uint64_t)a1, this, 12, 0);
              *(_OWORD *)(v24 + 184) = 0u;
              *(_OWORD *)(v24 + 168) = 0u;
              *(_OWORD *)(v24 + 152) = 0u;
              *(_QWORD *)v24 = off_1E3434710;
              *(_OWORD *)(v24 + 216) = 0u;
              *(_OWORD *)(v24 + 232) = 0u;
              *(_OWORD *)(v24 + 248) = 0u;
              *(_OWORD *)(v24 + 200) = 0u;
              *(_OWORD *)(v24 + 264) = 0u;
              *(_DWORD *)(v24 + 279) = 0;
              goto LABEL_28;
            case 9:
              v48 = bmalloc::api::isoAllocate();
              v24 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v48, 39, (uint64_t)a1, this, 12, 0);
              *(_OWORD *)(v24 + 184) = 0u;
              *(_OWORD *)(v24 + 168) = 0u;
              *(_OWORD *)(v24 + 152) = 0u;
              *(_QWORD *)v24 = off_1E3434090;
              *(_DWORD *)(v24 + 200) |= 0x7FFFFFFFu;
              goto LABEL_28;
            case 0xA:
            case 0xB:
              v57 = WebCore::RenderTableCol::operator new(208);
              *a5 = WebCore::RenderTableCol::RenderTableCol(v57, (uint64_t)a1, this);
              break;
            case 0xD:
              v53 = bmalloc::api::isoAllocate();
              v54 = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v53, 36, (uint64_t)a1, this, 0);
              *v54 = off_1E34328D8;
              *a5 = (uint64_t)v54;
              break;
            default:
              goto LABEL_63;
          }
        }
        break;
    }
  }
  else
  {
    v35 = v9;
    WebCore::Style::loadPendingResources(this, *(WebCore::RenderStyle **)(*((_QWORD *)a1 + 5) + 8), a1, a4);
    if (*(_DWORD *)(v35 + 24) != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19438D4A0);
    }
    v36 = *(_DWORD **)(v35 + 32);
    ++v36[2];
    v37 = WebCore::RenderImage::operator new(240);
    v38 = WebCore::RenderImage::RenderImage(v37, 15, (uint64_t)a1, this, (uint64_t)v36, 1.0);
    *(_BYTE *)(v38 + 233) = 1;
    *a5 = v38;
    if (v36[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 8))(v36);
    else
      --v36[2];
  }
}

uint64_t WebCore::RenderObject::RenderObject(uint64_t a1, char a2, uint64_t a3, char a4, __int16 a5)
{
  int v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;

  v10 = *(_DWORD *)(a1 + 20);
  *(_QWORD *)a1 = off_1E342E320;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v10 & 0x80000000;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = a3;
    *(_BYTE *)(v17 + 32) = 0;
    v19 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v19 & 0xFFFF000000000000 | v17;
    v20 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)v20);
        v23 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v23)
        {
          v26 = v20;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v23));
          v20 = v26;
        }
        v24 = *(WTF **)(v20 + 16);
        if (v24)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          v25 = v20;
          WTF::fastFree(v24, v18);
          v20 = v25;
        }
        WTF::fastFree((WTF *)v20, v18);
      }
    }
  }
  v11 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  v13 = a4 & 0xFE | 1;
  if ((*(_WORD *)(a3 + 28) & 0xF000) != 0x9000)
    v13 = a4;
  *(_BYTE *)(a1 + 45) = v13;
  *(_BYTE *)(a1 + 46) = a2;
  *(_DWORD *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 51) = 0;
  *(_WORD *)(a1 + 52) = a5;
  *(_QWORD *)(a1 + 56) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 1944);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 16);
    ++*(_QWORD *)(v14 + 256);
    *(_DWORD *)(v14 + 16) = v15 + 1;
    if (v15 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x19438D630);
    }
    *(_DWORD *)(v14 + 16) = v15;
  }
  return a1;
}

uint64_t WebCore::RenderObject::setChildrenInline(uint64_t this, int a2)
{
  int v2;

  if (a2)
    v2 = 0x40000;
  else
    v2 = 0;
  *(_DWORD *)(this + 20) = *(_DWORD *)(this + 20) & 0xFFFBFFFF | v2;
  return this;
}

uint64_t WebCore::RenderTableCell::updateColAndRowSpanFlags(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = this;
  v2 = *(_BYTE *)(this + 45);
  if ((v2 & 1) != 0)
  {
    LODWORD(v3) = 0;
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if (v3)
    {
      if ((*(_WORD *)(v3 + 28) & 8) == 0)
        goto LABEL_12;
      this = WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)this);
      LODWORD(v3) = ((_DWORD)this != 1) << 26;
      v2 = *(_BYTE *)(v1 + 45);
    }
  }
  v4 = *(_DWORD *)(v1 + 248) & 0xFBFFFFFF | v3;
  *(_DWORD *)(v1 + 248) = v4;
  if ((v2 & 1) != 0)
  {
    LODWORD(v5) = 0;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
  if (v5)
  {
    if ((*(_WORD *)(v5 + 28) & 8) != 0)
    {
      this = WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)v1);
      LODWORD(v5) = ((_DWORD)this != 1) << 27;
      v4 = *(_DWORD *)(v1 + 248);
      goto LABEL_9;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x19438D754);
  }
LABEL_9:
  *(_DWORD *)(v1 + 248) = v4 & 0xF7FFFFFF | v5;
  return this;
}

uint64_t WebCore::RenderTableCell::parseRowSpanFromDOM(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  __int16 v7;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v1 && (*(_WORD *)(v1 + 28) & 8) == 0)
      goto LABEL_23;
  }
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
    if (v2 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v2 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    {
      v3 = WebCore::HTMLTableCellElement::rowSpanForBindings((WebCore::HTMLTableCellElement *)v1);
      if (v3 <= 1)
        v4 = 1;
      else
        v4 = v3;
      if (v4 >= 0x7FFFFFFE)
        return 2147483646;
      else
        return v4;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v6)
    return 1;
  v7 = *(_WORD *)(v6 + 28);
  if ((v7 & 8) == 0)
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x19438D87CLL);
  }
  if ((v7 & 0x40) == 0 || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24))
    return 1;
  LODWORD(result) = WebCore::MathMLElement::rowSpan((WebCore::MathMLElement *)v6);
  if (result >= 0x7FFFFFFE)
    return 2147483646;
  else
    return result;
}

uint64_t WebCore::RenderTableCell::parseColSpanFromDOM(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  __int16 v5;

  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if (v1 && (*(_WORD *)(v1 + 28) & 8) == 0)
      goto LABEL_19;
  }
  if ((*(_WORD *)(v1 + 28) & 0x10) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24);
    if (v2 == *(_QWORD *)(WebCore::HTMLNames::tdTag + 24) || v2 == *(_QWORD *)(WebCore::HTMLNames::thTag + 24))
    {
      LODWORD(result) = WebCore::HTMLTableCellElement::colSpan((WebCore::HTMLTableCellElement *)v1);
      goto LABEL_7;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v4)
    return 1;
  v5 = *(_WORD *)(v4 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19438D990);
  }
  if ((v5 & 0x40) == 0 || *(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::MathMLNames::mtdTag + 24))
    return 1;
  LODWORD(result) = WebCore::MathMLElement::colSpan((WebCore::MathMLElement *)v4);
LABEL_7:
  if (result >= 0x1FFFFFE)
    return 33554430;
  else
    return result;
}

uint64_t WebCore::HTMLTableCellElement::colSpan(WebCore::HTMLTableCellElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v11;
  uint64_t v12;

  v1 = *((_QWORD *)this + 13);
  if (v1
    && ((v2 = *(_DWORD *)(v1 + 4), (v2 & 1) != 0)
      ? (v3 = *(_QWORD *)(v1 + 40), LODWORD(v4) = *(_DWORD *)(v1 + 52))
      : (v3 = v1 + 32, LODWORD(v4) = v2 >> 5),
        (_DWORD)v4))
  {
    v4 = v4;
    v5 = (uint64_t *)(v3 + 8);
    while (1)
    {
      v6 = *(v5 - 1);
      if (v6 == WebCore::HTMLNames::colspanAttr
        || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::colspanAttr + 24)
        && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::colspanAttr + 32))
      {
        break;
      }
      v5 += 2;
      if (!--v4)
      {
        v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v5;
  if (v7)
  {
    v8 = *(uint64_t **)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4) | ((unint64_t)((*(_DWORD *)(v7 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v8 = 0;
    v9 = 0x100000000;
  }
  WebCore::parseHTMLInteger(v8, v9, &v12);
  if (HIDWORD(v12) == 1)
    goto LABEL_15;
  if (HIDWORD(v12))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
    if ((_DWORD)v12 == 1)
      return 1000;
    else
      return 1;
  }
  v11 = v12;
  if ((v12 & 0x80000000) != 0)
    return 1;
  if (v12 <= 1)
    v11 = 1;
  if (v11 >= 0x3E8)
    return 1000;
  else
    return v11;
}

uint64_t *WebCore::parseHTMLInteger@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  if (!(_DWORD)a2)
  {
    *a3 = 0x100000002;
    return result;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v3 = 0;
    v4 = 0x100000002;
    while (1)
    {
      v5 = *((unsigned __int8 *)result + v3);
      if (v5 > 0x20 || ((1 << v5) & 0x100003600) == 0)
        break;
      if (a2 == ++v3)
        goto LABEL_25;
    }
    if (v5 == 43 || v5 == 45)
    {
      if (a2 - 1 == v3)
      {
LABEL_25:
        *a3 = v4;
        return result;
      }
      v7 = ~v3 + a2;
      v8 = (unsigned __int8 *)result + v3 + 1;
      v9 = *v8;
    }
    else
    {
      v7 = a2 - v3;
      v8 = (unsigned __int8 *)result + v3;
      v9 = *((unsigned __int8 *)result + v3);
    }
    if ((v9 - 48) <= 9)
    {
      v10 = 0;
      v11 = v8 + 1;
      v12 = v7 - 1;
      do
      {
        v13 = v9 - 48;
        if (v10 > 0xCCCCCCC || v10 == 214748364 && (v5 != 45 ? (v15 = 7) : (v15 = 8), v13 > v15))
        {
          v10 = v5 != 45;
          HIDWORD(v4) = 1;
          goto LABEL_24;
        }
        v10 = v13 + 10 * v10;
        if (!v12)
          break;
        v14 = *v11++;
        v9 = v14;
        --v12;
      }
      while ((v14 - 48) < 0xA);
      if (v5 == 45)
        v10 = -v10;
      HIDWORD(v4) = 0;
LABEL_24:
      LODWORD(v4) = v10;
    }
    goto LABEL_25;
  }
  return WebCore::parseHTMLIntegerInternal<char16_t>(a3, (uint64_t)result, a2);
}

uint64_t WebCore::PseudoElement::rendererIsNeeded(WebCore::PseudoElement *this, const WebCore::RenderStyle *a2)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t **v8;
  WTF::StringImpl *v9;
  void *v10;
  char v11;
  int v12;
  _DWORD *v13;
  char v14;

  if ((*((_QWORD *)a2 + 2) & 0x1FLL) == 0x1A || !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80))
  {
    v4 = *((_QWORD *)this + 14);
    if (!v4)
      goto LABEL_6;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      goto LABEL_6;
    *(_DWORD *)(v5 + 24) += 2;
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0)
      v6 = 0;
    else
      v6 = (*(uint64_t (**)(WebCore::PseudoElement *))(*(_QWORD *)this + 368))(this);
    v7 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v7 += 2;
    v12 = v6;
    v13 = v7;
    v14 = 1;
    v8 = (uint64_t **)WebCore::Element::keyframeEffectStack(v5, (uint64_t)&v12);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v12, v9);
    if (v8)
      v11 = WebCore::KeyframeEffectStack::requiresPseudoElement(v8);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v10);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    v2 = v11;
    if (!v8)
LABEL_6:
      v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  return v2 & 1;
}

uint64_t *WebCore::GamepadProvider::singleton(WebCore::GamepadProvider *this)
{
  uint64_t *result;

  result = (uint64_t *)WebCore::sharedProvider;
  if (!WebCore::sharedProvider)
  {
    result = &WebCore::GamepadProvider::singleton(void)::defaultProvider;
    {
      qword_1ECE90E30 = 0;
      unk_1ECE90E38 = 0;
      WebCore::GamepadProvider::singleton(void)::defaultProvider = (uint64_t)&off_1E340A8E8;
      *(_QWORD *)algn_1ECE90E28 = 0;
    }
    WebCore::sharedProvider = (uint64_t)&WebCore::GamepadProvider::singleton(void)::defaultProvider;
  }
  return result;
}

WebCore::RenderLayerCompositor *WebCore::LocalFrameView::updateContentsSize(WebCore::RenderLayerCompositor *this)
{
  _QWORD *v1;
  WebCore::RenderLayerCompositor *v2;
  uint64_t v3;
  WebCore::RenderView *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  WebCore::RenderLayerCompositor *v16;
  WebCore::RenderLayerCompositor *v17;
  WebCore::RenderLayerCompositor *v18;
  WTF *v19;
  void *v20;

  v1 = (_QWORD *)*((_QWORD *)this + 41);
  if (v1[36])
  {
    v2 = this;
    v3 = v1[37];
    if (v3)
    {
      v4 = *(WebCore::RenderView **)(v3 + 1944);
      if (v4)
      {
        if ((*(_QWORD *)(v1[17] + 704) & 0x1000) == 0)
        {
          if (*((_BYTE *)this + 1176))
          {
            v5 = (uint64_t **)*((_QWORD *)this + 163);
            if (v5)
            {
              v6 = *v5;
              if (*v5)
              {
                if (*((_DWORD *)v6 - 3))
                {
                  v7 = *((unsigned int *)v6 - 1);
                  if ((_DWORD)v7)
                  {
                    v8 = 8 * v7;
                    v9 = *v5;
                    while ((unint64_t)(*v9 + 1) <= 1)
                    {
                      ++v9;
                      v8 -= 8;
                      if (!v8)
                        goto LABEL_13;
                    }
                  }
                  else
                  {
                    v9 = *v5;
                  }
                  v14 = &v6[v7];
                  if (v9 != v14)
                  {
                    v15 = *v9;
LABEL_34:
                    if (*(_QWORD *)(v15 + 8))
                    {
                      WebCore::LocalFrameView::setViewportConstrainedObjectsNeedLayout(this);
                      v16 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
                      if (!v16)
                      {
                        v17 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
                        v16 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v17, v4);
                        v18 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
                        *((_QWORD *)v4 + 50) = v16;
                        if (v18)
                        {
                          WebCore::RenderLayerCompositor::~RenderLayerCompositor(v18);
                          WTF::fastFree(v19, v20);
                          v16 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v4 + 50);
                        }
                      }
                      this = (WebCore::RenderLayerCompositor *)WebCore::RenderLayerCompositor::enableCompositingMode(v16, 1);
                    }
                    else
                    {
                      while (++v9 != v14)
                      {
                        v15 = *v9;
                        if ((unint64_t)(*v9 + 1) > 1)
                        {
                          if (v9 != v14)
                            goto LABEL_34;
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_13:
    if (!*((_BYTE *)v2 + 321)
      || (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 41) + 136) + 704) & 0x1000) == 0 && *((_BYTE *)v2 + 1176))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 43) + 8) + 328) + 296);
      if (v10)
        v10 = *(_QWORD *)(v10 + 1944);
      if ((*((_QWORD *)v2 + 48) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*((_QWORD *)v2 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
        || v10 && (*(_BYTE *)(v10 + 20) & 0xF8) != 0
        || (v11 = *((_QWORD *)v2 + 58)) != 0 && *(_QWORD *)(v11 + 8)
        || *((_DWORD *)v2 + 122) && *((_BYTE *)v2 + 478))
      {
        this = (WebCore::RenderLayerCompositor *)WebCore::LocalFrameViewLayoutContext::layout((WebCore::RenderLayerCompositor *)((char *)v2 + 336));
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)v2 + 41) + 296);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 1944);
      if (v13)
      {
        this = *(WebCore::RenderLayerCompositor **)(v13 + 400);
        if (this)
        {
          if (*((_BYTE *)this + 195))
            return WebCore::RenderLayerCompositor::frameViewDidChangeSize(this);
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::LayoutIntegration::LineLayout::computeIntrinsicWidthConstraints(WebCore::LayoutIntegration::LineLayout *this)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Layout::LayoutState *v4;
  void *v5;
  uint64_t v6;
  const WebCore::RenderStyle *v7;
  void *v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  WTF **v13;
  WTF *v15;
  void *v16;
  _BYTE *v17;
  _QWORD v18[2];
  uint64_t v19;
  WebCore::Layout::LayoutState *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  WTF *v35;
  int v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  WTF **v46;
  char v47;

  v2 = *((_QWORD *)this + 4) + 32;
  v40 = v2;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  if (v3 && (*(_WORD *)(v3 + 12) & 0x40) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19438E150);
  }
  v4 = *(WebCore::Layout::LayoutState **)(*((_QWORD *)this + 3) + 8);
  v18[0] = *(_QWORD *)(*((_QWORD *)this + 2) + 56);
  v18[1] = v4;
  v19 = v3;
  ++*(_DWORD *)(v3 + 8);
  v20 = v4;
  v21 = v2;
  v22 = v18;
  v23 = v18;
  v24 = WebCore::Layout::LayoutState::inlineContentCache(v4, v3);
  v25 = &v40;
  v28 = 0;
  LOBYTE(v29) = 0;
  v30 = 0;
  v34 = 0;
  LOBYTE(v35) = 0;
  v37 = 0;
  v39 = 0;
  v26 = 0;
  v27 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if (*(__int16 *)(*(_QWORD *)(v18[0] + 40) + 300) != -1)
  {
    v29 = *(__int16 *)(*(_QWORD *)(v18[0] + 40) + 300);
    v30 = 1;
  }
  v38 = 1;
  if (!*((_DWORD *)v4 + 12))
    v39 = 1;
  if (*((_QWORD *)this + 9))
  {
    v17 = (_BYTE *)*((_QWORD *)this + 5);
    v17[1464] = 0;
    v17[1468] = 0;
    v17[1472] = 0;
    v17[1476] = 0;
    if (v17[1456])
    {
      WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v17 + 32), v5);
      v17[1456] = 0;
    }
  }
  WebCore::LayoutIntegration::BoxGeometryUpdater::setGeometriesForIntrinsicWidth((uint64_t)this + 88, 0);
  v9 = WebCore::Layout::InlineFormattingContext::minimumMaximumContentSize((WebCore::Layout::InlineFormattingContext *)v18, *((WebCore::Layout::InlineDamage **)this + 9), v6, v7);
  if (v37)
  {
    v10 = v35;
    if (v35)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree(v10, v8);
    }
  }
  if (v32)
    WTF::fastFree((WTF *)(v32 - 16), v8);
  v11 = v19;
  v19 = 0;
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 8);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x19438E130);
    }
    *(_DWORD *)(v11 + 8) = v12 - 1;
  }
  if (v47)
  {
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WebCore::Font::~Font(v13);
        WTF::fastFree(v15, v16);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  return v9;
}

void WebCore::Layout::IntrinsicWidthHandler::minimumContentSize(uint64_t **this)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  WTF *v15;
  unint64_t v16;
  __int16 v17;
  unsigned int v19;
  BOOL v20;
  int v21;
  unsigned int v23;
  int v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[2];
  WTF *v33;
  uint64_t v34;
  _QWORD v35[151];
  char v36;
  char v37;
  char v38;
  __int128 v39;
  char v40;
  char v41;
  int v42;
  uint64_t v43;
  char v44;
  char v45;
  _QWORD v46[2];
  int v47;
  WTF *v48[2];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[312];
  WTF *v55;
  int v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  char v63;
  uint64_t *v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  __int128 v69;
  char v70;
  char v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE v74[40];

  v2 = **this;
  if (*((_BYTE *)this + 48))
  {
    v3 = *(_DWORD *)(v2 + 56);
    if ((v3 & 0x40000000) == 0)
    {
      v4 = (*(_DWORD *)(*(_QWORD *)(v2 + 40) + 228) & 0x7000) == 0x5000
        || ((*(_DWORD *)(*(_QWORD *)(v2 + 40) + 228) >> 6) & 5 | 2) == 3;
      v5 = v3 & 0x38000000;
      if (v4 && v5 != 0x8000000)
        goto LABEL_45;
    }
  }
  else
  {
    if (WebCore::Layout::isSubtreeEligibleForNonLineBuilderMinimumWidth(**this, (const WebCore::Layout::ElementBox *)v2))
    {
      v2 = **this;
LABEL_45:
      WebCore::Layout::IntrinsicWidthHandler::simplifiedMinimumWidth((WebCore::Layout::IntrinsicWidthHandler *)this, (const WebCore::Layout::ElementBox *)v2);
      return;
    }
    if (!*((_BYTE *)this + 48))
    {
      v26 = *this;
      v27 = this[1];
      v28 = **this;
      v33 = (WTF *)v35;
      v34 = 10;
      v35[150] = &v33;
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v47 = 0;
      v39 = 0u;
      *(_QWORD *)((char *)v46 + 7) = 0;
      v46[0] = 0;
      v49 = 0u;
      *(_OWORD *)v48 = 0u;
      v29 = v27[2];
      v30 = *((unsigned int *)v27 + 7);
      v50 = v29;
      v51 = v30;
      v52 = (WTF *)v54;
      v53 = 32;
      v54[256] = 0;
      v54[280] = 0;
      v54[288] = 0;
      v57 = 0;
      v58 = v26;
      v59 = v28;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v32[0] = &off_1E33F2C50;
      v32[1] = v26;
      v64 = v26 + 2;
      v71 = 0;
      v67 = 0;
      v66 = 0;
      v65 = 0u;
      v70 = 0;
      v69 = 0u;
      v68 = 0u;
      v72 = v74;
      v73 = 1;
      v74[24] = 0;
      v74[28] = 0;
      v74[32] = 0;
      WebCore::Layout::IntrinsicWidthHandler::computedIntrinsicWidthForConstraint((uint64_t)this, 0, (uint64_t)v32, 0);
      WebCore::Layout::LineBuilder::~LineBuilder((WebCore::Layout::LineBuilder *)v32, v31);
      return;
    }
  }
  v7 = *this;
  v8 = this[2];
  if (v8)
  {
    v16 = (unint64_t)v8 - 1;
    v9 = this[1];
    if (v16 < *((unsigned int *)v9 + 7))
    {
      v10 = *(_QWORD *)(v9[2] + 24 * v16);
      v17 = *(_WORD *)(v10 + 12);
      if (v10 && (v17 & 0x40) != 0)
      {
        v19 = *(_DWORD *)(v10 + 32) & 0x1F;
        v20 = v19 > 0x18;
        v21 = (1 << v19) & 0x1400001;
        if (!v20 && v21 != 0)
        {
          v23 = v17 & 0xF;
          v20 = v23 > 0xB;
          v24 = (1 << v23) & 0x884;
          if (v20 || v24 == 0)
            goto LABEL_14;
        }
      }
    }
  }
  else
  {
    v9 = this[1];
  }
  v10 = *v7;
LABEL_14:
  WebCore::Layout::TextOnlySimpleLineBuilder::TextOnlySimpleLineBuilder((uint64_t)v32, (uint64_t)v7, v10, 0, (uint64_t)(v9 + 2));
  WebCore::Layout::IntrinsicWidthHandler::computedIntrinsicWidthForConstraint((uint64_t)this, 0, (uint64_t)v32, 0);
  v32[0] = &unk_1E33F2BC8;
  if (v57)
  {
    v12 = v55;
    if (v55)
    {
      v55 = 0;
      v56 = 0;
      WTF::fastFree(v12, v11);
    }
  }
  v13 = v52;
  if (v54 != (_BYTE *)v52 && v52)
  {
    v52 = 0;
    LODWORD(v53) = 0;
    WTF::fastFree(v13, v11);
  }
  v14 = v48[0];
  if (v48[0])
  {
    v48[0] = 0;
    LODWORD(v48[1]) = 0;
    WTF::fastFree(v14, v11);
  }
  if (v46[0])
    WTF::fastFree((WTF *)(v46[0] - 16), v11);
  v15 = v33;
  if (v35 != (_QWORD *)v33)
  {
    if (v33)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree(v15, v11);
    }
  }
}

uint64_t WebCore::Layout::isSubtreeEligibleForNonLineBuilderMinimumWidth(uint64_t a1, const WebCore::Layout::ElementBox *a2)
{
  int v2;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  __int16 v14;

  v2 = *(_DWORD *)(a1 + 56);
  if ((v2 & 0x40000000) != 0)
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 40) + 228) & 0x7000) != 0x5000
    && ((*(_DWORD *)(*(_QWORD *)(a1 + 40) + 228) >> 6) & 5 | 2) != 3)
  {
    return 0;
  }
  v6 = v2 & 0x38000000;
  result = v6 != 0x8000000;
  v7 = *(_QWORD *)(a1 + 120);
  if (v7 && v6 != 0x8000000)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 32);
      if ((v8 & 0x180000) != 0x100000 && (*(_QWORD *)(v7 + 32) & 0xE000000) != 0)
        break;
      v10 = v8 & 0x1F;
      v11 = v10 > 0x18;
      v12 = (1 << v10) & 0x1400001;
      v13 = v11 || v12 == 0;
      if (v13 || (v14 = *(_WORD *)(v7 + 12), (v14 & 0xFu) <= 0xB) && ((1 << (v14 & 0xF)) & 0x884) != 0)
      {
        result = 1;
      }
      else
      {
        result = 1;
        if ((v14 & 0x20) == 0 && (v14 & 0xFu) - 11 <= 0xFFFFFFFD)
        {
          if ((v14 & 0x40) == 0)
          {
            result = 96;
            __break(0xC471u);
            return result;
          }
          result = WebCore::Layout::isSubtreeEligibleForNonLineBuilderMinimumWidth((WebCore::Layout *)v7, a2);
        }
      }
      v7 = *(_QWORD *)(v7 + 88);
      if (!v7 || (result & 1) == 0)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::BlobRegistryImpl::setPartitioningEnabled(uint64_t this, int a2)
{
  uint64_t v3;
  NSObject *v4;
  char v5;
  _BYTE v6[21];
  char v7;
  uint64_t v8;

  v3 = this;
  v8 = *MEMORY[0x1E0C80C00];
  if (!a2 || !*(_BYTE *)(this + 64))
  {
    v4 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v6 = 134218240;
      *(_QWORD *)&v6[4] = v3;
      *(_WORD *)&v6[12] = 1024;
      *(_DWORD *)&v6[14] = a2;
      _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "BlobRegistryImpl::setPartitioningEnabled: (%p) enabled: %d.", v6, 0x12u);
    }
    if (a2)
    {
      *(_QWORD *)v6 = 0;
      *(_QWORD *)&v6[8] = 0;
      v5 = 1;
      *(_QWORD *)&v6[13] = 0;
    }
    else
    {
      v5 = 0;
      v6[0] = 0;
    }
    v7 = v5;
    this = std::__optional_storage_base<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>,false>>(v3 + 40, (uint64_t *)v6);
    if (v7)
    {
      this = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        return WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::SecurityOriginData>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::SecurityOriginData,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(*(WTF **)v6, (WTF::StringImpl *)*(unsigned int *)&v6[8]);
    }
  }
  return this;
}

uint64_t WebCore::DisplayList::SetInlineFillColor::apply(WebCore::DisplayList::SetInlineFillColor *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL4 v7;
  int v8;
  char *v10;
  int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE v23[64];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)this | 0x1104000000000000;
  v5 = (char *)a2 + 8;
  v4 = *((_QWORD *)a2 + 1);
  v21 = 0;
  v22 = v3;
  v23[0] = 0;
  v24 = 0;
  v7 = (v4 & 0x8000000000000) == 0 && v4 == v3;
  v8 = *((_DWORD *)a2 + 22);
  if (v7 && v8 == 0)
  {
    v11 = 0;
    goto LABEL_18;
  }
  if (!v7)
  {
    if ((v4 & 0x8000000000000) != 0)
    {
      v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
    *((_QWORD *)a2 + 1) = v22;
    v22 = 0;
    v8 = *((_DWORD *)a2 + 22);
  }
  v10 = (char *)a2 + 24;
  if (v8 == -1)
  {
    if (v24 == -1)
    {
      *((_DWORD *)a2 + 46) |= 1u;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (v24 != -1)
  {
LABEL_16:
    v19 = (char *)a2 + 24;
    ((void (*)(char **))off_1E3413D20[v24])(&v19);
    goto LABEL_17;
  }
  ((void (*)(char **, char *))off_1E3413D08[v8])(&v19, v10);
  *((_DWORD *)a2 + 22) = -1;
LABEL_17:
  v11 = v24;
  *((_DWORD *)a2 + 46) |= 1u;
  if (v11 != -1)
LABEL_18:
    ((void (*)(char **, _BYTE *))off_1E3413D08[v11])(&v19, v23);
LABEL_19:
  v24 = -1;
  if ((v22 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v10);
    }
  }
  if (v21 != -1)
    ((void (*)(char **, uint64_t *))off_1E3413D08[v21])(&v19, &v20);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, v5);
}

void WebCore::TileGrid::revalidateTiles(uint64_t a1, char a2)
{
  uint64_t v3;
  const WebCore::FloatRect *v4;
  float v5;
  int v6;
  int v7;
  float v8;
  int v9;
  float v10;
  float v11;
  int v12;
  int v13;
  float v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _BOOL4 v38;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  BOOL v56;
  unint64_t v57;
  uint64_t v60;
  WTF::MonotonicTime *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  _BOOL4 v67;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  float v73;
  float v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  WTF::MonotonicTime *v78;
  double v79;
  int v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  BOOL v98;
  _BOOL4 v99;
  _DWORD *v101;
  int v102;
  BOOL v103;
  BOOL v104;
  _DWORD *v105;
  BOOL v106;
  _BOOL4 v107;
  void *v109;
  WTF *v110;
  void *v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  float v115;
  float v116;
  float v117;
  int v118;
  int v119;
  float v120;
  float v121;
  int v122;
  int v123;
  int v124;
  int v125;
  float v126;
  WebCore::TileCoverageMap *v127;
  uint64_t v128;
  double v129;
  double v130;
  float32x4_t *v131;
  uint64_t v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  float v140;
  float v141;
  uint64_t v142;
  float v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  WTF *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  uint64_t v152;
  BOOL v153;
  int v154;
  uint64_t v157;
  uint64_t v158;
  uint64_t RevalidateWithoutMargin;
  unsigned int v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v173;
  unint64_t v174;
  WTF *v175;
  uint64_t v176;
  int32x2_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183[2];

  v3 = *(_QWORD *)(a1 + 16);
  v183[0] = *(float32x4_t *)(v3 + 108);
  (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 248))(*(_QWORD *)(v3 + 16));
  v6 = *(_DWORD *)(v3 + 296);
  v7 = *(unsigned __int8 *)(v3 + 304);
  v8 = *(float *)(*(_QWORD *)(v3 + 48) + 176);
  v9 = *(unsigned __int8 *)(v3 + 301);
  v11 = ceilf(v10);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v14 = ceilf(v5);
  v170 = v13;
  if (v14 >= 2147500000.0)
  {
    v15 = 0x7FFFFFFF;
  }
  else if (v14 <= -2147500000.0)
  {
    v15 = 0x80000000;
  }
  else
  {
    v15 = (int)v14;
  }
  v169 = v15;
  v16 = *(unsigned __int8 *)(v3 + 302);
  v17 = *(unsigned __int8 *)(v3 + 303);
  v182 = v183[0];
  v182 = vmulq_n_f32(v183[0], *(float *)(a1 + 176));
  v18 = WebCore::enclosingIntRectPreservingEmptyRects((WebCore *)&v182, v4);
  v173 = v19;
  v174 = v18;
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 80))
    v20 = 1;
  else
    v20 = *(_DWORD *)WTF::Deque<WebCore::TileGrid::TileCohortInfo,0ul>::last(a1 + 72) + 1;
  v168 = v20;
  v21 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v21 + 311) || *(_BYTE *)(v21 + 312))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 168);
    v29 = v28 & 0xFFFFFFFF00000000;
  }
  else
  {
    v22 = atomic_load(&WebCore::surfaceMaximumSize(void)::maximumSize);
    if ((int)v22 < 1 || (v23 = HIDWORD(v22), (uint64_t)v22 <= 0))
    {
      v22 = WebCore::computeMaximumSurfaceSize((WebCore *)v22);
      atomic_store(v22, &WebCore::surfaceMaximumSize(void)::maximumSize);
      v23 = HIDWORD(v22);
    }
    v24 = 1.0 / *(float *)(v21 + 36);
    v25 = (int)(float)(v24 * (float)(int)v23);
    if ((int)(float)(v24 * (float)(int)v22) >= 4096)
      v26 = 4096;
    else
      v26 = (int)(float)(v24 * (float)(int)v22);
    if (v25 >= 4096)
      v27 = 4096;
    else
      v27 = v25;
    v181.i32[0] = v26;
    v181.i8[4] = v27;
    v181.i8[5] = BYTE1(v27);
    v181.i8[6] = BYTE2(v27);
    v181.i8[7] = BYTE3(v27);
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v21 + 16) + 48) + 184))(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 48)) & 1) == 0)
    {
      LODWORD(v28) = 512;
      if (*(_BYTE *)(v21 + 300) == 2)
      {
        WebCore::TileController::boundsWithoutMargin((WebCore::TileController *)v21);
        v137 = vcvtps_s32_f32(*(float *)(*(_QWORD *)(v21 + 48) + 176) * (float)v136);
        if (v137 <= 512)
          v137 = 512;
        if (v26 >= v137)
          LODWORD(v28) = v137;
        else
          LODWORD(v28) = v26;
      }
      else if (!*(_BYTE *)(v21 + 300))
      {
        WebCore::TileController::boundsWithoutMargin((WebCore::TileController *)v21);
        v140 = *(float *)(*(_QWORD *)(v21 + 48) + 176);
        v141 = ceilf(v140 * (float)v139);
        if (v141 >= 2147500000.0)
        {
          v142 = 0x7FFFFFFFLL;
        }
        else if (v141 <= -2147500000.0)
        {
          v142 = 0x80000000;
        }
        else
        {
          v142 = (int)v141;
        }
        v143 = ceilf(v140 * (float)v138);
        if (v143 >= 2147500000.0)
        {
          v144 = 0x7FFFFFFF00000000;
        }
        else if (v143 <= -2147500000.0)
        {
          v144 = 0x8000000000000000;
        }
        else
        {
          v144 = (unint64_t)(int)v143 << 32;
        }
        v179 = v144 | v142;
        v175 = (WTF *)0x20000000200;
        v145 = WebCore::IntSize::constrainedBetween((WebCore::IntSize *)&v179, (const WebCore::IntSize *)&v175, (const WebCore::IntSize *)&v181);
        LODWORD(v28) = v145;
        v29 = v145 & 0xFFFFFFFF00000000;
        goto LABEL_26;
      }
      v29 = 0x20000000000;
LABEL_26:
      *(_BYTE *)(v21 + 312) = 1;
      goto LABEL_27;
    }
    v29 = v27 << 32;
    LODWORD(v28) = v26;
  }
LABEL_27:
  if (*(_QWORD *)(a1 + 168) != __PAIR64__(HIDWORD(v29), v28))
  {
    v146 = v29 & 0xFFFFFFFF00000000 | v28;
    WebCore::TileGrid::removeAllTiles((WebCore::TileGrid *)a1);
    *(_QWORD *)(a1 + 168) = v146;
  }
  v30 = v6 * v9;
  v31 = *(_QWORD *)(a1 + 32);
  v32 = v6 * v7;
  if (v31)
  {
    v33 = *(unsigned int *)(v31 - 4);
    v34 = v31 + 24 * v33;
    if (*(_DWORD *)(v31 - 12))
    {
      v35 = *(_QWORD *)(a1 + 32);
      if ((_DWORD)v33)
      {
        v36 = 24 * v33;
        v35 = *(_QWORD *)(a1 + 32);
        while (1)
        {
          v37 = !*(_DWORD *)v35 && *(_DWORD *)(v35 + 4) == 0x80000000;
          v38 = v37;
          if (*(_DWORD *)v35 != 0x80000000 && !v38)
            break;
          v35 += 24;
          v36 -= 24;
          if (!v36)
          {
            v35 = v34;
            goto LABEL_45;
          }
        }
      }
      goto LABEL_45;
    }
    v35 = v31 + 24 * v33;
  }
  else
  {
    v35 = 0;
    LODWORD(v33) = 0;
  }
  v34 = v31 + 24 * v33;
LABEL_45:
  if (v31)
    v40 = v31 + 24 * *(unsigned int *)(v31 - 4);
  else
    v40 = 0;
  v41 = (float)v30 / v8;
  v42 = (float)(v6 * v16);
  v43 = (float)(v6 * v17);
  v44 = (float)v32 / v8;
  if (v40 == v35)
  {
    v70 = 0;
    goto LABEL_105;
  }
  v167 = 0;
  v171 = 0;
  v45 = INFINITY;
  do
  {
    v46 = *(_QWORD *)(v35 + 8);
    v47 = WebCore::TileGrid::rectForTileIndex((WebCore::TileGrid *)a1, *(const WebCore::IntPoint **)v35, HIDWORD(*(_QWORD *)v35));
    v49 = v47;
    v50 = v48;
    v51 = HIDWORD(v48);
    v56 = (int)v48 < 1
       || SHIDWORD(v48) < 1
       || (int)v173 < 1
       || SHIDWORD(v173) < 1
       || (int)v174 + (int)v173 <= (int)v47
       || (int)v47 + (int)v48 <= (int)v174;
    v57 = HIDWORD(v47);
    if (v56 || HIDWORD(v174) + HIDWORD(v173) <= SHIDWORD(v47) || HIDWORD(v47) + HIDWORD(v48) <= SHIDWORD(v174))
    {
      if (*(_DWORD *)(v35 + 16) == -1)
      {
        *(_DWORD *)(v35 + 16) = v168;
        v69 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        if (v69)
        {
          v164 = *(_QWORD *)(v69 + 8);
          if (v164)
            (*(void (**)(uint64_t))(*(_QWORD *)v164 + 24))(v164);
        }
        ++v171;
        goto LABEL_101;
      }
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 168))(v60))
      {
        v61 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 104))(v46);
        if (v61)
        {
          v63 = *(_QWORD *)(a1 + 72);
          v62 = *(_QWORD *)(a1 + 80);
          if (v63 != v62)
          {
            v128 = *(_QWORD *)(a1 + 88);
            while (*(_DWORD *)(v128 + 16 * v63) != *(_DWORD *)(v35 + 16))
            {
              v64 = *(unsigned int *)(a1 + 96);
              v63 += v64 + 1;
              do
                v63 -= v64;
              while (v63 >= v64);
              if (v62 == v63)
                goto LABEL_83;
            }
            WTF::MonotonicTime::now(v61);
            v130 = *(double *)(v128 + 16 * v63 + 8) - (v129 + -2.0);
            if (v130 <= 0.0)
            {
              v134 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
              if (v134)
              {
                v135 = *(_QWORD *)(v134 + 8);
                if (v135)
                  (*(void (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135);
              }
LABEL_101:
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 112))(v46);
              goto LABEL_83;
            }
            if (v130 < v45)
              v45 = v130;
            v167 = 1;
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(v35 + 16) = -1;
      if (*(_BYTE *)(v35 + 20))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 72))(v46);
        v162 = *(_QWORD *)(a1 + 16);
        v181.f32[0] = (float)v49;
        v181.f32[1] = (float)(int)v57;
        v181.f32[2] = (float)v50;
        v181.f32[3] = (float)(int)v51;
        *(float *)&v179 = (float)v49;
        *((float *)&v179 + 1) = (float)(int)v57;
        *(float *)&v180 = (float)v50;
        *((float *)&v180 + 1) = (float)(int)v51;
        v163 = *(_QWORD *)(v162 + 24);
        if (v163)
        {
          v166 = *(_QWORD *)(v163 + 8);
          if (v166)
            (*(void (**)(uint64_t))(*(_QWORD *)v166 + 16))(v166);
        }
        *(_BYTE *)(v35 + 20) = 0;
      }
    }
LABEL_83:
    v65 = v35 + 24;
    v35 = v34;
    if (v65 != v34)
    {
      v35 = v65;
      while (1)
      {
        v66 = !*(_DWORD *)v35 && *(_DWORD *)(v35 + 4) == 0x80000000;
        v67 = v66;
        if (*(_DWORD *)v35 != 0x80000000 && !v67)
          break;
        v35 += 24;
        if (v35 == v34)
        {
          v35 = v34;
          break;
        }
      }
    }
  }
  while (v35 != v40);
  if ((v167 & 1) != 0)
    WebCore::TileController::scheduleTileRevalidation(*(_QWORD **)(a1 + 16), v45);
  v70 = v171;
LABEL_105:
  v71 = (int)v41;
  v72 = (int)v44;
  v73 = v42 / v8;
  v74 = v43 / v8;
  v75 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 168))(v75) & 1) != 0)
  {
LABEL_109:
    if (v70)
      WebCore::TileGrid::startedNewCohort((WTF **)a1, v168);
  }
  else
  {
    v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48);
    v78 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 176))(v77);
    if ((_DWORD)v78)
    {
      if ((*(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFLL) == 0
        || *(double *)((*(_QWORD *)(a1 + 136) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      {
        *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
        WTF::MonotonicTime::now(v78);
        WebCore::TimerBase::setNextFireTime(a1 + 104, v79 + 1.0);
      }
      goto LABEL_109;
    }
    if (v70)
      WebCore::TileGrid::removeTilesInCohort((WebCore::TileGrid *)a1, v168);
  }
  v80 = v169 + v71;
  v81 = a2;
  if ((a2 & 1) != 0)
  {
    WebCore::TileGrid::removeAllSecondaryTiles((WebCore::TileGrid *)a1);
    v81 = a2;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v147 = *(WTF **)(a1 + 88);
    if (v147)
    {
      *(_QWORD *)(a1 + 88) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      WTF::fastFree(v147, v76);
      v81 = a2;
    }
  }
  v82 = -v71;
  v83 = -v72;
  v84 = v170 + v72 + (int)v73;
  v85 = v80 + (int)v74;
  if ((v81 & 2) != 0)
  {
    v148 = *(_DWORD **)(a1 + 32);
    v149 = WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::begin(v148);
    v150 = v149;
    v151 = v76;
    if (v148)
      v148 += 6 * *(v148 - 1);
    if (v148 != v149)
    {
      do
      {
        v152 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
        if (v152)
        {
          v165 = *(_QWORD *)(v152 + 8);
          if (v165)
            (*(void (**)(uint64_t))(*(_QWORD *)v165 + 24))(v165);
        }
        (*(void (**)(_QWORD))(**((_QWORD **)v150 + 1) + 112))(*((_QWORD *)v150 + 1));
        while (1)
        {
          v150 += 6;
          if (v150 == v151)
            break;
          if (*v150)
            v153 = 0;
          else
            v153 = v150[1] == 0x80000000;
          v154 = v153;
          if (*v150 != 0x80000000 && v154 == 0)
            goto LABEL_245;
        }
        v150 = v151;
LABEL_245:
        ;
      }
      while (v150 != v148);
    }
  }
  v86 = *(_QWORD *)(a1 + 16);
  v87 = *(_QWORD *)(v86 + 132);
  if (v83 == *(_DWORD *)(v86 + 124) && v82 == *(_DWORD *)(v86 + 128) && v84 == (_DWORD)v87 && v85 == HIDWORD(v87))
    goto LABEL_175;
  if (*(_DWORD *)(v86 + 296)
    && (*(_BYTE *)(v86 + 301) || *(_BYTE *)(v86 + 303) || *(_BYTE *)(v86 + 304) || *(_BYTE *)(v86 + 302))
    && (v84 > (int)v87 || v85 > SHIDWORD(v87)))
  {
    WebCore::TileController::boundsWithoutMargin((WebCore::TileController *)v86);
    v158 = v157;
    RevalidateWithoutMargin = WebCore::TileController::boundsAtLastRevalidateWithoutMargin(*(WebCore::TileController **)(a1 + 16));
    v160 = HIDWORD(RevalidateWithoutMargin);
    v161 = v76;
    if (v85 > SHIDWORD(v87))
    {
      v181.i64[0] = __PAIR64__(HIDWORD(v76), RevalidateWithoutMargin);
      v181.i32[2] = (int)v76;
      v181.i32[3] = HIDWORD(v158) - HIDWORD(v76);
      WebCore::TileGrid::setNeedsDisplayInRect(a1, (int32x4_t *)&v181);
    }
    if (v84 > (int)v87)
    {
      v181.i64[0] = __PAIR64__(v160, v161);
      v181.i32[2] = v158 - (_DWORD)v161;
      v181.i32[3] = HIDWORD(v161);
      WebCore::TileGrid::setNeedsDisplayInRect(a1, (int32x4_t *)&v181);
    }
  }
  v91 = *(float *)(a1 + 176);
  v181.f32[0] = v91 * (float)v83;
  v181.f32[1] = v91 * (float)v82;
  v181.f32[2] = v91 * (float)v84;
  v181.f32[3] = v91 * (float)v85;
  v179 = WebCore::enclosingIntRectPreservingEmptyRects((WebCore *)&v181, (const WebCore::FloatRect *)v76);
  v180 = v92;
  v177 = 0;
  v178 = 0;
  if (!WebCore::TileGrid::getTileIndexRangeForRect(a1, (int32x2_t *)&v179, (int *)&v178, &v177))
    goto LABEL_175;
  v175 = 0;
  v176 = 0;
  v93 = *(_QWORD *)(a1 + 32);
  if (!v93)
  {
    v96 = 0;
    LODWORD(v94) = 0;
LABEL_210:
    v95 = (_DWORD *)(v93 + 24 * v94);
    goto LABEL_145;
  }
  v94 = *(unsigned int *)(v93 - 4);
  v95 = (_DWORD *)(v93 + 24 * v94);
  if (!*(_DWORD *)(v93 - 12))
  {
    v96 = (_DWORD *)(v93 + 24 * v94);
    goto LABEL_210;
  }
  v96 = *(_DWORD **)(a1 + 32);
  if ((_DWORD)v94)
  {
    v97 = 24 * v94;
    v96 = *(_DWORD **)(a1 + 32);
    while (1)
    {
      v98 = !*v96 && v96[1] == 0x80000000;
      v99 = v98;
      if (*v96 != 0x80000000 && !v99)
        break;
      v96 += 6;
      v97 -= 24;
      if (!v97)
      {
        v96 = v95;
        break;
      }
    }
  }
LABEL_145:
  if (v93)
    v101 = (_DWORD *)(v93 + 24 * *(unsigned int *)(v93 - 4));
  else
    v101 = 0;
  while (v96 != v101)
  {
    v102 = v96[1];
    v103 = v102 >= SHIDWORD(v178) && v102 <= v177.i32[1];
    if (!v103 || (*v96 >= (int)v178 ? (v104 = *v96 <= v177.i32[0]) : (v104 = 0), !v104))
    {
      if (HIDWORD(v176) == (_DWORD)v176)
      {
        WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>&>((uint64_t)&v175, (unint64_t)v96);
      }
      else
      {
        *((_QWORD *)v175 + HIDWORD(v176)) = *(_QWORD *)v96;
        ++HIDWORD(v176);
      }
    }
    v105 = v96 + 6;
    v96 = v95;
    if (v105 != v95)
    {
      v96 = v105;
      while (1)
      {
        v106 = !*v96 && v96[1] == 0x80000000;
        v107 = v106;
        if (*v96 != 0x80000000 && !v107)
          break;
        v96 += 6;
        if (v96 == v95)
        {
          v96 = v95;
          break;
        }
      }
    }
  }
  WebCore::TileGrid::removeTiles((_QWORD *)a1, (uint64_t)&v175);
  v110 = v175;
  if (v175)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    WTF::fastFree(v110, v109);
  }
LABEL_175:
  *(_QWORD *)(a1 + 40) = WebCore::TileGrid::ensureTilesForRect(a1, (const WebCore::FloatRect *)v183, 0);
  *(_QWORD *)(a1 + 48) = v111;
  if ((a2 & 1) == 0)
  {
    v112 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v112)
    {
      v131 = *(float32x4_t **)(a1 + 56);
      v132 = 16 * v112;
      do
      {
        v133 = *v131++;
        v181 = v133;
        v181 = vmulq_n_f32(v133, 1.0 / *(float *)(a1 + 176));
        WebCore::TileGrid::ensureTilesForRect(a1, (const WebCore::FloatRect *)&v181, 1);
        v132 -= 16;
      }
      while (v132);
    }
    if (*(_DWORD *)(a1 + 64))
    {
      if (*(_DWORD *)(a1 + 68))
        *(_DWORD *)(a1 + 68) = 0;
      v113 = *(WTF **)(a1 + 56);
      if (v113)
      {
        *(_QWORD *)(a1 + 56) = 0;
        *(_DWORD *)(a1 + 64) = 0;
        WTF::fastFree(v113, v111);
      }
    }
  }
  v114 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD))(**(_QWORD **)(v114 + 16) + 248))(*(_QWORD *)(v114 + 16));
  v117 = ceilf(v116);
  if (v117 >= 2147500000.0)
  {
    v118 = 0x7FFFFFFF;
  }
  else if (v117 <= -2147500000.0)
  {
    v118 = 0x80000000;
  }
  else
  {
    v118 = (int)v117;
  }
  v119 = *(_DWORD *)(v114 + 296);
  v120 = *(float *)(*(_QWORD *)(v114 + 48) + 176);
  v121 = ceilf(v115);
  if (v121 >= 2147500000.0)
  {
    v122 = 0x7FFFFFFF;
  }
  else if (v121 <= -2147500000.0)
  {
    v122 = 0x80000000;
  }
  else
  {
    v122 = (int)v121;
  }
  v123 = (int)(float)((float)(v119 * *(unsigned __int8 *)(v114 + 301)) / v120);
  v124 = (int)(float)((float)(v119 * *(unsigned __int8 *)(v114 + 304)) / v120);
  v125 = (int)(float)((float)(v119 * *(unsigned __int8 *)(v114 + 302)) / v120);
  v126 = (float)(v119 * *(unsigned __int8 *)(v114 + 303)) / v120;
  *(_QWORD *)(v114 + 124) = -v124 | ((unint64_t)-v123 << 32);
  *(_QWORD *)(v114 + 132) = (v118 + v124 + v125) | ((unint64_t)(v122
                                                                                                 + v123
                                                                                                 + (int)v126) << 32);
  v127 = *(WebCore::TileCoverageMap **)(v114 + 40);
  if (v127)
    WebCore::TileCoverageMap::setNeedsUpdate(v127);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShouldTemporarilyRetainTileCohorts(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this - 73) + 168))(*((_QWORD *)this - 73), (char *)this - 608);
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShouldAggressivelyRetainTiles(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this - 73) + 160))(*((_QWORD *)this - 73), (char *)this - 608);
}

uint64_t WebCore::RenderLayerBacking::shouldTemporarilyRetainTileCohorts(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 112)
                    + 696) >> 50) & 1;
}

uint64_t WebCore::RenderLayerBacking::shouldAggressivelyRetainTiles(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  if (*((_BYTE *)this + 289))
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40)
                                                                                              + 8)
                                                                                  + 528)
                                                                      + 8)
                                                          + 24)
                                              + 8)
                                  + 112)
                      + 664) >> 10) & 1;
  else
    return 0;
}

unint64_t WebCore::TileGrid::ensureTilesForRect(uint64_t a1, const WebCore::FloatRect *a2, int a3)
{
  uint64_t *v3;
  int32x2_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v12;
  unint64_t v13;
  int32x2_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t *v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  __int32 v46;
  float v47;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  float v54;
  int v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  BOOL v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void);
  int v85;
  int v86;
  uint64_t *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unsigned int *v90;
  __int32 v91;
  int v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  int v108;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int32x2_t v116;
  uint64_t v117;
  float v118;
  float v119;
  int32x2_t v120;
  WebCore::IntPoint *v121;
  int32x2_t v122[2];
  float32x4_t v123;
  WTF::StringImpl *v124;
  float v125;
  float v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 305))
    return 0;
  v3 = (uint64_t *)a1;
  v123 = *(float32x4_t *)a2;
  v123 = vmulq_n_f32(v123, *(float *)(a1 + 176));
  v122[0] = (int32x2_t)WebCore::enclosingIntRectPreservingEmptyRects((WebCore *)&v123, a2);
  v122[1] = v4;
  v120 = 0;
  v121 = 0;
  if (!WebCore::TileGrid::getTileIndexRangeForRect((uint64_t)v3, v122, (int *)&v121, &v120)
    || (v3[9] != v3[10]
      ? (v5 = *(_DWORD *)WTF::Deque<WebCore::TileGrid::TileCohortInfo,0ul>::last((uint64_t)(v3 + 9)) + 1)
      : (v5 = 1),
        (v6 = HIDWORD(v121), v7 = v120.i32[1], SHIDWORD(v121) > v120.i32[1])
     || (v8 = v120.i32[0], (int)v121 > v120.i32[0])))
  {
    v9 = 0;
    v10 = 0;
    return v10 | (unint64_t)(v9 << 32);
  }
  v102 = v5;
  v103 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  v107 = v3 + 4;
  v114 = (uint64_t)v3;
  do
  {
    v13 = v121;
    if ((int)v121 > v8)
      goto LABEL_121;
    v108 = 95187966 * v6;
    v104 = v6 << 32;
    v113 = v6;
    do
    {
      v15 = WebCore::TileGrid::rectForTileIndex((WebCore::TileGrid *)v3, (const WebCore::IntPoint *)v13, v6);
      v16 = v3[4];
      v116 = v14;
      if (v16
        || (WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(v107, 8u, 0), v14 = v116, (v16 = *v107) != 0))
      {
        v17 = *(_DWORD *)(v16 - 8);
      }
      else
      {
        v17 = 0;
      }
      v18 = v17 & ((0xD7862706ELL * (unint64_t)(v108 + 277951225 * v13)) >> 4);
      v19 = (uint64_t *)(v16 + 24 * v18);
      v20 = *(_DWORD *)v19;
      v21 = *((_DWORD *)v19 + 1);
      if (*(_DWORD *)v19)
        v22 = 0;
      else
        v22 = v21 == 0x80000000;
      if (v22)
      {
LABEL_30:
        v26 = v19[1];
        *v19 = v104 | v13;
        v19[1] = 0;
        if (v26)
        {
          v27 = (unsigned int *)(v26 + 8);
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v27);
            v93 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v93 = off_1E334ED68;
            *((_QWORD *)v93 + 1) = v27;
            v124 = v93;
            WTF::ensureOnMainThread();
            v94 = v124;
            v124 = 0;
            if (v94)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v94 + 8))(v94);
            v14 = v116;
          }
        }
        *((_DWORD *)v19 + 4) = -1;
        *((_BYTE *)v19 + 20) = 0;
        v30 = *v107;
        if (*v107)
          v31 = *(_DWORD *)(v30 - 12) + 1;
        else
          v31 = 1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v107;
        if (*v107)
          v33 = *(_DWORD *)(v32 - 12);
        else
          v33 = 0;
        v34 = (*(_DWORD *)(v32 - 16) + v33);
        v35 = *(unsigned int *)(v32 - 4);
        if (v35 > 0x400)
        {
          if (v35 > 2 * v34)
            goto LABEL_40;
        }
        else if (3 * v35 > 4 * v34)
        {
          goto LABEL_40;
        }
        v87 = (uint64_t *)WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::expand(v107, v19);
        v14 = v116;
        v19 = v87;
      }
      else
      {
        v23 = 0;
        v24 = 1;
        while (v20 != (_DWORD)v13 || v21 != v113)
        {
          if (v20 == 0x80000000)
            v23 = v19;
          v18 = (v18 + v24) & v17;
          v19 = (uint64_t *)(v16 + 24 * v18);
          v20 = *(_DWORD *)v19;
          v21 = *((_DWORD *)v19 + 1);
          ++v24;
          if (*(_DWORD *)v19)
            v25 = 0;
          else
            v25 = v21 == 0x80000000;
          if (v25)
          {
            if (v23)
            {
              v23[1] = 0;
              v23[2] = 0;
              *v23 = 0x8000000000000000;
              *((_DWORD *)v23 + 4) = -1;
              --*(_DWORD *)(*v107 - 16);
              v19 = v23;
            }
            goto LABEL_30;
          }
        }
      }
LABEL_40:
      v115 = HIDWORD(*(_QWORD *)&v14);
      v36 = v14.i32[0] < 1 || v14.i32[1] < 1;
      v37 = v36;
      v106 = v37;
      if (v36)
      {
        v38 = v12;
        LODWORD(v39) = v9;
        v40 = v10;
      }
      else
      {
        v38 = (unint64_t)v14;
        v39 = HIDWORD(v15);
        v40 = v15;
        if ((int)v12 >= 1)
        {
          if ((int)v15 >= (int)v10)
            v40 = v10;
          else
            v40 = v15;
          if (SHIDWORD(v15) >= (int)v9)
            LODWORD(v39) = v9;
          else
            LODWORD(v39) = HIDWORD(v15);
          v41 = v10 + v12;
          if ((int)(v10 + v12) <= (int)v15 + v14.i32[0])
            v41 = v15 + v14.i32[0];
          v42 = v9 + HIDWORD(v12);
          if ((int)v9 + HIDWORD(v12) <= HIDWORD(v15) + v14.i32[1])
            v42 = HIDWORD(v15) + v14.i32[1];
          v43 = (v41 - v40) | ((unint64_t)(v42 - v39) << 32);
          if (SHIDWORD(v12) >= 1)
            v38 = v43;
          else
            v38 = (unint64_t)v14;
          if (SHIDWORD(v12) < 1)
          {
            LODWORD(v39) = HIDWORD(v15);
            v40 = v15;
          }
        }
      }
      v110 = v40;
      v111 = v39;
      v112 = v38;
      v44 = v19[1];
      if (v44)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 248))(v44);
        v46 = v116.i32[0];
        if (v47 != (float)v116.i32[0] || v45 != (float)(int)v115)
        {
          v82 = v19[1];
          v124 = 0;
          v125 = (float)v116.i32[0];
          v126 = (float)(int)v115;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v82 + 256))(v82, &v124);
          v83 = v19[1];
          *(float *)&v124 = (float)(int)v15;
          *((float *)&v124 + 1) = (float)SHIDWORD(v15);
          v125 = 0.0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v83 + 272))(v83, &v124);
          v84 = *(void (**)(void))(*(_QWORD *)v19[1] + 72);
          goto LABEL_119;
        }
        goto LABEL_69;
      }
      v53 = *(_QWORD *)(v114 + 16);
      v54 = (*(float (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v53 + 16) + 48) + 160))(*(_QWORD *)(*(_QWORD *)(v53 + 16) + 48));
      *(_BYTE *)(v53 + 310) |= v54 != 1.0;
      WebCore::PlatformCALayer::createCompatibleLayerOrTakeFromPool(*(_QWORD *)(v53 + 16), 6, v114, v116, &v117);
      v125 = 0.0;
      v124 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v117 + 288))(v117, &v124);
      *(float *)&v124 = (float)(int)v15;
      *((float *)&v124 + 1) = (float)SHIDWORD(v15);
      v125 = 0.0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v117 + 272))(v117, &v124);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 592))(v117, v53 + 320);
      (*(void (**)(uint64_t, float))(*(_QWORD *)v117 + 584))(v117, *(float *)(v53 + 328));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 696))(v117, 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 240))(v117, *(unsigned __int8 *)(v53 + 309));
      if ((v15 & 0x80000000) != 0)
      {
        v99 = -(int)v15;
        v55 = 1;
        do
        {
          ++v55;
          v98 = v99 >= 0xA;
          v99 /= 0xAu;
        }
        while (v98);
      }
      else
      {
        v55 = 0;
        v56 = v15;
        do
        {
          ++v55;
          v36 = v56 > 9;
          v56 /= 0xAu;
        }
        while (v36);
      }
      v105 = v117;
      if ((v15 & 0x8000000000000000) != 0)
      {
        v100 = -HIDWORD(v15);
        v57 = 1;
        do
        {
          ++v57;
          v98 = v100 >= 0xA;
          v100 /= 0xAu;
        }
        while (v98);
      }
      else
      {
        v57 = 0;
        v58 = HIDWORD(v15);
        do
        {
          ++v57;
          v36 = v58 > 9;
          LODWORD(v58) = v58 / 0xA;
        }
        while (v36);
      }
      if (v57 < 0
        || ((v59 = __OFADD__(v57, 1), v60 = v57 + 1, !v59) ? (v61 = 0) : (v61 = 1),
            v55 < 0
         || (v61 & 1) != 0
         || (v59 = __OFADD__(v55, v60), v62 = v55 + v60, v59)
         || (v63 = (v62 + 8), __OFADD__(v62, 8))))
      {
LABEL_164:
        __break(0xC471u);
        JUMPOUT(0x19439013CLL);
      }
      if (v62 == -8)
      {
        v64 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_154;
      }
      if ((v63 & 0x80000000) != 0)
        goto LABEL_164;
      WTF::tryFastCompactMalloc((WTF *)(v63 + 20));
      v64 = v124;
      if (!v124)
        goto LABEL_164;
      *(_DWORD *)v124 = 2;
      *((_DWORD *)v64 + 1) = v63;
      *(_QWORD *)((char *)v64 + 20) = 0x20746120656C6974;
      *((_QWORD *)v64 + 1) = (char *)v64 + 20;
      *((_DWORD *)v64 + 4) = 4;
      if ((v15 & 0x80000000) != 0)
      {
        WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-(int)v15, (char *)v64 + 28);
        v97 = -(int)v15;
        v67 = 1;
        do
        {
          ++v67;
          v98 = v97 >= 0xA;
          v97 /= 0xAu;
        }
        while (v98);
      }
      else
      {
        v65 = 0;
        v66 = v15;
        do
        {
          *((_BYTE *)&v126 + v65--) = (v66 % 0xA) | 0x30;
          v36 = v66 > 9;
          v66 /= 0xAu;
        }
        while (v36);
        if (v65 + 14 <= 13)
          memcpy((char *)v64 + 28, (char *)&v126 + v65 + 1, -v65);
        v67 = 0;
        v68 = v15;
        do
        {
          ++v67;
          v36 = v68 > 9;
          v68 /= 0xAu;
        }
        while (v36);
      }
      v69 = (char *)v64 + v67 + 28;
      *v69 = 44;
      v70 = v69 + 1;
      if ((v15 & 0x8000000000000000) != 0)
      {
        WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-HIDWORD(v15), v70);
LABEL_154:
        v73 = v105;
        goto LABEL_107;
      }
      v71 = 0;
      v72 = HIDWORD(v15);
      v73 = v105;
      do
      {
        *((_BYTE *)&v126 + v71--) = (v72 % 0xA) | 0x30;
        v36 = v72 > 9;
        LODWORD(v72) = v72 / 0xA;
      }
      while (v36);
      if (v71 + 14 <= 13)
        memcpy(v70, (char *)&v126 + v71 + 1, -v71);
LABEL_107:
      v124 = v64;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v73 + 640))(v73, &v124);
      v75 = v124;
      v124 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v74);
        else
          *(_DWORD *)v75 -= 2;
      }
      (*(void (**)(uint64_t, float))(*(_QWORD *)v117 + 672))(v117, v54 * *(float *)(v53 + 36));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 456))(v117, *(unsigned __int8 *)(v53 + 307));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v117 + 472))(v117, *(unsigned __int8 *)(v53 + 308));
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 72))(v117);
      v46 = v116.i32[0];
      v76 = v117;
      v117 = 0;
      v77 = v19[1];
      v19[1] = v76;
      if (v77)
      {
        v78 = (unsigned int *)(v77 + 8);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          atomic_store(1u, v78);
          v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v95 = off_1E334ED68;
          *((_QWORD *)v95 + 1) = v78;
          v124 = v95;
          WTF::ensureOnMainThread();
          v96 = v124;
          v124 = 0;
          if (v96)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v96 + 8))(v96);
          v46 = v116.i32[0];
        }
        v81 = v117;
        v117 = 0;
        if (v81)
        {
          v90 = (unsigned int *)(v81 + 8);
          do
          {
            v51 = __ldaxr(v90);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v90));
          if (!v52)
          {
            atomic_store(1u, v90);
            v88 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v88 = off_1E334ED68;
            *((_QWORD *)v88 + 1) = v90;
            v124 = v88;
            WTF::ensureOnMainThread();
            v89 = v124;
            v124 = 0;
            if (v89)
            {
              v84 = *(void (**)(void))(*(_QWORD *)v89 + 8);
LABEL_119:
              v84();
            }
            v46 = v116.i32[0];
          }
        }
      }
LABEL_69:
      if (a3 == 1)
      {
        if ((v106 & 1) != 0
          || (v85 = *(_DWORD *)(v114 + 48), v85 < 1)
          || (v86 = *(_DWORD *)(v114 + 52), v86 < 1)
          || (v91 = *(_DWORD *)(v114 + 40), v91 + v85 <= (int)v15)
          || v91 >= (int)v15 + v46
          || (v92 = *(_DWORD *)(v114 + 44), v92 + v86 <= SHIDWORD(v15))
          || v92 >= HIDWORD(v15) + (int)v115)
        {
          *((_DWORD *)v19 + 4) = v102;
          ++v103;
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19[1] + 88))(v19[1]))
      {
        v49 = *(_QWORD *)(v114 + 16);
        *(float *)&v124 = (float)(int)v15;
        *((float *)&v124 + 1) = (float)SHIDWORD(v15);
        v125 = (float)v116.i32[0];
        v126 = (float)(int)v115;
        *(float *)&v117 = (float)(int)v15;
        *((float *)&v117 + 1) = (float)SHIDWORD(v15);
        v118 = (float)v116.i32[0];
        v119 = (float)(int)v115;
        v50 = *(_QWORD *)(v49 + 24);
        if (v50)
        {
          v101 = *(_QWORD *)(v50 + 8);
          if (v101)
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
        }
      }
      v3 = (uint64_t *)v114;
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19[1] + 104))(v19[1]))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v114 + 24) + 144))(*(_QWORD *)(v114 + 24), v19[1]);
      v8 = v120.i32[0];
      LODWORD(v6) = v113;
      v12 = v112;
      LODWORD(v9) = v111;
      v10 = v110;
      v36 = (int)v13 < v120.i32[0];
      v13 = (v13 + 1);
    }
    while (v36);
    v7 = v120.i32[1];
    v12 = v112;
    v9 = v111;
    v10 = v110;
LABEL_121:
    v36 = (int)v6 < v7;
    v6 = (v6 + 1);
  }
  while (v36);
  if (v103)
    WebCore::TileGrid::startedNewCohort((WTF **)v3, v102);
  return v10 | (unint64_t)(v9 << 32);
}

double WebCore::TileController::setNeedsDisplayInRect(WebCore::TileController *this, int32x4_t *a2)
{
  double result;
  WTF *v5;
  WebCore::TileCoverageMap *v6;

  WebCore::TileGrid::setNeedsDisplayInRect(*((_QWORD *)this + 6), a2);
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
    WebCore::TileGrid::dropTilesInRect(v5, a2);
  v6 = (WebCore::TileCoverageMap *)*((_QWORD *)this + 5);
  if (v6)
    return WebCore::TileCoverageMap::setNeedsUpdate(v6);
  return result;
}

uint64_t WebCore::TileGrid::setNeedsDisplayInRect(uint64_t this, int32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  signed int v9;
  __int32 v10;
  int v11;
  signed int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _BOOL4 v33;
  unsigned int v35[2];
  int32x2_t v36;
  uint64_t v37;
  int32x2_t v38[2];
  float32x4_t v39;

  v2 = *(_QWORD *)(this + 32);
  if (!v2 || !*(_DWORD *)(v2 - 12))
    return this;
  v3 = this;
  v39 = vmulq_n_f32(vcvtq_f32_s32(*a2), *(float *)(this + 176));
  this = WebCore::enclosingIntRectPreservingEmptyRects((WebCore *)&v39, (const WebCore::FloatRect *)a2);
  v38[0] = (int32x2_t)this;
  v38[1] = v4;
  v5 = *(_QWORD *)(v3 + 168);
  v6 = (v5 >> 31) & 0xFFFFFFFE;
  v7 = 2 * v5;
  v8 = (int)v6 <= v4.i32[1] || v7 <= v4.i32[0];
  if (!v8)
  {
    v36 = 0;
    v37 = 0;
    this = WebCore::TileGrid::getTileIndexRangeForRect(v3, v38, (int *)&v37, &v36);
    if ((_DWORD)this)
    {
      v9 = HIDWORD(v37);
      v10 = v36.i32[1];
      if (SHIDWORD(v37) <= v36.i32[1])
      {
        v11 = v36.i32[0];
        if ((int)v37 <= v36.i32[0])
        {
          do
          {
            v12 = v37;
            if ((int)v37 <= v11)
            {
              v13 = *(_QWORD *)(v3 + 32);
              if (v13)
              {
                while (1)
                {
                  v35[0] = v12;
                  v35[1] = v9;
                  if (v13)
                  {
                    v14 = *(_DWORD *)(v13 - 8);
                    v15 = v14 & ((0xD7862706ELL * (unint64_t)(95187966 * v9 + 277951225 * v12)) >> 4);
                    v16 = (uint64_t *)(v13 + 24 * v15);
                    v18 = *(_DWORD *)v16;
                    v17 = *((_DWORD *)v16 + 1);
                    if (*(_DWORD *)v16 != v12 || v17 != v9)
                    {
                      v20 = 1;
                      while (v18 || v17 != 0x80000000)
                      {
                        v15 = (v15 + v20) & v14;
                        v16 = (uint64_t *)(v13 + 24 * v15);
                        v18 = *(_DWORD *)v16;
                        v17 = *((_DWORD *)v16 + 1);
                        ++v20;
                        if (*(_DWORD *)v16 == v12 && v17 == v9)
                          goto LABEL_18;
                      }
                      v16 = (uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4));
                    }
LABEL_18:
                    if (v16 != (uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4)))
                    {
                      this = WebCore::TileGrid::setTileNeedsDisplayInRect((WebCore::TileGrid *)v3, v35, v16 + 1, (int *)v38, (_DWORD *)(v3 + 40));
                      v11 = v36.i32[0];
                    }
                  }
                  if (v12 >= v11)
                    break;
                  ++v12;
                  v13 = *(_QWORD *)(v3 + 32);
                }
                v10 = v36.i32[1];
              }
            }
            v8 = v9++ < v10;
          }
          while (v8);
        }
      }
    }
    return this;
  }
  v22 = *(_QWORD *)(v3 + 32);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    v24 = v22 + 24 * v23;
    if (*(_DWORD *)(v22 - 12))
    {
      v25 = *(_QWORD *)(v3 + 32);
      if ((_DWORD)v23)
      {
        v26 = 24 * v23;
        v25 = *(_QWORD *)(v3 + 32);
        while (1)
        {
          v27 = !*(_DWORD *)v25 && *(_DWORD *)(v25 + 4) == 0x80000000;
          v28 = v27;
          if (*(_DWORD *)v25 != 0x80000000 && !v28)
            break;
          v25 += 24;
          v26 -= 24;
          if (!v26)
          {
            v25 = v24;
            goto LABEL_49;
          }
        }
      }
      goto LABEL_49;
    }
    v25 = v22 + 24 * v23;
  }
  else
  {
    v25 = 0;
    LODWORD(v23) = 0;
  }
  v24 = v22 + 24 * v23;
LABEL_49:
  if (v22)
    v30 = v22 + 24 * *(unsigned int *)(v22 - 4);
  else
    v30 = 0;
  while (v25 != v30)
  {
    this = WebCore::TileGrid::setTileNeedsDisplayInRect((WebCore::TileGrid *)v3, (unsigned int *)v25, (uint64_t *)(v25 + 8), (int *)v38, (_DWORD *)(v3 + 40));
    v31 = v25 + 24;
    v25 = v24;
    if (v31 != v24)
    {
      v25 = v31;
      while (1)
      {
        v32 = !*(_DWORD *)v25 && *(_DWORD *)(v25 + 4) == 0x80000000;
        v33 = v32;
        if (*(_DWORD *)v25 != 0x80000000 && !v33)
          break;
        v25 += 24;
        if (v25 == v24)
        {
          v25 = v24;
          break;
        }
      }
    }
  }
  return this;
}

unint64_t WebCore::enclosingIntRectPreservingEmptyRects(WebCore *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = floorf(*(float *)this);
  v3 = 2147500000.0;
  if (v2 < 2147500000.0)
  {
    v3 = -2147500000.0;
    if (v2 > -2147500000.0)
      v3 = (float)(int)v2;
  }
  v4 = floorf(*((float *)this + 1));
  v5 = 2147500000.0;
  if (v4 < 2147500000.0)
  {
    v5 = -2147500000.0;
    if (v4 > -2147500000.0)
      v5 = (float)(int)v4;
  }
  v6 = *((float *)this + 2);
  if (v6 <= 0.0 || (v7 = *((float *)this + 3), v7 <= 0.0))
  {
    v13 = 0x7FFFFFFFLL;
    v14 = 0x80000000;
    if (v3 > -2147500000.0)
      v14 = (int)v3;
    if (v3 < 2147500000.0)
      v13 = v14;
    if (v5 >= 2147500000.0)
    {
      v15 = 0x7FFFFFFF00000000;
    }
    else if (v5 <= -2147500000.0)
    {
      v15 = 0x8000000000000000;
    }
    else
    {
      v15 = (unint64_t)(int)v5 << 32;
    }
    return v15 | v13;
  }
  else
  {
    v8 = 0x7FFFFFFFLL;
    v9 = 0x80000000;
    if (v3 > -2147500000.0)
      v9 = (int)v3;
    if (v3 < 2147500000.0)
      v8 = v9;
    v10 = 0x7FFFFFFF00000000;
    v11 = 0x8000000000000000;
    if (v5 > -2147500000.0)
      v11 = (unint64_t)(int)v5 << 32;
    if (v5 < 2147500000.0)
      v10 = v11;
    return v10 | v8;
  }
}

uint64_t WebCore::TileGrid::getTileIndexRangeForRect(uint64_t a1, int32x2_t *a2, int *a3, int32x2_t *a4)
{
  uint64_t v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  float v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int v30;
  int v31;
  float32x2_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;

  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 248))(*(_QWORD *)(v8 + 16));
  v10 = *(_DWORD *)(v8 + 296);
  v11 = *(float *)(*(_QWORD *)(v8 + 48) + 176);
  v13 = ceilf(v12);
  if (v13 > -2147500000.0)
    v14 = (int)v13;
  else
    v14 = 0x80000000;
  if (v13 < 2147500000.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF;
  v16 = ceilf(v9);
  if (v16 > -2147500000.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147500000.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v19 = (int)(float)((float)(v10 * *(unsigned __int8 *)(v8 + 301)) / v11);
  v20 = (int)(float)((float)(v10 * *(unsigned __int8 *)(v8 + 304)) / v11);
  v21 = (int)(float)((float)(v10 * *(unsigned __int8 *)(v8 + 302)) / v11);
  v22 = v18 + v19 + (int)(float)((float)(v10 * *(unsigned __int8 *)(v8 + 303)) / v11);
  v23 = *(float *)(a1 + 176);
  v24.i32[0] = -v20;
  v24.i32[1] = -v19;
  v25 = vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(v24), v23));
  v26.i32[0] = v15 + v20 + v21;
  v26.i32[1] = v22;
  v27 = vmin_s32(vadd_s32(a2[1], *a2), vadd_s32(vcvt_s32_f32(vmul_n_f32(vcvt_f32_s32(v26), v23)), v25));
  v28 = vmax_s32(v25, *a2);
  v29 = vcgt_s32(v27, v28);
  if ((v29.i8[0] & v29.i8[4] & 1) != 0)
  {
    v30 = *(_DWORD *)(a1 + 168);
    v31 = *(_DWORD *)(a1 + 172);
    v32.f32[0] = (float)v30;
    v33 = vcvtms_s32_f32((float)v28.i32[0] / (float)v30);
    v34 = v28.i32[0] / v30;
    if (v28.i32[0] < 0)
      v34 = v33;
    *(float *)v28.i32 = (float)v31;
    v35 = vcvtms_s32_f32((float)v28.i32[1] / (float)v31);
    v36 = v28.i32[1] / v31;
    if (v28.i32[1] < 0)
      v36 = v35;
    *a3 = v34;
    a3[1] = v36;
    v32.i32[1] = v28.i32[0];
    *a4 = vadd_s32(vmax_s32(vcvt_s32_f32(vrndp_f32(vdiv_f32(vcvt_f32_s32(v27), v32))), (int32x2_t)0x100000001), (int32x2_t)-1);
  }
  return v29.i8[0] & v29.i8[4] & 1;
}

unint64_t WebCore::TileGrid::setTileNeedsDisplayInRect(WebCore::TileGrid *a1, unsigned int *a2, uint64_t *a3, int *a4, _DWORD *a5)
{
  uint64_t v9;
  unint64_t result;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int32x2_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  float32x2_t v33;
  uint64_t v34;

  v9 = *a3;
  result = WebCore::TileGrid::rectForTileIndex(a1, (const WebCore::IntPoint *)*a2, a2[1]);
  v13 = (float)(int)result;
  v14 = (float)SHIDWORD(result);
  v15 = (float)v11;
  v16 = (float)v12;
  v17 = (float)*a4;
  v18 = (float)a4[1];
  if ((float)(int)result >= v17)
    v19 = (float)(int)result;
  else
    v19 = (float)*a4;
  if (v14 >= v18)
    v20 = (float)SHIDWORD(result);
  else
    v20 = (float)a4[1];
  v21 = v17 + (float)a4[2];
  if (v21 >= (float)(v13 + v15))
    v21 = v13 + v15;
  v22 = v18 + (float)a4[3];
  if (v22 >= (float)(v14 + v16))
    v22 = v14 + v16;
  if (v19 >= v21 || v20 >= v22)
  {
    v19 = 0.0;
    v20 = 0.0;
    v21 = 0.0;
    v22 = 0.0;
  }
  v33 = (float32x2_t)__PAIR64__(LODWORD(v20), LODWORD(v19));
  *(float *)&v34 = v21 - v19;
  *((float *)&v34 + 1) = v22 - v20;
  if ((float)(v21 - v19) > 0.0 && (float)(v22 - v20) > 0.0)
  {
    v24.i32[0] = -(int)result;
    v24.i32[1] = (unint64_t)-(uint64_t)(result & 0xFFFFFFFF00000000) >> 32;
    v32[1] = v34;
    v32[0] = vadd_f32(v33, vcvt_f32_s32(v24));
    if (v11 >= 1
      && v12 >= 1
      && (v25 = a5[2], v25 >= 1)
      && (v26 = a5[3], v26 >= 1)
      && *a5 + v25 > (int)result
      && *a5 < (int)result + v11
      && (v27 = a5[1], v27 + v26 > SHIDWORD(result))
      && v27 < HIDWORD(result) + v12
      && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9)) != 0)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 80))(v9, v32);
      v28 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v31 = __PAIR64__(LODWORD(v14), LODWORD(v13));
      *((_QWORD *)&v31 + 1) = __PAIR64__(LODWORD(v16), LODWORD(v15));
      v29 = *(_QWORD *)(v28 + 24);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 8);
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
          v28 = *((_QWORD *)a1 + 2);
        }
      }
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v28 + 16) + 48) + 72))(*(_QWORD *)(*(_QWORD *)(v28 + 16) + 48), 0);
      if ((_DWORD)result)
      {
        v31 = xmmword_1969F80E0;
        return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 80))(v9, &v31);
      }
    }
    else
    {
      *((_BYTE *)a3 + 12) = 1;
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerShowRepaintCounter(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  if (a2 && *((_BYTE *)this - 439) == 2)
    return 0;
  else
    return (*(unsigned __int16 *)((char *)this - 431) >> 14) & 1;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerContentsScaleMultiplierForNewTiles(WebCore::GraphicsLayerCA *this, WebCore::PlatformCALayer *a2)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this - 73) + 120))(*((_QWORD *)this - 73), (char *)this - 608);
}

float WebCore::RenderLayerBacking::contentsScaleMultiplierForNewTiles(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2)
{
  WebCore::RenderView *v2;
  WebCore::RenderLayerCompositor *v3;
  uint64_t v4;
  float v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::RenderLayerCompositor *v11;
  WebCore::RenderLayerCompositor *v12;
  WTF *v13;
  void *v14;

  v2 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                               + 24)
                                                                   + 8)
                                                       + 40)
                                           + 8)
                               + 1944);
  v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
  if (!v3)
  {
    v11 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v3 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v11, v2);
    v12 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    *((_QWORD *)v2 + 50) = v3;
    if (v12)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v12);
      WTF::fastFree(v13, v14);
      v3 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v2 + 50);
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 1) + 24) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 528)
                                                     + 8)
                                         + 24)
                             + 8)
                 + 160);
  v5 = 1.0;
  if (v4)
    v6 = *(_BYTE *)(v4 + 144) == 0;
  else
    v6 = 0;
  if (v6)
  {
    v8 = *(_QWORD *)(v4 + 288);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 32);
      if (!v9 || !*(_QWORD *)(v9 + 8))
      {
        v10 = objc_msgSend((id)objc_msgSend(*(id *)(v8 + 40), "window"), "tileCache");
        if (v10)
        {
          if (*(_BYTE *)(v10 + 68))
            return 0.125;
          else
            return 1.0;
        }
      }
    }
  }
  return v5;
}

uint64_t WebCore::PlatformCALayer::createCompatibleLayerOrTakeFromPool@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  WebCore::LayerPool *v11;
  _QWORD v12[2];
  int32x2_t v13;

  v13 = a4;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1)
    && (v11 = (WebCore::LayerPool *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1),
        WebCore::LayerPool::takeLayerWithSize(v11, (const WebCore::IntSize *)&v13, v12),
        v12[0]))
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v12[0] + 48))(v12[0], a3);
    *a5 = v12[0];
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 816))(a1, a2, a3);
    v9 = *a5;
    v12[0] = 0;
    v12[1] = vcvt_f32_s32(v13);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 256))(v9, v12);
  }
  return result;
}

void sub_194390CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    WTF::ThreadSafeRefCounted<WebCore::PlatformCALayer,(WTF::DestructionThread)1>::deref((unsigned int *)(a10 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::LayerPool::takeLayerWithSize@<X0>(WebCore::LayerPool *this@<X0>, const WebCore::IntSize *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  BOOL v7;
  unsigned int v8;
  int v9;
  unint64_t v10;

  result = WTF::isMainThread(this);
  if ((result & 1) == 0)
    goto LABEL_18;
  if (!*((_DWORD *)this + 9)
    || (*(int *)a2 >= 1 ? (v7 = *((_DWORD *)a2 + 1) <= 0) : (v7 = 1),
        v7
     || (result = (uint64_t)WebCore::LayerPool::listOfLayersWithSize((uint64_t)this, (int *)a2, 1),
         *(_QWORD *)result == *(_QWORD *)(result + 8))))
  {
    *a3 = 0;
    return result;
  }
  v8 = *(_DWORD *)a2;
  v9 = *((_DWORD *)a2 + 1);
  if (*(int *)a2 < 0)
    v8 = -v8;
  if (v9 < 0)
    v9 = -v9;
  v10 = v9 * (unint64_t)v8;
  if ((v10 & 0xFFFFFFFF00000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194390DB4);
  }
  if (v10 >> 30)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x194390D60);
  }
  *((_DWORD *)this + 8) -= 4 * v10;
  return (uint64_t)WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>::takeFirst(a3, (uint64_t *)result);
}

int *WebCore::LayerPool::listOfLayersWithSize(uint64_t a1, int *a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  int v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  int *v27;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_28;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & ((0xD7862706ELL * (unint64_t)(277951225 * *a2 + 95187966 * v8)) >> 4);
  v10 = (int *)(v5 + 40 * v9);
  v11 = *v10;
  v12 = v10[1];
  if (*v10 != *a2 || v12 != v8)
  {
    v21 = 1;
    while (v11 | v12)
    {
      v9 = (v9 + v21) & v6;
      v10 = (int *)(v5 + 40 * v9);
      v11 = *v10;
      v12 = v10[1];
      ++v21;
      if (*v10 == v7 && v12 == v8)
        goto LABEL_7;
    }
    v10 = (int *)(v5 + 40 * *(unsigned int *)(v5 - 4));
  }
LABEL_7:
  if (v10 == (int *)(v5 + 40 * *(unsigned int *)(v5 - 4)))
  {
LABEL_28:
    memset(v26, 0, sizeof(v26));
    WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::add<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>((uint64_t)&v27, (uint64_t *)(a1 + 8), a2, (uint64_t)v26);
    v10 = v27;
    WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>::~Deque((unint64_t *)v26, v23);
    v24 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v24 != *(_DWORD *)(a1 + 24))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24) = *(_QWORD *)a2;
      goto LABEL_20;
    }
    v25 = a1 + 16;
LABEL_32:
    WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntSize const&>(v25, (unint64_t)a2);
    return v10 + 2;
  }
  if (a3 == 1)
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v15)
    {
      v16 = v15 - 1;
      v17 = (_DWORD *)(v14 + 8 * v15 - 4);
      do
      {
        if (*(v17 - 1) == v7 && *v17 == v8)
          break;
        v17 -= 2;
        --v16;
      }
      while (v16 != -1);
    }
    else
    {
      v16 = -1;
    }
    v19 = v14 + 8 * v16;
    if (v19 + 8 != v14 + 8 * v15)
    {
      memmove((void *)v19, (const void *)(v19 + 8), 8 * v15 - 8 * v16 - 8);
      LODWORD(v15) = *(_DWORD *)(a1 + 28);
    }
    *(_DWORD *)(a1 + 28) = v15 - 1;
    if ((_DWORD)v15 - 1 != *(_DWORD *)(a1 + 24))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v15 - 1)) = *(_QWORD *)a2;
LABEL_20:
      ++*(_DWORD *)(a1 + 28);
      return v10 + 2;
    }
    v25 = a1 + 16;
    goto LABEL_32;
  }
  return v10 + 2;
}

_QWORD *WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::add<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  unsigned int v30;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = v10 & ((0xD7862706ELL * (unint64_t)(277951225 * *a3 + 95187966 * v11)) >> 4);
  v13 = v8 + 40 * v12;
  v15 = *(_DWORD *)v13;
  result = (_QWORD *)*(unsigned int *)(v13 + 4);
  if (*(_QWORD *)v13)
  {
    v28 = 0;
    v29 = 1;
    do
    {
      if (v15 == *a3 && (_DWORD)result == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(_DWORD *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 40 * v30;
        goto LABEL_11;
      }
      if ((v15 & result) == 0xFFFFFFFF)
        v28 = v13;
      v12 = (v12 + v29) & v10;
      v13 = v8 + 40 * v12;
      v15 = *(_DWORD *)v13;
      result = (_QWORD *)*(unsigned int *)(v13 + 4);
      ++v29;
    }
    while (*(_QWORD *)v13);
    if (v28)
    {
      *(_QWORD *)(v28 + 32) = 0;
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      --*(_DWORD *)(*a2 - 16);
      v13 = v28;
    }
  }
  *(_QWORD *)v13 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)a4;
  *(_QWORD *)a4 = v16;
  v17 = *(_QWORD *)(v13 + 16);
  v18 = *(_QWORD *)(v13 + 24);
  v19 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v13 + 24) = v19;
  *(_QWORD *)(a4 + 8) = v17;
  *(_QWORD *)(a4 + 16) = v18;
  LODWORD(v17) = *(_DWORD *)(v13 + 32);
  *(_DWORD *)(v13 + 32) = *(_DWORD *)(a4 + 24);
  *(_DWORD *)(a4 + 24) = v17;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_10;
LABEL_21:
    result = WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::expand(a2, v13);
    v13 = (uint64_t)result;
    v22 = *a2;
    if (*a2)
      LODWORD(v25) = *(_DWORD *)(v22 - 4);
    else
      LODWORD(v25) = 0;
    goto LABEL_10;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_21;
LABEL_10:
  v26 = v22 + 40 * v25;
  v27 = 1;
LABEL_11:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v26;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

uint64_t WTF::VectorTypeOperations<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = *v3;
      *v3 = 0;
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v8 = off_1E334ED68;
          v8[1] = v5;
          v9 = v8;
          WTF::ensureOnMainThread();
          result = (uint64_t)v9;
          if (v9)
            result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerUseGiantTiles(WebCore::GraphicsLayerCA *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this - 73) + 176))(*((_QWORD *)this - 73));
}

uint64_t WebCore::RenderLayerBacking::useGiantTiles(WebCore::RenderLayerBacking *this)
{
  return *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 24)
                                           + 8)
                               + 112)
                   + 704) & 1;
}

_DWORD *WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *result;
  _DWORD *v15;
  uint64_t v16;
  BOOL v17;
  _DWORD *v18;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v11 = (_QWORD *)(v9 + 32);
    v12 = a2;
    do
    {
      *(v11 - 1) = 0;
      *v11 = 0;
      *(v11 - 2) = 0x8000000000000000;
      *(_DWORD *)v11 = -1;
      v11 += 3;
      --v12;
    }
    while (v12);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v15 = (_DWORD *)v6;
    v16 = v7;
    do
    {
      if (*v15 != 0x80000000)
      {
        if (*v15)
          v17 = 0;
        else
          v17 = v15[1] == 0x80000000;
        if (v17)
        {
          WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>::~KeyValuePair((uint64_t)v15);
        }
        else
        {
          v18 = WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>::reinsert(*a1, (uint64_t)v15);
          WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>::~KeyValuePair((uint64_t)v15);
          if (v15 == a3)
            v13 = v18;
        }
      }
      v15 += 6;
      --v16;
    }
    while (v16);
    goto LABEL_22;
  }
  result = 0;
  if (v6)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  void *v18;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 40 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if (v7)
  {
    v14 = v7;
    v15 = v6;
    do
    {
      if (*(_DWORD *)v15 != -1 || *(_DWORD *)(v15 + 4) != -1)
      {
        if (*(_QWORD *)v15)
        {
          v17 = WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::reinsert(*a1, v15);
          WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>::~Deque((unint64_t *)(v15 + 8), v18);
          if (v15 == a3)
            v13 = v17;
        }
        else
        {
          WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>::~Deque((unint64_t *)(v15 + 8), v10);
        }
      }
      v15 += 40;
      --v14;
    }
    while (v14);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_QWORD *WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::IntSize,WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashMap<WebCore::IntSize,WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>,WTF::DefaultHash<WebCore::IntSize>,WTF::HashTraits<WebCore::IntSize>,WTF::HashTraits<WTF::Deque<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,0ul>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntSize>>::rehash(a1, v5, a2);
}

uint64_t WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::IntSize const&>(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::IntSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v8 = 8 * v5;
      v9 = v4;
      do
      {
        v10 = *(_QWORD *)v9;
        v9 = (WTF *)((char *)v9 + 8);
        *v6++ = v10;
        v8 -= 8;
      }
      while (v8);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::IntSize::constrainedBetween(WebCore::IntSize *this, const WebCore::IntSize *a2, const WebCore::IntSize *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  LODWORD(v3) = *(_DWORD *)a3;
  LODWORD(v4) = *((_DWORD *)a3 + 1);
  if (*(_DWORD *)this < *(_DWORD *)a3)
    LODWORD(v3) = *(_DWORD *)this;
  v5 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 <= (int)v3)
    v3 = v3;
  else
    v3 = *(unsigned int *)a2;
  if (*((_DWORD *)this + 1) < (int)v4)
    LODWORD(v4) = *((_DWORD *)this + 1);
  if (v5 <= (int)v4)
    v4 = v4;
  else
    v4 = v5;
  return v3 | (v4 << 32);
}

uint64_t WebCore::TileController::boundsWithoutMargin(WebCore::TileController *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 248))(*((_QWORD *)this + 2));
  return 0;
}

WTF *WebCore::TileGrid::removeAllTiles(WebCore::TileGrid *this)
{
  void *v2;
  WTF *result;
  uint64_t *v4[5];
  WTF *v5[2];

  WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::keys(v4, (_QWORD *)this + 4);
  v5[0] = 0;
  v5[1] = 0;
  WTF::Mapper<WTF::Vector<WebCore::IntPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::IntPoint,WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>>>(WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>> const&)::{lambda(WebCore::IntPoint&&)#1},WTF::Vector<WebCore::IntPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>> const&,void>::map((uint64_t)v5, v4);
  WebCore::TileGrid::removeTiles(this, (uint64_t)v5);
  result = v5[0];
  if (v5[0])
    return (WTF *)WTF::fastFree(v5[0], v2);
  return result;
}

void WebCore::TileGrid::removeTiles(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::PlatformCALayer *v10[2];

  if (*(_DWORD *)(a2 + 12))
  {
    v4 = 0;
    v5 = a1 + 4;
    v6 = a1 + 20;
    do
    {
      v7 = WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::find(a1[4], *(_QWORD *)(*(_QWORD *)a2 + 8 * v4), HIDWORD(*(_QWORD *)(*(_QWORD *)a2 + 8 * v4)));
      WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::take((uint64_t)v10, v5, (uint64_t)v7);
      (*(void (**)(WebCore::PlatformCALayer *))(*(_QWORD *)v10[0] + 112))(v10[0]);
      WTF::HashCountedSet<WebCore::PlatformCALayer *,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>>::removeAll(v6, (uint64_t)v10[0]);
      WebCore::PlatformCALayer::moveToLayerPool(v10[0]);
      v8 = *(_QWORD *)(a1[2] + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      }
      WebCore::TileGrid::TileInfo::~TileInfo((WebCore::TileGrid::TileInfo *)v10);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a2 + 12));
  }
}

_QWORD *WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::keys(_QWORD *result, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  int v10;
  _DWORD *v11;

  v2 = (_DWORD *)*a2;
  if (!*a2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_22:
    v4 = &v2[6 * v3];
    goto LABEL_17;
  }
  v3 = *(v2 - 1);
  v4 = &v2[6 * v3];
  if (!*(v2 - 3))
  {
    v5 = &v2[6 * v3];
    goto LABEL_22;
  }
  v5 = (_DWORD *)*a2;
  if ((_DWORD)v3)
  {
    v6 = 24 * v3;
    v5 = (_DWORD *)*a2;
    while (1)
    {
      v7 = !*v5 && v5[1] == 0x80000000;
      v8 = v7;
      if (*v5 != 0x80000000 && !v8)
        break;
      v5 += 6;
      v6 -= 24;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_17:
  if (v2)
  {
    v10 = *(v2 - 1);
    v11 = &v2[6 * v10];
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  *result = a2;
  result[1] = v5;
  result[2] = v4;
  result[3] = v11;
  result[4] = &v2[6 * v10];
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WebCore::IntPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::IntPoint,WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>>>(WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>> const&)::{lambda(WebCore::IntPoint&&)#1},WTF::Vector<WebCore::IntPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WebCore::IntPoint,WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::IntPoint,WebCore::TileGrid::TileInfo>>,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashMap<WebCore::IntPoint,WebCore::TileGrid::TileInfo,WTF::DefaultHash<WebCore::IntPoint>,WTF::HashTraits<WebCore::IntPoint>,WTF::HashTraits<WebCore::TileGrid::TileInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::IntPoint>>,WebCore::IntPoint,WebCore::TileGrid::TileInfo>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  int v12;

  v3 = result;
  v4 = **a2;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 12);
    if ((_DWORD)v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v3 + 8) = v5;
      *(_QWORD *)v3 = result;
    }
  }
  v6 = a2[1];
  v7 = a2[3];
  if (v6 != v7)
  {
    v8 = a2[2];
    v9 = *(_DWORD *)(v3 + 12);
    do
    {
      v10 = *v6;
      v6 += 3;
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v9) = v10;
      v9 = *(_DWORD *)(v3 + 12) + 1;
      *(_DWORD *)(v3 + 12) = v9;
      while (v6 != v8)
      {
        if (*(_DWORD *)v6)
          v11 = 0;
        else
          v11 = *((_DWORD *)v6 + 1) == 0x80000000;
        v12 = v11;
        if (*(_DWORD *)v6 != 0x80000000 && v12 == 0)
          goto LABEL_20;
        v6 += 3;
      }
      v6 = v8;
LABEL_20:
      ;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t WebCore::wrap<WebCore::Geolocation>(uint64_t a1, WebCore::Geolocation *a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::Geolocation *v7;

  v4 = WebCore::getCachedWrapper<WebCore::Geolocation>(*(_QWORD *)(a1 + 3320), (uint64_t)a2);
  if (v4)
    return v4;
  ++*((_DWORD *)a2 + 8);
  v7 = a2;
  v5 = WebCore::toJSNewlyCreated(a1, (uint64_t *)&v7);
  WTF::Ref<WebCore::Geolocation,WTF::RawPtrTraits<WebCore::Geolocation>,WTF::DefaultRefDerefTraits<WebCore::Geolocation>>::~Ref(&v7);
  return v5;
}

uint64_t WebCore::getCachedWrapper<WebCore::Geolocation>(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 48))
  {
    v4 = a2;
    return WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(a1 + 32), &v4);
  }
  else
  {
    v2 = *(_BYTE **)(a2 + 24);
    if (!v2 || (v2[8] & 3) != 0)
      return 0;
    else
      return *(_QWORD *)v2;
  }
}

uint64_t WebCore::IOSApplication::isHoYoLAB(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81754 == 1)
    return byte_1ECE81753 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81753 = IsEqualTo;
  byte_1ECE81754 = 1;
  return result;
}

void sub_194391B90(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::IOSApplication::isGmail(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE81748 == 1)
    return byte_1ECE81747 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81747 = IsEqualTo;
  byte_1ECE81748 = 1;
  return result;
}

void sub_194391C60(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebCore::CachedResourceLoader::requestResource@<X0>(WTF::StringImpl **__return_ptr a1@<X8>, WebCore::ResourceRequest *this@<X2>, _QWORD *a3@<X0>, WTF::StringImpl *a4@<X1>, int a5@<W3>, int a6@<W4>)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  __int128 *v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v36;
  const WTF::URL *shouldUpgradeInsecureContent;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  __int128 v41;
  const WTF::URL *v42;
  const WTF::URL *v43;
  WTF::StringImpl *v44;
  const WTF::URL *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  WebCore::Page *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  _BOOL4 v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *updated;
  uint64_t v70;
  WebCore::FrameLoader *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  __int128 v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD **v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  WTF::StringImpl *v89;
  const WTF::String *v90;
  WTF::StringImpl *v91;
  unsigned int v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WebCore::Quirks *v96;
  char Metadata;
  uint64_t v98;
  char v99;
  unsigned int MetadataSiteInternal;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned __int16 *v105;
  unsigned __int16 *v106;
  uint64_t v107;
  int v108;
  unsigned __int16 *v109;
  uint64_t v110;
  int v111;
  unsigned __int16 *v112;
  uint64_t v113;
  int v114;
  unsigned __int16 *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  unsigned __int16 *v120;
  int v121;
  WTF *Ref;
  const WTF::StringImpl *v123;
  const WebCore::Page *v124;
  WTF *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  WebCore::CachedResource *v130;
  uint64_t v131;
  uint64_t v132;
  WebCore::ResourceRequest *v133;
  uint64_t v134;
  const WebCore::Document *v135;
  WTF::StringImpl *v136;
  const WebCore::SecurityOrigin *v137;
  uint64_t v138;
  _BOOL4 v139;
  char v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  WebCore::TextResourceDecoder *v144;
  void *v145;
  const WTF::StringImpl *v146;
  WebCore::TextResourceDecoder *v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  WebCore::FormData *v154;
  char v155;
  WebCore::FormData *v156;
  int v157;
  int v158;
  char v159;
  uint64_t v160;
  unsigned __int16 *v161;
  unsigned __int16 *v162;
  uint64_t v163;
  int v164;
  unsigned __int16 *v165;
  uint64_t v166;
  int v167;
  unsigned __int16 *v168;
  uint64_t v169;
  int v170;
  unsigned __int16 *v171;
  uint64_t v172;
  int v173;
  int v174;
  const WTF::StringImpl *v175;
  BOOL v176;
  unint64_t v177;
  unint64_t v178;
  const WTF::StringImpl **v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  int v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int v191;
  uint64_t *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  const WebCore::ResourceRequest *v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  char v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::MonotonicTime *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _DWORD **v211;
  _DWORD *v212;
  __int128 v213;
  WTF::StringImpl *v214;
  char v215;
  _DWORD *v216;
  WTF::StringImpl *v217;
  int v218;
  int v219;
  uint64_t v220;
  unsigned int *v221;
  unsigned int v222;
  WebCore::FrameLoader *v223;
  void *v224;
  unsigned int v225;
  unsigned int v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  const WTF::StringImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  WebCore::CachedResource::ResponseData *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  __int128 *v244;
  unsigned int *v245;
  unsigned int v246;
  WTF::StringImpl *v247;
  uint64_t v248;
  WTF::StringImpl **v249;
  uint64_t v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  unsigned int v254;
  unsigned int v255;
  WTF::StringImpl *v256;
  int v257;
  uint64_t v258;
  int v259;
  NSObject *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  WTF::WallTime *v269;
  WTF::WallTime *v270;
  uint64_t *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  unint64_t v278;
  WTF::StringImpl **v279;
  WTF::StringImpl *v280;
  WebCore::CachedResource *v281;
  uint64_t v283;
  _DWORD *v284;
  uint64_t *v285;
  int v286;
  WebCore::CachedResource *v287;
  WebCore::ResourceRequest *v288;
  void *v289;
  int v290;
  WTF::StringImpl *v291;
  uint64_t v292;
  WebCore::ResourceRequest *v293;
  WTF *v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  __int16 v299;
  unsigned int v300;
  BOOL v301;
  int v302;
  BOOL v303;
  void *v304;
  uint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int v312;
  CFTypeRef v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  BOOL v321;
  uint64_t v322;
  unsigned __int16 *v323;
  int v324;
  char v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  char v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  __int128 v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  int v339;
  WTF **v340;
  const WTF::StringImpl *v341;
  const WTF::StringImpl *v342;
  char v343;
  WTF::StringImpl *v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  WTF::StringImpl **v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  WTF::StringImpl **v357;
  int i;
  uint64_t v359;
  WTF::StringImpl **v360;
  WTF *v361;
  uint64_t *v362;
  WebCore::CachedResource *v363;
  WebCore::Frame *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  uint64_t *v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  WTF *v374;
  void *v375;
  unsigned int v376;
  unsigned int v377;
  WTF::StringImpl *result;
  WTF::StringImpl *v379;
  WebCore::CachedResource *v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  unint64_t v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  bmalloc::api *v390;
  void *v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  WTF *v398;
  void *v399;
  WTF *v400;
  WebCore::HTMLMetaCharsetParser *v401;
  WTF *v402;
  void *v403;
  uint64_t v404;
  const WebCore::HTTPHeaderMap *v405;
  const WTF::StringImpl *v406;
  char v407;
  char v408;
  unsigned int *v409;
  unsigned int v410;
  uint64_t v411;
  unsigned int v412;
  unsigned int v413;
  WTF::StringImpl *v414;
  WTF::StringImpl *v415;
  uint64_t v416;
  bmalloc::api *v417;
  void *v418;
  WTF::StringImpl *v419;
  _DWORD *v420;
  _DWORD *v421;
  _DWORD *v422;
  uint64_t v423;
  const void *v424;
  WTF::StringImpl *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  unsigned int v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  const WTF::StringImpl *v435;
  char v436;
  WTF::StringImpl *v437;
  uint64_t v438;
  WTF::StringImpl *v439;
  void *v440;
  WTF::StringImpl *v441;
  WTF::StringImpl *v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  WTF::StringImpl *v446;
  WTF::StringImpl *v447;
  WebCore::FrameLoader *v448;
  uint64_t v449;
  _BOOL4 v450;
  WTF::StringImpl *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  WTF::StringImpl *v456;
  uint64_t v457;
  char v458;
  __int128 v459;
  uint64_t v460;
  uint64_t v461;
  _WORD *v462;
  WebCore::CachedResource::ResponseData *v463;
  WebCore::CachedResource::ResponseData *v464;
  WTF *v465;
  void *v466;
  char v467;
  unsigned int v468;
  unsigned int v469;
  _DWORD *v470;
  WTF::StringImpl *v471;
  uint64_t v472;
  uint64_t v473;
  WTF::StringImpl *v474;
  _QWORD *v475;
  uint64_t v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  uint64_t v479;
  _BOOL4 v480;
  _BOOL4 v481;
  BOOL v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  _DWORD *v486;
  WebCore::CachedResource *v487;
  void *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  _DWORD *v491;
  WTF::StringImpl *v492;
  uint64_t *v493;
  int v494;
  uint64_t v495;
  WebCore::HTTPHeaderNamesHash *v496;
  unint64_t v497;
  const WTF::StringImpl *v498;
  int v499;
  WTF::StringImpl *v500;
  __int128 v501;
  const void *v502;
  WTF::StringImpl *v503;
  WTF::StringImpl *v504;
  uint64_t *v505;
  NSObject *v506;
  uint64_t v507;
  char v508;
  uint64_t v509;
  WTF::StringImpl *v510;
  WTF::StringImpl *v511;
  WTF::StringImpl *v512;
  WTF::StringImpl *v513;
  WTF::StringImpl *v514;
  NSObject *v515;
  uint64_t v516;
  char v517;
  uint64_t v518;
  WTF::StringImpl *v519;
  WTF::StringImpl *v520;
  WTF::StringImpl *v521;
  WTF::StringImpl *v522;
  WTF::StringImpl *v523;
  int v524;
  NSObject *v525;
  uint64_t v526;
  char v527;
  uint64_t v528;
  __int128 v529;
  CFTypeRef v530;
  WTF::StringImpl *v531;
  WTF::StringImpl *v532;
  int v533;
  NSObject *v534;
  uint64_t v535;
  char v536;
  uint64_t v537;
  __int128 v538;
  CFTypeRef v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  NSObject *v542;
  uint64_t v543;
  char v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  _DWORD *v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  uint64_t v559;
  WebCore::DocumentLoader *v560;
  WTF::StringImpl *v561;
  uint64_t v562;
  uint64_t v563;
  WTF::StringImpl *v564;
  unsigned int *v565;
  unsigned int v566;
  BOOL isSameSchemeHostPort;
  WTF::StringImpl *v568;
  int v569;
  BOOL v570;
  uint64_t v571;
  _DWORD *v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  unsigned int *v577;
  unsigned int v578;
  uint64_t v579;
  int v580;
  unsigned int *v581;
  WebCore::SecurityOrigin *v582;
  unsigned int v583;
  WebCore::CachedResource *v584;
  uint64_t *v585;
  WTF::StringImpl *v586;
  WTF::StringImpl *v587;
  __int128 v588;
  const void *v589;
  WTF::StringImpl *v590;
  WTF::StringImpl *v591;
  __int128 v592;
  CFTypeRef v593;
  WTF::StringImpl *v594;
  uint64_t v595;
  unsigned int v596;
  int v597;
  uint64_t v599;
  const WebCore::ResourceError *v600;
  WTF::StringImpl *v601;
  WTF::StringImpl *v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  double v605;
  double v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  BOOL v613;
  uint64_t v614;
  _DWORD *v615;
  _DWORD *v616;
  WebCore::CachedResource *v617;
  WTF::StringImpl *v618;
  _DWORD *v619;
  __int128 v620;
  WTF::StringImpl *v621;
  WebCore::CachedResource::ResponseData *v622;
  WTF::StringImpl *v623;
  WTF::StringImpl *v624;
  WTF::StringImpl *v625;
  WTF::StringImpl *v626;
  void *v627;
  WebCore::Frame *v628;
  unsigned int *v629;
  unsigned int v630;
  uint64_t v631;
  unsigned int *v632;
  unsigned int v633;
  WTF::StringImpl *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int *v638;
  unsigned int *v639;
  uint64_t v640;
  const WTF::StringImpl **v641;
  uint64_t v642;
  uint64_t v643;
  const WTF::StringImpl **v644;
  uint64_t v645;
  WTF::StringImpl *v646;
  WebCore::ResourceRequest *v647;
  int v648;
  WebCore::HTTPHeaderValues *v649;
  uint64_t *v650;
  uint64_t v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  char v659;
  unsigned int *v660;
  unsigned int v661;
  unsigned int v662;
  int v663;
  int v664;
  int v665;
  unsigned int v666;
  WebCore::ResourceRequest *v667;
  unsigned int v668;
  int v669;
  uint64_t *v670;
  uint64_t v671;
  int v672;
  WebCore::ResourceRequestBase *v673;
  WebCore::Page *v674;
  WebCore::Frame *v675;
  _DWORD *v677;
  uint64_t v678;
  WTF::StringImpl *v679[6];
  WTF::StringImpl *v680[2];
  CFTypeRef cf[2];
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  uint64_t v696;
  WTF::StringImpl *v697;
  uint64_t v698;
  __int128 v699;
  __int128 v700;
  uint64_t v701;
  int v702;
  __int16 v703;
  uint64_t v704;
  char v705;
  uint64_t v706;
  WTF::StringImpl *v707;
  _OWORD v708[3];
  WTF::StringImpl *v709;
  __int128 v710;
  __int128 v711;
  char v712;
  WTF::StringImpl *v713;
  _BYTE buf[48];
  WTF::StringImpl *v715;
  int v716;
  __int16 v717;
  CFTypeRef v718;
  char v719;
  uint64_t v720;
  WTF::StringImpl *v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int16 v725;
  char v726;
  char v727;
  char v728;
  WTF::StringImpl *v729;
  _DWORD *v730;
  uint64_t v731;
  int v732;
  char v733;
  char v734;
  uint64_t v735;
  uint64_t v736;

  v8 = a4;
  v736 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v11 = *(WTF::StringImpl **)this;
  if (*(_QWORD *)this)
    *(_DWORD *)v11 += 2;
  v709 = v11;
  v710 = *(_OWORD *)((char *)this + 8);
  v711 = *(_OWORD *)((char *)this + 24);
  v12 = a3[10];
  if (!v12
    || (v13 = *(_QWORD *)(v12 + 8)) == 0
    || (v14 = *(_QWORD *)(v13 - 40)) == 0
    || (v15 = *(unsigned int **)(v14 + 8)) == 0
    || (v16 = *((_QWORD *)v15 + 3)) == 0
    || !*(_QWORD *)(v16 + 8))
  {
    v260 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a3;
      _os_log_impl(&dword_1940B8000, v260, OS_LOG_TYPE_DEFAULT, "%p - CachedResourceLoader::requestResource: failed because no frame or page", buf, 0xCu);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v261 = *(WTF::StringImpl **)buf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v263 = *(WTF::StringImpl **)buf;
    if (v261)
      *(_DWORD *)v261 += 2;
    v264 = v709;
    if (v709)
      *(_DWORD *)v709 += 2;
    v265 = v710;
    v266 = v711;
    if (v263)
      *(_DWORD *)v263 += 2;
    *a1 = v261;
    a1[1] = v264;
    *((_OWORD *)a1 + 1) = v265;
    *((_OWORD *)a1 + 2) = v266;
    a1[6] = v263;
    *((_DWORD *)a1 + 14) = 0;
    *((_WORD *)a1 + 30) = 1;
    a1[8] = 0;
    *((_BYTE *)a1 + 72) = 1;
    *((_DWORD *)a1 + 20) = 1;
    if (v263)
    {
      if (*(_DWORD *)v263 == 2)
        WTF::StringImpl::destroy(v263, v262);
      else
        *(_DWORD *)v263 -= 2;
    }
    if (v261)
    {
      if (*(_DWORD *)v261 == 2)
        WTF::StringImpl::destroy(v261, v262);
      else
        *(_DWORD *)v261 -= 2;
    }
    goto LABEL_657;
  }
  v672 = a6;
  v17 = (__int128 *)((char *)this + 8);
  v18 = v15 + 2;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v675 = (WebCore::Frame *)v15;
  v678 = (uint64_t)a3;
  if ((v710 & 1) == 0)
  {
    v505 = (uint64_t *)a1;
    v506 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::Frame::pageID((WebCore::Frame *)v15);
      if (!v508)
        v507 = 0;
      v509 = *((_QWORD *)v15 + 4);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v507;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v509;
      _os_log_impl(&dword_1940B8000, v506, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResourceLoader::requestResource: URL is invalid", buf, 0x20u);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v510 = *(WTF::StringImpl **)buf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v511 = *(WTF::StringImpl **)buf;
    if (v510)
      *(_DWORD *)v510 += 2;
    v512 = v709;
    if (v709)
      *(_DWORD *)v709 += 2;
    *(_OWORD *)&v679[2] = v710;
    *(_OWORD *)&v679[4] = v711;
    if (v511)
      *(_DWORD *)v511 += 2;
    LODWORD(v680[1]) = 0;
    WORD2(v680[1]) = 1;
    LOBYTE(cf[1]) = 1;
    v679[0] = 0;
    v679[1] = 0;
    *(_QWORD *)buf = v510;
    *(_QWORD *)&buf[8] = v512;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
    *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
    LODWORD(v679[2]) &= ~1u;
    v680[0] = 0;
    v715 = v511;
    v716 = 0;
    v717 = 1;
    cf[0] = 0;
    v718 = 0;
    v719 = 1;
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v505, (uint64_t *)buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v513);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v514);
    if (v511)
    {
      if (*(_DWORD *)v511 == 2)
        WTF::StringImpl::destroy(v511, v262);
      else
        *(_DWORD *)v511 -= 2;
    }
    if (v510)
    {
      if (*(_DWORD *)v510 == 2)
        WTF::StringImpl::destroy(v510, v262);
      else
        *(_DWORD *)v510 -= 2;
    }
    goto LABEL_655;
  }
  if ((_DWORD)v8 == 1)
  {
LABEL_15:
    v20 = 6;
  }
  else
  {
    v20 = 3;
    switch((int)v8)
    {
      case 0:
        if (*(unsigned int **)(*((_QWORD *)v15 + 16) + 8) == v15)
          v20 = 3;
        else
          v20 = 7;
        break;
      case 2:
        v20 = 16;
        break;
      case 3:
        v20 = 13;
        break;
      case 4:
      case 5:
        v20 = 5;
        break;
      case 9:
        goto LABEL_15;
      case 12:
        v20 = 20;
        break;
      case 14:
        v20 = 17;
        break;
      case 15:
        v20 = 8;
        break;
      case 16:
        break;
      default:
        v20 = 0;
        break;
    }
  }
  v21 = (char *)this + 208;
  v670 = (uint64_t *)a1;
  if (*((_BYTE *)this + 208))
    v20 = *((unsigned __int8 *)this + 208);
  else
    *v21 = v20;
  if ((v8 & 0xFE) == 0xA || !v20)
  {
    v673 = (WebCore::ResourceRequestBase *)WTF::fastMalloc((WTF *)0xC8);
    WebCore::ResourceRequestBase::RequestData::RequestData(v673, this);
    v420 = (_DWORD *)*((_QWORD *)this + 19);
    if (v420)
      *v420 += 2;
    *((_QWORD *)v673 + 19) = v420;
    v421 = (_DWORD *)*((_QWORD *)this + 20);
    if (v421)
      *v421 += 2;
    *((_QWORD *)v673 + 20) = v421;
    v422 = (_DWORD *)*((_QWORD *)this + 21);
    if (v422)
      ++*v422;
    *((_QWORD *)v673 + 21) = v422;
    v423 = *((_QWORD *)this + 22);
    *((_BYTE *)v673 + 184) = *((_BYTE *)this + 184);
    *((_QWORD *)v673 + 22) = v423;
    v424 = (const void *)*((_QWORD *)this + 24);
    *((_QWORD *)v673 + 24) = v424;
    if (v424)
      CFRetain(v424);
    WebCore::ResourceRequestBase::clearHTTPReferrer(v673, v419);
    WebCore::ResourceRequestBase::clearHTTPOrigin(v673, v425);
  }
  else
  {
    v673 = 0;
  }
  v22 = a3[9];
  if (v22)
  {
    v23 = *(_QWORD *)(v22 + 8);
    if (v23)
    {
      *(_DWORD *)(v23 + 24) += 2;
      if (!*((_QWORD *)this + 47))
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v23 + 192), a4);
        do
          v410 = __ldaxr(v409);
        while (__stlxr(v410 + 1, v409));
        v411 = *((_QWORD *)this + 47);
        *((_QWORD *)this + 47) = v409;
        if (v411)
        {
          do
          {
            v412 = __ldaxr((unsigned int *)v411);
            v413 = v412 - 1;
          }
          while (__stlxr(v413, (unsigned int *)v411));
          if (!v413)
          {
            atomic_store(1u, (unsigned int *)v411);
            v414 = *(WTF::StringImpl **)(v411 + 48);
            *(_QWORD *)(v411 + 48) = 0;
            if (v414)
            {
              if (*(_DWORD *)v414 == 2)
                WTF::StringImpl::destroy(v414, a4);
              else
                *(_DWORD *)v414 -= 2;
            }
            v415 = *(WTF::StringImpl **)(v411 + 40);
            *(_QWORD *)(v411 + 40) = 0;
            if (v415)
            {
              if (*(_DWORD *)v415 == 2)
                WTF::StringImpl::destroy(v415, a4);
              else
                *(_DWORD *)v415 -= 2;
            }
            v416 = *(unsigned int *)(v411 + 32);
            if ((_DWORD)v416 != -1)
              ((void (*)(_BYTE *, uint64_t))off_1E33F88A0[v416])(buf, v411 + 8);
            *(_DWORD *)(v411 + 32) = -1;
            WTF::fastFree((WTF *)v411, a4);
          }
        }
      }
      if (*((_OWORD *)this + 14) == 0)
      {
        v24 = *(_QWORD *)(v23 + 424);
        *((_QWORD *)this + 28) = *(_QWORD *)(v23 + 416);
        *((_QWORD *)this + 29) = v24;
      }
      v25 = *(_QWORD *)(v23 + 392);
      if (v25)
      {
        v26 = *(_DWORD *)(v25 + 24);
        *(_DWORD *)(v25 + 24) = v26 + 1;
        v27 = *v21;
        if ((v27 > 0x13 || ((1 << v27) & 0x8D498) == 0)
          && (*(_DWORD *)((_BYTE *)this + 322) & 0x30000) != 0x10000
          && !*((_QWORD *)this + 32))
        {
          *((_QWORD *)this + 32) = *(_QWORD *)(v25 + 64);
          v26 = *(_DWORD *)(v25 + 24) - 1;
        }
        if (v26)
        {
          *(_DWORD *)(v25 + 24) = v26;
        }
        else
        {
          WebCore::ServiceWorker::~ServiceWorker((WebCore::ServiceWorker *)v25, a4);
          bmalloc::api::isoDeallocate(v390, v391);
        }
      }
      if (*(_DWORD *)(v23 + 24) == 2)
      {
        if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v23);
      }
      else
      {
        *(_DWORD *)(v23 + 24) -= 2;
      }
    }
  }
  v28 = *((unsigned int *)this + 27);
  if ((_DWORD)v28)
  {
    v29 = (unsigned __int16 *)*((_QWORD *)this + 12);
    while (1)
    {
      v30 = *v29;
      v29 += 8;
      if (!v30)
        break;
      if (!--v28)
        goto LABEL_37;
    }
  }
  else
  {
LABEL_37:
    WebCore::CachedResourceRequest::acceptHeaderValueFromType((int)v8, (WTF::StringImpl **)buf);
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::ResourceRequest *)((char *)this + 96), 0, (WTF::StringImpl **)buf);
    *((_BYTE *)this + 184) &= ~2u;
    v32 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  if ((*v21 | 4) == 7 && (WTF::URL::protocolIs() & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v433 = *(WTF::StringImpl **)buf;
    v679[0] = *(WTF::StringImpl **)buf;
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::ResourceRequest *)((char *)this + 96), (WTF::StringImpl *)0x55, v679);
    *((_BYTE *)this + 184) &= ~2u;
    if (v433)
    {
      if (*(_DWORD *)v433 == 2)
        WTF::StringImpl::destroy(v433, v434);
      else
        *(_DWORD *)v433 -= 2;
    }
  }
  v33 = a3[9];
  if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0)
  {
    *(_DWORD *)(v34 + 24) += 2;
    v36 = (_DWORD)v8 == 1 || (v8 & 0xFE) == 6;
    shouldUpgradeInsecureContent = (const WTF::URL *)WebCore::MixedContentChecker::shouldUpgradeInsecureContent((WebCore **)v15, v36, (WebCore::LocalFrame *)&v709, *((unsigned __int8 *)this + 209), *((unsigned __int8 *)this + 208), (unsigned __int16)*(_DWORD *)((char *)this + 322) >> 13);
    WebCore::upgradeInsecureResourceRequestIfNeeded(this, v34, (int)shouldUpgradeInsecureContent);
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v39 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
      *(_DWORD *)v39 += 2;
    v40 = v709;
    v709 = v39;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v38);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = *(_OWORD *)((char *)this + 24);
    v710 = *v17;
    v711 = v41;
    if (*(_DWORD *)(v34 + 24) == 2)
    {
      if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v34);
    }
    else
    {
      *(_DWORD *)(v34 + 24) -= 2;
    }
  }
  else
  {
    shouldUpgradeInsecureContent = 0;
  }
  if (!WebCore::CachedResourceLoader::canRequest(a3, v8, (WTF::URL *)&v709, (_BYTE *)this + 208, a5, shouldUpgradeInsecureContent))
  {
    v515 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::Frame::pageID((WebCore::Frame *)v15);
      if (!v517)
        v516 = 0;
      v518 = *((_QWORD *)v15 + 4);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v516;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v518;
      _os_log_impl(&dword_1940B8000, v515, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResourceLoader::requestResource: Not allowed to request resource", buf, 0x20u);
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v519 = *(WTF::StringImpl **)buf;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v520 = *(WTF::StringImpl **)buf;
    if (v519)
      *(_DWORD *)v519 += 2;
    v521 = v709;
    if (v709)
      *(_DWORD *)v709 += 2;
    *(_OWORD *)&v679[2] = v710;
    *(_OWORD *)&v679[4] = v711;
    if (v520)
      *(_DWORD *)v520 += 2;
    LODWORD(v680[1]) = 0;
    WORD2(v680[1]) = 2;
    LOBYTE(cf[1]) = 1;
    v679[0] = 0;
    v679[1] = 0;
    *(_QWORD *)buf = v519;
    *(_QWORD *)&buf[8] = v521;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
    *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
    LODWORD(v679[2]) &= ~1u;
    v680[0] = 0;
    v715 = v520;
    v716 = 0;
    v717 = 2;
    cf[0] = 0;
    v718 = 0;
    v719 = 1;
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v522);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v523);
    if (v520)
    {
      if (*(_DWORD *)v520 == 2)
        WTF::StringImpl::destroy(v520, v262);
      else
        *(_DWORD *)v520 -= 2;
    }
    if (!v519)
      goto LABEL_1082;
    v524 = *(_DWORD *)v519 - 2;
    if (*(_DWORD *)v519 == 2)
    {
      WTF::StringImpl::destroy(v519, v262);
LABEL_1082:
      v288 = v673;
      goto LABEL_653;
    }
LABEL_1081:
    *(_DWORD *)v519 = v524;
    goto LABEL_1082;
  }
  if ((WTF::portAllowed() & 1) == 0)
  {
    if ((a5 & 1) == 0)
      WebCore::FrameLoader::reportBlockedLoadFailed((WebCore::FrameLoader *)v15, (WebCore::LocalFrame *)&v709, v43);
    v525 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::Frame::pageID((WebCore::Frame *)v15);
      if (!v527)
        v526 = 0;
      v528 = *((_QWORD *)v15 + 4);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v526;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v528;
      _os_log_impl(&dword_1940B8000, v525, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResourceLoader::CachedResourceLoader::requestResource URL has a blocked port", buf, 0x20u);
    }
    v519 = (WTF::StringImpl *)*((_QWORD *)v15 + 35);
    ++*(_DWORD *)v519;
    WebCore::FrameLoader::blockedError((uint64_t)v519, (uint64_t)v679);
    v529 = *(_OWORD *)v679;
    v679[0] = 0;
    v679[1] = 0;
    *(_OWORD *)buf = v529;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
    *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
    LODWORD(v679[2]) &= ~1u;
    v715 = v680[0];
    v716 = (int)v680[1];
    v717 = WORD2(v680[1]);
    v530 = cf[0];
    v680[0] = 0;
    cf[0] = 0;
    v718 = v530;
    v719 = (char)cf[1];
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v531);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v532);
    v533 = *(_DWORD *)v519;
    if (!*(_DWORD *)v519)
    {
      __break(0xC471u);
      JUMPOUT(0x194395F0CLL);
    }
LABEL_1080:
    v524 = v533 - 1;
    goto LABEL_1081;
  }
  if (WebCore::isIPAddressDisallowed((WebCore *)&v709, v42))
  {
    WebCore::FrameLoader::reportBlockedLoadFailed((WebCore::FrameLoader *)v15, (WebCore::LocalFrame *)&v709, v45);
    v534 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      WebCore::Frame::pageID((WebCore::Frame *)v15);
      if (!v536)
        v535 = 0;
      v537 = *((_QWORD *)v15 + 4);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v535;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v537;
      _os_log_impl(&dword_1940B8000, v534, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResourceLoader::CachedResourceLoader::requestResource URL has a disallowd address", buf, 0x20u);
    }
    v519 = (WTF::StringImpl *)*((_QWORD *)v15 + 35);
    ++*(_DWORD *)v519;
    WebCore::FrameLoader::blockedError((uint64_t)v519, (uint64_t)v679);
    v538 = *(_OWORD *)v679;
    v679[0] = 0;
    v679[1] = 0;
    *(_OWORD *)buf = v538;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
    *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
    LODWORD(v679[2]) &= ~1u;
    v715 = v680[0];
    v716 = (int)v680[1];
    v717 = WORD2(v680[1]);
    v539 = cf[0];
    v680[0] = 0;
    cf[0] = 0;
    v718 = v539;
    v719 = (char)cf[1];
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v540);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v541);
    v533 = *(_DWORD *)v519;
    if (!*(_DWORD *)v519)
      goto LABEL_1328;
    goto LABEL_1080;
  }
  v46 = a3[9];
  if (v46 && (v47 = *(_QWORD *)(v46 + 8)) != 0)
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 + 192) + 8))(v47 + 192);
  else
    v48 = 7;
  if (!*((_BYTE *)this + 213))
    *((_BYTE *)this + 213) = v48;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v472 = *((_QWORD *)v15 + 3);
    if (!v472)
      goto LABEL_958;
    v473 = *(_QWORD *)(v472 + 8);
    if (v473)
    {
      v48 = (uint64_t)WebCore::InspectorInstrumentation::willInterceptImpl(*(_QWORD *)(*(_QWORD *)(v473 + 80) + 8), this);
      if ((_DWORD)v48)
        *(_DWORD *)((char *)this + 322) |= 0x400u;
    }
  }
  v50 = *((_QWORD *)v15 + 3);
  if (!v50)
  {
LABEL_958:
    v51 = 0;
    goto LABEL_71;
  }
  v51 = *(WebCore::Page **)(v50 + 8);
LABEL_71:
  ++*(_DWORD *)v51;
  v52 = *(_QWORD *)(v678 + 80);
  v674 = v51;
  if (!v52)
    goto LABEL_119;
  v53 = *(_QWORD *)(v52 + 8);
  if (!v53)
    goto LABEL_119;
  v54 = v53 - 56;
  ++*(_DWORD *)(v53 - 32);
  if ((*((_BYTE *)this + 325) & 8) != 0)
  {
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v713, this);
    v55 = (_DWORD *)*((_QWORD *)v51 + 117);
    ++v55[2];
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    switch((int)v8)
    {
      case 0:
      case 13:
        v56 = 1;
        break;
      case 1:
        v56 = 2;
        break;
      case 2:
      case 12:
        v56 = 4;
        break;
      case 3:
        v56 = 8;
        break;
      case 4:
      case 5:
        v56 = 16;
        break;
      case 6:
      case 14:
        v56 = 64;
        break;
      case 7:
      case 9:
      case 10:
      case 11:
      case 15:
        goto LABEL_666;
      case 8:
        if ((*((_BYTE *)this + 147) & 0xFE) == 2)
          v56 = 512;
        else
LABEL_666:
          v56 = 2048;
        break;
      case 16:
        v56 = 32;
        break;
      default:
        v56 = 0;
        break;
    }
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    WebCore::UserContentProvider::processContentRuleListsForLoad((uint64_t)v55, (uint64_t)v51, (const WTF::StringImpl **)this, v56, v53 - 56, (WTF::URL *)buf, (uint64_t)v708);
    v58 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, v57);
      else
        *(_DWORD *)v58 -= 2;
    }
    if (v55[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
    else
      --v55[2];
    v59 = LOBYTE(v708[0]);
    v60 = BYTE1(v708[0]) != 0;
    WebCore::ContentExtensions::applyResultsToRequest((uint64_t)v708, (uint64_t)v51, this);
    if (v59)
    {
      v542 = qword_1ECE7C608;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      {
        WebCore::Frame::pageID(v675);
        if (!v544)
          v543 = 0;
        v545 = *((_QWORD *)v675 + 4);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v678;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v543;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v545;
        _os_log_impl(&dword_1940B8000, v542, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu] CachedResourceLoader::requestResource: Resource blocked by content blocker", buf, 0x20u);
      }
      if ((_DWORD)v8)
      {
        v546 = *(_QWORD *)(v678 + 72);
        if (v546)
        {
          v547 = *(_QWORD *)(v546 + 8);
          if (v547)
          {
            *(_DWORD *)(v547 + 24) += 2;
            if ((*((_BYTE *)this + 184) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest(this);
              *((_BYTE *)this + 184) |= 1u;
            }
            *(_QWORD *)buf = 0;
            WTF::URL::invalidate((WTF::URL *)buf);
            WebCore::ContentExtensions::customTrackerBlockingMessageForConsole((uint64_t)v708, this, (const WTF::URL *)buf, v679);
            v549 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v549)
            {
              if (*(_DWORD *)v549 == 2)
                WTF::StringImpl::destroy(v549, v548);
              else
                *(_DWORD *)v549 -= 2;
            }
            if (LOBYTE(v679[1]))
              WebCore::Document::addConsoleMessage((_QWORD *)v547, 9, 4, v679, 0);
            std::optional<WTF::String>::~optional((uint64_t)v679, v548);
            if (*(_DWORD *)(v547 + 24) == 2)
            {
              if ((*(_WORD *)(v547 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v547);
            }
            else
            {
              *(_DWORD *)(v547 + 24) -= 2;
            }
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v550 = *(WTF::StringImpl **)buf;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v551 = *(WTF::StringImpl **)buf;
        if (v550)
          *(_DWORD *)v550 += 2;
        v552 = v709;
        if (v709)
          *(_DWORD *)v709 += 2;
        *(_OWORD *)&v679[2] = v710;
        *(_OWORD *)&v679[4] = v711;
        if (v551)
          *(_DWORD *)v551 += 2;
        LODWORD(v680[1]) = 0;
        WORD2(v680[1]) = 2;
        LOBYTE(cf[1]) = 1;
        v679[0] = 0;
        v679[1] = 0;
        *(_QWORD *)buf = v550;
        *(_QWORD *)&buf[8] = v552;
        *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
        *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
        LODWORD(v679[2]) &= ~1u;
        v680[0] = 0;
        v715 = v551;
        v716 = 0;
        v717 = 2;
        cf[0] = 0;
        v718 = 0;
        v719 = 1;
        std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v553);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v554);
        if (v551)
        {
          if (*(_DWORD *)v551 == 2)
            WTF::StringImpl::destroy(v551, v446);
          else
            *(_DWORD *)v551 -= 2;
        }
        if (v550)
        {
          if (*(_DWORD *)v550 == 2)
            WTF::StringImpl::destroy(v550, v446);
          else
            *(_DWORD *)v550 -= 2;
        }
      }
      else
      {
        v614 = *((_QWORD *)v51 + 126);
        v615 = (_DWORD *)*((_QWORD *)v51 + 111);
        ++v615[2];
        v616 = (_DWORD *)*((_QWORD *)v51 + 14);
        ++v616[57];
        WebCore::createResource((uint64_t *)v679, 0, (uint64_t)this, v614, (uint64_t)v615, (uint64_t)v616);
        if (v616[57] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v616 + 24))(v616);
        else
          --v616[57];
        if (v615[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v615 + 120))(v615);
        else
          --v615[2];
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v679[0] + 1) + 72))(*((_QWORD *)v679[0] + 1), 3);
        if (v679[0])
          v617 = (WebCore::CachedResource *)*((_QWORD *)v679[0] + 1);
        else
          v617 = 0;
        WTF::String::String(&v697, (uint64_t)WebCore::ContentExtensions::WebKitContentBlockerDomain, unk_1EE2E19F8);
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        WebCore::localizedString(CFSTR("The URL was blocked by a content blocker"), (uint64_t)&v707);
        v618 = v697;
        if (v697)
          *(_DWORD *)v697 += 2;
        *(_QWORD *)buf = v618;
        v619 = *(_DWORD **)this;
        if (*(_QWORD *)this)
          *v619 += 2;
        *(_QWORD *)&buf[8] = v619;
        v620 = *(_OWORD *)((char *)this + 24);
        *(_OWORD *)&buf[16] = *v17;
        *(_OWORD *)&buf[32] = v620;
        v621 = v707;
        if (v707)
          *(_DWORD *)v707 += 2;
        v715 = v621;
        v716 = 0;
        v717 = 1;
        v718 = 0;
        v719 = 1;
        v622 = WebCore::CachedResource::mutableResponseData(v617);
        WebCore::ResourceError::operator=((uint64_t)v622 + 320, (uint64_t)buf);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v623);
        v625 = v707;
        v707 = 0;
        if (v625)
        {
          if (*(_DWORD *)v625 == 2)
            WTF::StringImpl::destroy(v625, v624);
          else
            *(_DWORD *)v625 -= 2;
        }
        v626 = v697;
        v697 = 0;
        if (v626)
        {
          if (*(_DWORD *)v626 == 2)
            WTF::StringImpl::destroy(v626, v624);
          else
            *(_DWORD *)v626 -= 2;
        }
        std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedImage>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t)v679[0]);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v679, v627);
      }
      v288 = v673;
      v51 = v674;
      goto LABEL_840;
    }
    if (!(_DWORD)v8)
    {
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, this);
      v436 = WTF::equal(*(WTF **)buf, v713, v435);
      v437 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v437)
      {
        if (*(_DWORD *)v437 == 2)
          WTF::StringImpl::destroy(v437, v61);
        else
          *(_DWORD *)v437 -= 2;
      }
      if ((v436 & 1) == 0)
      {
        v438 = *((_QWORD *)v675 + 35);
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v697, (uint64_t)this, 0);
        v706 = 0;
        v696 = 0;
        v694 = 0u;
        v695 = 0u;
        v692 = 0u;
        v693 = 0u;
        v690 = 0u;
        v691 = 0u;
        v688 = 0u;
        v689 = 0u;
        v686 = 0u;
        v687 = 0u;
        v684 = 0u;
        v685 = 0u;
        v682 = 0u;
        v683 = 0u;
        *(_OWORD *)v680 = 0u;
        *(_OWORD *)cf = 0u;
        memset(v679, 0, sizeof(v679));
        WebCore::SubstituteData::SubstituteData((WebCore::SubstituteData *)v679);
        WebCore::FrameLoadRequest::FrameLoadRequest((WebCore::FrameLoadRequest *)buf, v675, (const WebCore::ResourceRequest *)&v697, (const WebCore::SubstituteData *)v679);
        WebCore::FrameLoader::load(v438, (uint64_t)buf);
        WebCore::FrameLoadRequest::~FrameLoadRequest((WebCore::FrameLoadRequest *)buf);
        WebCore::SubstituteData::~SubstituteData((WebCore::SubstituteData *)v679, v439);
        WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v697, v440);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v441 = *(WTF::StringImpl **)buf;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v442 = *(WTF::StringImpl **)buf;
        if (v441)
          *(_DWORD *)v441 += 2;
        v443 = v709;
        v288 = v673;
        if (v709)
          *(_DWORD *)v709 += 2;
        *(_OWORD *)&v679[2] = v710;
        *(_OWORD *)&v679[4] = v711;
        if (v442)
          *(_DWORD *)v442 += 2;
        LODWORD(v680[1]) = 0;
        WORD2(v680[1]) = 3;
        LOBYTE(cf[1]) = 1;
        v679[0] = 0;
        v679[1] = 0;
        *(_QWORD *)buf = v441;
        *(_QWORD *)&buf[8] = v443;
        *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
        *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
        LODWORD(v679[2]) &= ~1u;
        v680[0] = 0;
        v715 = v442;
        v716 = 0;
        v717 = 3;
        cf[0] = 0;
        v718 = 0;
        v719 = 1;
        std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v444);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v445);
        if (v442)
        {
          if (*(_DWORD *)v442 == 2)
            WTF::StringImpl::destroy(v442, v446);
          else
            *(_DWORD *)v442 -= 2;
        }
        v51 = v674;
        if (v441)
        {
          if (*(_DWORD *)v441 == 2)
            WTF::StringImpl::destroy(v441, v446);
          else
            *(_DWORD *)v441 -= 2;
        }
LABEL_840:
        WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v708, v446);
        v447 = v713;
        v713 = 0;
        if (v447)
        {
          if (*(_DWORD *)v447 == 2)
            WTF::StringImpl::destroy(v447, v262);
          else
            *(_DWORD *)v447 -= 2;
        }
        goto LABEL_860;
      }
    }
    WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)v708, v61);
    v62 = v713;
    v713 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
        WTF::StringImpl::destroy(v62, v44);
      else
        *(_DWORD *)v62 -= 2;
    }
  }
  else
  {
    v60 = 0;
  }
  if (!(_DWORD)v8 && !v60)
  {
    v448 = (WebCore::FrameLoader *)*((_QWORD *)v675 + 35);
    ++*(_DWORD *)v448;
    v449 = *((_QWORD *)v675 + 37);
    if (v449)
    {
      v555 = *(_DWORD **)(v449 + 736);
      if (v555)
        *v555 += 2;
      *(_QWORD *)buf = v555;
      v556 = v449 + 736;
      v557 = *(_OWORD *)(v556 + 24);
      *(_OWORD *)&buf[8] = *(_OWORD *)(v556 + 8);
      *(_OWORD *)&buf[24] = v557;
    }
    else
    {
      *(_QWORD *)buf = 0;
      WTF::URL::invalidate((WTF::URL *)buf);
    }
    if (WebCore::FrameLoader::shouldUpgradeRequestforHTTPSOnly(v448, (const WTF::URL *)buf, this))
    {
      v558 = *(_QWORD *)(v678 + 80);
      if (v558)
      {
        v559 = *(_QWORD *)(v558 + 8);
        if (v559)
          v560 = (WebCore::DocumentLoader *)(v559 - 56);
        else
          v560 = 0;
      }
      else
      {
        v560 = 0;
      }
      v450 = WebCore::DocumentLoader::frameLoader(v560) != 0;
    }
    else
    {
      v450 = 0;
    }
    v451 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v451)
    {
      if (*(_DWORD *)v451 == 2)
        WTF::StringImpl::destroy(v451, v44);
      else
        *(_DWORD *)v451 -= 2;
    }
    if (!*(_DWORD *)v448)
    {
      __break(0xC471u);
      JUMPOUT(0x194396C90);
    }
    --*(_DWORD *)v448;
    if (v450)
    {
      v452 = *(_QWORD *)(*(_QWORD *)(v678 + 80) + 8);
      ++*(_DWORD *)(v452 - 32);
      v453 = *(_QWORD *)(v452 - 40);
      if (v453 && (v454 = *(_QWORD *)(v453 + 8)) != 0)
      {
        v455 = *(_QWORD *)(v454 + 280);
        if (v455)
          ++*(_DWORD *)v455;
      }
      else
      {
        v455 = 0;
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD, WebCore::ResourceRequest *))(**(_QWORD **)(v455 + 16) + 640))(buf, *(_QWORD *)(v455 + 16), this);
      v456 = v715;
      *((_DWORD *)v670 + 14) = v716;
      *((_WORD *)v670 + 30) = v717;
      v457 = (uint64_t)v718;
      v458 = v719;
      v459 = *(_OWORD *)&buf[16];
      *(_OWORD *)v670 = *(_OWORD *)buf;
      *((_OWORD *)v670 + 1) = v459;
      *(_DWORD *)&buf[16] = v459 & 0xFFFFFFFE;
      *((_OWORD *)v670 + 2) = *(_OWORD *)&buf[32];
      v670[6] = (uint64_t)v456;
      v670[8] = v457;
      *((_BYTE *)v670 + 72) = v458;
      *((_DWORD *)v670 + 20) = 1;
      v718 = 0;
      v715 = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      if (!*(_DWORD *)v455)
      {
        __break(0xC471u);
        JUMPOUT(0x194396E18);
      }
      --*(_DWORD *)v455;
      v288 = v673;
      if (*(_DWORD *)(v452 - 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v452 - 56) + 24))(v452 - 56);
      else
        --*(_DWORD *)(v452 - 32);
      v51 = v674;
LABEL_860:
      if (*(_DWORD *)(v53 - 32) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v53 - 56);
      else
        --*(_DWORD *)(v53 - 32);
      goto LABEL_651;
    }
  }
  if (!(_DWORD)v8 && v60)
  {
    v607 = *(_QWORD *)(v678 + 80);
    if (v607)
    {
      v608 = *(_QWORD *)(v607 + 8);
      v609 = v608 ? v608 - 56 : 0;
      if (*(_BYTE *)(v609 + 3548))
      {
        ++*(_DWORD *)(v608 - 32);
        v610 = *(_QWORD *)(v608 - 40);
        if (v610 && (v611 = *(_QWORD *)(v610 + 8)) != 0)
        {
          v612 = *(_QWORD *)(v611 + 280);
          if (v612)
            ++*(_DWORD *)v612;
        }
        else
        {
          v612 = 0;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v612 + 16) + 192))(*(_QWORD *)(v612 + 16));
        if (!*(_DWORD *)v612)
        {
          __break(0xC471u);
          JUMPOUT(0x194397374);
        }
        --*(_DWORD *)v612;
        if (*(_DWORD *)(v608 - 32) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)(v608 - 56) + 24))(v608 - 56);
        else
          --*(_DWORD *)(v608 - 32);
      }
    }
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  v63 = *(WTF::StringImpl **)this;
  v15 = (unsigned int *)v675;
  if (*(_QWORD *)this)
    *(_DWORD *)v63 += 2;
  v64 = v709;
  v709 = v63;
  v51 = v674;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v44);
    else
      *(_DWORD *)v64 -= 2;
    v63 = v709;
  }
  v65 = *(_OWORD *)((char *)this + 24);
  v710 = *v17;
  v711 = v65;
  if ((v710 & 1) == 0)
  {
    if (!v63)
      goto LABEL_106;
    goto LABEL_105;
  }
  if (v63)
  {
    if (*((_DWORD *)v63 + 1) > HIDWORD(v711) && (v710 & 2) != 0)
    {
      *(_DWORD *)v63 += 2;
      *(_QWORD *)buf = v63;
      *(_OWORD *)&buf[8] = v710;
      *(_OWORD *)&buf[24] = v711;
      WTF::URL::removeFragmentIdentifier((WTF::URL *)buf);
      v63 = *(WTF::StringImpl **)buf;
      goto LABEL_107;
    }
LABEL_105:
    *(_DWORD *)v63 += 2;
  }
LABEL_106:
  *(_OWORD *)&buf[8] = v710;
  *(_OWORD *)&buf[24] = v711;
LABEL_107:
  *(_QWORD *)buf = 0;
  v66 = v709;
  v709 = v63;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::destroy(v66, v44);
      v48 = *(_QWORD *)buf;
    }
    else
    {
      v48 = 0;
      *(_DWORD *)v66 -= 2;
    }
  }
  else
  {
    v48 = 0;
  }
  v710 = *(_OWORD *)&buf[8];
  *(_DWORD *)&buf[8] &= ~1u;
  v711 = *(_OWORD *)&buf[24];
  *(_QWORD *)buf = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      v48 = WTF::StringImpl::destroy((WTF::StringImpl *)v48, v44);
    else
      *(_DWORD *)v48 -= 2;
  }
  v67 = *(_QWORD *)(*(_QWORD *)(v678 + 80) + 8);
  if (v67)
    v68 = v67 - 56;
  else
    v68 = 0;
  if (*(_DWORD *)(v68 + 2868))
  {
    WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)&v709, (uint64_t *)buf);
    v668 = v8;
    if ((_DWORD)v8)
    {
      v562 = *(_QWORD *)(v678 + 72);
      if (v562 && (v563 = *(_QWORD *)(v562 + 8)) != 0)
      {
        *(_DWORD *)(v563 + 24) += 2;
        WebCore::Document::protectedTopOrigin((WebCore::Document *)v563, v561, (unsigned int **)v679);
        if (WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v679[0], *(uint64_t *)buf))
        {
          WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v563 + 192), v564);
          if (v565)
          {
            do
              v566 = __ldaxr(v565);
            while (__stlxr(v566 + 1, v565));
          }
          v697 = (WTF::StringImpl *)v565;
          isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v565, *(uint64_t *)buf);
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v697, v568);
        }
        else
        {
          isSameSchemeHostPort = 0;
        }
        WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v679, v564);
        if (*(_DWORD *)(v563 + 24) == 2)
        {
          if ((*(_WORD *)(v563 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v563);
        }
        else
        {
          *(_DWORD *)(v563 + 24) -= 2;
        }
      }
      else
      {
        isSameSchemeHostPort = 0;
      }
    }
    else
    {
      v628 = *(WebCore::Frame **)(*((_QWORD *)v675 + 16) + 8);
      if (!v628 || *((_BYTE *)v628 + 144))
      {
        isSameSchemeHostPort = v628 == v675;
      }
      else
      {
        v629 = (unsigned int *)((char *)v628 + 8);
        do
          v630 = __ldaxr(v629);
        while (__stlxr(v630 + 1, v629));
        if (*(WebCore::Frame **)(*((_QWORD *)v675 + 16) + 8) == v675)
        {
          isSameSchemeHostPort = 1;
        }
        else
        {
          v631 = *((_QWORD *)v628 + 37);
          if (v631)
          {
            *(_DWORD *)(v631 + 24) += 2;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v631 + 192), v561);
            if (v632)
            {
              do
                v633 = __ldaxr(v632);
              while (__stlxr(v633 + 1, v632));
            }
            v679[0] = (WTF::StringImpl *)v632;
            isSameSchemeHostPort = WebCore::SecurityOrigin::isSameSchemeHostPort((uint64_t)v632, *(uint64_t *)buf);
            WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v679, v634);
            if (*(_DWORD *)(v631 + 24) == 2)
            {
              if ((*(_WORD *)(v631 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v631);
            }
            else
            {
              *(_DWORD *)(v631 + 24) -= 2;
            }
          }
          else
          {
            isSameSchemeHostPort = 0;
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v629);
      }
    }
    v635 = *(_QWORD *)(*(_QWORD *)(v678 + 80) + 8);
    v636 = v635 - 56;
    if (!v635)
      v636 = 0;
    v637 = *(unsigned int *)(v636 + 2868);
    if ((_DWORD)v637)
    {
      v638 = *(unsigned int **)(v636 + 2856);
      v639 = &v638[8 * v637];
      if (isSameSchemeHostPort)
      {
        do
        {
          v640 = v638[3];
          if ((_DWORD)v640)
          {
            v641 = *(const WTF::StringImpl ***)v638;
            v642 = *(_QWORD *)v638 + 16 * v640;
            do
            {
              WebCore::ResourceRequestBase::setHTTPHeaderField(this, v641, v641 + 1);
              v641 += 2;
            }
            while (v641 != (const WTF::StringImpl **)v642);
          }
          v638 += 8;
        }
        while (v638 != v639);
      }
      else
      {
        do
        {
          if (WebCore::CustomHeaderFields::thirdPartyDomainsMatch((WebCore::CustomHeaderFields *)v638, (const WTF::URL *)&v709))
          {
            v643 = v638[3];
            if ((_DWORD)v643)
            {
              v644 = *(const WTF::StringImpl ***)v638;
              v645 = *(_QWORD *)v638 + 16 * v643;
              do
              {
                WebCore::ResourceRequestBase::setHTTPHeaderField(this, v644, v644 + 1);
                v644 += 2;
              }
              while (v644 != (const WTF::StringImpl **)v645);
            }
          }
          v638 += 8;
        }
        while (v638 != v639);
      }
    }
    v48 = (uint64_t)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)buf, v561);
    v51 = v674;
    v15 = (unsigned int *)v675;
    v8 = (WTF::StringImpl *)v668;
  }
  if (*(_DWORD *)(v53 - 32) == 1)
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v53 - 56);
  else
    --*(_DWORD *)(v53 - 32);
LABEL_119:
  *((_QWORD *)&v708[0] + 1) = 0;
  updated = (WTF::StringImpl *)WTF::MonotonicTime::now((WTF::MonotonicTime *)v48);
  *(_QWORD *)&v708[0] = v70;
  v677 = (_DWORD *)((char *)this + 322);
  v669 = *(_DWORD *)((char *)this + 322);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    updated = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  if ((*(_BYTE *)v17 & 2) != 0)
  {
    v71 = (WebCore::FrameLoader *)*((_QWORD *)v15 + 35);
    ++*(_DWORD *)v71;
    if (!(_DWORD)v8)
      goto LABEL_161;
    *(_QWORD *)buf = 0;
    WTF::URL::invalidate((WTF::URL *)buf);
    v72 = *((unsigned int *)this + 27);
    if (!(_DWORD)v72)
    {
LABEL_127:
      WebCore::FrameLoader::outgoingReferrerURL(v71, (uint64_t)v679);
      v76 = v679[0];
      v679[0] = 0;
      v77 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = v76;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
        {
          WTF::StringImpl::destroy(v77, v75);
          v78 = v679[0];
        }
        else
        {
          v78 = 0;
          *(_DWORD *)v77 -= 2;
        }
      }
      else
      {
        v78 = 0;
      }
      v79 = *(_OWORD *)&v679[1];
      LODWORD(v679[1]) &= ~1u;
      *(_OWORD *)&buf[8] = v79;
      *(_OWORD *)&buf[24] = *(_OWORD *)&v679[3];
      v679[0] = 0;
      if (!v78)
        goto LABEL_133;
      goto LABEL_131;
    }
    v73 = 0;
    v74 = *((_QWORD *)this + 12);
    while (*(_WORD *)(v74 + v73) != 60)
    {
      v73 += 16;
      if (16 * v72 == v73)
        goto LABEL_127;
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
      v72 = *((unsigned int *)this + 27);
      if (!(_DWORD)v72)
      {
        v280 = 0;
        v51 = v674;
        v15 = (unsigned int *)v675;
        goto LABEL_580;
      }
      v74 = *((_QWORD *)this + 12);
      v51 = v674;
      v15 = (unsigned int *)v675;
    }
    v278 = 0;
    v279 = (WTF::StringImpl **)(v74 + 8);
    while (*((_WORD *)v279 - 4) != 60)
    {
      ++v278;
      v279 += 2;
      if (v72 == v278)
      {
        v280 = 0;
        goto LABEL_580;
      }
    }
    if (v278 >= v72)
    {
      __break(0xC471u);
      JUMPOUT(0x194397474);
    }
    v280 = *v279;
    if (*v279)
      *(_DWORD *)v280 += 2;
LABEL_580:
    v697 = v280;
    MEMORY[0x19AEA52D4](v679, &v697, 0);
    v331 = v679[0];
    v679[0] = 0;
    v332 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = v331;
    if (v332)
    {
      if (*(_DWORD *)v332 == 2)
      {
        WTF::StringImpl::destroy(v332, v75);
        v333 = v679[0];
      }
      else
      {
        v333 = 0;
        *(_DWORD *)v332 -= 2;
      }
    }
    else
    {
      v333 = 0;
    }
    v334 = *(_OWORD *)&v679[1];
    LODWORD(v679[1]) &= ~1u;
    *(_OWORD *)&buf[8] = v334;
    *(_OWORD *)&buf[24] = *(_OWORD *)&v679[3];
    v679[0] = 0;
    if (v333)
    {
      if (*(_DWORD *)v333 == 2)
        WTF::StringImpl::destroy(v333, v75);
      else
        *(_DWORD *)v333 -= 2;
    }
    v78 = v697;
    v697 = 0;
    if (!v78)
    {
LABEL_133:
      v80 = *((unsigned __int8 *)this + 213);
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      v81 = WebCore::updateRequestReferrer(this, v80, (WTF::StringImpl ***)buf, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance);
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        v81 = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      v83 = *((unsigned int *)this + 27);
      if ((_DWORD)v83)
      {
        v84 = 0;
        v85 = (_DWORD **)(*((_QWORD *)this + 12) + 8);
        while (*((_WORD *)v85 - 4) != 53)
        {
          ++v84;
          v85 += 2;
          if (v83 == v84)
            goto LABEL_141;
        }
        if (v84 >= v83)
        {
          __break(0xC471u);
          JUMPOUT(0x194397464);
        }
        v81 = (WTF::StringImpl *)*v85;
        if (*v85)
        {
          v276 = *(_DWORD *)v81;
          v277 = *((_DWORD *)v81 + 1);
          *(_DWORD *)v81 += 2;
          if (v276)
          {
            *(_DWORD *)v81 = v276;
            if (v277)
              goto LABEL_158;
          }
          else
          {
            v81 = (WTF::StringImpl *)WTF::StringImpl::destroy(v81, v82);
            if (v277)
            {
LABEL_158:
              v94 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v94)
              {
                if (*(_DWORD *)v94 == 2)
                  WTF::StringImpl::destroy(v94, v82);
                else
                  *(_DWORD *)v94 -= 2;
              }
LABEL_161:
              v95 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v71 + 1) + 8) + 296);
              if (v95)
              {
                *(_DWORD *)(v95 + 24) += 2;
                v96 = *(WebCore::Quirks **)(v95 + 688);
                if (!v96)
                  v96 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v95);
                Metadata = WebCore::Quirks::shouldDisableFetchMetadata(v96);
                if (*(_DWORD *)(v95 + 24) == 2)
                {
                  if ((*(_WORD *)(v95 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v95);
                }
                else
                {
                  *(_DWORD *)(v95 + 24) -= 2;
                }
                if ((Metadata & 1) == 0)
                {
                  v98 = *(_QWORD *)(*((_QWORD *)v71 + 1) + 8);
                  v99 = *(_QWORD *)(*(_QWORD *)(v98 + 128) + 8) == v98
                     && (v460 = *(_QWORD *)(v678 + 80)) != 0
                     && (v461 = *(_QWORD *)(v460 + 8)) != 0
                     && *(_BYTE *)(v461 + 3476) != 0;
                  MetadataSiteInternal = WebCore::computeFetchMetadataSiteInternal(this, v8, *((unsigned __int8 *)this + 209), 0, v98, 1u, v99);
                  WebCore::updateRequestFetchMetadataHeaders(this, (unsigned __int8 *)this + 208, MetadataSiteInternal);
                }
              }
              updated = WebCore::FrameLoader::applyUserAgentIfNeeded(v71, this);
              v101 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v71 + 1) + 8) + 280);
              v102 = (*(_DWORD *)v101)++;
              if (v102 == -1)
              {
                __break(0xC471u);
                JUMPOUT(0x194395118);
              }
              v103 = *(unsigned __int8 *)(v101 + 81);
              *(_DWORD *)v101 = v102;
              if (v103 == 8)
              {
                if ((*((_BYTE *)this + 184) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(this);
                  *((_BYTE *)this + 184) |= 1u;
                }
                updated = (WTF::StringImpl *)WebCore::CachedResourceLoader::cachePolicy(*(_QWORD *)(v678 + 80), (int)v8, this);
                v51 = v674;
                v15 = (unsigned int *)v675;
                if ((_DWORD)updated == 2 && !*((_BYTE *)this + 211) && (*((_BYTE *)this + 323) & 4) == 0)
                  *((_BYTE *)this + 211) = 2;
              }
              if (*((_BYTE *)this + 211))
              {
                switch(*((_BYTE *)this + 211))
                {
                  case 1:
                    goto LABEL_913;
                  case 2:
                    WebCore::ResourceRequestBase::setCachePolicy(this, 1);
                    {
                      WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
                      WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
                    }
                    WebCore::ResourceRequestBase::addHTTPHeaderFieldIfNotPresent(this, 56, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value);
                    {
                      WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
                      WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
                    }
                    updated = (WTF::StringImpl *)WebCore::ResourceRequestBase::addHTTPHeaderFieldIfNotPresent(this, 15, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value);
                    v51 = v674;
                    v15 = (unsigned int *)v675;
                    break;
                  case 3:
                    v649 = (WebCore::HTTPHeaderValues *)WebCore::ResourceRequestBase::setCachePolicy(this, 5);
                    v650 = WebCore::HTTPHeaderValues::maxAge0(v649);
                    updated = (WTF::StringImpl *)WebCore::ResourceRequestBase::addHTTPHeaderFieldIfNotPresent(this, 15, (WTF::StringImpl **)v650);
                    break;
                  case 4:
                    v647 = this;
                    v648 = 2;
                    goto LABEL_1301;
                  case 5:
                    v647 = this;
                    v648 = 3;
LABEL_1301:
                    updated = (WTF::StringImpl *)WebCore::ResourceRequestBase::setCachePolicy(v647, v648);
                    break;
                  default:
                    break;
                }
              }
              else
              {
                v104 = *((unsigned int *)this + 27);
                if (!(_DWORD)v104)
                {
LABEL_192:
                  if (!*(_DWORD *)v71)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194395138);
                  }
                  --*(_DWORD *)v71;
                  goto LABEL_194;
                }
                v105 = (unsigned __int16 *)*((_QWORD *)this + 12);
                v106 = v105;
                v107 = *((unsigned int *)this + 27);
                while (1)
                {
                  v108 = *v106;
                  v106 += 8;
                  if (v108 == 44)
                    break;
                  if (!--v107)
                  {
                    v109 = (unsigned __int16 *)*((_QWORD *)this + 12);
                    v110 = *((unsigned int *)this + 27);
                    while (1)
                    {
                      v111 = *v109;
                      v109 += 8;
                      if (v111 == 45)
                        goto LABEL_912;
                      if (!--v110)
                      {
                        v112 = (unsigned __int16 *)*((_QWORD *)this + 12);
                        v113 = *((unsigned int *)this + 27);
                        while (1)
                        {
                          v114 = *v112;
                          v112 += 8;
                          if (v114 == 47)
                            goto LABEL_912;
                          if (!--v113)
                          {
                            v115 = (unsigned __int16 *)*((_QWORD *)this + 12);
                            v116 = *((unsigned int *)this + 27);
                            while (1)
                            {
                              v117 = *v115;
                              v115 += 8;
                              if (v117 == 43)
                                goto LABEL_912;
                              if (!--v116)
                              {
                                while (1)
                                {
                                  v118 = *v105;
                                  v105 += 8;
                                  if (v118 == 46)
                                    goto LABEL_912;
                                  if (!--v104)
                                    goto LABEL_188;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_912:
                *((_BYTE *)this + 211) = 1;
LABEL_913:
                v467 = *((_BYTE *)this + 184);
                if ((v467 & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(this);
                  v467 = *((_BYTE *)this + 184) | 1;
                  *((_BYTE *)this + 184) = v467;
                }
                if (*((_BYTE *)this + 144) != 4)
                {
                  *((_BYTE *)this + 144) = 4;
                  v467 &= ~2u;
                  *((_BYTE *)this + 184) = v467;
                }
                {
                  WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
                  WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
                }
                if ((v467 & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(this);
                  *((_BYTE *)this + 184) |= 1u;
                }
                if (WebCore::HTTPHeaderMap::addIfNotPresent((unsigned int *)this + 24, 56, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value))*((_BYTE *)this + 184) &= ~2u;
                {
                  WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl += 2;
                  WebCore::HTTPHeaderValues::noCache(void)::value = (uint64_t)&WebCore::HTTPHeaderValues::noCache(void)::$_0::operator() const(void)::impl;
                }
                if ((*((_BYTE *)this + 184) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(this);
                  *((_BYTE *)this + 184) |= 1u;
                }
                updated = (WTF::StringImpl *)WebCore::HTTPHeaderMap::addIfNotPresent((unsigned int *)this + 24, 15, (WTF::StringImpl **)&WebCore::HTTPHeaderValues::noCache(void)::value);
                if ((_DWORD)updated)
                  *((_BYTE *)this + 184) &= ~2u;
              }
LABEL_188:
              v119 = *((unsigned int *)this + 27);
              if ((_DWORD)v119)
              {
                v120 = (unsigned __int16 *)*((_QWORD *)this + 12);
                while (1)
                {
                  v121 = *v120;
                  v120 += 8;
                  if (v121 == 59)
                    break;
                  if (!--v119)
                    goto LABEL_192;
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                WebCore::ResourceRequestBase::addHTTPHeaderFieldIfNotPresent(this, 2, (WTF::StringImpl **)buf);
                updated = *(WTF::StringImpl **)buf;
                *(_QWORD *)buf = 0;
                if (updated)
                {
                  if (*(_DWORD *)updated == 2)
                    updated = (WTF::StringImpl *)WTF::StringImpl::destroy(updated, v474);
                  else
                    *(_DWORD *)updated -= 2;
                }
              }
              goto LABEL_192;
            }
          }
        }
      }
LABEL_141:
      v86 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v71 + 1) + 8) + 296);
      if (v86)
        v87 = *v21 == 0;
      else
        v87 = 0;
      if (!v87)
        goto LABEL_145;
      v428 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v428 || (v429 = *(_QWORD *)(v428 + 96)) == 0)
        v429 = WebCore::threadGlobalDataSlow(v81);
      v430 = *(_QWORD *)(v429 + 32);
      if (!v430)
      {
        WebCore::ThreadGlobalData::initializeCachedResourceRequestInitiatorTypes((WebCore::CachedResourceRequestInitiatorTypes **)v429);
        v430 = *(_QWORD *)(v429 + 32);
      }
      if (*((_QWORD *)this + 46) == *(_QWORD *)(v430 + 16))
      {
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v86 + 192), v82);
        do
          v432 = __ldaxr(v431);
        while (__stlxr(v432 + 1, v431));
        v697 = (WTF::StringImpl *)v431;
        v51 = v674;
        v15 = (unsigned int *)v675;
      }
      else
      {
LABEL_145:
        WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)buf, (uint64_t *)&v697);
      }
      if (*((_BYTE *)this + 209) != 3)
      {
        v88 = *((unsigned __int8 *)this + 213);
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        v89 = v697;
        {
          WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
        }
        WebCore::SecurityPolicy::generateOriginHeader(v88, this, (uint64_t)v697, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, v679);
        v15 = (unsigned int *)v675;
        goto LABEL_152;
      }
      v89 = v697;
      v426 = *((unsigned int *)v697 + 8);
      if ((_DWORD)v426 == 1)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_796:
        v679[0] = v713;
LABEL_152:
        WebCore::FrameLoader::addHTTPOriginIfNeeded((uint64_t)this, (WebCore::ResourceRequest *)v679, v90);
        v91 = v679[0];
        v679[0] = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2)
            WTF::StringImpl::destroy(v91, v82);
          else
            *(_DWORD *)v91 -= 2;
        }
        v697 = 0;
        if (v89)
        {
          do
          {
            v92 = __ldaxr((unsigned int *)v89);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, (unsigned int *)v89));
          if (!v93)
          {
            atomic_store(1u, (unsigned int *)v89);
            v477 = (WTF::StringImpl *)*((_QWORD *)v89 + 6);
            *((_QWORD *)v89 + 6) = 0;
            if (v477)
            {
              if (*(_DWORD *)v477 == 2)
                WTF::StringImpl::destroy(v477, v82);
              else
                *(_DWORD *)v477 -= 2;
            }
            v478 = (WTF::StringImpl *)*((_QWORD *)v89 + 5);
            *((_QWORD *)v89 + 5) = 0;
            if (v478)
            {
              if (*(_DWORD *)v478 == 2)
                WTF::StringImpl::destroy(v478, v82);
              else
                *(_DWORD *)v478 -= 2;
            }
            v479 = *((unsigned int *)v89 + 8);
            if ((_DWORD)v479 != -1)
              ((void (*)(WTF::StringImpl **, char *))off_1E33F88A0[v479])(v679, (char *)v89 + 8);
            *((_DWORD *)v89 + 8) = -1;
            WTF::fastFree(v89, v82);
          }
        }
        goto LABEL_158;
      }
      if ((_DWORD)v426 != -1)
      {
        v679[0] = (WTF::StringImpl *)&v713;
        v427 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v426])(v679, (char *)v697 + 8);
        if (MEMORY[0x19AEA53F4](*v427, "file", 4) && *((_BYTE *)v89 + 59))
          WTF::StringImpl::createWithoutCopyingNonEmpty();
        else
          WebCore::SecurityOriginData::toString((WTF::StringImpl *)((char *)v89 + 8), &v713);
        v15 = (unsigned int *)v675;
        goto LABEL_796;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_1328:
      __break(0xC471u);
      JUMPOUT(0x19439726CLL);
    }
LABEL_131:
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, v75);
    else
      *(_DWORD *)v78 -= 2;
    goto LABEL_133;
  }
LABEL_194:
  if (*((_BYTE *)this + 211) == 1)
    *v677 |= 0x400u;
  Ref = (WTF *)WebCore::MemoryCache::singleton(updated);
  v125 = Ref;
  if ((*((_BYTE *)this + 323) & 4) == 0 && *(_BYTE *)Ref)
    WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::remove((uint64_t *)(v678 + 64), &v709, v123);
  v713 = 0;
  v126 = *(_QWORD *)(v678 + 72);
  if (v126)
  {
    v127 = *(_QWORD *)(v126 + 8);
    if (v127)
    {
      *(_DWORD *)(v127 + 24) += 2;
      Ref = WebCore::CachedResourceRequest::setDomainForCachePartition(this, (WebCore::Document *)v127);
      if (*(_DWORD *)(v127 + 24) == 2)
      {
        if ((*(_WORD *)(v127 + 30) & 0x400) == 0)
          Ref = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)v127);
      }
      else
      {
        *(_DWORD *)(v127 + 24) -= 2;
      }
    }
  }
  if ((*((_BYTE *)this + 323) & 4) == 0)
  {
    v128 = *((_QWORD *)v51 + 126);
    if ((WTF::isMainThread(Ref) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1943950E0);
    }
    v129 = (uint64_t *)WebCore::MemoryCache::sessionResourceMap(v125, v128);
    if (v129)
      v130 = (WebCore::CachedResource *)WebCore::MemoryCache::resourceForRequestImpl((int)v129, this, v129);
    else
      v130 = 0;
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v713, v130);
  }
  if (v713)
  {
    v131 = *((_QWORD *)v713 + 1);
    if (v131)
    {
      if (*((_BYTE *)this + 392))
      {
        v462 = (_WORD *)(v131 + 557);
        if ((*v462 & 0x800) == 0)
          *v462 |= 0x800u;
      }
    }
  }
  v671 = *((_QWORD *)v51 + 111);
  ++*(_DWORD *)(v671 + 8);
  v132 = *(_QWORD *)(v678 + 72);
  if (v132)
    v133 = *(WebCore::ResourceRequest **)(v132 + 8);
  else
    v133 = 0;
  v134 = *((_QWORD *)v15 + 3);
  if (v134)
    v135 = *(const WebCore::Document **)(v134 + 8);
  else
    v135 = 0;
  WebCore::FrameLoader::addSameSiteInfoToRequestIfNeeded((uint64_t)this, v133, v135, v124);
  if (!v713)
    goto LABEL_486;
  v138 = *((_QWORD *)v713 + 1);
  if (!v138)
    goto LABEL_479;
  v139 = 1;
  if (*(_DWORD *)(v138 + 552) && (*v677 & 0x30000) == 0x10000)
    v139 = (*(_DWORD *)(v138 + 130) & 0x30000) == 0x10000;
  v140 = *((_BYTE *)this + 184);
  if ((v140 & 1) == 0)
  {
    v480 = v139;
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v139 = v480;
    v140 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v140;
  }
  v141 = *((unsigned __int8 *)this + 144);
  if (v141 == 4)
    goto LABEL_480;
  if ((v140 & 1) == 0)
  {
    v481 = v139;
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    v139 = v481;
    v140 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v140;
    v141 = *((unsigned __int8 *)this + 144);
  }
  if (v141 == 1)
    goto LABEL_480;
  if ((v140 & 1) == 0)
  {
    v482 = v139;
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    LOBYTE(v139) = v482;
    *((_BYTE *)this + 184) |= 1u;
    v141 = *((unsigned __int8 *)this + 144);
  }
  if (v141 == 5)
    goto LABEL_1146;
  v142 = *((_QWORD *)this + 32);
  v143 = *(_QWORD *)(v138 + 64);
  if (v142 && v143)
  {
    if (v143 == v142)
      goto LABEL_232;
LABEL_1146:
    if (!v139)
    {
      v139 = 0;
LABEL_480:
      if (!v713)
        goto LABEL_487;
      v281 = (WebCore::CachedResource *)*((_QWORD *)v713 + 1);
      if (!v281 || !v139)
        goto LABEL_487;
      WebCore::MemoryCache::remove(v125, v281);
LABEL_486:
      v139 = 1;
LABEL_487:
      v283 = *((_QWORD *)v51 + 126);
      v284 = (_DWORD *)*((_QWORD *)v51 + 14);
      ++v284[57];
      v285 = (uint64_t *)v678;
      v286 = (int)v8;
      v186 = (_DWORD *)v671;
      WebCore::CachedResourceLoader::loadResource((WTF *)buf, v678, v286, v283, (uint64_t)this, v671, (uint64_t)v284, v139);
      if (*(_QWORD *)buf)
        v287 = *(WebCore::CachedResource **)(*(_QWORD *)buf + 8);
      else
        v287 = 0;
      v288 = v673;
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v713, v287);
      WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)buf, v289);
      if (v284[57] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v284 + 24))(v284);
      else
        --v284[57];
      v290 = 3;
      goto LABEL_492;
    }
    WebCore::MemoryCache::remove(v125, *((WebCore::CachedResource **)v713 + 1));
LABEL_479:
    v139 = 1;
    goto LABEL_480;
  }
  if ((v142 != 0) != (v143 != 0))
    goto LABEL_1146;
LABEL_232:
  if (((*(_DWORD *)(v138 + 130) ^ *v677) & 0x30000) != 0)
  {
    if (!*(_BYTE *)(v138 + 17))
      goto LABEL_1146;
    v569 = *(unsigned __int8 *)(v138 + 16);
    if (v569 == 15 || v569 == 19)
      goto LABEL_1146;
  }
  if (!a5 || !*(_DWORD *)(v138 + 552))
  {
    if ((*(_BYTE *)(v138 + 556) & 0x1F) == (_DWORD)v8)
    {
      if (!*(_DWORD *)(v138 + 484))
      {
LABEL_236:
        v144 = (WebCore::TextResourceDecoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 40))(v138);
        v147 = v144;
        if (v144)
        {
          ++*(_DWORD *)v144;
          if (!WebCore::TextResourceDecoder::hasEqualEncodingForCharset(v144, (WebCore::ResourceRequest *)((char *)this + 200)))
          {
            if ((*(_WORD *)(v138 + 557) & 0x1000) == 0)
            {
              v184 = 2;
LABEL_324:
              if (*(_DWORD *)v147 == 1)
              {
                v400 = (WTF *)*((_QWORD *)v147 + 9);
                if (v400)
                {
                  *((_QWORD *)v147 + 9) = 0;
                  *((_DWORD *)v147 + 20) = 0;
                  WTF::fastFree(v400, v145);
                }
                v401 = (WebCore::HTMLMetaCharsetParser *)*((_QWORD *)v147 + 6);
                *((_QWORD *)v147 + 6) = 0;
                if (v401)
                {
                  WebCore::HTMLMetaCharsetParser::~HTMLMetaCharsetParser(v401, (WTF::StringImpl *)v145);
                  WTF::fastFree(v402, v403);
                }
                v404 = *((_QWORD *)v147 + 5);
                *((_QWORD *)v147 + 5) = 0;
                if (v404)
                  (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
                WTF::fastFree(v147, v145);
              }
              else
              {
                --*(_DWORD *)v147;
              }
LABEL_326:
              __asm { BR              X10 }
            }
            *(_WORD *)(v138 + 557) &= ~0x1000u;
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v138 + 24))(v138, (char *)this + 200);
          }
        }
        v148 = *(_BYTE *)(v138 + 556) & 0x1F;
        if (v148 <= 0xB
          && ((1 << v148) & 0xFC1) != 0
          && (v149 = *(_QWORD *)(v678 + 80)) != 0
          && (v150 = *(_QWORD *)(v149 + 8)) != 0
          && (v151 = *(_QWORD *)(v150 - 40)) != 0
          && (v152 = *(_QWORD *)(v151 + 8)) != 0
          && !*(_BYTE *)(*(_QWORD *)(v152 + 280) + 348))
        {
          if (((1 << v148) & 0xFC1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194393588);
          }
          if ((*(_BYTE *)(v138 + 130) & 8) != 0)
            goto LABEL_322;
          if ((*(_BYTE *)(v138 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v138 + 160));
            *(_BYTE *)(v138 + 344) |= 1u;
          }
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if (!WTF::equal(*(WTF **)(v138 + 248), *((const WTF::StringImpl **)this + 11), v146))
            goto LABEL_322;
          v153 = *(_BYTE *)(v138 + 344);
          if ((v153 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v138 + 160));
            v153 = *(_BYTE *)(v138 + 344) | 1;
            *(_BYTE *)(v138 + 344) = v153;
          }
          if ((v153 & 4) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceHTTPBody((WebCore::ResourceRequest *)(v138 + 160));
            *(_BYTE *)(v138 + 344) |= 4u;
          }
          v154 = *(WebCore::FormData **)(v138 + 328);
          if (v154)
            ++*(_DWORD *)v154;
          v155 = *((_BYTE *)this + 184);
          if ((v155 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            v155 = *((_BYTE *)this + 184) | 1;
            *((_BYTE *)this + 184) = v155;
          }
          if ((v155 & 4) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceHTTPBody(this);
            *((_BYTE *)this + 184) |= 4u;
          }
          v156 = (WebCore::FormData *)*((_QWORD *)this + 21);
          if (v156)
          {
            v157 = (*(_DWORD *)v156)++;
            if (v157)
            {
              *(_DWORD *)v156 = v157;
            }
            else
            {
              WebCore::FormData::~FormData(v156, v145);
              bmalloc::api::isoDeallocate(v417, v418);
            }
          }
          if (v154)
            WTF::RefCounted<WebCore::FormData>::deref(v154, v145);
          if (v154 != v156)
          {
            v184 = 2;
            goto LABEL_323;
          }
          if ((*(_BYTE *)(v138 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v138 + 160));
            *(_BYTE *)(v138 + 344) |= 1u;
          }
          v158 = *(unsigned __int8 *)(v138 + 308);
          v159 = *((_BYTE *)this + 184);
          if ((v159 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            v159 = *((_BYTE *)this + 184) | 1;
            *((_BYTE *)this + 184) = v159;
          }
          if (((v158 ^ *((unsigned __int8 *)this + 148)) & 2) != 0)
            goto LABEL_322;
          if ((v159 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            v159 = *((_BYTE *)this + 184) | 1;
            *((_BYTE *)this + 184) = v159;
          }
          v160 = *((unsigned int *)this + 27);
          if ((_DWORD)v160)
          {
            v161 = (unsigned __int16 *)*((_QWORD *)this + 12);
            v162 = v161;
            v163 = *((unsigned int *)this + 27);
            do
            {
              v164 = *v162;
              v162 += 8;
              if (v164 == 43)
                goto LABEL_322;
              --v163;
            }
            while (v163);
            v165 = (unsigned __int16 *)*((_QWORD *)this + 12);
            v166 = *((unsigned int *)this + 27);
            do
            {
              v167 = *v165;
              v165 += 8;
              if (v167 == 44)
                goto LABEL_322;
              --v166;
            }
            while (v166);
            v168 = (unsigned __int16 *)*((_QWORD *)this + 12);
            v169 = *((unsigned int *)this + 27);
            do
            {
              v170 = *v168;
              v168 += 8;
              if (v170 == 45)
                goto LABEL_322;
              --v169;
            }
            while (v169);
            v171 = (unsigned __int16 *)*((_QWORD *)this + 12);
            v172 = *((unsigned int *)this + 27);
            do
            {
              v173 = *v171;
              v171 += 8;
              if (v173 == 46)
                goto LABEL_322;
              --v172;
            }
            while (v172);
            do
            {
              v174 = *v161;
              v161 += 8;
              if (v174 == 47)
                goto LABEL_322;
              --v160;
            }
            while (v160);
          }
          if ((v159 & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if ((*(_BYTE *)(v138 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v138 + 160));
            *(_BYTE *)(v138 + 344) |= 1u;
          }
          WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)buf, (uint64_t)this + 96, *((WTF::StringImpl **)this + 12), *((_QWORD *)this + 14));
          WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v679, (uint64_t)this + 96, (WTF::StringImpl *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 27)), *((_QWORD *)this + 14) + 16 * *((unsigned int *)this + 31));
          while (*(WTF::StringImpl **)&buf[8] != v679[1] || *(WTF::StringImpl **)&buf[16] != v679[2])
          {
            if (buf[34])
            {
              v176 = *(unsigned __int16 *)&buf[32] > 0x3Cu || ((1 << buf[32]) & 0x1500000000008001) == 0;
              if (v176 && *(unsigned __int16 *)&buf[32] != 86)
              {
                v177 = *(unsigned int *)(v138 + 268);
                if (!(_DWORD)v177)
                  goto LABEL_309;
                v178 = 0;
                v179 = (const WTF::StringImpl **)(*(_QWORD *)(v138 + 256) + 8);
                while (*((unsigned __int16 *)v179 - 4) != *(unsigned __int16 *)&buf[32])
                {
                  ++v178;
                  v179 += 2;
                  if (v177 == v178)
                    goto LABEL_309;
                }
                if (v178 >= v177)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19439745CLL);
                }
                v406 = *v179;
                if (*v179)
                {
                  *(_DWORD *)v406 += 2;
                  v407 = WTF::equal(*(WTF **)&buf[40], v406, v175);
                  v408 = v407;
                  if (*(_DWORD *)v406 == 2)
                  {
                    WTF::StringImpl::destroy(v406, (WTF::StringImpl *)v145);
                    if ((v408 & 1) == 0)
                      goto LABEL_310;
                  }
                  else
                  {
                    *(_DWORD *)v406 -= 2;
                    if ((v407 & 1) == 0)
                      goto LABEL_310;
                  }
                }
                else
                {
LABEL_309:
                  if ((WTF::equal(*(WTF **)&buf[40], 0, v175) & 1) == 0)
                    goto LABEL_310;
                }
              }
            }
            else
            {
              v495 = *(_QWORD *)&buf[24];
              if (*(_QWORD *)&buf[24])
              {
                v496 = *(WebCore::HTTPHeaderNamesHash **)(*(_QWORD *)&buf[24] + 8);
                v495 = *(unsigned int *)(*(_QWORD *)&buf[24] + 4);
                v497 = ((unint64_t)*(unsigned int *)(*(_QWORD *)&buf[24] + 16) >> 2) & 1;
              }
              else
              {
                v496 = 0;
                v497 = 1;
              }
              WebCore::HTTPHeaderMap::get(v138 + 256, v496, (char *)(v495 | (v497 << 32)), &v697);
              v499 = WTF::equal(*(WTF **)&buf[40], v697, v498);
              v500 = v697;
              v697 = 0;
              if (v500)
              {
                if (*(_DWORD *)v500 == 2)
                  WTF::StringImpl::destroy(v500, (WTF::StringImpl *)v145);
                else
                  *(_DWORD *)v500 -= 2;
              }
              if (!v499)
              {
LABEL_310:
                v180 = v679[5];
                v679[5] = 0;
                if (v180)
                {
                  if (*(_DWORD *)v180 == 2)
                    WTF::StringImpl::destroy(v180, (WTF::StringImpl *)v145);
                  else
                    *(_DWORD *)v180 -= 2;
                }
                v181 = v679[3];
                v679[3] = 0;
                if (v181)
                {
                  if (*(_DWORD *)v181 == 2)
                    WTF::StringImpl::destroy(v181, (WTF::StringImpl *)v145);
                  else
                    *(_DWORD *)v181 -= 2;
                }
                v182 = *(WTF::StringImpl **)&buf[40];
                *(_QWORD *)&buf[40] = 0;
                if (v182)
                {
                  if (*(_DWORD *)v182 == 2)
                    WTF::StringImpl::destroy(v182, (WTF::StringImpl *)v145);
                  else
                    *(_DWORD *)v182 -= 2;
                }
                v183 = *(WTF::StringImpl **)&buf[24];
                *(_QWORD *)&buf[24] = 0;
                if (v183)
                {
                  if (*(_DWORD *)v183 == 2)
                    WTF::StringImpl::destroy(v183, (WTF::StringImpl *)v145);
                  else
                    *(_DWORD *)v183 -= 2;
                }
                goto LABEL_322;
              }
            }
            WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)buf, (WTF::StringImpl *)v145);
          }
          v317 = v679[5];
          v679[5] = 0;
          if (v317)
          {
            if (*(_DWORD *)v317 == 2)
              WTF::StringImpl::destroy(v317, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v317 -= 2;
          }
          v318 = v679[3];
          v679[3] = 0;
          if (v318)
          {
            if (*(_DWORD *)v318 == 2)
              WTF::StringImpl::destroy(v318, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v318 -= 2;
          }
          v319 = *(WTF::StringImpl **)&buf[40];
          *(_QWORD *)&buf[40] = 0;
          if (v319)
          {
            if (*(_DWORD *)v319 == 2)
              WTF::StringImpl::destroy(v319, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v319 -= 2;
          }
          v320 = *(WTF::StringImpl **)&buf[24];
          *(_QWORD *)&buf[24] = 0;
          if (v320)
          {
            if (*(_DWORD *)v320 == 2)
              WTF::StringImpl::destroy(v320, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v320 -= 2;
          }
          WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)buf, v138 + 256, *(WTF::StringImpl **)(v138 + 256), *(_QWORD *)(v138 + 272));
          WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::HTTPHeaderMapConstIterator((uint64_t)v679, v138 + 256, (WTF::StringImpl *)(*(_QWORD *)(v138 + 256) + 16 * *(unsigned int *)(v138 + 268)), *(_QWORD *)(v138 + 272) + 16 * *(unsigned int *)(v138 + 284));
          while (*(WTF::StringImpl **)&buf[8] != v679[1] || *(WTF::StringImpl **)&buf[16] != v679[2])
          {
            if (buf[34])
            {
              v321 = *(unsigned __int16 *)&buf[32] > 0x3Cu || ((1 << buf[32]) & 0x1500000000008001) == 0;
              if (v321 && *(unsigned __int16 *)&buf[32] != 86)
              {
                v322 = *((unsigned int *)this + 27);
                if (!(_DWORD)v322)
                  goto LABEL_558;
                v323 = (unsigned __int16 *)*((_QWORD *)this + 12);
                while (1)
                {
                  v324 = *v323;
                  v323 += 8;
                  if (v324 == *(unsigned __int16 *)&buf[32])
                    break;
                  if (!--v322)
                    goto LABEL_558;
                }
              }
            }
            else if (!WebCore::HTTPHeaderMap::contains((WebCore::ResourceRequest *)((char *)this + 96), (const WTF::StringImpl **)&buf[24]))
            {
LABEL_558:
              v325 = 0;
              goto LABEL_560;
            }
            WebCore::HTTPHeaderMap::HTTPHeaderMapConstIterator::operator++((uint64_t)buf, (WTF::StringImpl *)v145);
          }
          v325 = 1;
LABEL_560:
          v326 = v679[5];
          v679[5] = 0;
          if (v326)
          {
            if (*(_DWORD *)v326 == 2)
              WTF::StringImpl::destroy(v326, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v326 -= 2;
          }
          v327 = v679[3];
          v679[3] = 0;
          if (v327)
          {
            if (*(_DWORD *)v327 == 2)
              WTF::StringImpl::destroy(v327, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v327 -= 2;
          }
          v328 = *(WTF::StringImpl **)&buf[40];
          *(_QWORD *)&buf[40] = 0;
          if (v328)
          {
            if (*(_DWORD *)v328 == 2)
              WTF::StringImpl::destroy(v328, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v328 -= 2;
          }
          v329 = *(WTF::StringImpl **)&buf[24];
          *(_QWORD *)&buf[24] = 0;
          if (v329)
          {
            if (*(_DWORD *)v329 == 2)
              WTF::StringImpl::destroy(v329, (WTF::StringImpl *)v145);
            else
              *(_DWORD *)v329 -= 2;
          }
          v330 = v672 == 1 ? 0 : v325;
          if ((v330 & 1) == 0)
            goto LABEL_322;
        }
        else if (v672 == 1)
        {
          goto LABEL_322;
        }
        if (*(_BYTE *)(v678 + 274))
          goto LABEL_464;
        if ((*((_BYTE *)this + 211) & 0xFE) == 4)
          goto LABEL_464;
        if (*(_DWORD *)(v138 + 552))
          goto LABEL_464;
        v267 = *(_QWORD *)(v138 + 496);
        if (v267)
        {
          v268 = *(_QWORD *)(v267 + 8);
          if (v268)
          {
            if ((*(_WORD *)(v268 + 557) & 0x2000) != 0)
              goto LABEL_464;
          }
        }
        if ((*(_BYTE *)(v138 + 556) & 0x1F) != 1)
          goto LABEL_441;
        v651 = *(_QWORD *)(v138 + 8);
        if (v651)
          goto LABEL_1365;
        v651 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v651 = 1;
        *(_QWORD *)(v651 + 8) = v138;
        v660 = *(unsigned int **)(v138 + 8);
        *(_QWORD *)(v138 + 8) = v651;
        if (!v660)
          goto LABEL_1365;
        do
        {
          v661 = __ldaxr(v660);
          v662 = v661 - 1;
        }
        while (__stlxr(v662, v660));
        if (!v662)
        {
          atomic_store(1u, v660);
          WTF::fastFree((WTF *)v660, v145);
        }
        v651 = *(_QWORD *)(v138 + 8);
        if (v651)
        {
LABEL_1365:
          do
            v652 = __ldaxr((unsigned int *)v651);
          while (__stlxr(v652 + 1, (unsigned int *)v651));
          v697 = (WTF::StringImpl *)v651;
          v653 = *(_QWORD *)(v651 + 8);
          if (v653)
          {
            v679[0] = (WTF::StringImpl *)&v697;
            ++*(_DWORD *)(v653 + 548);
            v654 = *(_QWORD *)(v653 + 488);
            if (!v654
              || !*(_QWORD *)(v654 + 8)
              || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v653 + 464), (uint64_t *)v679, (uint64_t)buf), v697)&& (v653 = *((_QWORD *)v697 + 1)) != 0)
            {
              if (*(unsigned __int8 *)(v653 + 17) == *((unsigned __int8 *)this + 209)
                && *(unsigned __int8 *)(v653 + 18) == *((unsigned __int8 *)this + 210))
              {
                v655 = WebCore::ResourceRequestBase::allowCookies((WebCore::ResourceRequestBase *)(v653 + 160));
                if (v655 == WebCore::ResourceRequestBase::allowCookies(this))
                {
                  v656 = *(_QWORD *)(v653 + 712);
                  if (v656)
                  {
                    v657 = *(_QWORD *)(v656 + 8);
                    if (v657)
                    {
                      v658 = *(_QWORD *)(v678 + 72);
                      if (v658)
                      {
                        if (v657 == *(_QWORD *)(v658 + 8))
                        {
                          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v697, v145);
                          goto LABEL_464;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
LABEL_441:
          v697 = 0;
        }
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v697, v145);
        if ((*((_BYTE *)this + 184) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest(this);
          *((_BYTE *)this + 184) |= 1u;
        }
        v269 = (WTF::WallTime *)WebCore::CachedResourceLoader::cachePolicy(*(_QWORD *)(v678 + 80), (int)v8, this);
        v270 = v269;
        if (*(_BYTE *)(v138 + 536))
        {
          if (*(_BYTE *)(v138 + 536) != 2)
            goto LABEL_322;
          if ((_DWORD)v269 != 3)
          {
            v605 = *(double *)(v138 + 528);
            WTF::WallTime::now(v269);
            if (v606 > v605)
              goto LABEL_322;
            goto LABEL_446;
          }
        }
        else if ((_DWORD)v269 != 3)
        {
          goto LABEL_446;
        }
        v493 = WebCore::CachedResource::response((WebCore::CachedResource *)v138);
        v494 = WebCore::ResourceResponseBase::cacheControlContainsNoStore((WebCore::ResourceResponseBase *)v493);
        v184 = 0;
        if ((_DWORD)v8 || !v494)
          goto LABEL_323;
LABEL_446:
        v271 = *(uint64_t **)(v138 + 400);
        if (!v271)
        {
          v392 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
          if (v392 != -1)
          {
            *(_QWORD *)buf = &v697;
            v679[0] = (WTF::StringImpl *)buf;
            std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v679, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
          }
          v271 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
        }
        if ((v271[29] & 1) == 0)
        {
          WebCore::ResourceResponse::platformLazyInit((uint64_t)v271, 1);
          WebCore::parseCacheControlDirectives((unsigned int *)v271 + 20, v405, (int64x2_t *)buf);
          *(_OWORD *)(v271 + 25) = *(_OWORD *)buf;
          *(_OWORD *)((char *)v271 + 209) = *(_OWORD *)&buf[9];
          *((_WORD *)v271 + 116) |= 1u;
        }
        if ((v271[28] & 2) == 0)
        {
          v667 = (WebCore::ResourceRequest *)(v138 + 160);
          if ((*(_BYTE *)(v138 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(v667);
            *(_BYTE *)(v138 + 344) |= 1u;
          }
          v272 = *(unsigned __int8 *)(v138 + 308);
          if ((*((_BYTE *)this + 184) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest(this);
            *((_BYTE *)this + 184) |= 1u;
          }
          if (((v272 ^ *((unsigned __int8 *)this + 148)) & 2) != 0)
            goto LABEL_1020;
          if (*(unsigned __int8 *)(v138 + 18) != *((unsigned __int8 *)this + 210))
            goto LABEL_1019;
          v273 = *(_QWORD *)(v678 + 72);
          if (v273)
          {
            v274 = *(_QWORD *)(v273 + 8);
            if (v274)
            {
              if (!*(_BYTE *)(v274 + 3387))
              {
                if ((*(_BYTE *)(v138 + 344) & 1) == 0)
                {
                  WebCore::ResourceRequest::doUpdateResourceRequest(v667);
                  *(_BYTE *)(v138 + 344) |= 1u;
                }
                if (*(_QWORD *)(v678 + 16))
                {
                  v664 = *(_DWORD *)(v678 + 32);
                  v665 = *(_DWORD *)(v678 + 24);
                  v335 = *(_DWORD *)(*(_QWORD *)v667 + 16);
                  if (v335 < 0x100)
                    v336 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v667);
                  else
                    v336 = v335 >> 8;
                  v666 = 0;
                  v337 = v665 - 1;
                  v663 = v336;
                  v338 = v336 ^ v664;
                  while (1)
                  {
                    v339 = v338 & v337;
                    v340 = (WTF **)(*(_QWORD *)(v678 + 16) + 40 * (v338 & v337));
                    *(_QWORD *)buf = 0;
                    WTF::URL::invalidate((WTF::URL *)buf);
                    v343 = WTF::equal(*v340, *(const WTF::StringImpl **)buf, v341);
                    v344 = *(WTF::StringImpl **)buf;
                    *(_QWORD *)buf = 0;
                    if (v344)
                    {
                      if (*(_DWORD *)v344 == 2)
                        WTF::StringImpl::destroy(v344, (WTF::StringImpl *)v145);
                      else
                        *(_DWORD *)v344 -= 2;
                    }
                    if ((v343 & 1) != 0)
                      goto LABEL_459;
                    v345 = *((_DWORD *)*v340 + 4);
                    v346 = v345 < 0x100 ? WTF::StringImpl::hashSlowCase(*v340) : v345 >> 8;
                    if (v666 > ((v339 + v665 - ((v346 ^ v664) & v337)) & v337))
                      goto LABEL_459;
                    if (v346 == v663 && (WTF::equal(*v340, *(const WTF::StringImpl **)v667, v342) & 1) != 0)
                      break;
                    v338 = v339 + 1;
                    ++v666;
                  }
                  v184 = 0;
                  goto LABEL_323;
                }
              }
            }
          }
LABEL_459:
          if ((_DWORD)v270 == 2)
          {
LABEL_1019:
            v184 = 2;
            goto LABEL_323;
          }
          if ((*(_WORD *)(v138 + 557) >> 5) - 3 < 2)
          {
LABEL_1020:
            v184 = 2;
            goto LABEL_323;
          }
          if ((*(_WORD *)(v138 + 557) & 0x400) != 0)
          {
            v184 = 2 * ((_DWORD)v8 == 0);
            goto LABEL_323;
          }
          if ((*(unsigned int (**)(uint64_t, WTF::WallTime *))(*(_QWORD *)v138 + 152))(v138, v270))
          {
            if (!WebCore::CachedResource::canUseCacheValidator((WebCore::CachedResource *)v138))
              goto LABEL_322;
            if (*((_QWORD *)this + 32))
              v184 = 2;
            else
              v184 = 1;
LABEL_323:
            if (!v147)
              goto LABEL_326;
            goto LABEL_324;
          }
          v275 = *((_QWORD *)this + 48);
          if (v275 && *(_DWORD *)(v275 + 4) && *(_BYTE *)(v138 + 536))
          {
            v184 = 3;
            goto LABEL_323;
          }
LABEL_464:
          v184 = 0;
          goto LABEL_323;
        }
LABEL_322:
        v184 = 2;
        goto LABEL_323;
      }
      v570 = v139;
      v571 = v138 + 472;
      v572 = *(_DWORD **)(v138 + 424);
      if (v572)
      {
        ++v572[2];
        v573 = WebCore::verifyVaryingRequestHeaders((uint64_t)v572, v571, (uint64_t)this);
        v574 = v573;
        if (v572[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v572 + 120))(v572);
          v51 = v674;
          LOBYTE(v139) = v570;
          if (v574)
            goto LABEL_236;
        }
        else
        {
          --v572[2];
          v51 = v674;
          LOBYTE(v139) = v570;
          if ((v573 & 1) != 0)
            goto LABEL_236;
        }
      }
      else
      {
        v659 = WebCore::verifyVaryingRequestHeaders(0, v571, (uint64_t)this);
        v51 = v674;
        LOBYTE(v139) = v570;
        if ((v659 & 1) != 0)
          goto LABEL_236;
      }
    }
    goto LABEL_1146;
  }
  v185 = *((unsigned __int8 *)this + 209);
  if (!*((_BYTE *)this + 209))
  {
    v186 = (_DWORD *)v671;
    if (*(unsigned int **)(*((_QWORD *)v15 + 16) + 8) == v15)
      goto LABEL_341;
    v575 = *((_QWORD *)v15 + 7);
    if (!v575)
      goto LABEL_341;
    v576 = *(_QWORD *)(v575 + 8);
    if (!v576 || *(_BYTE *)(v576 + 144))
      goto LABEL_341;
    v577 = (unsigned int *)(v576 + 8);
    do
      v578 = __ldaxr(v577);
    while (__stlxr(v578 + 1, v577));
    v579 = *(_QWORD *)(v576 + 296);
    if (v579)
    {
      *(_DWORD *)(v579 + 24) += 2;
      v580 = *(unsigned __int8 *)(v579 + 216);
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v579 + 192), v136);
      v582 = (WebCore::SecurityOrigin *)v581;
      if (v581)
      {
        do
          v583 = __ldaxr(v581);
        while (__stlxr(v583 + 1, v581));
      }
      v679[0] = (WTF::StringImpl *)v581;
      if ((*((_BYTE *)this + 184) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest(this);
        *((_BYTE *)this + 184) |= 1u;
      }
      if (v713)
        v584 = (WebCore::CachedResource *)*((_QWORD *)v713 + 1);
      else
        v584 = 0;
      v585 = WebCore::CachedResource::response(v584);
      {
        WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
      }
      WebCore::validateCrossOriginResourcePolicy(v580 != 0, v582, (uint64_t)this, (uint64_t)v585, 1, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, buf);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)v679, v586);
      if ((_BYTE)v720)
      {
        v588 = *(_OWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)v679 = v588;
        *(_OWORD *)&v679[2] = *(_OWORD *)&buf[16];
        *(_OWORD *)&v679[4] = *(_OWORD *)&buf[32];
        *(_DWORD *)&buf[16] &= ~1u;
        v680[0] = v715;
        LODWORD(v680[1]) = v716;
        WORD2(v680[1]) = v717;
        v589 = v718;
        v715 = 0;
        v718 = 0;
        cf[0] = v589;
        LOBYTE(cf[1]) = v719;
        std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)v679);
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v590);
        std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v591);
        if (*(_DWORD *)(v579 + 24) == 2)
        {
          if ((*(_WORD *)(v579 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v579);
        }
        else
        {
          *(_DWORD *)(v579 + 24) -= 2;
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v577);
        v288 = v673;
        goto LABEL_1192;
      }
      std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v587);
      if (*(_DWORD *)(v579 + 24) == 2)
      {
        if ((*(_WORD *)(v579 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v579);
      }
      else
      {
        *(_DWORD *)(v579 + 24) -= 2;
      }
    }
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v577);
    v185 = *((unsigned __int8 *)this + 209);
    v51 = v674;
  }
  v186 = (_DWORD *)v671;
  if (v185 == 2 && (WTF::URL::protocolIs() & 1) == 0)
  {
    v187 = *(_QWORD *)(v678 + 72);
    v189 = v187 && (v188 = *(_QWORD *)(v187 + 8)) != 0 && *(unsigned __int8 *)(v188 + 216) != 0;
    v190 = (unsigned int *)*((_QWORD *)this + 47);
    if (v190)
    {
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 + 1, v190));
    }
    if ((*((_BYTE *)this + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(this);
      *((_BYTE *)this + 184) |= 1u;
    }
    v192 = *(uint64_t **)(*((_QWORD *)v713 + 1) + 400);
    if (!v192)
    {
      v396 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v396 != -1)
      {
        v679[0] = (WTF::StringImpl *)&v707;
        v697 = (WTF::StringImpl *)v679;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v697, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v192 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    {
      WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance = (uint64_t)&off_1E3400538;
    }
    WebCore::validateCrossOriginResourcePolicy(v189, (WebCore::SecurityOrigin *)v190, (uint64_t)this, (uint64_t)v192, 0, (uint64_t (***)(_QWORD, uint64_t))&WebCore::OriginAccessPatternsForWebProcess::singleton(void)::instance, buf);
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v190, v193);
    if ((_BYTE)v720)
      goto LABEL_1033;
  }
LABEL_341:
  v194 = v713;
  if (*((_BYTE *)this + 209) != 2)
    goto LABEL_345;
  v195 = *(const WebCore::ResourceRequest **)(*((_QWORD *)v713 + 1) + 400);
  if (!v195)
  {
    v395 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v395 != -1)
    {
      v679[0] = (WTF::StringImpl *)&v707;
      v697 = (WTF::StringImpl *)v679;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v697, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v195 = (const WebCore::ResourceRequest *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::validateRangeRequestedFlag(this, v195, buf);
  if ((_BYTE)v720)
  {
LABEL_1033:
    v501 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_OWORD *)v679 = v501;
    *(_OWORD *)&v679[2] = *(_OWORD *)&buf[16];
    *(_OWORD *)&v679[4] = *(_OWORD *)&buf[32];
    *(_DWORD *)&buf[16] &= ~1u;
    v680[0] = v715;
    LODWORD(v680[1]) = v716;
    WORD2(v680[1]) = v717;
    v502 = v718;
    v715 = 0;
    v718 = 0;
    cf[0] = v502;
    LOBYTE(cf[1]) = v719;
    std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)v679);
    WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v503);
    std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v504);
    v288 = v673;
    goto LABEL_648;
  }
  v194 = v713;
LABEL_345:
  if (v194)
    v196 = *((_QWORD *)v194 + 1);
  else
    v196 = 0;
  v197 = *(_BYTE *)(v196 + 556) & 0x1F;
  if (v197 <= 0x10 && ((1 << v197) & 0x13031) != 0)
    goto LABEL_356;
  if (*(unsigned __int8 *)(v196 + 17) != *((unsigned __int8 *)this + 209))
  {
LABEL_986:
    v484 = *((_QWORD *)v713 + 1);
    v485 = *((_QWORD *)v674 + 126);
    v486 = (_DWORD *)*((_QWORD *)v674 + 14);
    ++v486[57];
    v285 = (uint64_t *)v678;
    WebCore::CachedResourceLoader::updateCachedResourceWithCurrentRequest((WTF *)buf, v678, v484, (uint64_t)this, v485, (uint64_t)v186, (uint64_t)v486);
    if (*(_QWORD *)buf)
      v487 = *(WebCore::CachedResource **)(*(_QWORD *)buf + 8);
    else
      v487 = 0;
    v288 = v673;
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)&v713, v487);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)buf, v488);
    if (v486[57] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v486 + 24))(v486);
    else
      --v486[57];
    if ((*(_WORD *)(*((_QWORD *)v713 + 1) + 557) & 0xE0) == 0x40)
      v290 = 0;
    else
      v290 = 3;
    goto LABEL_492;
  }
  v198 = (unsigned int *)*((_QWORD *)this + 47);
  if (!v198)
  {
    v198 = *(unsigned int **)(v196 + 512);
    if (!v198)
      goto LABEL_355;
    do
      v483 = __ldaxr(v198);
    while (__stlxr(v483 + 1, v198));
LABEL_985:
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v198, v136);
    goto LABEL_986;
  }
  do
    v199 = __ldaxr(v198);
  while (__stlxr(v199 + 1, v198));
  v200 = *(unsigned int **)(v196 + 512);
  if (!v200)
    goto LABEL_985;
  do
    v201 = __ldaxr(v200);
  while (__stlxr(v201 + 1, v200));
  v202 = WebCore::serializedOriginsMatch((WebCore *)v198, (const WebCore::SecurityOrigin *)v200, v137);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v200, v203);
  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v198, v204);
  if ((v202 & 1) == 0)
    goto LABEL_986;
LABEL_355:
  if (*(unsigned __int8 *)(v196 + 20) != *((unsigned __int8 *)this + 212) && *(_BYTE *)(v196 + 536))
    goto LABEL_986;
LABEL_356:
  v679[0] = 0;
  v679[1] = 0;
  v205 = (WTF::MonotonicTime *)WTF::URL::invalidate((WTF::URL *)&v679[1]);
  cf[0] = 0;
  v680[0] = 0;
  *(WTF::StringImpl **)((char *)v680 + 6) = 0;
  LOBYTE(cf[1]) = 1;
  v206 = v678;
  v207 = *(_QWORD *)(v678 + 80);
  if (v207)
  {
    v208 = *(_QWORD *)(v207 + 8);
    if (v208)
    {
      v209 = *(_QWORD *)(v208 - 40);
      if (v209)
      {
        if (*(_QWORD *)(v209 + 8))
        {
          v210 = *((_QWORD *)v713 + 1);
          if ((*(_WORD *)(v210 + 557) & 0xE0) == 0x40)
          {
            v211 = (_DWORD **)(v210 + 160);
            if ((*(_BYTE *)(v210 + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v210 + 160));
              *(_BYTE *)(v210 + 344) |= 1u;
            }
            v212 = *v211;
            if (*v211)
              *v212 += 2;
            v213 = *(_OWORD *)(v210 + 184);
            *(_OWORD *)&buf[8] = *(_OWORD *)(v210 + 168);
            *(_OWORD *)&buf[24] = v213;
            *(_QWORD *)buf = v212;
            *(_QWORD *)&buf[40] = 0;
            WTF::URL::invalidate((WTF::URL *)&buf[40]);
            v720 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v721 = v697;
            v722 = 0u;
            v723 = 0u;
            v724 = 0u;
            v725 = 0;
            v726 = 1;
            v215 = v728 & 0x80 | 4;
            v728 = v215;
            v216 = (_DWORD *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
            {
              *v216 += 2;
              v215 = v728;
            }
            v730 = v216;
            v731 = 0;
            LOBYTE(v732) = 0;
            v733 = 0;
            v734 = v734 & 0xE0 | 5;
            v728 = v215 | 2;
            v735 = 0;
            v727 = *((_BYTE *)this + 147);
            v217 = (WTF::StringImpl *)*((_QWORD *)this + 19);
            if (v217)
            {
              v218 = *(_DWORD *)v217;
              *(_DWORD *)v217 += 4;
              v729 = v217;
              v219 = v218 + 2;
              if (v219)
                *(_DWORD *)v217 = v219;
              else
                WTF::StringImpl::destroy(v217, v214);
            }
            else
            {
              v729 = 0;
            }
            if ((*((_QWORD *)this + 22) & 0xFF00000000) != 0)
            {
              v732 = *((_QWORD *)this + 22);
              v733 = 1;
            }
            if ((*((_BYTE *)this + 184) & 0x10) != 0)
              v734 |= 0x10u;
            v220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v678 + 80) + 8) - 40) + 8);
            v221 = (unsigned int *)(v220 + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 + 1, v221));
            v223 = *(WebCore::FrameLoader **)(v220 + 280);
            ++*(_DWORD *)v223;
            WebCore::FrameLoader::loadedResourceFromMemoryCache(v223, (WebCore::CachedResource *)v210, (WebCore::ResourceRequest *)buf, (WebCore::ResourceError *)v679);
            if (!*(_DWORD *)v223)
            {
              __break(0xC471u);
              JUMPOUT(0x194395534);
            }
            --*(_DWORD *)v223;
            do
            {
              v225 = __ldaxr(v221);
              v226 = v225 - 1;
            }
            while (__stlxr(v226, v221));
            if (!v226)
            {
              atomic_store(1u, v221);
              v489 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v489 = off_1E31FE290;
              *((_QWORD *)v489 + 1) = v221;
              v697 = v489;
              WTF::ensureOnMainThread();
              v490 = v697;
              v697 = 0;
              if (v490)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v490 + 8))(v490);
            }
            v227 = v734;
            if ((v734 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
              v227 = v734 | 1;
              v734 |= 1u;
            }
            if ((v227 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)buf);
              v734 |= 1u;
            }
            v228 = *(_QWORD *)buf;
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v224);
            if (!v228)
            {
              v592 = *(_OWORD *)v679;
              v679[0] = 0;
              v679[1] = 0;
              *(_OWORD *)buf = v592;
              *(_OWORD *)&buf[16] = *(_OWORD *)&v679[2];
              *(_OWORD *)&buf[32] = *(_OWORD *)&v679[4];
              LODWORD(v679[2]) &= ~1u;
              v715 = v680[0];
              v716 = (int)v680[1];
              v717 = WORD2(v680[1]);
              v593 = cf[0];
              v680[0] = 0;
              cf[0] = 0;
              v718 = v593;
              v719 = (char)cf[1];
              std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)buf);
              WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v594);
              goto LABEL_895;
            }
          }
        }
      }
    }
  }
  WTF::MonotonicTime::now(v205);
  *((_QWORD *)&v708[0] + 1) = v229;
  WebCore::MemoryCache::resourceAccessed(v125, *((WebCore::CachedResource **)v713 + 1));
  v232 = *(_QWORD *)(v678 + 72);
  if (v232)
  {
    v233 = *(_QWORD *)(v232 + 8);
    if (v233)
    {
      v234 = *((_QWORD *)v713 + 1);
      if ((*(_WORD *)(v234 + 557) & 0x400) == 0)
      {
        v707 = 0;
        v235 = *(_QWORD *)(v233 + 528);
        if (v235)
        {
          v236 = *(_QWORD *)(v235 + 8);
          if (v236)
          {
            v237 = *(_QWORD *)(*(_QWORD *)(v236 + 280) + 88);
            if (!v237)
            {
LABEL_887:
              v238 = 1;
              goto LABEL_393;
            }
            if (*(_QWORD *)(v236 + 296) == v233)
            {
              v238 = 0;
              ++*(_DWORD *)(v237 + 24);
LABEL_393:
              v239 = *(WebCore::CachedResource::ResponseData **)(v234 + 400);
              if (!v239)
              {
                v463 = (WebCore::CachedResource::ResponseData *)WTF::fastMalloc((WTF *)0x198);
                v239 = WebCore::CachedResource::ResponseData::ResponseData(v463, (WebCore::CachedResource *)v234);
                v464 = *(WebCore::CachedResource::ResponseData **)(v234 + 400);
                *(_QWORD *)(v234 + 400) = v239;
                if (v464)
                {
                  WebCore::CachedResource::ResponseData::~ResponseData(v464, v230);
                  WTF::fastFree(v465, v466);
                  v239 = *(WebCore::CachedResource::ResponseData **)(v234 + 400);
                }
              }
              *(_QWORD *)buf = *((_QWORD *)v239 + 14);
              v240 = *(_QWORD *)buf;
              *((_QWORD *)v239 + 14) = 0;
              if (!v240)
                goto LABEL_395;
              if (v238 || *(double *)(v240 + 8) < *(double *)(v237 + 2728))
              {
                *(_QWORD *)buf = 0;
              }
              else
              {
                WTF::Box<WebCore::NetworkLoadMetrics>::operator=((uint64_t *)&v707, (WTF::StringImpl *)buf);
                v240 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                if (!v240)
                {
LABEL_395:
                  v241 = *((_QWORD *)this + 45);
                  if (v241)
                  {
                    v242 = (uint64_t *)(*(_QWORD *)(v241 + 96) + 24);
                  }
                  else
                  {
                    v393 = *((_QWORD *)this + 46);
                    if (v393 && *(_DWORD *)(v393 + 4))
                    {
                      v242 = (uint64_t *)((char *)this + 368);
                    }
                    else
                    {
                      v242 = &qword_1EE337DC8;
                      if ((byte_1EE337DA4 & 1) == 0)
                      {
                        *(_QWORD *)buf = "other";
                        *(_QWORD *)&buf[8] = 6;
                        WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EE337DC8, (uint64_t)buf);
                        byte_1EE337DA4 = 1;
                      }
                    }
                  }
                  v243 = *(uint64_t **)(*((_QWORD *)v713 + 1) + 400);
                  if (!v243)
                  {
                    v397 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                    if (v397 != -1)
                    {
                      *(_QWORD *)buf = &v712;
                      v697 = (WTF::StringImpl *)buf;
                      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v697, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                    }
                    v243 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
                  }
                  if (v707)
                  {
                    v244 = (__int128 *)((char *)v707 + 8);
                  }
                  else
                  {
                    v244 = &WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
                    {
                      dword_1EE2F9230 = 0;
                      xmmword_1EE2F9210 = 0u;
                      unk_1EE2F9220 = 0u;
                      xmmword_1EE2F91F0 = 0u;
                      *(_OWORD *)&qword_1EE2F9200 = 0u;
                      WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
                      *(_OWORD *)&qword_1EE2F91E0 = 0u;
                      qword_1EE2F9238 = -1;
                      unk_1EE2F9240 = -1;
                      qword_1EE2F9248 = 0;
                    }
                  }
                  v245 = (unsigned int *)*((_QWORD *)this + 47);
                  if (v245)
                  {
                    do
                      v246 = __ldaxr(v245);
                    while (__stlxr(v246 + 1, v245));
                  }
                  WebCore::ResourceTiming::ResourceTiming((uint64_t)buf, (uint64_t)&v709, (_DWORD **)v242, v708, (uint64_t)v244, (uint64_t)v243, (WebCore::SecurityOrigin *)v245);
                  WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v245, v247);
                  if ((v669 & 0x1000) != 0)
                  {
                    v595 = *((_QWORD *)v713 + 1);
                    v596 = *(_BYTE *)(v595 + 556) & 0x1F;
                    v301 = v596 > 0xB;
                    v597 = (1 << v596) & 0xFC1;
                    if (v301 || v597 == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194396D9CLL);
                    }
                    WebCore::CachedRawResource::finishedTimingForWorkerLoad(v595, (uint64_t)buf);
                    v186 = (_DWORD *)v671;
                  }
                  else
                  {
                    v248 = *((_QWORD *)this + 45);
                    if (v248)
                    {
                      v249 = (WTF::StringImpl **)(*(_QWORD *)(v248 + 96) + 24);
                    }
                    else
                    {
                      v394 = *((_QWORD *)this + 46);
                      if (v394 && *(_DWORD *)(v394 + 4))
                      {
                        v249 = (WTF::StringImpl **)((char *)this + 368);
                      }
                      else
                      {
                        v249 = (WTF::StringImpl **)&qword_1EE337DC8;
                        if ((byte_1EE337DA4 & 1) == 0)
                        {
                          v697 = (WTF::StringImpl *)"other";
                          v698 = 6;
                          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1EE337DC8, (uint64_t)&v697);
                          byte_1EE337DA4 = 1;
                        }
                      }
                    }
                    WebCore::ResourceTimingInformation::storeResourceTimingInitiatorInformation((WTF::StringImpl *)(v206 + 216), (uint64_t)&v713, v249, (uint64_t)v675);
                    v250 = *((_QWORD *)v713 + 1);
                    v251 = *(_QWORD *)(*(_QWORD *)(v206 + 72) + 8);
                    *(_DWORD *)(v251 + 24) += 2;
                    WebCore::ResourceTimingInformation::addResourceTiming(v206 + 216, v250, (WebCore::Document *)v251, (WebCore::ResourceTiming *)buf);
                    if (*(_DWORD *)(v251 + 24) == 2)
                    {
                      if ((*(_WORD *)(v251 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v251);
                    }
                    else
                    {
                      *(_DWORD *)(v251 + 24) -= 2;
                    }
                  }
                  WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)buf, v252);
                  if ((v238 & 1) == 0)
                  {
                    if (*(_DWORD *)(v237 + 24) == 1)
                      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 24))(v237);
                    else
                      --*(_DWORD *)(v237 + 24);
                  }
                  v253 = v707;
                  v707 = 0;
                  if (v253)
                  {
                    do
                    {
                      v254 = __ldaxr((unsigned int *)v253);
                      v255 = v254 - 1;
                    }
                    while (__stlxr(v255, (unsigned int *)v253));
                    if (!v255)
                    {
                      atomic_store(1u, (unsigned int *)v253);
                      v491 = (_DWORD *)*((_QWORD *)v253 + 16);
                      *((_QWORD *)v253 + 16) = 0;
                      if (v491)
                        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v491, v230);
                      v492 = (WTF::StringImpl *)*((_QWORD *)v253 + 12);
                      *((_QWORD *)v253 + 12) = 0;
                      if (v492)
                      {
                        if (*(_DWORD *)v492 == 2)
                          WTF::StringImpl::destroy(v492, v230);
                        else
                          *(_DWORD *)v492 -= 2;
                      }
                      WTF::fastFree(v253, v230);
                      v186 = (_DWORD *)v671;
                    }
                  }
                  goto LABEL_414;
                }
              }
              do
              {
                v468 = __ldaxr((unsigned int *)v240);
                v469 = v468 - 1;
              }
              while (__stlxr(v469, (unsigned int *)v240));
              if (!v469)
              {
                atomic_store(1u, (unsigned int *)v240);
                v470 = *(_DWORD **)(v240 + 128);
                *(_QWORD *)(v240 + 128) = 0;
                if (v470)
                  WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v470, v230);
                v471 = *(WTF::StringImpl **)(v240 + 96);
                *(_QWORD *)(v240 + 96) = 0;
                if (v471)
                {
                  if (*(_DWORD *)v471 == 2)
                    WTF::StringImpl::destroy(v471, v230);
                  else
                    *(_DWORD *)v471 -= 2;
                }
                WTF::fastFree((WTF *)v240, v230);
                v206 = v678;
                v186 = (_DWORD *)v671;
              }
              goto LABEL_395;
            }
          }
        }
        v237 = 0;
        goto LABEL_887;
      }
    }
  }
LABEL_414:
  if ((a5 & 1) == 0)
  {
    v256 = v713;
    v51 = v674;
    if (v713)
      v256 = (WTF::StringImpl *)*((_QWORD *)v713 + 1);
    v257 = (*v677 >> 25) & 3;
    if (*((_BYTE *)this + 353))
    {
      v259 = *((unsigned __int8 *)this + 352);
    }
    else
    {
      v258 = *((_BYTE *)v256 + 556) & 0x1F;
      if (v258 > 0x10)
        v259 = 1;
      else
        v259 = byte_1969F2CD0[v258];
    }
    v288 = v673;
    if (v257 == 1)
    {
      v613 = v259 != 0;
      LOBYTE(v259) = v259 - 1;
      if (!v613)
        LOBYTE(v259) = 0;
    }
    else if (!v257)
    {
      if (v259 == 4)
        LOBYTE(v259) = 4;
      else
        LOBYTE(v259) = v259 + 1;
    }
    *(_WORD *)((char *)v256 + 557) = *(_WORD *)((_BYTE *)v256 + 557) & 0xFFE3 | (4 * (v259 & 7));
    LOBYTE(v228) = 1;
    goto LABEL_517;
  }
  LOBYTE(v228) = 1;
LABEL_895:
  v288 = v673;
  v51 = v674;
LABEL_517:
  v313 = cf[0];
  cf[0] = 0;
  if (v313)
    CFRelease(v313);
  v314 = v680[0];
  v680[0] = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
      WTF::StringImpl::destroy(v314, v230);
    else
      *(_DWORD *)v314 -= 2;
  }
  v315 = v679[1];
  v679[1] = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
      WTF::StringImpl::destroy(v315, v230);
    else
      *(_DWORD *)v315 -= 2;
  }
  v316 = v679[0];
  v679[0] = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, v230);
    else
      *(_DWORD *)v316 -= 2;
  }
  if ((v228 & 1) == 0)
    goto LABEL_648;
  v290 = 0;
  v285 = (uint64_t *)v678;
LABEL_492:
  v291 = v713;
  v292 = *((_QWORD *)v713 + 1);
  v293 = *(WebCore::ResourceRequest **)(v292 + 376);
  *(_QWORD *)(v292 + 376) = v288;
  if (v293)
  {
    WebCore::ResourceRequest::~ResourceRequest(v293, v230);
    WTF::fastFree(v294, v295);
    v291 = v713;
  }
  v296 = *((_QWORD *)v291 + 1);
  v297 = *(_QWORD *)(v296 + 384);
  if (v297)
  {
    v298 = *(_DWORD *)(v297 + 16) + 1;
    *(_DWORD *)(v297 + 16) = v298;
    if ((a5 & 1) == 0)
    {
      v299 = *(_WORD *)(v296 + 557);
      if ((v299 & 0x4000) != 0
        || ((v300 = *(_BYTE *)(v296 + 556) & 0x1F, v301 = v300 > 0xD, v302 = (1 << v300) & 0x2F01, !v301)
          ? (v303 = v302 == 0)
          : (v303 = 1),
            !v303))
      {
        if (*(_BYTE *)(v297 + 1360))
        {
          WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)(v297 + 1344), v230);
          *(_BYTE *)(v297 + 1360) = 0;
          v291 = v713;
          v296 = *((_QWORD *)v713 + 1);
          v299 = *(_WORD *)(v296 + 557);
        }
        *(_WORD *)(v296 + 557) = v299 & 0xBFFF;
        WebCore::SubresourceLoader::RequestCountTracker::RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)buf, (WebCore::CachedResourceLoader *)v285, *((const WebCore::CachedResource **)v291 + 1));
        if (*(_BYTE *)(v297 + 1360))
        {
          v305 = *(_QWORD *)buf;
          *(_QWORD *)buf = 0;
          v306 = *(unsigned int **)(v297 + 1344);
          *(_QWORD *)(v297 + 1344) = v305;
          if (v306)
          {
            do
            {
              v307 = __ldaxr(v306);
              v308 = v307 - 1;
            }
            while (__stlxr(v308, v306));
            if (!v308)
            {
              atomic_store(1u, v306);
              WTF::fastFree((WTF *)v306, v304);
            }
          }
          v309 = *(_QWORD *)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          v310 = *(unsigned int **)(v297 + 1352);
          *(_QWORD *)(v297 + 1352) = v309;
          if (v310)
          {
            do
            {
              v311 = __ldaxr(v310);
              v312 = v311 - 1;
            }
            while (__stlxr(v312, v310));
            if (!v312)
            {
              atomic_store(1u, v310);
              WTF::fastFree((WTF *)v310, v304);
            }
          }
        }
        else
        {
          *(_OWORD *)(v297 + 1344) = *(_OWORD *)buf;
          *(_QWORD *)&buf[8] = 0;
          *(_QWORD *)buf = 0;
          *(_BYTE *)(v297 + 1360) = 1;
        }
        WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)buf, v304);
        v298 = *(_DWORD *)(v297 + 16);
      }
    }
    if (v298 == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
    else
      *(_DWORD *)(v297 + 16) = v298 - 1;
  }
  if ((v290 || (*(unsigned int (**)(_QWORD))(**((_QWORD **)v713 + 1) + 112))(*((_QWORD *)v713 + 1)))
    && !v672)
  {
    (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)v713 + 1) + 16))(*((_QWORD *)v713 + 1), v285);
    if (v713)
    {
      v347 = *((_QWORD *)v713 + 1);
      if ((*(_WORD *)(v347 + 557) >> 5) - 3 <= 1)
      {
        if ((*(_WORD *)(v347 + 557) & 0x200) != 0 && (*(_DWORD *)(v347 + 130) & 0x400) == 0)
        {
          WebCore::MemoryCache::remove(v125, (WebCore::CachedResource *)v347);
          v347 = *((_QWORD *)v713 + 1);
        }
        v599 = *(_QWORD *)(v347 + 400);
        if (v599)
        {
          v600 = (const WebCore::ResourceError *)(v599 + 320);
        }
        else
        {
          std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)buf);
          v600 = (const WebCore::ResourceError *)&WebCore::CachedResource::resourceError(void)const::emptyError;
        }
        WebCore::ResourceError::ResourceError((WebCore::ResourceError *)buf, v600);
        if (v717 != 3 && (_BYTE)v717)
        {
          makeUnexpected<WebCore::ResourceError &>((uint64_t)v679, (uint64_t)buf);
          std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)v679);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v646);
        }
        else
        {
          v601 = v709;
          if (v709)
            *(_DWORD *)v709 += 2;
          v699 = v710;
          v700 = v711;
          v702 = 0;
          v703 = 2;
          v705 = 1;
          v697 = 0;
          v698 = 0;
          v679[0] = 0;
          v679[1] = v601;
          *(_OWORD *)&v679[2] = v710;
          *(_OWORD *)&v679[4] = v711;
          LODWORD(v699) = v710 & 0xFFFFFFFE;
          v701 = 0;
          v680[0] = 0;
          WORD2(v680[1]) = 2;
          LODWORD(v680[1]) = 0;
          v704 = 0;
          cf[0] = 0;
          LOBYTE(cf[1]) = 1;
          std::experimental::fundamentals_v3::expected<WebCore::CachedResourceHandle<WebCore::CachedResource>,WebCore::ResourceError>::expected((uint64_t)v670, (uint64_t *)v679);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v679, v602);
          WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)&v697, v603);
        }
        WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)buf, v604);
        v288 = 0;
LABEL_1192:
        v51 = v674;
        v186 = (_DWORD *)v671;
        goto LABEL_648;
      }
    }
  }
  v348 = v285[9];
  if (v348)
  {
    v349 = *(_QWORD *)(v348 + 8);
    if (v349)
    {
      if (!*(_BYTE *)(v349 + 3387))
      {
        v388 = *((_QWORD *)v713 + 1);
        if ((*(_BYTE *)(v388 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v388 + 160));
          *(_BYTE *)(v388 + 344) |= 1u;
        }
        if ((WTF::URL::protocolIs() & 1) == 0)
        {
          v389 = *((_QWORD *)v713 + 1);
          if ((*(_BYTE *)(v389 + 344) & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v389 + 160));
            *(_BYTE *)(v389 + 344) |= 1u;
          }
          WTF::RobinHoodHashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)(v285 + 2), v389 + 160, (uint64_t)buf);
        }
      }
    }
  }
  v350 = v285 + 8;
  v351 = *((_QWORD *)v713 + 1);
  v352 = (WTF::StringImpl **)(v351 + 160);
  if ((*(_BYTE *)(v351 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v351 + 160));
    *(_BYTE *)(v351 + 344) |= 1u;
  }
  v353 = *v350;
  if (*v350
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v350, 8u, 0), (v353 = *v350) != 0))
  {
    v354 = *(_DWORD *)(v353 - 8);
  }
  else
  {
    v354 = 0;
  }
  v355 = *((_DWORD *)*v352 + 4);
  if (v355 < 0x100)
    v356 = WTF::StringImpl::hashSlowCase(*v352);
  else
    v356 = v355 >> 8;
  v357 = 0;
  for (i = 1; ; ++i)
  {
    v359 = v356 & v354;
    v360 = (WTF::StringImpl **)(v353 + 16 * v359);
    v361 = *v360;
    if (!*v360)
    {
      if (v357)
      {
        *v357 = 0;
        v357[1] = 0;
        --*(_DWORD *)(*v350 - 16);
        v360 = v357;
      }
      v379 = *v352;
      if (*v352)
        *(_DWORD *)v379 += 2;
      *v360 = v379;
      v364 = v675;
      if (v713)
        v380 = (WebCore::CachedResource *)*((_QWORD *)v713 + 1);
      else
        v380 = 0;
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)v360 + 1, v380);
      v381 = *v350;
      if (*v350)
        v382 = *(_DWORD *)(v381 - 12) + 1;
      else
        v382 = 1;
      *(_DWORD *)(v381 - 12) = v382;
      v383 = *v350;
      if (*v350)
        v384 = *(_DWORD *)(v383 - 12);
      else
        v384 = 0;
      v385 = (*(_DWORD *)(v383 - 16) + v384);
      v386 = *(unsigned int *)(v383 - 4);
      if (v386 > 0x400)
      {
        if (v386 > 2 * v385)
          goto LABEL_634;
      }
      else
      {
        if (3 * v386 > 4 * v385)
          goto LABEL_634;
        if (!(_DWORD)v386)
        {
          v387 = 8;
LABEL_681:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::CachedResourceHandle<WebCore::CachedResource>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CachedResourceHandle<WebCore::CachedResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v350, v387, (uint64_t)v360);
          goto LABEL_634;
        }
      }
      v387 = (_DWORD)v386 << (6 * *(_DWORD *)(v383 - 12) >= (2 * v386));
      goto LABEL_681;
    }
    if (v361 != (WTF *)-1)
    {
      v360 = v357;
      if (WTF::equal(v361, *v352, v231))
        break;
    }
    v356 = i + v359;
    v357 = v360;
  }
  v362 = (uint64_t *)(v353 + 16 * v359 + 8);
  if (v713)
    v363 = (WebCore::CachedResource *)*((_QWORD *)v713 + 1);
  else
    v363 = 0;
  v364 = v675;
  WebCore::CachedResourceHandleBase::setResource(v362, v363);
LABEL_634:
  v365 = *((_QWORD *)v364 + 35);
  ++*(_DWORD *)v365;
  v366 = *(_QWORD *)(v365 + 16);
  v367 = *((_QWORD *)v713 + 1);
  if ((*(_BYTE *)(v367 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v367 + 160));
    *(_BYTE *)(v367 + 344) |= 1u;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)(v367 + 160));
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v366 + 1152))(v366, buf);
  v368 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  v51 = v674;
  if (v368)
  {
    if (*(_DWORD *)v368 == 2)
      WTF::StringImpl::destroy(v368, v230);
    else
      *(_DWORD *)v368 -= 2;
  }
  if (!*(_DWORD *)v365)
  {
    __break(0xC471u);
    JUMPOUT(0x1943952E0);
  }
  --*(_DWORD *)v365;
  v369 = v713;
  if (v713)
  {
    v370 = v670;
    do
      v371 = __ldaxr((unsigned int *)v369);
    while (__stlxr(v371 + 1, (unsigned int *)v369));
    *v670 = (uint64_t)v369;
    v372 = *((_QWORD *)v369 + 1);
    if (v372)
    {
      v679[0] = (WTF::StringImpl *)v670;
      ++*(_DWORD *)(v372 + 548);
      v373 = *(_QWORD *)(v372 + 488);
      if (v373)
      {
        if (*(_QWORD *)(v373 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v372 + 464), (uint64_t *)v679, (uint64_t)buf);
      }
    }
  }
  else
  {
    v370 = v670;
    *v670 = 0;
  }
  v288 = 0;
  *((_DWORD *)v370 + 20) = 0;
LABEL_648:
  if (v186[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v186 + 120))(v186);
  else
    --v186[2];
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v713, v230);
LABEL_651:
  if (*(_DWORD *)v51 == 1)
  {
    WebCore::Page::~Page(v51);
    WTF::fastFree(v398, v399);
  }
  else
  {
    --*(_DWORD *)v51;
  }
LABEL_653:
  if (v288)
  {
    WebCore::ResourceRequest::~ResourceRequest(v288, v262);
    WTF::fastFree(v374, v375);
  }
  do
  {
LABEL_655:
    v376 = __ldaxr(v18);
    v377 = v376 - 1;
  }
  while (__stlxr(v377, v18));
  if (!v377)
  {
    atomic_store(1u, v18);
    v475 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v475 = off_1E31FE290;
    v475[1] = v18;
    *(_QWORD *)buf = v475;
    WTF::ensureOnMainThread();
    v476 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v476)
      (*(void (**)(uint64_t))(*(_QWORD *)v476 + 8))(v476);
  }
LABEL_657:
  result = v709;
  v709 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v262);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::MemoryCache::sessionResourceMap(WTF *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;

  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0xC471u);
    JUMPOUT(0x1943975B8);
  }
  if ((WTF::isMainThread(a1) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1943975D8);
  }
  v4 = *((_QWORD *)a1 + 42);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(_QWORD *)(v4 + 16 * v9);
    if (v10 == a2)
      return *(_QWORD *)(v4 + 16 * v9 + 8);
    v12 = 1;
    while (v10)
    {
      v9 = ((_DWORD)v9 + v12) & v5;
      v10 = *(_QWORD *)(v4 + 16 * v9);
      ++v12;
      if (v10 == a2)
        return *(_QWORD *)(v4 + 16 * v9 + 8);
    }
  }
  return 0;
}

void WebCore::ContentRuleListResults::~ContentRuleListResults(WebCore::ContentRuleListResults *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  WTF *v5;
  unsigned int v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  char v12;

  WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, a2);
  v4 = *((_DWORD *)this + 9);
  if (v4)
  {
    v8 = 152 * v4;
    v9 = (WTF::StringImpl **)(*((_QWORD *)this + 3) + 112);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v3);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *((unsigned int *)v9 - 2);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E336E388[v11])(&v12, v9 - 13);
      *((_DWORD *)v9 - 2) = -1;
      v9 += 19;
      v8 -= 152;
    }
    while (v8);
  }
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, v3);
  }
  v6 = *((_DWORD *)this + 5);
  if (v6)
    WTF::VectorDestructor<true,WebCore::ContentExtensions::ModifyHeadersAction>::destruct(*((_QWORD *)this + 1), (void *)(*((_QWORD *)this + 1) + 48 * v6));
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, v3);
  }
}

WTF::StringImpl *WebCore::UserContentProvider::processContentRuleListsForLoad@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const WTF::StringImpl **a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, WTF::URL *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  WebCore::ContentExtensions::ContentExtensionsBackend *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  WebCore::ContentExtensions::ContentExtensionsBackend *v20;
  WTF::URL *v21;
  uint64_t v22;
  const WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t (**v28)();
  WTF::StringImpl *result;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  const WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  WTF *v40;
  unsigned int v41;
  WTF::StringImpl *v42;
  _QWORD *v43;
  int v44;
  char v45[8];
  WTF *v46;
  int v47;
  _QWORD v48[19];
  WTF *v49[5];
  _BYTE v50[9];

  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = (WebCore::ContentExtensions::ContentExtensionsBackend *)v13;
  v15 = *(_QWORD *)(a5 + 16);
  if (v15
    && (v16 = *(_QWORD *)(v15 + 8)) != 0
    && ((v17 = *(_QWORD *)(*(_QWORD *)(v16 + 128) + 8), v18 = a5, v17 == v16)
     || (v17 ? (v19 = *(_BYTE *)(v17 + 144) == 0) : (v19 = 0),
         v19 && (v18 = *(_QWORD *)(*(_QWORD *)(v17 + 280) + 88)) != 0)))
  {
    v44 = a4;
    v20 = (WebCore::ContentExtensions::ContentExtensionsBackend *)v13;
    v21 = a6;
    v22 = a2;
    v23 = a3;
    *(_DWORD *)(v18 + 24) += 2;
    if ((*(_BYTE *)(v18 + 1056) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v18 + 872));
      *(_BYTE *)(v18 + 1056) |= 1u;
    }
    v24 = a7;
    v25 = v18;
    if ((WTF::URL::hasSpecialScheme((WTF::URL *)(v18 + 872)) & 1) == 0)
    {
      if ((*(_BYTE *)(a5 + 1056) & 1) == 0)
      {
        WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a5 + 872));
        *(_BYTE *)(a5 + 1056) |= 1u;
      }
      v25 = v18;
      if ((*(_BYTE *)(a5 + 880) & 2) != 0)
      {
        ++*(_DWORD *)(a5 + 24);
        if (*(_DWORD *)(v18 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        else
          --*(_DWORD *)(v18 + 24);
        v25 = a5;
      }
    }
    v26 = *(unsigned __int8 *)(v25 + 3432);
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    if (v26)
      v28 = off_1E3402D48;
    else
      v28 = off_1E3402D20;
    *v27 = v28;
    v27[1] = v25 + 3440;
    v48[0] = v27;
    a7 = v24;
    if (*(_DWORD *)(v25 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    else
      --*(_DWORD *)(v25 + 24);
    a3 = v23;
    a2 = v22;
    if (*(_DWORD *)(v18 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    else
      --*(_DWORD *)(v18 + 24);
    a6 = v21;
    v14 = v20;
    a4 = v44;
  }
  else
  {
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v39 = off_1E3402CF8;
    v48[0] = v39;
  }
  WebCore::ContentExtensions::ContentExtensionsBackend::processContentRuleListsForLoad(v14, a2, (uint64_t)a3, a4, a5, a6, v48, a7);
  result = (WTF::StringImpl *)v48[0];
  v48[0] = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  if ((a4 & 1) != 0)
  {
    v30 = *(_QWORD *)(a5 + 16);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
      {
        v32 = (unsigned int *)(v31 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
        v34 = *(_QWORD *)(*(_QWORD *)(v31 + 128) + 8);
        do
        {
          v35 = __ldaxr(v32);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v32));
        if (!v36)
        {
          atomic_store(1u, v32);
          v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v43 = off_1E31FE290;
          v43[1] = v32;
          v48[0] = v43;
          WTF::ensureOnMainThread();
          result = (WTF::StringImpl *)v48[0];
          v48[0] = 0;
          if (result)
            result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        }
        if (v34 == v31)
        {
          WebCore::ChromeClient::applyLinkDecorationFiltering(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 16), (uint64_t)v49);
          if ((WTF::equal(v49[0], *a3, v37) & 1) == 0)
          {
            v40 = v49[0];
            if (v49[0])
              *(_DWORD *)v49[0] += 2;
            v45[0] = 2;
            v46 = v40;
            v47 = 3;
            std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100]<WebCore::ContentExtensions::RedirectAction,WTF::URL&,0>((uint64_t)v48, (uint64_t)v45, (uint64_t)v49);
            v41 = *(_DWORD *)(a7 + 36);
            if (v41 == *(_DWORD *)(a7 + 32))
            {
              WTF::Vector<std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>>(a7 + 24, (unint64_t)v48);
            }
            else
            {
              std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::pair[abi:sn180100](*(_QWORD *)(a7 + 24) + 152 * v41, (uint64_t)v48);
              ++*(_DWORD *)(a7 + 36);
            }
            std::pair<WebCore::ContentExtensions::RedirectAction,WTF::URL>::~pair((uint64_t)v48, v42);
            if (v47 != -1)
              ((void (*)(_BYTE *, WTF **))off_1E3402D60[v47])(v50, &v46);
          }
          result = v49[0];
          v49[0] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
            else
              *(_DWORD *)result -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v4 = *(WTF **)result;
    v5 = *(_QWORD *)result + 32 * v2;
    v19 = result;
    do
    {
      v6 = *((unsigned int *)v4 + 7);
      if ((_DWORD)v6)
      {
        v13 = (WTF::StringImpl **)*((_QWORD *)v4 + 2);
        v14 = 8 * v6;
        v17 = v4;
        v18 = v5;
        do
        {
          v15 = *v13;
          *v13 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, a2);
            else
              *(_DWORD *)v15 -= 2;
          }
          ++v13;
          v14 -= 8;
          v5 = v18;
          result = v19;
          v4 = v17;
        }
        while (v14);
      }
      v7 = (WTF *)*((_QWORD *)v4 + 2);
      if (v7)
      {
        *((_QWORD *)v4 + 2) = 0;
        *((_DWORD *)v4 + 6) = 0;
        v11 = v4;
        v12 = v5;
        WTF::fastFree(v7, a2);
        v5 = v12;
        v4 = v11;
        result = v19;
      }
      v8 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v9 = v4;
          v10 = v5;
          WTF::StringImpl::destroy(v8, a2);
          v5 = v10;
          v4 = v9;
          result = v19;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v4 = (WTF *)((char *)v4 + 32);
    }
    while (v4 != (WTF *)v5);
  }
  v3 = *(WTF **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    v16 = result;
    WTF::fastFree(v3, a2);
    return v16;
  }
  return result;
}

uint64_t WebCore::Quirks::shouldDisableFetchMetadata(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (*(_BYTE *)(v3 + 243))
  {
    if (*(_BYTE *)(v3 + 242))
      goto LABEL_5;
    return 0;
  }
  if ((*(_QWORD *)(v3 + 688) & 0x80000) == 0)
    return 0;
LABEL_5:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v20;
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v5 = *(_QWORD *)(v5 + 8);
  if (*(_BYTE *)(v5 + 3362) || *(_BYTE *)(v5 + 3405))
  {
    while (1)
    {
      v16 = *(_QWORD *)(v5 + 528);
      if (!v16)
        break;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        break;
      v18 = *(_QWORD *)(v17 + 120);
      if (!v18)
        break;
      v19 = *(_QWORD *)(v18 + 8);
      if (!v19)
        break;
      v5 = *(_QWORD *)(*(_QWORD *)(v19 + 40) + 8);
    }
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 528);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 + 128) + 8);
        if (v8 && *(_BYTE *)(v8 + 144) == 0)
        {
          v10 = *(_QWORD *)(v8 + 296);
          if (v10)
            v5 = v10;
        }
      }
    }
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, (const WTF::URL *)(v5 + 736));
  v13 = WTF::equal(v20, v4, v11);
  v14 = v20;
  v20 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v12);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v13;
}

uint64_t *WebCore::FrameLoader::outgoingReferrer@<X0>(WebCore::FrameLoader *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v4;
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  result = WebCore::FrameLoader::nonSrcdocFrame((uint64_t *)this, &v11);
  v4 = v11;
  if (v11)
  {
    v5 = *(_DWORD **)(*(_QWORD *)(v11 + 280) + 160);
    if (v5)
      *v5 += 2;
    *a2 = v5;
    v11 = 0;
    v6 = (unsigned int *)(v4 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
      *v10 = (uint64_t)off_1E31FE290;
      v10[1] = (uint64_t)v6;
      v12 = v10;
      WTF::ensureOnMainThread();
      result = v12;
      v12 = 0;
      if (result)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    }
  }
  else
  {
    v9 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v9 += 2;
    *a2 = v9;
  }
  return result;
}

uint64_t WebCore::SecurityPolicy::generateOriginHeader@<X0>(int a1@<W0>, WebCore::ThreadableBlobRegistry *a2@<X1>, uint64_t a3@<X2>, uint64_t (***a4)(_QWORD, uint64_t)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  char v12;
  char *v13;

  if (a1 == 7)
  {
LABEL_2:
    v7 = *(unsigned int *)(a3 + 32);
    if ((_DWORD)v7 != -1)
    {
      v13 = &v12;
      ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v7])(&v13, a3 + 8);
      if (WTF::protocolIs() && (WTF::URL::protocolIs() & 1) == 0)
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_4:
      v8 = *(unsigned int *)(a3 + 32);
      if ((_DWORD)v8 == 1)
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
      if ((_DWORD)v8 != -1)
      {
        v13 = &v12;
        v9 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v8])(&v13, a3 + 8);
        if (!MEMORY[0x19AEA53F4](*v9, "file", 4) || !*(_BYTE *)(a3 + 59))
          return WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(a3 + 8), a5);
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
      }
    }
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::RobinHoodHashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v11);
  }
  else
  {
    switch(a1)
    {
      case 1:
        return WTF::StringImpl::createWithoutCopyingNonEmpty();
      case 2:
      case 5:
        goto LABEL_2;
      case 3:
        if ((WebCore::SecurityOrigin::canRequest(a3, a2, a4) & 1) != 0)
          goto LABEL_4;
        break;
      default:
        goto LABEL_4;
    }
    return WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
}

WTF::StringImpl *WTF::RobinHoodHashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl **v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  int v20;
  __int128 v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  WTF::StringImpl *result;
  char v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  __int128 v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF *v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  int v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int v50;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  WTF **v58;
  const WTF::StringImpl *v59;
  char v60;
  WTF::StringImpl *v61;
  int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  WTF **v69;
  const WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  char v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  WTF::StringImpl *v88[5];

  v3 = (WTF::StringImpl **)a2;
  v6 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  if (10 * v5 >= (unint64_t)(9 * v6) || *(_BYTE *)(a1 + 20) && v6 <= 2 * (int)v5)
  {
    if ((_DWORD)v6)
      v50 = 2 * v6;
    else
      v50 = 8;
    v51 = *(WTF **)a1;
    v52 = WTF::fastZeroedMalloc((WTF *)(40 * v50));
    *(_QWORD *)a1 = v52;
    *(_DWORD *)(a1 + 8) = v50;
    v54 = (~(v52 << 32) + v52) ^ ((unint64_t)(~(v52 << 32) + v52) >> 22);
    v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
    v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
    *(_DWORD *)(a1 + 16) = (v56 >> 31) ^ v56;
    *(_BYTE *)(a1 + 20) = 0;
    if ((_DWORD)v6)
    {
      v57 = 0;
      v83 = v6;
      do
      {
        v58 = (WTF **)((char *)v51 + 40 * v57);
        v88[0] = 0;
        WTF::URL::invalidate((WTF::URL *)v88);
        v60 = WTF::equal(*v58, v88[0], v59);
        v61 = v88[0];
        v88[0] = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
            WTF::StringImpl::destroy(v61, v53);
          else
            *(_DWORD *)v61 -= 2;
        }
        if ((v60 & 1) == 0)
        {
          v62 = *(_DWORD *)(a1 + 8);
          v63 = *(_DWORD *)(a1 + 16);
          v64 = *((_DWORD *)*v58 + 4);
          if (v64 < 0x100)
            v65 = WTF::StringImpl::hashSlowCase(*v58);
          else
            v65 = v64 >> 8;
          v85 = 0;
          v66 = v62 - 1;
          v67 = v65 ^ v63;
          while (1)
          {
            v68 = v67 & v66;
            v69 = (WTF **)(*(_QWORD *)a1 + 40 * (v67 & v66));
            v88[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v88);
            v72 = WTF::equal(*v69, v88[0], v70);
            v73 = v88[0];
            v88[0] = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2)
                WTF::StringImpl::destroy(v73, v71);
              else
                *(_DWORD *)v73 -= 2;
            }
            if ((v72 & 1) != 0)
              break;
            v74 = *((_DWORD *)*v69 + 4);
            if (v74 < 0x100)
              v75 = WTF::StringImpl::hashSlowCase(*v69);
            else
              v75 = v74 >> 8;
            v76 = (v68 + v62 - ((v75 ^ v63) & v66)) & v66;
            v77 = v85;
            if (v85 > v76)
            {
              std::swap[abi:sn180100]<WTF::URL>((uint64_t)v51 + 40 * v57, v69);
              v77 = v76;
            }
            v67 = v68 + 1;
            v85 = v77 + 1;
          }
          WTF::GenericHashTraits<WTF::URL>::assignToEmpty<WTF::URL,WTF::URL>((uint64_t)v69, (uint64_t *)v51 + 5 * v57);
          v6 = v83;
        }
        v78 = *v58;
        *v58 = 0;
        v3 = (WTF::StringImpl **)a2;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
            WTF::StringImpl::destroy(v78, v53);
          else
            *(_DWORD *)v78 -= 2;
        }
        ++v57;
      }
      while (v57 != v6);
      goto LABEL_84;
    }
    if (v51)
    {
LABEL_84:
      WTF::fastFree(v51, v53);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
      goto LABEL_3;
    }
    LODWORD(v6) = 8;
  }
LABEL_3:
  v7 = *(_DWORD *)(a1 + 16);
  v8 = *((_DWORD *)*v3 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*v3);
  else
    v9 = v8 >> 8;
  v10 = 0;
  v11 = v6;
  v12 = v6 - 1;
  v13 = v9 ^ v7;
  while (1)
  {
    v14 = v13 & v12;
    v15 = *(WTF **)a1;
    v16 = *(_QWORD *)a1 + 40 * (v13 & v12);
    v88[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v88);
    v20 = WTF::equal(*(WTF **)v16, v88[0], v17);
    v22 = v88[0];
    v88[0] = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v18);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (v20)
      break;
    v23 = *(_DWORD *)(*(_QWORD *)v16 + 16);
    if (v23 < 0x100)
      v24 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v16);
    else
      v24 = v23 >> 8;
    v25 = (v14 + v11 - ((v24 ^ v7) & v12)) & v12;
    if (v10 > v25)
    {
      if (v10 >= 0x80)
        *(_BYTE *)(a1 + 20) = 1;
      v79 = *(WTF **)v16;
      v32 = (_QWORD *)((char *)v15 + 40 * v14);
      v84 = v32[1];
      v80 = v32[2];
      v82 = v32[3];
      *(_QWORD *)&v21 = v32[4];
      v81 = v21;
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_QWORD *)(v16 + 32) = 0;
      WTF::IdentityHashTranslator<WTF::HashTraits<WTF::URL>,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::URL,WTF::URL const&>(v16, a2);
      v33 = (v14 + 1) & v12;
      v34 = *(WTF **)a1;
      v35 = (WTF::StringImpl **)(*(_QWORD *)a1 + 40 * v33);
      if ((WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v35) & 1) != 0)
      {
        v37 = v79;
      }
      else
      {
        v37 = v79;
        do
        {
          v38 = *((_DWORD *)*v35 + 4);
          if (v38 < 0x100)
            v39 = WTF::StringImpl::hashSlowCase(*v35);
          else
            v39 = v38 >> 8;
          if (++v25 > (((_DWORD)v33 + v11 - ((v39 ^ v7) & v12)) & v12))
          {
            v40 = *v35;
            v41 = (_QWORD *)((char *)v34 + 40 * v33);
            *(_QWORD *)&v43 = v82;
            *(_QWORD *)&v42 = v84;
            *((_QWORD *)&v42 + 1) = v80;
            *((_QWORD *)&v44 + 1) = *((_QWORD *)&v81 + 1);
            *((_QWORD *)&v43 + 1) = v81;
            v45 = v41[1];
            v46 = v41[2];
            v47 = v41[3];
            v48 = v41[4];
            *v35 = v37;
            v37 = v40;
            v25 = (v33 + v11 - ((v39 ^ v7) & v12)) & v12;
            *(_OWORD *)(v41 + 1) = v42;
            *(_OWORD *)(v41 + 3) = v43;
            v84 = v45;
            v80 = v46;
            v82 = v47;
            *(_QWORD *)&v44 = v48;
            v81 = v44;
          }
          v33 = ((_DWORD)v33 + 1) & v12;
          v34 = *(WTF **)a1;
          v35 = (WTF::StringImpl **)(*(_QWORD *)a1 + 40 * v33);
        }
        while ((WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(v35) & 1) == 0);
      }
      result = *v35;
      *v35 = v37;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v36);
        else
          *(_DWORD *)result -= 2;
      }
      v49 = (_QWORD *)((char *)v34 + 40 * v33);
      v49[1] = v84;
      v49[2] = v80;
      v49[3] = v82;
      v49[4] = v81;
      goto LABEL_29;
    }
    if (v24 == v9)
    {
      result = (WTF::StringImpl *)WTF::equal(*(WTF **)v16, *(const WTF::StringImpl **)a2, v19);
      if ((result & 1) != 0)
      {
        v27 = 0;
        goto LABEL_18;
      }
    }
    v13 = v14 + 1;
    ++v10;
  }
  if (v10 >= 0x80)
    *(_BYTE *)(a1 + 20) = 1;
  v29 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v29 += 2;
  result = *(WTF::StringImpl **)v16;
  *(_QWORD *)v16 = v29;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  v30 = *(_OWORD *)(a2 + 8);
  v31 = (char *)v15 + 40 * v14;
  *(_OWORD *)(v31 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v31 + 8) = v30;
LABEL_29:
  ++*(_DWORD *)(a1 + 12);
  v27 = 1;
LABEL_18:
  v28 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v28;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::URL,WTF::URL,WTF::IdentityExtractor,WTF::DefaultHash<WTF::URL>,WTF::HashTraits<WTF::URL>,WTF::HashTraits<WTF::URL>>::isEmptyBucket(WTF **a1)
{
  const WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v7 = 0;
  WTF::URL::invalidate((WTF::URL *)&v7);
  v4 = WTF::equal(*a1, v7, v2);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

uint64_t WebCore::CachedFont::load(uint64_t this, WebCore::CachedResourceLoader *a2)
{
  *(_WORD *)(this + 557) |= 0x400u;
  return this;
}

void WebCore::CachedImage::load(WebCore::CachedImage *this, WebCore::CachedResourceLoader *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = (unsigned int *)*((_QWORD *)a2 + 9);
  if (v4)
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5)
    {
      v12 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v5);
      v4 = v12;
      if (v12)
      {
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }
    else
    {
      v4 = 0;
    }
  }
  v6 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v10 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v10)
      {
        v15 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v10));
        v6 = v15;
      }
      v11 = *(WTF **)(v6 + 16);
      if (v11)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v14 = v6;
        WTF::fastFree(v11, a2);
        v6 = v14;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)a2 + 9);
  if (v9)
  {
    v9 = *(_QWORD *)(v9 + 8);
    if (v9)
      v9 = (*(_QWORD *)(*(_QWORD *)(v9 + 680) + 680) >> 41) & 0x40;
  }
  *((_BYTE *)this + 720) = *((_BYTE *)this + 720) & 0xBF | v9;
  if ((*((_BYTE *)this + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedImage *)((char *)this + 160));
    *((_BYTE *)this + 344) |= 1u;
  }
  if (*((_BYTE *)a2 + 272) || WTF::URL::protocolIs())
    WebCore::CachedResource::load(this, a2);
  else
    *(_WORD *)((char *)this + 557) &= ~0x400u;
}

__n128 WTF::IdentityHashTranslator<WTF::HashTraits<WTF::URL>,WTF::DefaultHash<WTF::URL>>::translate<WTF::URL,WTF::URL,WTF::URL const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t WebCore::serializedOriginsMatch(WebCore *this, const WebCore::SecurityOrigin *a2, const WebCore::SecurityOrigin *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  const WTF::StringImpl **v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  const WTF::StringImpl **v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int16 v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  WebCore::TextResourceDecoder *v30;
  const WTF::String *v31;
  char v32;
  char *v33;

  if (this == a2)
    return 1;
  v6 = *((unsigned int *)this + 8);
  v7 = *((_DWORD *)a2 + 8);
  if ((_DWORD)v6 == 1)
  {
    v28 = v7 != 1;
LABEL_21:
    v29 = v6 == 1;
    return v29 ^ v28;
  }
  if (v7 == 1)
  {
    v28 = 0;
    goto LABEL_21;
  }
  if ((_DWORD)v6 == -1)
    goto LABEL_24;
  v33 = &v32;
  v8 = ((uint64_t (*)(char **, char *, const WebCore::SecurityOrigin *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v33, (char *)this + 8, a3);
  v9 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v9 == -1)
    goto LABEL_24;
  v10 = (WTF **)v8;
  v33 = &v32;
  v11 = (const WTF::StringImpl **)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(&v33, (char *)a2 + 8);
  result = WTF::equal(*v10, *v11, v12);
  if (!(_DWORD)result)
    return result;
  v13 = *((unsigned int *)this + 8);
  if ((_DWORD)v13 == -1)
    goto LABEL_24;
  v33 = &v32;
  v14 = (_QWORD *)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v13])(&v33, (char *)this + 8);
  if (MEMORY[0x19AEA53F4](*v14, "file", 4))
  {
    v29 = *((_BYTE *)this + 59) == 0;
    v28 = *((_BYTE *)a2 + 59) != 0;
    return v29 ^ v28;
  }
  v15 = *((unsigned int *)this + 8);
  if ((_DWORD)v15 == -1)
    goto LABEL_24;
  v33 = &v32;
  v16 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v15])(&v33, (char *)this + 8);
  v17 = *((unsigned int *)a2 + 8);
  if ((_DWORD)v17 == -1)
    goto LABEL_24;
  v18 = (WTF **)v16;
  v33 = &v32;
  v19 = (const WTF::StringImpl **)((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v17])(&v33, (char *)a2 + 8);
  result = WTF::equal(*v18, *v19, v20);
  if (!(_DWORD)result)
    return result;
  v21 = *((unsigned int *)this + 8);
  if ((_DWORD)v21 == -1
    || (v33 = &v32,
        v22 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v21])(&v33, (char *)this + 8), v23 = *((unsigned int *)a2 + 8), (_DWORD)v23 == -1))
  {
LABEL_24:
    v30 = (WebCore::TextResourceDecoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::TextResourceDecoder::hasEqualEncodingForCharset(v30, v31);
  }
  v24 = v22;
  v33 = &v32;
  v25 = ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v23])(&v33, (char *)a2 + 8);
  v26 = v25;
  v27 = v25 & 0xFF0000;
  result = ((v24 & 0xFF0000) != 0) == ((v25 & 0xFF0000) != 0);
  if ((v24 & 0xFF0000) != 0)
  {
    if (v27)
      return (unsigned __int16)v24 == v26;
  }
  return result;
}

BOOL WebCore::TextResourceDecoder::hasEqualEncodingForCharset(WebCore::TextResourceDecoder *this, const WTF::String *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  uint64_t *v14;
  const char *v15[2];

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v6 = *((_DWORD *)this + 1);
  v7 = (char *)PAL::atomCanonicalTextEncodingName(v4, (const char *)v5);
  v8 = v7;
  v10 = v9;
  v15[0] = v7;
  v15[1] = v9;
  if (v9)
  {
    v7 = (char *)PAL::nonBackslashEncodings;
    if (PAL::nonBackslashEncodings)
    {
      if (*(_QWORD *)PAL::nonBackslashEncodings)
        v7 = (char *)WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v15);
    }
  }
  if (v6 == 2)
  {
    v14 = PAL::UTF8Encoding((PAL *)v7);
LABEL_20:
    v8 = (const char *)v14[1];
    goto LABEL_9;
  }
  if (!v10)
  {
    v14 = PAL::Latin1Encoding((PAL *)v7);
    goto LABEL_20;
  }
LABEL_9:
  v11 = (const char *)*((_QWORD *)this + 2);
  if (v8 && v11)
    return strcmp(v8, v11) == 0;
  else
    return v8 == v11;
}

void WebCore::FrameLoader::loadedResourceFromMemoryCache(WebCore::FrameLoader *this, WebCore::CachedResource *a2, WebCore::ResourceRequest *a3, WebCore::ResourceError *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  uint64_t *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  CFTypeRef v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  WebCore::HTTPHeaderMap *v28;
  const WTF::StringImpl *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v38[29];
  __int16 v39;
  CFTypeRef cf;
  char v41;
  Inspector::IdentifiersFactory *v42;
  char v43;
  _QWORD *v44;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      ++*(_DWORD *)v5;
      v10 = *((_QWORD *)this + 11);
      if (v10)
        ++*(_DWORD *)(v10 + 24);
      if ((*((_BYTE *)a2 + 130) & 1) == 0)
      {
        v11 = (char *)a2 + 160;
        if ((*((_BYTE *)a2 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
          *((_BYTE *)a2 + 344) |= 1u;
        }
        if ((WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v10 + 2680), (WTF::StringImpl **)a2 + 20, a3) & 1) == 0&& (*((_BYTE *)a2 + 556) & 0x1F) != 0)
        {
          if (!*(_BYTE *)(v5 + 345))
          {
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              WebCore::InspectorInstrumentation::didLoadResourceFromMemoryCacheImpl(*(WTF::StringImpl **)(*(_QWORD *)(v5 + 80) + 8), (WebCore::DocumentLoader *)v10, a2);
            v23 = (_QWORD *)(v10 + 2704);
            v24 = *(unsigned int *)(v10 + 2716);
            if ((_DWORD)v24 == *(_DWORD *)(v10 + 2712))
            {
              v25 = WTF::Vector<WebCore::ResourceRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)a2 + 160);
              v26 = *(_DWORD *)(v10 + 2716);
              v27 = *(_QWORD *)(v10 + 2704);
              v28 = WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)(v27 + 200 * v26), (const WebCore::ResourceRequestBase::RequestData *)v25);
              v30 = *(_DWORD **)(v25 + 152);
              if (v30)
                *v30 += 2;
              *((_QWORD *)v28 + 19) = v30;
              v31 = *(_DWORD **)(v25 + 160);
              if (v31)
                *v31 += 2;
              *((_QWORD *)v28 + 20) = v31;
              v32 = *(_DWORD **)(v25 + 168);
              if (v32)
                ++*v32;
              *((_QWORD *)v28 + 21) = v32;
              v33 = *(_QWORD *)(v25 + 176);
              *((_BYTE *)v28 + 184) = *(_BYTE *)(v25 + 184);
              *((_QWORD *)v28 + 22) = v33;
              v34 = *(const void **)(v25 + 192);
              *(_QWORD *)(v27 + 200 * v26 + 192) = v34;
              if (v34)
                CFRetain(v34);
            }
            else
            {
              WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(*v23 + 200 * v24), (WebCore::CachedResource *)((char *)a2 + 160));
            }
            ++*(_DWORD *)(v10 + 2716);
            if ((*((_BYTE *)a2 + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
              *((_BYTE *)a2 + 344) |= 1u;
            }
            if (*(_QWORD *)v11 && *(_DWORD *)(*(_QWORD *)v11 + 4))
              WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v10 + 2680, (WTF::StringImpl **)a2 + 20, v29, (uint64_t)v38);
            *(_BYTE *)(v5 + 346) = 1;
            goto LABEL_10;
          }
          v14 = *((_QWORD *)this + 2);
          if (!*((_QWORD *)a2 + 50))
          {
            v35 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
            if (v35 != -1)
            {
              v38[0] = &v42;
              v44 = v38;
              std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, WebCore::ResourceRequest *))(*(_QWORD *)v14 + 168))(v14, v10, a3))
          {
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              WebCore::InspectorInstrumentation::didLoadResourceFromMemoryCacheImpl(*(WTF::StringImpl **)(*(_QWORD *)(v5 + 80) + 8), (WebCore::DocumentLoader *)v10, a2);
            if ((*((_BYTE *)a2 + 344) & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::CachedResource *)((char *)a2 + 160));
              *((_BYTE *)a2 + 344) |= 1u;
            }
            if (*(_QWORD *)v11 && *(_DWORD *)(*(_QWORD *)v11 + 4))
              WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add(v10 + 2680, (WTF::StringImpl **)a2 + 20, v15, (uint64_t)v38);
          }
          else
          {
            v42 = 0;
            WebCore::FrameLoader::requestFromDelegate((uint64_t)this, (uint64_t)a3, (uint64_t *)&v42, (uint64_t)a4);
            v16 = (uint64_t *)*((_QWORD *)a2 + 50);
            if (!v16)
            {
              v36 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
              if (v36 != -1)
              {
                v38[0] = &v43;
                v44 = v38;
                std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
              }
              v16 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
            }
            WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v38, (const WebCore::ResourceResponseBase *)v16);
            v17 = (const void *)v16[30];
            cf = v17;
            if (v17)
              CFRetain(v17);
            v41 = *((_BYTE *)v16 + 248);
            v39 = v39 & 0xC3FF | 0x1000;
            v18 = *((_QWORD *)a2 + 50);
            if (v18)
              v19 = *(unsigned int *)(v18 + 400);
            else
              v19 = 0;
            WebCore::ResourceLoadNotifier::sendRemainingDelegateMessages((uint64_t)this + 32, v10, v42, a3, (uint64_t)v38, 0, v19, 0, a4);
            v21 = cf;
            cf = 0;
            if (v21)
              CFRelease(v21);
            WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v38, v20);
          }
        }
      }
      if (!v10)
      {
LABEL_12:
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::Page::~Page((WebCore::Page *)v5);
          WTF::fastFree(v12, v13);
        }
        else
        {
          --*(_DWORD *)v5;
        }
        return;
      }
LABEL_10:
      if (*(_DWORD *)(v10 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      else
        --*(_DWORD *)(v10 + 24);
      goto LABEL_12;
    }
  }
}

uint64_t WebCore::CachedCSSStyleSheet::textResourceDecoder(WebCore::CachedCSSStyleSheet *this)
{
  return *((_QWORD *)this + 82);
}

uint64_t WebCore::CachedResource::textResourceDecoder(WebCore::CachedResource *this)
{
  return 0;
}

uint64_t WebCore::CachedScript::textResourceDecoder(WebCore::CachedScript *this)
{
  return *((_QWORD *)this + 85);
}

uint64_t WebCore::FrameLoader::shouldUpgradeRequestforHTTPSOnly(WebCore::FrameLoader *this, const WTF::URL *a2, WebCore::ResourceRequest *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _BOOL4 v8;
  uint64_t v9;
  const WTF::StringImpl *v11;
  char v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  v5 = 96;
  if (!*((_QWORD *)this + 12))
    v5 = 88;
  v6 = *(_QWORD *)((char *)this + v5);
  if (v6)
    ++*(_DWORD *)(v6 + 24);
  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, a3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, a2);
    v12 = WTF::equal(v17, v16, v11);
    v8 = 1;
    if (v6 && (v12 & 1) != 0)
      v8 = (*(_WORD *)(v6 + 3514) & 8) == 0;
    v14 = v16;
    v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v17;
    v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v6)
    {
      v7 = *(_WORD *)(v6 + 3514);
      goto LABEL_10;
    }
    return 0;
  }
  if (!v6)
    return 0;
  v7 = *(_WORD *)(v6 + 3514);
  v8 = (v7 & 8) == 0;
LABEL_10:
  if ((v7 & 4) != 0)
    v9 = WTF::URL::protocolIs() & v8;
  else
    v9 = 0;
  if (*(_DWORD *)(v6 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  else
    --*(_DWORD *)(v6 + 24);
  return v9;
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPReferrer(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 60)
    {
      v6 = 0;
LABEL_6:
      v7 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v8 = v7 + 8;
      v9 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v8 != (_WORD *)v9)
      {
        *(v8 - 8) = *v8;
        *((_QWORD *)v8 - 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        v8 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v10 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v11 = *v10;
        v10 += 8;
        ++v6;
        if (v11 == 60)
          goto LABEL_6;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

_BYTE *WebCore::ResourceRequestBase::clearHTTPOrigin(_BYTE *this, WTF::StringImpl *a2)
{
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;

  v2 = this;
  v3 = this[184];
  if ((v3 & 1) == 0)
  {
    this = (_BYTE *)WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v3 = v2[184] | 1;
    v2[184] = v3;
  }
  v4 = *((unsigned int *)v2 + 27);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)*((_QWORD *)v2 + 12);
    if (*v5 == 53)
    {
      v6 = 0;
LABEL_6:
      v7 = &v5[8 * v6];
      this = (_BYTE *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          v4 = *((unsigned int *)v2 + 27);
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v8 = v7 + 8;
      v9 = *((_QWORD *)v2 + 12) + 16 * v4;
      while (v8 != (_WORD *)v9)
      {
        *(v8 - 8) = *v8;
        *((_QWORD *)v8 - 1) = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        v8 += 8;
      }
      *((_DWORD *)v2 + 27) = v4 - 1;
      v3 = v2[184];
    }
    else
    {
      v6 = 0;
      v10 = v5 + 8;
      while (v4 - 1 != v6)
      {
        v11 = *v10;
        v10 += 8;
        ++v6;
        if (v11 == 53)
          goto LABEL_6;
      }
    }
  }
  v2[184] = v3 & 0xFD;
  return this;
}

uint64_t WebCore::TileController::setNeedsDisplay(WebCore::TileController *this)
{
  uint64_t v2;

  WebCore::TileGrid::setNeedsDisplay(*((_QWORD **)this + 6));
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 2) + 48));
}

_QWORD *WebCore::TileGrid::setNeedsDisplay(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  _BOOL4 v24;

  v1 = (uint64_t)this;
  v2 = this[4];
  if (!v2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_60:
    v4 = v2 + 24 * v3;
    goto LABEL_17;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 24 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 24 * v3;
    goto LABEL_60;
  }
  v5 = this[4];
  if ((_DWORD)v3)
  {
    v6 = 24 * v3;
    v5 = this[4];
    while (1)
    {
      v7 = !*(_DWORD *)v5 && *(_DWORD *)(v5 + 4) == 0x80000000;
      v8 = v7;
      if (*(_DWORD *)v5 != 0x80000000 && !v8)
        break;
      v5 += 24;
      v6 -= 24;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_17:
  if (v2)
    v10 = v2 + 24 * *(unsigned int *)(v2 - 4);
  else
    v10 = 0;
  while (v5 != v10)
  {
    this = (_QWORD *)WebCore::TileGrid::rectForTileIndex((WebCore::TileGrid *)v1, *(const WebCore::IntPoint **)v5, HIDWORD(*(_QWORD *)v5));
    if (v11 < 1 || v12 < 1)
      goto LABEL_41;
    v15 = *(_DWORD *)(v1 + 48);
    v14 = *(_DWORD *)(v1 + 52);
    v16 = v15 < 1 || v14 < 1;
    if (!v16
      && ((v17 = *(_DWORD *)(v1 + 40), v17 + v15 > (int)this) ? (v18 = v17 < (int)this + v11) : (v18 = 0),
          v18
       && ((v19 = *(_DWORD *)(v1 + 44), v19 + v14 > SHIDWORD(this)) ? (v20 = v19 < HIDWORD(this) + v12) : (v20 = 0),
           v20
        && (this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 104))(*(_QWORD *)(v5 + 8))) != 0)))
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 72))(*(_QWORD *)(v5 + 8));
      v21 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24);
      if (v21)
      {
        this = *(_QWORD **)(v21 + 8);
        if (this)
          this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
      }
    }
    else
    {
LABEL_41:
      *(_BYTE *)(v5 + 20) = 1;
    }
    v22 = v5 + 24;
    v5 = v4;
    if (v22 != v4)
    {
      v5 = v22;
      while (1)
      {
        v23 = !*(_DWORD *)v5 && *(_DWORD *)(v5 + 4) == 0x80000000;
        v24 = v23;
        if (*(_DWORD *)v5 != 0x80000000 && !v24)
          break;
        v5 += 24;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t *WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::add(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = (uint64_t *)WTF::fastZeroedMalloc((WTF *)0x50),
        *a2 = (uint64_t)(result + 2),
        *((_DWORD *)result + 3) = 8,
        *(_DWORD *)(*a2 - 8) = 7,
        *(_DWORD *)(*a2 - 16) = 0,
        *(_DWORD *)(*a2 - 12) = 0,
        (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = ~(*a3 << 32) + *a3;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_14;
      }
      if (v15 == -1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*a2 - 16);
      v9 = *a3;
      v14 = v24;
    }
  }
  *a3 = 0;
  result = (uint64_t *)*v14;
  *v14 = v9;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 24))(result);
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_13;
LABEL_16:
    result = WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::expand(a2, v14);
    v14 = result;
    v18 = *a2;
    if (*a2)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_13;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_16;
LABEL_13:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_14:
  *v5 = (uint64_t)v14;
  v5[1] = v22;
  *((_BYTE *)v5 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::rehash(a1, v4, a2);
}

void WebCore::Layout::LineBuilder::layoutInlineContent(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;
  uint64_t v12;
  WTF *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;
  unsigned int v23;
  unint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int32x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  void *v45;
  __n128 v46;
  uint64_t v47;
  __int128 *v48;
  float v49;
  float v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _BOOL4 v76;
  float v77;
  WebCore::Layout::Box *v78;
  uint64_t LineStyle;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  WebCore::Layout::Box *v85;
  uint64_t v86;
  float v87;
  int *v88;
  __int128 v89;
  uint64_t *v90;
  __int128 v91;
  WTF *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  BOOL v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  float v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  WTF *v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t *v134;
  int v135;
  WTF *v136;
  uint64_t v137;
  unsigned int v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  WebCore::Layout::PlacedFloats::Item *v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  void *v149;
  WTF *v150;
  WTF *v151;
  unint64_t v152;
  unint64_t v153;
  WTF *v154;
  unint64_t v155;
  WTF *v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  void *v160;
  _QWORD *v161;
  void *__src;
  __int128 v163;
  uint64_t v164;
  WTF *v165[2];
  _QWORD v166[150];
  int v167;
  float v168;
  BOOL v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  _BYTE v173[32];
  char v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  int v179;
  WTF *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  WTF *v184;
  uint64_t v185;

  v5 = (uint64_t)a2;
  if (*((_BYTE *)a3 + 17))
    v8 = *((_BYTE *)a3 + 40) == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = *((unsigned __int8 *)a3 + 16) | 0x100;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  if (*(_BYTE *)(a1 + 1752))
  {
    v10 = *(WTF **)(a1 + 1736);
    if (v10)
    {
      *(_QWORD *)(a1 + 1736) = 0;
      *(_DWORD *)(a1 + 1744) = 0;
      WTF::fastFree(v10, a2);
    }
    *(_BYTE *)(a1 + 1752) = 0;
  }
  if (*((_BYTE *)a3 + 40))
  {
    v11 = *a3;
    *(_DWORD *)(a1 + 1727) = *(_DWORD *)((char *)a3 + 15);
    *(_OWORD *)(a1 + 1712) = v11;
    v12 = *((unsigned int *)a3 + 9);
    *(_QWORD *)(a1 + 1744) = 0;
    *(_QWORD *)(a1 + 1736) = 0;
    *(_DWORD *)(a1 + 1748) = v12;
    if ((_DWORD)v12)
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
        goto LABEL_224;
      }
      v160 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(a1 + 1744) = v12;
      *(_QWORD *)(a1 + 1736) = v160;
      memcpy(v160, *((const void **)a3 + 3), 8 * *((unsigned int *)a3 + 9));
    }
    *(_BYTE *)(a1 + 1752) = 1;
  }
  if (*(_DWORD *)(a1 + 1848))
  {
    v141 = *(unsigned int *)(a1 + 1852);
    v142 = *(WebCore::Layout::PlacedFloats::Item **)(a1 + 1840);
    if ((_DWORD)v141)
    {
      v146 = 120 * v141;
      do
      {
        WebCore::Layout::PlacedFloats::Item::~Item(v142);
        v142 = (WebCore::Layout::PlacedFloats::Item *)(v147 + 120);
        v146 -= 120;
      }
      while (v146);
      *(_DWORD *)(a1 + 1852) = 0;
      v142 = *(WebCore::Layout::PlacedFloats::Item **)(a1 + 1840);
    }
    if (v142)
    {
      *(_QWORD *)(a1 + 1840) = 0;
      *(_DWORD *)(a1 + 1848) = 0;
      WTF::fastFree(v142, a2);
    }
  }
  if (*(_DWORD *)(a1 + 1864))
  {
    if (*(_DWORD *)(a1 + 1868))
      *(_DWORD *)(a1 + 1868) = 0;
    v156 = *(WTF **)(a1 + 1856);
    if (v156)
    {
      *(_QWORD *)(a1 + 1856) = 0;
      *(_DWORD *)(a1 + 1864) = 0;
      WTF::fastFree(v156, a2);
    }
  }
  if (*(_DWORD *)(a1 + 1888))
  {
    if (*(_DWORD *)(a1 + 1892))
      *(_DWORD *)(a1 + 1892) = 0;
    v13 = *(WTF **)(a1 + 1880);
    if ((WTF *)(a1 + 1896) != v13)
    {
      if (!v13)
      {
LABEL_171:
        *(_QWORD *)(a1 + 1880) = a1 + 1896;
        *(_DWORD *)(a1 + 1888) = 1;
        goto LABEL_21;
      }
      *(_QWORD *)(a1 + 1880) = 0;
      *(_DWORD *)(a1 + 1888) = 0;
      WTF::fastFree(v13, a2);
      v13 = *(WTF **)(a1 + 1880);
    }
    if (v13)
      goto LABEL_21;
    goto LABEL_171;
  }
LABEL_21:
  v14 = 0;
  *(_BYTE *)(a1 + 1872) = 0;
  *(_BYTE *)(a1 + 1876) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1704) = 0;
  *(_BYTE *)(a1 + 1924) = 0;
  *(_BYTE *)(a1 + 1928) = 0;
  *(_DWORD *)(a1 + 1832) = 0;
  v15 = *(_QWORD *)(a1 + 1760);
  if (*(_BYTE *)(v15 + 104))
    v14 = *(_QWORD *)(v15 + 96) <= *(_QWORD *)(v15 + 112);
  v16 = (_QWORD *)(a1 + 1880);
  *(_BYTE *)(a1 + 1785) = v14;
  v17 = *(_QWORD *)v5;
  if (*(_QWORD *)v5 != *(_QWORD *)(v5 + 16) || *(_QWORD *)(v5 + 8) != *(_QWORD *)(v5 + 24))
  {
    if (*(_QWORD *)(a1 + 1400) <= v17)
      goto LABEL_224;
    v18 = *(_QWORD *)(a1 + 1392) + 24 * v17;
    v19 = *(_QWORD *)v18;
    if ((*(_WORD *)(v18 + 21) & 0xF) == 6)
    {
      v20 = (WTF *)v166;
      v165[0] = (WTF *)v166;
      v166[0] = v19;
      v21 = *(WTF **)(a1 + 1768);
      v22 = *(WTF **)(*(_QWORD *)v18 + 80);
      v165[1] = (WTF *)0x100000002;
      v23 = 1;
    }
    else
    {
      v22 = *(WTF **)(v19 + 80);
      v21 = *(WTF **)(a1 + 1768);
      if (v21 == v22)
        goto LABEL_43;
      if (v21 == *((WTF **)v22 + 10))
      {
        v165[0] = v22;
        v165[1] = 0;
        LODWORD(v166[0]) = 0;
        BYTE4(v166[0]) = -1;
        *(_WORD *)((char *)v166 + 5) = 5;
        v105 = *(unsigned int *)(a1 + 1892);
        if ((_DWORD)v105 == *(_DWORD *)(a1 + 1888))
        {
          v140 = WTF::Vector<WebCore::Layout::InlineItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 1880, v105 + 1, (unint64_t)v165);
          v106 = *(_QWORD *)(a1 + 1880) + 24 * *(unsigned int *)(a1 + 1892);
          v107 = *(_OWORD *)v140;
          v108 = *(_QWORD *)(v140 + 16);
        }
        else
        {
          v106 = *v16 + 24 * v105;
          v107 = *(_OWORD *)v165;
          v108 = v166[0];
        }
        *(_QWORD *)(v106 + 16) = v108;
        *(_OWORD *)v106 = v107;
        ++*(_DWORD *)(a1 + 1892);
        goto LABEL_43;
      }
      v23 = 0;
      v20 = (WTF *)v166;
      v165[0] = (WTF *)v166;
      v165[1] = (WTF *)2;
    }
    v164 = v5;
    *(_QWORD *)&v163 = v9;
    if (v21 != v22)
    {
      do
      {
        v24 = v23;
        if (v23 == LODWORD(v165[1]))
        {
          v119 = v23 + 1;
          v120 = v24 + (v24 >> 2);
          if (v120 >= 0x10)
            v121 = v120 + 1;
          else
            v121 = 16;
          if (v121 <= v119)
            v122 = v24 + 1;
          else
            v122 = v121;
          __src = v165[0];
          if (v122 < 3)
          {
            v165[0] = (WTF *)v166;
            LODWORD(v165[1]) = 2;
            v124 = v166;
            v123 = (WTF *)v166;
          }
          else
          {
            v161 = v166;
            if (v122 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x19439A6A4);
            }
            v123 = (WTF *)WTF::fastMalloc((WTF *)(8 * v122));
            LODWORD(v165[1]) = v122;
            v165[0] = v123;
            v124 = v161;
          }
          memcpy(v123, __src, 8 * v24);
          if (v124 != __src && __src)
          {
            if (v165[0] == __src)
            {
              v165[0] = 0;
              LODWORD(v165[1]) = 0;
            }
            WTF::fastFree((WTF *)__src, a2);
          }
          v23 = HIDWORD(v165[1]);
          v25 = (char *)v165[0] + 8 * HIDWORD(v165[1]);
        }
        else
        {
          v25 = (char *)v165[0] + 8 * v23;
        }
        *(_QWORD *)v25 = v22;
        HIDWORD(v165[1]) = ++v23;
        v22 = (WTF *)*((_QWORD *)v22 + 10);
      }
      while (*(WTF **)(a1 + 1768) != v22);
      v20 = v165[0];
    }
    if (v23)
    {
      v26 = v23;
      v27 = *(_DWORD *)(a1 + 1892);
      v28 = 8 * v26;
      v29 = (char *)v20 - 8;
      do
      {
        *(_QWORD *)v173 = *(_QWORD *)&v29[v28];
        *(_QWORD *)&v173[12] = 0;
        *(_DWORD *)&v173[8] = 0;
        v173[20] = -1;
        *(_WORD *)&v173[21] = *(_WORD *)&v173[21] & 0xFE00 | 5;
        if (v27 == *(_DWORD *)(a1 + 1888))
        {
          v33 = WTF::Vector<WebCore::Layout::InlineItem,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 1880, v27 + 1, (unint64_t)v173);
          v30 = *(_QWORD *)(a1 + 1880) + 24 * *(unsigned int *)(a1 + 1892);
          v31 = *(_OWORD *)v33;
          v32 = *(_QWORD *)(v33 + 16);
        }
        else
        {
          v30 = *v16 + 24 * v27;
          v31 = *(_OWORD *)v173;
          v32 = *(_QWORD *)&v173[16];
        }
        *(_QWORD *)(v30 + 16) = v32;
        *(_OWORD *)v30 = v31;
        v27 = *(_DWORD *)(a1 + 1892) + 1;
        *(_DWORD *)(a1 + 1892) = v27;
        v28 -= 8;
      }
      while (v28);
      v20 = v165[0];
    }
    v5 = v164;
    LOWORD(v9) = v163;
    if (v166 != (_QWORD *)v20 && v20)
    {
      v165[0] = 0;
      LODWORD(v165[1]) = 0;
      WTF::fastFree(v20, a2);
    }
  }
LABEL_43:
  WebCore::Layout::Line::initialize(a1 + 8, (_DWORD *)(a1 + 1880), *(_BYTE *)(a1 + 1752) == 0);
  *(_OWORD *)(a1 + 1808) = *(_OWORD *)(v5 + 32);
  *(float *)(a1 + 1824) = WebCore::Layout::InlineFormattingUtils::computedTextIndent((uint64_t **)(*(_QWORD *)(a1 + 1760) + 40), (unint64_t)*(unsigned __int8 *)(a1 + 1792) << 32 != 0, v9, *(float *)(v5 + 40));
  WebCore::Layout::LineBuilder::floatAvoidingRect((uint64_t)v165, a1, v5 + 32, 0.0);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)v165;
  *(_BYTE *)(a1 + 1920) = v166[0];
  v35.i32[0] = *(_DWORD *)(a1 + 1824);
  v36 = *(float32x4_t *)(a1 + 1376);
  *(float *)(a1 + 1828) = v36.f32[0] - *(float *)(v5 + 32);
  v37 = vaddq_f32(v36, (float32x4_t)v35.u32[0]);
  v37.i32[2] = vsubq_f32(v36, (float32x4_t)vdupq_lane_s32(v35, 0)).i32[2];
  *(float32x4_t *)(a1 + 1376) = v37;
  if (!*((_BYTE *)a3 + 40))
    goto LABEL_50;
  v38 = *(_QWORD *)(v5 + 8);
  if (!v38)
    goto LABEL_50;
  v39 = *(_QWORD *)v5;
  if (*(_QWORD *)(a1 + 1400) <= *(_QWORD *)v5)
  {
LABEL_224:
    __break(1u);
LABEL_225:
    __break(0xC471u);
LABEL_226:
    JUMPOUT(0x19439A41CLL);
  }
  v40 = *(_QWORD *)(a1 + 1392);
  if (!v40
    || (v41 = (uint64_t *)(v40 + 24 * v39), v42 = *(_WORD *)((char *)v41 + 21), (v42 & 0xF) != 0)
    || (v43 = *(unsigned int *)(v40 + 24 * v39 + 12), v38 == v43))
  {
    v44 = *((_DWORD *)a3 + 2);
    *(_BYTE *)(a1 + 1876) = *((_BYTE *)a3 + 12);
    *(_DWORD *)(a1 + 1872) = v44;
  }
  else
  {
    v110 = v43 >= v38;
    v111 = v43 - v38;
    if (!v110)
    {
      __break(0xC471u);
      goto LABEL_226;
    }
    v112 = *v41;
    if ((*(_WORD *)(v112 + 12) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19439A43CLL);
    }
    v113 = *((_QWORD *)a3 + 1);
    v114 = v40 + 24 * v39;
    v115 = *(_DWORD *)(v114 + 16) + v38;
    v116 = *(_BYTE *)(v114 + 20);
    v117 = *(float *)&v113;
    if ((v113 & 0xFF00000000) == 0)
      v117 = 0.0;
    v118 = *(unsigned __int8 *)(a1 + 1704);
    *(_QWORD *)(a1 + 1680) = v112;
    *(float *)(a1 + 1688) = v117;
    *(_DWORD *)(a1 + 1692) = v111;
    *(_DWORD *)(a1 + 1696) = v115;
    *(_BYTE *)(a1 + 1700) = v116;
    *(_WORD *)(a1 + 1701) = v42 & 0x1B0 | (((v113 & 0xFF00000000) != 0) << 6);
    if (!v118)
      *(_BYTE *)(a1 + 1704) = 1;
  }
LABEL_50:
  WebCore::Layout::LineBuilder::placeInlineAndFloatContent((uint64_t)v173, (WebCore::Layout::InlineItem *)a1, v5, v34);
  v47 = *(unsigned int *)(a1 + 28);
  v48 = *(__int128 **)(a1 + 16);
  if ((_DWORD)v47)
    v49 = *((float *)v48 + 30 * v47 - 24) + *((float *)v48 + 30 * v47 - 23);
  else
    v49 = 0.0;
  v50 = (float)(v49 + *(float *)(a1 + 1344)) + *(float *)(a1 + 1352);
  v51 = v166;
  v165[0] = (WTF *)v166;
  LODWORD(v165[1]) = 10;
  if (v48 == (__int128 *)(a1 + 32))
  {
    if ((_DWORD)v47)
    {
      v52 = 120 * v47;
      v53 = v166;
      do
      {
        v54 = *v48;
        v55 = v48[1];
        v56 = v48[3];
        *((_OWORD *)v53 + 2) = v48[2];
        *((_OWORD *)v53 + 3) = v56;
        *(_OWORD *)v53 = v54;
        *((_OWORD *)v53 + 1) = v55;
        v46 = (__n128)v48[4];
        v57 = v48[5];
        v58 = v48[6];
        v53[14] = *((_QWORD *)v48 + 14);
        *((_OWORD *)v53 + 5) = v57;
        *((_OWORD *)v53 + 6) = v58;
        *((__n128 *)v53 + 4) = v46;
        v53 += 15;
        v48 = (__int128 *)((char *)v48 + 120);
        v52 -= 120;
      }
      while (v52);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = a1 + 32;
    v165[0] = (WTF *)v48;
    v143 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = 10;
    LODWORD(v165[1]) = v143;
  }
  *(_DWORD *)(a1 + 28) = 0;
  HIDWORD(v165[1]) = v47;
  v59 = *(_DWORD *)(a1 + 1312);
  v167 = v59;
  v168 = v50;
  if (*(_BYTE *)(a1 + 1304))
  {
    if (*(_BYTE *)(a1 + 1280))
      v109 = 0;
    else
      v109 = *(_QWORD *)(a1 + 1288) != 0;
    v169 = v109;
    v60 = *(_DWORD *)(a1 + 1296);
  }
  else
  {
    v169 = 0;
    v60 = 0;
  }
  LODWORD(v170) = v60;
  HIDWORD(v170) = *(_DWORD *)(a1 + 1272);
  v171 = *(_BYTE *)(a1 + 1348);
  v172 = *(_QWORD *)(a1 + 1320);
  if (*(_BYTE *)(a1 + 1792))
  {
    v61 = *(_OWORD *)&v173[16];
    *(_OWORD *)a4 = *(_OWORD *)v173;
    *(_OWORD *)(a4 + 16) = v61;
    v62 = a4 + 48;
    *(_QWORD *)(a4 + 32) = a4 + 48;
    *(_DWORD *)(a4 + 40) = 10;
    v63 = v165[0];
    if ((_QWORD *)v165[0] == v166)
    {
      if ((_DWORD)v47)
      {
        v64 = 120 * v47;
        do
        {
          v65 = *((_OWORD *)v51 + 5);
          *(_OWORD *)(v62 + 64) = *((_OWORD *)v51 + 4);
          *(_OWORD *)(v62 + 80) = v65;
          *(_OWORD *)(v62 + 96) = *((_OWORD *)v51 + 6);
          *(_QWORD *)(v62 + 112) = v51[14];
          v66 = *((_OWORD *)v51 + 1);
          *(_OWORD *)v62 = *(_OWORD *)v51;
          *(_OWORD *)(v62 + 16) = v66;
          v67 = *((_OWORD *)v51 + 3);
          *(_OWORD *)(v62 + 32) = *((_OWORD *)v51 + 2);
          *(_OWORD *)(v62 + 48) = v67;
          v62 += 120;
          v51 += 15;
          v64 -= 120;
        }
        while (v64);
      }
    }
    else
    {
      v165[0] = (WTF *)v166;
      *(_QWORD *)(a4 + 32) = v63;
      v144 = (int)v165[1];
      LODWORD(v165[1]) = 10;
      *(_DWORD *)(a4 + 40) = v144;
    }
    HIDWORD(v165[1]) = 0;
    *(_DWORD *)(a4 + 44) = v47;
    v68 = *(_QWORD *)(a1 + 1840);
    *(_QWORD *)(a1 + 1840) = 0;
    *(_QWORD *)(a4 + 1248) = v68;
    v69 = *(_QWORD *)(a1 + 1848);
    *(_QWORD *)(a1 + 1848) = 0;
    *(_QWORD *)(a4 + 1256) = v69;
    v70 = *(_QWORD *)(a1 + 1856);
    *(_QWORD *)(a1 + 1856) = 0;
    *(_QWORD *)(a4 + 1264) = v70;
    v71 = *(_QWORD *)(a1 + 1864);
    *(_QWORD *)(a1 + 1864) = 0;
    *(_QWORD *)(a4 + 1272) = v71;
    *(_BYTE *)(a4 + 1280) = 0;
    *(_DWORD *)(a4 + 1288) = 0;
    *(_DWORD *)(a4 + 1292) = v59;
    *(_DWORD *)(a4 + 1296) = 0;
    LODWORD(v70) = v176;
    *(_BYTE *)(a4 + 1304) = v177;
    *(_DWORD *)(a4 + 1300) = v70;
    *(_QWORD *)(a4 + 1308) = *(_QWORD *)(a1 + 1376);
    *(_BYTE *)(a4 + 1328) = 0;
    *(_BYTE *)(a4 + 1332) = 0;
    *(_BYTE *)(a4 + 1324) = 0;
    *(_QWORD *)(a4 + 1316) = 0;
    *(_QWORD *)(a4 + 1344) = 0;
    *(_QWORD *)(a4 + 1336) = 0;
    *(_BYTE *)(a4 + 1360) = 0;
    *(_QWORD *)(a4 + 1352) = 0;
    *(_WORD *)(a4 + 1368) = 257;
    *(_QWORD *)(a4 + 1376) = 0;
    *(_DWORD *)(a4 + 1384) = 0;
    *(_BYTE *)(a4 + 1392) = 0;
    *(_QWORD *)(a4 + 1400) = 0;
    *(_DWORD *)(a4 + 1408) = 0;
    *(_BYTE *)(a4 + 1412) = 0;
    *(_BYTE *)(a4 + 1416) = 0;
    goto LABEL_64;
  }
  v72 = *(_QWORD *)(v5 + 16);
  v73 = *(_QWORD *)&v173[16];
  if (v175)
    goto LABEL_75;
  if (*(_QWORD *)&v173[16] == v72)
  {
    v74 = 120 * v47;
    while (v74)
    {
      v75 = *((unsigned __int8 *)v165[0] + v74 - 120);
      v74 -= 120;
      if (v75 != 12)
        goto LABEL_108;
    }
    v73 = *(_QWORD *)(v5 + 16);
LABEL_75:
    LODWORD(v164) = 0;
    v76 = v73 == v72;
    goto LABEL_76;
  }
  if (!v72)
    goto LABEL_75;
  v101 = 24 * v72;
  v102 = *(_QWORD *)(v5 + 16);
  while (1)
  {
    if ((unint64_t)(v72 - 1) >= *(_QWORD *)(a1 + 1400))
      goto LABEL_224;
    v103 = *(_QWORD *)(a1 + 1392) + v101;
    v104 = *(_WORD *)(v103 - 3);
    v45 = (void *)((v104 & 0xFu) - 7);
    if (v45 >= 2
      && ((v104 & 0x3F) != 0x10 || (*(_DWORD *)(*(_QWORD *)(v103 - 24) + 56) & 0x28000000) == 0x8000000))
    {
      break;
    }
    v101 -= 24;
    if (!--v102)
      goto LABEL_75;
  }
  if (*(_QWORD *)&v173[16] != v102)
    goto LABEL_75;
LABEL_108:
  LODWORD(v164) = 1;
  v76 = 1;
LABEL_76:
  v77 = 0.0;
  if (!(_DWORD)v47)
  {
    LOBYTE(v84) = 0;
    goto LABEL_91;
  }
  v78 = *(WebCore::Layout::Box **)(a1 + 1768);
  if (*(_BYTE *)(a1 + 1752))
  {
    LineStyle = (uint64_t)v78 + 16;
LABEL_79:
    v80 = *(unsigned __int8 *)(a1 + 1728);
    v81 = *(unsigned __int8 *)(a1 + 1730);
    v82 = *(unsigned int *)(a1 + 1748);
    if (!(_DWORD)v82)
    {
      v16 = 0;
LABEL_81:
      v83 = 1;
      goto LABEL_82;
    }
    if (!(v82 >> 29))
    {
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v82));
      memcpy(v16, *(const void **)(a1 + 1736), 8 * *(unsigned int *)(a1 + 1748));
      goto LABEL_81;
    }
    goto LABEL_225;
  }
  LineStyle = WebCore::Layout::Box::firstLineStyle(v78);
  if (*(_BYTE *)(a1 + 1752))
    goto LABEL_79;
  v83 = 0;
  v81 = 0;
  v80 = 0;
LABEL_82:
  if ((*(_QWORD *)(LineStyle + 16) & 0x1C00000) == 0x1000000)
  {
    if (v80)
      v148 = 0;
    else
      v148 = v83;
    if (v148 == 1)
    {
      LOBYTE(v84) = v81 != 0;
LABEL_85:
      if (v16)
        WTF::fastFree((WTF *)v16, v45);
      goto LABEL_87;
    }
    WebCore::Layout::toString((uint64_t)&v180, (uint64_t)v165[0], HIDWORD(v165[1]));
    v157 = WTF::StringBuilder::operator WTF::StringView((uint64_t *)&v180);
    LOBYTE(v84) = WebCore::Layout::TextUtil::directionForTextContent(v157, v158);
    WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)&v180, v159);
  }
  else
  {
    v84 = (*(unsigned __int8 *)(LineStyle + 43) >> 2) & 1;
  }
  if (v83)
    goto LABEL_85;
LABEL_87:
  if (HIDWORD(v165[1]))
  {
    v85 = *(WebCore::Layout::Box **)(a1 + 1768);
    if (*(_BYTE *)(a1 + 1752))
      v86 = (uint64_t)v85 + 16;
    else
      v86 = WebCore::Layout::Box::firstLineStyle(v85);
    v46.n128_f32[0] = v168;
    WebCore::Layout::InlineFormattingUtils::horizontalAlignmentOffset(v86, (uint64_t)v165, v76, v46, *(float *)(a1 + 1384), *(float *)&v170);
    v77 = v87;
  }
LABEL_91:
  if (v171)
  {
    v180 = 0;
    v181 = 0;
    v125 = HIDWORD(v165[1]);
    if (HIDWORD(v165[1]))
    {
      v126 = WTF::fastMalloc((WTF *)HIDWORD(v165[1]));
      LODWORD(v181) = v125;
      v180 = (WTF *)v126;
      v127 = HIDWORD(v165[1]);
      v184 = 0;
      v185 = 0;
      if (HIDWORD(v165[1]))
      {
        if (HIDWORD(v165[1]) >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19439A6ACLL);
        }
        v128 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v165[1])));
        LODWORD(v185) = v127;
        v183 = 0;
        v184 = (WTF *)v128;
        if (HIDWORD(v165[1]))
        {
          v129 = 0;
          v130 = 0;
          v131 = 40;
          do
          {
            v132 = *((unsigned __int8 *)v165[0] + v131);
            if (v132 == 255)
            {
              ++v183;
              v130 = 1;
            }
            else if (v132 <= 0x7E)
            {
              v182 = *((_BYTE *)v165[0] + v131);
              if (HIDWORD(v181) == (_DWORD)v181)
              {
                WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char>((uint64_t)&v180, (unint64_t)&v182);
              }
              else
              {
                *((_BYTE *)v180 + HIDWORD(v181)) = v132;
                ++HIDWORD(v181);
              }
              v133 = HIDWORD(v185);
              if (HIDWORD(v185) == (_DWORD)v185)
              {
                v134 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v184, HIDWORD(v185) + 1, (unint64_t)&v183);
                v133 = HIDWORD(v185);
                v135 = HIDWORD(v185) + 1;
                v136 = v184;
                v137 = *v134;
              }
              else
              {
                v135 = HIDWORD(v185) + 1;
                v137 = v183;
                v136 = v184;
              }
              *((_QWORD *)v136 + v133) = v137;
              HIDWORD(v185) = v135;
            }
            ++v129;
            v131 += 120;
          }
          while (v129 < HIDWORD(v165[1]));
          v138 = HIDWORD(v181);
          if (HIDWORD(v181))
          {
            if (HIDWORD(v181) >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x19439A6BCLL);
            }
            v88 = (int *)WTF::fastMalloc((WTF *)(4 * HIDWORD(v181)));
            v139 = v138;
            goto LABEL_188;
          }
          v88 = 0;
LABEL_187:
          v139 = 0uLL;
LABEL_188:
          v163 = v139;
          ubidi_reorderVisual();
          if ((v130 & 1) != 0)
          {
            v152 = HIDWORD(v185);
            if (HIDWORD(v185))
            {
              v153 = 0;
              v154 = v184;
              do
              {
                if (v138 == v153)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19439A6C4);
                }
                v155 = v88[v153];
                if (v152 <= v155)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19439A6CCLL);
                }
                v88[v153++] = v155 + *((_QWORD *)v154 + v155);
                v152 = HIDWORD(v185);
              }
              while (v153 < HIDWORD(v185));
            }
          }
          if (v138)
          {
            v149 = (void *)WTF::fastMalloc((WTF *)(4 * v138));
            memcpy(v149, v88, 4 * v138);
          }
          else
          {
            v149 = 0;
          }
          v150 = v184;
          v89 = v163;
          if (v184)
          {
            v184 = 0;
            LODWORD(v185) = 0;
            WTF::fastFree(v150, v45);
            v89 = v163;
          }
          DWORD1(v89) = v138;
          v151 = v180;
          if (v180)
          {
            v180 = 0;
            LODWORD(v181) = 0;
            v163 = v89;
            WTF::fastFree(v151, v45);
            v89 = v163;
          }
          if (v149)
          {
            v163 = v89;
            WTF::fastFree((WTF *)v149, v45);
            v89 = v163;
          }
          goto LABEL_93;
        }
      }
    }
    else
    {
      v184 = 0;
      v185 = 0;
    }
    v88 = 0;
    v138 = 0;
    v130 = 0;
    goto LABEL_187;
  }
  v88 = 0;
  v89 = 0uLL;
LABEL_93:
  v90 = (uint64_t *)(a1 + 1380);
  v91 = *(_OWORD *)&v173[16];
  *(_OWORD *)a4 = *(_OWORD *)v173;
  *(_OWORD *)(a4 + 16) = v91;
  *(_QWORD *)(a4 + 32) = a4 + 48;
  *(_DWORD *)(a4 + 40) = 10;
  v92 = v165[0];
  if ((_QWORD *)v165[0] == v166)
  {
    v93 = HIDWORD(v165[1]);
    if (HIDWORD(v165[1]))
    {
      v163 = v89;
      memcpy((void *)(a4 + 48), v166, 120 * ((120 * (unint64_t)HIDWORD(v165[1]) - 120) / 0x78) + 120);
      *(_QWORD *)&v89 = v163;
    }
  }
  else
  {
    v165[0] = (WTF *)v166;
    *(_QWORD *)(a4 + 32) = v92;
    v145 = (int)v165[1];
    v93 = HIDWORD(v165[1]);
    LODWORD(v165[1]) = 10;
    *(_DWORD *)(a4 + 40) = v145;
  }
  HIDWORD(v165[1]) = 0;
  *(_DWORD *)(a4 + 44) = v93;
  v94 = *(_QWORD *)(a1 + 1840);
  *(_QWORD *)(a1 + 1840) = 0;
  *(_QWORD *)(a4 + 1248) = v94;
  v95 = *(_QWORD *)(a1 + 1848);
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a4 + 1256) = v95;
  v96 = *(_QWORD *)(a1 + 1856);
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a4 + 1264) = v96;
  v97 = *(_QWORD *)(a1 + 1864);
  *(_QWORD *)(a1 + 1864) = 0;
  *(_QWORD *)(a4 + 1272) = v97;
  *(_BYTE *)(a4 + 1280) = *(_BYTE *)(a1 + 1920);
  *(float *)(a4 + 1288) = v77;
  *(_DWORD *)(a4 + 1292) = v167;
  *(float *)(a4 + 1296) = v77 + v168;
  LODWORD(v96) = v176;
  *(_BYTE *)(a4 + 1304) = v177;
  *(_DWORD *)(a4 + 1300) = v96;
  *(_DWORD *)(a4 + 1308) = *(_DWORD *)(a1 + 1376);
  v98 = *v90;
  *(_QWORD *)(a4 + 1312) = *v90;
  *(float *)(a4 + 1320) = *(float *)(a1 + 1808) + *(float *)(a1 + 1828);
  LODWORD(v96) = *(_DWORD *)(a1 + 1924);
  *(_BYTE *)(a4 + 1328) = *(_BYTE *)(a1 + 1928);
  *(_DWORD *)(a4 + 1324) = v96;
  *(_BYTE *)(a4 + 1332) = !v169;
  *(_QWORD *)(a4 + 1336) = v170;
  *(_QWORD *)(a4 + 1344) = v88;
  *(_QWORD *)(a4 + 1352) = v89;
  *(_BYTE *)(a4 + 1360) = v84;
  *(_BYTE *)(a4 + 1368) = *(_BYTE *)(a1 + 1752) ^ 1;
  *(_BYTE *)(a4 + 1369) = v164;
  v99 = v178;
  v178 = 0;
  *(_QWORD *)(a4 + 1376) = v99;
  *(_DWORD *)(a4 + 1384) = v179;
  *(_BYTE *)(a4 + 1392) = v174;
  *(_QWORD *)(a4 + 1400) = v172;
  *(_DWORD *)(a4 + 1408) = 0;
  if (*(_OWORD *)v173 == *(_OWORD *)&v173[16])
  {
    *(_QWORD *)(a4 + 1412) = COERCE_UNSIGNED_INT(*(float *)&v98 + *(float *)(a1 + 1832)) | 0x100000000;
  }
  else
  {
    *(_BYTE *)(a4 + 1412) = 0;
    *(_BYTE *)(a4 + 1416) = 0;
  }
  v100 = v165[0];
  if (v166 != (_QWORD *)v165[0] && v165[0])
  {
    v165[0] = 0;
    LODWORD(v165[1]) = 0;
    WTF::fastFree(v100, v45);
  }
LABEL_64:
  if (v178)
    WTF::fastFree((WTF *)(v178 - 16), v45);
}

void WebCore::Layout::LineBuilder::floatAvoidingRect(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  _QWORD *v7;
  const WebCore::Layout::FloatingContext *v8;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  char v35;
  int v36;
  char v37;

  if (*(_BYTE *)(a2 + 1792)
    || (v8 = *(const WebCore::Layout::FloatingContext **)(a2 + 1800), !*(_DWORD *)(*((_QWORD *)v8 + 2) + 20)))
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    WebCore::Layout::InlineFormattingUtils::floatConstraintsForLine(*(float *)(a3 + 4), *(float *)(a3 + 12), v8, (uint64_t)&v34);
    v10 = v35;
    if (v35 || v37)
    {
      v11 = *(float *)a3 - a4;
      v12 = *(float *)(a3 + 8) + a4;
      if (v35)
      {
        v13 = (float)v34 * 0.015625;
        v14 = fmaxf(v12 - (float)(v13 - v11), 0.0);
        if (v13 <= v11)
        {
          v10 = 0;
        }
        else
        {
          v11 = (float)v34 * 0.015625;
          v12 = v14;
          v10 = 2;
        }
      }
      v15 = *(_DWORD *)(a3 + 4);
      v16 = *(_DWORD *)(a3 + 12);
      if (v37)
      {
        v17 = (float)v36 * 0.015625;
        if (v17 < (float)(v11 + v12))
        {
          if (v11 >= v17)
            v17 = v11;
          v12 = fmaxf(v12 + (float)(v17 - (float)(v11 + v12)), 0.0);
          v10 |= 4u;
        }
      }
      *(float *)a1 = v11 + a4;
      *(_DWORD *)(a1 + 4) = v15;
      *(float *)(a1 + 8) = v12 - a4;
      *(_DWORD *)(a1 + 12) = v16;
    }
    else
    {
      v10 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    *(_BYTE *)(a1 + 16) = v10;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(a2 + 1760) + 48);
  if ((*(_BYTE *)(*(_QWORD *)(*v7 + 40) + 234) & 0x20) != 0)
  {
    v18 = v7[8];
    if (*(_BYTE *)(v18 + 104))
    {
      v19 = *(_DWORD *)(v18 + 48);
      v20 = *(_DWORD *)(v18 + 56);
      v21 = __OFADD__(v19, v20);
      v22 = v19 + v20;
      v23 = (v19 >> 31) + 0x7FFFFFFF;
      if (!v21)
        v23 = v22;
      v24 = (float)v23 * 0.015625;
      v25 = *(float *)(v18 + 64);
      v26 = *(float *)a1;
      v27 = fmodf(*(float *)a1 + v24, v25);
      v28 = fmodf(v25 - v27, v25);
      v29 = *(float *)(a1 + 8);
      v30 = fmodf(v24 + (float)(v26 + v29), v25);
      v31 = fmaxf(v29 - v28, 0.0);
      v32 = fmaxf(v31 + (float)((float)((float)((float)(v26 + v28) + v31) - v30) - (float)((float)(v26 + v28) + v31)), 0.0);
      if (v32 > 0.0 && *(float *)(a1 + 12) > 0.0)
      {
        v33 = *(float *)(a1 + 4) + 0.0;
        *(float *)a1 = v26 + v28;
        *(float *)(a1 + 4) = v33;
        *(float *)(a1 + 8) = v32;
      }
    }
  }
}

float WebCore::Layout::InlineFormattingUtils::computedTextIndent(uint64_t **a1, char a2, __int16 a3, float a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v14;
  int v16;
  double v17;
  float v18;
  float v19;
  double v20;
  int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  char v28;

  v6 = **a1;
  if ((a3 & 0xFF00) == 0)
  {
    v7 = *(unsigned __int16 *)(v6 + 12);
    if ((v7 & 0x10) == 0)
    {
      v8 = *(_QWORD *)(v6 + 40);
      if ((*(_BYTE *)(v8 + 232) & 0x80) != 0)
        return 0.0;
      goto LABEL_4;
    }
    if ((v7 & 0x400) != 0)
    {
      v16 = (v7 >> 11) & 1;
    }
    else
    {
      v24 = **a1;
      v23 = WebCore::Layout::ElementBox::firstInFlowChild(*(WebCore::Layout::ElementBox **)(v6 + 80));
      v6 = v24;
      v16 = v23 == v24;
    }
    goto LABEL_22;
  }
  v8 = *(_QWORD *)(v6 + 40);
  v11 = *(_DWORD *)(v8 + 232);
  if ((v11 & 0x40) != 0)
  {
    v16 = a3 != 0;
LABEL_22:
    v8 = *(_QWORD *)(v6 + 40);
    if ((*(_BYTE *)(v8 + 232) & 0x80) != 0)
    {
      v12 = 0.0;
      if ((v16 & 1) != 0)
        return v12;
    }
    else
    {
      v12 = 0.0;
      if (!v16)
        return v12;
    }
    goto LABEL_4;
  }
  v12 = 0.0;
  if ((v11 & 0x80) == 0)
    return v12;
LABEL_4:
  v25 = 0.0;
  v28 = 0;
  v26 = *(_BYTE *)(v8 + 180);
  v9 = v26;
  v10 = *(unsigned __int8 *)(v8 + 181);
  v27 = *(_BYTE *)(v8 + 181);
  if (v26 - 2 >= 9)
  {
    if (v26 == 11)
    {
      v25 = *(float *)(v8 + 176);
      WebCore::Length::ref((int *)&v25);
      v9 = v26;
      v10 = v27;
    }
  }
  else
  {
    v28 = *(_BYTE *)(v8 + 182);
    v25 = *(float *)(v8 + 176);
  }
  if (v9 != 4 || v10 != 0)
  {
    if (v9 == 3)
    {
      v12 = 0.0;
      if ((a2 & 1) != 0)
        return v12;
    }
LABEL_27:
    v17 = a4 * 64.0;
    if (v17 >= 2147483650.0)
    {
      v18 = 33554000.0;
    }
    else if (v17 <= -2147483650.0)
    {
      v18 = -33554000.0;
    }
    else
    {
      v18 = (float)(int)v17 * 0.015625;
    }
    switch(v9)
    {
      case 4:
        v19 = v25;
        if (!v28)
          v19 = (float)SLODWORD(v25);
        break;
      case 3:
        v22 = v25;
        if (!v28)
          v22 = (float)SLODWORD(v25);
        v19 = (float)(v18 * v22) / 100.0;
        break;
      case 11:
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v25, v18);
        break;
      default:
        v21 = 0;
LABEL_37:
        v12 = (float)v21 * 0.015625;
        if (v9 == 11)
          WebCore::Length::deref((WebCore::Length *)&v25);
        return v12;
    }
    v20 = v19 * 64.0;
    if (v20 >= 2147483650.0)
    {
      v21 = 0x7FFFFFFF;
    }
    else if (v20 <= -2147483650.0)
    {
      v21 = 0x80000000;
    }
    else
    {
      v21 = (int)v20;
    }
    v9 = v26;
    goto LABEL_37;
  }
  v14 = v25;
  if (!v28)
    v14 = (float)SLODWORD(v25);
  v12 = 0.0;
  if (v14 != 0.0)
    goto LABEL_27;
  return v12;
}

uint64_t WebCore::Layout::Line::initialize(uint64_t result, _DWORD *a2, char a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91[3];

  v4 = result;
  *(_BYTE *)(result + 1341) = a3;
  v5 = (uint64_t *)(result + 1328);
  v6 = *(_QWORD *)(result + 1328);
  if (v6)
  {
    *v5 = 0;
    result = WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *(_DWORD *)(v4 + 1336) = 0;
  *(_DWORD *)(v4 + 1344) = 0;
  *(_QWORD *)(v4 + 1312) = 0;
  *(_BYTE *)(v4 + 1340) = 0;
  *(_BYTE *)(v4 + 1342) = 0;
  *(_DWORD *)(v4 + 1304) = 0;
  if (*(_DWORD *)(v4 + 1360))
  {
    if (*(_DWORD *)(v4 + 1364))
      *(_DWORD *)(v4 + 1364) = 0;
    result = *(_QWORD *)(v4 + 1352);
    if (result)
    {
      *(_QWORD *)(v4 + 1352) = 0;
      *(_DWORD *)(v4 + 1360) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  if (*(_DWORD *)(v4 + 16))
  {
    if (*(_DWORD *)(v4 + 20))
      *(_DWORD *)(v4 + 20) = 0;
    result = *(_QWORD *)(v4 + 8);
    if (v4 + 24 != result)
    {
      if (!result)
      {
LABEL_17:
        *(_QWORD *)(v4 + 8) = v4 + 24;
        *(_DWORD *)(v4 + 16) = 10;
        goto LABEL_9;
      }
      *(_QWORD *)(v4 + 8) = 0;
      *(_DWORD *)(v4 + 16) = 0;
      WTF::fastFree((WTF *)result, a2);
      result = *(_QWORD *)(v4 + 8);
    }
    if (result)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_9:
  *(_BYTE *)(v4 + 1248) = 0;
  *(_BYTE *)(v4 + 1232) = 0;
  *(_BYTE *)(v4 + 1240) = 0;
  *(_QWORD *)(v4 + 1256) = 0;
  *(_DWORD *)(v4 + 1252) = 0;
  *(_BYTE *)(v4 + 1272) = 0;
  *(_BYTE *)(v4 + 1296) = 0;
  *(_BYTE *)(v4 + 1320) = 0;
  *(_BYTE *)(v4 + 1324) = 0;
  v7 = a2[3];
  if (v7)
  {
    v8 = (_QWORD *)(v4 + 8);
    v9 = *(_BYTE **)a2;
    v10 = &v9[24 * v7];
    do
    {
      while (1)
      {
        v11 = *(_QWORD *)v9;
        v12 = *(_QWORD *)v9 + 16;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 24) + 8) + 68) & 8) != 0)
          break;
        v13 = *(_DWORD *)(v4 + 20);
        if (v13)
        {
          v14 = *(float *)(*v8 + 120 * v13 - 96) + *(float *)(*v8 + 120 * v13 - 92);
          v15 = *(unsigned int *)(v4 + 20);
        }
        else
        {
          v15 = 0;
          v14 = 0.0;
        }
        LOBYTE(v82) = 11;
        *((_QWORD *)&v82 + 1) = v11;
        *(_QWORD *)&v83 = v12;
        *((_QWORD *)&v83 + 1) = LODWORD(v14);
        LOBYTE(v84) = 4;
        DWORD1(v84) = 0;
        BYTE8(v84) = v9[20];
        LOBYTE(v85) = 0;
        LOBYTE(v86) = 0;
        BYTE8(v86) = 0;
        LOBYTE(v87) = 0;
        BYTE8(v87) = 0;
        LOBYTE(v89) = 0;
        if (v13 == *(_DWORD *)(v4 + 16))
        {
          result = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 8, (void *)(v15 + 1), (unint64_t)&v82);
          v48 = *(_QWORD *)(v4 + 8) + 120 * *(unsigned int *)(v4 + 20);
          v50 = *(_OWORD *)(result + 80);
          v49 = *(_OWORD *)(result + 96);
          v51 = *(_OWORD *)(result + 64);
          *(_QWORD *)(v48 + 112) = *(_QWORD *)(result + 112);
          *(_OWORD *)(v48 + 80) = v50;
          *(_OWORD *)(v48 + 96) = v49;
          *(_OWORD *)(v48 + 64) = v51;
          v52 = *(_OWORD *)result;
          v53 = *(_OWORD *)(result + 16);
          v54 = *(_OWORD *)(result + 48);
          *(_OWORD *)(v48 + 32) = *(_OWORD *)(result + 32);
          *(_OWORD *)(v48 + 48) = v54;
          *(_OWORD *)v48 = v52;
          *(_OWORD *)(v48 + 16) = v53;
        }
        else
        {
          v16 = *v8 + 120 * v15;
          v17 = v82;
          v18 = v83;
          v19 = v85;
          *(_OWORD *)(v16 + 32) = v84;
          *(_OWORD *)(v16 + 48) = v19;
          *(_OWORD *)v16 = v17;
          *(_OWORD *)(v16 + 16) = v18;
          v20 = v86;
          v21 = v87;
          v22 = v88;
          *(_QWORD *)(v16 + 112) = v89;
          *(_OWORD *)(v16 + 80) = v21;
          *(_OWORD *)(v16 + 96) = v22;
          *(_OWORD *)(v16 + 64) = v20;
        }
        ++*(_DWORD *)(v4 + 20);
        v9 += 24;
        if (v9 == v10)
          return result;
      }
      v23 = *(_QWORD *)(*(_QWORD *)v4 + 8);
      if (*(_DWORD *)(v23 + 8))
      {
        v62 = *(_QWORD *)(v23 + 40);
        v63 = *(_DWORD *)(v62 - 8);
        v64 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
        v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
        v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
        v67 = v63 & ((v66 >> 31) ^ v66);
        if (*(_QWORD *)(v62 + 16 * v67) != v11)
        {
          v68 = 1;
          do
            v67 = ((_DWORD)v67 + v68++) & v63;
          while (*(_QWORD *)(v62 + 16 * v67) != v11);
        }
        v24 = (_QWORD *)(v62 + 16 * v67 + 8);
      }
      else
      {
        v24 = (_QWORD *)(v11 + 104);
      }
      v25 = (_DWORD *)*v24;
      v26 = v25[4];
      v27 = v25[8];
      LODWORD(v25) = v25[12];
      v28 = __OFADD__(v27, (_DWORD)v25);
      v29 = v27 + (_DWORD)v25;
      v30 = (v27 >> 31) + 0x7FFFFFFF;
      if (v28)
        v29 = v30;
      v28 = __OFADD__(v26, v29);
      v31 = v26 + v29;
      v32 = (v26 >> 31) + 0x7FFFFFFF;
      if (v28)
        v33 = v32;
      else
        v33 = v31;
      v34 = *(_DWORD *)(v4 + 20);
      if (v34)
      {
        v35 = *(float *)(*v8 + 120 * v34 - 96) + *(float *)(*v8 + 120 * v34 - 92);
        v36 = *(unsigned int *)(v4 + 20);
      }
      else
      {
        v36 = 0;
        v35 = 0.0;
      }
      v37 = (float)v33 * 0.015625;
      LOBYTE(v82) = 11;
      *((_QWORD *)&v82 + 1) = v11;
      *(_QWORD *)&v83 = v12;
      *((float *)&v83 + 2) = v35;
      *((float *)&v83 + 3) = v37;
      LOBYTE(v84) = 4;
      DWORD1(v84) = 0;
      BYTE8(v84) = v9[20];
      LOBYTE(v85) = 0;
      LOBYTE(v86) = 0;
      BYTE8(v86) = 0;
      LOBYTE(v87) = 0;
      BYTE8(v87) = 0;
      LOBYTE(v89) = 0;
      if (v34 == *(_DWORD *)(v4 + 16))
      {
        result = WTF::Vector<WebCore::Layout::Line::Run,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4 + 8, (void *)(v36 + 1), (unint64_t)&v82);
        v55 = *(_QWORD *)(v4 + 8) + 120 * *(unsigned int *)(v4 + 20);
        v57 = *(_OWORD *)(result + 80);
        v56 = *(_OWORD *)(result + 96);
        v58 = *(_OWORD *)(result + 64);
        *(_QWORD *)(v55 + 112) = *(_QWORD *)(result + 112);
        *(_OWORD *)(v55 + 80) = v57;
        *(_OWORD *)(v55 + 96) = v56;
        *(_OWORD *)(v55 + 64) = v58;
        v59 = *(_OWORD *)result;
        v60 = *(_OWORD *)(result + 16);
        v61 = *(_OWORD *)(result + 48);
        *(_OWORD *)(v55 + 32) = *(_OWORD *)(result + 32);
        *(_OWORD *)(v55 + 48) = v61;
        *(_OWORD *)v55 = v59;
        *(_OWORD *)(v55 + 16) = v60;
      }
      else
      {
        v38 = *v8 + 120 * v36;
        v39 = v82;
        v40 = v83;
        v41 = v85;
        *(_OWORD *)(v38 + 32) = v84;
        *(_OWORD *)(v38 + 48) = v41;
        *(_OWORD *)v38 = v39;
        *(_OWORD *)(v38 + 16) = v40;
        v42 = v86;
        v43 = v87;
        v44 = v88;
        *(_QWORD *)(v38 + 112) = v89;
        *(_OWORD *)(v38 + 80) = v43;
        *(_OWORD *)(v38 + 96) = v44;
        *(_OWORD *)(v38 + 64) = v42;
      }
      ++*(_DWORD *)(v4 + 20);
      v45 = v37 + v35;
      if (*(float *)(v4 + 1304) >= (float)(v37 + v35))
        v45 = *(float *)(v4 + 1304);
      *(float *)(v4 + 1304) = v45;
      v46 = *(_QWORD *)v9;
      v47 = 0.0;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 24) + 8) + 68) & 8) != 0)
      {
        v69 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (*(_DWORD *)(v69 + 8))
        {
          v75 = *(_QWORD *)(v69 + 40);
          v76 = *(_DWORD *)(v75 - 8);
          v77 = (~(v46 << 32) + v46) ^ ((unint64_t)(~(v46 << 32) + v46) >> 22);
          v78 = 9 * ((v77 + ~(v77 << 13)) ^ ((v77 + ~(v77 << 13)) >> 8));
          v79 = (v78 ^ (v78 >> 15)) + ~((v78 ^ (v78 >> 15)) << 27);
          v80 = v76 & ((v79 >> 31) ^ v79);
          if (*(_QWORD *)(v75 + 16 * v80) != v46)
          {
            v81 = 1;
            do
              v80 = ((_DWORD)v80 + v81++) & v76;
            while (*(_QWORD *)(v75 + 16 * v80) != v46);
          }
          v70 = (uint64_t *)(v75 + 16 * v80 + 8);
        }
        else
        {
          v70 = (uint64_t *)(v46 + 104);
        }
        v71 = *v70;
        v72 = *(_DWORD *)(v71 + 36);
        LODWORD(v71) = *(_DWORD *)(v71 + 52);
        v28 = __OFADD__(v72, (_DWORD)v71);
        v73 = v72 + v71;
        v74 = (v72 >> 31) + 0x7FFFFFFF;
        if (v28)
          v73 = v74;
        v91[0] = v73;
        v90 = v46;
        result = (uint64_t)WTF::HashMap<WebCore::Layout::Box const*,float,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<float>,WTF::HashTableTraits>::add<WebCore::LayoutUnit &>(v5, &v90, v91, (uint64_t)&v82);
        v47 = (float)v91[0] * 0.015625;
        *(float *)(v4 + 1336) = *(float *)(v4 + 1336) + v47;
        v45 = *(float *)(v4 + 1304);
      }
      *(float *)(v4 + 1304) = v45 + v47;
      v9 += 24;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t WebCore::Layout::InlineFormattingUtils::horizontalAlignmentOffset(uint64_t result, uint64_t a2, int a3, __n128 a4, float a5, float a6)
{
  unsigned int v6;
  BOOL v7;
  float v8;
  unsigned int v9;
  unint64_t v11;

  if (a6 != 0.0)
  {
    v9 = *(_DWORD *)(a2 + 12);
    if (!v9)
    {
      __break(0xC471u);
      return result;
    }
    if (*(unsigned __int8 *)(*(_QWORD *)a2 + 120 * v9 - 120) - 3 >= 2 && a3 == 0)
    {
      a4.n128_f32[0] = a4.n128_f32[0] - a6;
    }
    else if (a5 < a4.n128_f32[0])
    {
      a4.n128_f32[0] = a5;
    }
  }
  if ((a3 & 1) != 0)
  {
    v7 = 0;
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6)
      v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 120 * v6 - 120) - 5 < 0xFFFFFFFE;
    else
      v7 = 1;
  }
  v8 = a5 - a4.n128_f32[0];
  a4.n128_u32[0] = 0;
  if (v8 > 0.0 && !v7)
  {
    v11 = *(unsigned int *)(*(_QWORD *)(result + 24) + 232);
    if (((v11 >> 23) & 7) != 7)
      return ((uint64_t (*)(__n128))((char *)&loc_19439B1E4 + dword_195E7C6C4[(v11 >> 23) & 7]))(a4);
  }
  return result;
}

double WebCore::MediaQueryMatcher::evaluateAll(uint64_t a1, int a2)
{
  double result;
  WebCore::RenderStyle *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int **v38;
  unsigned int **v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  WebCore::RenderStyle *v58;
  char v59;
  WebCore::RenderStyle *v60;

  ++*(_DWORD *)(a1 + 32);
  WebCore::MediaQueryMatcher::documentElementUserAgentStyle((WebCore::MediaQueryMatcher *)&v60, a1);
  v5 = v60;
  if (!v60)
    return result;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6
    || (v7 = *(_QWORD *)(v6 + 8)) == 0
    || (v8 = *(_QWORD *)(v7 + 528)) == 0
    || (v9 = *(_QWORD *)(v8 + 8)) == 0
    || (v10 = *(_QWORD *)(v9 + 288)) == 0)
  {
    v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
    {
      v14 = *(_DWORD *)v13 + 2;
      *(_DWORD *)v13 = v14;
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v10 + 328) + 280)
                                                                       + 16)
                                                         + 896))(&v56);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v10 + 328) + 24);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 80) + 8) + 200);
        if (v31)
        {
          v13 = *(WTF::StringImpl **)(v31 + 136);
          if (v13)
          {
            if (*((_DWORD *)v13 + 1))
            {
              *(_DWORD *)v13 += 2;
              v32 = v56;
              v56 = v13;
              if (!v32)
                goto LABEL_11;
              if (*(_DWORD *)v32 == 2)
                WTF::StringImpl::destroy(v32, v11);
              else
                *(_DWORD *)v32 -= 2;
            }
          }
        }
      }
    }
  }
  v13 = v56;
  if (!v56)
  {
    v13 = *(WTF::StringImpl **)(v10 + 1040);
    if (v13)
    {
      *(_DWORD *)v13 += 2;
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(a1 + 8);
LABEL_47:
    v16 = *(_QWORD *)(v6 + 8);
    v15 = 1;
    goto LABEL_13;
  }
LABEL_11:
  v14 = *(_DWORD *)v13;
LABEL_12:
  v15 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  *(_DWORD *)v13 = v14 + 2;
LABEL_13:
  v56 = v13;
  v17 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v16);
  if (v17)
  {
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 + 1, v17));
  }
  v57 = (WTF *)v17;
  v58 = v5;
  v59 = 2;
  if ((v15 & 1) == 0)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v18);
    else
      *(_DWORD *)v13 -= 2;
  }
  v20 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v20)
    goto LABEL_19;
  if (v20 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x19439B5FCLL);
  }
  v33 = 8 * v20;
  v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v20));
  v36 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v36)
  {
    v37 = *(unsigned int ***)(a1 + 16);
    v38 = &v37[v36];
    v39 = (unsigned int **)v34;
    do
    {
      v40 = *v37;
      if (*v37)
      {
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 + 1, v40));
      }
      *v39++ = v40;
      ++v37;
    }
    while (v37 != v38);
  }
  v42 = 0;
  v54 = (WTF *)((char *)v34 + 8 * v20);
  v55 = v34;
  while (1)
  {
    v43 = *(_QWORD *)((char *)v34 + v42);
    if (!v43)
      goto LABEL_61;
    v44 = *(_QWORD *)(v43 + 8);
    if (!v44)
      goto LABEL_61;
    v45 = (_DWORD *)(v44 + 24);
    ++*(_DWORD *)(v44 + 24);
    WebCore::MediaQueryList::evaluate(v44, (WebCore::MQ::MediaQueryEvaluator *)&v56, a2);
    v46 = *(_QWORD *)(a1 + 8);
    if (!v46 || !*(_QWORD *)(v46 + 8))
      break;
    WTF::RefCounted<WebCore::MediaQueryList>::deref(v45);
LABEL_61:
    v42 += 8;
    v34 = v55;
    if (v33 == v42)
      goto LABEL_62;
  }
  WTF::RefCounted<WebCore::MediaQueryList>::deref(v45);
  v34 = v55;
LABEL_62:
  v47 = v34;
  v48 = v54;
  do
  {
    v49 = *(_QWORD *)v47;
    *(_QWORD *)v47 = 0;
    if (v49)
    {
      do
      {
        v50 = __ldaxr((unsigned int *)v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unsigned int *)v49));
      if (!v51)
      {
        atomic_store(1u, (unsigned int *)v49);
        v52 = *(unsigned int *)(v49 + 28);
        if ((_DWORD)v52)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v49 + 16), (WTF::StringImpl *)(*(_QWORD *)(v49 + 16) + 32 * v52));
        v53 = *(WTF **)(v49 + 16);
        if (v53)
        {
          *(_QWORD *)(v49 + 16) = 0;
          *(_DWORD *)(v49 + 24) = 0;
          WTF::fastFree(v53, v35);
        }
        WTF::fastFree((WTF *)v49, v35);
        v48 = v54;
        v34 = v55;
      }
    }
    v47 = (WTF *)((char *)v47 + 8);
  }
  while (v47 != v48);
  WTF::fastFree(v34, v35);
LABEL_19:
  v21 = v57;
  v57 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v27 = *((unsigned int *)v21 + 7);
      if ((_DWORD)v27)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v27));
      v28 = (WTF *)*((_QWORD *)v21 + 2);
      if (v28)
      {
        *((_QWORD *)v21 + 2) = 0;
        *((_DWORD *)v21 + 6) = 0;
        WTF::fastFree(v28, v18);
      }
      WTF::fastFree(v21, v18);
    }
  }
  v24 = v56;
  v56 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v18);
    else
      *(_DWORD *)v24 -= 2;
  }
  if (v60)
  {
    WebCore::RenderStyle::~RenderStyle(v60, v18);
    if (*(_DWORD *)v25)
    {
      result = 0.0;
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v25, v26);
    }
  }
  return result;
}

void WebCore::MediaQueryMatcher::documentElementUserAgentStyle(WebCore::MediaQueryMatcher *this, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Node *v11;
  void *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  WebCore::Node *v20[3];

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 && (v4 = *(_QWORD **)(v3 + 8)) != 0 && (v5 = v4[66]) != 0 && *(_QWORD *)(v5 + 8) && (v6 = v4[159]) != 0)
  {
    v8 = v4[166];
    if (!*(_QWORD *)(v8 + 32))
    {
      if (*(_QWORD *)(v8 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v8);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v8);
      v14 = *(_QWORD *)(v8 + 32);
      if (*(_DWORD *)(v14 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v15 = *(_QWORD *)(v8 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v14 + 32), v13);
        v14 = v15;
      }
      if (*(_BYTE *)(v14 + 242)
        || *(_BYTE *)(v14 + 243)
        || *(_BYTE *)(v14 + 244)
        || *(_BYTE *)(v14 + 245)
        || *(_BYTE *)(v14 + 246)
        || *(_BYTE *)(v14 + 247)
        || *(_BYTE *)(v14 + 248))
      {
        *(_BYTE *)(v8 + 236) = 1;
      }
    }
    v9 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 64) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v10 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v10)
          v10 = *(_QWORD *)(v10 + 8);
      }
      v10 += 80;
    }
    v16 = v10;
    v17 = 0u;
    v18 = 0u;
    v19 = 0;
    WebCore::Style::Resolver::styleForElement(v9, v6, (uint64_t)&v16, 2, v20);
    v11 = v20[0];
    v20[0] = 0;
    *(_QWORD *)this = v11;
    WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v20, v12);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::MediaQueryList::evaluate(uint64_t result, WebCore::MQ::MediaQueryEvaluator *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  const WTF::AtomString *v12;
  WTF::StringImpl *v13;
  const Condition *v14;
  char v15;
  WebCore::Event *v16;
  WTF::StringImpl *v17;
  WebCore::Quirks *v18;
  WTF::StringImpl *v19;
  WebCore::Event *v20;

  v3 = *(_QWORD *)(result + 56);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x19439BAE0);
  }
  v5 = result;
  v6 = *(_DWORD *)(result + 84);
  if (v6 != *(_DWORD *)(v3 + 32))
  {
    result = WebCore::MQ::MediaQueryEvaluator::evaluate(a2, result + 64);
    v6 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 32);
    *(_DWORD *)(v5 + 84) = v6;
    if (*(unsigned __int8 *)(v5 + 92) != (_DWORD)result)
    {
      *(_BYTE *)(v5 + 92) = result;
      *(_DWORD *)(v5 + 88) = v6;
    }
  }
  v7 = *(_DWORD *)(v5 + 88) == v6 || *(_BYTE *)(v5 + 94) != 0;
  *(_BYTE *)(v5 + 94) = v7;
  if (a3 && v7)
  {
    v8 = *(_QWORD *)(v5 + 40);
    if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && !*(_BYTE *)(v9 + 178))
    {
      v10 = v9 - 288;
      *(_DWORD *)(v9 - 264) += 2;
      v18 = *(WebCore::Quirks **)(v9 + 400);
      if (!v18)
        v18 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)(v9 - 288));
      result = WebCore::Quirks::shouldSilenceMediaQueryListChangeEvents(v18);
      if ((result & 1) != 0)
        goto LABEL_21;
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = (const WTF::AtomString *)(WebCore::eventNames((WebCore *)result) + 368);
    WebCore::MediaQueryList::media((WebCore::MediaQueryList *)v5, v13, v14, &v19);
    v15 = WebCore::MediaQueryList::matches((WebCore::MediaQueryList *)v5);
    WebCore::MediaQueryListEvent::create((WebCore::MediaQueryListEvent *)&v20, v12, (const WTF::String *)&v19, v15);
    v16 = v20;
    WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v5, v20);
    if (*((_DWORD *)v16 + 4) == 1)
      (*(void (**)(WebCore::Event *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 4);
    result = (uint64_t)v19;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        result = WTF::StringImpl::destroy(v19, v17);
      else
        *(_DWORD *)v19 -= 2;
    }
    *(_BYTE *)(v5 + 94) = 0;
    if ((v11 & 1) != 0)
      return result;
LABEL_21:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v10, v17);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  return result;
}

void WebCore::AllDescendantsCollection::~AllDescendantsCollection(WebCore::AllDescendantsCollection *this, void *a2)
{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33A09B8;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E33A09B8;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
    WebCore::Document::unregisterCollection(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8), this);
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, a2);
  WebCore::HTMLCollection::~HTMLCollection(this, v3);
}

void WebCore::HTMLTagCollection::~HTMLTagCollection(WebCore::HTMLTagCollection *this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::HTMLTagCollection::~HTMLTagCollection(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  uint64_t v2;
  uint64_t *v3;
  WTF::StringImpl **v4;
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  WebCore::HTMLTagCollection *v13;

  v2 = *((_QWORD *)this + 3);
  *(_DWORD *)(v2 + 24) += 2;
  if ((*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v3 = *(uint64_t **)(*(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL);
  else
    v3 = 0;
  v4 = (WTF::StringImpl **)((char *)this + 88);
  WebCore::NodeListsNodeData::removeCachedCollection(v3, this, (WTF::StringImpl **)this + 11);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v2, v5);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *v4;
  *v4 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_QWORD *)this = off_1E33A83E0;
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 80) & 3) != 0)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
    v10 = v9 + 4 * (((unint64_t)*(unsigned __int16 *)((char *)this + 21) >> 5) & 0xF);
    --*(_DWORD *)(v10 + 1768);
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      v11 = (uint64_t *)(v9 + 1760);
      v13 = this;
      v12 = (_QWORD *)WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::HTMLCollection *>,WTF::DefaultHash<WebCore::HTMLCollection *>>,WebCore::HTMLCollection *>((uint64_t *)(v9 + 1760), (uint64_t *)&v13);
      WTF::HashSet<WebCore::HTMLCollection *,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTableTraits>::remove(v11, v12);
    }
  }
  WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 64, v5);
  WebCore::HTMLCollection::~HTMLCollection(this, v8);
}

