uint64_t WebCore::PageOverlayController::didScrollFrame(WebCore::PageOverlayController *this, WebCore::LocalFrame *a2)
{
  uint64_t result;
  _QWORD **v4;
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  WebCore::PageOverlay *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  _QWORD **v21;
  _QWORD **v22;
  int v23;

  v5 = (_QWORD **)*((_QWORD *)this + 4);
  result = (uint64_t)this + 32;
  v4 = v5;
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
LABEL_3:
    v8 = &v4[2 * v7];
    goto LABEL_4;
  }
  v7 = *((unsigned int *)v4 - 1);
  v8 = &v4[2 * v7];
  if (!*((_DWORD *)v4 - 3))
  {
    v6 = &v4[2 * v7];
    goto LABEL_3;
  }
  v6 = v4;
  if ((_DWORD)v7)
  {
    v14 = 16 * v7;
    v6 = v4;
    while ((unint64_t)*v6 + 1 <= 1)
    {
      v6 += 2;
      v14 -= 16;
      if (!v14)
      {
        v6 = v8;
        break;
      }
    }
  }
LABEL_4:
  v18 = result;
  v19 = v6;
  v20 = v8;
  if (v4)
  {
    v10 = *((unsigned int *)v4 - 1);
    v9 = &v4[2 * v10];
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v21 = v9;
  v22 = &v4[2 * v10];
  v23 = 0;
  if (v6 != v9)
  {
    if (!(*v6)[1])
    {
      v15 = v6;
      do
      {
        v16 = v15 + 2;
        v15 = v8;
        if (v16 != v8)
        {
          v15 = v16;
          while ((unint64_t)*v15 + 1 <= 1)
          {
            v15 += 2;
            if (v15 == v8)
            {
              v15 = v8;
              break;
            }
          }
        }
        v6 = v9;
        if (v15 == v9)
          break;
        v6 = v15;
      }
      while (!(*v15)[1]);
    }
    v19 = v6;
  }
  if (v4)
    v11 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v11 = 0;
  while (v6 != v11)
  {
    v12 = (*v6)[1];
    if (!*(_BYTE *)(v12 + 121) || *(WebCore::LocalFrame **)(*((_QWORD *)a2 + 16) + 8) != a2)
      (*(void (**)(_QWORD *))(*v6[1] + 320))(v6[1]);
    ++*(_DWORD *)(v12 + 8);
    v17 = (WebCore::PageOverlay *)v12;
    (*(void (**)(_QWORD, uint64_t, WebCore::LocalFrame *))(**(_QWORD **)(v12 + 24) + 48))(*(_QWORD *)(v12 + 24), v12, a2);
    WTF::Ref<WebCore::PageOverlay,WTF::RawPtrTraits<WebCore::PageOverlay>,WTF::DefaultRefDerefTraits<WebCore::PageOverlay>>::~Ref(&v17, v13);
    result = WTF::WeakHashMap<WebCore::PageOverlay,WTF::Ref<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>,WTF::DefaultWeakPtrImpl>::WeakHashMapIterator::operator++((uint64_t)&v18);
    v6 = v19;
  }
  return result;
}

WTF::StringImpl *WebCore::PageOverlayController::createRootLayersIfNeeded(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (*((_BYTE *)this + 64))
    return this;
  v1 = this;
  *((_BYTE *)this + 64) = 1;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 48) + 16);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 904))(v2);
  WebCore::GraphicsLayer::create(v3, (uint64_t)v1, 0, (uint64_t *)&v17);
  v4 = v17;
  v17 = 0;
  v5 = (WTF::StringImpl *)*((_QWORD *)v1 + 2);
  *((_QWORD *)v1 + 2) = v4;
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 2) - 1;
    if (*((_DWORD *)v5 + 2) != 1)
    {
LABEL_4:
      *((_DWORD *)v5 + 2) = v6;
      goto LABEL_5;
    }
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5);
    v5 = v17;
    v17 = 0;
    if (v5)
    {
      v6 = *((_DWORD *)v5 + 2) - 1;
      if (*((_DWORD *)v5 + 2) != 1)
        goto LABEL_4;
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v5 + 16))(v5);
    }
  }
LABEL_5:
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 1) + 8) + 48) + 16);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 904))(v7);
  WebCore::GraphicsLayer::create(v8, (uint64_t)v1, 0, (uint64_t *)&v17);
  v9 = v17;
  v17 = 0;
  v10 = (WTF::StringImpl *)*((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = v9;
  if (v10)
  {
    v11 = *((_DWORD *)v10 + 2) - 1;
    if (*((_DWORD *)v10 + 2) == 1)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10);
      v10 = v17;
      v17 = 0;
      if (!v10)
        goto LABEL_8;
      v11 = *((_DWORD *)v10 + 2) - 1;
      if (*((_DWORD *)v10 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10);
        goto LABEL_8;
      }
    }
    *((_DWORD *)v10 + 2) = v11;
  }
LABEL_8:
  v12 = *((_QWORD *)v1 + 2);
  _MergedGlobals_43 += 2;
  v17 = (WTF::StringImpl *)&_MergedGlobals_43;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 40))(v12, &v17);
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)v1 + 3);
  dword_1ECE7BD40 += 2;
  v17 = (WTF::StringImpl *)&dword_1ECE7BD40;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 40))(v15, &v17);
  this = v17;
  v17 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v16);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::GraphicsLayer::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a4, a1, a3, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a4 + 24))(*a4, a3);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x380);
    v9 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v8, a3, a2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a3);
    *a4 = v8;
  }
  return result;
}

_QWORD *WebCore::RenderLayerCompositor::ensureRootLayer(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  WebCore::RenderBox *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  int v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  int32x2_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  WTF::StringImpl *v98;
  int v99;

  v1 = this[1];
  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v2 + 328);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 632) + 8);
  if (v4 == v3)
    v5 = 1;
  else
    v5 = 2;
  if (v5 == *((_DWORD *)this + 54))
    return this;
  v6 = (uint64_t)this;
  if (!this[28])
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 24)
                                           + 8)
                               + 48)
                   + 16);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 904))(v7);
    if (v8)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 16))(&v98, v8, 0, v6);
      (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v98 + 24))(v98, 0);
      v9 = (uint64_t)v98;
    }
    else
    {
      v9 = WTF::fastMalloc((WTF *)0x380);
      v91 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v9, 0, v6);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v91 + 24))(v91, 0);
    }
    v98 = 0;
    v10 = *(WTF::StringImpl **)(v6 + 224);
    *(_QWORD *)(v6 + 224) = v9;
    if (!v10)
      goto LABEL_11;
    v11 = *((_DWORD *)v10 + 2) - 1;
    if (*((_DWORD *)v10 + 2) == 1)
    {
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10);
      v10 = v98;
      v98 = 0;
      if (!v10)
        goto LABEL_11;
      v11 = *((_DWORD *)v10 + 2) - 1;
      if (*((_DWORD *)v10 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v10 + 16))(v10);
        goto LABEL_11;
      }
    }
    *((_DWORD *)v10 + 2) = v11;
LABEL_11:
    v12 = *(_QWORD *)(v6 + 224);
    _MergedGlobals_50 += 2;
    v98 = (WTF::StringImpl *)&_MergedGlobals_50;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v12 + 40))(v12, &v98);
    v16 = v98;
    v98 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(WebCore::RenderBox **)(v6 + 8);
    v18 = *((_QWORD *)v17 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 4);
      v20 = *(_QWORD *)(v18 + 12);
    }
    else
    {
      v19 = WebCore::RenderBox::flippedClientBoxRect(v17);
    }
    v21 = (int)v19 / 64;
    v22 = v19 - (v14 & 0xFFFFFFC0);
    v23 = SHIDWORD(v19) / 64;
    v24 = HIDWORD(v19) - (v15 & 0xFFFFFFC0);
    v25 = __OFADD__(v22, (_DWORD)v20);
    v26 = v22 + v20;
    v27 = (v22 >> 31) + 0x7FFFFFFF;
    if (!v25)
      v27 = v26;
    v25 = __OFADD__(v24, HIDWORD(v20));
    v28 = v24 + HIDWORD(v20);
    v29 = (v24 >> 31) + 0x7FFFFFFF;
    if (!v25)
      v29 = v28;
    v30 = *(_QWORD *)(v6 + 224);
    *(float *)&v98 = (float)(v21 + v27 / 64 + ((int)(v27 - (v28 & 0xFFFFFFC0) + 32) >> 6));
    *((float *)&v98 + 1) = (float)(v23 + v29 / 64 + ((int)(v29 - (v26 & 0xFFFFFFC0) + 32) >> 6));
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v30 + 160))(v30, &v98);
    v31 = *(_QWORD *)(v6 + 224);
    v98 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v31 + 128))(v31, &v98);
    v32 = *(_QWORD *)(v6 + 8);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 248) + 328) + 128) + 8) == *(_QWORD *)(*(_QWORD *)(v32 + 248) + 328))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 224) + 680))(*(_QWORD *)(v6 + 224), 1);
      v32 = *(_QWORD *)(v6 + 8);
    }
    (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(v6 + 224) + 208))(*(_QWORD *)(v6 + 224), (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 24) + 8) + 40)+ 8)+ 528)+ 8)+ 24)+ 8)+ 112)+ 664) & 0x4000000000) == 0);
    v1 = *(_QWORD *)(v6 + 8);
    v2 = *(_QWORD *)(v1 + 248);
  }
  if (*(_BYTE *)(v2 + 312) == 1
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 328) + 632) + 8) == *(_QWORD *)(v2 + 328)
    || ((v33 = *(_QWORD *)(v2 + 40), v4 == v3) ? (v34 = v33 == 0) : (v34 = 1), !v34))
  {
    if (*(_QWORD *)(v6 + 256))
    {
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)(v6 + 256));
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)(v6 + 232));
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)(v6 + 240));
      WebCore::GraphicsLayer::unparentAndClear((_DWORD *)(v6 + 248));
    }
    goto LABEL_85;
  }
  if (!*(_QWORD *)(v6 + 256))
  {
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 904))(v35);
    if (v36)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v36 + 16))(&v98, v36, 0, v6);
      (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v98 + 24))(v98, 0);
      v37 = (uint64_t)v98;
    }
    else
    {
      v37 = WTF::fastMalloc((WTF *)0x380);
      v92 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v37, 0, v6);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v92 + 24))(v92, 0);
    }
    v98 = 0;
    v38 = *(WTF::StringImpl **)(v6 + 256);
    *(_QWORD *)(v6 + 256) = v37;
    if (v38)
    {
      v39 = *((_DWORD *)v38 + 2) - 1;
      if (*((_DWORD *)v38 + 2) != 1)
      {
LABEL_34:
        *((_DWORD *)v38 + 2) = v39;
        goto LABEL_35;
      }
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 16))(v38);
      v38 = v98;
      v98 = 0;
      if (v38)
      {
        v39 = *((_DWORD *)v38 + 2) - 1;
        if (*((_DWORD *)v38 + 2) != 1)
          goto LABEL_34;
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v38 + 16))(v38);
      }
    }
LABEL_35:
    v40 = *(_QWORD *)(v6 + 256);
    dword_1ECE7D2F0 += 2;
    v98 = (WTF::StringImpl *)&dword_1ECE7D2F0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v40 + 40))(v40, &v98);
    v42 = v98;
    v98 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 904))(v43);
    if (v44)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(&v98, v44, 5, v6);
      (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v98 + 24))(v98, 5);
      v45 = (uint64_t)v98;
    }
    else
    {
      v45 = WTF::fastMalloc((WTF *)0x380);
      v93 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v45, 5, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v93 + 24))(v93, 5);
    }
    v98 = 0;
    v46 = *(WTF::StringImpl **)(v6 + 248);
    *(_QWORD *)(v6 + 248) = v45;
    if (v46)
    {
      v47 = *((_DWORD *)v46 + 2) - 1;
      if (*((_DWORD *)v46 + 2) != 1)
      {
LABEL_42:
        *((_DWORD *)v46 + 2) = v47;
        goto LABEL_43;
      }
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46);
      v46 = v98;
      v98 = 0;
      if (v46)
      {
        v47 = *((_DWORD *)v46 + 2) - 1;
        if (*((_DWORD *)v46 + 2) != 1)
          goto LABEL_42;
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 16))(v46);
      }
    }
LABEL_43:
    v48 = *(_QWORD *)(v6 + 248);
    dword_1ECE7D310 += 2;
    v98 = (WTF::StringImpl *)&dword_1ECE7D310;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v48 + 40))(v48, &v98);
    v50 = v98;
    v98 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v49);
      else
        *(_DWORD *)v50 -= 2;
    }
    v51 = *(_QWORD *)(v6 + 248);
    v99 = 0;
    v98 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v51 + 152))(v51, &v98);
    v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24)
                                                                                            + 8)
                                                                                + 40)
                                                                    + 8)
                                                        + 528)
                                            + 8)
                                + 24)
                    + 8);
    if ((*(_QWORD *)(*(_QWORD *)(v52 + 112) + 664) & 0x40000000) == 0)
    {
LABEL_61:
      if (*(_QWORD *)(v6 + 240))
      {
LABEL_76:
        v82 = *(_QWORD *)(v6 + 248);
        v83 = *(WTF::StringImpl **)(v6 + 224);
        ++*((_DWORD *)v83 + 2);
        v98 = v83;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v82 + 64))(v82, &v98);
        v84 = v98;
        v98 = 0;
        if (v84)
        {
          if (*((_DWORD *)v84 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v84 + 16))(v84);
          else
            --*((_DWORD *)v84 + 2);
        }
        WebCore::RenderLayerCompositor::updateScrollLayerClipping((_QWORD *)v6);
        WebCore::RenderLayerCompositor::updateOverflowControlsLayers((WebCore::RenderLayerCompositor *)v6);
        v85 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8) + 40) + 8) + 528)
                                                                                            + 8)
                                                                                + 24)
                                                                    + 8));
        if (v85
          && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v85 + 40))(v85, *(_QWORD *)(*(_QWORD *)(v6 + 8) + 248)))
        {
          WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
        }
        else
        {
          v86 = *(int32x2_t **)(*(_QWORD *)(v6 + 8) + 248);
          v87 = (*(uint64_t (**)(int32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&v86[8] + 832))(v86 + 8, 0, 1);
          v88 = *(_QWORD *)(v6 + 248);
          *(float *)&v98 = (float)-(int)v87;
          *((float *)&v98 + 1) = (float)-HIDWORD(v87);
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v88 + 128))(v88, &v98);
          v89 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 144);
          if (v89)
          {
            v90 = *(_QWORD *)(v89 + 256);
            if (v90)
            {
              if (*(_BYTE *)(v90 + 294))
              {
                v96 = *(_QWORD *)(v90 + 88);
                if (v96)
                {
                  v97 = WebCore::LocalFrameView::scrollPositionForFixedPosition(v86);
                  *(float *)&v98 = (float)(int)v97 * 0.015625;
                  *((float *)&v98 + 1) = (float)SHIDWORD(v97) * 0.015625;
                  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v96 + 128))(v96, &v98);
                }
              }
            }
          }
        }
        goto LABEL_85;
      }
      v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 8) + 40)
                                                                                              + 8)
                                                                                  + 528)
                                                                      + 8)
                                                          + 24)
                                              + 8)
                                  + 48)
                      + 16);
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 904))(v67);
      if (v68)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v68 + 16))(&v98, v68, 0, v6);
        (*(void (**)(WTF::StringImpl *, _QWORD))(*(_QWORD *)v98 + 24))(v98, 0);
        v69 = (uint64_t)v98;
      }
      else
      {
        v69 = WTF::fastMalloc((WTF *)0x380);
        v95 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v69, 0, v6);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 24))(v95, 0);
      }
      v98 = 0;
      v70 = *(WTF::StringImpl **)(v6 + 232);
      *(_QWORD *)(v6 + 232) = v69;
      if (v70)
      {
        v71 = *((_DWORD *)v70 + 2) - 1;
        if (*((_DWORD *)v70 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v70 + 16))(v70);
          v70 = v98;
          v98 = 0;
          if (!v70)
            goto LABEL_67;
          v71 = *((_DWORD *)v70 + 2) - 1;
          if (*((_DWORD *)v70 + 2) == 1)
          {
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v70 + 16))(v70);
            goto LABEL_67;
          }
        }
        *((_DWORD *)v70 + 2) = v71;
      }
LABEL_67:
      v72 = *(_QWORD *)(v6 + 232);
      dword_1ECE7D350 += 2;
      v98 = (WTF::StringImpl *)&dword_1ECE7D350;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v72 + 40))(v72, &v98);
      v74 = v98;
      v98 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v73);
        else
          *(_DWORD *)v74 -= 2;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 232) + 208))(*(_QWORD *)(v6 + 232), 1);
      v75 = *(_QWORD *)(v6 + 232);
      v99 = 0;
      v98 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v75 + 152))(v75, &v98);
      v76 = *(_QWORD *)(v6 + 232);
      v77 = *(WTF::StringImpl **)(v6 + 248);
      ++*((_DWORD *)v77 + 2);
      v98 = v77;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v76 + 64))(v76, &v98);
      v78 = v98;
      v98 = 0;
      if (v78)
      {
        if (*((_DWORD *)v78 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v78 + 16))(v78);
        else
          --*((_DWORD *)v78 + 2);
      }
      v79 = *(_QWORD *)(v6 + 256);
      v80 = *(WTF::StringImpl **)(v6 + 232);
      ++*((_DWORD *)v80 + 2);
      v98 = v80;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v79 + 64))(v79, &v98);
      v81 = v98;
      v98 = 0;
      if (v81)
      {
        if (*((_DWORD *)v81 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v81 + 16))(v81);
        else
          --*((_DWORD *)v81 + 2);
      }
      goto LABEL_76;
    }
    v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v52 + 48) + 16) + 904))(*(_QWORD *)(*(_QWORD *)(v52 + 48) + 16));
    if (v53)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 16))(&v98, v53, 4, v6);
      (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v98 + 24))(v98, 4);
      v54 = (uint64_t)v98;
    }
    else
    {
      v54 = WTF::fastMalloc((WTF *)0x380);
      v94 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v54, 4, v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v94 + 24))(v94, 4);
    }
    v98 = 0;
    v55 = *(WTF::StringImpl **)(v6 + 240);
    *(_QWORD *)(v6 + 240) = v54;
    if (v55)
    {
      v56 = *((_DWORD *)v55 + 2) - 1;
      if (*((_DWORD *)v55 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 16))(v55);
        v55 = v98;
        v98 = 0;
        if (!v55)
          goto LABEL_52;
        v56 = *((_DWORD *)v55 + 2) - 1;
        if (*((_DWORD *)v55 + 2) == 1)
        {
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v55 + 16))(v55);
          goto LABEL_52;
        }
      }
      *((_DWORD *)v55 + 2) = v56;
    }
LABEL_52:
    v57 = *(_QWORD *)(v6 + 240);
    dword_1ECE7D330 += 2;
    v98 = (WTF::StringImpl *)&dword_1ECE7D330;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v57 + 40))(v57, &v98);
    v59 = v98;
    v98 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
        WTF::StringImpl::destroy(v59, v58);
      else
        *(_DWORD *)v59 -= 2;
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 240) + 208))(*(_QWORD *)(v6 + 240), 1);
    v60 = *(_QWORD *)(v6 + 240);
    v99 = 0;
    v98 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v60 + 152))(v60, &v98);
    v61 = *(_QWORD *)(v6 + 240);
    v62 = *(WTF::StringImpl **)(v6 + 248);
    ++*((_DWORD *)v62 + 2);
    v98 = v62;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v61 + 64))(v61, &v98);
    v63 = v98;
    v98 = 0;
    if (v63)
    {
      if (*((_DWORD *)v63 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v63 + 16))(v63);
      else
        --*((_DWORD *)v63 + 2);
    }
    v64 = *(_QWORD *)(v6 + 256);
    v65 = *(WTF::StringImpl **)(v6 + 240);
    ++*((_DWORD *)v65 + 2);
    v98 = v65;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v64 + 64))(v64, &v98);
    v66 = v98;
    v98 = 0;
    if (v66)
    {
      if (*((_DWORD *)v66 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v66 + 16))(v66);
      else
        --*((_DWORD *)v66 + 2);
    }
    goto LABEL_61;
  }
LABEL_85:
  if (*(_DWORD *)(v6 + 216))
    WebCore::RenderLayerCompositor::detachRootLayer((WebCore::RenderLayerCompositor *)v6);
  return WebCore::RenderLayerCompositor::attachRootLayer((_QWORD *)v6, v5);
}

uint64_t WebCore::RenderLayerBacking::createGraphicsLayer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RenderView *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::RenderLayerCompositor *v23;
  WebCore::RenderLayerCompositor *v24;
  WTF *v25;
  void *v26;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 24) + 8) + 40)
                                                                                         + 8)
                                                                             + 528)
                                                                 + 8)
                                                     + 24)
                                         + 8)
                             + 48)
                 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 904))(v8);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a4, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a4);
    v10 = *a1;
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x380);
    v22 = WebCore::GraphicsLayerCA::GraphicsLayerCA(v21, a4, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 24))(v22, a4);
    v10 = v21;
    *a1 = v21;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a3);
  v11 = *a1;
  v12 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32)
                                                                                + 24)
                                                                    + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  v13 = *((_QWORD *)v12 + 50);
  if (!v13)
  {
    v23 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    v13 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v23, v12);
    v24 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v12 + 50);
    *((_QWORD *)v12 + 50) = v13;
    if (v24)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v24);
      WTF::fastFree(v25, v26);
      v13 = *((_QWORD *)v12 + 50);
    }
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 240))(v11, *(unsigned __int8 *)(v13 + 194));
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32);
  v16 = *(unsigned __int8 *)(v15 + 46);
  if (v16 != 83)
  {
    if ((*(_BYTE *)(v15 + 52) & 7) != 4)
    {
      v17 = v16 - 67;
      if (v17 > 0x13)
        return result;
      v18 = 1 << v17;
      v19 = 917521;
LABEL_8:
      if ((v18 & v19) == 0)
        return result;
      goto LABEL_9;
    }
    if (v16 != 85 && (*(_BYTE *)(v15 + 53) & 1) != 0)
    {
      v20 = v16 - 67;
      if (v20 > 0x13)
        return result;
      v18 = 1 << v20;
      v19 = 655377;
      goto LABEL_8;
    }
  }
LABEL_9:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 736))(*a1, 1);
  return result;
}

uint64_t WebCore::GraphicsLayerCA::setName(const WTF::StringImpl **this, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;

  result = WTF::equal(*a2, this[4], a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    v8 = this[4];
    this[4] = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)this, 2, 0);
  }
  return result;
}

uint64_t WebCore::GraphicsLayerCA::initialize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 1208))(&v16);
  v2 = v16;
  v16 = 0;
  v3 = a1[78];
  a1[78] = v2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E334ED68;
      v14[1] = v4;
      v17 = v14;
      WTF::ensureOnMainThread();
      v15 = v17;
      v17 = 0;
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    v7 = v16;
    v16 = 0;
    if (v7)
    {
      v9 = (unsigned int *)(v7 + 8);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E334ED68;
        v12[1] = v9;
        v17 = v12;
        WTF::ensureOnMainThread();
        v13 = v17;
        v17 = 0;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
      }
    }
  }
  WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)a1, 0x1000000, 0);
  return WebCore::GraphicsLayerCA::noteLayerPropertyChanged((uint64_t)a1, 0x4000000, 0);
}

uint64_t WebCore::GraphicsLayerCA::noteLayerPropertyChanged(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t i;

  if ((*(_WORD *)(result + 177) & 1) == 0)
  {
    v3 = *(_QWORD *)(result + 616);
    *(_QWORD *)(result + 616) = v3 | a2;
    if (!*(_BYTE *)(result + 889))
    {
      for (i = *(_QWORD *)(result + 200); i; i = *(_QWORD *)(i + 200))
      {
        if ((*(_BYTE *)(i + 890) & 0x40) != 0)
          break;
        *(_BYTE *)(i + 890) |= 0x40u;
      }
    }
    if (!a3 && !v3)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), result);
  }
  return result;
}

uint64_t WebCore::Page::forEachWindowEventLoop(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD **v30;
  _DWORD *v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;

  v33 = 0;
  v2 = *(_QWORD *)(result + 160);
  if (!v2)
    return result;
  v3 = a2;
  v4 = 0;
  while (1)
  {
LABEL_3:
    v5 = (_QWORD *)v2;
    if (!*(_BYTE *)(v2 + 144))
    {
      result = *(_QWORD *)(v2 + 296);
      if (result)
      {
        result = WebCore::Document::windowEventLoop((WebCore::Document *)result, a2);
        v6 = result;
        v7 = *(_DWORD *)(result + 8) + 1;
        *(_DWORD *)(result + 8) = v7;
        if (v4 != result)
        {
          v8 = (uint64_t)v33;
          if (v33
            || (v9 = WTF::fastZeroedMalloc((WTF *)0x50),
                v33 = (WTF::StringImpl **)(v9 + 16),
                *(_QWORD *)(v9 + 8) = 0x800000007,
                *(_DWORD *)v9 = 0,
                *((_DWORD *)v33 - 3) = 0,
                (v8 = (uint64_t)v33) != 0))
          {
            v10 = *(_DWORD *)(v8 - 8);
          }
          else
          {
            v10 = 0;
          }
          a2 = 0;
          v11 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
          v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
          v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
          v14 = (v13 >> 31) ^ v13;
          for (i = 1; ; ++i)
          {
            v16 = v14 & v10;
            v17 = (uint64_t *)(v8 + 8 * v16);
            result = *v17;
            if (!*v17)
              break;
            if (result != -1)
            {
              v17 = (uint64_t *)a2;
              if (result == v6)
              {
                v7 = *(_DWORD *)(v6 + 8);
                v4 = v6;
                goto LABEL_27;
              }
            }
            v14 = i + v16;
            a2 = (WTF::StringImpl *)v17;
          }
          if (a2)
          {
            *(_QWORD *)a2 = 0;
            --*((_DWORD *)v33 - 4);
            *(_QWORD *)a2 = v6;
          }
          else
          {
            *v17 = v6;
            a2 = (WTF::StringImpl *)(v8 + 8 * v16);
          }
          if (v33)
            v18 = *((_DWORD *)v33 - 3) + 1;
          else
            v18 = 1;
          *((_DWORD *)v33 - 3) = v18;
          if (v33)
            v19 = *((_DWORD *)v33 - 3);
          else
            v19 = 0;
          v20 = (*((_DWORD *)v33 - 4) + v19);
          v21 = *((unsigned int *)v33 - 1);
          if (v21 > 0x400)
          {
            if (v21 > 2 * v20)
              goto LABEL_19;
          }
          else if (3 * v21 > 4 * v20)
          {
LABEL_19:
            v4 = v6;
            goto LABEL_20;
          }
          result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>>::expand((uint64_t *)&v33, (uint64_t *)a2);
          goto LABEL_19;
        }
LABEL_27:
        v24 = v7 - 1;
        if (v24)
          *(_DWORD *)(v6 + 8) = v24;
        else
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
LABEL_20:
    v2 = v5[11];
    if (!v2)
    {
      v22 = *(_QWORD *)(v5[6] + 8);
      if (!v22)
        goto LABEL_31;
      v2 = v5[9];
      if (!v2)
        break;
    }
  }
  while (1)
  {
    v23 = *(_QWORD *)(v22 + 56);
    if (!v23)
      break;
    v22 = *(_QWORD *)(v23 + 8);
    if (!v22)
      break;
    v2 = *(_QWORD *)(v22 + 72);
    if (v2)
      goto LABEL_3;
  }
LABEL_31:
  v25 = (uint64_t)v33;
  if (v33)
  {
    v26 = *((unsigned int *)v33 - 1);
    if (!*((_DWORD *)v33 - 3))
      goto LABEL_39;
    v27 = v33;
    if ((_DWORD)v26)
    {
      v28 = 0;
      while ((unint64_t)v33[v28] + 1 <= 1)
      {
        if (v26 == ++v28)
          goto LABEL_37;
      }
      v27 = &v33[v28];
    }
    v32 = &v33[v26];
    if (v32 != v27)
    {
      a2 = *v27;
LABEL_53:
      result = (*(uint64_t (**)(_QWORD, WTF::StringImpl *))(**(_QWORD **)v3 + 16))(*(_QWORD *)v3, a2);
      while (++v27 != v32)
      {
        a2 = *v27;
        if ((unint64_t)*v27 + 1 > 1)
        {
          if (v27 != v32)
            goto LABEL_53;
          break;
        }
      }
      v25 = (uint64_t)v33;
    }
LABEL_37:
    if (v25)
    {
      LODWORD(v26) = *(_DWORD *)(v25 - 4);
LABEL_39:
      if ((_DWORD)v26)
      {
        v29 = v26;
        v30 = (_DWORD **)v25;
        do
        {
          v31 = *v30;
          if (*v30 != (_DWORD *)-1)
          {
            *v30 = 0;
            if (v31)
            {
              if (v31[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
              else
                --v31[2];
            }
          }
          ++v30;
          --v29;
        }
        while (v29);
      }
      return WTF::fastFree((WTF *)(v25 - 16), a2);
    }
  }
  return result;
}

double WebCore::preferredFrameInterval(char a1, uint64_t a2, int a3)
{
  double result;

  if ((a1 & 0xF) != 0)
  {
    if ((a1 & 2) != 0)
      return 10.0;
    if ((a2 & 0xFF00000000) == 0 || (_DWORD)a2 == 60)
      return dbl_1968DE990[(a1 & 0xD) == 0];
  }
  else
  {
    result = 0.015;
    if ((a2 & 0xFF00000000) == 0 || (_DWORD)a2 == 60)
      return result;
  }
  if (a3 && a2 >= 0x3D)
    LODWORD(a2) = (float)((float)a2 / (float)(a2 / 0x3C));
  result = 1.0 / (double)a2;
  if ((a1 & 0xD) != 0)
    return result + result;
  return result;
}

uint64_t WebCore::RenderLayerBacking::notifyFlushRequired(uint64_t this, const WebCore::GraphicsLayer *a2)
{
  uint64_t v2;
  WebCore::RenderView *v3;
  WebCore::RenderLayerCompositor *v4;
  WebCore::RenderLayerCompositor *v5;
  WebCore::RenderLayerCompositor *v6;
  WTF *v7;
  void *v8;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 24) + 8) + 40)
                 + 8);
  if (!*(_BYTE *)(v2 + 3405))
  {
    v3 = *(WebCore::RenderView **)(v2 + 1944);
    v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
    if (!v4)
    {
      v5 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v4 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v5, v3);
      v6 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
      *((_QWORD *)v3 + 50) = v4;
      if (v6)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v6);
        WTF::fastFree(v7, v8);
        v4 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v3 + 50);
      }
    }
    return WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
  }
  return this;
}

uint64_t WebCore::GraphicsLayerCA::setAcceleratesDrawing(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x100) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 256;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFEFF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 0x800000, 0);
  }
  return this;
}

uint64_t WebCore::Page::scheduleRenderingUpdate(uint64_t result, int a2)
{
  WebCore::Page *v2;
  WTF::MonotonicTime *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  WTF::StringImpl **v37;
  WebCore::WindowEventLoop *v38;
  WebCore::WindowEventLoop *v39;
  WebCore::WindowEventLoop *v40;
  int v41;
  WebCore::RenderingUpdateScheduler *updated;
  _DWORD *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WebCore::WindowEventLoop *v46[3];

  v2 = (WebCore::Page *)result;
  if (*(_DWORD *)(result + 1116))
  {
    *(_DWORD *)(result + 1128) |= a2 & ~**(_DWORD **)(result + 1104);
    return result;
  }
  v3 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(result + 48) + 16) + 1024))(*(_QWORD *)(*(_QWORD *)(result + 48) + 16));
  if ((v3 & 1) == 0)
  {
    updated = WebCore::Page::renderingUpdateScheduler(v2);
    v3 = (WTF::MonotonicTime *)WebCore::RenderingUpdateScheduler::scheduleRenderingUpdate(updated);
  }
  WTF::MonotonicTime::now(v3);
  v44 = v4;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34008E0;
  v6[1] = v2;
  v6[2] = &v44;
  v45 = 0;
  v7 = *((_QWORD *)v2 + 20);
  if (!v7)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  v8 = 0;
  while (1)
  {
LABEL_7:
    v9 = (_QWORD *)v7;
    if (*(_BYTE *)(v7 + 144))
      goto LABEL_25;
    v10 = *(_QWORD *)(v7 + 296);
    if (!v10)
      goto LABEL_25;
    v11 = *(_DWORD **)(v10 + 2944);
    if (!v11)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v10 + 192), v5);
      WebCore::WindowEventLoop::eventLoopForSecurityOrigin(v38, v46);
      v39 = v46[0];
      v46[0] = 0;
      v40 = *(WebCore::WindowEventLoop **)(v10 + 2944);
      *(_QWORD *)(v10 + 2944) = v39;
      if (v40)
      {
        v41 = *((_DWORD *)v40 + 2) - 1;
        if (*((_DWORD *)v40 + 2) == 1)
        {
          (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v40 + 8))(v40);
          v40 = v46[0];
          v46[0] = 0;
          if (!v40)
            goto LABEL_60;
          v41 = *((_DWORD *)v40 + 2) - 1;
          if (*((_DWORD *)v40 + 2) == 1)
          {
            (*(void (**)(WebCore::WindowEventLoop *))(*(_QWORD *)v40 + 8))(v40);
            goto LABEL_60;
          }
        }
        *((_DWORD *)v40 + 2) = v41;
      }
LABEL_60:
      WTF::WeakHashSet<WebCore::ScriptExecutionContext,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::ScriptExecutionContext>(*(_QWORD *)(v10 + 2944) + 104, (_QWORD *)(v10 + 192), (uint64_t)v46);
      v11 = *(_DWORD **)(v10 + 2944);
    }
    v12 = v11[2] + 1;
    v11[2] = v12;
    if (v8 != v11)
    {
      v13 = (uint64_t)v45;
      if (v45
        || (v14 = WTF::fastZeroedMalloc((WTF *)0x50),
            v45 = (WTF::StringImpl **)(v14 + 16),
            *(_QWORD *)(v14 + 8) = 0x800000007,
            *(_DWORD *)v14 = 0,
            *((_DWORD *)v45 - 3) = 0,
            (v13 = (uint64_t)v45) != 0))
      {
        v15 = *(_DWORD *)(v13 - 8);
      }
      else
      {
        v15 = 0;
      }
      v5 = 0;
      v16 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = (v18 >> 31) ^ v18;
      for (i = 1; ; ++i)
      {
        v21 = v19 & v15;
        v22 = (WTF::StringImpl *)(v13 + 8 * v21);
        v23 = *(_DWORD **)v22;
        if (!*(_QWORD *)v22)
          break;
        if (v23 != (_DWORD *)-1)
        {
          v22 = v5;
          if (v23 == v11)
          {
            v12 = v11[2];
            v8 = v11;
            goto LABEL_32;
          }
        }
        v19 = i + v21;
        v5 = v22;
      }
      if (v5)
      {
        *(_QWORD *)v5 = 0;
        --*((_DWORD *)v45 - 4);
        *(_QWORD *)v5 = v11;
      }
      else
      {
        *(_QWORD *)v22 = v11;
        v5 = (WTF::StringImpl *)(v13 + 8 * v21);
      }
      if (v45)
        v24 = *((_DWORD *)v45 - 3) + 1;
      else
        v24 = 1;
      *((_DWORD *)v45 - 3) = v24;
      if (v45)
        v25 = *((_DWORD *)v45 - 3);
      else
        v25 = 0;
      v26 = (*((_DWORD *)v45 - 4) + v25);
      v27 = *((unsigned int *)v45 - 1);
      if (v27 > 0x400)
      {
        if (v27 > 2 * v26)
          goto LABEL_24;
      }
      else if (3 * v27 > 4 * v26)
      {
LABEL_24:
        v8 = v11;
        goto LABEL_25;
      }
      WTF::HashTable<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>,WTF::HashTraits<WTF::Ref<WebCore::WindowEventLoop,WTF::RawPtrTraits<WebCore::WindowEventLoop>,WTF::DefaultRefDerefTraits<WebCore::WindowEventLoop>>>>::expand((uint64_t *)&v45, (uint64_t *)v5);
      goto LABEL_24;
    }
LABEL_32:
    v30 = v12 - 1;
    if (v30)
      v11[2] = v30;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
LABEL_25:
    v7 = v9[11];
    if (!v7)
    {
      v28 = *(_QWORD *)(v9[6] + 8);
      if (!v28)
        goto LABEL_36;
      v7 = v9[9];
      if (!v7)
        break;
    }
  }
  while (1)
  {
    v29 = *(_QWORD *)(v28 + 56);
    if (!v29)
      break;
    v28 = *(_QWORD *)(v29 + 8);
    if (!v28)
      break;
    v7 = *(_QWORD *)(v28 + 72);
    if (v7)
      goto LABEL_7;
  }
LABEL_36:
  v31 = (uint64_t)v45;
  if (v45)
  {
    v32 = *((unsigned int *)v45 - 1);
    if (!*((_DWORD *)v45 - 3))
      goto LABEL_44;
    v33 = v45;
    if ((_DWORD)v32)
    {
      v34 = 0;
      while ((unint64_t)v45[v34] + 1 <= 1)
      {
        if (v32 == ++v34)
          goto LABEL_42;
      }
      v33 = &v45[v34];
    }
    v37 = &v45[v32];
    if (v37 != v33)
    {
      v5 = *v33;
LABEL_49:
      (*(void (**)(_QWORD *, WTF::StringImpl *))(*v6 + 16))(v6, v5);
      while (++v33 != v37)
      {
        v5 = *v33;
        if ((unint64_t)*v33 + 1 > 1)
        {
          if (v33 != v37)
            goto LABEL_49;
          break;
        }
      }
      v31 = (uint64_t)v45;
    }
LABEL_42:
    if (v31)
    {
      LODWORD(v32) = *(_DWORD *)(v31 - 4);
LABEL_44:
      if ((_DWORD)v32)
      {
        v35 = v32;
        v36 = (_DWORD **)v31;
        do
        {
          v43 = *v36;
          if (*v36 != (_DWORD *)-1)
          {
            *v36 = 0;
            if (v43)
            {
              if (v43[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
              else
                --v43[2];
            }
          }
          ++v36;
          --v35;
        }
        while (v35);
      }
      WTF::fastFree((WTF *)(v31 - 16), v5);
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

uint64_t WebCore::GraphicsLayerCA::setMasksToBounds(uint64_t this, int a2)
{
  int v2;
  int v3;
  __int16 v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(this + 177);
  v3 = v2 | (*(unsigned __int8 *)(this + 179) << 16);
  if (((((v2 & 0x10) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v4 = 16;
    else
      v4 = 0;
    v5 = v3 & 0xFFFFFFEF;
    *(_BYTE *)(this + 179) = BYTE2(v5);
    *(_WORD *)(this + 177) = v5 | v4;
    return WebCore::GraphicsLayerCA::noteLayerPropertyChanged(this, 2147483776, 0);
  }
  return this;
}

WebCore::Page **WebCore::PageOverlayController::notifyFlushRequired(WebCore::PageOverlayController *this, const WebCore::GraphicsLayer *a2)
{
  WebCore::Page *v2;
  WebCore::Page *v4;

  v2 = *(WebCore::Page **)(*((_QWORD *)this + 1) + 8);
  ++*(_DWORD *)v2;
  v4 = v2;
  WebCore::Page::scheduleRenderingUpdate((uint64_t)v2, 0x4000);
  return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v4);
}

uint64_t WebCore::RenderLayerCompositor::notifyFlushRequired(WebCore::RenderLayerCompositor *this, const WebCore::GraphicsLayer *a2)
{
  return WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
}

_QWORD *WebCore::RenderLayerCompositor::attachRootLayer(_QWORD *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::HTMLFrameOwnerElement *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (this[28])
  {
    v3 = (uint64_t)this;
    if (a2 == 2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this[1] + 24) + 8) + 40) + 8) + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 120);
          if (v6)
          {
            v7 = *(WebCore::HTMLFrameOwnerElement **)(v6 + 8);
            if (v7)
              WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(v7);
          }
        }
      }
    }
    else if (a2 == 1)
    {
      v8 = this[1];
      if (this[32])
        v10 = this[32];
      else
        v10 = this[28];
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 528)
                                                                     + 8)
                                                         + 24)
                                             + 8)
                                 + 48)
                     + 16);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 984))(v9, *(_QWORD *)(*(_QWORD *)(v8 + 248) + 328), v10);
    }
    *(_DWORD *)(v3 + 216) = a2;
    this = (_QWORD *)WebCore::RenderLayerCompositor::rootLayerAttachmentChanged((WebCore::RenderLayerCompositor *)v3);
    if (*(_BYTE *)(v3 + 197))
    {
      this = (_QWORD *)WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) + 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
      *(_BYTE *)(v3 + 197) = 0;
    }
  }
  return this;
}

WebCore::WindowEventLoop *WebCore::WindowEventLoop::eventLoopForSecurityOrigin@<X0>(WebCore::WindowEventLoop *this@<X0>, WebCore::WindowEventLoop **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebCore::WindowEventLoop *v6;
  WebCore::WindowEventLoop *result;
  uint64_t v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  char v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  WebCore::WindowEventLoop *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unsigned int v50;
  int v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  WTF *v57;
  uint64_t v58;
  WebCore::WindowEventLoop **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  char v62;
  WTF::StringImpl *v63;

  if (*((_DWORD *)this + 8) == 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_3;
  }
  v5 = (WebCore::WindowEventLoop *)((char *)this + 8);
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v61, (WebCore::WindowEventLoop *)((char *)this + 8));
  if (!v61 || !*((_DWORD *)v61 + 1) || MEMORY[0x19AEA53F4]())
  {
    v9 = *((unsigned int *)this + 8);
    if ((_DWORD)v9 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      goto LABEL_11;
    }
    if ((_DWORD)v9 != -1)
    {
      v63 = (WTF::StringImpl *)&v62;
      v10 = (_QWORD *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(&v63, v5);
      if (MEMORY[0x19AEA53F4](*v10, "file", 4) && *((_BYTE *)this + 59))
        WTF::String::String(&v60, (uint64_t)"null", 5);
      else
        WebCore::SecurityOriginData::toString(v5, &v60);
      goto LABEL_11;
    }
LABEL_107:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_108;
  }
  v29 = *((unsigned int *)this + 8);
  if ((_DWORD)v29 == -1)
    goto LABEL_107;
  v63 = (WTF::StringImpl *)&v62;
  v30 = *(WTF::StringImpl **)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl *))off_1E33A8F90[v29])(&v63, v5);
  if (v30)
    *(_DWORD *)v30 += 2;
  v31 = v61;
  if (v61)
    *(_DWORD *)v61 += 2;
  if (v30)
    v32 = *((_DWORD *)v30 + 1);
  else
    v32 = 0;
  if (v31)
  {
    v33 = *((_DWORD *)v31 + 1);
    if (v33 < 0)
    {
LABEL_110:
      v60 = 0;
      goto LABEL_111;
    }
  }
  else
  {
    v33 = 0;
  }
  v34 = __OFADD__(v33, 3);
  v35 = v33 + 3;
  v36 = v34;
  if (v32 < 0)
    goto LABEL_110;
  if ((v36 & 1) != 0)
    goto LABEL_110;
  v37 = (v32 + v35);
  if (__OFADD__(v32, v35))
    goto LABEL_110;
  if (v30)
  {
    v38 = *((_DWORD *)v30 + 4);
    v39 = (v38 >> 2) & 1;
    if (!v31 || (v38 & 4) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (v31)
  {
LABEL_57:
    v39 = (*((unsigned __int8 *)v31 + 16) >> 2) & 1;
LABEL_58:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37, v39, (uint64_t)v30, (int8x16_t *)"://", 3u, (uint64_t)v31, &v60);
    if (!v60)
      goto LABEL_111;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v4);
      else
        *(_DWORD *)v31 -= 2;
    }
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v4);
      else
        *(_DWORD *)v30 -= 2;
    }
    goto LABEL_11;
  }
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v37, 1, 0, (int8x16_t *)"://", 3u, 0, &v60);
  if (!v60)
    goto LABEL_111;
LABEL_11:
  v11 = v61;
  v61 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v4);
    else
      *(_DWORD *)v11 -= 2;
  }
LABEL_3:
  v5 = v60;
  if (!v60)
  {
LABEL_4:
    v61 = 0;
    v6 = (WebCore::WindowEventLoop *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::WindowEventLoop::WindowEventLoop(v6, (const WTF::String *)&v61);
    *a2 = result;
    return result;
  }
  if (!*((_DWORD *)v60 + 1))
  {
    v60 = 0;
    goto LABEL_67;
  }
  v12 = (WTF *)MEMORY[0x19AEA53F4](v60, "null", 4);
  v5 = v60;
  if ((_DWORD)v12)
  {
    v60 = 0;
    if (!v5)
      goto LABEL_4;
LABEL_67:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
    goto LABEL_4;
  }
  v63 = v60;
  if (!v60)
    goto LABEL_4;
  if ((WTF::isMainThread(v12) & 1) == 0)
  {
LABEL_111:
    __break(0xC471u);
    JUMPOUT(0x19423D2BCLL);
  }
  if (_MergedGlobals_175 == 1)
  {
    v16 = dword_1ECE83248;
    v15 = dword_1ECE8324C;
    goto LABEL_20;
  }
LABEL_108:
  v16 = 0;
  v15 = 0;
  qword_1ECE83240 = 0;
  *(_QWORD *)&dword_1ECE83248 = 0;
  qword_1ECE83250 = 0;
  _MergedGlobals_175 = 1;
LABEL_20:
  if (10 * (unint64_t)v15 >= 9 * (unint64_t)v16 || BYTE4(qword_1ECE83250) && v16 <= 2 * v15)
  {
    if (v16)
      v56 = 2 * v16;
    else
      v56 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v56);
    v16 = dword_1ECE83248;
  }
  v17 = v16 - 1;
  v18 = qword_1ECE83250;
  v19 = *((_DWORD *)v5 + 4);
  if (v19 < 0x100)
    v20 = WTF::StringImpl::hashSlowCase(v5);
  else
    v20 = v19 >> 8;
  v21 = (v20 ^ v18) & v17;
  v22 = qword_1ECE83240;
  v23 = qword_1ECE83240 + 16 * v21;
  v24 = *(WTF **)v23;
  if (*(_QWORD *)v23)
  {
    v25 = 0;
    v59 = a2;
    while (1)
    {
      v26 = *((_DWORD *)v24 + 4);
      v27 = v26 < 0x100 ? WTF::StringImpl::hashSlowCase(v24) : v26 >> 8;
      v28 = (v21 + v16 - ((v27 ^ v18) & v17)) & v17;
      if (v25 > v28)
        break;
      if (v27 == v20 && (WTF::equal(*(WTF **)v23, v5, v14) & 1) != 0)
      {
        result = *(WebCore::WindowEventLoop **)(v23 + 8);
        ++*((_DWORD *)result + 2);
        a2 = v59;
        goto LABEL_34;
      }
      v22 = qword_1ECE83240;
      v21 = ((_DWORD)v21 + 1) & v17;
      ++v25;
      v23 = qword_1ECE83240 + 16 * v21;
      v24 = *(WTF **)v23;
      if (!*(_QWORD *)v23)
      {
        if (v25 >= 0x80)
          BYTE4(qword_1ECE83250) = 1;
        a2 = v59;
        goto LABEL_84;
      }
    }
    if (v25 >= 0x80)
      BYTE4(qword_1ECE83250) = 1;
    v57 = *(WTF **)v23;
    *(_QWORD *)v23 = 0;
    v41 = v22 + 16 * v21;
    v42 = *(_QWORD *)(v41 + 8);
    WebCore::ContentType::~ContentType((WTF::StringImpl **)v23, v13);
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    WTF::GenericHashTraits<WTF::AtomString>::assignToEmpty<WTF::AtomString,WTF::AtomString const&>(v43, (WTF::StringImpl *)&v63);
    *(_QWORD *)(v41 + 8) = 0;
    v44 = ((_DWORD)v21 + 1) & v17;
    v45 = &qword_1ECE83000;
    v46 = qword_1ECE83240;
    v47 = (WTF::StringImpl **)(qword_1ECE83240 + 16 * v44);
    v48 = *v47;
    if (*v47)
    {
      v49 = v57;
      do
      {
        v50 = *((_DWORD *)v48 + 4);
        if (v50 < 0x100)
        {
          v58 = v42;
          v55 = v45;
          v51 = WTF::StringImpl::hashSlowCase(v48);
          v45 = v55;
          v42 = v58;
        }
        else
        {
          v51 = v50 >> 8;
        }
        if (++v28 > (((_DWORD)v44 + v16 - ((v51 ^ v18) & v17)) & v17))
        {
          v52 = *v47;
          *v47 = 0;
          v53 = v46 + 16 * v44;
          v54 = *(_QWORD *)(v53 + 8);
          *v47 = v49;
          *(_QWORD *)(v53 + 8) = v42;
          v42 = v54;
          v49 = v52;
          v28 = (v44 + v16 - ((v51 ^ v18) & v17)) & v17;
        }
        v44 = ((_DWORD)v44 + 1) & v17;
        v46 = v45[72];
        v47 = (WTF::StringImpl **)(v46 + 16 * v44);
        v48 = *v47;
      }
      while (*v47);
    }
    else
    {
      v49 = v57;
    }
    *v47 = v49;
    *(_QWORD *)(v46 + 16 * v44 + 8) = v42;
    a2 = v59;
  }
  else
  {
LABEL_84:
    *(_DWORD *)v5 += 2;
    *(_QWORD *)v23 = v5;
    *(_QWORD *)(v22 + 16 * v21 + 8) = 0;
  }
  ++dword_1ECE8324C;
  v40 = (WebCore::WindowEventLoop *)WTF::fastMalloc((WTF *)0x158);
  result = WebCore::WindowEventLoop::WindowEventLoop(v40, (const WTF::String *)&v63);
  *(_QWORD *)(v23 + 8) = result;
  v5 = v63;
LABEL_34:
  *a2 = result;
  v63 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (WebCore::WindowEventLoop *)WTF::StringImpl::destroy(v5, v13);
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

WebCore::WindowEventLoop *WebCore::WindowEventLoop::WindowEventLoop(WebCore::WindowEventLoop *this, const WTF::String *a2)
{
  _DWORD *v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE v15[24];

  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = 0x7FF8000000000000;
  *(_QWORD *)this = off_1E33A8F68;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  *((_QWORD *)this + 17) = v3;
  *((_QWORD *)this + 18) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 152) = 0uLL;
  *(_OWORD *)((char *)this + 168) = 0uLL;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)this + 23) = v5;
  *((_QWORD *)this + 18) = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E33A8FB0;
  v7[1] = WebCore::WindowEventLoop::didReachTimeToRun;
  v7[2] = 0;
  v7[3] = this;
  *((_DWORD *)this + 54) = 0;
  *((_QWORD *)this + 24) = v7;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v8 = *((_QWORD *)this + 2);
  if (v8)
    goto LABEL_16;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = this;
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8;
  if (!v10)
    goto LABEL_16;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
LABEL_16:
    do
      v13 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v13 + 1, (unsigned int *)v8));
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = v8;
  *((_BYTE *)this + 248) = 0;
  WTF::WeakHashSet<WebCore::EventLoopTaskGroup,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::EventLoopTaskGroup>((uint64_t)this + 72, (uint64_t *)this + 26, (uint64_t)v15);
  *((_WORD *)this + 128) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 305) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0x3F70624DD2F1A9FCLL;
  return this;
}

uint64_t WebCore::RenderLayerCompositor::scheduleRenderingUpdate(WebCore::RenderLayerCompositor *this)
{
  return WebCore::Page::scheduleRenderingUpdate(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24)+ 8)+ 40)+ 8)+ 528)+ 8)+ 24)+ 8), 0x4000);
}

uint64_t WebCore::RenderLayerCompositor::updateOverflowControlsLayers(WebCore::RenderLayerCompositor *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)this + 33))
  {
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 66);
    v2 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
    if (v2)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 456))(v2, *(_QWORD *)(*((_QWORD *)this + 1) + 248) + 64, 0);
  }
  if (*((_QWORD *)this + 34))
  {
    WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 68);
    v3 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
    if (v3)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 456))(v3, *(_QWORD *)(*((_QWORD *)this + 1) + 248) + 64, 1);
  }
  WebCore::GraphicsLayer::unparentAndClear((_DWORD *)this + 70);
  return WebCore::ScrollView::positionScrollbarLayers(*(WebCore::ScrollView **)(*((_QWORD *)this + 1) + 248));
}

WebCore::Node *WebCore::HTMLFrameOwnerElement::scheduleInvalidateStyleAndLayerComposition(WebCore::HTMLFrameOwnerElement *this)
{
  WebCore::Node *result;
  WebCore::Node *v3;
  uint64_t v4;
  WebCore::Node **v5;
  WebCore::Node **v6;
  uint64_t v7;
  WebCore::Node *ElementSibling;
  WebCore::Element *v9;
  WebCore::Node *v10;

  if (!WebCore::Style::resolutionNestingDepth)
  {
    result = (WebCore::Node *)WebCore::Node::invalidateStyle((uint64_t)this, 3u, 1);
    if ((*((_BYTE *)this + 71) & 1) != 0)
    {
      v7 = *((_QWORD *)this + 4);
      if (!v7 || (*(_WORD *)(v7 + 28) & 8) == 0 || (*(_BYTE *)(v7 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)this);
        return WebCore::invalidateForSiblingCombinators(ElementSibling, v9);
      }
    }
    return result;
  }
  if (this)
    *((_DWORD *)this + 6) += 4;
  v3 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = &off_1E33BEB00;
  *((_QWORD *)v3 + 1) = this;
  v10 = v3;
  {
    v4 = dword_1EE2F96B4;
    if (dword_1EE2F96B4 != dword_1EE2F96B0)
    {
      v6 = (WebCore::Node **)(WebCore::Style::postResolutionCallbackQueue(void)::vector
                            + 8 * dword_1EE2F96B4);
      v5 = &v10;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = 0;
    WebCore::Style::postResolutionCallbackQueue(void)::vector = 0;
    *(_QWORD *)&dword_1EE2F96B0 = 0;
  }
  v5 = (WebCore::Node **)WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&WebCore::Style::postResolutionCallbackQueue(void)::vector, v4 + 1, (unint64_t)&v10);
  LODWORD(v4) = dword_1EE2F96B4;
  v6 = (WebCore::Node **)(WebCore::Style::postResolutionCallbackQueue(void)::vector + 8
                                                                                    * dword_1EE2F96B4);
  v3 = *v5;
LABEL_9:
  *v5 = 0;
  *v6 = v3;
  dword_1EE2F96B4 = v4 + 1;
  result = v10;
  v10 = 0;
  if (result)
    result = (WebCore::Node *)(*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)result + 8))(result);
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(this);
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v13 = (_QWORD *)v11;
      v14 = 8 * v10;
      v15 = v5;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        *v13 = v16;
        v17 = *(_QWORD *)v15;
        *(_QWORD *)v15 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        ++v13;
        v15 = (WTF *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(unsigned int a1)
{
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;

  v2 = dword_1ECE83248;
  v3 = (WTF *)qword_1ECE83240;
  qword_1ECE83240 = WTF::fastZeroedMalloc((WTF *)(16 * a1));
  dword_1ECE83248 = a1;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(qword_1ECE83240);
  LODWORD(qword_1ECE83250) = result;
  BYTE4(qword_1ECE83250) = 0;
  if ((_DWORD)v2)
  {
    v6 = (WTF::StringImpl **)v3;
    do
    {
      if (*v6)
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::WindowEventLoop *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::WindowEventLoop *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::WindowEventLoop *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::reinsert((uint64_t)v6, v5);
      WebCore::ContentType::~ContentType(v6, v5);
      v6 += 2;
      --v2;
    }
    while (v2);
    return WTF::fastFree(v3, v5);
  }
  if (v3)
    return WTF::fastFree(v3, v5);
  return result;
}

PAL *WebCore::localizedDeviceModel@<X0>(PAL *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (unint64_t)&WebCore::MathMLNames::rspaceAttr;
    goto LABEL_17;
  if (byte_1ECE88A68)
  {
LABEL_8:
    v6 = (WTF::StringImpl *)WebCore::cachedLocalizedDeviceModel(void)::deviceModel;
    if (WebCore::cachedLocalizedDeviceModel(void)::deviceModel)
      goto LABEL_9;
    goto LABEL_10;
  }
  while (1)
  {
    v4 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(this), "currentDevice"), "localizedModel");
    this = (PAL *)MEMORY[0x19AEA5508](&v9, v4);
    v6 = v9;
    v9 = 0;
    if (!byte_1ECE88A68)
      break;
    this = (PAL *)WebCore::cachedLocalizedDeviceModel(void)::deviceModel;
    WebCore::cachedLocalizedDeviceModel(void)::deviceModel = (uint64_t)v6;
    if (!this)
      goto LABEL_7;
    v7 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this != 2)
    {
LABEL_6:
      *(_DWORD *)this = v7;
      goto LABEL_7;
    }
    WTF::StringImpl::destroy(this, v5);
    this = v9;
    v9 = 0;
    if (this)
    {
      v7 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this != 2)
        goto LABEL_6;
      this = (PAL *)WTF::StringImpl::destroy(this, v8);
    }
LABEL_7:
    v3 = byte_1ECE88A68;
    if (byte_1ECE88A68)
      goto LABEL_8;
    __break(1u);
LABEL_17:
    LOBYTE(WebCore::cachedLocalizedDeviceModel(void)::deviceModel) = 0;
    byte_1ECE88A68 = 0;
    *(_BYTE *)(v3 + 2672) = 1;
  }
  WebCore::cachedLocalizedDeviceModel(void)::deviceModel = (uint64_t)v6;
  byte_1ECE88A68 = 1;
  if (!v6)
    goto LABEL_10;
LABEL_9:
  *(_DWORD *)v6 += 2;
LABEL_10:
  *a2 = v6;
  return this;
}

uint64_t PAL::UIDeviceFunction(PAL *this)
{
  return qword_1ECE7ED40;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::operator=(_DWORD **a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(&v4, a1);
  v1 = qword_1ECE90D08;
  qword_1ECE90D08 = v4;
  v4 = v1;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::~HashTable(&v4, v2);
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  const void **v6;
  const void *v7;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(v3 + 40);
      do
      {
        if (*((_DWORD *)v6 - 10) != -1)
        {
          v7 = *v6;
          *v6 = 0;
          if (v7)
            CFRelease(v7);
        }
        v6 += 8;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable(uint64_t *a1, _DWORD **a2)
{
  _DWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t Table;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *(v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*(v3 - 3));
      Table = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(v6);
      *a1 = Table;
      *(_DWORD *)(Table - 4) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (unint64_t)&(*a2)[16 * (unint64_t)*(*a2 - 1)] : 0;
      if ((_DWORD *)v12 != v8)
      {
        do
        {
          v14 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(a1, v9);
          *(_DWORD *)v14 = *v9;
          v15 = *(_OWORD *)(v9 + 2);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v9 + 6);
          *(_OWORD *)(v14 + 8) = v15;
          WTF::RetainPtr<CGColorSpace *>::operator=((const void **)(v14 + 40), (CFTypeRef *)v9 + 5);
          *(_OWORD *)(v14 + 48) = *((_OWORD *)v9 + 3);
          while (1)
          {
            v9 += 16;
            if (v9 == v11)
              break;
            if ((*v9 + 1) > 1)
              goto LABEL_10;
          }
          v9 = v11;
LABEL_10:
          ;
        }
        while (v9 != (_DWORD *)v12);
      }
    }
  }
  return a1;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::begin(_DWORD **a1)
{
  _DWORD *result;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *(result - 1);
  v3 = &result[16 * v2];
  if (!*(result - 3))
    return &result[16 * v2];
  if ((_DWORD)v2)
  {
    v4 = v2 << 6;
    while ((*result + 1) <= 1)
    {
      result += 16;
      v4 -= 64;
      if (!v4)
        return v3;
    }
  }
  return result;
}

const void **WTF::RetainPtr<CGColorSpace *>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  if (v4)
    CFRelease(v4);
  return a1;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = 9 * ((*a2 + ~(*a2 << 15)) ^ ((*a2 + ~(*a2 << 15)) >> 10));
  v6 = ((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16);
  do
  {
    v7 = v6 & v3;
    v6 = ++v4 + v7;
  }
  while (*(_DWORD *)(v2 + (v7 << 6)));
  return v2 + (v7 << 6);
}

void WebCore::overrideScreenSize(WebCore *this)
{
  PAL *HasIPadCapability;
  float v2;
  float v3;
  WebCore *v4;
  float *v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  char v17;
  char **v18;
  char *v19;

  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
  if ((_DWORD)HasIPadCapability
    && (objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic") & 1) != 0)
  {
    v2 = 320.0;
    v3 = 480.0;
  }
  else
  {
    {
      v4 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
    }
    else
    {
      v4 = 0;
      WebCore::screenProperties(void)::screenProperties = 0;
      qword_1ECE90D08 = 0;
    }
    v5 = (float *)WebCore::screenData(v4);
    if (v5)
    {
      v2 = v5[6];
      v3 = v5[7];
    }
    else
    {
      objc_msgSend((id)objc_msgSend((id)PAL::getUIScreenClass(0), "mainScreen"), "_referenceBounds");
      v2 = v6;
      v3 = v7;
    }
  }
  v8 = atomic_load(&qword_1ECE81BE0);
  if (v8 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&qword_1ECE81BE0, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::isInternalInstall(void)::$_0 &&>>);
  }
  if (byte_1ECE81BC2)
  {
    {
      if (byte_1ECE90A51)
        return;
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v9 = 0;
    v10 = 480.0;
    v11 = 320.0;
    do
    {
      v12 = *(float *)((char *)&unk_1968DDEE0 + v9);
      v13 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
      if (v12 > v2 && v13 > v3)
        break;
      if (v12 == v2 && v13 == v3)
        break;
      if (v11 <= v12 && v10 <= v13)
      {
        v10 = *(float *)((char *)&unk_1968DDEE0 + v9 + 4);
        v11 = *(float *)((char *)&unk_1968DDEE0 + v9);
      }
      v9 += 8;
    }
    while (v9 != 168);
  }
}

BOOL PAL::currentUserInterfaceIdiomIsSmallScreen(PAL *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 v3;
  PAL *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v1 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v1 > 0xFF)
    goto LABEL_16;
  v2 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v2 <= 0x100)
    v3 = 0;
  else
    v3 = v2;
  v4 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass(this), "sharedApplication");
  if (!v4)
  {
    if (!PAL::deviceClassIsSmallScreen(0))
      goto LABEL_13;
LABEL_11:
    v6 = 1;
    v8 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v8 < 0x100)
      goto LABEL_15;
    goto LABEL_14;
  }
  v5 = objc_msgSend((id)objc_msgSend((id)PAL::getUIDeviceClass(v4), "currentDevice"), "userInterfaceIdiom");
  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 0)
    goto LABEL_11;
  if (v5 == 6)
  {
    v6 = 2;
    v7 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
    if (v7 < 0x100)
      goto LABEL_15;
LABEL_14:
    if (v6 == v3)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_13:
  v6 = 0;
  v9 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  if (v9 >= 0x100)
    goto LABEL_14;
LABEL_15:
  atomic_store(v6 | 0x100, &PAL::s_currentUserInterfaceIdiom);
LABEL_16:
  v10 = atomic_load(&PAL::s_currentUserInterfaceIdiom);
  return v10 > 0xFF && v10 == 1;
}

BOOL PAL::deviceClassIsSmallScreen(PAL *this)
{
  if (_MergedGlobals_64 == 1)
    return dword_1ECE7E3BC == 6 || (dword_1ECE7E3BC - 1) < 2;
  dword_1ECE7E3BC = MGGetSInt32Answer();
  _MergedGlobals_64 = 1;
  return dword_1ECE7E3BC == 6 || (dword_1ECE7E3BC - 1) < 2;
}

uint64_t WebCore::contentSizeCategory(WebCore *this)
{
  {
    this = (WebCore *)WebCore::contentSizeCategoryStorage(void)::contentSizeCategory;
    if (WebCore::contentSizeCategoryStorage(void)::contentSizeCategory)
      return WTF::StringImpl::operator NSString *();
  }
  else
  {
    WebCore::contentSizeCategoryStorage(void)::contentSizeCategory = 0;
  }
  return objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(this), "sharedApplication"), "preferredContentSizeCategory");
}

void WebCore::standardUserAgentWithApplicationName(uint64_t *a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  _OWORD *v14;
  char *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  const void *v19;
  CFTypeID v20;
  _DWORD *v21;
  PAL *v22;
  unsigned int v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  PAL *HasIPadCapability;
  PAL *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  size_t v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  _DWORD *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int8x16_t v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  __int16 v70;
  char *v71;
  uint64_t v72;
  char **v73;
  char *v74;
  char *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  int8x16_t v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  char *v85;
  __int16 v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  int8x16_t v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  __int16 v98;
  uint64_t v99;
  char *v100;
  char *v101;
  __int128 v102;
  int8x16_t v103;
  __int128 v104;
  __int128 v105;
  char *v106;
  char *v107;
  char *v108;
  __int16 v109;
  unsigned __int128 *v110;
  unsigned __int128 *v111;
  unsigned __int128 v112;
  char *v113;
  char *v114;
  unsigned __int128 v115;
  char v116;
  char v117;
  unint64_t v118;
  size_t v119;
  size_t v120;
  const char *__src;
  char **v122;
  _DWORD *v123;
  char v124;
  char **v125;
  char *v126;
  unint64_t v127;
  int8x16x2_t v128;
  int8x16x2_t v129;
  int8x16x2_t v130;
  int8x16x2_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;
  int8x16x2_t v135;
  int8x16x2_t v136;
  int8x16x2_t v137;
  int8x16x2_t v138;
  int8x16x2_t v139;

  v7 = *a1;
  if (*a1)
  {
    v16 = *(_DWORD *)(v7 + 4);
    if (v16)
      v8 = " ";
    else
      v8 = "";
    if (v16)
      v9 = 2;
    else
      v9 = 1;
    if (a3 == 1)
    {
      *(_DWORD *)v7 += 2;
      goto LABEL_22;
    }
  }
  else
  {
    v8 = "";
    v9 = 1;
    if (a3 == 1)
    {
LABEL_22:
      v17 = v9 - 1;
      if ((unint64_t)(v9 - 1) >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x19423E15CLL);
      }
      if (v7)
      {
        v10 = *(_DWORD *)(v7 + 4);
        if (v10 < 0)
          goto LABEL_204;
      }
      else
      {
        v10 = 0;
      }
      v11 = __OFADD__(v17, v10);
      v12 = v17 + v10;
      if (!v11 && !__OFADD__(v12, 88))
      {
        if (v7)
          v13 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
        else
          v13 = 1;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((v12 + 88), v13, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko)",
          0x58u,
          v8,
          v17,
          v7,
          &v126);
        v15 = v126;
        *a4 = v126;
        if (v15)
        {
          if (v7)
          {
            if (*(_DWORD *)v7 != 2)
            {
              *(_DWORD *)v7 -= 2;
              return;
            }
            v76 = (WTF::StringImpl *)v7;
            goto LABEL_174;
          }
          return;
        }
LABEL_205:
        __break(0xC471u);
        JUMPOUT(0x19423EAE0);
      }
LABEL_204:
      *a4 = 0;
      goto LABEL_205;
    }
  }
  v18 = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((v18 & 1) == 0)
  {
    v18 = (uint64_t)CFPreferencesCopyAppValue(CFSTR("UserAgent"), CFSTR("com.apple.WebFoundation"));
    if (v18)
    {
      v19 = (const void *)v18;
      v20 = CFGetTypeID((CFTypeRef)v18);
      if (v20 == CFStringGetTypeID())
      {
        if ((_MergedGlobals_46_0 & 1) == 0)
        {
          NSLog(&CFSTR("Reading an override UA from the NSUserDefault [com.apple.WebFoundation UserAgent]. This is incompatible"
                       " with the modern need to compose the UA and clients should use the API to set the application nam"
                       "e or UA instead.").isa);
          _MergedGlobals_46_0 = 1;
        }
        MEMORY[0x19AEA5508](a4, v19);
        CFRelease(v19);
        return;
      }
      CFRelease(v19);
    }
  }
  v21 = *a2;
  if (!*a2 || !v21[1])
    WebCore::systemMarketingVersionForUserAgentString((WebCore *)v18);
  *v21 += 2;
  v123 = v21;
  v22 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass((PAL *)v18), "sharedApplication"), "_isClassic");
  if ((_DWORD)v22)
  {
    v22 = (PAL *)objc_msgSend((id)PAL::getUIApplicationClass(v22), "_classicMode");
    if (v22 == (PAL *)7)
      v23 = 4;
    else
      v23 = 6;
    if (v22 == (PAL *)7)
      v24 = "iPad";
    else
      v24 = "iPhone";
    goto LABEL_40;
  }
  if ((byte_1ECE81CAC & 1) != 0)
  {
    v26 = qword_1ECE81CC8;
    if (qword_1ECE81CC8)
    {
LABEL_43:
      v24 = *(const char **)(v26 + 8);
      v23 = *(_DWORD *)(v26 + 4);
      v25 = (unint64_t)((*(_DWORD *)(v26 + 16) >> 2) & 1) << 32;
      goto LABEL_44;
    }
  }
  else
  {
    {
      PAL::deviceName(void)::deviceName = 0;
    }
    v118 = atomic_load(&PAL::deviceName(void)::onceKey);
    if (v118 != -1)
    {
      v126 = &v124;
      v125 = &v126;
      std::__call_once(&PAL::deviceName(void)::onceKey, &v125, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::deviceName(void)::$_0 &&>>);
    }
    v22 = (PAL *)MEMORY[0x19AEA5508](&v126, PAL::deviceName(void)::deviceName);
    v26 = (uint64_t)v126;
    qword_1ECE81CC8 = (uint64_t)v126;
    byte_1ECE81CAC = 1;
    if (v126)
      goto LABEL_43;
  }
  v23 = 0;
  v24 = 0;
LABEL_40:
  v25 = 0x100000000;
LABEL_44:
  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(v22);
  v122 = a4;
  if ((_DWORD)HasIPadCapability
    && ((v28 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic"), !(_DWORD)v28)|| objc_msgSend((id)PAL::getUIApplicationClass(v28), "_classicMode") == 7))
  {
    v29 = "OS";
    v30 = 3;
  }
  else
  {
    v29 = "iPhone OS";
    v30 = 10;
  }
  if (v123)
    *v123 += 2;
  v31 = *a1;
  if (v31)
    *(_DWORD *)v31 += 2;
  __src = v24;
  v119 = v30 - 1;
  if ((unint64_t)(v30 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19423EB0CLL);
  }
  v120 = v9 - 1;
  if (v120 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x19423EB38);
  }
  if (v123)
  {
    v32 = v123[1];
    if (v31)
      goto LABEL_57;
LABEL_127:
    v33 = 0;
    goto LABEL_58;
  }
  v32 = 0;
  if (!v31)
    goto LABEL_127;
LABEL_57:
  v33 = *(_DWORD *)(v31 + 4);
  if (v33 < 0)
    goto LABEL_131;
LABEL_58:
  v11 = __OFADD__((_DWORD)v120, v33);
  v34 = v120 + v33;
  if (v11)
    goto LABEL_131;
  v11 = __OFADD__(v34, 56);
  v35 = v34 + 56;
  v36 = v11;
  if (v32 < 0)
    goto LABEL_131;
  if (v36)
    goto LABEL_131;
  v11 = __OFADD__(v32, v35);
  v37 = v32 + v35;
  if (v11)
    goto LABEL_131;
  v11 = __OFADD__(v37, 1);
  v38 = v37 + 1;
  if (v11)
    goto LABEL_131;
  v11 = __OFADD__((_DWORD)v119, v38);
  v39 = v119 + v38;
  if (v11)
    goto LABEL_131;
  v40 = v23;
  v11 = __OFADD__(v39, 6);
  v41 = v39 + 6;
  v42 = v11;
  if ((v23 & 0x80000000) != 0)
    goto LABEL_131;
  if (v42)
    goto LABEL_131;
  v11 = __OFADD__(v23, v41);
  v43 = v23 + v41;
  if (v11)
    goto LABEL_131;
  v44 = v43 + 13;
  if (__OFADD__(v43, 13))
    goto LABEL_131;
  if ((v25 & 0x100000000) != 0)
  {
    if (v123)
    {
      v45 = v123[4];
      if (!v31 || (v45 & 4) == 0)
      {
        v46 = v44;
        v47 = v44 == 0;
        if ((v45 & 4) != 0)
        {
LABEL_79:
          if (!v47)
          {
            if ((v44 & 0x80000000) != 0)
              goto LABEL_131;
            goto LABEL_81;
          }
          goto LABEL_181;
        }
        goto LABEL_106;
      }
    }
    else if (!v31)
    {
      if (v43 != -13)
      {
        v46 = v44;
        if ((v44 & 0x80000000) != 0)
          goto LABEL_131;
LABEL_81:
        WTF::tryFastCompactMalloc((WTF *)(v46 + 20));
        v48 = v126;
        if (v126)
        {
          *(_DWORD *)v126 = 2;
          v48[1] = v44;
          qmemcpy(v48 + 5, "Mozilla/5.0 (", 13);
          *((_QWORD *)v48 + 1) = v48 + 5;
          v48[4] = 4;
          v49 = (char *)v48 + 33;
          if ((_DWORD)v40)
          {
            if ((_DWORD)v40 == 1)
              *v49 = *__src;
            else
              memcpy((char *)v48 + 33, __src, v40);
          }
          v50 = &v49[v40];
          *((_WORD *)v50 + 2) = 8277;
          *(_DWORD *)v50 = 1346576443;
          v51 = &v49[v40 + 6];
          if ((_DWORD)v119)
          {
            if ((_DWORD)v119 == 1)
              *v51 = *v29;
            else
              memcpy(v51, v29, v119);
          }
          v51[v119] = 32;
          v52 = &v51[v119 + 1];
          if (v123)
          {
            v14 = (_OWORD *)*((_QWORD *)v123 + 1);
            v53 = v123[1];
            if ((v123[4] & 4) != 0)
            {
              if ((_DWORD)v53)
              {
                if ((_DWORD)v53 == 1)
                  *v52 = *(_BYTE *)v14;
                else
                  memcpy(&v51[v119 + 1], v14, v53);
              }
            }
            else
            {
              if (v53 < 0x10)
              {
                v110 = (unsigned __int128 *)&v51[v119 + 1];
              }
              else
              {
                v110 = (unsigned __int128 *)&v52[v53 & 0xFFFFFFF0];
                v111 = (unsigned __int128 *)&v51[v119 + 1];
                do
                {
                  v112 = (unsigned __int128)vld2q_s8((const char *)v14);
                  v14 += 2;
                  *v111++ = v112;
                }
                while (v111 != v110);
              }
              while (v110 != (unsigned __int128 *)&v52[v53])
              {
                v117 = *(_BYTE *)v14;
                v14 = (_OWORD *)((char *)v14 + 2);
                *(_BYTE *)v110 = v117;
                v110 = (unsigned __int128 *)((char *)v110 + 1);
              }
            }
            v54 = v123[1];
          }
          else
          {
            v54 = 0;
          }
          v55 = &v52[v54];
          qmemcpy(v55, " like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko)", 56);
          v56 = v55 + 56;
          if ((_DWORD)v120)
          {
            if ((_DWORD)v120 == 1)
            {
              *v56 = *v8;
              if (v31)
                goto LABEL_98;
              goto LABEL_137;
            }
            memcpy(v55 + 56, v8, v120);
          }
          if (v31)
          {
LABEL_98:
            v57 = &v56[v120];
            v14 = *(_OWORD **)(v31 + 8);
            v58 = *(unsigned int *)(v31 + 4);
            if ((*(_BYTE *)(v31 + 16) & 4) != 0)
            {
              if ((_DWORD)v58)
              {
                if ((_DWORD)v58 == 1)
                  *v57 = *(_BYTE *)v14;
                else
                  memcpy(v57, v14, v58);
              }
              *v122 = (char *)v48;
              goto LABEL_165;
            }
            v113 = &v57[v58];
            if (v58 >= 0x10)
            {
              v114 = &v57[v58 & 0xFFFFFFF0];
              do
              {
                v115 = (unsigned __int128)vld2q_s8((const char *)v14);
                v14 += 2;
                *(_OWORD *)v57 = v115;
                v57 += 16;
              }
              while (v57 != v114);
              v57 = v114;
            }
            while (v57 != v113)
            {
              v116 = *(_BYTE *)v14;
              v14 = (_OWORD *)((char *)v14 + 2);
              *v57++ = v116;
            }
            goto LABEL_182;
          }
LABEL_137:
          *v122 = (char *)v48;
          if (!v123)
            goto LABEL_170;
          goto LABEL_168;
        }
LABEL_131:
        *v122 = 0;
        __break(0xC471u);
        JUMPOUT(0x19423E6BCLL);
      }
LABEL_181:
      v48 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
LABEL_182:
      v73 = v122;
      goto LABEL_164;
    }
    v46 = v44;
    v47 = v44 == 0;
    if ((*(_BYTE *)(v31 + 16) & 4) != 0)
      goto LABEL_79;
LABEL_106:
    if (v47)
      goto LABEL_181;
    goto LABEL_107;
  }
  if (v43 == -13)
    goto LABEL_181;
  v46 = v44;
LABEL_107:
  if (v44 > 0x7FFFFFEF)
    goto LABEL_131;
  WTF::tryFastCompactMalloc((WTF *)(2 * v46 + 20));
  v48 = v126;
  if (!v126)
    goto LABEL_131;
  *(_DWORD *)v126 = 2;
  v48[1] = v44;
  *(_OWORD *)(v48 + 5) = xmmword_1968DDFE0;
  *((_QWORD *)v48 + 1) = v48 + 5;
  v48[4] = 0;
  *(_QWORD *)(v48 + 9) = 0x200030002E0035;
  *((_WORD *)v48 + 22) = 40;
  v126 = (char *)__src;
  v127 = v25 | v40;
  WTF::StringView::getCharacters<char16_t>(&v126, (char *)v48 + 46);
  v59 = (uint64_t)v48 + 2 * v127 + 46;
  *(_QWORD *)v59 = 0x5000430020003BLL;
  *(_DWORD *)(v59 + 8) = 2097237;
  v60 = (char *)(v59 + 12);
  v61 = &v60[2 * v119];
  if ((v119 & 0x7FFFFFC0) != 0)
  {
    v62 = &v60[2 * (v119 & 0x7FFFFFC0)];
    v63 = 0uLL;
    do
    {
      v128.val[0] = *(int8x16_t *)v29;
      v64 = *((int8x16_t *)v29 + 1);
      v132.val[0] = (int8x16_t)*((_OWORD *)v29 + 2);
      v65 = *((_OWORD *)v29 + 3);
      v29 += 64;
      v66 = v65;
      v132.val[1] = 0uLL;
      v136.val[0] = v64;
      v128.val[1] = 0uLL;
      v67 = v60;
      vst2q_s8(v67, v128);
      v67 += 32;
      v136.val[1] = 0uLL;
      vst2q_s8(v67, v136);
      v68 = v60 + 64;
      vst2q_s8(v68, v132);
      v69 = v60 + 96;
      vst2q_s8(v69, *(int8x16x2_t *)(&v63 - 1));
      v60 += 128;
    }
    while (v60 != v62);
    v60 = v62;
  }
  while (v60 != v61)
  {
    v70 = *(unsigned __int8 *)v29++;
    *(_WORD *)v60 = v70;
    v60 += 2;
  }
  *(_WORD *)v61 = 32;
  v71 = v61 + 2;
  if (v123)
  {
    v14 = (_OWORD *)*((_QWORD *)v123 + 1);
    v72 = v123[1];
    v73 = v122;
    if ((v123[4] & 4) != 0)
    {
      v74 = &v71[2 * v72];
      if (v72 >= 0x40)
      {
        v75 = &v71[2 * (v72 & 0xFFFFFFC0)];
        v78 = 0uLL;
        v79 = v71;
        do
        {
          v129.val[0] = (int8x16_t)*v14;
          v80 = *((int8x16_t *)v14 + 1);
          v133.val[0] = (int8x16_t)v14[2];
          v81 = v14[3];
          v14 += 4;
          v82 = v81;
          v133.val[1] = 0uLL;
          v137.val[0] = v80;
          v129.val[1] = 0uLL;
          v83 = v79;
          vst2q_s8(v83, v129);
          v83 += 32;
          v137.val[1] = 0uLL;
          vst2q_s8(v83, v137);
          v84 = v79 + 64;
          vst2q_s8(v84, v133);
          v85 = v79 + 96;
          vst2q_s8(v85, *(int8x16x2_t *)(&v78 - 1));
          v79 += 128;
        }
        while (v79 != v75);
      }
      else
      {
        v75 = v71;
      }
      while (v75 != v74)
      {
        v86 = *(unsigned __int8 *)v14;
        v14 = (_OWORD *)((char *)v14 + 1);
        *(_WORD *)v75 = v86;
        v75 += 2;
      }
    }
    else if ((_DWORD)v72 == 1)
    {
      *(_WORD *)v71 = *(_WORD *)v14;
    }
    else if ((_DWORD)v72)
    {
      memcpy(v71, v14, 2 * v72);
    }
    v77 = v123[1];
  }
  else
  {
    v77 = 0;
    v73 = v122;
  }
  v87 = &v71[2 * v77];
  *(_WORD *)v87 = 32;
  *(_OWORD *)(v87 + 2) = xmmword_1968DDFF0;
  *(_OWORD *)(v87 + 18) = xmmword_1968DE000;
  *(_OWORD *)(v87 + 34) = xmmword_1968DE010;
  *(_OWORD *)(v87 + 50) = xmmword_1968DE020;
  *(_OWORD *)(v87 + 66) = xmmword_1968DE030;
  *(_OWORD *)(v87 + 82) = xmmword_1968DE040;
  *(_DWORD *)(v87 + 106) = 7274603;
  v88 = v87 + 112;
  *((_WORD *)v87 + 55) = 41;
  v89 = &v87[2 * v120 + 112];
  *(_QWORD *)(v87 + 98) = 0x63006500470020;
  if ((v120 & 0x7FFFFFC0) != 0)
  {
    v90 = &v88[2 * (v120 & 0x7FFFFFC0)];
    v91 = 0uLL;
    do
    {
      v130.val[0] = *(int8x16_t *)v8;
      v92 = *((int8x16_t *)v8 + 1);
      v134.val[0] = (int8x16_t)*((_OWORD *)v8 + 2);
      v93 = *((_OWORD *)v8 + 3);
      v8 += 64;
      v94 = v93;
      v134.val[1] = 0uLL;
      v138.val[0] = v92;
      v130.val[1] = 0uLL;
      v95 = v88;
      vst2q_s8(v95, v130);
      v95 += 32;
      v138.val[1] = 0uLL;
      vst2q_s8(v95, v138);
      v96 = v88 + 64;
      vst2q_s8(v96, v134);
      v97 = v88 + 96;
      vst2q_s8(v97, *(int8x16x2_t *)(&v91 - 1));
      v88 += 128;
    }
    while (v88 != v90);
    v88 = v90;
  }
  while (v88 != v89)
  {
    v98 = *v8++;
    *(_WORD *)v88 = v98;
    v88 += 2;
  }
  if (v31)
  {
    v14 = *(_OWORD **)(v31 + 8);
    v99 = *(unsigned int *)(v31 + 4);
    if ((*(_BYTE *)(v31 + 16) & 4) != 0)
    {
      v100 = &v89[2 * v99];
      if (v99 >= 0x40)
      {
        v101 = &v89[2 * (v99 & 0xFFFFFFC0)];
        v102 = 0uLL;
        do
        {
          v131.val[0] = (int8x16_t)*v14;
          v103 = *((int8x16_t *)v14 + 1);
          v135.val[0] = (int8x16_t)v14[2];
          v104 = v14[3];
          v14 += 4;
          v105 = v104;
          v135.val[1] = 0uLL;
          v139.val[0] = v103;
          v131.val[1] = 0uLL;
          v106 = v89;
          vst2q_s8(v106, v131);
          v106 += 32;
          v139.val[1] = 0uLL;
          vst2q_s8(v106, v139);
          v107 = v89 + 64;
          vst2q_s8(v107, v135);
          v108 = v89 + 96;
          vst2q_s8(v108, *(int8x16x2_t *)(&v102 - 1));
          v89 += 128;
        }
        while (v89 != v101);
        v89 = v101;
      }
      while (v89 != v100)
      {
        v109 = *(unsigned __int8 *)v14;
        v14 = (_OWORD *)((char *)v14 + 1);
        *(_WORD *)v89 = v109;
        v89 += 2;
      }
    }
    else if ((_DWORD)v99 == 1)
    {
      *(_WORD *)v89 = *(_WORD *)v14;
    }
    else if ((_DWORD)v99)
    {
      memcpy(v89, v14, 2 * v99);
    }
  }
LABEL_164:
  *v73 = (char *)v48;
  if (v31)
  {
LABEL_165:
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v31, (WTF::StringImpl *)v14);
      if (!v123)
        goto LABEL_170;
      goto LABEL_168;
    }
    *(_DWORD *)v31 -= 2;
  }
  if (!v123)
    goto LABEL_170;
LABEL_168:
  if (*v123 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v123, (WTF::StringImpl *)v14);
  else
    *v123 -= 2;
LABEL_170:
  v76 = (WTF::StringImpl *)v123;
  if (v123)
  {
    if (*v123 == 2)
    {
LABEL_174:
      WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v14);
      return;
    }
    *v123 -= 2;
  }
}

void sub_19423EB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  _Unwind_Resume(a1);
}

uint64_t PAL::UIApplicationFunction(PAL *this)
{
  return qword_1ECE7ED20;
}

void WebCore::systemMarketingVersionForUserAgentString(WebCore *this)
{
  void *v1;
  uint64_t v2;

  {
    v1 = (void *)WebCore::systemMarketingVersion(void)::version;
  }
  else
  {
    WebCore::createSystemMarketingVersion((WebCore *)&v2);
    v1 = (void *)v2;
    WebCore::systemMarketingVersion(void)::version = v2;
  }
  objc_msgSend(v1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("."), CFSTR("_"));
  JUMPOUT(0x19AEA5508);
}

uint64_t PAL::initUIDevice(PAL *this)
{
  if (qword_1ECE7ED38 != -1)
    dispatch_once(&qword_1ECE7ED38, &__block_literal_global_34_2);
  return qword_1ECE7ED40;
}

void WebCore::createSystemMarketingVersion(WebCore *this)
{
  const __CFDictionary *v2;

  v2 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  *(_QWORD *)this = objc_msgSend((id)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0C9ABB0]), "copy");
  if (v2)
    CFRelease(v2);
}

void sub_19423ED48(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t PAL::initUIApplication(PAL *this)
{
  if (qword_1ECE7ED18 != -1)
    dispatch_once(&qword_1ECE7ED18, &__block_literal_global_30_3);
  return qword_1ECE7ED20;
}

uint64_t PAL::deviceName@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  char v6;
  char **v7;
  char *v8;

  {
    PAL::deviceName(void)::deviceName = 0;
    v5 = atomic_load(&PAL::deviceName(void)::onceKey);
    if (v5 == -1)
      return MEMORY[0x19AEA5508](a1, PAL::deviceName(void)::deviceName);
    goto LABEL_3;
  }
  v3 = atomic_load(&PAL::deviceName(void)::onceKey);
  if (v3 != -1)
  {
LABEL_3:
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&PAL::deviceName(void)::onceKey, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<PAL::deviceName(void)::$_0 &&>>);
  }
  return MEMORY[0x19AEA5508](a1, PAL::deviceName(void)::deviceName);
}

float WebCore::availableScreenSize(WebCore *this)
{
  PAL *HasIPadCapability;
  WebCore *v3;
  float *v4;
  double v5;

  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
  if ((_DWORD)HasIPadCapability
    && (objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic") & 1) != 0)
  {
    return 320.0;
  }
  {
    v3 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v3 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v4 = (float *)WebCore::screenData(v3);
  if (v4)
    return v4[2];
  objc_msgSend((id)objc_msgSend((id)PAL::getUIScreenClass(0), "mainScreen"), "bounds");
  return v5;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::ScreenData>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::ScreenData>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WebCore::ScreenData,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::ScreenData>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  char v9;
  char **v10;
  char *v11;

  v2 = a1;
  v3 = WTF::fastMalloc((WTF *)(((unint64_t)a1 << 6) | 0x10));
  v4 = v3 + 16;
  if (a1)
  {
    v5 = v3 + 56;
    do
    {
      *(_DWORD *)(v5 - 40) = 0;
      *(_OWORD *)(v5 - 32) = 0u;
      *(_OWORD *)(v5 - 16) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_QWORD *)(v5 + 16) = 0;
      v6 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v6 != -1)
      {
        v10 = &v11;
        v11 = &v9;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v7 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      *(_QWORD *)v5 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
      if (v7)
        CFRetain(v7);
      *(_DWORD *)(v5 + 15) = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)(v5 + 20) = 1065353216;
      v5 += 64;
      --v2;
    }
    while (v2);
  }
  return v4;
}

uint64_t WebCore::collectScreenProperties@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t result;
  int v4;
  int *v5;
  uint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;
  const void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  PAL *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char IsInvertColorsEnabled;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  void *v72;
  char v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  const void *v87;
  unint64_t v88;
  const void *v89;
  unint64_t v90;
  const void *v91;
  unint64_t v92;
  const void *v93;
  unint64_t v94;
  const void *v95;
  unint64_t v96;
  const void *v97;
  unint64_t v98;
  const void *v99;
  unint64_t v100;
  const void *v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  const void *v120;
  char *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  void *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  _DWORD *v133;
  uint64_t i;
  int *v135;
  int v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  int *v142;
  const void *v143;
  __int128 v144;
  uint64_t v145;
  const void *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  __int128 v152;
  id obj;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  char v158;
  double v159;
  double v160;
  void *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _QWORD block[4];
  char v168;
  char v169;
  _QWORD *v170;
  _BYTE v171[128];
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v163 = 0u;
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  v2 = (void *)objc_msgSend((id)PAL::getUIScreenClass(this), "screens");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v163, v171, 16);
  if (result)
  {
    v4 = 0;
    v154 = *(_QWORD *)v164;
    v5 = &dword_1ECE90000;
    v152 = xmmword_1968A5190;
    obj = v2;
    do
    {
      v155 = result;
      v6 = 0;
      v7 = v4;
      do
      {
        if (*(_QWORD *)v164 != v154)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v163 + 1) + 8 * v6);
        v9 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v9 != -1)
        {
          block[0] = &v169;
          v170 = block;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v10 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
        if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        objc_msgSend(v8, "bounds", v152);
        v12 = v11;
        v14 = v13;
        v16 = v15;
        v18 = v17;
        v162 = v8;
        objc_msgSend(v8, "bounds");
        v160 = v19;
        v21 = v20;
        v22 = (PAL *)objc_msgSend(v8, "_referenceBounds");
        v159 = v23;
        v25 = v24;
        v27 = v26;
        v29 = v28;
        if ((v5[836] & 1) != 0)
        {
          v30 = qword_1ECE90D08;
          if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
          {
            if (!(_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v31 = *(unsigned int *)(qword_1ECE90D08 - 4);
              LODWORD(v32) = *(_DWORD *)(qword_1ECE90D08 - 4);
              goto LABEL_15;
            }
            v37 = *(_DWORD *)(qword_1ECE90D08 - 8);
            v38 = 9
                * ((WebCore::screenProperties(void)::screenProperties
                  + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) ^ ((WebCore::screenProperties(void)::screenProperties + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) >> 10));
            v39 = (v38 ^ (v38 >> 6)) + ~((v38 ^ (v38 >> 6)) << 11);
            v31 = (v39 ^ HIWORD(v39)) & v37;
            v40 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v31 << 6));
            if (v40 != (_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v147 = 1;
              while (v40)
              {
                v31 = ((_DWORD)v31 + v147) & v37;
                v40 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v31 << 6));
                ++v147;
                v5 = &dword_1ECE90000;
                if (v40 == (_DWORD)WebCore::screenProperties(void)::screenProperties)
                  goto LABEL_28;
              }
              v31 = *(unsigned int *)(qword_1ECE90D08 - 4);
              v5 = &dword_1ECE90000;
            }
LABEL_28:
            v32 = *(unsigned int *)(qword_1ECE90D08 - 4);
            if (v31 == v32)
            {
LABEL_15:
              if ((_DWORD)v32)
              {
                v33 = v31 << 6;
                v34 = qword_1ECE90D08 + (v31 << 6);
                while ((*(_DWORD *)v30 + 1) <= 1)
                {
                  v30 += 64;
                  v33 -= 64;
                  if (!v33)
                  {
                    v30 = v34;
                    break;
                  }
                }
              }
            }
            else
            {
              v30 = qword_1ECE90D08 + (v31 << 6);
            }
            if (*(_BYTE *)(v30 + 56))
              goto LABEL_21;
            goto LABEL_32;
          }
        }
        else
        {
          WebCore::screenProperties(void)::screenProperties = 0;
          qword_1ECE90D08 = 0;
          *((_BYTE *)v5 + 3344) = 1;
        }
        v22 = (PAL *)MGGetBoolAnswer();
        if ((_DWORD)v22)
        {
LABEL_21:
          {
            WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace = 0;
          }
          v22 = (PAL *)&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag;
          v35 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag);
          if (v35 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::{lambda(void)#1} &&>>);
          }
          v36 = WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace;
          if (WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace)
            v22 = (PAL *)CFRetain((CFTypeRef)WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace);
          goto LABEL_36;
        }
LABEL_32:
        v41 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v41 != -1)
        {
          block[0] = &v169;
          v170 = block;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        v36 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
        if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
          v22 = (PAL *)CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
LABEL_36:
        if (v10)
          CFRelease(v10);
        if ((v5[836] & 1) != 0)
        {
          v42 = qword_1ECE90D08;
          if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
          {
            if (!(_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v43 = *(unsigned int *)(qword_1ECE90D08 - 4);
              LODWORD(v44) = *(_DWORD *)(qword_1ECE90D08 - 4);
              goto LABEL_43;
            }
            v48 = *(_DWORD *)(qword_1ECE90D08 - 8);
            v49 = 9
                * ((WebCore::screenProperties(void)::screenProperties
                  + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) ^ ((WebCore::screenProperties(void)::screenProperties + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) >> 10));
            v50 = (v49 ^ (v49 >> 6)) + ~((v49 ^ (v49 >> 6)) << 11);
            v43 = (v50 ^ HIWORD(v50)) & v48;
            v51 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v43 << 6));
            if (v51 != (_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v148 = 1;
              while (v51)
              {
                v43 = ((_DWORD)v43 + v148) & v48;
                v51 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v43 << 6));
                ++v148;
                v5 = &dword_1ECE90000;
                if (v51 == (_DWORD)WebCore::screenProperties(void)::screenProperties)
                  goto LABEL_50;
              }
              v43 = *(unsigned int *)(qword_1ECE90D08 - 4);
              v5 = &dword_1ECE90000;
            }
LABEL_50:
            v44 = *(unsigned int *)(qword_1ECE90D08 - 4);
            if (v43 == v44)
            {
LABEL_43:
              if ((_DWORD)v44)
              {
                v45 = v43 << 6;
                v46 = qword_1ECE90D08 + (v43 << 6);
                while ((*(_DWORD *)v42 + 1) <= 1)
                {
                  v42 += 64;
                  v45 -= 64;
                  if (!v45)
                  {
                    v42 = v46;
                    break;
                  }
                }
              }
            }
            else
            {
              v42 = qword_1ECE90D08 + (v43 << 6);
            }
            v47 = *(_BYTE *)(v42 + 56);
            goto LABEL_54;
          }
        }
        else
        {
          WebCore::screenProperties(void)::screenProperties = 0;
          qword_1ECE90D08 = 0;
          *((_BYTE *)v5 + 3344) = 1;
        }
        v22 = (PAL *)MGGetBoolAnswer();
        v47 = (char)v22;
        if ((v5[836] & 1) == 0)
        {
          WebCore::screenProperties(void)::screenProperties = 0;
          qword_1ECE90D08 = 0;
          *((_BYTE *)v5 + 3344) = 1;
          goto LABEL_68;
        }
LABEL_54:
        v52 = qword_1ECE90D08;
        if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
        {
          if (!(_DWORD)WebCore::screenProperties(void)::screenProperties)
          {
            v53 = *(unsigned int *)(qword_1ECE90D08 - 4);
            LODWORD(v54) = *(_DWORD *)(qword_1ECE90D08 - 4);
            goto LABEL_58;
          }
          v58 = *(_DWORD *)(qword_1ECE90D08 - 8);
          v59 = 9
              * ((WebCore::screenProperties(void)::screenProperties
                + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) ^ ((WebCore::screenProperties(void)::screenProperties + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) >> 10));
          v60 = (v59 ^ (v59 >> 6)) + ~((v59 ^ (v59 >> 6)) << 11);
          v53 = (v60 ^ HIWORD(v60)) & v58;
          v61 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v53 << 6));
          if (v61 != (_DWORD)WebCore::screenProperties(void)::screenProperties)
          {
            v149 = 1;
            while (v61)
            {
              v53 = ((_DWORD)v53 + v149) & v58;
              v61 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v53 << 6));
              ++v149;
              v5 = &dword_1ECE90000;
              if (v61 == (_DWORD)WebCore::screenProperties(void)::screenProperties)
                goto LABEL_65;
            }
            v53 = *(unsigned int *)(qword_1ECE90D08 - 4);
            v5 = &dword_1ECE90000;
          }
LABEL_65:
          v54 = *(unsigned int *)(qword_1ECE90D08 - 4);
          if (v53 == v54)
          {
LABEL_58:
            if ((_DWORD)v54)
            {
              v55 = v53 << 6;
              v56 = qword_1ECE90D08 + (v53 << 6);
              while ((*(_DWORD *)v52 + 1) <= 1)
              {
                v52 += 64;
                v55 -= 64;
                if (!v55)
                {
                  v52 = v56;
                  break;
                }
              }
            }
          }
          else
          {
            v52 = qword_1ECE90D08 + (v53 << 6);
          }
          IsInvertColorsEnabled = *(_BYTE *)(v52 + 57);
          goto LABEL_69;
        }
LABEL_68:
        IsInvertColorsEnabled = PAL::softLinkUIKitUIAccessibilityIsInvertColorsEnabled(v22);
        if ((v5[836] & 1) == 0)
        {
          WebCore::screenProperties(void)::screenProperties = 0;
          qword_1ECE90D08 = 0;
          *((_BYTE *)v5 + 3344) = 1;
          goto LABEL_83;
        }
LABEL_69:
        v62 = qword_1ECE90D08;
        if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
        {
          v158 = v47;
          if (!(_DWORD)WebCore::screenProperties(void)::screenProperties)
          {
            v63 = *(unsigned int *)(qword_1ECE90D08 - 4);
            LODWORD(v64) = *(_DWORD *)(qword_1ECE90D08 - 4);
            goto LABEL_73;
          }
          v68 = *(_DWORD *)(qword_1ECE90D08 - 8);
          v69 = 9
              * ((WebCore::screenProperties(void)::screenProperties
                + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) ^ ((WebCore::screenProperties(void)::screenProperties + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) >> 10));
          v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
          v63 = (v70 ^ HIWORD(v70)) & v68;
          v71 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v63 << 6));
          if (v71 != (_DWORD)WebCore::screenProperties(void)::screenProperties)
          {
            v150 = 1;
            while (v71)
            {
              v63 = ((_DWORD)v63 + v150) & v68;
              v71 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v63 << 6));
              ++v150;
              v5 = &dword_1ECE90000;
              if (v71 == (_DWORD)WebCore::screenProperties(void)::screenProperties)
                goto LABEL_80;
            }
            v63 = *(unsigned int *)(qword_1ECE90D08 - 4);
            v5 = &dword_1ECE90000;
          }
LABEL_80:
          v64 = *(unsigned int *)(qword_1ECE90D08 - 4);
          if (v63 == v64)
          {
LABEL_73:
            if ((_DWORD)v64)
            {
              v65 = v63 << 6;
              v66 = qword_1ECE90D08 + (v63 << 6);
              while ((*(_DWORD *)v62 + 1) <= 1)
              {
                v62 += 64;
                v65 -= 64;
                if (!v65)
                {
                  v62 = v66;
                  break;
                }
              }
            }
          }
          else
          {
            v62 = qword_1ECE90D08 + (v63 << 6);
          }
          v67 = *(_BYTE *)(v62 + 58) == 0;
          goto LABEL_90;
        }
LABEL_83:
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZN3PAL19MediaToolboxLibraryEb_block_invoke;
        block[3] = &__block_descriptor_tmp_3;
        v168 = 1;
        if (PAL::MediaToolboxLibrary(BOOL)::once != -1)
          dispatch_once(&PAL::MediaToolboxLibrary(BOOL)::once, block);
        v158 = v47;
        if (!PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary)
        {
LABEL_94:
          v73 = 0;
          goto LABEL_95;
        }
        {
          if (!PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded)
            goto LABEL_94;
          v72 = PAL::softLinkMediaToolboxMTShouldPlayHDRVideo;
        }
        else
        {
          v72 = dlsym((void *)PAL::MediaToolboxLibrary(BOOL)::frameworkLibrary, "MTShouldPlayHDRVideo");
          PAL::softLinkMediaToolboxMTShouldPlayHDRVideo = v72;
          PAL::canLoad_MediaToolbox_MTShouldPlayHDRVideo(void)::loaded = v72 != 0;
          if (!v72)
            goto LABEL_94;
        }
        v67 = ((unsigned int (*)(_QWORD))v72)(0) == 0;
LABEL_90:
        v73 = !v67;
LABEL_95:
        if ((v5[836] & 1) != 0)
        {
          v74 = (_DWORD *)qword_1ECE90D08;
          if (qword_1ECE90D08 && *(_DWORD *)(qword_1ECE90D08 - 12))
          {
            if (!(_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v75 = *(unsigned int *)(qword_1ECE90D08 - 4);
              LODWORD(v76) = *(_DWORD *)(qword_1ECE90D08 - 4);
              goto LABEL_100;
            }
            v80 = *(_DWORD *)(qword_1ECE90D08 - 8);
            v81 = 9
                * ((WebCore::screenProperties(void)::screenProperties
                  + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) ^ ((WebCore::screenProperties(void)::screenProperties + ~((_DWORD)WebCore::screenProperties(void)::screenProperties << 15)) >> 10));
            v82 = (v81 ^ (v81 >> 6)) + ~((v81 ^ (v81 >> 6)) << 11);
            v75 = (v82 ^ HIWORD(v82)) & v80;
            v83 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v75 << 6));
            if (v83 != (_DWORD)WebCore::screenProperties(void)::screenProperties)
            {
              v151 = 1;
              while (v83)
              {
                v75 = ((_DWORD)v75 + v151) & v80;
                v83 = *(_DWORD *)(qword_1ECE90D08 + ((unint64_t)v75 << 6));
                ++v151;
                if (v83 == (_DWORD)WebCore::screenProperties(void)::screenProperties)
                  goto LABEL_107;
              }
              v75 = *(unsigned int *)(qword_1ECE90D08 - 4);
            }
LABEL_107:
            v76 = *(unsigned int *)(qword_1ECE90D08 - 4);
            if (v75 == v76)
            {
LABEL_100:
              if ((_DWORD)v76)
              {
                v77 = v75 << 6;
                v78 = qword_1ECE90D08 + (v75 << 6);
                while ((*v74 + 1) <= 1)
                {
                  v74 += 16;
                  v77 -= 64;
                  if (!v77)
                  {
                    v74 = (_DWORD *)v78;
                    break;
                  }
                }
              }
            }
            else
            {
              v74 = (_DWORD *)(qword_1ECE90D08 + (v75 << 6));
            }
            v79 = v74 + 15;
            goto LABEL_113;
          }
        }
        else
        {
          WebCore::screenProperties(void)::screenProperties = 0;
          qword_1ECE90D08 = 0;
          *((_BYTE *)v5 + 3344) = 1;
        }
        if (qword_1ECE81BD0 != -1)
          dispatch_once(&qword_1ECE81BD0, &__block_literal_global_41);
        v79 = &dword_1ECE81BC4;
LABEL_113:
        v157 = *v79;
        v84 = *(_QWORD *)(a2 + 8);
        if (!v84)
        {
          v85 = WTF::fastMalloc((WTF *)0x210);
          *(_DWORD *)(v85 + 16) = 0;
          v84 = v85 + 16;
          *(_OWORD *)(v85 + 24) = 0u;
          *(_OWORD *)(v85 + 40) = 0u;
          *(_OWORD *)(v85 + 56) = 0u;
          *(_QWORD *)(v85 + 72) = 0;
          v86 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v86 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v87 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 56) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v87)
            CFRetain(v87);
          *(_DWORD *)(v85 + 71) = 0;
          *(_QWORD *)(v85 + 64) = 0;
          *(_QWORD *)(v85 + 76) = 1065353216;
          *(_OWORD *)(v85 + 88) = 0u;
          *(_OWORD *)(v85 + 104) = 0u;
          *(_OWORD *)(v85 + 120) = 0u;
          *(_QWORD *)(v85 + 136) = 0;
          v88 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v88 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v89 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 120) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v89)
            CFRetain(v89);
          *(_DWORD *)(v85 + 135) = 0;
          *(_QWORD *)(v85 + 128) = 0;
          *(_QWORD *)(v85 + 140) = 1065353216;
          *(_OWORD *)(v85 + 152) = 0u;
          *(_OWORD *)(v85 + 168) = 0u;
          *(_OWORD *)(v85 + 184) = 0u;
          *(_QWORD *)(v85 + 200) = 0;
          v90 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v90 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v91 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 184) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v91)
            CFRetain(v91);
          *(_DWORD *)(v85 + 199) = 0;
          *(_QWORD *)(v85 + 192) = 0;
          *(_QWORD *)(v85 + 204) = 1065353216;
          *(_OWORD *)(v85 + 216) = 0u;
          *(_OWORD *)(v85 + 232) = 0u;
          *(_OWORD *)(v85 + 248) = 0u;
          *(_QWORD *)(v85 + 264) = 0;
          v92 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v92 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v93 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 248) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v93)
            CFRetain(v93);
          *(_QWORD *)(v85 + 256) = 0;
          *(_DWORD *)(v85 + 263) = 0;
          *(_QWORD *)(v85 + 268) = 1065353216;
          *(_QWORD *)(v85 + 328) = 0;
          *(_OWORD *)(v85 + 280) = 0u;
          *(_OWORD *)(v85 + 296) = 0u;
          *(_OWORD *)(v85 + 312) = 0u;
          v94 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v94 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v95 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 312) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v95)
            CFRetain(v95);
          *(_QWORD *)(v85 + 320) = 0;
          *(_DWORD *)(v85 + 327) = 0;
          *(_QWORD *)(v85 + 332) = 1065353216;
          *(_QWORD *)(v85 + 392) = 0;
          *(_OWORD *)(v85 + 344) = 0u;
          *(_OWORD *)(v85 + 360) = 0u;
          *(_OWORD *)(v85 + 376) = 0u;
          v96 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v96 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v97 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 376) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v97)
            CFRetain(v97);
          *(_QWORD *)(v85 + 384) = 0;
          *(_DWORD *)(v85 + 391) = 0;
          *(_QWORD *)(v85 + 396) = 1065353216;
          *(_QWORD *)(v85 + 456) = 0;
          *(_OWORD *)(v85 + 408) = 0u;
          *(_OWORD *)(v85 + 424) = 0u;
          *(_OWORD *)(v85 + 440) = 0u;
          v98 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v98 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v99 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 440) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v99)
            CFRetain(v99);
          *(_QWORD *)(v85 + 448) = 0;
          *(_DWORD *)(v85 + 455) = 0;
          *(_QWORD *)(v85 + 460) = 1065353216;
          *(_QWORD *)(v85 + 520) = 0;
          *(_OWORD *)(v85 + 472) = 0u;
          *(_OWORD *)(v85 + 488) = 0u;
          *(_OWORD *)(v85 + 504) = 0u;
          v100 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v100 != -1)
          {
            block[0] = &v169;
            v170 = block;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          v101 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          *(_QWORD *)(v85 + 504) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
          if (v101)
            CFRetain(v101);
          *(_QWORD *)(v85 + 512) = 0;
          *(_DWORD *)(v85 + 519) = 0;
          *(_DWORD *)(v85 + 524) = 1065353216;
          *(_QWORD *)(a2 + 8) = v84;
          *(_OWORD *)v85 = v152;
        }
        v102 = v12;
        v103 = v16;
        v104 = v18;
        v105 = v14;
        v106 = v160 + v21 - (float)(v105 + v104);
        v107 = v25;
        v108 = v27;
        v109 = v29;
        v110 = v159;
        v4 = v7 + 1;
        v111 = *(_DWORD *)(v84 - 8);
        v112 = 9 * ((v7 - (v4 << 15)) ^ ((v7 - (v4 << 15)) >> 10));
        v113 = (v112 ^ (v112 >> 6)) + ~((v112 ^ (v112 >> 6)) << 11);
        v114 = v111 & (v113 ^ HIWORD(v113));
        v115 = v84 + (v114 << 6);
        v116 = *(_DWORD *)v115;
        v156 = v6;
        if (*(_DWORD *)v115)
        {
          v117 = 0;
          v118 = 1;
          while (v116 != v4)
          {
            if (v116 == -1)
              v117 = v115;
            v114 = ((_DWORD)v114 + v118) & v111;
            v115 = v84 + (v114 << 6);
            v116 = *(_DWORD *)v115;
            ++v118;
            if (!*(_DWORD *)v115)
            {
              if (v117)
              {
                *(_DWORD *)v117 = 0;
                *(_OWORD *)(v117 + 8) = 0u;
                *(_OWORD *)(v117 + 24) = 0u;
                *(_OWORD *)(v117 + 40) = 0u;
                *(_QWORD *)(v117 + 56) = 0;
                v119 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                if (v119 != -1)
                {
                  block[0] = &v169;
                  v170 = block;
                  std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                }
                v120 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                *(_QWORD *)(v117 + 40) = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
                if (v120)
                  CFRetain(v120);
                *(_DWORD *)(v117 + 55) = 0;
                *(_QWORD *)(v117 + 48) = 0;
                *(_DWORD *)(v117 + 60) = 1065353216;
                --*(_DWORD *)(*(_QWORD *)(a2 + 8) - 16);
                v115 = v117;
              }
              goto LABEL_159;
            }
          }
          *(float *)(v115 + 8) = v102;
          *(float *)(v115 + 12) = v106;
          *(float *)(v115 + 16) = v103;
          *(float *)(v115 + 20) = v104;
          *(float *)(v115 + 24) = v107;
          *(float *)(v115 + 28) = v108;
          *(float *)(v115 + 32) = v109;
          *(float *)(v115 + 36) = v110;
          v121 = *(char **)(v115 + 40);
          *(_QWORD *)(v115 + 40) = v36;
          if (v121)
            CFRelease(v121);
          *(_QWORD *)(v115 + 48) = 0x800000018;
          *(_BYTE *)(v115 + 56) = v158;
          *(_BYTE *)(v115 + 57) = IsInvertColorsEnabled;
          *(_BYTE *)(v115 + 58) = v73;
          *(_DWORD *)(v115 + 60) = v157;
          goto LABEL_195;
        }
LABEL_159:
        *(_DWORD *)v115 = v4;
        *(float *)(v115 + 8) = v102;
        *(float *)(v115 + 12) = v106;
        *(float *)(v115 + 16) = v103;
        *(float *)(v115 + 20) = v104;
        *(float *)(v115 + 24) = v107;
        *(float *)(v115 + 28) = v108;
        *(float *)(v115 + 32) = v109;
        *(float *)(v115 + 36) = v110;
        v121 = *(char **)(v115 + 40);
        *(_QWORD *)(v115 + 40) = v36;
        if (v121)
          CFRelease(v121);
        *(_QWORD *)(v115 + 48) = 0x800000018;
        *(_BYTE *)(v115 + 56) = v158;
        *(_BYTE *)(v115 + 57) = IsInvertColorsEnabled;
        *(_BYTE *)(v115 + 58) = v73;
        *(_DWORD *)(v115 + 60) = v157;
        v122 = *(_QWORD *)(a2 + 8);
        if (v122)
          v123 = *(_DWORD *)(v122 - 12) + 1;
        else
          v123 = 1;
        v124 = *(_DWORD *)(v122 - 16);
        *(_DWORD *)(v122 - 12) = v123;
        v125 = (v124 + v123);
        v126 = *(unsigned int *)(v122 - 4);
        if (v126 > 0x400)
        {
          if (v126 > 2 * v125)
            goto LABEL_195;
        }
        else
        {
          if (3 * v126 > 4 * v125)
            goto LABEL_195;
          if (!(_DWORD)v126)
          {
            v127 = 8;
            goto LABEL_172;
          }
        }
        v127 = (_DWORD)v126 << (6 * v123 >= (2 * v126));
LABEL_172:
        v128 = v127;
        v121 = (char *)WTF::fastMalloc((WTF *)(((unint64_t)v127 << 6) | 0x10));
        v130 = v121;
        if (v127)
        {
          v131 = v121 + 56;
          do
          {
            *((_DWORD *)v131 - 10) = 0;
            *((_OWORD *)v131 - 2) = 0u;
            *((_OWORD *)v131 - 1) = 0u;
            *(_OWORD *)v131 = 0u;
            *((_QWORD *)v131 + 2) = 0;
            v132 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v132 != -1)
            {
              block[0] = &v169;
              v170 = block;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v170, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            v121 = (char *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            *(_QWORD *)v131 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            if (v121)
              v121 = (char *)CFRetain(v121);
            *(_DWORD *)(v131 + 15) = 0;
            *((_QWORD *)v131 + 1) = 0;
            *((_DWORD *)v131 + 5) = 1065353216;
            v131 += 64;
            --v128;
          }
          while (v128);
        }
        v133 = v130 + 16;
        *(_QWORD *)(a2 + 8) = v130 + 16;
        *((_DWORD *)v130 + 2) = v127 - 1;
        *((_DWORD *)v130 + 3) = v127;
        *(_DWORD *)v130 = 0;
        *((_DWORD *)v130 + 1) = v123;
        if ((_DWORD)v126)
        {
          for (i = 0; i != v126; ++i)
          {
            v135 = (int *)(v122 + (i << 6));
            v136 = *v135;
            if (*v135 != -1)
            {
              if (v136)
              {
                v138 = 0;
                v139 = 9 * ((v136 + ~(v136 << 15)) ^ ((v136 + ~(v136 << 15)) >> 10));
                v140 = ((v139 ^ (v139 >> 6)) + ~((v139 ^ (v139 >> 6)) << 11)) ^ (((v139 ^ (v139 >> 6))
                                                                                + ~((v139 ^ (v139 >> 6)) << 11)) >> 16);
                do
                {
                  v141 = v140 & *((_DWORD *)v130 + 2);
                  v140 = ++v138 + v141;
                }
                while (v133[16 * v141]);
                v142 = &v133[16 * v141];
                v143 = (const void *)*((_QWORD *)v142 + 5);
                *((_QWORD *)v142 + 5) = 0;
                if (v143)
                  CFRelease(v143);
                *v142 = *v135;
                v137 = v122 + (i << 6);
                v144 = *(_OWORD *)(v137 + 8);
                *(_OWORD *)(v142 + 6) = *(_OWORD *)(v137 + 24);
                *(_OWORD *)(v142 + 2) = v144;
                v145 = *(_QWORD *)(v137 + 40);
                *(_QWORD *)(v137 + 40) = 0;
                *((_QWORD *)v142 + 5) = v145;
                *((_OWORD *)v142 + 3) = *(_OWORD *)(v137 + 48);
              }
              else
              {
                v137 = v122 + (i << 6);
              }
              v146 = *(const void **)(v137 + 40);
              *(_QWORD *)(v137 + 40) = 0;
              if (v146)
                CFRelease(v146);
            }
          }
        }
        else if (!v122)
        {
          goto LABEL_195;
        }
        v121 = (char *)WTF::fastFree((WTF *)(v122 - 16), v129);
LABEL_195:
        v5 = &dword_1ECE90000;
        if (v162 == (void *)objc_msgSend((id)PAL::getUIScreenClass((PAL *)v121), "mainScreen"))
          *(_DWORD *)a2 = v4;
        v6 = v156 + 1;
        v7 = v4;
      }
      while (v156 + 1 != v155);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v163, v171, 16);
    }
    while (result);
  }
  return result;
}

void sub_1942400AC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  const void *v25;

  v22 = *(_QWORD *)(a21 + 8);
  if (v22)
  {
    v23 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v23)
    {
      v24 = (const void **)(v22 + 40);
      do
      {
        if (*((_DWORD *)v24 - 10) != -1)
        {
          v25 = *v24;
          *v24 = 0;
          if (v25)
            CFRelease(v25);
        }
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *WebCore::DestinationColorSpace::SRGB(WebCore::DestinationColorSpace *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  return &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
}

uint64_t WebCore::extendedSRGBColorSpaceRef(WebCore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  {
    WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace = 0;
  }
  v1 = atomic_load(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<CGColorSpace * WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::{lambda(void)#1} &&>>);
  }
  return WebCore::namedColorSpace<kCGColorSpaceExtendedSRGB>(void)::colorSpace;
}

float WebCore::screenSize(WebCore *this)
{
  PAL *HasIPadCapability;
  WebCore *v3;
  float *v4;
  double v5;

  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
  if ((_DWORD)HasIPadCapability
    && (objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic") & 1) != 0)
  {
    return 320.0;
  }
  {
    v3 = (WebCore *)WebCore::screenProperties(void)::screenProperties;
  }
  else
  {
    v3 = 0;
    WebCore::screenProperties(void)::screenProperties = 0;
    qword_1ECE90D08 = 0;
  }
  v4 = (float *)WebCore::screenData(v3);
  if (v4)
    return v4[6];
  objc_msgSend((id)objc_msgSend((id)PAL::getUIScreenClass(0), "mainScreen"), "_referenceBounds");
  return v5;
}

const char *WebCore::osNameForUserAgent(WebCore *this)
{
  PAL *HasIPadCapability;
  PAL *v2;

  HasIPadCapability = (PAL *)PAL::deviceHasIPadCapability(this);
  if ((_DWORD)HasIPadCapability
    && ((v2 = (PAL *)objc_msgSend((id)objc_msgSend((id)PAL::getUIApplicationClass(HasIPadCapability), "sharedApplication"), "_isClassic"), !(_DWORD)v2)|| objc_msgSend((id)PAL::getUIApplicationClass(v2), "_classicMode") == 7))
  {
    return "OS";
  }
  else
  {
    return "iPhone OS";
  }
}

uint64_t PAL::deviceHasIPadCapability(PAL *this)
{
  uint64_t result;

  if (byte_1ECE7E3BA == 1)
    return byte_1ECE7E3B9 != 0;
  result = MGGetBoolAnswer();
  byte_1ECE7E3B9 = result;
  byte_1ECE7E3BA = 1;
  return result;
}

uint64_t PAL::UIScreenFunction(PAL *this)
{
  return qword_1ECE7EDC0;
}

uint64_t PAL::initUIKitUIAccessibilityIsInvertColorsEnabled(PAL *this)
{
  if (PAL::initUIKitUIAccessibilityIsInvertColorsEnabled(void)::once != -1)
    dispatch_once(&PAL::initUIKitUIAccessibilityIsInvertColorsEnabled(void)::once, &__block_literal_global_68_1);
  return PAL::softLinkUIKitUIAccessibilityIsInvertColorsEnabled((PAL *)PAL::softLinkUIKitUIAccessibilityIsInvertColorsEnabled);
}

uint64_t PAL::initUIScreen(PAL *this)
{
  if (qword_1ECE7EDB8 != -1)
    dispatch_once(&qword_1ECE7EDB8, &__block_literal_global_50_3);
  return qword_1ECE7EDC0;
}

unint64_t `non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerAnimationStarted(uint64_t a1, const WTF::StringImpl **a2, double a3)
{
  return WebCore::GraphicsLayerCA::platformCALayerAnimationStarted(a1 - 608, a2, a3);
}

WebCore::AudioSession *`non-virtual thunk to'WebCore::DOMAudioSession::derefEventTarget(WebCore::DOMAudioSession *this)
{
  return WTF::RefCounted<WebCore::DOMAudioSession>::deref((WebCore::DOMAudioSession *)((char *)this - 8));
}

uint64_t WebCore::LowPowerModeNotifier::isLowPowerModeEnabled(id *this)
{
  return objc_msgSend(*this, "isLowPowerModeEnabled");
}

uint64_t WebCore::AudioSessionIOS::isMuted(WebCore::AudioSessionIOS *this)
{
  return 0;
}

uint64_t *WebCore::jsDocument_cookie(JSC *a1, uint64_t a2)
{
  WebCore::Document *v3;
  JSC::VM *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WebCore::MockContentFilterManager *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  int v15;
  JSC::VM *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v3 = *(WebCore::Document **)(a2 + 24);
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v16 = v4;
  WebCore::Document::cookie(v3, (uint64_t)&v13);
  if (v15)
  {
    if (v15 != 1)
    {
      v12 = (WebCore::MockContentFilterManager *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::MockContentFilterManager::singleton(v12);
    }
    LOBYTE(v17) = (_BYTE)v13;
    v11 = v14;
    v14 = 0;
    v18 = v11;
    if (!*((_QWORD *)v4 + 2))
    {
      WebCore::propagateExceptionSlowPath(a1, &v16, (unsigned __int8 *)&v17);
      v11 = v18;
    }
    v18 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v5);
      else
        *(_DWORD *)v11 -= 2;
    }
    v8 = 0;
  }
  else
  {
    v6 = v13;
    v13 = 0;
    v17 = v6;
    v8 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>((uint64_t)a1, (uint64_t *)&v17);
    v9 = v17;
    v17 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  if (v15 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E325CDB8[v15])(&v17, &v13);
  return (uint64_t *)v8;
}

uint64_t *WebCore::MockContentFilterManager::singleton(WebCore::MockContentFilterManager *this)
{
  {
    WebCore::MockContentFilterManager::singleton(void)::manager = 0;
  }
  return &WebCore::MockContentFilterManager::singleton(void)::manager;
}

_DWORD *WebCore::JSHTMLCollection::destroy(WebCore::JSHTMLCollection *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *WebCore::Page::logMediaDiagnosticMessage(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *result;
  char *v4;
  uint64_t v5;
  WebCore *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = *a2;
  if (*a2)
  {
    result = (WTF::StringImpl *)WebCore::FormData::imageOrMediaFilesCount(result);
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
      {
        v4 = " media file has been submitted";
        v5 = 31;
      }
      else
      {
        v4 = " media files have been submitted";
        v5 = 33;
      }
      v6 = (WebCore *)WTF::makeString<unsigned int,WTF::ASCIILiteral>(&v8, result, v4, v5);
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 112) + 672) & 0x800000000000) == 0 || (v6 = *(WebCore **)(a1 + 256)) == 0)
        v6 = (WebCore *)WebCore::emptyDiagnosticLoggingClient(v6);
      (*(void (**)(WebCore *, WTF::StringImpl **, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::FormData::imageOrMediaFilesCount(WebCore::FormData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  const WTF::String *v9;
  const WTF::String *v10;
  const WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  v4 = 48 * v1;
  do
  {
    if (v3 && *((_DWORD *)v3 + 10) == 1)
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = *(unsigned int *)(v5 + 16);
        v7 = *(const char **)(v5 + 8);
        v5 = *(unsigned int *)(v5 + 4);
        v8 = (v6 >> 2) & 1;
      }
      else
      {
        v7 = 0;
        v8 = 1;
      }
      WebCore::MIMETypeRegistry::mimeTypeForPath(v7, v5 | (v8 << 32), (int **)&v14);
      if (WebCore::MIMETypeRegistry::isSupportedImageMIMEType(&v14, v9)
        || WebCore::MIMETypeRegistry::isSupportedMediaMIMEType(&v14, v10, v11))
      {
        v2 = (v2 + 1);
      }
      v12 = v14;
      v14 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v10);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
    v3 += 6;
    v4 -= 48;
  }
  while (v4);
  return v2;
}

WTF::StringImpl **WebCore::setAdditionalSupportedImageTypes(unsigned int *a1)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  uint64_t *v4;
  WTF::StringImpl **result;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WebCore::MIMETypeRegistry *v9;
  uint64_t *v10;
  WTF::ASCIICaseInsensitiveHash *v11;
  WTF::ASCIICaseInsensitiveHash *v12;
  WTF::ASCIICaseInsensitiveHash *v13;
  WTF::StringImpl *v14;
  _QWORD *v15[3];

  v4 = WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes((WebCore::MIMETypeRegistry *)a1);
  result = (WTF::StringImpl **)*v4;
  if (*v4)
  {
    *v4 = 0;
    result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v2);
  }
  v6 = a1[3];
  if ((_DWORD)v6)
  {
    v7 = *(WTF::StringImpl ***)a1;
    v8 = 8 * v6;
    do
    {
      {
        WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes = 0;
        unk_1EE2F4F10 = 0;
        qword_1EE2F4F18 = 0;
      }
      WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)&WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes, v7, v3, (uint64_t)v15);
      v9 = WebCore::RequiredMIMETypesFromUTI((WebCore *)v7, (uint64_t *)v15);
      v10 = WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(v9);
      v12 = (WTF::ASCIICaseInsensitiveHash *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(v15);
      if (v15[0])
        v13 = (WTF::ASCIICaseInsensitiveHash *)&v15[0][*((unsigned int *)v15[0] - 1)];
      else
        v13 = 0;
      WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::String>>((WTF::StringImpl **)v10, v12, v11, v13);
      result = (WTF::StringImpl **)v15[0];
      if (v15[0])
        result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v15[0], v14);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

void sub_194240854(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl **a10)
{
  if (a10)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(a10, a2);
  _Unwind_Resume(exception_object);
}

WTF *WebCore::LegacySchemeRegistry::registerURLSchemeAsHandledBySchemeHandler(WTF::StringImpl **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  WTF *result;
  int v6;
  _BYTE v7[24];

  if (__ldaxr(WebCore::schemeRegistryLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::schemeRegistryLock, a2);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::schemeRegistryLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::schemesHandledBySchemeHandler(void)::set = 0;
    unk_1EE2F84B0 = 0;
    qword_1EE2F84B8 = 0;
  }
  result = WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)&WebCore::schemesHandledBySchemeHandler(void)::set, this, a3, (uint64_t)v7);
  v6 = __ldxr(WebCore::schemeRegistryLock);
  if (v6 == 1)
  {
    if (!__stlxr(0, WebCore::schemeRegistryLock))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)WebCore::schemeRegistryLock);
}

void WebCore::ResourceLoader::willSendRequestInternal(uint64_t a1, CFTypeRef *this, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  CFTypeRef v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  char v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  void *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::DocumentLoader *v46;
  NSObject *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  NSObject *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  CFTypeRef v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  char v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  Inspector::IdentifiersFactory *v75;
  _DWORD *v76;
  uint64_t v77;
  void *v78;
  WebCore::InspectorPageAgent *v79;
  unsigned int v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  WebCore::FrameLoader *v87;
  WTF::StringImpl *v88;
  const WTF::StringImpl *v89;
  int v90;
  NSObject *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  CFTypeRef v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  char v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  void *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  CFTypeRef v117;
  NSURLRequest *v118;
  void *v119;
  void *v120;
  NSObject *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  void *v151;
  WTF *v152;
  void *v153;
  WTF::StringImpl *v154;
  WTF *v155;
  void *v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  Inspector::InspectorDebuggerAgent **v162;
  uint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  WTF::StringImpl *v179;
  __int128 v180;
  __int128 v181;
  WTF::StringImpl *v182;
  __int128 v183;
  __int128 v184;
  WTF::StringImpl *v185;
  _BYTE buf[24];
  _BYTE v187[32];
  CFTypeRef cf;
  uint64_t v189;
  WTF::StringImpl *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  int v194;
  char v195;
  uint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  char v199;
  char v200;
  char v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 744);
  if (!v8)
  {
    if (WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
      JUMPOUT(0x194241C04);
    }
    *(_QWORD *)(a1 + 744) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  if ((*(_BYTE *)(a3 + 138) & 1) == 0)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 280);
      if (v10)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 24);
        if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
        {
          ++*(_DWORD *)v12;
          v13 = *(_DWORD **)(a1 + 40);
          if (v13)
          {
            ++v13[6];
            v14 = *(_QWORD *)(v12 + 936);
            if (((_BYTE)this[23] & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
              *((_BYTE *)this + 184) |= 1u;
            }
            v15 = *(_DWORD *)(a1 + 1120);
            WebCore::ResourceResponse::platformLazyInit(a3, 1);
            WebCore::UserContentProvider::processContentRuleListsForLoad(v14, v12, (const WTF::StringImpl **)this, v15, (uint64_t)v13, (WTF::URL *)a3, (uint64_t)&v179);
            v16 = v179;
            WebCore::ContentExtensions::applyResultsToRequest((uint64_t)&v179, v12, (WebCore::ResourceRequestBase *)this);
            if (v16)
            {
              v18 = qword_1ECE7C608;
              if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
              {
                v19 = *(_QWORD **)(a1 + 32);
                if (v19)
                {
                  v20 = v19[3];
                  if (v20)
                  {
                    v20 = *(_QWORD *)(v20 + 8);
                    if (v20)
                    {
                      if (*(_BYTE *)(v20 + 40))
                        v20 = *(_QWORD *)(v20 + 32);
                      else
                        v20 = 0;
                    }
                  }
                  v21 = v19[4];
                  v19 = (_QWORD *)v19[35];
                }
                else
                {
                  v21 = 0;
                  v20 = 0;
                }
                v22 = *(_QWORD *)(a1 + 744);
                *(_DWORD *)buf = 134219008;
                *(_QWORD *)&buf[4] = a1;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v20;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)v187 = v21;
                *(_WORD *)&v187[8] = 2048;
                *(_QWORD *)&v187[10] = v19;
                *(_WORD *)&v187[18] = 2048;
                *(_QWORD *)&v187[20] = v22;
                _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal: resource load canceled because of content blocker", buf, 0x34u);
              }
              v23 = *(_QWORD *)(a1 + 32);
              if (v23)
              {
                v24 = *(_QWORD *)(v23 + 280);
                if (v24)
                  ++*(_DWORD *)v24;
              }
              else
              {
                v24 = 0;
              }
              (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v24 + 16) + 584))(buf, *(_QWORD *)(v24 + 16), a1 + 336);
              if (!*(_DWORD *)v24)
              {
                __break(0xC471u);
                JUMPOUT(0x194241CCCLL);
              }
              --*(_DWORD *)v24;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 240))(a1, buf);
              v26 = cf;
              cf = 0;
              if (v26)
                CFRelease(v26);
              v27 = *(WTF::StringImpl **)&v187[24];
              *(_QWORD *)&v187[24] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v25);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = *(WTF::StringImpl **)&buf[8];
              *(_QWORD *)&buf[8] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                  WTF::StringImpl::destroy(v28, v25);
                else
                  *(_DWORD *)v28 -= 2;
              }
              v29 = *(WTF::StringImpl **)buf;
              *(_QWORD *)buf = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy(v29, v25);
                else
                  *(_DWORD *)v29 -= 2;
              }
              v182 = 0;
              WTF::URL::invalidate((WTF::URL *)&v182);
              v30 = v182;
              if (v182)
                *(_DWORD *)v182 += 2;
              *(_QWORD *)buf = v30;
              *(_OWORD *)&buf[8] = v183;
              *(_OWORD *)v187 = v184;
              *(_QWORD *)&v187[16] = 0;
              WTF::URL::invalidate((WTF::URL *)&v187[16]);
              v189 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v190 = v185;
              v191 = 0u;
              v192 = 0u;
              v193 = 0u;
              v194 = 0x10000;
              v32 = v195 & 0x80 | 4;
              v195 = v32;
              v196 = 0;
              v33 = (_DWORD *)*MEMORY[0x1E0CBF738];
              if (*MEMORY[0x1E0CBF738])
              {
                *v33 += 2;
                v32 = v195;
              }
              v197 = v33;
              v198 = 0;
              v199 = 0;
              v200 = 0;
              v201 = v201 & 0xE0 | 5;
              v195 = v32 | 2;
              v34 = v182;
              v182 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, v31);
                else
                  *(_DWORD *)v34 -= 2;
              }
              v202 = 0;
              v35 = *a4;
              *a4 = 0;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v35 + 16))(v35, buf);
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
              WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v36);
              WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)&v179, v37);
              if (v13[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
              else
                --v13[6];
              if (*(_DWORD *)v12 == 1)
              {
                WebCore::Page::~Page(v12);
                WTF::fastFree(v152, v153);
              }
              else
              {
                --*(_DWORD *)v12;
              }
              goto LABEL_242;
            }
            WebCore::ContentRuleListResults::~ContentRuleListResults((WebCore::ContentRuleListResults *)&v179, v17);
            if (v13[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
            else
              --v13[6];
          }
          if (*(_DWORD *)v12 == 1)
          {
            WebCore::Page::~Page(v12);
            WTF::fastFree(v155, v156);
          }
          else
          {
            --*(_DWORD *)v12;
          }
        }
        else
        {
          v38 = *(_DWORD **)(a1 + 40);
          if (v38)
          {
            v39 = v38[6];
            v38[6] = v39 + 1;
            if (v39)
              v38[6] = v39;
            else
              (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 24))(v38);
          }
        }
      }
    }
  }
  if (((_BYTE)this[23] & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
    v157 = *((_BYTE *)this + 184) | 1;
    *((_BYTE *)this + 184) = v157;
    if ((v157 & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
      *((_BYTE *)this + 184) |= 1u;
    }
  }
  if (*this)
  {
    v40 = *(_QWORD *)(a1 + 32);
    if (!v40)
      goto LABEL_59;
    v41 = *(_QWORD *)(v40 + 280);
    if (!v41
      || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 128) + 8) != *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8)
      || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1)
      || (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1) + 556) & 0x1F) != 0
      || (*(_BYTE *)(a3 + 138) & 1) != 0)
    {
      goto LABEL_59;
    }
    WebCore::ResourceResponse::platformLazyInit(a3, 1);
    v85 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v85 += 2;
    v182 = v85;
    v183 = *(_OWORD *)(a3 + 8);
    v184 = *(_OWORD *)(a3 + 24);
    v86 = *(_QWORD *)(a1 + 32);
    if (v86)
    {
      v87 = *(WebCore::FrameLoader **)(v86 + 280);
      if (v87)
      {
        ++*(_DWORD *)v87;
        if ((WebCore::FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded(v87, (const WTF::URL *)&v182, (WebCore::ResourceRequest *)this) & 1) != 0)goto LABEL_131;
        if (!*(_DWORD *)v87)
        {
          __break(0xC471u);
          JUMPOUT(0x194241EACLL);
        }
        --*(_DWORD *)v87;
LABEL_265:
        v154 = v182;
        v182 = 0;
        if (v154)
        {
          if (*(_DWORD *)v154 == 2)
            WTF::StringImpl::destroy(v154, v88);
          else
            *(_DWORD *)v154 -= 2;
        }
LABEL_59:
        if ((*(_BYTE *)(a1 + 1090) & 1) != 0)
        {
          v72 = *(_QWORD *)(a1 + 32);
          v73 = (unsigned int *)(v72 + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 + 1, v73));
          v75 = *(Inspector::IdentifiersFactory **)(a1 + 744);
          v76 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 280) + 88);
          if (v76)
            ++v76[6];
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
          if (!v77)
            goto LABEL_114;
          v171 = v77;
          v172 = *(_QWORD *)(v77 + 8);
          if (v172)
            goto LABEL_358;
          v172 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v172 = 1;
          *(_QWORD *)(v172 + 8) = v171;
          v176 = *(unsigned int **)(v171 + 8);
          *(_QWORD *)(v171 + 8) = v172;
          if (!v176)
            goto LABEL_358;
          do
          {
            v177 = __ldaxr(v176);
            v178 = v177 - 1;
          }
          while (__stlxr(v178, v176));
          if (!v178)
          {
            atomic_store(1u, v176);
            WTF::fastFree((WTF *)v176, v78);
          }
          v172 = *(_QWORD *)(v171 + 8);
          if (v172)
          {
LABEL_358:
            do
              v173 = __ldaxr((unsigned int *)v172);
            while (__stlxr(v173 + 1, (unsigned int *)v172));
            v182 = (WTF::StringImpl *)v172;
            v174 = *(_QWORD *)(v172 + 8);
            if (v174
              && ((v179 = (WTF::StringImpl *)&v182, ++*(_DWORD *)(v174 + 548), (v175 = *(_QWORD *)(v174 + 488)) == 0)
               || !*(_QWORD *)(v175 + 8)
               || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v174 + 464), (uint64_t *)&v179, (uint64_t)buf), (v172 = (uint64_t)v182) != 0)))
            {
              v79 = *(WebCore::InspectorPageAgent **)(v172 + 8);
            }
            else
            {
              v79 = 0;
            }
          }
          else
          {
LABEL_114:
            v79 = 0;
            v182 = 0;
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v158 = *(_QWORD *)(v72 + 24);
            if (v158)
            {
              v159 = *(_QWORD *)(v158 + 8);
              if (v159)
              {
                v160 = *(_QWORD *)(*(_QWORD *)(v159 + 80) + 8);
                v161 = *(_QWORD *)(v160 + 192);
                if (v161)
                  WebCore::InspectorNetworkAgent::willSendRequest(v161, v75, (uint64_t)v76, (WebCore::ResourceRequest *)this, (WebCore::ResourceLoader *)a3, v79, (WTF::StringImpl **)a1);
                v162 = *(Inspector::InspectorDebuggerAgent ***)(v160 + 144);
                if (v162 && (*((_BYTE *)this + 147) & 0xFE) != 2)
                {
                  if (((_BYTE)this[23] & 1) == 0)
                  {
                    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
                    *((_BYTE *)this + 184) |= 1u;
                  }
                  WebCore::InspectorDOMDebuggerAgent::breakOnURLIfNeeded(v162, (const WTF::String *)this);
                }
              }
            }
          }
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)&v182, v78);
          if (v76)
          {
            if (v76[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 24))(v76);
            else
              --v76[6];
          }
          do
          {
            v81 = __ldaxr(v73);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v73));
          if (!v82)
          {
            atomic_store(1u, v73);
            v83 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v83 = off_1E31FE290;
            v83[1] = v73;
            *(_QWORD *)buf = v83;
            WTF::ensureOnMainThread();
            v84 = *(_QWORD *)buf;
            *(_QWORD *)buf = 0;
            if (v84)
              (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
          }
          goto LABEL_174;
        }
        if (!v8)
        {
          v42 = *(_QWORD *)(a1 + 32);
          if (v42)
          {
            v43 = *(_DWORD **)(v42 + 280);
            if (v43)
              ++*v43;
          }
          else
          {
            v43 = 0;
          }
          v44 = (uint64_t)(v43 + 8);
          v45 = *(_QWORD *)(a1 + 744);
          v46 = *(WebCore::DocumentLoader **)(a1 + 40);
          if (!v46)
          {
            v163 = *(_QWORD *)(*(_QWORD *)v44 + 8);
            v164 = (unsigned int *)(v163 + 8);
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 + 1, v164));
            v166 = *(_QWORD *)(v163 + 280);
            ++*(_DWORD *)v166;
            (*(void (**)(_QWORD, uint64_t, _QWORD, CFTypeRef *))(**(_QWORD **)(v166 + 16) + 88))(*(_QWORD *)(v166 + 16), v45, 0, this);
            if (!*(_DWORD *)v166)
            {
              __break(0xC471u);
              JUMPOUT(0x194242058);
            }
            --*(_DWORD *)v166;
            do
            {
              v167 = __ldaxr(v164);
              v168 = v167 - 1;
            }
            while (__stlxr(v168, v164));
            if (!v168)
            {
              atomic_store(1u, v164);
              v169 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v169 = off_1E31FE290;
              v169[1] = v164;
              *(_QWORD *)buf = v169;
              WTF::ensureOnMainThread();
              v170 = *(_QWORD *)buf;
              *(_QWORD *)buf = 0;
              if (v170)
                (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
            }
            goto LABEL_67;
          }
          ++*((_DWORD *)v46 + 6);
          WebCore::ResourceLoadNotifier::assignIdentifierToInitialRequest(v44, v45, v46, (uint64_t)this);
          if (*((_DWORD *)v46 + 6) == 1)
          {
            (*(void (**)(WebCore::DocumentLoader *))(*(_QWORD *)v46 + 24))(v46);
            if (v43)
              goto LABEL_67;
          }
          else
          {
            --*((_DWORD *)v46 + 6);
            if (v43)
            {
LABEL_67:
              if (!*v43)
              {
                __break(0xC471u);
                JUMPOUT(0x194241E18);
              }
              --*v43;
            }
          }
        }
        if (*(_BYTE *)(a1 + 752))
        {
          v47 = qword_1ECE7C608;
          if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          {
LABEL_241:
            v149 = *a4;
            *a4 = 0;
            (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v149 + 16))(v149, this);
            (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
            goto LABEL_242;
          }
          v48 = *(_QWORD **)(a1 + 32);
          if (v48)
          {
            v49 = v48[3];
            if (v49)
            {
              v49 = *(_QWORD *)(v49 + 8);
              if (v49)
              {
                if (*(_BYTE *)(v49 + 40))
                  v49 = *(_QWORD *)(v49 + 32);
                else
                  v49 = 0;
              }
            }
            v50 = v48[4];
            v48 = (_QWORD *)v48[35];
          }
          else
          {
            v50 = 0;
            v49 = 0;
          }
          v51 = *(_QWORD *)(a1 + 744);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v187 = v50;
          *(_WORD *)&v187[8] = 2048;
          *(_QWORD *)&v187[10] = v48;
          *(_WORD *)&v187[18] = 2048;
          *(_QWORD *)&v187[20] = v51;
          v52 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInterna"
                "l: resource load reached terminal state after calling assignIdentifierToInitialRequest()";
LABEL_240:
          _os_log_impl(&dword_1940B8000, v47, OS_LOG_TYPE_DEFAULT, v52, buf, 0x34u);
          goto LABEL_241;
        }
        v112 = *(_QWORD *)(a1 + 32);
        if (v112 && (v113 = *(_DWORD **)(v112 + 280)) != 0)
        {
          ++*v113;
          WebCore::ResourceLoadNotifier::willSendRequest((WebCore::ResourceLoadNotifier *)(v113 + 8), (WebCore::ResourceLoader *)a1, (WebCore::ResourceRequest *)this, (const WebCore::ResourceResponse *)a3);
          if (!*v113)
          {
            __break(0xC471u);
            JUMPOUT(0x194241DF8);
          }
          --*v113;
        }
        else
        {
          WebCore::ResourceLoadNotifier::willSendRequest((WebCore::ResourceLoadNotifier *)0x20, (WebCore::ResourceLoader *)a1, (WebCore::ResourceRequest *)this, (const WebCore::ResourceResponse *)a3);
        }
LABEL_174:
        v114 = *(_QWORD *)(a1 + 40);
        if (v114)
        {
          v115 = *(_QWORD *)(v114 + 3328);
          if (v115)
          {
            ++*(_DWORD *)(v115 + 16);
            v116 = *(void **)(v115 + 432);
            if (((_BYTE)this[23] & 2) == 0)
            {
              WebCore::ResourceRequest::doUpdatePlatformRequest((WebCore::ResourceRequest *)this);
              *((_BYTE *)this + 184) |= 2u;
            }
            v117 = this[24];
            if (v117)
              CFRetain(this[24]);
            v118 = (NSURLRequest *)objc_msgSend(v116, "safeRequestForRequest:", (id)CFMakeCollectable(v117));
            WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)buf, v118);
            WebCore::ResourceRequest::operator=((uint64_t)this, (uint64_t)buf);
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v119);
            if (*(_DWORD *)(v115 + 16) == 1)
            {
              WebCore::PreviewConverter::~PreviewConverter((WebCore::PreviewConverter *)v115, v120);
              WTF::fastFree(v150, v151);
            }
            else
            {
              --*(_DWORD *)(v115 + 16);
            }
          }
        }
        if ((*(_BYTE *)(a3 + 138) & 1) != 0)
        {
          WebCore::ResourceRequest::operator=(a1 + 336, (uint64_t)this);
        }
        else
        {
          v121 = qword_1ECE7C608;
          if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          {
            v122 = *(_QWORD **)(a1 + 32);
            if (v122)
            {
              v123 = v122[3];
              if (v123)
              {
                v123 = *(_QWORD *)(v123 + 8);
                if (v123)
                {
                  if (*(_BYTE *)(v123 + 40))
                    v123 = *(_QWORD *)(v123 + 32);
                  else
                    v123 = 0;
                }
              }
              v124 = v122[4];
              v122 = (_QWORD *)v122[35];
            }
            else
            {
              v124 = 0;
              v123 = 0;
            }
            v125 = *(_QWORD *)(a1 + 744);
            *(_DWORD *)buf = 134219008;
            *(_QWORD *)&buf[4] = a1;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v123;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)v187 = v124;
            *(_WORD *)&v187[8] = 2048;
            *(_QWORD *)&v187[10] = v122;
            *(_WORD *)&v187[18] = 2048;
            *(_QWORD *)&v187[20] = v125;
            _os_log_impl(&dword_1940B8000, v121, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal: Processing cross-origin redirect", buf, 0x34u);
          }
          v126 = WebCore::s_platformStrategies;
          v127 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
          if (!v127)
          {
            v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
            *(_QWORD *)(v126 + 8) = v127;
          }
          if (((_BYTE)this[23] & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
            *((_BYTE *)this + 184) |= 1u;
          }
          (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)v127 + 48))(v127, a1, this);
          v128 = *(_QWORD *)(a1 + 32);
          if (v128)
          {
            v129 = *(_QWORD *)(v128 + 280);
            if (v129)
              ++*(_DWORD *)v129;
          }
          else
          {
            v129 = 0;
          }
          v130 = *(_QWORD *)(v129 + 16);
          if (((_BYTE)this[23] & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
            *((_BYTE *)this + 184) |= 1u;
          }
          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, (const WTF::URL *)this);
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v130 + 1152))(v130, buf);
          v132 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v132)
          {
            if (*(_DWORD *)v132 == 2)
              WTF::StringImpl::destroy(v132, v131);
            else
              *(_DWORD *)v132 -= 2;
          }
          if (!*(_DWORD *)v129)
          {
            __break(0xC471u);
            JUMPOUT(0x194241CACLL);
          }
          --*(_DWORD *)v129;
          WebCore::ResourceRequest::operator=(a1 + 336, (uint64_t)this);
          if (((_BYTE)this[23] & 1) == 0)
          {
            WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
            *((_BYTE *)this + 184) |= 1u;
          }
          v133 = *(_QWORD *)(a1 + 40);
          if (v133 && !*(_BYTE *)(v133 + 3537))
          {
            v134 = *(_QWORD *)(a1 + 32);
            if (v134)
            {
              v135 = *(_QWORD *)(v134 + 280);
              if (v135)
                ++*(_DWORD *)v135;
            }
            else
            {
              v135 = 0;
            }
            (*(void (**)(_QWORD))(**(_QWORD **)(v135 + 16) + 184))(*(_QWORD *)(v135 + 16));
            if (!*(_DWORD *)v135)
            {
              __break(0xC471u);
              JUMPOUT(0x194241E40);
            }
            --*(_DWORD *)v135;
          }
          if (WTF::URL::protocolIs())
          {
            v136 = qword_1ECE7C608;
            if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
            {
              v137 = *(_QWORD **)(a1 + 32);
              if (v137)
              {
                v138 = v137[3];
                if (v138)
                {
                  v138 = *(_QWORD *)(v138 + 8);
                  if (v138)
                  {
                    if (*(_BYTE *)(v138 + 40))
                      v138 = *(_QWORD *)(v138 + 32);
                    else
                      v138 = 0;
                  }
                }
                v139 = v137[4];
                v137 = (_QWORD *)v137[35];
              }
              else
              {
                v139 = 0;
                v138 = 0;
              }
              v140 = *(_QWORD *)(a1 + 744);
              *(_DWORD *)buf = 134219008;
              *(_QWORD *)&buf[4] = a1;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v138;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)v187 = v139;
              *(_WORD *)&v187[8] = 2048;
              *(_QWORD *)&v187[10] = v137;
              *(_WORD *)&v187[18] = 2048;
              *(_QWORD *)&v187[20] = v140;
              _os_log_impl(&dword_1940B8000, v136, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal: Redirected to a data URL. Processing locally", buf, 0x34u);
            }
            v141 = WebCore::s_platformStrategies;
            v142 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
            if (!v142)
            {
              v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
              *(_QWORD *)(v141 + 8) = v142;
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 32))(v142, a1);
            v143 = *(_QWORD *)(a1 + 24);
            if (v143)
            {
              ++*(_DWORD *)(v143 + 8);
              *(_QWORD *)(*(_QWORD *)(v143 + 16) + 8) = 0;
              v144 = *(_DWORD **)(a1 + 24);
              *(_QWORD *)(a1 + 24) = 0;
              if (v144)
              {
                if (v144[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v144 + 48))(v144);
                else
                  --v144[2];
              }
              if (*(_DWORD *)(v143 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v143 + 48))(v143);
              else
                --*(_DWORD *)(v143 + 8);
            }
            WebCore::ResourceLoader::loadDataURL((WebCore::ResourceLoader *)a1);
          }
        }
        v47 = qword_1ECE7C608;
        if (!os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
          goto LABEL_241;
        v145 = *(_QWORD **)(a1 + 32);
        if (v145)
        {
          v146 = v145[3];
          if (v146)
          {
            v146 = *(_QWORD *)(v146 + 8);
            if (v146)
            {
              if (*(_BYTE *)(v146 + 40))
                v146 = *(_QWORD *)(v146 + 32);
              else
                v146 = 0;
            }
          }
          v147 = v145[4];
          v145 = (_QWORD *)v145[35];
        }
        else
        {
          v147 = 0;
          v146 = 0;
        }
        v148 = *(_QWORD *)(a1 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v146;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v187 = v147;
        *(_WORD *)&v187[8] = 2048;
        *(_QWORD *)&v187[10] = v145;
        *(_WORD *)&v187[18] = 2048;
        *(_QWORD *)&v187[20] = v148;
        v52 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal:"
              " calling completion handler";
        goto LABEL_240;
      }
      if ((WebCore::FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded(0, (const WTF::URL *)&v182, (WebCore::ResourceRequest *)this) & 1) == 0)goto LABEL_265;
    }
    else
    {
      v87 = 0;
      if (!WebCore::FrameLoader::upgradeRequestforHTTPSOnlyIfNeeded(0, (const WTF::URL *)&v182, (WebCore::ResourceRequest *)this))goto LABEL_265;
    }
LABEL_131:
    if (((_BYTE)this[23] & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)this);
      *((_BYTE *)this + 184) |= 1u;
    }
    WebCore::ResourceResponse::platformLazyInit(a3, 1);
    v90 = WTF::equal((WTF *)*this, *(const WTF::StringImpl **)a3, v89);
    if (v87)
    {
      if (!*(_DWORD *)v87)
      {
        __break(0xC471u);
        JUMPOUT(0x194241ECCLL);
      }
      --*(_DWORD *)v87;
    }
    if (v90)
    {
      v91 = qword_1ECE7C608;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
      {
        v92 = *(_QWORD **)(a1 + 32);
        if (v92)
        {
          v93 = v92[3];
          if (v93)
          {
            v93 = *(_QWORD *)(v93 + 8);
            if (v93)
            {
              if (*(_BYTE *)(v93 + 40))
                v93 = *(_QWORD *)(v93 + 32);
              else
                v93 = 0;
            }
          }
          v94 = v92[4];
          v92 = (_QWORD *)v92[35];
        }
        else
        {
          v94 = 0;
          v93 = 0;
        }
        v95 = *(_QWORD *)(a1 + 744);
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v93;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v187 = v94;
        *(_WORD *)&v187[8] = 2048;
        *(_QWORD *)&v187[10] = v92;
        *(_WORD *)&v187[18] = 2048;
        *(_QWORD *)&v187[20] = v95;
        _os_log_impl(&dword_1940B8000, v91, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal: resource load canceled because of entering same-URL redirect loop", buf, 0x34u);
      }
      v96 = *(_QWORD *)(a1 + 32);
      if (v96)
      {
        v97 = *(_QWORD *)(v96 + 280);
        if (v97)
          ++*(_DWORD *)v97;
      }
      else
      {
        v97 = 0;
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v97 + 16) + 632))(buf, *(_QWORD *)(v97 + 16), a1 + 336);
      if (!*(_DWORD *)v97)
      {
        __break(0xC471u);
        JUMPOUT(0x194241F3CLL);
      }
      --*(_DWORD *)v97;
      WebCore::ResourceLoader::cancel((WTF::StringImpl *)a1, (uint64_t)buf, 0);
      v99 = cf;
      cf = 0;
      if (v99)
        CFRelease(v99);
      v100 = *(WTF::StringImpl **)&v187[24];
      *(_QWORD *)&v187[24] = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, v98);
        else
          *(_DWORD *)v100 -= 2;
      }
      v101 = *(WTF::StringImpl **)&buf[8];
      *(_QWORD *)&buf[8] = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, v98);
        else
          *(_DWORD *)v101 -= 2;
      }
      v102 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, v98);
        else
          *(_DWORD *)v102 -= 2;
      }
      v179 = 0;
      WTF::URL::invalidate((WTF::URL *)&v179);
      v103 = v179;
      if (v179)
        *(_DWORD *)v179 += 2;
      *(_QWORD *)buf = v103;
      *(_OWORD *)&buf[8] = v180;
      *(_OWORD *)v187 = v181;
      *(_QWORD *)&v187[16] = 0;
      WTF::URL::invalidate((WTF::URL *)&v187[16]);
      v189 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v190 = v185;
      v191 = 0u;
      v192 = 0u;
      v193 = 0u;
      v194 = 0x10000;
      v105 = v195 & 0x80 | 4;
      v195 = v105;
      v196 = 0;
      v106 = (_DWORD *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
      {
        *v106 += 2;
        v105 = v195;
      }
      v197 = v106;
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v201 = v201 & 0xE0 | 5;
      v195 = v105 | 2;
      v107 = v179;
      v179 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
          WTF::StringImpl::destroy(v107, v104);
        else
          *(_DWORD *)v107 -= 2;
      }
      v202 = 0;
      v108 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v108 + 16))(v108, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
      WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v109);
      v111 = v182;
      v182 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, v110);
        else
          *(_DWORD *)v111 -= 2;
      }
      goto LABEL_242;
    }
    goto LABEL_265;
  }
  v53 = qword_1ECE7C608;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
  {
    v54 = *(_QWORD **)(a1 + 32);
    if (v54)
    {
      v55 = v54[3];
      if (v55)
      {
        v55 = *(_QWORD *)(v55 + 8);
        if (v55)
        {
          if (*(_BYTE *)(v55 + 40))
            v55 = *(_QWORD *)(v55 + 32);
          else
            v55 = 0;
        }
      }
      v56 = v54[4];
      v54 = (_QWORD *)v54[35];
    }
    else
    {
      v56 = 0;
      v55 = 0;
    }
    v57 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v55;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)v187 = v56;
    *(_WORD *)&v187[8] = 2048;
    *(_QWORD *)&v187[10] = v54;
    *(_WORD *)&v187[18] = 2048;
    *(_QWORD *)&v187[20] = v57;
    _os_log_impl(&dword_1940B8000, v53, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::willSendRequestInternal: resource load canceled because of empty request", buf, 0x34u);
  }
  v58 = *(_QWORD *)(a1 + 32);
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 280);
    if (v59)
      ++*(_DWORD *)v59;
  }
  else
  {
    v59 = 0;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v59 + 16) + 592))(buf, *(_QWORD *)(v59 + 16), a1 + 336);
  if (!*(_DWORD *)v59)
  {
    __break(0xC471u);
    JUMPOUT(0x194241C24);
  }
  --*(_DWORD *)v59;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 240))(a1, buf);
  v61 = cf;
  cf = 0;
  if (v61)
    CFRelease(v61);
  v62 = *(WTF::StringImpl **)&v187[24];
  *(_QWORD *)&v187[24] = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, v60);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = *(WTF::StringImpl **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, v60);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v60);
    else
      *(_DWORD *)v64 -= 2;
  }
  v179 = 0;
  WTF::URL::invalidate((WTF::URL *)&v179);
  v65 = v179;
  if (v179)
    *(_DWORD *)v179 += 2;
  *(_QWORD *)buf = v65;
  *(_OWORD *)&buf[8] = v180;
  *(_OWORD *)v187 = v181;
  *(_QWORD *)&v187[16] = 0;
  WTF::URL::invalidate((WTF::URL *)&v187[16]);
  v189 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v190 = v182;
  v191 = 0u;
  v192 = 0u;
  v193 = 0u;
  v194 = 0x10000;
  v67 = v195 & 0x80 | 4;
  v195 = v67;
  v196 = 0;
  v68 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v68 += 2;
    v67 = v195;
  }
  v197 = v68;
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v201 = v201 & 0xE0 | 5;
  v195 = v67 | 2;
  v69 = v179;
  v179 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, v66);
    else
      *(_DWORD *)v69 -= 2;
  }
  v202 = 0;
  v70 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 16))(v70, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)buf, v71);
LABEL_242:
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  else
    --*(_DWORD *)(a1 + 16);
}

WebCore::FrameLoader *WebCore::FrameLoader::applyUserAgentIfNeeded(WebCore::FrameLoader *this, WebCore::ResourceRequest *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  WTF::StringImpl *v6;
  WebCore::FrameLoader *v7;
  WTF::StringImpl *v8;

  v3 = *((unsigned int *)a2 + 27);
  if ((_DWORD)v3)
  {
    v4 = (unsigned __int16 *)*((_QWORD *)a2 + 12);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if (v5 == 86)
        break;
      if (!--v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      v7 = this;
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      this = v7;
      *((_BYTE *)a2 + 184) |= 1u;
    }
    WebCore::FrameLoader::userAgent(this, a2, (uint64_t *)&v8);
    if ((*((_BYTE *)a2 + 184) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest(a2);
      *((_BYTE *)a2 + 184) |= 1u;
    }
    WebCore::HTTPHeaderMap::set((WebCore::ResourceRequest *)((char *)a2 + 96), (WTF::StringImpl *)0x56, &v8);
    *((_BYTE *)a2 + 184) &= ~2u;
    this = v8;
    v8 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        return (WebCore::FrameLoader *)WTF::StringImpl::destroy(this, v6);
      else
        *(_DWORD *)this -= 2;
    }
  }
  return this;
}

uint64_t WebCore::SubresourceLoader::cachedResource(WebCore::SubresourceLoader *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 166);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WebCore::FrameLoader::userAgent(WebCore::FrameLoader *this@<X0>, const WTF::URL *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;

  *a3 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
  if (!v6)
    goto LABEL_7;
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(WTF::StringImpl **)(v6 + 688);
  if (!v7)
    v7 = (WTF::StringImpl *)WebCore::Document::ensureQuirks((WebCore::Document *)v6);
  WebCore::Quirks::storageAccessUserAgentStringQuirkForDomain(v7, a2, &v42);
  v9 = v42;
  if (v42)
  {
    if (*((_DWORD *)v42 + 1))
    {
      WTF::String::operator=(a3, &v42);
      v9 = v42;
      v42 = 0;
      if (!v9)
        goto LABEL_5;
    }
    else
    {
      v42 = 0;
    }
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_5:
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
LABEL_7:
  if (*a3 && *(_DWORD *)(*a3 + 4))
    goto LABEL_21;
  v10 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 128) + 8);
  v11 = v10 + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 136);
  if (*(_BYTE *)(v13 + 243))
  {
    if (!*(_BYTE *)(v13 + 242))
      goto LABEL_15;
  }
  else if ((*(_QWORD *)(v13 + 688) & 0x80000) == 0)
  {
    goto LABEL_15;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *))(*(_QWORD *)v10 + 96))(&v42, v10);
  v15 = v42;
  v42 = 0;
  v16 = (WTF::StringImpl *)*a3;
  *a3 = (uint64_t)v15;
  if (v16)
  {
    v17 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::destroy(v16, v14);
      v16 = v42;
      v42 = 0;
      if (!v16)
        goto LABEL_15;
      v17 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::destroy(v16, v34);
        goto LABEL_15;
      }
    }
    *(_DWORD *)v16 = v17;
  }
LABEL_15:
  if (*a3 && *(_DWORD *)(*a3 + 4))
  {
    if (!v10)
      goto LABEL_21;
    goto LABEL_19;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, unsigned int *))(*(_QWORD *)v10 + 88))(&v42, v10);
  v19 = v42;
  v42 = 0;
  v20 = (WTF::StringImpl *)*a3;
  *a3 = (uint64_t)v19;
  if (v20)
  {
    v21 = *(_DWORD *)v20 - 2;
    if (*(_DWORD *)v20 != 2)
    {
LABEL_18:
      *(_DWORD *)v20 = v21;
      goto LABEL_19;
    }
    WTF::StringImpl::destroy(v20, v18);
    v20 = v42;
    v42 = 0;
    if (v20)
    {
      v21 = *(_DWORD *)v20 - 2;
      if (*(_DWORD *)v20 != 2)
        goto LABEL_18;
      WTF::StringImpl::destroy(v20, v35);
    }
  }
  do
  {
LABEL_19:
    v22 = __ldaxr(v11);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v11));
  if (!v23)
  {
    atomic_store(1u, v11);
    v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v36 = off_1E31FE290;
    *((_QWORD *)v36 + 1) = v11;
    v42 = v36;
    WTF::ensureOnMainThread();
    v37 = v42;
    v42 = 0;
    if (v37)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v37 + 8))(v37);
  }
LABEL_21:
  v24 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v25 = (unsigned int *)(v24 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v38 = *(_QWORD *)(v24 + 24);
    if (v38)
    {
      v39 = *(_QWORD *)(v38 + 8);
      if (v39)
        WebCore::InspectorInstrumentation::applyUserAgentOverrideImpl(*(WTF::StringImpl **)(*(_QWORD *)(v39 + 80) + 8), (WTF::StringImpl *)a3);
    }
  }
  else if (!v24)
  {
    goto LABEL_27;
  }
  do
  {
    v28 = __ldaxr(v25);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, v25));
  if (!v29)
  {
    atomic_store(1u, v25);
    v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v40 = off_1E31FE290;
    *((_QWORD *)v40 + 1) = v25;
    v42 = v40;
    WTF::ensureOnMainThread();
    v41 = v42;
    v42 = 0;
    if (v41)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
  }
LABEL_27:
  if (!*a3
    || !*(_DWORD *)(*a3 + 4)
    || (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 784))(*((_QWORD *)this + 2)))
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, const WTF::URL *))(**((_QWORD **)this + 2) + 792))(&v42, *((_QWORD *)this + 2), a2);
    v31 = v42;
    v42 = 0;
    v32 = (WTF::StringImpl *)*a3;
    *a3 = (uint64_t)v31;
    if (v32)
    {
      v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::destroy(v32, v30);
        v32 = v42;
        v42 = 0;
        if (!v32)
          goto LABEL_31;
        v33 = *(_DWORD *)v32 - 2;
        if (*(_DWORD *)v32 == 2)
        {
          WTF::StringImpl::destroy(v32, v30);
          goto LABEL_31;
        }
      }
      *(_DWORD *)v32 = v33;
    }
  }
LABEL_31:
  WebCore::verifyUserAgent((WebCore *)a3, v30);
}

WTF::StringImpl *WebCore::Quirks::storageAccessUserAgentStringQuirkForDomain@<X0>(WTF::StringImpl *this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  const WTF::String *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  int v19;
  WTF::StringImpl *v20;

  if (!*(_QWORD *)this)
    goto LABEL_5;
  v4 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v4)
    goto LABEL_5;
  v6 = *(_QWORD *)(v4 + 680);
  if (*(_BYTE *)(v6 + 243))
  {
    if (!*(_BYTE *)(v6 + 242))
      goto LABEL_5;
  }
  else if ((*(_QWORD *)(v6 + 688) & 0x80000) == 0)
  {
LABEL_5:
    *a3 = 0;
    return this;
  }
  {
    WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map = 0;
  }
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v20, a2);
  v8 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
  if (!WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
    goto LABEL_21;
  v9 = *(_DWORD *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 8);
  v10 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)&v20, v7) & v9;
  v11 = v8 + 16 * v10;
  if ((WTF::equal(*(WTF **)v11, 0, v12) & 1) != 0)
  {
LABEL_11:
    v14 = (_DWORD *)WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
    if (!WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
      goto LABEL_26;
    v15 = *(unsigned int *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
    v11 = WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map + 16 * v15;
  }
  else
  {
    v19 = 1;
    while (*(_QWORD *)v11 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v11, v20, v13) & 1) == 0)
    {
      v10 = (v10 + v19) & v9;
      v11 = v8 + 16 * v10;
      ++v19;
      if (WTF::equal(*(WTF **)v11, 0, v13))
        goto LABEL_11;
    }
    v14 = (_DWORD *)WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map;
    if (!WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map)
      goto LABEL_14;
    v15 = *(unsigned int *)(WebCore::updatableStorageAccessUserAgentStringQuirks(void)::map - 4);
  }
  if ((_DWORD *)v11 == &v14[4 * v15])
  {
LABEL_21:
    v14 = 0;
    goto LABEL_26;
  }
LABEL_14:
  if (!MEMORY[0x19AEA53F4](v20, "live.com", 8))
    goto LABEL_24;
  v16 = WTF::URL::host(a2);
  if ((char *)v16 != "teams.live.com" && v7 == 14)
  {
    if (((unint64_t)v7 & 0xFF00000000) != 0)
    {
      if (*(_BYTE *)v16 != 116
        || *(_QWORD *)(v16 + 1) != 0x76696C2E736D6165
        || *(_QWORD *)(v16 + 6) != 0x6D6F632E6576696CLL)
      {
        goto LABEL_21;
      }
    }
    else
    {
      if (*(_WORD *)v16 != 116)
        goto LABEL_21;
      v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v16 + 2), (int16x8_t)xmmword_1969F5AD0);
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0])
        goto LABEL_21;
      v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v16 + 12), (int16x8_t)xmmword_1969F5AE0);
      v18.i16[0] = vminvq_u16(v18);
      if (!v18.i32[0])
        goto LABEL_21;
    }
LABEL_24:
    v14 = *(_DWORD **)(v11 + 8);
    if (v14)
      *v14 += 2;
    goto LABEL_26;
  }
  v14 = 0;
  if ((char *)v16 == "teams.live.com" && v7 == 14)
    goto LABEL_24;
LABEL_26:
  *a3 = v14;
  this = v20;
  v20 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

void WebCore::verifyUserAgent(WebCore *this, const WTF::String *a2)
{
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  void *v11;
  WTF *v12;
  char v13;
  WTF *v14;
  uint8_t buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load(&qword_1ECE86BD0);
  if (v3 != -1)
  {
    *(_QWORD *)buf = &v13;
    v14 = (WTF *)buf;
    std::__call_once(&qword_1ECE86BD0, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::verifyUserAgent(WTF::String const&)::$_0 &&>>);
  }
  if ((_MergedGlobals_297 & 1) == 0)
  {
    if ((byte_1ECE86BC9 & 1) == 0)
    {
      qword_1ECE86BD8 = 0;
      byte_1ECE86BC9 = 1;
    }
    v4 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1ECE86BD8);
    v5 = v4;
    v7 = v6;
    v8 = qword_1ECE86BD8 ? qword_1ECE86BD8 + 8 * *(unsigned int *)(qword_1ECE86BD8 - 4) : 0;
    if ((_QWORD *)v8 != v4)
    {
      do
      {
        if (*(_QWORD *)this)
        {
          if (WTF::StringImpl::findIgnoringASCIICase() != -1)
          {
            v9 = qword_1ECE7C478;
            if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_FAULT))
            {
              WTF::String::utf8();
              if (v14)
                v10 = (char *)v14 + 16;
              else
                v10 = 0;
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v10;
              _os_log_fault_impl(&dword_1940B8000, v9, OS_LOG_TYPE_FAULT, "Unknown device name found in User Agent: %s. Please only use known device names.", buf, 0xCu);
              v12 = v14;
              v14 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 1)
                  WTF::fastFree(v12, v11);
                else
                  --*(_DWORD *)v12;
              }
            }
          }
        }
        while (++v5 != v7)
        {
          if ((unint64_t)(*v5 + 1) > 1)
            goto LABEL_15;
        }
        v5 = v7;
LABEL_15:
        ;
      }
      while (v5 != (_QWORD *)v8);
    }
  }
}

uint64_t WebCore::DocumentLoader::frameLoader(WebCore::DocumentLoader *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 280);
  else
    return 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ResourceLoader::init(WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E33F7748;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  WTF **v14;
  WTF *result;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF *v24;
  WTF::StringImpl *v25;
  int i;
  int v27;
  WTF **v28;
  unsigned int v29;
  int v30;
  WTF *v31;
  unsigned int v32;
  uint64_t v33;

  v8 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  if (10 * v7 >= (unint64_t)(9 * v8) || *(_BYTE *)(a1 + 20) && v8 <= 2 * (int)v7)
  {
    if ((_DWORD)v8)
      v32 = 2 * v8;
    else
      v32 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(a1, v32);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = v8 - 1;
  v10 = *(_DWORD *)(a1 + 16);
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    v12 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v12 = v11 >> 8;
  v13 = (v12 ^ v10) & v9;
  v14 = (WTF **)(*(_QWORD *)a1 + 8 * v13);
  result = *v14;
  if (*v14)
  {
    v33 = a4;
    v16 = 0;
    while (1)
    {
      v17 = *((_DWORD *)result + 4);
      v18 = v17 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v17 >> 8;
      v19 = (v13 + v8 - ((v18 ^ v10) & v9)) & v9;
      if (v16 > v19)
        break;
      if (v18 == v12)
      {
        result = (WTF *)WTF::equal(*v14, *a2, a3);
        v20 = *(_QWORD *)a1;
        if ((result & 1) != 0)
        {
          v22 = 0;
          a4 = v33;
          goto LABEL_22;
        }
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      v13 = (v13 + 1) & v9;
      ++v16;
      v14 = (WTF **)(v20 + 8 * v13);
      result = *v14;
      if (!*v14)
      {
        if (v16 >= 0x80)
          *(_BYTE *)(a1 + 20) = 1;
        a4 = v33;
        goto LABEL_18;
      }
    }
    if (v16 >= 0x80)
      *(_BYTE *)(a1 + 20) = 1;
    v24 = *v14;
    *v14 = 0;
    v25 = *a2;
    if (*a2)
      *(_DWORD *)v25 += 2;
    *v14 = v25;
    for (i = v13 + 1; ; i = v27 + 1)
    {
      v27 = i & v9;
      v28 = (WTF **)(*(_QWORD *)a1 + 8 * (i & v9));
      result = *v28;
      if (!*v28)
        break;
      v29 = *((_DWORD *)result + 4);
      if (v29 < 0x100)
        v30 = WTF::StringImpl::hashSlowCase(result);
      else
        v30 = v29 >> 8;
      if (++v19 > ((v27 + (_DWORD)v8 - ((v30 ^ v10) & v9)) & v9))
      {
        v31 = *v28;
        *v28 = v24;
        v24 = v31;
        v19 = (v27 + v8 - ((v30 ^ v10) & v9)) & v9;
      }
    }
    *v28 = v24;
    a4 = v33;
  }
  else
  {
LABEL_18:
    v21 = *a2;
    if (*a2)
      *(_DWORD *)v21 += 2;
    *v14 = v21;
  }
  ++*(_DWORD *)(a1 + 12);
  v20 = *(_QWORD *)a1;
  v22 = 1;
LABEL_22:
  v23 = v20 + 8 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

void sub_194242D0C(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t result;
  WTF::StringImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  WTF::StringImpl *v27;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(WTF **)a1;
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2));
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = a2;
  v8 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v10 >> 31) ^ v10;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v12 = (WTF::StringImpl *)*((_QWORD *)v5 + i);
      if (v12)
      {
        v13 = *(_DWORD *)(a1 + 8);
        v14 = *(_DWORD *)(a1 + 16);
        v15 = *((_DWORD *)v12 + 4);
        if (v15 < 0x100)
          v16 = WTF::StringImpl::hashSlowCase(v12);
        else
          v16 = v15 >> 8;
        v17 = v13 - 1;
        v18 = (v16 ^ v14) & (v13 - 1);
        v19 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v18);
        v20 = *v19;
        if (*v19)
        {
          v24 = 0;
          do
          {
            v25 = *((_DWORD *)v20 + 4);
            if (v25 < 0x100)
              v26 = WTF::StringImpl::hashSlowCase(v20);
            else
              v26 = v25 >> 8;
            if (v24 > ((v18 + v13 - ((v26 ^ v14) & v17)) & v17))
            {
              v27 = (WTF::StringImpl *)*((_QWORD *)v5 + i);
              *((_QWORD *)v5 + i) = *v19;
              *v19 = v27;
              v24 = (v18 + v13 - ((v26 ^ v14) & v17)) & v17;
            }
            v18 = (v18 + 1) & v17;
            ++v24;
            v19 = (WTF::StringImpl **)(*(_QWORD *)a1 + 8 * v18);
            v20 = *v19;
          }
          while (*v19);
        }
        v21 = (WTF::StringImpl *)*((_QWORD *)v5 + i);
        *((_QWORD *)v5 + i) = 0;
        v22 = *v19;
        *v19 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v7);
          else
            *(_DWORD *)v22 -= 2;
        }
        v23 = (WTF::StringImpl *)*((_QWORD *)v5 + i);
        *((_QWORD *)v5 + i) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v7);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      else
      {
        *((_QWORD *)v5 + i) = 0;
      }
    }
  }
  else if (!v5)
  {
    return result;
  }
  return WTF::fastFree(v5, v7);
}

uint64_t *WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(WebCore::MIMETypeRegistry *this)
{
  {
    WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes = 0;
  }
  return &WebCore::MIMETypeRegistry::additionalSupportedImageMIMETypes(void)::additionalSupportedImageMIMETypes;
}

WTF::StringImpl *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    v15 = *v14;
    if (*v14 != (WTF::StringImpl *)-1)
      break;
    v11 = (WTF::StringImpl **)(v7 + 8 * v13);
LABEL_13:
    v10 = i + v13;
  }
  if (!v15)
  {
    if (v11)
    {
      *v11 = 0;
      --*(_DWORD *)(*a1 - 16);
      v14 = v11;
    }
    v17 = *a2;
    *a2 = 0;
    result = *v14;
    *v14 = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_30:
        result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
        v14 = (WTF::StringImpl **)result;
        v24 = *a1;
        if (*a1)
          v27 = *(unsigned int *)(v24 - 4);
        else
          v27 = 0;
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_30;
    }
    v23 = v24 + 8 * v27;
    v22 = 1;
    goto LABEL_33;
  }
  result = (WTF::StringImpl *)WTF::equal(v15, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v22 = 0;
  v23 = v20 + 8 * v21;
LABEL_33:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v22;
  return result;
}

_QWORD *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[v3];
  if (!*((_DWORD *)result - 3))
    return &result[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v5 -= 8;
      if (!v5)
        return v4;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::RequiredMIMETypesFromUTI@<X0>(WebCore *this@<X0>, uint64_t *a2@<X8>)
{
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  WTF::StringImpl *v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  uint64_t v13;
  int v14;
  const WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _QWORD v18[3];
  WTF::StringImpl *v19;

  *a2 = 0;
  v5 = (void *)MEMORY[0x1E0CEC3F8];
  if (*(_QWORD *)this)
    v6 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v6 = &stru_1E3487BC0;
  v7 = (void *)objc_msgSend(v5, "typeWithIdentifier:", v6);
  v8 = v7;
  if (v7)
    CFRetain(v7);
  MEMORY[0x19AEA5508](&v19, objc_msgSend(v8, "preferredMIMEType"));
  if (v8)
    CFRelease(v8);
  if (v19 && *((_DWORD *)v19 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v19, v10, (uint64_t)v18);
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v11 + 4) == 25)
  {
    v13 = *(_QWORD *)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v13 & 0xDF) != 0x43
        || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x4F
        || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x4D
        || (*(_BYTE *)(v13 + 3) & 0xDF) != 0xE
        || (*(_BYTE *)(v13 + 4) & 0xDF) != 0x41
        || (*(_BYTE *)(v13 + 5) & 0xDF) != 0x44
        || (*(_BYTE *)(v13 + 6) & 0xDF) != 0x4F
        || (*(_BYTE *)(v13 + 7) & 0xDF) != 0x42
        || (*(_BYTE *)(v13 + 8) & 0xDF) != 0x45
        || (*(_BYTE *)(v13 + 9) & 0xDF) != 0xE
        || (*(_BYTE *)(v13 + 10) & 0xDF) != 0x50
        || (*(_BYTE *)(v13 + 11) & 0xDF) != 0x48
        || (*(_BYTE *)(v13 + 12) & 0xDF) != 0x4F
        || (*(_BYTE *)(v13 + 13) & 0xDF) != 0x54
        || (*(_BYTE *)(v13 + 14) & 0xDF) != 0x4F
        || (*(_BYTE *)(v13 + 15) & 0xDF) != 0x53
        || (*(_BYTE *)(v13 + 16) & 0xDF) != 0x48
        || (*(_BYTE *)(v13 + 17) & 0xDF) != 0x4F
        || (*(_BYTE *)(v13 + 18) & 0xDF) != 0x50
        || (*(_BYTE *)(v13 + 19) & 0xDF) != 0xD
        || (*(_BYTE *)(v13 + 20) & 0xDF) != 0x49
        || (*(_BYTE *)(v13 + 21) & 0xDF) != 0x4D
        || (*(_BYTE *)(v13 + 22) & 0xDF) != 0x41
        || (*(_BYTE *)(v13 + 23) & 0xDF) != 0x47)
      {
        goto LABEL_9;
      }
      v14 = *(unsigned __int8 *)(v13 + 24);
    }
    else
    {
      if ((*(_WORD *)v13 & 0xFFDF) != 0x43
        || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x4D
        || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0xE
        || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x41
        || (*(_WORD *)(v13 + 10) & 0xFFDF) != 0x44
        || (*(_WORD *)(v13 + 12) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 14) & 0xFFDF) != 0x42
        || (*(_WORD *)(v13 + 16) & 0xFFDF) != 0x45
        || (*(_WORD *)(v13 + 18) & 0xFFDF) != 0xE
        || (*(_WORD *)(v13 + 20) & 0xFFDF) != 0x50
        || (*(_WORD *)(v13 + 22) & 0xFFDF) != 0x48
        || (*(_WORD *)(v13 + 24) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 26) & 0xFFDF) != 0x54
        || (*(_WORD *)(v13 + 28) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 30) & 0xFFDF) != 0x53
        || (*(_WORD *)(v13 + 32) & 0xFFDF) != 0x48
        || (*(_WORD *)(v13 + 34) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v13 + 36) & 0xFFDF) != 0x50
        || (*(_WORD *)(v13 + 38) & 0xFFDF) != 0xD
        || (*(_WORD *)(v13 + 40) & 0xFFDF) != 0x49
        || (*(_WORD *)(v13 + 42) & 0xFFDF) != 0x4D
        || (*(_WORD *)(v13 + 44) & 0xFFDF) != 0x41
        || (*(_WORD *)(v13 + 46) & 0xFFDF) != 0x47)
      {
        goto LABEL_9;
      }
      v14 = *(unsigned __int16 *)(v13 + 48);
    }
    if ((v14 & 0xFFFFFFDF) == 0x45)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v17 = (WTF::StringImpl *)v18[0];
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a2, &v17, v15, (uint64_t)v18);
      v16 = v17;
      v17 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v9);
        else
          *(_DWORD *)v16 -= 2;
      }
    }
  }
LABEL_9:
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1942435C4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14)
{
  WTF::StringImpl ***v14;

  if (a10)
  {
    if (*(_DWORD *)a10 == 2)
      WTF::StringImpl::destroy(a10, a2);
    else
      *(_DWORD *)a10 -= 2;
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2)
      WTF::StringImpl::destroy(a14, a2);
    else
      *(_DWORD *)a14 -= 2;
  }
  if (*v14)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, a2);
  _Unwind_Resume(exception_object);
}

WTF *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  int i;
  unsigned int v13;
  WTF::StringImpl **v14;
  WTF *result;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v10 = v9 >> 8;
  v11 = 0;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v8;
    v14 = (WTF::StringImpl **)(v7 + 8 * (v10 & v8));
    result = *v14;
    if (!*v14)
    {
      if (v11)
      {
        result = 0;
        *v11 = 0;
        --*(_DWORD *)(*a1 - 16);
        v14 = v11;
      }
      v16 = *a2;
      if (*a2)
        *(_DWORD *)v16 += 2;
      *v14 = v16;
      v17 = *a1;
      if (*a1)
        v18 = *(_DWORD *)(v17 - 12) + 1;
      else
        v18 = 1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *a1;
      if (*a1)
        v20 = *(_DWORD *)(v19 - 12);
      else
        v20 = 0;
      v21 = (*(_DWORD *)(v19 - 16) + v20);
      v22 = *(unsigned int *)(v19 - 4);
      if (v22 > 0x400)
      {
        if (v22 > 2 * v21)
          goto LABEL_20;
      }
      else if (3 * v22 > 4 * v21)
      {
LABEL_20:
        v23 = v19 + 8 * v22;
        v24 = 1;
        goto LABEL_21;
      }
      result = (WTF *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(a1, v14);
      v14 = (WTF::StringImpl **)result;
      v19 = *a1;
      if (*a1)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_20;
    }
    if (result != (WTF *)-1)
      break;
    v11 = (WTF::StringImpl **)(v7 + 8 * v13);
LABEL_9:
    v10 = i + v13;
  }
  result = (WTF *)WTF::equal(result, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_9;
  v25 = *a1;
  if (*a1)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v24 = 0;
  v23 = v25 + 8 * v26;
LABEL_21:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (WTF::StringImpl **)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v14 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v14);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 8 * v20));
          v21 = (WTF::StringImpl **)(v15 + 8 * v20);
          *v21 = 0;
          v22 = *v13;
          *v13 = 0;
          *v21 = v22;
          v23 = *v13;
          *v13 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v10);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (v13 == a3)
            v12 = v21;
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

void WebCore::MIMETypeFromUTI(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;

  v4 = (void *)MEMORY[0x1E0CEC3F8];
  if (*(_QWORD *)this)
    v5 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v5 = &stru_1E3487BC0;
  v6 = (void *)objc_msgSend(v4, "typeWithIdentifier:", v5);
  v7 = v6;
  if (v6)
    CFRetain(v6);
  MEMORY[0x19AEA5508](a2, objc_msgSend(v7, "preferredMIMEType"));
  if (v7)
    CFRelease(v7);
}

void sub_194243A44(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WTF::HashSet<WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>,WTF::String>>(WTF::StringImpl **result, WTF::ASCIICaseInsensitiveHash *this, WTF::ASCIICaseInsensitiveHash *a3, WTF::ASCIICaseInsensitiveHash *a4)
{
  uint64_t v4;
  uint64_t v5;
  WTF::ASCIICaseInsensitiveHash *v8;
  uint64_t *v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  if (this != a4)
  {
    v11 = v4;
    v12 = v5;
    v8 = this;
    v9 = (uint64_t *)result;
    do
    {
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v8, v9, (uint64_t)v10);
      while (1)
      {
        v8 = (WTF::ASCIICaseInsensitiveHash *)((char *)v8 + 8);
        if (v8 == a3)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_8;
      }
      v8 = a3;
LABEL_8:
      ;
    }
    while (v8 != a4);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::RenderFlexibleBox::LineState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::RenderFlexibleBox::LineState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::RenderFlexibleBox::LineState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RenderFlexibleBox::LineState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  WebCore::RenderFlexibleBox::LineState *v11;
  void *v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = *(unsigned int *)(result + 12);
      v8 = 48 * v4;
      result = WTF::fastMalloc((WTF *)(48 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)v5 = result;
      if ((_DWORD)v7)
      {
        v10 = 48 * v7;
        v11 = v6;
        do
        {
          v13 = result;
          WebCore::RenderFlexibleBox::LineState::LineState(result, (uint64_t)v11);
          WebCore::RenderFlexibleBox::LineState::~LineState(v11, v12);
          result = v13 + 48;
          v11 = (WebCore::RenderFlexibleBox::LineState *)((char *)v11 + 48);
          v10 -= 48;
        }
        while (v10);
      }
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        return WTF::fastFree(v6, v9);
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::Layout::InlineDisplayContentBuilder::appendTextDisplayBox(uint64_t a1, unsigned __int8 *a2, float *a3, unsigned int *a4)
{
  uint64_t v4;
  WebCore::RenderStyle *LineStyle;
  uint64_t *v9;
  WebCore::Layout::Box *v10;
  _DWORD *v11;
  BOOL v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  WebCore::Length *v17;
  int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  WebCore::ShadowData *v31;
  _OWORD *v32;
  int v33;
  float v34;
  float v35;
  int v36;
  float v37;
  float v38;
  float v39;
  float v40;
  WTF::StringImpl **v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  float v48;
  float v49;
  void *v50;
  WTF *v51;
  float v52;
  float v53;
  WTF::StringImpl **v54;
  const char *v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  WTF::StringImpl **v61;
  WebCore::FontCascadeFonts *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  char v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  BOOL v73;
  WTF::StringImpl *v74;
  char v75;
  char *v76;
  char *v77;
  size_t v78;
  int v79;
  WTF::StringImpl **v80;
  int v81;
  __int16 v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  WTF::StringImpl ***v89;
  WTF::StringImpl **v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  unint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl **result;
  WTF::StringImpl *v96;
  int v97;
  _WORD *v98;
  char *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  void *v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  WTF *v115;
  int v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  unint64_t v123;
  __int128 v124;
  char *v125;
  int8x16_t v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  char *v131;
  __int16 v132;
  uint64_t v133;
  char *v134;
  char *v135;
  __int128 v136;
  int8x16_t v137;
  __int128 v138;
  __int128 v139;
  char *v140;
  char *v141;
  char *v142;
  __int16 v143;
  WTF *v144;
  char *v145;
  char *v146;
  unsigned __int128 v147;
  char v148;
  uint64_t v149;
  unsigned __int8 v150;
  unsigned int v151;
  float v152;
  unsigned int v153;
  unsigned int v154;
  float v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  WTF::StringImpl *v161;
  uint64_t v162;
  int v163;
  __int16 v164;
  unsigned int v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WebCore *v169;
  int v170;
  float v172;
  float v173;
  WTF *v174;
  WTF *v175;
  WTF *v176;
  int v177;
  __int16 v178;
  unsigned int v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  char v183;
  float v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unsigned __int8 v188;
  float v189;
  uint64_t v190;
  float v192;
  float v193;
  uint64_t v194;
  WTF::StringImpl ***v195;
  WTF *v196;
  uint64_t v197;
  _BYTE v198[12];
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  char v203;
  WTF::StringImpl *v204;
  __int128 v205;
  _BYTE v206[28];
  WTF::StringImpl **v207;
  WTF::StringImpl *v208;
  unint64_t v209;
  int v210;
  _QWORD v211[8];
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;
  int8x16x2_t v215;
  int8x16x2_t v216;
  int8x16x2_t v217;

  v4 = *((_QWORD *)a2 + 1);
  if ((*(_WORD *)(v4 + 12) & 0x20) == 0)
  {
    __break(0xC471u);
    goto LABEL_183;
  }
  if (**(_QWORD **)(a1 + 16))
    LineStyle = (WebCore::RenderStyle *)(v4 + 16);
  else
    LineStyle = (WebCore::RenderStyle *)WebCore::Layout::Box::firstLineStyle(*((WebCore::Layout::Box **)a2 + 1));
  v195 = (WTF::StringImpl ***)(v4 + 120);
  v9 = (uint64_t *)(a2 + 88);
  if (*(_BYTE *)(a1 + 43))
  {
    v12 = 1;
  }
  else
  {
    v10 = *(WebCore::Layout::Box **)(v4 + 80);
    if (**(_QWORD **)(a1 + 16))
      v11 = (_DWORD *)((char *)v10 + 56);
    else
      v11 = (_DWORD *)(WebCore::Layout::Box::firstLineStyle(v10) + 40);
    v12 = (*v11 & 0x78000) != 0;
  }
  *(_BYTE *)(a1 + 43) = v12;
  v211[0] = a3;
  v211[1] = LineStyle;
  v211[2] = a1;
  v211[3] = v4;
  v211[4] = v4 + 120;
  v211[5] = a2 + 88;
  if (!*(_BYTE *)(v4 + 128))
  {
    v187 = **(_QWORD **)(a1 + 16);
    v186 = *a2;
    v188 = a2[40];
    v13 = *a3;
    v193 = a3[1];
    v14 = a3[2];
    v15 = a3[3];
    v16 = *((_QWORD *)LineStyle + 4);
    v17 = (WebCore::Length *)(v16 + 232);
    v18 = *(unsigned __int8 *)(v16 + 236);
    if (v18 == 4)
    {
      if (*(_BYTE *)(v16 + 238))
        v19 = *(float *)v17;
      else
        v19 = (float)*(int *)v17;
    }
    else if (v18 == 3)
    {
      if (*(_BYTE *)(v16 + 238))
        v173 = *(float *)v17;
      else
        v173 = (float)*(int *)v17;
      v19 = (float)(v173 / 100.0) * *(float *)(v16 + 204);
    }
    else
    {
      v20 = a3[3];
      v21 = a3[2];
      v189 = *a3;
      if (v18 != 11)
        goto LABEL_19;
      WebCore::Length::nonNanCalculatedValue(v17, *(float *)(v16 + 204));
    }
    v20 = v15;
    v21 = v14;
    v189 = v13;
    if (v19 < 0.0)
    {
      v22 = a3[2];
      v23 = fmaxf((float)(v13 - v22) + 0.0, 0.0);
      v24 = v22 < 0.0;
      if (v22 >= 0.0)
        v22 = v13;
      v189 = v22;
      if (v24)
        v25 = v23;
      else
        v25 = v14;
      v21 = v25 - v19;
      v20 = v15 + 0.0;
    }
LABEL_19:
    v26 = *((_QWORD *)LineStyle + 3);
    if ((*(_BYTE *)(v26 + 238) & 8) != 0)
    {
      v169 = (WebCore *)(v26 + 244);
      v170 = *(unsigned __int8 *)(v26 + 248);
      if (v170 == 11 || v170 == 4)
      {
        v27 = WebCore::floatValueForLength(v169, (const WebCore::Length *)a2, (float)*(int *)(a1 + 32));
        v26 = *((_QWORD *)LineStyle + 3);
      }
      else
      {
        v27 = 0.0;
        if (v170 == 3)
        {
          if (*(_BYTE *)(v26 + 250))
            v172 = *(float *)v169;
          else
            v172 = (float)*(int *)v169;
          v27 = (float)(v172 * (float)(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 32))) / 200.0;
        }
      }
    }
    else
    {
      v27 = *(float *)(v26 + 4);
    }
    v28 = ceilf(v27);
    v29 = v28 + (float)(v21 + v28);
    v30 = v28 + (float)(v20 + v28);
    v31 = *(WebCore::ShadowData **)(v26 + 160);
    if (v31)
      v31 = (WebCore::ShadowData *)WebCore::ShadowData::shadowOutsetExtent(v31);
    else
      v32 = 0;
    if ((_DWORD)v31 == 0x80000000)
      v33 = 0x7FFFFFFF;
    else
      v33 = -(int)v31;
    v34 = (float)v33 * 0.015625;
    v35 = (float)(int)v32 * 0.015625;
    if (HIDWORD(v32) == 0x80000000)
      v36 = 0x7FFFFFFF;
    else
      v36 = -HIDWORD(v32);
    v37 = (float)v36 * 0.015625;
    v192 = (float)(v193 - v28) - v34;
    v38 = (float)((float)SHIDWORD(v31) * 0.015625) + (float)(v29 + v37);
    v39 = v30 + v34;
    v40 = v35 + v39;
    if ((*(_BYTE *)(v4 + 129) & 2) != 0)
    {
LABEL_40:
      if (!a2[112])
        goto LABEL_183;
      v185 = *((_QWORD *)a2 + 4);
      v194 = *((unsigned int *)a2 + 22);
      v190 = *((_QWORD *)a2 + 12);
      if (!a2[104])
      {
        v74 = 0;
        goto LABEL_87;
      }
      v54 = *v195;
      if (*v195)
      {
        v55 = (const char *)v54[1];
        v56 = *((unsigned int *)v54 + 1) | ((unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v55 = 0;
        v56 = 0x100000000;
      }
      if (v56 <= v194)
      {
        v58 = 0x100000000;
        v55 = "";
      }
      else
      {
        v57 = *((_QWORD *)a2 + 12);
        if ((int)v56 - (int)v194 <= v190)
        {
          if (!(_DWORD)v194)
          {
            v58 = v56;
            goto LABEL_49;
          }
          v57 = v56 - v194;
        }
        v58 = v57;
        v59 = v56 - v194;
        if ((v56 & 0x100000000) != 0)
        {
          if (v59 < v57)
            goto LABEL_183;
          v55 += v194;
          v58 = v57 | 0x100000000;
        }
        else
        {
          if (v59 < v57)
            goto LABEL_183;
          v55 += 2 * v194;
        }
      }
LABEL_49:
      v60 = *(_QWORD *)(*((_QWORD *)LineStyle + 3) + 288);
      if (v60)
        goto LABEL_66;
      {
        WTF::AtomStringImpl::add();
        WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = (uint64_t)v204;
      }
      {
        WTF::AtomStringImpl::add();
        WebCore::RenderStyle::hyphenString(void)const::hyphenString = (uint64_t)v204;
      }
      v61 = (WTF::StringImpl **)*((_QWORD *)LineStyle + 4);
      v62 = v61[31];
      if (v62)
        ++*(_DWORD *)v62;
      v63 = *((_QWORD *)v62 + 13);
      if (v63 && *(_QWORD *)(v63 + 8))
        goto LABEL_58;
      v103 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v62, (const WebCore::FontCascadeDescription *)(v61 + 6), 0);
      WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v103, 1, (uint64_t)&v204);
      if (!(_QWORD)v205 || (v104 = *(_QWORD *)(v205 + 8)) == 0)
      {
        v105 = 0;
        goto LABEL_150;
      }
      v105 = *(_QWORD *)(v104 + 8);
      if (!v105)
      {
        v105 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v105 = 1;
        *(_QWORD *)(v105 + 8) = v104;
        v175 = *(WTF **)(v104 + 8);
        *(_QWORD *)(v104 + 8) = v105;
        if (v175)
        {
          if (*(_DWORD *)v175 == 1)
          {
            WTF::fastFree(v175, v32);
            v105 = *(_QWORD *)(v104 + 8);
            if (!v105)
            {
LABEL_150:
              v106 = (WTF *)*((_QWORD *)v62 + 13);
              *((_QWORD *)v62 + 13) = v105;
              if (v106)
              {
                if (*(_DWORD *)v106 == 1)
                  WTF::fastFree(v106, v32);
                else
                  --*(_DWORD *)v106;
              }
              v107 = (WTF *)v205;
              *(_QWORD *)&v205 = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 1)
                  WTF::fastFree(v107, v32);
                else
                  --*(_DWORD *)v107;
              }
              v108 = *((_QWORD *)v62 + 13);
              if (v108)
              {
                v109 = *(_QWORD *)(v108 + 8);
                if (v109)
                {
                  if ((*(_BYTE *)(v109 + 256) & 2) != 0)
                  {
                    v110 = 1;
                    while (1)
                    {
                      v111 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v62, (const WebCore::FontCascadeDescription *)(v61 + 6), v110);
                      if (!*(_DWORD *)(v111 + 12))
                        break;
                      WebCore::FontRanges::glyphDataForCharacter(0x20u, v111, 0, (uint64_t)&v204);
                      if ((_QWORD)v205)
                        v112 = *(_QWORD *)(v205 + 8);
                      else
                        v112 = 0;
                      WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v196, v112);
                      v113 = (WTF *)v205;
                      *(_QWORD *)&v205 = 0;
                      if (v113)
                      {
                        if (*(_DWORD *)v113 == 1)
                          WTF::fastFree(v113, v32);
                        else
                          --*(_DWORD *)v113;
                      }
                      v64 = v196;
                      if (v196)
                      {
                        v114 = *((_QWORD *)v196 + 1);
                        if (!v114 || (*(_BYTE *)(v114 + 256) & 2) != 0)
                        {
                          v116 = 0;
                          v196 = 0;
                        }
                        else
                        {
                          v196 = 0;
                          v115 = (WTF *)*((_QWORD *)v62 + 13);
                          *((_QWORD *)v62 + 13) = v64;
                          if (!v115)
                            goto LABEL_60;
                          if (*(_DWORD *)v115 != 1)
                          {
                            --*(_DWORD *)v115;
                            goto LABEL_58;
                          }
                          WTF::fastFree(v115, v32);
                          v64 = v196;
                          v196 = 0;
                          if (!v64)
                            goto LABEL_58;
                          v116 = 2;
                        }
                        if (*(_DWORD *)v64 == 1)
                          WTF::fastFree(v64, v32);
                        else
                          --*(_DWORD *)v64;
                      }
                      else
                      {
                        v116 = 0;
                      }
                      ++v110;
                      if (v116)
                        goto LABEL_58;
                    }
                  }
                  goto LABEL_58;
                }
              }
              if (!v103[3])
              {
                __break(0xC471u);
                JUMPOUT(0x194244CC4);
              }
              v64 = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v103 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v103 + 8), 1);
              if (v64)
              {
                v174 = v64;
                v64 = (WTF *)*((_QWORD *)v64 + 1);
                if (!v64)
                {
                  v64 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v64 = 1;
                  *((_QWORD *)v64 + 1) = v174;
                  v176 = (WTF *)*((_QWORD *)v174 + 1);
                  *((_QWORD *)v174 + 1) = v64;
                  if (v176)
                  {
                    if (*(_DWORD *)v176 == 1)
                    {
                      WTF::fastFree(v176, v32);
                      v64 = (WTF *)*((_QWORD *)v174 + 1);
                      if (!v64)
                        goto LABEL_214;
                    }
                    else
                    {
                      --*(_DWORD *)v176;
                    }
                  }
                }
                ++*(_DWORD *)v64;
              }
LABEL_214:
              v144 = (WTF *)*((_QWORD *)v62 + 13);
              *((_QWORD *)v62 + 13) = v64;
              if (!v144)
              {
LABEL_59:
                if (v64)
LABEL_60:
                  v65 = *((_QWORD *)v64 + 1);
                else
                  v65 = 0;
                if (*(_DWORD *)v62 == 1)
                {
                  WebCore::FontCascadeFonts::~FontCascadeFonts(v62, v32);
                  WTF::fastFree(v101, v102);
                }
                else
                {
                  --*(_DWORD *)v62;
                }
                v204 = v61[21];
                v66 = WebCore::Font::glyphForCharacter(v65, (void *)0x2010);
                v67 = &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
                if (v66)
                  v67 = &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
                v60 = *v67;
                if (!*v67)
                {
                  v69 = 0;
                  v68 = 1;
                  goto LABEL_67;
                }
LABEL_66:
                v68 = 0;
                v69 = *(_DWORD *)(v60 + 4);
                *(_DWORD *)v60 += 2;
LABEL_67:
                if (((v69 | v58) & 0x80000000) != 0)
                  goto LABEL_266;
                v70 = v58 + v69;
                if (__OFADD__((_DWORD)v58, v69))
                  goto LABEL_266;
                v71 = v58 & 0x100000000;
                if ((v58 & 0x100000000) != 0)
                  v72 = v68;
                else
                  v72 = 1;
                if ((v72 & 1) != 0)
                {
                  v73 = v70 == 0;
                  if (v71)
                    goto LABEL_74;
                }
                else
                {
                  v73 = v70 == 0;
                  if ((*(_BYTE *)(v60 + 16) & 4) != 0)
                  {
LABEL_74:
                    if (!v73)
                    {
                      if ((v70 & 0x80000000) == 0)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(v70 + 20));
                        v74 = v204;
                        if (v204)
                        {
                          v75 = v68;
                          v76 = (char *)v204 + 20;
                          *(_DWORD *)v204 = 2;
                          *((_DWORD *)v74 + 1) = v70;
                          *((_QWORD *)v74 + 1) = (char *)v74 + 20;
                          *((_DWORD *)v74 + 4) = 4;
                          if ((_DWORD)v58)
                          {
                            if ((_DWORD)v58 == 1)
                              *v76 = *v55;
                            else
                              memcpy((char *)v74 + 20, v55, v58);
                          }
                          if (v60)
                          {
                            v77 = &v76[v58];
                            v32 = *(_OWORD **)(v60 + 8);
                            v78 = *(unsigned int *)(v60 + 4);
                            if ((*(_BYTE *)(v60 + 16) & 4) != 0)
                            {
                              if (!(_DWORD)v78)
                                goto LABEL_85;
                              if ((_DWORD)v78 != 1)
                                goto LABEL_84;
                              *v77 = *(_BYTE *)v32;
                              goto LABEL_85;
                            }
                            v145 = &v77[v78];
                            if (v78 >= 0x10)
                            {
                              v146 = &v77[v78 & 0xFFFFFFF0];
                              do
                              {
                                v147 = (unsigned __int128)vld2q_s8((const char *)v32);
                                v32 += 2;
                                *(_OWORD *)v77 = v147;
                                v77 += 16;
                              }
                              while (v77 != v146);
                              v77 = v146;
                            }
                            while (v77 != v145)
                            {
                              v148 = *(_BYTE *)v32;
                              v32 = (_OWORD *)((char *)v32 + 2);
                              *v77++ = v148;
                            }
                          }
                          v68 = v75;
                          goto LABEL_206;
                        }
                      }
                      goto LABEL_266;
                    }
                    goto LABEL_211;
                  }
                }
                if (!v73)
                {
                  if (v70 <= 0x7FFFFFEF)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(2 * v70 + 20));
                    v74 = v204;
                    if (v204)
                    {
                      v183 = v68;
                      v98 = (_WORD *)((char *)v204 + 20);
                      *(_DWORD *)v204 = 2;
                      *((_DWORD *)v74 + 1) = v70;
                      *((_QWORD *)v74 + 1) = (char *)v74 + 20;
                      *((_DWORD *)v74 + 4) = 0;
                      if (v71)
                      {
                        if (v58 >= 0x40)
                        {
                          v99 = (char *)&v98[v58 & 0xFFFFFFC0];
                          v124 = 0uLL;
                          v125 = (char *)v74 + 20;
                          do
                          {
                            v212.val[0] = *(int8x16_t *)v55;
                            v126 = *((int8x16_t *)v55 + 1);
                            v214.val[0] = (int8x16_t)*((_OWORD *)v55 + 2);
                            v127 = *((_OWORD *)v55 + 3);
                            v55 += 64;
                            v128 = v127;
                            v214.val[1] = 0uLL;
                            v216.val[0] = v126;
                            v212.val[1] = 0uLL;
                            v129 = v125;
                            vst2q_s8(v129, v212);
                            v129 += 32;
                            v216.val[1] = 0uLL;
                            vst2q_s8(v129, v216);
                            v130 = v125 + 64;
                            vst2q_s8(v130, v214);
                            v131 = v125 + 96;
                            vst2q_s8(v131, *(int8x16x2_t *)(&v124 - 1));
                            v125 += 128;
                          }
                          while (v125 != v99);
                        }
                        else
                        {
                          v99 = (char *)v74 + 20;
                        }
                        while (v99 != (char *)&v98[v58])
                        {
                          v132 = *(unsigned __int8 *)v55++;
                          *(_WORD *)v99 = v132;
                          v99 += 2;
                        }
                      }
                      else if ((_DWORD)v58 == 1)
                      {
                        *v98 = *(_WORD *)v55;
                      }
                      else if ((_DWORD)v58)
                      {
                        memcpy((char *)v74 + 20, v55, 2 * v58);
                      }
                      if (v60)
                      {
                        v77 = (char *)&v98[v58];
                        v32 = *(_OWORD **)(v60 + 8);
                        v133 = *(unsigned int *)(v60 + 4);
                        if ((*(_BYTE *)(v60 + 16) & 4) == 0)
                        {
                          if ((_DWORD)v133 == 1)
                          {
                            *(_WORD *)v77 = *(_WORD *)v32;
                          }
                          else if ((_DWORD)v133)
                          {
                            v78 = 2 * v133;
LABEL_84:
                            memcpy(v77, v32, v78);
                          }
LABEL_85:
                          if (*(_DWORD *)v60 == 2)
                            WTF::StringImpl::destroy((WTF::StringImpl *)v60, (WTF::StringImpl *)v32);
                          else
                            *(_DWORD *)v60 -= 2;
LABEL_87:
                          if (a2[112])
                          {
                            v79 = a2[104];
                            v80 = *v195;
                            if (*v195)
                              *(_DWORD *)v80 += 2;
                            if (v74)
                              *(_DWORD *)v74 += 2;
                            v81 = (v79 != 0) << 31;
                            v82 = *(unsigned __int8 *)(a1 + 40);
                            v204 = (WTF::StringImpl *)v4;
                            v83 = *(_DWORD *)(v4 + 8);
                            *(_DWORD *)(v4 + 8) = v83 + 1;
                            *(_QWORD *)&v205 = __PAIR64__(LODWORD(v193), LODWORD(v13));
                            *((_QWORD *)&v205 + 1) = __PAIR64__(LODWORD(v15), LODWORD(v14));
                            *(float *)v206 = (float)(v189 - v28) - v37;
                            *(float *)&v206[4] = v192;
                            *(float *)&v206[8] = v38;
                            *(float *)&v206[12] = v40;
                            *(_DWORD *)&v206[16] = v187;
                            *(_DWORD *)&v206[20] = HIDWORD(v185);
                            v206[24] = v185;
                            v206[25] = v188;
                            *(_WORD *)&v206[26] = (v186 == 2) | (unsigned __int16)(v82 << 7) | *(_WORD *)&v206[26] & 0xFE00 | 0x10;
                            v207 = v80;
                            v208 = v74;
                            v209 = __PAIR64__(v190, v194);
                            v210 = v81;
                            v84 = a4[3];
                            if (v84 == a4[2])
                            {
                              WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v204);
                            }
                            else
                            {
                              v85 = *(_QWORD *)a4;
                              v86 = *(_QWORD *)a4 + 80 * v84;
                              *(_QWORD *)v86 = v4;
                              *(_DWORD *)(v4 + 8) = v83 + 2;
                              v87 = v205;
                              v88 = *(_OWORD *)v206;
                              *(_OWORD *)(v86 + 36) = *(_OWORD *)&v206[12];
                              *(_OWORD *)(v86 + 24) = v88;
                              *(_OWORD *)(v86 + 8) = v87;
                              v89 = (WTF::StringImpl ***)(v86 + 52);
                              v90 = v207;
                              if (v207)
                                *(_DWORD *)v207 += 2;
                              *v89 = v90;
                              v91 = v208;
                              if (v208)
                                *(_DWORD *)v208 += 2;
                              v92 = v85 + 80 * v84;
                              *(_QWORD *)(v92 + 60) = v91;
                              v93 = v209;
                              *(_DWORD *)(v92 + 76) = v210;
                              *(_QWORD *)(v92 + 68) = v93;
                              ++a4[3];
                            }
                            if ((*(_WORD *)&v206[26] & 0x100) != 0)
                            {
                              {
                                WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
                                qword_1EE2F92D8 = 0;
                                qword_1EE2F92E0 = 0;
                              }
                              v196 = (WTF *)&v204;
                              WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v196);
                            }
                            v94 = v208;
                            v208 = 0;
                            if (v94)
                            {
                              if (*(_DWORD *)v94 == 2)
                                WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v32);
                              else
                                *(_DWORD *)v94 -= 2;
                            }
                            result = v207;
                            v207 = 0;
                            if (result)
                            {
                              if (*(_DWORD *)result == 2)
                                result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v32);
                              else
                                *(_DWORD *)result -= 2;
                            }
                            v96 = v204;
                            v204 = 0;
                            if (!v96)
                              goto LABEL_108;
                            v97 = *((_DWORD *)v96 + 2);
                            if (v97)
                            {
                              *((_DWORD *)v96 + 2) = v97 - 1;
LABEL_108:
                              if (!v74)
                                return result;
                              if (*(_DWORD *)v74 != 2)
                              {
                                *(_DWORD *)v74 -= 2;
                                return result;
                              }
                              v100 = v74;
                              return (WTF::StringImpl **)WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v32);
                            }
LABEL_184:
                            __break(0xC471u);
                            JUMPOUT(0x194244680);
                          }
LABEL_183:
                          __break(1u);
                          goto LABEL_184;
                        }
                        v134 = &v77[2 * v133];
                        if (v133 >= 0x40)
                        {
                          v135 = &v77[2 * (v133 & 0xFFFFFFC0)];
                          v136 = 0uLL;
                          v68 = v183;
                          do
                          {
                            v213.val[0] = (int8x16_t)*v32;
                            v137 = *((int8x16_t *)v32 + 1);
                            v215.val[0] = (int8x16_t)v32[2];
                            v138 = v32[3];
                            v32 += 4;
                            v139 = v138;
                            v215.val[1] = 0uLL;
                            v217.val[0] = v137;
                            v213.val[1] = 0uLL;
                            v140 = v77;
                            vst2q_s8(v140, v213);
                            v140 += 32;
                            v217.val[1] = 0uLL;
                            vst2q_s8(v140, v217);
                            v141 = v77 + 64;
                            vst2q_s8(v141, v215);
                            v142 = v77 + 96;
                            vst2q_s8(v142, *(int8x16x2_t *)(&v136 - 1));
                            v77 += 128;
                          }
                          while (v77 != v135);
                          v77 = v135;
                        }
                        else
                        {
                          v68 = v183;
                        }
                        while (v77 != v134)
                        {
                          v143 = *(unsigned __int8 *)v32;
                          v32 = (_OWORD *)((char *)v32 + 1);
                          *(_WORD *)v77 = v143;
                          v77 += 2;
                        }
                      }
                      else
                      {
                        v68 = v183;
                      }
LABEL_206:
                      if ((v68 & 1) != 0)
                        goto LABEL_87;
                      goto LABEL_85;
                    }
                  }
LABEL_266:
                  __break(0xC471u);
                  JUMPOUT(0x194244BC4);
                }
LABEL_211:
                v74 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                goto LABEL_206;
              }
              if (*(_DWORD *)v144 == 1)
                WTF::fastFree(v144, v32);
              else
                --*(_DWORD *)v144;
LABEL_58:
              v64 = (WTF *)*((_QWORD *)v62 + 13);
              goto LABEL_59;
            }
          }
          else
          {
            --*(_DWORD *)v175;
          }
        }
      }
      ++*(_DWORD *)v105;
      goto LABEL_150;
    }
    v41 = *v195;
    if (*v195)
    {
      v42 = (unsigned __int16 *)v41[1];
      v43 = *((unsigned int *)v41 + 1) | ((unint64_t)((*((_DWORD *)v41 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v42 = 0;
      v43 = 0x100000000;
    }
    if (!a2[112])
      goto LABEL_183;
    v184 = v28;
    if (v43 <= *v9)
    {
      v117 = v13;
      v118 = v15;
      v119 = v14;
      v120 = v37;
      v121 = v35 + v39;
      v122 = v38;
      v123 = 0x100000000;
      v42 = (unsigned __int16 *)"";
LABEL_39:
      v47 = WebCore::Layout::TextUtil::enclosingGlyphBoundsForText(v42, v123, (uint64_t)LineStyle);
      v49 = v48;
      v51 = WebCore::RenderStyle::metricsOfPrimaryFont(LineStyle, v50);
      v52 = fmaxf(ceilf(-v47) - (float)*((int *)v51 + 11), 0.0);
      v53 = fmaxf(ceilf(v49) - (float)*((int *)v51 + 12), 0.0);
      v192 = v192 - v52;
      v38 = v122 + 0.0;
      v40 = v53 + (float)(v121 + v52);
      v37 = v120;
      v14 = v119;
      v15 = v118;
      v13 = v117;
      v28 = v184;
      goto LABEL_40;
    }
    v44 = *((_DWORD *)a2 + 24);
    if (v43 - *v9 <= v44)
    {
      if (!*v9)
      {
        v117 = v13;
        v118 = v15;
        v119 = v14;
        v120 = v37;
        v121 = v35 + v39;
        v122 = v38;
        v123 = v43;
        goto LABEL_39;
      }
      v44 = v43 - *v9;
    }
    v117 = v13;
    v118 = v15;
    v119 = v14;
    v120 = v37;
    v121 = v35 + v39;
    v45 = *v9;
    v123 = v44;
    v46 = v43 - v45;
    if ((v43 & 0x100000000) != 0)
    {
      if (v46 < v44)
        goto LABEL_183;
      v122 = v38;
      v42 = (unsigned __int16 *)((char *)v42 + v45);
      v123 = v44 | 0x100000000;
    }
    else
    {
      if (v46 < v44)
        goto LABEL_183;
      v122 = v38;
      v42 += v45;
    }
    goto LABEL_39;
  }
  if ((_MergedGlobals_201 & 1) == 0)
  {
    WTF::String::String();
    _MergedGlobals_201 = 1;
  }
  v149 = **(_QWORD **)(a1 + 16);
  v150 = a2[40];
  v152 = *a3;
  v151 = *((_DWORD *)a3 + 1);
  v154 = *((_DWORD *)a3 + 2);
  v153 = *((_DWORD *)a3 + 3);
  v155 = WebCore::Layout::InlineDisplayContentBuilder::appendTextDisplayBox(WebCore::Layout::Line::Run const&,WebCore::Layout::InlineRect const&,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()((uint64_t)v211, (unint64_t)a2);
  if (!a2[112])
    goto LABEL_183;
  v159 = *((_QWORD *)a2 + 4);
  v160 = *v9;
  v161 = (WTF::StringImpl *)*v195;
  if (*v195)
    *(_DWORD *)v161 += 2;
  v162 = qword_1ECE83738;
  if (qword_1ECE83738)
    *(_DWORD *)qword_1ECE83738 += 2;
  if (v161)
  {
    *(_DWORD *)v161 += 2;
    *(_DWORD *)v198 = v160;
    *(_QWORD *)&v198[4] = 1;
    v196 = 0;
    v197 = 0;
    v201 = *(_QWORD *)v198;
    v202 = 0;
    v203 = 1;
    v163 = *(unsigned __int8 *)(a1 + 40);
    v204 = (WTF::StringImpl *)v4;
    ++*(_DWORD *)(v4 + 8);
    *(_QWORD *)&v205 = __PAIR64__(v151, LODWORD(v152));
    *((_QWORD *)&v205 + 1) = __PAIR64__(v153, v154);
    *(float *)v206 = v155;
    *(_DWORD *)&v206[4] = v156;
    *(_DWORD *)&v206[8] = v157;
    *(_DWORD *)&v206[12] = v158;
    *(_DWORD *)&v206[16] = v149;
    *(_DWORD *)&v206[20] = HIDWORD(v159);
    v206[24] = v159;
    v206[25] = v150;
    if (v163)
      v164 = 144;
    else
      v164 = 16;
    *(_WORD *)&v206[26] = v164;
    v207 = (WTF::StringImpl **)v162;
    v199 = 0;
    v200 = 0;
    v208 = v161;
    v209 = v201;
    v210 = v202;
    v165 = a4[3];
    if (v165 == a4[2])
    {
      WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v204);
    }
    else
    {
      WebCore::InlineDisplay::Box::Box(*(_QWORD *)a4 + 80 * v165, (uint64_t *)&v204);
      ++a4[3];
    }
    WebCore::InlineDisplay::Box::~Box((WebCore::InlineDisplay::Box *)&v204, v166);
    std::optional<WebCore::InlineDisplay::Box::Text>::~optional((uint64_t)&v199, v167);
    result = WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v196, v168);
    if (*(_DWORD *)v161 != 2)
    {
      *(_DWORD *)v161 -= 2;
      return result;
    }
    v100 = v161;
    return (WTF::StringImpl **)WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v32);
  }
  *(_DWORD *)v198 = v160;
  *(_QWORD *)&v198[4] = 1;
  v196 = 0;
  v197 = 0;
  v201 = *(_QWORD *)v198;
  v202 = 0;
  v203 = 1;
  v177 = *(unsigned __int8 *)(a1 + 40);
  v204 = (WTF::StringImpl *)v4;
  ++*(_DWORD *)(v4 + 8);
  *(_QWORD *)&v205 = __PAIR64__(v151, LODWORD(v152));
  *((_QWORD *)&v205 + 1) = __PAIR64__(v153, v154);
  *(float *)v206 = v155;
  *(_DWORD *)&v206[4] = v156;
  *(_DWORD *)&v206[8] = v157;
  *(_DWORD *)&v206[12] = v158;
  *(_DWORD *)&v206[16] = v149;
  *(_DWORD *)&v206[20] = HIDWORD(v159);
  v206[24] = v159;
  v206[25] = v150;
  if (v177)
    v178 = 144;
  else
    v178 = 16;
  *(_WORD *)&v206[26] = v178;
  v207 = (WTF::StringImpl **)v162;
  v199 = 0;
  v200 = 0;
  v208 = 0;
  v209 = v201;
  v210 = v202;
  v179 = a4[3];
  if (v179 == a4[2])
  {
    WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InlineDisplay::Box>(a4, (unint64_t)&v204);
  }
  else
  {
    WebCore::InlineDisplay::Box::Box(*(_QWORD *)a4 + 80 * v179, (uint64_t *)&v204);
    ++a4[3];
  }
  WebCore::InlineDisplay::Box::~Box((WebCore::InlineDisplay::Box *)&v204, v180);
  std::optional<WebCore::InlineDisplay::Box::Text>::~optional((uint64_t)&v199, v181);
  return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(&v196, v182);
}

void WebCore::LayoutIntegration::LineLayout::paint(WebCore::LayoutIntegration::LineLayout *this, uint64_t a2, int32x2_t *a3, WebCore::Layout::Box **a4)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int32x2_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  WebCore::Layout::Box *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unint64_t v22;
  float *v23;
  float v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  WebCore::Layout::Box *v28;
  unint64_t v29;
  WTF **v30;
  char v31;
  unsigned int v32;
  WebCore::Layout::Box *v33;
  __int16 v34;
  unsigned int v35;
  uint64_t v36;
  WebCore::LayoutIntegration::InlineContent *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  WebCore::Layout::Box *v44;
  uint64_t LineStyle;
  float v46;
  float v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  float v52;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  int v58;
  WebCore::LayoutIntegration::InlineContent *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  WebCore::RenderObject *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::Layout::Box *v74;
  uint64_t v75;
  float v76;
  float v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  BOOL v81;
  float v82;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  WebCore::RenderObject *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  unsigned int *v108;
  void *v109;
  unsigned int *v110;
  const WebCore::RenderBox *v111;
  const WebCore::RenderBox *v112;
  WebCore::RenderBox *v113;
  unsigned int v114;
  int v115;
  unint64_t v117;
  float v118;
  float v119;
  unint64_t v120;
  float *v121;
  unint64_t v122;
  float *v123;
  int v124;
  BOOL v125;
  int v126;
  float v127;
  unint64_t v128;
  unint64_t v129;
  float *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  float v138;
  float v139;
  WebCore::RenderObject *v140;
  WebCore::RenderObject *v141;
  uint64_t v142;
  WebCore::RenderElement *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF **v147;
  WebCore::Layout::Box *v148;
  unsigned int v149;
  int v150;
  unsigned int v152;
  uint64_t v154;
  unint64_t v155;
  int32x2_t v156;
  int v157;
  int v158;
  uint64_t v159;
  WebCore::RenderObject *v160;
  char v161;
  WTF *v162;
  uint64_t v163;
  _QWORD *i;
  WTF *v165;
  WTF *v166;
  WebCore::Layout::Box *v167;
  unsigned int v168;
  int v169;
  unsigned int v171;
  uint64_t v173;
  WTF **v174;
  char v175;
  float *v176;
  float v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  WTF *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int *v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  WebCore::RenderObject *v216;
  uint64_t v217;
  WTF *v218;
  __int128 v219;
  const WebCore::RenderInline *v220;
  WebCore::LayoutIntegration::InlineContent *v221;
  char *v222;
  WTF *v223[2];
  __int128 v224;
  WTF *v225[2];
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  int32x2_t *v231;
  unint64_t v232;
  unsigned int v233;
  WTF **v234;
  int32x2_t v235;
  WebCore::RenderObject *v236;
  char v237;
  char v238;
  char v239;
  unsigned int *v240[2];
  unsigned int v241;
  _QWORD v242[2];
  unsigned int v243;
  int32x4_t v244;
  unsigned int v245;
  char v246;
  int32x2_t v247[2];
  unsigned int v248;

  v4 = *((_QWORD *)this + 10);
  if (!v4)
    return;
  v5 = *(unsigned __int16 *)(a2 + 16);
  if (v5 > 0x1FF)
  {
    if (*(unsigned __int16 *)(a2 + 16) > 0xFFFu)
    {
      if (v5 != 0x2000 && v5 != 4096)
        return;
    }
    else if (v5 != 512 && v5 != 1024)
    {
      return;
    }
  }
  else
  {
    v6 = v5 - 8 > 0x38 || ((1 << (v5 - 8)) & 0x100000001000101) == 0;
    if (v6 && v5 != 128)
      return;
  }
  v7 = *a3;
  v217 = a2;
  v218 = (WTF *)v7;
  v221 = (WebCore::LayoutIntegration::InlineContent *)v4;
  v222 = (char *)this + 8;
  v219 = *(_OWORD *)a2;
  if (v7.i32[0] == 0x80000000)
    v8 = 0x7FFFFFFF;
  else
    v8 = -v7.i32[0];
  v9 = HIDWORD(*(_QWORD *)&v7);
  if ((_DWORD)v9 == 0x80000000)
    v10 = 0x7FFFFFFF;
  else
    v10 = -(int)v9;
  v11 = __OFADD__((_DWORD)v219, v8);
  v12 = v219 + v8;
  v13 = (v219 >> 31) + 0x7FFFFFFF;
  if (!v11)
    v13 = v12;
  v220 = (const WebCore::RenderInline *)a4;
  *(_OWORD *)v223 = 0u;
  v224 = 0u;
  v11 = __OFADD__(DWORD1(v219), v10);
  v14 = DWORD1(v219) + v10;
  if (v11)
    v15 = (DWORD1(v219) >> 31) + 0x7FFFFFFF;
  else
    v15 = v14;
  *(_QWORD *)&v219 = __PAIR64__(v15, v13);
  if (a4)
  {
LABEL_304:
    v16 = a4[7];
    if (v16 && (*((_WORD *)v16 + 6) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x194245E7CLL);
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned int *)(v4 + 60);
  if (!(_DWORD)v17)
    goto LABEL_177;
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  if ((*(_BYTE *)(v18 + 52) & 7) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x194245B48);
  }
  v19 = (unsigned __int16)*(_DWORD *)(v18 + 124) >> 13;
  v51 = v19 > 5;
  v20 = (1 << v19) & 0x2A;
  if (!v51 && v20 != 0)
    goto LABEL_33;
  v22 = *(unsigned int *)(v4 + 44);
  if (!(_DWORD)v22)
  {
    __break(0xC471u);
    JUMPOUT(0x194246324);
  }
  v23 = *(float **)(v4 + 32);
  v24 = (float)v15 * 0.015625;
  if (v24 < (float)(v23[21] + v23[23]))
  {
    v25 = v15 + HIDWORD(v219);
    if (__OFADD__(v15, HIDWORD(v219)))
      v25 = (v15 >> 31) + 0x7FFFFFFF;
    if ((float)((float)v25 * 0.015625) > v23[38 * v22 - 17])
      goto LABEL_33;
  }
  if (*(_BYTE *)(v4 + 21))
  {
LABEL_33:
    v26 = *(unsigned int **)(v4 + 48);
    v27 = (uint64_t)&v26[20 * v17 - 20];
  }
  else
  {
    v117 = v22 - 1;
    v118 = (float)((float)(v23[38 * v22 - 33] + v23[38 * v22 - 31]) - v23[5]) / (float)v22;
    v119 = (float)((float)(v15 & ~(v15 >> 31)) * 0.015625) / v118;
    if (v22 - 1 >= (unint64_t)v119)
      v120 = (unint64_t)v119;
    else
      v120 = v22 - 1;
    v121 = &v23[38 * v120 - 17];
    do
    {
      v122 = v120;
      v123 = v121;
      if (!v120)
        break;
      --v120;
      if (v122 - 1 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x1942463E4);
      }
      v139 = *v121 + v121[2];
      v121 -= 38;
    }
    while (v24 <= v139);
    v124 = v15 + HIDWORD(v219);
    v125 = __OFADD__(v15, HIDWORD(v219));
    a2 = (v15 >> 31) + 0x7FFFFFFF;
    if (__OFADD__(v15, HIDWORD(v219)))
      v126 = (v15 >> 31) + 0x7FFFFFFF;
    else
      v126 = v15 + HIDWORD(v219);
    v127 = (float)((float)(v126 & ~(v126 >> 31)) * 0.015625) / v118;
    if (v117 >= (unint64_t)v127)
      v128 = (unint64_t)v127;
    else
      v128 = v22 - 1;
    v129 = v128 + 1;
    if (v125)
    {
      v176 = &v23[38 * v128 + 59];
      while (v22 != v129)
      {
        if (v129 >= v22)
        {
LABEL_417:
          __break(0xC471u);
          JUMPOUT(0x1942463ECLL);
        }
        v177 = *v176;
        v176 += 38;
        ++v129;
        if ((float)((float)(int)a2 * 0.015625) < v177)
        {
LABEL_260:
          v117 = v129 - 2;
          break;
        }
      }
    }
    else
    {
      a2 = 152;
      v130 = &v23[38 * v128 + 59];
      while (v22 != v129)
      {
        if (v129 >= v22)
          goto LABEL_417;
        v138 = *v130;
        v130 += 38;
        ++v129;
        if ((float)((float)v124 * 0.015625) < v138)
          goto LABEL_260;
      }
    }
    if (v122 >= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1942463C4);
    }
    if (v117 >= v22)
    {
      __break(0xC471u);
      JUMPOUT(0x1942463CCLL);
    }
    v131 = *(_QWORD *)(v123 + 17);
    if (v131 >= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1942463D4);
    }
    v132 = *(_QWORD *)&v23[38 * v117] + *(_QWORD *)&v23[38 * v117 + 2] - 1;
    if (v132 >= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x1942463DCLL);
    }
    v133 = *(_QWORD *)(v4 + 48);
    v26 = (unsigned int *)(v133 + 80 * v131);
    v27 = v133 + 80 * v132;
  }
  if (v26 == (unsigned int *)(v27 + 80))
    goto LABEL_177;
  v28 = 0;
  v29 = 0;
  v30 = v223;
  v31 = 1;
  do
  {
    v32 = *(unsigned __int16 *)(v217 + 16);
    if (v32 > 0x3F)
    {
      if (v32 == 1024)
      {
LABEL_117:
        if ((*((_WORD *)v26 + 25) & 0xE) != 6)
          goto LABEL_118;
        goto LABEL_44;
      }
      if (v32 == 64 && (*((_WORD *)v26 + 25) & 0xF) != 7)
      {
LABEL_118:
        v33 = v28;
        goto LABEL_119;
      }
    }
    else
    {
      if (v32 == 16)
        goto LABEL_117;
      if (v32 == 32 && (*((_WORD *)v26 + 25) & 0xF) != 6)
        goto LABEL_118;
    }
LABEL_44:
    v33 = *(WebCore::Layout::Box **)v26;
    if (v16 == *(WebCore::Layout::Box **)v26)
    {
      v33 = v28;
    }
    else
    {
      if (v16)
      {
        v147 = v30;
        if ((*((_WORD *)v26 + 25) & 0xF) != 7)
        {
          v148 = *(WebCore::Layout::Box **)v26;
          while (1)
          {
            v148 = (WebCore::Layout::Box *)*((_QWORD *)v148 + 10);
            v149 = *((_DWORD *)v148 + 8) & 0x1F;
            v51 = v149 > 0x18;
            v150 = (1 << v149) & 0x1400001;
            if (v51 || v150 == 0)
              break;
            v152 = *((_WORD *)v148 + 6) & 0xF;
            if (v152 <= 0xB && ((1 << v152) & 0x884) != 0)
              break;
            v30 = v147;
            if (v148 == v16)
              goto LABEL_46;
          }
        }
        v33 = v28;
        v30 = v147;
        goto LABEL_119;
      }
LABEL_46:
      if (v28)
      {
        v34 = *((_WORD *)v26 + 25);
        if ((v34 & 0xF) != 7)
        {
          v167 = *(WebCore::Layout::Box **)v26;
          do
          {
            v167 = (WebCore::Layout::Box *)*((_QWORD *)v167 + 10);
            v168 = *((_DWORD *)v167 + 8) & 0x1F;
            v51 = v168 > 0x18;
            v169 = (1 << v168) & 0x1400001;
            if (!v51 && v169 != 0)
            {
              v171 = *((_WORD *)v167 + 6) & 0xF;
              if (v171 > 0xB || ((1 << v171) & 0x884) == 0)
                continue;
            }
            goto LABEL_48;
          }
          while (v167 != v28);
          v33 = v28;
          goto LABEL_119;
        }
      }
      else
      {
        v34 = *((_WORD *)v26 + 25);
      }
LABEL_48:
      if ((v34 & 0xE) != 0)
      {
        v35 = v34 & 0xF;
        if (v35 > 7 || ((1 << v35) & 0x98) == 0)
        {
          v96 = *((_QWORD *)v33 + 14);
          if (v96)
          {
            if ((*(_BYTE *)(v96 + 45) & 0x10) != 0)
            {
              v97 = *(_QWORD *)(v96 + 144);
              if (v97)
              {
                if ((*(_BYTE *)(v97 + 25) & 8) != 0)
                {
                  if (v35 == 6)
                  {
                    if ((*((_WORD *)v33 + 6) & 0x40) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194245DA0);
                    }
                  }
                  else
                  {
                    v33 = 0;
                  }
                  goto LABEL_119;
                }
              }
            }
          }
        }
      }
      v33 = 0;
    }
    if (!(v31 & 1 | (v220 != 0)) && v29 != v26[10] && v32 == 8)
    {
      v36 = *((_QWORD *)v222 + 1);
      if ((*(_BYTE *)(*(_QWORD *)(v36 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v36 + 120) & 0x30) == 0)
      {
        v37 = v221;
        v38 = *(_QWORD *)v221;
        if (!*(_QWORD *)v221)
        {
          v38 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v38 = 1;
          *(_QWORD *)(v38 + 8) = v37;
          v110 = *(unsigned int **)v37;
          *(_QWORD *)v37 = v38;
          if (v110)
          {
            do
            {
              v94 = __ldaxr(v110);
              v95 = v94 - 1;
            }
            while (__stlxr(v95, v110));
            if (!v95)
            {
              atomic_store(1u, v110);
              WTF::fastFree((WTF *)v110, v109);
            }
            v38 = *(_QWORD *)v37;
          }
        }
        do
          v39 = __ldaxr((unsigned int *)v38);
        while (__stlxr(v39 + 1, (unsigned int *)v38));
        v231 = (int32x2_t *)v38;
        v232 = v29;
        v233 = 0;
        v40 = *(_QWORD *)(v38 + 8);
        if (v29 >= *(unsigned int *)(v40 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x1942462BCLL);
        }
        if (!*(_BYTE *)(*(_QWORD *)(v40 + 32) + 152 * v29 + 144))
        {
          v41 = 0;
LABEL_62:
          ((void (*)(WTF **, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v41])(v225, &v231);
          goto LABEL_63;
        }
        WebCore::RenderElement::selectionColor(*((_QWORD **)v222 + 1), 342, (uint64_t)v247);
        WebCore::RenderElement::selectionBackgroundColor(*((WebCore::RenderElement **)v222 + 1), (unint64_t *)&v244);
        v225[0] = (WTF *)&v231;
        v225[1] = (WTF *)v217;
        *(_QWORD *)&v226 = v218;
        *((int32x2_t *)&v226 + 1) = v247[0];
        if ((*(_QWORD *)v247 & 0x8000000000000) != 0)
        {
          v178 = (unsigned int *)(*(_QWORD *)v247 & 0xFFFFFFFFFFFFLL);
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 + 1, v178));
        }
        *(_QWORD *)&v227 = v244.i64[0];
        if ((v244.i64[0] & 0x8000000000000) != 0)
        {
          v180 = (unsigned int *)(v244.i64[0] & 0xFFFFFFFFFFFFLL);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 + 1, v180));
        }
        WebCore::EllipsisBoxPainter::paint((WebCore::EllipsisBoxPainter *)v225);
        if ((v227 & 0x8000000000000) != 0)
        {
          v191 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFLL);
          do
          {
            v192 = __ldaxr(v191);
            v193 = v192 - 1;
          }
          while (__stlxr(v193, v191));
          if (!v193)
          {
            atomic_store(1u, v191);
            WTF::fastFree((WTF *)v191, (void *)a2);
          }
        }
        if ((*((_QWORD *)&v226 + 1) & 0x8000000000000) != 0)
        {
          v194 = (unsigned int *)(*((_QWORD *)&v226 + 1) & 0xFFFFFFFFFFFFLL);
          do
          {
            v195 = __ldaxr(v194);
            v196 = v195 - 1;
          }
          while (__stlxr(v196, v194));
          if (!v196)
          {
            atomic_store(1u, v194);
            WTF::fastFree((WTF *)v194, (void *)a2);
          }
        }
        if ((v244.i64[0] & 0x8000000000000) != 0)
        {
          v197 = (unsigned int *)(v244.i64[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v198 = __ldaxr(v197);
            v199 = v198 - 1;
          }
          while (__stlxr(v199, v197));
          if (!v199)
          {
            atomic_store(1u, v197);
            WTF::fastFree((WTF *)v197, (void *)a2);
          }
        }
        if ((*(_QWORD *)v247 & 0x8000000000000) != 0)
        {
          v200 = (unsigned int *)(*(_QWORD *)v247 & 0xFFFFFFFFFFFFLL);
          do
          {
            v201 = __ldaxr(v200);
            v202 = v201 - 1;
          }
          while (__stlxr(v202, v200));
          if (!v202)
          {
            atomic_store(1u, v200);
            WTF::fastFree((WTF *)v200, (void *)a2);
          }
        }
        v41 = v233;
        if (v233 != -1)
          goto LABEL_62;
      }
    }
LABEL_63:
    v42 = *((_WORD *)v26 + 25);
    if ((v42 & 0x80) != 0 || (v42 & 0xFu) - 3 < 2)
      goto LABEL_119;
    v43 = v42 & 0xE;
    if (v43 == 6)
    {
      v44 = *(WebCore::Layout::Box **)v26;
      if (v26[10])
        LineStyle = (uint64_t)v44 + 16;
      else
        LineStyle = WebCore::Layout::Box::firstLineStyle(v44);
      if ((*(_BYTE *)(*(_QWORD *)(LineStyle + 24) + 239) & 4) == 0 && (*(_BYTE *)(LineStyle + 40) & 0x30) == 0)
      {
        v46 = *((float *)v26 + 7);
        v47 = floorf(v46 * 64.0);
        v48 = (int)v47;
        if (v47 > -2147500000.0)
          v49 = (int)v47;
        else
          v49 = 0x80000000;
        v50 = 0x7FFFFFFF;
        if (v47 < 2147500000.0)
        {
          v51 = v47 <= -2147500000.0;
        }
        else
        {
          v49 = 0x7FFFFFFF;
          v51 = 1;
        }
        if (v51)
          v48 = v49;
        v52 = ceilf((float)(v46 + *((float *)v26 + 9)) * 64.0);
        if (v52 >= 2147500000.0 || v52 <= -2147500000.0)
        {
          if (v52 < 2147500000.0)
          {
            if (v52 <= -2147500000.0)
              v50 = 0x80000000;
            else
              v50 = (int)v52;
          }
        }
        else
        {
          v50 = (int)v52;
        }
        v54 = v50 - v48;
        if (__OFSUB__(v50, v48))
          v54 = (v50 >> 31) + 0x7FFFFFFF;
        v55 = *((_QWORD *)v222 + 1);
        v56 = (unsigned __int16)*(_DWORD *)(v55 + 124) >> 13;
        if (v56 <= 5 && ((1 << v56) & 0x2A) != 0 && (*(_BYTE *)(v55 + 21) & 0x10) == 0)
        {
          v186 = v48 + v54;
          if (__OFADD__(v48, v54))
            v186 = (v48 >> 31) + 0x7FFFFFFF;
          v187 = *(_DWORD *)(v55 + 164);
          v48 = v187 - v186;
          if (__OFSUB__(v187, v186))
            v48 = (v187 >> 31) + 0x7FFFFFFF;
        }
        v57 = DWORD1(v219) + HIDWORD(v219);
        if (__OFADD__(DWORD1(v219), HIDWORD(v219)))
          v57 = (DWORD1(v219) >> 31) + 0x7FFFFFFF;
        if (v57 > (int)v48)
        {
          v11 = __OFADD__(v48, v54);
          v58 = v48 + v54;
          if (v11)
            v58 = (v48 >> 31) + 0x7FFFFFFF;
          if (SDWORD1(v219) < v58)
          {
            v59 = v221;
            v60 = *(_OWORD *)v217;
            v226 = *(_OWORD *)(v217 + 16);
            v61 = *(_OWORD *)(v217 + 32);
            v62 = *(_OWORD *)(v217 + 48);
            v63 = *(_OWORD *)(v217 + 64);
            v230 = *(_QWORD *)(v217 + 80);
            v228 = v62;
            v229 = v63;
            v227 = v61;
            *(_OWORD *)v225 = v60;
            v64 = *(unsigned __int16 *)(v217 + 16);
            if (v64 == 32)
              LOWORD(v64) = 16;
            LOWORD(v226) = v64;
            *(_QWORD *)&v227 = v30;
            v65 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v26 - *((_QWORD *)v221 + 6)) >> 4);
            if (v65 >= *((unsigned int *)v221 + 15))
            {
              __break(0xC471u);
              JUMPOUT(0x194245B90);
            }
            v66 = *(_QWORD *)v221;
            if (*(_QWORD *)v221)
              goto LABEL_479;
            v66 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v66 = 1;
            *(_QWORD *)(v66 + 8) = v59;
            v108 = *(unsigned int **)v59;
            *(_QWORD *)v59 = v66;
            if (!v108)
              goto LABEL_479;
            do
            {
              v72 = __ldaxr(v108);
              v73 = v72 - 1;
            }
            while (__stlxr(v73, v108));
            if (!v73)
            {
              atomic_store(1u, v108);
              WTF::fastFree((WTF *)v108, v107);
            }
            v66 = *(_QWORD *)v59;
            if (*(_QWORD *)v59)
            {
LABEL_479:
              do
                v67 = __ldaxr((unsigned int *)v66);
              while (__stlxr(v67 + 1, (unsigned int *)v66));
            }
            v240[0] = (unsigned int *)v66;
            v240[1] = (unsigned int *)v65;
            v241 = 0;
            v231 = v247;
            if (!_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box11isInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__baseILNS0_6_TraitE1EJNSB_13BoxModernPathENSB_13BoxLegacyPathEEEEEEEDcSD_DpT0_((uint64_t)&v231, v240))
            {
              __break(0xC471u);
              JUMPOUT(0x194245BB0);
            }
            LOBYTE(v231) = 0;
            v233 = -1;
            v68 = v241;
            if (v241 == -1)
            {
              v234 = v225;
              v235 = (int32x2_t)v218;
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_304;
            }
            v69 = v241;
            ((void (*)(uint64_t, unsigned int **, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_1[v69])((uint64_t)v247, (unsigned int **)&v231, v240);
            v233 = v68;
            v234 = v225;
            v235 = (int32x2_t)v218;
            v29 = (unint64_t)&v244;
            v247[0] = (int32x2_t)&v244;
            v70 = (WebCore::RenderObject *)((uint64_t (*)(uint64_t, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box8rendererEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix_1[v69])((uint64_t)v247, &v231);
            if ((*((_BYTE *)v70 + 45) & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194245BD0);
            }
            v236 = v70;
            if (v233 == -1)
              goto LABEL_285;
            v247[0] = (int32x2_t)&v244;
            ((void (*)(_QWORD *__return_ptr, int32x2_t *, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box7lineBoxEvE3__0JZNKSA_7lineBoxEvE3__1EEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v233])(v242, v247, &v231);
            v247[0].i8[0] = 0;
            v248 = -1;
            v29 = v243;
            if (v243 == -1)
              goto LABEL_285;
            ((void (*)(int32x4_t *, int32x2_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v243])(&v244, v247, v242);
            v248 = v29;
            v244.i64[0] = (uint64_t)&v246;
            ((void (*)(int32x4_t *, int32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator16traversePreviousEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v244, v247);
            v244.i8[0] = 0;
            v245 = -1;
            v29 = v248;
            if (v248 == -1)
              goto LABEL_285;
            ((void (*)(char *, int32x4_t *, int32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v248])(&v246, &v244, v247);
            v245 = v29;
            if (v248 != -1)
            {
              ((void (*)(char *, int32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v248])(&v246, v247);
              v29 = v245;
              if (v245 == -1)
                goto LABEL_285;
            }
            v247[0] = (int32x2_t)&v246;
            v29 = ((uint64_t (*)(int32x2_t *, int32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v29])(v247, &v244);
            if (v245 != -1)
              ((void (*)(int32x2_t *, int32x4_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v245])(v247, &v244);
            if (v243 != -1)
              ((void (*)(int32x2_t *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v243])(v247, v242);
            v237 = v29;
            if (v233 == -1
              || (v29 = (unint64_t)&v244,
                  v247[0] = (int32x2_t)&v244,
                  v238 = ((uint64_t (*)(int32x2_t *, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box15isRootInlineBoxEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v233])(v247, &v231), v233 == -1))
            {
LABEL_285:
              std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_286;
            }
            v247[0] = (int32x2_t)&v244;
            v239 = ((uint64_t (*)(int32x2_t *, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator3Box12isHorizontalEvEUlRT_E_JEEEEEJRKNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix[v233])(v247, &v231);
            if (v241 != -1)
              ((void (*)(int32x2_t *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v241])(v247, v240);
            v71 = *((unsigned __int16 *)v234 + 8);
            if (v71 > 0x3F)
            {
              switch(v71)
              {
                case 0x2000u:
                  if (v236 && (*((_BYTE *)v236 + 45) & 0x20) != 0)
                  {
                    v244.i64[0] = WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v236, (WebCore::RenderObject *)a2);
                    v244.i64[1] = v154;
                    v155 = WebCore::enclosingIntRect(v244.i64);
                    v247[1] = v156;
                    v247[0].i32[0] = v155 + v235.i32[0] / 64 + ((int)(v235.i32[0] - (v157 & 0xFFFFFFC0) + 32) >> 6);
                    v247[0].i32[1] = HIDWORD(v155)
                                   + v235.i32[1] / 64
                                   + ((int)(v235.i32[1] - (v158 & 0xFFFFFFC0) + 32) >> 6);
                    v159 = (uint64_t)v234[9];
                    if (v159 && !(*(unsigned int (**)(WTF *))(*(_QWORD *)v159 + 24))(v234[9]))
                      v159 = 0;
                    v160 = v236;
                    v161 = *((_BYTE *)v236 + 45);
                    WebCore::LayoutRect::LayoutRect((int8x8_t *)&v244, v247);
                    if (v160 && (v161 & 0x20) != 0)
                      WebCore::AccessibilityRegionContext::takeBounds(v159, (uint64_t)v160, &v244);
                  }
                  break;
                case 0x400u:
                  WebCore::InlineBoxPainter::paintMask((uint64_t)&v231);
                  break;
                case 0x40u:
LABEL_199:
                  v104 = v236;
                  if ((*(_BYTE *)(*((_QWORD *)v236 + 13) + 239) & 4) == 0 && (*((_BYTE *)v236 + 120) & 0x30) == 0)
                  {
                    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v236 + 11) + 16) + 52) & 0xE) != 0
                      && WebCore::RenderStyle::outlineWidth((WebCore::RenderObject *)((char *)v236 + 80)) > 0.0)
                    {
                      goto LABEL_290;
                    }
                    if ((*((_BYTE *)v104 + 45) & 1) == 0)
                    {
                      v105 = *(_QWORD *)(*((_QWORD *)v104 + 3) + 8);
                      if (v105)
                      {
                        if ((*(_WORD *)(v105 + 28) & 8) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194245D08);
                        }
                        if ((*(_WORD *)(v105 + 30) & 1) != 0)
                        {
                          v106 = *(_QWORD *)(*(_QWORD *)(v105 + 40) + 8);
                          if (*(_BYTE *)(v106 + 3382)
                            || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v106 + 1944) + 248) + 1149) & 0x20) != 0)
                          {
LABEL_290:
                            if (!v238)
                            {
                              v216 = v236;
                              if ((*((_BYTE *)v236 + 45) & 0x20) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x1942462FCLL);
                              }
                              if (WebCore::RenderBoxModelObject::continuation(v236)
                                || (*(_WORD *)((_BYTE *)v216 + 69) & 0x20) != 0)
                              {
                                v140 = WebCore::RenderObject::containingBlock(v236);
                                if (WebCore::RenderObject::isAnonymousBlock(v140))
                                {
                                  v141 = WebCore::RenderObject::containingBlock(v140);
                                  v142 = (uint64_t)v236;
                                  v143 = v141;
                                  if (v236 == v141)
                                  {
LABEL_357:
                                    v173 = *(_QWORD *)(WebCore::RenderElement::element(v143) + 64);
                                    v174 = (WTF **)(v173 & 0xFFFFFFFFFFFFLL);
                                    if ((v173 & 0xFFFFFFFFFFFFLL) != 0)
                                    {
                                      v175 = *(_BYTE *)((v173 & 0xFFFFFFFFFFFFLL) + 0x2D);
                                      if ((v175 & 2) != 0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x1942462DCLL);
                                      }
                                      if ((v175 & 0x20) == 0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x19424631CLL);
                                      }
                                    }
                                    WebCore::RenderBlock::addContinuationWithOutline((uint64_t)v141, v174);
                                    break;
                                  }
                                  while (1)
                                  {
                                    v144 = *(_QWORD *)(v142 + 144);
                                    if (v144)
                                    {
                                      if ((*(_BYTE *)(v144 + 25) & 8) != 0)
                                        break;
                                    }
                                    v145 = *(_QWORD *)(v142 + 32);
                                    if (v145)
                                      v146 = *(_QWORD *)(v145 + 8);
                                    else
                                      v146 = 0;
                                    v142 = WebCore::RenderObject::enclosingBoxModelObject(v146);
                                    if ((WebCore::RenderObject *)v142 == v141)
                                    {
                                      v143 = v236;
                                      goto LABEL_357;
                                    }
                                  }
                                }
                              }
                              if ((*(_WORD *)((_BYTE *)v216 + 69) & 0x20) == 0)
                                WTF::WeakListHashSet<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderInline>((uint64_t)v234[4], (uint64_t)v216, (uint64_t)v247);
                            }
                          }
                        }
                      }
                    }
                  }
                  break;
                default:
                  goto LABEL_165;
              }
            }
            else
            {
              if (v71 == 16)
                goto LABEL_199;
LABEL_165:
              WebCore::InlineBoxPainter::paintDecorations((WebCore::InlineBoxPainter *)&v231, (WTF::StringImpl *)a2);
            }
            if (v233 != -1)
              ((void (*)(int32x2_t *, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v233])(v247, &v231);
          }
        }
      }
    }
    else if (v43)
    {
      v111 = *(const WebCore::RenderBox **)(*(_QWORD *)v26 + 112);
      if (v111)
      {
        if ((*((_BYTE *)v111 + 45) & 4) != 0 && (*((_BYTE *)v111 + 20) & 2) != 0)
        {
          a2 = v217;
          v112 = *(const WebCore::RenderBox **)(v217 + 24);
          if (!v112 || v112 == v111)
          {
            v113 = (WebCore::RenderBox *)*((_QWORD *)v222 + 1);
            v114 = (unsigned __int16)*((_DWORD *)v113 + 31) >> 13;
            v51 = v114 > 5;
            v115 = (1 << v114) & 0x2A;
            if (v51 || v115 == 0)
            {
              v190 = v218;
            }
            else
            {
              v190 = (WTF *)WebCore::RenderBox::flipForWritingModeForChild(v113, v111, (const WebCore::LayoutPoint *)&v218);
              a2 = v217;
            }
            v225[0] = v190;
            WebCore::RenderElement::paintAsInlineBlock((uint64_t)v111, a2, (uint64_t)v225);
          }
        }
      }
    }
    else if (v26[18])
    {
      v74 = *(WebCore::Layout::Box **)v26;
      v75 = v26[10] ? (uint64_t)v74 + 16 : WebCore::Layout::Box::firstLineStyle(v74);
      if ((*(_BYTE *)(*(_QWORD *)(v75 + 24) + 239) & 4) == 0 && (*(_BYTE *)(v75 + 40) & 0x30) == 0)
      {
        v76 = *((float *)v26 + 7);
        v77 = floorf(v76 * 64.0);
        v78 = (int)v77;
        if (v77 > -2147500000.0)
          v79 = (int)v77;
        else
          v79 = 0x80000000;
        v80 = 0x7FFFFFFF;
        if (v77 < 2147500000.0)
        {
          v81 = v77 <= -2147500000.0;
        }
        else
        {
          v79 = 0x7FFFFFFF;
          v81 = 1;
        }
        if (v81)
          v78 = v79;
        v82 = ceilf((float)(v76 + *((float *)v26 + 9)) * 64.0);
        if (v82 >= 2147500000.0 || v82 <= -2147500000.0)
        {
          if (v82 < 2147500000.0)
          {
            if (v82 <= -2147500000.0)
              v80 = 0x80000000;
            else
              v80 = (int)v82;
          }
        }
        else
        {
          v80 = (int)v82;
        }
        v84 = v80 - v78;
        if (__OFSUB__(v80, v78))
          v84 = (v80 >> 31) + 0x7FFFFFFF;
        v85 = *((_QWORD *)v222 + 1);
        v86 = (unsigned __int16)*(_DWORD *)(v85 + 124) >> 13;
        if (v86 <= 5 && ((1 << v86) & 0x2A) != 0 && (*(_BYTE *)(v85 + 21) & 0x10) == 0)
        {
          v188 = v78 + v84;
          if (__OFADD__(v78, v84))
            v188 = (v78 >> 31) + 0x7FFFFFFF;
          v189 = *(_DWORD *)(v85 + 164);
          v78 = v189 - v188;
          if (__OFSUB__(v189, v188))
            v78 = (v189 >> 31) + 0x7FFFFFFF;
        }
        v87 = DWORD1(v219) + HIDWORD(v219);
        if (__OFADD__(DWORD1(v219), HIDWORD(v219)))
          v87 = (DWORD1(v219) >> 31) + 0x7FFFFFFF;
        if (v87 > (int)v78)
        {
          v11 = __OFADD__(v78, v84);
          v88 = v78 + v84;
          if (v11)
            v88 = (v78 >> 31) + 0x7FFFFFFF;
          if (SDWORD1(v219) < v88)
          {
            WebCore::ModernTextBoxPainter::ModernTextBoxPainter((WebCore::ModernTextBoxPainter *)v225, v221, (const WebCore::InlineDisplay::Box *)v26, (WebCore::PaintInfo *)v217, (const WebCore::LayoutPoint *)&v218);
            WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paint((uint64_t)v225, v89);
            v90 = (WTF::StringImpl *)v229;
            *(_QWORD *)&v229 = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 2)
                WTF::StringImpl::destroy(v90, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v90 -= 2;
            }
            v91 = (unsigned int *)v225[0];
            v225[0] = 0;
            if (v91)
            {
              do
              {
                v92 = __ldaxr(v91);
                v93 = v92 - 1;
              }
              while (__stlxr(v93, v91));
              if (!v93)
              {
                atomic_store(1u, v91);
                WTF::fastFree((WTF *)v91, (void *)a2);
              }
            }
          }
        }
      }
    }
LABEL_119:
    v31 = 0;
    v29 = v26[10];
    v28 = v33;
    v6 = v26 == (unsigned int *)v27;
    v26 += 20;
  }
  while (!v6);
  if (v220)
    goto LABEL_177;
  if (*(_WORD *)(v217 + 16) != 8)
    goto LABEL_177;
  v99 = *((_QWORD *)v222 + 1);
  if ((*(_BYTE *)(*(_QWORD *)(v99 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v99 + 120) & 0x30) != 0)
    goto LABEL_177;
  v26 = (unsigned int *)v221;
  v100 = *(_QWORD *)v221;
  if (!*(_QWORD *)v221)
  {
    v100 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v100 = 1;
    *(_QWORD *)(v100 + 8) = v26;
    v135 = *(unsigned int **)v26;
    *(_QWORD *)v26 = v100;
    if (v135)
    {
      do
      {
        v136 = __ldaxr(v135);
        v137 = v136 - 1;
      }
      while (__stlxr(v137, v135));
      if (!v137)
      {
LABEL_286:
        atomic_store(1u, v135);
        WTF::fastFree((WTF *)v135, v134);
      }
      v100 = *(_QWORD *)v26;
      goto LABEL_189;
    }
  }
  do
LABEL_189:
    v101 = __ldaxr((unsigned int *)v100);
  while (__stlxr(v101 + 1, (unsigned int *)v100));
  v231 = (int32x2_t *)v100;
  v232 = v29;
  v233 = 0;
  v102 = *(_QWORD *)(v100 + 8);
  if (*(_DWORD *)(v102 + 44) <= v29)
  {
    __break(0xC471u);
    JUMPOUT(0x1942463A4);
  }
  v103 = *(unsigned __int8 *)(*(_QWORD *)(v102 + 32) + 152 * v29 + 144);
  if (!v103)
    goto LABEL_192;
  WebCore::RenderElement::selectionColor(*((_QWORD **)v222 + 1), 342, (uint64_t)v247);
  WebCore::RenderElement::selectionBackgroundColor(*((WebCore::RenderElement **)v222 + 1), (unint64_t *)&v244);
  v225[0] = (WTF *)&v231;
  v225[1] = (WTF *)v217;
  *(_QWORD *)&v226 = v218;
  *((int32x2_t *)&v226 + 1) = v247[0];
  if ((*(_QWORD *)v247 & 0x8000000000000) != 0)
  {
    v182 = (unsigned int *)(*(_QWORD *)v247 & 0xFFFFFFFFFFFFLL);
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 + 1, v182));
  }
  *(_QWORD *)&v227 = v244.i64[0];
  if ((v244.i64[0] & 0x8000000000000) != 0)
  {
    v184 = (unsigned int *)(v244.i64[0] & 0xFFFFFFFFFFFFLL);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 + 1, v184));
  }
  WebCore::EllipsisBoxPainter::paint((WebCore::EllipsisBoxPainter *)v225);
  if ((v227 & 0x8000000000000) != 0)
  {
    v203 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFLL);
    do
    {
      v204 = __ldaxr(v203);
      v205 = v204 - 1;
    }
    while (__stlxr(v205, v203));
    if (!v205)
    {
      atomic_store(1u, v203);
      WTF::fastFree((WTF *)v203, (void *)a2);
    }
  }
  if ((*((_QWORD *)&v226 + 1) & 0x8000000000000) != 0)
  {
    v206 = (unsigned int *)(*((_QWORD *)&v226 + 1) & 0xFFFFFFFFFFFFLL);
    do
    {
      v207 = __ldaxr(v206);
      v208 = v207 - 1;
    }
    while (__stlxr(v208, v206));
    if (!v208)
    {
      atomic_store(1u, v206);
      WTF::fastFree((WTF *)v206, (void *)a2);
    }
  }
  if ((v244.i64[0] & 0x8000000000000) != 0)
  {
    v209 = (unsigned int *)(v244.i64[0] & 0xFFFFFFFFFFFFLL);
    do
    {
      v210 = __ldaxr(v209);
      v211 = v210 - 1;
    }
    while (__stlxr(v211, v209));
    if (!v211)
    {
      atomic_store(1u, v209);
      WTF::fastFree((WTF *)v209, (void *)a2);
    }
  }
  if ((*(_QWORD *)v247 & 0x8000000000000) != 0)
  {
    v212 = (unsigned int *)(*(_QWORD *)v247 & 0xFFFFFFFFFFFFLL);
    do
    {
      v213 = __ldaxr(v212);
      v214 = v213 - 1;
    }
    while (__stlxr(v214, v212));
    if (!v214)
    {
      atomic_store(1u, v212);
      WTF::fastFree((WTF *)v212, (void *)a2);
    }
  }
  v103 = v233;
  if (v233 != -1)
LABEL_192:
    ((void (*)(WTF **, int32x2_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0[v103])(v225, &v231);
LABEL_177:
  v98 = v223[1];
  if (v223[1])
  {
    v162 = v223[1];
    while (1)
    {
      v163 = *(_QWORD *)(*(_QWORD *)v162 + 8);
      if (v163)
        break;
      v162 = (WTF *)*((_QWORD *)v162 + 2);
      if (!v162)
        goto LABEL_339;
    }
    WebCore::RenderInline::paintOutline(v163, (WebCore::PaintInfo *)v217, (int32x2_t *)&v218);
    for (i = (_QWORD *)*((_QWORD *)v162 + 2); i; i = (_QWORD *)i[2])
    {
      v215 = *(_QWORD *)(*i + 8);
      if (v215)
      {
        ++DWORD2(v224);
        WebCore::RenderInline::paintOutline(v215, (WebCore::PaintInfo *)v217, (int32x2_t *)&v218);
      }
    }
    ++DWORD2(v224);
    v98 = v223[1];
LABEL_339:
    while (v98)
    {
      v165 = v98;
      v98 = (WTF *)*((_QWORD *)v98 + 2);
      v166 = *(WTF **)v165;
      *(_QWORD *)v165 = 0;
      if (v166)
      {
        if (*(_DWORD *)v166 == 1)
          WTF::fastFree(v166, (void *)a2);
        else
          --*(_DWORD *)v166;
      }
      WTF::fastFree(v165, (void *)a2);
    }
  }
  if (v223[0])
    WTF::fastFree((WTF *)((char *)v223[0] - 16), (void *)a2);
}

uint64_t WebCore::Layout::Box::firstLineStyle(WebCore::Layout::Box *this)
{
  uint64_t v2;
  WebCore::Layout::Box *v3;

  if ((*((_WORD *)this + 6) & 0x200) != 0
    && (v3 = this, v2 = WebCore::Layout::Box::rareData(this), this = v3, *(_QWORD *)(v2 + 24)))
  {
    return *(_QWORD *)(WebCore::Layout::Box::rareData(v3) + 24);
  }
  else
  {
    return (uint64_t)this + 16;
  }
}

void WebCore::InlineBoxPainter::paintDecorations(WebCore::InlineBoxPainter *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  char *LineStyle;
  double v9;
  float v10;
  double v11;
  double v12;
  float v13;
  double v14;
  float v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL ShouldBeAppliedToBackground;
  const WebCore::Color *v36;
  WebCore::RenderObject *v37;
  uint64_t v38;
  unsigned __int8 v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  WTF *v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  int v55;
  int v56;
  int v57;
  unsigned __int16 hasClosedLeftAndRightEdge;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _BOOL8 v68;
  float v69;
  double v70;
  uint64_t v72;
  int v73;
  _BOOL8 v74;
  float v75;
  double v76;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int32x4_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::LocalFrameView *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  double v94;
  double v95;
  double v96;
  _BOOL4 v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103[2];
  int v104;
  __int128 v105;
  int v106;
  unsigned int *v107[2];
  unint64_t v108;
  uint64_t v109[2];
  uint64_t v110;
  WTF *v111[2];
  _DWORD v112[17];
  _BYTE v113[9];

  v3 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 5);
  v5 = *(_QWORD *)(v3 + 24);
  if (v5)
    v6 = v5 == v4;
  else
    v6 = 1;
  if (!v6)
    return;
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 104) + 239) & 4) != 0)
    return;
  if ((*(_BYTE *)(v4 + 120) & 0x30) != 0)
    return;
  if (*(_WORD *)(v3 + 16) != 8)
    return;
  v7 = *((unsigned __int8 *)this + 49);
  if (!*((_BYTE *)this + 49) && (*(_BYTE *)(v4 + 23) & 0x60) == 0)
    return;
  if (*((_BYTE *)this + 48))
  {
    LineStyle = WebCore::RenderElement::firstLineStyle((WebCore::RenderElement *)v4, a2);
    v7 = *((unsigned __int8 *)this + 49);
  }
  else
  {
    LineStyle = (char *)(v4 + 80);
  }
  if (v7 && (!*((_BYTE *)this + 48) || LineStyle == (char *)(*((_QWORD *)this + 5) + 80)))
    return;
  v9 = WebCore::InlineIterator::Box::visualRect(this) * 64.0;
  v11 = v10;
  v12 = v10 * 64.0;
  v14 = v13;
  v16 = v15;
  if (v12 >= 2147483650.0
    || (v17 = v14 * 64.0, v14 * 64.0 >= 2147483650.0)
    || ((v18 = v16 * 64.0, v16 * 64.0 < 2147483650.0) ? (v19 = v9 <= -2147483650.0) : (v19 = 1),
        !v19 ? (v20 = v12 <= -2147483650.0) : (v20 = 1),
        !v20 ? (v21 = v17 <= -2147483650.0) : (v21 = 1),
        !v21 ? (v22 = v18 <= -2147483650.0) : (v22 = 1),
        v22 || v9 >= 2147483650.0))
  {
    if (v9 >= 2147483650.0)
    {
      v23 = 0x7FFFFFFF;
    }
    else if (v9 <= -2147483650.0)
    {
      v23 = 0x80000000;
    }
    else
    {
      v23 = (int)v9;
    }
    v94 = v11 * 64.0;
    if (v11 * 64.0 >= 2147483650.0)
    {
      v24 = 0x7FFFFFFF;
    }
    else if (v94 <= -2147483650.0)
    {
      v24 = 0x80000000;
    }
    else
    {
      v24 = (int)v94;
    }
    v95 = v14 * 64.0;
    if (v95 >= 2147483650.0)
    {
      v25 = 0x7FFFFFFF;
    }
    else if (v95 <= -2147483650.0)
    {
      v25 = 0x80000000;
    }
    else
    {
      v25 = (int)v95;
    }
    v96 = v16 * 64.0;
    if (v96 >= 2147483650.0)
    {
      v26 = 0x7FFFFFFFLL;
    }
    else if (v96 <= -2147483650.0)
    {
      v26 = 0x80000000;
    }
    else
    {
      v26 = (int)v96;
    }
  }
  else
  {
    v23 = (int)v9;
    v24 = (int)v12;
    v25 = (int)v17;
    v26 = (int)v18;
  }
  v102 = v25;
  v27 = *((_DWORD *)this + 8);
  v28 = __OFADD__(v27, v23);
  v29 = v27 + v23;
  if (v28)
    v29 = (v27 >> 31) + 0x7FFFFFFF;
  v30 = v25 | (unint64_t)(v26 << 32);
  v31 = *((_DWORD *)this + 9);
  v28 = __OFADD__(v31, v24);
  v32 = v31 + v24;
  if (v28)
    v32 = (v31 >> 31) + 0x7FFFFFFF;
  v109[1] = v30;
  v110 = v29 | (unint64_t)(v32 << 32);
  v101 = *(_QWORD *)(*((_QWORD *)this + 3) + 80);
  v109[0] = v110;
  v33 = *((_QWORD *)this + 5);
  LOBYTE(v111[0]) = 0;
  v112[0] = -1;
  v34 = *((unsigned int *)this + 4);
  if ((_DWORD)v34 != -1)
  {
    ((void (*)(__int128 *, WTF **, WebCore::InlineBoxPainter *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v34])(&v105, v111, this);
    v112[0] = v34;
  }
  ShouldBeAppliedToBackground = WebCore::BackgroundPainter::boxShadowShouldBeAppliedToBackground(v33, (uint64_t)&v110, 0, (WebCore::InlineIterator::BoxIterator *)v111);
  if (v112[0] != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v112[0]])(&v105, v111);
  if (!ShouldBeAppliedToBackground)
    WebCore::InlineBoxPainter::paintBoxShadow((uint64_t)this, 0, (const WebCore::LayoutRect *)v109);
  WebCore::RenderStyle::visitedDependentColor((uint64_t)LineStyle, 61, *(_DWORD *)(*((_QWORD *)this + 3) + 20), (uint64_t *)&v108);
  v37 = (WebCore::RenderObject *)*((_QWORD *)this + 5);
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 3) + 8) + 40) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v38 + 680) + 688) & 0x2000000000) != 0)
    goto LABEL_172;
LABEL_46:
  v39 = 2;
  while (1)
  {
    WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)LineStyle, (const WebCore::Color *)&v108, v103);
    v41 = v108;
    if ((v108 & 0x8000000000000) != 0)
    {
      if ((v103[0] & 0x8000000000000) == 0
        || (*(_OWORD *)v111 = *(_OWORD *)((v108 & 0xFFFFFFFFFFFFLL) + 4),
            v105 = *(_OWORD *)((v103[0] & 0xFFFFFFFFFFFFLL) + 4),
            v97 = WebCore::operator==<float,4ul>((float *)v111, (float *)&v105),
            v41 = v108,
            !v97)
        || HIBYTE(v108) != HIBYTE(v103[0])
        || BYTE6(v108) != BYTE6(v103[0]))
      {
LABEL_50:
        if ((v41 & 0x8000000000000) != 0)
        {
          v91 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            atomic_store(1u, v91);
            WTF::fastFree((WTF *)v91, v40);
          }
        }
        v108 = v103[0];
        goto LABEL_52;
      }
      v41 = v103[0];
    }
    else if (v108 != v103[0] || (v103[0] & 0x8000000000000) != 0)
    {
      goto LABEL_50;
    }
    if ((v41 & 0x8000000000000) != 0)
    {
      v98 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
      {
        v99 = __ldaxr(v98);
        v100 = v99 - 1;
      }
      while (__stlxr(v100, v98));
      if (!v100)
      {
        atomic_store(1u, v98);
        WTF::fastFree((WTF *)v98, v40);
      }
    }
LABEL_52:
    v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)LineStyle + 1) + 16) + 8);
    v111[0] = (WTF *)v112;
    v111[1] = (WTF *)8;
    *(_QWORD *)&v105 = v42;
    do
    {
      v43 = HIDWORD(v111[1]);
      if (HIDWORD(v111[1]) == LODWORD(v111[1]))
      {
        WTF::Vector<WebCore::FillLayer const*,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>((uint64_t)v111, (unint64_t)&v105);
      }
      else
      {
        *((_QWORD *)v111[0] + HIDWORD(v111[1])) = v42;
        HIDWORD(v111[1]) = v43 + 1;
      }
      v42 = *(_QWORD *)(v105 + 8);
      *(_QWORD *)&v105 = v42;
    }
    while (v42);
    v44 = v111[0];
    if (HIDWORD(v111[1]))
    {
      v45 = 8 * HIDWORD(v111[1]);
      v46 = (char *)v111[0] - 8;
      do
      {
        WebCore::InlineBoxPainter::paintFillLayer((uint64_t)this, &v108, *(_QWORD *)&v46[v45], v109, v39);
        v45 -= 8;
      }
      while (v45);
      v44 = v111[0];
    }
    if (v112 != (_DWORD *)v44 && v44 != 0)
    {
      v111[0] = 0;
      LODWORD(v111[1]) = 0;
      WTF::fastFree(v44, v40);
    }
    WebCore::InlineBoxPainter::paintBoxShadow((uint64_t)this, 1, (const WebCore::LayoutRect *)v109);
    if (*((_BYTE *)this + 49))
      goto LABEL_95;
    v48 = *((_QWORD *)this + 5);
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 88) + 24);
    if (*(float *)(v49 + 120) != 0.0 && (*(_BYTE *)(v49 + 124) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v49 + 112))
      {
        v63 = *(_QWORD *)(v49 + 104);
        if ((v63 & 0x4000000000000) != 0)
        {
          if ((v63 & 0x8000000000000) != 0)
          {
            if (*(float *)((v63 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_68;
          }
          else if (!*(_QWORD *)(v49 + 104))
          {
            goto LABEL_68;
          }
        }
      }
      if ((*(_BYTE *)(v49 + 124) & 0xF) != 1)
        goto LABEL_78;
    }
LABEL_68:
    if (*(float *)(v49 + 144) != 0.0 && (*(_BYTE *)(v49 + 148) & 0xF) != 0)
    {
      if (!*(_DWORD *)(v49 + 136))
      {
        v64 = *(_QWORD *)(v49 + 128);
        if ((v64 & 0x4000000000000) != 0)
        {
          if ((v64 & 0x8000000000000) != 0)
          {
            if (*(float *)((v64 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_70;
          }
          else if (!*(_QWORD *)(v49 + 128))
          {
            goto LABEL_70;
          }
        }
      }
      if ((*(_BYTE *)(v49 + 148) & 0xF) != 1)
        goto LABEL_78;
    }
LABEL_70:
    if (*(float *)(v49 + 168) != 0.0 && (*(_BYTE *)(v49 + 172) & 0xF) != 0)
    {
      if (*(_DWORD *)(v49 + 160) || (v65 = *(_QWORD *)(v49 + 152), (v65 & 0x4000000000000) == 0))
      {
LABEL_107:
        if ((*(_BYTE *)(v49 + 172) & 0xF) != 1)
          goto LABEL_78;
        goto LABEL_72;
      }
      if ((v65 & 0x8000000000000) != 0)
      {
        if (*(float *)((v65 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
          goto LABEL_107;
      }
      else if (*(_QWORD *)(v49 + 152))
      {
        goto LABEL_107;
      }
    }
LABEL_72:
    if (*(float *)(v49 + 192) == 0.0 || (*(_BYTE *)(v49 + 196) & 0xF) == 0)
    {
LABEL_74:
      if (*(_QWORD *)(*(_QWORD *)(v49 + 200) + 8))
        v50 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v50 = 0;
      if (!v50)
        goto LABEL_95;
      goto LABEL_78;
    }
    if (!*(_DWORD *)(v49 + 184))
    {
      v66 = *(_QWORD *)(v49 + 176);
      if ((v66 & 0x4000000000000) != 0)
      {
        if ((v66 & 0x8000000000000) != 0)
        {
          if (*(float *)((v66 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_74;
        }
        else if (!*(_QWORD *)(v49 + 176))
        {
          goto LABEL_74;
        }
      }
    }
    if ((*(_BYTE *)(v49 + 196) & 0xF) == 1)
      goto LABEL_74;
LABEL_78:
    v51 = *(_QWORD *)(v49 + 200);
    v37 = (WebCore::RenderObject *)(v49 + 200);
    v52 = *(_QWORD *)(v51 + 8);
    if (v52
      && (v62 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v52 + 208))(v52, *(float *)(*((_QWORD *)LineStyle + 3) + 184)), v48 = *((_QWORD *)this + 5), v62))
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 56))(v52, v48))
        goto LABEL_95;
      v53 = 0;
      v48 = *((_QWORD *)this + 5);
    }
    else
    {
      v53 = 1;
    }
    v54 = (unsigned int *)*((_QWORD *)this + 3);
    v107[0] = (unsigned int *)v48;
    v107[1] = v54;
    LOBYTE(v111[0]) = 0;
    v112[0] = -1;
    v38 = *((unsigned int *)this + 4);
    if ((_DWORD)v38 != -1)
    {
      ((void (*)(__int128 *, WTF **, WebCore::InlineBoxPainter *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v38])(&v105, v111, this);
      v112[0] = v38;
      *(_QWORD *)&v105 = v103;
      ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator25traversePreviousInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v38])(&v105, v111);
      LOBYTE(v105) = 0;
      v106 = -1;
      v55 = v112[0];
      if (v112[0] != -1)
      {
        ((void (*)(unint64_t *, __int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v112[0]])(v103, &v105, v111);
        v106 = v55;
        if (v112[0] != -1)
          ((void (*)(unint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v112[0]])(v103, v111);
      }
      if (!WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)&v105))
      {
        v57 = 0;
        goto LABEL_91;
      }
      LOBYTE(v111[0]) = 0;
      v112[0] = -1;
      v38 = *((unsigned int *)this + 4);
      if ((_DWORD)v38 != -1)
        break;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_172:
    if (!WebCore::Color::isWhiteColor((WebCore::Color *)&v108, v36))
      goto LABEL_46;
    if (!WebCore::RenderObject::useDarkAppearance(v37))
      goto LABEL_46;
    v88 = *(_QWORD *)(v38 + 528);
    if (!v88)
      goto LABEL_46;
    v89 = *(_QWORD *)(v88 + 8);
    if (!v89)
      goto LABEL_46;
    v90 = *(WebCore::LocalFrameView **)(v89 + 288);
    if (!v90)
      goto LABEL_46;
    ++*((_DWORD *)v90 + 2);
    if (WebCore::LocalFrameView::isTransparent(v90))
      v39 = 8;
    else
      v39 = 7;
    if (*((_DWORD *)v90 + 2) == 1)
      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v90 + 8))(v90);
    else
      --*((_DWORD *)v90 + 2);
  }
  ((void (*)(unint64_t *, WTF **, WebCore::InlineBoxPainter *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v38])(v103, v111, this);
  v112[0] = v38;
  v103[0] = (unint64_t)v113;
  ((void (*)(unint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator17InlineBoxIterator21traverseNextInlineBoxEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v38])(v103, v111);
  LOBYTE(v103[0]) = 0;
  v104 = -1;
  v56 = v112[0];
  if (v112[0] != -1)
  {
    ((void (*)(_BYTE *, unint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v112[0]])(v113, v103, v111);
    v104 = v56;
    if (v112[0] != -1)
      ((void (*)(_BYTE *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_1[v112[0]])(v113, v111);
  }
  v57 = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v103);
  if (v104 != -1)
    ((void (*)(WTF **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v104])(v111, v103);
LABEL_91:
  if (v106 != -1)
    ((void (*)(WTF **, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v106])(v111, &v105);
  if ((v53 | v57) == 1)
  {
    hasClosedLeftAndRightEdge = WebCore::InlineIterator::InlineBox::hasClosedLeftAndRightEdge(this);
    WebCore::BorderPainter::paintBorder(v107, (int *)v109, (uint64_t)LineStyle, 0, (const WebCore::LayoutSize *)(hasClosedLeftAndRightEdge != 0), hasClosedLeftAndRightEdge > 0xFFu);
    goto LABEL_95;
  }
  WebCore::InlineIterator::InlineBox::previousInlineBox(this, (uint64_t)v111);
  v67 = 0;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v111) & 1) == 0)
  {
    while (2)
    {
      v68 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)v111);
      WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v68);
      v70 = (float)((float)((float)v67 * 0.015625) + v69) * 64.0;
      if (v70 >= 2147483650.0 || v70 <= -2147483650.0)
      {
        if (v70 >= 2147483650.0)
        {
          v67 = 0x7FFFFFFF;
        }
        else
        {
          if (v70 > -2147483650.0)
            goto LABEL_138;
          v67 = 0x80000000;
        }
      }
      else
      {
LABEL_138:
        v67 = (int)v70;
      }
      WebCore::InlineIterator::InlineBoxIterator::traversePreviousInlineBox((WebCore::InlineIterator::InlineBoxIterator *)v111);
      if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v111) & 1) != 0)
        break;
      continue;
    }
  }
  if (v112[0] != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v112[0]])(&v105, v111);
  LOBYTE(v111[0]) = 0;
  v112[0] = -1;
  v72 = *((unsigned int *)this + 4);
  if ((_DWORD)v72 != -1)
  {
    ((void (*)(__int128 *, WTF **, WebCore::InlineBoxPainter *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal_0[v72])(&v105, v111, this);
    v112[0] = v72;
  }
  v73 = v67;
  if ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v111) & 1) == 0)
  {
    v73 = v67;
    do
    {
      v74 = WebCore::InlineIterator::InlineBoxIterator::operator->((uint64_t)v111);
      WebCore::InlineIterator::Box::logicalWidth((WebCore::InlineIterator::Box *)v74);
      v76 = (float)((float)((float)v73 * 0.015625) + v75) * 64.0;
      if (v76 < 2147483650.0 && v76 > -2147483650.0)
        goto LABEL_150;
      if (v76 >= 2147483650.0)
      {
        v73 = 0x7FFFFFFF;
        goto LABEL_151;
      }
      if (v76 <= -2147483650.0)
        v73 = 0x80000000;
      else
LABEL_150:
        v73 = (int)v76;
LABEL_151:
      WebCore::InlineIterator::InlineBoxIterator::traverseNextInlineBox((WebCore::InlineIterator::InlineBoxIterator *)v111);
    }
    while ((WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v111) & 1) == 0);
  }
  if (v112[0] != -1)
    ((void (*)(__int128 *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator13BoxModernPathENS7_13BoxLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v112[0]])(&v105, v111);
  if (*((_BYTE *)this + 50))
    v78 = v67;
  else
    v78 = 0;
  v79 = v110 - v78;
  if (__OFSUB__((_DWORD)v110, v78))
    v79 = (v110 >> 31) + 0x7FFFFFFF;
  if (*((_BYTE *)this + 50))
    v80 = 0;
  else
    v80 = v67;
  v81 = HIDWORD(v110) - v80;
  if (__OFSUB__(HIDWORD(v110), v80))
    v81 = (HIDWORD(v110) >> 31) + 0x7FFFFFFF;
  if (*((_BYTE *)this + 50))
    v82 = v73;
  else
    v82 = v102;
  if (!*((_BYTE *)this + 50))
    LODWORD(v26) = v73;
  v83 = WebCore::clipRectForNinePieceImageStrip((unsigned int *)this, (uint64_t *)v37, v109);
  v85 = v84;
  v86 = v101;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 96))(v101, 1);
  v87.i64[0] = v83;
  v87.i64[1] = v85;
  *(float32x4_t *)v111 = vmulq_f32(vcvtq_f32_s32(v87), (float32x4_t)vdupq_n_s32(0x3C800000u));
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v86 + 456))(v86, v111);
  v111[0] = (WTF *)__PAIR64__(v81, v79);
  v111[1] = (WTF *)__PAIR64__(v26, v82);
  WebCore::BorderPainter::paintBorder(v107, (int *)v111, (uint64_t)LineStyle, 0, (const WebCore::LayoutSize *)1, 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 104))(v86, 1);
LABEL_95:
  if ((v108 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFLL);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v59);
      WTF::fastFree((WTF *)v59, (void *)v48);
    }
  }
}

uint64_t WebCore::Document::editor(WebCore::Document *this)
{
  uint64_t result;
  WebCore::Editor *v3;
  void *v4;
  WebCore::Editor *v5;
  uint64_t v6;
  void *v7;

  result = *((_QWORD *)this + 382);
  if (!result)
  {
    v3 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v3, this);
    v5 = (WebCore::Editor *)*((_QWORD *)this + 382);
    *((_QWORD *)this + 382) = v3;
    if (v5)
    {
      WebCore::Editor::~Editor(v5, v4);
      if (*(_DWORD *)v6)
      {
        *(_QWORD *)(v6 + 496) = 0;
        *(_OWORD *)(v6 + 464) = 0u;
        *(_OWORD *)(v6 + 480) = 0u;
        *(_OWORD *)(v6 + 432) = 0u;
        *(_OWORD *)(v6 + 448) = 0u;
        *(_OWORD *)(v6 + 400) = 0u;
        *(_OWORD *)(v6 + 416) = 0u;
        *(_OWORD *)(v6 + 368) = 0u;
        *(_OWORD *)(v6 + 384) = 0u;
        *(_OWORD *)(v6 + 336) = 0u;
        *(_OWORD *)(v6 + 352) = 0u;
        *(_OWORD *)(v6 + 304) = 0u;
        *(_OWORD *)(v6 + 320) = 0u;
        *(_OWORD *)(v6 + 272) = 0u;
        *(_OWORD *)(v6 + 288) = 0u;
        *(_OWORD *)(v6 + 240) = 0u;
        *(_OWORD *)(v6 + 256) = 0u;
        *(_OWORD *)(v6 + 208) = 0u;
        *(_OWORD *)(v6 + 224) = 0u;
        *(_OWORD *)(v6 + 176) = 0u;
        *(_OWORD *)(v6 + 192) = 0u;
        *(_OWORD *)(v6 + 144) = 0u;
        *(_OWORD *)(v6 + 160) = 0u;
        *(_OWORD *)(v6 + 112) = 0u;
        *(_OWORD *)(v6 + 128) = 0u;
        *(_OWORD *)(v6 + 80) = 0u;
        *(_OWORD *)(v6 + 96) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)(v6 + 64) = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)v6 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v6, v7);
      }
    }
    return *((_QWORD *)this + 382);
  }
  return result;
}

_QWORD *WebCore::InlineIterator::BoxModernPath::visualRectIgnoringBlockDirection(_QWORD *this)
{
  if (this[1] >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*this + 8) + 60))
    __break(0xC471u);
  return this;
}

const char *WebCore::InlineDisplay::Box::Text::originalContent(WebCore::InlineDisplay::Box::Text *this)
{
  uint64_t v2;
  const char *result;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    result = *(const char **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4) | ((unint64_t)((*(_DWORD *)(v2 + 16) >> 2) & 1) << 32);
  }
  else
  {
    result = 0;
    v4 = 0x100000000;
  }
  v5 = *((unsigned int *)this + 4);
  if (v4 <= v5)
    return "";
  v6 = *((_DWORD *)this + 5);
  if ((int)v4 - (int)v5 <= v6)
  {
    if (!(_DWORD)v5)
      return result;
    v6 = v4 - v5;
  }
  v7 = v4 - v5;
  if ((v4 & 0x100000000) != 0)
  {
    if (v7 >= v6)
    {
      result += v5;
      return result;
    }
  }
  else if (v7 >= v6)
  {
    result += 2 * v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::RenderText::textNode(WebCore::RenderText *this)
{
  uint64_t result;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (result)
  {
    if ((*(_WORD *)(result + 28) & 2) == 0)
    {
      result = 105;
      __break(0xC471u);
    }
  }
  return result;
}

void WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paint(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Layout::Box *v20;
  uint64_t LineStyle;
  _QWORD *v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unint64_t v36;
  WTF *v37;
  int *v38;
  const WebCore::RenderText *v39;
  int v40;
  const WebCore::PaintInfo *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::ShadowData *v60;
  int v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WebCore::Document *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int *v70;
  _BYTE *v71;
  WTF::StringImpl *v72;
  unsigned int *v73;
  WTF::StringImpl *v74;
  unsigned int *v75;
  WTF *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  __int128 v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  WebCore::ShadowData *v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  WTF *v98;
  unint64_t v99;
  unsigned int v100;
  WTF *v101;
  char *v102;
  __int128 v103;
  _DWORD *v104;
  uint64_t v105;
  WebCore::RenderObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WebCore::EventRegionContext *v110;
  WebCore::EventRegionContext *v111;
  __int128 v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  WTF *v123;
  char *v124;
  WTF *v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  _BYTE *v131;
  _DWORD *v132;
  int v133;
  _BYTE *v134;
  _DWORD *v135;
  void *v136;
  uint64_t v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  int v142;
  int v143;
  BOOL v144;
  float v145;
  float v146;
  uint64_t v147;
  double v148;
  BOOL v149;
  unsigned int v150;
  float v151;
  unsigned int v152;
  float v153;
  double v154;
  int v156;
  double v157;
  int v159;
  double v160;
  unsigned int v161;
  double v162;
  int v164;
  double v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  _BOOL4 v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  float *v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  WTF *v191;
  WTF *v192;
  void *v193;
  WTF *v194;
  WTF::StringImpl *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  WTF *v200;
  WTF *v201;
  unint64_t v202;
  unsigned int v203;
  char *v204;
  __int128 v205;
  int v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  _QWORD *v211;
  uint64_t v212;
  char *v213;
  _QWORD *v214;
  uint64_t v215;
  char *v216;
  _QWORD *v217;
  uint64_t v218;
  char *v219;
  __int128 v220;
  _QWORD *v221;
  uint64_t v222;
  char *v223;
  char v224;
  _QWORD *v225;
  uint64_t v226;
  char *v227;
  char v228;
  _QWORD *v229;
  uint64_t v230;
  char *v231;
  char v232;
  _BYTE *v233;
  int *v234;
  uint64_t v235;
  unsigned int **v236;
  WTF::StringImpl *v237;
  WTF *v238;
  WebCore::RenderElement *v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int v253;
  unsigned int *v254;
  unsigned int v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int *v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unint64_t v268;
  unint64_t v269;
  WTF *v270;
  int v271;
  WTF *v272;
  WTF *v273;
  uint64_t v274;
  char *v275;
  char *v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  WTF::StringImpl **v280;
  WTF::StringImpl *v281;
  unint64_t v282;
  unint64_t v283;
  WTF *v284;
  WTF *v285;
  WTF *v286;
  WTF *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  WTF::StringImpl **v294;
  WTF::StringImpl *v295;
  int v296;
  WTF *v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v308;
  unsigned int v309;
  char v310;
  int v311;
  unint64_t v312;
  char *v313;
  int v314;
  uint64_t v315;
  _DWORD *v316;
  _DWORD *v317;
  WTF::StringImpl *v318;
  __int128 v319;
  uint64_t v320;
  unsigned int v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  uint64_t v324;
  WTF::StringImpl **v325;
  WTF::StringImpl *v326;
  const WebCore::MarkedText *v327;
  uint64_t v328;
  char *v329;
  const WebCore::StyledMarkedText::Style *v330;
  WTF::StringImpl *v331;
  __int128 v332;
  uint64_t v333;
  WTF::StringImpl *v334;
  unint64_t v335;
  unint64_t v336;
  unsigned int v337;
  char *v338;
  __int128 v339;
  int v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  _QWORD *v345;
  uint64_t v346;
  char *v347;
  _QWORD *v348;
  uint64_t v349;
  char *v350;
  _QWORD *v351;
  uint64_t v352;
  char *v353;
  __int128 v354;
  _QWORD *v355;
  uint64_t v356;
  char *v357;
  char v358;
  _QWORD *v359;
  uint64_t v360;
  char *v361;
  char v362;
  _QWORD *v363;
  uint64_t v364;
  char *v365;
  char v366;
  _BYTE *v367;
  char *v368;
  __int128 v369;
  int v370;
  _QWORD *v371;
  uint64_t v372;
  char *v373;
  _QWORD *v374;
  char *v375;
  _QWORD *v376;
  char *v377;
  _QWORD *v378;
  char *v379;
  __int128 v380;
  _QWORD *v381;
  char *v382;
  char v383;
  _QWORD *v384;
  char *v385;
  char v386;
  _QWORD *v387;
  char *v388;
  char v389;
  _BYTE *v390;
  WTF::StringImpl *v391;
  unsigned int v392;
  unsigned int v393;
  uint64_t v394;
  unsigned int *v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int *v398;
  unsigned int v399;
  unsigned int *v400;
  unsigned int v401;
  unsigned int *v402;
  unsigned int v403;
  unsigned int *v404;
  unsigned int v405;
  unsigned int *v406;
  unsigned int v407;
  unsigned int *v408;
  unsigned int v409;
  unsigned int *v410;
  unsigned int v411;
  unsigned int *v412;
  unsigned int v413;
  unsigned int *v414;
  unsigned int v415;
  unsigned int *v416;
  unsigned int v417;
  unsigned int *v418;
  unsigned int v419;
  unsigned int *v420;
  unsigned int v421;
  unsigned int *v422;
  unsigned int v423;
  unsigned int *v424;
  unsigned int v425;
  WebCore::Editor *v426;
  WebCore::Editor *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unsigned int v432;
  WebCore::Editor *v433;
  WebCore::Editor *v434;
  WebCore::Editor *v435;
  _DWORD *v436;
  char *v437;
  __int128 v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  WTF *v442;
  __int128 v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  uint64_t v446;
  WTF *v447;
  __int128 v448;
  unsigned int *v449;
  WTF::StringImpl *v450;
  uint64_t v451;
  uint64_t v452;
  float v453;
  float v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  int v461;
  unsigned int *v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int *v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int *v468;
  unsigned int v469;
  unsigned int v470;
  unsigned int *v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int *v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int *v477;
  unsigned int v478;
  unsigned int v479;
  unsigned int *v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int *v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int *v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int *v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int *v492;
  unsigned int v493;
  unsigned int v494;
  unsigned int *v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int *v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int *v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int *v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int *v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int *v510;
  unsigned int v511;
  unsigned int v512;
  unsigned int *v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int *v516;
  unsigned int v517;
  unsigned int v518;
  unsigned int *v519;
  unsigned int v520;
  unsigned int v521;
  unsigned int *v522;
  unsigned int v523;
  unsigned int v524;
  unsigned int *v525;
  unsigned int v526;
  unsigned int v527;
  unsigned int *v528;
  unsigned int v529;
  unsigned int v530;
  unsigned int *v531;
  unsigned int v532;
  unsigned int v533;
  unsigned int *v534;
  unsigned int v535;
  unsigned int v536;
  uint64_t v537;
  WTF::StringImpl **v538;
  uint64_t v539;
  WTF::StringImpl *v540;
  uint64_t CachedPseudoStyle;
  WTF *v542;
  WTF *v543;
  int v544;
  WTF *v545;
  WTF *v546;
  unint64_t v547;
  WTF *v548;
  __int128 v549;
  uint64_t v550;
  WTF::StringImpl *v551;
  uint64_t v552;
  WTF::StringImpl *v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  __int128 v557;
  uint64_t v558;
  WTF::StringImpl *v559;
  uint64_t v560;
  uint64_t v561;
  char v563;
  char v564;
  WTF::StringImpl *v565;
  WTF::StringImpl *v566;
  unsigned int v567;
  WTF::StringImpl *v568;
  uint64_t j;
  uint64_t v570;
  WTF::StringImpl *v571;
  uint64_t v572;
  WTF *v573;
  WTF *v574;
  int v575;
  WTF *v576;
  WTF *v577;
  WTF *v578;
  WTF *v579;
  WTF *v580;
  __int128 v581;
  uint64_t v582;
  WTF::StringImpl *v583;
  uint64_t v584;
  WTF::StringImpl *v585;
  char *v586;
  char *v587;
  __int128 v588;
  uint64_t v589;
  WTF::StringImpl *v590;
  uint64_t v591;
  uint64_t v592;
  char v594;
  char v595;
  WTF::StringImpl *v596;
  WTF::StringImpl *v597;
  unsigned int v598;
  WTF::StringImpl *v599;
  uint64_t v600;
  WTF *v601;
  void *v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  float v607;
  float v608;
  float v609;
  int v610;
  int v611;
  int v613;
  float v614;
  int v615;
  int v616;
  int v618;
  float v619;
  float v620;
  int v621;
  unsigned int v622;
  float v624;
  unsigned int v626;
  int v627;
  int v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  __int128 v636;
  uint64_t v637;
  WTF::StringImpl *v638;
  uint64_t v639;
  __int128 v640;
  uint64_t v641;
  WTF::StringImpl *v642;
  uint64_t v643;
  int v644;
  int v645;
  unsigned int v646;
  unint64_t v647;
  unint64_t v648;
  int v649;
  unsigned int v650;
  int v651;
  int v652;
  int v653;
  int v655;
  int v656;
  unsigned int v657;
  int v658;
  unsigned int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unsigned int v672;
  int v673;
  int v674;
  int v675;
  int v676;
  BOOL v677;
  int v678;
  int v679;
  int v680;
  int v681;
  _BOOL4 v682;
  int v683;
  int v684;
  _BOOL4 v685;
  int v686;
  int v687;
  signed int v688;
  signed int v689;
  int v690;
  int v691;
  signed int v692;
  signed int v693;
  void *v694;
  uint64_t v695;
  WTF *v696;
  WTF *v697;
  int v698;
  int v699;
  WTF *v700;
  int v701;
  int v702;
  void *v703;
  uint64_t v704;
  WTF *v705;
  WTF *v706;
  float v707;
  void *v708;
  uint64_t v709;
  void *v710;
  uint64_t v711;
  void *v712;
  uint64_t v713;
  unsigned int *v714;
  unsigned int v715;
  _DWORD *v716;
  uint64_t v717;
  WTF::StringImpl *v718;
  WTF::StringImpl *v719;
  uint64_t v720;
  void *v721;
  uint64_t v722;
  WTF::StringImpl *v723;
  WTF::StringImpl *v724;
  uint64_t v725;
  void *v726;
  int v727;
  WTF *v728;
  uint64_t v729;
  int v730;
  unsigned int v731;
  unsigned int v732;
  unsigned int v733;
  int v734;
  unsigned int v735;
  unsigned int v736;
  unsigned int v737;
  char v738;
  int v739;
  unint64_t v740;
  char *v741;
  int v742;
  uint64_t v743;
  _DWORD *v744;
  _DWORD *v745;
  WTF::StringImpl *v746;
  uint64_t v747;
  unsigned int *v748;
  unsigned int v749;
  unsigned int v750;
  uint64_t v751;
  uint64_t *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  WTF *v763;
  WTF *v764;
  int v765;
  _QWORD *v766;
  uint64_t v767;
  int v768;
  _QWORD *v769;
  uint64_t v770;
  uint64_t v771;
  WTF *v772;
  WTF *v773;
  WTF::StringImpl *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unsigned int v778;
  uint64_t v779;
  uint64_t v780;
  unsigned int v781;
  int *v782;
  unsigned int v783;
  uint64_t v784;
  int v785;
  int v786;
  uint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unint64_t v790;
  unsigned int v791;
  uint64_t v792;
  int v793;
  uint64_t v794;
  char v795;
  _DWORD *v796;
  WTF::StringImpl *v797;
  uint64_t v798;
  WebCore::StyledMarkedText::Style *v799;
  uint64_t v800;
  uint64_t v801;
  float v802;
  float v803;
  void *v804;
  const WebCore::MarkedText *v805;
  WTF *v806;
  uint64_t v807;
  uint64_t v808;
  WTF::StringImpl **v809;
  WTF::StringImpl *v810;
  uint64_t v811;
  WTF::StringImpl **v812;
  WTF::StringImpl *v813;
  unsigned int v814;
  void *v815;
  char *v816;
  __int128 v817;
  uint64_t v818;
  WebCore::Editor *v819;
  WebCore::Editor *v820;
  WebCore::Editor *v821;
  int v822;
  char *v823;
  __int128 v824;
  uint64_t v825;
  int v826;
  int v827;
  BOOL v828;
  int v829;
  _BOOL4 v830;
  int v831;
  int v832;
  _BOOL4 v833;
  int v834;
  int v835;
  _BOOL4 v836;
  int v837;
  int v838;
  int v839;
  int v840;
  unint64_t v841;
  uint64_t v842;
  unint64_t v843;
  unsigned int v844;
  uint64_t v845;
  unsigned int v846;
  unsigned int v847;
  int v848;
  unsigned int v849;
  unsigned int v850;
  _BYTE *v851;
  _DWORD *v852;
  uint64_t v853;
  int v854;
  _BYTE *v855;
  _DWORD *v856;
  uint64_t v857;
  char v858;
  void *v859;
  unint64_t v860;
  WTF *v861;
  uint64_t v863;
  unsigned int v864;
  unint64_t v865;
  uint64_t v866;
  char v867;
  int v868;
  int v869;
  BOOL v870;
  float v871;
  float v872;
  uint64_t v873;
  void *v874;
  double v875;
  float v877;
  unsigned int v878;
  int v879;
  double v881;
  int v883;
  double v884;
  int v886;
  double v887;
  unsigned int v889;
  double v890;
  int v892;
  double v893;
  int v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  char v901;
  int v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  double v906;
  double v907;
  double v908;
  double v909;
  double v910;
  __n128 v911;
  float v912;
  double v913;
  double v914;
  double v915;
  double v916;
  double v917;
  __n128 v918;
  WTF::StringImpl *v919;
  float v920;
  _QWORD *v921;
  double v922;
  int v924;
  float v925;
  int v927;
  uint64_t v928;
  int v929;
  _BOOL4 v930;
  int v931;
  int v932;
  int v933;
  int v934;
  uint64_t v935;
  float v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  int v940;
  double v941;
  double v942;
  double v943;
  double v944;
  int v945;
  int v946;
  double v947;
  double v948;
  double v949;
  double v950;
  int v951;
  int v952;
  double v953;
  double v954;
  double v955;
  double v956;
  float v957;
  float v958;
  float v959;
  float v960;
  float v961;
  float v962;
  float v963;
  __int128 v964;
  unsigned int v965;
  BOOL v966;
  unsigned int v967;
  unsigned int v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int *v972;
  _DWORD *v973;
  int v974;
  int v975;
  uint64_t v976;
  WTF *v977;
  void *v978;
  int *v979;
  int *v980;
  int v981;
  unsigned int v982;
  int v983;
  int v984;
  uint64_t v985;
  uint64_t v986;
  BOOL v987;
  int *v988;
  _DWORD *v989;
  int v990;
  unsigned int v991;
  int v992;
  WTF *v993;
  void *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  double v1003;
  int v1005;
  unsigned int v1006;
  unsigned int v1007;
  unsigned int *v1008;
  unsigned int v1009;
  unsigned int *v1010;
  unsigned int *v1011;
  unsigned int v1012;
  unsigned int *v1013;
  unsigned int v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  unsigned int v1020;
  uint64_t v1021;
  int v1022;
  float v1023;
  unsigned int *v1024;
  unsigned int v1025;
  unsigned int v1026;
  unsigned int *v1027;
  unsigned int v1028;
  unsigned int v1029;
  unsigned int *v1030;
  unsigned int v1031;
  unsigned int v1032;
  unsigned int *v1033;
  unsigned int v1034;
  unsigned int v1035;
  unint64_t v1036;
  WTF *v1037;
  __n128 v1038;
  char *v1039;
  int v1040;
  WTF *v1041;
  WTF *v1042;
  char *v1043;
  unint64_t v1044;
  unint64_t v1045;
  unsigned int v1047;
  unint64_t v1048;
  unint64_t v1049;
  unsigned int v1050;
  WTF *v1051;
  char *v1052;
  __int128 v1053;
  _DWORD *v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  char *v1059;
  uint64_t v1060;
  char *v1061;
  uint64_t v1062;
  char *v1063;
  uint64_t v1064;
  char *v1065;
  char v1066;
  _BYTE *v1067;
  char *v1068;
  __int128 v1069;
  _DWORD *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  char *v1075;
  uint64_t v1076;
  char *v1077;
  uint64_t v1078;
  char *v1079;
  uint64_t v1080;
  char *v1081;
  char v1082;
  _BYTE *v1083;
  unsigned int *v1084;
  unsigned int v1085;
  unsigned int *v1086;
  unsigned int v1087;
  unsigned int *v1088;
  unsigned int v1089;
  unsigned int *v1090;
  unsigned int v1091;
  unsigned int *v1092;
  unsigned int v1093;
  unsigned int *v1094;
  unsigned int v1095;
  unsigned int *v1096;
  unsigned int v1097;
  unsigned int *v1098;
  unsigned int v1099;
  unsigned int *v1100;
  unsigned int v1101;
  unsigned int *v1102;
  unsigned int v1103;
  unsigned int *v1104;
  unsigned int v1105;
  unsigned int *v1106;
  unsigned int v1107;
  unsigned int *v1108;
  unsigned int v1109;
  unsigned int *v1110;
  unsigned int v1111;
  unsigned int v1112;
  WTF *v1113;
  void *v1114;
  uint64_t v1115;
  unsigned int v1116;
  unint64_t v1117;
  uint64_t v1118;
  char v1119;
  int v1120;
  int v1121;
  BOOL v1122;
  float v1123;
  float v1124;
  uint64_t v1125;
  uint64_t v1126;
  const WebCore::RenderBlockFlow *v1127;
  double v1128;
  float v1130;
  unsigned int v1131;
  int v1132;
  double v1134;
  int v1136;
  double v1137;
  int v1139;
  double v1140;
  unsigned int v1142;
  double v1143;
  int v1145;
  double v1146;
  int v1147;
  unint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  WebCore::Layout::Box *v1151;
  _WORD *v1152;
  uint64_t v1153;
  char v1154;
  int v1155;
  uint64_t v1156;
  WebCore::FontCascadeFonts *v1157;
  int v1158;
  uint64_t v1159;
  double v1160;
  double v1161;
  double v1162;
  double v1163;
  double v1164;
  __n128 v1165;
  float v1166;
  double v1167;
  double v1168;
  double v1169;
  double v1170;
  double v1171;
  __n128 v1172;
  WTF::StringImpl *v1173;
  float v1174;
  double v1175;
  int v1176;
  float v1177;
  int v1178;
  uint64_t v1179;
  int v1180;
  _BOOL4 v1181;
  int v1182;
  int v1183;
  int v1184;
  int v1185;
  uint64_t v1186;
  float v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  double v1192;
  double v1193;
  double v1194;
  double v1195;
  int v1196;
  int v1197;
  double v1198;
  double v1199;
  double v1200;
  double v1201;
  int v1202;
  int v1203;
  double v1204;
  double v1205;
  double v1206;
  double v1207;
  float v1208;
  float v1209;
  float v1210;
  float v1211;
  float v1212;
  float v1213;
  float v1214;
  unsigned int v1215;
  unsigned int v1216;
  uint64_t v1217;
  uint64_t v1218;
  unint64_t v1219;
  int *v1220;
  _DWORD *v1221;
  int v1222;
  int v1223;
  uint64_t v1224;
  uint64_t v1225;
  WTF *v1226;
  WTF *v1228;
  uint64_t v1229;
  uint64_t v1230;
  WTF *v1231;
  void *v1232;
  WTF *v1233;
  void *v1234;
  int *v1235;
  int *v1236;
  int v1237;
  unsigned int v1238;
  int v1239;
  int v1240;
  uint64_t v1241;
  uint64_t v1242;
  BOOL v1243;
  int *v1244;
  _DWORD *v1245;
  int v1246;
  unsigned int v1247;
  int v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  int v1255;
  int v1256;
  double v1257;
  int v1259;
  char *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  WTF::StringImpl *v1269;
  WTF *v1270;
  WTF *v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  WTF::StringImpl *v1280;
  WTF *v1281;
  unsigned int *v1282;
  unsigned int v1283;
  WTF *v1284;
  unsigned int *v1285;
  unsigned int v1286;
  unsigned int *v1287;
  unsigned int v1288;
  WTF *v1289;
  uint64_t v1290;
  WTF::StringImpl **v1291;
  WTF::StringImpl *v1292;
  unsigned int v1293;
  __n128 v1294;
  uint64_t v1295;
  float v1296;
  unsigned int *v1297;
  unsigned int v1298;
  unsigned int v1299;
  unsigned int *v1300;
  unsigned int v1301;
  unsigned int v1302;
  unsigned int *v1303;
  unsigned int v1304;
  unsigned int v1305;
  unsigned int *v1306;
  unsigned int v1307;
  unsigned int v1308;
  unsigned int *v1309;
  unsigned int v1310;
  unsigned int v1311;
  unsigned int *v1312;
  unsigned int v1313;
  unsigned int v1314;
  unsigned int *v1315;
  unsigned int v1316;
  unsigned int v1317;
  unsigned int *v1318;
  unsigned int v1319;
  unsigned int v1320;
  unsigned int *v1321;
  unsigned int v1322;
  unsigned int v1323;
  unsigned int *v1324;
  unsigned int v1325;
  unsigned int v1326;
  unsigned int *v1327;
  unsigned int v1328;
  unsigned int v1329;
  unsigned int *v1330;
  unsigned int v1331;
  unsigned int v1332;
  unsigned int *v1333;
  unsigned int v1334;
  unsigned int v1335;
  unsigned int *v1336;
  unsigned int v1337;
  unsigned int v1338;
  unsigned int *v1339;
  unsigned int v1340;
  unsigned int v1341;
  unsigned int *v1342;
  unsigned int v1343;
  unsigned int v1344;
  unsigned int *v1345;
  unsigned int v1346;
  unsigned int v1347;
  unsigned int *v1348;
  unsigned int v1349;
  unsigned int v1350;
  unsigned int *v1351;
  unsigned int v1352;
  unsigned int v1353;
  unsigned int *v1354;
  unsigned int v1355;
  unsigned int v1356;
  uint64_t v1357;
  _BOOL4 v1358;
  _QWORD *v1359;
  _BOOL4 v1360;
  uint64_t v1361;
  WebCore::Color *v1362;
  _BYTE *v1363;
  WebCore::Color *v1364;
  int v1365;
  WebCore::TextRun *v1366;
  char *v1367;
  unsigned int *v1368;
  _BYTE *v1369;
  WTF *v1370;
  WebCore::StyledMarkedText::Style *v1371;
  WebCore::StyledMarkedText::Style *v1372;
  uint64_t v1373;
  WTF *v1374;
  uint64_t v1375;
  WTF *v1376;
  uint64_t v1377;
  WTF *v1378;
  uint64_t v1379;
  WTF *v1380[2];
  uint64_t v1381;
  uint64_t v1382;
  __int128 v1383;
  uint64_t v1384;
  char v1385;
  uint64_t v1386;
  char v1387;
  uint64_t v1388;
  char v1389;
  char v1390;
  unsigned int v1391;
  char v1392;
  unsigned int v1393;
  char v1394;
  unsigned int v1395;
  char v1396;
  unsigned int v1397;
  char v1398;
  uint64_t v1399;
  int v1400;
  unsigned int *v1401;
  char v1402;
  int v1403;
  WTF *v1404[2];
  uint64_t v1405;
  WTF *v1406[2];
  _BYTE v1407[20];
  int v1408;
  WTF::StringImpl *v1409;
  int v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  __int128 v1415;
  uint64_t v1416;
  char v1417;
  uint64_t v1418;
  char v1419;
  uint64_t v1420;
  char v1421;
  char v1422;
  unsigned int v1423;
  char v1424;
  unsigned int v1425;
  char v1426;
  unsigned int v1427;
  char v1428;
  unsigned int v1429;
  char v1430;
  uint64_t v1431;
  int v1432;
  WTF *v1433;
  unsigned __int8 v1434;
  int v1435;
  _BYTE v1436[32];
  _BYTE v1437[56];
  uint64_t v1438;
  char v1439;
  uint64_t v1440;
  char v1441;
  uint64_t v1442;
  char v1443;
  char v1444;
  unsigned int v1445;
  char v1446;
  unsigned int v1447;
  char v1448;
  unsigned int v1449;
  char v1450;
  unsigned int v1451;
  char v1452;
  uint64_t v1453;
  int v1454;
  unsigned int *v1455;
  char v1456;
  int v1457;
  float v1458;
  float v1459;
  uint64_t v1460;

  v12 = MEMORY[0x1E0C80A78](a1, a2);
  i = v12;
  v1460 = *MEMORY[0x1E0C80C00];
  v15 = *(_QWORD *)(v12 + 96);
  v16 = *(unsigned __int16 *)(v15 + 16);
  if (v16 == 4096)
  {
    v106 = *(WebCore::RenderObject **)(v12 + 16);
    v107 = *(_QWORD *)(*((_QWORD *)v106 + 4) + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v107 + 104) + 239) & 4) == 0 && (*(_BYTE *)(v107 + 120) & 0x30) == 0)
    {
      v108 = *(_QWORD *)(v107 + 32);
      if (!v108 || (v109 = *(_QWORD *)(v108 + 8)) == 0 || (*(_BYTE *)(*(_QWORD *)(v109 + 104) + 239) & 0x18) == 0)
      {
        v110 = *(WebCore::EventRegionContext **)(v15 + 72);
        if (v110)
        {
          if ((*(unsigned int (**)(WebCore::EventRegionContext *))(*(_QWORD *)v110 + 16))(v110))
            v111 = v110;
          else
            v111 = 0;
          v106 = *(WebCore::RenderObject **)(i + 16);
        }
        else
        {
          v111 = 0;
        }
        *(_OWORD *)&v1436[16] = 0u;
        *(_OWORD *)v1437 = 0u;
        *(_OWORD *)v1436 = *(_OWORD *)(i + 136);
        WebCore::EventRegionContext::unite(v111, (const WebCore::FloatRoundedRect *)v1436, v106, *(const WebCore::RenderStyle **)(i + 32), 0);
      }
    }
  }
  else
  {
    v1373 = v12;
    if (v16 != 0x2000)
    {
      if (v16 == 128 && !*(_BYTE *)(v12 + 155))
        return;
      v17 = *(_QWORD *)(v12 + 8);
      v18 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      if (v17 >= *(unsigned int *)(v18 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x19424A1F8);
      }
      v19 = *(_QWORD *)(v18 + 48) + 80 * v17;
      v20 = *(WebCore::Layout::Box **)v19;
      if (*(_DWORD *)(v19 + 40))
        LineStyle = (uint64_t)v20 + 16;
      else
        LineStyle = WebCore::Layout::Box::firstLineStyle(v20);
      if (((*(_DWORD *)(LineStyle + 44) >> 13) & 6u) - 2 <= 3)
      {
        if (*(_BYTE *)(i + 153))
        {
          v1365 = 0;
          i = v1373;
        }
        else
        {
          i = v1373;
          v452 = *(_QWORD *)(*(_QWORD *)(v1373 + 96) + 80);
          v453 = *(float *)(v1373 + 136);
          v454 = *(float *)(v1373 + 140) + *(float *)(v1373 + 148);
          *(_OWORD *)v1436 = xmmword_1968A14C0;
          *(_OWORD *)&v1436[16] = xmmword_1969F8310;
          *(double *)v1437 = (float)(v453 + v454);
          *(double *)&v1437[8] = (float)(v454 - v453);
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v452 + 656))(v452, v1436);
          v1365 = 1;
        }
      }
      else
      {
        v1365 = 0;
      }
      if (*(_WORD *)(*(_QWORD *)(i + 96) + 16) != 8)
        goto LABEL_1029;
      if (*(_BYTE *)(i + 154))
        goto LABEL_885;
      if (!*(_BYTE *)(i + 156) || *(_BYTE *)(i + 157))
      {
        v22 = *(_QWORD **)(i + 24);
        v23 = (int *)v22[187];
        if (v23)
        {
          v24 = *v23;
          v25 = *v23 + 1;
          *v23 = v25;
          v26 = *((_QWORD *)v23 + 1);
          if (v26 && *(_DWORD *)(v26 - 12))
          {
            if (v25)
            {
              *v23 = v24;
              goto LABEL_18;
            }
LABEL_317:
            __break(0xC471u);
            JUMPOUT(0x194248780);
          }
          if (!v25)
            goto LABEL_317;
          *v23 = v24;
        }
        v63 = v22[308];
        if (!v63 || (v430 = *(_QWORD *)(v63 + 8)) == 0 || !*(_DWORD *)(v430 - 12))
        {
          v64 = v22[309];
          if (!v64 || (v431 = *(_QWORD *)(v64 + 8)) == 0 || !*(_DWORD *)(v431 - 12))
          {
            v65 = v22[310];
            if (!v65)
              goto LABEL_885;
            v66 = *(_QWORD *)(v65 + 8);
            if (!v66 || !*(_DWORD *)(v66 - 12))
              goto LABEL_885;
          }
        }
LABEL_18:
        v1378 = 0;
        v1379 = 0;
        v4 = *(_QWORD *)(i + 16);
        v27 = (char *)(i + 104);
        if ((*(_BYTE *)(v4 + 45) & 1) != 0)
          goto LABEL_306;
        v13 = *(_BYTE **)(*(_QWORD *)(v4 + 24) + 8);
        if (!v13)
          goto LABEL_306;
        if ((*((_WORD *)v13 + 14) & 2) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194248B08);
        }
        v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) + 1496);
        if (!v28)
        {
LABEL_306:
          v30 = 0;
          v29 = 0;
          v31 = 0;
          v1380[0] = 0;
          v1380[1] = 0;
          goto LABEL_28;
        }
        ++*(_DWORD *)v28;
        WebCore::DocumentMarkerController::markersFor(v28, (uint64_t)v13, 229375, (uint64_t)v1407);
        v1380[0] = 0;
        v1380[1] = 0;
        if (!*(_DWORD *)&v1407[12])
          goto LABEL_23;
        if (*(_DWORD *)&v1407[12] >= 0x6666667u)
        {
          __break(0xC471u);
          JUMPOUT(0x19424A5CCLL);
        }
        v296 = 40 * *(_DWORD *)&v1407[12];
        v297 = (WTF *)WTF::fastMalloc((WTF *)(40 * *(unsigned int *)&v1407[12]));
        LODWORD(v1380[1]) = (v296 & 0xFFFFFFF8) / 0x28;
        v1380[0] = v297;
        v2 = *(_QWORD *)v1407;
        if (!*(_DWORD *)&v1407[12])
          goto LABEL_24;
        v1371 = (WebCore::StyledMarkedText::Style *)v1437;
        v7 = 8 * *(unsigned int *)&v1407[12];
        v95 = 16;
        LODWORD(v6) = 65558;
        v5 = 40;
        while (1)
        {
          v298 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 8) + 8);
          if ((v298 - 1) < 2)
          {
            if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8) + 40) + 8)
                                                                                        + 528)
                                                                            + 8)
                                                                + 24)
                                                    + 8)
                                        + 112)
                            + 680) & 0x4000) == 0)
              goto LABEL_507;
          }
          else
          {
            if (v298 != 4 && v298 != 1024)
              goto LABEL_507;
            v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 528)
                                       + 8)
                           + 296);
            v299 = *(_QWORD *)(v3 + 3056);
            if (!v299)
            {
              v433 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
              v434 = WebCore::Editor::Editor(v433, (WebCore::Document *)v3);
              v435 = *(WebCore::Editor **)(v3 + 3056);
              *(_QWORD *)(v3 + 3056) = v434;
              v1370 = v435;
              if (v435)
              {
                WebCore::Editor::~Editor(v435, v13);
                if (*v436)
                {
                  *((_QWORD *)v1370 + 62) = 0;
                  *((_OWORD *)v1370 + 29) = 0u;
                  *((_OWORD *)v1370 + 30) = 0u;
                  *((_OWORD *)v1370 + 27) = 0u;
                  *((_OWORD *)v1370 + 28) = 0u;
                  *((_OWORD *)v1370 + 25) = 0u;
                  *((_OWORD *)v1370 + 26) = 0u;
                  *((_OWORD *)v1370 + 23) = 0u;
                  *((_OWORD *)v1370 + 24) = 0u;
                  *((_OWORD *)v1370 + 21) = 0u;
                  *((_OWORD *)v1370 + 22) = 0u;
                  *((_OWORD *)v1370 + 19) = 0u;
                  *((_OWORD *)v1370 + 20) = 0u;
                  *((_OWORD *)v1370 + 17) = 0u;
                  *((_OWORD *)v1370 + 18) = 0u;
                  *((_OWORD *)v1370 + 15) = 0u;
                  *((_OWORD *)v1370 + 16) = 0u;
                  *((_OWORD *)v1370 + 13) = 0u;
                  *((_OWORD *)v1370 + 14) = 0u;
                  *((_OWORD *)v1370 + 11) = 0u;
                  *((_OWORD *)v1370 + 12) = 0u;
                  *((_OWORD *)v1370 + 9) = 0u;
                  *((_OWORD *)v1370 + 10) = 0u;
                  *((_OWORD *)v1370 + 7) = 0u;
                  *((_OWORD *)v1370 + 8) = 0u;
                  *((_OWORD *)v1370 + 5) = 0u;
                  *((_OWORD *)v1370 + 6) = 0u;
                  *((_OWORD *)v1370 + 3) = 0u;
                  *((_OWORD *)v1370 + 4) = 0u;
                  *((_OWORD *)v1370 + 1) = 0u;
                  *((_OWORD *)v1370 + 2) = 0u;
                  *(_OWORD *)v1370 = 0u;
                }
                else
                {
                  WTF::fastFree(v1370, v13);
                }
              }
              v299 = *(_QWORD *)(v3 + 3056);
            }
            if (!*(_BYTE *)(v299 + 304))
              goto LABEL_507;
          }
          if (!*(_QWORD *)v2)
            break;
          v300 = *(_QWORD *)(*(_QWORD *)v2 + 8);
          v301 = *(_DWORD *)(v300 + 16);
          v302 = *(_DWORD *)v27;
          if (v301 > *(_DWORD *)v27)
          {
            v303 = *(_DWORD *)(v300 + 12);
            v304 = *(_DWORD *)(v1373 + 108);
            v305 = v304 + v302;
            if (v303 >= v304 + v302)
              goto LABEL_620;
            v306 = *(_DWORD *)(v300 + 8);
            if (v306 > 511)
            {
              if (v306 != 512 && v306 != 2048)
              {
                if (v306 != 0x10000)
                  goto LABEL_507;
                if (*(_DWORD *)(v300 + 96) != 5)
                  goto LABEL_2584;
                if (*(_BYTE *)(v300 + 80))
                  goto LABEL_507;
              }
LABEL_490:
              if (v305 < v302)
                goto LABEL_1864;
              v987 = v303 >= v302;
              v308 = v303 - v302;
              if (!v987)
                v308 = 0;
              if (*(_BYTE *)(v1373 + 124))
              {
                v432 = *(_DWORD *)(v1373 + 120);
                if (v432)
                {
                  if (v432 < v308)
                    v308 = *(_DWORD *)(v1373 + 120);
                  if (v305 < v301)
                    v301 = v304 + v302;
                  v309 = v301 - v302;
                  goto LABEL_697;
                }
              }
              if (v308 == v304)
                v308 = *(_DWORD *)(v1373 + 112) + v304;
              if (v305 < v301)
                v301 = v304 + v302;
              v309 = v301 - v302;
              if (*(_BYTE *)(v1373 + 124) && (v432 = *(_DWORD *)(v1373 + 120)) != 0)
              {
LABEL_697:
                if (v432 < v309)
                  v309 = v432;
              }
              else if (v309 == v304)
              {
                v309 = *(_DWORD *)(v1373 + 112) + v304;
              }
              if (v306 <= 15)
              {
                switch(v306)
                {
                  case 1:
                    v310 = 4;
                    break;
                  case 2:
                    v310 = 1;
                    break;
                  case 4:
                    v310 = 5;
                    break;
                  default:
                    goto LABEL_524;
                }
              }
              else
              {
                if (v306 > 2047)
                {
                  if (v306 == 2048)
                    v310 = 10;
                  else
                    v310 = 3;
                  goto LABEL_528;
                }
                if (v306 == 16)
                {
                  v310 = 2;
                }
                else
                {
                  if (v306 == 512)
                  {
                    v310 = 6;
                    goto LABEL_528;
                  }
LABEL_524:
                  v310 = 0;
                }
              }
LABEL_528:
              *(_DWORD *)v1436 = 0;
              *(_DWORD *)&v1436[4] = v308;
              *(_DWORD *)&v1436[8] = v309;
              v1436[12] = v310;
              *(_QWORD *)&v1436[16] = v300;
              *(_QWORD *)&v1436[24] = 0;
              *(_DWORD *)v1437 = 0;
              v311 = HIDWORD(v1380[1]);
              if (HIDWORD(v1380[1]) == LODWORD(v1380[1]))
              {
                v312 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1380, HIDWORD(v1380[1]) + 1, (unint64_t)v1436);
                v311 = HIDWORD(v1380[1]);
                v313 = (char *)v1380[0] + 40 * HIDWORD(v1380[1]);
                *(_DWORD *)v313 = 0;
                v314 = *(_DWORD *)(v312 + 20);
                *(_OWORD *)(v313 + 4) = *(_OWORD *)(v312 + 4);
                *((_DWORD *)v313 + 5) = v314;
                v315 = *(_QWORD *)(v312 + 24);
                *(_QWORD *)(v312 + 24) = 0;
                *((_QWORD *)v313 + 3) = v315;
                v316 = v313 + 32;
                v317 = (_DWORD *)(v312 + 32);
              }
              else
              {
                v437 = (char *)v1380[0] + 40 * HIDWORD(v1380[1]);
                *(_DWORD *)v437 = 0;
                v438 = *(_OWORD *)&v1436[4];
                *((_DWORD *)v437 + 5) = *(_DWORD *)&v1436[20];
                *(_OWORD *)(v437 + 4) = v438;
                v439 = *(_QWORD *)&v1436[24];
                *(_QWORD *)&v1436[24] = 0;
                *((_QWORD *)v437 + 3) = v439;
                v316 = v437 + 32;
                v317 = v1437;
              }
              *v316 = *v317;
              HIDWORD(v1380[1]) = v311 + 1;
              v318 = *(WTF::StringImpl **)&v1436[24];
              *(_QWORD *)&v1436[24] = 0;
              if (v318)
              {
                if (*(_DWORD *)v318 == 2)
                  WTF::StringImpl::destroy(v318, (WTF::StringImpl *)v13);
                else
                  *(_DWORD *)v318 -= 2;
              }
              goto LABEL_507;
            }
            if (v306 <= 0x10 && ((1 << v306) & 0x10016) != 0)
              goto LABEL_490;
          }
LABEL_507:
          v2 += 8;
          v7 -= 8;
          if (!v7)
            goto LABEL_620;
        }
        if (MEMORY[0x10] <= *(_DWORD *)v27)
          goto LABEL_507;
LABEL_620:
        v2 = *(_QWORD *)v1407;
        if (*(_DWORD *)&v1407[12])
        {
          v394 = *(_QWORD *)v1407 + 8 * *(unsigned int *)&v1407[12];
          do
          {
            v395 = *(unsigned int **)v2;
            *(_QWORD *)v2 = 0;
            if (v395)
            {
              do
              {
                v396 = __ldaxr(v395);
                v397 = v396 - 1;
              }
              while (__stlxr(v397, v395));
              if (!v397)
              {
                atomic_store(1u, v395);
                WTF::fastFree((WTF *)v395, v13);
              }
            }
            v2 += 8;
          }
          while (v2 != v394);
LABEL_23:
          v2 = *(_QWORD *)v1407;
        }
LABEL_24:
        if (v2)
        {
          *(_QWORD *)v1407 = 0;
          *(_DWORD *)&v1407[8] = 0;
          WTF::fastFree((WTF *)v2, v13);
        }
        if (!*(_DWORD *)v28)
        {
          __break(0xC471u);
          JUMPOUT(0x194248B28);
        }
        --*(_DWORD *)v28;
        v29 = HIDWORD(v1380[1]);
        v30 = v1379;
        v31 = HIDWORD(v1379);
LABEL_28:
        v32 = v31 + (unint64_t)v29;
        if (v32 > v30)
        {
          v268 = v30 + ((unint64_t)v30 >> 2);
          if (v268 >= 0x10)
            v269 = v268 + 1;
          else
            v269 = 16;
          if (v269 <= v32)
            v269 = v32;
          if (v269 >= 0x6666667)
          {
            __break(0xC471u);
            JUMPOUT(0x19424A580);
          }
          v270 = v1378;
          v271 = 40 * v269;
          v272 = (WTF *)WTF::fastMalloc((WTF *)(40 * v269));
          v2 = (uint64_t)v272;
          v30 = (v271 & 0xFFFFFFF8) / 0x28;
          LODWORD(v1379) = v30;
          v1378 = v272;
          if (v31)
          {
            v440 = 40 * v31;
            v441 = (char *)v270 + 24;
            v442 = v272;
            do
            {
              *(_DWORD *)v442 = 0;
              v443 = *(_OWORD *)(v441 - 20);
              *((_DWORD *)v442 + 5) = *((_DWORD *)v441 - 1);
              *(_OWORD *)((char *)v442 + 4) = v443;
              v444 = *(WTF::StringImpl **)v441;
              *(_QWORD *)v441 = 0;
              *((_QWORD *)v442 + 3) = v444;
              *((_DWORD *)v442 + 8) = *((_DWORD *)v441 + 2);
              v445 = *(WTF::StringImpl **)v441;
              *(_QWORD *)v441 = 0;
              if (v445)
              {
                if (*(_DWORD *)v445 == 2)
                  WTF::StringImpl::destroy(v445, (WTF::StringImpl *)v13);
                else
                  *(_DWORD *)v445 -= 2;
              }
              v441 += 40;
              v442 = (WTF *)((char *)v442 + 40);
              v440 -= 40;
            }
            while (v440);
          }
          if (v270)
          {
            if ((WTF *)v2 == v270)
            {
              v30 = 0;
              v1378 = 0;
              LODWORD(v1379) = 0;
            }
            WTF::fastFree(v270, v13);
          }
          v33 = HIDWORD(v1380[1]);
          v29 = HIDWORD(v1380[1]);
        }
        else
        {
          v33 = v29;
        }
        v34 = v1380[0];
        if (v29)
        {
          v273 = v1378;
          v274 = 40 * v33;
          v275 = (char *)v1380[0] + 24;
          do
          {
            v276 = (char *)v273 + 40 * v31;
            *(_DWORD *)v276 = 0;
            v277 = *(_OWORD *)(v275 - 20);
            *((_DWORD *)v276 + 5) = *((_DWORD *)v275 - 1);
            *(_OWORD *)(v276 + 4) = v277;
            v278 = *(_QWORD *)v275;
            *(_QWORD *)v275 = 0;
            *((_QWORD *)v276 + 3) = v278;
            *((_DWORD *)v276 + 8) = *((_DWORD *)v275 + 2);
            ++v31;
            v275 += 40;
            v274 -= 40;
          }
          while (v274);
          HIDWORD(v1379) = v31;
          v279 = 40 * v29;
          v280 = (WTF::StringImpl **)((char *)v34 + 24);
          do
          {
            v281 = *v280;
            *v280 = 0;
            if (v281)
            {
              if (*(_DWORD *)v281 == 2)
                WTF::StringImpl::destroy(v281, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v281 -= 2;
            }
            v280 += 5;
            v279 -= 40;
          }
          while (v279);
          v34 = v1380[0];
        }
        if (v34)
        {
          v1380[0] = 0;
          LODWORD(v1380[1]) = 0;
          WTF::fastFree(v34, v13);
        }
        WebCore::MarkedText::collectForHighlights(*(const WebCore::RenderText **)(v1373 + 16), (const WebCore::TextBoxSelectableRange *)v27, 0, (uint64_t)v1436);
        v35 = *(unsigned int *)&v1436[12];
        v36 = *(unsigned int *)&v1436[12] + (unint64_t)v31;
        if (v36 > v30)
        {
          v282 = v30 + ((unint64_t)v30 >> 2);
          if (v282 >= 0x10)
            v283 = v282 + 1;
          else
            v283 = 16;
          if (v283 <= v36)
            v283 = *(unsigned int *)&v1436[12] + (unint64_t)v31;
          if (v283 >= 0x6666667)
          {
            __break(0xC471u);
            JUMPOUT(0x19424A5A8);
          }
          v284 = v1378;
          LODWORD(v2) = 40 * v283;
          v285 = (WTF *)WTF::fastMalloc((WTF *)(40 * v283));
          v286 = v285;
          LODWORD(v1379) = (v2 & 0xFFFFFFF8) / 0x28;
          v1378 = v285;
          if (v31)
          {
            v446 = 40 * v31;
            v2 = (uint64_t)v284 + 24;
            v447 = v285;
            do
            {
              *(_DWORD *)v447 = 0;
              v448 = *(_OWORD *)(v2 - 20);
              *((_DWORD *)v447 + 5) = *(_DWORD *)(v2 - 4);
              *(_OWORD *)((char *)v447 + 4) = v448;
              v449 = *(unsigned int **)v2;
              *(_QWORD *)v2 = 0;
              *((_QWORD *)v447 + 3) = v449;
              *((_DWORD *)v447 + 8) = *(_DWORD *)(v2 + 8);
              v450 = *(WTF::StringImpl **)v2;
              *(_QWORD *)v2 = 0;
              if (v450)
              {
                if (*(_DWORD *)v450 == 2)
                  WTF::StringImpl::destroy(v450, (WTF::StringImpl *)v13);
                else
                  *(_DWORD *)v450 -= 2;
              }
              v2 += 40;
              v447 = (WTF *)((char *)v447 + 40);
              v446 -= 40;
            }
            while (v446);
          }
          if (v284)
          {
            if (v286 == v284)
            {
              v1378 = 0;
              LODWORD(v1379) = 0;
            }
            WTF::fastFree(v284, v13);
          }
          v35 = *(unsigned int *)&v1436[12];
        }
        v37 = *(WTF **)v1436;
        if ((_DWORD)v35)
        {
          v287 = v1378;
          v288 = 40 * v35;
          v289 = *(_QWORD *)v1436 + 24;
          do
          {
            v290 = (char *)v287 + 40 * v31;
            *(_DWORD *)v290 = 0;
            v291 = *(_OWORD *)(v289 - 20);
            *((_DWORD *)v290 + 5) = *(_DWORD *)(v289 - 4);
            *(_OWORD *)(v290 + 4) = v291;
            v292 = *(_QWORD *)v289;
            *(_QWORD *)v289 = 0;
            *((_QWORD *)v290 + 3) = v292;
            *((_DWORD *)v290 + 8) = *(_DWORD *)(v289 + 8);
            ++v31;
            v289 += 40;
            v288 -= 40;
          }
          while (v288);
          HIDWORD(v1379) = v31;
          v293 = 40 * v35;
          v294 = (WTF::StringImpl **)((char *)v37 + 24);
          do
          {
            v295 = *v294;
            *v294 = 0;
            if (v295)
            {
              if (*(_DWORD *)v295 == 2)
                WTF::StringImpl::destroy(v295, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v295 -= 2;
            }
            v294 += 5;
            v293 -= 40;
          }
          while (v293);
          v37 = *(WTF **)v1436;
        }
        if (v37)
        {
          *(_QWORD *)v1436 = 0;
          *(_DWORD *)&v1436[8] = 0;
          WTF::fastFree(v37, v13);
        }
        if (!v31)
        {
          v1376 = 0;
          v1377 = 0;
          goto LABEL_2345;
        }
        v38 = &v1457;
        v39 = *(const WebCore::RenderText **)(v1373 + 16);
        v40 = *(unsigned __int8 *)(v1373 + 152);
        v41 = *(const WebCore::PaintInfo **)(v1373 + 96);
        v1404[0] = 0;
        v1404[1] = 0;
        v1405 = 0;
        v42 = 40 * v31;
        v43 = (_QWORD *)((char *)v1378 + 24);
        do
        {
          if (*v43)
            WTF::ListHashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>>::add((uint64_t *)v1404, (uint64_t)v43, (uint64_t)v1436);
          v43 += 5;
          v42 -= 40;
        }
        while (v42);
        v44 = *((_QWORD *)v39 + 4);
        if (v40)
        {
          if (v44)
            v239 = *(WebCore::RenderElement **)(v44 + 8);
          else
            v239 = 0;
          v2 = (uint64_t)WebCore::RenderElement::firstLineStyle(v239, (WTF::StringImpl *)v13);
        }
        else
        {
          if (v44)
            v44 = *(_QWORD *)(v44 + 8);
          v2 = v44 + 80;
        }
        WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText((WebCore::StyledMarkedText *)v1380, v39, (const WebCore::RenderStyle *)v2, v40 != 0, v41);
        if (HIDWORD(v1379) != 1 || (v45 = v1378, *((_BYTE *)v1378 + 12)))
        {
          WebCore::MarkedText::subdivide((uint64_t)&v1378, 0, (uint64_t)v1407);
          if (*(_DWORD *)&v1407[12])
          {
            v196 = (unsigned __int8 *)(*(_QWORD *)v1407 + 12);
            v197 = *(unsigned int *)&v1407[12];
            do
            {
              v198 = *v196;
              v196 += 40;
              if (v198 == 7)
              {
                WebCore::orderHighlights((uint64_t)v1404[1], (unint64_t)v1407);
                *(_QWORD *)v1436 = v1380;
                *(_QWORD *)&v1436[8] = v39;
                *(_QWORD *)&v1436[16] = v2;
                *(_QWORD *)&v1436[24] = v41;
                WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::StyledMarkedText::subdivideAndResolve(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderText const&,BOOL,WebCore::PaintInfo const&)::$_0,WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)v1406, (uint64_t)v1407, (const WebCore::StyledMarkedText::Style **)v1436);
                WebCore::coalesceAdjacentWithSameRanges((unsigned int *)&v1376, (uint64_t)v1406);
                if (HIDWORD(v1406[1]))
                {
                  v235 = 224 * HIDWORD(v1406[1]);
                  v236 = (unsigned int **)((char *)v1406[0] + 40);
                  do
                  {
                    WebCore::StyledMarkedText::Style::~Style(v236);
                    v237 = (WTF::StringImpl *)*(v236 - 2);
                    *(v236 - 2) = 0;
                    if (v237)
                    {
                      if (*(_DWORD *)v237 == 2)
                        WTF::StringImpl::destroy(v237, (WTF::StringImpl *)v13);
                      else
                        *(_DWORD *)v237 -= 2;
                    }
                    v236 += 28;
                    v235 -= 224;
                  }
                  while (v235);
                }
                if (v1406[0])
                  WTF::fastFree(v1406[0], v13);
                goto LABEL_391;
              }
              --v197;
            }
            while (v197);
            v1377 = 0;
            if (*(_DWORD *)&v1407[12] >= 0x124924Au)
            {
              __break(0xC471u);
              JUMPOUT(0x19424A570);
            }
            v199 = 224 * *(_DWORD *)&v1407[12];
            v200 = (WTF *)WTF::fastMalloc((WTF *)(224 * *(unsigned int *)&v1407[12]));
            LODWORD(v1377) = (613566757 * (unint64_t)(v199 >> 5)) >> 32;
            v1376 = v200;
            if (!*(_DWORD *)&v1407[12])
            {
              __break(0xC471u);
              JUMPOUT(0x19424A578);
            }
            v201 = v200;
            WebCore::resolveStyleForMarkedText((WebCore *)v1436, *(const WebCore::MarkedText **)v1407, (const WebCore::StyledMarkedText::Style *)v1380, v39, (const WebCore::RenderStyle *)v2, v41);
            if (v199 >= 0xE0)
            {
              *(_DWORD *)v201 = 0;
              v319 = *(_OWORD *)&v1436[4];
              *((_DWORD *)v201 + 5) = *(_DWORD *)&v1436[20];
              *(_OWORD *)((char *)v201 + 4) = v319;
              v320 = *(_QWORD *)&v1436[24];
              *(_QWORD *)&v1436[24] = 0;
              *((_QWORD *)v201 + 3) = v320;
              *((_DWORD *)v201 + 8) = *(_DWORD *)v1437;
              *((_QWORD *)v201 + 5) = 0;
              if (*(_QWORD *)&v1437[8])
              {
                *((_QWORD *)v201 + 5) = *(_QWORD *)&v1437[8];
                *(_QWORD *)&v1437[8] = 0;
              }
              *((_QWORD *)v201 + 6) = 0;
              if (*(_QWORD *)&v1437[16])
              {
                *((_QWORD *)v201 + 6) = *(_QWORD *)&v1437[16];
                *(_QWORD *)&v1437[16] = 0;
              }
              *((_QWORD *)v201 + 7) = 0;
              if (*(_QWORD *)&v1437[24])
              {
                *((_QWORD *)v201 + 7) = *(_QWORD *)&v1437[24];
                *(_QWORD *)&v1437[24] = 0;
              }
              *((_QWORD *)v201 + 8) = 0;
              if (*(_QWORD *)&v1437[32])
              {
                *((_QWORD *)v201 + 8) = *(_QWORD *)&v1437[32];
                *(_QWORD *)&v1437[32] = 0;
              }
              *(_OWORD *)((char *)v201 + 72) = *(_OWORD *)&v1437[40];
              *((_QWORD *)v201 + 11) = 0;
              if (v1438)
              {
                *((_QWORD *)v201 + 11) = v1438;
                v1438 = 0;
              }
              *((_BYTE *)v201 + 96) = v1439;
              *((_QWORD *)v201 + 13) = 0;
              if (v1440)
              {
                *((_QWORD *)v201 + 13) = v1440;
                v1440 = 0;
              }
              *((_BYTE *)v201 + 112) = v1441;
              *((_QWORD *)v201 + 15) = 0;
              if (v1442)
              {
                *((_QWORD *)v201 + 15) = v1442;
                v1442 = 0;
              }
              *((_BYTE *)v201 + 144) = 0;
              *((_BYTE *)v201 + 128) = v1443;
              *((_BYTE *)v201 + 136) = v1444;
              *((_BYTE *)v201 + 208) = 0;
              if (v1456)
              {
                WebCore::ShadowData::ShadowData((WTF *)((char *)v201 + 144), (const WebCore::ShadowData *)&v1445);
                *((_BYTE *)v201 + 208) = 1;
              }
              v203 = 0;
              v234 = (int *)((char *)v201 + 216);
            }
            else
            {
              v202 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1376, 1uLL, (unint64_t)v1436);
              v203 = HIDWORD(v1377);
              v201 = v1376;
              v204 = (char *)v1376 + 224 * HIDWORD(v1377);
              *(_DWORD *)v204 = 0;
              v205 = *(_OWORD *)(v202 + 4);
              v206 = *(_DWORD *)(v202 + 20);
              *((_QWORD *)v204 + 5) = 0;
              v207 = v204 + 40;
              *((_DWORD *)v207 - 5) = v206;
              *(_OWORD *)((char *)v207 - 36) = v205;
              v208 = *(_QWORD *)(v202 + 24);
              *(_QWORD *)(v202 + 24) = 0;
              *(v207 - 2) = v208;
              *((_DWORD *)v207 - 2) = *(_DWORD *)(v202 + 32);
              v209 = *(_QWORD *)(v202 + 40);
              if (v209)
              {
                *v207 = v209;
                *(_QWORD *)(v202 + 40) = 0;
              }
              v210 = (char *)v201 + 224 * v203;
              *((_QWORD *)v210 + 6) = 0;
              v211 = v210 + 48;
              v212 = *(_QWORD *)(v202 + 48);
              if (v212)
              {
                *v211 = v212;
                *(_QWORD *)(v202 + 48) = 0;
              }
              v213 = (char *)v201 + 224 * v203;
              *((_QWORD *)v213 + 7) = 0;
              v214 = v213 + 56;
              v215 = *(_QWORD *)(v202 + 56);
              if (v215)
              {
                *v214 = v215;
                *(_QWORD *)(v202 + 56) = 0;
              }
              v216 = (char *)v201 + 224 * v203;
              *((_QWORD *)v216 + 8) = 0;
              v217 = v216 + 64;
              v218 = *(_QWORD *)(v202 + 64);
              if (v218)
              {
                *v217 = v218;
                *(_QWORD *)(v202 + 64) = 0;
              }
              v219 = (char *)v201 + 224 * v203;
              v220 = *(_OWORD *)(v202 + 72);
              *((_QWORD *)v219 + 11) = 0;
              v221 = v219 + 88;
              *((_OWORD *)v221 - 1) = v220;
              v222 = *(_QWORD *)(v202 + 88);
              if (v222)
              {
                *v221 = v222;
                *(_QWORD *)(v202 + 88) = 0;
              }
              v223 = (char *)v201 + 224 * v203;
              v224 = *(_BYTE *)(v202 + 96);
              *((_QWORD *)v223 + 13) = 0;
              v225 = v223 + 104;
              *((_BYTE *)v225 - 8) = v224;
              v226 = *(_QWORD *)(v202 + 104);
              if (v226)
              {
                *v225 = v226;
                *(_QWORD *)(v202 + 104) = 0;
              }
              v227 = (char *)v201 + 224 * v203;
              v228 = *(_BYTE *)(v202 + 112);
              *((_QWORD *)v227 + 15) = 0;
              v229 = v227 + 120;
              *((_BYTE *)v229 - 8) = v228;
              v230 = *(_QWORD *)(v202 + 120);
              if (v230)
              {
                *v229 = v230;
                *(_QWORD *)(v202 + 120) = 0;
              }
              v38 = (int *)(v202 + 216);
              v231 = (char *)v201 + 224 * v203;
              v232 = *(_BYTE *)(v202 + 128);
              v231[208] = 0;
              v233 = v231 + 208;
              *(v233 - 80) = v232;
              *(v233 - 72) = *(_BYTE *)(v202 + 136);
              *(v233 - 64) = 0;
              if (*(_BYTE *)(v202 + 208))
              {
                WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v233 - 64), (const WebCore::ShadowData *)(v202 + 144));
                *v233 = 1;
              }
              v234 = (int *)((char *)v201 + 224 * v203 + 216);
            }
            *v234 = *v38;
            v321 = v203 + 1;
            HIDWORD(v1377) = v203 + 1;
            WebCore::StyledMarkedText::Style::~Style((unsigned int **)&v1437[8]);
            v322 = *(WTF::StringImpl **)&v1436[24];
            *(_QWORD *)&v1436[24] = 0;
            if (v322)
            {
              if (*(_DWORD *)v322 == 2)
                WTF::StringImpl::destroy(v322, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v322 -= 2;
            }
            v323 = *(_QWORD *)v1407;
            LODWORD(v1367) = 1;
            if (*(_DWORD *)&v1407[12] == 1)
              goto LABEL_555;
            v327 = (const WebCore::MarkedText *)(*(_QWORD *)v1407 + 40);
            v1370 = (WTF *)&v1436[4];
            v1368 = &v1445;
            v1369 = &v1437[40];
            v7 = 40 * *(unsigned int *)&v1407[12] - 40;
            do
            {
              if (!v321)
              {
                __break(0xC471u);
                JUMPOUT(0x19424A55CLL);
              }
              v328 = v321 - 1;
              v329 = (char *)v201 + 224 * v328;
              if (*((_DWORD *)v329 + 1) == *((_DWORD *)v327 + 1) && *((_DWORD *)v329 + 2) == *((_DWORD *)v327 + 2))
              {
                v330 = (WTF *)((char *)v201 + 224 * v328 + 40);
                WebCore::resolveStyleForMarkedText((WebCore *)v1436, v327, v330, v39, (const WebCore::RenderStyle *)v2, v41);
                v332 = *(_OWORD *)&v1436[4];
                *((_DWORD *)v329 + 5) = *(_DWORD *)&v1436[20];
                *(_OWORD *)(v329 + 4) = v332;
                v333 = *(_QWORD *)&v1436[24];
                *(_QWORD *)&v1436[24] = 0;
                v334 = (WTF::StringImpl *)*((_QWORD *)v329 + 3);
                *((_QWORD *)v329 + 3) = v333;
                if (v334)
                {
                  if (*(_DWORD *)v334 == 2)
                    WTF::StringImpl::destroy(v334, v331);
                  else
                    *(_DWORD *)v334 -= 2;
                }
                *((_DWORD *)v329 + 8) = *(_DWORD *)v1437;
                WebCore::StyledMarkedText::Style::operator=((uint64_t *)v330, (unsigned int *)&v1437[8]);
              }
              else
              {
                WebCore::resolveStyleForMarkedText((WebCore *)v1436, v327, (const WebCore::StyledMarkedText::Style *)v1380, v39, (const WebCore::RenderStyle *)v2, v41);
                if (v321 == (_DWORD)v1377)
                {
                  v335 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1376, v321 + 1, (unint64_t)v1436);
                  v336 = v335;
                  v337 = HIDWORD(v1377);
                  v201 = v1376;
                  v338 = (char *)v1376 + 224 * HIDWORD(v1377);
                  *(_DWORD *)v338 = 0;
                  v339 = *(_OWORD *)(v335 + 4);
                  v340 = *(_DWORD *)(v335 + 20);
                  *((_QWORD *)v338 + 5) = 0;
                  v341 = v338 + 40;
                  *((_DWORD *)v341 - 5) = v340;
                  *(_OWORD *)((char *)v341 - 36) = v339;
                  v342 = *(_QWORD *)(v335 + 24);
                  *(_QWORD *)(v335 + 24) = 0;
                  *(v341 - 2) = v342;
                  *((_DWORD *)v341 - 2) = *(_DWORD *)(v335 + 32);
                  v343 = *(_QWORD *)(v335 + 40);
                  if (v343)
                  {
                    *v341 = v343;
                    *(_QWORD *)(v335 + 40) = 0;
                  }
                  v344 = (char *)v201 + 224 * v337;
                  *((_QWORD *)v344 + 6) = 0;
                  v345 = v344 + 48;
                  v346 = *(_QWORD *)(v335 + 48);
                  if (v346)
                  {
                    *v345 = v346;
                    *(_QWORD *)(v335 + 48) = 0;
                  }
                  v347 = (char *)v201 + 224 * v337;
                  *((_QWORD *)v347 + 7) = 0;
                  v348 = v347 + 56;
                  v349 = *(_QWORD *)(v335 + 56);
                  if (v349)
                  {
                    *v348 = v349;
                    *(_QWORD *)(v335 + 56) = 0;
                  }
                  v350 = (char *)v201 + 224 * v337;
                  *((_QWORD *)v350 + 8) = 0;
                  v351 = v350 + 64;
                  v352 = *(_QWORD *)(v335 + 64);
                  if (v352)
                  {
                    *v351 = v352;
                    *(_QWORD *)(v335 + 64) = 0;
                  }
                  v353 = (char *)v201 + 224 * v337;
                  v354 = *(_OWORD *)(v335 + 72);
                  *((_QWORD *)v353 + 11) = 0;
                  v355 = v353 + 88;
                  *((_OWORD *)v355 - 1) = v354;
                  v356 = *(_QWORD *)(v335 + 88);
                  if (v356)
                  {
                    *v355 = v356;
                    *(_QWORD *)(v335 + 88) = 0;
                  }
                  v357 = (char *)v201 + 224 * v337;
                  v358 = *(_BYTE *)(v335 + 96);
                  *((_QWORD *)v357 + 13) = 0;
                  v359 = v357 + 104;
                  *((_BYTE *)v359 - 8) = v358;
                  v360 = *(_QWORD *)(v335 + 104);
                  if (v360)
                  {
                    *v359 = v360;
                    *(_QWORD *)(v335 + 104) = 0;
                  }
                  v361 = (char *)v201 + 224 * v337;
                  v362 = *(_BYTE *)(v335 + 112);
                  *((_QWORD *)v361 + 15) = 0;
                  v363 = v361 + 120;
                  *((_BYTE *)v363 - 8) = v362;
                  v364 = *(_QWORD *)(v335 + 120);
                  if (v364)
                  {
                    *v363 = v364;
                    *(_QWORD *)(v335 + 120) = 0;
                  }
                  v365 = (char *)v201 + 224 * v337;
                  v366 = *(_BYTE *)(v335 + 128);
                  v365[208] = 0;
                  v367 = v365 + 208;
                  *(v367 - 80) = v366;
                  *(v367 - 72) = *(_BYTE *)(v335 + 136);
                  *(v367 - 64) = 0;
                  if (*(_BYTE *)(v335 + 208))
                  {
                    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v367 - 64), (const WebCore::ShadowData *)(v335 + 144));
                    *v367 = 1;
                  }
                  *((_DWORD *)v201 + 56 * v337 + 54) = *(_DWORD *)(v336 + 216);
                }
                else
                {
                  v368 = (char *)v201 + 224 * v321;
                  *(_DWORD *)v368 = 0;
                  v369 = *(_OWORD *)&v1436[4];
                  v370 = *(_DWORD *)&v1436[20];
                  *((_QWORD *)v368 + 5) = 0;
                  v371 = v368 + 40;
                  *((_DWORD *)v371 - 5) = v370;
                  *(_OWORD *)((char *)v371 - 36) = v369;
                  v372 = *(_QWORD *)&v1436[24];
                  *(_QWORD *)&v1436[24] = 0;
                  *(v371 - 2) = v372;
                  *((_DWORD *)v371 - 2) = *(_DWORD *)v1437;
                  if (*(_QWORD *)&v1437[8])
                  {
                    *v371 = *(_QWORD *)&v1437[8];
                    *(_QWORD *)&v1437[8] = 0;
                  }
                  v373 = (char *)v201 + 224 * v321;
                  *((_QWORD *)v373 + 6) = 0;
                  v374 = v373 + 48;
                  if (*(_QWORD *)&v1437[16])
                  {
                    *v374 = *(_QWORD *)&v1437[16];
                    *(_QWORD *)&v1437[16] = 0;
                  }
                  v375 = (char *)v201 + 224 * v321;
                  *((_QWORD *)v375 + 7) = 0;
                  v376 = v375 + 56;
                  if (*(_QWORD *)&v1437[24])
                  {
                    *v376 = *(_QWORD *)&v1437[24];
                    *(_QWORD *)&v1437[24] = 0;
                  }
                  v377 = (char *)v201 + 224 * v321;
                  *((_QWORD *)v377 + 8) = 0;
                  v378 = v377 + 64;
                  if (*(_QWORD *)&v1437[32])
                  {
                    *v378 = *(_QWORD *)&v1437[32];
                    *(_QWORD *)&v1437[32] = 0;
                  }
                  v379 = (char *)v201 + 224 * v321;
                  v380 = *(_OWORD *)&v1437[40];
                  *((_QWORD *)v379 + 11) = 0;
                  v381 = v379 + 88;
                  *((_OWORD *)v381 - 1) = v380;
                  if (v1438)
                  {
                    *v381 = v1438;
                    v1438 = 0;
                  }
                  v382 = (char *)v201 + 224 * v321;
                  v383 = v1439;
                  *((_QWORD *)v382 + 13) = 0;
                  v384 = v382 + 104;
                  *((_BYTE *)v384 - 8) = v383;
                  if (v1440)
                  {
                    *v384 = v1440;
                    v1440 = 0;
                  }
                  v385 = (char *)v201 + 224 * v321;
                  v386 = v1441;
                  *((_QWORD *)v385 + 15) = 0;
                  v387 = v385 + 120;
                  *((_BYTE *)v387 - 8) = v386;
                  if (v1442)
                  {
                    *v387 = v1442;
                    v1442 = 0;
                  }
                  v388 = (char *)v201 + 224 * v321;
                  v389 = v1443;
                  v388[208] = 0;
                  v390 = v388 + 208;
                  *(v390 - 80) = v389;
                  *(v390 - 72) = v1444;
                  *(v390 - 64) = 0;
                  if (v1456)
                  {
                    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v390 - 64), (const WebCore::ShadowData *)&v1445);
                    *v390 = 1;
                  }
                  *((_DWORD *)v201 + 56 * v321 + 54) = v1457;
                  v337 = HIDWORD(v1377);
                }
                v321 = v337 + 1;
                HIDWORD(v1377) = v321;
              }
              WebCore::StyledMarkedText::Style::~Style((unsigned int **)&v1437[8]);
              v391 = *(WTF::StringImpl **)&v1436[24];
              *(_QWORD *)&v1436[24] = 0;
              if (v391)
              {
                if (*(_DWORD *)v391 == 2)
                  WTF::StringImpl::destroy(v391, (WTF::StringImpl *)v13);
                else
                  *(_DWORD *)v391 -= 2;
              }
              v327 = (const WebCore::MarkedText *)((char *)v327 + 40);
              v7 -= 40;
            }
            while (v7);
LABEL_391:
            if (!*(_DWORD *)&v1407[12])
              goto LABEL_392;
            LODWORD(v1367) = *(_DWORD *)&v1407[12];
            v323 = *(_QWORD *)v1407;
LABEL_555:
            v324 = 40 * v1367;
            v325 = (WTF::StringImpl **)(v323 + 24);
            do
            {
              v326 = *v325;
              *v325 = 0;
              if (v326)
              {
                if (*(_DWORD *)v326 == 2)
                  WTF::StringImpl::destroy(v326, (WTF::StringImpl *)v13);
                else
                  *(_DWORD *)v326 -= 2;
              }
              v325 += 5;
              v324 -= 40;
            }
            while (v324);
          }
          else
          {
            v1376 = 0;
            v1377 = 0;
          }
LABEL_392:
          v238 = *(WTF **)v1407;
          if (*(_QWORD *)v1407)
          {
            *(_QWORD *)v1407 = 0;
            *(_DWORD *)&v1407[8] = 0;
            WTF::fastFree(v238, v13);
          }
        }
        else
        {
          v46 = *((_DWORD *)v1378 + 5);
          *(_OWORD *)&v1436[4] = *(_OWORD *)((char *)v1378 + 4);
          *(_DWORD *)v1436 = 0;
          *(_DWORD *)&v1436[20] = v46;
          v47 = (WTF::StringImpl *)*((_QWORD *)v1378 + 3);
          if (v47)
            *(_DWORD *)v47 += 2;
          *(_QWORD *)&v1436[24] = v47;
          v48 = *((_DWORD *)v45 + 8);
          memset(&v1437[8], 0, 41);
          *(_DWORD *)v1437 = v48;
          *(_DWORD *)&v1437[52] = 1082130432;
          v1438 = 0;
          v1439 = 0;
          v1440 = 0;
          v1441 = 0;
          v1442 = 0;
          v1443 = 0;
          v1444 = 0;
          LOBYTE(v1445) = 0;
          v1456 = 0;
          v1457 = 1065353216;
          if (v1380[0])
          {
            *(WTF **)&v1437[8] = v1380[0];
            v1380[0] = 0;
          }
          if (v1380[1])
          {
            *(WTF **)&v1437[16] = v1380[1];
            v1380[1] = 0;
          }
          if (v1381)
          {
            *(_QWORD *)&v1437[24] = v1381;
            v1381 = 0;
          }
          if (v1382)
          {
            *(_QWORD *)&v1437[32] = v1382;
            v1382 = 0;
          }
          *(_OWORD *)&v1437[40] = v1383;
          if (v1384)
          {
            v1438 = v1384;
            v1384 = 0;
          }
          v1439 = v1385;
          if (v1386)
          {
            v1440 = v1386;
            v1386 = 0;
          }
          v1441 = v1387;
          if (v1388)
          {
            v1442 = v1388;
            v1388 = 0;
          }
          v1443 = v1389;
          v1444 = v1390;
          if (v1402)
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v1445, (const WebCore::ShadowData *)&v1391);
            v1456 = 1;
            v47 = *(WTF::StringImpl **)&v1436[24];
          }
          v1457 = v1403;
          *(_OWORD *)&v1407[4] = *(_OWORD *)&v1436[4];
          *(_DWORD *)v1407 = 0;
          v1408 = *(_DWORD *)&v1436[20];
          if (v47)
            *(_DWORD *)v47 += 2;
          v1409 = v47;
          v1410 = *(_DWORD *)v1437;
          v1411 = *(_QWORD *)&v1437[8];
          if ((*(_QWORD *)&v1437[8] & 0x8000000000000) != 0)
          {
            v240 = (unsigned int *)(*(_QWORD *)&v1437[8] & 0xFFFFFFFFFFFFLL);
            do
              v241 = __ldaxr(v240);
            while (__stlxr(v241 + 1, v240));
          }
          v1412 = *(_QWORD *)&v1437[16];
          if ((*(_QWORD *)&v1437[16] & 0x8000000000000) != 0)
          {
            v242 = (unsigned int *)(*(_QWORD *)&v1437[16] & 0xFFFFFFFFFFFFLL);
            do
              v243 = __ldaxr(v242);
            while (__stlxr(v243 + 1, v242));
          }
          v1413 = *(_QWORD *)&v1437[24];
          if ((*(_QWORD *)&v1437[24] & 0x8000000000000) != 0)
          {
            v244 = (unsigned int *)(*(_QWORD *)&v1437[24] & 0xFFFFFFFFFFFFLL);
            do
              v245 = __ldaxr(v244);
            while (__stlxr(v245 + 1, v244));
          }
          v1414 = *(_QWORD *)&v1437[32];
          if ((*(_QWORD *)&v1437[32] & 0x8000000000000) != 0)
          {
            v246 = (unsigned int *)(*(_QWORD *)&v1437[32] & 0xFFFFFFFFFFFFLL);
            do
              v247 = __ldaxr(v246);
            while (__stlxr(v247 + 1, v246));
          }
          v1415 = *(_OWORD *)&v1437[40];
          v1416 = v1438;
          if ((v1438 & 0x8000000000000) != 0)
          {
            v248 = (unsigned int *)(v1438 & 0xFFFFFFFFFFFFLL);
            do
              v249 = __ldaxr(v248);
            while (__stlxr(v249 + 1, v248));
          }
          v1417 = v1439;
          v1418 = v1440;
          if ((v1440 & 0x8000000000000) != 0)
          {
            v250 = (unsigned int *)(v1440 & 0xFFFFFFFFFFFFLL);
            do
              v251 = __ldaxr(v250);
            while (__stlxr(v251 + 1, v250));
          }
          v1419 = v1441;
          v1420 = v1442;
          if ((v1442 & 0x8000000000000) != 0)
          {
            v252 = (unsigned int *)(v1442 & 0xFFFFFFFFFFFFLL);
            do
              v253 = __ldaxr(v252);
            while (__stlxr(v253 + 1, v252));
          }
          v1421 = v1443;
          v1422 = v1444;
          LOBYTE(v1423) = 0;
          v1434 = 0;
          if (v1456)
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)&v1423, (const WebCore::ShadowData *)&v1445);
            v1434 = 1;
          }
          v1435 = v1457;
          v1377 = 1;
          v49 = WTF::fastMalloc((WTF *)0xE0);
          v50 = v49;
          v1376 = (WTF *)v49;
          *(_DWORD *)v49 = 0;
          v51 = *(_OWORD *)&v1407[4];
          *(_DWORD *)(v49 + 20) = v1408;
          *(_OWORD *)(v49 + 4) = v51;
          v52 = v1409;
          if (v1409)
            *(_DWORD *)v1409 += 2;
          *(_QWORD *)(v49 + 24) = v52;
          *(_DWORD *)(v49 + 32) = v1410;
          v53 = v1411;
          *(_QWORD *)(v49 + 40) = v1411;
          if ((v53 & 0x8000000000000) != 0)
          {
            v254 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFLL);
            do
              v255 = __ldaxr(v254);
            while (__stlxr(v255 + 1, v254));
          }
          v54 = v1412;
          *(_QWORD *)(v49 + 48) = v1412;
          if ((v54 & 0x8000000000000) != 0)
          {
            v256 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
            do
              v257 = __ldaxr(v256);
            while (__stlxr(v257 + 1, v256));
          }
          v55 = v1413;
          *(_QWORD *)(v49 + 56) = v1413;
          if ((v55 & 0x8000000000000) != 0)
          {
            v258 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFLL);
            do
              v259 = __ldaxr(v258);
            while (__stlxr(v259 + 1, v258));
          }
          v56 = v1414;
          *(_QWORD *)(v49 + 64) = v1414;
          if ((v56 & 0x8000000000000) != 0)
          {
            v260 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
            do
              v261 = __ldaxr(v260);
            while (__stlxr(v261 + 1, v260));
          }
          *(_OWORD *)(v49 + 72) = v1415;
          v57 = v1416;
          *(_QWORD *)(v49 + 88) = v1416;
          if ((v57 & 0x8000000000000) != 0)
          {
            v262 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFLL);
            do
              v263 = __ldaxr(v262);
            while (__stlxr(v263 + 1, v262));
          }
          *(_BYTE *)(v49 + 96) = v1417;
          v58 = v1418;
          *(_QWORD *)(v49 + 104) = v1418;
          if ((v58 & 0x8000000000000) != 0)
          {
            v264 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
            do
              v265 = __ldaxr(v264);
            while (__stlxr(v265 + 1, v264));
          }
          *(_BYTE *)(v49 + 112) = v1419;
          v59 = v1420;
          *(_QWORD *)(v49 + 120) = v1420;
          if ((v59 & 0x8000000000000) != 0)
          {
            v266 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 + 1, v266));
          }
          *(_BYTE *)(v49 + 144) = 0;
          v60 = (WebCore::ShadowData *)(v49 + 144);
          *(_BYTE *)(v50 + 128) = v1421;
          *(_BYTE *)(v50 + 136) = v1422;
          *(_BYTE *)(v50 + 208) = 0;
          if (v1434)
          {
            WebCore::ShadowData::ShadowData(v60, (const WebCore::ShadowData *)&v1423);
            *(_BYTE *)(v50 + 208) = 1;
            v61 = v1434;
            *(_DWORD *)(v50 + 216) = v1435;
            HIDWORD(v1377) = 1;
            if (v61)
            {
              v62 = v1433;
              if (v1433)
              {
                v1433 = 0;
                do
                {
                  v191 = (WTF *)*((_QWORD *)v62 + 7);
                  *((_QWORD *)v62 + 7) = 0;
                  v1406[0] = v191;
                  std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1406, (unsigned int *)v62);
                  v62 = v1406[0];
                }
                while (v1406[0]);
              }
              std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)&v1433, 0);
              if (v1432 != -1)
                ((void (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1432])(v1406, &v1431);
              v1432 = -1;
              if (v1430 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1429);
              }
              if (v1428 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1427);
              }
              if (v1426 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1425);
              }
              if (v1424 == 11)
              {
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1423);
              }
            }
          }
          else
          {
            *(_DWORD *)(v50 + 216) = v1435;
            HIDWORD(v1377) = 1;
          }
          if ((v1420 & 0x8000000000000) != 0)
          {
            v483 = (unsigned int *)(v1420 & 0xFFFFFFFFFFFFLL);
            do
            {
              v484 = __ldaxr(v483);
              v485 = v484 - 1;
            }
            while (__stlxr(v485, v483));
            if (!v485)
            {
              atomic_store(1u, v483);
              WTF::fastFree((WTF *)v483, v13);
            }
          }
          if ((v1418 & 0x8000000000000) != 0)
          {
            v486 = (unsigned int *)(v1418 & 0xFFFFFFFFFFFFLL);
            do
            {
              v487 = __ldaxr(v486);
              v488 = v487 - 1;
            }
            while (__stlxr(v488, v486));
            if (!v488)
            {
              atomic_store(1u, v486);
              WTF::fastFree((WTF *)v486, v13);
            }
          }
          if ((v1416 & 0x8000000000000) != 0)
          {
            v489 = (unsigned int *)(v1416 & 0xFFFFFFFFFFFFLL);
            do
            {
              v490 = __ldaxr(v489);
              v491 = v490 - 1;
            }
            while (__stlxr(v491, v489));
            if (!v491)
            {
              atomic_store(1u, v489);
              WTF::fastFree((WTF *)v489, v13);
            }
          }
          if ((v1414 & 0x8000000000000) != 0)
          {
            v492 = (unsigned int *)(v1414 & 0xFFFFFFFFFFFFLL);
            do
            {
              v493 = __ldaxr(v492);
              v494 = v493 - 1;
            }
            while (__stlxr(v494, v492));
            if (!v494)
            {
              atomic_store(1u, v492);
              WTF::fastFree((WTF *)v492, v13);
            }
          }
          if ((v1413 & 0x8000000000000) != 0)
          {
            v495 = (unsigned int *)(v1413 & 0xFFFFFFFFFFFFLL);
            do
            {
              v496 = __ldaxr(v495);
              v497 = v496 - 1;
            }
            while (__stlxr(v497, v495));
            if (!v497)
            {
              atomic_store(1u, v495);
              WTF::fastFree((WTF *)v495, v13);
            }
          }
          if ((v1412 & 0x8000000000000) != 0)
          {
            v498 = (unsigned int *)(v1412 & 0xFFFFFFFFFFFFLL);
            do
            {
              v499 = __ldaxr(v498);
              v500 = v499 - 1;
            }
            while (__stlxr(v500, v498));
            if (!v500)
            {
              atomic_store(1u, v498);
              WTF::fastFree((WTF *)v498, v13);
            }
          }
          if ((v1411 & 0x8000000000000) != 0)
          {
            v501 = (unsigned int *)(v1411 & 0xFFFFFFFFFFFFLL);
            do
            {
              v502 = __ldaxr(v501);
              v503 = v502 - 1;
            }
            while (__stlxr(v503, v501));
            if (!v503)
            {
              atomic_store(1u, v501);
              WTF::fastFree((WTF *)v501, v13);
            }
          }
          v72 = v1409;
          v1409 = 0;
          if (v72)
          {
            if (*(_DWORD *)v72 == 2)
              WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v13);
            else
              *(_DWORD *)v72 -= 2;
          }
          if (v1456)
          {
            v73 = v1455;
            if (v1455)
            {
              v1455 = 0;
              do
              {
                v190 = *((_QWORD *)v73 + 7);
                *((_QWORD *)v73 + 7) = 0;
                *(_QWORD *)v1407 = v190;
                std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1407, v73);
                v73 = *(unsigned int **)v1407;
              }
              while (*(_QWORD *)v1407);
            }
            std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](&v1455, 0);
            if (v1454 != -1)
              ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1454])(v1407, &v1453);
            v1454 = -1;
            if (v1452 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1451);
            }
            if (v1450 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1449);
            }
            if (v1448 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1447);
            }
            if (v1446 == 11)
            {
              {
                WebCore::calculationValues(void)::map = 1;
                qword_1ECE90C98 = 0;
              }
              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1445);
            }
          }
          if ((v1442 & 0x8000000000000) != 0)
          {
            v504 = (unsigned int *)(v1442 & 0xFFFFFFFFFFFFLL);
            do
            {
              v505 = __ldaxr(v504);
              v506 = v505 - 1;
            }
            while (__stlxr(v506, v504));
            if (!v506)
            {
              atomic_store(1u, v504);
              WTF::fastFree((WTF *)v504, v13);
            }
          }
          if ((v1440 & 0x8000000000000) != 0)
          {
            v507 = (unsigned int *)(v1440 & 0xFFFFFFFFFFFFLL);
            do
            {
              v508 = __ldaxr(v507);
              v509 = v508 - 1;
            }
            while (__stlxr(v509, v507));
            if (!v509)
            {
              atomic_store(1u, v507);
              WTF::fastFree((WTF *)v507, v13);
            }
          }
          if ((v1438 & 0x8000000000000) != 0)
          {
            v510 = (unsigned int *)(v1438 & 0xFFFFFFFFFFFFLL);
            do
            {
              v511 = __ldaxr(v510);
              v512 = v511 - 1;
            }
            while (__stlxr(v512, v510));
            if (!v512)
            {
              atomic_store(1u, v510);
              WTF::fastFree((WTF *)v510, v13);
            }
          }
          if ((*(_QWORD *)&v1437[32] & 0x8000000000000) != 0)
          {
            v513 = (unsigned int *)(*(_QWORD *)&v1437[32] & 0xFFFFFFFFFFFFLL);
            do
            {
              v514 = __ldaxr(v513);
              v515 = v514 - 1;
            }
            while (__stlxr(v515, v513));
            if (!v515)
            {
              atomic_store(1u, v513);
              WTF::fastFree((WTF *)v513, v13);
            }
          }
          if ((*(_QWORD *)&v1437[24] & 0x8000000000000) != 0)
          {
            v516 = (unsigned int *)(*(_QWORD *)&v1437[24] & 0xFFFFFFFFFFFFLL);
            do
            {
              v517 = __ldaxr(v516);
              v518 = v517 - 1;
            }
            while (__stlxr(v518, v516));
            if (!v518)
            {
              atomic_store(1u, v516);
              WTF::fastFree((WTF *)v516, v13);
            }
          }
          if ((*(_QWORD *)&v1437[16] & 0x8000000000000) != 0)
          {
            v519 = (unsigned int *)(*(_QWORD *)&v1437[16] & 0xFFFFFFFFFFFFLL);
            do
            {
              v520 = __ldaxr(v519);
              v521 = v520 - 1;
            }
            while (__stlxr(v521, v519));
            if (!v521)
            {
              atomic_store(1u, v519);
              WTF::fastFree((WTF *)v519, v13);
            }
          }
          if ((*(_QWORD *)&v1437[8] & 0x8000000000000) != 0)
          {
            v522 = (unsigned int *)(*(_QWORD *)&v1437[8] & 0xFFFFFFFFFFFFLL);
            do
            {
              v523 = __ldaxr(v522);
              v524 = v523 - 1;
            }
            while (__stlxr(v524, v522));
            if (!v524)
            {
              atomic_store(1u, v522);
              WTF::fastFree((WTF *)v522, v13);
            }
          }
          v74 = *(WTF::StringImpl **)&v1436[24];
          *(_QWORD *)&v1436[24] = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
              WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v13);
            else
              *(_DWORD *)v74 -= 2;
          }
        }
        if (v1402)
        {
          v75 = v1401;
          if (v1401)
          {
            v1401 = 0;
            do
            {
              v189 = *((_QWORD *)v75 + 7);
              *((_QWORD *)v75 + 7) = 0;
              *(_QWORD *)v1436 = v189;
              std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v1436, v75);
              v75 = *(unsigned int **)v1436;
            }
            while (*(_QWORD *)v1436);
          }
          std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](&v1401, 0);
          if (v1400 != -1)
            ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1400])(v1436, &v1399);
          v1400 = -1;
          if (v1398 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1397);
          }
          if (v1396 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1395);
          }
          if (v1394 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1393);
          }
          if (v1392 == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v1391);
          }
        }
        if ((v1388 & 0x8000000000000) != 0)
        {
          v462 = (unsigned int *)(v1388 & 0xFFFFFFFFFFFFLL);
          do
          {
            v463 = __ldaxr(v462);
            v464 = v463 - 1;
          }
          while (__stlxr(v464, v462));
          if (!v464)
          {
            atomic_store(1u, v462);
            WTF::fastFree((WTF *)v462, v13);
          }
        }
        if ((v1386 & 0x8000000000000) != 0)
        {
          v465 = (unsigned int *)(v1386 & 0xFFFFFFFFFFFFLL);
          do
          {
            v466 = __ldaxr(v465);
            v467 = v466 - 1;
          }
          while (__stlxr(v467, v465));
          if (!v467)
          {
            atomic_store(1u, v465);
            WTF::fastFree((WTF *)v465, v13);
          }
        }
        if ((v1384 & 0x8000000000000) != 0)
        {
          v468 = (unsigned int *)(v1384 & 0xFFFFFFFFFFFFLL);
          do
          {
            v469 = __ldaxr(v468);
            v470 = v469 - 1;
          }
          while (__stlxr(v470, v468));
          if (!v470)
          {
            atomic_store(1u, v468);
            WTF::fastFree((WTF *)v468, v13);
          }
        }
        if ((v1382 & 0x8000000000000) != 0)
        {
          v471 = (unsigned int *)(v1382 & 0xFFFFFFFFFFFFLL);
          do
          {
            v472 = __ldaxr(v471);
            v473 = v472 - 1;
          }
          while (__stlxr(v473, v471));
          if (!v473)
          {
            atomic_store(1u, v471);
            WTF::fastFree((WTF *)v471, v13);
          }
        }
        if ((v1381 & 0x8000000000000) != 0)
        {
          v474 = (unsigned int *)(v1381 & 0xFFFFFFFFFFFFLL);
          do
          {
            v475 = __ldaxr(v474);
            v476 = v475 - 1;
          }
          while (__stlxr(v476, v474));
          if (!v476)
          {
            atomic_store(1u, v474);
            WTF::fastFree((WTF *)v474, v13);
          }
        }
        if (((unint64_t)v1380[1] & 0x8000000000000) != 0)
        {
          v477 = (unsigned int *)((unint64_t)v1380[1] & 0xFFFFFFFFFFFFLL);
          do
          {
            v478 = __ldaxr(v477);
            v479 = v478 - 1;
          }
          while (__stlxr(v479, v477));
          if (!v479)
          {
            atomic_store(1u, v477);
            WTF::fastFree((WTF *)v477, v13);
          }
        }
        if (((unint64_t)v1380[0] & 0x8000000000000) != 0)
        {
          v480 = (unsigned int *)((unint64_t)v1380[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v481 = __ldaxr(v480);
            v482 = v481 - 1;
          }
          while (__stlxr(v482, v480));
          if (!v482)
          {
            atomic_store(1u, v480);
            WTF::fastFree((WTF *)v480, v13);
          }
        }
        v76 = v1404[1];
        while (v76)
        {
          v194 = v76;
          v76 = (WTF *)*((_QWORD *)v76 + 2);
          v195 = *(WTF::StringImpl **)v194;
          *(_QWORD *)v194 = 0;
          if (v195)
          {
            if (*(_DWORD *)v195 == 2)
              WTF::StringImpl::destroy(v195, (WTF::StringImpl *)v13);
            else
              *(_DWORD *)v195 -= 2;
          }
          WTF::fastFree(v194, v13);
        }
        if (v1404[0])
          WTF::fastFree((WTF *)((char *)v1404[0] - 16), v13);
        if (HIDWORD(v1377) <= 1)
        {
          HIDWORD(v1375) = HIDWORD(v1377);
          if (!HIDWORD(v1377))
            goto LABEL_2345;
          v77 = 224 * HIDWORD(v1377);
          v78 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v1377)));
          v79 = v78;
          LODWORD(v1375) = v77 > 0xDF;
          v1374 = (WTF *)v78;
          v80 = v1376;
          *(_DWORD *)v78 = 0;
          v81 = *(_OWORD *)((char *)v80 + 4);
          *(_DWORD *)(v78 + 20) = *((_DWORD *)v80 + 5);
          *(_OWORD *)(v78 + 4) = v81;
          v82 = (_DWORD *)*((_QWORD *)v80 + 3);
          if (v82)
            *v82 += 2;
          *(_QWORD *)(v78 + 24) = v82;
          *(_DWORD *)(v78 + 32) = *((_DWORD *)v80 + 8);
          v83 = *((_QWORD *)v80 + 5);
          *(_QWORD *)(v78 + 40) = v83;
          if ((v83 & 0x8000000000000) != 0)
          {
            v398 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFLL);
            do
              v399 = __ldaxr(v398);
            while (__stlxr(v399 + 1, v398));
          }
          v84 = *((_QWORD *)v80 + 6);
          *(_QWORD *)(v78 + 48) = v84;
          if ((v84 & 0x8000000000000) != 0)
          {
            v400 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
            do
              v401 = __ldaxr(v400);
            while (__stlxr(v401 + 1, v400));
          }
          v85 = *((_QWORD *)v80 + 7);
          *(_QWORD *)(v78 + 56) = v85;
          if ((v85 & 0x8000000000000) != 0)
          {
            v402 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFLL);
            do
              v403 = __ldaxr(v402);
            while (__stlxr(v403 + 1, v402));
          }
          v86 = *((_QWORD *)v80 + 8);
          *(_QWORD *)(v78 + 64) = v86;
          if ((v86 & 0x8000000000000) != 0)
          {
            v404 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
            do
              v405 = __ldaxr(v404);
            while (__stlxr(v405 + 1, v404));
          }
          *(_OWORD *)(v78 + 72) = *(_OWORD *)((char *)v80 + 72);
          v87 = *((_QWORD *)v80 + 11);
          *(_QWORD *)(v78 + 88) = v87;
          if ((v87 & 0x8000000000000) != 0)
          {
            v406 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFLL);
            do
              v407 = __ldaxr(v406);
            while (__stlxr(v407 + 1, v406));
          }
          *(_BYTE *)(v78 + 96) = *((_BYTE *)v80 + 96);
          v88 = *((_QWORD *)v80 + 13);
          *(_QWORD *)(v78 + 104) = v88;
          if ((v88 & 0x8000000000000) != 0)
          {
            v408 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
            do
              v409 = __ldaxr(v408);
            while (__stlxr(v409 + 1, v408));
          }
          *(_BYTE *)(v78 + 112) = *((_BYTE *)v80 + 112);
          v89 = *((_QWORD *)v80 + 15);
          *(_QWORD *)(v78 + 120) = v89;
          if ((v89 & 0x8000000000000) != 0)
          {
            v410 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFLL);
            do
              v411 = __ldaxr(v410);
            while (__stlxr(v411 + 1, v410));
          }
          v90 = *((_BYTE *)v80 + 128);
          v91 = *((_BYTE *)v80 + 136);
          *(_BYTE *)(v78 + 144) = 0;
          v92 = (WebCore::ShadowData *)(v78 + 144);
          *(_BYTE *)(v79 + 128) = v90;
          *(_BYTE *)(v79 + 136) = v91;
          *(_BYTE *)(v79 + 208) = 0;
          if (*((_BYTE *)v80 + 208))
          {
            WebCore::ShadowData::ShadowData(v92, (WTF *)((char *)v80 + 144));
            *(_BYTE *)(v79 + 208) = 1;
          }
          *(_DWORD *)(v79 + 216) = *((_DWORD *)v80 + 54);
          v93 = HIDWORD(v1375);
LABEL_170:
          v27 = (char *)v1374;
          if (!v93)
            goto LABEL_2343;
          v94 = (char *)v1374 + 224 * v93;
          v5 = (uint64_t)v1380;
          v1368 = (unsigned int *)&v1381;
          v1364 = (WebCore::Color *)&v1436[16];
          v1362 = (WebCore::Color *)&v1380[1];
          v1363 = &v1407[8];
          v95 = v1373;
          v1366 = (WebCore::TextRun *)(v1373 + 56);
          LODWORD(v6) = 0x7FFFFFFF;
          v8 = 2147483650.0;
          v9 = 0.0;
          v10 = 2147500000.0;
          v11 = -2147500000.0;
          v1367 = v94;
          while (2)
          {
            LODWORD(v7) = *((_DWORD *)v27 + 1);
            v1112 = *((_DWORD *)v27 + 2);
            if (v1112 <= v7)
              goto LABEL_2070;
            LODWORD(v1371) = *((_DWORD *)v27 + 2);
            LODWORD(v1369) = v1112 - v7;
            v28 = *(_QWORD *)(*(_QWORD *)(v95 + 96) + 80);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 96))(v28, 1);
            v1113 = (WTF *)*((_QWORD *)v27 + 5);
            v1380[0] = v1113;
            v1370 = (WTF *)(v27 + 40);
            if (((unint64_t)v1113 & 0x8000000000000) != 0)
            {
              v1282 = (unsigned int *)((unint64_t)v1113 & 0xFFFFFFFFFFFFLL);
              do
                v1283 = __ldaxr(v1282);
              while (__stlxr(v1283 + 1, v1282));
              v1284 = (WTF *)*((_QWORD *)v27 + 5);
              v1380[1] = v1284;
              if (((unint64_t)v1284 & 0x8000000000000) != 0)
              {
                v1285 = (unsigned int *)((unint64_t)v1284 & 0xFFFFFFFFFFFFLL);
                do
                  v1286 = __ldaxr(v1285);
                while (__stlxr(v1286 + 1, v1285));
              }
            }
            else
            {
              v1380[1] = v1113;
            }
            *(_QWORD *)v1368 = 0;
            *((_QWORD *)v1368 + 1) = 0;
            *((_BYTE *)v1368 + 16) = 0;
            DWORD1(v1383) = 1082130432;
            LOBYTE(v2) = *(_BYTE *)(v28 + 341);
            if (*(_BYTE *)(v28 + 347))
            {
              *(_BYTE *)(v28 + 347) = 0;
              *(_DWORD *)(v28 + 184) |= 0x10000u;
            }
            v4 = v28 + 8;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 88))(v28, v28 + 8);
            v3 = (unint64_t)v1380[0];
            if (((unint64_t)v1380[0] & 0x8000000000000) == 0)
            {
              if ((v2 & 1) == 0 || v1380[0] == *(WTF **)v4 && (*(_QWORD *)v4 & 0x8000000000000) == 0)
                goto LABEL_2080;
              v1225 = 0;
              LODWORD(v1415) = 0;
              *(WTF **)v1436 = v1380[0];
              v1436[16] = 0;
              *(_DWORD *)&v1437[48] = -1;
LABEL_2248:
              ((void (*)(WTF **, WebCore::Color *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JSN_SM_EEEDcmSP_DpOT0____fdiagonal[v1225])(v1404, v1364, v1363);
              *(_DWORD *)&v1437[48] = v1225;
              goto LABEL_2249;
            }
            v1287 = (unsigned int *)((unint64_t)v1380[0] & 0xFFFFFFFFFFFFLL);
            do
              v1288 = __ldaxr(v1287);
            while (__stlxr(v1288 + 1, v1287));
            if ((v2 & 1) != 0)
            {
              v1289 = *(WTF **)v4;
              if ((*(_QWORD *)v4 & 0x8000000000000) == 0
                || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)(((unint64_t)v1289 & 0xFFFFFFFFFFFFLL) + 4)
                || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)(((unint64_t)v1289 & 0xFFFFFFFFFFFFLL) + 8)
                || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)(((unint64_t)v1289 & 0xFFFFFFFFFFFFLL)
                                                                         + 0xC)
                || *(float *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)(((unint64_t)v1289 & 0xFFFFFFFFFFFFLL)
                                                                          + 0x10)
                || HIBYTE(v3) != (unint64_t)v1289 >> 56
                || BYTE6(v3) != BYTE6(v1289))
              {
                LODWORD(v1415) = 0;
                *(_QWORD *)v1436 = v3;
                do
                  v1293 = __ldaxr(v1287);
                while (__stlxr(v1293 + 1, v1287));
                v1225 = v1415;
                v1436[16] = 0;
                *(_DWORD *)&v1437[48] = -1;
                if ((_DWORD)v1415 != -1)
                  goto LABEL_2248;
                v1225 = 0xFFFFFFFFLL;
LABEL_2249:
                v1226 = *(WTF **)v4;
                if ((*(_QWORD *)v4 & 0x8000000000000) == 0)
                {
                  if (v1226 != *(WTF **)v1436 || (*(_QWORD *)v1436 & 0x8000000000000) != 0)
                    goto LABEL_2254;
LABEL_2571:
                  v1357 = *(unsigned int *)(v28 + 88);
                  v1358 = v1225 == v1357;
                  if (v1225 == 0xFFFFFFFFLL)
                    v1358 = 0;
                  if (v1357 == 0xFFFFFFFFLL)
                    v1358 = v1225 == 0xFFFFFFFFLL;
                  if (v1358)
                  {
                    v1359 = (_QWORD *)(v28 + 24);
                    if (v1357 == 2)
                    {
                      if (v1225 != 2)
                        break;
                      v95 = v1373;
                      v5 = (uint64_t)v1380;
                      if (*v1359 == *(_QWORD *)&v1436[16])
                        goto LABEL_2263;
                    }
                    else
                    {
                      if (v1357 != 1)
                        goto LABEL_2263;
                      if (v1225 != 1)
                        break;
                      v95 = v1373;
                      v5 = (uint64_t)v1380;
                      if ((WebCore::operator==((uint64_t)v1359, (uint64_t)v1364) & 1) != 0)
                        goto LABEL_2263;
                    }
                  }
                  goto LABEL_2254;
                }
                if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
                {
                  *(_OWORD *)v1404 = *(_OWORD *)(((unint64_t)v1226 & 0xFFFFFFFFFFFFLL) + 4);
                  *(_OWORD *)v1406 = *(_OWORD *)((*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL) + 4);
                  if (WebCore::operator==<float,4ul>((float *)v1404, (float *)v1406)
                    && HIBYTE(*(_QWORD *)v4) == HIBYTE(*(_QWORD *)v1436))
                  {
                    v95 = v1373;
                    v5 = (uint64_t)v1380;
                    if (BYTE6(*(_QWORD *)v4) == v1436[6])
                    {
                      v1225 = *(unsigned int *)&v1437[48];
                      goto LABEL_2571;
                    }
                  }
                  else
                  {
                    v95 = v1373;
                    v5 = (uint64_t)v1380;
                  }
                }
LABEL_2254:
                v1228 = *(WTF **)v4;
                v1229 = *(_QWORD *)v1436;
                if ((*(_QWORD *)v4 & 0x8000000000000) != 0)
                  goto LABEL_2585;
                if (v1228 != *(WTF **)v1436 || (*(_QWORD *)v1436 & 0x8000000000000) != 0)
                  goto LABEL_2257;
                goto LABEL_2259;
              }
            }
LABEL_2080:
            if ((v2 & 2) != 0)
            {
              if (!WebCore::operator==((uint64_t *)v1362, (uint64_t *)(v28 + 96)))
                WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v28, v1362);
              v1294.n128_u32[0] = v1382;
              if (*(float *)&v1382 != *(float *)(v28 + 188))
              {
                *(_DWORD *)(v28 + 188) = v1382;
                *(_DWORD *)(v28 + 184) |= 8u;
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 88))(v28, v4);
              }
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v28 + 312))(v28, HIBYTE(v1382), v1294);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 296))(v28, v1383);
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (!HIBYTE(v1382))
                (*(void (**)(uint64_t, float))(*(_QWORD *)v28 + 320))(v28, *((float *)&v1383 + 1));
            }
            if ((v3 & 0x8000000000000) != 0)
            {
              v1297 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
              do
              {
                v1298 = __ldaxr(v1297);
                v1299 = v1298 - 1;
              }
              while (__stlxr(v1299, v1297));
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (!v1299)
              {
                atomic_store(1u, v1297);
                WTF::fastFree((WTF *)v1297, v1114);
              }
            }
            if ((v1381 & 0x8000000000000) != 0)
            {
              v1300 = (unsigned int *)(v1381 & 0xFFFFFFFFFFFFLL);
              do
              {
                v1301 = __ldaxr(v1300);
                v1302 = v1301 - 1;
              }
              while (__stlxr(v1302, v1300));
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (!v1302)
              {
                atomic_store(1u, v1300);
                WTF::fastFree((WTF *)v1300, v1114);
              }
            }
            if (((unint64_t)v1380[1] & 0x8000000000000) != 0)
            {
              v1303 = (unsigned int *)((unint64_t)v1380[1] & 0xFFFFFFFFFFFFLL);
              do
              {
                v1304 = __ldaxr(v1303);
                v1305 = v1304 - 1;
              }
              while (__stlxr(v1305, v1303));
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (!v1305)
              {
                atomic_store(1u, v1303);
                WTF::fastFree((WTF *)v1303, v1114);
              }
            }
            if (((unint64_t)v1380[0] & 0x8000000000000) != 0)
            {
              v1306 = (unsigned int *)((unint64_t)v1380[0] & 0xFFFFFFFFFFFFLL);
              do
              {
                v1307 = __ldaxr(v1306);
                v1308 = v1307 - 1;
              }
              while (__stlxr(v1308, v1306));
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (!v1308)
              {
                atomic_store(1u, v1306);
                WTF::fastFree((WTF *)v1306, v1114);
              }
            }
            v1115 = *(_QWORD *)v95;
            if (*(_QWORD *)v95)
            {
              do
                v1116 = __ldaxr((unsigned int *)v1115);
              while (__stlxr(v1116 + 1, (unsigned int *)v1115));
            }
            v1117 = *(_QWORD *)(v95 + 8);
            *(_QWORD *)v1436 = v1115;
            *(_QWORD *)&v1436[8] = v1117;
            *(_DWORD *)&v1436[16] = 0;
            v1118 = *(_QWORD *)(v1115 + 8);
            if (v1117 >= *(unsigned int *)(v1118 + 60))
            {
              __break(0xC471u);
              JUMPOUT(0x19424F4D4);
            }
            v1119 = *(_WORD *)(*(_QWORD *)(v1118 + 48) + 80 * v1117 + 50);
            v1120 = v1119 & 0xE;
            v1121 = v1119 & 0xF;
            if (v1120)
              v1122 = v1121 == 3;
            else
              v1122 = 1;
            if (!v1122)
            {
              __break(0xC471u);
              JUMPOUT(0x19424F210);
            }
            std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(v1436, (uint64_t)v1407);
            if (*(_DWORD *)&v1436[16] != -1)
              ((void (*)(WTF **, _BYTE *))off_1E343A000[*(unsigned int *)&v1436[16]])(v1380, v1436);
            if (*(_DWORD *)&v1407[16] != -1)
            {
              *(_QWORD *)v1436 = v5;
              (*(&off_1E343A020 + *(unsigned int *)&v1407[16]))((int)v1436, (WebCore::InlineIterator::LineBoxIteratorModernPath *)v1407);
              if (*(_DWORD *)&v1407[16] != -1)
              {
                v1124 = v1123;
                *(_QWORD *)v1436 = v5;
                v1125 = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E343A030[*(unsigned int *)&v1407[16]])(v1436, v1407);
                if (*(_DWORD *)&v1407[16] != -1)
                {
                  v1126 = v1125;
                  *(_QWORD *)v1436 = v5;
                  v1128 = ((float (*)(_BYTE *, _BYTE *))*(&off_1E343A040 + *(unsigned int *)&v1407[16]))(v1436, v1407)* 64.0;
                  if (v1128 >= 2147483650.0 || v1128 <= -2147483650.0)
                  {
                    if (v1128 >= v8)
                    {
                      LODWORD(v2) = 0x7FFFFFFF;
                    }
                    else if (v1128 > -2147483650.0)
                    {
                      LODWORD(v2) = (int)v1128;
                    }
                    else
                    {
                      LODWORD(v2) = 0x80000000;
                    }
                    v95 = v1373;
                  }
                  else
                  {
                    LODWORD(v2) = (int)v1128;
                  }
                  if ((*(_DWORD *)(v1126 + 20) & 0xC000000) != 0x4000000
                    || (WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v1126) & 1) != 0)
                  {
                    goto LABEL_2105;
                  }
                  v1215 = 0;
                  v1216 = 0;
                  while (1)
                  {
                    v1217 = *(unsigned int *)(v1126 + 40);
                    if (v1217 | ((unint64_t)*(unsigned __int8 *)(v1126 + 44) << 32)
                      && (v3 = *(_QWORD *)((v1217 | ((unint64_t)*(unsigned __int8 *)(v1126 + 44) << 32)) + 8)) != 0)
                    {
                      while ((*(_BYTE *)(v3 + 45) & 0x40) == 0
                           || WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v3))
                      {
                        v1218 = *(unsigned int *)(v3 + 40);
                        v1219 = 0;
                        if (v1218 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32))
                        {
                          v3 = *(_QWORD *)((v1218 | ((unint64_t)*(unsigned __int8 *)(v3 + 44) << 32)) + 8);
                          if (v3)
                            continue;
                        }
                        goto LABEL_2226;
                      }
                      v1219 = v3;
                    }
                    else
                    {
                      v1219 = 0;
                    }
LABEL_2226:
                    if ((*(_BYTE *)(v1126 + 45) & 0x40) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19424EE6CLL);
                    }
                    v1220 = (int *)(v1126 + 156);
                    if (((*(_DWORD *)(v1126 + 124) >> 13) & 6u) - 2 >= 4)
                      v1221 = (_DWORD *)(v1126 + 152);
                    else
                      v1221 = (_DWORD *)(v1126 + 156);
                    if (((*(_DWORD *)(v1126 + 124) >> 13) & 6u) - 2 < 4)
                      v1220 = (int *)(v1126 + 152);
                    v1222 = *v1220;
                    if (__OFSUB__(v1216, *v1221))
                      v1216 = (v1216 >> 31) + 0x7FFFFFFF;
                    else
                      v1216 -= *v1221;
                    v677 = __OFSUB__(v1215, v1222);
                    v1223 = v1215 - v1222;
                    LODWORD(v6) = 0x7FFFFFFF;
                    v1215 = v677 ? (v1215 >> 31) + 0x7FFFFFFF : v1223;
                    v1224 = *(_QWORD *)(v1126 + 32);
                    if (!v1224)
                      break;
                    if (v1219)
                      goto LABEL_2275;
                    v1126 = *(_QWORD *)(v1224 + 8);
                    if (!v1126
                      || (*(_BYTE *)(v1126 + 45) & 0x40) == 0
                      || (WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v1126) & 1) != 0)
                    {
                      goto LABEL_2105;
                    }
                  }
                  if (!v1219)
                    goto LABEL_2105;
LABEL_2275:
                  if ((*(_BYTE *)(v1219 + 45) & 0x40) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19424F0F8);
                  }
                  if (((*(_DWORD *)(v1219 + 124) >> 13) & 6u) - 2 < 4)
                  {
                    v1235 = (int *)(v1219 + 156);
                    v1236 = (int *)(v1219 + 152);
                  }
                  else
                  {
                    v1235 = (int *)(v1219 + 152);
                    v1236 = (int *)(v1219 + 156);
                  }
                  v1237 = *v1235;
                  v677 = __OFADD__(v1216, v1237);
                  v1238 = v1216 + v1237;
                  v4 = 0xC1E0000000000000;
                  if (v677)
                    v1238 = (v1216 >> 31) + 0x7FFFFFFF;
                  v1239 = *v1236;
                  v1240 = v1215 + v1239;
                  if (__OFADD__(v1215, v1239))
                    v1240 = (v1215 >> 31) + 0x7FFFFFFF;
                  v5 = 0x4050000000000000;
                  while (1)
                  {
                    v1241 = *(unsigned int *)(v1219 + 71);
                    if (!(v1241 | ((unint64_t)*(unsigned __int8 *)(v1219 + 75) << 32)))
                      break;
                    v1242 = *(_QWORD *)((v1241 | ((unint64_t)*(unsigned __int8 *)(v1219 + 75) << 32)) + 8);
                    if (!v1242 || (*(_BYTE *)(v1242 + 45) & 0x40) == 0)
                      break;
                    v1219 = *(_QWORD *)((v1241 | ((unint64_t)*(unsigned __int8 *)(v1219 + 75) << 32)) + 8);
                    v1243 = ((*(_DWORD *)(v1242 + 124) >> 13) & 6u) - 2 >= 4;
                    v1244 = (int *)(v1242 + 156);
                    if (v1243)
                      v1245 = (_DWORD *)(v1219 + 152);
                    else
                      v1245 = (_DWORD *)(v1219 + 156);
                    if (!v1243)
                      v1244 = (int *)(v1219 + 152);
                    v1246 = *v1244;
                    v677 = __OFADD__(v1238, *v1245);
                    v1247 = v1238 + *v1245;
                    v1238 = (v1238 >> 31) + 0x7FFFFFFF;
                    if (!v677)
                      v1238 = v1247;
                    v677 = __OFADD__(v1240, v1246);
                    v1248 = v1240 + v1246;
                    LODWORD(v6) = 0x7FFFFFFF;
                    if (v677)
                      v1240 = (v1240 >> 31) + 0x7FFFFFFF;
                    else
                      v1240 = v1248;
                  }
                  if ((*(_BYTE *)(v1219 + 52) & 7) != 1 || !v1240)
                    goto LABEL_2105;
                  WebCore::InlineIterator::lastLineBoxFor((unsigned int *)v1219, v1127, (uint64_t)v1436);
                  if (*(_DWORD *)&v1436[16] != -1)
                  {
                    v1380[0] = (WTF *)v1404;
                    if ((((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[*(unsigned int *)&v1436[16]])(v1380, v1436) & 1) != 0)
                    {
                      v1255 = 1;
LABEL_2301:
                      v1256 = v2;
                      goto LABEL_2302;
                    }
                    if (WebCore::LineSelection::selectionState((WebCore::LineSelection *)v1436, v1127, v1249, v1250, v1251, v1252, v1253, v1254, v1361)- 1 > 1)
                    {
                      v1255 = 0;
                      goto LABEL_2301;
                    }
                    if (*(_DWORD *)&v1436[16] != -1)
                    {
                      v1380[0] = (WTF *)v1404;
                      v1257 = (float)((float)((float)v1240 * 0.015625)
                                    + ((float (*)(WTF **, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix
                                                                              + *(unsigned int *)&v1436[16]))(v1380, v1436))* 64.0;
                      if (v1257 >= v8 || v1257 <= -2147483650.0)
                      {
                        if (v1257 >= v8)
                        {
                          v1259 = 0x7FFFFFFF;
                        }
                        else if (v1257 <= -2147483650.0)
                        {
                          v1259 = 0x80000000;
                        }
                        else
                        {
                          v1259 = (int)v1257;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1259 = (int)v1257;
                      }
                      if (v1259 <= (int)v2)
                        v1256 = v2;
                      else
                        v1256 = v1259;
                      v1255 = 1;
LABEL_2302:
                      if (*(_DWORD *)&v1436[16] != -1)
                        ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[*(unsigned int *)&v1436[16]])(v1380, v1436);
                      if (v1255)
                        LODWORD(v2) = v1256;
LABEL_2105:
                      v1130 = (float)(int)v2 * 0.015625;
                      v1131 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v95 + 32) + 44) >> 13;
                      v149 = v1131 > 4;
                      v1132 = (1 << v1131) & 0x16;
                      if (v149 || v1132 == 0)
                        v1296 = *(float *)(v95 + 44) - v1130;
                      else
                        v1296 = v1124 - (float)(*(float *)(v95 + 44) + *(float *)(v95 + 52));
                      v1134 = v1296 * 64.0;
                      if (v1134 >= 2147483650.0 || v1134 <= -2147483650.0)
                      {
                        if (v1134 >= v8)
                        {
                          v1136 = 0x7FFFFFFF;
                        }
                        else if (v1134 <= -2147483650.0)
                        {
                          v1136 = 0x80000000;
                        }
                        else
                        {
                          v1136 = (int)v1134;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1136 = (int)v1134;
                      }
                      v1137 = fmaxf(v1124 - v1130, v9) * 64.0;
                      if (v1137 >= 2147483650.0 || v1137 <= -2147483650.0)
                      {
                        if (v1137 >= v8)
                        {
                          v1139 = 0x7FFFFFFF;
                        }
                        else if (v1137 <= -2147483650.0)
                        {
                          v1139 = 0x80000000;
                        }
                        else
                        {
                          v1139 = (int)v1137;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1139 = (int)v1137;
                      }
                      v1140 = *(float *)(v95 + 136) * 64.0;
                      if (v1140 >= 2147483650.0 || v1140 <= -2147483650.0)
                      {
                        if (v1140 >= v8)
                        {
                          v1142 = 0x7FFFFFFF;
                        }
                        else if (v1140 <= -2147483650.0)
                        {
                          v1142 = 0x80000000;
                        }
                        else
                        {
                          v1142 = (int)v1140;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1142 = (int)v1140;
                      }
                      v1143 = (float)(*(float *)(v95 + 140) + (float)((float)v1136 * -0.015625)) * 64.0;
                      if (v1143 >= 2147483650.0 || v1143 <= -2147483650.0)
                      {
                        if (v1143 >= v8)
                        {
                          v1145 = 0x7FFFFFFF;
                        }
                        else if (v1143 <= -2147483650.0)
                        {
                          v1145 = 0x80000000;
                        }
                        else
                        {
                          v1145 = (int)v1143;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1145 = (int)v1143;
                      }
                      v1146 = *(float *)(v95 + 48) * 64.0;
                      if (v1146 >= 2147483650.0 || v1146 <= -2147483650.0)
                      {
                        if (v1146 >= v8)
                        {
                          v1147 = 0x7FFFFFFF;
                        }
                        else if (v1146 <= -2147483650.0)
                        {
                          v1147 = 0x80000000;
                        }
                        else
                        {
                          v1147 = (int)v1146;
                        }
                        v95 = v1373;
                      }
                      else
                      {
                        v1147 = (int)v1146;
                      }
                      v1380[0] = (WTF *)__PAIR64__(v1145, v1142);
                      v1380[1] = (WTF *)__PAIR64__(v1139, v1147);
                      if (*(_BYTE *)(v95 + 153))
                      {
                        v1295 = *(_QWORD *)(v95 + 16);
                        if (*(_BYTE *)(v1295 + 46) != 3)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19424F7B4);
                        }
                        v1152 = *(_WORD **)(v1295 + 120);
                        v95 = v1373;
                      }
                      else
                      {
                        v1148 = *(_QWORD *)(v95 + 8);
                        v1149 = *(_QWORD *)(*(_QWORD *)v95 + 8);
                        if (v1148 >= *(unsigned int *)(v1149 + 60))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19424F50CLL);
                        }
                        v1150 = *(_QWORD *)(v1149 + 48) + 80 * v1148;
                        v1151 = *(WebCore::Layout::Box **)v1150;
                        if (*(_DWORD *)(v1150 + 40))
                        {
                          v1152 = (_WORD *)((char *)v1151 + 16);
                        }
                        else if ((*((_WORD *)v1151 + 6) & 0x200) != 0
                               && *(_QWORD *)(WebCore::Layout::Box::rareData(v1151) + 24))
                        {
                          v1152 = *(_WORD **)(WebCore::Layout::Box::rareData(v1151) + 24);
                          v95 = v1373;
                        }
                        else
                        {
                          v1152 = (_WORD *)((char *)v1151 + 16);
                          v95 = v1373;
                        }
                      }
                      v1153 = *((_QWORD *)v1152 + 4);
                      if (*(unsigned __int16 *)(*(_QWORD *)(v95 + 16) + 112) <= 0x100u)
                        v1154 = 0;
                      else
                        v1154 = *(_WORD *)(*(_QWORD *)(v95 + 16) + 112);
                      v1155 = WebCore::FontCascade::s_codePath;
                      if (!WebCore::FontCascade::s_codePath)
                      {
                        v1156 = *(_QWORD *)(v95 + 64);
                        if (!v1156 || (*(_BYTE *)(v95 + 93) & 8) == 0 || (*(_BYTE *)(v1156 + 16) & 4) != 0)
                          goto LABEL_2145;
                        v1155 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v1156 + 8), *(unsigned int *)(v1156 + 4));
                      }
                      if (v1155 == 2)
                      {
LABEL_2158:
                        WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v1436, v1153 + 32, (uint64_t)v1366, 0, 0, 0);
                        WebCore::ComplexTextController::advance((uint64_t)v1436, v7, 0, 0, 0, v1160, v1161, v1162, v1163, v1164, v1165);
                        v1166 = v1459;
                        WebCore::ComplexTextController::advance((uint64_t)v1436, v1371, 0, 0, 0, v1167, v1168, v1169, v1170, v1171, v1172);
                        v1174 = v1459;
                        if ((*(_BYTE *)(v95 + 93) & 2) != 0)
                        {
                          WebCore::LayoutRect::move<float,int>((int *)v1380, 0, v1458 - v1459);
                        }
                        else
                        {
                          v1175 = (float)(v1166 + (float)((float)SLODWORD(v1380[0]) * 0.015625)) * 64.0;
                          if (v1175 >= 2147483650.0 || v1175 <= -2147483650.0)
                          {
                            if (v1175 >= v8)
                            {
                              v1176 = 0x7FFFFFFF;
                            }
                            else if (v1175 <= -2147483650.0)
                            {
                              v1176 = 0x80000000;
                            }
                            else
                            {
                              v1176 = (int)v1175;
                            }
                            v95 = v1373;
                          }
                          else
                          {
                            v1176 = (int)v1175;
                          }
                          LODWORD(v1380[0]) = v1176;
                        }
                        v1177 = ceilf((float)(v1174 - v1166) * 64.0);
                        if (v1177 >= v10 || v1177 <= v11)
                        {
                          if (v1177 >= 2147500000.0)
                          {
                            v1178 = 0x7FFFFFFF;
                          }
                          else if (v1177 <= -2147500000.0)
                          {
                            v1178 = 0x80000000;
                          }
                          else
                          {
                            v1178 = (int)v1177;
                          }
                          v95 = v1373;
                        }
                        else
                        {
                          v1178 = (int)v1177;
                        }
                        LODWORD(v1380[1]) = v1178;
                        WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v1436, v1173);
                      }
                      else
                      {
                        if (!v1154)
                          goto LABEL_2157;
LABEL_2145:
                        v1157 = *(WebCore::FontCascadeFonts **)(v1153 + 248);
                        if (v1157)
                          ++*(_DWORD *)v1157;
                        v1158 = *((_BYTE *)v1157 + 152) & 3;
                        if (v1158 == 2)
                        {
                          WebCore::FontCascadeFonts::determineCanTakeFixedPitchFastContentMeasuring(v1157, (const WebCore::FontCascadeDescription *)(v1153 + 48));
                          v1158 = *((_BYTE *)v1157 + 152) & 3;
                        }
                        if (*(_DWORD *)v1157 == 1)
                        {
                          WebCore::FontCascadeFonts::~FontCascadeFonts(v1157, v1127);
                          WTF::fastFree(v1231, v1232);
                        }
                        else
                        {
                          --*(_DWORD *)v1157;
                        }
                        v144 = v1158 == 1;
                        v95 = v1373;
                        if (v144)
                        {
                          WebCore::FontCascade::adjustSelectionRectForSimpleTextWithFixedPitch((WebCore::FontCascade *)(v1153 + 32), v1366, (WebCore::LayoutRect *)v1380, v7, v1371);
                        }
                        else
                        {
LABEL_2157:
                          if (*(_BYTE *)(v1153 + 261) || *(_BYTE *)(v1153 + 262))
                          {
                            if ((_DWORD)v7)
                              goto LABEL_2158;
                            v1159 = *(_QWORD *)(v95 + 64);
                            if (v1159)
                              LODWORD(v1159) = *(_DWORD *)(v1159 + 4);
                            if ((_DWORD)v1371 != (_DWORD)v1159)
                              goto LABEL_2158;
                          }
                          WebCore::FontCascade::adjustSelectionRectForSimpleText((WebCore::FontCascade *)(v1153 + 32), v1366, (WebCore::LayoutRect *)v1380);
                        }
                      }
                      v1179 = *(_QWORD *)(v95 + 64);
                      if (v1179)
                        LODWORD(v1179) = *(_DWORD *)(v1179 + 4);
                      if ((_DWORD)v1179 == (_DWORD)v1369)
                      {
                        v1180 = LODWORD(v1380[0]) + LODWORD(v1380[1]);
                        v1181 = __OFADD__(v1380[0], v1380[1]);
                        v1182 = LODWORD(v1380[0]) + LODWORD(v1380[1]);
                        if (__OFADD__(v1380[0], v1380[1]))
                          v1182 = (LODWORD(v1380[0]) >> 31) + 0x7FFFFFFF;
                        v1183 = v1142 + v1147;
                        if (__OFADD__(v1142, v1147))
                          v1183 = (v1142 >> 31) + 0x7FFFFFFF;
                        if (v1182 <= v1183)
                          v1182 = v1183;
                        if (v1181)
                          v1180 = (LODWORD(v1380[0]) >> 31) + 0x7FFFFFFF;
                        v677 = __OFSUB__(v1182, v1180);
                        v1184 = v1182 - v1180;
                        if (v677)
                          v1184 = (v1182 >> 31) + 0x7FFFFFFF;
                        v677 = __OFADD__(v1380[1], v1184);
                        v1185 = LODWORD(v1380[1]) + v1184;
                        if (v677)
                          v1185 = (LODWORD(v1380[1]) >> 31) + 0x7FFFFFFF;
                        LODWORD(v1380[1]) = v1185 & ~(v1185 >> 31);
                      }
                      v1186 = *(_QWORD *)(*(_QWORD *)(v95 + 24) + 528);
                      v1187 = 1.0;
                      if (v1186)
                      {
                        v1188 = *(_QWORD *)(v1186 + 8);
                        v94 = v1367;
                        v5 = (uint64_t)v1380;
                        LOBYTE(v2) = 0;
                        if (v1188)
                        {
                          v1189 = *(_QWORD *)(v1188 + 24);
                          if (v1189)
                          {
                            v1190 = *(_QWORD *)(v1189 + 8);
                            if (v1190)
                            {
                              v1191 = (*(_DWORD *)v1190)++;
                              v1187 = *(float *)(v1190 + 364);
                              if (v1191)
                              {
                                *(_DWORD *)v1190 = v1191;
                              }
                              else
                              {
                                WebCore::Page::~Page(v1190);
                                WTF::fastFree(v1233, v1234);
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v94 = v1367;
                        v5 = (uint64_t)v1380;
                        LOBYTE(v2) = 0;
                      }
                      v1192 = (double)SLODWORD(v1380[0]) * 0.015625;
                      if (v1192 < 0.0)
                        v1193 = round((v1192 + (double)-LODWORD(v1380[0])) * v1187) / v1187
                              - (double)-LODWORD(v1380[0]);
                      else
                        v1193 = round(v1192 * v1187) / v1187;
                      v1194 = (double)SHIDWORD(v1380[0]) * 0.015625;
                      if (v1194 < 0.0)
                        v1195 = round((v1194 + (double)-HIDWORD(v1380[0])) * v1187) / v1187
                              - (double)-HIDWORD(v1380[0]);
                      else
                        v1195 = round(v1194 * v1187) / v1187;
                      v1196 = (uint64_t)v1380[0] & 0x3F;
                      if (SLODWORD(v1380[0]) <= 0)
                        v1196 = -(-LODWORD(v1380[0]) & 0x3F);
                      v1197 = v1196 + LODWORD(v1380[1]);
                      if (__OFADD__(v1196, v1380[1]))
                        v1197 = v6 + (v1196 >> 31);
                      v1198 = (double)v1197 * 0.015625;
                      if (v1198 < 0.0)
                        v1199 = round((v1198 + (double)-v1197) * v1187) / v1187
                              - (double)-v1197;
                      else
                        v1199 = round(v1198 * v1187) / v1187;
                      v1200 = (double)v1196 * 0.015625;
                      if (v1200 < 0.0)
                        v1201 = round((v1200 + (double)-v1196) * v1187) / v1187
                              - (double)-v1196;
                      else
                        v1201 = round(v1200 * v1187) / v1187;
                      v1202 = BYTE4(v1380[0]) & 0x3F;
                      if (SHIDWORD(v1380[0]) <= 0)
                        v1202 = -(-HIDWORD(v1380[0]) & 0x3F);
                      v1203 = v1202 + HIDWORD(v1380[1]);
                      if (__OFADD__(v1202, HIDWORD(v1380[1])))
                        v1203 = v6 + (v1202 >> 31);
                      v1204 = (double)v1203 * 0.015625;
                      if (v1204 < 0.0)
                        v1205 = round((v1204 + (double)-v1203) * v1187) / v1187
                              - (double)-v1203;
                      else
                        v1205 = round(v1204 * v1187) / v1187;
                      v1206 = (double)v1202 * 0.015625;
                      if (v1206 < 0.0)
                        v1207 = round((v1206 + (double)-v1202) * v1187) / v1187
                              - (double)-v1202;
                      else
                        v1207 = round(v1206 * v1187) / v1187;
                      v1208 = v1195;
                      v1209 = v1193;
                      v1210 = v1199;
                      v1211 = v1201;
                      v1212 = v1210 - v1211;
                      v1213 = v1205;
                      v1214 = v1207;
                      *(float *)v1436 = v1209;
                      *(float *)&v1436[4] = v1208;
                      *(float *)&v1436[8] = v1212;
                      *(float *)&v1436[12] = v1213 - v1214;
                      (*(void (**)(uint64_t, _BYTE *, WTF *))(*(_QWORD *)v28 + 224))(v28, v1436, v1370);
                      if (*(_DWORD *)&v1407[16] != -1)
                        ((void (*)(_BYTE *, _BYTE *))off_1E343A050[*(unsigned int *)&v1407[16]])(v1436, v1407);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 104))(v28, 1);
LABEL_2070:
                      v27 += 224;
                      if (v27 != v94)
                        continue;
                      v27 = (char *)v1374;
                      if (HIDWORD(v1375))
                      {
                        v1260 = (char *)v1374 + 224 * HIDWORD(v1375);
                        do
                        {
                          if (v27[208])
                          {
                            LOBYTE(v2) = (_BYTE)v27 - 56;
                            if (*((_QWORD *)v27 + 25))
                              WebCore::ShadowData::deleteNextLinkedListWithoutRecursion((WebCore::ShadowData *)(v27 + 144));
                            std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)v27 + 25, 0);
                            v1261 = *((unsigned int *)v27 + 46);
                            if ((_DWORD)v1261 != -1)
                              ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1261])(v1436, v27 + 176);
                            *((_DWORD *)v27 + 46) = -1;
                            if (v27[172] == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v27 + 42));
                            }
                            if (v27[164] == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v27 + 40));
                            }
                            if (v27[156] == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v27 + 38));
                            }
                            if (v27[148] == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v27 + 36));
                            }
                          }
                          v1262 = *((_QWORD *)v27 + 15);
                          if ((v1262 & 0x8000000000000) != 0)
                          {
                            v1330 = (unsigned int *)(v1262 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1331 = __ldaxr(v1330);
                              v1332 = v1331 - 1;
                            }
                            while (__stlxr(v1332, v1330));
                            if (!v1332)
                            {
                              atomic_store(1u, v1330);
                              WTF::fastFree((WTF *)v1330, v13);
                            }
                          }
                          v1263 = *((_QWORD *)v27 + 13);
                          if ((v1263 & 0x8000000000000) != 0)
                          {
                            v1333 = (unsigned int *)(v1263 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1334 = __ldaxr(v1333);
                              v1335 = v1334 - 1;
                            }
                            while (__stlxr(v1335, v1333));
                            if (!v1335)
                            {
                              atomic_store(1u, v1333);
                              WTF::fastFree((WTF *)v1333, v13);
                            }
                          }
                          v1264 = *((_QWORD *)v27 + 11);
                          if ((v1264 & 0x8000000000000) != 0)
                          {
                            v1336 = (unsigned int *)(v1264 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1337 = __ldaxr(v1336);
                              v1338 = v1337 - 1;
                            }
                            while (__stlxr(v1338, v1336));
                            if (!v1338)
                            {
                              atomic_store(1u, v1336);
                              WTF::fastFree((WTF *)v1336, v13);
                            }
                          }
                          v1265 = *((_QWORD *)v27 + 8);
                          if ((v1265 & 0x8000000000000) != 0)
                          {
                            v1339 = (unsigned int *)(v1265 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1340 = __ldaxr(v1339);
                              v1341 = v1340 - 1;
                            }
                            while (__stlxr(v1341, v1339));
                            if (!v1341)
                            {
                              atomic_store(1u, v1339);
                              WTF::fastFree((WTF *)v1339, v13);
                            }
                          }
                          v1266 = *((_QWORD *)v27 + 7);
                          if ((v1266 & 0x8000000000000) != 0)
                          {
                            v1342 = (unsigned int *)(v1266 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1343 = __ldaxr(v1342);
                              v1344 = v1343 - 1;
                            }
                            while (__stlxr(v1344, v1342));
                            if (!v1344)
                            {
                              atomic_store(1u, v1342);
                              WTF::fastFree((WTF *)v1342, v13);
                            }
                          }
                          v1267 = *((_QWORD *)v27 + 6);
                          if ((v1267 & 0x8000000000000) != 0)
                          {
                            v1345 = (unsigned int *)(v1267 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1346 = __ldaxr(v1345);
                              v1347 = v1346 - 1;
                            }
                            while (__stlxr(v1347, v1345));
                            if (!v1347)
                            {
                              atomic_store(1u, v1345);
                              WTF::fastFree((WTF *)v1345, v13);
                            }
                          }
                          v1268 = *((_QWORD *)v27 + 5);
                          if ((v1268 & 0x8000000000000) != 0)
                          {
                            v1348 = (unsigned int *)(v1268 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1349 = __ldaxr(v1348);
                              v1350 = v1349 - 1;
                            }
                            while (__stlxr(v1350, v1348));
                            if (!v1350)
                            {
                              atomic_store(1u, v1348);
                              WTF::fastFree((WTF *)v1348, v13);
                            }
                          }
                          v1269 = (WTF::StringImpl *)*((_QWORD *)v27 + 3);
                          *((_QWORD *)v27 + 3) = 0;
                          if (v1269)
                          {
                            if (*(_DWORD *)v1269 == 2)
                              WTF::StringImpl::destroy(v1269, (WTF::StringImpl *)v13);
                            else
                              *(_DWORD *)v1269 -= 2;
                          }
                          v27 += 224;
                        }
                        while (v27 != v1260);
                        v27 = (char *)v1374;
                      }
LABEL_2343:
                      if (v27)
                        WTF::fastFree((WTF *)v27, v13);
LABEL_2345:
                      v1270 = v1376;
                      if (HIDWORD(v1377))
                      {
                        v1271 = (WTF *)((char *)v1376 + 224 * HIDWORD(v1377));
                        do
                        {
                          if (*((_BYTE *)v1270 + 208))
                          {
                            LOBYTE(v2) = (_BYTE)v1270 - 56;
                            if (*((_QWORD *)v1270 + 25))
                              WebCore::ShadowData::deleteNextLinkedListWithoutRecursion((WTF *)((char *)v1270 + 144));
                            std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)v1270 + 25, 0);
                            v1272 = *((unsigned int *)v1270 + 46);
                            if ((_DWORD)v1272 != -1)
                              ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v1272])(v1436, (char *)v1270 + 176);
                            *((_DWORD *)v1270 + 46) = -1;
                            if (*((_BYTE *)v1270 + 172) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v1270 + 42));
                            }
                            if (*((_BYTE *)v1270 + 164) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v1270 + 40));
                            }
                            if (*((_BYTE *)v1270 + 156) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v1270 + 38));
                            }
                            if (*((_BYTE *)v1270 + 148) == 11)
                            {
                              {
                                WebCore::calculationValues(void)::map = 1;
                                qword_1ECE90C98 = 0;
                              }
                              WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v1270 + 36));
                            }
                          }
                          v1273 = *((_QWORD *)v1270 + 15);
                          if ((v1273 & 0x8000000000000) != 0)
                          {
                            v1309 = (unsigned int *)(v1273 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1310 = __ldaxr(v1309);
                              v1311 = v1310 - 1;
                            }
                            while (__stlxr(v1311, v1309));
                            if (!v1311)
                            {
                              atomic_store(1u, v1309);
                              WTF::fastFree((WTF *)v1309, v13);
                            }
                          }
                          v1274 = *((_QWORD *)v1270 + 13);
                          if ((v1274 & 0x8000000000000) != 0)
                          {
                            v1312 = (unsigned int *)(v1274 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1313 = __ldaxr(v1312);
                              v1314 = v1313 - 1;
                            }
                            while (__stlxr(v1314, v1312));
                            if (!v1314)
                            {
                              atomic_store(1u, v1312);
                              WTF::fastFree((WTF *)v1312, v13);
                            }
                          }
                          v1275 = *((_QWORD *)v1270 + 11);
                          if ((v1275 & 0x8000000000000) != 0)
                          {
                            v1315 = (unsigned int *)(v1275 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1316 = __ldaxr(v1315);
                              v1317 = v1316 - 1;
                            }
                            while (__stlxr(v1317, v1315));
                            if (!v1317)
                            {
                              atomic_store(1u, v1315);
                              WTF::fastFree((WTF *)v1315, v13);
                            }
                          }
                          v1276 = *((_QWORD *)v1270 + 8);
                          if ((v1276 & 0x8000000000000) != 0)
                          {
                            v1318 = (unsigned int *)(v1276 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1319 = __ldaxr(v1318);
                              v1320 = v1319 - 1;
                            }
                            while (__stlxr(v1320, v1318));
                            if (!v1320)
                            {
                              atomic_store(1u, v1318);
                              WTF::fastFree((WTF *)v1318, v13);
                            }
                          }
                          v1277 = *((_QWORD *)v1270 + 7);
                          if ((v1277 & 0x8000000000000) != 0)
                          {
                            v1321 = (unsigned int *)(v1277 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1322 = __ldaxr(v1321);
                              v1323 = v1322 - 1;
                            }
                            while (__stlxr(v1323, v1321));
                            if (!v1323)
                            {
                              atomic_store(1u, v1321);
                              WTF::fastFree((WTF *)v1321, v13);
                            }
                          }
                          v1278 = *((_QWORD *)v1270 + 6);
                          if ((v1278 & 0x8000000000000) != 0)
                          {
                            v1324 = (unsigned int *)(v1278 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1325 = __ldaxr(v1324);
                              v1326 = v1325 - 1;
                            }
                            while (__stlxr(v1326, v1324));
                            if (!v1326)
                            {
                              atomic_store(1u, v1324);
                              WTF::fastFree((WTF *)v1324, v13);
                            }
                          }
                          v1279 = *((_QWORD *)v1270 + 5);
                          if ((v1279 & 0x8000000000000) != 0)
                          {
                            v1327 = (unsigned int *)(v1279 & 0xFFFFFFFFFFFFLL);
                            do
                            {
                              v1328 = __ldaxr(v1327);
                              v1329 = v1328 - 1;
                            }
                            while (__stlxr(v1329, v1327));
                            if (!v1329)
                            {
                              atomic_store(1u, v1327);
                              WTF::fastFree((WTF *)v1327, v13);
                            }
                          }
                          v1280 = (WTF::StringImpl *)*((_QWORD *)v1270 + 3);
                          *((_QWORD *)v1270 + 3) = 0;
                          if (v1280)
                          {
                            if (*(_DWORD *)v1280 == 2)
                              WTF::StringImpl::destroy(v1280, (WTF::StringImpl *)v13);
                            else
                              *(_DWORD *)v1280 -= 2;
                          }
                          v1270 = (WTF *)((char *)v1270 + 224);
                        }
                        while (v1270 != v1271);
                        v1270 = v1376;
                      }
                      i = v1373;
                      if (v1270)
                        WTF::fastFree(v1270, v13);
                      v1281 = v1378;
                      if (HIDWORD(v1379))
                      {
                        v1290 = 40 * HIDWORD(v1379);
                        v1291 = (WTF::StringImpl **)((char *)v1378 + 24);
                        do
                        {
                          v1292 = *v1291;
                          *v1291 = 0;
                          if (v1292)
                          {
                            if (*(_DWORD *)v1292 == 2)
                              WTF::StringImpl::destroy(v1292, (WTF::StringImpl *)v13);
                            else
                              *(_DWORD *)v1292 -= 2;
                          }
                          v1291 += 5;
                          v1290 -= 40;
                        }
                        while (v1290);
                      }
                      if (v1281)
                        WTF::fastFree(v1281, v13);
LABEL_885:
                      v95 = *(_QWORD *)(i + 16);
                      if ((*(_BYTE *)(v95 + 45) & 1) != 0)
                        goto LABEL_1233;
                      v13 = *(_BYTE **)(*(_QWORD *)(v95 + 24) + 8);
                      if (!v13)
                        goto LABEL_1233;
                      if ((*((_WORD *)v13 + 14) & 2) == 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19424B790);
                      }
                      v27 = *(char **)(*(_QWORD *)(*((_QWORD *)v13 + 5) + 8) + 1496);
                      if (!v27)
                      {
LABEL_1233:
                        v1380[0] = 0;
                        v1380[1] = 0;
                        goto LABEL_895;
                      }
                      ++*(_DWORD *)v27;
                      WebCore::DocumentMarkerController::markersFor((uint64_t)v27, (uint64_t)v13, 229375, (uint64_t)v1407);
                      v1380[0] = 0;
                      v1380[1] = 0;
                      if (!*(_DWORD *)&v1407[12])
                        goto LABEL_890;
                      if (*(_DWORD *)&v1407[12] >= 0x6666667u)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19424C5F8);
                      }
                      v727 = 40 * *(_DWORD *)&v1407[12];
                      v728 = (WTF *)WTF::fastMalloc((WTF *)(40 * *(unsigned int *)&v1407[12]));
                      LODWORD(v1380[1]) = (v727 & 0xFFFFFFF8) / 0x28;
                      v1380[0] = v728;
                      v28 = *(_QWORD *)v1407;
                      if (!*(_DWORD *)&v1407[12])
                        goto LABEL_891;
                      v1371 = (WebCore::StyledMarkedText::Style *)v1437;
                      v6 = 8 * *(unsigned int *)&v1407[12];
                      LODWORD(v7) = 1;
                      v3 = 65798;
                      v4 = 65558;
                      v5 = 40;
                      while (2)
                      {
                        v729 = *(_QWORD *)(*(_QWORD *)v28 + 8);
                        v730 = *(_DWORD *)(v729 + 8);
                        if (v730 <= 511)
                        {
                          if (v730 <= 0x10)
                          {
                            if (((1 << v730) & 0x10106) != 0)
                              goto LABEL_1307;
                            if (v730 == 4)
                            {
LABEL_1339:
                              v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 24) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 296);
                              if (!*(_QWORD *)(v2 + 3056))
                              {
                                v819 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
                                v820 = WebCore::Editor::Editor(v819, (WebCore::Document *)v2);
                                v821 = *(WebCore::Editor **)(v2 + 3056);
                                *(_QWORD *)(v2 + 3056) = v820;
                                if (v821)
                                {
                                  v2 = (uint64_t)v821;
                                  WebCore::Editor::~Editor(v821, v13);
                                  if (*(_DWORD *)v2)
                                  {
                                    *(_QWORD *)(v2 + 496) = 0;
                                    *(_OWORD *)(v2 + 464) = 0u;
                                    *(_OWORD *)(v2 + 480) = 0u;
                                    *(_OWORD *)(v2 + 432) = 0u;
                                    *(_OWORD *)(v2 + 448) = 0u;
                                    *(_OWORD *)(v2 + 400) = 0u;
                                    *(_OWORD *)(v2 + 416) = 0u;
                                    *(_OWORD *)(v2 + 368) = 0u;
                                    *(_OWORD *)(v2 + 384) = 0u;
                                    *(_OWORD *)(v2 + 336) = 0u;
                                    *(_OWORD *)(v2 + 352) = 0u;
                                    *(_OWORD *)(v2 + 304) = 0u;
                                    *(_OWORD *)(v2 + 320) = 0u;
                                    *(_OWORD *)(v2 + 272) = 0u;
                                    *(_OWORD *)(v2 + 288) = 0u;
                                    *(_OWORD *)(v2 + 240) = 0u;
                                    *(_OWORD *)(v2 + 256) = 0u;
                                    *(_OWORD *)(v2 + 208) = 0u;
                                    *(_OWORD *)(v2 + 224) = 0u;
                                    *(_OWORD *)(v2 + 176) = 0u;
                                    *(_OWORD *)(v2 + 192) = 0u;
                                    *(_OWORD *)(v2 + 144) = 0u;
                                    *(_OWORD *)(v2 + 160) = 0u;
                                    *(_OWORD *)(v2 + 112) = 0u;
                                    *(_OWORD *)(v2 + 128) = 0u;
                                    *(_OWORD *)(v2 + 80) = 0u;
                                    *(_OWORD *)(v2 + 96) = 0u;
                                    *(_OWORD *)(v2 + 48) = 0u;
                                    *(_OWORD *)(v2 + 64) = 0u;
                                    *(_OWORD *)(v2 + 16) = 0u;
                                    *(_OWORD *)(v2 + 32) = 0u;
                                    *(_OWORD *)v2 = 0u;
                                  }
                                  else
                                  {
                                    WTF::fastFree((WTF *)v2, v13);
                                  }
                                }
                              }
                            }
                          }
LABEL_1357:
                          v28 += 8;
                          v6 -= 8;
                          if (v6)
                            continue;
LABEL_1360:
                          v28 = *(_QWORD *)v1407;
                          if (*(_DWORD *)&v1407[12])
                          {
                            v747 = *(_QWORD *)v1407 + 8 * *(unsigned int *)&v1407[12];
                            do
                            {
                              v748 = *(unsigned int **)v28;
                              *(_QWORD *)v28 = 0;
                              if (v748)
                              {
                                do
                                {
                                  v749 = __ldaxr(v748);
                                  v750 = v749 - 1;
                                }
                                while (__stlxr(v750, v748));
                                if (!v750)
                                {
                                  atomic_store(1u, v748);
                                  WTF::fastFree((WTF *)v748, v13);
                                }
                              }
                              v28 += 8;
                            }
                            while (v28 != v747);
LABEL_890:
                            v28 = *(_QWORD *)v1407;
                          }
LABEL_891:
                          if (v28)
                          {
                            *(_QWORD *)v1407 = 0;
                            *(_DWORD *)&v1407[8] = 0;
                            WTF::fastFree((WTF *)v28, v13);
                          }
                          if (!*(_DWORD *)v27)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19424B7B0);
                          }
                          --*(_DWORD *)v27;
                          v95 = *(_QWORD *)(v1373 + 16);
LABEL_895:
                          v537 = *(_QWORD *)(v95 + 32);
                          v538 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                          for (i = v1373; v537; v537 = *(_QWORD *)(v539 + 32))
                          {
                            v539 = *(_QWORD *)(v537 + 8);
                            if (!v539)
                              break;
                            if ((*(_BYTE *)(v539 + 45) & 1) == 0)
                            {
                              v540 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                              if (*MEMORY[0x1E0CBF2F8])
                                *(_DWORD *)v540 += 2;
                              if ((*(_BYTE *)(v539 + 103) & 4) != 0)
                              {
                                v717 = *(_QWORD *)(v539 + 128);
                                if (v717 && (v751 = *(unsigned int *)(v717 + 12), (_DWORD)v751))
                                {
                                  v752 = *(uint64_t **)v717;
                                  v753 = 8 * v751;
                                  while (1)
                                  {
                                    CachedPseudoStyle = *v752;
                                    if ((*(_QWORD *)(*v752 + 16) & 0xF80000000000) == 0x580000000000
                                      && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(CachedPseudoStyle + 8) + 40)
                                                             + 592) == v540)
                                    {
                                      break;
                                    }
                                    ++v752;
                                    v753 -= 8;
                                    if (!v753)
                                      goto LABEL_1278;
                                  }
                                }
                                else
                                {
LABEL_1278:
                                  *(_DWORD *)v1436 = 11;
                                  if (v540)
                                    *(_DWORD *)v540 += 2;
                                  *(_QWORD *)&v1436[8] = v540;
                                  v1436[16] = 0;
                                  v1437[0] = 0;
                                  WebCore::RenderElement::getUncachedPseudoStyle(v539, (int *)v1436, 0, 0, (WebCore::Style **)v1407);
                                  v719 = *(WTF::StringImpl **)&v1436[8];
                                  *(_QWORD *)&v1436[8] = 0;
                                  if (v719)
                                  {
                                    if (*(_DWORD *)v719 == 2)
                                      WTF::StringImpl::destroy(v719, v718);
                                    else
                                      *(_DWORD *)v719 -= 2;
                                  }
                                  v720 = *(_QWORD *)v1407;
                                  if (*(_QWORD *)v1407)
                                  {
                                    *(_QWORD *)v1407 = 0;
                                    *(_QWORD *)v1436 = v720;
                                    CachedPseudoStyle = WebCore::RenderStyle::addCachedPseudoStyle(v539 + 80, (uint64_t *)v1436);
                                    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100]((WebCore::RenderStyle **)v1436, v721);
                                  }
                                  else
                                  {
                                    CachedPseudoStyle = 0;
                                  }
                                  std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100]((WebCore::RenderStyle **)v1407, v718);
                                }
                              }
                              else
                              {
                                CachedPseudoStyle = 0;
                              }
                              if (v540)
                              {
                                if (*(_DWORD *)v540 == 2)
                                  WTF::StringImpl::destroy(v540, (WTF::StringImpl *)v13);
                                else
                                  *(_DWORD *)v540 -= 2;
                              }
                              if (CachedPseudoStyle)
                                goto LABEL_906;
                              v560 = *(_QWORD *)(*(_QWORD *)(v539 + 24) + 8);
                              if ((*(_WORD *)(v560 + 28) & 8) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19424B7E0);
                              }
                              v561 = **(_QWORD **)(v560 + 40);
                              if (v561 && (*(_WORD *)(v561 + 28) & 0x80) != 0)
                              {
                                *(_DWORD *)(v561 + 24) += 2;
                                if (!*(_BYTE *)(v561 + 193)
                                  && (v629 = *(_QWORD *)(v561 + 200)) != 0
                                  && (v630 = *(_QWORD *)(v629 + 8)) != 0)
                                {
                                  *(_DWORD *)(v630 + 24) += 2;
                                  *(_QWORD *)v1436 = v630;
                                  while ((*(_QWORD *)(v630 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                                  {
                                    v631 = *(_QWORD *)((*(_QWORD *)(v630 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
                                    if (!v631 || (*(_QWORD *)(v631 + 16) & 0x1FLL) != 0x12)
                                      break;
                                    v757 = *(_QWORD *)(v630 + 32);
                                    if (v757)
                                    {
                                      if ((*(_WORD *)(v757 + 28) & 8) != 0)
                                        v758 = *(_QWORD *)(v630 + 32);
                                      else
                                        v758 = 0;
                                    }
                                    else
                                    {
                                      v758 = 0;
                                    }
                                    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v1436, v758);
                                    v630 = *(_QWORD *)v1436;
                                    i = v1373;
                                    if (!*(_QWORD *)v1436)
                                      goto LABEL_942;
                                  }
                                  v540 = (WTF::StringImpl *)(*(_QWORD *)(v630 + 64) & 0xFFFFFFFFFFFFLL);
                                  if (v540 && (*(_BYTE *)((*(_QWORD *)(v630 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19424BC10);
                                  }
                                  *(_QWORD *)v1436 = 0;
                                  if (*(_DWORD *)(v630 + 24) == 2)
                                  {
                                    if ((*(_WORD *)(v630 + 30) & 0x400) == 0)
                                      WebCore::Node::removedLastRef((WebCore::Node *)v630, v13);
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v630 + 24) -= 2;
                                  }
                                  v563 = 1;
                                }
                                else
                                {
LABEL_942:
                                  v563 = 0;
                                }
                                if (*(_DWORD *)(v561 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v561 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v561, v13);
                                }
                                else
                                {
                                  *(_DWORD *)(v561 + 24) -= 2;
                                }
                                v564 = v563 ^ 1;
                                if (!v540)
                                  v564 = 1;
                                if ((v564 & 1) == 0)
                                {
                                  *(_DWORD *)v1436 = 11;
                                  v565 = *v538;
                                  if (*v538)
                                    *(_DWORD *)v565 += 2;
                                  *(_QWORD *)&v1436[8] = v565;
                                  CachedPseudoStyle = WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v540, (uint64_t)v1436, 0);
                                  v566 = *(WTF::StringImpl **)&v1436[8];
                                  *(_QWORD *)&v1436[8] = 0;
                                  if (v566)
                                  {
                                    if (*(_DWORD *)v566 == 2)
                                      WTF::StringImpl::destroy(v566, (WTF::StringImpl *)v13);
                                    else
                                      *(_DWORD *)v566 -= 2;
                                  }
                                  if (CachedPseudoStyle)
                                  {
LABEL_906:
                                    if ((*(_DWORD *)(CachedPseudoStyle + 40) & 0x78000) != 0)
                                    {
                                      v542 = v1380[0];
                                      v543 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                                      if (HIDWORD(v1380[1]))
                                      {
                                        v544 = 0;
                                        v545 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                                        v7 = (unint64_t)v545;
                                        do
                                        {
                                          if (*((_BYTE *)v542 + 12) == 4)
                                          {
                                            v546 = v542;
                                            if ((WTF *)v7 != (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1])))
                                            {
                                              if (v545 == v542)
                                              {
                                                v546 = (WTF *)v7;
                                              }
                                              else
                                              {
                                                if ((unint64_t)v545 <= v7)
                                                {
                                                  v554 = 0;
                                                  v552 = (v542 - v545) / 40;
                                                  do
                                                  {
                                                    v555 = v7 + 40 * v552 + v554;
                                                    *(_DWORD *)(v555 - 40) = 0;
                                                    v556 = (char *)v542 + v554;
                                                    v557 = *(_OWORD *)((char *)v542 + v554 - 36);
                                                    *(_DWORD *)(v555 - 20) = *(_DWORD *)((char *)v542 + v554 - 20);
                                                    *(_OWORD *)(v555 - 36) = v557;
                                                    v558 = *(_QWORD *)((char *)v542 + v554 - 16);
                                                    *((_QWORD *)v556 - 2) = 0;
                                                    *(_QWORD *)(v555 - 16) = v558;
                                                    *(_DWORD *)(v555 - 8) = *(_DWORD *)((char *)v542 + v554 - 8);
                                                    v559 = *(WTF::StringImpl **)((char *)v542 + v554 - 16);
                                                    *((_QWORD *)v556 - 2) = 0;
                                                    if (v559)
                                                    {
                                                      if (*(_DWORD *)v559 == 2)
                                                        WTF::StringImpl::destroy(v559, (WTF::StringImpl *)v13);
                                                      else
                                                        *(_DWORD *)v559 -= 2;
                                                    }
                                                    v554 -= 40;
                                                  }
                                                  while ((WTF *)((char *)v542 + v554) != v545);
                                                }
                                                else
                                                {
                                                  v547 = v7;
                                                  v548 = v545;
                                                  do
                                                  {
                                                    *(_DWORD *)v547 = 0;
                                                    v549 = *(_OWORD *)((char *)v548 + 4);
                                                    *(_DWORD *)(v547 + 20) = *((_DWORD *)v548 + 5);
                                                    *(_OWORD *)(v547 + 4) = v549;
                                                    v550 = *((_QWORD *)v548 + 3);
                                                    *((_QWORD *)v548 + 3) = 0;
                                                    *(_QWORD *)(v547 + 24) = v550;
                                                    *(_DWORD *)(v547 + 32) = *((_DWORD *)v548 + 8);
                                                    v551 = (WTF::StringImpl *)*((_QWORD *)v548 + 3);
                                                    *((_QWORD *)v548 + 3) = 0;
                                                    if (v551)
                                                    {
                                                      if (*(_DWORD *)v551 == 2)
                                                        WTF::StringImpl::destroy(v551, (WTF::StringImpl *)v13);
                                                      else
                                                        *(_DWORD *)v551 -= 2;
                                                    }
                                                    v548 = (WTF *)((char *)v548 + 40);
                                                    v547 += 40;
                                                  }
                                                  while (v548 != v542);
                                                  v552 = 0xCCCCCCCCCCCCCCCDLL * ((v542 - v545) >> 3);
                                                }
                                                v546 = (WTF *)(v7 + 40 * v552);
                                              }
                                            }
                                            v553 = (WTF::StringImpl *)*((_QWORD *)v542 + 3);
                                            *((_QWORD *)v542 + 3) = 0;
                                            if (v553)
                                            {
                                              if (*(_DWORD *)v553 == 2)
                                                WTF::StringImpl::destroy(v553, (WTF::StringImpl *)v13);
                                              else
                                                *(_DWORD *)v553 -= 2;
                                            }
                                            v545 = (WTF *)((char *)v542 + 40);
                                            ++v544;
                                            v7 = (unint64_t)v546;
                                          }
                                          else
                                          {
                                            v546 = (WTF *)v7;
                                          }
                                          v542 = (WTF *)((char *)v542 + 40);
                                        }
                                        while (v542 < v543);
                                        v542 = v1380[0];
                                        v567 = HIDWORD(v1380[1]);
                                        v543 = v546;
                                        v538 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                                      }
                                      else
                                      {
                                        v567 = 0;
                                        v544 = 0;
                                        v545 = v1380[0];
                                      }
                                      v568 = (WTF *)((char *)v542 + 40 * v567);
                                      if (v545 != v568)
                                      {
                                        if (v545 <= v543)
                                        {
                                          v635 = (uint64_t)v543 + 40 * ((v568 - v545) / 40) - 16;
                                          do
                                          {
                                            *(_DWORD *)(v635 - 24) = 0;
                                            v636 = *(_OWORD *)((char *)v568 - 36);
                                            *(_DWORD *)(v635 - 4) = *((_DWORD *)v568 - 5);
                                            *(_OWORD *)(v635 - 20) = v636;
                                            v637 = *((_QWORD *)v568 - 2);
                                            *((_QWORD *)v568 - 2) = 0;
                                            *(_QWORD *)v635 = v637;
                                            *(_DWORD *)(v635 + 8) = *((_DWORD *)v568 - 2);
                                            v638 = (WTF::StringImpl *)*((_QWORD *)v568 - 2);
                                            *((_QWORD *)v568 - 2) = 0;
                                            if (v638)
                                            {
                                              if (*(_DWORD *)v638 == 2)
                                                WTF::StringImpl::destroy(v638, (WTF::StringImpl *)v13);
                                              else
                                                *(_DWORD *)v638 -= 2;
                                            }
                                            v568 = (WTF::StringImpl *)((char *)v568 - 40);
                                            v635 -= 40;
                                          }
                                          while (v568 != v545);
                                        }
                                        else
                                        {
                                          WTF::VectorMover<false,WebCore::MarkedText>::move((uint64_t)v545, v568, (uint64_t)v543);
                                        }
                                      }
                                      HIDWORD(v1380[1]) -= v544;
                                      i = v1373;
                                    }
                                  }
                                }
                              }
                              break;
                            }
                          }
                          for (j = *(_QWORD *)(*(_QWORD *)(i + 16) + 32); j; j = *(_QWORD *)(v570 + 32))
                          {
                            v570 = *(_QWORD *)(j + 8);
                            if (!v570)
                              break;
                            if ((*(_BYTE *)(v570 + 45) & 1) == 0)
                            {
                              v571 = *v538;
                              if (*v538)
                                *(_DWORD *)v571 += 2;
                              if ((*(_BYTE *)(v570 + 102) & 4) != 0)
                              {
                                v722 = *(_QWORD *)(v570 + 128);
                                if (v722 && (v754 = *(unsigned int *)(v722 + 12), (_DWORD)v754))
                                {
                                  v755 = *(uint64_t **)v722;
                                  v756 = 8 * v754;
                                  while (1)
                                  {
                                    v572 = *v755;
                                    if ((*(_QWORD *)(*v755 + 16) & 0xF80000000000) == 0x180000000000
                                      && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v572 + 8) + 40) + 592) == v571)
                                    {
                                      break;
                                    }
                                    ++v755;
                                    v756 -= 8;
                                    if (!v756)
                                      goto LABEL_1287;
                                  }
                                }
                                else
                                {
LABEL_1287:
                                  *(_DWORD *)v1436 = 3;
                                  if (v571)
                                    *(_DWORD *)v571 += 2;
                                  *(_QWORD *)&v1436[8] = v571;
                                  v1436[16] = 0;
                                  v1437[0] = 0;
                                  WebCore::RenderElement::getUncachedPseudoStyle(v570, (int *)v1436, 0, 0, (WebCore::Style **)v1407);
                                  v724 = *(WTF::StringImpl **)&v1436[8];
                                  *(_QWORD *)&v1436[8] = 0;
                                  if (v724)
                                  {
                                    if (*(_DWORD *)v724 == 2)
                                      WTF::StringImpl::destroy(v724, v723);
                                    else
                                      *(_DWORD *)v724 -= 2;
                                  }
                                  v725 = *(_QWORD *)v1407;
                                  if (*(_QWORD *)v1407)
                                  {
                                    *(_QWORD *)v1407 = 0;
                                    *(_QWORD *)v1436 = v725;
                                    v572 = WebCore::RenderStyle::addCachedPseudoStyle(v570 + 80, (uint64_t *)v1436);
                                    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100]((WebCore::RenderStyle **)v1436, v726);
                                  }
                                  else
                                  {
                                    v572 = 0;
                                  }
                                  std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100]((WebCore::RenderStyle **)v1407, v723);
                                }
                              }
                              else
                              {
                                v572 = 0;
                              }
                              if (v571)
                              {
                                if (*(_DWORD *)v571 == 2)
                                  WTF::StringImpl::destroy(v571, (WTF::StringImpl *)v13);
                                else
                                  *(_DWORD *)v571 -= 2;
                              }
                              if (v572)
                                goto LABEL_971;
                              v591 = *(_QWORD *)(*(_QWORD *)(v570 + 24) + 8);
                              if ((*(_WORD *)(v591 + 28) & 8) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19424B800);
                              }
                              v592 = **(_QWORD **)(v591 + 40);
                              if (v592 && (*(_WORD *)(v592 + 28) & 0x80) != 0)
                              {
                                *(_DWORD *)(v592 + 24) += 2;
                                if (!*(_BYTE *)(v592 + 193)
                                  && (v632 = *(_QWORD *)(v592 + 200)) != 0
                                  && (v633 = *(_QWORD *)(v632 + 8)) != 0)
                                {
                                  *(_DWORD *)(v633 + 24) += 2;
                                  *(_QWORD *)v1436 = v633;
                                  while ((*(_QWORD *)(v633 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                                  {
                                    v634 = *(_QWORD *)((*(_QWORD *)(v633 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
                                    if (!v634 || (*(_QWORD *)(v634 + 16) & 0x1FLL) != 0x12)
                                      break;
                                    v759 = *(_QWORD *)(v633 + 32);
                                    if (v759)
                                    {
                                      if ((*(_WORD *)(v759 + 28) & 8) != 0)
                                        v760 = *(_QWORD *)(v633 + 32);
                                      else
                                        v760 = 0;
                                    }
                                    else
                                    {
                                      v760 = 0;
                                    }
                                    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)v1436, v760);
                                    v633 = *(_QWORD *)v1436;
                                    i = v1373;
                                    if (!*(_QWORD *)v1436)
                                      goto LABEL_1007;
                                  }
                                  v571 = (WTF::StringImpl *)(*(_QWORD *)(v633 + 64) & 0xFFFFFFFFFFFFLL);
                                  if (v571 && (*(_BYTE *)((*(_QWORD *)(v633 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19424BC30);
                                  }
                                  *(_QWORD *)v1436 = 0;
                                  if (*(_DWORD *)(v633 + 24) == 2)
                                  {
                                    if ((*(_WORD *)(v633 + 30) & 0x400) == 0)
                                      WebCore::Node::removedLastRef((WebCore::Node *)v633, v13);
                                  }
                                  else
                                  {
                                    *(_DWORD *)(v633 + 24) -= 2;
                                  }
                                  v594 = 1;
                                }
                                else
                                {
LABEL_1007:
                                  v594 = 0;
                                }
                                if (*(_DWORD *)(v592 + 24) == 2)
                                {
                                  if ((*(_WORD *)(v592 + 30) & 0x400) == 0)
                                    WebCore::Node::removedLastRef((WebCore::Node *)v592, v13);
                                }
                                else
                                {
                                  *(_DWORD *)(v592 + 24) -= 2;
                                }
                                v595 = v594 ^ 1;
                                if (!v571)
                                  v595 = 1;
                                if ((v595 & 1) == 0)
                                {
                                  *(_DWORD *)v1436 = 3;
                                  v596 = *v538;
                                  if (*v538)
                                    *(_DWORD *)v596 += 2;
                                  *(_QWORD *)&v1436[8] = v596;
                                  v572 = WebCore::RenderElement::getCachedPseudoStyle((uint64_t)v571, (uint64_t)v1436, 0);
                                  v597 = *(WTF::StringImpl **)&v1436[8];
                                  *(_QWORD *)&v1436[8] = 0;
                                  if (v597)
                                  {
                                    if (*(_DWORD *)v597 == 2)
                                      WTF::StringImpl::destroy(v597, (WTF::StringImpl *)v13);
                                    else
                                      *(_DWORD *)v597 -= 2;
                                  }
                                  if (v572)
                                  {
LABEL_971:
                                    if ((*(_DWORD *)(v572 + 40) & 0x78000) != 0)
                                    {
                                      v573 = v1380[0];
                                      v574 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                                      if (HIDWORD(v1380[1]))
                                      {
                                        v575 = 0;
                                        v576 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                                        v577 = v576;
                                        do
                                        {
                                          if (*((_BYTE *)v573 + 12) == 1)
                                          {
                                            v578 = v573;
                                            if (v577 != (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1])))
                                            {
                                              if (v576 == v573)
                                              {
                                                v578 = v577;
                                              }
                                              else
                                              {
                                                if (v576 <= v577)
                                                {
                                                  v7 = 0;
                                                  v584 = (v573 - v576) / 40;
                                                  do
                                                  {
                                                    v586 = (char *)v577 + 40 * v584 + v7;
                                                    *((_DWORD *)v586 - 10) = 0;
                                                    v587 = (char *)v573 + v7;
                                                    v588 = *(_OWORD *)((char *)v573 + v7 - 36);
                                                    *((_DWORD *)v586 - 5) = *(_DWORD *)((char *)v573 + v7 - 20);
                                                    *(_OWORD *)(v586 - 36) = v588;
                                                    v589 = *(_QWORD *)((char *)v573 + v7 - 16);
                                                    *((_QWORD *)v587 - 2) = 0;
                                                    *((_QWORD *)v586 - 2) = v589;
                                                    *((_DWORD *)v586 - 2) = *(_DWORD *)((char *)v573 + v7 - 8);
                                                    v590 = *(WTF::StringImpl **)((char *)v573 + v7 - 16);
                                                    *((_QWORD *)v587 - 2) = 0;
                                                    if (v590)
                                                    {
                                                      if (*(_DWORD *)v590 == 2)
                                                        WTF::StringImpl::destroy(v590, (WTF::StringImpl *)v13);
                                                      else
                                                        *(_DWORD *)v590 -= 2;
                                                    }
                                                    v7 -= 40;
                                                  }
                                                  while ((WTF *)((char *)v573 + v7) != v576);
                                                }
                                                else
                                                {
                                                  v579 = v577;
                                                  v580 = v576;
                                                  do
                                                  {
                                                    *(_DWORD *)v579 = 0;
                                                    v581 = *(_OWORD *)((char *)v580 + 4);
                                                    *((_DWORD *)v579 + 5) = *((_DWORD *)v580 + 5);
                                                    *(_OWORD *)((char *)v579 + 4) = v581;
                                                    v582 = *((_QWORD *)v580 + 3);
                                                    *((_QWORD *)v580 + 3) = 0;
                                                    *((_QWORD *)v579 + 3) = v582;
                                                    *((_DWORD *)v579 + 8) = *((_DWORD *)v580 + 8);
                                                    v583 = (WTF::StringImpl *)*((_QWORD *)v580 + 3);
                                                    *((_QWORD *)v580 + 3) = 0;
                                                    if (v583)
                                                    {
                                                      if (*(_DWORD *)v583 == 2)
                                                        WTF::StringImpl::destroy(v583, (WTF::StringImpl *)v13);
                                                      else
                                                        *(_DWORD *)v583 -= 2;
                                                    }
                                                    v580 = (WTF *)((char *)v580 + 40);
                                                    v579 = (WTF *)((char *)v579 + 40);
                                                  }
                                                  while (v580 != v573);
                                                  v584 = 0xCCCCCCCCCCCCCCCDLL * ((v573 - v576) >> 3);
                                                }
                                                v578 = (WTF *)((char *)v577 + 40 * v584);
                                              }
                                            }
                                            v585 = (WTF::StringImpl *)*((_QWORD *)v573 + 3);
                                            *((_QWORD *)v573 + 3) = 0;
                                            if (v585)
                                            {
                                              if (*(_DWORD *)v585 == 2)
                                                WTF::StringImpl::destroy(v585, (WTF::StringImpl *)v13);
                                              else
                                                *(_DWORD *)v585 -= 2;
                                            }
                                            v576 = (WTF *)((char *)v573 + 40);
                                            ++v575;
                                            v577 = v578;
                                          }
                                          else
                                          {
                                            v578 = v577;
                                          }
                                          v573 = (WTF *)((char *)v573 + 40);
                                        }
                                        while (v573 < v574);
                                        v573 = v1380[0];
                                        v598 = HIDWORD(v1380[1]);
                                        v574 = v578;
                                        i = v1373;
                                      }
                                      else
                                      {
                                        v598 = 0;
                                        v575 = 0;
                                        v576 = v1380[0];
                                      }
                                      v599 = (WTF *)((char *)v573 + 40 * v598);
                                      if (v576 != v599)
                                      {
                                        if (v576 <= v574)
                                        {
                                          v639 = (uint64_t)v574 + 40 * ((v599 - v576) / 40) - 16;
                                          do
                                          {
                                            *(_DWORD *)(v639 - 24) = 0;
                                            v640 = *(_OWORD *)((char *)v599 - 36);
                                            *(_DWORD *)(v639 - 4) = *((_DWORD *)v599 - 5);
                                            *(_OWORD *)(v639 - 20) = v640;
                                            v641 = *((_QWORD *)v599 - 2);
                                            *((_QWORD *)v599 - 2) = 0;
                                            *(_QWORD *)v639 = v641;
                                            *(_DWORD *)(v639 + 8) = *((_DWORD *)v599 - 2);
                                            v642 = (WTF::StringImpl *)*((_QWORD *)v599 - 2);
                                            *((_QWORD *)v599 - 2) = 0;
                                            if (v642)
                                            {
                                              if (*(_DWORD *)v642 == 2)
                                                WTF::StringImpl::destroy(v642, (WTF::StringImpl *)v13);
                                              else
                                                *(_DWORD *)v642 -= 2;
                                            }
                                            v599 = (WTF::StringImpl *)((char *)v599 - 40);
                                            v639 -= 40;
                                          }
                                          while (v599 != v576);
                                        }
                                        else
                                        {
                                          WTF::VectorMover<false,WebCore::MarkedText>::move((uint64_t)v576, v599, (uint64_t)v574);
                                        }
                                      }
                                      HIDWORD(v1380[1]) -= v575;
                                    }
                                  }
                                }
                              }
                              break;
                            }
                          }
                          v600 = HIDWORD(v1380[1]);
                          if (!HIDWORD(v1380[1]))
                          {
                            v601 = v1380[0];
                            goto LABEL_1027;
                          }
                          *(_QWORD *)v1407 = 0;
                          *(_QWORD *)&v1407[8] = 0;
                          v761 = (2 * HIDWORD(v1380[1]));
                          if ((_DWORD)v761)
                          {
                            if (v761 >> 28)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19424C628);
                            }
                            v762 = WTF::fastMalloc((WTF *)(16 * v761));
                            *(_DWORD *)&v1407[8] = 2 * v600;
                            *(_QWORD *)v1407 = v762;
                            if (HIDWORD(v1380[1]))
                            {
                              v763 = v1380[0];
                              v764 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                              goto LABEL_1406;
                            }
                            v771 = 0;
                          }
                          else
                          {
                            v763 = v1380[0];
                            v764 = (WTF *)((char *)v1380[0] + 40 * HIDWORD(v1380[1]));
                            do
                            {
LABEL_1406:
                              *(_DWORD *)v1436 = 0;
                              *(_DWORD *)&v1436[4] = *((_DWORD *)v763 + 1);
                              *(_QWORD *)&v1436[8] = v763;
                              ++*(_DWORD *)v763;
                              v765 = *(_DWORD *)&v1407[12];
                              if (*(_DWORD *)&v1407[12] == *(_DWORD *)&v1407[8])
                              {
                                WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset>((uint64_t)v1407, (unint64_t)v1436);
                              }
                              else
                              {
                                v766 = (_QWORD *)(*(_QWORD *)v1407 + 16 * *(unsigned int *)&v1407[12]);
                                *v766 = *(_QWORD *)v1436;
                                v767 = *(_QWORD *)&v1436[8];
                                *(_QWORD *)&v1436[8] = 0;
                                v766[1] = v767;
                                *(_DWORD *)&v1407[12] = v765 + 1;
                              }
                              if (*(_QWORD *)&v1436[8])
                              {
                                if (!**(_DWORD **)&v1436[8])
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19424C3B0);
                                }
                                --**(_DWORD **)&v1436[8];
                              }
                              *(_DWORD *)v1436 = 1;
                              *(_DWORD *)&v1436[4] = *((_DWORD *)v763 + 2);
                              *(_QWORD *)&v1436[8] = v763;
                              ++*(_DWORD *)v763;
                              v768 = *(_DWORD *)&v1407[12];
                              if (*(_DWORD *)&v1407[12] == *(_DWORD *)&v1407[8])
                              {
                                WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset>((uint64_t)v1407, (unint64_t)v1436);
                              }
                              else
                              {
                                v769 = (_QWORD *)(*(_QWORD *)v1407 + 16 * *(unsigned int *)&v1407[12]);
                                *v769 = *(_QWORD *)v1436;
                                v770 = *(_QWORD *)&v1436[8];
                                *(_QWORD *)&v1436[8] = 0;
                                v769[1] = v770;
                                *(_DWORD *)&v1407[12] = v768 + 1;
                              }
                              if (*(_QWORD *)&v1436[8])
                              {
                                if (!**(_DWORD **)&v1436[8])
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19424C3D0);
                                }
                                --**(_DWORD **)&v1436[8];
                              }
                              v763 = (WTF *)((char *)v763 + 40);
                            }
                            while (v763 != v764);
                            v762 = *(_QWORD *)v1407;
                            v771 = *(unsigned int *)&v1407[12];
                          }
                          std::sort[abi:sn180100]<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset *,WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::$_0>(v762, v762 + 16 * v771);
                          v1404[0] = 0;
                          v1404[1] = 0;
                          if (v600 >= 0x6666667)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19424C618);
                          }
                          v772 = (WTF *)(40 * v600);
                          v773 = (WTF *)WTF::fastMalloc(v772);
                          LODWORD(v1404[1]) = (v772 & 0xFFFFFFF8) / 0x28;
                          v1404[0] = v773;
                          v1406[0] = 0;
                          v775 = *(unsigned int *)&v1407[12];
                          if (!*(_DWORD *)&v1407[12])
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19424C620);
                          }
                          if ((_DWORD)v761)
                          {
                            v776 = 0;
                            v777 = *(_QWORD *)v1407;
                            v778 = *(_DWORD *)(*(_QWORD *)v1407 + 4);
                            v1372 = (WebCore::StyledMarkedText::Style *)(*(_QWORD *)v1407 + 24);
                            v779 = 1;
                            while (1)
                            {
                              if (v779 == v775)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19424C608);
                              }
                              v780 = v777 + 16 * v779;
                              v783 = *(_DWORD *)(v780 + 4);
                              v782 = (int *)(v780 + 4);
                              v781 = v783;
                              if (v783 <= *(v782 - 4))
                                goto LABEL_1449;
                              if (!v1406[0])
                                break;
                              v784 = 0;
                              v785 = 0;
                              LODWORD(v7) = v7 & 0xFFFFFF00;
                              v786 = *((_DWORD *)v1406[0] - 2);
                              do
                              {
                                v787 = *(_QWORD *)(v777 + 16 * v784 + 8);
                                v788 = (~(v787 << 32) + v787) ^ ((unint64_t)(~(v787 << 32) + v787) >> 22);
                                v789 = 9 * ((v788 + ~(v788 << 13)) ^ ((v788 + ~(v788 << 13)) >> 8));
                                v790 = (v789 ^ (v789 >> 15)) + ~((v789 ^ (v789 >> 15)) << 27);
                                v791 = v786 & ((v790 >> 31) ^ v790);
                                v792 = *((_QWORD *)v1406[0] + v791);
                                if (v792 != v787)
                                {
                                  v793 = 1;
                                  while (v792)
                                  {
                                    v791 = (v791 + v793) & v786;
                                    v792 = *((_QWORD *)v1406[0] + v791);
                                    ++v793;
                                    if (v792 == v787)
                                      goto LABEL_1432;
                                  }
                                  if (!v785)
                                    goto LABEL_1437;
                                  if (v775 <= v7)
                                    goto LABEL_1571;
                                  if (*(unsigned __int8 *)(v787 + 12) <= *(unsigned __int8 *)(*(_QWORD *)(v777 + 16 * v7 + 8) + 12))
                                  {
                                    v785 = 1;
                                  }
                                  else
                                  {
LABEL_1437:
                                    v785 = 1;
                                    LODWORD(v7) = v784;
                                  }
                                }
LABEL_1432:
                                ++v784;
                              }
                              while (v784 != v779);
                              if (v785)
                                goto LABEL_1440;
                              v778 = v781;
LABEL_1449:
                              if (*(_DWORD *)(v777 + 16 * v779) == 1)
                                WTF::HashTable<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>>::add((uint64_t *)v1406, (_DWORD **)(v777 + 16 * v779 + 8), (uint64_t)v1436);
                              ++v779;
                              ++v776;
                              if (v779 == v761)
                                goto LABEL_1463;
                            }
                            if (v779 == 1)
                            {
                              LODWORD(v7) = 0;
                            }
                            else
                            {
                              v798 = 0;
                              LODWORD(v7) = 0;
                              v799 = v1372;
                              do
                              {
                                if (v775 <= v7)
                                {
LABEL_1571:
                                  __break(0xC471u);
                                  JUMPOUT(0x19424C600);
                                }
                                v800 = *(_QWORD *)v799;
                                v799 = (WebCore::StyledMarkedText::Style *)((char *)v799 + 16);
                                ++v798;
                                if (*(unsigned __int8 *)(v800 + 12) > *(unsigned __int8 *)(*(_QWORD *)(v777 + 16 * v7 + 8) + 12))
                                  LODWORD(v7) = v798;
                              }
                              while (v776 != v798);
                            }
LABEL_1440:
                            if (v775 <= v7)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19424C610);
                            }
                            v794 = *(_QWORD *)(v777 + 16 * v7 + 8);
                            v795 = *(_BYTE *)(v794 + 12);
                            *(_DWORD *)v1436 = 0;
                            *(_DWORD *)&v1436[4] = v778;
                            *(_DWORD *)&v1436[8] = v781;
                            v1436[12] = v795;
                            v796 = *(_DWORD **)(v794 + 24);
                            *(_QWORD *)&v1436[16] = *(_QWORD *)(v794 + 16);
                            if (v796)
                              *v796 += 2;
                            *(_QWORD *)&v1436[24] = v796;
                            *(_DWORD *)v1437 = 0;
                            if (HIDWORD(v1404[1]) == LODWORD(v1404[1]))
                            {
                              WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MarkedText>((uint64_t)v1404, (unint64_t)v1436);
                            }
                            else
                            {
                              v822 = HIDWORD(v1404[1]) + 1;
                              v823 = (char *)v1404[0] + 40 * HIDWORD(v1404[1]);
                              *(_DWORD *)v823 = 0;
                              v824 = *(_OWORD *)&v1436[4];
                              *((_DWORD *)v823 + 5) = *(_DWORD *)&v1436[20];
                              *(_OWORD *)(v823 + 4) = v824;
                              v825 = *(_QWORD *)&v1436[24];
                              *(_QWORD *)&v1436[24] = 0;
                              *((_QWORD *)v823 + 3) = v825;
                              *((_DWORD *)v823 + 8) = *(_DWORD *)v1437;
                              HIDWORD(v1404[1]) = v822;
                            }
                            v797 = *(WTF::StringImpl **)&v1436[24];
                            *(_QWORD *)&v1436[24] = 0;
                            if (v797)
                            {
                              if (*(_DWORD *)v797 == 2)
                                WTF::StringImpl::destroy(v797, v774);
                              else
                                *(_DWORD *)v797 -= 2;
                            }
                            v778 = *v782;
                            goto LABEL_1449;
                          }
LABEL_1463:
                          WTF::HashSet<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::MarkedText const,WTF::RawPtrTraits<WebCore::MarkedText const>>>,WTF::HashTableTraits>::~HashSet(v1406, v774);
                          WTF::Vector<WebCore::MarkedText::subdivide(WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::MarkedText::OverlapStrategy)::Offset,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v1407, v804);
                          v806 = v1404[0];
                          if (HIDWORD(v1404[1]))
                          {
                            v807 = 40 * HIDWORD(v1404[1]);
                            do
                            {
                              WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintPlatformDocumentMarker(v1373, (uint64_t)v806, v805);
                              v806 = (WTF *)((char *)v806 + 40);
                              v807 -= 40;
                            }
                            while (v807);
                            v806 = v1404[0];
                            if (HIDWORD(v1404[1]))
                            {
                              v808 = 40 * HIDWORD(v1404[1]);
                              v809 = (WTF::StringImpl **)((char *)v1404[0] + 24);
                              do
                              {
                                v810 = *v809;
                                *v809 = 0;
                                if (v810)
                                {
                                  if (*(_DWORD *)v810 == 2)
                                    WTF::StringImpl::destroy(v810, (WTF::StringImpl *)v13);
                                  else
                                    *(_DWORD *)v810 -= 2;
                                }
                                v809 += 5;
                                v808 -= 40;
                              }
                              while (v808);
                              v806 = v1404[0];
                            }
                          }
                          if (v806)
                          {
                            v1404[0] = 0;
                            LODWORD(v1404[1]) = 0;
                            WTF::fastFree(v806, v13);
                          }
                          v601 = v1380[0];
                          if (HIDWORD(v1380[1]))
                          {
                            v811 = 40 * HIDWORD(v1380[1]);
                            v812 = (WTF::StringImpl **)((char *)v1380[0] + 24);
                            do
                            {
                              v813 = *v812;
                              *v812 = 0;
                              if (v813)
                              {
                                if (*(_DWORD *)v813 == 2)
                                  WTF::StringImpl::destroy(v813, (WTF::StringImpl *)v13);
                                else
                                  *(_DWORD *)v813 -= 2;
                              }
                              v812 += 5;
                              v811 -= 40;
                            }
                            while (v811);
                            v601 = v1380[0];
                          }
                          i = v1373;
LABEL_1027:
                          if (v601)
                          {
                            v1380[0] = 0;
                            LODWORD(v1380[1]) = 0;
                            WTF::fastFree(v601, v13);
                          }
LABEL_1029:
                          WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintForegroundAndDecorations(i);
                          if (*(_WORD *)(*(_QWORD *)(i + 96) + 16) != 8)
                          {
LABEL_1077:
                            if (v1365)
                            {
                              v801 = *(_QWORD *)(*(_QWORD *)(v1373 + 96) + 80);
                              v802 = *(float *)(v1373 + 136);
                              v803 = *(float *)(v1373 + 140) + *(float *)(v1373 + 148);
                              *(_OWORD *)v1436 = xmmword_1969F8300;
                              *(_OWORD *)&v1436[16] = xmmword_1968A14B0;
                              *(double *)v1437 = (float)(v802 - v803);
                              *(double *)&v1437[8] = (float)(v802 + v803);
                              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v801 + 656))(v801, v1436);
                            }
                            return;
                          }
                          if (*(_BYTE *)(v1373 + 157))
                            WebCore::TextBoxPainter<WebCore::InlineIterator::BoxModernPath>::paintCompositionUnderlines((float *)v1373, v602);
                          v603 = *(_QWORD **)(v1373 + 16);
                          v604 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v603[3] + 8) + 40) + 8);
                          v605 = *(_QWORD *)(*(_QWORD *)(v604 + 528) + 8);
                          v606 = *(_QWORD *)(*(_QWORD *)(v605 + 24) + 8);
                          v607 = *(float *)(v1373 + 136);
                          v608 = *(float *)(v1373 + 140);
                          v609 = floorf(v607 * 64.0);
                          if (v609 > -2147500000.0)
                            v610 = (int)v609;
                          else
                            v610 = 0x80000000;
                          if (v609 < 2147500000.0)
                            v611 = v610;
                          else
                            v611 = 0x7FFFFFFF;
                          if (v609 >= 2147500000.0 || v609 <= -2147500000.0)
                            v613 = v611;
                          else
                            v613 = (int)v609;
                          v614 = floorf(v608 * 64.0);
                          if (v614 > -2147500000.0)
                            v615 = (int)v614;
                          else
                            v615 = 0x80000000;
                          if (v614 < 2147500000.0)
                            v616 = v615;
                          else
                            v616 = 0x7FFFFFFF;
                          if (v614 >= 2147500000.0 || v614 <= -2147500000.0)
                            v618 = v616;
                          else
                            v618 = (int)v614;
                          v619 = v608 + *(float *)(v1373 + 148);
                          v620 = ceilf((float)(v607 + *(float *)(v1373 + 144)) * 64.0);
                          if (v620 > -2147500000.0)
                            v621 = (int)v620;
                          else
                            v621 = 0x80000000;
                          if (v620 < 2147500000.0)
                            v622 = v621;
                          else
                            v622 = 0x7FFFFFFF;
                          if (v620 < 2147500000.0 && v620 > -2147500000.0)
                            v622 = (int)v620;
                          v624 = ceilf(v619 * 64.0);
                          if (v624 < 2147500000.0 && v624 > -2147500000.0)
                            goto LABEL_1071;
                          if (v624 >= 2147500000.0)
                          {
                            v626 = 0x7FFFFFFF;
                          }
                          else
                          {
                            if (v624 > -2147500000.0)
                            {
LABEL_1071:
                              v626 = (int)v624;
                              goto LABEL_1072;
                            }
                            v626 = 0x80000000;
                          }
LABEL_1072:
                          v627 = v622 - v613;
                          if (__OFSUB__(v622, v613))
                            v627 = (v622 >> 31) + 0x7FFFFFFF;
                          v628 = v626 - v618;
                          if (__OFSUB__(v626, v618))
                            v628 = (v626 >> 31) + 0x7FFFFFFF;
                          if (!*(_BYTE *)(v606 + 768)
                            || (*(_WORD *)(v606 + 660) & 4) == 0
                            || v605 != *(_QWORD *)(v606 + 160))
                          {
                            goto LABEL_1077;
                          }
                          v643 = *(_QWORD *)(v604 + 1944);
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v643 + 24) + 8) + 40) + 8)
                                        + 3382)
                            && WebCore::LocalFrame::shouldUsePrintingLayout(*(WebCore::LocalFrame **)(*(_QWORD *)(v643 + 248) + 328)))
                          {
                            v647 = 0;
                            v646 = *(_DWORD *)(v643 + 160);
                          }
                          else
                          {
                            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v643 + 248) + 64)
                                                                             + 832))(*(_QWORD *)(v643 + 248) + 64, 0, 1);
                            v646 = 0x80000000;
                            if (v644 >= -33554432)
                              v646 = v644 << 6;
                            if (v644 > 0x1FFFFFF)
                              v646 = 0x7FFFFFFF;
                            v647 = 0x7FFFFFFF00000000;
                            if (v645 <= 0x1FFFFFF)
                              v647 = (unint64_t)(v645 < -33554432) << 63;
                          }
                          v648 = v647 | v646;
                          if ((int)v648 <= 62720)
                            v649 = 0;
                          else
                            v649 = (((v648 << 6) + 0x3FFFC2C000) >> 7) & 0x7FFFFFFF;
                          v650 = (((v649 & 0x20u) + 32) >> 6) + (v649 >> 6);
                          v651 = v650 << 6;
                          if (v650 >> 25)
                            v651 = 0x7FFFFFFF;
                          if (v627 < 1 || v628 < 1)
                            goto LABEL_1077;
                          v652 = v651 + 62720;
                          if (__OFADD__(v651, 62720))
                            v652 = 0x7FFFFFFF;
                          if (v613 >= v652)
                            goto LABEL_1077;
                          v653 = v613 + v627;
                          if (__OFADD__(v613, v627))
                            v653 = (v613 >> 31) + 0x7FFFFFFF;
                          if (v651 >= v653 || v618 > 83199)
                            goto LABEL_1077;
                          v655 = v618 + v628;
                          if (__OFADD__(v618, v628))
                            v655 = (v618 >> 31) + 0x7FFFFFFF;
                          if (v655 < 1)
                            goto LABEL_1077;
                          if (v613 >= 0)
                            v656 = v613;
                          else
                            v656 = v613 + 63;
                          v657 = v613 - (v656 & 0xFFFFFFC0);
                          if (v618 >= 0)
                            v658 = v618;
                          else
                            v658 = v618 + 63;
                          v659 = v618 - (v658 & 0xFFFFFFC0);
                          v660 = v657 + v627;
                          if (__OFADD__(v657, v627))
                            v660 = (v657 >> 31) + 0x7FFFFFFF;
                          v661 = v656 >> 6;
                          v662 = v658 >> 6;
                          v663 = v659 + v628;
                          if (__OFADD__(v659, v628))
                            v663 = (v659 >> 31) + 0x7FFFFFFF;
                          v664 = v659 + 32;
                          v665 = (v662 + (v664 >> 6));
                          v666 = v665 << 32;
                          v667 = v657 + 32;
                          v668 = (v661 + (v667 >> 6));
                          v669 = (v660 / 64 - (v667 >> 6) + ((int)(v660 - (v661 & 0xFFFFFFC0) + 32) >> 6));
                          v670 = (v663 / 64 - (v664 >> 6) + ((int)(v663 - (v667 & 0xFFFFFFC0) + 32) >> 6));
                          if ((WTF::WeakHashSet<WebCore::RenderObject const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderObject>(v606 + 680, v603) & 1) != 0)
                          {
                            v671 = v666 | v668;
                            *(_QWORD *)v1436 = v666 | v668;
                            *(_QWORD *)&v1436[8] = v669 | (v670 << 32);
                            *(_QWORD *)&v1436[16] = 0;
                            WebCore::Region::subtract((WTF *)(v606 + 744), (const WebCore::Region *)v1436);
                            WebCore::Region::~Region((WebCore::Region *)v1436, v815);
                          }
                          else
                          {
                            v671 = v666 | v668;
                          }
                          v672 = (_DWORD)v668 << 6;
                          if ((int)v668 < -33554432)
                            v672 = 0x80000000;
                          v673 = (_DWORD)v669 << 6;
                          v674 = (_DWORD)v670 << 6;
                          if ((int)v669 > 0x1FFFFFF || (int)v670 > 0x1FFFFFF || (int)v668 > 0x1FFFFFF)
                          {
                            if ((int)v668 >= 0x2000000)
                              v826 = 0x7FFFFFFF;
                            else
                              v826 = v672;
                            if ((int)v665 >= -33554432)
                              v827 = (_DWORD)v665 << 6;
                            else
                              v827 = 0x80000000;
                            if ((int)v669 < -33554432)
                              v673 = 0x80000000;
                            if ((int)v669 > 0x1FFFFFF)
                              v673 = 0x7FFFFFFF;
                            if ((int)v670 < -33554432)
                              v674 = 0x80000000;
                            if ((int)v670 > 0x1FFFFFF)
                              v674 = 0x7FFFFFFF;
                            if (v673 < 1 || v674 <= 0)
                              goto LABEL_1256;
                            v828 = __OFADD__(v826, v673);
                            v829 = v826 + v673;
                            v830 = __OFADD__(v826, v673);
                            v831 = v826 + v673;
                            if (v828)
                              v831 = (v826 >> 31) + 0x7FFFFFFF;
                            if (v649 < v831)
                            {
                              v832 = v649 + 62720;
                              v833 = __OFADD__(v649, 62720);
                              v834 = v649 + 62720;
                              if (__OFADD__(v649, 62720))
                                v834 = 0x7FFFFFFF;
                              if (v826 < v834)
                              {
                                v835 = v827 + v674;
                                v836 = __OFADD__(v827, v674);
                                v837 = v827 + v674;
                                if (__OFADD__(v827, v674))
                                  v837 = (v827 >> 31) + 0x7FFFFFFF;
                                if (v837 >= 1 && v827 < 41600)
                                {
                                  v838 = v829;
                                  if (v830)
                                    v838 = (v826 >> 31) + 0x7FFFFFFF;
                                  if (v649 < v838)
                                  {
                                    if (v833)
                                      v832 = 0x7FFFFFFF;
                                    if (v826 < v832)
                                    {
                                      if (v836)
                                        v835 = (v827 >> 31) + 0x7FFFFFFF;
                                      if (v835 >= 41601)
                                        goto LABEL_1204;
                                    }
                                  }
                                }
                              }
                            }
                            if (v830)
                              v829 = (v826 >> 31) + 0x7FFFFFFF;
                            if (v649 >= v829)
                              goto LABEL_1256;
                            v839 = v649 + 62720;
                            if (__OFADD__(v649, 62720))
                              v839 = 0x7FFFFFFF;
                            if (v826 >= v839)
                              goto LABEL_1256;
                            v840 = v827 + v674;
                            if (__OFADD__(v827, v674))
                              v840 = (v827 >> 31) + 0x7FFFFFFF;
                            if (v840 < 1 || v827 > 41599)
                            {
LABEL_1256:
                              v700 = (WTF *)(v606 + 720);
LABEL_1257:
                              *(_QWORD *)v1436 = v671;
                              *(_QWORD *)&v1436[8] = v669 | (v670 << 32);
LABEL_1258:
                              *(_QWORD *)&v1436[16] = 0;
                              WebCore::Region::unite(v700, (const WebCore::Region *)v1436);
                              v704 = *(_QWORD *)&v1436[16];
                              *(_QWORD *)&v1436[16] = 0;
                              if (v704)
                              {
                                v705 = *(WTF **)(v704 + 144);
                                if ((WTF *)(v704 + 160) != v705 && v705)
                                {
                                  *(_QWORD *)(v704 + 144) = 0;
                                  *(_DWORD *)(v704 + 152) = 0;
                                  WTF::fastFree(v705, v703);
                                }
                                v706 = *(WTF **)v704;
                                if (v704 + 16 != *(_QWORD *)v704 && v706)
                                {
                                  *(_QWORD *)v704 = 0;
                                  *(_DWORD *)(v704 + 8) = 0;
                                  WTF::fastFree(v706, v703);
                                }
                                WTF::fastFree((WTF *)v704, v703);
                              }
                              v707 = (float)(unint64_t)WebCore::Region::totalArea((WebCore::Region *)(v606 + 696), v703);
                              v709 = WebCore::Region::totalArea((WebCore::Region *)(v606 + 720), v708);
                              v711 = WebCore::Region::totalArea((WebCore::Region *)(v606 + 744), v710);
                              if ((float)(v707 / 1274000.0) > 0.05
                                && (float)((float)(unint64_t)v709 / 1274000.0) > 0.05
                                && (float)((float)(unint64_t)v711 / 1274000.0) < 0.04)
                              {
                                *(_BYTE *)(v606 + 768) = 0;
                                WebCore::Page::resetRelevantPaintedObjectCounter((WebCore::Page *)v606, v712);
                                v713 = *(_QWORD *)(v606 + 160);
                                if (v713)
                                {
                                  if (!*(_BYTE *)(v713 + 144))
                                  {
                                    v714 = (unsigned int *)(v713 + 8);
                                    do
                                      v715 = __ldaxr(v714);
                                    while (__stlxr(v715 + 1, v714));
                                    WebCore::LocalFrame::checkedLoader(v713, v1436);
                                    WebCore::FrameLoader::didReachLayoutMilestone(*(uint64_t *)v1436, 4u);
                                    v716 = *(_DWORD **)v1436;
                                    *(_QWORD *)v1436 = 0;
                                    if (v716)
                                    {
                                      if (!*v716)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x19424C494);
                                      }
                                      --*v716;
                                    }
                                    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v714);
                                  }
                                }
                              }
                              goto LABEL_1077;
                            }
                          }
                          else
                          {
                            if ((int)v665 >= -33554432)
                              v675 = (_DWORD)v665 << 6;
                            else
                              v675 = 0x80000000;
                            if ((int)v669 >= -33554432)
                              v676 = (_DWORD)v669 << 6;
                            else
                              v676 = 0x80000000;
                            if ((int)v670 < -33554432)
                              v674 = 0x80000000;
                            if (v676 < 1 || v674 < 1)
                              goto LABEL_1256;
                            v677 = __OFADD__(v672, v676);
                            v678 = v672 + v676;
                            v679 = v677;
                            v680 = v678;
                            if (v677)
                              v680 = (v672 >> 31) + 0x7FFFFFFF;
                            if (v649 < v680)
                            {
                              v681 = v649 + 62720;
                              v682 = __OFADD__(v649, 62720);
                              v683 = v649 + 62720;
                              if (__OFADD__(v649, 62720))
                                v683 = 0x7FFFFFFF;
                              if ((int)v672 < v683)
                              {
                                v684 = v675 + v674;
                                v685 = __OFADD__(v675, v674);
                                v686 = v675 + v674;
                                if (__OFADD__(v675, v674))
                                  v686 = (v675 >> 31) + 0x7FFFFFFF;
                                if (v686 >= 1 && v675 <= 41599)
                                {
                                  v687 = v678;
                                  if (v679)
                                    v687 = (v672 >> 31) + 0x7FFFFFFF;
                                  if (v649 < v687)
                                  {
                                    if (v682)
                                      v681 = 0x7FFFFFFF;
                                    if ((int)v672 < v681)
                                    {
                                      if (v685)
                                        v684 = (v675 >> 31) + 0x7FFFFFFF;
                                      if (v684 >= 41601)
                                      {
LABEL_1204:
                                        if ((int)v668 <= (int)v650)
                                          v688 = (((v649 & 0x20u) + 32) >> 6) + (v649 >> 6);
                                        else
                                          v688 = v668;
                                        if ((int)(v650 + 980) >= (int)v669 + (int)v668)
                                          v689 = v669 + v668;
                                        else
                                          v689 = v650 + 980;
                                        if ((int)v670 + (int)v665 >= 650)
                                          v690 = 650;
                                        else
                                          v690 = v670 + v665;
                                        if (v688 >= v689 || (v691 = v665 & ~((int)v665 >> 31), v691 >= v690))
                                        {
                                          v692 = 0;
                                          v691 = 0;
                                          v693 = 0;
                                          v690 = 0;
                                        }
                                        else
                                        {
                                          v692 = v688;
                                          v693 = v689;
                                        }
                                        *(_DWORD *)v1436 = v692;
                                        *(_DWORD *)&v1436[4] = v691;
                                        *(_DWORD *)&v1436[8] = v693 - v692;
                                        *(_DWORD *)&v1436[12] = v690 - v691;
                                        *(_QWORD *)&v1436[16] = 0;
                                        WebCore::Region::unite((WTF *)(v606 + 696), (const WebCore::Region *)v1436);
                                        v695 = *(_QWORD *)&v1436[16];
                                        *(_QWORD *)&v1436[16] = 0;
                                        if (v695)
                                        {
                                          v696 = *(WTF **)(v695 + 144);
                                          if ((WTF *)(v695 + 160) != v696 && v696)
                                          {
                                            *(_QWORD *)(v695 + 144) = 0;
                                            *(_DWORD *)(v695 + 152) = 0;
                                            WTF::fastFree(v696, v694);
                                          }
                                          v697 = *(WTF **)v695;
                                          if (v695 + 16 != *(_QWORD *)v695 && v697)
                                          {
                                            *(_QWORD *)v695 = 0;
                                            *(_DWORD *)(v695 + 8) = 0;
                                            WTF::fastFree(v697, v694);
                                          }
                                          WTF::fastFree((WTF *)v695, v694);
                                        }
                                        if ((int)v665 <= 650)
                                          v698 = 650;
                                        else
                                          v698 = v665;
                                        if ((int)v670 + (int)v665 >= 1300)
                                          v699 = 1300;
                                        else
                                          v699 = v670 + v665;
                                        if (v688 >= v689 || v698 >= v699)
                                        {
                                          v688 = 0;
                                          v698 = 0;
                                          v689 = 0;
                                          v699 = 0;
                                        }
                                        v700 = (WTF *)(v606 + 720);
                                        *(_DWORD *)v1436 = v688;
                                        *(_DWORD *)&v1436[4] = v698;
                                        *(_DWORD *)&v1436[8] = v689 - v688;
                                        *(_DWORD *)&v1436[12] = v699 - v698;
                                        goto LABEL_1258;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (v679)
                              v678 = (v672 >> 31) + 0x7FFFFFFF;
                            if (v649 >= v678)
                              goto LABEL_1256;
                            v701 = v649 + 62720;
                            if (__OFADD__(v649, 62720))
                              v701 = 0x7FFFFFFF;
                            if ((int)v672 >= v701)
                              goto LABEL_1256;
                            v702 = v675 + v674;
                            if (__OFADD__(v675, v674))
                              v702 = (v675 >> 31) + 0x7FFFFFFF;
                            if (v702 < 1 || v675 > 41599)
                              goto LABEL_1256;
                          }
                          v700 = (WTF *)(v606 + 696);
                          goto LABEL_1257;
                        }
                        break;
                      }
                      if (v730 > 2047)
                      {
                        if (v730 != 2048 && v730 != 0x10000)
                          goto LABEL_1357;
                      }
                      else if (v730 != 512)
                      {
                        if (v730 == 1024)
                          goto LABEL_1339;
                        goto LABEL_1357;
                      }
LABEL_1307:
                      v731 = *(_DWORD *)(v729 + 16);
                      v732 = *(_DWORD *)(v1373 + 104);
                      if (v731 <= v732)
                        goto LABEL_1357;
                      v733 = *(_DWORD *)(v729 + 12);
                      v734 = *(_DWORD *)(v1373 + 108);
                      v735 = v734 + v732;
                      if (v733 >= v734 + v732)
                        goto LABEL_1360;
                      if (v730 > 511)
                      {
                        if (v730 != 512 && v730 != 2048)
                        {
                          if (*(_DWORD *)(v729 + 96) != 5)
                            break;
                          if (*(_BYTE *)(v729 + 80))
                            goto LABEL_1357;
                        }
                      }
                      else if (((1 << v730) & 0x10016) == 0)
                      {
                        goto LABEL_1357;
                      }
                      if (v735 < v732)
                        goto LABEL_1864;
                      v987 = v733 >= v732;
                      v736 = v733 - v732;
                      if (!v987)
                        v736 = 0;
                      if (*(_BYTE *)(v1373 + 124) && (v814 = *(_DWORD *)(v1373 + 120)) != 0)
                      {
                        if (v814 < v736)
                          v736 = *(_DWORD *)(v1373 + 120);
                        if (v735 < v731)
                          v731 = v734 + v732;
                        v737 = v731 - v732;
                      }
                      else
                      {
                        if (v736 == v734)
                          v736 = *(_DWORD *)(v1373 + 112) + v734;
                        if (v735 < v731)
                          v731 = v734 + v732;
                        v737 = v731 - v732;
                        if (!*(_BYTE *)(v1373 + 124) || (v814 = *(_DWORD *)(v1373 + 120)) == 0)
                        {
                          if (v737 == v734)
                            v737 = *(_DWORD *)(v1373 + 112) + v734;
                          goto LABEL_1322;
                        }
                      }
                      if (v814 < v737)
                        v737 = v814;
LABEL_1322:
                      if (v730 <= 15)
                      {
                        switch(v730)
                        {
                          case 1:
                            v738 = 4;
                            break;
                          case 2:
                            v738 = 1;
                            break;
                          case 4:
                            v738 = 5;
                            break;
                          default:
                            v738 = 0;
                            break;
                        }
                      }
                      else if (v730 > 2047)
                      {
                        if (v730 == 2048)
                          v738 = 10;
                        else
                          v738 = 3;
                      }
                      else if (v730 == 16)
                      {
                        v738 = 2;
                      }
                      else
                      {
                        v738 = 6;
                      }
                      *(_DWORD *)v1436 = 0;
                      *(_DWORD *)&v1436[4] = v736;
                      *(_DWORD *)&v1436[8] = v737;
                      v1436[12] = v738;
                      *(_QWORD *)&v1436[16] = v729;
                      *(_QWORD *)&v1436[24] = 0;
                      *(_DWORD *)v1437 = 0;
                      v739 = HIDWORD(v1380[1]);
                      if (HIDWORD(v1380[1]) == LODWORD(v1380[1]))
                      {
                        v740 = WTF::Vector<WebCore::MarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v1380, HIDWORD(v1380[1]) + 1, (unint64_t)v1436);
                        v739 = HIDWORD(v1380[1]);
                        v741 = (char *)v1380[0] + 40 * HIDWORD(v1380[1]);
                        *(_DWORD *)v741 = 0;
                        v742 = *(_DWORD *)(v740 + 20);
                        *(_OWORD *)(v741 + 4) = *(_OWORD *)(v740 + 4);
                        *((_DWORD *)v741 + 5) = v742;
                        v743 = *(_QWORD *)(v740 + 24);
                        *(_QWORD *)(v740 + 24) = 0;
                        *((_QWORD *)v741 + 3) = v743;
                        v744 = v741 + 32;
                        v745 = (_DWORD *)(v740 + 32);
                      }
                      else
                      {
                        v816 = (char *)v1380[0] + 40 * HIDWORD(v1380[1]);
                        *(_DWORD *)v816 = 0;
                        v817 = *(_OWORD *)&v1436[4];
                        *((_DWORD *)v816 + 5) = *(_DWORD *)&v1436[20];
                        *(_OWORD *)(v816 + 4) = v817;
                        v818 = *(_QWORD *)&v1436[24];
                        *(_QWORD *)&v1436[24] = 0;
                        *((_QWORD *)v816 + 3) = v818;
                        v744 = v816 + 32;
                        v745 = v1437;
                      }
                      *v744 = *v745;
                      HIDWORD(v1380[1]) = v739 + 1;
                      v746 = *(WTF::StringImpl **)&v1436[24];
                      *(_QWORD *)&v1436[24] = 0;
                      if (v746)
                      {
                        if (*(_DWORD *)v746 == 2)
                          WTF::StringImpl::destroy(v746, (WTF::StringImpl *)v13);
                        else
                          *(_DWORD *)v746 -= 2;
                      }
                      goto LABEL_1357;
                    }
                  }
                }
              }
            }
            break;
          }
LABEL_2584:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_2585:
          if ((v1229 & 0x8000000000000) != 0)
          {
            *(_OWORD *)v1404 = *(_OWORD *)(((unint64_t)v1228 & 0xFFFFFFFFFFFFLL) + 4);
            *(_OWORD *)v1406 = *(_OWORD *)((v1229 & 0xFFFFFFFFFFFFLL) + 4);
            v1360 = WebCore::operator==<float,4ul>((float *)v1404, (float *)v1406);
            v1228 = *(WTF **)v4;
            if (v1360 && (unint64_t)v1228 >> 56 == HIBYTE(*(_QWORD *)v1436))
            {
              v95 = v1373;
              v5 = (uint64_t)v1380;
              if (BYTE6(v1228) == v1436[6])
                goto LABEL_2259;
            }
            else
            {
              v95 = v1373;
              v5 = (uint64_t)v1380;
            }
          }
LABEL_2257:
          if (((unint64_t)v1228 & 0x8000000000000) != 0)
          {
            v1351 = (unsigned int *)((unint64_t)v1228 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1352 = __ldaxr(v1351);
              v1353 = v1352 - 1;
            }
            while (__stlxr(v1353, v1351));
            v95 = v1373;
            v5 = (uint64_t)v1380;
            if (!v1353)
            {
              atomic_store(1u, v1351);
              WTF::fastFree((WTF *)v1351, v1114);
            }
          }
          *(_QWORD *)v4 = *(_QWORD *)v1436;
          *(_QWORD *)v1436 = 0;
LABEL_2259:
          v1114 = (void *)(v28 + 24);
          v1230 = *(unsigned int *)(v28 + 88);
          if ((_DWORD)v1230 == -1)
          {
            if (*(_DWORD *)&v1437[48] != -1)
              goto LABEL_2261;
          }
          else
          {
            if (*(_DWORD *)&v1437[48] != -1)
            {
LABEL_2261:
              v1404[0] = (WTF *)(v28 + 24);
              ((void (*)(WTF **))off_1E343A088[*(unsigned int *)&v1437[48]])(v1404);
              goto LABEL_2262;
            }
            ((void (*)(WTF **, void *))off_1E343A070[v1230])(v1404, v1114);
            *(_DWORD *)(v28 + 88) = -1;
          }
LABEL_2262:
          *(_DWORD *)(v28 + 184) |= 1u;
LABEL_2263:
          if (*(_DWORD *)&v1437[48] != -1)
            ((void (*)(WTF **, WebCore::Color *))off_1E343A070[*(unsigned int *)&v1437[48]])(v1404, v1364);
          *(_DWORD *)&v1437[48] = -1;
          if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
          {
            v1354 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
            do
            {
              v1355 = __ldaxr(v1354);
              v1356 = v1355 - 1;
            }
            while (__stlxr(v1356, v1354));
            v95 = v1373;
            v5 = (uint64_t)v1380;
            if (!v1356)
            {
              atomic_store(1u, v1354);
              WTF::fastFree((WTF *)v1354, v1114);
            }
          }
          if ((_DWORD)v1415 != -1)
            ((void (*)(WTF **, _BYTE *))off_1E343A070[v1415])(v1404, v1363);
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v28 + 88))(v28, v4);
          goto LABEL_2080;
        }
        v1375 = 0;
        if (HIDWORD(v1377) >= 0x124924A)
        {
          __break(0xC471u);
          JUMPOUT(0x19424A408);
        }
        v96 = 224 * HIDWORD(v1377);
        v97 = WTF::fastMalloc((WTF *)(224 * HIDWORD(v1377)));
        LODWORD(v1375) = (613566757 * (unint64_t)(v96 >> 5)) >> 32;
        v1374 = (WTF *)v97;
        v98 = v1376;
        if (v96 >= 0xE0)
        {
          *(_DWORD *)v97 = 0;
          v112 = *(_OWORD *)((char *)v98 + 4);
          *(_DWORD *)(v97 + 20) = *((_DWORD *)v98 + 5);
          *(_OWORD *)(v97 + 4) = v112;
          v113 = (_DWORD *)*((_QWORD *)v98 + 3);
          if (v113)
            *v113 += 2;
          *(_QWORD *)(v97 + 24) = v113;
          *(_DWORD *)(v97 + 32) = *((_DWORD *)v98 + 8);
          v105 = v97 + 40;
        }
        else
        {
          v99 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1374, 1uLL, (unint64_t)v1376);
          v98 = (WTF *)v99;
          v100 = HIDWORD(v1375);
          v101 = v1374;
          v102 = (char *)v1374 + 224 * HIDWORD(v1375);
          *(_DWORD *)v102 = 0;
          v103 = *(_OWORD *)(v99 + 4);
          *((_DWORD *)v102 + 5) = *(_DWORD *)(v99 + 20);
          *(_OWORD *)(v102 + 4) = v103;
          v104 = *(_DWORD **)(v99 + 24);
          if (v104)
            *v104 += 2;
          *((_QWORD *)v102 + 3) = v104;
          *((_DWORD *)v102 + 8) = *(_DWORD *)(v99 + 32);
          v105 = (uint64_t)v101 + 224 * v100 + 40;
        }
        v114 = *((_QWORD *)v98 + 5);
        *(_QWORD *)v105 = v114;
        if ((v114 & 0x8000000000000) != 0)
        {
          v412 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFLL);
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 + 1, v412));
        }
        v115 = *((_QWORD *)v98 + 6);
        *(_QWORD *)(v105 + 8) = v115;
        if ((v115 & 0x8000000000000) != 0)
        {
          v414 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFLL);
          do
            v415 = __ldaxr(v414);
          while (__stlxr(v415 + 1, v414));
        }
        v116 = *((_QWORD *)v98 + 7);
        *(_QWORD *)(v105 + 16) = v116;
        if ((v116 & 0x8000000000000) != 0)
        {
          v416 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFLL);
          do
            v417 = __ldaxr(v416);
          while (__stlxr(v417 + 1, v416));
        }
        v117 = *((_QWORD *)v98 + 8);
        *(_QWORD *)(v105 + 24) = v117;
        if ((v117 & 0x8000000000000) != 0)
        {
          v418 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFLL);
          do
            v419 = __ldaxr(v418);
          while (__stlxr(v419 + 1, v418));
        }
        *(_OWORD *)(v105 + 32) = *(_OWORD *)((char *)v98 + 72);
        v118 = *((_QWORD *)v98 + 11);
        *(_QWORD *)(v105 + 48) = v118;
        if ((v118 & 0x8000000000000) != 0)
        {
          v420 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 + 1, v420));
        }
        *(_BYTE *)(v105 + 56) = *((_BYTE *)v98 + 96);
        v119 = *((_QWORD *)v98 + 13);
        *(_QWORD *)(v105 + 64) = v119;
        if ((v119 & 0x8000000000000) != 0)
        {
          v422 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
          do
            v423 = __ldaxr(v422);
          while (__stlxr(v423 + 1, v422));
        }
        *(_BYTE *)(v105 + 72) = *((_BYTE *)v98 + 112);
        v120 = *((_QWORD *)v98 + 15);
        *(_QWORD *)(v105 + 80) = v120;
        if ((v120 & 0x8000000000000) != 0)
        {
          v424 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFLL);
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 + 1, v424));
        }
        v121 = *((_BYTE *)v98 + 128);
        v122 = *((_BYTE *)v98 + 136);
        *(_BYTE *)(v105 + 104) = 0;
        *(_BYTE *)(v105 + 88) = v121;
        *(_BYTE *)(v105 + 96) = v122;
        *(_BYTE *)(v105 + 168) = 0;
        if (*((_BYTE *)v98 + 208))
        {
          WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v105 + 104), (WTF *)((char *)v98 + 144));
          *(_BYTE *)(v105 + 168) = 1;
        }
        *(_DWORD *)(v105 + 176) = *((_DWORD *)v98 + 54);
        v93 = ++HIDWORD(v1375);
        if (HIDWORD(v1377) == 1)
          goto LABEL_170;
        v123 = v1376;
        LOBYTE(v2) = -32;
        v124 = (char *)v1376 + 224 * HIDWORD(v1377);
        v125 = (WTF *)((char *)v1376 + 224);
        while (1)
        {
          if (!v93)
          {
            __break(0xC471u);
            JUMPOUT(0x19424DEACLL);
          }
          v1041 = v123;
          v123 = v125;
          v1042 = v1374;
          v1043 = (char *)v1374 + 224 * v93;
          if (*((_DWORD *)v1043 - 54) != *((_DWORD *)v1041 + 57))
            break;
          v1044 = *((_QWORD *)v1043 - 23);
          v1045 = *((_QWORD *)v1041 + 33);
          if ((v1044 & 0x8000000000000) != 0)
          {
            if ((v1045 & 0x8000000000000) == 0
              || *(float *)((v1044 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v1045 & 0xFFFFFFFFFFFFLL) + 4)
              || *(float *)((v1044 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v1045 & 0xFFFFFFFFFFFFLL) + 8)
              || *(float *)((v1044 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v1045 & 0xFFFFFFFFFFFFLL) + 0xC)
              || *(float *)((v1044 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v1045 & 0xFFFFFFFFFFFFLL) + 0x10)
              || HIBYTE(v1044) != HIBYTE(v1045)
              || BYTE6(v1044) != BYTE6(v1045))
            {
              break;
            }
          }
          else if (v1044 != v1045 || (v1045 & 0x8000000000000) != 0)
          {
            break;
          }
          *((_DWORD *)v1043 - 54) = *((_DWORD *)v1041 + 58);
LABEL_1981:
          v125 = (WTF *)((char *)v123 + 224);
          if ((char *)v123 + 224 == v124)
            goto LABEL_170;
        }
        v1047 = v93;
        if (v93 == (_DWORD)v1375)
        {
          v1048 = WTF::Vector<WebCore::StyledMarkedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v1374, v93 + 1, (unint64_t)v125);
          v1049 = v1048;
          v1050 = HIDWORD(v1375);
          v1051 = v1374;
          v1052 = (char *)v1374 + 224 * HIDWORD(v1375);
          *(_DWORD *)v1052 = 0;
          v1053 = *(_OWORD *)(v1048 + 4);
          *((_DWORD *)v1052 + 5) = *(_DWORD *)(v1048 + 20);
          *(_OWORD *)(v1052 + 4) = v1053;
          v1054 = *(_DWORD **)(v1048 + 24);
          if (v1054)
            *v1054 += 2;
          *((_QWORD *)v1052 + 3) = v1054;
          *((_DWORD *)v1052 + 8) = *(_DWORD *)(v1048 + 32);
          v1055 = *(_QWORD *)(v1048 + 40);
          *((_QWORD *)v1051 + 28 * v1050 + 5) = v1055;
          if ((v1055 & 0x8000000000000) != 0)
          {
            v1084 = (unsigned int *)(v1055 & 0xFFFFFFFFFFFFLL);
            do
              v1085 = __ldaxr(v1084);
            while (__stlxr(v1085 + 1, v1084));
          }
          v1056 = *(_QWORD *)(v1048 + 48);
          *((_QWORD *)v1051 + 28 * v1050 + 6) = v1056;
          if ((v1056 & 0x8000000000000) != 0)
          {
            v1086 = (unsigned int *)(v1056 & 0xFFFFFFFFFFFFLL);
            do
              v1087 = __ldaxr(v1086);
            while (__stlxr(v1087 + 1, v1086));
          }
          v1057 = *(_QWORD *)(v1048 + 56);
          *((_QWORD *)v1051 + 28 * v1050 + 7) = v1057;
          if ((v1057 & 0x8000000000000) != 0)
          {
            v1088 = (unsigned int *)(v1057 & 0xFFFFFFFFFFFFLL);
            do
              v1089 = __ldaxr(v1088);
            while (__stlxr(v1089 + 1, v1088));
          }
          v1058 = *(_QWORD *)(v1048 + 64);
          *((_QWORD *)v1051 + 28 * v1050 + 8) = v1058;
          if ((v1058 & 0x8000000000000) != 0)
          {
            v1090 = (unsigned int *)(v1058 & 0xFFFFFFFFFFFFLL);
            do
              v1091 = __ldaxr(v1090);
            while (__stlxr(v1091 + 1, v1090));
          }
          v1059 = (char *)v1051 + 224 * v1050;
          *(_OWORD *)(v1059 + 72) = *(_OWORD *)(v1048 + 72);
          v1060 = *(_QWORD *)(v1048 + 88);
          *((_QWORD *)v1059 + 11) = v1060;
          if ((v1060 & 0x8000000000000) != 0)
          {
            v1092 = (unsigned int *)(v1060 & 0xFFFFFFFFFFFFLL);
            do
              v1093 = __ldaxr(v1092);
            while (__stlxr(v1093 + 1, v1092));
          }
          v1061 = (char *)v1051 + 224 * v1050;
          v1061[96] = *(_BYTE *)(v1048 + 96);
          v1062 = *(_QWORD *)(v1048 + 104);
          *((_QWORD *)v1061 + 13) = v1062;
          if ((v1062 & 0x8000000000000) != 0)
          {
            v1094 = (unsigned int *)(v1062 & 0xFFFFFFFFFFFFLL);
            do
              v1095 = __ldaxr(v1094);
            while (__stlxr(v1095 + 1, v1094));
          }
          v1063 = (char *)v1051 + 224 * v1050;
          v1063[112] = *(_BYTE *)(v1048 + 112);
          v1064 = *(_QWORD *)(v1048 + 120);
          *((_QWORD *)v1063 + 15) = v1064;
          if ((v1064 & 0x8000000000000) != 0)
          {
            v1096 = (unsigned int *)(v1064 & 0xFFFFFFFFFFFFLL);
            do
              v1097 = __ldaxr(v1096);
            while (__stlxr(v1097 + 1, v1096));
          }
          v1065 = (char *)v1051 + 224 * v1050;
          v1066 = *(_BYTE *)(v1048 + 128);
          v1065[208] = 0;
          v1067 = v1065 + 208;
          *(v1067 - 80) = v1066;
          *(v1067 - 72) = *(_BYTE *)(v1048 + 136);
          *(v1067 - 64) = 0;
          if (*(_BYTE *)(v1048 + 208))
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v1067 - 64), (const WebCore::ShadowData *)(v1048 + 144));
            *v1067 = 1;
          }
          v1039 = (char *)v1051 + 224 * v1050;
          v1040 = *(_DWORD *)(v1049 + 216);
        }
        else
        {
          v1068 = (char *)v1374 + 224 * v93;
          *(_DWORD *)v1068 = 0;
          v1069 = *(_OWORD *)((char *)v1041 + 228);
          *((_DWORD *)v1068 + 5) = *((_DWORD *)v1041 + 61);
          *(_OWORD *)(v1068 + 4) = v1069;
          v1070 = (_DWORD *)*((_QWORD *)v1041 + 31);
          if (v1070)
            *v1070 += 2;
          *((_QWORD *)v1068 + 3) = v1070;
          *((_DWORD *)v1068 + 8) = *((_DWORD *)v1041 + 64);
          v1071 = *((_QWORD *)v1041 + 33);
          *((_QWORD *)v1042 + 28 * v1047 + 5) = v1071;
          if ((v1071 & 0x8000000000000) != 0)
          {
            v1098 = (unsigned int *)(v1071 & 0xFFFFFFFFFFFFLL);
            do
              v1099 = __ldaxr(v1098);
            while (__stlxr(v1099 + 1, v1098));
          }
          v1072 = *((_QWORD *)v1041 + 34);
          *((_QWORD *)v1042 + 28 * v1047 + 6) = v1072;
          if ((v1072 & 0x8000000000000) != 0)
          {
            v1100 = (unsigned int *)(v1072 & 0xFFFFFFFFFFFFLL);
            do
              v1101 = __ldaxr(v1100);
            while (__stlxr(v1101 + 1, v1100));
          }
          v1073 = *((_QWORD *)v1041 + 35);
          *((_QWORD *)v1042 + 28 * v1047 + 7) = v1073;
          if ((v1073 & 0x8000000000000) != 0)
          {
            v1102 = (unsigned int *)(v1073 & 0xFFFFFFFFFFFFLL);
            do
              v1103 = __ldaxr(v1102);
            while (__stlxr(v1103 + 1, v1102));
          }
          v1074 = *((_QWORD *)v1041 + 36);
          *((_QWORD *)v1042 + 28 * v1047 + 8) = v1074;
          if ((v1074 & 0x8000000000000) != 0)
          {
            v1104 = (unsigned int *)(v1074 & 0xFFFFFFFFFFFFLL);
            do
              v1105 = __ldaxr(v1104);
            while (__stlxr(v1105 + 1, v1104));
          }
          v1075 = (char *)v1042 + 224 * v1047;
          *(_OWORD *)(v1075 + 72) = *(_OWORD *)((char *)v1041 + 296);
          v1076 = *((_QWORD *)v1041 + 39);
          *((_QWORD *)v1075 + 11) = v1076;
          if ((v1076 & 0x8000000000000) != 0)
          {
            v1106 = (unsigned int *)(v1076 & 0xFFFFFFFFFFFFLL);
            do
              v1107 = __ldaxr(v1106);
            while (__stlxr(v1107 + 1, v1106));
          }
          v1077 = (char *)v1042 + 224 * v1047;
          v1077[96] = *((_BYTE *)v1041 + 320);
          v1078 = *((_QWORD *)v1041 + 41);
          *((_QWORD *)v1077 + 13) = v1078;
          if ((v1078 & 0x8000000000000) != 0)
          {
            v1108 = (unsigned int *)(v1078 & 0xFFFFFFFFFFFFLL);
            do
              v1109 = __ldaxr(v1108);
            while (__stlxr(v1109 + 1, v1108));
          }
          v1079 = (char *)v1042 + 224 * v1047;
          v1079[112] = *((_BYTE *)v1041 + 336);
          v1080 = *((_QWORD *)v1041 + 43);
          *((_QWORD *)v1079 + 15) = v1080;
          if ((v1080 & 0x8000000000000) != 0)
          {
            v1110 = (unsigned int *)(v1080 & 0xFFFFFFFFFFFFLL);
            do
              v1111 = __ldaxr(v1110);
            while (__stlxr(v1111 + 1, v1110));
          }
          v1081 = (char *)v1042 + 224 * v1047;
          v1082 = *((_BYTE *)v1041 + 352);
          v1081[208] = 0;
          v1083 = v1081 + 208;
          *(v1083 - 80) = v1082;
          *(v1083 - 72) = *((_BYTE *)v1041 + 360);
          *(v1083 - 64) = 0;
          if (*((_BYTE *)v1041 + 432))
          {
            WebCore::ShadowData::ShadowData((WebCore::ShadowData *)(v1083 - 64), (WTF *)((char *)v1041 + 368));
            *v1083 = 1;
          }
          v1039 = (char *)v1042 + 224 * v1047;
          v1040 = *((_DWORD *)v1041 + 110);
        }
        *((_DWORD *)v1039 + 54) = v1040;
        v93 = ++HIDWORD(v1375);
        goto LABEL_1981;
      }
      v67 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 16) + 24)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 528)
                                              + 8)
                                  + 296);
      v68 = *((_QWORD *)v67 + 382);
      if (!v68)
      {
        v426 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v426, v67);
        v427 = (WebCore::Editor *)*((_QWORD *)v67 + 382);
        *((_QWORD *)v67 + 382) = v426;
        if (v427)
        {
          WebCore::Editor::~Editor(v427, v13);
          if (*(_DWORD *)v428)
          {
            *(_QWORD *)(v428 + 496) = 0;
            *(_OWORD *)(v428 + 464) = 0u;
            *(_OWORD *)(v428 + 480) = 0u;
            *(_OWORD *)(v428 + 432) = 0u;
            *(_OWORD *)(v428 + 448) = 0u;
            *(_OWORD *)(v428 + 400) = 0u;
            *(_OWORD *)(v428 + 416) = 0u;
            *(_OWORD *)(v428 + 368) = 0u;
            *(_OWORD *)(v428 + 384) = 0u;
            *(_OWORD *)(v428 + 336) = 0u;
            *(_OWORD *)(v428 + 352) = 0u;
            *(_OWORD *)(v428 + 304) = 0u;
            *(_OWORD *)(v428 + 320) = 0u;
            *(_OWORD *)(v428 + 272) = 0u;
            *(_OWORD *)(v428 + 288) = 0u;
            *(_OWORD *)(v428 + 240) = 0u;
            *(_OWORD *)(v428 + 256) = 0u;
            *(_OWORD *)(v428 + 208) = 0u;
            *(_OWORD *)(v428 + 224) = 0u;
            *(_OWORD *)(v428 + 176) = 0u;
            *(_OWORD *)(v428 + 192) = 0u;
            *(_OWORD *)(v428 + 144) = 0u;
            *(_OWORD *)(v428 + 160) = 0u;
            *(_OWORD *)(v428 + 112) = 0u;
            *(_OWORD *)(v428 + 128) = 0u;
            *(_OWORD *)(v428 + 80) = 0u;
            *(_OWORD *)(v428 + 96) = 0u;
            *(_OWORD *)(v428 + 48) = 0u;
            *(_OWORD *)(v428 + 64) = 0u;
            *(_OWORD *)(v428 + 16) = 0u;
            *(_OWORD *)(v428 + 32) = 0u;
            *(_OWORD *)v428 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v428, v13);
          }
        }
        v68 = *((_QWORD *)v67 + 382);
        i = v1373;
      }
      v69 = *(_DWORD *)(v68 + 76);
      if (v69)
      {
        v7 = *(_QWORD *)(v68 + 64);
        v70 = (unsigned int *)(v7 + 40 * v69);
        v71 = (_BYTE *)(i + 104);
        v1364 = (WebCore::Color *)&v1436[8];
        v1369 = &v1436[16];
        v1366 = (WebCore::TextRun *)(i + 56);
        v13 = v1407;
        v3 = 0x4050000000000000;
        v8 = 2147483650.0;
        v9 = 0.0;
        v10 = -1.0;
        v11 = 0.5;
        v1367 = (char *)(i + 104);
        v1368 = v70;
        while (1)
        {
          while (1)
          {
            if (*(_BYTE *)(v7 + 16))
            {
              v841 = *(_QWORD *)(i + 8);
              v842 = *(_QWORD *)(*(_QWORD *)i + 8);
              v843 = *(unsigned int *)(v842 + 60);
              if (v841 >= v843)
              {
                __break(0xC471u);
                JUMPOUT(0x19424D694);
              }
              v844 = *(_DWORD *)(v7 + 4);
              v845 = *(_QWORD *)(v842 + 48);
              v846 = *(_DWORD *)(v845 + 80 * v841 + 68);
              if (v844 > v846)
                break;
            }
            v7 += 40;
            if ((unsigned int *)v7 == v70)
              goto LABEL_18;
          }
          v847 = *(_DWORD *)v7;
          if (*(_DWORD *)v7 >= *(_DWORD *)(v845 + 80 * v841 + 72) + v846)
            goto LABEL_18;
          *(_DWORD *)v1436 = *(_DWORD *)v7;
          v849 = *(_DWORD *)(i + 104);
          v848 = *(_DWORD *)(i + 108);
          v850 = v848 + v849;
          *(_DWORD *)v1407 = v848 + v849;
          if (__CFADD__(v848, v849))
            goto LABEL_1864;
          v851 = v850 >= v847 ? v1436 : v1407;
          v852 = v849 <= v847 ? v851 : v71;
          v853 = i;
          v95 = *v852 - v849;
          v854 = *(unsigned __int8 *)(v853 + 124);
          if (*(_BYTE *)(v853 + 124) && (v1006 = *(_DWORD *)(v1373 + 120)) != 0)
          {
            v95 = v1006 >= v95 ? v95 : v1006;
          }
          else if ((_DWORD)v95 == v848)
          {
            v95 = (*(_DWORD *)(v1373 + 112) + v848);
          }
          *(_DWORD *)v1436 = v844;
          *(_DWORD *)v1407 = v848 + v849;
          v855 = v850 >= v844 ? v1436 : v1407;
          v856 = v849 <= v844 ? v855 : v71;
          v4 = *v856 - v849;
          if (v854 && (v1007 = *(_DWORD *)(v1373 + 120)) != 0)
          {
            v4 = v1007 >= v4 ? v4 : v1007;
          }
          else if ((_DWORD)v4 == v848)
          {
            v4 = (*(_DWORD *)(v1373 + 112) + v848);
          }
          if (v4 > v95)
            break;
LABEL_1755:
          if (v841 >= v843)
          {
            __break(0xC471u);
            JUMPOUT(0x19424D704);
          }
          v965 = *(_DWORD *)(v7 + 4);
          v7 += 40;
          v966 = v965 > *(_DWORD *)(*(_QWORD *)(v842 + 48) + 80 * v841 + 72)
                      + *(_DWORD *)(*(_QWORD *)(v842 + 48) + 80 * v841 + 68)
              || v7 == (_QWORD)v70;
          i = v1373;
          if (v966)
            goto LABEL_18;
        }
        v28 = v7 + 8;
        v2 = *(_QWORD *)(*(_QWORD *)(v1373 + 96) + 80);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 1);
        v857 = *(_QWORD *)(v7 + 8);
        *(_QWORD *)v1436 = v857;
        LODWORD(v1371) = v4 - v95;
        if ((v857 & 0x8000000000000) != 0)
        {
          v1008 = (unsigned int *)(v857 & 0xFFFFFFFFFFFFLL);
          do
            v1009 = __ldaxr(v1008);
          while (__stlxr(v1009 + 1, v1008));
          v1010 = *(unsigned int **)v28;
          *(_QWORD *)&v1436[8] = v1010;
          v27 = (char *)v1380;
          if (((unint64_t)v1010 & 0x8000000000000) != 0)
          {
            v1011 = (unsigned int *)((unint64_t)v1010 & 0xFFFFFFFFFFFFLL);
            do
              v1012 = __ldaxr(v1011);
            while (__stlxr(v1012 + 1, v1011));
          }
        }
        else
        {
          *(_QWORD *)&v1436[8] = v857;
          v27 = (char *)v1380;
        }
        *(_QWORD *)&v1436[16] = 0;
        *(_QWORD *)&v1436[24] = 0;
        v1437[0] = 0;
        *(_DWORD *)&v1437[4] = 1082130432;
        v858 = *(_BYTE *)(v2 + 341);
        if (*(_BYTE *)(v2 + 347))
        {
          *(_BYTE *)(v2 + 347) = 0;
          *(_DWORD *)(v2 + 184) |= 0x10000u;
        }
        v5 = v2 + 8;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v2 + 8);
        v1404[0] = *(WTF **)v1436;
        if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
        {
          v1013 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
          do
            v1014 = __ldaxr(v1013);
          while (__stlxr(v1014 + 1, v1013));
        }
        if ((v858 & 3) == 1)
        {
          v860 = (unint64_t)v1404[0];
          v861 = *(WTF **)v5;
          if (((unint64_t)v1404[0] & 0x8000000000000) != 0)
          {
            if (((unint64_t)v861 & 0x8000000000000) != 0)
            {
              *(_OWORD *)v1407 = *(_OWORD *)(((unint64_t)v1404[0] & 0xFFFFFFFFFFFFLL) + 4);
              *(_OWORD *)v1380 = *(_OWORD *)(((unint64_t)v861 & 0xFFFFFFFFFFFFLL) + 4);
              if (WebCore::operator==<float,4ul>((float *)v1407, (float *)v1380)
                && HIBYTE(v860) == HIBYTE(*(_QWORD *)v5))
              {
                v27 = (char *)v1380;
                v3 = 0x4050000000000000;
                if (BYTE6(v860) == BYTE6(*(_QWORD *)v5))
                {
LABEL_1615:
                  if (((unint64_t)v1404[0] & 0x8000000000000) != 0)
                  {
                    v1024 = (unsigned int *)((unint64_t)v1404[0] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v1025 = __ldaxr(v1024);
                      v1026 = v1025 - 1;
                    }
                    while (__stlxr(v1026, v1024));
                    v27 = (char *)v1380;
                    v3 = 0x4050000000000000;
                    if (!v1026)
                    {
                      atomic_store(1u, v1024);
                      WTF::fastFree((WTF *)v1024, v859);
                    }
                  }
                  if ((*(_QWORD *)&v1436[16] & 0x8000000000000) != 0)
                  {
                    v1027 = (unsigned int *)(*(_QWORD *)&v1436[16] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v1028 = __ldaxr(v1027);
                      v1029 = v1028 - 1;
                    }
                    while (__stlxr(v1029, v1027));
                    v27 = (char *)v1380;
                    v3 = 0x4050000000000000;
                    if (!v1029)
                    {
                      atomic_store(1u, v1027);
                      WTF::fastFree((WTF *)v1027, v859);
                    }
                  }
                  if ((*(_QWORD *)&v1436[8] & 0x8000000000000) != 0)
                  {
                    v1030 = (unsigned int *)(*(_QWORD *)&v1436[8] & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v1031 = __ldaxr(v1030);
                      v1032 = v1031 - 1;
                    }
                    while (__stlxr(v1032, v1030));
                    v27 = (char *)v1380;
                    v3 = 0x4050000000000000;
                    if (!v1032)
                    {
                      atomic_store(1u, v1030);
                      WTF::fastFree((WTF *)v1030, v859);
                    }
                  }
                  if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
                  {
                    v1033 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v1034 = __ldaxr(v1033);
                      v1035 = v1034 - 1;
                    }
                    while (__stlxr(v1035, v1033));
                    v27 = (char *)v1380;
                    v3 = 0x4050000000000000;
                    if (!v1035)
                    {
                      atomic_store(1u, v1033);
                      WTF::fastFree((WTF *)v1033, v859);
                    }
                  }
                  v863 = *(_QWORD *)v1373;
                  if (*(_QWORD *)v1373)
                  {
                    do
                      v864 = __ldaxr((unsigned int *)v863);
                    while (__stlxr(v864 + 1, (unsigned int *)v863));
                  }
                  v865 = *(_QWORD *)(v1373 + 8);
                  *(_QWORD *)v1436 = v863;
                  *(_QWORD *)&v1436[8] = v865;
                  *(_DWORD *)&v1436[16] = 0;
                  v866 = *(_QWORD *)(v863 + 8);
                  if (v865 >= *(unsigned int *)(v866 + 60))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19424D8E8);
                  }
                  v867 = *(_WORD *)(*(_QWORD *)(v866 + 48) + 80 * v865 + 50);
                  v868 = v867 & 0xE;
                  v869 = v867 & 0xF;
                  if (v868)
                    v870 = v869 == 3;
                  else
                    v870 = 1;
                  if (!v870)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19424D4E0);
                  }
                  std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(v1436, (uint64_t)v1407);
                  if (*(_DWORD *)&v1436[16] != -1)
                    ((void (*)(WTF **, _BYTE *))off_1E343A000[*(unsigned int *)&v1436[16]])(v1380, v1436);
                  if (*(_DWORD *)&v1407[16] == -1)
                    goto LABEL_2584;
                  *(_QWORD *)v1436 = v1380;
                  (*(&off_1E343A020 + *(unsigned int *)&v1407[16]))((int)v1436, (WebCore::InlineIterator::LineBoxIteratorModernPath *)v1407);
                  if (*(_DWORD *)&v1407[16] == -1)
                    goto LABEL_2584;
                  v872 = v871;
                  *(_QWORD *)v1436 = v1380;
                  v873 = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E343A030[*(unsigned int *)&v1407[16]])(v1436, v1407);
                  if (*(_DWORD *)&v1407[16] == -1)
                    goto LABEL_2584;
                  v5 = v873;
                  v1370 = (WTF *)v28;
                  *(_QWORD *)v1436 = v1380;
                  v875 = ((float (*)(_BYTE *, _BYTE *))*(&off_1E343A040 + *(unsigned int *)&v1407[16]))(v1436, v1407)* 64.0;
                  if (v875 >= 2147483650.0 || v875 <= -2147483650.0)
                  {
                    if (v875 >= 2147483650.0)
                    {
                      v28 = 0x7FFFFFFFLL;
                    }
                    else if (v875 > -2147483650.0)
                    {
                      v28 = (int)v875;
                    }
                    else
                    {
                      v28 = 0x80000000;
                    }
                  }
                  else
                  {
                    v28 = (int)v875;
                  }
                  if ((*(_DWORD *)(v5 + 20) & 0xC000000) != 0x4000000
                    || (WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v5) & 1) != 0)
                  {
                    goto LABEL_1639;
                  }
                  v967 = 0;
                  v968 = 0;
                  while (1)
                  {
                    v969 = *(unsigned int *)(v5 + 40);
                    if (v969 | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32)
                      && (v6 = *(_QWORD *)((v969 | ((unint64_t)*(unsigned __int8 *)(v5 + 44) << 32)) + 8)) != 0)
                    {
                      while ((*(_BYTE *)(v6 + 45) & 0x40) == 0
                           || WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v6))
                      {
                        v970 = *(unsigned int *)(v6 + 40);
                        if (!(v970 | ((unint64_t)*(unsigned __int8 *)(v6 + 44) << 32)))
                          goto LABEL_1772;
                        v971 = 0;
                        v6 = *(_QWORD *)((v970 | ((unint64_t)*(unsigned __int8 *)(v6 + 44) << 32)) + 8);
                        if (!v6)
                          goto LABEL_1773;
                      }
                      v971 = v6;
                    }
                    else
                    {
LABEL_1772:
                      v971 = 0;
                    }
LABEL_1773:
                    if ((*(_BYTE *)(v5 + 45) & 0x40) == 0)
                      goto LABEL_1865;
                    v972 = (int *)(v5 + 156);
                    if (((*(_DWORD *)(v5 + 124) >> 13) & 6u) - 2 >= 4)
                      v973 = (_DWORD *)(v5 + 152);
                    else
                      v973 = (_DWORD *)(v5 + 156);
                    if (((*(_DWORD *)(v5 + 124) >> 13) & 6u) - 2 < 4)
                      v972 = (int *)(v5 + 152);
                    v974 = *v972;
                    if (__OFSUB__(v968, *v973))
                      v968 = (v968 >> 31) + 0x7FFFFFFF;
                    else
                      v968 -= *v973;
                    v677 = __OFSUB__(v967, v974);
                    v975 = v967 - v974;
                    v967 = v677 ? (v967 >> 31) + 0x7FFFFFFF : v975;
                    v976 = *(_QWORD *)(v5 + 32);
                    if (!v976)
                      break;
                    if (v971)
                      goto LABEL_1796;
                    v5 = *(_QWORD *)(v976 + 8);
                    if (!v5
                      || (*(_BYTE *)(v5 + 45) & 0x40) == 0
                      || (WebCore::RenderBlock::isSelectionRoot((WebCore::RenderBlock *)v5) & 1) != 0)
                    {
                      goto LABEL_1639;
                    }
                  }
                  if (!v971)
                  {
LABEL_1639:
                    v877 = (float)(int)v28 * 0.015625;
                    v878 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v1373 + 32) + 44) >> 13;
                    v149 = v878 > 4;
                    v879 = (1 << v878) & 0x16;
                    if (v149 || v879 == 0)
                      v1023 = *(float *)(v1373 + 44) - v877;
                    else
                      v1023 = v872 - (float)(*(float *)(v1373 + 44) + *(float *)(v1373 + 52));
                    v881 = v1023 * 64.0;
                    if (v881 >= 2147483650.0 || v881 <= -2147483650.0)
                    {
                      if (v881 > -2147483650.0)
                        v883 = (int)v881;
                      else
                        v883 = 0x80000000;
                      if (v881 >= 2147483650.0)
                        v883 = 0x7FFFFFFF;
                    }
                    else
                    {
                      v883 = (int)v881;
                    }
                    v884 = fmaxf(v872 - v877, 0.0) * 64.0;
                    if (v884 >= 2147483650.0 || v884 <= -2147483650.0)
                    {
                      if (v884 >= 2147483650.0)
                      {
                        v886 = 0x7FFFFFFF;
                      }
                      else if (v884 > -2147483650.0)
                      {
                        v886 = (int)v884;
                      }
                      else
                      {
                        v886 = 0x80000000;
                      }
                    }
                    else
                    {
                      v886 = (int)v884;
                    }
                    v887 = *(float *)(v1373 + 136) * 64.0;
                    if (v887 >= 2147483650.0 || v887 <= -2147483650.0)
                    {
                      if (v887 >= 2147483650.0)
                      {
                        v889 = 0x7FFFFFFF;
                      }
                      else if (v887 <= -2147483650.0)
                      {
                        v889 = 0x80000000;
                      }
                      else
                      {
                        v889 = (int)v887;
                      }
                    }
                    else
                    {
                      v889 = (int)v887;
                    }
                    v890 = (float)(*(float *)(v1373 + 140) + (float)((float)v883 * -0.015625)) * 64.0;
                    if (v890 >= 2147483650.0 || v890 <= -2147483650.0)
                    {
                      if (v890 >= 2147483650.0)
                      {
                        v892 = 0x7FFFFFFF;
                      }
                      else if (v890 <= -2147483650.0)
                      {
                        v892 = 0x80000000;
                      }
                      else
                      {
                        v892 = (int)v890;
                      }
                    }
                    else
                    {
                      v892 = (int)v890;
                    }
                    v893 = *(float *)(v1373 + 48) * 64.0;
                    if (v893 >= 2147483650.0 || v893 <= -2147483650.0)
                    {
                      if (v893 >= 2147483650.0)
                      {
                        v894 = 0x7FFFFFFF;
                      }
                      else if (v893 <= -2147483650.0)
                      {
                        v894 = 0x80000000;
                      }
                      else
                      {
                        v894 = (int)v893;
                      }
                    }
                    else
                    {
                      v894 = (int)v893;
                    }
                    v1380[0] = (WTF *)__PAIR64__(v892, v889);
                    v1380[1] = (WTF *)__PAIR64__(v886, v894);
                    if (*(_BYTE *)(v1373 + 153))
                    {
                      v1015 = *(_QWORD *)(v1373 + 16);
                      if (*(_BYTE *)(v1015 + 46) != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19424D960);
                      }
                      v899 = *(_QWORD *)(v1015 + 120);
                    }
                    else
                    {
                      v895 = *(_QWORD *)(v1373 + 8);
                      v896 = *(_QWORD *)(*(_QWORD *)v1373 + 8);
                      if (v895 >= *(unsigned int *)(v896 + 60))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19424D8F0);
                      }
                      v897 = *(_QWORD *)(v896 + 48) + 80 * v895;
                      v898 = *(_QWORD *)v897;
                      if (*(_DWORD *)(v897 + 40) || (*(_WORD *)(v898 + 12) & 0x200) == 0)
                        goto LABEL_1671;
                      v1016 = WebCore::Layout::Box::rareDataMap(void)::map;
                      LODWORD(v6) = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                      v1017 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v898) & v6;
                      if (*(_QWORD *)(v1016 + 16 * v1017) != v898)
                      {
                        v1018 = 1;
                        do
                          v1017 = ((_DWORD)v1017 + v1018++) & v6;
                        while (*(_QWORD *)(v1016 + 16 * v1017) != v898);
                      }
                      if (*(_QWORD *)(*(_QWORD *)(v1016 + 16 * v1017 + 8) + 24))
                      {
                        v1019 = WebCore::Layout::Box::rareDataMap(void)::map;
                        v1020 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
                        v1021 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v898) & v1020;
                        if (*(_QWORD *)(v1019 + 16 * v1021) != v898)
                        {
                          v1022 = 1;
                          do
                            v1021 = ((_DWORD)v1021 + v1022++) & v1020;
                          while (*(_QWORD *)(v1019 + 16 * v1021) != v898);
                        }
                        v899 = *(_QWORD *)(*(_QWORD *)(v1019 + 16 * v1021 + 8) + 24);
                      }
                      else
                      {
LABEL_1671:
                        v899 = v898 + 16;
                      }
                    }
                    v900 = *(_QWORD *)(v899 + 32);
                    if (*(unsigned __int16 *)(*(_QWORD *)(v1373 + 16) + 112) <= 0x100u)
                      v901 = 0;
                    else
                      v901 = *(_WORD *)(*(_QWORD *)(v1373 + 16) + 112);
                    v902 = WebCore::FontCascade::s_codePath;
                    if (!WebCore::FontCascade::s_codePath)
                    {
                      v903 = *(_QWORD *)(v1373 + 64);
                      if (!v903 || (*(_BYTE *)(v1373 + 93) & 8) == 0 || (*(_BYTE *)(v903 + 16) & 4) != 0)
                        goto LABEL_1679;
                      v902 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v903 + 8), *(unsigned int *)(v903 + 4));
                    }
                    if (v902 == 2)
                    {
LABEL_1692:
                      WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v1436, v900 + 32, (uint64_t)v1366, 0, 0, 0);
                      WebCore::ComplexTextController::advance((uint64_t)v1436, v95, 0, 0, 0, v906, v907, v908, v909, v910, v911);
                      v912 = v1459;
                      WebCore::ComplexTextController::advance((uint64_t)v1436, v4, 0, 0, 0, v913, v914, v915, v916, v917, v918);
                      v920 = v1459;
                      v921 = (_QWORD *)v1373;
                      if ((*(_BYTE *)(v1373 + 93) & 2) != 0)
                      {
                        WebCore::LayoutRect::move<float,int>((int *)v1380, 0, v1458 - v1459);
                      }
                      else
                      {
                        v922 = (float)(v912 + (float)((float)SLODWORD(v1380[0]) * 0.015625)) * 64.0;
                        if (v922 >= 2147483650.0 || v922 <= -2147483650.0)
                        {
                          if (v922 >= 2147483650.0)
                          {
                            v924 = 0x7FFFFFFF;
                          }
                          else if (v922 <= -2147483650.0)
                          {
                            v924 = 0x80000000;
                          }
                          else
                          {
                            v924 = (int)v922;
                          }
                          v921 = (_QWORD *)v1373;
                        }
                        else
                        {
                          v924 = (int)v922;
                        }
                        LODWORD(v1380[0]) = v924;
                      }
                      v925 = ceilf((float)(v920 - v912) * 64.0);
                      if (v925 >= 2147500000.0 || v925 <= -2147500000.0)
                      {
                        if (v925 >= 2147500000.0)
                        {
                          v927 = 0x7FFFFFFF;
                        }
                        else if (v925 <= -2147500000.0)
                        {
                          v927 = 0x80000000;
                        }
                        else
                        {
                          v927 = (int)v925;
                        }
                        v921 = (_QWORD *)v1373;
                      }
                      else
                      {
                        v927 = (int)v925;
                      }
                      LODWORD(v1380[1]) = v927;
                      WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v1436, v919);
                      goto LABEL_1705;
                    }
                    if (!v901)
                      goto LABEL_1691;
LABEL_1679:
                    v6 = *(_QWORD *)(v900 + 248);
                    if (v6)
                      ++*(_DWORD *)v6;
                    v904 = *(_BYTE *)(v6 + 152) & 3;
                    if (v904 == 2)
                    {
                      WebCore::FontCascadeFonts::determineCanTakeFixedPitchFastContentMeasuring((WebCore::FontCascadeFonts *)v6, (const WebCore::FontCascadeDescription *)(v900 + 48));
                      v904 = *(_BYTE *)(v6 + 152) & 3;
                    }
                    if (*(_DWORD *)v6 == 1)
                    {
                      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v6, v874);
                      WTF::fastFree(v977, v978);
                    }
                    else
                    {
                      --*(_DWORD *)v6;
                    }
                    if (v904 == 1)
                    {
                      WebCore::FontCascade::adjustSelectionRectForSimpleTextWithFixedPitch((WebCore::FontCascade *)(v900 + 32), v1366, (WebCore::LayoutRect *)v1380, v95, v4);
                    }
                    else
                    {
LABEL_1691:
                      if (*(_BYTE *)(v900 + 261) || *(_BYTE *)(v900 + 262))
                      {
                        if ((_DWORD)v95)
                          goto LABEL_1692;
                        v905 = *(_QWORD *)(v1373 + 64);
                        if (v905)
                          LODWORD(v905) = *(_DWORD *)(v905 + 4);
                        if ((_DWORD)v4 != (_DWORD)v905)
                          goto LABEL_1692;
                      }
                      WebCore::FontCascade::adjustSelectionRectForSimpleText((WebCore::FontCascade *)(v900 + 32), v1366, (WebCore::LayoutRect *)v1380);
                    }
                    v921 = (_QWORD *)v1373;
LABEL_1705:
                    v928 = v921[8];
                    if (v928)
                      LODWORD(v928) = *(_DWORD *)(v928 + 4);
                    if ((_DWORD)v928 == (_DWORD)v1371)
                    {
                      v929 = LODWORD(v1380[0]) + LODWORD(v1380[1]);
                      v930 = __OFADD__(v1380[0], v1380[1]);
                      v931 = LODWORD(v1380[0]) + LODWORD(v1380[1]);
                      if (__OFADD__(v1380[0], v1380[1]))
                        v931 = (LODWORD(v1380[0]) >> 31) + 0x7FFFFFFF;
                      v932 = v889 + v894;
                      if (__OFADD__(v889, v894))
                        v932 = (v889 >> 31) + 0x7FFFFFFF;
                      if (v931 <= v932)
                        v931 = v932;
                      if (v930)
                        v929 = (LODWORD(v1380[0]) >> 31) + 0x7FFFFFFF;
                      v677 = __OFSUB__(v931, v929);
                      v933 = v931 - v929;
                      if (v677)
                        v933 = (v931 >> 31) + 0x7FFFFFFF;
                      v677 = __OFADD__(v1380[1], v933);
                      v934 = LODWORD(v1380[1]) + v933;
                      if (v677)
                        v934 = (LODWORD(v1380[1]) >> 31) + 0x7FFFFFFF;
                      LODWORD(v1380[1]) = v934 & ~(v934 >> 31);
                    }
                    v935 = *(_QWORD *)(v921[3] + 528);
                    v936 = 1.0;
                    if (v935)
                    {
                      v937 = *(_QWORD *)(v935 + 8);
                      v71 = v1367;
                      v70 = v1368;
                      v3 = 0x4050000000000000;
                      if (v937)
                      {
                        v938 = *(_QWORD *)(v937 + 24);
                        if (v938)
                        {
                          v939 = *(_QWORD *)(v938 + 8);
                          if (v939)
                          {
                            v940 = (*(_DWORD *)v939)++;
                            v936 = *(float *)(v939 + 364);
                            if (v940)
                            {
                              *(_DWORD *)v939 = v940;
                            }
                            else
                            {
                              WebCore::Page::~Page(v939);
                              WTF::fastFree(v993, v994);
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      v71 = v1367;
                      v70 = v1368;
                      v3 = 0x4050000000000000;
                    }
                    v941 = (double)SLODWORD(v1380[0]) * 0.015625;
                    if (v941 < 0.0)
                      v942 = round((v941 + (double)-LODWORD(v1380[0])) * v936) / v936
                           - (double)-LODWORD(v1380[0]);
                    else
                      v942 = round(v941 * v936) / v936;
                    v943 = (double)SHIDWORD(v1380[0]) * 0.015625;
                    if (v943 < 0.0)
                      v944 = round((v943 + (double)-HIDWORD(v1380[0])) * v936) / v936
                           - (double)-HIDWORD(v1380[0]);
                    else
                      v944 = round(v943 * v936) / v936;
                    v945 = (uint64_t)v1380[0] & 0x3F;
                    if (SLODWORD(v1380[0]) <= 0)
                      v945 = -(-LODWORD(v1380[0]) & 0x3F);
                    v946 = v945 + LODWORD(v1380[1]);
                    if (__OFADD__(v945, v1380[1]))
                      v946 = (v945 >> 31) + 0x7FFFFFFF;
                    v947 = (double)v946 * 0.015625;
                    if (v947 < 0.0)
                      v948 = round((v947 + (double)-v946) * v936) / v936 - (double)-v946;
                    else
                      v948 = round(v947 * v936) / v936;
                    v949 = (double)v945 * 0.015625;
                    if (v949 < 0.0)
                      v950 = round((v949 + (double)-v945) * v936) / v936 - (double)-v945;
                    else
                      v950 = round(v949 * v936) / v936;
                    v951 = BYTE4(v1380[0]) & 0x3F;
                    if (SHIDWORD(v1380[0]) <= 0)
                      v951 = -(-HIDWORD(v1380[0]) & 0x3F);
                    v952 = v951 + HIDWORD(v1380[1]);
                    if (__OFADD__(v951, HIDWORD(v1380[1])))
                      v952 = (v951 >> 31) + 0x7FFFFFFF;
                    v953 = (double)v952 * 0.015625;
                    if (v953 < 0.0)
                      v954 = round((v953 + (double)-v952) * v936) / v936 - (double)-v952;
                    else
                      v954 = round(v953 * v936) / v936;
                    v955 = (double)v951 * 0.015625;
                    if (v955 < 0.0)
                      v956 = round((v955 + (double)-v951) * v936) / v936 - (double)-v951;
                    else
                      v956 = round(v955 * v936) / v936;
                    v957 = v944;
                    v958 = v942;
                    v959 = v948;
                    v960 = v950;
                    v961 = v959 - v960;
                    v962 = v954;
                    v963 = v956;
                    *(float *)v1436 = v958 + 0.5;
                    *(float *)&v1436[4] = v957 + 0.5;
                    *(float *)&v1436[8] = v961 + -1.0;
                    *(float *)&v1436[12] = (float)(v962 - v963) + -1.0;
                    *(_QWORD *)&v964 = 0x4000000040000000;
                    *((_QWORD *)&v964 + 1) = 0x4000000040000000;
                    *(_OWORD *)&v1436[16] = v964;
                    *(_OWORD *)v1437 = v964;
                    (*(void (**)(uint64_t, _BYTE *, WTF *, uint64_t))(*(_QWORD *)v2 + 264))(v2, v1436, v1370, 1);
                    if (*(_DWORD *)&v1407[16] != -1)
                      ((void (*)(_BYTE *, _BYTE *))off_1E343A050[*(unsigned int *)&v1407[16]])(v1436, v1407);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, 1);
                    v841 = v921[1];
                    v842 = *(_QWORD *)(*v921 + 8);
                    v843 = *(unsigned int *)(v842 + 60);
                    v13 = v1407;
                    goto LABEL_1755;
                  }
LABEL_1796:
                  if ((*(_BYTE *)(v971 + 45) & 0x40) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19424D478);
                  }
                  if (((*(_DWORD *)(v971 + 124) >> 13) & 6u) - 2 < 4)
                  {
                    v979 = (int *)(v971 + 156);
                    v980 = (int *)(v971 + 152);
                  }
                  else
                  {
                    v979 = (int *)(v971 + 152);
                    v980 = (int *)(v971 + 156);
                  }
                  v981 = *v979;
                  v677 = __OFADD__(v968, v981);
                  v982 = v968 + v981;
                  if (v677)
                    v982 = (v968 >> 31) + 0x7FFFFFFF;
                  v27 = (char *)0xC1E0000000000000;
                  v983 = *v980;
                  v984 = v967 + v983;
                  if (__OFADD__(v967, v983))
                    v984 = (v967 >> 31) + 0x7FFFFFFF;
                  v3 = 0x4050000000000000;
                  while (1)
                  {
                    v985 = *(unsigned int *)(v971 + 71);
                    if (!(v985 | ((unint64_t)*(unsigned __int8 *)(v971 + 75) << 32)))
                      break;
                    v986 = *(_QWORD *)((v985 | ((unint64_t)*(unsigned __int8 *)(v971 + 75) << 32)) + 8);
                    if (!v986 || (*(_BYTE *)(v986 + 45) & 0x40) == 0)
                      break;
                    v971 = *(_QWORD *)((v985 | ((unint64_t)*(unsigned __int8 *)(v971 + 75) << 32)) + 8);
                    v987 = ((*(_DWORD *)(v986 + 124) >> 13) & 6u) - 2 >= 4;
                    v988 = (int *)(v986 + 156);
                    if (v987)
                      v989 = (_DWORD *)(v971 + 152);
                    else
                      v989 = (_DWORD *)(v971 + 156);
                    if (!v987)
                      v988 = (int *)(v971 + 152);
                    v990 = *v988;
                    v677 = __OFADD__(v982, *v989);
                    v991 = v982 + *v989;
                    v982 = (v982 >> 31) + 0x7FFFFFFF;
                    if (!v677)
                      v982 = v991;
                    v677 = __OFADD__(v984, v990);
                    v992 = v984 + v990;
                    if (v677)
                      v984 = (v984 >> 31) + 0x7FFFFFFF;
                    else
                      v984 = v992;
                  }
                  if ((*(_BYTE *)(v971 + 52) & 7) != 1 || !v984)
                    goto LABEL_1639;
                  WebCore::InlineIterator::lastLineBoxFor((unsigned int *)v971, (const WebCore::RenderBlockFlow *)v874, (uint64_t)v1436);
                  if (*(_DWORD *)&v1436[16] == -1)
                    goto LABEL_2584;
                  v1380[0] = (WTF *)v1404;
                  if ((((uint64_t (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[*(unsigned int *)&v1436[16]])(v1380, v1436) & 1) != 0)
                  {
                    v1001 = 1;
                  }
                  else
                  {
                    if (WebCore::LineSelection::selectionState((WebCore::LineSelection *)v1436, (const WebCore::InlineIterator::LineBox *)v874, v995, v996, v997, v998, v999, v1000, v1361)- 1 <= 1)
                    {
                      if (*(_DWORD *)&v1436[16] == -1)
                        goto LABEL_2584;
                      v1380[0] = (WTF *)v1404;
                      v1003 = (float)((float)((float)v984 * 0.015625)
                                    + ((float (*)(WTF **, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox47contentLogicalBottomAdjustedForFollowingLineBoxEvEUlRKT_E_JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOSB_DpOT0____fmatrix
                                                                              + *(unsigned int *)&v1436[16]))(v1380, v1436))* 64.0;
                      if (v1003 >= 2147483650.0 || v1003 <= -2147483650.0)
                      {
                        if (v1003 >= 2147483650.0)
                        {
                          v1005 = 0x7FFFFFFF;
                        }
                        else if (v1003 <= -2147483650.0)
                        {
                          v1005 = 0x80000000;
                        }
                        else
                        {
                          v1005 = (int)v1003;
                        }
                      }
                      else
                      {
                        v1005 = (int)v1003;
                      }
                      if (v1005 <= (int)v28)
                        v1002 = v28;
                      else
                        v1002 = v1005;
                      v1001 = 1;
                      goto LABEL_1826;
                    }
                    v1001 = 0;
                  }
                  v1002 = v28;
LABEL_1826:
                  if (*(_DWORD *)&v1436[16] != -1)
                    ((void (*)(WTF **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[*(unsigned int *)&v1436[16]])(v1380, v1436);
                  if (v1001)
                    LODWORD(v28) = v1002;
                  goto LABEL_1639;
                }
              }
              else
              {
                v27 = (char *)v1380;
                v3 = 0x4050000000000000;
              }
            }
          }
          else if (v1404[0] == v861 && ((unint64_t)v861 & 0x8000000000000) == 0)
          {
            goto LABEL_1615;
          }
          WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v2, (const WebCore::Color *)v1404);
          goto LABEL_1615;
        }
        LODWORD(v6) = v7 + 8;
        if ((v858 & 1) != 0)
        {
          v1036 = (unint64_t)v1404[0];
          v1037 = *(WTF **)v5;
          if (((unint64_t)v1404[0] & 0x8000000000000) == 0)
          {
            if (v1404[0] == v1037 && ((unint64_t)v1037 & 0x8000000000000) == 0)
              goto LABEL_1918;
LABEL_1972:
            WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v2, (const WebCore::Color *)v1404);
            goto LABEL_1918;
          }
          if (((unint64_t)v1037 & 0x8000000000000) == 0)
            goto LABEL_1972;
          *(_OWORD *)v1407 = *(_OWORD *)(((unint64_t)v1404[0] & 0xFFFFFFFFFFFFLL) + 4);
          *(_OWORD *)v1380 = *(_OWORD *)(((unint64_t)v1037 & 0xFFFFFFFFFFFFLL) + 4);
          if (!WebCore::operator==<float,4ul>((float *)v1407, (float *)v1380)
            || HIBYTE(v1036) != HIBYTE(*(_QWORD *)v5)
            || BYTE6(v1036) != BYTE6(*(_QWORD *)v5))
          {
            goto LABEL_1972;
          }
        }
LABEL_1918:
        v27 = (char *)v1380;
        v3 = 0x4050000000000000;
        if ((v858 & 2) != 0)
        {
          if (!WebCore::operator==((uint64_t *)&v1436[8], (uint64_t *)(v2 + 96)))
            WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v2, (const WebCore::Color *)&v1436[8]);
          v1038.n128_u32[0] = *(_DWORD *)&v1436[24];
          if (*(float *)&v1436[24] != *(float *)(v2 + 188))
          {
            *(_DWORD *)(v2 + 188) = *(_DWORD *)&v1436[24];
            *(_DWORD *)(v2 + 184) |= 8u;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v2 + 8);
          }
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v2 + 312))(v2, v1436[31], v1038);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 296))(v2, v1437[0]);
          v27 = (char *)v1380;
          v28 = v7 + 8;
          if (!v1436[31])
            (*(void (**)(uint64_t, float))(*(_QWORD *)v2 + 320))(v2, *(float *)&v1437[4]);
        }
        goto LABEL_1615;
      }
      v127 = *(_DWORD *)(v68 + 40);
      v126 = *(_DWORD *)(v68 + 44);
      *(_DWORD *)v1436 = v127;
      v129 = *(_DWORD *)(i + 104);
      v128 = *(_DWORD *)(i + 108);
      v130 = v128 + v129;
      *(_DWORD *)v1407 = v128 + v129;
      if (__CFADD__(v128, v129))
      {
LABEL_1864:
        __break(1u);
LABEL_1865:
        __break(0xC471u);
        JUMPOUT(0x19424D3ECLL);
      }
      v131 = v1436;
      if (v130 < v127)
        v131 = v1407;
      if (v129 <= v127)
        v132 = v131;
      else
        v132 = (_DWORD *)(i + 104);
      v28 = *v132 - v129;
      v133 = *(unsigned __int8 *)(i + 124);
      if (*(_BYTE *)(i + 124) && (v392 = *(_DWORD *)(i + 120)) != 0)
      {
        if (v392 >= v28)
          v28 = v28;
        else
          v28 = v392;
      }
      else if ((_DWORD)v28 == v128)
      {
        v28 = (*(_DWORD *)(i + 112) + v128);
      }
      *(_DWORD *)v1436 = v126;
      *(_DWORD *)v1407 = v128 + v129;
      v987 = v130 >= v126;
      v134 = v1436;
      if (!v987)
        v134 = v1407;
      if (v129 <= v126)
        v135 = v134;
      else
        v135 = (_DWORD *)(i + 104);
      v95 = *v135 - v129;
      if (v133 && (v393 = *(_DWORD *)(v1373 + 120)) != 0)
      {
        if (v393 >= v95)
          v95 = v95;
        else
          v95 = v393;
      }
      else if ((_DWORD)v95 == v128)
      {
        v95 = (*(_DWORD *)(v1373 + 112) + v128);
      }
      v1404[0] = (WTF *)0x11040000AFC0E33CLL;
      v3 = (v95 - v28);
      if (v95 <= v28)
      {
LABEL_302:
        i = v1373;
        goto LABEL_18;
      }
      v27 = *(char **)(*(_QWORD *)(v1373 + 96) + 80);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v27 + 96))(v27, 1);
      *(WTF **)v1436 = v1404[0];
      *(WTF **)&v1436[8] = v1404[0];
      *(_QWORD *)&v1436[24] = 0;
      *(_QWORD *)&v1436[16] = 0;
      v1437[0] = 0;
      *(_DWORD *)&v1437[4] = 1082130432;
      WebCore::updateGraphicsContext((uint64_t)v27, (uint64_t)v1436, 0);
      if ((*(_QWORD *)&v1436[16] & 0x8000000000000) != 0)
      {
        v528 = (unsigned int *)(*(_QWORD *)&v1436[16] & 0xFFFFFFFFFFFFLL);
        do
        {
          v529 = __ldaxr(v528);
          v530 = v529 - 1;
        }
        while (__stlxr(v530, v528));
        if (!v530)
        {
          atomic_store(1u, v528);
          WTF::fastFree((WTF *)v528, v136);
        }
      }
      if ((*(_QWORD *)&v1436[8] & 0x8000000000000) != 0)
      {
        v531 = (unsigned int *)(*(_QWORD *)&v1436[8] & 0xFFFFFFFFFFFFLL);
        do
        {
          v532 = __ldaxr(v531);
          v533 = v532 - 1;
        }
        while (__stlxr(v533, v531));
        if (!v533)
        {
          atomic_store(1u, v531);
          WTF::fastFree((WTF *)v531, v136);
        }
      }
      if ((*(_QWORD *)v1436 & 0x8000000000000) != 0)
      {
        v534 = (unsigned int *)(*(_QWORD *)v1436 & 0xFFFFFFFFFFFFLL);
        do
        {
          v535 = __ldaxr(v534);
          v536 = v535 - 1;
        }
        while (__stlxr(v536, v534));
        if (!v536)
        {
          atomic_store(1u, v534);
          WTF::fastFree((WTF *)v534, v136);
        }
      }
      v137 = *(_QWORD *)v1373;
      if (*(_QWORD *)v1373)
      {
        do
          v138 = __ldaxr((unsigned int *)v137);
        while (__stlxr(v138 + 1, (unsigned int *)v137));
      }
      v139 = *(_QWORD *)(v1373 + 8);
      *(_QWORD *)v1407 = v137;
      *(_QWORD *)&v1407[8] = v139;
      *(_DWORD *)&v1407[16] = 0;
      v140 = *(_QWORD *)(v137 + 8);
      if (v139 >= *(unsigned int *)(v140 + 60))
      {
        __break(0xC471u);
        JUMPOUT(0x19424A460);
      }
      v141 = *(_WORD *)(*(_QWORD *)(v140 + 48) + 80 * v139 + 50);
      v142 = v141 & 0xE;
      v143 = v141 & 0xF;
      if (v142)
        v144 = v143 == 3;
      else
        v144 = 1;
      if (!v144)
      {
        __break(0xC471u);
        JUMPOUT(0x194249C44);
      }
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::InlineIterator::Box::lineBox(void)::$_0,WebCore::InlineIterator::Box::lineBox(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::InlineIterator::BoxModernPath,WebCore::InlineIterator::BoxLegacyPath> const&>(v1407, (uint64_t)v1436);
      if (*(_DWORD *)&v1407[16] != -1)
        ((void (*)(WTF **, _BYTE *))off_1E343A000[*(unsigned int *)&v1407[16]])(v1380, v1407);
      if (*(_DWORD *)&v1436[16] == -1)
        goto LABEL_2584;
      *(_QWORD *)v1407 = v1380;
      (*(&off_1E343A020 + *(unsigned int *)&v1436[16]))((int)v1407, (WebCore::InlineIterator::LineBoxIteratorModernPath *)v1436);
      if (*(_DWORD *)&v1436[16] == -1)
        goto LABEL_2584;
      v146 = v145;
      *(_QWORD *)v1407 = v1380;
      v147 = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E343A030[*(unsigned int *)&v1436[16]])(v1407, v1436);
      if (*(_DWORD *)&v1436[16] == -1)
        goto LABEL_2584;
      v2 = v147;
      *(_QWORD *)v1407 = v1380;
      v148 = ((float (*)(_BYTE *, _BYTE *))*(&off_1E343A040 + *(unsigned int *)&v1436[16]))(v1407, v1436)
           * 64.0;
      v8 = 2147483650.0;
      v149 = v148 >= 2147483650.0 || v148 <= -2147483650.0;
      if (!v149)
        goto LABEL_240;
      if (v148 >= 2147483650.0)
      {
        v150 = 0x7FFFFFFF;
      }
      else
      {
        if (v148 > -2147483650.0)
        {
LABEL_240:
          v150 = (int)v148;
          goto LABEL_241;
        }
        v150 = 0x80000000;
      }
LABEL_241:
      v151 = (float)(int)WebCore::RenderBlockFlow::adjustEnclosingTopForPrecedingBlock((WebCore::RenderBlock *)v2, v150)
           * 0.015625;
      v152 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)(v1373 + 32) + 44) >> 13;
      if (v152 <= 4 && ((1 << v152) & 0x16) != 0)
        v153 = v146 - (float)(*(float *)(v1373 + 44) + *(float *)(v1373 + 52));
      else
        v153 = *(float *)(v1373 + 44) - v151;
      v154 = v153 * 64.0;
      if (v154 >= 2147483650.0 || v154 <= -2147483650.0)
      {
        if (v154 > -2147483650.0)
          v156 = (int)v154;
        else
          v156 = 0x80000000;
        if (v154 >= 2147483650.0)
          v156 = 0x7FFFFFFF;
      }
      else
      {
        v156 = (int)v154;
      }
      v157 = fmaxf(v146 - v151, 0.0) * 64.0;
      if (v157 < 2147483650.0 && v157 > -2147483650.0)
        goto LABEL_253;
      if (v157 >= 2147483650.0)
      {
        v159 = 0x7FFFFFFF;
        goto LABEL_254;
      }
      if (v157 <= -2147483650.0)
        v159 = 0x80000000;
      else
LABEL_253:
        v159 = (int)v157;
LABEL_254:
      v160 = *(float *)(v1373 + 136) * 64.0;
      if (v160 < 2147483650.0 && v160 > -2147483650.0)
        goto LABEL_256;
      if (v160 >= 2147483650.0)
      {
        v161 = 0x7FFFFFFF;
      }
      else
      {
        if (v160 > -2147483650.0)
        {
LABEL_256:
          v161 = (int)v160;
          goto LABEL_257;
        }
        v161 = 0x80000000;
      }
LABEL_257:
      v162 = (float)(*(float *)(v1373 + 140) + (float)((float)v156 * -0.015625)) * 64.0;
      if (v162 < 2147483650.0 && v162 > -2147483650.0)
        goto LABEL_261;
      if (v162 >= 2147483650.0)
      {
        v164 = 0x7FFFFFFF;
      }
      else
      {
        if (v162 > -2147483650.0)
        {
LABEL_261:
          v164 = (int)v162;
          goto LABEL_262;
        }
        v164 = 0x80000000;
      }
LABEL_262:
      v165 = *(float *)(v1373 + 48) * 64.0;
      if (v165 < 2147483650.0 && v165 > -2147483650.0)
        goto LABEL_264;
      if (v165 >= 2147483650.0)
      {
        v166 = 0x7FFFFFFF;
        goto LABEL_265;
      }
      if (v165 > -2147483650.0)
LABEL_264:
        v166 = (int)v165;
      else
        v166 = 0x80000000;
LABEL_265:
      *(_DWORD *)v1407 = v161;
      *(_DWORD *)&v1407[4] = v164;
      *(_DWORD *)&v1407[8] = v166;
      *(_DWORD *)&v1407[12] = v159;
      if (*(_BYTE *)(v1373 + 153))
      {
        v451 = *(_QWORD *)(v1373 + 16);
        if (*(_BYTE *)(v451 + 46) != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x19424A554);
        }
        v170 = *(_QWORD *)(v451 + 120);
      }
      else
      {
        v167 = *(_QWORD *)(v1373 + 8);
        v168 = *(_QWORD *)(*(_QWORD *)v1373 + 8);
        if (v167 >= *(unsigned int *)(v168 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x19424A4E4);
        }
        v169 = *(_QWORD *)(v168 + 48) + 80 * v167;
        v2 = *(_QWORD *)v169;
        if (*(_DWORD *)(v169 + 40) || (*(_WORD *)(v2 + 12) & 0x200) == 0)
          goto LABEL_268;
        v455 = WebCore::Layout::Box::rareDataMap(void)::map;
        LODWORD(v7) = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
        v456 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v2) & v7;
        if (*(_QWORD *)(v455 + 16 * v456) != v2)
        {
          v457 = 1;
          do
            v456 = ((_DWORD)v456 + v457++) & v7;
          while (*(_QWORD *)(v455 + 16 * v456) != v2);
        }
        if (*(_QWORD *)(*(_QWORD *)(v455 + 16 * v456 + 8) + 24))
        {
          v458 = WebCore::Layout::Box::rareDataMap(void)::map;
          v459 = *(_DWORD *)(WebCore::Layout::Box::rareDataMap(void)::map - 8);
          v460 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v2) & v459;
          if (*(_QWORD *)(v458 + 16 * v460) != v2)
          {
            v461 = 1;
            do
              v460 = ((_DWORD)v460 + v461++) & v459;
            while (*(_QWORD *)(v458 + 16 * v460) != v2);
          }
          v170 = *(_QWORD *)(*(_QWORD *)(v458 + 16 * v460 + 8) + 24);
        }
        else
        {
LABEL_268:
          v170 = v2 + 16;
        }
      }
      v171 = *(_QWORD *)(v170 + 32) + 32;
      v172 = *(unsigned __int16 *)(*(_QWORD *)(v1373 + 16) + 112);
      if (v172 <= 0x100)
        LOBYTE(v172) = 0;
      WebCore::FontCascade::adjustSelectionRectForText(v171, (void *)(v172 != 0), v1373 + 56, (WebCore::LayoutRect *)v1407, v28, v95 | 0x100000000);
      v173 = *(_QWORD *)(v1373 + 64);
      if (v173)
        LODWORD(v173) = *(_DWORD *)(v173 + 4);
      if ((_DWORD)v173 == (_DWORD)v3)
      {
        v174 = __OFADD__(*(_DWORD *)v1407, *(_DWORD *)&v1407[8]);
        v175 = (*(_DWORD *)v1407 >> 31) + 0x7FFFFFFF;
        if (__OFADD__(*(_DWORD *)v1407, *(_DWORD *)&v1407[8]))
          v176 = (*(_DWORD *)v1407 >> 31) + 0x7FFFFFFF;
        else
          v176 = *(_DWORD *)v1407 + *(_DWORD *)&v1407[8];
        v177 = v161 + v166;
        if (__OFADD__(v161, v166))
          v177 = (v161 >> 31) + 0x7FFFFFFF;
        if (v176 <= v177)
          v176 = v177;
        if (!v174)
          v175 = *(_DWORD *)v1407 + *(_DWORD *)&v1407[8];
        v677 = __OFSUB__(v176, v175);
        v178 = v176 - v175;
        if (v677)
          v178 = (v176 >> 31) + 0x7FFFFFFF;
        v677 = __OFADD__(*(_DWORD *)&v1407[8], v178);
        v179 = *(_DWORD *)&v1407[8] + v178;
        if (v677)
          v179 = (*(_DWORD *)&v1407[8] >> 31) + 0x7FFFFFFF;
        *(_DWORD *)&v1407[8] = v179 & ~(v179 >> 31);
      }
      v180 = *(_QWORD *)(*(_QWORD *)(v1373 + 24) + 528);
      v181 = 1.0;
      if (v180)
      {
        v182 = *(_QWORD *)(v180 + 8);
        if (v182)
        {
          v183 = *(_QWORD *)(v182 + 24);
          if (v183)
          {
            v184 = *(float **)(v183 + 8);
            if (v184)
            {
              v185 = (*(_DWORD *)v184)++;
              v181 = v184[91];
              if (v185)
              {
                *(_DWORD *)v184 = v185;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v184);
                WTF::fastFree(v192, v193);
              }
            }
          }
        }
      }
      LODWORD(v1380[0]) = WebCore::snapRectToDevicePixels((int *)v1407, v181);
      HIDWORD(v1380[0]) = v186;
      v1380[1] = (WTF *)__PAIR64__(v188, v187);
      (*(void (**)(char *, WTF **, WTF **))(*(_QWORD *)v27 + 224))(v27, v1380, v1404);
      if (*(_DWORD *)&v1436[16] != -1)
        ((void (*)(_BYTE *, _BYTE *))off_1E343A050[*(unsigned int *)&v1436[16]])(v1407, v1436);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v27 + 104))(v27, 1);
      if (((unint64_t)v1404[0] & 0x8000000000000) != 0)
      {
        v525 = (unsigned int *)((unint64_t)v1404[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v526 = __ldaxr(v525);
          v527 = v526 - 1;
        }
        while (__stlxr(v527, v525));
        if (!v527)
        {
          atomic_store(1u, v525);
          WTF::fastFree((WTF *)v525, v13);
        }
      }
      goto LABEL_302;
    }
    v429 = *(_QWORD *)(v15 + 72);
    if (v429 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v429 + 24))(v429))
      v429 = 0;
    WebCore::AccessibilityRegionContext::takeBounds(v429, *(_QWORD **)(v1373 + 16), *(float *)(v1373 + 136), *(float *)(v1373 + 140), *(float *)(v1373 + 144), *(float *)(v1373 + 148));
  }
}

_QWORD *WTF::Vector<WebCore::StyleRulePage *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRulePage *>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WebCore::DeviceController::~DeviceController(WebCore::DeviceController *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  _DWORD *v15;

  *(_QWORD *)this = off_1E33FE5B8;
  *((_QWORD *)this + 5) = off_1E31F7378;
  v2 = (WebCore::DeviceController *)((char *)this + 40);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v4);
    }
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v9)
    {
      v10 = (_DWORD **)*((_QWORD *)this + 3);
      do
      {
        v11 = *v10;
        if (*v10 != (_DWORD *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (v11[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 72))(v11);
            else
              --v11[6];
          }
        }
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD **)*((_QWORD *)this + 2);
      do
      {
        v15 = *v14;
        if (*v14 != (_DWORD *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (v15[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 72))(v15);
            else
              --v15[6];
          }
        }
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v12 - 16), v4);
  }
}

{
  uint64_t v1;
  void *v2;

  WebCore::DeviceController::~DeviceController(this);
  if (*(_DWORD *)(v1 + 8))
  {
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
}

void WebCore::Style::Scope::pendingUpdateTimerFired(WebCore::Style::Scope *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF **v6;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    *(_DWORD *)(v4 + 24) += 2;
  v5 = *((_QWORD *)this + 2);
  *(_DWORD *)(v5 + 24) += 2;
  if (*((_BYTE *)this + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(this, a2, a3);
  if (*((_BYTE *)this + 233))
  {
    v6 = (WTF **)*((unsigned __int8 *)this + 232);
    if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::Style::Scope *)((char *)this + 80));
    *((_WORD *)this + 116) = 0;
    WebCore::Style::Scope::updateActiveStyleSheets((uint64_t)this, v6, a3);
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
}

void WebCore::Style::Scope::updateActiveStyleSheets(uint64_t a1, WTF **a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  WTF::StringImpl **v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  char v35;
  int v36;
  WTF::StringImpl *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  WTF *v60;
  unsigned int v61;
  unint64_t v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  WTF *v74;
  WTF *v75;
  WebCore::Style::Resolver *v76;
  WTF::StringImpl ***v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  WTF **v80;
  WTF *v81;
  unint64_t v82;
  WTF *v83;
  uint64_t v84;
  WebCore::Document *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  WTF *v97;
  WTF *v98;
  uint64_t v99;
  WTF *v100;
  _DWORD *v101;
  uint64_t v102;
  WTF *v103;
  _DWORD *v104;
  uint64_t v105;
  WTF *v106;
  _DWORD *v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  _DWORD *v112;
  unint64_t v113;
  unint64_t v114;
  WTF *v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  WTF *v120;
  char v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  WTF *v131;
  WebCore::StyleSheetContents *v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  WebCore::ExtensionStyleSheets *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  WebCore::ExtensionStyleSheets *v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  WTF *v150;
  void *v151;
  uint64_t v152;
  WTF *v153;
  _DWORD *v154;
  void *v155;
  uint64_t v156;
  _QWORD *v157;
  WTF **v158;
  WTF *v159;
  uint64_t v160;
  WTF *v161;
  WebCore::StyleSheetContents *v162;
  WTF *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  WTF *v177;
  WTF *v178;
  int v179;
  uint64_t v180;
  _QWORD *v181;
  WTF *v182;
  WTF *v183;
  uint64_t v184;
  char v185;
  WTF *v186;
  uint64_t v187;
  uint64_t *v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  unint64_t v201;
  unint64_t v202;
  WTF *v203;
  int isLoading;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  int v209;
  WTF *v210;
  WTF *v211;
  WTF *v212;
  WTF *v213;
  char *__src;
  unsigned int v215;
  unsigned int v216;
  unint64_t v217;
  int v218;
  unsigned int v219;
  _QWORD *v220;
  WTF *v221;
  unint64_t v222;
  WTF *v223;
  unint64_t v224;
  WTF *v225;
  uint64_t v226;
  WTF::StringImpl *v227;

  v4 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v4 + 1944) || *(_BYTE *)(v4 + 3405))
    return;
  if (*(_BYTE *)(v4 + 3391) || *(_BYTE *)(v4 + 3392))
  {
    *(_WORD *)(a1 + 232) = 257;
    WebCore::Document::scheduleFullStyleRebuild((WTF::StringImpl *)v4);
    return;
  }
  v5 = *(_QWORD *)(v4 + 680);
  v218 = (int)a2;
  if (!*(_BYTE *)(v5 + 233))
  {
    if ((*(_QWORD *)(v5 + 664) & 0x400000000) != 0)
      goto LABEL_7;
LABEL_319:
    v9 = 0;
    __src = 0;
    v50 = 0;
    v51 = 0;
    goto LABEL_105;
  }
  if (!*(_BYTE *)(v5 + 232))
    goto LABEL_319;
LABEL_7:
  v225 = 0;
  v226 = 0;
  v220 = 0;
  v221 = 0;
  v6 = *(_QWORD **)(a1 + 200);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
        break;
      v6 = (_QWORD *)v6[2];
      if (!v6)
        goto LABEL_419;
    }
    v8 = 0;
    v9 = 0;
    v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    a2 = (WTF **)&WebCore::HTMLNames::styleTag;
    a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
LABEL_10:
    v223 = 0;
    v11 = *(_WORD *)(v7 + 28);
    if ((v11 & 0xF000) == 0x7000)
    {
      v177 = v8;
      if (!*(_BYTE *)(v7 + 155))
      {
        a2 = (WTF **)&WebCore::HTMLNames::styleTag;
        a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
        goto LABEL_71;
      }
      v178 = *(WTF **)(v7 + 144);
      if (!v178)
      {
        a2 = (WTF **)&WebCore::HTMLNames::styleTag;
        a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
        goto LABEL_74;
      }
      v179 = *((_DWORD *)v178 + 2);
      *((_DWORD *)v178 + 2) = v179 + 1;
      v223 = v178;
      v180 = HIDWORD(v221);
      if (HIDWORD(v221) == (_DWORD)v221)
      {
        WTF::Vector<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>&>((uint64_t)&v220, (unint64_t)&v223);
      }
      else
      {
        v181 = v220;
        *((_DWORD *)v178 + 2) = v179 + 2;
        v181[v180] = v178;
        HIDWORD(v221) = v180 + 1;
      }
      v8 = v177;
      a2 = (WTF **)&WebCore::HTMLNames::styleTag;
      a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
    }
    else if ((v11 & 0x10) != 0
           && ((v12 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24), v12 == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
            || v12 == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
           || (v11 & 0x20) != 0
           && (v12 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24), v12 == *(_QWORD *)(WebCore::SVGNames::styleTag + 24)))
    {
      if ((*(_BYTE *)(v7 + 22) & 0x10) == 0
        && (v13 = *(_QWORD *)(v7 + 104)) != 0
        && ((v14 = *(unsigned int *)(v13 + 4), (v14 & 1) != 0)
          ? (v15 = *(_QWORD *)(v13 + 40), v16 = *(unsigned int *)(v13 + 52))
          : (v15 = v13 + 32, v16 = v14 >> 5),
            v16))
      {
        v17 = (WTF::StringImpl **)(v15 + 8);
        while (1)
        {
          v18 = (uint64_t)*(v17 - 1);
          if (v18 == WebCore::HTMLNames::titleAttr
            || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
            && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
          {
            break;
          }
          v17 += 2;
          if (!--v16)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v17 = v10;
      }
      v19 = *v17;
      if (*v17)
        *(_DWORD *)v19 += 2;
      v227 = v19;
      if ((v11 & 0x10) != 0 && v12 == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
      {
        v20 = *(unsigned __int8 *)(v7 + 288);
        if (v20 != 2)
        {
          v21 = v20 == 1;
          if ((*(_BYTE *)(v7 + 291) & 1) == 0)
          {
            v22 = *(_QWORD *)(v7 + 200);
            if (!v22)
              goto LABEL_88;
            v23 = *(_QWORD *)(v22 + 24);
            if (*(_DWORD *)(v23 + 68))
            {
              v213 = v8;
              v217 = 0;
              do
              {
                isLoading = WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v23 + 56)
                                                                                             + 8 * v217));
                v8 = v213;
                a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                if (isLoading)
                  goto LABEL_424;
                ++v217;
              }
              while (v217 < *(unsigned int *)(v23 + 68));
              v8 = v213;
              if (!*(_QWORD *)(v7 + 200))
              {
LABEL_88:
                v41 = *v10;
                if (*v10)
                  *(_DWORD *)v41 += 2;
                v42 = v227;
                v227 = v41;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                  {
                    v150 = v8;
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)&WebCore::HTMLNames::styleTag);
                    a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                    a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                    v8 = v150;
                  }
                  else
                  {
                    *(_DWORD *)v42 -= 2;
                  }
                }
              }
            }
LABEL_36:
            v24 = *(_WORD *)(v7 + 28);
            if ((v24 & 0x20) != 0
              && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::styleTag + 24))
            {
              v25 = *(WTF **)(v7 + 208);
              if (!v25)
              {
LABEL_40:
                v26 = v223;
                v223 = v25;
                if (v26)
                {
                  if (*((_DWORD *)v26 + 2) == 1)
                  {
                    v44 = v8;
                    (*(void (**)(WTF *, uint64_t *, uint64_t *))(*(_QWORD *)v26 + 8))(v26, &WebCore::HTMLNames::styleTag, &WebCore::HTMLNames::relAttr);
                    a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                    a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                    v8 = v44;
                  }
                  else
                  {
                    --*((_DWORD *)v26 + 2);
                  }
                  v25 = v223;
                }
                if (v25)
                {
                  v27 = HIDWORD(v221);
                  if (HIDWORD(v221) == (_DWORD)v221)
                  {
                    v46 = v8;
                    v47 = *(_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v220, HIDWORD(v221) + 1, (unint64_t)&v223);
                    if (v47)
                      ++*(_DWORD *)(v47 + 8);
                    LODWORD(v27) = HIDWORD(v221);
                    v220[HIDWORD(v221)] = v47;
                    v8 = v46;
                    a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                    a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                  }
                  else
                  {
                    v28 = v220;
                    ++*((_DWORD *)v25 + 2);
                    v28[v27] = v25;
                  }
                  HIDWORD(v221) = v27 + 1;
                }
                v29 = *(_QWORD *)(v7 + 104);
                if (v29
                  && ((v30 = *(unsigned int *)(v29 + 4), (v30 & 1) != 0)
                    ? (v31 = *(_QWORD *)(v29 + 40), v32 = *(unsigned int *)(v29 + 52))
                    : (v31 = v29 + 32, v32 = v30 >> 5),
                      v32))
                {
                  v33 = (WTF::StringImpl **)(v31 + 8);
                  while (1)
                  {
                    v34 = (uint64_t)*(v33 - 1);
                    if (v34 == WebCore::HTMLNames::relAttr
                      || *(_QWORD *)(v34 + 24) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 24)
                      && *(_QWORD *)(v34 + 32) == *(_QWORD *)(WebCore::HTMLNames::relAttr + 32))
                    {
                      break;
                    }
                    v33 += 2;
                    if (!--v32)
                      goto LABEL_56;
                  }
                }
                else
                {
LABEL_56:
                  v33 = v10;
                }
                if (v223)
                  v35 = v21;
                else
                  v35 = 1;
                if ((v35 & 1) == 0 && v227 && *((_DWORD *)v227 + 1))
                {
                  v183 = v8;
                  v184 = *(_QWORD *)(a1 + 224);
                  if ((!v184 || !*(_DWORD *)(v184 + 4))
                    && ((*(_WORD *)(v7 + 28) & 0x10) != 0
                     && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::styleTag + 24)
                     || !*v33
                     || WTF::StringImpl::find() == -1))
                  {
                    WTF::String::operator=((uint64_t *)(a1 + 224), &v227);
                  }
                  v185 = WTF::equal(v227, *(const WTF::StringImpl **)(a1 + 224), a3);
                  v8 = v183;
                  a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                  a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                  if ((v185 & 1) == 0)
                  {
                    v186 = v223;
                    v223 = 0;
                    if (v186)
                    {
                      if (*((_DWORD *)v186 + 2) == 1)
                      {
                        (*(void (**)(WTF *, uint64_t *, uint64_t *))(*(_QWORD *)v186 + 8))(v186, &WebCore::HTMLNames::styleTag, &WebCore::HTMLNames::relAttr);
                        v8 = v183;
                        a2 = (WTF **)&WebCore::HTMLNames::styleTag;
                        a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
                      }
                      else
                      {
                        --*((_DWORD *)v186 + 2);
                        v8 = v183;
                      }
                    }
                  }
                }
                if (!*v33)
                {
                  v36 = 1;
                  goto LABEL_64;
                }
                v120 = v8;
                if (WTF::StringImpl::find() != -1 && (!v227 || !*((_DWORD *)v227 + 1)))
                {
                  v182 = v223;
                  v223 = 0;
                  if (v182)
                  {
                    if (*((_DWORD *)v182 + 2) == 1)
                      (*(void (**)(WTF *))(*(_QWORD *)v182 + 8))(v182);
                    else
                      --*((_DWORD *)v182 + 2);
                  }
                }
                v36 = 1;
                goto LABEL_234;
              }
            }
            else
            {
              if ((v24 & 0x10) == 0)
                goto LABEL_460;
              v40 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24);
              if (v40 == *(_QWORD *)(WebCore::HTMLNames::linkTag + 24))
              {
                v25 = *(WTF **)(v7 + 200);
                if (!v25)
                  goto LABEL_40;
              }
              else
              {
                if (v40 != *(_QWORD *)(WebCore::HTMLNames::styleTag + 24))
                {
LABEL_460:
                  __break(0xC471u);
                  JUMPOUT(0x1942506F8);
                }
                v25 = *(WTF **)(v7 + 144);
                if (!v25)
                  goto LABEL_40;
              }
            }
            ++*((_DWORD *)v25 + 2);
            goto LABEL_40;
          }
LABEL_424:
          if (v20 != 1)
          {
            if (!v227)
              goto LABEL_71;
            if (*((_DWORD *)v227 + 1))
            {
              v120 = v8;
              v205 = *(_QWORD *)(a1 + 224);
              if ((!v205 || !*(_DWORD *)(v205 + 4))
                && (!*(_QWORD *)WebCore::Element::attributeWithoutSynchronization(v7, &WebCore::HTMLNames::relAttr)
                 || WTF::StringImpl::find() == -1))
              {
                WTF::String::operator=((uint64_t *)(a1 + 224), &v227);
              }
              v36 = 0;
LABEL_234:
              v8 = v120;
              a2 = (WTF **)&WebCore::HTMLNames::styleTag;
              a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
              goto LABEL_64;
            }
          }
        }
        v36 = 0;
LABEL_64:
        v37 = v227;
        v227 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            v45 = v8;
            WTF::StringImpl::destroy(v37, (WTF::StringImpl *)&WebCore::HTMLNames::styleTag);
            a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
            a2 = (WTF **)&WebCore::HTMLNames::styleTag;
            v8 = v45;
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
        if (!v36)
          goto LABEL_71;
        goto LABEL_68;
      }
      v21 = 0;
      goto LABEL_36;
    }
LABEL_68:
    v38 = v223;
    if (!v223)
      goto LABEL_74;
    if (v9 == (_DWORD)v226)
    {
      v116 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v225, v9 + 1, (unint64_t)&v223);
      a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
      a2 = (WTF **)&WebCore::HTMLNames::styleTag;
      v117 = HIDWORD(v226);
      v118 = HIDWORD(v226) + 1;
      v8 = v225;
      v119 = *v116;
      *v116 = 0;
      *((_QWORD *)v8 + v117) = v119;
      v9 = v118;
      HIDWORD(v226) = v118;
    }
    else
    {
      v223 = 0;
      *((_QWORD *)v8 + v9++) = v38;
      HIDWORD(v226) = v9;
    }
LABEL_71:
    v39 = v223;
    v223 = 0;
    if (v39)
    {
      if (*((_DWORD *)v39 + 2) == 1)
      {
        v43 = v8;
        (*(void (**)(WTF *, uint64_t *, uint64_t *))(*(_QWORD *)v39 + 8))(v39, &WebCore::HTMLNames::styleTag, &WebCore::HTMLNames::relAttr);
        a3 = (const WTF::StringImpl *)&WebCore::HTMLNames::relAttr;
        a2 = (WTF **)&WebCore::HTMLNames::styleTag;
        v8 = v43;
      }
      else
      {
        --*((_DWORD *)v39 + 2);
      }
    }
LABEL_74:
    while (1)
    {
      v6 = (_QWORD *)v6[2];
      if (!v6)
        break;
      v7 = *(_QWORD *)(*v6 + 8);
      if (v7)
      {
        ++*(_DWORD *)(a1 + 216);
        goto LABEL_10;
      }
    }
    ++*(_DWORD *)(a1 + 216);
    goto LABEL_100;
  }
LABEL_419:
  v8 = 0;
  v9 = 0;
LABEL_100:
  v48 = *(_QWORD *)(a1 + 24);
  if (!v48)
    v48 = *(_QWORD *)(a1 + 16);
  v49 = *(_QWORD *)(v48 + 176);
  if (!v49)
  {
    __src = (char *)v220;
    goto LABEL_104;
  }
  v212 = v8;
  v216 = v9;
  v187 = *(unsigned int *)(v49 + 36);
  __src = (char *)v220;
  if (!(_DWORD)v187)
    goto LABEL_411;
  v188 = *(uint64_t **)(v49 + 24);
  LODWORD(v190) = (_DWORD)v221;
  v189 = HIDWORD(v221);
  v191 = 8 * v187;
  LODWORD(v192) = v226;
  do
  {
    if (*(_BYTE *)(*v188 + 33))
      goto LABEL_379;
    v193 = *(int **)(*v188 + 40);
    if (v193 && v193[1])
    {
      *v193 += 4;
      v206 = WTF::equal((WTF *)v193, *(const WTF::StringImpl **)(a1 + 224), a3);
      v207 = v206;
      v208 = *v193 - 2;
      if (*v193 == 2)
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v193, (WTF::StringImpl *)a2);
        v208 = *v193;
      }
      else
      {
        *v193 = v208;
      }
      v209 = v208 - 2;
      if (v209)
      {
        *v193 = v209;
        if (!v207)
          goto LABEL_379;
      }
      else
      {
        WTF::StringImpl::destroy((WTF::StringImpl *)v193, (WTF::StringImpl *)a2);
        if ((v207 & 1) == 0)
          goto LABEL_379;
      }
    }
    v194 = *v188;
    if (v189 == (_DWORD)v190)
    {
      v198 = v189 + ((unint64_t)v189 >> 2);
      if (v198 >= 0x10)
        v199 = v198 + 1;
      else
        v199 = 16;
      if (v199 <= (unint64_t)v189 + 1)
        v190 = v189 + 1;
      else
        v190 = v199;
      if (v190 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x194251594);
      }
      v200 = (char *)WTF::fastMalloc((WTF *)(8 * v190));
      memcpy(v200, __src, 8 * v189);
      if (__src)
      {
        if (v200 == __src)
        {
          v200 = 0;
          LODWORD(v190) = 0;
        }
        WTF::fastFree((WTF *)__src, a2);
      }
      __src = v200;
      if (v194)
        ++*(_DWORD *)(v194 + 8);
      v195 = &v200[8 * v189];
    }
    else
    {
      v195 = &__src[8 * v189];
      if (v194)
        ++*(_DWORD *)(v194 + 8);
    }
    *(_QWORD *)v195 = v194;
    v196 = *v188;
    if (v216 == (_DWORD)v192)
    {
      v201 = v216 + ((unint64_t)v216 >> 2);
      if (v201 >= 0x10)
        v202 = v201 + 1;
      else
        v202 = 16;
      if (v202 <= (unint64_t)v216 + 1)
        v192 = v216 + 1;
      else
        v192 = v202;
      if (v192 >> 29)
        goto LABEL_460;
      v203 = (WTF *)WTF::fastMalloc((WTF *)(8 * v192));
      memcpy(v203, v212, 8 * v216);
      if (v212)
      {
        if (v203 == v212)
        {
          v203 = 0;
          LODWORD(v192) = 0;
        }
        WTF::fastFree(v212, a2);
      }
      v212 = v203;
      if (v196)
        ++*(_DWORD *)(v196 + 8);
      v197 = (char *)v203 + 8 * v216;
    }
    else
    {
      v197 = (char *)v212 + 8 * v216;
      if (v196)
        ++*(_DWORD *)(v196 + 8);
    }
    ++v189;
    ++v216;
    *(_QWORD *)v197 = v196;
LABEL_379:
    ++v188;
    v191 -= 8;
  }
  while (v191);
  v221 = (WTF *)__PAIR64__(v189, v190);
  LODWORD(v226) = v192;
  v225 = v212;
LABEL_411:
  v9 = v216;
LABEL_104:
  v50 = v225;
  v51 = v221;
LABEL_105:
  v211 = v51;
  v223 = 0;
  v224 = 0;
  v52 = *(_QWORD *)(a1 + 24);
  if (!v52 || *(_BYTE *)(v52 + 193))
  {
    v53 = *(_QWORD *)(a1 + 16);
    v54 = *(_QWORD *)(v53 + 1336);
    if (!v54)
    {
      v135 = WTF::fastMalloc((WTF *)0xA8);
      *(_DWORD *)v135 = 0;
      v136 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v53);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 + 1, v136));
      *(_QWORD *)(v135 + 8) = v136;
      *(_QWORD *)(v135 + 144) = 0;
      *(_QWORD *)(v135 + 152) = 0;
      *(_QWORD *)(v135 + 157) = 0;
      *(_OWORD *)(v135 + 16) = 0u;
      *(_OWORD *)(v135 + 32) = 0u;
      *(_OWORD *)(v135 + 48) = 0u;
      *(_BYTE *)(v135 + 64) = 0;
      *(_OWORD *)(v135 + 72) = 0u;
      *(_OWORD *)(v135 + 88) = 0u;
      *(_OWORD *)(v135 + 104) = 0u;
      *(_OWORD *)(v135 + 120) = 0u;
      *(_QWORD *)(v135 + 133) = 0;
      v138 = *(WebCore::ExtensionStyleSheets **)(v53 + 1336);
      *(_QWORD *)(v53 + 1336) = v135;
      if (v138)
      {
        WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v138, (WTF::StringImpl *)a2);
        if (*(_DWORD *)v139)
        {
          *(_QWORD *)(v139 + 160) = 0;
          *(_OWORD *)(v139 + 128) = 0u;
          *(_OWORD *)(v139 + 144) = 0u;
          *(_OWORD *)(v139 + 96) = 0u;
          *(_OWORD *)(v139 + 112) = 0u;
          *(_OWORD *)(v139 + 64) = 0u;
          *(_OWORD *)(v139 + 80) = 0u;
          *(_OWORD *)(v139 + 32) = 0u;
          *(_OWORD *)(v139 + 48) = 0u;
          *(_OWORD *)v139 = 0u;
          *(_OWORD *)(v139 + 16) = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v139, a2);
        }
      }
      v54 = *(_QWORD *)(v53 + 1336);
    }
    WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v54, a2);
    v55 = *(unsigned int *)(v54 + 52);
    if ((_DWORD)v55)
    {
      v167 = *(uint64_t **)(v54 + 40);
      WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v223, *(unsigned int *)(v54 + 52));
      if (v55 < HIDWORD(v224))
      {
        __break(0xC471u);
        JUMPOUT(0x194251584);
      }
      v168 = (_QWORD *)((char *)v223 + 8 * HIDWORD(v224));
      v169 = 8 * v55;
      do
      {
        v170 = *v167;
        if (*v167)
          ++*(_DWORD *)(v170 + 8);
        *v168++ = v170;
        ++v167;
        v169 -= 8;
      }
      while (v169);
      HIDWORD(v224) = v55;
    }
    v56 = *(_QWORD *)(a1 + 16);
    v57 = *(_QWORD *)(v56 + 1336);
    if (!v57)
    {
      v140 = WTF::fastMalloc((WTF *)0xA8);
      *(_DWORD *)v140 = 0;
      v141 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v56);
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 + 1, v141));
      *(_QWORD *)(v140 + 8) = v141;
      *(_QWORD *)(v140 + 144) = 0;
      *(_QWORD *)(v140 + 152) = 0;
      *(_QWORD *)(v140 + 157) = 0;
      *(_OWORD *)(v140 + 16) = 0u;
      *(_OWORD *)(v140 + 32) = 0u;
      *(_OWORD *)(v140 + 48) = 0u;
      *(_BYTE *)(v140 + 64) = 0;
      *(_OWORD *)(v140 + 72) = 0u;
      *(_OWORD *)(v140 + 88) = 0u;
      *(_OWORD *)(v140 + 104) = 0u;
      *(_OWORD *)(v140 + 120) = 0u;
      *(_QWORD *)(v140 + 133) = 0;
      v143 = *(WebCore::ExtensionStyleSheets **)(v56 + 1336);
      *(_QWORD *)(v56 + 1336) = v140;
      if (v143)
      {
        WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v143, (WTF::StringImpl *)a2);
        if (*(_DWORD *)v144)
        {
          *(_QWORD *)(v144 + 160) = 0;
          *(_OWORD *)(v144 + 128) = 0u;
          *(_OWORD *)(v144 + 144) = 0u;
          *(_OWORD *)(v144 + 96) = 0u;
          *(_OWORD *)(v144 + 112) = 0u;
          *(_OWORD *)(v144 + 64) = 0u;
          *(_OWORD *)(v144 + 80) = 0u;
          *(_OWORD *)(v144 + 32) = 0u;
          *(_OWORD *)(v144 + 48) = 0u;
          *(_OWORD *)v144 = 0u;
          *(_OWORD *)(v144 + 16) = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v144, a2);
        }
      }
      v57 = *(_QWORD *)(v56 + 1336);
    }
    v58 = *(unsigned int *)(v57 + 100);
    if ((_DWORD)v58)
    {
      v171 = *(uint64_t **)(v57 + 88);
      v172 = HIDWORD(v224);
      v173 = HIDWORD(v224) + v58;
      if (v173 > v224)
      {
        WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v223, HIDWORD(v224) + v58);
        v172 = HIDWORD(v224);
        if (v173 < HIDWORD(v224))
        {
          __break(0xC471u);
          JUMPOUT(0x19425158CLL);
        }
      }
      v174 = (_QWORD *)((char *)v223 + 8 * v172);
      v175 = 8 * v58;
      do
      {
        v176 = *v171;
        if (*v171)
          ++*(_DWORD *)(v176 + 8);
        *v174++ = v176;
        ++v171;
        v175 -= 8;
      }
      while (v175);
      HIDWORD(v224) = v173;
    }
  }
  v215 = v9;
  if (v9)
  {
    v59 = v50;
    v60 = (WTF *)((char *)v50 + 8 * v9);
    LODWORD(v62) = v224;
    v61 = HIDWORD(v224);
    v63 = v223;
    do
    {
      v64 = *(_QWORD *)v59;
      if ((*(unsigned int (**)(_QWORD, WTF **, const WTF::StringImpl *))(**(_QWORD **)v59 + 112))(*(_QWORD *)v59, a2, a3))
      {
        v65 = *(_QWORD *)(v64 + 24);
        if (*(_DWORD *)(v65 + 68))
        {
          v166 = 0;
          while ((WebCore::StyleRuleImport::isLoading(*(WebCore::StyleRuleImport **)(*(_QWORD *)(v65 + 56) + 8 * v166)) & 1) == 0)
          {
            if (++v166 >= (unint64_t)*(unsigned int *)(v65 + 68))
              goto LABEL_115;
          }
        }
        else
        {
LABEL_115:
          if (!*(_BYTE *)(v64 + 33)
            && *(_DWORD *)(*(_QWORD *)(v64 + 24) + 68)
             + *(_DWORD *)(*(_QWORD *)(v64 + 24) + 52)
             + *(_DWORD *)(*(_QWORD *)(v64 + 24) + 84)
             + *(_DWORD *)(*(_QWORD *)(v64 + 24) + 100))
          {
            v66 = v61;
            if (v61 == (_DWORD)v62)
            {
              v67 = v61 + ((unint64_t)v61 >> 2);
              if (v67 >= 0x10)
                v68 = v67 + 1;
              else
                v68 = 16;
              if (v68 <= (unint64_t)v61 + 1)
                v62 = v61 + 1;
              else
                v62 = v68;
              if (v62 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19425153CLL);
              }
              v69 = (WTF *)WTF::fastMalloc((WTF *)(8 * v62));
              memcpy(v69, v63, 8 * v61);
              if (v63)
              {
                if (v69 == v63)
                {
                  v69 = 0;
                  LODWORD(v62) = 0;
                }
                WTF::fastFree(v63, a2);
              }
              v63 = v69;
            }
            ++*(_DWORD *)(v64 + 8);
            ++v61;
            *((_QWORD *)v63 + v66) = v64;
          }
        }
      }
      v59 = (WTF *)((char *)v59 + 8);
    }
    while (v59 != v60);
    v224 = __PAIR64__(v61, v62);
    v223 = v63;
    v9 = v215;
  }
  LODWORD(v220) = 0;
  v221 = 0;
  v222 = 0;
  if (v218)
    goto LABEL_140;
  v70 = *(_QWORD *)(a1 + 32);
  if (!v70
    || *(_BYTE *)(v70 + 497)
    || (v108 = HIDWORD(v224), v109 = *(unsigned int *)(a1 + 68), HIDWORD(v224) < v109))
  {
    v71 = 0;
    v72 = 0;
    LODWORD(v73) = 0;
    v74 = 0;
LABEL_136:
    v75 = v221;
    goto LABEL_137;
  }
  v225 = 0;
  v226 = 0;
  v210 = v50;
  if ((_DWORD)v109)
  {
    v145 = 0;
    LODWORD(v110) = 0;
    v146 = v223;
    while (v110 < v108)
    {
      while (1)
      {
        if (*(_DWORD *)(a1 + 68) <= v145)
        {
          __break(0xC471u);
          JUMPOUT(0x19425157CLL);
        }
        if (v108 == (_DWORD)v110)
        {
          __break(0xC471u);
          JUMPOUT(0x194251574);
        }
        v147 = *((_QWORD *)v146 + v110);
        if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v145) == v147)
          break;
        a2 = *(WTF ***)(v147 + 24);
        v148 = HIDWORD(v226);
        if (HIDWORD(v226) == (_DWORD)v226)
        {
          WTF::Vector<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleSheetContents&>((uint64_t)&v225, a2);
        }
        else
        {
          v149 = v225;
          ++*(_DWORD *)a2;
          *((_QWORD *)v149 + v148) = a2;
          HIDWORD(v226) = v148 + 1;
        }
        v74 = 0;
        LODWORD(v73) = 0;
        v72 = 0;
        v71 = 0;
        LODWORD(v110) = v110 + 1;
        if (v108 == (_DWORD)v110)
          goto LABEL_306;
      }
      LODWORD(v110) = v110 + 1;
      if (++v145 == v109)
      {
        v72 = HIDWORD(v226);
        v74 = v225;
        goto LABEL_213;
      }
    }
    v74 = 0;
    LODWORD(v73) = 0;
    v72 = 0;
    v71 = 0;
  }
  else
  {
    v74 = 0;
    v72 = 0;
    LODWORD(v110) = 0;
LABEL_213:
    v111 = v108 - v110;
    v219 = v72;
    if (v108 <= v110)
    {
      LODWORD(v73) = v226;
    }
    else
    {
      v110 = v110;
      LODWORD(v73) = v226;
      do
      {
        if (v110 >= HIDWORD(v224))
        {
          __break(0xC471u);
          JUMPOUT(0x1942514F4);
        }
        v112 = *(_DWORD **)(*((_QWORD *)v223 + v110) + 24);
        if (v72 == (_DWORD)v73)
        {
          v113 = v72 + ((unint64_t)v72 >> 2);
          if (v113 >= 0x10)
            v114 = v113 + 1;
          else
            v114 = 16;
          if (v114 <= (unint64_t)v72 + 1)
            v73 = v72 + 1;
          else
            v73 = v114;
          if (v73 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x194251564);
          }
          v115 = (WTF *)WTF::fastMalloc((WTF *)(8 * v73));
          memcpy(v115, v74, 8 * v72);
          if (v74)
          {
            if (v115 == v74)
            {
              v115 = 0;
              LODWORD(v73) = 0;
            }
            WTF::fastFree(v74, a2);
          }
          v74 = v115;
        }
        ++*v112;
        *((_QWORD *)v74 + v72++) = v112;
        ++v110;
        --v111;
      }
      while (v111);
    }
    if (v219)
      v71 = 1;
    else
      v71 = 2;
    v225 = 0;
    HIDWORD(v226) = 0;
  }
LABEL_306:
  v159 = v225;
  v9 = v215;
  v50 = v210;
  if (HIDWORD(v226))
  {
    v160 = 8 * HIDWORD(v226);
    v161 = v225;
    do
    {
      v162 = *(WebCore::StyleSheetContents **)v161;
      *(_QWORD *)v161 = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v162, a2);
          WTF::fastFree(v163, v164);
        }
        else
        {
          --*(_DWORD *)v162;
        }
      }
      v161 = (WTF *)((char *)v161 + 8);
      v160 -= 8;
    }
    while (v160);
  }
  if (v159)
    WTF::fastFree(v159, a2);
  LODWORD(v220) = v71;
  if (!HIDWORD(v222))
    goto LABEL_136;
  v75 = v221;
  WTF::VectorTypeOperations<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::destruct(v221, (char *)v221 + 8 * HIDWORD(v222));
LABEL_137:
  if (v75)
    WTF::fastFree(v75, a2);
  v221 = v74;
  v222 = __PAIR64__(v72, v73);
  if (v71)
  {
    if (*(_QWORD *)(a1 + 24))
      WebCore::Style::Scope::unshareShadowTreeResolverBeforeMutation((WebCore::Style::Scope *)a1);
    v121 = *(_BYTE *)(a1 + 237);
    *(_BYTE *)(a1 + 237) = 1;
    if (v71 == 1)
    {
      WebCore::Style::CustomPropertyRegistry::clearRegisteredFromStylesheets(*(_DWORD **)(a1 + 296), (WTF::StringImpl *)a2);
      v156 = *(_QWORD *)(a1 + 304);
      if (*(_QWORD *)v156 && *(_DWORD *)(*(_QWORD *)v156 - 12))
      {
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(a1 + 304), v155);
        *(_BYTE *)(v156 + 8) = 1;
      }
      WebCore::Style::ScopeRuleSets::resetAuthorStyle((WebCore::Style::ScopeRuleSets *)(*(_QWORD *)(a1 + 32) + 32));
      v157 = *(_QWORD **)(a1 + 32);
      v158 = &v223;
    }
    else
    {
      v122 = *(unsigned int *)(a1 + 68);
      v225 = 0;
      v226 = 0;
      if (HIDWORD(v224) != (_DWORD)v122)
      {
        v123 = (char *)v223 + 8 * v122;
        v124 = 8 * HIDWORD(v224) - 8 * v122;
        if (HIDWORD(v124))
        {
          __break(0xC471u);
          JUMPOUT(0x19425156CLL);
        }
        v125 = (WTF *)WTF::fastMalloc((WTF *)v124);
        v126 = v125;
        v127 = 0;
        LODWORD(v226) = v124 >> 3;
        v225 = v125;
        do
        {
          v128 = *(_QWORD *)&v123[8 * v127];
          if (v128)
            ++*(_DWORD *)(v128 + 8);
          *((_QWORD *)v125 + v127++) = v128;
          v124 -= 8;
        }
        while (v124);
        HIDWORD(v226) = v127;
        WebCore::Style::Resolver::appendAuthorStyleSheets(*(_QWORD **)(a1 + 32), (uint64_t)&v225);
        if ((_DWORD)v127)
        {
          v152 = 8 * v127;
          v153 = v126;
          do
          {
            v154 = *(_DWORD **)v153;
            *(_QWORD *)v153 = 0;
            if (v154)
            {
              if (v154[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v154 + 8))(v154);
              else
                --v154[2];
            }
            v153 = (WTF *)((char *)v153 + 8);
            v152 -= 8;
          }
          while (v152);
        }
        WTF::fastFree(v126, v129);
        goto LABEL_246;
      }
      v157 = *(_QWORD **)(a1 + 32);
      v158 = &v225;
    }
    WebCore::Style::Resolver::appendAuthorStyleSheets(v157, (uint64_t)v158);
LABEL_246:
    *(_BYTE *)(a1 + 237) = v121;
    goto LABEL_144;
  }
LABEL_140:
  v76 = *(WebCore::Style::Resolver **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v76)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v76);
  v77 = *(WTF::StringImpl ****)(a1 + 296);
  v78 = v77[2];
  if (v78 && *((_DWORD *)v78 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v77 + 2, (WTF::StringImpl *)a2);
    WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v77, MEMORY[0x1E0CBF2F8]);
  }
  v79 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)v79 && *(_DWORD *)(*(_QWORD *)v79 - 12))
  {
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(a1 + 304), a2);
    *(_BYTE *)(v79 + 8) = 1;
  }
LABEL_144:
  v80 = *(WTF ***)(a1 + 136);
  if (v80)
  {
    *(_QWORD *)(a1 + 136) = 0;
    WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v80, a2);
  }
  v81 = *(WTF **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v223;
  v223 = v81;
  v82 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v224;
  v224 = v82;
  v83 = *(WTF **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = __src;
  v84 = *(unsigned int *)(a1 + 52);
  *(_QWORD *)(a1 + 48) = v211;
  v85 = *(WebCore::Document **)(a1 + 16);
  LODWORD(v81) = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  if ((_DWORD)v81)
  {
    v165 = WebCore::InspectorInstrumentation::instrumentingAgents(*(WebCore::InspectorInstrumentation **)(a1 + 16), (WebCore::Document *)a2);
    if (v165)
      WebCore::InspectorInstrumentation::activeStyleSheetsUpdatedImpl(v165, v85);
  }
  v86 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v86)
  {
    v87 = *(_QWORD *)(a1 + 56);
    v88 = 8 * v86;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v87 + 24) + 124))
        *(_BYTE *)(a1 + 235) = 1;
      v87 += 8;
      v88 -= 8;
    }
    while (v88);
  }
  v89 = *(_QWORD *)(a1 + 32);
  if (v89)
  {
    if (*(_DWORD *)(v89 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v89 + 32));
    if (*(_BYTE *)(v89 + 242)
      || *(_BYTE *)(v89 + 243)
      || *(_BYTE *)(v89 + 244)
      || *(_BYTE *)(v89 + 245)
      || *(_BYTE *)(v89 + 246)
      || *(_BYTE *)(v89 + 247)
      || *(_BYTE *)(v89 + 248))
    {
      *(_BYTE *)(a1 + 236) = 1;
    }
  }
  v90 = *(_QWORD *)(a1 + 24);
  if (v90 && (*(_BYTE *)(v90 + 22) & 8) == 0)
    goto LABEL_174;
  v91 = *(_QWORD *)(a1 + 16);
  v92 = *(_QWORD *)(v91 + 1272);
  if (!v92)
    goto LABEL_173;
  if ((*(_WORD *)(v92 + 28) & 0x10) == 0)
    goto LABEL_173;
  if (*(_QWORD *)(*(_QWORD *)(v92 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    goto LABEL_173;
  v93 = *(_QWORD *)(v92 + 80);
  if (!v93)
    goto LABEL_173;
  a2 = &v221;
  while ((*(_WORD *)(v93 + 28) & 0x10) == 0)
  {
    v93 = *(_QWORD *)(v93 + 56);
    if (!v93)
      goto LABEL_173;
  }
  v94 = *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24);
  v95 = *(_QWORD *)(*(_QWORD *)(v93 + 96) + 24);
  if (v95 != v94)
  {
LABEL_164:
    if (v95 != *(_QWORD *)(WebCore::HTMLNames::framesetTag + 24))
    {
      while (1)
      {
        v93 = *(_QWORD *)(v93 + 56);
        if (!v93)
          break;
        if ((*(_WORD *)(v93 + 28) & 0x10) != 0)
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v93 + 96) + 24);
          if (v95 != v94)
            goto LABEL_164;
          goto LABEL_168;
        }
      }
LABEL_173:
      WebCore::Style::Invalidator::invalidateAllStyle((WTF::StringImpl *)a1, (WebCore::Style::Scope *)a2);
      goto LABEL_174;
    }
  }
LABEL_168:
  if (*(_BYTE *)(v91 + 3378))
    v96 = 1;
  else
    v96 = (_DWORD)v220 == 0;
  if (v96)
    goto LABEL_173;
  WebCore::Style::Invalidator::Invalidator((uint64_t)&v225, (uint64_t)&v221, *(_QWORD *)(a1 + 32) + 360);
  WebCore::Style::Invalidator::invalidateStyle((WebCore::Style::Invalidator *)&v225, (WebCore::Style::Scope *)a1);
  WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)&v225, v151);
LABEL_174:
  v97 = v221;
  if (HIDWORD(v222))
  {
    v130 = 8 * HIDWORD(v222);
    v131 = v221;
    do
    {
      v132 = *(WebCore::StyleSheetContents **)v131;
      *(_QWORD *)v131 = 0;
      if (v132)
      {
        if (*(_DWORD *)v132 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v132, a2);
          WTF::fastFree(v133, v134);
        }
        else
        {
          --*(_DWORD *)v132;
        }
      }
      v131 = (WTF *)((char *)v131 + 8);
      v130 -= 8;
    }
    while (v130);
  }
  if (v97)
    WTF::fastFree(v97, a2);
  v98 = v223;
  if (HIDWORD(v224))
  {
    v105 = 8 * HIDWORD(v224);
    v106 = v223;
    do
    {
      v107 = *(_DWORD **)v106;
      *(_QWORD *)v106 = 0;
      if (v107)
      {
        if (v107[2] == 1)
          (*(void (**)(_DWORD *, WTF **, const WTF::StringImpl *))(*(_QWORD *)v107 + 8))(v107, a2, a3);
        else
          --v107[2];
      }
      v106 = (WTF *)((char *)v106 + 8);
      v105 -= 8;
    }
    while (v105);
  }
  if (v98)
    WTF::fastFree(v98, a2);
  if ((_DWORD)v84)
  {
    v99 = 8 * v84;
    v100 = v83;
    do
    {
      v101 = *(_DWORD **)v100;
      *(_QWORD *)v100 = 0;
      if (v101)
      {
        if (v101[2] == 1)
          (*(void (**)(_DWORD *, WTF **, const WTF::StringImpl *))(*(_QWORD *)v101 + 8))(v101, a2, a3);
        else
          --v101[2];
      }
      v100 = (WTF *)((char *)v100 + 8);
      v99 -= 8;
    }
    while (v99);
  }
  if (v83)
    WTF::fastFree(v83, a2);
  if (v9)
  {
    v102 = 8 * v9;
    v103 = v50;
    do
    {
      v104 = *(_DWORD **)v103;
      *(_QWORD *)v103 = 0;
      if (v104)
      {
        if (v104[2] == 1)
          (*(void (**)(_DWORD *, WTF **, const WTF::StringImpl *))(*(_QWORD *)v104 + 8))(v104, a2, a3);
        else
          --v104[2];
      }
      v103 = (WTF *)((char *)v103 + 8);
      v102 -= 8;
    }
    while (v102);
  }
  if (v50)
    WTF::fastFree(v50, a2);
}

WTF::StringImpl *WebCore::Style::Invalidator::invalidateAllStyle(WTF::StringImpl *this, WebCore::Style::Scope *a2)
{
  WebCore::Style::Invalidator *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  WebCore::Document *v6;

  v2 = (WebCore::Style::Invalidator *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 10);
    if (v3)
    {
      while ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          return WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v2, a2);
      }
LABEL_11:
      WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v3);
      while (1)
      {
        v3 = *(_QWORD *)(v3 + 56);
        if (!v3)
          break;
        if ((*(_WORD *)(v3 + 28) & 8) != 0)
          goto LABEL_11;
      }
    }
    return WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v2, a2);
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    *(_BYTE *)(v4 + 3390) = 1;
    if (((*(_QWORD *)(v4 + 1536) & 0xFFFFFFFFFFFFLL) == 0
       || *(double *)((*(_QWORD *)(v4 + 1536) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
      && !*(_BYTE *)(v4 + 3362))
    {
      *(_QWORD *)(v4 + 1528) = 0;
      WTF::MonotonicTime::now(this);
      this = (WTF::StringImpl *)WebCore::TimerBase::setNextFireTime(v4 + 1504, v5 + 0.0);
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        this = (WTF::StringImpl *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v4, v6);
        if (this)
          return WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(this, (WebCore::Document *)v4);
      }
    }
  }
  return this;
}

uint64_t WebCore::CSSStyleSheet::isCSSStyleSheet(WebCore::CSSStyleSheet *this)
{
  return 1;
}

void WebCore::Style::ScopeRuleSets::initializeUserStyle(WebCore::Style::ScopeRuleSets *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::String *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const WebCore::StyleSheetContents *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  WebCore::Style::RuleSet *v34;
  uint64_t v35;
  unsigned int *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  WebCore::ExtensionStyleSheets *v39;
  uint64_t v40;
  void *v41;
  WTF *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  const WebCore::StyleSheetContents *v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  const WebCore::StyleSheetContents *v52;
  void *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;

  v2 = *((_QWORD *)this + 4);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 1336);
  if (!v5)
  {
    v35 = WTF::fastMalloc((WTF *)0xA8);
    *(_DWORD *)v35 = 0;
    v36 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v4);
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 + 1, v36));
    *(_QWORD *)(v35 + 8) = v36;
    *(_QWORD *)(v35 + 144) = 0;
    *(_QWORD *)(v35 + 152) = 0;
    *(_QWORD *)(v35 + 157) = 0;
    *(_OWORD *)(v35 + 16) = 0u;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_BYTE *)(v35 + 64) = 0;
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_OWORD *)(v35 + 120) = 0u;
    *(_QWORD *)(v35 + 133) = 0;
    v39 = *(WebCore::ExtensionStyleSheets **)(v4 + 1336);
    *(_QWORD *)(v4 + 1336) = v35;
    if (v39)
    {
      WebCore::ExtensionStyleSheets::~ExtensionStyleSheets(v39, v37);
      if (*(_DWORD *)v40)
      {
        *(_QWORD *)(v40 + 160) = 0;
        *(_OWORD *)(v40 + 128) = 0u;
        *(_OWORD *)(v40 + 144) = 0u;
        *(_OWORD *)(v40 + 96) = 0u;
        *(_OWORD *)(v40 + 112) = 0u;
        *(_OWORD *)(v40 + 64) = 0u;
        *(_OWORD *)(v40 + 80) = 0u;
        *(_OWORD *)(v40 + 32) = 0u;
        *(_OWORD *)(v40 + 48) = 0u;
        *(_OWORD *)v40 = 0u;
        *(_OWORD *)(v40 + 16) = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v40, v41);
      }
    }
    v5 = *(_QWORD *)(v4 + 1336);
    v2 = *((_QWORD *)this + 4);
  }
  ++*(_DWORD *)v5;
  v6 = v2 + 360;
  v7 = WTF::fastMalloc((WTF *)0x328);
  *(_DWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = v7 + 88;
  *(_QWORD *)(v7 + 80) = 1;
  *(_QWORD *)(v7 + 120) = v7 + 136;
  *(_QWORD *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 168) = v7 + 184;
  *(_QWORD *)(v7 + 176) = 1;
  *(_QWORD *)(v7 + 216) = v7 + 232;
  *(_QWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 264) = v7 + 280;
  *(_QWORD *)(v7 + 272) = 1;
  *(_QWORD *)(v7 + 312) = v7 + 328;
  *(_QWORD *)(v7 + 320) = 1;
  *(_QWORD *)(v7 + 360) = v7 + 376;
  *(_QWORD *)(v7 + 368) = 1;
  *(_QWORD *)(v7 + 408) = v7 + 424;
  *(_QWORD *)(v7 + 416) = 1;
  *(_QWORD *)(v7 + 645) = 0;
  *(_OWORD *)(v7 + 616) = 0u;
  *(_OWORD *)(v7 + 632) = 0u;
  *(_OWORD *)(v7 + 584) = 0u;
  *(_OWORD *)(v7 + 600) = 0u;
  *(_OWORD *)(v7 + 552) = 0u;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 488) = 0u;
  *(_OWORD *)(v7 + 504) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_QWORD *)(v7 + 672) = 0;
  *(_DWORD *)(v7 + 680) = 0;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_WORD *)(v7 + 800) = 0;
  v9 = WebCore::ExtensionStyleSheets::pageUserSheet((WebCore::ExtensionStyleSheets *)v5, v8);
  if (v9)
  {
    v11 = *((_QWORD *)this + 4);
    ++*(_DWORD *)v7;
    v56 = (WTF::StringImpl *)v7;
    v57 = v6;
    v58 = 0;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v62 = v11;
    v63 = 0;
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v67 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v70 = 0;
    v68 = 0;
    v69 = 0;
    v12 = *(const WebCore::StyleSheetContents **)(v9 + 24);
    v54 = 0;
    v55 = 0;
    WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)&v56, v12, &v54);
    WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v13);
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v56, v14);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 16) + 8) + 528);
  if (v15
    && (v16 = *(_QWORD *)(v15 + 8)) != 0
    && (v17 = *(_QWORD *)(v16 + 24)) != 0
    && (v18 = *(_QWORD *)(v17 + 8)) != 0)
  {
    v19 = *(_QWORD *)(v18 + 160);
    if (*(_BYTE *)(v19 + 144))
      v20 = 0;
    else
      v20 = v19;
    v21 = 1;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v5, v10);
  if (v20
    && v21
    && *(_DWORD *)(v5 + 36)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v20 + 280) + 16) + 1176))(*(_QWORD *)(*(_QWORD *)(v20 + 280) + 16)))
  {
    v23 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
    if (v23)
      v24 = *(_QWORD **)(v23 + 8);
    else
      v24 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::Document::addConsoleMessage(v24, 8, 1, &v56, 0);
    v26 = v56;
    v56 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  else
  {
    WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v5, v22);
    v28 = *((_QWORD *)this + 4);
    ++*(_DWORD *)v7;
    v56 = (WTF::StringImpl *)v7;
    v57 = v6;
    v58 = 0;
    v59 = 0u;
    v60 = 0u;
    v61 = 0;
    v62 = v28;
    v63 = 0;
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v67 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v70 = 0;
    v68 = 0;
    v69 = 0;
    v29 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v29)
    {
      v49 = *(uint64_t **)(v5 + 24);
      v50 = 8 * v29;
      do
      {
        v51 = *v49++;
        v52 = *(const WebCore::StyleSheetContents **)(v51 + 24);
        v54 = 0;
        v55 = 0;
        WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)&v56, v52, &v54);
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v53);
        v50 -= 8;
      }
      while (v50);
    }
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v56, v27);
    v30 = v21 ^ 1;
    if (!v20)
      v30 = 1;
    if ((v30 & 1) == 0)
    {
      WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v5, v25);
      if (*(_DWORD *)(v5 + 36))
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v20 + 280) + 16) + 1184))(*(_QWORD *)(*(_QWORD *)(v20 + 280) + 16));
    }
  }
  v31 = *((_QWORD *)this + 4);
  ++*(_DWORD *)v7;
  v56 = (WTF::StringImpl *)v7;
  v57 = v6;
  v58 = 0;
  v59 = 0u;
  v60 = 0u;
  v61 = 0;
  v62 = v31;
  v63 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v67 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  v68 = 0;
  v69 = 0;
  v32 = *(unsigned int *)(v5 + 84);
  if ((_DWORD)v32)
  {
    v44 = *(uint64_t **)(v5 + 72);
    v45 = 8 * v32;
    do
    {
      v46 = *v44++;
      v47 = *(const WebCore::StyleSheetContents **)(v46 + 24);
      v54 = 0;
      v55 = 0;
      WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)&v56, v47, &v54);
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v48);
      v45 -= 8;
    }
    while (v45);
  }
  WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v56, v25);
  if (*(_DWORD *)(v7 + 680) || *(_DWORD *)(v7 + 468))
  {
    v34 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v7;
    if (!v34)
      goto LABEL_36;
    if (*(_DWORD *)v34 != 1)
    {
      --*(_DWORD *)v34;
      goto LABEL_36;
    }
  }
  else
  {
    if (*(_DWORD *)v7 != 1)
    {
      --*(_DWORD *)v7;
      goto LABEL_36;
    }
    v34 = (WebCore::Style::RuleSet *)v7;
  }
  WebCore::Style::RuleSet::~RuleSet(v34, v33);
  WTF::fastFree(v42, v43);
LABEL_36:
  if (!*(_DWORD *)v5)
  {
    __break(0xC471u);
    JUMPOUT(0x194251B30);
  }
  --*(_DWORD *)v5;
}

uint64_t WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Page *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_BYTE *)(this + 64))
  {
    v2 = this;
    *(_BYTE *)(this + 64) = 1;
    if (*(_DWORD *)(this + 32))
    {
      v14 = *(unsigned int *)(this + 36);
      if ((_DWORD)v14)
      {
        WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct(*(_DWORD **)(this + 24), (_DWORD **)(*(_QWORD *)(this + 24) + 8 * v14));
        *(_DWORD *)(v2 + 36) = 0;
      }
      v15 = *(WTF **)(v2 + 24);
      if (v15)
      {
        *(_QWORD *)(v2 + 24) = 0;
        *(_DWORD *)(v2 + 32) = 0;
        WTF::fastFree(v15, a2);
      }
    }
    if (*(_DWORD *)(v2 + 48))
    {
      v16 = *(unsigned int *)(v2 + 52);
      if ((_DWORD)v16)
      {
        WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>>::destruct(*(_DWORD **)(v2 + 40), (_DWORD **)(*(_QWORD *)(v2 + 40) + 8 * v16));
        *(_DWORD *)(v2 + 52) = 0;
      }
      v17 = *(WTF **)(v2 + 40);
      if (v17)
      {
        *(_QWORD *)(v2 + 40) = 0;
        *(_DWORD *)(v2 + 48) = 0;
        WTF::fastFree(v17, a2);
      }
    }
    this = *(_QWORD *)(v2 + 56);
    if (this)
    {
      *(_QWORD *)(v2 + 56) = 0;
      this = WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String>>,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashMap<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::String,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::deallocateTable(this, (WTF::StringImpl *)a2);
    }
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 528);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(WebCore::Page **)(v5 + 8);
          if (v6)
          {
            ++*(_DWORD *)v6;
            v20 = v2;
            v7 = *(_DWORD *)(v2 + 116);
            if (v7)
            {
              v12 = *(_QWORD *)(v2 + 104);
              v13 = 104 * v7;
              do
              {
                v18 = v12;
                WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(void)const::$_0::operator()(v2, v12);
                v12 = v18 + 104;
                v13 -= 104;
              }
              while (v13);
            }
            v8 = *((_QWORD *)v6 + 117);
            v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            *v9 = off_1E33A4F78;
            v9[1] = v2;
            v9[2] = &v20;
            v19 = (uint64_t)v9;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 24))(v8, &v19);
            this = v19;
            v19 = 0;
            if (this)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            if (*(_DWORD *)v6 == 1)
            {
              WebCore::Page::~Page(v6);
              return WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v6;
            }
          }
        }
      }
    }
  }
  return this;
}

void WebCore::Style::Resolver::~Resolver(WebCore::Style::Resolver *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderStyle *v9;
  WTF *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::Style::RuleSet *v22;
  WebCore::Style::RuleSet *v23;
  WebCore::Style::RuleSet *v24;
  void *v25;
  WebCore::Style::RuleSet *v26;
  WebCore::Style::RuleSet *v27;
  WebCore::Style::RuleSet *v28;
  WebCore::Style::RuleSet *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  void **v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  void **v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  void **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  void **v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  void **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  _DWORD *v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  void *v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  void *v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  _DWORD **v76;
  _DWORD *v77;
  uint64_t v78;
  _DWORD **v79;
  _DWORD *v80;

  v2 = (WebCore::Style::Resolver *)((char *)this + 432);
  *((_QWORD *)this + 54) = off_1E31F7378;
  v3 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 53);
  if (v5)
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v5, v4);
  v6 = (WTF *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  v7 = *((_QWORD *)this + 51);
  if (v7)
  {
    v75 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v75)
    {
      v76 = (_DWORD **)*((_QWORD *)this + 51);
      do
      {
        v77 = *v76;
        if (*v76 != (_DWORD *)-1)
        {
          *v76 = 0;
          if (v77)
          {
            if (v77[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
            else
              --v77[2];
          }
        }
        ++v76;
        --v75;
      }
      while (v75);
    }
    WTF::fastFree((WTF *)(v7 - 16), v4);
  }
  v8 = *((_QWORD *)this + 50);
  if (v8)
  {
    v78 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v78)
    {
      v79 = (_DWORD **)(v8 + 8);
      do
      {
        if (*(v79 - 1) != (_DWORD *)-1)
        {
          v80 = *v79;
          *v79 = 0;
          if (v80)
          {
            if (v80[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
            else
              --v80[2];
          }
        }
        v79 += 2;
        --v78;
      }
      while (v78);
    }
    WTF::fastFree((WTF *)(v8 - 16), v4);
  }
  v9 = (WebCore::RenderStyle *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v9)
  {
    WebCore::RenderStyle::~RenderStyle(v9, v4);
    if (*(_DWORD *)v10)
    {
      *((_OWORD *)v10 + 2) = 0u;
      *((_OWORD *)v10 + 3) = 0u;
      *(_OWORD *)v10 = 0u;
      *((_OWORD *)v10 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v10, v4);
    }
  }
  v11 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v71 = *(unsigned int *)(v11 + 28);
      if ((_DWORD)v71)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v71));
      v72 = *(WTF **)(v11 + 16);
      if (v72)
      {
        *(_QWORD *)(v11 + 16) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        WTF::fastFree(v72, v4);
      }
      WTF::fastFree((WTF *)v11, v4);
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_QWORD *)this + 44);
  if (v15)
  {
    v50 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v50)
    {
      v51 = *((_QWORD *)this + 44);
      do
      {
        v52 = *(WTF::StringImpl **)v51;
        if (*(_QWORD *)v51 != -1)
        {
          v53 = *(_DWORD **)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          if (v53)
          {
            if (*v53 == 1)
            {
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v53, (WTF::StringImpl *)v4);
              v52 = *(WTF::StringImpl **)v51;
            }
            else
            {
              --*v53;
            }
          }
          *(_QWORD *)v51 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        v51 += 16;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v15 - 16), v4);
  }
  if (*((_BYTE *)this + 350))
  {
    __break(0xC471u);
    JUMPOUT(0x194252320);
  }
  if (*((_BYTE *)this + 328))
  {
    v16 = *((_QWORD *)this + 40);
    if (v16)
    {
      v68 = *(unsigned int *)(v16 - 4);
      if ((_DWORD)v68)
      {
        v69 = (WTF::StringImpl **)*((_QWORD *)this + 40);
        do
        {
          v70 = *v69;
          if (*v69 != (WTF::StringImpl *)-1)
          {
            *v69 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
                WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v4);
              else
                *(_DWORD *)v70 -= 2;
            }
          }
          ++v69;
          --v68;
        }
        while (v68);
      }
      WTF::fastFree((WTF *)(v16 - 16), v4);
    }
  }
  v17 = *((_QWORD *)this + 39);
  if (v17)
  {
    v35 = *(unsigned int *)(v17 - 4);
    if ((_DWORD)v35)
    {
      v36 = (void **)(v17 + 16);
      do
      {
        if (*((_DWORD *)v36 - 4) != -1)
        {
          v4 = *v36;
          *v36 = 0;
          if (v4)
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v36, (WTF *)v4);
          v37 = (WTF::StringImpl *)*(v36 - 1);
          *(v36 - 1) = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v37 -= 2;
          }
        }
        v36 += 3;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v17 - 16), v4);
  }
  v18 = *((_QWORD *)this + 38);
  if (v18)
  {
    v38 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v38)
    {
      v39 = (void **)(v18 + 16);
      do
      {
        if (*((_DWORD *)v39 - 4) != -1)
        {
          v4 = *v39;
          *v39 = 0;
          if (v4)
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v39, (WTF *)v4);
          v40 = (WTF::StringImpl *)*(v39 - 1);
          *(v39 - 1) = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        v39 += 3;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v18 - 16), v4);
  }
  v19 = *((_QWORD *)this + 37);
  if (v19)
  {
    v41 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v41)
    {
      v42 = (void **)(v19 + 8);
      do
      {
        v43 = (WTF::StringImpl *)*(v42 - 1);
        if (v43 != (WTF::StringImpl *)-1)
        {
          v4 = *v42;
          *v42 = 0;
          if (v4)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v42, (WTF *)v4);
            v43 = (WTF::StringImpl *)*(v42 - 1);
          }
          *(v42 - 1) = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        v42 += 2;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v19 - 16), v4);
  }
  v20 = *((_QWORD *)this + 36);
  if (v20)
  {
    v44 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v44)
    {
      v45 = (void **)(v20 + 8);
      do
      {
        v46 = (WTF::StringImpl *)*(v45 - 1);
        if (v46 != (WTF::StringImpl *)-1)
        {
          v4 = *v45;
          *v45 = 0;
          if (v4)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v45, (WTF *)v4);
            v46 = (WTF::StringImpl *)*(v45 - 1);
          }
          *(v45 - 1) = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
        v45 += 2;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)(v20 - 16), v4);
  }
  v21 = *((_QWORD *)this + 35);
  if (v21)
  {
    v47 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v47)
    {
      v48 = (void **)(v21 + 8);
      do
      {
        v49 = (WTF::StringImpl *)*(v48 - 1);
        if (v49 != (WTF::StringImpl *)-1)
        {
          v4 = *v48;
          *v48 = 0;
          if (v4)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v48, (WTF *)v4);
            v49 = (WTF::StringImpl *)*(v48 - 1);
          }
          *(v48 - 1) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v4);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        v48 += 2;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v21 - 16), v4);
  }
  v22 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v22, v4);
      WTF::fastFree(v54, v55);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v23, v4);
      WTF::fastFree(v56, v57);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  v24 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v24, v4);
      WTF::fastFree(v58, v59);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  WebCore::Style::RuleFeatureSet::~RuleFeatureSet((WebCore::Style::Resolver *)((char *)this + 72), v4);
  v26 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v26, v25);
      WTF::fastFree(v60, v61);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v27, v25);
      WTF::fastFree(v62, v63);
    }
    else
    {
      --*(_DWORD *)v27;
    }
  }
  v28 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v28, v25);
      WTF::fastFree(v64, v65);
    }
    else
    {
      --*(_DWORD *)v28;
    }
  }
  v29 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v29, v25);
      WTF::fastFree(v66, v67);
    }
    else
    {
      --*(_DWORD *)v29;
    }
  }
  v30 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)v30));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)v30);
      v73 = *(unsigned int *)(v30 + 28);
      if ((_DWORD)v73)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v30 + 16), (WTF::StringImpl *)(*(_QWORD *)(v30 + 16) + 32 * v73));
      v74 = *(WTF **)(v30 + 16);
      if (v74)
      {
        *(_QWORD *)(v30 + 16) = 0;
        *(_DWORD *)(v30 + 24) = 0;
        WTF::fastFree(v74, v25);
      }
      WTF::fastFree((WTF *)v30, v25);
    }
  }
  v33 = *((_QWORD *)this + 1);
  if (v33)
  {
    *(_QWORD *)(v33 + 8) = 0;
    v34 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v25);
      else
        --*(_DWORD *)v34;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::TimerBase::~TimerBase(WebCore::TimerBase *this)
{
  void *v2;
  uint64_t canCurrentThreadAccessThreadLocalData;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  void *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t hasValidHeapPosition;
  unsigned int *v24;
  uint64_t **v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  double v29;
  __n128 v30;
  double v31;
  unsigned int *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  double v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  char v57;

  *(_QWORD *)this = off_1E3407128;
  if ((WTF::canCurrentThreadAccessThreadLocalData() & 1) == 0
    && (webThreadStarted & 1) == 0
    && WTF::linkedOnOrAfterSDKWithBehavior())
  {
    __break(0xC471u);
    JUMPOUT(0x194252620);
  }
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  *((_QWORD *)this + 3) = 0;
  canCurrentThreadAccessThreadLocalData = WTF::canCurrentThreadAccessThreadLocalData();
  if ((canCurrentThreadAccessThreadLocalData & 1) == 0 && (webThreadStarted & 1) == 0)
  {
    canCurrentThreadAccessThreadLocalData = WTF::linkedOnOrAfterSDKWithBehavior();
    if ((_DWORD)canCurrentThreadAccessThreadLocalData)
    {
      __break(0xC471u);
      JUMPOUT(0x194252658);
    }
  }
  if (*((double *)this + 2) != 0.0)
    *((_QWORD *)this + 2) = 0;
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  v15 = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8);
  if (v15 == 0.0)
    goto LABEL_7;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 96);
    if (v17)
      goto LABEL_31;
LABEL_58:
    v17 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v17 + 8) = 1;
    v34 = (unsigned int *)(v17 + 8);
    *(_QWORD *)v17 = off_1E31F4A70;
    v35 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v35 = 0;
    *(_QWORD *)(v17 + 16) = v35;
    *(_QWORD *)v17 = off_1E3407108;
    *(_BYTE *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    v36 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v36 + 28) = 0;
    *(_QWORD *)(v36 + 32) = 0;
    *(_QWORD *)(v36 + 8) = 0;
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)v36 = 0;
    *(_WORD *)(v36 + 24) = 0;
    if (WTF::isUIThread((WTF *)v36))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v36, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v17 + 48) = v36;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_BYTE *)(v17 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v17;
      do
        v37 = __ldaxr(v34);
      while (__stlxr(v37 + 1, v34));
    }
    v38 = *(unsigned int **)(v16 + 96);
    *(_QWORD *)(v16 + 96) = v17;
    if (v38)
    {
      v39 = v38 + 2;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
      {
        atomic_store(1u, v38 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
      }
    }
    goto LABEL_31;
  }
  v16 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)canCurrentThreadAccessThreadLocalData);
  v17 = *(_QWORD *)(v16 + 96);
  if (!v17)
    goto LABEL_58;
LABEL_31:
  v18 = *(_QWORD *)(v17 + 48);
  v19 = *(_DWORD *)(v18 + 28);
  *(_DWORD *)(v18 + 28) = v19 + 1;
  v20 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v20)
    goto LABEL_97;
  v42 = bmalloc::api::isoAllocate();
  *(_DWORD *)v42 = 1;
  *(_QWORD *)(v42 + 8) = 0;
  *(_DWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = *(_QWORD *)(WebCore::threadGlobalData((WebCore *)v42) + 48);
  *(_QWORD *)(v42 + 32) = this;
  *(_DWORD *)(v42 + 40) = -1;
  v43 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v43 & 0xFF000000000000 | v42;
  v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
  if ((v43 & 0xFFFFFFFFFFFFLL) != 0)
  {
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      bmalloc::api::isoDeallocate((bmalloc::api *)v44, v2);
    }
  }
  v20 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
LABEL_97:
    do
      v21 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v21 + 1, (unsigned int *)v20));
  }
  *(_QWORD *)(v20 + 8) = 0;
  *(_DWORD *)(v20 + 16) = v19;
  v22 = *(_DWORD *)(v20 + 40);
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) == 0
    || (v47 = *(double *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 8), v47 == 0.0))
  {
    hasValidHeapPosition = (uint64_t)WebCore::TimerBase::heapDelete(this, v2);
  }
  else
  {
    hasValidHeapPosition = WebCore::TimerBase::hasValidHeapPosition(this, v2);
    if ((hasValidHeapPosition & 1) == 0)
    {
      if (v47 >= v15)
      {
        v48 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
        if (v48)
        {
          do
            v49 = __ldaxr((unsigned int *)v48);
          while (__stlxr(v49 + 1, (unsigned int *)v48));
        }
        v50 = *(_QWORD *)(v48 + 8);
        *(_QWORD *)(v48 + 8) = 0xFFF0000000000000;
        WebCore::TimerBase::heapDecreaseKey((uint64_t)this, v2);
        v51 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
        if (v51)
        {
          do
            v52 = __ldaxr((unsigned int *)v51);
          while (__stlxr(v52 + 1, (unsigned int *)v51));
        }
        std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v51 + 24), (void *)(**(_QWORD **)(v51 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v51 + 24) + 12)), (uint64_t)&v57, *(unsigned int *)(*(_QWORD *)(v51 + 24) + 12));
        do
        {
          v53 = __ldaxr((unsigned int *)v51);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, (unsigned int *)v51));
        if (!v54)
        {
          atomic_store(1u, (unsigned int *)v51);
          bmalloc::api::isoDeallocate((bmalloc::api *)v51, v2);
        }
        *(_QWORD *)(v48 + 8) = v50;
        do
        {
          v55 = __ldaxr((unsigned int *)v48);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, (unsigned int *)v48));
        if (!v56)
        {
          atomic_store(1u, (unsigned int *)v48);
          bmalloc::api::isoDeallocate((bmalloc::api *)v48, v2);
        }
      }
      hasValidHeapPosition = WebCore::TimerBase::heapDecreaseKey((uint64_t)this, v2);
    }
  }
  if (v22 && *(_DWORD *)(v20 + 40))
    goto LABEL_98;
  v24 = (unsigned int *)WebCore::threadGlobalData((WebCore *)hasValidHeapPosition);
  v25 = (uint64_t **)*((_QWORD *)v24 + 6);
  if (!v25[2])
    goto LABEL_98;
  while (1)
  {
    if (!*((_DWORD *)v25 + 3))
      goto LABEL_41;
    v26 = **v25;
    if (*(_QWORD *)(v26 + 32))
      break;
    v24 = WebCore::TimerBase::heapDeleteNullMin(v25);
  }
  if (*((_BYTE *)v25 + 24))
  {
LABEL_41:
    v25[4] = 0;
    (*(void (**)(uint64_t *))(*v25[2] + 32))(v25[2]);
    goto LABEL_42;
  }
  v29 = *(double *)(v26 + 8);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v24);
  v31 = *((double *)v25 + 4);
  if (v31 == 0.0 || v31 > v30.n128_f64[0] || v30.n128_f64[0] < v29)
  {
    *((double *)v25 + 4) = v29;
    v30.n128_f64[0] = v29 - v30.n128_f64[0];
    if (v30.n128_f64[0] < 0.0)
      v30.n128_f64[0] = 0.0;
    (*(void (**)(uint64_t *, __n128))(*v25[2] + 24))(v25[2], v30);
  }
LABEL_42:
  if (v20)
  {
LABEL_98:
    do
    {
      v27 = __ldaxr((unsigned int *)v20);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, (unsigned int *)v20));
    if (!v28)
    {
      atomic_store(1u, (unsigned int *)v20);
      bmalloc::api::isoDeallocate((bmalloc::api *)v20, v2);
    }
  }
LABEL_7:
  if ((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) != 0)
    *(_QWORD *)((*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL) + 0x20) = 0;
  *((_QWORD *)this + 2) = 0x7FF8000000000000;
  v4 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::Thread::~Thread((WTF::Thread *)v4);
      WTF::fastFree(v13, v14);
    }
  }
  v7 = (unsigned int *)(*((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL);
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      bmalloc::api::isoDeallocate((bmalloc::api *)v7, v2);
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v2);
    }
  }
}

void WebCore::Style::RuleSet::~RuleSet(WebCore::Style::RuleSet *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  unsigned int v12;
  WTF *v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  _DWORD *v22;
  WTF *v23;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  WTF *v29;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF *v35;
  uint64_t v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  WTF *v41;
  uint64_t v43;
  _DWORD **v44;
  uint64_t v45;
  _DWORD *v46;
  WTF *v47;
  uint64_t v49;
  _DWORD **v50;
  uint64_t v51;
  _DWORD *v52;
  WTF *v53;
  uint64_t v55;
  _DWORD **v56;
  uint64_t v57;
  _DWORD *v58;
  WTF *v59;
  uint64_t v61;
  _DWORD **v62;
  uint64_t v63;
  _DWORD *v64;
  WTF *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD **v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD **v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD **v81;
  _DWORD **v82;
  uint64_t v83;
  _DWORD *v84;
  _DWORD **v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  WTF::StringImpl **v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF *v93;
  WTF *v94;

  v3 = (WTF *)*((_QWORD *)this + 98);
  if (v3)
  {
    *((_QWORD *)this + 98) = 0;
    *((_DWORD *)this + 198) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *((unsigned int *)this + 195);
  if ((_DWORD)v4)
  {
    v78 = (_DWORD **)*((_QWORD *)this + 96);
    v79 = 16 * v4;
    do
    {
      v80 = *v78;
      *v78 = 0;
      if (v80)
      {
        if (*v80 == 1)
        {
          v81 = v78;
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v80, (WTF::StringImpl *)a2);
          v78 = v81;
        }
        else
        {
          --*v80;
        }
      }
      v78 += 2;
      v79 -= 16;
    }
    while (v79);
  }
  v5 = (WTF *)*((_QWORD *)this + 96);
  if (v5)
  {
    *((_QWORD *)this + 96) = 0;
    *((_DWORD *)this + 194) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 94);
  if (v6)
  {
    *((_QWORD *)this + 94) = 0;
    *((_DWORD *)this + 190) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((unsigned int *)this + 187);
  if ((_DWORD)v7)
  {
    v82 = (_DWORD **)*((_QWORD *)this + 92);
    v83 = 16 * v7;
    do
    {
      v84 = *v82;
      *v82 = 0;
      if (v84)
      {
        if (*v84 == 1)
        {
          v85 = v82;
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v84, (WTF::StringImpl *)a2);
          v82 = v85;
        }
        else
        {
          --*v84;
        }
      }
      v82 += 2;
      v83 -= 16;
    }
    while (v83);
  }
  v8 = (WTF *)*((_QWORD *)this + 92);
  if (v8)
  {
    *((_QWORD *)this + 92) = 0;
    *((_DWORD *)this + 186) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 183);
  if ((_DWORD)v9)
  {
    v75 = (_DWORD **)*((_QWORD *)this + 90);
    v76 = 16 * v9;
    do
    {
      v77 = *v75;
      *v75 = 0;
      if (v77)
      {
        if (*v77 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v77, (WTF::StringImpl *)a2);
        else
          --*v77;
      }
      v75 += 2;
      v76 -= 16;
    }
    while (v76);
  }
  v10 = (WTF *)*((_QWORD *)this + 90);
  if (v10)
  {
    *((_QWORD *)this + 90) = 0;
    *((_DWORD *)this + 182) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 88);
  if (v11)
  {
    *((_QWORD *)this + 88) = 0;
    *((_DWORD *)this + 178) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((_DWORD *)this + 175);
  v13 = (WTF *)*((_QWORD *)this + 86);
  if (v12)
  {
    v86 = (WTF *)((char *)v13 + 24 * v12);
    v94 = v86;
    do
    {
      v87 = *((unsigned int *)v13 + 3);
      if ((_DWORD)v87)
      {
        v90 = *(WTF::StringImpl ***)v13;
        v91 = 8 * v87;
        v93 = v13;
        do
        {
          v92 = *v90;
          *v90 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v92 -= 2;
            v13 = v93;
            v86 = v94;
          }
          ++v90;
          v91 -= 8;
        }
        while (v91);
      }
      v88 = *(WTF **)v13;
      if (*(_QWORD *)v13)
      {
        *(_QWORD *)v13 = 0;
        *((_DWORD *)v13 + 2) = 0;
        v89 = v13;
        WTF::fastFree(v88, a2);
        v86 = v94;
        v13 = v89;
      }
      v13 = (WTF *)((char *)v13 + 24);
    }
    while (v13 != v86);
    v13 = (WTF *)*((_QWORD *)this + 86);
  }
  if (v13)
  {
    *((_QWORD *)this + 86) = 0;
    *((_DWORD *)this + 174) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *((_QWORD *)this + 84);
  if (v14)
    WTF::HashTable<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::deallocateTable(v14, a2);
  v15 = *((_DWORD *)this + 167);
  if (v15)
    WTF::VectorDestructor<true,WebCore::Style::RuleSet::DynamicMediaQueryRules>::destruct(*((WTF **)this + 82), (WTF::StringImpl *)(*((_QWORD *)this + 82) + 56 * v15));
  v16 = (WTF *)*((_QWORD *)this + 82);
  if (v16)
  {
    *((_QWORD *)this + 82) = 0;
    *((_DWORD *)this + 166) = 0;
    WTF::fastFree(v16, a2);
  }
  WebCore::Style::RuleFeatureSet::~RuleFeatureSet((WebCore::Style::RuleSet *)((char *)this + 472), a2);
  v18 = (WTF *)*((_QWORD *)this + 57);
  if (v18)
  {
    *((_QWORD *)this + 57) = 0;
    *((_DWORD *)this + 116) = 0;
    WTF::fastFree(v18, v17);
  }
  v19 = *((unsigned int *)this + 105);
  if ((_DWORD)v19)
  {
    v20 = (_DWORD **)*((_QWORD *)this + 51);
    v21 = 32 * v19;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        if (*v22 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)v17);
        else
          --*v22;
      }
      v20 += 4;
      v21 -= 32;
    }
    while (v21);
  }
  v23 = (WTF *)*((_QWORD *)this + 51);
  if ((WebCore::Style::RuleSet *)((char *)this + 424) != v23 && v23 != 0)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v23, v17);
  }
  v25 = *((unsigned int *)this + 93);
  if ((_DWORD)v25)
  {
    v26 = (_DWORD **)*((_QWORD *)this + 45);
    v27 = 32 * v25;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
      {
        if (*v28 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)v17);
        else
          --*v28;
      }
      v26 += 4;
      v27 -= 32;
    }
    while (v27);
  }
  v29 = (WTF *)*((_QWORD *)this + 45);
  if ((WebCore::Style::RuleSet *)((char *)this + 376) != v29 && v29 != 0)
  {
    *((_QWORD *)this + 45) = 0;
    *((_DWORD *)this + 92) = 0;
    WTF::fastFree(v29, v17);
  }
  v31 = *((unsigned int *)this + 81);
  if ((_DWORD)v31)
  {
    v32 = (_DWORD **)*((_QWORD *)this + 39);
    v33 = 32 * v31;
    do
    {
      v34 = *v32;
      *v32 = 0;
      if (v34)
      {
        if (*v34 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v34, (WTF::StringImpl *)v17);
        else
          --*v34;
      }
      v32 += 4;
      v33 -= 32;
    }
    while (v33);
  }
  v35 = (WTF *)*((_QWORD *)this + 39);
  if ((WebCore::Style::RuleSet *)((char *)this + 328) != v35 && v35 != 0)
  {
    *((_QWORD *)this + 39) = 0;
    *((_DWORD *)this + 80) = 0;
    WTF::fastFree(v35, v17);
  }
  v37 = *((unsigned int *)this + 69);
  if ((_DWORD)v37)
  {
    v38 = (_DWORD **)*((_QWORD *)this + 33);
    v39 = 32 * v37;
    do
    {
      v40 = *v38;
      *v38 = 0;
      if (v40)
      {
        if (*v40 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v40, (WTF::StringImpl *)v17);
        else
          --*v40;
      }
      v38 += 4;
      v39 -= 32;
    }
    while (v39);
  }
  v41 = (WTF *)*((_QWORD *)this + 33);
  if ((WebCore::Style::RuleSet *)((char *)this + 280) != v41 && v41 != 0)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v41, v17);
  }
  v43 = *((unsigned int *)this + 57);
  if ((_DWORD)v43)
  {
    v44 = (_DWORD **)*((_QWORD *)this + 27);
    v45 = 32 * v43;
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
      {
        if (*v46 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v46, (WTF::StringImpl *)v17);
        else
          --*v46;
      }
      v44 += 4;
      v45 -= 32;
    }
    while (v45);
  }
  v47 = (WTF *)*((_QWORD *)this + 27);
  if ((WebCore::Style::RuleSet *)((char *)this + 232) != v47 && v47 != 0)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v47, v17);
  }
  v49 = *((unsigned int *)this + 45);
  if ((_DWORD)v49)
  {
    v50 = (_DWORD **)*((_QWORD *)this + 21);
    v51 = 32 * v49;
    do
    {
      v52 = *v50;
      *v50 = 0;
      if (v52)
      {
        if (*v52 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v52, (WTF::StringImpl *)v17);
        else
          --*v52;
      }
      v50 += 4;
      v51 -= 32;
    }
    while (v51);
  }
  v53 = (WTF *)*((_QWORD *)this + 21);
  if ((WebCore::Style::RuleSet *)((char *)this + 184) != v53 && v53 != 0)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v53, v17);
  }
  v55 = *((unsigned int *)this + 33);
  if ((_DWORD)v55)
  {
    v56 = (_DWORD **)*((_QWORD *)this + 15);
    v57 = 32 * v55;
    do
    {
      v58 = *v56;
      *v56 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v58, (WTF::StringImpl *)v17);
        else
          --*v58;
      }
      v56 += 4;
      v57 -= 32;
    }
    while (v57);
  }
  v59 = (WTF *)*((_QWORD *)this + 15);
  if ((WebCore::Style::RuleSet *)((char *)this + 136) != v59 && v59 != 0)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v59, v17);
  }
  v61 = *((unsigned int *)this + 21);
  if ((_DWORD)v61)
  {
    v62 = (_DWORD **)*((_QWORD *)this + 9);
    v63 = 32 * v61;
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v64, (WTF::StringImpl *)v17);
        else
          --*v64;
      }
      v62 += 4;
      v63 -= 32;
    }
    while (v63);
  }
  v65 = (WTF *)*((_QWORD *)this + 9);
  if ((WebCore::Style::RuleSet *)((char *)this + 88) != v65 && v65 != 0)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v65, v17);
  }
  v67 = *((_QWORD *)this + 8);
  if (v67)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v67, (WTF::StringImpl *)v17);
  v68 = *((_QWORD *)this + 7);
  if (v68)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v68, (WTF::StringImpl *)v17);
  v69 = *((_QWORD *)this + 6);
  if (v69)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v69, (WTF::StringImpl *)v17);
  v70 = *((_QWORD *)this + 5);
  if (v70)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v70, (WTF::StringImpl *)v17);
  v71 = *((_QWORD *)this + 4);
  if (v71)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v71, (WTF::StringImpl *)v17);
  v72 = *((_QWORD *)this + 3);
  if (v72)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v72, (WTF::StringImpl *)v17);
  v73 = *((_QWORD *)this + 2);
  if (v73)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v73, (WTF::StringImpl *)v17);
  v74 = *((_QWORD *)this + 1);
  if (v74)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v74, (WTF::StringImpl *)v17);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v7 = v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = 32 * v8;
            do
            {
              v11 = *(_DWORD **)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                if (*v11 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
                else
                  --*v11;
              }
              v9 = (WTF *)((char *)v9 + 32);
              v10 -= 32;
            }
            while (v10);
          }
          v12 = *(WTF **)v7;
          if ((WTF *)((char *)v7 + 16) != *(WTF **)v7 && v12 != 0)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v7, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::Style::RuleFeatureSet::~RuleFeatureSet(WebCore::Style::RuleFeatureSet *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD **v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD **v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl *v52;

  v3 = *((_QWORD *)this + 19);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((_QWORD *)this + 18);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = *((_QWORD *)this + 17);
  if (v5)
  {
    v32 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v32)
    {
      v33 = (WTF::StringImpl **)*((_QWORD *)this + 17);
      do
      {
        v34 = *v33;
        if (*v33 != (WTF::StringImpl *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v34 -= 2;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v5 - 16), a2);
  }
  v6 = *((_QWORD *)this + 16);
  if (v6)
  {
    v35 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v35)
    {
      v36 = (WTF::StringImpl **)*((_QWORD *)this + 16);
      do
      {
        v37 = *v36;
        if (*v36 != (WTF::StringImpl *)-1)
        {
          *v36 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v37 -= 2;
          }
        }
        ++v36;
        --v35;
      }
      while (v35);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *((unsigned int *)this + 31);
  if ((_DWORD)v7)
  {
    v23 = (_DWORD **)*((_QWORD *)this + 14);
    v24 = 12 * v7;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        if (*v25 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v25, (WTF::StringImpl *)a2);
        else
          --*v25;
      }
      v23 = (_DWORD **)((char *)v23 + 12);
      v24 -= 12;
    }
    while (v24);
  }
  v8 = (WTF *)*((_QWORD *)this + 14);
  if (v8)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 13);
  if (v9)
    WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(v9, (WTF::StringImpl *)a2);
  v10 = *((_QWORD *)this + 12);
  if (v10)
    WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(v10, (WTF::StringImpl *)a2);
  v11 = *((_QWORD *)this + 11);
  if (v11)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v11, (WTF::StringImpl *)a2);
  v12 = *((_QWORD *)this + 10);
  if (v12)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v12, (WTF::StringImpl *)a2);
  v13 = *((_QWORD *)this + 9);
  if (v13)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v13, (WTF::StringImpl *)a2);
  v14 = *((unsigned int *)this + 17);
  if ((_DWORD)v14)
  {
    v26 = (_DWORD **)*((_QWORD *)this + 7);
    v27 = 12 * v14;
    do
    {
      v28 = *v26;
      *v26 = 0;
      if (v28)
      {
        if (*v28 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v28, (WTF::StringImpl *)a2);
        else
          --*v28;
      }
      v26 = (_DWORD **)((char *)v26 + 12);
      v27 -= 12;
    }
    while (v27);
  }
  v15 = (WTF *)*((_QWORD *)this + 7);
  if (v15)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((unsigned int *)this + 13);
  if ((_DWORD)v16)
  {
    v29 = (_DWORD **)*((_QWORD *)this + 5);
    v30 = 12 * v16;
    do
    {
      v31 = *v29;
      *v29 = 0;
      if (v31)
      {
        if (*v31 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v31, (WTF::StringImpl *)a2);
        else
          --*v31;
      }
      v29 = (_DWORD **)((char *)v29 + 12);
      v30 -= 12;
    }
    while (v30);
  }
  v17 = (WTF *)*((_QWORD *)this + 5);
  if (v17)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v17, a2);
  }
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    v38 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v38)
    {
      v39 = (WTF::StringImpl **)*((_QWORD *)this + 4);
      do
      {
        v40 = *v39;
        if (*v39 != (WTF::StringImpl *)-1)
        {
          *v39 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
        ++v39;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v19 = *((_QWORD *)this + 3);
  if (v19)
  {
    v41 = *(unsigned int *)(v19 - 4);
    if ((_DWORD)v41)
    {
      v42 = (WTF::StringImpl **)*((_QWORD *)this + 3);
      do
      {
        v43 = *v42;
        if (*v42 != (WTF::StringImpl *)-1)
        {
          *v42 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v43 -= 2;
          }
        }
        ++v42;
        --v41;
      }
      while (v41);
    }
    WTF::fastFree((WTF *)(v19 - 16), a2);
  }
  v20 = *((_QWORD *)this + 2);
  if (v20)
  {
    v44 = *(unsigned int *)(v20 - 4);
    if ((_DWORD)v44)
    {
      v45 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      do
      {
        v46 = *v45;
        if (*v45 != (WTF::StringImpl *)-1)
        {
          *v45 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v46 -= 2;
          }
        }
        ++v45;
        --v44;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)(v20 - 16), a2);
  }
  v21 = *((_QWORD *)this + 1);
  if (v21)
  {
    v47 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v47)
    {
      v48 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v49 = *v48;
        if (*v48 != (WTF::StringImpl *)-1)
        {
          *v48 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        ++v48;
        --v47;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)(v21 - 16), a2);
  }
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v50 = *(unsigned int *)(v22 - 4);
    if ((_DWORD)v50)
    {
      v51 = *(WTF::StringImpl ***)this;
      do
      {
        v52 = *v51;
        if (*v51 != (WTF::StringImpl *)-1)
        {
          *v51 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        ++v51;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v22 - 16), a2);
  }
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  WTF::StringImpl *v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 24 * i;
      if (*(_DWORD *)v5 != -1)
      {
        v6 = a1 + 24 * i;
        v7 = *(WTF **)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = 16 * v8;
            do
            {
              v11 = *(_DWORD **)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                if (*v11 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
                else
                  --*v11;
              }
              v9 = (WTF *)((char *)v9 + 16);
              v10 -= 16;
            }
            while (v10);
          }
          v12 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v7, a2);
        }
        v13 = *(WTF::StringImpl **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v7 = v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = 24 * v8;
            do
            {
              v11 = *(_DWORD **)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                if (*v11 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
                else
                  --*v11;
              }
              v9 = (WTF *)((char *)v9 + 24);
              v10 -= 24;
            }
            while (v10);
          }
          v12 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v7, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::ExtensionStyleSheets::pageUserSheet(WebCore::ExtensionStyleSheets *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 528);
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
      return 0;
    v6 = *(_QWORD *)(v5 + 24);
    if (!v6)
      return 0;
    v7 = *(WebCore::Page **)(v6 + 8);
    if (!v7)
      return 0;
    v8 = *WebCore::Page::userStyleSheet(v7, a2);
    if (!v8)
      return 0;
    v10 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    v23 = v8;
    if (!*((_DWORD *)v8 + 1))
    {
      v2 = 0;
      v23 = 0;
      goto LABEL_9;
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *(_DWORD *)(v12 + 24) += 2;
    v21 = v12;
    v13 = *(_QWORD *)(v12 + 680);
    v14 = *(WTF::StringImpl **)(v13 + 568);
    if (v14)
      *(_DWORD *)v14 += 2;
    v18 = v14;
    v15 = *(_OWORD *)(v13 + 592);
    v19 = *(_OWORD *)(v13 + 576);
    v20 = v15;
    WebCore::createExtensionsStyleSheet(&v22, (const WebCore::Document *)v12, (const WTF::URL *)&v18, (const WTF::String *)&v23, 0);
    v17 = (_DWORD *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v22;
    if (v17)
    {
      if (v17[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      else
        --v17[2];
    }
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v16);
      else
        *(_DWORD *)v14 -= 2;
    }
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v21);
    v2 = *((_QWORD *)this + 2);
    v8 = v23;
    v23 = 0;
    if (v8)
    {
      v10 = *(_DWORD *)v8 - 2;
LABEL_9:
      if (v10)
        *(_DWORD *)v8 = v10;
      else
        WTF::StringImpl::destroy(v8, v9);
    }
  }
  return v2;
}

WTF::StringImpl **WebCore::Page::userStyleSheet(WebCore::Page *this, const WTF::String *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;
  double v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebCore::TextResourceDecoder *v9;
  WebCore::SharedBuffer *v10;
  const char *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  WebCore::SharedBuffer *v16;
  WTF::StringImpl *v17;
  double v18;
  WTF::StringImpl *v19;
  _QWORD v20[4];
  WebCore::TextResourceDecoder *v21;
  WTF::StringImpl *v22;
  WebCore::SharedBuffer *v23;

  v3 = *((_QWORD *)this + 60);
  if (!v3 || !*(_DWORD *)(v3 + 4))
    return (WTF::StringImpl **)((char *)this + 488);
  v6 = COERCE_DOUBLE(WTF::FileSystemImpl::fileModificationTime((WebCore::Page *)((char *)this + 480), a2));
  if ((_BYTE)v7)
  {
    if (!*((_BYTE *)this + 496) || *((double *)this + 63) < v6)
    {
      *((_BYTE *)this + 496) = 1;
      v8 = (WTF::StringImpl *)*((_QWORD *)this + 61);
      *((_QWORD *)this + 61) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
        {
          v18 = v6;
          WTF::StringImpl::destroy(v8, v7);
          v6 = v18;
        }
        else
        {
          *(_DWORD *)v8 -= 2;
        }
      }
      v4 = (WTF::StringImpl **)((char *)this + 488);
      *((double *)this + 63) = v6;
      WebCore::SharedBuffer::createWithContentsOfFile((WebCore::Page *)((char *)this + 480), 0, 1, (uint64_t *)&v23);
      if (v23)
      {
        v20[0] = &off_1E31F4A18;
        memset(&v20[1], 0, 24);
        WebCore::TextResourceDecoder::create((WebCore::TextResourceDecoder *)&WebCore::cssContentTypeAtomData, (const WTF::String *)v20, 0, (uint64_t *)&v21);
        v9 = v21;
        v10 = v23;
        v11 = (const char *)WebCore::SharedBuffer::data(v23);
        WebCore::TextResourceDecoder::decodeAndFlush(v9, v11, *((_QWORD *)v10 + 6), &v22);
        v13 = v22;
        v22 = 0;
        v14 = *v4;
        *v4 = v13;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::destroy(v14, v12);
            v19 = v22;
            v22 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v12);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          else
          {
            *(_DWORD *)v14 -= 2;
            v22 = 0;
          }
        }
        WTF::Ref<WebCore::TextResourceDecoder,WTF::RawPtrTraits<WebCore::TextResourceDecoder>,WTF::DefaultRefDerefTraits<WebCore::TextResourceDecoder>>::~Ref((uint64_t *)&v21, v12);
        v16 = v23;
        v23 = 0;
        if (v16)
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((uint64_t)v16, v15);
      }
      return v4;
    }
    return (WTF::StringImpl **)((char *)this + 488);
  }
  v4 = (WTF::StringImpl **)((char *)this + 488);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v7);
    else
      *(_DWORD *)v17 -= 2;
  }
  return v4;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v7 = v5[1];
        v5[1] = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = 16 * v8;
            do
            {
              v11 = *(_DWORD **)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                if (*v11 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
                else
                  --*v11;
              }
              v9 = (WTF *)((char *)v9 + 16);
              v10 -= 16;
            }
            while (v10);
          }
          v12 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v7, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::Style::TreeResolver::Scope::~Scope(WebCore::Style::TreeResolver::Scope *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::Style::TreeResolver::Scope *v5;
  uint64_t v6;
  WebCore::Style::Resolver *v7;
  WTF *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  v3 = *((_QWORD *)this + 525);
  if (!v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
    if (!*(_BYTE *)(v4 + 3393))
    {
      __break(0xC471u);
      return;
    }
    *(_BYTE *)(v4 + 3393) = 0;
  }
  v5 = (WebCore::Style::TreeResolver::Scope *)*((_QWORD *)this + 526);
  *((_QWORD *)this + 526) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Style::TreeResolver::Scope::~Scope(v5);
      WTF::fastFree(v8, v9);
      v3 = *((_QWORD *)this + 525);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  *((_QWORD *)this + 525) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 524);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), a2);
  WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::TreeResolver::Scope *)((char *)this + 16), a2);
  v7 = (WebCore::Style::Resolver *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::Style::Resolver::~Resolver(v7);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

void WebCore::Style::SelectorMatchingState::~SelectorMatchingState(WebCore::Style::SelectorMatchingState *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v14;
  WTF **v15;
  WTF *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  _QWORD *v23;
  uint64_t v24;
  WebCore::Document *v25;
  WebCore::Document *v26;

  v3 = *((_QWORD *)this + 518);
  if (v3)
  {
    v25 = (WebCore::Document *)*((_QWORD *)this + 518);
    v14 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v14)
    {
      v15 = (WTF **)((char *)v25 + 16);
      do
      {
        if (*(v15 - 2) != (WTF *)-1)
        {
          v16 = *v15;
          *v15 = 0;
          if (v16)
          {
            v17 = v14;
            WTF::fastFree(v16, a2);
            v14 = v17;
          }
        }
        v15 += 3;
        --v14;
      }
      while (v14);
    }
    WTF::fastFree((WebCore::Document *)((char *)v25 - 16), a2);
  }
  v4 = *((_QWORD *)this + 517);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (_DWORD *)*((_QWORD *)this + 516);
  if (v5)
  {
    if (!*v5)
    {
      __break(0xC471u);
      JUMPOUT(0x194253E98);
    }
    --*v5;
  }
  v6 = *((unsigned int *)this + 1031);
  if ((_DWORD)v6)
  {
    v18 = (_QWORD *)*((_QWORD *)this + 514);
    v19 = 8 * v6;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) == 2)
        {
          v21 = *(_WORD *)(v20 + 30);
          if ((v21 & 0x400) == 0)
          {
            v23 = v18;
            v24 = v19;
            v26 = (WebCore::Document *)v20;
            v22 = *(_WORD *)(v20 + 28);
            if ((v22 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v20);
            }
            else
            {
              if ((v22 & 0x20) != 0)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(v20 + 160) + 16))(*(_QWORD *)(v20 + 160));
                v21 = *((_WORD *)v26 + 15);
              }
              *((_WORD *)v26 + 15) = v21 | 0x400;
              (*(void (**)(WebCore::Document *))(*(_QWORD *)v26 + 72))(v26);
            }
            v18 = v23;
            v19 = v24;
          }
        }
        else
        {
          *(_DWORD *)(v20 + 24) -= 2;
        }
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v7 = (WTF *)*((_QWORD *)this + 514);
  if (v7)
  {
    *((_QWORD *)this + 514) = 0;
    *((_DWORD *)this + 1030) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((unsigned int *)this + 3);
  v9 = *(WTF **)this;
  if ((_DWORD)v8)
  {
    v10 = 40 * v8;
    v11 = (WTF *)((char *)v9 + 24);
    do
    {
      v12 = (WTF *)*((_QWORD *)v11 - 2);
      if (v11 != v12 && v12 != 0)
      {
        *((_QWORD *)v11 - 2) = 0;
        *((_DWORD *)v11 - 2) = 0;
        WTF::fastFree(v12, a2);
      }
      v11 = (WTF *)((char *)v11 + 40);
      v10 -= 40;
    }
    while (v10);
    v9 = *(WTF **)this;
  }
  if (v9)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2);
  }
}

void WebCore::Style::Invalidator::~Invalidator(WebCore::Style::Invalidator *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Style::RuleSet *v6;
  WebCore::Style::RuleSet **v7;
  uint64_t v8;
  WebCore::Style::RuleSet *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  void *v13;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v7 = (WebCore::Style::RuleSet **)*((_QWORD *)this + 1);
    v8 = 8 * v3;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v9, a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if ((WebCore::Style::Invalidator *)((char *)this + 24) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = *(WebCore::Style::RuleSet **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v6, a2);
      WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
}

uint64_t PAL::WebPrivacyLibrary(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17WebPrivacyLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = (char)this;
  if (qword_1ECE7F0C0 != -1)
    dispatch_once(&qword_1ECE7F0C0, block);
  return _MergedGlobals_85;
}

BOOL WebCore::Quirks::shouldAvoidUsingIOS13ForGmail(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint16x8_t v12;
  uint16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v1 = *(_QWORD *)(v1 + 8);
    if (v1)
    {
      v2 = *(_QWORD *)(v1 + 680);
      if (*(_BYTE *)(v2 + 243))
      {
        if (!*(_BYTE *)(v2 + 242))
          return 0;
      }
      else if ((*(_QWORD *)(v2 + 688) & 0x80000) == 0)
      {
        return 0;
      }
      if (*(_BYTE *)(v1 + 3362) || *(_BYTE *)(v1 + 3405))
      {
        while (1)
        {
          v14 = *(_QWORD *)(v1 + 528);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 8);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 120);
          if (!v16)
            break;
          v17 = *(_QWORD *)(v16 + 8);
          if (!v17)
            break;
          v1 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 8);
        }
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 528);
        if (v3)
        {
          v4 = *(_QWORD *)(v3 + 8);
          if (v4)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(v4 + 128) + 8);
            if (v5 && *(_BYTE *)(v5 + 144) == 0)
            {
              v7 = *(_QWORD *)(v5 + 296);
              if (v7)
                v1 = v7;
            }
          }
        }
      }
      v8 = (const char *)WTF::URL::host((WTF::URL *)(v1 + 736));
      v1 = v9 == 15 && (unint64_t)(v8 == "mail.google.com");
      if (v8 != "mail.google.com" && v9 == 15)
      {
        if ((v9 & 0xFF00000000) != 0)
        {
          if (*v8 == 109 && *(_QWORD *)(v8 + 1) == 0x676F6F672E6C6961)
            return *(_QWORD *)(v8 + 7) == 0x6D6F632E656C676FLL;
          return 0;
        }
        if (*(_WORD *)v8 != 109)
          return 0;
        v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 2), (int16x8_t)xmmword_1969F5AC0);
        v12.i16[0] = vminvq_u16(v12);
        v1 = v12.u32[0];
        if (v12.i32[0])
        {
          v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v8 + 14), (int16x8_t)xmmword_1969F5A90);
          v13.i16[0] = vminvq_u16(v13);
          return v13.i32[0] != 0;
        }
      }
    }
  }
  return v1;
}

uint64_t WebCore::JSEventOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v25 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v25) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v25;
          if (v14 == result)
            goto LABEL_11;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_11:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v15 = (_QWORD *)(v7 + 16 * v13);
        *v15 = -1;
        v18 = v15[1];
        v17 = v15 + 1;
        v16 = v18;
        if (v18)
        {
          *(_QWORD *)(v16 + 8) = 3;
          *v17 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v19 = *v6;
        if (*v6)
          v20 = *(_DWORD *)(v19 - 12) - 1;
        else
          v20 = -1;
        *(_DWORD *)(v19 - 12) = v20;
        v21 = *v6;
        if (*v6)
        {
          v22 = 6 * *(_DWORD *)(v21 - 12);
          v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v23 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 16) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void WebCore::IOSurface::setOwnershipIdentity(uint64_t a1, const WTF::MachSendRight *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v9, a2);
  WTF::MachSendRight::operator=();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v9);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_DWORD *)a2;
  v6 = IOSurfaceSetOwnershipIdentity();
  if (v6)
  {
    v7 = qword_1ECE7C2E8;
    v8 = v6;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C2E8, OS_LOG_TYPE_ERROR))
    {
      v9 = 134218496;
      v10 = v4;
      v11 = 1024;
      v12 = v5;
      v13 = 1024;
      v14 = v8;
      _os_log_error_impl(&dword_1940B8000, v7, OS_LOG_TYPE_ERROR, "IOSurface::setOwnershipIdentity: Failed to claim ownership of IOSurface %p, task id token: %d, error: %d", (uint8_t *)&v9, 0x18u);
    }
  }
}

void WebCore::ScriptExecutionContext::setCrossOriginMode(WebCore::Performance *this)
{
  atomic_store(this, WebCore::globalCrossOriginMode);
  if ((_DWORD)this)
    WebCore::Performance::allowHighPrecisionTime(this);
}

uint64_t WebCore::SettingsBase::hiddenPageCSSAnimationSuspensionEnabledChanged(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (v1)
  {
    this = *(_QWORD *)(v1 + 8);
    if (this)
      return WebCore::Page::hiddenPageCSSAnimationSuspensionStateChanged(this);
  }
  return this;
}

WTF::MonotonicTime *WebCore::SettingsBase::hiddenPageDOMTimerThrottlingStateChanged(WTF::MonotonicTime *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    this = *(WTF::MonotonicTime **)(v1 + 8);
    if (this)
      return WebCore::Page::hiddenPageDOMTimerThrottlingStateChanged(this);
  }
  return this;
}

WebCore::Page *WebCore::SettingsBase::storageBlockingPolicyChanged(WebCore::Page *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    this = *(WebCore::Page **)(v1 + 8);
    if (this)
      return (WebCore::Page *)WebCore::Page::storageBlockingStateChanged(this);
  }
  return this;
}

WTF *WebCore::Page::updateRendering(WebCore::Page *this)
{
  WebCore::Page *v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  WTF *v6;
  char v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  WTF *v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  WTF *v90;
  WTF *v91;
  WTF *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  WTF *v112;
  void *v113;
  WebCore::LocalFrameView *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  WTF *v118;
  WTF *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  WTF *result;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  unsigned __int8 **v131;
  void *v132;
  WTF *v133;
  WTF *v134;
  uint64_t v135;
  WTF *v136;
  WTF *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  _QWORD *v147;
  void *v148;
  uint64_t v149;
  int v150;
  int v151;
  _BOOL4 v152;
  void *v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  WTF *v161;
  WTF *v162;
  unsigned int v163;
  unsigned int v164;
  WTF *v165;
  WTF *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  int i;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v199;
  BOOL v200;
  BOOL v201;
  WTF::StringImpl *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  __int128 v210;
  WTF *v211;
  int v212;
  unsigned int *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF **v219;
  WTF **v220;
  uint64_t v221;
  WTF *v222;
  WTF *v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  WTF *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  __int128 v238;
  const void *v239;
  unsigned int *v240;
  unsigned int v241;
  _QWORD *v242;
  WTF *v243;
  WTF *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF *v249;
  void *v250;
  uint64_t v251;
  WTF *v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  unint64_t v256;
  WebCore::TextRecognitionResult *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  WTF *v261;
  unsigned int **v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int *v271;
  unsigned int v272;
  unsigned int v273;
  _BOOL4 v274;
  uint64_t v275;
  WTF *v276;
  uint64_t v277;
  unint64_t v278;
  unsigned __int8 v279;
  WTF *v280[2];
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const void *v285;
  WTF *v286;
  __int128 v287;

  v1 = this;
  v2 = *((unsigned int *)this + 279);
  if (!(_DWORD)v2)
    *((_DWORD *)this + 282) = 0;
  v3 = (_QWORD *)((char *)this + 1104);
  if ((_DWORD)v2 == *((_DWORD *)this + 278))
  {
    this = (WebCore::Page *)WTF::Vector<WTF::OptionSet<WebCore::RenderingUpdateStep>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::OptionSet<WebCore::RenderingUpdateStep> const&>((uint64_t)this + 1104);
    v4 = *((_DWORD *)v1 + 279);
  }
  else
  {
    *(_DWORD *)(*((_QWORD *)this + 138) + 4 * v2) = 17694719;
    v4 = *((_DWORD *)this + 279) + 1;
    *((_DWORD *)this + 279) = v4;
  }
  if (v4 < 2)
  {
    WTF::MonotonicTime::now(this);
    *((_QWORD *)v1 + 211) = v5;
    v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v6 = off_1E3400908;
    *((_QWORD *)v6 + 1) = v1;
    v280[0] = v6;
    WebCore::Page::forEachWindowEventLoop((uint64_t)v1, (WTF::StringImpl *)v280);
    (*(void (**)(WTF *))(*(_QWORD *)v6 + 8))(v6);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 6) + 16) + 1352))(*(_QWORD *)(*((_QWORD *)v1 + 6) + 16));
    if ((v7 & 1) == 0)
      kdebug_trace();
    WebCore::Page::layoutIfNeeded((uint64_t)v1, 0);
    v8 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = off_1E3400930;
    v280[0] = v8;
    v9 = *((unsigned int *)v1 + 279);
    if (!(_DWORD)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1942560D0);
    }
    v10 = v8;
    *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v9 - 4) &= ~0x800000u;
    WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
    (*(void (**)(WTF *))(*(_QWORD *)v10 + 8))(v10);
    v11 = WebCore::Page::scrollingCoordinator(v1);
    if (!v11)
    {
LABEL_26:
      v276 = 0;
      v277 = 0;
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v24 = off_1E3400958;
      v24[1] = &v276;
      *(_QWORD *)&v287 = v24;
      v25 = *((_QWORD *)v1 + 20);
      v26 = (unsigned int *)(v25 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      WebCore::Page::forEachDocumentFromMainFrame(v25, &v287);
      do
      {
        v28 = __ldaxr(v26);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v26));
      if (!v29)
      {
        atomic_store(1u, v26);
        v129 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v129 = off_1E31FE290;
        *((_QWORD *)v129 + 1) = v26;
        v280[0] = v129;
        WTF::ensureOnMainThread();
        v130 = v280[0];
        v280[0] = 0;
        if (v130)
          (*(void (**)(WTF *))(*(_QWORD *)v130 + 8))(v130);
      }
      if ((_QWORD)v287)
        (*(void (**)(_QWORD))(*(_QWORD *)v287 + 8))(v287);
      v30 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = off_1E3400980;
      v280[0] = v30;
      v31 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v31)
      {
        __break(0xC471u);
        JUMPOUT(0x1942560D8);
      }
      v32 = v30;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v31 - 4) &= ~0x10000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v32 + 8))(v32);
      v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = off_1E34009A8;
      v280[0] = v33;
      v34 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1942560E0);
      }
      v35 = v33;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v34 - 4) &= ~1u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v35 + 8))(v35);
      v36 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = off_1E34009D0;
      v280[0] = v36;
      v37 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v37)
      {
        __break(0xC471u);
        JUMPOUT(0x1942560E8);
      }
      v38 = v36;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v37 - 4) &= ~2u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v38 + 8))(v38);
      v39 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v39 = off_1E34009F8;
      v280[0] = v39;
      v40 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v40)
      {
        __break(0xC471u);
        JUMPOUT(0x1942560F0);
      }
      v41 = v39;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v40 - 4) &= ~4u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v41 + 8))(v41);
      v42 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v42 = off_1E3400A20;
      *((_QWORD *)v42 + 1) = v1;
      v280[0] = v42;
      v43 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v43)
      {
        __break(0xC471u);
        JUMPOUT(0x1942560F8);
      }
      v44 = v42;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v43 - 4) &= ~0x1000000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v44 + 8))(v44);
      v45 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v45 = off_1E3400A48;
      v280[0] = v45;
      v46 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v46)
      {
        __break(0xC471u);
        JUMPOUT(0x194256100);
      }
      v47 = v45;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v46 - 4) &= ~8u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v47 + 8))(v47);
      v48 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v48)
      {
        __break(0xC471u);
        JUMPOUT(0x194256108);
      }
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v48 - 4) &= ~0x10u;
      v49 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v49 = off_1E3400A70;
      v280[0] = v49;
      v50 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v50)
      {
        __break(0xC471u);
        JUMPOUT(0x194256110);
      }
      v51 = v49;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v50 - 4) &= ~0x20000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v51 + 8))(v51);
      v52 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v52 = off_1E3400A98;
      v280[0] = v52;
      v53 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v53)
      {
        __break(0xC471u);
        JUMPOUT(0x194256118);
      }
      v54 = v52;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v53 - 4) &= ~0x20u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v54 + 8))(v54);
      v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = off_1E3400AC0;
      v280[0] = v55;
      v56 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v56)
      {
        __break(0xC471u);
        JUMPOUT(0x194256120);
      }
      v57 = v55;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v56 - 4) &= ~0x80000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v57 + 8))(v57);
      WebCore::Page::layoutIfNeeded((uint64_t)v1, 0);
      v58 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v58 = off_1E3400AE8;
      *((_QWORD *)v58 + 1) = v1;
      v280[0] = v58;
      v59 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v59)
      {
        __break(0xC471u);
        JUMPOUT(0x194256128);
      }
      v60 = v58;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v59 - 4) &= ~0x200u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v60 + 8))(v60);
      v61 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = off_1E3400B10;
      v280[0] = v61;
      v62 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v62)
      {
        __break(0xC471u);
        JUMPOUT(0x194256130);
      }
      v63 = v61;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v62 - 4) &= ~0x100000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v63 + 8))(v63);
      v64 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v64 = off_1E3400B38;
      v280[0] = v64;
      v65 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v65)
      {
        __break(0xC471u);
        JUMPOUT(0x194256138);
      }
      v66 = v64;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v65 - 4) &= ~0x40u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v66 + 8))(v66);
      v67 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v67 = off_1E3400B60;
      v280[0] = v67;
      v68 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v68)
      {
        __break(0xC471u);
        JUMPOUT(0x194256140);
      }
      v69 = v67;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v68 - 4) &= ~0x80u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v69 + 8))(v69);
      v70 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v70 = off_1E3400B88;
      v280[0] = v70;
      v71 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v71)
      {
        __break(0xC471u);
        JUMPOUT(0x194256148);
      }
      v72 = v70;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v71 - 4) &= ~0x100u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v72 + 8))(v72);
      v73 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v73 = off_1E3400BB0;
      v280[0] = v73;
      v74 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v74)
      {
        __break(0xC471u);
        JUMPOUT(0x194256150);
      }
      v75 = v73;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v74 - 4) &= ~0x400u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v75 + 8))(v75);
      v76 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v76 = off_1E3400BD8;
      v280[0] = v76;
      v77 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v77)
      {
        __break(0xC471u);
        JUMPOUT(0x194256158);
      }
      v78 = v76;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v77 - 4) &= ~0x200000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v78 + 8))(v78);
      if (HIDWORD(v277))
      {
        v79 = v276;
        v80 = 8 * HIDWORD(v277);
        do
        {
          if (*(_QWORD *)v79)
          {
            v81 = *(_QWORD *)(*(_QWORD *)v79 + 8);
            if (v81)
            {
              v82 = *(_QWORD *)(v81 + 696);
              if (v82)
              {
                v83 = *(_DWORD *)(v82 + 24);
                *(_DWORD *)(v82 + 24) = v83 + 1;
                if (*(_BYTE *)(v82 + 288))
                  *(_BYTE *)(v82 + 288) = 0;
                if (v83)
                  *(_DWORD *)(v82 + 24) = v83;
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v82 + 72))(v82);
              }
            }
          }
          v79 = (WTF *)((char *)v79 + 8);
          v80 -= 8;
        }
        while (v80);
      }
      v84 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v84)
      {
        __break(0xC471u);
        JUMPOUT(0x194256160);
      }
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v84 - 4) &= ~0x800u;
      if (*((_QWORD *)v1 + 121))
      {
        WebCore::Page::wheelEventTestMonitor((uint64_t)v1, (unsigned __int8 ***)v280);
        v131 = (unsigned __int8 **)v280[0];
        WebCore::WheelEventTestMonitor::checkShouldFireCallbacks((uint64_t)v280[0]);
        if (v131)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WheelEventTestMonitor,(WTF::DestructionThread)0>(*v131, v132);
      }
      if (*((_BYTE *)v1 + 1020))
        ++*((_DWORD *)v1 + 254);
      WebCore::Page::layoutIfNeeded((uint64_t)v1, 8u);
      v85 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v85 = off_1E3400C00;
      v280[0] = v85;
      v86 = *((unsigned int *)v1 + 279);
      if (!(_DWORD)v86)
      {
        __break(0xC471u);
        JUMPOUT(0x194256168);
      }
      v87 = v85;
      *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v86 - 4) &= ~0x1000u;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v87 + 8))(v87);
      v88 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = off_1E3400C28;
      v280[0] = v88;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v88 + 8))(v88);
      v89 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v89 = off_1E3400C50;
      v280[0] = v89;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v89 + 8))(v89);
      v90 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v90 = off_1E3400C78;
      v280[0] = v90;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v90 + 8))(v90);
      v91 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v91 = off_1E3400CA0;
      v280[0] = v91;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v91 + 8))(v91);
      v92 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v92 = off_1E3400CF0;
      v280[0] = v92;
      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
      (*(void (**)(WTF *))(*(_QWORD *)v92 + 8))(v92);
      v94 = *((_QWORD *)v1 + 224);
      if (!v94 || !*(_DWORD *)(v94 - 12))
        goto LABEL_66;
      v167 = (uint64_t *)((char *)v1 + 1792);
      v168 = *(unsigned int *)(v94 - 4);
      if ((_DWORD)v168)
      {
        v169 = 80 * v168;
        v170 = (uint64_t *)*((_QWORD *)v1 + 224);
        while ((unint64_t)(*v170 + 1) <= 1)
        {
          v170 += 10;
          v169 -= 80;
          if (!v169)
            goto LABEL_194;
        }
      }
      else
      {
        v170 = (uint64_t *)*((_QWORD *)v1 + 224);
      }
      v171 = (uint64_t *)(v94 + 80 * v168);
      if (v170 == v171)
      {
LABEL_194:
        WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::clear((uint64_t)v1 + 1792, v93);
        goto LABEL_66;
      }
      v172 = *v170;
      while (!*(_QWORD *)(v172 + 8))
      {
        do
        {
          v170 += 10;
          if (v170 == v171)
            goto LABEL_194;
          v172 = *v170;
        }
        while ((unint64_t)(*v170 + 1) <= 1);
        if (v170 == v171)
          goto LABEL_194;
      }
      WTF::WeakHashMap<WebCore::HTMLElement,std::pair<WebCore::TextRecognitionResult,WebCore::IntRect>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)v1 + 1792, v93);
      v287 = 0uLL;
      v184 = *v167;
      if (*v167)
      {
        v186 = *(unsigned int *)(v184 - 4);
        v185 = v184 + 80 * v186;
        if (*(_DWORD *)(v184 - 12))
        {
          if (!(_DWORD)v186)
          {
            v187 = *v167;
            goto LABEL_220;
          }
          v275 = 80 * v186;
          v187 = *v167;
          do
          {
            if ((unint64_t)(*(_QWORD *)v187 + 1) > 1)
              goto LABEL_218;
            v187 += 80;
            v275 -= 80;
          }
          while (v275);
          v187 = v185;
LABEL_218:
          if (!v184)
          {
            v188 = 0;
            goto LABEL_221;
          }
          LODWORD(v186) = *(_DWORD *)(v184 - 4);
LABEL_220:
          v188 = v184 + 80 * v186;
LABEL_221:
          if (v188 != v187)
          {
            do
            {
              if (*(_QWORD *)(*(_QWORD *)v187 + 8))
                goto LABEL_230;
              v189 = v187 + 80;
              v187 = v185;
              if (v189 != v185)
              {
                v187 = v189;
                do
                {
                  if ((unint64_t)(*(_QWORD *)v187 + 1) > 1)
                    goto LABEL_228;
                  v187 += 80;
                }
                while (v187 != v185);
                v187 = v185;
              }
LABEL_228:
              ;
            }
            while (v187 != v188);
            v187 = v188;
          }
LABEL_230:
          if (v184)
            v190 = v184 + 80 * *(unsigned int *)(v184 - 4);
          else
            v190 = 0;
          if (v187 == v190)
            goto LABEL_66;
          v191 = 0;
          v192 = 0;
          while (1)
          {
            v193 = *(_QWORD *)(*(_QWORD *)v187 + 8);
            v194 = *(_DWORD *)(v193 + 24) + 2;
            *(_DWORD *)(v193 + 24) = v194;
            if ((*(_BYTE *)(v193 + 22) & 8) != 0 && (*(_QWORD *)(v193 + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v193 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194255FD8);
              }
              if ((*(_BYTE *)((*(_QWORD *)(v193 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3
                && (*(_BYTE *)((*(_QWORD *)(v193 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
              {
                v199 = WebCore::ImageOverlay::containerRect((WebCore::ImageOverlay *)v193, v93);
                v200 = *(_DWORD *)(v187 + 64) == (_DWORD)v199 && *(_DWORD *)(v187 + 68) == HIDWORD(v199);
                if (!v200
                  || (*(_DWORD *)(v187 + 72) == (_DWORD)v93
                    ? (v201 = *(_DWORD *)(v187 + 76) == HIDWORD(v93))
                    : (v201 = 0),
                      !v201))
                {
                  *(_QWORD *)(v187 + 64) = v199;
                  *(_QWORD *)(v187 + 72) = v93;
                  v280[0] = (WTF *)v193;
                  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v280[1], (uint64_t *)(v187 + 8));
                  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v282, (uint64_t *)(v187 + 24));
                  v203 = *(unsigned int *)(v187 + 52);
                  v284 = 0;
                  LODWORD(v285) = 0;
                  HIDWORD(v285) = v203;
                  if ((_DWORD)v203)
                  {
                    if (v203 >= 0x6666667)
                    {
LABEL_408:
                      __break(0xC471u);
                      JUMPOUT(0x194255F94);
                    }
                    v204 = 40 * v203;
                    v205 = WTF::fastMalloc((WTF *)(40 * v203));
                    LODWORD(v285) = (v204 & 0xFFFFFFF8) / 0x28;
                    v284 = v205;
                    v206 = *(_DWORD *)(v187 + 52);
                    if (v206)
                    {
                      v207 = *(_QWORD *)(v187 + 40);
                      v208 = v207 + 40 * v206;
                      do
                      {
                        v209 = *(_DWORD **)v207;
                        if (*(_QWORD *)v207)
                          *v209 += 2;
                        *(_QWORD *)v205 = v209;
                        v210 = *(_OWORD *)(v207 + 8);
                        *(_OWORD *)(v205 + 24) = *(_OWORD *)(v207 + 24);
                        *(_OWORD *)(v205 + 8) = v210;
                        v207 += 40;
                        v205 += 40;
                      }
                      while (v207 != v208);
                    }
                  }
                  v211 = *(WTF **)(v187 + 56);
                  v286 = v211;
                  if (v211)
                    CFRetain(v211);
                  v212 = HIDWORD(v287);
                  if (HIDWORD(v287) == DWORD2(v287))
                  {
                    v213 = WTF::Vector<std::pair<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,WebCore::TextRecognitionResult>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v287, HIDWORD(v287) + 1, (unint64_t)v280);
                    v212 = HIDWORD(v287);
                    v192 = (uint64_t *)v287;
                    v214 = v287 + ((unint64_t)HIDWORD(v287) << 6);
                    v215 = *(_QWORD *)v213;
                    *(_QWORD *)v213 = 0;
                    *(_QWORD *)(v214 + 8) = 0;
                    *(_QWORD *)(v214 + 16) = 0;
                    *(_QWORD *)v214 = v215;
                    v216 = *((_QWORD *)v213 + 1);
                    *((_QWORD *)v213 + 1) = 0;
                    *(_QWORD *)(v214 + 8) = v216;
                    LODWORD(v216) = v213[4];
                    v213[4] = 0;
                    *(_DWORD *)(v214 + 16) = v216;
                    LODWORD(v216) = v213[5];
                    v213[5] = 0;
                    *(_DWORD *)(v214 + 20) = v216;
                    *(_QWORD *)(v214 + 24) = 0;
                    *(_QWORD *)(v214 + 32) = 0;
                    v217 = *((_QWORD *)v213 + 3);
                    *((_QWORD *)v213 + 3) = 0;
                    *(_QWORD *)(v214 + 24) = v217;
                    LODWORD(v217) = v213[8];
                    v213[8] = 0;
                    *(_DWORD *)(v214 + 32) = v217;
                    LODWORD(v217) = v213[9];
                    v213[9] = 0;
                    *(_DWORD *)(v214 + 36) = v217;
                    *(_QWORD *)(v214 + 40) = 0;
                    *(_QWORD *)(v214 + 48) = 0;
                    v218 = *((_QWORD *)v213 + 5);
                    *((_QWORD *)v213 + 5) = 0;
                    *(_QWORD *)(v214 + 40) = v218;
                    LODWORD(v218) = v213[12];
                    v213[12] = 0;
                    *(_DWORD *)(v214 + 48) = v218;
                    LODWORD(v218) = v213[13];
                    v213[13] = 0;
                    *(_DWORD *)(v214 + 52) = v218;
                    v219 = (WTF **)(v214 + 56);
                    v220 = (WTF **)(v213 + 14);
                  }
                  else
                  {
                    v192 = (uint64_t *)v287;
                    v221 = v287 + ((unint64_t)HIDWORD(v287) << 6);
                    v222 = v280[0];
                    v280[0] = 0;
                    *(_QWORD *)(v221 + 8) = 0;
                    *(_QWORD *)(v221 + 16) = 0;
                    *(_QWORD *)v221 = v222;
                    v223 = v280[1];
                    v280[1] = 0;
                    *(_QWORD *)(v221 + 8) = v223;
                    LODWORD(v223) = v281;
                    LODWORD(v281) = 0;
                    *(_DWORD *)(v221 + 16) = (_DWORD)v223;
                    LODWORD(v223) = HIDWORD(v281);
                    HIDWORD(v281) = 0;
                    *(_DWORD *)(v221 + 20) = (_DWORD)v223;
                    *(_QWORD *)(v221 + 24) = 0;
                    *(_QWORD *)(v221 + 32) = 0;
                    v224 = v282;
                    v282 = 0;
                    *(_QWORD *)(v221 + 24) = v224;
                    LODWORD(v224) = v283;
                    LODWORD(v283) = 0;
                    *(_DWORD *)(v221 + 32) = v224;
                    LODWORD(v224) = HIDWORD(v283);
                    HIDWORD(v283) = 0;
                    *(_DWORD *)(v221 + 36) = v224;
                    *(_QWORD *)(v221 + 40) = 0;
                    *(_QWORD *)(v221 + 48) = 0;
                    v225 = v284;
                    v284 = 0;
                    *(_QWORD *)(v221 + 40) = v225;
                    LODWORD(v225) = (_DWORD)v285;
                    LODWORD(v285) = 0;
                    *(_DWORD *)(v221 + 48) = v225;
                    LODWORD(v225) = HIDWORD(v285);
                    HIDWORD(v285) = 0;
                    *(_DWORD *)(v221 + 52) = v225;
                    v219 = (WTF **)(v221 + 56);
                    v220 = &v286;
                  }
                  v226 = *v220;
                  *v220 = 0;
                  *v219 = v226;
                  v191 = v212 + 1;
                  HIDWORD(v287) = v212 + 1;
                  WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)&v280[1], v202);
                  v227 = v280[0];
                  v280[0] = 0;
                  if (!v227)
                    goto LABEL_237;
                  if (*((_DWORD *)v227 + 6) != 2)
                  {
                    *((_DWORD *)v227 + 6) -= 2;
                    goto LABEL_237;
                  }
                  if ((*((_WORD *)v227 + 15) & 0x400) != 0)
                    goto LABEL_237;
                  goto LABEL_287;
                }
                v194 = *(_DWORD *)(v193 + 24);
              }
            }
            v195 = v194 - 2;
            if (v195)
            {
              *(_DWORD *)(v193 + 24) = v195;
            }
            else if ((*(_WORD *)(v193 + 30) & 0x400) == 0)
            {
              v227 = (WTF *)v193;
LABEL_287:
              WebCore::Node::removedLastRef(v227, v93);
            }
LABEL_237:
            v196 = v185;
            if (v187 + 80 != v185)
            {
              v196 = v187 + 80;
              while ((unint64_t)(*(_QWORD *)v196 + 1) <= 1)
              {
                v196 += 80;
                if (v196 == v185)
                {
                  v196 = v185;
                  break;
                }
              }
            }
            v187 = v188;
            if (v196 != v188)
            {
              v187 = v196;
              if (!*(_QWORD *)(*(_QWORD *)v196 + 8))
              {
                while (1)
                {
                  v197 = v187 + 80;
                  v187 = v185;
                  if (v197 != v185)
                  {
                    v187 = v197;
                    while ((unint64_t)(*(_QWORD *)v187 + 1) <= 1)
                    {
                      v187 += 80;
                      if (v187 == v185)
                      {
                        v187 = v185;
                        break;
                      }
                    }
                  }
                  if (v187 == v188)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)v187 + 8))
                    goto LABEL_244;
                }
                v187 = v188;
              }
            }
LABEL_244:
            ++*((_DWORD *)v1 + 450);
            if (v187 == v190)
            {
              if (v191)
              {
                v228 = &v192[8 * (unint64_t)v191];
                do
                {
                  v229 = *(_QWORD *)(*(_QWORD *)(*v192 + 40) + 8);
                  *(_DWORD *)(v229 + 24) += 2;
                  v230 = WebCore::Document::eventLoop((WebCore::Document *)v229, v93);
                  ++*(_DWORD *)(v230 + 8);
                  WTF::Vector<WebCore::TextRecognitionLineData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v280, v192 + 1);
                  WTF::Vector<WebCore::TextRecognitionDataDetector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v281, v192 + 3);
                  v231 = *((unsigned int *)v192 + 13);
                  v283 = 0;
                  LODWORD(v284) = 0;
                  HIDWORD(v284) = v231;
                  if ((_DWORD)v231)
                  {
                    if (v231 >= 0x6666667)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194256288);
                    }
                    v232 = 40 * v231;
                    v233 = WTF::fastMalloc((WTF *)(40 * v231));
                    LODWORD(v284) = (v232 & 0xFFFFFFF8) / 0x28;
                    v283 = v233;
                    v234 = *((_DWORD *)v192 + 13);
                    if (v234)
                    {
                      v235 = v192[5];
                      v236 = v235 + 40 * v234;
                      do
                      {
                        v237 = *(_DWORD **)v235;
                        if (*(_QWORD *)v235)
                          *v237 += 2;
                        *(_QWORD *)v233 = v237;
                        v238 = *(_OWORD *)(v235 + 8);
                        *(_OWORD *)(v233 + 24) = *(_OWORD *)(v235 + 24);
                        *(_OWORD *)(v233 + 8) = v238;
                        v235 += 40;
                        v233 += 40;
                      }
                      while (v235 != v236);
                    }
                  }
                  v239 = (const void *)v192[7];
                  v285 = v239;
                  if (v239)
                    CFRetain(v239);
                  v240 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(*v192);
                  if (v240)
                  {
                    do
                      v241 = __ldaxr(v240);
                    while (__stlxr(v241 + 1, v240));
                  }
                  v286 = (WTF *)v240;
                  v242 = (_QWORD *)WTF::fastMalloc((WTF *)0x48);
                  *v242 = off_1E3401498;
                  v243 = v280[0];
                  v280[0] = 0;
                  v242[1] = v243;
                  v244 = v280[1];
                  v280[1] = 0;
                  v242[2] = v244;
                  v245 = v281;
                  v281 = 0;
                  v242[3] = v245;
                  v246 = v282;
                  v282 = 0;
                  v242[4] = v246;
                  v247 = v283;
                  v283 = 0;
                  v242[5] = v247;
                  v248 = v284;
                  v284 = 0;
                  v242[6] = v248;
                  v242[7] = v285;
                  v249 = v286;
                  v285 = 0;
                  v286 = 0;
                  v242[8] = v249;
                  v278 = (unint64_t)v242;
                  WebCore::EventLoopTaskGroup::queueTask(v230, 25, (uint64_t *)&v278);
                  v251 = v278;
                  v278 = 0;
                  if (v251)
                    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
                  v252 = v286;
                  v286 = 0;
                  if (v252)
                  {
                    do
                    {
                      v253 = __ldaxr((unsigned int *)v252);
                      v254 = v253 - 1;
                    }
                    while (__stlxr(v254, (unsigned int *)v252));
                    if (!v254)
                    {
                      atomic_store(1u, (unsigned int *)v252);
                      v260 = *((unsigned int *)v252 + 7);
                      if ((_DWORD)v260)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v252 + 2), (WTF::StringImpl *)(*((_QWORD *)v252 + 2) + 32 * v260));
                      v261 = (WTF *)*((_QWORD *)v252 + 2);
                      if (v261)
                      {
                        *((_QWORD *)v252 + 2) = 0;
                        *((_DWORD *)v252 + 6) = 0;
                        WTF::fastFree(v261, v250);
                      }
                      WTF::fastFree(v252, v250);
                    }
                  }
                  WebCore::TextRecognitionResult::~TextRecognitionResult((WebCore::TextRecognitionResult *)v280, (WTF::StringImpl *)v250);
                  v255 = *(_DWORD *)(v230 + 8);
                  if (!v255)
                    goto LABEL_408;
                  *(_DWORD *)(v230 + 8) = v255 - 1;
                  if (v229)
                  {
                    if (*(_DWORD *)(v229 + 24) == 2)
                    {
                      if ((*(_WORD *)(v229 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v229, v93);
                    }
                    else
                    {
                      *(_DWORD *)(v229 + 24) -= 2;
                    }
                  }
                  v192 += 8;
                }
                while (v192 != v228);
                v192 = (uint64_t *)v287;
                if (HIDWORD(v287))
                {
                  v256 = (unint64_t)HIDWORD(v287) << 6;
                  v257 = (WebCore::TextRecognitionResult *)(v287 + 8);
                  do
                  {
                    WebCore::TextRecognitionResult::~TextRecognitionResult(v257, v93);
                    v258 = *((_QWORD *)v257 - 1);
                    *((_QWORD *)v257 - 1) = 0;
                    if (v258)
                    {
                      if (*(_DWORD *)(v258 + 24) == 2)
                      {
                        if ((*(_WORD *)(v258 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v258, v93);
                      }
                      else
                      {
                        *(_DWORD *)(v258 + 24) -= 2;
                      }
                    }
                    v257 = (WebCore::TextRecognitionResult *)((char *)v257 + 64);
                    v256 -= 64;
                  }
                  while (v256);
                  v192 = (uint64_t *)v287;
                }
              }
              if (v192)
              {
                *(_QWORD *)&v287 = 0;
                DWORD2(v287) = 0;
                WTF::fastFree((WTF *)v192, v93);
              }
LABEL_66:
              v95 = (WTF *)*((_QWORD *)v1 + 30);
              v280[0] = v95;
              v96 = *((unsigned int *)v1 + 63);
              LODWORD(v280[1]) = *((_DWORD *)v1 + 62);
              HIDWORD(v280[1]) = v96;
              *(_QWORD *)&v287 = 0;
              *((_QWORD *)v1 + 30) = 0;
              *((_QWORD *)&v287 + 1) = 0;
              *((_QWORD *)v1 + 31) = 0;
              WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v287, v93);
              if ((_DWORD)v96)
              {
                v139 = 16 * v96;
                v140 = (char *)v95 + 8;
                do
                {
                  if (*(_QWORD *)v140)
                  {
                    v141 = *(_QWORD *)(*(_QWORD *)v140 + 8);
                    if (v141)
                    {
                      v142 = (_QWORD *)*((_QWORD *)v140 - 1);
                      *(_DWORD *)(v141 + 24) += 4;
                      *(_QWORD *)&v287 = v141;
                      WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(v142, (uint64_t *)&v287);
                      v143 = v287;
                      *(_QWORD *)&v287 = 0;
                      if (v143)
                      {
                        if (*(_DWORD *)(v143 + 24) == 2)
                        {
                          if ((*(_WORD *)(v143 + 30) & 0x400) == 0)
                            WebCore::Node::removedLastRef((WebCore::Node *)v143, v97);
                        }
                        else
                        {
                          *(_DWORD *)(v143 + 24) -= 2;
                        }
                      }
                      if (*(_DWORD *)(v141 + 24) == 2)
                      {
                        if ((*(_WORD *)(v141 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v141, v97);
                      }
                      else
                      {
                        *(_DWORD *)(v141 + 24) -= 2;
                      }
                    }
                  }
                  v140 += 16;
                  v139 -= 16;
                }
                while (v139);
              }
              WTF::Vector<std::pair<WTF::Ref<WebCore::ValidatedFormListedElement,WTF::RawPtrTraits<WebCore::ValidatedFormListedElement>,WTF::DefaultRefDerefTraits<WebCore::ValidatedFormListedElement>>,WTF::WeakPtr<WebCore::HTMLElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v280, v97);
              if (*((_BYTE *)v1 + 1684))
              {
                v144 = *((_QWORD *)v1 + 20);
                if (v144)
                {
                  if (!*(_BYTE *)(v144 + 144))
                  {
                    v145 = (unsigned int *)(v144 + 8);
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 + 1, v145));
                    if (*(_QWORD *)(v144 + 296))
                    {
                      v280[0] = 0;
                      v280[1] = 0;
                      v147 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                      *v147 = off_1E3400D90;
                      v147[1] = v280;
                      *(_QWORD *)&v287 = v147;
                      WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), &v287);
                      (*(void (**)(_QWORD *))(*v147 + 8))(v147);
                      v149 = *(_QWORD *)(v144 + 296);
                      v150 = HIDWORD(v280[1]);
                      v151 = *(_DWORD *)(v149 + 24);
                      *(_DWORD *)(v149 + 24) = v151 + 2;
                      if (*(_BYTE *)(v149 + 3389))
                        goto LABEL_169;
                      v182 = *(_QWORD *)(v149 + 1592);
                      if (v182)
                      {
                        v183 = *(_DWORD *)(v182 + 8);
                        *(_DWORD *)(v182 + 8) = v183 + 1;
                        if (!*(_DWORD *)(v182 + 52) && !*(_DWORD *)(v182 + 36))
                        {
                          v259 = *(_QWORD *)(v182 + 56);
                          if (!v259 || !*(_DWORD *)(v259 - 12))
                          {
                            if (v183 == -1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1942561D0);
                            }
                            *(_DWORD *)(v182 + 8) = v183;
                            goto LABEL_326;
                          }
                        }
                        if (v183 == -1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194256050);
                        }
                        *(_DWORD *)(v182 + 8) = v183;
LABEL_169:
                        v152 = 1;
                      }
                      else
                      {
LABEL_326:
                        v152 = v150 != 0;
                      }
                      if (v151)
                      {
                        *(_DWORD *)(v149 + 24) = v151;
                      }
                      else if ((*(_WORD *)(v149 + 30) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)v149, v148);
                      }
                      WebCore::Page::setLoadSchedulingMode((uint64_t)v1, v152);
                      v154 = HIDWORD(v280[1]);
                      if (HIDWORD(v280[1]))
                      {
                        *((_QWORD *)&v287 + 1) = 0;
                        if (HIDWORD(v280[1]) >> 29)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1942562A8);
                        }
                        v155 = WTF::fastMalloc((WTF *)(8 * HIDWORD(v280[1])));
                        DWORD2(v287) = v154;
                        *(_QWORD *)&v287 = v155;
                        v156 = HIDWORD(v280[1]);
                        if (HIDWORD(v280[1]))
                        {
                          v157 = 0;
                          v158 = 8 * HIDWORD(v280[1]);
                          do
                          {
                            *(_QWORD *)(v155 + v157) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v280[0] + v157) + 8)
                                                                 + 384);
                            v157 += 8;
                          }
                          while (v158 != v157);
                          HIDWORD(v287) = v156;
                        }
                        v159 = WebCore::s_platformStrategies;
                        v160 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
                        if (!v160)
                        {
                          v160 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
                          *(_QWORD *)(v159 + 8) = v160;
                        }
                        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v160 + 88))(v160, &v287);
                        v161 = (WTF *)v287;
                        if ((_QWORD)v287)
                        {
                          *(_QWORD *)&v287 = 0;
                          DWORD2(v287) = 0;
                          WTF::fastFree(v161, v153);
                        }
                        if (HIDWORD(v280[1]))
                        {
                          v262 = (unsigned int **)v280[0];
                          v263 = 8 * HIDWORD(v280[1]);
                          do
                          {
                            WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v262, v153);
                            v262 = (unsigned int **)(v264 + 8);
                            v263 -= 8;
                          }
                          while (v263);
                        }
                      }
                      v162 = v280[0];
                      if (v280[0])
                      {
                        v280[0] = 0;
                        LODWORD(v280[1]) = 0;
                        WTF::fastFree(v162, v153);
                      }
                    }
                    do
                    {
                      v163 = __ldaxr(v145);
                      v164 = v163 - 1;
                    }
                    while (__stlxr(v164, v145));
                    if (!v164)
                    {
                      atomic_store(1u, v145);
                      v165 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v165 = off_1E31FE290;
                      *((_QWORD *)v165 + 1) = v145;
                      v280[0] = v165;
                      WTF::ensureOnMainThread();
                      v166 = v280[0];
                      v280[0] = 0;
                      if (v166)
                        (*(void (**)(WTF *))(*(_QWORD *)v166 + 8))(v166);
                    }
                  }
                }
              }
              v98 = *((unsigned int *)v1 + 279);
              if (!(_DWORD)v98)
              {
                __break(0xC471u);
                JUMPOUT(0x194256170);
              }
              *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v98 - 4) &= ~0x2000u;
              if (*(_BYTE *)(*((_QWORD *)v1 + 20) + 144))
                v99 = 0;
              else
                v99 = *((_QWORD *)v1 + 20);
              if (v99)
              {
                v100 = (unsigned int *)(v99 + 8);
                do
                  v101 = __ldaxr(v100);
                while (__stlxr(v101 + 1, v100));
                v102 = *(_QWORD *)(v99 + 296);
                if (v102)
                {
                  *(_DWORD *)(v102 + 24) += 2;
                  WebCore::Document::updateTouchEventRegions(v102);
                  if (*(_DWORD *)(v102 + 24) == 2)
                  {
                    if ((*(_WORD *)(v102 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v102, v103);
                  }
                  else
                  {
                    *(_DWORD *)(v102 + 24) -= 2;
                  }
                }
              }
              v104 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v104 = off_1E3400D18;
              *(_QWORD *)&v287 = v104;
              v105 = *((_QWORD *)v1 + 20);
              v106 = (unsigned int *)(v105 + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 + 1, v106));
              WebCore::Page::forEachDocumentFromMainFrame(v105, &v287);
              do
              {
                v108 = __ldaxr(v106);
                v109 = v108 - 1;
              }
              while (__stlxr(v109, v106));
              if (!v109)
              {
                atomic_store(1u, v106);
                v133 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v133 = off_1E31FE290;
                *((_QWORD *)v133 + 1) = v106;
                v280[0] = v133;
                WTF::ensureOnMainThread();
                v134 = v280[0];
                v280[0] = 0;
                if (v134)
                  (*(void (**)(WTF *))(*(_QWORD *)v134 + 8))(v134);
              }
              if ((_QWORD)v287)
                (*(void (**)(_QWORD))(*(_QWORD *)v287 + 8))(v287);
              v110 = (uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays;
              if (WebCore::DebugPageOverlays::sharedDebugOverlays)
              {
                ++*(_DWORD *)(WebCore::DebugPageOverlays::sharedDebugOverlays + 8);
                v173 = *((_QWORD *)v1 + 2);
                if (v173)
                {
                  if (*(_QWORD *)(v173 + 8))
                  {
                    v174 = *v110;
                    if (*v110)
                    {
                      v175 = *(_DWORD *)(v174 - 8);
                      v176 = (~(v173 << 32) + v173) ^ ((unint64_t)(~(v173 << 32) + v173) >> 22);
                      v177 = 9 * ((v176 + ~(v176 << 13)) ^ ((v176 + ~(v176 << 13)) >> 8));
                      v178 = (v177 ^ (v177 >> 15)) + ~((v177 ^ (v177 >> 15)) << 27);
                      v179 = v175 & ((v178 >> 31) ^ v178);
                      for (i = 1; ; ++i)
                      {
                        v181 = *(_QWORD *)(v174 + 24 * v179);
                        if (v181 != -1)
                        {
                          if (!v181)
                            goto LABEL_86;
                          if (v181 == v173)
                            break;
                        }
                        v179 = (v179 + i) & v175;
                      }
                      WebCore::DebugPageOverlays::updateRegionIfNecessary(v110, (uint64_t)v1, 0);
                      WebCore::DebugPageOverlays::updateRegionIfNecessary((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, (uint64_t)v1, 1u);
                      WebCore::DebugPageOverlays::updateRegionIfNecessary((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, (uint64_t)v1, 2u);
                      WebCore::DebugPageOverlays::updateRegionIfNecessary((uint64_t *)WebCore::DebugPageOverlays::sharedDebugOverlays, (uint64_t)v1, 3u);
                    }
                  }
                }
              }
LABEL_86:
              v111 = *((unsigned int *)v1 + 279);
              if (!(_DWORD)v111)
              {
                __break(0xC471u);
                JUMPOUT(0x194256178);
              }
              *(_DWORD *)(*((_QWORD *)v1 + 138) + 4 * v111 - 4) &= ~0x40000u;
              v112 = (WTF *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v112 = off_1E3400D40;
              v280[0] = v112;
              WebCore::Page::forEachRenderableDocument(*((unsigned int **)v1 + 20), v280);
              (*(void (**)(WTF *))(*(_QWORD *)v112 + 8))(v112);
              if (v99)
              {
                v114 = *(WebCore::LocalFrameView **)(v99 + 288);
                if (v114)
                {
                  ++*((_DWORD *)v114 + 2);
                  WebCore::LocalFrameView::notifyAllFramesThatContentAreaWillPaint(v114);
                  if (*((_DWORD *)v114 + 2) == 1)
                    (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v114 + 8))(v114);
                  else
                    --*((_DWORD *)v114 + 2);
                }
              }
              if (*((_BYTE *)v1 + 1712))
              {
LABEL_92:
                if (v99)
                {
                  v115 = (unsigned int *)(v99 + 8);
                  do
                  {
                    v116 = __ldaxr(v115);
                    v117 = v116 - 1;
                  }
                  while (__stlxr(v117, v115));
                  if (!v117)
                  {
                    atomic_store(1u, v115);
                    v136 = (WTF *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v136 = off_1E31FE290;
                    *((_QWORD *)v136 + 1) = v115;
                    v280[0] = v136;
                    WTF::ensureOnMainThread();
                    v137 = v280[0];
                    v280[0] = 0;
                    if (v137)
                      (*(void (**)(WTF *))(*(_QWORD *)v137 + 8))(v137);
                  }
                }
                if ((v7 & 1) == 0)
                  kdebug_trace();
                if (HIDWORD(v277))
                {
                  v118 = v276;
                  v119 = (WTF *)((char *)v276 + 8 * HIDWORD(v277));
                  do
                  {
                    v120 = *(_QWORD *)v118;
                    *(_QWORD *)v118 = 0;
                    if (v120)
                    {
                      do
                      {
                        v121 = __ldaxr((unsigned int *)v120);
                        v122 = v121 - 1;
                      }
                      while (__stlxr(v122, (unsigned int *)v120));
                      if (!v122)
                      {
                        atomic_store(1u, (unsigned int *)v120);
                        v127 = *(unsigned int *)(v120 + 28);
                        if ((_DWORD)v127)
                          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v120 + 16), (WTF::StringImpl *)(*(_QWORD *)(v120 + 16) + 32 * v127));
                        v128 = *(WTF **)(v120 + 16);
                        if (v128)
                        {
                          *(_QWORD *)(v120 + 16) = 0;
                          *(_DWORD *)(v120 + 24) = 0;
                          WTF::fastFree(v128, v113);
                        }
                        WTF::fastFree((WTF *)v120, v113);
                      }
                    }
                    v118 = (WTF *)((char *)v118 + 8);
                  }
                  while (v118 != v119);
                }
                result = v276;
                if (v276)
                {
                  v276 = 0;
                  LODWORD(v277) = 0;
                  return (WTF *)WTF::fastFree(result, v113);
                }
                return result;
              }
              WebCore::PageColorSampler::sampleTop((WebCore::PageColorSampler *)&v278, v1);
              if (*((unsigned __int8 *)v1 + 1712) == v279)
              {
                if (*((_BYTE *)v1 + 1712))
                {
                  v124 = *((_QWORD *)v1 + 213);
                  v125 = v278;
                  if ((v124 & 0x8000000000000) != 0)
                  {
                    if ((v278 & 0x8000000000000) == 0
                      || (*(_OWORD *)v280 = *(_OWORD *)((v124 & 0xFFFFFFFFFFFFLL) + 4),
                          v287 = *(_OWORD *)((v278 & 0xFFFFFFFFFFFFLL) + 4),
                          v274 = WebCore::operator==<float,4ul>((float *)v280, (float *)&v287),
                          v124 = *((_QWORD *)v1 + 213),
                          !v274)
                      || HIBYTE(v124) != HIBYTE(v125)
                      || BYTE6(v124) != BYTE6(v125))
                    {
LABEL_114:
                      if ((v124 & 0x8000000000000) != 0)
                      {
                        v268 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
                        do
                        {
                          v269 = __ldaxr(v268);
                          v270 = v269 - 1;
                        }
                        while (__stlxr(v270, v268));
                        if (!v270)
                        {
                          atomic_store(1u, v268);
                          WTF::fastFree((WTF *)v268, v113);
                        }
                      }
                      *((_QWORD *)v1 + 213) = v278;
                      v278 = 0;
                    }
                  }
                  else if (v124 != v278 || (v278 & 0x8000000000000) != 0)
                  {
                    goto LABEL_114;
                  }
LABEL_127:
                  if (v279)
                  {
                    if ((v278 & 0x8000000000000) != 0)
                    {
                      v265 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFLL);
                      do
                      {
                        v266 = __ldaxr(v265);
                        v267 = v266 - 1;
                      }
                      while (__stlxr(v267, v265));
                      if (!v267)
                      {
                        atomic_store(1u, v265);
                        WTF::fastFree((WTF *)v265, v113);
                      }
                    }
                  }
                }
                if (*((_BYTE *)v1 + 1712))
                  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v1 + 6) + 16) + 568))(*(_QWORD *)(*((_QWORD *)v1 + 6) + 16));
                goto LABEL_92;
              }
              if (*((_BYTE *)v1 + 1712))
              {
                v126 = *((_QWORD *)v1 + 213);
                if ((v126 & 0x8000000000000) != 0)
                {
                  v271 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v272 = __ldaxr(v271);
                    v273 = v272 - 1;
                  }
                  while (__stlxr(v273, v271));
                  if (!v273)
                  {
                    atomic_store(1u, v271);
                    WTF::fastFree((WTF *)v271, v113);
                  }
                }
                *((_BYTE *)v1 + 1712) = 0;
              }
              else
              {
                *((_QWORD *)v1 + 213) = 0;
                if (v278)
                {
                  *((_QWORD *)v1 + 213) = v278;
                  v278 = 0;
                }
                *((_BYTE *)v1 + 1712) = 1;
              }
              goto LABEL_127;
            }
          }
        }
      }
      else
      {
        v185 = 0;
        LODWORD(v186) = 0;
      }
      v187 = v185;
      v185 = v184 + 80 * v186;
      goto LABEL_218;
    }
    v12 = (_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_13:
      ++*(_QWORD *)(v13 + 8);
      v15 = __ldxr((unsigned __int8 *)v13);
      if (v15 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
LABEL_18:
          (*(void (**)(_QWORD *))(*v12 + 136))(v12);
          v17 = v12[1];
          if (__ldaxr((unsigned __int8 *)v17))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v17))
          {
LABEL_21:
            v19 = *(_QWORD *)(v17 + 8);
            v20 = v19 - 1;
            *(_QWORD *)(v17 + 8) = v19 - 1;
            if (v19 == 1)
            {
              v135 = *(_QWORD *)(v17 + 16);
              v21 = *(_QWORD *)(v17 + 24);
              *(_QWORD *)(v17 + 24) = 0;
              v22 = v135 != 0;
            }
            else
            {
              v21 = 0;
              v22 = 1;
            }
            v23 = __ldxr((unsigned __int8 *)v17);
            if (v23 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v17))
                goto LABEL_25;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v17);
LABEL_25:
            if (!v20)
            {
              if (v21)
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
              if (!v22)
                WTF::fastFree((WTF *)v17, v16);
            }
            goto LABEL_26;
          }
          MEMORY[0x19AEA534C](v17);
          goto LABEL_21;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](v13);
    goto LABEL_13;
  }
  result = (WTF *)WebCore::Page::layoutIfNeeded((uint64_t)v1, 8u);
  v138 = *((unsigned int *)v1 + 279);
  if (!(_DWORD)v138)
  {
    __break(0xC471u);
    JUMPOUT(0x194256290);
  }
  *(_DWORD *)(*v3 + 4 * v138 - 4) &= 0xFEF2C000;
  return result;
}

uint64_t WebCore::Page::forEachDocument(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 160);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = WebCore::Page::forEachDocumentFromMainFrame(v2, a2);
  do
  {
    v6 = __ldaxr(v3);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, v3));
  if (!v7)
  {
    atomic_store(1u, v3);
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E31FE290;
    v8[1] = v3;
    v9 = v8;
    WTF::ensureOnMainThread();
    result = (uint64_t)v9;
    if (v9)
      return (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  }
  return result;
}

uint64_t WebCore::Document::forEachMediaElement(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v3 = (uint64_t *)(a1 + 1856);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E33A3658;
  v4[1] = a2;
  v6 = v4;
  WTF::WeakHashSet<WebCore::HTMLMediaElement,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(v3, &v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

double WebCore::Style::Scope::didChangeStyleSheetEnvironment(WebCore::Style::Scope *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  if (!*((_QWORD *)this + 3))
  {
    v3 = *((_QWORD *)this + 39);
    if (v3)
    {
      *((_QWORD *)this + 39) = 0;
      WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::deallocateTable(v3, a2);
    }
    v4 = *((_QWORD *)this + 2);
    v5 = *(_QWORD **)(v4 + 2696);
    if (v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(*v5 + 8);
        if (v6)
          break;
        v5 = (_QWORD *)v5[2];
        if (!v5)
          goto LABEL_12;
      }
LABEL_6:
      if (*(_BYTE *)(v6 + 193))
        WebCore::Style::Scope::scheduleUpdate(*(uint64_t **)(v6 + 216), (WebCore::ShadowRoot *)1);
      while (1)
      {
        v5 = (_QWORD *)v5[2];
        if (!v5)
          break;
        v6 = *(_QWORD *)(*v5 + 8);
        if (v6)
        {
          ++*(_DWORD *)(v4 + 2712);
          goto LABEL_6;
        }
      }
      ++*(_DWORD *)(v4 + 2712);
      v4 = *((_QWORD *)this + 2);
    }
LABEL_12:
    v7 = *(WTF::StringImpl ***)(v4 + 3496);
    *(_QWORD *)(v4 + 3496) = 0;
    if (v7)
    {
      v8 = v7[5];
      v7[5] = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WebCore::Style::Scope::scheduleUpdate((uint64_t *)this, (WebCore::ShadowRoot *)1);
}

double WebCore::Style::Scope::scheduleUpdate(uint64_t *a1, WebCore::ShadowRoot *a2)
{
  unsigned int v2;
  uint64_t *v3;
  double v4;
  double result;
  WebCore::Style::Invalidator *v6;
  WebCore::Style::Resolver *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = a1;
  if ((_DWORD)a2 == 1)
  {
    v6 = (WebCore::Style::Invalidator *)a1[3];
    if (v6)
    {
      WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v6, a2);
      WebCore::Style::Scope::unshareShadowTreeResolverBeforeMutation((WebCore::Style::Scope *)v3);
    }
    if (!*((_BYTE *)v3 + 237) && !*(_BYTE *)(v3[2] + 3393))
    {
      v7 = (WebCore::Style::Resolver *)v3[4];
      v3[4] = 0;
      if (v7)
        WTF::RefCounted<WebCore::Style::Resolver>::deref(v7);
      WebCore::Style::CustomPropertyRegistry::clearRegisteredFromStylesheets((_DWORD *)v3[37], a2);
      v8 = v3[38];
      if (*(_QWORD *)v8 && *(_DWORD *)(*(_QWORD *)v8 - 12))
      {
        WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear((WTF::StringImpl ***)v3[38], a2);
        *(_BYTE *)(v8 + 8) = 1;
      }
    }
    a1 = (uint64_t *)v3[35];
    if (a1)
    {
      v3[35] = 0;
      a1 = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(a1, a2);
      v9 = v3[35];
      *((_DWORD *)v3 + 72) = 0;
      if (v9)
      {
        LODWORD(v9) = *(_DWORD *)(v9 - 12);
        if (v9 > 0x7FFFFFFE)
          LODWORD(v9) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      *((_DWORD *)v3 + 72) = 0;
    }
    *((_DWORD *)v3 + 73) = 2 * v9;
  }
  if (!*((_BYTE *)v3 + 233) || *((unsigned __int8 *)v3 + 232) < v2)
  {
    *((_WORD *)v3 + 116) = v2 | 0x100;
    if (v3[3])
      *(_BYTE *)(*(_QWORD *)(v3[2] + 1328) + 234) = 1;
  }
  if ((v3[14] & 0xFFFFFFFFFFFFLL) == 0 || (result = *(double *)((v3[14] & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v3[13] = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
    WebCore::TimerBase::setNextFireTime((uint64_t)(v3 + 10), v4 + 0.0);
  }
  return result;
}

uint64_t WebCore::Document::prepareCanvasesForDisplayOrFlushIfNeeded(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v22;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t i;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = this;
  v3 = *(_QWORD *)(this + 1816);
  if (!v3)
    goto LABEL_2;
  v17 = (uint64_t *)(this + 1816);
  v18 = *(_DWORD *)(v3 - 4);
  if (!v18)
    goto LABEL_36;
  v19 = 0;
  v20 = v18 - 1;
  do
  {
    this = v3 + 8 * v20;
    if ((unint64_t)(*(_QWORD *)this + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)this + 8))
    {
      v46 = v3;
      this = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)this, a2);
      v3 = v46;
      ++v19;
    }
  }
  while ((unint64_t)v20--);
  v3 = *v17;
  if (v19)
  {
    *(_DWORD *)(v3 - 16) += v19;
    v44 = *v17;
    if (*v17)
      v45 = *(_DWORD *)(v44 - 12);
    else
      v45 = 0;
    *(_DWORD *)(v44 - 12) = v45 - v19;
    v3 = *v17;
  }
  if (!v3)
    goto LABEL_2;
  v22 = *(_DWORD *)(v3 - 4);
  if (v22 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v22)
  {
LABEL_36:
    *(_DWORD *)(v2 + 1824) = 0;
  }
  else
  {
    this = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(v2 + 1816));
    v3 = *(_QWORD *)(v2 + 1816);
    *(_DWORD *)(v2 + 1824) = 0;
    if (!v3)
    {
LABEL_2:
      v4 = 0;
      v5 = 0;
      goto LABEL_3;
    }
  }
  v24 = *(_DWORD *)(v3 - 12);
  if (v24 >= 0x7FFFFFFF)
    v25 = -2;
  else
    v25 = 2 * v24;
  *(_DWORD *)(v2 + 1828) = v25;
  v26 = *(unsigned int *)(v3 - 12);
  if (!(_DWORD)v26)
  {
    v5 = 0;
    v27 = *(unsigned int *)(v3 - 4);
    v28 = v3 + 8 * v27;
LABEL_48:
    v30 = v28;
    goto LABEL_49;
  }
  if (v26 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  this = WTF::fastMalloc((WTF *)(8 * v26));
  v5 = (WTF *)this;
  v3 = *v17;
  if (!*v17)
  {
    v4 = 0;
    goto LABEL_3;
  }
  v27 = *(unsigned int *)(v3 - 4);
  v28 = v3 + 8 * v27;
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_48;
  if ((_DWORD)v27)
  {
    v29 = 0;
    while ((unint64_t)(*(_QWORD *)(v3 + v29) + 1) <= 1)
    {
      v29 += 8;
      if (8 * v27 == v29)
        goto LABEL_48;
    }
    v30 = v3 + v29;
  }
  else
  {
    v27 = 0;
    v30 = *v17;
  }
LABEL_49:
  v31 = v3 + 8 * v27;
  if (v31 != v30)
  {
    while (!*(_QWORD *)(*(_QWORD *)v30 + 8))
    {
      v48 = v30 + 8;
      v30 = v28;
      if (v48 != v28)
      {
        v30 = v48;
        while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
        {
          v30 += 8;
          if (v30 == v28)
          {
            v30 = v28;
            break;
          }
        }
      }
      if (v30 == v31)
      {
        v30 = v31;
        break;
      }
    }
  }
  if (v30 == v28)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v32 = *(_QWORD *)(*(_QWORD *)v30 + 8);
      this = *(_QWORD *)(v32 + 16);
      if (this)
        goto LABEL_114;
      this = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)this = 1;
      *(_QWORD *)(this + 8) = v32;
      v43 = *(unsigned int **)(v32 + 16);
      *(_QWORD *)(v32 + 16) = this;
      if (!v43)
        goto LABEL_114;
      do
      {
        v35 = __ldaxr(v43);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v43));
      if (!v36)
      {
        atomic_store(1u, v43);
        WTF::fastFree((WTF *)v43, a2);
      }
      this = *(_QWORD *)(v32 + 16);
      if (this)
      {
LABEL_114:
        do
          v33 = __ldaxr((unsigned int *)this);
        while (__stlxr(v33 + 1, (unsigned int *)this));
      }
      *((_QWORD *)v5 + v4) = this;
      v34 = v28;
      if (v30 + 8 != v28)
      {
        v34 = v30 + 8;
        while ((unint64_t)(*(_QWORD *)v34 + 1) <= 1)
        {
          v34 += 8;
          if (v34 == v28)
          {
            v34 = v28;
            break;
          }
        }
      }
      v30 = v31;
      if (v34 != v31)
      {
        v30 = v34;
        if (!*(_QWORD *)(*(_QWORD *)v34 + 8))
        {
          while (1)
          {
            v47 = v30 + 8;
            v30 = v28;
            if (v47 != v28)
            {
              v30 = v47;
              while ((unint64_t)(*(_QWORD *)v30 + 1) <= 1)
              {
                v30 += 8;
                if (v30 == v28)
                {
                  v30 = v28;
                  break;
                }
              }
            }
            if (v30 == v31)
              break;
            if (*(_QWORD *)(*(_QWORD *)v30 + 8))
              goto LABEL_62;
          }
          v30 = v31;
        }
      }
LABEL_62:
      ++v4;
      ++*(_DWORD *)(v2 + 1824);
    }
    while (v30 != v28);
    v3 = *v17;
  }
  if (v3)
  {
    *v17 = 0;
    v37 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v37)
    {
      for (i = 0; i != v37; ++i)
      {
        v39 = *(unsigned int **)(v3 + 8 * i);
        if (v39 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v39)
          {
            do
            {
              v40 = __ldaxr(v39);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, v39));
            if (!v41)
            {
              atomic_store(1u, v39);
              v42 = v3;
              WTF::fastFree((WTF *)v39, a2);
              v3 = v42;
            }
          }
        }
      }
    }
    this = WTF::fastFree((WTF *)(v3 - 16), a2);
    v6 = *(_QWORD *)(v2 + 1816);
    *(_DWORD *)(v2 + 1824) = 0;
    if (v6)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE)
        LODWORD(v6) = 0x7FFFFFFF;
    }
    goto LABEL_4;
  }
LABEL_3:
  LODWORD(v6) = 0;
  *(_DWORD *)(v2 + 1824) = 0;
LABEL_4:
  *(_DWORD *)(v2 + 1828) = 2 * v6;
  if (v4)
  {
    v7 = v4;
    v8 = (uint64_t *)((char *)v5 + 8 * v4);
    v9 = 8 * v7;
    v10 = v5;
    do
    {
      if (*(_QWORD *)v10)
      {
        v11 = *(_QWORD **)(*(_QWORD *)v10 + 8);
        if (v11)
        {
          *((_BYTE *)v11 + 24) = 0;
          if ((*(unsigned int (**)(_QWORD *))(*v11 + 152))(v11))
            (*(void (**)(_QWORD *))(*v11 + 160))(v11);
          v12 = (_QWORD *)v11[4];
          if ((*(unsigned int (**)(_QWORD *))(*v12 + 32))(v12))
          {
            v13 = v12[17];
            if (v13)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13))
                WebCore::HTMLCanvasElement::prepareForDisplay((WebCore::HTMLCanvasElement *)(v12 - 14));
            }
          }
        }
      }
      v10 = (WTF *)((char *)v10 + 8);
      v9 -= 8;
    }
    while (v9);
    v14 = (uint64_t *)v5;
    do
    {
      this = *v14;
      *v14 = 0;
      if (this)
      {
        do
        {
          v15 = __ldaxr((unsigned int *)this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, (unsigned int *)this));
        if (!v16)
        {
          atomic_store(1u, (unsigned int *)this);
          this = WTF::fastFree((WTF *)this, a2);
        }
      }
      ++v14;
    }
    while (v14 != v8);
  }
  if (v5)
    return WTF::fastFree(v5, a2);
  return this;
}

double WebCore::Document::enqueuePaintTimingEntryIfNeeded(WebCore::LocalDOMWindow **this, WTF::StringImpl *a2)
{
  WebCore::SecurityOrigin *v3;
  WebCore::SecurityOrigin *v4;
  WTF::StringImpl *v5;
  const WebCore::SecurityOrigin *v6;
  WebCore::LocalFrameView *v7;
  double result;
  WebCore::LocalDOMWindow *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::LocalDOMWindow *v14;
  WebCore::Performance *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  WebCore::Performance *v19;
  os_signpost_id_t v20;
  os_signpost_id_t v21;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  WebCore::Document *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 3417))
  {
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(this + 24), a2);
    v4 = v3;
    WebCore::Document::topOrigin((WebCore::Document *)this, v5);
    if (WebCore::SecurityOrigin::isSameOriginDomain(v4, v6))
    {
      if (this[87])
      {
        v9 = this[66];
        if (v9)
        {
          v10 = *((_QWORD *)v9 + 1);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 288);
            if (v11)
            {
              if (*(_BYTE *)(v11 + 1375))
              {
                v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 344) + 8) + 328) + 296);
                if (v12)
                  v12 = *(_QWORD *)(v12 + 1944);
                if ((*(_QWORD *)(v11 + 384) & 0xFFFFFFFFFFFFLL) == 0
                  || (result = *(double *)((*(_QWORD *)(v11 + 384) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
                {
                  if (!v12 || (*(_BYTE *)(v12 + 20) & 0xF8) == 0)
                  {
                    v13 = *(_QWORD *)(v11 + 464);
                    if ((!v13 || !*(_QWORD *)(v13 + 8))
                      && (!*(_DWORD *)(v11 + 488) || !*(_BYTE *)(v11 + 478))
                      && (*(_DWORD *)(v11 + 1156) || *(_DWORD *)(v11 + 1160))
                      && WebCore::ContentfulPaintChecker::qualifiesForContentfulPaint((WebCore::ContentfulPaintChecker *)v11, v7))
                    {
                      if (kdebug_is_enabled())
                      {
                        v16 = *MEMORY[0x1E0CBE150];
                        v17 = WTFSignpostLogHandle();
                        v18 = v17;
                        if (v16)
                        {
                          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                          {
                            v22[0] = 67109888;
                            v22[1] = 0;
                            v23 = 1024;
                            v24 = 1;
                            v25 = 2048;
                            v26 = (WebCore::Document *)this;
                            v27 = 2048;
                            v28 = WTFCurrentContinuousTime();
                            _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu firstContentfulPaint", (uint8_t *)v22, 0x22u);
                          }
                        }
                        else
                        {
                          v20 = os_signpost_id_make_with_pointer(v17, this);
                          if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v21 = v20;
                            if (os_signpost_enabled(v18))
                            {
                              LOWORD(v22[0]) = 0;
                              _os_signpost_emit_with_name_impl(&dword_1940B8000, v18, OS_SIGNPOST_EVENT, v21, "NavigationAndPaintTiming", "firstContentfulPaint", (uint8_t *)v22, 2u);
                            }
                          }
                        }
                      }
                      v14 = this[87];
                      if (v14)
                      {
                        ++*((_DWORD *)v14 + 6);
                        v15 = (WebCore::Performance *)WebCore::LocalDOMWindow::performance(v14);
                        WebCore::Performance::reportFirstContentfulPaint(v15);
                        if (*((_DWORD *)v14 + 6) == 1)
                          (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v14 + 72))(v14);
                        else
                          --*((_DWORD *)v14 + 6);
                      }
                      else
                      {
                        v19 = (WebCore::Performance *)WebCore::LocalDOMWindow::performance(0);
                        WebCore::Performance::reportFirstContentfulPaint(v19);
                      }
                      *((_BYTE *)this + 3417) = 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

WTF *WebCore::Document::updateHighlightPositions(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF *result;
  uint64_t v6;
  WTF *v7;
  unsigned int **v8;
  unsigned int **v9;
  uint64_t *v10;
  char v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  _BYTE v33[32];
  _BYTE v34[64];
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  WTF *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 0;
  v2 = *((_QWORD *)this + 308);
  if (v2)
    WebCore::Document::collectHighlightRangesFromRegister((uint64_t)&v39, v2);
  v3 = *((_QWORD *)this + 309);
  if (v3)
    WebCore::Document::collectHighlightRangesFromRegister((uint64_t)&v39, v3);
  v4 = (void *)*((_QWORD *)this + 310);
  if (v4)
    WebCore::Document::collectHighlightRangesFromRegister((uint64_t)&v39, (uint64_t)v4);
  result = v39;
  if (HIDWORD(v40))
  {
    v6 = 8 * HIDWORD(v40);
    v7 = v39;
    v8 = (unsigned int **)v39;
    v9 = (unsigned int **)((char *)v39 + v6);
    do
    {
      if (*(_QWORD *)v7)
      {
        v10 = *(uint64_t **)(*(_QWORD *)v7 + 8);
        if (v10)
        {
          ++*(_DWORD *)v10;
          WebCore::makeSimpleRange(v10[2], (uint64_t)&v23);
          WebCore::VisibleSelection::VisibleSelection((uint64_t)v34, (uint64_t)&v23, 1, 0);
          WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)&v23);
          WebCore::makeSimpleRange(v10[2], (uint64_t)v33);
          v12 = v38 == 2 || v37 != 0;
          WebCore::VisiblePosition::VisiblePosition((uint64_t)&v23, (WebCore::VisiblePosition *)&v35, v12);
          v13 = v23;
          if (v23)
            *(_DWORD *)(v23 + 24) += 2;
          v30 = v13;
          v31 = v24;
          v32 = v25;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v23);
          v15 = v38 != 2 && v37 != 0;
          WebCore::VisiblePosition::VisiblePosition((uint64_t)&v23, (WebCore::VisiblePosition *)&v36, v15);
          v16 = v23;
          if (v23)
            *(_DWORD *)(v23 + 24) += 2;
          v27 = v16;
          v28 = v24;
          v29 = v25;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v23);
          if (*(_QWORD *)v7 && *(_QWORD *)(*(_QWORD *)v7 + 8))
          {
            WebCore::makeSimpleRange<WebCore::Position &,WebCore::Position &>(v10 + 3, v10 + 5, (uint64_t)&v23);
            if (v26)
            {
              WebCore::StaticRange::create((WebCore::StaticRange *)&v23, &v22);
              WebCore::Highlight::repaintRange((uint64_t)v22);
              v17 = v22;
              v22 = 0;
              if (v17)
              {
                if (v17[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
                else
                  --v17[2];
              }
            }
            std::optional<WebCore::SimpleRange>::~optional(&v23);
            if (v30)
              WebCore::HighlightRange::setStartPosition((uint64_t)v10, &v30);
            if (v27)
              WebCore::HighlightRange::setEndPosition((uint64_t)v10, &v27);
            WebCore::Highlight::repaintRange(v10[2]);
          }
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v27);
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v30);
          WebCore::SimpleRange::~SimpleRange((WebCore::SimpleRange *)v33);
          WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)v34);
          WTF::RefCounted<WebCore::HighlightRange>::deref((WebCore::HighlightRange *)v10, v18);
        }
      }
      v7 = (WTF *)((char *)v7 + 8);
      v6 -= 8;
    }
    while (v6);
    do
    {
      v19 = *v8;
      *v8 = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v4);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    result = v39;
  }
  if (result)
    return (WTF *)WTF::fastFree(result, v4);
  return result;
}

_QWORD *WebCore::Document::runScrollSteps(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Event *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t *v39;
  WebCore::EventTarget *v40;
  uint64_t v41;
  WebCore::LocalDOMWindow *v42;
  WebCore *v43;
  uint64_t v44;
  WebCore::Event *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::Page *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];
  uint64_t v55;
  uint64_t *v56[5];
  WebCore::Event *v57;
  uint64_t *v58;
  uint64_t v59;

  v1 = this;
  v2 = this[66];
  if (!v2)
    goto LABEL_20;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_20;
  v4 = *(_QWORD *)(v3 + 288);
  if (!v4)
    goto LABEL_20;
  ++*(_DWORD *)(v4 + 8);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
  v6 = v5.n128_u64[0];
  v7 = *(_QWORD *)(v4 + 80);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 136);
    if (*(_BYTE *)(v7 + 136))
    {
      WebCore::ScrollingEffectsController::animationCallback((WebCore::ScrollingEffectsController *)(v7 + 24), v5);
      v8 = *(unsigned __int8 *)(v7 + 136);
    }
    v9 = v8 != 0;
  }
  else
  {
    v9 = 0;
  }
  v59 = 0;
  v10 = *(uint64_t **)(v4 + 1288);
  if (v10)
  {
    v21 = *v10;
    if (*v10)
    {
      v23 = *(unsigned int *)(v21 - 4);
      v22 = v21 + 8 * v23;
      if (*(_DWORD *)(v21 - 12))
      {
        if (!(_DWORD)v23)
        {
          v24 = *v10;
          goto LABEL_63;
        }
        v31 = 8 * v23;
        v24 = *v10;
        while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
        {
          v24 += 8;
          v31 -= 8;
          if (!v31)
          {
            v24 = v22;
            break;
          }
        }
LABEL_34:
        if (!v21)
        {
          v25 = 0;
LABEL_36:
          if (v25 != v24)
          {
            while (!*(_QWORD *)(*(_QWORD *)v24 + 8))
            {
              v51 = v24 + 8;
              v24 = v22;
              if (v51 != v22)
              {
                v24 = v51;
                while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
                {
                  v24 += 8;
                  if (v24 == v22)
                  {
                    v24 = v22;
                    break;
                  }
                }
              }
              if (v24 == v25)
              {
                v24 = v25;
                break;
              }
            }
          }
          if (v21)
            v26 = v21 + 8 * *(unsigned int *)(v21 - 4);
          else
            v26 = 0;
          while (v24 != v26)
          {
            v27 = *(uint64_t **)(*(_QWORD *)v24 + 8);
            (*(void (**)(uint64_t *))(*v27 + 16))(v27);
            v56[0] = v27;
            WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::add((uint64_t *)&v57, &v59, (uint64_t *)v56);
            if (v56[0])
              (*(void (**)(uint64_t *))(*v56[0] + 24))(v56[0]);
            v28 = v22;
            if (v24 + 8 != v22)
            {
              v28 = v24 + 8;
              while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
              {
                v28 += 8;
                if (v28 == v22)
                {
                  v28 = v22;
                  break;
                }
              }
            }
            v24 = v25;
            if (v28 != v25)
            {
              v24 = v28;
              if (!*(_QWORD *)(*(_QWORD *)v28 + 8))
              {
                while (1)
                {
                  v41 = v24 + 8;
                  v24 = v22;
                  if (v41 != v22)
                  {
                    v24 = v41;
                    while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
                    {
                      v24 += 8;
                      if (v24 == v22)
                      {
                        v24 = v22;
                        break;
                      }
                    }
                  }
                  if (v24 == v25)
                    break;
                  if (*(_QWORD *)(*(_QWORD *)v24 + 8))
                    goto LABEL_48;
                }
                v24 = v25;
              }
            }
LABEL_48:
            ++*((_DWORD *)v10 + 2);
          }
          goto LABEL_9;
        }
        LODWORD(v23) = *(_DWORD *)(v21 - 4);
LABEL_63:
        v25 = v21 + 8 * v23;
        goto LABEL_36;
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = v22;
    v22 = v21 + 8 * v23;
    goto LABEL_34;
  }
LABEL_9:
  v11 = *(uint64_t **)(v4 + 1296);
  if (v11)
  {
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(*(uint64_t **)(v4 + 1296), (uint64_t **)&v57);
    WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v11, v56);
    while (v58 != v56[1])
    {
      v46 = *(_QWORD *)(*v58 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
      v55 = v46;
      WTF::HashTable<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::ScrollableArea,WTF::RawPtrTraits<WebCore::ScrollableArea>>>>::add(v54, &v59, &v55);
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
      WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v57);
    }
  }
  v12 = v59;
  if (v59)
  {
    v14 = *(unsigned int *)(v59 - 4);
    v15 = v59 + 8 * v14;
    if (*(_DWORD *)(v59 - 12))
    {
      v13 = v59;
      if ((_DWORD)v14)
      {
        v20 = 8 * v14;
        v13 = v59;
        while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
        {
          v13 += 8;
          v20 -= 8;
          if (!v20)
          {
            v13 = v15;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v13 = v59 + 8 * v14;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v15 = v59 + 8 * v14;
LABEL_13:
  if (v59)
    v16 = v59 + 8 * *(unsigned int *)(v59 - 4);
  else
    v16 = 0;
  while (v13 != v16)
  {
    if (*(_QWORD *)v13)
    {
      v52 = *(_QWORD *)(*(_QWORD *)v13 + 16);
      if (v52)
      {
        if (*(_BYTE *)(v52 + 136))
        {
          v5.n128_u64[0] = v6;
          WebCore::ScrollingEffectsController::animationCallback((WebCore::ScrollingEffectsController *)(v52 + 24), v5);
          v9 |= *(_BYTE *)(v52 + 136) != 0;
        }
      }
    }
    v53 = v13 + 8;
    v13 = v15;
    if (v53 != v15)
    {
      v13 = v53;
      while ((unint64_t)(*(_QWORD *)v13 + 1) <= 1)
      {
        v13 += 8;
        if (v13 == v15)
        {
          v13 = v15;
          break;
        }
      }
    }
  }
  if ((v9 & 1) != 0)
  {
    v47 = v1[66];
    if (v47
      && (v48 = *(_QWORD *)(v47 + 8)) != 0
      && (v49 = *(_QWORD *)(v48 + 24)) != 0
      && (v50 = *(WebCore::Page **)(v49 + 8)) != 0)
    {
      ++*(_DWORD *)v50;
      WebCore::Page::scheduleRenderingUpdate((uint64_t)v50, 2);
      WTF::RefCounted<WebCore::Page>::deref(v50);
    }
    else
    {
      WebCore::Page::scheduleRenderingUpdate(0, 2);
    }
  }
  WebCore::LocalFrameView::updateScrollAnchoringElementsForScrollableAreas(v4);
  this = WebCore::LocalFrameView::updateScrollAnchoringPositionForScrollableAreas((_QWORD *)v4, v17);
  if (v12)
  {
    v29 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v29)
    {
      v30 = (_QWORD *)v12;
      do
      {
        if ((unint64_t)(*v30 + 1) >= 2)
          (*(void (**)(_QWORD))(*(_QWORD *)*v30 + 24))(*v30);
        ++v30;
        --v29;
      }
      while (v29);
    }
    this = (_QWORD *)WTF::fastFree((WTF *)(v12 - 16), v18);
  }
  if (*(_DWORD *)(v4 + 8) == 1)
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  else
    --*(_DWORD *)(v4 + 8);
LABEL_20:
  v19 = v1[405];
  if (v19)
  {
    v32 = *(unsigned int *)(v19 + 12);
    if ((_DWORD)v32)
    {
      v33 = *(WebCore::Event **)v19;
      *(_QWORD *)v19 = 0;
      v57 = v33;
      v34 = *(_DWORD *)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      v58 = (uint64_t *)__PAIR64__(v32, v34);
      v35 = 8 * v32;
      do
      {
        v36 = *(_QWORD *)v33;
        v37 = (*(_WORD *)(*(_QWORD *)v33 + 28) & 0xF000) == 36864;
        v38 = WebCore::eventNames((WebCore *)this);
        WebCore::Event::create((_QWORD *)(v38 + 1736), v37, 0, 0, (uint64_t *)v56);
        v39 = v56[0];
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 48))(v36, v56[0]);
        if (v39)
        {
          if (*((_DWORD *)v39 + 4) == 1)
            this = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v39 + 8))(v39);
          else
            --*((_DWORD *)v39 + 4);
        }
        v33 = (WebCore::Event *)((char *)v33 + 8);
        v35 -= 8;
      }
      while (v35);
      this = (_QWORD *)WTF::Vector<WebCore::GCReachableRef<WebCore::ContainerNode,void>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v40);
    }
  }
  if (*((_BYTE *)v1 + 3410))
  {
    *((_BYTE *)v1 + 3410) = 0;
    v42 = (WebCore::LocalDOMWindow *)v1[87];
    if (v42)
    {
      ++*((_DWORD *)v42 + 6);
      v43 = (WebCore *)WebCore::LocalDOMWindow::visualViewport(v42);
      v44 = WebCore::eventNames(v43);
      WebCore::Event::create((_QWORD *)(v44 + 1736), 0, 0, 0, (uint64_t *)&v57);
      v45 = v57;
      this = WebCore::EventTarget::dispatchEvent(v43, v57);
      if (*((_DWORD *)v45 + 4) == 1)
        this = (_QWORD *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v45 + 8))(v45);
      else
        --*((_DWORD *)v45 + 4);
      if (*((_DWORD *)v42 + 6) == 1)
        return (_QWORD *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v42 + 72))(v42);
      else
        --*((_DWORD *)v42 + 6);
    }
  }
  return this;
}

_QWORD *WebCore::LocalFrameView::updateScrollAnchoringPositionForScrollableAreas(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v2 = this[167];
  v3 = this[168];
  *(_OWORD *)(this + 167) = 0u;
  v27[0] = v2;
  v27[1] = v3;
  if (!v2)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v2 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v2 - 4);
  v6 = v2 + 8 * v5;
  if (!*(_DWORD *)(v2 - 12))
  {
    v4 = v2 + 8 * v5;
    goto LABEL_3;
  }
  v4 = v2;
  if ((_DWORD)v5)
  {
    v10 = 8 * v5;
    v4 = v2;
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 8;
      v10 -= 8;
      if (!v10)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  v22 = v27;
  v23 = v4;
  v24 = v6;
  if (v2)
  {
    v8 = *(unsigned int *)(v2 - 4);
    v7 = v2 + 8 * v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v25 = v7;
  v26 = v2 + 8 * v8;
  if (v4 != v7)
  {
    if (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v16 = v4;
      do
      {
        v17 = v16 + 8;
        v16 = v6;
        if (v17 != v6)
        {
          v16 = v17;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 8;
            if (v16 == v6)
            {
              v16 = v6;
              break;
            }
          }
        }
        v4 = v7;
        if (v16 == v7)
          break;
        v4 = v16;
      }
      while (!*(_QWORD *)(*(_QWORD *)v16 + 8));
    }
    v23 = v4;
  }
  if (v2)
    v9 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v9 = 0;
  if (v4 != v9)
  {
    v21 = v9;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v4 + 8) + 768))(*(_QWORD *)(*(_QWORD *)v4 + 8));
      this = WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      v4 = v23;
    }
    while (v23 != v21);
    v2 = v27[0];
  }
  if (v2)
  {
    v11 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(unsigned int **)(v2 + 8 * i);
        if (v13 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v19 = i;
              v20 = v2;
              v18 = v11;
              WTF::fastFree((WTF *)v13, a2);
              v11 = v18;
              i = v19;
              v2 = v20;
            }
          }
        }
      }
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return this;
}

uint64_t WebCore::LocalFrameView::updateScrollAnchoringElementsForScrollableAreas(uint64_t this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  if (*(_QWORD *)(this + 1352))
  {
    v14 = this;
    WebCore::ScrollAnchoringController::updateAnchorElement(*(WebCore::ScrollAnchoringController **)(this + 1352));
    this = v14;
  }
  v1 = *(uint64_t ***)(this + 1288);
  if (!v1)
    return this;
  v2 = *v1;
  if (!*v1)
  {
    v3 = 0;
    v4 = 0;
LABEL_7:
    v5 = v3;
    v3 = &v2[v4];
    goto LABEL_8;
  }
  v4 = *((unsigned int *)v2 - 1);
  v3 = &v2[v4];
  if (!*((_DWORD *)v2 - 3))
    goto LABEL_7;
  if (!(_DWORD)v4)
  {
    v12 = 0;
    v5 = *v1;
    goto LABEL_29;
  }
  v11 = 8 * v4;
  v5 = *v1;
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v11 -= 8;
    if (!v11)
    {
      v5 = v3;
      break;
    }
  }
LABEL_8:
  if (v2)
  {
    v12 = *((unsigned int *)v2 - 1);
LABEL_29:
    v6 = &v2[v12];
    goto LABEL_10;
  }
  v6 = 0;
LABEL_10:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v15 = v5 + 1;
      v5 = v3;
      if (v15 != v3)
      {
        v5 = v15;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v7 = &v2[*((unsigned int *)v2 - 1)];
  else
    v7 = 0;
  while (v5 != v7)
  {
    v9 = *v5;
    v8 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 760))(*(_QWORD *)(v9 + 8));
    v10 = v3;
    if (v8 != v3)
    {
      v10 = v8;
      while ((unint64_t)(*v10 + 1) <= 1)
      {
        if (++v10 == v3)
        {
          v10 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v10 != v6)
    {
      v5 = v10;
      if (!*(_QWORD *)(*v10 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_20;
        }
        v5 = v6;
      }
    }
LABEL_20:
    ++*((_DWORD *)v1 + 2);
  }
  return this;
}

void WebCore::FrameSelection::updateAppearanceAfterUpdatingRendering(WebCore::FrameSelection *this)
{
  uint64_t v2;
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Editor *v7;
  void *v8;
  WebCore::Editor *v9;
  uint64_t v10;
  void *v11;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    v3 = *(WebCore::Document **)(v2 + 8);
  else
    v3 = 0;
  v4 = *((_QWORD *)v3 + 382);
  if (!v4)
  {
    v7 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
    WebCore::Editor::Editor(v7, v3);
    v9 = (WebCore::Editor *)*((_QWORD *)v3 + 382);
    *((_QWORD *)v3 + 382) = v7;
    if (v9)
    {
      WebCore::Editor::~Editor(v9, v8);
      if (*(_DWORD *)v10)
      {
        *(_QWORD *)(v10 + 496) = 0;
        *(_OWORD *)(v10 + 464) = 0u;
        *(_OWORD *)(v10 + 480) = 0u;
        *(_OWORD *)(v10 + 432) = 0u;
        *(_OWORD *)(v10 + 448) = 0u;
        *(_OWORD *)(v10 + 400) = 0u;
        *(_OWORD *)(v10 + 416) = 0u;
        *(_OWORD *)(v10 + 368) = 0u;
        *(_OWORD *)(v10 + 384) = 0u;
        *(_OWORD *)(v10 + 336) = 0u;
        *(_OWORD *)(v10 + 352) = 0u;
        *(_OWORD *)(v10 + 304) = 0u;
        *(_OWORD *)(v10 + 320) = 0u;
        *(_OWORD *)(v10 + 272) = 0u;
        *(_OWORD *)(v10 + 288) = 0u;
        *(_OWORD *)(v10 + 240) = 0u;
        *(_OWORD *)(v10 + 256) = 0u;
        *(_OWORD *)(v10 + 208) = 0u;
        *(_OWORD *)(v10 + 224) = 0u;
        *(_OWORD *)(v10 + 176) = 0u;
        *(_OWORD *)(v10 + 192) = 0u;
        *(_OWORD *)(v10 + 144) = 0u;
        *(_OWORD *)(v10 + 160) = 0u;
        *(_OWORD *)(v10 + 112) = 0u;
        *(_OWORD *)(v10 + 128) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 96) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
      }
      else
      {
        WTF::fastFree((WTF *)v10, v11);
      }
    }
    v4 = *((_QWORD *)v3 + 382);
  }
  v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
  }
  *((_BYTE *)this + 24) = 1;
  WebCore::FrameSelection::updateAndRevealSelection((uint64_t)this, (uint64_t)this + 228, 1, 0, 0);
}

void WebCore::FrameSelection::updateAndRevealSelection(uint64_t a1, uint64_t a2, char a3, BOOL *a4, int a5)
{
  __int16 v5;
  uint64_t v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Document *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  __int128 *v20;
  WebCore::Editor *v21;
  void *v22;
  WebCore::Editor *v23;
  uint64_t v24;
  void *v25;
  WebCore::Editor *v26;
  void *v27;
  WebCore::Editor *v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[2];

  v5 = *(_WORD *)(a1 + 256);
  if ((v5 & 0x20) != 0)
  {
    *(_WORD *)(a1 + 256) = v5 & 0xFFDF;
    WebCore::FrameSelection::updateAppearance((WebCore::FrameSelection *)a1);
    if (*(_BYTE *)(a1 + 224) != 3)
    {
      v13 = *(_QWORD *)(a1 + 32);
      if (v13)
        v14 = *(WebCore::Document **)(v13 + 8);
      else
        v14 = 0;
      v15 = *((_QWORD *)v14 + 382);
      if (!v15)
      {
        v26 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v26, v14);
        v28 = (WebCore::Editor *)*((_QWORD *)v14 + 382);
        *((_QWORD *)v14 + 382) = v26;
        if (v28)
        {
          WebCore::Editor::~Editor(v28, v27);
          if (*(_DWORD *)v29)
          {
            *(_QWORD *)(v29 + 496) = 0;
            *(_OWORD *)(v29 + 464) = 0u;
            *(_OWORD *)(v29 + 480) = 0u;
            *(_OWORD *)(v29 + 432) = 0u;
            *(_OWORD *)(v29 + 448) = 0u;
            *(_OWORD *)(v29 + 400) = 0u;
            *(_OWORD *)(v29 + 416) = 0u;
            *(_OWORD *)(v29 + 368) = 0u;
            *(_OWORD *)(v29 + 384) = 0u;
            *(_OWORD *)(v29 + 336) = 0u;
            *(_OWORD *)(v29 + 352) = 0u;
            *(_OWORD *)(v29 + 304) = 0u;
            *(_OWORD *)(v29 + 320) = 0u;
            *(_OWORD *)(v29 + 272) = 0u;
            *(_OWORD *)(v29 + 288) = 0u;
            *(_OWORD *)(v29 + 240) = 0u;
            *(_OWORD *)(v29 + 256) = 0u;
            *(_OWORD *)(v29 + 208) = 0u;
            *(_OWORD *)(v29 + 224) = 0u;
            *(_OWORD *)(v29 + 176) = 0u;
            *(_OWORD *)(v29 + 192) = 0u;
            *(_OWORD *)(v29 + 144) = 0u;
            *(_OWORD *)(v29 + 160) = 0u;
            *(_OWORD *)(v29 + 112) = 0u;
            *(_OWORD *)(v29 + 128) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 16) = 0u;
            *(_OWORD *)(v29 + 32) = 0u;
            *(_OWORD *)v29 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v29, v30);
          }
        }
        v15 = *((_QWORD *)v14 + 382);
      }
      v16 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 16) + 8) + 680) + 370);
      if (v16)
        v17 = v16 == 3;
      else
        v17 = 1;
      if (v17)
      {
        v19 = &WebCore::ScrollAlignment::alignCenterAlways;
        v20 = (__int128 *)&WebCore::ScrollAlignment::alignCenterIfNeeded;
      }
      else
      {
        v19 = &WebCore::ScrollAlignment::alignTopAlways;
        v20 = &WebCore::ScrollAlignment::alignToEdgeIfNeeded;
      }
      if ((*(_WORD *)(a1 + 256) & 0x40) != 0)
        v18 = v19;
      else
        v18 = v20;
      v31[0] = *v18;
      *(_QWORD *)((char *)v31 + 5) = *(_QWORD *)((char *)v18 + 5);
      if (a5)
      {
        v31[0] = 0x100000001;
        *(_QWORD *)((char *)v31 + 5) = 0x100000001000000;
      }
      WebCore::FrameSelection::revealSelection(a1, *(unsigned __int8 *)(a1 + 224), (uint64_t)v31, a4, a3);
    }
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      v11 = *(WebCore::Document **)(v10 + 8);
    else
      v11 = 0;
    v12 = *((_QWORD *)v11 + 382);
    if (!v12)
    {
      v21 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
      WebCore::Editor::Editor(v21, v11);
      v23 = (WebCore::Editor *)*((_QWORD *)v11 + 382);
      *((_QWORD *)v11 + 382) = v21;
      if (v23)
      {
        WebCore::Editor::~Editor(v23, v22);
        if (*(_DWORD *)v24)
        {
          *(_QWORD *)(v24 + 496) = 0;
          *(_OWORD *)(v24 + 464) = 0u;
          *(_OWORD *)(v24 + 480) = 0u;
          *(_OWORD *)(v24 + 432) = 0u;
          *(_OWORD *)(v24 + 448) = 0u;
          *(_OWORD *)(v24 + 400) = 0u;
          *(_OWORD *)(v24 + 416) = 0u;
          *(_OWORD *)(v24 + 368) = 0u;
          *(_OWORD *)(v24 + 384) = 0u;
          *(_OWORD *)(v24 + 336) = 0u;
          *(_OWORD *)(v24 + 352) = 0u;
          *(_OWORD *)(v24 + 304) = 0u;
          *(_OWORD *)(v24 + 320) = 0u;
          *(_OWORD *)(v24 + 272) = 0u;
          *(_OWORD *)(v24 + 288) = 0u;
          *(_OWORD *)(v24 + 240) = 0u;
          *(_OWORD *)(v24 + 256) = 0u;
          *(_OWORD *)(v24 + 208) = 0u;
          *(_OWORD *)(v24 + 224) = 0u;
          *(_OWORD *)(v24 + 176) = 0u;
          *(_OWORD *)(v24 + 192) = 0u;
          *(_OWORD *)(v24 + 144) = 0u;
          *(_OWORD *)(v24 + 160) = 0u;
          *(_OWORD *)(v24 + 112) = 0u;
          *(_OWORD *)(v24 + 128) = 0u;
          *(_OWORD *)(v24 + 80) = 0u;
          *(_OWORD *)(v24 + 96) = 0u;
          *(_OWORD *)(v24 + 48) = 0u;
          *(_OWORD *)(v24 + 64) = 0u;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          *(_OWORD *)v24 = 0u;
        }
        else
        {
          WTF::fastFree((WTF *)v24, v25);
        }
      }
      v12 = *((_QWORD *)v11 + 382);
    }
    if (!*(_BYTE *)(v12 + 88))
      WebCore::FrameSelection::notifyAccessibilityForSelectionChange((_QWORD *)a1);
  }
}

uint64_t WebCore::Document::updateIntersectionObservations(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::IntersectionObserver *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  bmalloc::api *v27;
  void *v28;
  bmalloc::api *v29;
  void *v30;
  unsigned int **v31;
  _QWORD *v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int **v42;
  _QWORD *v43;
  unsigned int **v44;
  WTF *v45;
  uint64_t v46;

  v2 = *(_QWORD *)(result + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 288);
      if (v4)
      {
        v5 = (WebCore::Document *)result;
        ++*(_DWORD *)(v4 + 8);
        if ((*(_QWORD *)(v4 + 384) & 0xFFFFFFFFFFFFLL) != 0
          && *(double *)((*(_QWORD *)(v4 + 384) & 0xFFFFFFFFFFFFLL) + 8) != 0.0
          || (v6 = *(_QWORD *)(result + 1944)) != 0 && (*(_BYTE *)(v6 + 20) & 0xF8) != 0
          || !*(_BYTE *)(result + 3362)
          && (*(_BYTE *)(result + 3390)
           || (*(_BYTE *)(result + 70) & 8) != 0
           || *(_QWORD *)(result + 1560)
           || (v7 = *(_QWORD *)(result + 1328), *(_BYTE *)(v7 + 233))
           || *(_BYTE *)(v7 + 234))
          && !*(_BYTE *)(result + 3391))
        {
          if (a2[3])
            result = (uint64_t)WebCore::Document::scheduleRenderingUpdate((_QWORD *)result, 256);
        }
        else
        {
          v8 = a2[3];
          if ((_DWORD)v8)
          {
            v9 = 0;
            LODWORD(v10) = 0;
            v11 = 0;
            v12 = *(_QWORD *)a2;
            v13 = *(_QWORD *)a2 + 8 * v8;
            do
            {
              if (*(_QWORD *)v12)
              {
                v14 = *(WebCore::IntersectionObserver **)(*(_QWORD *)v12 + 8);
                if (v14)
                {
                  ++*(_DWORD *)v14;
                  result = WebCore::IntersectionObserver::updateObservations(v14, v5);
                  if ((_DWORD)result)
                  {
                    v15 = v9;
                    if (v9 == (_DWORD)v10)
                    {
                      v16 = v9 + ((unint64_t)v9 >> 2);
                      if (v16 >= 0x10)
                        v17 = v16 + 1;
                      else
                        v17 = 16;
                      if (v17 <= (unint64_t)v9 + 1)
                        v10 = v9 + 1;
                      else
                        v10 = v17;
                      if (v10 >> 29)
                      {
                        __break(0xC471u);
                        return result;
                      }
                      v18 = WTF::fastMalloc((WTF *)(8 * v10));
                      if (v9)
                      {
                        v31 = (unsigned int **)((char *)v11 + 8 * v9);
                        v32 = (_QWORD *)v18;
                        v33 = (unsigned int **)v11;
                        do
                        {
                          v34 = *v33;
                          *v33 = 0;
                          *v32 = v34;
                          v35 = *v33;
                          *v33 = 0;
                          if (v35)
                          {
                            do
                            {
                              v36 = __ldaxr(v35);
                              v37 = v36 - 1;
                            }
                            while (__stlxr(v37, v35));
                            if (!v37)
                            {
                              atomic_store(1u, v35);
                              v44 = v31;
                              v46 = v18;
                              v42 = v33;
                              v43 = v32;
                              WTF::fastFree((WTF *)v35, a2);
                              v33 = v42;
                              v32 = v43;
                              v31 = v44;
                              v18 = v46;
                            }
                          }
                          ++v32;
                          ++v33;
                        }
                        while (v33 != v31);
                      }
                      if (v11)
                      {
                        if ((WTF *)v18 == v11)
                          v41 = 0;
                        else
                          v41 = v18;
                        v45 = (WTF *)v41;
                        if ((WTF *)v18 == v11)
                          LODWORD(v10) = 0;
                        WTF::fastFree(v11, a2);
                        v11 = v45;
                      }
                      else
                      {
                        v11 = (WTF *)v18;
                      }
                      result = *((_QWORD *)v14 + 1);
                      if (result)
                        goto LABEL_85;
                      result = WTF::fastCompactMalloc((WTF *)0x10);
                      *(_DWORD *)result = 1;
                      *(_QWORD *)(result + 8) = v14;
                      v38 = (unsigned int *)*((_QWORD *)v14 + 1);
                      *((_QWORD *)v14 + 1) = result;
                      if (!v38)
                        goto LABEL_85;
                      do
                      {
                        v39 = __ldaxr(v38);
                        v40 = v39 - 1;
                      }
                      while (__stlxr(v40, v38));
                      if (!v40)
                      {
                        atomic_store(1u, v38);
                        WTF::fastFree((WTF *)v38, a2);
                      }
                      result = *((_QWORD *)v14 + 1);
                      if (result)
                      {
LABEL_85:
                        do
                          v19 = __ldaxr((unsigned int *)result);
                        while (__stlxr(v19 + 1, (unsigned int *)result));
                      }
                      *((_QWORD *)v11 + v9++) = result;
                    }
                    else
                    {
                      ++v9;
                      result = (uint64_t)WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v11 + v15, (uint64_t)v14);
                    }
                  }
                  if (*(_DWORD *)v14 == 1)
                  {
                    WebCore::IntersectionObserver::~IntersectionObserver(v14);
                    result = bmalloc::api::isoDeallocate(v27, v28);
                  }
                  else
                  {
                    --*(_DWORD *)v14;
                  }
                }
              }
              v12 += 8;
            }
            while (v12 != v13);
            if (v9)
            {
              v20 = (uint64_t *)((char *)v11 + 8 * v9);
              v21 = 8 * v9;
              v22 = v11;
              do
              {
                if (*(_QWORD *)v22)
                {
                  v23 = *(WTF::StringImpl **)(*(_QWORD *)v22 + 8);
                  if (v23)
                  {
                    ++*(_DWORD *)v23;
                    WebCore::IntersectionObserver::notify(v23);
                    if (*(_DWORD *)v23 == 1)
                    {
                      WebCore::IntersectionObserver::~IntersectionObserver(v23);
                      bmalloc::api::isoDeallocate(v29, v30);
                    }
                    else
                    {
                      --*(_DWORD *)v23;
                    }
                  }
                }
                v22 = (WTF *)((char *)v22 + 8);
                v21 -= 8;
              }
              while (v21);
              v24 = (uint64_t *)v11;
              do
              {
                result = *v24;
                *v24 = 0;
                if (result)
                {
                  do
                  {
                    v25 = __ldaxr((unsigned int *)result);
                    v26 = v25 - 1;
                  }
                  while (__stlxr(v26, (unsigned int *)result));
                  if (!v26)
                  {
                    atomic_store(1u, (unsigned int *)result);
                    result = WTF::fastFree((WTF *)result, a2);
                  }
                }
                ++v24;
              }
              while (v24 != v20);
            }
            if (v11)
              result = WTF::fastFree(v11, a2);
          }
        }
        if (*(_DWORD *)(v4 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        else
          --*(_DWORD *)(v4 + 8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::Document::adjustValidationMessagePositions(_QWORD *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v2 = this[406];
  v3 = this[407];
  *((_OWORD *)this + 203) = 0u;
  v27[0] = v2;
  v27[1] = v3;
  if (!v2)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = v2 + 8 * v5;
    goto LABEL_4;
  }
  v5 = *(unsigned int *)(v2 - 4);
  v6 = v2 + 8 * v5;
  if (!*(_DWORD *)(v2 - 12))
  {
    v4 = v2 + 8 * v5;
    goto LABEL_3;
  }
  v4 = v2;
  if ((_DWORD)v5)
  {
    v10 = 8 * v5;
    v4 = v2;
    while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
    {
      v4 += 8;
      v10 -= 8;
      if (!v10)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  v22 = v27;
  v23 = v4;
  v24 = v6;
  if (v2)
  {
    v8 = *(unsigned int *)(v2 - 4);
    v7 = v2 + 8 * v8;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v25 = v7;
  v26 = v2 + 8 * v8;
  if (v4 != v7)
  {
    if (!*(_QWORD *)(*(_QWORD *)v4 + 8))
    {
      v16 = v4;
      do
      {
        v17 = v16 + 8;
        v16 = v6;
        if (v17 != v6)
        {
          v16 = v17;
          while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
          {
            v16 += 8;
            if (v16 == v6)
            {
              v16 = v6;
              break;
            }
          }
        }
        v4 = v7;
        if (v16 == v7)
          break;
        v4 = v16;
      }
      while (!*(_QWORD *)(*(_QWORD *)v16 + 8));
    }
    v23 = v4;
  }
  if (v2)
    v9 = v2 + 8 * *(unsigned int *)(v2 - 4);
  else
    v9 = 0;
  if (v4 != v9)
  {
    v21 = v9;
    do
    {
      WebCore::ValidationMessage::adjustBubblePosition(*(_QWORD *)(*(_QWORD *)v4 + 8));
      this = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v22);
      v4 = v23;
    }
    while (v23 != v21);
    v2 = v27[0];
  }
  if (v2)
  {
    v11 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(unsigned int **)(v2 + 8 * i);
        if (v13 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v19 = i;
              v20 = v2;
              v18 = v11;
              WTF::fastFree((WTF *)v13, a2);
              v11 = v18;
              i = v19;
              v2 = v20;
            }
          }
        }
      }
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  return this;
}

uint64_t WebCore::Document::flushAutofocusCandidates(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  char v12;
  int v13;

  if (!*(_BYTE *)(this + 3401))
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 1216);
    if (v3 != *(_QWORD *)(this + 1224))
    {
      v4 = *(_QWORD *)(this + 1568);
      if (v4 && *(_QWORD *)(v4 + 8))
      {
        this = (uint64_t)WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::clear(this + 1216, a2);
        *(_BYTE *)(v2 + 3401) = 1;
        return this;
      }
      while (1)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v2 + 1232) + 8 * v3);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
            break;
        }
        this = WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::removeFirst((uint64_t *)(v2 + 1216), a2);
        v3 = *(_QWORD *)(v2 + 1216);
        if (v3 == *(_QWORD *)(v2 + 1224))
          return this;
      }
      *(_DWORD *)(v6 + 24) += 2;
      if (WebCore::Document::isFullyActive(*(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8))
        && WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) == v2)
      {
        v9 = *(_QWORD *)(v2 + 728);
        if (v9)
        {
          v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
          if (v10)
          {
            v11 = v10;
            ++v10[2];
            v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 176))(v10);
            v13 = v11[2] - 1;
            if ((v12 & 1) != 0)
            {
              if (v11[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
              else
                v11[2] = v13;
              v8 = 3u;
LABEL_13:
              if (*(_DWORD *)(v6 + 24) == 2)
              {
                if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
              }
              else
              {
                *(_DWORD *)(v6 + 24) -= 2;
              }
              __asm { BR              X10 ; loc_1942583A0 loc_1942583D0 }
            }
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
            else
              v11[2] = v13;
          }
        }
        WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::removeFirst((uint64_t *)(v2 + 1216), v7);
        if ((WebCore::Document::flushAutofocusCandidates(void)::$_0::operator()(*(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8), (WebCore::Document *)v2) & 1) == 0)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 552))(v6))
          {
            WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::clear(v2 + 1216, v7);
            v8 = 1u;
            *(_BYTE *)(v2 + 3401) = 1u;
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 696))(v6);
          }
          else
          {
            v8 = 0u;
          }
          goto LABEL_13;
        }
      }
      else
      {
        WTF::Deque<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul>::removeFirst((uint64_t *)(v2 + 1216), v7);
      }
      v8 = 2u;
      goto LABEL_13;
    }
  }
  return this;
}

uint64_t WebCore::Document::updateTouchEventRegions(uint64_t this)
{
  uint64_t v1;
  WebCore *shouldDispatchSimulatedMouseEvents;
  WebCore::RenderObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore **v12;
  WebCore **v13;
  uint64_t v14;
  WebCore **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  __int128 v21;
  WebCore **v22;
  __int128 *v23;
  uint64_t v24;
  WebCore *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::EventTarget **v29;
  const WebCore::EventTarget **v30;
  uint64_t v31;
  const WebCore::EventTarget **v32;
  WebCore::RenderLayer **v33;
  uint64_t v34;
  const WebCore::EventTarget *v35;
  _QWORD *v36;
  uint64_t v37;
  const WebCore::EventTarget *v38;
  uint64_t v39;
  WebCore::Quirks *v40;
  uint64_t v41;
  const WebCore::EventTarget **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _BOOL4 v76;
  int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  _BOOL4 v81;
  int v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _BOOL4 v86;
  int v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _BOOL4 v91;
  int v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  WebCore::Quirks *v111;
  int v112;
  char *v113;
  char *v114;
  uint64_t v115;
  WebCore::Quirks *v116;
  WTF **v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  WebCore::Quirks *v123;
  int v124;
  char *v125;
  char *v126;
  uint64_t v127;
  WebCore::Quirks *v128;
  WTF **v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  WebCore::Quirks *v135;
  WTF **v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  WebCore::Quirks *v142;
  WTF **v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  WebCore::Quirks *v149;
  WTF **v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  char *v156;
  __int128 v157;
  uint64_t *v158;
  char *v159;
  __int128 v160;
  uint64_t *v161;
  char *v162;
  __int128 v163;
  uint64_t *v164;
  char *v165;
  __int128 v166;
  uint64_t *v167;
  char *v168;
  __int128 v169;
  char *v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  const WebCore::EventTarget *v193;
  const WebCore::EventTarget *v194;
  void *v195;
  WTF *v196;
  uint64_t v197;
  WTF *v198;
  uint64_t v199;
  void *v200;
  WTF *v201;
  WTF *v202;
  WTF **v203;
  WTF **v204;
  WTF **v205;
  WTF **v206;
  const WebCore::EventTarget *v207;
  const WebCore::EventTarget *v208;
  const WebCore::EventTarget *v209;
  const WebCore::EventTarget *v210;
  const WebCore::EventTarget *v211;
  unint64_t StatusReg;
  WTF *v213;
  uint64_t v214;
  WTF *v215;
  uint64_t v216;
  __int128 v217;
  WebCore::Document *v218;
  WTF **v219;
  __int128 *v220;
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  __int128 v224;
  const WebCore::EventTarget *v225;
  _BYTE v226[24];

  if (!*(_BYTE *)(this + 672))
    return this;
  v1 = this;
  shouldDispatchSimulatedMouseEvents = (WebCore *)kdebug_trace();
  v215 = 0;
  v216 = 0;
  v213 = 0;
  v214 = 0;
  v4 = *(_QWORD *)(v1 + 528);
  if (!v4)
    goto LABEL_245;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_245;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
LABEL_5:
    v6 = (_QWORD *)v5;
    if (*(_BYTE *)(v5 + 144))
      goto LABEL_6;
    v9 = *(uint64_t **)(v5 + 296);
    if (!v9)
      goto LABEL_6;
    v10 = v9[79];
    if (!v10)
    {
      v13 = 0;
      v11 = 0;
      goto LABEL_22;
    }
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (WebCore **)(v10 + 16 * v11);
    if (!*(_DWORD *)(v10 - 12))
    {
      v13 = (WebCore **)(v10 + 16 * v11);
LABEL_22:
      v12 = (WebCore **)(v10 + 16 * v11);
      goto LABEL_23;
    }
    v13 = (WebCore **)v9[79];
    if ((_DWORD)v11)
    {
      v14 = 16 * v11;
      v13 = (WebCore **)v9[79];
      while ((unint64_t)*v13 + 1 <= 1)
      {
        v13 += 2;
        v14 -= 16;
        if (!v14)
        {
          v13 = v12;
          break;
        }
      }
    }
LABEL_23:
    if (v10)
      v15 = (WebCore **)(v10 + 16 * *(unsigned int *)(v10 - 4));
    else
      v15 = 0;
    while (v13 != v15)
    {
      shouldDispatchSimulatedMouseEvents = *v13;
      v16 = *((_QWORD *)*v13 + 8);
      v17 = v16 & 0xFFFFFFFFFFFFLL;
      if ((v16 & 0xFFFFFFFFFFFFLL) != 0)
      {
        *(_QWORD *)&v217 = WebCore::eventRectRelativeToRoot(shouldDispatchSimulatedMouseEvents, (WebCore::RenderLayer **)(v16 & 0xFFFFFFFFFFFFLL), v3);
        *((_QWORD *)&v217 + 1) = v18;
        v19 = HIDWORD(v214);
        if (HIDWORD(v214) == (_DWORD)v214)
        {
          v23 = (__int128 *)WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v213, HIDWORD(v214) + 1, (unint64_t)&v217);
          v19 = HIDWORD(v214);
          v20 = v213;
          v21 = *v23;
        }
        else
        {
          v20 = v213;
          v21 = v217;
        }
        *((_OWORD *)v20 + v19) = v21;
        ++HIDWORD(v214);
        shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::Document::collectTouchHandlerRectsForChildRenderers((uint64_t)v9, v17, &v217, (uint64_t)&v213);
      }
      v22 = v13 + 2;
      v13 = v12;
      if (v22 != v12)
      {
        v13 = v22;
        while ((unint64_t)*v13 + 1 <= 1)
        {
          v13 += 2;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
    }
    v24 = *(_QWORD *)(StatusReg + 736);
    if (!v24 || (v25 = *(WebCore **)(v24 + 96)) == 0)
    {
      shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::threadGlobalDataSlow(shouldDispatchSimulatedMouseEvents);
      v25 = shouldDispatchSimulatedMouseEvents;
    }
    v26 = (_QWORD *)*((_QWORD *)v25 + 5);
    if (!v26)
    {
      shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v25);
      v26 = (_QWORD *)*((_QWORD *)v25 + 5);
    }
    v27 = v9[78];
    if (!v27)
    {
      v30 = 0;
      v28 = 0;
      goto LABEL_51;
    }
    v28 = *(unsigned int *)(v27 - 4);
    v29 = (const WebCore::EventTarget **)(v27 + 16 * v28);
    if (!*(_DWORD *)(v27 - 12))
    {
      v30 = (const WebCore::EventTarget **)(v27 + 16 * v28);
LABEL_51:
      v29 = (const WebCore::EventTarget **)(v27 + 16 * v28);
      goto LABEL_52;
    }
    v30 = (const WebCore::EventTarget **)v9[78];
    if ((_DWORD)v28)
    {
      v31 = 16 * v28;
      v30 = (const WebCore::EventTarget **)v9[78];
      while ((unint64_t)*v30 + 1 <= 1)
      {
        v30 += 2;
        v31 -= 16;
        if (!v31)
        {
          v30 = v29;
          break;
        }
      }
    }
LABEL_52:
    if (v27)
      v32 = (const WebCore::EventTarget **)(v27 + 16 * *(unsigned int *)(v27 - 4));
    else
      v32 = 0;
    if (v32 != v30)
    {
      while (1)
      {
        v225 = 0;
        v225 = *v30;
        shouldDispatchSimulatedMouseEvents = v225;
        v33 = (WebCore::RenderLayer **)(*((_QWORD *)v225 + 8) & 0xFFFFFFFFFFFFLL);
        if (v33)
        {
          if (!v9[79])
            goto LABEL_59;
          shouldDispatchSimulatedMouseEvents = (WebCore *)WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,unsigned int>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Node *,unsigned int,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::Node *>>,WebCore::Node *>(v9 + 79, &v225);
          if (!shouldDispatchSimulatedMouseEvents)
            break;
        }
LABEL_68:
        v42 = v30 + 2;
        v30 = v29;
        if (v42 != v29)
        {
          v30 = v42;
          while ((unint64_t)*v30 + 1 <= 1)
          {
            v30 += 2;
            if (v30 == v29)
            {
              v30 = v29;
              break;
            }
          }
        }
        if (v30 == v32)
          goto LABEL_6;
      }
      shouldDispatchSimulatedMouseEvents = v225;
LABEL_59:
      *(_QWORD *)&v224 = WebCore::eventRectRelativeToRoot(shouldDispatchSimulatedMouseEvents, v33, v3);
      *((_QWORD *)&v224 + 1) = v34;
      *(_QWORD *)&v217 = v26;
      *((_QWORD *)&v217 + 1) = &v225;
      v218 = (WebCore::Document *)v9;
      v219 = &v215;
      v220 = &v224;
      v221 = (char *)&v223 + 4;
      v222 = &v223;
      v223 = 0;
      v35 = v225;
      v36 = v26;
      v37 = *((_QWORD *)v225 + 2);
      if ((v37 & 0x1000000000000) != 0)
      {
        v43 = v37 & 0x1000000000000;
        v44 = v37 & 0xFFFFFFFFFFFFLL;
        v45 = *(unsigned int *)((v37 & 0xFFFFFFFFFFFFLL) + 0x1C);
        if ((_DWORD)v45)
        {
          v46 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFLL) + 0x10);
          v47 = v26[263];
          v48 = 32 * v45;
          v49 = v48;
          v50 = (_QWORD *)v46;
          while (*v50 != v47)
          {
            v50 += 4;
            v49 -= 32;
            if (!v49)
              goto LABEL_79;
          }
          while (*(_QWORD *)v46 != v47)
          {
            v46 += 32;
            v48 -= 32;
            if (!v48)
              goto LABEL_111;
          }
          v173 = *(unsigned int *)(v46 + 20);
          if (!(_DWORD)v173)
          {
LABEL_111:
            v76 = 0;
            goto LABEL_112;
          }
          v174 = *(uint64_t **)(v46 + 8);
          v175 = 8 * v173 - 8;
          do
          {
            v176 = *v174++;
            v76 = (*(_BYTE *)(v176 + 4) & 2) == 0;
            if ((*(_BYTE *)(v176 + 4) & 2) == 0)
              break;
            v177 = v175;
            v175 -= 8;
          }
          while (v177);
LABEL_112:
          v226[0] = 14;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = v76;
          v77 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v78 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v77 = HIDWORD(v216);
            v79 = (char *)v215 + 24 * HIDWORD(v216);
            v80 = *((_QWORD *)v78 + 2);
            *(_OWORD *)v79 = *(_OWORD *)v78;
            *((_QWORD *)v79 + 2) = v80;
            v35 = v225;
          }
          else
          {
            v156 = (char *)v215 + 24 * HIDWORD(v216);
            v157 = *(_OWORD *)v226;
            *((_QWORD *)v156 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v156 = v157;
          }
          HIDWORD(v216) = v77 + 1;
          v158 = (uint64_t *)((char *)&v223 + 4);
          if (!v76)
            v158 = &v223;
          *(_DWORD *)v158 |= 1u;
          v37 = *((_QWORD *)v35 + 2);
          v43 = v37 & 0x1000000000000;
LABEL_79:
          v36 = v26;
          if (!v43)
            goto LABEL_60;
          v44 = v37 & 0xFFFFFFFFFFFFLL;
        }
        v51 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v51)
        {
          v52 = *(_QWORD *)(v44 + 16);
          v53 = v26[262];
          v54 = 32 * v51;
          v55 = v54;
          v56 = (_QWORD *)v52;
          while (*v56 != v53)
          {
            v56 += 4;
            v55 -= 32;
            if (!v55)
              goto LABEL_85;
          }
          while (*(_QWORD *)v52 != v53)
          {
            v52 += 32;
            v54 -= 32;
            if (!v54)
              goto LABEL_116;
          }
          v178 = *(unsigned int *)(v52 + 20);
          if (!(_DWORD)v178)
          {
LABEL_116:
            v81 = 0;
            goto LABEL_117;
          }
          v179 = *(uint64_t **)(v52 + 8);
          v180 = 8 * v178 - 8;
          do
          {
            v181 = *v179++;
            v81 = (*(_BYTE *)(v181 + 4) & 2) == 0;
            if ((*(_BYTE *)(v181 + 4) & 2) == 0)
              break;
            v182 = v180;
            v180 -= 8;
          }
          while (v182);
LABEL_117:
          v226[0] = 13;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = v81;
          v82 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v83 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v82 = HIDWORD(v216);
            v84 = (char *)v215 + 24 * HIDWORD(v216);
            v85 = *((_QWORD *)v83 + 2);
            *(_OWORD *)v84 = *(_OWORD *)v83;
            *((_QWORD *)v84 + 2) = v85;
            v35 = v225;
          }
          else
          {
            v159 = (char *)v215 + 24 * HIDWORD(v216);
            v160 = *(_OWORD *)v226;
            *((_QWORD *)v159 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v159 = v160;
          }
          HIDWORD(v216) = v82 + 1;
          v161 = (uint64_t *)((char *)&v223 + 4);
          if (!v81)
            v161 = &v223;
          *(_DWORD *)v161 |= 2u;
          v37 = *((_QWORD *)v35 + 2);
          v36 = v26;
          if ((v37 & 0x1000000000000) != 0)
          {
            v43 = v37 & 0x1000000000000;
LABEL_85:
            v44 = v37 & 0xFFFFFFFFFFFFLL;
            goto LABEL_86;
          }
          goto LABEL_60;
        }
LABEL_86:
        v57 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v57)
        {
          v58 = *(_QWORD *)(v44 + 16);
          v59 = v26[260];
          v60 = 32 * v57;
          v61 = v60;
          v62 = (_QWORD *)v58;
          while (*v62 != v59)
          {
            v62 += 4;
            v61 -= 32;
            if (!v61)
              goto LABEL_90;
          }
          while (*(_QWORD *)v58 != v59)
          {
            v58 += 32;
            v60 -= 32;
            if (!v60)
              goto LABEL_121;
          }
          v183 = *(unsigned int *)(v58 + 20);
          if (!(_DWORD)v183)
          {
LABEL_121:
            v86 = 0;
            goto LABEL_122;
          }
          v184 = *(uint64_t **)(v58 + 8);
          v185 = 8 * v183 - 8;
          do
          {
            v186 = *v184++;
            v86 = (*(_BYTE *)(v186 + 4) & 2) == 0;
            if ((*(_BYTE *)(v186 + 4) & 2) == 0)
              break;
            v187 = v185;
            v185 -= 8;
          }
          while (v187);
LABEL_122:
          v226[0] = 11;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = v86;
          v87 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v88 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v87 = HIDWORD(v216);
            v89 = (char *)v215 + 24 * HIDWORD(v216);
            v90 = *((_QWORD *)v88 + 2);
            *(_OWORD *)v89 = *(_OWORD *)v88;
            *((_QWORD *)v89 + 2) = v90;
            v35 = v225;
          }
          else
          {
            v162 = (char *)v215 + 24 * HIDWORD(v216);
            v163 = *(_OWORD *)v226;
            *((_QWORD *)v162 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v162 = v163;
          }
          HIDWORD(v216) = v87 + 1;
          v164 = (uint64_t *)((char *)&v223 + 4);
          if (!v86)
            v164 = &v223;
          *(_DWORD *)v164 |= 4u;
          v37 = *((_QWORD *)v35 + 2);
          v43 = v37 & 0x1000000000000;
LABEL_90:
          v36 = v26;
          if (!v43)
            goto LABEL_60;
          v44 = v37 & 0xFFFFFFFFFFFFLL;
        }
        v63 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v63)
        {
          v64 = *(_QWORD *)(v44 + 16);
          v65 = v26[261];
          v66 = 32 * v63;
          v67 = v66;
          v68 = (_QWORD *)v64;
          while (*v68 != v65)
          {
            v68 += 4;
            v67 -= 32;
            if (!v67)
              goto LABEL_96;
          }
          while (*(_QWORD *)v64 != v65)
          {
            v64 += 32;
            v66 -= 32;
            if (!v66)
              goto LABEL_126;
          }
          v188 = *(unsigned int *)(v64 + 20);
          if (!(_DWORD)v188)
          {
LABEL_126:
            v91 = 0;
            goto LABEL_127;
          }
          v189 = *(uint64_t **)(v64 + 8);
          v190 = 8 * v188 - 8;
          do
          {
            v191 = *v189++;
            v91 = (*(_BYTE *)(v191 + 4) & 2) == 0;
            if ((*(_BYTE *)(v191 + 4) & 2) == 0)
              break;
            v192 = v190;
            v190 -= 8;
          }
          while (v192);
LABEL_127:
          v226[0] = 12;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = v91;
          v92 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v93 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v92 = HIDWORD(v216);
            v94 = (char *)v215 + 24 * HIDWORD(v216);
            v95 = *((_QWORD *)v93 + 2);
            *(_OWORD *)v94 = *(_OWORD *)v93;
            *((_QWORD *)v94 + 2) = v95;
            v35 = v225;
          }
          else
          {
            v165 = (char *)v215 + 24 * HIDWORD(v216);
            v166 = *(_OWORD *)v226;
            *((_QWORD *)v165 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v165 = v166;
          }
          HIDWORD(v216) = v92 + 1;
          v167 = (uint64_t *)((char *)&v223 + 4);
          if (!v91)
            v167 = &v223;
          *(_DWORD *)v167 |= 8u;
          v37 = *((_QWORD *)v35 + 2);
          v43 = v37 & 0x1000000000000;
LABEL_96:
          v36 = v26;
          if (!v43)
            goto LABEL_60;
          v44 = v37 & 0xFFFFFFFFFFFFLL;
        }
        v69 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v69)
        {
          v70 = *(_QWORD **)(v44 + 16);
          v71 = 32 * v69;
          while (*v70 != v26[193])
          {
            v70 += 4;
            v71 -= 32;
            if (!v71)
            {
              v36 = v26;
              if (!v43)
                goto LABEL_60;
              goto LABEL_103;
            }
          }
          v111 = (WebCore::Quirks *)v9[86];
          if (!v111)
          {
            v193 = v35;
            v111 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v9);
            v35 = v193;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v111, v35);
          v226[0] = 9;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = 0;
          v112 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v113 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v112 = HIDWORD(v216);
            v114 = (char *)v215 + 24 * HIDWORD(v216);
            v115 = *((_QWORD *)v113 + 2);
            *(_OWORD *)v114 = *(_OWORD *)v113;
            *((_QWORD *)v114 + 2) = v115;
          }
          else
          {
            v168 = (char *)v215 + 24 * HIDWORD(v216);
            v169 = *(_OWORD *)v226;
            *((_QWORD *)v168 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v168 = v169;
          }
          HIDWORD(v216) = v112 + 1;
          LODWORD(v223) = v223 | 0x10;
          v36 = (_QWORD *)v217;
          v35 = v225;
          v37 = *((_QWORD *)v225 + 2);
          v43 = v37 & 0x1000000000000;
          if ((v37 & 0x1000000000000) != 0)
          {
LABEL_103:
            v44 = v37 & 0xFFFFFFFFFFFFLL;
            goto LABEL_130;
          }
          goto LABEL_60;
        }
        v36 = v26;
LABEL_130:
        v96 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v96)
        {
          v97 = *(_QWORD **)(v44 + 16);
          v98 = 32 * v96;
          while (*v97 != v36[187])
          {
            v97 += 4;
            v98 -= 32;
            if (!v98)
            {
              if (!v43)
                goto LABEL_60;
              goto LABEL_135;
            }
          }
          v123 = (WebCore::Quirks *)v9[86];
          if (!v123)
          {
            v207 = v35;
            v123 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v9);
            v35 = v207;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v123, v35);
          v226[0] = 5;
          *(_OWORD *)&v226[4] = v224;
          v226[20] = 0;
          v124 = HIDWORD(v216);
          if (HIDWORD(v216) == (_DWORD)v216)
          {
            v125 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v215, HIDWORD(v216) + 1, (unint64_t)v226);
            v124 = HIDWORD(v216);
            v126 = (char *)v215 + 24 * HIDWORD(v216);
            v127 = *((_QWORD *)v125 + 2);
            *(_OWORD *)v126 = *(_OWORD *)v125;
            *((_QWORD *)v126 + 2) = v127;
          }
          else
          {
            v170 = (char *)v215 + 24 * HIDWORD(v216);
            v171 = *(_OWORD *)v226;
            *((_QWORD *)v170 + 2) = *(_QWORD *)&v226[16];
            *(_OWORD *)v170 = v171;
          }
          HIDWORD(v216) = v124 + 1;
          LODWORD(v223) = v223 | 0x20;
          v35 = v225;
          v37 = *((_QWORD *)v225 + 2);
          v43 = v37 & 0x1000000000000;
          if ((v37 & 0x1000000000000) != 0)
          {
LABEL_135:
            v44 = v37 & 0xFFFFFFFFFFFFLL;
            goto LABEL_136;
          }
          goto LABEL_60;
        }
LABEL_136:
        v99 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v99)
        {
          v100 = *(_QWORD **)(v44 + 16);
          v101 = 32 * v99;
          while (*v100 != v36[186])
          {
            v100 += 4;
            v101 -= 32;
            if (!v101)
            {
              if (!v43)
                goto LABEL_60;
              goto LABEL_141;
            }
          }
          v128 = (WebCore::Quirks *)*((_QWORD *)v218 + 86);
          if (!v128)
          {
            v208 = v35;
            v128 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v218);
            v35 = v208;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v128, v35);
          v226[0] = 4;
          v129 = v219;
          *(_OWORD *)&v226[4] = *v220;
          v226[20] = 0;
          v130 = *((unsigned int *)v219 + 3);
          if ((_DWORD)v130 == *((_DWORD *)v219 + 2))
          {
            v203 = v219;
            v131 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v130 + 1, (unint64_t)v226);
            v129 = v203;
            v132 = (uint64_t)*v203 + 24 * *((unsigned int *)v203 + 3);
            v133 = *(_OWORD *)v131;
            v134 = *((_QWORD *)v131 + 2);
          }
          else
          {
            v132 = (uint64_t)*v219 + 24 * v130;
            v133 = *(_OWORD *)v226;
            v134 = *(_QWORD *)&v226[16];
          }
          *(_QWORD *)(v132 + 16) = v134;
          *(_OWORD *)v132 = v133;
          ++*((_DWORD *)v129 + 3);
          *(_DWORD *)v222 |= 0x40u;
          v35 = v225;
          v37 = *((_QWORD *)v225 + 2);
          v43 = v37 & 0x1000000000000;
          if ((v37 & 0x1000000000000) != 0)
          {
LABEL_141:
            v44 = v37 & 0xFFFFFFFFFFFFLL;
            goto LABEL_142;
          }
          goto LABEL_60;
        }
LABEL_142:
        v102 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v102)
        {
          v103 = *(_QWORD **)(v44 + 16);
          v104 = 32 * v102;
          while (*v103 != v36[191])
          {
            v103 += 4;
            v104 -= 32;
            if (!v104)
            {
              if (!v43)
                goto LABEL_60;
              goto LABEL_147;
            }
          }
          v135 = (WebCore::Quirks *)*((_QWORD *)v218 + 86);
          if (!v135)
          {
            v209 = v35;
            v135 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v218);
            v35 = v209;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v135, v35);
          v226[0] = 7;
          v136 = v219;
          *(_OWORD *)&v226[4] = *v220;
          v226[20] = 0;
          v137 = *((unsigned int *)v219 + 3);
          if ((_DWORD)v137 == *((_DWORD *)v219 + 2))
          {
            v204 = v219;
            v138 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v137 + 1, (unint64_t)v226);
            v136 = v204;
            v139 = (uint64_t)*v204 + 24 * *((unsigned int *)v204 + 3);
            v140 = *(_OWORD *)v138;
            v141 = *((_QWORD *)v138 + 2);
          }
          else
          {
            v139 = (uint64_t)*v219 + 24 * v137;
            v140 = *(_OWORD *)v226;
            v141 = *(_QWORD *)&v226[16];
          }
          *(_QWORD *)(v139 + 16) = v141;
          *(_OWORD *)v139 = v140;
          ++*((_DWORD *)v136 + 3);
          *(_DWORD *)v222 |= 0x80u;
          v35 = v225;
          v37 = *((_QWORD *)v225 + 2);
          if ((v37 & 0x1000000000000) != 0)
          {
LABEL_147:
            v44 = v37 & 0xFFFFFFFFFFFFLL;
            goto LABEL_148;
          }
          goto LABEL_60;
        }
LABEL_148:
        v105 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v105)
        {
          v106 = *(_QWORD **)(v44 + 16);
          v107 = 32 * v105;
          while (*v106 != v36[194])
          {
            v106 += 4;
            v107 -= 32;
            if (!v107)
              goto LABEL_152;
          }
          v142 = (WebCore::Quirks *)*((_QWORD *)v218 + 86);
          if (!v142)
          {
            v210 = v35;
            v142 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v218);
            v35 = v210;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v142, v35);
          v226[0] = 10;
          v143 = v219;
          *(_OWORD *)&v226[4] = *v220;
          v226[20] = 0;
          v144 = *((unsigned int *)v219 + 3);
          if ((_DWORD)v144 == *((_DWORD *)v219 + 2))
          {
            v205 = v219;
            v145 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v144 + 1, (unint64_t)v226);
            v143 = v205;
            v146 = (uint64_t)*v205 + 24 * *((unsigned int *)v205 + 3);
            v147 = *(_OWORD *)v145;
            v148 = *((_QWORD *)v145 + 2);
          }
          else
          {
            v146 = (uint64_t)*v219 + 24 * v144;
            v147 = *(_OWORD *)v226;
            v148 = *(_QWORD *)&v226[16];
          }
          *(_QWORD *)(v146 + 16) = v148;
          *(_OWORD *)v146 = v147;
          ++*((_DWORD *)v143 + 3);
          *(_DWORD *)v222 |= 0x100u;
          v35 = v225;
          v172 = *((_QWORD *)v225 + 2);
          if ((v172 & 0x1000000000000) == 0)
            goto LABEL_60;
          v44 = v172 & 0xFFFFFFFFFFFFLL;
        }
LABEL_152:
        v108 = *(unsigned int *)(v44 + 28);
        if ((_DWORD)v108)
        {
          v109 = *(_QWORD **)(v44 + 16);
          v110 = 32 * v108;
          while (*v109 != v36[192])
          {
            v109 += 4;
            v110 -= 32;
            if (!v110)
              goto LABEL_60;
          }
          v149 = (WebCore::Quirks *)*((_QWORD *)v218 + 86);
          if (!v149)
          {
            v211 = v35;
            v149 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v218);
            v35 = v211;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v149, v35);
          v226[0] = 8;
          v150 = v219;
          *(_OWORD *)&v226[4] = *v220;
          v226[20] = 0;
          v151 = *((unsigned int *)v219 + 3);
          if ((_DWORD)v151 == *((_DWORD *)v219 + 2))
          {
            v206 = v219;
            v152 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v151 + 1, (unint64_t)v226);
            v150 = v206;
            v153 = (uint64_t)*v206 + 24 * *((unsigned int *)v206 + 3);
            v154 = *(_OWORD *)v152;
            v155 = *((_QWORD *)v152 + 2);
          }
          else
          {
            v153 = (uint64_t)*v219 + 24 * v151;
            v154 = *(_OWORD *)v226;
            v155 = *(_QWORD *)&v226[16];
          }
          *(_QWORD *)(v153 + 16) = v155;
          *(_OWORD *)v153 = v154;
          ++*((_DWORD *)v150 + 3);
          *(_DWORD *)v222 |= 0x200u;
        }
      }
LABEL_60:
      v38 = (const WebCore::EventTarget *)**((_QWORD **)&v217 + 1);
      v39 = *(_QWORD *)(**((_QWORD **)&v217 + 1) + 16);
      if ((v39 & 0x1000000000000) != 0)
      {
        v72 = v39 & 0xFFFFFFFFFFFFLL;
        v73 = *(unsigned int *)(v72 + 28);
        if ((_DWORD)v73)
        {
          v74 = *(_QWORD **)(v72 + 16);
          v75 = 32 * v73;
          while (*v74 != v36[188])
          {
            v74 += 4;
            v75 -= 32;
            if (!v75)
              goto LABEL_61;
          }
          v116 = (WebCore::Quirks *)*((_QWORD *)v218 + 86);
          if (!v116)
          {
            v194 = (const WebCore::EventTarget *)**((_QWORD **)&v217 + 1);
            v116 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v218);
            v38 = v194;
          }
          WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v116, v38);
          v226[0] = 6;
          v117 = v219;
          *(_OWORD *)&v226[4] = *v220;
          v226[20] = 0;
          v118 = *((unsigned int *)v219 + 3);
          if ((_DWORD)v118 == *((_DWORD *)v219 + 2))
          {
            v119 = WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v118 + 1, (unint64_t)v226);
            v120 = (uint64_t)*v117 + 24 * *((unsigned int *)v117 + 3);
            v121 = *(_OWORD *)v119;
            v122 = *((_QWORD *)v119 + 2);
          }
          else
          {
            v120 = (uint64_t)*v219 + 24 * v118;
            v121 = *(_OWORD *)v226;
            v122 = *(_QWORD *)&v226[16];
          }
          *(_QWORD *)(v120 + 16) = v122;
          *(_OWORD *)v120 = v121;
          ++*((_DWORD *)v117 + 3);
          *(_DWORD *)v222 |= 0x10000u;
        }
      }
LABEL_61:
      v40 = (WebCore::Quirks *)v9[86];
      if (!v40)
        v40 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v9);
      shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::Quirks::shouldDispatchSimulatedMouseEvents(v40, v225);
      if ((_DWORD)shouldDispatchSimulatedMouseEvents)
      {
        WebCore::Document::collectTouchRectsForDocument(WebCore::Document&,WTF::Vector<WebCore::Document::TouchEventRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()((char *)&v217, 0, 17);
        WebCore::Document::collectTouchRectsForDocument(WebCore::Document&,WTF::Vector<WebCore::Document::TouchEventRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()((char *)&v217, 1u, 18);
        shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::Document::collectTouchRectsForDocument(WebCore::Document&,WTF::Vector<WebCore::Document::TouchEventRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator()((char *)&v217, 2u, 19);
      }
      if (v223 && (*((_WORD *)v225 + 14) & 0xF000) != 0x9000)
      {
        *(_QWORD *)v226 = WebCore::eventRectRelativeToRoot((WebCore *)v9, *(WebCore::RenderLayer ***)(*(_QWORD *)(*((_QWORD *)v225 + 5) + 8) + 1944), v3);
        *(_QWORD *)&v226[8] = v41;
        shouldDispatchSimulatedMouseEvents = (WebCore *)WebCore::Document::collectTouchEventRectsForChildRenderers(v9, (uint64_t)v33, (int *)v226, &v224, SHIDWORD(v223), v223, (uint64_t)&v215);
      }
      goto LABEL_68;
    }
LABEL_6:
    v5 = v6[11];
    if (!v5)
    {
      v7 = *(_QWORD *)(v6[6] + 8);
      if (!v7)
        goto LABEL_245;
      v5 = v6[9];
      if (!v5)
        break;
    }
  }
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 56);
    if (!v8)
      break;
    v7 = *(_QWORD *)(v8 + 8);
    if (!v7)
      break;
    v5 = *(_QWORD *)(v7 + 72);
    if (v5)
      goto LABEL_5;
  }
LABEL_245:
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 560));
  v196 = *(WTF **)(v1 + 640);
  if (v196)
  {
    *(_QWORD *)(v1 + 640) = 0;
    *(_DWORD *)(v1 + 648) = 0;
    WTF::fastFree(v196, v195);
  }
  *(_QWORD *)(v1 + 640) = v215;
  v197 = v216;
  v215 = 0;
  v216 = 0;
  *(_QWORD *)(v1 + 648) = v197;
  v198 = *(WTF **)(v1 + 656);
  if (v198)
  {
    *(_QWORD *)(v1 + 656) = 0;
    *(_DWORD *)(v1 + 664) = 0;
    WTF::fastFree(v198, v195);
  }
  *(_QWORD *)(v1 + 656) = v213;
  v199 = v214;
  v213 = 0;
  v214 = 0;
  *(_QWORD *)(v1 + 664) = v199;
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 560));
  v201 = v213;
  if (v213)
  {
    v213 = 0;
    LODWORD(v214) = 0;
    WTF::fastFree(v201, v200);
  }
  v202 = v215;
  if (v215)
  {
    v215 = 0;
    LODWORD(v216) = 0;
    WTF::fastFree(v202, v200);
  }
  *(_BYTE *)(v1 + 672) = 0;
  return kdebug_trace();
}

char *WTF::Vector<std::optional<std::pair<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableBlockIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextTableIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  WTF *v25;
  __int128 v26;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 24 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v16 = *(WTF **)a1;
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = v11 + v13;
          v15 = *(_OWORD *)((char *)v5 + v13);
          *(_QWORD *)(v14 + 16) = *(_QWORD *)((char *)v5 + v13 + 16);
          *(_OWORD *)v14 = v15;
          v13 += 24;
        }
        while (24 * v6 != v13);
        v16 = *(WTF **)a1;
        if (v5)
        {
          if (v16 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v16 = *(WTF **)a1;
        }
        return (char *)v16 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1942597DCLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v19 = a2;
  if (v19 > v17)
  {
    if (v19 >= 0xAAAAAAB)
      goto LABEL_33;
    v20 = *(unsigned int *)(a1 + 12);
    v21 = 24 * v19;
    v22 = WTF::fastMalloc((WTF *)(24 * v19));
    *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v22;
    if ((_DWORD)v20)
    {
      v24 = 24 * v20;
      v25 = v5;
      do
      {
        v26 = *(_OWORD *)v25;
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v22 = v26;
        v22 += 24;
        v25 = (WTF *)((char *)v25 + 24);
        v24 -= 24;
      }
      while (v24);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v23);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::Page::setLoadSchedulingMode(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if (*(unsigned __int8 *)(result + 1684) != a2)
  {
    v3 = result;
    *(_BYTE *)(result + 1684) = v2;
    v4 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v4)
    {
      v6 = v3;
      v5 = WebCore::s_platformStrategies;
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      v3 = v6;
      *(_QWORD *)(v5 + 8) = v4;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v3);
  }
  return result;
}

WebCore::ScrollAnchoringController *WebCore::RenderLayerScrollableArea::updateScrollAnchoringElement(WebCore::RenderLayerScrollableArea *this)
{
  WebCore::ScrollAnchoringController *result;

  result = (WebCore::ScrollAnchoringController *)*((_QWORD *)this + 22);
  if (result)
    return (WebCore::ScrollAnchoringController *)WebCore::ScrollAnchoringController::updateAnchorElement(result);
  return result;
}

void WebCore::PageColorSampler::sampleTop(WebCore::PageColorSampler *this, WebCore::Page *a2)
{
  double v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  int v20;
  __int128 *v21;
  unint64_t v22;
  unsigned __int32 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  signed int v29;
  unsigned int v30;
  int v31;
  __int128 v32;
  char v33;
  double v34[4];
  __int128 v35;
  _OWORD v36[3];
  __int128 v37;

  v3 = *(double *)(*((_QWORD *)a2 + 14) + 528);
  if (v3 <= 0.0)
  {
    *(_QWORD *)this = 0;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v5 = *((_QWORD *)a2 + 20);
  if (v5)
    v6 = *(_BYTE *)(v5 + 144) == 0;
  else
    v6 = 0;
  if (!v6 || (v7 = *(_QWORD *)(v5 + 296)) == 0)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return;
  }
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(_QWORD *)(v5 + 288);
  if (!v8)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    goto LABEL_16;
  }
  ++*(_DWORD *)(v8 + 8);
  if (WebCore::LocalFrameView::needsLayout((WebCore::LocalFrameView *)v8)
    || !*(_BYTE *)(v8 + 1375)
    || !WebCore::LocalFrameView::hasContentfulDescendants((WebCore::LocalFrameView *)v8)
    || (WebCore::ContentfulPaintChecker::qualifiesForContentfulPaint((WebCore::ContentfulPaintChecker *)v8, a2) & 1) == 0)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    goto LABEL_14;
  }
  v9 = 0;
  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  v35 = 0u;
  v29 = WebCore::ScrollView::contentsSize((WebCore::ScrollView *)v8) - 1;
  v10 = 5;
  do
  {
    v30 = (unint64_t)(v9 * v29) >> 2;
    v31 = 0;
    WebCore::sampleColor((uint64_t)&v32, (WebCore *)v7, &v30);
    if (v33)
    {
      v12 = &v36[v9 - 1];
      *v12 = v32;
      if (!v9)
        goto LABEL_32;
      v13 = v9 - 1;
      if (v9 == 1)
        v14 = 0;
      else
        v14 = v9;
      v15 = WebCore::colorDifference((uint64_t)&v36[v13 - 1], (uint64_t)v12);
      v34[v13] = v15;
      if (v15 > v3)
      {
        if ((unint64_t)(v14 - 4) > 0xFFFFFFFFFFFFFFFCLL)
          goto LABEL_64;
        goto LABEL_40;
      }
      v16 = 0;
      v17 = 0.0;
      do
      {
        if (v10 != v16)
        {
          v11 = v34[v16];
          v17 = v17 + v11;
        }
        ++v16;
      }
      while (v9 != v16);
      if (v17 > v3)
      {
        if ((unint64_t)(v14 - 1) < 3)
        {
          if (v9 != 4 || v10 != 5 || v17 - v15 > v3)
            goto LABEL_64;
        }
        else
        {
LABEL_40:
          if (v10 != 5)
            goto LABEL_64;
        }
        v10 = v14;
      }
    }
    else
    {
      if ((unint64_t)(v9 - 4) > 0xFFFFFFFFFFFFFFFCLL)
        goto LABEL_64;
      v6 = v10 == 5;
      v10 = v9;
      if (!v6)
        goto LABEL_64;
    }
LABEL_32:
    ++v9;
  }
  while (v9 != 5);
  v18 = -1.0;
  v19 = *(double *)(*((_QWORD *)a2 + 14) + 536) + -1.0;
  if (v19 <= 0.0)
    goto LABEL_49;
  v20 = (int)v19;
  if (!v10)
  {
LABEL_47:
    v30 = v29;
    v31 = v20;
    WebCore::sampleColor((uint64_t)&v32, (WebCore *)v7, &v30);
    if (v33)
    {
      v19 = WebCore::colorDifference((uint64_t)&v32, (uint64_t)&v37);
      if (v19 > v3)
        goto LABEL_64;
    }
LABEL_49:
    if (!v10)
    {
      v21 = v36;
      goto LABEL_57;
    }
    if (v10 == 4)
      goto LABEL_60;
    v21 = &v35;
    v22 = 5;
LABEL_52:
    v23 = WebCore::averageColor((uint64_t)v21, v22, v19, v18, v11).u32[0];
    v25 = v24;
    v27 = v26;
    v28 = WTF::fastMalloc((WTF *)0x14);
    *(_DWORD *)v28 = 1;
    *(_DWORD *)(v28 + 4) = v23;
    *(_DWORD *)(v28 + 8) = v25;
    *(_DWORD *)(v28 + 12) = v27;
    *(_DWORD *)(v28 + 16) = 1065353216;
    *(_QWORD *)this = v28 | 0xB0C000000000000;
    goto LABEL_53;
  }
  v30 = 0;
  v31 = (int)v19;
  WebCore::sampleColor((uint64_t)&v32, (WebCore *)v7, &v30);
  if (!v33 || (v19 = WebCore::colorDifference((uint64_t)&v32, (uint64_t)&v35), v19 <= v3))
  {
    if (v10 != 4)
      goto LABEL_47;
LABEL_60:
    v21 = &v35;
LABEL_57:
    v22 = 4;
    goto LABEL_52;
  }
LABEL_64:
  *(_QWORD *)this = 0;
LABEL_53:
  *((_BYTE *)this + 8) = 1;
LABEL_14:
  if (*(_DWORD *)(v8 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  else
    --*(_DWORD *)(v8 + 8);
LABEL_16:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
}

uint64_t WebCore::ScriptedAnimationController::serviceRequestAnimationFrameCallbacks(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  void *v11;
  uint64_t v12;
  WebCore::UserGestureToken **v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  WebCore::InspectorInstrumentation *v23;
  double v24;
  uint64_t v25;
  WebCore::UserGestureToken **v26;
  uint64_t v27;
  WebCore::UserGestureToken *v28;
  void *v29;
  WebCore::TimelineRecordFactory *v30;
  WebCore::Document *v32;
  WTF *v34;
  void *v35;
  char *v36;
  char *v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  WTF *v43;
  WebCore::UserGestureToken *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  WTF *v50;
  void *v51;
  int v52;
  char *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  WTF *v62;
  void *v63;
  WTF *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::ImminentlyScheduledWorkScope *v75;
  WebCore::UserGestureToken *v76;
  _DWORD *v77;
  WTF *v78;
  void *v79;
  WTF *v80;
  void *v81;
  double v82;
  double v83;
  double v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WebCore::ImminentlyScheduledWorkScope *v90;
  WebCore::UserGestureToken *v91;
  _DWORD *v92;
  WTF *v93;
  void *v94;
  WTF *v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  WebCore::InspectorInstrumentation *v103;
  WebCore::UserGestureToken *v104;
  char v105[8];

  if (*(_DWORD *)(result + 20))
  {
    v2 = result;
    if (!*(_DWORD *)(result + 36))
    {
      if (a2 <= *(double *)(result + 40))
        return WebCore::ScriptedAnimationController::scheduleAnimation(*(_QWORD *)(v2 + 24));
      v4 = *(_QWORD *)(result + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 528);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 8);
            if (v7)
            {
              v8 = *(_QWORD *)(v7 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(v8 + 8);
                if (v9)
                {
                  v10 = WebCore::preferredFrameInterval(*(_BYTE *)(v9 + 1168) | *(_BYTE *)(result + 48), *(_QWORD *)(v9 + 316), (*(_QWORD *)(*(_QWORD *)(v9 + 112) + 688) >> 31) & 1);
                  if (v10 > WebCore::Page::preferredRenderingUpdateInterval((WebCore::Page *)v9))
                  {
                    v84 = a2 - *(double *)(v2 + 40);
                    if (v84 < WebCore::ScriptedAnimationController::preferredScriptedAnimationInterval((WebCore::ScriptedAnimationController *)v2))
                      return WebCore::ScriptedAnimationController::scheduleAnimation(*(_QWORD *)(v2 + 24));
                  }
                }
              }
            }
          }
        }
      }
      result = kdebug_trace();
      v12 = *(unsigned int *)(v2 + 20);
      if ((_DWORD)v12)
      {
        if (v12 >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        result = WTF::fastMalloc((WTF *)(24 * v12));
        v13 = (WebCore::UserGestureToken **)result;
        v14 = *(_DWORD *)(v2 + 20);
        if (v14)
        {
          v15 = 0;
          v16 = *(_QWORD *)(v2 + 8);
          do
          {
            v17 = result + v15;
            v18 = v16 + v15;
            v19 = *(_QWORD *)(v16 + v15);
            ++*(_DWORD *)(v19 + 16);
            *(_QWORD *)(result + v15) = v19;
            v20 = *(_DWORD **)(v16 + v15 + 8);
            if (v20)
              ++*v20;
            *(_QWORD *)(v17 + 8) = v20;
            v21 = *(_DWORD **)(v18 + 16);
            if (v21)
              ++*v21;
            *(_QWORD *)(v17 + 16) = v21;
            v15 += 24;
          }
          while (v18 + 24 != v16 + 24 * v14);
        }
      }
      else
      {
        v14 = 0;
        v13 = 0;
      }
      ++*(_DWORD *)v2;
      v22 = *(_QWORD *)(v2 + 24);
      if (v22)
        v23 = *(WebCore::InspectorInstrumentation **)(v22 + 8);
      else
        v23 = 0;
      v103 = v23;
      *((_DWORD *)v23 + 6) += 2;
      if ((_DWORD)v12)
      {
        v24 = round(a2 * 1000.0);
        v25 = 24 * v12;
        v26 = v13 + 1;
        do
        {
          v27 = (uint64_t)*(v26 - 1);
          if (!*(_BYTE *)(v27 + 24))
          {
            *(_BYTE *)(v27 + 24) = 1;
            if (*v26)
            {
              v82 = *((double *)*v26 + 9) + 1.0;
              WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
              if (v82 < v83)
                WTF::RefPtr<WebCore::UserGestureToken,WTF::RawPtrTraits<WebCore::UserGestureToken>,WTF::DefaultRefDerefTraits<WebCore::UserGestureToken>>::operator=(v26, 0);
              v28 = *v26;
              if (*v26)
                ++*(_DWORD *)v28;
            }
            else
            {
              v28 = 0;
            }
            v104 = v28;
            WebCore::UserGestureIndicator::UserGestureIndicator((WTF *)v105, (uint64_t *)&v104, 0, 0);
            v104 = 0;
            if (v28)
            {
              if (*(_DWORD *)v28 == 1)
              {
                WebCore::UserGestureToken::~UserGestureToken(v28, v29);
                WTF::fastFree(v34, v35);
              }
              else
              {
                --*(_DWORD *)v28;
              }
            }
            v30 = (WebCore::TimelineRecordFactory *)*((unsigned int *)*(v26 - 1) + 5);
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v66 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v103, (WebCore::Document *)v29);
              if (v66)
                WebCore::InspectorInstrumentation::willFireAnimationFrameImpl(v66, v30, (uint64_t)v103);
            }
            (*(void (**)(_QWORD, double))(*(_QWORD *)*(v26 - 1) + 40))(*(v26 - 1), v24);
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              v67 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v103, v32);
              if (v67)
                WebCore::InspectorInstrumentation::didFireAnimationFrameImpl(v67);
            }
            WebCore::UserGestureIndicator::~UserGestureIndicator((WebCore::UserGestureIndicator *)v105);
          }
          v26 += 3;
          v25 -= 24;
        }
        while (v25);
        v14 = *(_DWORD *)(v2 + 20);
      }
      v102 = (WTF *)v13;
      v36 = *(char **)(v2 + 8);
      v37 = &v36[24 * v14];
      if (v14)
      {
        v38 = 0;
        v39 = &v36[24 * v14];
        v40 = v39;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)v36 + 24))
          {
            v41 = v36;
            if (v40 != (char *)(*(_QWORD *)(v2 + 8) + 24 * *(unsigned int *)(v2 + 20)))
            {
              if (v39 == v36)
              {
                v41 = v40;
              }
              else
              {
                if (v39 <= v40)
                {
                  v68 = 0;
                  v42 = (v36 - v39) / 24;
                  v69 = (uint64_t)&v40[24 * v42 - 24];
                  do
                  {
                    v70 = &v36[v68];
                    v71 = (_QWORD *)(v69 + v68);
                    v72 = *(_QWORD *)&v36[v68 - 24];
                    *((_QWORD *)v70 - 3) = 0;
                    *v71 = v72;
                    v73 = *(_QWORD *)&v36[v68 - 16];
                    *((_QWORD *)v70 - 2) = 0;
                    v71[1] = v73;
                    v74 = *(_QWORD *)&v36[v68 - 8];
                    *((_QWORD *)v70 - 1) = 0;
                    v71[2] = v74;
                    v75 = *(WebCore::ImminentlyScheduledWorkScope **)&v36[v68 - 8];
                    *((_QWORD *)v70 - 1) = 0;
                    if (v75)
                    {
                      if (*(_DWORD *)v75 == 1)
                      {
                        v97 = &v36[v68];
                        v99 = v68;
                        WebCore::ImminentlyScheduledWorkScope::~ImminentlyScheduledWorkScope(v75, v11);
                        WTF::fastFree(v78, v79);
                        v69 = (uint64_t)&v40[24 * v42 - 24];
                        v70 = v97;
                        v68 = v99;
                      }
                      else
                      {
                        --*(_DWORD *)v75;
                      }
                    }
                    v76 = (WebCore::UserGestureToken *)*((_QWORD *)v70 - 2);
                    *((_QWORD *)v70 - 2) = 0;
                    if (v76)
                    {
                      if (*(_DWORD *)v76 == 1)
                      {
                        v98 = v70;
                        v100 = v68;
                        WebCore::UserGestureToken::~UserGestureToken(v76, v11);
                        WTF::fastFree(v80, v81);
                        v69 = (uint64_t)&v40[24 * v42 - 24];
                        v70 = v98;
                        v68 = v100;
                      }
                      else
                      {
                        --*(_DWORD *)v76;
                      }
                    }
                    v77 = (_DWORD *)*((_QWORD *)v70 - 3);
                    *((_QWORD *)v70 - 3) = 0;
                    if (v77)
                    {
                      if (v77[4] == 1)
                      {
                        v101 = v68;
                        (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 16))(v77);
                        v69 = (uint64_t)&v40[24 * v42 - 24];
                        v68 = v101;
                      }
                      else
                      {
                        --v77[4];
                      }
                    }
                    v68 -= 24;
                  }
                  while (&v36[v68] != v39);
                }
                else
                {
                  WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(v39, v36, v40);
                  v42 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v39) >> 3);
                }
                v41 = &v40[24 * v42];
              }
            }
            v43 = (WTF *)*((_QWORD *)v36 + 2);
            *((_QWORD *)v36 + 2) = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1)
              {
                v46 = *((_QWORD *)v43 + 1);
                if (v46)
                {
                  v47 = *(_QWORD *)(v46 + 8);
                  if (v47)
                    --*(_QWORD *)(v47 + 24);
                  *((_QWORD *)v43 + 1) = 0;
                  do
                  {
                    v48 = __ldaxr((unsigned int *)v46);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, (unsigned int *)v46));
                  if (!v49)
                  {
                    atomic_store(1u, (unsigned int *)v46);
                    WTF::fastFree((WTF *)v46, v11);
                  }
                }
                else
                {
                  *((_QWORD *)v43 + 1) = 0;
                }
                WTF::fastFree(v43, v11);
              }
              else
              {
                --*(_DWORD *)v43;
              }
            }
            v44 = (WebCore::UserGestureToken *)*((_QWORD *)v36 + 1);
            *((_QWORD *)v36 + 1) = 0;
            if (v44)
            {
              if (*(_DWORD *)v44 == 1)
              {
                WebCore::UserGestureToken::~UserGestureToken(v44, v11);
                WTF::fastFree(v50, v51);
              }
              else
              {
                --*(_DWORD *)v44;
              }
            }
            v45 = *(_DWORD **)v36;
            *(_QWORD *)v36 = 0;
            if (v45)
            {
              if (v45[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 16))(v45);
              else
                --v45[4];
            }
            v39 = v36 + 24;
            ++v38;
            v40 = v41;
          }
          else
          {
            v41 = v40;
          }
          v36 += 24;
        }
        while (v36 < v37);
        v36 = *(char **)(v2 + 8);
        v52 = *(_DWORD *)(v2 + 20);
        v37 = v41;
      }
      else
      {
        v52 = 0;
        v38 = 0;
        v39 = v37;
      }
      v53 = &v36[24 * v52];
      if (v39 != v53)
      {
        if (v39 <= v37)
        {
          v85 = &v37[24 * ((v53 - v39) / 24) - 8];
          v86 = v53;
          do
          {
            v87 = *((_QWORD *)v86 - 3);
            v86 -= 24;
            *(_QWORD *)v86 = 0;
            *((_QWORD *)v85 - 2) = v87;
            v88 = *((_QWORD *)v86 + 1);
            *((_QWORD *)v86 + 1) = 0;
            *((_QWORD *)v85 - 1) = v88;
            v89 = *((_QWORD *)v86 + 2);
            *((_QWORD *)v86 + 2) = 0;
            *(_QWORD *)v85 = v89;
            v90 = (WebCore::ImminentlyScheduledWorkScope *)*((_QWORD *)v86 + 2);
            *((_QWORD *)v86 + 2) = 0;
            if (v90)
            {
              if (*(_DWORD *)v90 == 1)
              {
                WebCore::ImminentlyScheduledWorkScope::~ImminentlyScheduledWorkScope(v90, v11);
                WTF::fastFree(v93, v94);
              }
              else
              {
                --*(_DWORD *)v90;
              }
            }
            v91 = (WebCore::UserGestureToken *)*((_QWORD *)v53 - 2);
            *((_QWORD *)v53 - 2) = 0;
            if (v91)
            {
              if (*(_DWORD *)v91 == 1)
              {
                WebCore::UserGestureToken::~UserGestureToken(v91, v11);
                WTF::fastFree(v95, v96);
              }
              else
              {
                --*(_DWORD *)v91;
              }
            }
            v92 = (_DWORD *)*((_QWORD *)v53 - 3);
            *((_QWORD *)v53 - 3) = 0;
            if (v92)
            {
              if (v92[4] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v92 + 16))(v92);
              else
                --v92[4];
            }
            v85 -= 24;
            v53 = v86;
          }
          while (v86 != v39);
        }
        else
        {
          WTF::VectorMover<false,WebCore::ScriptedAnimationController::CallbackData>::move(v39, v53, v37);
        }
      }
      v54 = *(_DWORD *)(v2 + 20);
      *(double *)(v2 + 40) = a2;
      v55 = v54 - v38;
      *(_DWORD *)(v2 + 20) = v55;
      if (v55)
      {
        v56 = *(_QWORD *)(v2 + 24);
        if (v56)
        {
          v57 = *(_QWORD *)(v56 + 8);
          if (v57)
          {
            v58 = *(_QWORD *)(v57 + 528);
            if (v58)
            {
              v59 = *(_QWORD *)(v58 + 8);
              if (v59)
              {
                v60 = *(_QWORD *)(v59 + 24);
                if (v60)
                {
                  v61 = *(_DWORD **)(v60 + 8);
                  if (v61)
                  {
                    ++*v61;
                    WebCore::Page::scheduleRenderingUpdate((uint64_t)v61, 32);
                    if (*v61 == 1)
                    {
                      WebCore::Page::~Page((uint64_t)v61);
                      WTF::fastFree(v64, v65);
                    }
                    else
                    {
                      --*v61;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v103)
      {
        if (*((_DWORD *)v103 + 6) == 2)
        {
          if ((*((_WORD *)v103 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v103, v11);
        }
        else
        {
          *((_DWORD *)v103 + 6) -= 2;
        }
      }
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::ScriptedAnimationController::~ScriptedAnimationController((WebCore::ScriptedAnimationController *)v2, v11);
        WTF::fastFree(v62, v63);
      }
      else
      {
        --*(_DWORD *)v2;
      }
      if ((_DWORD)v12)
        WTF::VectorDestructor<true,WebCore::ScriptedAnimationController::CallbackData>::destruct(v102, (_DWORD *)v102 + 6 * v12);
      if (v102)
        WTF::fastFree(v102, v11);
      return kdebug_trace();
    }
  }
  return result;
}

uint64_t *WebCore::VisitedLinkState::invalidateStyleForLink(uint64_t *this, const WebCore::Element *a2, const WTF::AtomString *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;

  v3 = this[2];
  if (v3)
  {
    v4 = (int)a2;
    v5 = *(_DWORD *)(v3 - 8);
    v6 = v5 & a2;
    v7 = *(_DWORD *)(v3 + 4 * (v5 & a2));
    if (v7 == (_DWORD)a2)
    {
LABEL_6:
      v9 = *(_QWORD *)(this[1] + 8);
      *(_DWORD *)(v9 + 24) += 2;
      v15 = v9;
      v10 = *(_QWORD *)(v9 + 80);
      if (v10)
      {
        while ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
          v10 = *(_QWORD *)(v10 + 56);
          if (!v10)
            return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
        }
        do
        {
LABEL_12:
          *(_DWORD *)(v10 + 24) += 2;
          if ((*(_WORD *)(v10 + 30) & 1) != 0)
          {
            v14 = WebCore::linkHashForElement((WebCore *)v10, a2, a3);
            if (HIDWORD(v14))
            {
              if ((_DWORD)v14 == v4)
                WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)v10);
            }
          }
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
          v11 = *(_QWORD *)(v10 + 80);
          if (!v11)
          {
            if (v10 == v9)
              return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
            while (1)
            {
              v11 = *(_QWORD *)(v10 + 56);
              if (v11)
                break;
              v10 = *(_QWORD *)(v10 + 32);
              if (v10)
                v13 = v10 == v9;
              else
                v13 = 1;
              if (v13)
                return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
            }
          }
          v10 = v11;
        }
        while ((*(_WORD *)(v11 + 28) & 8) != 0);
        while (v11 != v9)
        {
          while (1)
          {
            v10 = *(_QWORD *)(v11 + 56);
            if (v10)
              break;
            v11 = *(_QWORD *)(v11 + 32);
            if (v11)
              v12 = v11 == v9;
            else
              v12 = 1;
            if (v12)
              return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
          }
          v11 = *(_QWORD *)(v11 + 56);
          if ((*(_WORD *)(v10 + 28) & 8) != 0)
            goto LABEL_12;
        }
      }
      return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v15);
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = (v6 + v8) & v5;
        v7 = *(_DWORD *)(v3 + 4 * v6);
        ++v8;
        if (v7 == (_DWORD)a2)
          goto LABEL_6;
      }
    }
  }
  return this;
}

WebCore::ScriptedAnimationController *WebCore::Document::suspendScriptedAnimationControllerCallbacks(WebCore::ScriptedAnimationController *this)
{
  WebCore::ScriptedAnimationController *v1;
  void *v2;

  v1 = (WebCore::ScriptedAnimationController *)*((_QWORD *)this + 291);
  if (v1)
  {
    ++*(_DWORD *)v1;
    WebCore::ScriptedAnimationController::suspend((uint64_t)v1);
    return WTF::RefCounted<WebCore::ScriptedAnimationController>::deref(v1, v2);
  }
  return this;
}

uint64_t WebCore::Document::windowScreenDidChange(WebCore::Document *this, uint64_t a2)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  WTF::Mapper<WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WTF::Observer<void ()>&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((uint64_t)&v8, (uint64_t *)this + 247);
  if (HIDWORD(v9))
  {
    v5 = v8;
    v6 = 8 * HIDWORD(v9);
    do
    {
      if (*(_QWORD *)v5)
      {
        v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (v7)
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), a2);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

uint64_t WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(unsigned int)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorTypeOperations<WTF::WeakPtr<WTF::Observer<void ()>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*(unsigned int **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(unsigned int **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

WebCore::ScriptedAnimationController *WebCore::Document::resumeScriptedAnimationControllerCallbacks(WebCore::ScriptedAnimationController *this)
{
  WebCore::ScriptedAnimationController *v1;
  void *v2;

  v1 = (WebCore::ScriptedAnimationController *)*((_QWORD *)this + 291);
  if (v1)
  {
    ++*(_DWORD *)v1;
    WebCore::ScriptedAnimationController::resume((uint64_t)v1);
    return WTF::RefCounted<WebCore::ScriptedAnimationController>::deref(v1, v2);
  }
  return this;
}

double WebCore::LocalDOMWindow::frozenNowTimestamp(WebCore::LocalDOMWindow *this)
{
  double *v2;
  double v3;

  v2 = (double *)WebCore::LocalDOMWindow::performance(this);
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v2);
  if (*((_BYTE *)this + 288))
    return *((double *)this + 35);
  else
    return *(double *)&WebCore::timePrecision * floor((v3 - v2[21]) / *(double *)&WebCore::timePrecision);
}

uint64_t WebCore::JSRequestAnimationFrameCallback::handleEvent(uint64_t **this, double a2, void *a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::Structure *v11;
  uint64_t v12;
  uint64_t *v14;
  _QWORD *v15;
  _BYTE v16[8];
  _DWORD v17[2];
  WTF *v18;
  _OWORD v19[4];
  uint64_t v20;
  _BYTE v21[8];
  _DWORD *v22;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a3))
    return 2;
  ++*((_DWORD *)this + 4);
  MEMORY[0x19AEA3294](v21, *(_QWORD *)(*(_QWORD *)*this[4] + 56));
  v16[0] = 0;
  v17[1] = 8;
  v18 = (WTF *)((char *)v19 + 8);
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v6 = (int)a2, a2 == (double)(int)v6)
    && ((_DWORD)v6 || (*(_QWORD *)&a2 & 0x8000000000000000) == 0))
  {
    v7 = v6 | 0xFFFE000000000000;
  }
  else
  {
    v7 = *(_QWORD *)&a2 + 0x2000000000000;
  }
  *((_QWORD *)&v19[0] + 1) = v7;
  v17[0] = 1;
  v22 = 0;
  v8 = this[4];
  v9 = *v8;
  if (*v8 && (*(_BYTE *)(v9 + 8) & 3) == 0 && *(_QWORD *)v9)
  {
    v10 = v8[2];
    if (!v10 || (*(_BYTE *)(v10 + 8) & 3) != 0)
      v11 = 0;
    else
      v11 = *(JSC::Structure **)v10;
    WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v9, v11, 10, (uint64_t)v16, 0, 0, (uint64_t *)&v22);
    v12 = 0;
    v5 = v22;
    if (v22)
    {
      WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[4][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v22, 0, 0, 0);
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
  }
  if (*(_QWORD *)&v19[0])
  {
    v22 = v17;
    v14 = *(uint64_t **)&v19[0];
    v15 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v19[0], (uint64_t *)&v22);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v14, v15);
  }
  if (v18 != (WTF *)((char *)v19 + 8) && v18)
    WTF::fastFree(v18, v5);
  MEMORY[0x19AEA32A0](v21);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v12;
}

_QWORD *WebCore::JSPerformanceEntryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

double WebCore::FragmentedSharedBuffer::create@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v3 + 24;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(v3 + 16) = 1;
  *(_BYTE *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *a1 = v3;
  return result;
}

uint64_t WebCore::IOSApplication::isEventbrite(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (byte_1ECE8175A == 1)
    return byte_1ECE81759 != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  byte_1ECE81759 = IsEqualTo;
  byte_1ECE8175A = 1;
  return result;
}

void sub_19425ABE0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

__n128 WebCore::EventRegion::EventRegion(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __n128 *a5, __n128 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 36) = v7;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a4;
  v8 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  result = *a5;
  *(__n128 *)(a1 + 64) = *a5;
  v10 = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 112) = 0;
  if (a6[1].n128_u8[8])
  {
    result = *a6;
    *(__n128 *)(a1 + 88) = *a6;
    v11 = a6[1].n128_u64[0];
    a6[1].n128_u64[0] = 0;
    *(_QWORD *)(a1 + 104) = v11;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 32) = v7;
  LODWORD(v7) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 36) = v7;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a4;
  v8 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  result = *a5;
  *(__n128 *)(a1 + 64) = *a5;
  v10 = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = v10;
  *(_BYTE *)(a1 + 112) = 0;
  if (a6[1].n128_u8[8])
  {
    result = *a6;
    *(__n128 *)(a1 + 88) = *a6;
    v11 = a6[1].n128_u64[0];
    a6[1].n128_u64[0] = 0;
    *(_QWORD *)(a1 + 104) = v11;
    *(_BYTE *)(a1 + 112) = 1;
  }
  return result;
}

uint64_t *WebCore::DatabaseManager::singleton(WebCore::DatabaseManager *this)
{
  {
    WebCore::DatabaseManager::singleton(void)::instance = 0;
    *(_QWORD *)&byte_1ECE88AF0 = 1;
    qword_1ECE88AF8 = 0;
  }
  return &WebCore::DatabaseManager::singleton(void)::instance;
}

void WebCore::IOSurface::createPlatformContext(IOSurfaceRef *this@<X0>, PAL **a2@<X8>)
{
  PAL *v4;
  unsigned int v5;
  CGContext *v6;

  WebCore::IOSurface::ensureColorSpace(this);
  if (*((_BYTE *)this + 16))
  {
    v4 = (PAL *)CGIOSurfaceContextCreate();
    *a2 = v4;
    v6 = (CGContext *)*((unsigned int *)this + 10);
    if ((_DWORD)v6)
      PAL::softLinkCoreGraphicsCGContextSetOwnerIdentity(v4, v6, v5);
  }
  else
  {
    __break(1u);
  }
}

void sub_19425AD8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  const void *v2;

  *v1 = 0;
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

void WebCore::IOSurface::ensureColorSpace(IOSurfaceRef *this)
{
  WebCore::DestinationColorSpace *v2;
  CFTypeRef *v3;
  int v4;
  __IOSurface *v5;
  IOSurfaceRef v6;
  CFTypeRef cf;
  unsigned __int8 v8;

  if (!*((_BYTE *)this + 16))
  {
    WebCore::IOSurface::surfaceColorSpace(this, (uint64_t)&cf);
    v3 = (CFTypeRef *)WebCore::DestinationColorSpace::SRGB(v2);
    v4 = v8;
    if (v8)
    {
      v5 = (__IOSurface *)cf;
      cf = 0;
    }
    else
    {
      v5 = (__IOSurface *)*v3;
      if (*v3)
        CFRetain(*v3);
    }
    if (*((_BYTE *)this + 16))
    {
      v6 = this[1];
      this[1] = v5;
      if (v6)
        CFRelease(v6);
    }
    else
    {
      this[1] = v5;
      *((_BYTE *)this + 16) = 1;
    }
    if (v4)
    {
      if (cf)
        CFRelease(cf);
    }
  }
}

void sub_19425AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PAL::initCoreGraphicsCGContextSetOwnerIdentity(PAL *this, CGContext *a2)
{
  if (PAL::initCoreGraphicsCGContextSetOwnerIdentity(CGContext *,unsigned int)::once != -1)
    dispatch_once(&PAL::initCoreGraphicsCGContextSetOwnerIdentity(CGContext *,unsigned int)::once, &__block_literal_global_4);
  return PAL::softLinkCoreGraphicsCGContextSetOwnerIdentity(this, a2, PAL::softLinkCoreGraphicsCGContextSetOwnerIdentity);
}

float WebCore::RenderLayerBacking::layerContainsBitmapOnly(WebCore::RenderLayerBacking *this, const WebCore::GraphicsLayer *a2, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  WebCore::CachedImage *v9;
  WTF *v10;
  int v11;

  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  if ((*(_BYTE *)(v3 + 23) & 0x60) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16);
    v5 = *(unsigned __int8 *)(v4 + 52);
    v6 = (v5 & 0xE) == 0 || (v5 & 0xF) == 0;
    if (v6 || (result = *(float *)(v4 + 48), ((result < 3.0) & (v5 >> 4)) == 0 && result <= 0.0))
    {
      if (*(_BYTE *)(v3 + 46) != 13 && (*(_BYTE *)(v3 + 52) & 7) == 3 && (*(_BYTE *)(v3 + 53) & 1) != 0)
      {
        ++*(_DWORD *)(v3 + 16);
        v8 = *(_QWORD *)(*(_QWORD *)(v3 + 224) + 24);
        if (v8)
        {
          v9 = *(WebCore::CachedImage **)(v8 + 8);
          if (v9)
          {
            if (*((_QWORD *)v9 + 86))
            {
              v10 = WebCore::CachedImage::imageForRenderer(v9, (const WebCore::RenderObject *)v3);
              if (v10)
                (*(void (**)(WTF *))(*(_QWORD *)v10 + 16))(v10);
            }
          }
        }
        v11 = *(_DWORD *)(v3 + 16);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x19425AFB8);
        }
        *(_DWORD *)(v3 + 16) = v11 - 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SQLiteDatabase::turnOnIncrementalAutoVacuum(WebCore::SQLiteDatabase *this)
{
  uint64_t v2;
  int v3;
  sqlite3 *v4;
  int v5;
  uint64_t result;
  sqlite3 *v7;
  int v8;
  sqlite3_stmt *v9[2];
  unsigned int v10;
  char v11;

  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA auto_vacuum", 19, (uint64_t)v9);
  v2 = v10;
  if (v10)
  {
    if (v10 != -1)
      ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v10])(&v11, v9);
    return 0;
  }
  v3 = WebCore::SQLiteStatement::columnInt(v9, 0);
  v4 = (sqlite3 *)*((_QWORD *)this + 1);
  if (v4)
    v5 = sqlite3_errcode(v4);
  else
    v5 = *((_DWORD *)this + 13);
  ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v2])(&v11, v9);
  if (v5 != 100)
    return 0;
  if (v3 == 2)
    return 1;
  if (v3 == 1)
    return WebCore::SQLiteDatabase::executeCommand((uint64_t)this, "PRAGMA auto_vacuum = 2", 23);
  result = WebCore::SQLiteDatabase::executeCommand((uint64_t)this, "PRAGMA auto_vacuum = 2", 23);
  if ((_DWORD)result)
  {
    WebCore::SQLiteDatabase::runVacuumCommand(this);
    v7 = (sqlite3 *)*((_QWORD *)this + 1);
    if (v7)
      v8 = sqlite3_errcode(v7);
    else
      v8 = *((_DWORD *)this + 13);
    return v8 == 0;
  }
  return result;
}

uint64_t WebCore::SQLiteStatement::columnInt(sqlite3_stmt **this, int a2)
{
  if ((sqlite3_stmt_busy(this[1]) || WebCore::SQLiteStatement::step(this) == 100)
    && sqlite3_data_count(this[1]) > a2)
  {
    return sqlite3_column_int(this[1], a2);
  }
  else
  {
    return 0;
  }
}

unint64_t WebCore::GraphicsLayerCA::platformCALayerAnimationStarted(uint64_t a1, const WTF::StringImpl **a2, double a3)
{
  _QWORD *v6;
  unint64_t result;
  uint64_t v8;
  const WTF::StringImpl **v9;

  v6 = (_QWORD *)(a1 + 808);
  v9 = a2;
  result = WTF::Vector<WebCore::GraphicsLayerCA::LayerPropertyAnimation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<WebCore::GraphicsLayerCA::platformCALayerAnimationStarted(WTF::String const&,WTF::MonotonicTime)::$_0>((uint64_t *)(a1 + 808), &v9);
  if (result == -1)
    return (*(uint64_t (**)(_QWORD, uint64_t, const WTF::StringImpl **, double))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a1, a2, a3);
  if (result < *(unsigned int *)(a1 + 820))
  {
    v8 = *v6 + 56 * result;
    if (!*(_BYTE *)(v8 + 40))
      *(_BYTE *)(v8 + 40) = 1;
    *(double *)(v8 + 32) = a3;
    return (*(uint64_t (**)(_QWORD, uint64_t, const WTF::StringImpl **, double))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24), a1, a2, a3);
  }
  __break(0xC471u);
  return result;
}

void WebCore::GraphicsLayerCA::LayerPropertyAnimation::~LayerPropertyAnimation(WebCore::GraphicsLayerCA::LayerPropertyAnimation *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  _DWORD *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

WTF::StringImpl *WebCore::GraphicsLayerCA::setAnimationOnLayer(WebCore::GraphicsLayerCA *this, WebCore::GraphicsLayerCA::LayerPropertyAnimation *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int16 *v16;
  __int16 v17;
  WTF::StringImpl *v18;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 != 8)
  {
    if (v4 == 6)
    {
      v6 = (char *)this + 664;
LABEL_5:
      v5 = *(_QWORD *)v6;
      goto LABEL_6;
    }
LABEL_3:
    v5 = *((_QWORD *)this + 79);
    if (v5)
      goto LABEL_6;
    v6 = (char *)this + 624;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)this + 85);
  if (!v5)
    goto LABEL_3;
LABEL_6:
  v7 = *(_QWORD *)a2;
  if (*((_BYTE *)a2 + 40))
    (*(void (**)(_QWORD, double))(*(_QWORD *)v7 + 64))(*(_QWORD *)a2, *((double *)a2 + 4) - *((double *)a2 + 3));
  WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier((WebCore::GraphicsLayerCA::LayerPropertyAnimation *)&v18, (uint64_t)a2);
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 192))(v5, &v18);
  (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)v5 + 184))(v5, &v18, v7);
  v9 = (WTF::StringImpl **)*((_QWORD *)this + 86);
  if (v9)
  {
    if (v4 == 6)
    {
      v9 += 2;
    }
    else if (*((_QWORD *)this + 79))
    {
      ++v9;
    }
    v11 = *v9;
    v12 = (WTF::StringImpl *)WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::begin(*v9);
    v13 = v12;
    v14 = v8;
    if (v11)
      v11 = (WTF::StringImpl *)((char *)v11 + 16 * *((unsigned int *)v11 - 1));
    if (v11 != v12)
    {
      do
      {
        if (!*((_QWORD *)this + 27)
          || (v15 = *(_QWORD *)v13) == 0
          || !*(_DWORD *)(v15 + 4)
          || ((v16 = *(__int16 **)(v15 + 8), (*(_BYTE *)(v15 + 16) & 4) == 0)
            ? (v17 = *v16)
            : (LOBYTE(v17) = *(_BYTE *)v16),
              (v17 & 1) == 0))
        {
          (*(void (**)(_QWORD, WTF::StringImpl **))(**((_QWORD **)v13 + 1) + 192))(*((_QWORD *)v13 + 1), &v18);
          (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t))(**((_QWORD **)v13 + 1) + 184))(*((_QWORD *)v13 + 1), &v18, v7);
        }
        while (1)
        {
          v13 = (WTF::StringImpl *)((char *)v13 + 16);
          if (v13 == v14)
            break;
          if ((unint64_t)(*(_QWORD *)v13 + 1) > 1)
            goto LABEL_35;
        }
        v13 = v14;
LABEL_35:
        ;
      }
      while (v13 != v11);
    }
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SQLiteDatabase::useWALJournalMode(WebCore::SQLiteDatabase *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  sqlite3_stmt *v6[2];
  unsigned int v7;
  char v8;
  char v9;

  *((_BYTE *)this + 21) = 1;
  WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v8);
  WebCore::SQLiteDatabase::prepareStatement((uint64_t)this, "PRAGMA journal_mode=WAL;", 25, (uint64_t)v6);
  v2 = v7;
  if (v7)
  {
    if (v7 != -1)
      ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v7])(&v9, v6);
    WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v8);
    return 0;
  }
  v3 = WebCore::SQLiteStatement::step(v6);
  ((void (*)(char *, sqlite3_stmt **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v2])(&v9, v6);
  WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v8);
  if (v3 != 100)
    return 0;
  v4 = 1;
  WebCore::SQLiteDatabase::checkpoint((uint64_t)this, 1);
  return v4;
}

void WebCore::SQLiteDatabase::checkpoint(uint64_t a1, int a2)
{
  int v4;
  char v5;

  WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v5);
  if (a2 == 1)
  {
    v4 = 3;
LABEL_3:
    sqlite3_wal_checkpoint_v2(*(sqlite3 **)(a1 + 8), 0, v4, 0, 0);
    WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v5);
    return;
  }
  if (!a2)
  {
    v4 = 1;
    goto LABEL_3;
  }
  __break(0xC471u);
}

uint64_t WebCore::SQLiteDatabase::open(uint64_t a1, WTF::FileSystemImpl *a2, unsigned int a3, char a4)
{
  int v9;
  const WTF::String *v10;
  const char *v11;
  void *v12;
  int v13;
  WTF *v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  uint64_t v28;
  WTF *v29;
  int v30;
  NSObject *v31;
  void *v32;
  WTF::StringImpl *v33;
  void *v35;
  uint64_t v36;
  WTF *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  char v41;
  uint8_t buf[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  std::call_once[abi:sn180100]<WebCore::initializeSQLiteIfNecessary(void)::$_0>((uint64_t)&v40);
  WebCore::SQLiteDatabase::close((WebCore::SQLiteDatabase *)a1);
  v40 = a1;
  v41 = 1;
  if (__ldaxr(byte_1ECE841D9))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](byte_1ECE841D9);
    goto LABEL_4;
  }
  if (__stxr(1u, byte_1ECE841D9))
    goto LABEL_3;
LABEL_4:
  if (_MergedGlobals_246)
  {
    v26 = "opening database is forbidden";
    goto LABEL_47;
  }
  if (a3 > 2)
    v9 = 32;
  else
    v9 = dword_1969F9968[(char)a3];
  WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v39);
  WTF::FileSystemImpl::fileSystemRepresentation(a2, v10);
  if (*(_QWORD *)buf)
    v11 = (const char *)(*(_QWORD *)buf + 16);
  else
    v11 = 0;
  v13 = sqlite3_open_v2(v11, (sqlite3 **)(a1 + 8), v9, 0);
  v14 = *(WTF **)buf;
  *(_QWORD *)buf = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v12);
    else
      --*(_DWORD *)v14;
  }
  if (v13)
  {
    WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v39);
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_50;
    *(_DWORD *)(a1 + 52) = v13;
    v26 = "sqlite_open returned null";
LABEL_47:
    WTF::CString::CString((WTF::CString *)buf, v26);
    v28 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v29 = *(WTF **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v28;
    if (v29)
    {
      v30 = *(_DWORD *)v29 - 1;
      if (*(_DWORD *)v29 == 1)
      {
        WTF::fastFree(v29, v27);
        v29 = *(WTF **)buf;
        *(_QWORD *)buf = 0;
        if (!v29)
          goto LABEL_50;
        v30 = *(_DWORD *)v29 - 1;
        if (*(_DWORD *)v29 == 1)
        {
          WTF::fastFree(v29, v35);
          goto LABEL_50;
        }
      }
      *(_DWORD *)v29 = v30;
    }
LABEL_50:
    v15 = 0;
    goto LABEL_18;
  }
  if ((a4 & 1) != 0)
    WebCore::SQLiteFileSystem::setCanSuspendLockedFileAttribute((WTF::StringImpl **)a2, (const WTF::String *)v12);
  WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)&v39);
  v15 = 1;
LABEL_18:
  v16 = __ldxr(byte_1ECE841D9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_42;
  }
  if (__stlxr(0, byte_1ECE841D9))
LABEL_42:
    WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE841D9);
  if (!v15)
    goto LABEL_60;
  WebCore::SQLiteDatabase::overrideUnauthorizedFunctions((sqlite3 **)a1);
  v17 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v17)
    v17 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17;
  if (v19)
    WTF::ThreadSafeRefCounted<WTF::Thread,(WTF::DestructionThread)0>::deref(v19);
  if (sqlite3_extended_result_codes(*(sqlite3 **)(a1 + 8), 1))
    goto LABEL_60;
  WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)buf);
  WebCore::SQLiteDatabase::executeCommand(a1, "PRAGMA temp_store = MEMORY;", 28);
  WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)buf);
  if ((MEMORY[0x19AEA53F4](*(_QWORD *)a2, ":memory:", 8) & 1) == 0)
  {
    if (a3 && !WebCore::SQLiteDatabase::useWALJournalMode((WebCore::SQLiteDatabase *)a1))
    {
LABEL_60:
      v25 = 0;
      goto LABEL_61;
    }
    v20 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v20 += 2;
    v38 = v20;
    WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v38, (int8x16_t *)"-shm", 5, &v39);
    v22 = v38;
    v38 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    if (WTF::FileSystemImpl::fileExists((WTF::FileSystemImpl *)&v39, v21)
      && (WTF::FileSystemImpl::isSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)&v39, v23) & 1) == 0)
    {
      v31 = qword_1ECE7CA90;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_FAULT))
      {
        WTF::String::latin1((WTF::String *)&v39);
        v36 = v37 ? (uint64_t)v37 + 16 : 0;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v36;
        _os_log_fault_impl(&dword_1940B8000, v31, OS_LOG_TYPE_FAULT, "Opened an SQLite database with a Class A -shm file. This may trigger a crash when the user locks the device. (%s)", buf, 0xCu);
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::fastFree(v37, v32);
          else
            --*(_DWORD *)v37;
        }
      }
      if (!WTF::FileSystemImpl::makeSafeToUseMemoryMapForPath((WTF::FileSystemImpl *)&v39, (const WTF::String *)v32))
      {
        v33 = v39;
        v39 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v23);
          else
            *(_DWORD *)v33 -= 2;
        }
        goto LABEL_60;
      }
    }
    v24 = v39;
    v39 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v23);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  v41 = 0;
  v25 = 1;
LABEL_61:
  WTF::ScopeExit<WebCore::SQLiteDatabase::open(WTF::String const&,WebCore::SQLiteDatabase::OpenMode,WTF::OptionSet<WebCore::SQLiteDatabase::OpenOptions>)::$_0>::~ScopeExit(&v40);
  return v25;
}

void WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter(WebCore::SQLiteTransactionInProgressAutoCounter *this)
{
  int v2;

  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
LABEL_5:
  if (WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient)
  {
    if (!--WebCore::SQLiteDatabaseTracker::s_transactionInProgressCounter)
      (*(void (**)(void))(*(_QWORD *)WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient + 24))();
  }
  v2 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v2 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
}

WebCore::SQLiteTransactionInProgressAutoCounter *WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter(WebCore::SQLiteTransactionInProgressAutoCounter *this)
{
  int v4;

  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
    goto LABEL_5;
  }
  if (__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    goto LABEL_4;
LABEL_5:
  if (WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient)
  {
    if (!WebCore::SQLiteDatabaseTracker::s_transactionInProgressCounter++)
      (*(void (**)(void))(*(_QWORD *)WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient + 16))();
  }
  v4 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  return this;
}

void WebCore::SQLiteDatabase::close(WebCore::SQLiteDatabase *this)
{
  sqlite3 *v1;
  unsigned __int8 *v3;
  int v5;
  int v6;
  NSObject *v7;
  sqlite3 *v8;
  uint64_t v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = (sqlite3 *)*((_QWORD *)this + 1);
  if (!v1)
    return;
  v3 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C]((char *)this + 48);
    goto LABEL_6;
  }
  if (__stxr(1u, v3))
    goto LABEL_5;
LABEL_6:
  *((_QWORD *)this + 1) = 0;
  v5 = __ldxr(v3);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v3))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (*((_BYTE *)this + 21))
  {
    WebCore::SQLiteTransactionInProgressAutoCounter::SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)v11);
    v6 = sqlite3_close(v1);
    WebCore::SQLiteTransactionInProgressAutoCounter::~SQLiteTransactionInProgressAutoCounter((WebCore::SQLiteTransactionInProgressAutoCounter *)v11);
  }
  else
  {
    v6 = sqlite3_close(v1);
  }
  if (v6)
  {
    v7 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      v8 = (sqlite3 *)*((_QWORD *)this + 1);
      if (v8)
      {
        v10 = sqlite3_errmsg(v8);
      }
      else
      {
        v9 = *((_QWORD *)this + 7);
        if (v9)
          v10 = (const char *)(v9 + 16);
        else
          v10 = "database is not open";
      }
      v11[0] = 67109378;
      v11[1] = v6;
      v12 = 2082;
      v13 = v10;
      _os_log_error_impl(&dword_1940B8000, v7, OS_LOG_TYPE_ERROR, "SQLiteDatabase::close: Failed to close database (%d) - %{public}s", (uint8_t *)v11, 0x12u);
    }
  }
}

uint64_t WTF::makeString<WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, int8x16_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t result;

  v7 = *a1;
  if (a3)
  {
    v8 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x19425BDA4);
    }
  }
  else
  {
    v8 = 0;
  }
  if (!v7)
  {
    v10 = v8;
LABEL_7:
    v11 = 1;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 < 0 || (v10 = (v9 + v8), __OFADD__(v9, (_DWORD)v8)))
  {
    *a4 = 0;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    goto LABEL_7;
  v11 = 0;
LABEL_8:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v10, v11, v7, a2, v8, a4);
  if (!*a4)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x19425BD78);
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *__dst, uint64_t a2, _BYTE *__src, unsigned int a4)
{
  _BYTE *v6;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  unsigned __int128 *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  char v14;

  v6 = __dst;
  if (a2)
  {
    v8 = *(_BYTE **)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v9)
      {
        if ((_DWORD)v9 == 1)
          *__dst = *v8;
        else
          __dst = memcpy(__dst, v8, v9);
      }
    }
    else
    {
      if (v9 < 0x10)
      {
        v11 = (unsigned __int128 *)__dst;
      }
      else
      {
        v11 = (unsigned __int128 *)&__dst[v9 & 0xFFFFFFF0];
        v12 = (unsigned __int128 *)__dst;
        do
        {
          v13 = (unsigned __int128)vld2q_s8(v8);
          v8 += 32;
          *v12++ = v13;
        }
        while (v12 != v11);
      }
      while (v11 != (unsigned __int128 *)&__dst[v9])
      {
        v14 = *v8;
        v8 += 2;
        *(_BYTE *)v11 = v14;
        v11 = (unsigned __int128 *)((char *)v11 + 1);
      }
    }
    v10 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v10 = 0;
  }
  if (a4)
  {
    __dst = &v6[v10];
    if (a4 == 1)
      *__dst = *__src;
    else
      return memcpy(__dst, __src, a4);
  }
  return __dst;
}

_QWORD *WebCore::GraphicsLayerCA::LayerPropertyAnimation::animationIdentifier(WebCore::GraphicsLayerCA::LayerPropertyAnimation *this, uint64_t a2)
{
  WTF::StringImpl *v3;
  _QWORD *result;
  WTF::StringImpl *v5;

  v3 = *(WTF::StringImpl **)(a2 + 8);
  if (v3)
    *(_DWORD *)v3 += 2;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(this, (uint64_t)v3, 95, *(unsigned __int8 *)(a2 + 16), 95, *(_DWORD *)(a2 + 20));
  if (*(_QWORD *)this)
  {
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(char *__dst, uint64_t a2, char a3, unsigned int a4, char a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v13;

  v13 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v13, __dst);
  v11 = v13;
  if (v13)
    v11 = *(unsigned int *)(v13 + 4);
  __dst[v11] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(&__dst[v11 + 1], a4, a5, a6);
}

WTF::StringImpl *WebCore::IDBDatabaseIdentifier::databaseDirectoryRelativeToRoot@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  WTF::FileSystemImpl::pathByAppendingComponent();
  WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)a1, &v10);
  WTF::FileSystemImpl::pathByAppendingComponent();
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (WebCore::operator==(a1, a1 + 32))
  {
    *a2 = v11;
  }
  else
  {
    WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(a1 + 32), &v10);
    WTF::FileSystemImpl::pathByAppendingComponent();
    v8 = v10;
    v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t result;
  BOOL v11;
  char v12;
  _QWORD v13[3];

  if (a1 == a2)
    return 1;
  v13[1] = v2;
  v13[2] = v3;
  v6 = *(unsigned int *)(a1 + 24);
  v7 = *(_DWORD *)(a2 + 24);
  v8 = v7 == v6;
  v11 = v7 == -1;
  v9 = v7 == -1;
  if (v11)
    v8 = 0;
  if ((_DWORD)v6 == -1)
    result = v9;
  else
    result = v8;
  v11 = (_DWORD)v6 == -1 || !v8;
  if (!v11)
  {
    v13[0] = &v12;
    return ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18SecurityOriginData5TupleENSC_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINSC_26OpaqueOriginIdentifierTypeENSG_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEESP_EEEDcmOT_DpOT0____fdiagonal[v6])(v13, a1);
  }
  return result;
}

{
  WebCore::Position *v2;
  _WORD *v3;
  int v6;
  BOOL v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  v2 = (WebCore::Position *)(a2 + 64);
  v3 = *(_WORD **)(a1 + 64);
  if (v3 != *(_WORD **)(a2 + 64))
    return 0;
  if ((*(_BYTE *)(a1 + 76) & 8) == 0 && ((v6 = *(_BYTE *)(a1 + 76) & 7, v6 != 4) ? (v7 = v6 == 2) : (v7 = 1), v7))
  {
    if (v3)
    {
      v8 = *((_DWORD *)v3 + 6);
      *((_DWORD *)v3 + 6) = v8 + 2;
      v9 = v3[14];
      if ((v9 & 1) != 0)
      {
        v22 = *((_QWORD *)v3 + 10);
        v11 = v22 ? *(_DWORD *)(v22 + 4) : 0;
      }
      else if ((v9 & 4) != 0 && (v10 = *((_QWORD *)v3 + 10)) != 0)
      {
        v11 = 0;
        do
        {
          ++v11;
          v10 = *(_QWORD *)(v10 + 56);
        }
        while (v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v3 + 208))(v3) ^ 1;
        v8 = *((_DWORD *)v3 + 6) - 2;
      }
      if (v8)
      {
        *((_DWORD *)v3 + 6) = v8;
      }
      else if ((v3[15] & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 72);
  }
  if ((*(_BYTE *)(a2 + 76) & 8) == 0 && ((v12 = *(_BYTE *)(a2 + 76) & 7, v12 != 4) ? (v13 = v12 == 2) : (v13 = 1), v13))
    v14 = WebCore::Position::offsetForPositionAfterAnchor(v2);
  else
    v14 = *(_DWORD *)(a2 + 72);
  if (v11 != v14
    || ((*(_BYTE *)(a2 + 76) ^ *(_BYTE *)(a1 + 76)) & 7) != 0
    || *(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 92) & 8) == 0 && ((v16 = *(_BYTE *)(a1 + 92) & 7, v16 == 4) || v16 == 2))
    v17 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a1 + 80));
  else
    v17 = *(_DWORD *)(a1 + 88);
  if ((*(_BYTE *)(a2 + 92) & 8) == 0 && ((v18 = *(_BYTE *)(a2 + 92) & 7, v18 == 4) || v18 == 2))
    v19 = WebCore::Position::offsetForPositionAfterAnchor((WebCore::Position *)(a2 + 80));
  else
    v19 = *(_DWORD *)(a2 + 88);
  if (v17 != v19)
    return 0;
  if (((*(_BYTE *)(a2 + 92) ^ *(_BYTE *)(a1 + 92)) & 7) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 96) != 0) != (*(_BYTE *)(a2 + 96) != 0))
    return 0;
  v20 = *(unsigned __int8 *)(a1 + 98);
  v21 = *(unsigned __int8 *)(a2 + 98);
  if (((v20 ^ v21) & 1) != 0)
    return 0;
  else
    return ((v20 & 2) == 0) ^ ((v21 & 2) >> 1);
}

{
  uint64_t v2;
  double v3;
  double v4;
  BOOL v5;
  uint64_t v6;
  uint64_t **v8;
  _QWORD *v9;
  _QWORD v10[2];
  _QWORD *v11;

  v2 = 16;
  do
  {
    v3 = *(double *)(a1 + v2);
    v4 = *(double *)(a2 + v2);
    if (v3 != v4)
      break;
    v5 = v2 == 56;
    v2 += 8;
  }
  while (!v5);
  if (v3 != v4)
    return 0;
  v10[0] = a2;
  v10[1] = a2;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6 == -1)
  {
    v8 = (uint64_t **)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>> const&)#1},WebCore::operator==(WebCore::SourceBrushLogicalGradient const&,WebCore::SourceBrushLogicalGradient const&)::{lambda(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>> const&>(v8, v9);
  }
  else
  {
    v11 = v10;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E3347198[v6])(&v11, a1);
  }
}

{
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  char v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  int v41;
  float v42;
  float v43;
  int v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  int v59;
  float v60;
  float v61;
  int v62;
  float v63;
  float v64;
  int v65;
  float v66;
  float v67;
  int v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  int v80;
  float v81;
  float v82;
  int v83;
  float v84;
  float v85;
  int v86;
  float v87;
  float v88;
  int v89;
  float v90;
  float v91;
  int v92;
  float v93;
  float v94;
  char isCalculatedEqual;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char *v134;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  v7 = v5 == (_DWORD)v4 && v5 != -1;
  if ((_DWORD)v4 == -1 || !v7)
  {
    v9 = v5 == -1;
    if ((_DWORD)v4 == -1)
      v10 = v9;
    else
      v10 = v7;
    if (!v10)
      return 0;
  }
  else
  {
    v134 = &v133;
    v11 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v4])(&v134, a1, a2);
    if ((v11 & 1) == 0)
      return 0;
  }
  if (*(float *)(a1 + 16) != *(float *)(a2 + 16) || ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0x1F) != 0)
    return 0;
  v12 = *(unsigned int *)(a1 + 32);
  v13 = *(_DWORD *)(a2 + 32);
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v16 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v17 = v16;
    else
      v17 = v15;
    if (!v17)
      return 0;
  }
  else
  {
    v134 = &v133;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v12])(&v134, a1 + 24, a2 + 24) & 1) == 0)return 0;
  }
  if (*(float *)(a1 + 40) != *(float *)(a2 + 40) || ((*(_BYTE *)(a2 + 44) ^ *(_BYTE *)(a1 + 44)) & 0x1F) != 0)
    return 0;
  v18 = *(unsigned int *)(a1 + 56);
  v19 = *(_DWORD *)(a2 + 56);
  v21 = v19 == (_DWORD)v18 && v19 != -1;
  if ((_DWORD)v18 == -1 || !v21)
  {
    v22 = v19 == -1;
    if ((_DWORD)v18 == -1)
      v23 = v22;
    else
      v23 = v21;
    if (!v23)
      return 0;
  }
  else
  {
    v134 = &v133;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v18])(&v134, a1 + 48, a2 + 48) & 1) == 0)return 0;
  }
  if (*(float *)(a1 + 64) != *(float *)(a2 + 64) || ((*(_BYTE *)(a2 + 68) ^ *(_BYTE *)(a1 + 68)) & 0x1F) != 0)
    return 0;
  v24 = *(unsigned int *)(a1 + 80);
  v25 = *(_DWORD *)(a2 + 80);
  v27 = v25 == (_DWORD)v24 && v25 != -1;
  if ((_DWORD)v24 == -1 || !v27)
  {
    v28 = v25 == -1;
    if ((_DWORD)v24 == -1)
      v29 = v28;
    else
      v29 = v27;
    if (!v29)
      return 0;
  }
  else
  {
    v134 = &v133;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v24])(&v134, a1 + 72, a2 + 72) & 1) == 0)return 0;
  }
  if (*(float *)(a1 + 88) != *(float *)(a2 + 88) || ((*(_BYTE *)(a2 + 92) ^ *(_BYTE *)(a1 + 92)) & 0x1F) != 0)
    return 0;
  v30 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD *)(a2 + 96);
  if (v30 == v31)
    goto LABEL_69;
  v57 = *(_QWORD *)(v30 + 8);
  v58 = *(_QWORD *)(v31 + 8);
  if (v57 != v58)
  {
    v113 = *(_QWORD *)(a1 + 96);
    v126 = *(_QWORD *)(a2 + 96);
    result = 0;
    if (!v57)
      return result;
    if (!v58)
      return result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
    v30 = v113;
    v31 = v126;
    if (!(_DWORD)result)
      return result;
  }
  v59 = *(unsigned __int8 *)(v30 + 20);
  if (v59 != *(unsigned __int8 *)(v31 + 20) || (*(_BYTE *)(v30 + 21) != 0) != (*(_BYTE *)(v31 + 21) != 0))
    return 0;
  if (v59 != 13)
  {
    if (v59 == 11)
    {
      v107 = v30;
      v120 = v31;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 16), (const WebCore::Length *)(v31 + 16));
      v30 = v107;
      v31 = v120;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v60 = *(float *)(v30 + 16);
      if (!*(_BYTE *)(v30 + 22))
        v60 = (float)SLODWORD(v60);
      v61 = *(float *)(v31 + 16);
      if (!*(_BYTE *)(v31 + 22))
        v61 = (float)SLODWORD(v61);
      if (v60 != v61)
        return 0;
    }
  }
  v62 = *(unsigned __int8 *)(v30 + 28);
  if (v62 != *(unsigned __int8 *)(v31 + 28) || (*(_BYTE *)(v30 + 29) != 0) != (*(_BYTE *)(v31 + 29) != 0))
    return 0;
  if (v62 != 13)
  {
    if (v62 == 11)
    {
      v108 = v30;
      v121 = v31;
      v96 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 24), (const WebCore::Length *)(v31 + 24));
      v30 = v108;
      v31 = v121;
      if ((v96 & 1) == 0)
        return 0;
    }
    else
    {
      v63 = *(float *)(v30 + 24);
      if (!*(_BYTE *)(v30 + 30))
        v63 = (float)SLODWORD(v63);
      v64 = *(float *)(v31 + 24);
      if (!*(_BYTE *)(v31 + 30))
        v64 = (float)SLODWORD(v64);
      if (v63 != v64)
        return 0;
    }
  }
  v65 = *(unsigned __int8 *)(v30 + 36);
  if (v65 != *(unsigned __int8 *)(v31 + 36) || (*(_BYTE *)(v30 + 37) != 0) != (*(_BYTE *)(v31 + 37) != 0))
    return 0;
  if (v65 != 13)
  {
    if (v65 == 11)
    {
      v109 = v30;
      v122 = v31;
      v97 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 32), (const WebCore::Length *)(v31 + 32));
      v30 = v109;
      v31 = v122;
      if ((v97 & 1) == 0)
        return 0;
    }
    else
    {
      v66 = *(float *)(v30 + 32);
      if (!*(_BYTE *)(v30 + 38))
        v66 = (float)SLODWORD(v66);
      v67 = *(float *)(v31 + 32);
      if (!*(_BYTE *)(v31 + 38))
        v67 = (float)SLODWORD(v67);
      if (v66 != v67)
        return 0;
    }
  }
  v68 = *(unsigned __int8 *)(v30 + 44);
  if (v68 != *(unsigned __int8 *)(v31 + 44) || (*(_BYTE *)(v30 + 45) != 0) != (*(_BYTE *)(v31 + 45) != 0))
    return 0;
  if (v68 != 13)
  {
    if (v68 == 11)
    {
      v110 = v30;
      v123 = v31;
      v98 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 40), (const WebCore::Length *)(v31 + 40));
      v30 = v110;
      v31 = v123;
      if ((v98 & 1) == 0)
        return 0;
    }
    else
    {
      v69 = *(float *)(v30 + 40);
      if (!*(_BYTE *)(v30 + 46))
        v69 = (float)SLODWORD(v69);
      v70 = *(float *)(v31 + 40);
      if (!*(_BYTE *)(v31 + 46))
        v70 = (float)SLODWORD(v70);
      if (v69 != v70)
        return 0;
    }
  }
  if (*(unsigned __int8 *)(v30 + 4) != *(unsigned __int8 *)(v31 + 4))
    return 0;
  v71 = *(unsigned __int8 *)(v30 + 52);
  if (v71 != *(unsigned __int8 *)(v31 + 52) || (*(_BYTE *)(v30 + 53) != 0) != (*(_BYTE *)(v31 + 53) != 0))
    return 0;
  if (v71 != 13)
  {
    if (v71 == 11)
    {
      v111 = v30;
      v124 = v31;
      v99 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 48), (const WebCore::Length *)(v31 + 48));
      v30 = v111;
      v31 = v124;
      if ((v99 & 1) == 0)
        return 0;
    }
    else
    {
      v72 = *(float *)(v30 + 48);
      if (!*(_BYTE *)(v30 + 54))
        v72 = (float)SLODWORD(v72);
      v73 = *(float *)(v31 + 48);
      if (!*(_BYTE *)(v31 + 54))
        v73 = (float)SLODWORD(v73);
      if (v72 != v73)
        return 0;
    }
  }
  v74 = *(unsigned __int8 *)(v30 + 60);
  if (v74 != *(unsigned __int8 *)(v31 + 60) || (*(_BYTE *)(v30 + 61) != 0) != (*(_BYTE *)(v31 + 61) != 0))
    return 0;
  if (v74 != 13)
  {
    if (v74 == 11)
    {
      v112 = v30;
      v125 = v31;
      v100 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 56), (const WebCore::Length *)(v31 + 56));
      v30 = v112;
      v31 = v125;
      if ((v100 & 1) == 0)
        return 0;
    }
    else
    {
      v75 = *(float *)(v30 + 56);
      if (!*(_BYTE *)(v30 + 62))
        v75 = (float)SLODWORD(v75);
      v76 = *(float *)(v31 + 56);
      if (!*(_BYTE *)(v31 + 62))
        v76 = (float)SLODWORD(v76);
      if (v75 != v76)
        return 0;
    }
  }
  v77 = *(unsigned __int8 *)(v30 + 68);
  if (v77 != *(unsigned __int8 *)(v31 + 68) || (*(_BYTE *)(v30 + 69) != 0) != (*(_BYTE *)(v31 + 69) != 0))
    return 0;
  if (v77 != 13)
  {
    if (v77 == 11)
    {
      v114 = v30;
      v127 = v31;
      v101 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 64), (const WebCore::Length *)(v31 + 64));
      v30 = v114;
      v31 = v127;
      if ((v101 & 1) == 0)
        return 0;
    }
    else
    {
      v78 = *(float *)(v30 + 64);
      if (!*(_BYTE *)(v30 + 70))
        v78 = (float)SLODWORD(v78);
      v79 = *(float *)(v31 + 64);
      if (!*(_BYTE *)(v31 + 70))
        v79 = (float)SLODWORD(v79);
      if (v78 != v79)
        return 0;
    }
  }
  v80 = *(unsigned __int8 *)(v30 + 76);
  if (v80 != *(unsigned __int8 *)(v31 + 76) || (*(_BYTE *)(v30 + 77) != 0) != (*(_BYTE *)(v31 + 77) != 0))
    return 0;
  if (v80 != 13)
  {
    if (v80 == 11)
    {
      v115 = v30;
      v128 = v31;
      v102 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 72), (const WebCore::Length *)(v31 + 72));
      v30 = v115;
      v31 = v128;
      if ((v102 & 1) == 0)
        return 0;
    }
    else
    {
      v81 = *(float *)(v30 + 72);
      if (!*(_BYTE *)(v30 + 78))
        v81 = (float)SLODWORD(v81);
      v82 = *(float *)(v31 + 72);
      if (!*(_BYTE *)(v31 + 78))
        v82 = (float)SLODWORD(v82);
      if (v81 != v82)
        return 0;
    }
  }
  if (*(unsigned __int8 *)(v30 + 5) != *(unsigned __int8 *)(v31 + 5))
    return 0;
  v83 = *(unsigned __int8 *)(v30 + 84);
  if (v83 != *(unsigned __int8 *)(v31 + 84) || (*(_BYTE *)(v30 + 85) != 0) != (*(_BYTE *)(v31 + 85) != 0))
    return 0;
  if (v83 != 13)
  {
    if (v83 == 11)
    {
      v116 = v30;
      v129 = v31;
      v103 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 80), (const WebCore::Length *)(v31 + 80));
      v30 = v116;
      v31 = v129;
      if ((v103 & 1) == 0)
        return 0;
    }
    else
    {
      v84 = *(float *)(v30 + 80);
      if (!*(_BYTE *)(v30 + 86))
        v84 = (float)SLODWORD(v84);
      v85 = *(float *)(v31 + 80);
      if (!*(_BYTE *)(v31 + 86))
        v85 = (float)SLODWORD(v85);
      if (v84 != v85)
        return 0;
    }
  }
  v86 = *(unsigned __int8 *)(v30 + 92);
  if (v86 != *(unsigned __int8 *)(v31 + 92) || (*(_BYTE *)(v30 + 93) != 0) != (*(_BYTE *)(v31 + 93) != 0))
    return 0;
  if (v86 != 13)
  {
    if (v86 == 11)
    {
      v117 = v30;
      v130 = v31;
      v104 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 88), (const WebCore::Length *)(v31 + 88));
      v30 = v117;
      v31 = v130;
      if ((v104 & 1) == 0)
        return 0;
    }
    else
    {
      v87 = *(float *)(v30 + 88);
      if (!*(_BYTE *)(v30 + 94))
        v87 = (float)SLODWORD(v87);
      v88 = *(float *)(v31 + 88);
      if (!*(_BYTE *)(v31 + 94))
        v88 = (float)SLODWORD(v88);
      if (v87 != v88)
        return 0;
    }
  }
  v89 = *(unsigned __int8 *)(v30 + 100);
  if (v89 != *(unsigned __int8 *)(v31 + 100) || (*(_BYTE *)(v30 + 101) != 0) != (*(_BYTE *)(v31 + 101) != 0))
    return 0;
  if (v89 != 13)
  {
    if (v89 == 11)
    {
      v118 = v30;
      v131 = v31;
      v105 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 96), (const WebCore::Length *)(v31 + 96));
      v30 = v118;
      v31 = v131;
      if ((v105 & 1) == 0)
        return 0;
    }
    else
    {
      v90 = *(float *)(v30 + 96);
      if (!*(_BYTE *)(v30 + 102))
        v90 = (float)SLODWORD(v90);
      v91 = *(float *)(v31 + 96);
      if (!*(_BYTE *)(v31 + 102))
        v91 = (float)SLODWORD(v91);
      if (v90 != v91)
        return 0;
    }
  }
  v92 = *(unsigned __int8 *)(v30 + 108);
  if (v92 != *(unsigned __int8 *)(v31 + 108) || (*(_BYTE *)(v30 + 109) != 0) != (*(_BYTE *)(v31 + 109) != 0))
    return 0;
  if (v92 != 13)
  {
    if (v92 != 11)
    {
      v93 = *(float *)(v30 + 104);
      if (!*(_BYTE *)(v30 + 110))
        v93 = (float)SLODWORD(v93);
      v94 = *(float *)(v31 + 104);
      if (!*(_BYTE *)(v31 + 110))
        v94 = (float)SLODWORD(v94);
      if (v93 != v94)
        return 0;
      goto LABEL_253;
    }
    v119 = v30;
    v132 = v31;
    v106 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v30 + 104), (const WebCore::Length *)(v31 + 104));
    v30 = v119;
    v31 = v132;
    if ((v106 & 1) != 0)
      goto LABEL_253;
    return 0;
  }
LABEL_253:
  if (*(unsigned __int8 *)(v30 + 6) != *(unsigned __int8 *)(v31 + 6)
    || *(unsigned __int8 *)(v30 + 7) != *(unsigned __int8 *)(v31 + 7))
  {
    return 0;
  }
LABEL_69:
  v32 = *(unsigned __int8 *)(a1 + 108);
  if (v32 != *(unsigned __int8 *)(a2 + 108) || (*(_BYTE *)(a1 + 109) != 0) != (*(_BYTE *)(a2 + 109) != 0))
    return 0;
  if (v32 != 13)
  {
    if (v32 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 104), (const WebCore::Length *)(a2 + 104)) & 1) == 0)
        return 0;
    }
    else
    {
      v33 = *(float *)(a1 + 104);
      if (!*(_BYTE *)(a1 + 110))
        v33 = (float)SLODWORD(v33);
      v34 = *(float *)(a2 + 104);
      if (!*(_BYTE *)(a2 + 110))
        v34 = (float)SLODWORD(v34);
      if (v33 != v34)
        return 0;
    }
  }
  v35 = *(unsigned __int8 *)(a1 + 116);
  if (v35 != *(unsigned __int8 *)(a2 + 116) || (*(_BYTE *)(a1 + 117) != 0) != (*(_BYTE *)(a2 + 117) != 0))
    return 0;
  if (v35 != 13)
  {
    if (v35 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 112), (const WebCore::Length *)(a2 + 112)) & 1) == 0)
        return 0;
    }
    else
    {
      v36 = *(float *)(a1 + 112);
      if (!*(_BYTE *)(a1 + 118))
        v36 = (float)SLODWORD(v36);
      v37 = *(float *)(a2 + 112);
      if (!*(_BYTE *)(a2 + 118))
        v37 = (float)SLODWORD(v37);
      if (v36 != v37)
        return 0;
    }
  }
  v38 = *(unsigned __int8 *)(a1 + 124);
  if (v38 != *(unsigned __int8 *)(a2 + 124) || (*(_BYTE *)(a1 + 125) != 0) != (*(_BYTE *)(a2 + 125) != 0))
    return 0;
  if (v38 != 13)
  {
    if (v38 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 120), (const WebCore::Length *)(a2 + 120)) & 1) == 0)
        return 0;
    }
    else
    {
      v39 = *(float *)(a1 + 120);
      if (!*(_BYTE *)(a1 + 126))
        v39 = (float)SLODWORD(v39);
      v40 = *(float *)(a2 + 120);
      if (!*(_BYTE *)(a2 + 126))
        v40 = (float)SLODWORD(v40);
      if (v39 != v40)
        return 0;
    }
  }
  v41 = *(unsigned __int8 *)(a1 + 132);
  if (v41 != *(unsigned __int8 *)(a2 + 132) || (*(_BYTE *)(a1 + 133) != 0) != (*(_BYTE *)(a2 + 133) != 0))
    return 0;
  if (v41 != 13)
  {
    if (v41 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 128), (const WebCore::Length *)(a2 + 128)) & 1) == 0)
        return 0;
    }
    else
    {
      v42 = *(float *)(a1 + 128);
      if (!*(_BYTE *)(a1 + 134))
        v42 = (float)SLODWORD(v42);
      v43 = *(float *)(a2 + 128);
      if (!*(_BYTE *)(a2 + 134))
        v43 = (float)SLODWORD(v43);
      if (v42 != v43)
        return 0;
    }
  }
  v44 = *(unsigned __int8 *)(a1 + 140);
  if (v44 != *(unsigned __int8 *)(a2 + 140) || (*(_BYTE *)(a1 + 141) != 0) != (*(_BYTE *)(a2 + 141) != 0))
    return 0;
  if (v44 != 13)
  {
    if (v44 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 136), (const WebCore::Length *)(a2 + 136)) & 1) == 0)
        return 0;
    }
    else
    {
      v45 = *(float *)(a1 + 136);
      if (!*(_BYTE *)(a1 + 142))
        v45 = (float)SLODWORD(v45);
      v46 = *(float *)(a2 + 136);
      if (!*(_BYTE *)(a2 + 142))
        v46 = (float)SLODWORD(v46);
      if (v45 != v46)
        return 0;
    }
  }
  v47 = *(unsigned __int8 *)(a1 + 148);
  if (v47 != *(unsigned __int8 *)(a2 + 148) || (*(_BYTE *)(a1 + 149) != 0) != (*(_BYTE *)(a2 + 149) != 0))
    return 0;
  if (v47 != 13)
  {
    if (v47 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 144), (const WebCore::Length *)(a2 + 144)) & 1) == 0)
        return 0;
    }
    else
    {
      v48 = *(float *)(a1 + 144);
      if (!*(_BYTE *)(a1 + 150))
        v48 = (float)SLODWORD(v48);
      v49 = *(float *)(a2 + 144);
      if (!*(_BYTE *)(a2 + 150))
        v49 = (float)SLODWORD(v49);
      if (v48 != v49)
        return 0;
    }
  }
  v50 = *(unsigned __int8 *)(a1 + 156);
  if (v50 != *(unsigned __int8 *)(a2 + 156) || (*(_BYTE *)(a1 + 157) != 0) != (*(_BYTE *)(a2 + 157) != 0))
    return 0;
  if (v50 != 13)
  {
    if (v50 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 152), (const WebCore::Length *)(a2 + 152)) & 1) == 0)
        return 0;
    }
    else
    {
      v51 = *(float *)(a1 + 152);
      if (!*(_BYTE *)(a1 + 158))
        v51 = (float)SLODWORD(v51);
      v52 = *(float *)(a2 + 152);
      if (!*(_BYTE *)(a2 + 158))
        v52 = (float)SLODWORD(v52);
      if (v51 != v52)
        return 0;
    }
  }
  v53 = *(unsigned __int8 *)(a1 + 164);
  if (v53 != *(unsigned __int8 *)(a2 + 164) || (*(_BYTE *)(a1 + 165) != 0) != (*(_BYTE *)(a2 + 165) != 0))
    return 0;
  if (v53 == 13)
    return 1;
  if (v53 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 160), (const WebCore::Length *)(a2 + 160));
  v54 = *(float *)(a1 + 160);
  if (!*(_BYTE *)(a1 + 166))
    v54 = (float)*(int *)(a1 + 160);
  v55 = *(float *)(a2 + 160);
  if (!*(_BYTE *)(a2 + 166))
    v55 = (float)SLODWORD(v55);
  return v54 == v55;
}

{
  uint64_t result;

  result = WebCore::StyleColor::operator==(a1, a2);
  if ((_DWORD)result)
  {
    if (*(float *)(a1 + 16) == *(float *)(a2 + 16))
      return ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0xF) == 0
          && ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0x10) == 0;
    else
      return 0;
  }
  return result;
}

{
  uint64_t result;

  result = WebCore::StyleColor::operator==(a1, a2);
  if ((_DWORD)result)
    return WebCore::StyleColor::operator==(a1 + 16, a2 + 16);
  return result;
}

WTF::StringImpl *WebCore::SecurityOriginData::databaseIdentifier@<X0>(WebCore::SecurityOriginData *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::FileSystemImpl *v6;
  const WTF::String *v7;
  int v8;
  unsigned __int16 v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = *(WTF::StringImpl **)WebCore::SecurityOriginData::protocol(this);
  if (v4)
    *(_DWORD *)v4 += 2;
  v13 = v4;
  if (WTF::equalLettersIgnoringASCIICase((uint64_t *)&v13, "file", 5uLL))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
  else
  {
    v5 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    v6 = (WTF::FileSystemImpl *)WebCore::SecurityOriginData::host(this);
    WTF::FileSystemImpl::encodeForFileName(v6, v7);
    v8 = WebCore::SecurityOriginData::port(this);
    if ((v8 & 0xFF0000) != 0)
      v9 = v8;
    else
      v9 = 0;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(a2, (uint64_t)v5, 95, (uint64_t)v12, 95, v9);
    if (!*a2)
    {
      __break(0xC471u);
      return result;
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v11);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SecurityOriginData::port(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  WebCore::SecurityOriginData *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::SecurityOriginData *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SecurityOriginData::host(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WebCore::SecurityOriginData::host(WebCore::SecurityOriginData *this)
{
  uint64_t v1;
  void *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WebCore::SecurityOriginData *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v1])(&v5, this);
  }
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(char *__dst, uint64_t a2, char a3, uint64_t a4, char a5, unsigned __int16 a6)
{
  uint64_t v11;
  uint64_t v13;

  v13 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v13, __dst);
  v11 = v13;
  if (v13)
    v11 = *(unsigned int *)(v13 + 4);
  __dst[v11] = a3;
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(&__dst[v11 + 1], a4, a5, a6);
}

uint64_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned short,void>>(char *__dst, uint64_t a2, char a3, unsigned __int16 a4)
{
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12[2];

  v12[0] = a2;
  result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v12, __dst);
  v8 = v12[0];
  if (v12[0])
    v8 = *(unsigned int *)(v12[0] + 4);
  v9 = 0;
  v10 = &__dst[v8];
  *v10 = a3;
  do
  {
    v11 = a4;
    *((_BYTE *)&v12[1] + v9-- + 7) = (a4 % 0xAu) | 0x30;
    a4 /= 0xAu;
  }
  while (v11 > 9);
  if (v9 + 8 <= 7)
    return (uint64_t *)memcpy(v10 + 1, (char *)&v12[2] + v9, -v9);
  return result;
}

uint64_t *WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(uint64_t *result, char *__dst)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  char *v5;
  char *v6;
  unsigned __int128 v7;
  char v8;

  v2 = *result;
  if (*result)
  {
    v3 = *(char **)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 4);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *__dst = *v3;
        else
          return (uint64_t *)memcpy(__dst, v3, v4);
      }
    }
    else
    {
      v5 = &__dst[v4];
      if (v4 >= 0x10)
      {
        v6 = &__dst[v4 & 0xFFFFFFF0];
        do
        {
          v7 = (unsigned __int128)vld2q_s8(v3);
          v3 += 32;
          *(_OWORD *)__dst = v7;
          __dst += 16;
        }
        while (__dst != v6);
        __dst = v6;
      }
      while (__dst != v5)
      {
        v8 = *v3;
        v3 += 2;
        *__dst++ = v8;
      }
    }
  }
  return result;
}

uint64_t WebCore::DataURLDecoder::shouldRemoveFragmentIdentifier(WebCore::DataURLDecoder *this, const WTF::String *a2)
{
  uint64_t result;

  result = WTF::linkedOnOrAfterSDKWithBehavior();
  if ((_DWORD)result)
  {
    if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "video/mpegurl", 0xEuLL) & 1) != 0
      || (WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "audio/mpegurl", 0xEuLL) & 1) != 0
      || (WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "application/x-mpegurl", 0x16uLL) & 1) != 0)
    {
      return 0;
    }
    else
    {
      return WTF::equalLettersIgnoringASCIICase((uint64_t *)this, "vnd.apple.mpegurl", 0x12uLL) ^ 1;
    }
  }
  return result;
}

uint64_t WTF::equalLettersIgnoringASCIICase(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  int v17;

  v3 = *a1;
  if (!*a1)
    return 0;
  v5 = a3 - 1;
  if (!a3)
    v5 = 0;
  if (v5 != *(_DWORD *)(v3 + 4))
    return 0;
  v6 = *(unsigned __int16 **)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    if (v5)
    {
      if ((*v6 | 0x20) == (unsigned __int16)(char)*a2)
      {
        v7 = 0;
        v13 = v6 + 1;
        if (a3 <= 1)
          v14 = 1;
        else
          v14 = a3;
        v15 = v14 - 2;
        while (v15 != v7)
        {
          v16 = (char)a2[v7 + 1];
          v17 = v13[v7++] | 0x20;
          if (v17 != v16)
            return v7 >= v5;
        }
        goto LABEL_26;
      }
      return 0;
    }
    return 1;
  }
  if (!v5)
    return 1;
  if ((*(unsigned __int8 *)v6 | 0x20) != *a2)
    return 0;
  v7 = 0;
  v8 = (char *)v6 + 1;
  if (a3 <= 1)
    v9 = 1;
  else
    v9 = a3;
  v10 = v9 - 2;
  while (v10 != v7)
  {
    v11 = a2[v7 + 1];
    v12 = v8[v7++] | 0x20;
    if (v12 != v11)
      return v7 >= v5;
  }
LABEL_26:
  v7 = v5;
  return v7 >= v5;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(void *__dst, unsigned int a2, char a3, unsigned int a4)
{
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  _BYTE v13[13];
  uint64_t v14;

  v6 = a2;
  v8 = 0;
  v14 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  do
  {
    v13[v8-- + 12] = (v9 % 0xA) | 0x30;
    v10 = v9 > 9;
    v9 /= 0xAu;
  }
  while (v10);
  if (v8 + 14 <= 13)
    memcpy(__dst, &v13[v8 + 13], -v8);
  v11 = 0;
  do
  {
    ++v11;
    v10 = v6 > 9;
    v6 /= 0xAu;
  }
  while (v10);
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>((_BYTE *)__dst + v11, a3, a4);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<int,void>>(_BYTE *result, char a2, unsigned int a3)
{
  uint64_t v3;
  BOOL v4;
  _BYTE v5[13];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *result = a2;
  if ((a3 & 0x80000000) != 0)
    return (_BYTE *)WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-a3, result + 1);
  v3 = 0;
  do
  {
    v5[v3-- + 12] = (a3 % 0xA) | 0x30;
    v4 = a3 > 9;
    a3 /= 0xAu;
  }
  while (v4);
  if (v3 + 14 <= 13)
    return memcpy(result + 1, &v5[v3 + 13], -v3);
  return result;
}

WTF::StringImpl *WebCore::SQLiteFileSystem::setCanSuspendLockedFileAttribute(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  const char *v6;
  void *v7;
  int v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const char *v14;
  void *v15;
  WTF *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const char *v21;
  void *v22;
  WTF *v23;
  WTF::StringImpl *result;
  NSObject *v25;
  int *v26;
  char *v27;
  char value;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v3 = *this;
  if (*this)
    *(_DWORD *)v3 += 2;
  v29 = v3;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v29, (int8x16_t *)"", 1, &v30);
  v5 = v29;
  v29 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  value = -1;
  WTF::FileSystemImpl::fileSystemRepresentation((WTF::FileSystemImpl *)&v30, v4);
  if (buf[0])
    v6 = (const char *)(buf[0] + 16);
  else
    v6 = 0;
  v8 = setxattr(v6, "com.apple.runningboard.can-suspend-locked", &value, 1uLL, 0, 0);
  v9 = (WTF *)buf[0];
  buf[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
  }
  if (v8 < 0)
  {
    v25 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      v26 = __error();
      v27 = strerror(*v26);
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = v27;
      _os_log_error_impl(&dword_1940B8000, v25, OS_LOG_TYPE_ERROR, "SQLiteFileSystem::setCanSuspendLockedFileAttribute: setxattr failed: %{public}s", (uint8_t *)buf, 0xCu);
    }
  }
  v10 = v30;
  v30 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *this;
  if (*this)
    *(_DWORD *)v11 += 2;
  v29 = v11;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v29, (int8x16_t *)"-shm", 5, &v30);
  v13 = v29;
  v29 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  value = -1;
  WTF::FileSystemImpl::fileSystemRepresentation((WTF::FileSystemImpl *)&v30, v12);
  if (buf[0])
    v14 = (const char *)(buf[0] + 16);
  else
    v14 = 0;
  setxattr(v14, "com.apple.runningboard.can-suspend-locked", &value, 1uLL, 0, 0);
  v16 = (WTF *)buf[0];
  buf[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
      WTF::fastFree(v16, v15);
    else
      --*(_DWORD *)v16;
  }
  v17 = v30;
  v30 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = *this;
  if (*this)
    *(_DWORD *)v18 += 2;
  v29 = v18;
  WTF::makeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v29, (int8x16_t *)"-wal", 5, &v30);
  v20 = v29;
  v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  value = -1;
  WTF::FileSystemImpl::fileSystemRepresentation((WTF::FileSystemImpl *)&v30, v19);
  if (buf[0])
    v21 = (const char *)(buf[0] + 16);
  else
    v21 = 0;
  setxattr(v21, "com.apple.runningboard.can-suspend-locked", &value, 1uLL, 0, 0);
  v23 = (WTF *)buf[0];
  buf[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v22);
    else
      --*(_DWORD *)v23;
  }
  result = v30;
  v30 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SQLiteDatabase::overrideUnauthorizedFunctions(sqlite3 **this)
{
  sqlite3_create_function(this[1], "rtreenode", 2, 1, "rtreenode", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  sqlite3_create_function(this[1], "rtreedepth", 1, 1, "rtreedepth", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  sqlite3_create_function(this[1], "eval", 1, 1, "eval", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  sqlite3_create_function(this[1], "eval", 2, 1, "eval", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  sqlite3_create_function(this[1], "printf", -1, 1, "printf", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  sqlite3_create_function(this[1], "fts3_tokenizer", 1, 1, "fts3_tokenizer", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
  return sqlite3_create_function(this[1], "fts3_tokenizer", 2, 1, "fts3_tokenizer", (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))WebCore::unauthorizedSQLFunction, 0, 0);
}

uint64_t _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_6lengthEvEUlDpOT_E_EEDcOT_()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  char v16;
  int v17;
  int v18;
  int v19;
  int v20;

  WTF::Internal::appendHex();
  v20 = v0;
  WTF::Internal::appendHex();
  v19 = v1;
  WTF::Internal::appendHex();
  v18 = v2;
  WTF::Internal::appendHex();
  v17 = v3;
  WTF::Internal::appendHex();
  result = 0xFFFFFFFFLL;
  if ((v4 & 0x80000000) == 0)
  {
    v6 = v4 + 1;
    if (!__OFADD__(v4, 1) && (v17 & 0x80000000) == 0)
    {
      v7 = v17 + v6;
      if (!__OFADD__(v17, v6))
      {
        v8 = __OFADD__(v7, 1);
        v9 = v7 + 1;
        v10 = v8;
        if ((v18 & 0x80000000) == 0 && !v10)
        {
          v8 = __OFADD__(v18, v9);
          v11 = v18 + v9;
          if (!v8)
          {
            v8 = __OFADD__(v11, 1);
            v12 = v11 + 1;
            v13 = v8;
            if ((v19 & 0x80000000) == 0 && !v13)
            {
              v8 = __OFADD__(v19, v12);
              v14 = v19 + v12;
              if (!v8)
              {
                v8 = __OFADD__(v14, 1);
                v15 = v14 + 1;
                v16 = v8;
                if ((v20 & 0x80000000) == 0 && (v16 & 1) == 0)
                {
                  if (__OFADD__(v20, v15))
                    return 0xFFFFFFFFLL;
                  else
                    return (v20 + v15);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::UUID,void>>(char *__dst, char *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[2];
  char **v11;
  char *v12;

  if (a3)
  {
    if (a3 == 1)
      *__dst = *a2;
    else
      memcpy(__dst, a2, a3);
  }
  v10[0] = a4;
  v10[1] = a5;
  v11 = &v12;
  v12 = &__dst[a3];
  return _ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_((uint64_t)v10, &v11);
}

_BYTE *_ZNK3WTF17StringTypeAdapterINS_4UUIDEvE6handleIZNKS2_7writeToIhEEvPT_EUlDpOT_E_EEDcOS5_(uint64_t a1, _BYTE ***a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *result;
  _BYTE *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t __n;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v26 = v3;
  WTF::Internal::appendHex();
  LODWORD(__n) = v4;
  WTF::Internal::appendHex();
  LODWORD(v24) = v5;
  WTF::Internal::appendHex();
  LODWORD(v23) = v6;
  WTF::Internal::appendHex();
  LODWORD(v22) = v7;
  v8 = **a2;
  if (v26)
  {
    v9 = (char *)&v26 - v26;
    if (v26 == 1)
      *v8 = *v9;
    else
      memcpy(v8, v9, v26);
  }
  v10 = &v8[v26];
  *v10 = 45;
  v11 = v10 + 1;
  if ((_DWORD)__n)
  {
    v12 = (char *)&__n - __n;
    if ((_DWORD)__n == 1)
      *v11 = *v12;
    else
      memcpy(v11, v12, __n);
  }
  v13 = &v11[__n];
  *v13 = 45;
  v14 = v13 + 1;
  if ((_DWORD)v24)
  {
    v15 = (char *)&v24 - v24;
    if ((_DWORD)v24 == 1)
      *v14 = *v15;
    else
      memcpy(v14, v15, v24);
  }
  v16 = &v14[v24];
  *v16 = 45;
  v17 = v16 + 1;
  if ((_DWORD)v23)
  {
    v18 = (char *)&v23 - v23;
    if ((_DWORD)v23 == 1)
      *v17 = *v18;
    else
      memcpy(v17, v18, v23);
  }
  v19 = &v17[v23];
  *v19 = 45;
  result = v19 + 1;
  if ((_DWORD)v22)
  {
    v21 = (char *)&v22 - v22;
    if ((_DWORD)v22 == 1)
      *result = *v21;
    else
      return memcpy(result, v21, v22);
  }
  return result;
}

uint64_t WebCore::SQLiteTransaction::commit(uint64_t this)
{
  _BYTE *v1;

  if (*(_BYTE *)(this + 8))
  {
    v1 = (_BYTE *)this;
    this = WebCore::SQLiteDatabase::executeCommand(*(_QWORD *)this, "COMMIT", 7);
    v1[8] = this ^ 1;
    *(_BYTE *)(*(_QWORD *)v1 + 20) = this ^ 1;
    if (((this ^ 1) & 1) == 0)
      return WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)this);
  }
  return this;
}

void WebCore::SQLiteTransaction::begin(WebCore::SQLiteTransaction *this)
{
  const char *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 8))
  {
    v5 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10[0]) = 0;
      _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "SQLiteTransaction::begin: Transaction is already in progress", (uint8_t *)v10, 2u);
    }
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(this);
    if (*((_BYTE *)this + 9))
      v2 = "BEGIN";
    else
      v2 = "BEGIN IMMEDIATE";
    if (*((_BYTE *)this + 9))
      v3 = 6;
    else
      v3 = 16;
    v4 = WebCore::SQLiteDatabase::execute(*(_QWORD *)this, v2, v3);
    if (v4 == 101)
    {
      *((_BYTE *)this + 8) = 1;
      *(_BYTE *)(*(_QWORD *)this + 20) = 1;
    }
    else
    {
      v6 = v4;
      v7 = qword_1ECE7CA90;
      v8 = os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        v10[0] = 67109120;
        v10[1] = v6;
        _os_log_error_impl(&dword_1940B8000, v7, OS_LOG_TYPE_ERROR, "SQLiteTransaction::begin: Failed to begin transaction (error %d)", (uint8_t *)v10, 8u);
      }
      v9 = *((unsigned __int8 *)this + 8);
      *(_BYTE *)(*(_QWORD *)this + 20) = v9;
      if (!v9)
        WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount((WebCore::SQLiteDatabaseTracker *)v8);
    }
  }
}

uint64_t WebCore::SQLiteDatabase::executeCommand(uint64_t a1, const char *a2, int a3)
{
  int v3;
  unsigned __int8 *v4;
  sqlite3_stmt *v6;
  WebCore::SQLiteDatabaseTracker *v7;
  int v8;
  int v9;
  WebCore::SQLiteDatabaseTracker *v11;
  WebCore::SQLiteStatement *v12;
  uint64_t v13;
  sqlite3_stmt *v14;
  int v15;
  char v16;

  WebCore::SQLiteDatabase::prepareStatement(a1, a2, a3, (uint64_t)&v13);
  v3 = v15;
  if (!v15)
  {
    v4 = (unsigned __int8 *)(v13 + 32);
    if (__ldaxr((unsigned __int8 *)(v13 + 32)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_5;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_5:
    v6 = v14;
    if (*(_BYTE *)(v13 + 20) || (v7 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(v14), (_DWORD)v7))
    {
      v8 = sqlite3_step(v6);
    }
    else
    {
      WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v7);
      v11 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(v6);
      v8 = (int)v11;
      WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v11);
    }
    v9 = __ldxr(v4);
    if (v9 == 1)
    {
      if (!__stlxr(0, v4))
      {
LABEL_13:
        v3 = v15;
        if (v15 == -1)
          return v8 == 101;
LABEL_14:
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore15SQLiteStatementEiEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix_0[v3])(&v16, &v13);
        return v8 == 101;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_13;
  }
  if (v15 == 1)
  {
    v8 = v13;
    goto LABEL_14;
  }
  v12 = (WebCore::SQLiteStatement *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::SQLiteStatement::step(v12);
}

WebCore::SQLiteDatabaseTracker *WebCore::SQLiteStatement::step(sqlite3_stmt **this)
{
  unsigned __int8 *v2;
  WebCore::SQLiteDatabaseTracker *v4;
  WebCore::SQLiteDatabaseTracker *v5;
  int v6;

  v2 = (unsigned __int8 *)*this + 32;
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_4:
  if (*((_BYTE *)*this + 20) || (v4 = (WebCore::SQLiteDatabaseTracker *)sqlite3_stmt_readonly(this[1]), (_DWORD)v4))
  {
    v5 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(this[1]);
  }
  else
  {
    WebCore::SQLiteDatabaseTracker::incrementTransactionInProgressCount(v4);
    v5 = (WebCore::SQLiteDatabaseTracker *)sqlite3_step(this[1]);
    WebCore::SQLiteDatabaseTracker::decrementTransactionInProgressCount(v5);
  }
  v6 = __ldxr(v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, v2))
      return v5;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v5;
}

void WebCore::SQLiteDatabase::prepareStatement(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v8;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;
  NSObject *v18;
  char *pzTail;
  _BYTE ppStmt[24];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_4;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_4:
  pzTail = 0;
  *(_QWORD *)ppStmt = 0;
  v10 = sqlite3_prepare_v2(*(sqlite3 **)(a1 + 8), a2, a3, (sqlite3_stmt **)ppStmt, (const char **)&pzTail);
  LODWORD(v11) = v10;
  if (pzTail && *pzTail)
  {
    LODWORD(v11) = 1;
    goto LABEL_28;
  }
  if (v10)
  {
LABEL_28:
    sqlite3_finalize(*(sqlite3_stmt **)ppStmt);
    v11 = v11;
    v12 = 1;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)ppStmt == 0;
  if (*(_QWORD *)ppStmt)
    v11 = *(_QWORD *)ppStmt;
  else
    v11 = 1;
LABEL_10:
  v13 = __ldxr(v8);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, v8))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (v12)
  {
    v18 = qword_1ECE7CA90;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CA90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)ppStmt = 136446210;
      *(_QWORD *)&ppStmt[4] = a2;
      _os_log_error_impl(&dword_1940B8000, v18, OS_LOG_TYPE_ERROR, "SQLiteDatabase::prepareStatement: Failed to prepare statement %{public}s", ppStmt, 0xCu);
    }
    *(_DWORD *)a4 = v11;
    *(_DWORD *)(a4 + 16) = 1;
  }
  else
  {
    do
      v14 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v14 + 1, (unsigned int *)a1));
    *(_QWORD *)a4 = a1;
    do
      v15 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v15 + 1, (unsigned int *)a1));
    *(_QWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 16) = 0;
    sqlite3_finalize(0);
    if (!atomic_load((unsigned int *)a1))
    {
      __break(0xC471u);
      JUMPOUT(0x19425D668);
    }
    do
      v17 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v17 - 1, (unsigned int *)a1));
  }
}

void WebCore::RenderBlockFlow::~RenderBlockFlow(WebCore::RenderBlockFlow *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WebCore::FloatingObjects *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  char v10;

  *(_QWORD *)this = off_1E341F9F8;
  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v10, (char *)this + 232);
  *((_DWORD *)this + 60) = -1;
  v4 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    WTF::fastFree(v4, a2);
  }
  v6 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    WebCore::FloatingObjects::~FloatingObjects(v6, a2);
    WTF::fastFree(v7, v8);
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
    WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)WebCore::gRareDataMap, (uint64_t)this);
  *(_QWORD *)this = off_1E34201A0;
  v9 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  WebCore::FloatingObjects *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  WebCore::RenderLayer *v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  *(_QWORD *)this = off_1E341F9F8;
  v3 = *((unsigned int *)this + 60);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v3])(&v43, (char *)this + 232);
  *((_DWORD *)this + 60) = -1;
  v4 = (WTF *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    v5 = (WTF *)*((_QWORD *)v4 + 3);
    *((_QWORD *)v4 + 3) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, a2);
      else
        --*(_DWORD *)v5;
    }
    WTF::fastFree(v4, a2);
  }
  v6 = (WebCore::FloatingObjects *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v6)
  {
    WebCore::FloatingObjects::~FloatingObjects(v6, a2);
    WTF::fastFree(v7, v8);
  }
  *(_QWORD *)this = off_1E341F268;
  if ((*(_WORD *)((_BYTE *)this + 69) & 0x400) != 0)
  {
    v33 = *(_QWORD *)WebCore::gRareDataMap;
    if (*(_QWORD *)WebCore::gRareDataMap)
    {
      v34 = *(_DWORD *)(v33 - 8);
      v35 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      for (i = 1; ; ++i)
      {
        v40 = v38;
        v41 = *(_QWORD *)(v33 + 16 * v38);
        if (v41 != -1)
        {
          if (!v41)
            goto LABEL_11;
          if (*(WebCore::RenderBlockFlow **)(v41 + 8) == this)
            break;
        }
        v38 = (v40 + i) & v34;
      }
      if ((_DWORD)v40 != *(_DWORD *)(v33 - 4))
        WTF::HashTable<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>,std::unique_ptr<WebCore::RenderBlockRareData>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<std::unique_ptr<WebCore::RenderBlockRareData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBlock const,WTF::SingleThreadWeakPtrImpl>>>::remove((uint64_t *)WebCore::gRareDataMap, (WTF **)(v33 + 16 * v40));
    }
  }
LABEL_11:
  *(_QWORD *)this = off_1E34201A0;
  v9 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
  }
  *(_QWORD *)this = off_1E34292D8;
  v10 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
  {
    WebCore::RenderLayer::~RenderLayer(v10, a2);
    if (*(_DWORD *)(v11 + 8))
    {
      *(_OWORD *)(v11 + 256) = 0u;
      *(_OWORD *)(v11 + 272) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      *(_OWORD *)(v11 + 240) = 0u;
      *(_OWORD *)(v11 + 192) = 0u;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 160) = 0u;
      *(_OWORD *)(v11 + 176) = 0u;
      *(_OWORD *)(v11 + 128) = 0u;
      *(_OWORD *)(v11 + 144) = 0u;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 80) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
    }
    else
    {
      bmalloc::api::isoDeallocate((bmalloc::api *)v11, a2);
    }
  }
  *(_QWORD *)this = off_1E3422BC8;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderBlockFlow *)((char *)this + 80), a2);
  v13 = (WTF *)(*(unsigned int *)((char *)this + 71) | ((unint64_t)*((unsigned __int8 *)this + 75) << 32));
  *(_DWORD *)((char *)this + 71) = 0;
  *((_BYTE *)this + 75) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v12);
    else
      --*(_DWORD *)v13;
  }
  v14 = (WTF *)(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32));
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, v12);
    else
      --*(_DWORD *)v14;
  }
  *(_QWORD *)this = off_1E342E320;
  v15 = *((_QWORD *)this + 7);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 112);
    *(_QWORD *)(v15 + 112) = 0;
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 16);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DEC60);
      }
      *(_DWORD *)(v16 + 16) = v17 - 1;
    }
    v18 = *((_QWORD *)this + 7);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 + 8);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1943DEC80);
      }
      *(_DWORD *)(v18 + 8) = v19 - 1;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v21 = *(_DWORD *)(v20 + 16);
  --*(_QWORD *)(v20 + 256);
  *(_DWORD *)(v20 + 16) = v21 + 1;
  if (v21 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1943DEBE8);
  }
  *(_DWORD *)(v20 + 16) = v21;
  v22 = (WTF *)(*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32));
  *(_DWORD *)((char *)this + 47) = 0;
  *((_BYTE *)this + 51) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v12);
    else
      --*(_DWORD *)v22;
  }
  v23 = (WTF *)(*((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32));
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v12);
    else
      --*(_DWORD *)v23;
  }
  v24 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v12);
    else
      --*(_DWORD *)v24;
  }
  v25 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v25);
      v30 = *(unsigned int *)(v25 + 28);
      if ((_DWORD)v30)
      {
        v42 = v25;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v30));
        v25 = v42;
      }
      v31 = *(WTF **)(v25 + 16);
      if (v31)
      {
        *(_QWORD *)(v25 + 16) = 0;
        *(_DWORD *)(v25 + 24) = 0;
        v32 = v25;
        WTF::fastFree(v31, v12);
        v25 = v32;
      }
      WTF::fastFree((WTF *)v25, v12);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v28 = *((_QWORD *)this + 1);
  if (v28)
  {
    *(_QWORD *)(v28 + 8) = 0;
    v29 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        WTF::fastFree(v29, v12);
      else
        --*(_DWORD *)v29;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 30) = 0;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v12);
  }
}

void WebCore::LayoutIntegration::InlineContentBuilder::adjustDisplayLines(WebCore::LayoutIntegration::InlineContentBuilder *this, WebCore::LayoutIntegration::InlineContent *a2, unint64_t a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  WebCore::LayoutIntegration::InlineContentBuilder *v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WebCore::Layout::Box **v24;
  uint64_t v25;
  float v26;
  float v27;
  __int16 v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  WebCore::Layout::Box *v38;
  uint64_t LineStyle;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  unint64_t v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::Node *v55;
  WebCore::Node *v56;
  float v57;
  unint64_t v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  double v77;
  double v78;
  BOOL v80;
  uint64_t v81;
  float v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  double v93;
  double v94;
  BOOL v96;
  float v97;
  int v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  _QWORD *v107;
  WebCore::InlineDisplay::Box::Text *v108;
  int v109;
  float v110;
  float v111;
  uint64_t v112;
  int v113;
  float v114;
  float v115;
  char v116;
  int v117;
  int v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  int v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  BOOL v140;
  float v141;
  float v142;
  float v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v149;
  _BYTE v150[12];
  float v151;
  float v152;
  char *v153;
  char v154;

  v5 = a3;
  v7 = this;
  if (a3)
  {
    if (a3 - 1 >= *((unsigned int *)a2 + 11))
    {
      __break(0xC471u);
      JUMPOUT(0x19425E514);
    }
    v107 = (_QWORD *)(*((_QWORD *)a2 + 4) + 152 * (a3 - 1));
    v8 = v107[1] + *v107;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(*(_QWORD *)this + 120);
  v10 = (unsigned __int16)*(_DWORD *)(*(_QWORD *)this + 124) >> 13;
  v116 = 2;
  switch((unsigned __int16)*(_DWORD *)(*(_QWORD *)this + 124) >> 13)
  {
    case 1:
    case 2:
      goto LABEL_5;
    case 3:
    case 5:
      LOBYTE(v10) = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_6;
    default:
      LOBYTE(v10) = 0;
LABEL_5:
      v116 = v10;
LABEL_6:
      if (*((unsigned int *)a2 + 11) <= a3)
        return;
      *(_DWORD *)&v150[8] = 0;
      v149 = *(_DWORD *)(*(_QWORD *)this + 120);
      *(_QWORD *)v150 = v116 & 6;
      break;
  }
  do
  {
    v11 = v8;
    v12 = *((_QWORD *)a2 + 4);
    v13 = v12 + 152 * v5;
    v15 = *(float *)(v13 + 64);
    v14 = *(float *)(v13 + 68);
    v17 = *(float *)(v13 + 72);
    v16 = *(float *)(v13 + 76);
    v151 = v16;
    v152 = v17;
    if (*(_DWORD *)v150 == 2)
      v18 = v16;
    else
      v18 = v17;
    v19 = *(float *)(v13 + 116);
    if ((v9 & 0x4000000) == 0 || v19 <= v18)
    {
      v54 = *(_QWORD *)v7;
      if ((*(_BYTE *)(*(_QWORD *)v7 + 22) & 1) == 0
        || (LODWORD(v56) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v54 + 984))(*(_QWORD *)v7), !(_DWORD)v56))
      {
        if ((*(_BYTE *)(v54 + 45) & 1) != 0)
          goto LABEL_113;
        v55 = *(WebCore::Node **)(*(_QWORD *)(v54 + 24) + 8);
        if (!v55)
          goto LABEL_113;
        if ((*((_WORD *)v55 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19425E134);
        }
        if (!WebCore::Node::isRootEditableElement(v55)
          || (*(_BYTE *)(v54 + 22) & 1) == 0
          || (*(_BYTE *)(v54 + 123) & 4) != 0
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v54 + 984))(v54))
        {
LABEL_113:
          if ((*(_BYTE *)(v54 + 22) & 1) == 0 || (*(_BYTE *)(v54 + 45) & 1) != 0)
          {
            LODWORD(v56) = 0;
          }
          else
          {
            v56 = *(WebCore::Node **)(*(_QWORD *)(v54 + 24) + 8);
            if (v56)
            {
              if ((*((_WORD *)v56 + 14) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19425E17CLL);
              }
              LODWORD(v56) = WebCore::Node::isRootEditableElement(v56);
              if ((_DWORD)v56)
                LODWORD(v56) = ~(*(_DWORD *)(v54 + 120) >> 20) & 0x40;
            }
          }
        }
        else
        {
          LODWORD(v56) = 128;
        }
      }
      *(float *)&a4 = v19 + (float)((float)(int)v56 * 0.015625);
      if (*(float *)&a4 > v18)
      {
        v57 = *(float *)&a4 - v18;
        if (*(_DWORD *)v150 == 2)
        {
          if ((v9 & 0x4000000) != 0)
          {
            v15 = v15 + 0.0;
            v14 = v14 - v57;
            v69 = v16 + v57;
          }
          else
          {
            v69 = v16 + (float)((float)((float)(v14 + v16) + v57) - (float)(v14 + v16));
          }
          v70 = &v151;
        }
        else
        {
          if ((v9 & 0x4000000) != 0)
          {
            v15 = v15 - v57;
            v14 = v14 + 0.0;
            v69 = v17 + v57;
          }
          else
          {
            v69 = v17 + (float)((float)((float)(v15 + v17) + v57) - (float)(v15 + v17));
          }
          v70 = &v152;
        }
        *(float *)&a4 = fmaxf(v69, 0.0);
        *v70 = *(float *)&a4;
        v16 = v151;
        v17 = v152;
      }
    }
    v4 &= 0xFFFFFFFFFFFFFF00;
    if (v8 < *((unsigned int *)a2 + 15)
      && (v20 = *((_QWORD *)a2 + 6), v21 = *(unsigned int *)(v20 + 80 * v8 + 40), v5 == v21))
    {
      v22 = 0;
      v23 = 0;
      v24 = (WebCore::Layout::Box **)(v20 + 80 * v8);
      v25 = 80 * v8 + 60;
      v26 = v14;
      v27 = v15;
      do
      {
        v28 = *(_WORD *)(v20 + v25 - 10);
        v29 = v28 & 0xF;
        v30 = v29 == 7 || v29 == 2;
        if (!v30 && (v29 - 3) >= 2)
        {
          if ((v28 & 0xE) != 0)
          {
            if (v29 == 5)
            {
              v71 = *((_QWORD *)*v24 + 14);
              if ((*(_BYTE *)(v71 + 45) & 4) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19425E19CLL);
              }
              v72 = *(_QWORD *)(v71 + 144);
              v146 = v23;
              if (v72 && (*(_BYTE *)(v72 + 25) & 8) != 0)
              {
                v81 = *(_QWORD *)(v71 + 32);
              }
              else
              {
                v73 = *(_QWORD *)(v71 + 32);
                v144 = v73;
                if (v73)
                  v73 = *(_QWORD *)(v73 + 8);
                v145 = v71;
                v74 = WebCore::RenderBox::logicalVisualOverflowRectForPropagation((WebCore::RenderBox *)v71, (const WebCore::RenderStyle *)(v73 + 80));
                LODWORD(a4) = *(_DWORD *)(v20 + v25 - 48);
                v77 = (float)(*(float *)(v20 + v25 - 52) + (float)((float)(int)v74 * 0.015625)) * 64.0;
                v78 = (float)(*(float *)&a4 + (float)((float)SHIDWORD(v74) * 0.015625)) * 64.0;
                v80 = v78 >= 2147483650.0 || v77 <= -2147483650.0 || v78 <= -2147483650.0;
                if (v80 || v77 >= 2147483650.0)
                {
                  if (v77 >= 2147483650.0)
                  {
                    v127 = 0x7FFFFFFF;
                  }
                  else if (v77 > -2147483650.0)
                  {
                    v127 = (int)v77;
                  }
                  else
                  {
                    v127 = 0x80000000;
                  }
                  a4 = (float)(*(float *)&a4 + (float)((float)SHIDWORD(v74) * 0.015625)) * 64.0;
                  if (a4 >= 2147483650.0)
                  {
                    v128 = 0x7FFFFFFF;
                  }
                  else if (a4 > -2147483650.0)
                  {
                    v128 = (int)a4;
                  }
                  else
                  {
                    v128 = 0x80000000;
                  }
                  *(float *)&a4 = (float)v127 * 0.015625;
                  v129 = (float)v128 * 0.015625;
                  v130 = (float)v75 * 0.015625;
                  v131 = (float)v76 * 0.015625;
                  if (*(float *)&a4 >= v27)
                    v132 = v27;
                  else
                    v132 = (float)v127 * 0.015625;
                  if (v129 >= v26)
                    v133 = v26;
                  else
                    v133 = (float)v128 * 0.015625;
                  v134 = v27 + v17;
                  if ((float)(v27 + v17) < (float)(v130 + *(float *)&a4))
                    v134 = v130 + *(float *)&a4;
                  v135 = v26 + v16;
                  if ((float)(v26 + v16) < (float)(v131 + v129))
                    v135 = v131 + v129;
                  v136 = v134 - v132;
                  v137 = v135 - v133;
                  if (v16 <= 0.0)
                  {
                    v132 = (float)v127 * 0.015625;
                    v133 = (float)v128 * 0.015625;
                    v136 = (float)v75 * 0.015625;
                    v137 = (float)v76 * 0.015625;
                  }
                  if (v17 <= 0.0)
                  {
                    v138 = (float)v75 * 0.015625;
                  }
                  else
                  {
                    *(float *)&a4 = v132;
                    v129 = v133;
                    v138 = v136;
                  }
                  if (v17 > 0.0)
                    v139 = v137;
                  else
                    v139 = (float)v76 * 0.015625;
                  v140 = v131 > 0.0;
                  if (v131 > 0.0)
                  {
                    v141 = v129;
                  }
                  else
                  {
                    *(float *)&a4 = v27;
                    v141 = v26;
                  }
                  if (v140)
                    v142 = v138;
                  else
                    v142 = v17;
                  if (v140)
                    v143 = v139;
                  else
                    v143 = v16;
                  if (v130 > 0.0)
                  {
                    v27 = *(float *)&a4;
                    v26 = v141;
                    v17 = v142;
                    v16 = v143;
                  }
                  v81 = v144;
                  v71 = v145;
                }
                else
                {
                  *(float *)&a4 = (float)v75 * 0.015625;
                  v81 = v144;
                  v71 = v145;
                  if (*(float *)&a4 > 0.0)
                  {
                    v82 = (float)v76 * 0.015625;
                    if (v82 > 0.0)
                    {
                      v83 = (int)v78;
                      v84 = (float)(int)v77 * 0.015625;
                      v85 = (float)v83 * 0.015625;
                      if (v17 <= 0.0 || v16 <= 0.0)
                      {
                        v27 = v84;
                        v26 = (float)v83 * 0.015625;
                        v17 = (float)v75 * 0.015625;
                        v16 = (float)v76 * 0.015625;
                      }
                      else
                      {
                        v86 = v27 + v17;
                        if (v84 < v27)
                          v27 = v84;
                        v87 = v26 + v16;
                        if (v85 < v26)
                          v26 = (float)v83 * 0.015625;
                        *(float *)&a4 = *(float *)&a4 + v84;
                        if (v86 >= *(float *)&a4)
                          *(float *)&a4 = v86;
                        v88 = v82 + v85;
                        if (v87 >= v88)
                          v88 = v87;
                        v17 = *(float *)&a4 - v27;
                        v16 = v88 - v26;
                      }
                    }
                  }
                }
              }
              if (v81)
                v89 = *(_QWORD *)(v81 + 8);
              else
                v89 = 0;
              v90 = WebCore::RenderBox::layoutOverflowRectForPropagation((WebCore::RenderBox *)v71, v89 + 80, a4);
              LODWORD(a4) = *(_DWORD *)(v20 + v25 - 48);
              v93 = (float)(*(float *)(v20 + v25 - 52) + (float)((float)(int)v90 * 0.015625)) * 64.0;
              v94 = (float)(*(float *)&a4 + (float)((float)SHIDWORD(v90) * 0.015625)) * 64.0;
              v96 = v94 >= 2147483650.0 || v93 <= -2147483650.0 || v94 <= -2147483650.0;
              if (v96 || v93 >= 2147483650.0)
              {
                if (v93 >= 2147483650.0)
                {
                  v117 = 0x7FFFFFFF;
                }
                else if (v93 <= -2147483650.0)
                {
                  v117 = 0x80000000;
                }
                else
                {
                  v117 = (int)v93;
                }
                a4 = (float)(*(float *)&a4 + (float)((float)SHIDWORD(v90) * 0.015625)) * 64.0;
                if (a4 >= 2147483650.0)
                {
                  v118 = 0x7FFFFFFF;
                }
                else if (a4 <= -2147483650.0)
                {
                  v118 = 0x80000000;
                }
                else
                {
                  v118 = (int)a4;
                }
                *(float *)&a4 = (float)v91 * 0.015625;
                if (*(float *)&a4 > 0.0)
                {
                  v119 = (float)v92 * 0.015625;
                  if (v119 > 0.0)
                  {
                    v120 = (float)v117 * 0.015625;
                    v121 = (float)v118 * 0.015625;
                    if (v152 <= 0.0 || v151 <= 0.0)
                    {
                      v151 = (float)v92 * 0.015625;
                      v152 = (float)v91 * 0.015625;
                      v15 = (float)v117 * 0.015625;
                      v14 = (float)v118 * 0.015625;
                    }
                    else
                    {
                      v122 = v15 + v152;
                      if (v120 < v15)
                        v15 = (float)v117 * 0.015625;
                      v123 = v14 + v151;
                      if (v121 < v14)
                        v14 = (float)v118 * 0.015625;
                      v124 = *(float *)&a4 + v120;
                      if (v122 >= v124)
                        v124 = v122;
                      v125 = v119 + v121;
                      if (v123 >= v125)
                        v125 = v123;
                      v126 = v124 - v15;
                      *(float *)&a4 = v125 - v14;
                      v151 = v125 - v14;
                      v152 = v126;
                    }
                  }
                }
                v23 = v146;
              }
              else
              {
                *(float *)&a4 = (float)v91 * 0.015625;
                v23 = v146;
                if (*(float *)&a4 > 0.0)
                {
                  v97 = (float)v92 * 0.015625;
                  if (v97 > 0.0)
                  {
                    v98 = (int)v94;
                    v99 = (float)(int)v93 * 0.015625;
                    v100 = (float)v98 * 0.015625;
                    if (v152 <= 0.0 || v151 <= 0.0)
                    {
                      v151 = (float)v92 * 0.015625;
                      v152 = (float)v91 * 0.015625;
                      v15 = v99;
                      v14 = (float)v98 * 0.015625;
                    }
                    else
                    {
                      v101 = v15 + v152;
                      if (v99 < v15)
                        v15 = v99;
                      v102 = v14 + v151;
                      if (v100 < v14)
                        v14 = (float)v98 * 0.015625;
                      v103 = *(float *)&a4 + v99;
                      if (v101 >= v103)
                        v103 = v101;
                      v104 = v97 + v100;
                      if (v102 >= v104)
                        v104 = v102;
                      v105 = v103 - v15;
                      *(float *)&a4 = v104 - v14;
                      v151 = v104 - v14;
                      v152 = v105;
                    }
                  }
                }
              }
            }
            else if ((v28 & 0xE) == 6)
            {
              v61 = *((_QWORD *)*v24 + 14);
              if ((*(_BYTE *)(v61 + 45) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19425E15CLL);
              }
              if ((*(_BYTE *)(v61 + 21) & 0x80) == 0)
                goto LABEL_97;
              if ((*(_BYTE *)(v61 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19425E1BCLL);
              }
              v106 = *(_QWORD *)(v61 + 144);
              if (!v106 || (*(_BYTE *)(v106 + 25) & 8) == 0)
              {
LABEL_97:
                v62 = v20 + v25;
                LODWORD(a4) = *(_DWORD *)(v20 + v25 - 28);
                if (*(float *)&a4 > 0.0)
                {
                  v63 = *(float *)(v62 - 24);
                  if (v63 > 0.0)
                  {
                    v64 = *(float *)(v62 - 36);
                    if (v17 <= 0.0 || v16 <= 0.0)
                    {
                      v26 = *(float *)(v20 + v25 - 32);
                      v27 = *(float *)(v62 - 36);
                      v17 = *(float *)(v20 + v25 - 28);
                      v16 = *(float *)(v62 - 24);
                    }
                    else
                    {
                      v65 = v27 + v17;
                      if (v64 < v27)
                        v27 = *(float *)(v62 - 36);
                      v66 = *(float *)(v20 + v25 - 32);
                      v67 = v26 + v16;
                      if (v66 < v26)
                        v26 = *(float *)(v20 + v25 - 32);
                      *(float *)&a4 = *(float *)&a4 + v64;
                      if (v65 >= *(float *)&a4)
                        *(float *)&a4 = v65;
                      v68 = v63 + v66;
                      if (v67 >= v68)
                        v68 = v67;
                      v17 = *(float *)&a4 - v27;
                      v16 = v68 - v26;
                    }
                  }
                }
              }
            }
          }
          else
          {
            v31 = v20 + v25;
            v32 = *(float *)(v20 + v25 - 28);
            if (v32 <= 0.0 || (LODWORD(a4) = *(_DWORD *)(v31 - 24), *(float *)&a4 <= 0.0))
            {
              v33 = v27;
              v32 = v17;
              *(float *)&a4 = v16;
            }
            else
            {
              v33 = *(float *)(v31 - 36);
              if (v17 <= 0.0 || v16 <= 0.0)
              {
                v26 = *(float *)(v20 + v25 - 32);
              }
              else
              {
                v34 = v32 + v33;
                if (v33 >= v27)
                  v33 = v27;
                v35 = *(float *)(v20 + v25 - 32);
                v36 = v26 + v16;
                if (v35 < v26)
                  v26 = *(float *)(v20 + v25 - 32);
                if ((float)(v27 + v17) >= v34)
                  v34 = v27 + v17;
                v37 = *(float *)&a4 + v35;
                if (v36 >= v37)
                  v37 = v36;
                v32 = v34 - v33;
                *(float *)&a4 = v37 - v26;
              }
            }
            if ((v28 & 0x80) != 0)
              goto LABEL_49;
            v38 = *v24;
            if ((_DWORD)v21)
            {
              LineStyle = (uint64_t)v38 + 16;
            }
            else
            {
              v113 = LODWORD(a4);
              v114 = v32;
              v115 = v33;
              v147 = v23;
              LineStyle = WebCore::Layout::Box::firstLineStyle(v38);
              v23 = v147;
              v33 = v115;
              v32 = v114;
              LODWORD(a4) = v113;
            }
            if ((*(_BYTE *)(*(_QWORD *)(LineStyle + 24) + 239) & 4) != 0 || (*(_BYTE *)(LineStyle + 40) & 0x30) != 0)
              goto LABEL_49;
            v40 = *(_QWORD *)(v20 + v25);
            if (v40)
            {
              v41 = *(_DWORD *)(v40 + 4);
            }
            else
            {
              v108 = (WebCore::InlineDisplay::Box::Text *)(v20 + v25 - 8);
              v109 = LODWORD(a4);
              v110 = v32;
              v111 = v33;
              v112 = v23;
              WebCore::InlineDisplay::Box::Text::originalContent(v108);
              v23 = v112;
              v33 = v111;
              v32 = v110;
              LODWORD(a4) = v109;
            }
            if (!v41)
            {
LABEL_49:
              v27 = v33;
              v17 = v32;
              v16 = *(float *)&a4;
            }
            else
            {
              v42 = v23 | (*(_QWORD *)&v150[4] << 8);
              if (!v22)
                v42 = v8;
              v23 = v42;
              *(_QWORD *)&v150[4] = v42 >> 8;
              v22 = 1;
              v27 = v33;
              v17 = v32;
              v16 = *(float *)&a4;
              v4 = v8;
            }
          }
        }
        ++v8;
        v43 = *((unsigned int *)a2 + 15);
        if (v8 >= v43)
          break;
        v20 = *((_QWORD *)a2 + 6);
        v24 = (WebCore::Layout::Box **)(v20 + 80 * v8);
        v21 = *(unsigned int *)(v20 + v25 + 60);
        v25 += 80;
      }
      while (v5 == v21);
      if (v22)
      {
        v9 = v149;
        v154 = *(_BYTE *)(v12 + 152 * v5 + 124) & 1;
        v44 = 0.0;
        if (v4 >= v43)
        {
          v46 = 0.0;
        }
        else
        {
          v45 = v23 | (*(_QWORD *)&v150[4] << 8);
          v46 = 0.0;
          if (v45 < v43)
          {
            v153 = &v154;
            v47 = *((_QWORD *)a2 + 6);
            v48 = v47 + 80 * v45;
            if ((*(_WORD *)(*(_QWORD *)v48 + 12) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19425E0F4);
            }
            if ((*(_BYTE *)(*(_QWORD *)v48 + 129) & 2) == 0)
            {
              *(float *)&a4 = WebCore::LayoutIntegration::glyphOverflowInInlineDirection(unsigned long,unsigned long,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatRect const&,BOOL)::$_0::operator()<WebCore::InlineDisplay::Box const>(&v153, v48, 1);
              if (*(float *)&a4 < 0.0)
                v44 = fmaxf(v27 - (float)(*(float *)&a4 + *(float *)(v47 + 80 * v45 + 8)), 0.0);
            }
            if (v4 >= *((unsigned int *)a2 + 15))
            {
              __break(0xC471u);
              JUMPOUT(0x19425E2C8);
            }
            v49 = *((_QWORD *)a2 + 6);
            v50 = v49 + 80 * v4;
            if ((*(_WORD *)(*(_QWORD *)v50 + 12) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19425E114);
            }
            if ((*(_BYTE *)(*(_QWORD *)v50 + 129) & 2) == 0)
            {
              *(float *)&a4 = WebCore::LayoutIntegration::glyphOverflowInInlineDirection(unsigned long,unsigned long,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatRect const&,BOOL)::$_0::operator()<WebCore::InlineDisplay::Box const>(&v153, v50, 0);
              *(float *)&a4 = *(float *)&a4 + v51;
              if (*(float *)&a4 > *(float *)(v49 + 80 * v4 + 16))
                v46 = fmaxf((float)(*(float *)&a4 + *(float *)(v49 + 80 * v4 + 8)) - (float)(v27 + v17), 0.0);
            }
          }
        }
        v27 = v27 - v44;
        v17 = v46 + (float)(v17 + v44);
        v16 = v16 + 0.0;
        v7 = this;
      }
      else
      {
        v7 = this;
        v9 = v149;
      }
    }
    else
    {
      v27 = v15;
      v26 = v14;
    }
    *(float *)&a4 = v151;
    v52 = v152;
    v53 = v12 + 152 * v5;
    *(float *)(v53 + 48) = v15;
    *(float *)(v53 + 52) = v14;
    *(float *)(v53 + 56) = v52;
    *(_DWORD *)(v53 + 60) = LODWORD(a4);
    *(float *)(v53 + 80) = v27;
    *(float *)(v53 + 84) = v26;
    *(float *)(v53 + 88) = v17;
    *(float *)(v53 + 92) = v16;
    *(_QWORD *)v13 = v11;
    *(_QWORD *)(v53 + 8) = v8 - v11;
    if (v5)
    {
      v58 = v5 - 1;
      if (v5 - 1 >= *((unsigned int *)a2 + 11))
      {
        __break(0xC471u);
        JUMPOUT(0x19425E2D0);
      }
      v59 = *((_QWORD *)a2 + 4);
      v60 = *(float *)(v59 + 152 * v58 + 84);
      if (v26 <= v60 || (float)(v60 + *(float *)(v59 + 152 * v58 + 92)) >= (float)(v26 + v16))
        *((_BYTE *)a2 + 21) = 1;
    }
    if (!*((_BYTE *)a2 + 80))
    {
      if (v27 == v15 && v17 == v52)
      {
        if (v26 == v14)
          goto LABEL_68;
      }
      else if (v27 == v15 && v26 == v14 && v17 == v52)
      {
LABEL_68:
        if (v16 == *(float *)&a4)
          goto LABEL_69;
      }
      *((_BYTE *)a2 + 80) = 1;
    }
LABEL_69:
    ++v5;
  }
  while (v5 < *((unsigned int *)a2 + 11));
}

void WebCore::RenderBlockFlow::layoutModernLines(WebCore::RenderBlockFlow *this, int a2, WebCore::LayoutUnit *a3, WebCore::LayoutUnit *a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::RenderObject *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::RenderBlockFlow *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  _BYTE *v50;
  unsigned __int8 *v51;
  _BOOL4 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::RenderBlockFlow *v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  WebCore::Layout::LayoutState *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  WebCore::RenderObject *v133;
  WebCore::RenderObject *v134;
  uint64_t v135;
  uint64_t i;
  uint64_t v137;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  WebCore::LayoutIntegration::LineLayout **v142;
  WebCore::LayoutIntegration::LineLayout *v143;
  WTF *v144;
  void *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  WebCore::RenderBlockFlow *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  double v173;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  int v181;
  void *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  double v198;
  unsigned int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  const WebCore::RenderBlockFlow *v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  char v217;
  WTF *v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  char *LineStyle;
  void *v230;
  float v231;
  char *v233;
  void *v234;
  float v235;
  const WebCore::RenderBlockFlow *v236;
  uint64_t v237;
  int v238;
  double v239;
  int v241;
  double v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  double v247;
  int v249;
  double v250;
  int v252;
  WebCore::LegacyLineLayout *v253;
  WebCore::LegacyLineLayout *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  int v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  unsigned int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  WebCore::RenderBlockFlow *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v282;
  WebCore::Layout::LayoutState *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  float v295;
  float v296;
  float v297;
  float v298;
  double v299;
  WTF *v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  int v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  int v314;
  unsigned int v315;
  int v316;
  char *v317;
  int v318;
  WTF *v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  WTF *v327;
  char *v328;
  void *v329;
  float v330;
  WebCore::LegacyLineLayout *v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  int v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  int v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  char v379[4];
  unsigned int v380;
  int v381;
  char v382;
  _QWORD v383[2];
  unsigned int v384;
  _BYTE v385[16];
  int v386;
  _BYTE v387[16];
  unsigned int v388;
  char v389;
  _QWORD v390[2];

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  v6 = *(unsigned int *)(v5 + 508);
  if ((_DWORD)v6)
    v372 = *(_QWORD *)(*(_QWORD *)(v5 + 496) + 8 * v6 - 8);
  else
    v372 = 0;
  v7 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1712))(this);
  if ((*((_DWORD *)this + 30) & 0x3C0) == 0x1C0
    && (v58 = *((_QWORD *)this + 13), *(_BYTE *)(v58 + 180) == 4)
    && !*(_BYTE *)(v58 + 181))
  {
    if (*(_BYTE *)(v58 + 182))
      v59 = *(float *)(v58 + 176);
    else
      v59 = (float)*(int *)(v58 + 176);
    v8 = v59 == 0.0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)this + 16);
  if (!(v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
    || (v10 = *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8)) == 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_68;
LABEL_127:
    if (*((_DWORD *)this + 60) == 1 && *((_QWORD *)this + 29))
      goto LABEL_129;
    v65 = WTF::fastMalloc((WTF *)0x70);
    WebCore::LayoutIntegration::LineLayout::LineLayout((WebCore::LayoutIntegration::LineLayout *)v65, this);
    v141 = *((unsigned int *)this + 60);
    if ((_DWORD)v141 != -1)
    {
      v142 = (WebCore::LayoutIntegration::LineLayout **)((char *)this + 232);
      if ((_DWORD)v141 == 1)
      {
        v143 = *v142;
        *v142 = (WebCore::LayoutIntegration::LineLayout *)v65;
        if (v143)
        {
          WebCore::LayoutIntegration::LineLayout::~LineLayout(v143);
          if (*(_DWORD *)v144)
          {
            *((_OWORD *)v144 + 5) = 0u;
            *((_OWORD *)v144 + 6) = 0u;
            *((_OWORD *)v144 + 3) = 0u;
            *((_OWORD *)v144 + 4) = 0u;
            *((_OWORD *)v144 + 1) = 0u;
            *((_OWORD *)v144 + 2) = 0u;
            *(_OWORD *)v144 = 0u;
          }
          else
          {
            WTF::fastFree(v144, v145);
          }
LABEL_129:
          if (*((_DWORD *)this + 60) == 1)
            v65 = *((_QWORD *)this + 29);
          else
            v65 = 0;
        }
LABEL_131:
        v66 = v65 + 88;
        v67 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v65 + 88) + 8) + 8);
        v69 = v67[30];
        v68 = v67[31];
        v70 = (unsigned __int16)v68 >> 13;
        LOWORD(v68) = (unsigned __int16)v68 >> 13;
        v53 = ((3u >> v68) & 1) == 0;
        v71 = 0x14u >> v68;
        v72 = v53 && v70 < 6;
        v73 = (v70 < 6) & v71;
        v377 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v67 + 944))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 88)
                                                                                                  + 8)
                                                                                      + 8));
        v370 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 952))(v67);
        v376 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 928))(v67);
        v74 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 936))(v67);
        v75 = v74;
        v371 = v69;
        if ((v69 & 0x4000000) == 0)
        {
          if (v72)
          {
            v335 = v377;
            if ((v69 & 0x4000000) != 0)
              v336 = v74;
            else
              v336 = v376;
            if ((v69 & 0x4000000) != 0)
              v337 = v376;
            else
              v337 = v74;
            if (v73)
              v338 = v377;
            else
              v338 = v370;
            v376 = v338;
            v377 = v336;
            if (v73)
              v75 = v370;
            else
              v75 = v335;
            v370 = v337;
          }
          v378 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1016))(v67);
          v369 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1024))(v67);
          v76 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1000))(v67);
          v77 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1008))(v67);
          v367 = v75;
          if (!v72)
          {
            v368 = v77;
            goto LABEL_138;
          }
          if ((v69 & 0x4000000) != 0)
            v339 = v77;
          else
            v339 = v76;
          if ((v69 & 0x4000000) != 0)
            v340 = v76;
          else
            v340 = v77;
          if (v73)
            v76 = v378;
          else
            v76 = v369;
          if (v73)
            v341 = v369;
          else
            v341 = v378;
          v368 = v341;
          v378 = v339;
          v342 = v340;
          goto LABEL_658;
        }
        v367 = v74;
        if (v72)
        {
          v359 = v376;
          if ((v69 & 0x4000000) != 0)
            v358 = v74;
          else
            v358 = v376;
          if ((v69 & 0x4000000) == 0)
            v359 = v74;
          if (v73)
            v363 = v377;
          else
            v363 = v370;
          v376 = v363;
          if (v73)
            v364 = v370;
          else
            v364 = v377;
          v367 = v364;
        }
        else
        {
          if ((v69 & 0x4000000) != 0)
          {
            v358 = v370;
LABEL_699:
            v369 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1016))(v67);
            v360 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1024))(v67);
            v76 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1000))(v67);
            v368 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1008))(v67);
            if (v72)
            {
              if ((v371 & 0x4000000) != 0)
                v365 = v368;
              else
                v365 = v76;
              if ((v371 & 0x4000000) != 0)
                v342 = v76;
              else
                v342 = v368;
              if (v73)
                v76 = v369;
              else
                v76 = v360;
              if (v73)
                v366 = v360;
              else
                v366 = v369;
              v368 = v366;
              v370 = v377;
              v377 = v358;
              v378 = v365;
            }
            else
            {
              if ((v371 & 0x4000000) != 0)
              {
                v370 = v377;
                v377 = v358;
                v378 = v360;
LABEL_138:
                v78 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 992))(v67);
                v79 = v67[40];
                v81 = v79 - v80;
                if (__OFSUB__(v79, v80))
                  v81 = (v79 >> 31) + 0x7FFFFFFF;
                v82 = v81 - HIDWORD(v78);
                if (__OFSUB__(v81, HIDWORD(v78)))
                  v82 = (v81 >> 31) + 0x7FFFFFFF;
                v83 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1016))(v67);
                v84 = v79 - v83;
                if (__OFSUB__(v79, v83))
                  v84 = (v79 >> 31) + 0x7FFFFFFF;
                v85 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1024))(v67);
                v86 = v84 - v85;
                if (__OFSUB__(v84, v85))
                  v86 = (v84 >> 31) + 0x7FFFFFFF;
                v87 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1352))(v67);
                v88 = v87 << 6;
                if (v87 < -33554432)
                  v88 = 0x80000000;
                if (v87 > 0x1FFFFFF)
                  v88 = 0x7FFFFFFF;
                v47 = __OFSUB__(v86, v88);
                v89 = v86 - v88;
                if (v47)
                  v89 = (v86 >> 31) + 0x7FFFFFFF;
                v90 = v89 & ~(v89 >> 31);
                v91 = v82 - v90;
                if (__OFSUB__(v82, v90))
                  v91 = (v82 >> 31) + 0x7FFFFFFF;
                v92 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 992))(v67);
                v94 = v67[41];
                v95 = v94 - v92;
                if (__OFSUB__(v94, v92))
                  v95 = (v94 >> 31) + 0x7FFFFFFF;
                v96 = v95 - v93;
                if (__OFSUB__(v95, v93))
                  v96 = (v95 >> 31) + 0x7FFFFFFF;
                v97 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1000))(v67);
                v98 = v94 - v97;
                if (__OFSUB__(v94, v97))
                  v98 = (v94 >> 31) + 0x7FFFFFFF;
                v99 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1008))(v67);
                v100 = v98 - v99;
                if (__OFSUB__(v98, v99))
                  v100 = (v98 >> 31) + 0x7FFFFFFF;
                v101 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1360))(v67);
                v102 = v101 << 6;
                if (v101 < -33554432)
                  v102 = 0x80000000;
                if (v101 > 0x1FFFFFF)
                  v102 = 0x7FFFFFFF;
                v47 = __OFSUB__(v100, v102);
                v103 = v100 - v102;
                if (v47)
                  v103 = (v100 >> 31) + 0x7FFFFFFF;
                v104 = v103 & ~(v103 >> 31);
                v105 = v96 - v104;
                if (__OFSUB__(v96, v104))
                  v105 = (v96 >> 31) + 0x7FFFFFFF;
                v106 = *(_QWORD *)v67;
                if (v70 - 2 < 4)
                {
                  v346 = v67[41];
                  v347 = (*(uint64_t (**)(_DWORD *))(v106 + 1000))(v67);
                  v348 = v346 - v347;
                  if (__OFSUB__(v346, v347))
                    v348 = (v346 >> 31) + 0x7FFFFFFF;
                  v349 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1008))(v67);
                  v350 = v348 - v349;
                  if (__OFSUB__(v348, v349))
                    v350 = (v348 >> 31) + 0x7FFFFFFF;
                  v351 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1360))(v67);
                  v352 = v351 << 6;
                  if (v351 < -33554432)
                    v352 = 0x80000000;
                  if (v351 > 0x1FFFFFF)
                    v352 = 0x7FFFFFFF;
                  v47 = __OFSUB__(v350, v352);
                  v353 = v350 - v352;
                  if (v47)
                    v353 = (v350 >> 31) + 0x7FFFFFFF;
                  v354 = v353 & ~(v353 >> 31);
                  v355 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 928))(v67);
                  v356 = v354 - v355;
                  if (__OFSUB__(v354, v355))
                    v356 = 0x7FFFFFFF;
                  v357 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 936))(v67);
                  v119 = v356 - v357;
                  if (__OFSUB__(v356, v357))
                    v119 = (v356 >> 31) + 0x7FFFFFFF;
                  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v67 + 11) + 40) + 584) & 0x100) == 0)
                    goto LABEL_186;
                  v344 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1360))(v67);
                }
                else
                {
                  v107 = v67[40];
                  v108 = (*(uint64_t (**)(_DWORD *))(v106 + 1016))(v67);
                  v109 = v107 - v108;
                  if (__OFSUB__(v107, v108))
                    v109 = (v107 >> 31) + 0x7FFFFFFF;
                  v110 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1024))(v67);
                  v111 = v109 - v110;
                  if (__OFSUB__(v109, v110))
                    v111 = (v109 >> 31) + 0x7FFFFFFF;
                  v112 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1352))(v67);
                  v113 = v112 << 6;
                  if (v112 < -33554432)
                    v113 = 0x80000000;
                  if (v112 > 0x1FFFFFF)
                    v113 = 0x7FFFFFFF;
                  v47 = __OFSUB__(v111, v113);
                  v114 = v111 - v113;
                  if (v47)
                    v114 = (v111 >> 31) + 0x7FFFFFFF;
                  v115 = v114 & ~(v114 >> 31);
                  v116 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 944))(v67);
                  v117 = v115 - v116;
                  if (__OFSUB__(v115, v116))
                    v117 = 0x7FFFFFFF;
                  v118 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 952))(v67);
                  v119 = v117 - v118;
                  if (__OFSUB__(v117, v118))
                    v119 = (v117 >> 31) + 0x7FFFFFFF;
                  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)v67 + 11) + 40) + 584) & 0x100) == 0)
                  {
LABEL_186:
                    v120 = 0;
                    goto LABEL_187;
                  }
                  v344 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v67 + 1352))(v67);
                }
                if (v344 >= -33554432)
                {
                  v120 = v344 << 6;
                  if (v344 > 0x1FFFFFF)
                    v120 = 0x7FFFFFFF;
                }
                else
                {
                  v120 = 0x80000000;
                }
LABEL_187:
                v121 = v119 - v120;
                if (__OFSUB__(v119, v120))
                  v121 = (v119 >> 31) + 0x7FFFFFFF;
                v122 = v378 + v377;
                if (__OFADD__(v378, v377))
                  v122 = (v378 >> 31) + 0x7FFFFFFF;
                v123 = v76 + v376;
                if (__OFADD__(v76, v376))
                  v123 = (v76 >> 31) + 0x7FFFFFFF;
                v124 = v91 & ~(v91 >> 31);
                v125 = v122;
                if ((v371 & 0x4000000) != 0)
                {
                  v334 = v369 + v124;
                  if (__OFADD__((_DWORD)v369, v124))
                    v334 = (v369 >> 31) + 0x7FFFFFFF;
                  v125 = v334 + v370;
                  if (__OFADD__(v334, (_DWORD)v370))
                    v125 = (v334 >> 31) + 0x7FFFFFFF;
                }
                v126 = *(WebCore::Layout::LayoutState **)(v65 + 96);
                if (v126)
                  v126 = (WebCore::Layout::LayoutState *)*((_QWORD *)v126 + 1);
                v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v66 + 8) + 8) + 56);
                if (v127 && (*(_WORD *)(v127 + 12) & 0x40) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194260124);
                }
                if (*((_DWORD *)v126 + 2) || (v128 = *(_QWORD *)(v127 + 104)) == 0)
                  v128 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v126, v127);
                v129 = v121 & ~(v121 >> 31);
                *(_DWORD *)(v128 + 8) = v129;
                *(_QWORD *)(v128 + 48) = v377 | (unint64_t)(v370 << 32);
                *(_QWORD *)(v128 + 56) = v376 | (unint64_t)(v367 << 32);
                *(_QWORD *)(v128 + 32) = v378 | (unint64_t)(v369 << 32);
                *(_QWORD *)(v128 + 40) = v76 | (unint64_t)(v368 << 32);
                *(_DWORD *)(v128 + 64) = v105 & ~(v105 >> 31);
                *(_DWORD *)(v128 + 68) = v124;
                *(_QWORD *)(v128 + 16) = 0;
                *(_QWORD *)(v128 + 24) = 0;
                v130 = *(unsigned __int8 *)(v65 + 68);
                *(_BYTE *)(v65 + 48) = 2;
                *(_QWORD *)(v65 + 52) = v122 | (unint64_t)(v129 << 32);
                *(_DWORD *)(v65 + 60) = v123;
                *(_DWORD *)(v65 + 64) = v125;
                if (!v130)
                  *(_BYTE *)(v65 + 68) = 1;
                v131 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v66 + 8) + 8);
                if ((*(_BYTE *)(v131 + 52) & 7) != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19425FCD0);
                }
                v132 = *(unsigned int *)(v131 + 64);
                if (v132 | ((unint64_t)*(unsigned __int8 *)(v131 + 68) << 32))
                {
                  v133 = *(WebCore::RenderObject **)((v132 | ((unint64_t)*(unsigned __int8 *)(v131 + 68) << 32))
                                                   + 8);
                  if (v133)
                  {
                    do
                    {
                      while (1)
                      {
LABEL_206:
                        v134 = v133;
                        if ((*((_BYTE *)v133 + 45) & 2) == 0)
                        {
                          if ((*((_BYTE *)v133 + 52) & 7) == 3
                            || ((v139 = *((unsigned __int8 *)v133 + 46), v139 <= 0x3F)
                              ? (v140 = ((1 << v139) & 0x8000000800080000) == 0)
                              : (v140 = 1),
                                !v140 || (*((_BYTE *)v133 + 45) & 0x40) != 0 || v139 == 11))
                          {
                            if ((*((_BYTE *)v133 + 45) & 4) == 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19426015CLL);
                            }
                            WebCore::LayoutIntegration::BoxGeometryUpdater::updateLayoutBoxDimensions(v65 + 88, (uint64_t)v133, 0);
                          }
                          else if (v139 == 20)
                          {
                            WebCore::LayoutIntegration::BoxGeometryUpdater::updateListMarkerDimensions(v65 + 88, v133, 0);
                          }
                          else if (v139 == 17)
                          {
                            v282 = *(_QWORD *)(v65 + 96);
                            if (v282)
                              v283 = *(WebCore::Layout::LayoutState **)(v282 + 8);
                            else
                              v283 = 0;
                            v284 = *((_QWORD *)v134 + 7);
                            if (v284 && (*(_WORD *)(v284 + 12) & 0x40) == 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1942603B8);
                            }
                            if (*((_DWORD *)v283 + 2) || (v285 = *(_QWORD *)(v284 + 104)) == 0)
                              v285 = WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(v283, v284);
                            *(_DWORD *)(v285 + 8) = 0;
                            *(_OWORD *)(v285 + 16) = 0u;
                            *(_OWORD *)(v285 + 32) = 0u;
                            *(_OWORD *)(v285 + 48) = 0u;
                            if ((*((_QWORD *)v134 + 12) & 0x180000) == 0x100000)
                              *(_DWORD *)(v285 + 12) = 0;
                          }
                          else if ((*((_BYTE *)v133 + 45) & 0x20) != 0)
                          {
                            WebCore::LayoutIntegration::BoxGeometryUpdater::updateInlineBoxDimensions(v65 + 88, (uint64_t)v133, 0);
                          }
                        }
                        if ((*((_BYTE *)v134 + 45) & 0x20) == 0)
                          break;
                        v133 = (WebCore::RenderObject *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)v134 + 112))(v134);
                        if (!v133)
                        {
                          if (v134 == (WebCore::RenderObject *)v131)
                            goto LABEL_270;
                          v155 = *(unsigned int *)((char *)v134 + 47);
                          if (!(v155 | ((unint64_t)*((unsigned __int8 *)v134 + 51) << 32))
                            || (v133 = *(WebCore::RenderObject **)((v155 | ((unint64_t)*((unsigned __int8 *)v134
                                                                                              + 51) << 32))
                                                                 + 8)) == 0)
                          {
                            v156 = *((_QWORD *)v134 + 4);
                            if (!v156)
                              goto LABEL_270;
                            v157 = *(_QWORD *)(v156 + 8);
                            if (!v157 || v157 == v131)
                              goto LABEL_270;
                            while (1)
                            {
                              v279 = *(unsigned int *)(v157 + 47);
                              if (v279 | ((unint64_t)*(unsigned __int8 *)(v157 + 51) << 32))
                              {
                                v133 = *(WebCore::RenderObject **)((v279 | ((unint64_t)*(unsigned __int8 *)(v157 + 51) << 32))
                                                                 + 8);
                                if (v133)
                                  break;
                              }
                              v280 = *(_QWORD *)(v157 + 32);
                              if (v280)
                              {
                                v157 = *(_QWORD *)(v280 + 8);
                                if (v157 && v157 != v131)
                                  continue;
                              }
                              goto LABEL_270;
                            }
                          }
                        }
                      }
                      if (v134 == (WebCore::RenderObject *)v131)
                        goto LABEL_270;
                      v135 = *(unsigned int *)((char *)v134 + 47);
                      if (!(v135 | ((unint64_t)*((unsigned __int8 *)v134 + 51) << 32)))
                        break;
                      v133 = *(WebCore::RenderObject **)((v135 | ((unint64_t)*((unsigned __int8 *)v134 + 51) << 32))
                                                       + 8);
                    }
                    while (v133);
                    for (i = *((_QWORD *)v134 + 4); i; i = *(_QWORD *)(v137 + 32))
                    {
                      v137 = *(_QWORD *)(i + 8);
                      if (!v137 || v137 == v131)
                        break;
                      v154 = *(unsigned int *)(v137 + 47);
                      if (v154 | ((unint64_t)*(unsigned __int8 *)(v137 + 51) << 32))
                      {
                        v133 = *(WebCore::RenderObject **)((v154 | ((unint64_t)*(unsigned __int8 *)(v137 + 51) << 32))
                                                         + 8);
                        if (v133)
                          goto LABEL_206;
                      }
                    }
                  }
                }
LABEL_270:
                v158 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1048))(this);
                v159 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 960))(this);
                if (__OFADD__(v158, v159))
                  v160 = (v158 >> 31) + 0x7FFFFFFF;
                else
                  v160 = v158 + v159;
                if ((*((_BYTE *)this + 22) & 4) != 0)
                {
                  v161 = *((_DWORD *)this + 60);
                  if (v161 == 1)
                  {
                    v162 = *((_QWORD *)this + 29);
                    if (v162)
                    {
                      v163 = *(_QWORD *)(v162 + 80);
                      if (v163)
                      {
                        if (*(_DWORD *)(v163 + 60) >= 2u)
                        {
                          v164 = *(_DWORD *)(v163 + 44);
                          goto LABEL_279;
                        }
                      }
                    }
                  }
                  else if (v161 == 2)
                  {
                    v253 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
                    if (v253)
                    {
                      v164 = WebCore::LegacyLineLayout::lineCount(v253);
LABEL_279:
                      if (v164)
                        goto LABEL_283;
                    }
                  }
                }
                if ((*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1712))(this))
                {
                  if (*((_BYTE *)this + 212))
                  {
                    LODWORD(v166) = *((_DWORD *)this + 52);
                    goto LABEL_295;
                  }
                  LineStyle = WebCore::RenderElement::firstLineStyle(this, v165);
                  v231 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)LineStyle, v230) * 64.0);
                  if (v231 < 2147500000.0 && v231 > -2147500000.0)
                    goto LABEL_379;
                  if (v231 < 2147500000.0)
                  {
                    if (v231 > -2147500000.0)
                    {
LABEL_379:
                      LODWORD(v166) = (int)v231;
                      goto LABEL_295;
                    }
                    goto LABEL_724;
                  }
LABEL_743:
                  LODWORD(v166) = 0x7FFFFFFF;
LABEL_295:
                  v175 = v160 + v166;
                  if (__OFADD__(v160, (_DWORD)v166))
                    v175 = (v160 >> 31) + 0x7FFFFFFF;
                  v176 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1056))(this);
                  v177 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 968))(this);
                  v178 = v176 + v177;
                  if (__OFADD__(v176, v177))
                    v178 = (v176 >> 31) + 0x7FFFFFFF;
                  v179 = v175 + v178;
                  if (__OFADD__(v175, v178))
                    v179 = (v175 >> 31) + 0x7FFFFFFF;
                  v180 = 1360;
                  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
                    v180 = 1352;
                  v181 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + v180))(this);
                  v183 = v181 << 6;
                  if (v181 < -33554432)
                    v183 = 0x80000000;
                  if (v181 > 0x1FFFFFF)
                    v183 = 0x7FFFFFFF;
                  v47 = __OFADD__(v179, v183);
                  v184 = v179 + v183;
                  if (v47)
                    v185 = (v179 >> 31) + 0x7FFFFFFF;
                  else
                    v185 = v184;
                  *((_BYTE *)this + 208) = 0;
                  *((_BYTE *)this + 212) = 0;
                  WebCore::LayoutIntegration::LineLayout::layout((WebCore::LayoutIntegration::LineLayout *)v65, v182, (uint64_t)v379);
                  if ((*((_BYTE *)this + 22) & 4) != 0)
                  {
                    v186 = *((_DWORD *)this + 60);
                    if (v186 == 1)
                    {
                      v187 = *((_QWORD *)this + 29);
                      if (v187)
                      {
                        v188 = *(_QWORD *)(v187 + 80);
                        if (v188)
                        {
                          if (*(_DWORD *)(v188 + 60) >= 2u)
                          {
                            v189 = *(_DWORD *)(v188 + 44);
                            goto LABEL_317;
                          }
                        }
                      }
                    }
                    else if (v186 == 2)
                    {
                      v254 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
                      if (v254)
                      {
                        v189 = WebCore::LegacyLineLayout::lineCount(v254);
LABEL_317:
                        if (v189)
                          goto LABEL_321;
                      }
                    }
                  }
                  if ((*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1712))(this))
                  {
                    if (*((_BYTE *)this + 212))
                    {
                      LODWORD(v191) = *((_DWORD *)this + 52);
                      goto LABEL_333;
                    }
                    v233 = WebCore::RenderElement::firstLineStyle(this, v190);
                    v235 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v233, v234) * 64.0);
                    if (v235 < 2147500000.0 && v235 > -2147500000.0)
                      goto LABEL_382;
                    if (v235 < 2147500000.0)
                    {
                      if (v235 > -2147500000.0)
                      {
LABEL_382:
                        LODWORD(v191) = (int)v235;
                        goto LABEL_333;
                      }
                      goto LABEL_721;
                    }
LABEL_742:
                    LODWORD(v191) = 0x7FFFFFFF;
LABEL_333:
                    v200 = v160 + v191;
                    if (__OFADD__(v160, (_DWORD)v191))
                      v200 = (v160 >> 31) + 0x7FFFFFFF;
                    v201 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1056))(this);
                    v202 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 968))(this);
                    v203 = v201 + v202;
                    if (__OFADD__(v201, v202))
                      v203 = (v201 >> 31) + 0x7FFFFFFF;
                    v204 = v200 + v203;
                    if (__OFADD__(v200, v203))
                      v204 = (v200 >> 31) + 0x7FFFFFFF;
                    v205 = 1360;
                    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
                      v205 = 1352;
                    v206 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + v205))(this);
                    v208 = v206 << 6;
                    if (v206 < -33554432)
                      v208 = 0x80000000;
                    if (v206 > 0x1FFFFFF)
                      v208 = 0x7FFFFFFF;
                    v47 = __OFADD__(v204, v208);
                    v209 = v204 + v208;
                    if (v47)
                      v210 = (v204 >> 31) + 0x7FFFFFFF;
                    else
                      v210 = v209;
                    v211 = *((_DWORD *)this + 5);
                    v212 = v372;
                    if ((v211 & 8) != 0)
                      goto LABEL_352;
                    if (a2)
                    {
                      *((_DWORD *)this + 5) = v211 | 8;
                      if ((v211 & 0x8000) != 0)
                      {
                        if ((*((_BYTE *)this + 45) & 0x10) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1942601B8);
                        }
                        v237 = *((_QWORD *)this + 18);
                        if (v237)
                        {
                          v238 = *(_DWORD *)(v237 + 8) + 1;
                          *(_DWORD *)(v237 + 8) = v238;
                        }
                        else
                        {
                          v238 = MEMORY[8];
                        }
                        *(_QWORD *)(v237 + 24) = *(_QWORD *)(v237 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                        if (!v238)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1942601E4);
                        }
                        *(_DWORD *)(v237 + 8) = v238 - 1;
                      }
LABEL_352:
                      *(_DWORD *)a3 = 0;
                      *(_DWORD *)a4 = 0;
                      goto LABEL_353;
                    }
                    if (v382)
                    {
                      v226 = v380;
                      v227 = v381;
                      *(_DWORD *)a3 = v380;
                      v47 = __OFADD__(v226, v227);
                      v228 = v226 + v227;
                      if (v47)
                        v228 = (v226 >> 31) + 0x7FFFFFFF;
                      *(_DWORD *)a4 = v228;
                      goto LABEL_353;
                    }
                    WebCore::InlineIterator::firstLineBoxFor((uint64_t)this, v207, (uint64_t)v387);
                    WebCore::InlineIterator::lastLineBoxFor((unsigned int *)this, v236, (uint64_t)v385);
                    if (v388 == -1)
                      goto LABEL_435;
                    v383[0] = v390;
                    if ((((uint64_t (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v388])(v383, v387) & 1) != 0)
                    {
LABEL_385:
                      if (v386 != -1)
                        ((void (*)(_QWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v386])(v383, v385);
                      if (v388 != -1)
                        ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v388])(v385, v387);
                      v212 = v372;
LABEL_353:
                      v213 = (char *)this + 160;
                      if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
                        v213 = (char *)this + 164;
                      *(_DWORD *)v213 = v210;
                      if (!*(_BYTE *)(v212 + 136))
                        return;
                      v215 = *(_QWORD *)(v212 + 104);
                      v214 = *(_QWORD *)(v212 + 112);
                      v216 = *(_DWORD *)(v212 + 120);
                      v217 = *(_BYTE *)(v212 + 124);
                      v218 = *(WTF **)(v212 + 128);
                      if (v218)
                      {
                        v219 = (*(_DWORD *)v218)++;
                        v220 = *((_DWORD *)this + 5);
                        if ((v220 & 0x800) != 0 || (v220 & 0x1800000) == 0x1000000)
                        {
LABEL_367:
                          if (*(_DWORD *)v218 == 1)
                            WTF::fastFree(v218, v207);
                          else
                            --*(_DWORD *)v218;
                          return;
                        }
                        v221 = *(_QWORD *)(v65 + 80);
                        if (v221 && *(_DWORD *)(v221 + 60) >= 2u)
                          v222 = *(unsigned int *)(v221 + 44);
                        else
                          v222 = 0;
                        v223 = v222 + v214;
                        if (*((_QWORD *)v218 + 1))
                        {
                          *(_DWORD *)v218 = v219 + 2;
                          *(_QWORD *)(v212 + 104) = v215;
                          *(_QWORD *)(v212 + 112) = v223;
                          *(_DWORD *)(v212 + 120) = v216;
                          *(_BYTE *)(v212 + 124) = v217;
                          v224 = (*(_DWORD *)v218)++;
                          if (v224)
                          {
                            *(_DWORD *)v218 = v224;
                          }
                          else
                          {
                            WTF::fastFree(v218, v207);
                            v224 = *(_DWORD *)v218;
                          }
                          v225 = v224 - 1;
                          if (v225)
                            *(_DWORD *)v218 = v225;
                          else
                            WTF::fastFree(v218, v207);
                          goto LABEL_367;
                        }
                      }
                      else
                      {
                        v220 = *((_DWORD *)this + 5);
                        if ((v220 & 0x800) != 0 || (v220 & 0x1800000) == 0x1000000)
                          return;
                        v221 = *(_QWORD *)(v65 + 80);
                        if (v221 && *(_DWORD *)(v221 + 60) >= 2u)
                          v286 = *(unsigned int *)(v221 + 44);
                        else
                          v286 = 0;
                        v223 = v286 + v214;
                      }
                      if (v221)
                      {
                        v287 = *(unsigned int *)(v221 + 44);
                        if ((_DWORD)v287)
                        {
                          v288 = 0;
                          v289 = *(_QWORD *)(v221 + 32);
                          v290 = v289 - 116;
                          while ((*(_BYTE *)(v290 + 240) & 8) == 0)
                          {
                            ++v288;
                            v290 += 152;
                            if (v287 == v288)
                              goto LABEL_530;
                          }
                          if (v288)
                          {
                            if (v288 - 1 >= v287)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1942607ACLL);
                            }
                            v295 = (float)(*(float *)v290 + *(float *)(v290 + 8)) - *(float *)(v289 + 36);
                            v297 = *(float *)(v221 + 12);
                            v296 = *(float *)(v221 + 16);
                            v298 = *(float *)(v221 + 8);
                            goto LABEL_544;
                          }
                          goto LABEL_594;
                        }
                      }
LABEL_530:
                      if (v223 != v215)
                      {
                        v301 = v218;
                        goto LABEL_578;
                      }
                      if ((v220 & 0x40000) != 0)
                      {
                        v291 = *((_DWORD *)this + 60);
                        if (v291 == 1)
                        {
                          v292 = *((_QWORD *)this + 29);
                          if (v292)
                          {
                            v293 = *(_QWORD *)(v292 + 80);
                            if (v293)
                            {
                              if (*(_DWORD *)(v293 + 60) >= 2u)
                              {
                                v294 = *(_DWORD *)(v293 + 44);
                                goto LABEL_537;
                              }
                            }
                          }
                        }
                        else if (v291 == 2)
                        {
                          v332 = (WebCore::LegacyLineLayout *)*((_QWORD *)this + 29);
                          if (v332)
                          {
                            v294 = WebCore::LegacyLineLayout::lineCount(v332);
LABEL_537:
                            if (v294)
                              goto LABEL_588;
                          }
                        }
                      }
                      if ((*(unsigned int (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1712))(this))
                      {
                        if (*((_BYTE *)this + 212))
                        {
                          v216 = *((_DWORD *)this + 52);
LABEL_549:
                          v301 = (WTF *)*((_QWORD *)this + 1);
                          if (!v301)
                          {
                            v301 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                            *(_DWORD *)v301 = 1;
                            *((_QWORD *)v301 + 1) = this;
                            v327 = (WTF *)*((_QWORD *)this + 1);
                            *((_QWORD *)this + 1) = v301;
                            if (v327)
                            {
                              if (*(_DWORD *)v327 == 1)
                              {
                                WTF::fastFree(v327, v207);
                                v301 = (WTF *)*((_QWORD *)this + 1);
                                if (!v301)
                                  goto LABEL_551;
                              }
                              else
                              {
                                --*(_DWORD *)v327;
                              }
                            }
                          }
                          ++*(_DWORD *)v301;
LABEL_551:
                          if (v218)
                          {
                            if (*(_DWORD *)v218 == 1)
                              WTF::fastFree(v218, v207);
                            else
                              --*(_DWORD *)v218;
                          }
                          v302 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1048))(this);
                          v303 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 960))(this);
                          v304 = v302 + v303;
                          if (__OFADD__(v302, v303))
                            v304 = (v302 >> 31) + 0x7FFFFFFF;
                          v47 = __OFADD__(v304, v216);
                          v305 = v304 + v216;
                          v306 = (v304 >> 31) + 0x7FFFFFFF;
                          if (v47)
                            v307 = v306;
                          else
                            v307 = v305;
                          v308 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1056))(this);
                          v309 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 968))(this);
                          v310 = v308 + v309;
                          if (__OFADD__(v308, v309))
                            v310 = (v308 >> 31) + 0x7FFFFFFF;
                          v47 = __OFADD__(v307, v310);
                          v311 = v307 + v310;
                          if (v47)
                            v312 = (v307 >> 31) + 0x7FFFFFFF;
                          else
                            v312 = v311;
                          v313 = 1360;
                          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
                            v313 = 1352;
                          v314 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + v313))(this);
                          v315 = v314 << 6;
                          if (v314 < -33554432)
                            v315 = 0x80000000;
                          if (v314 > 0x1FFFFFF)
                            v315 = 0x7FFFFFFF;
                          v47 = __OFADD__(v312, v315);
                          v316 = v312 + v315;
                          if (v47)
                            v316 = (v312 >> 31) + 0x7FFFFFFF;
                          if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
                            v317 = (char *)this + 160;
                          else
                            v317 = (char *)this + 164;
                          v212 = v372;
                          *(_DWORD *)v317 = v316;
                          v217 = 1;
LABEL_578:
                          if (v301)
                          {
                            ++*(_DWORD *)v301;
                            v318 = *(unsigned __int8 *)(v212 + 136);
                            *(_QWORD *)(v212 + 104) = v215;
                            *(_QWORD *)(v212 + 112) = v223;
                            *(_DWORD *)(v212 + 120) = v216;
                            *(_BYTE *)(v212 + 124) = v217;
                            ++*(_DWORD *)v301;
                            if (v318)
                              goto LABEL_580;
                          }
                          else
                          {
                            v333 = *(unsigned __int8 *)(v212 + 136);
                            *(_QWORD *)(v212 + 104) = v215;
                            *(_QWORD *)(v212 + 112) = v223;
                            *(_DWORD *)(v212 + 120) = v216;
                            *(_BYTE *)(v212 + 124) = v217;
                            if (v333)
                            {
LABEL_580:
                              v319 = *(WTF **)(v212 + 128);
                              *(_QWORD *)(v212 + 128) = v301;
                              if (v319)
                              {
                                if (*(_DWORD *)v319 == 1)
                                  WTF::fastFree(v319, v207);
                                else
                                  --*(_DWORD *)v319;
                              }
                              goto LABEL_583;
                            }
                          }
                          *(_QWORD *)(v212 + 128) = v301;
                          *(_BYTE *)(v212 + 136) = 1;
LABEL_583:
                          if (!v301)
                            return;
                          if (*(_DWORD *)v301 == 1)
                            WTF::fastFree(v301, v207);
                          else
                            --*(_DWORD *)v301;
                          v218 = v301;
                          goto LABEL_367;
                        }
                        v328 = WebCore::RenderElement::firstLineStyle(this, v207);
                        v330 = ceilf(WebCore::RenderStyle::computedLineHeight((WebCore::RenderStyle *)v328, v329) * 64.0);
                        if (v330 >= 2147500000.0 || v330 <= -2147500000.0)
                        {
                          if (v330 >= 2147500000.0)
                            goto LABEL_744;
                          if (v330 <= -2147500000.0)
                            goto LABEL_740;
                        }
                        v216 = (int)v330;
                        goto LABEL_549;
                      }
LABEL_588:
                      v320 = *(_QWORD *)(v65 + 80);
                      if (v320)
                      {
                        v321 = *(_DWORD *)(v320 + 44);
                        if (v321)
                        {
                          v322 = *(_QWORD *)(v320 + 32);
                          v323 = v322 + 152 * v321;
                          v324 = 152 * v321;
                          while (v324)
                          {
                            v325 = *(_QWORD *)(v323 - 144);
                            v323 -= 152;
                            v324 -= 152;
                            if (v325 >= 2)
                            {
                              v326 = v322 + v324;
                              goto LABEL_596;
                            }
                          }
                          v326 = *(_QWORD *)(v320 + 32);
LABEL_596:
                          v295 = (float)(*(float *)(v326 + 36) + *(float *)(v326 + 44)) - *(float *)(v322 + 36);
                          v297 = *(float *)(v320 + 12);
                          v296 = *(float *)(v320 + 16);
                          v298 = *(float *)(v320 + 8);
LABEL_544:
                          v299 = (float)(v295 + (float)((float)(v296 + v298) + v297)) * 64.0;
                          if (v299 < 2147483650.0 && v299 > -2147483650.0)
                            goto LABEL_548;
                          if (v299 < 2147483650.0)
                          {
                            if (v299 > -2147483650.0)
                            {
LABEL_548:
                              v216 = (int)v299;
                              goto LABEL_549;
                            }
LABEL_740:
                            v216 = 0x80000000;
                            goto LABEL_549;
                          }
LABEL_744:
                          v216 = 0x7FFFFFFF;
                          goto LABEL_549;
                        }
                      }
LABEL_594:
                      v216 = 0;
                      goto LABEL_549;
                    }
                    if (v388 == -1)
                      goto LABEL_435;
                    v383[0] = v390;
                    v239 = ((float (*)(_QWORD *, _BYTE *))off_1E3421BC0[v388])(v383, v387) * 64.0;
                    if (v239 < 2147483650.0 && v239 > -2147483650.0)
                      goto LABEL_400;
                    if (v239 >= 2147483650.0)
                    {
                      v241 = 0x7FFFFFFF;
                      goto LABEL_401;
                    }
                    if (v239 <= -2147483650.0)
                      v241 = 0x80000000;
                    else
LABEL_400:
                      v241 = (int)v239;
LABEL_401:
                    if (v241 >= (int)v160)
                      v241 = v160;
                    *(_DWORD *)a3 = v241;
                    if (v386 != -1)
                    {
                      v383[0] = v390;
                      v242 = ((float (*)(_QWORD *, _BYTE *))off_1E3421C10[v386])(v383, v385) * 64.0;
                      if (v242 >= 2147483650.0 || v242 <= -2147483650.0)
                      {
                        if (v242 > -2147483650.0)
                          v362 = (int)v242;
                        else
                          v362 = 0x80000000;
                        if (v242 < 2147483650.0)
                          v243 = v362;
                        else
                          v243 = 0x7FFFFFFF;
                      }
                      else
                      {
                        v243 = (int)v242;
                      }
                      if (v185 <= v210)
                        v244 = v210;
                      else
                        v244 = v185;
                      if (v244 > v243)
                        v243 = v244;
                      *(_DWORD *)a4 = v243;
                      v245 = *(_QWORD *)(v65 + 80);
                      if (!v245 || !*(_BYTE *)(v245 + 80))
                        goto LABEL_385;
                      LOBYTE(v383[0]) = 0;
                      v384 = -1;
                      v246 = v388;
                      if (v388 != -1)
                      {
                        ((void (*)(_QWORD *, _QWORD *, _BYTE *))off_1E3421B80[v388])(v390, v383, v387);
                        v384 = v246;
                        while (1)
                        {
                          v390[0] = &v389;
                          if (((unsigned int (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator15LineBoxIterator5atEndEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v246])(v390, v383))
                          {
                            goto LABEL_436;
                          }
                          if (v384 == -1)
                            break;
                          v390[0] = &v389;
                          v247 = ((float (*)(_QWORD *, _QWORD *))off_1E3421A50[v384])(v390, v383) * 64.0;
                          if (v247 >= 2147483650.0 || v247 <= -2147483650.0)
                          {
                            if (v247 > -2147483650.0)
                              v361 = (int)v247;
                            else
                              v361 = 0x80000000;
                            if (v247 < 2147483650.0)
                              v249 = v361;
                            else
                              v249 = 0x7FFFFFFF;
                          }
                          else
                          {
                            v249 = (int)v247;
                          }
                          if (v249 >= *(_DWORD *)a3)
                            v249 = *(_DWORD *)a3;
                          *(_DWORD *)a3 = v249;
                          if (v384 == -1)
                            break;
                          v390[0] = &v389;
                          v250 = ((float (*)(_QWORD *, _QWORD *))off_1E3421A60[v384])(v390, v383) * 64.0;
                          if (v250 < 2147483650.0 && v250 > -2147483650.0)
                            goto LABEL_430;
                          if (v250 >= 2147483650.0)
                          {
                            v252 = 0x7FFFFFFF;
                            goto LABEL_431;
                          }
                          if (v250 <= -2147483650.0)
                            v252 = 0x80000000;
                          else
LABEL_430:
                            v252 = (int)v250;
LABEL_431:
                          if (*(_DWORD *)a4 > v252)
                            v252 = *(_DWORD *)a4;
                          *(_DWORD *)a4 = v252;
                          if (v384 != -1)
                          {
                            v390[0] = &v389;
                            ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LineBoxIterator12traverseNextEvE3__0JEEEEEJRNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v384])(v390, v383);
                            v246 = v384;
                            if (v384 != -1)
                              continue;
                          }
                          break;
                        }
                      }
                    }
LABEL_435:
                    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_436:
                    if (v384 != -1)
                      ((void (*)(_QWORD *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_2[v384])(v390, v383);
                    goto LABEL_385;
                  }
LABEL_321:
                  v191 = *(_QWORD *)(v65 + 80);
                  if (!v191)
                    goto LABEL_333;
                  v192 = *(_DWORD *)(v191 + 44);
                  if (!v192)
                  {
                    LODWORD(v191) = 0;
                    goto LABEL_333;
                  }
                  v193 = *(_QWORD *)(v191 + 32);
                  v194 = v193 + 152 * v192;
                  v195 = 152 * v192;
                  while (v195)
                  {
                    v196 = *(_QWORD *)(v194 - 144);
                    v194 -= 152;
                    v195 -= 152;
                    if (v196 >= 2)
                    {
                      v197 = v193 + v195;
                      goto LABEL_328;
                    }
                  }
                  v197 = *(_QWORD *)(v191 + 32);
LABEL_328:
                  v198 = (float)((float)((float)(*(float *)(v197 + 36) + *(float *)(v197 + 44)) - *(float *)(v193 + 36))
                               + (float)((float)(*(float *)(v191 + 16) + *(float *)(v191 + 8)) + *(float *)(v191 + 12)))
                       * 64.0;
                  if (v198 >= 2147483650.0 || v198 <= -2147483650.0)
                  {
                    if (v198 >= 2147483650.0)
                      goto LABEL_742;
                    if (v198 <= -2147483650.0)
                    {
LABEL_721:
                      LODWORD(v191) = 0x80000000;
                      goto LABEL_333;
                    }
                  }
                  LODWORD(v191) = (int)v198;
                  goto LABEL_333;
                }
LABEL_283:
                v166 = *(_QWORD *)(v65 + 80);
                if (!v166)
                  goto LABEL_295;
                v167 = *(_DWORD *)(v166 + 44);
                if (!v167)
                {
                  LODWORD(v166) = 0;
                  goto LABEL_295;
                }
                v168 = *(_QWORD *)(v166 + 32);
                v169 = v168 + 152 * v167;
                v170 = 152 * v167;
                while (v170)
                {
                  v171 = *(_QWORD *)(v169 - 144);
                  v169 -= 152;
                  v170 -= 152;
                  if (v171 >= 2)
                  {
                    v172 = v168 + v170;
                    goto LABEL_290;
                  }
                }
                v172 = *(_QWORD *)(v166 + 32);
LABEL_290:
                v173 = (float)((float)((float)(*(float *)(v172 + 36) + *(float *)(v172 + 44)) - *(float *)(v168 + 36))
                             + (float)((float)(*(float *)(v166 + 16) + *(float *)(v166 + 8)) + *(float *)(v166 + 12)))
                     * 64.0;
                if (v173 >= 2147483650.0 || v173 <= -2147483650.0)
                {
                  if (v173 >= 2147483650.0)
                    goto LABEL_743;
                  if (v173 <= -2147483650.0)
                  {
LABEL_724:
                    LODWORD(v166) = 0x80000000;
                    goto LABEL_295;
                  }
                }
                LODWORD(v166) = (int)v173;
                goto LABEL_295;
              }
              v370 = v377;
              v377 = v358;
              v378 = v369;
              v342 = v360;
            }
LABEL_658:
            v369 = v342;
            goto LABEL_138;
          }
          v358 = v377;
          v359 = v370;
        }
        v377 = v359;
        goto LABEL_699;
      }
      ((void (*)(_BYTE *, WebCore::LayoutIntegration::LineLayout **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v141])(v387, v142);
    }
    *((_QWORD *)this + 29) = v65;
    *((_DWORD *)this + 60) = 1;
    goto LABEL_131;
  }
  LOBYTE(v11) = v7 ^ 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v12 = v10;
        v13 = (*(_BYTE *)(v10 + 45) & 4) != 0 ? v10 : 0;
        if ((a2 & 1) != 0)
        {
          if (v13)
          {
            v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 1520))(v13);
            goto LABEL_55;
          }
        }
        else if (!v13 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 1536))(v13))
        {
          goto LABEL_14;
        }
        v30 = 0;
LABEL_55:
        v31 = *(_DWORD *)(v12 + 20);
        if ((v31 & 8) == 0 && (*(_DWORD *)(v12 + 20) = v31 | 8, (v31 & 0x8000) != 0))
        {
          if ((*(_BYTE *)(v12 + 45) & 0x10) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194260224);
          }
          v146 = *(_QWORD *)(v12 + 144);
          if (v146)
          {
            v147 = *(_DWORD *)(v146 + 8) + 1;
            *(_DWORD *)(v146 + 8) = v147;
          }
          else
          {
            v147 = MEMORY[8];
          }
          *(_QWORD *)(v146 + 24) = *(_QWORD *)(v146 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
          if (!v147)
          {
            __break(0xC471u);
            JUMPOUT(0x194260250);
          }
          *(_DWORD *)(v146 + 8) = v147 - 1;
          if ((v30 & 1) != 0)
LABEL_243:
            WebCore::RenderObject::setPreferredLogicalWidthsDirty(v12, 1, 0);
        }
        else if (v30)
        {
          goto LABEL_243;
        }
LABEL_14:
        if ((*(_DWORD *)(v12 + 20) & 0x1800000) != 0x1000000)
          goto LABEL_31;
        v14 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v12);
        if (WebCore::gOverridingContainingBlockContentLogicalWidthMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalWidthMap, (_QWORD *)v13);
        if (WebCore::gOverridingContainingBlockContentLogicalHeightMap)
          WTF::WeakHashMap<WebCore::RenderBox const,std::optional<WebCore::LayoutUnit>,WTF::SingleThreadWeakPtrImpl>::remove(WebCore::gOverridingContainingBlockContentLogicalHeightMap, (_QWORD *)v13);
        if ((*(_BYTE *)(v13 + 52) & 7) != 1 || (*(_BYTE *)(v13 + 53) & 2) == 0)
        {
          if ((*(_BYTE *)(v13 + 20) & 0xF8) != 0)
            *((_DWORD *)v14 + 5) |= 0x40u;
          {
            WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants = 0u;
            unk_1ECE91358 = 0u;
          }
          WebCore::PositionedDescendantsMap::addDescendant((WebCore::PositionedDescendantsMap *)&WebCore::positionedDescendantsMap(void)::mapForPositionedDescendants, v14, (WebCore::RenderBox *)v13);
        }
        v15 = v12;
        if ((*(_BYTE *)(v12 + 45) & 2) != 0)
          v15 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8);
        v16 = *(_QWORD *)(v15 + 88);
        v17 = *(_DWORD *)(v15 + 124);
        v18 = *(_QWORD *)(v16 + 8);
        v19 = v18 + 4;
        v20 = v18 + 12;
        if (((v17 >> 13) & 6) - 2 >= 4)
          v19 = v20;
        if ((*(_BYTE *)(v19 + 4) & 0xF7) == 3)
          goto LABEL_31;
        v26 = ((unsigned __int16)v17 >> 13) - 1;
        v27 = v26 > 4 ? 0 : qword_1969FC6C8[v26];
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 24) + 8 * v27 + 12) & 0xF7) == 3)
          goto LABEL_31;
        v32 = v12;
        if ((*(_BYTE *)(v12 + 45) & 2) != 0)
          v32 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8);
        v33 = ((unsigned __int16)*(_DWORD *)(v32 + 124) >> 13) - 1;
        v60 = v33 <= 4 ? qword_1969FC6F0[v33] : 2;
        if (((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v32 + 88) + 24) + 8 * v60 + 12) == 0) & v11) != 1)
        {
LABEL_31:
          v11 = 0;
        }
        else
        {
          v61 = (*(_DWORD *)(v15 + 96) >> 5) & 0x1F;
          v11 = 1;
          if (v61 <= 0x19 && ((1 << v61) & 0x3528029) != 0)
            v11 = v8;
        }
        v21 = *(_DWORD *)(v12 + 20);
        if ((v21 & 0x20F8) != 0)
        {
          v22 = v21 & 0x1800000;
          if ((v21 & 0x800) != 0 || v22 == 0x1000000)
          {
            if ((v21 & 0x800) == 0)
            {
LABEL_36:
              if (v22 != 0x1000000)
              {
                v29 = v21 & 0xFFDFFDFF | 0x200;
                *(_DWORD *)(v12 + 20) = v29;
                if ((*(_BYTE *)(v12 + 45) & 2) == 0)
                {
                  *(_WORD *)(v12 + 69) &= ~1u;
                  *(_WORD *)(v12 + 76) = *(_WORD *)(v12 + 76) & 0xF | (16
                                                                     * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 1944)
                                                                                            + 248)
                                                                                + 472));
                }
                *(_DWORD *)(v12 + 20) = v29 & 0xFFDFFE07;
              }
LABEL_37:
              if (*(_BYTE *)(v12 + 46) == 3)
              {
                ++*(_DWORD *)(v12 + 16);
                WebCore::RenderCombineText::combineTextIfNeeded((WebCore::RenderCombineText *)v12);
                v343 = *(_DWORD *)(v12 + 16);
                if (!v343)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942605FCLL);
                }
                *(_DWORD *)(v12 + 16) = v343 - 1;
              }
              goto LABEL_38;
            }
            v28 = *(_BYTE *)(v12 + 45);
          }
          else
          {
            v28 = *(_BYTE *)(v12 + 45);
            if ((v28 & 0x22) != 0)
              goto LABEL_36;
            v255 = *(unsigned __int8 *)(v12 + 46);
            if (v255 == 4 || v255 == 17)
              goto LABEL_36;
          }
          if ((v28 & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942602D8);
          }
          if ((v21 & 0xF8) != 0)
          {
            v256 = *(_QWORD *)(v12 + 32);
            if (v256
              && (v257 = *(_QWORD *)(v256 + 8)) != 0
              && (*(_BYTE *)(*(_QWORD *)(v257 + 104) + 239) & 0x18) != 0
              && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1944)
                                       + 248)
                           + 479))
            {
              WebCore::RenderElement::clearNeedsLayoutForSkippedContent((WebCore::RenderElement *)v12);
            }
            else
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 688))(v12);
            }
          }
          goto LABEL_37;
        }
LABEL_38:
        if ((*(_BYTE *)(v12 + 45) & 0x20) != 0)
          break;
        if ((WebCore::RenderBlockFlow *)v12 == this)
          goto LABEL_126;
        v23 = *(unsigned int *)(v12 + 47);
        if (v23 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32))
        {
          v10 = *(_QWORD *)((v23 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
          if (v10)
            continue;
        }
        v24 = *(_QWORD *)(v12 + 32);
        if (!v24)
          goto LABEL_126;
        v25 = *(WebCore::RenderBlockFlow **)(v24 + 8);
        if (!v25 || v25 == this)
          goto LABEL_126;
        while (1)
        {
          v62 = *(unsigned int *)((char *)v25 + 47);
          if (v62 | ((unint64_t)*((unsigned __int8 *)v25 + 51) << 32))
          {
            v10 = *(_QWORD *)((v62 | ((unint64_t)*((unsigned __int8 *)v25 + 51) << 32)) + 8);
            if (v10)
              break;
          }
          v63 = *((_QWORD *)v25 + 4);
          if (v63)
          {
            v25 = *(WebCore::RenderBlockFlow **)(v63 + 8);
            if (v25 && v25 != this)
              continue;
          }
          goto LABEL_126;
        }
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 112))(v12);
      if (!v10)
      {
        if ((WebCore::RenderBlockFlow *)v12 == this)
          goto LABEL_126;
        v148 = *(unsigned int *)(v12 + 47);
        if (!(v148 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)))
          break;
        v10 = *(_QWORD *)((v148 | ((unint64_t)*(unsigned __int8 *)(v12 + 51) << 32)) + 8);
        if (!v10)
          break;
      }
    }
    v149 = *(_QWORD *)(v12 + 32);
    if (!v149)
      break;
    v150 = *(WebCore::RenderBlockFlow **)(v149 + 8);
    if (!v150 || v150 == this)
      break;
    while (1)
    {
      v151 = *(unsigned int *)((char *)v150 + 47);
      if (v151 | ((unint64_t)*((unsigned __int8 *)v150 + 51) << 32))
      {
        v10 = *(_QWORD *)((v151 | ((unint64_t)*((unsigned __int8 *)v150 + 51) << 32)) + 8);
        if (v10)
          break;
      }
      v152 = *((_QWORD *)v150 + 4);
      if (v152)
      {
        v150 = *(WebCore::RenderBlockFlow **)(v152 + 8);
        if (v150 && v150 != this)
          continue;
      }
      goto LABEL_126;
    }
  }
LABEL_126:
  if (!v11)
    goto LABEL_127;
LABEL_68:
  v34 = *((unsigned int *)this + 60);
  if ((_DWORD)v34 == -1)
  {
LABEL_71:
    *((_DWORD *)this + 60) = 0;
  }
  else if ((_DWORD)v34)
  {
    ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateENS_10unique_ptrIN7WebCore17LayoutIntegration10LineLayoutENS_14default_deleteISA_EEEENS7_INS8_16LegacyLineLayoutENSB_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v34])(v387, (char *)this + 232);
    goto LABEL_71;
  }
  v35 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1064))(this);
  v36 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v35, v36))
    v37 = (v35 >> 31) + 0x7FFFFFFF;
  else
    v37 = v35 + v36;
  v38 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1048))(this);
  v39 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v38, v39))
    v40 = (v38 >> 31) + 0x7FFFFFFF;
  else
    v40 = v38 + v39;
  v41 = *((unsigned int *)this + 16);
  if (v41 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32))
  {
    v42 = *(_QWORD *)((v41 | ((unint64_t)*((unsigned __int8 *)this + 68) << 32)) + 8);
    if (v42)
    {
      v43 = (_BYTE *)(v42 + 45);
      if ((*(_BYTE *)(v42 + 45) & 4) == 0)
      {
LABEL_622:
        __break(0xC471u);
        JUMPOUT(0x194260204);
      }
      while (1)
      {
        v44 = *(_QWORD *)(v42 + 144);
        v45 = *(_DWORD *)(v44 + 148);
        v46 = *(_DWORD *)(v44 + 152);
        v47 = __OFSUB__(v37, v45);
        v48 = v37 - v45;
        if (v47)
          v48 = 1;
        v47 = __OFSUB__(v40, v46);
        v49 = v40 - v46;
        if (v47)
          v49 = 1;
        v50 = *(_BYTE **)(*(_QWORD *)(v42 + 88) + 24);
        if ((*((_BYTE *)this + 21) & 0x10) != 0)
        {
          if (!v50[12])
          {
            v51 = v50 + 28;
            goto LABEL_90;
          }
        }
        else if (!v50[36])
        {
          v51 = v50 + 20;
LABEL_90:
          v52 = *v51 == 0;
          goto LABEL_91;
        }
        v52 = 0;
LABEL_91:
        *(_DWORD *)(v44 + 148) = v37;
        *(_DWORD *)(v44 + 152) = v40;
        if (v48 | v49)
          v53 = !v52;
        else
          v53 = 1;
        if (!v53)
        {
          v345 = *(_DWORD *)(v42 + 20);
          if ((v345 & 0x20) == 0)
            *(_DWORD *)(v42 + 20) = v345 | 0x20;
          WebCore::RenderElement::layoutIfNeeded(v42);
        }
        if ((*v43 & 0x20) != 0)
        {
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 112))(v42);
          if (!v55)
          {
            if ((WebCore::RenderBlockFlow *)v42 == this)
              break;
            v273 = *(unsigned int *)(v42 + 47);
            if (!(v273 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32))
              || (v55 = *(_QWORD *)((v273 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)) + 8)) == 0)
            {
              v274 = *(_QWORD *)(v42 + 32);
              if (!v274)
                break;
              v275 = *(WebCore::RenderBlockFlow **)(v274 + 8);
              if (!v275 || v275 == this)
                break;
              while (1)
              {
                v276 = *(unsigned int *)((char *)v275 + 47);
                if (v276 | ((unint64_t)*((unsigned __int8 *)v275 + 51) << 32))
                {
                  v55 = *(_QWORD *)((v276 | ((unint64_t)*((unsigned __int8 *)v275 + 51) << 32)) + 8);
                  if (v55)
                    break;
                }
                v277 = *((_QWORD *)v275 + 4);
                if (v277)
                {
                  v275 = *(WebCore::RenderBlockFlow **)(v277 + 8);
                  if (v275 && v275 != this)
                    continue;
                }
                goto LABEL_464;
              }
            }
          }
        }
        else
        {
          if ((WebCore::RenderBlockFlow *)v42 == this)
            break;
          v54 = *(unsigned int *)(v42 + 47);
          if (!(v54 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32))
            || (v55 = *(_QWORD *)((v54 | ((unint64_t)*(unsigned __int8 *)(v42 + 51) << 32)) + 8)) == 0)
          {
            v56 = *(_QWORD *)(v42 + 32);
            if (!v56)
              break;
            v57 = *(WebCore::RenderBlockFlow **)(v56 + 8);
            if (!v57 || v57 == this)
              break;
            while (1)
            {
              v258 = *(unsigned int *)((char *)v57 + 47);
              if (v258 | ((unint64_t)*((unsigned __int8 *)v57 + 51) << 32))
              {
                v55 = *(_QWORD *)((v258 | ((unint64_t)*((unsigned __int8 *)v57 + 51) << 32)) + 8);
                if (v55)
                  break;
              }
              v259 = *((_QWORD *)v57 + 4);
              if (v259)
              {
                v57 = *(WebCore::RenderBlockFlow **)(v259 + 8);
                if (v57 && v57 != this)
                  continue;
              }
              goto LABEL_464;
            }
          }
        }
        v43 = (_BYTE *)(v55 + 45);
        v42 = v55;
        if ((*(_BYTE *)(v55 + 45) & 4) == 0)
          goto LABEL_622;
      }
    }
  }
LABEL_464:
  v261 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1048))(this);
  v262 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 960))(this);
  if (__OFADD__(v261, v262))
    v263 = (v261 >> 31) + 0x7FFFFFFF;
  else
    v263 = v261 + v262;
  v264 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 1056))(this);
  v265 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + 968))(this);
  v266 = v264 + v265;
  if (__OFADD__(v264, v265))
    v266 = (v264 >> 31) + 0x7FFFFFFF;
  v47 = __OFADD__(v263, v266);
  v267 = v263 + v266;
  if (v47)
    v268 = (v263 >> 31) + 0x7FFFFFFF;
  else
    v268 = v267;
  v269 = 1360;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    v269 = 1352;
  v270 = (*(uint64_t (**)(WebCore::RenderBlockFlow *))(*(_QWORD *)this + v269))(this);
  v271 = v270 << 6;
  if (v270 < -33554432)
    v271 = 0x80000000;
  if (v270 > 0x1FFFFFF)
    v271 = 0x7FFFFFFF;
  v47 = __OFADD__(v268, v271);
  v272 = v268 + v271;
  if (v47)
    v272 = (v268 >> 31) + 0x7FFFFFFF;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
    *((_DWORD *)this + 40) = v272;
  else
    *((_DWORD *)this + 41) = v272;
}

BOOL WebCore::Node::isRootEditableElement(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  uint64_t v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  char v20;
  int v21;
  int v22;
  uint64_t v24;
  WebCore::Node *i;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (!*(_QWORD *)(v1 + 1944) || *(_BYTE *)(v1 + 3405))
    return 0;
  if ((~*((unsigned __int16 *)this + 14) & 0x408) == 0)
  {
    if (!(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this))
    {
      v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  *(_DWORD *)(v1 + 24) += 2;
  v3 = *(_QWORD *)(v1 + 528);
  v7 = v3
    && (v4 = *(_QWORD *)(v3 + 8)) != 0
    && (v5 = *(_QWORD *)(v4 + 24)) != 0
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && *(unsigned __int8 *)(v6 + 656) != 0;
  if ((*((_BYTE *)this + 22) & 0x10) != 0)
  {
    v21 = WebCore::HTMLElement::editabilityFromContentEditableAttr((uint64_t)this, v7);
    goto LABEL_41;
  }
  v8 = *((unsigned __int16 *)this + 14);
  if ((v8 & 0xF000) == 0x9000)
  {
    v9 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v9 = *(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v9)
          v9 = *(_QWORD *)(v9 + 8);
      }
      v10 = (WebCore::Node *)(v9 + 80);
      goto LABEL_26;
    }
LABEL_62:
    v21 = 0;
    goto LABEL_41;
  }
  v11 = this;
  if ((v8 & 8) == 0)
  {
    v12 = *((_QWORD *)this + 4);
    if (v12)
    {
      if ((*(_WORD *)(v12 + 28) & 8) != 0)
      {
        v13 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL;
        if (v13)
        {
          v30 = *(_QWORD *)(v13 + 88);
          if (v30)
          {
            v31 = *(_QWORD *)(v30 + 224);
            if (v31)
            {
              v11 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v31 + 16))(v31, this);
              if (v11)
                goto LABEL_24;
              v8 = *((unsigned __int16 *)this + 14);
            }
          }
        }
      }
    }
    if ((~v8 & 0x408) == 0 && (*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this))
    {
      v26 = *((_QWORD *)this + 14);
      if (!v26)
        goto LABEL_62;
      goto LABEL_83;
    }
    v11 = (WebCore::Node *)*((_QWORD *)this + 4);
    if (!v11)
      goto LABEL_62;
    v14 = *((_WORD *)v11 + 14);
    if ((v14 & 0x80) != 0)
    {
      v26 = *((_QWORD *)v11 + 25);
      if (!v26)
        goto LABEL_62;
LABEL_83:
      v11 = *(WebCore::Node **)(v26 + 8);
      if (!v11)
        goto LABEL_62;
      goto LABEL_24;
    }
    if ((v14 & 8) == 0)
      goto LABEL_62;
  }
LABEL_24:
  if ((*((_BYTE *)v11 + 22) & 8) == 0)
    goto LABEL_62;
  v10 = WebCore::Element::resolveComputedStyle((uint64_t)v11, 2);
  if (!v10)
    goto LABEL_62;
LABEL_26:
  v15 = *((_QWORD *)v10 + 3);
  if ((*(_BYTE *)(v15 + 239) & 1) != 0)
  {
    if (v7)
      v21 = 2;
    else
      v21 = 0;
  }
  else
  {
    v16 = *(_DWORD *)(v15 + 228);
    v17 = (v16 >> 15) & 3;
    if ((v16 & 0x30) != 0)
    {
      v27 = v17 <= 1 ? 1 : (v16 >> 15) & 3;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 1) + 32) + 148) & 0xC00000) != 0x800000)
        v17 = v27;
    }
    if (v7)
      v18 = 2;
    else
      v18 = 0;
    v19 = v17 == 2;
    v20 = v17 == 2 || v7;
    if (v19)
      v21 = 0;
    else
      v21 = v18;
    if ((v20 & 1) == 0)
    {
      v22 = (*(_DWORD *)(v15 + 228) >> 4) & 3;
      if (v22 == 2)
        v21 = 1;
      else
        v21 = 2 * (v22 == 1);
    }
  }
LABEL_41:
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v28 = *(_WORD *)(v1 + 30);
    if ((v28 & 0x400) == 0)
    {
      v29 = *(_WORD *)(v1 + 28);
      if ((v29 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v1);
      }
      else
      {
        if ((v29 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 160) + 16))(*(_QWORD *)(v1 + 160));
          v28 = *(_WORD *)(v1 + 30);
        }
        *(_WORD *)(v1 + 30) = v28 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
      }
    }
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  if (!v21 || (*((_WORD *)this + 14) & 8) == 0)
    return 0;
  v24 = *((_QWORD *)this + 4);
  if (!v24 || !WebCore::Node::hasEditableStyle(v24, 0) || (*(_WORD *)(*((_QWORD *)this + 4) + 28) & 8) == 0)
    return 1;
  i = *(WebCore::Node **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1272);
  if (i)
  {
    if ((*((_WORD *)i + 14) & 0x10) != 0
      && *(_QWORD *)(*((_QWORD *)i + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      for (i = (WebCore::Node *)*((_QWORD *)i + 10); i; i = (WebCore::Node *)*((_QWORD *)i + 7))
      {
        if ((*((_WORD *)i + 14) & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)i + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
      }
    }
    else
    {
      i = 0;
    }
  }
  return i == this;
}

uint64_t WebCore::Node::computeEditabilityWithStyle(uint64_t a1, WebCore::RenderStyle *this, char a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const WTF::StringImpl *v32;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v4 + 1944) || *(_BYTE *)(v4 + 3405))
    return 0;
  if ((~*(unsigned __int16 *)(a1 + 28) & 0x408) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  *(_DWORD *)(v4 + 24) += 2;
  v9 = *(_QWORD *)(v4 + 528);
  v13 = v9
     && (v10 = *(_QWORD *)(v9 + 8)) != 0
     && (v11 = *(_QWORD *)(v10 + 24)) != 0
     && (v12 = *(_QWORD *)(v11 + 8)) != 0
     && *(_BYTE *)(v12 + 656) != 0;
  if ((*(_BYTE *)(a1 + 22) & 0x10) != 0)
    goto LABEL_66;
  if (!a4 && WebCore::Document::needsStyleRecalc((WebCore::Document *)v4))
  {
    if (WebCore::Document::usesStyleBasedEditability((WebCore::Document *)v4, v31, v32))
    {
      WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v4);
      goto LABEL_11;
    }
LABEL_66:
    v18 = WebCore::HTMLElement::editabilityFromContentEditableAttr(a1, v13);
    goto LABEL_21;
  }
LABEL_11:
  if (this)
    goto LABEL_12;
  v20 = *(unsigned __int16 *)(a1 + 28);
  if ((v20 & 0xF000) != 0x9000)
  {
    if ((v20 & 8) != 0)
    {
      v24 = a1;
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 32);
      if (v22)
      {
        if ((*(_WORD *)(v22 + 28) & 8) != 0)
        {
          v23 = *(_QWORD *)(v22 + 72) & 0xFFFFFFFFFFFFLL;
          if (v23)
          {
            v29 = *(_QWORD *)(v23 + 88);
            if (v29)
            {
              v30 = *(_QWORD *)(v29 + 224);
              if (v30)
              {
                v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, a1);
                if (v24)
                  goto LABEL_42;
                v20 = *(unsigned __int16 *)(a1 + 28);
              }
            }
          }
        }
      }
      if ((~v20 & 0x408) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1))
      {
        v24 = *(_QWORD *)(a1 + 32);
        if (!v24)
          goto LABEL_52;
        v25 = *(_WORD *)(v24 + 28);
        if ((v25 & 0x80) == 0)
        {
          if ((v25 & 8) == 0)
            goto LABEL_52;
          goto LABEL_42;
        }
        v28 = *(_QWORD *)(v24 + 200);
        if (!v28)
          goto LABEL_52;
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 112);
        if (!v28)
          goto LABEL_52;
      }
      v24 = *(_QWORD *)(v28 + 8);
      if (!v24)
        goto LABEL_52;
    }
LABEL_42:
    if ((*(_BYTE *)(v24 + 22) & 8) == 0)
      goto LABEL_52;
    this = WebCore::Element::resolveComputedStyle(v24, 2);
    if (!this)
      goto LABEL_52;
    goto LABEL_12;
  }
  v21 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v21)
    goto LABEL_52;
  if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v21 = *(_QWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v21)
      v21 = *(_QWORD *)(v21 + 8);
  }
  this = (WebCore::RenderStyle *)(v21 + 80);
LABEL_12:
  if ((a3 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v18 = 2;
      goto LABEL_21;
    }
  }
  else
  {
    v14 = WebCore::RenderStyle::usedUserSelect(this);
    if (v14 == 2)
      v15 = 1;
    else
      v15 = v13;
    if ((v15 & 1) != 0)
    {
      v18 = 2 * (v14 != 2);
      goto LABEL_21;
    }
  }
  v16 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v16 + 239) & 1) != 0)
  {
LABEL_52:
    v18 = 0;
    goto LABEL_21;
  }
  v17 = (*(_DWORD *)(v16 + 228) >> 4) & 3;
  if (v17 == 2)
    v18 = 1;
  else
    v18 = 2 * (v17 == 1);
LABEL_21:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v26 = *(_WORD *)(v4 + 30);
    if ((v26 & 0x400) == 0)
    {
      v27 = *(_WORD *)(v4 + 28);
      if ((v27 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4);
      }
      else
      {
        if ((v27 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v26 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v26 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  return v18;
}

WebCore::Node *WebCore::Element::resolveComputedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Style::Scope *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WebCore::Node *v25;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  WebCore::Node *v38;
  uint64_t v39;
  WebCore::Node *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  WebCore::Node *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const WebCore::RenderStyle *v56;
  uint64_t *v57;
  uint64_t v58;
  WTF *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  void *v62;
  WTF *v63;
  WebCore::RenderStyle *v64;
  WTF *v65;
  uint64_t v66;
  WebCore::Style *v67;
  uint64_t v68;
  uint64_t v69;
  WebCore::ElementRareData *v70;
  WebCore::RenderStyle *v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  uint64_t *v78;
  WTF *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  int v90;
  char *v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  __int16 v102;
  void *v103;
  WebCore::Node *v104;
  char v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  WTF *v114;
  WTF *v116;
  WTF *v118;
  WTF *v119;
  uint64_t v120;
  char *v121;
  WTF *v122;
  WTF *v124;
  uint64_t v126;
  char *v127;
  _DWORD *v128;
  WTF *v129;
  WTF *v130;
  int v131;
  WebCore::Node *v132;
  WTF *v133;
  int v134;
  WTF *v135;
  uint64_t v136;
  __int128 v137;
  WebCore::Node *v138;
  __int128 v139;
  char v140;
  int v141;
  _DWORD *v142;
  int v143;
  _DWORD v144[66];
  uint64_t v145;
  WebCore::Node *v146[6];
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  char v150;
  WTF *v151;
  uint64_t v152;
  _BYTE v153[256];
  uint64_t *v154;
  WebCore::Node *v155;
  uint64_t *v156;
  uint64_t v157;

  v3 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = v4;
  v7 = v3;
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  v9 = *(WebCore::Style::Scope **)(v8 + 1328);
  if (*((_BYTE *)v9 + 234))
    WebCore::Style::Scope::flushPendingDescendantUpdates(*(WebCore::Style::Scope **)(v8 + 1328), v4, v5);
  if (*((_BYTE *)v9 + 233))
    WebCore::Style::Scope::flushPendingSelfUpdate(v9, v4, v5);
  if (v6 != 1)
  {
    if (!*(_BYTE *)(v8 + 3362))
    {
      if (*(_BYTE *)(v8 + 3390)
        || (*(_BYTE *)(v8 + 70) & 8) != 0
        || *(_QWORD *)(v8 + 1560)
        || (v23 = *(_QWORD *)(v8 + 1328), *(_BYTE *)(v23 + 233))
        || *(_BYTE *)(v23 + 234))
      {
        if (!*(_BYTE *)(v8 + 3391))
          goto LABEL_7;
      }
    }
    if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x30))
        goto LABEL_69;
      v29 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 16) & 0x1FLL;
        if (v30 == 26 || v30 == 18)
          goto LABEL_69;
      }
    }
    if ((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_69;
  }
  if (*(_BYTE *)(v8 + 3362))
  {
LABEL_8:
    v10 = *(_QWORD *)(v8 + 1272);
    goto LABEL_9;
  }
LABEL_7:
  if (!*(_BYTE *)(v8 + 3390))
    goto LABEL_8;
  v10 = *(_QWORD *)(v8 + 1272);
  if (!*(_BYTE *)(v8 + 3391))
  {
    if (!v10)
    {
LABEL_69:
      if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v25 = *(WebCore::Node **)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
        if (v25)
          goto LABEL_74;
        v25 = *(WebCore::Node **)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v25)
        {
          v27 = *((_QWORD *)v25 + 2) & 0x1FLL;
          if (v27 == 26 || v27 == 18)
            goto LABEL_74;
        }
      }
      v24 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
      if (v24)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v24 = *(_QWORD *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v24)
            v24 = *(_QWORD *)(v24 + 8);
        }
        v25 = (WebCore::Node *)(v24 + 80);
        goto LABEL_74;
      }
      goto LABEL_73;
    }
    goto LABEL_101;
  }
LABEL_9:
  if (!v10)
    goto LABEL_69;
  if ((*(_WORD *)(v10 + 30) & 0x10) != 0)
  {
LABEL_101:
    *(_DWORD *)(v10 + 24) += 2;
    goto LABEL_102;
  }
  v11 = 0;
  v10 = 0;
  v12 = 0;
  *(_DWORD *)(v7 + 24) += 2;
  v13 = v7;
  do
  {
    v2 = v13;
    if ((*(_WORD *)(v13 + 30) & 0x10) == 0)
    {
      if ((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v15 = *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
        if (v15)
          goto LABEL_17;
        v15 = *(_QWORD *)((*(_QWORD *)(v13 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v15)
        {
          v88 = *(_QWORD *)(v15 + 16) & 0x1FLL;
          if (v88 == 26 || v88 == 18)
            goto LABEL_17;
        }
      }
      v14 = *(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL;
      if (v14)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v14 = *(_QWORD *)((*(_QWORD *)(v13 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v14)
            v14 = *(_QWORD *)(v14 + 8);
        }
        v15 = v14 + 80;
LABEL_17:
        if (v6 == 1 && (*(_QWORD *)(v15 + 16) & 0x1FLL) == 0x1A)
        {
          if (v12)
          {
            if (*(_DWORD *)(v12 + 24) == 2)
            {
              if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v12);
              v10 = 0;
              v12 = 0;
              v11 = 1;
            }
            else
            {
              v10 = 0;
              *(_DWORD *)(v12 + 24) -= 2;
              v11 = 1;
              v12 = 0;
            }
          }
          else
          {
            v10 = 0;
            v11 = 1;
          }
        }
        goto LABEL_26;
      }
    }
    *(_DWORD *)(v13 + 24) += 2;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v10 = v13;
    v12 = v13;
LABEL_26:
    v16 = *(_QWORD *)(v13 + 32);
    if (v16)
    {
      if ((*(_WORD *)(v16 + 28) & 8) != 0)
      {
        v17 = *(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL;
        if (v17)
        {
          v21 = *(_QWORD *)(v17 + 88);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 224);
            if (v22)
            {
              v111 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v13);
              v13 = v111;
              if (v111)
                goto LABEL_42;
            }
          }
        }
      }
    }
    if ((~*(unsigned __int16 *)(v2 + 28) & 0x408) != 0
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2))
    {
      v13 = *(_QWORD *)(v2 + 32);
      if (!v13)
        goto LABEL_34;
      v18 = *(_WORD *)(v13 + 28);
      if ((v18 & 0x80) == 0)
      {
        if ((v18 & 8) == 0)
          goto LABEL_33;
        goto LABEL_42;
      }
      v20 = *(_QWORD *)(v13 + 200);
      if (!v20)
      {
LABEL_33:
        v13 = 0;
LABEL_34:
        v19 = 1;
        goto LABEL_35;
      }
    }
    else
    {
      v20 = *(_QWORD *)(v2 + 112);
      if (!v20)
        goto LABEL_33;
    }
    v13 = *(_QWORD *)(v20 + 8);
    if (!v13)
      goto LABEL_34;
LABEL_42:
    v19 = 0;
    *(_DWORD *)(v13 + 24) += 2;
LABEL_35:
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  while ((v19 & 1) == 0);
  if (!v10)
  {
    if (!v11)
      goto LABEL_69;
LABEL_73:
    v25 = 0;
    goto LABEL_74;
  }
LABEL_102:
  v32 = *(_QWORD *)(v10 + 32);
  if (v32)
  {
    if ((*(_WORD *)(v32 + 28) & 8) != 0)
    {
      v33 = *(_QWORD *)(v32 + 72) & 0xFFFFFFFFFFFFLL;
      if (v33)
      {
        v84 = *(_QWORD *)(v33 + 88);
        if (v84)
        {
          v85 = *(_QWORD *)(v84 + 224);
          if (v85)
          {
            v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 16))(v85, v10);
            if (v34)
              goto LABEL_206;
          }
        }
      }
    }
  }
  if ((~*(unsigned __int16 *)(v10 + 28) & 0x408) == 0
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 368))(v10))
  {
    v80 = *(_QWORD *)(v10 + 112);
    if (v80)
      goto LABEL_205;
LABEL_109:
    v34 = 0;
    goto LABEL_110;
  }
  v34 = *(_QWORD *)(v10 + 32);
  if (!v34)
    goto LABEL_110;
  v35 = *(_WORD *)(v34 + 28);
  if ((v35 & 0x80) == 0)
  {
    if ((v35 & 8) == 0)
      goto LABEL_109;
    goto LABEL_206;
  }
  v80 = *(_QWORD *)(v34 + 200);
  if (!v80)
    goto LABEL_109;
LABEL_205:
  v34 = *(_QWORD *)(v80 + 8);
  if (v34)
  {
LABEL_206:
    v36 = 0;
    *(_DWORD *)(v34 + 24) += 2;
  }
  else
  {
LABEL_110:
    v36 = 1;
  }
  v130 = (WTF *)v153;
  v151 = (WTF *)v153;
  v152 = 32;
  if (v7)
    *(_DWORD *)(v7 + 24) += 2;
  v146[0] = (WebCore::Node *)v7;
  v37 = v7;
  if (v34 != v7)
  {
    LOBYTE(v2) = 8;
    v38 = (WebCore::Node *)v7;
    while (1)
    {
      v39 = HIDWORD(v152);
      if (HIDWORD(v152) == (_DWORD)v152)
      {
        v39 = *(_QWORD *)WTF::Vector<JSC::JSObject *,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v151, HIDWORD(v152) + 1, (unint64_t)v146);
        if (v39)
          *(_DWORD *)(v39 + 24) += 2;
        v90 = HIDWORD(v152);
        *((_QWORD *)v151 + HIDWORD(v152)) = v39;
        LODWORD(v39) = v90;
      }
      else
      {
        if (v38)
          *((_DWORD *)v38 + 6) += 2;
        *((_QWORD *)v151 + v39) = v38;
      }
      HIDWORD(v152) = v39 + 1;
      v40 = v146[0];
      v41 = *((_QWORD *)v146[0] + 4);
      if (v41)
      {
        if ((*(_WORD *)(v41 + 28) & 8) != 0)
        {
          v42 = *(_QWORD *)(v41 + 72) & 0xFFFFFFFFFFFFLL;
          if (v42)
          {
            v46 = *(_QWORD *)(v42 + 88);
            if (v46)
            {
              v47 = *(_QWORD *)(v46 + 224);
              if (v47)
              {
                v38 = (WebCore::Node *)(*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v47 + 16))(v47, v146[0]);
                if (v38)
                {
LABEL_135:
                  *((_DWORD *)v38 + 6) += 2;
                  goto LABEL_127;
                }
              }
            }
          }
        }
      }
      if ((~*((unsigned __int16 *)v40 + 14) & 0x408) != 0
        || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)v40 + 368))(v40))
      {
        v38 = (WebCore::Node *)*((_QWORD *)v40 + 4);
        if (!v38)
          goto LABEL_127;
        v43 = *((_WORD *)v38 + 14);
        if ((v43 & 0x80) == 0)
        {
          if ((v43 & 8) != 0)
            goto LABEL_135;
LABEL_126:
          v38 = 0;
          goto LABEL_127;
        }
        v45 = *((_QWORD *)v38 + 25);
        if (!v45)
          goto LABEL_126;
      }
      else
      {
        v45 = *((_QWORD *)v40 + 14);
        if (!v45)
          goto LABEL_126;
      }
      v38 = *(WebCore::Node **)(v45 + 8);
      if (v38)
        goto LABEL_135;
LABEL_127:
      v44 = v146[0];
      v146[0] = v38;
      if (v44)
      {
        if (*((_DWORD *)v44 + 6) == 2)
        {
          if ((*((_WORD *)v44 + 15) & 0x400) == 0)
          {
            WebCore::Node::removedLastRef(v44);
            v38 = v146[0];
          }
        }
        else
        {
          *((_DWORD *)v44 + 6) -= 2;
        }
      }
      if (v38 == (WebCore::Node *)v34)
      {
        v37 = v34;
        break;
      }
    }
  }
  v146[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)(v37 + 24) == 2)
    {
      if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v37);
    }
    else
    {
      *(_DWORD *)(v37 + 24) -= 2;
    }
  }
  if ((v36 & 1) != 0)
    goto LABEL_148;
  if ((*(_QWORD *)(v34 + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v25 = *(WebCore::Node **)((*(_QWORD *)(v34 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
    if (v25)
      goto LABEL_149;
    v25 = *(WebCore::Node **)((*(_QWORD *)(v34 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v25)
    {
      v81 = *((_QWORD *)v25 + 2) & 0x1FLL;
      if (v81 == 26 || v81 == 18)
        goto LABEL_149;
    }
  }
  v48 = *(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v48)
  {
LABEL_148:
    v25 = 0;
    goto LABEL_149;
  }
  if ((*(_BYTE *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v48 = *(_QWORD *)((*(_QWORD *)(v34 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v48)
      v48 = *(_QWORD *)(v48 + 8);
  }
  v25 = (WebCore::Node *)(v48 + 80);
LABEL_149:
  v131 = v36;
  v132 = (WebCore::Node *)v34;
  WebCore::Style::PostResolutionCallbackDisabler::PostResolutionCallbackDisabler(&v150, v8, 0);
  if (!HIDWORD(v152))
    goto LABEL_280;
  v133 = v151;
  v50 = (uint64_t *)((char *)v151 + 8 * HIDWORD(v152));
  while (2)
  {
    --v50;
    if (v25)
    {
      if (v6 != 2
        && (unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v25 + 1) + 40) + 642) & 3) << 48
        && WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v8))
      {
        v25 = (WebCore::Node *)WebCore::Node::computedStyle((WebCore::Node *)v7);
        break;
      }
      v51 = *v50;
      LOBYTE(v134) = 0;
      v140 = 0;
LABEL_155:
      LOBYTE(v2) = *(_BYTE *)(v8 + 3379);
      *(_BYTE *)(v8 + 3379) = 1;
      v52 = *(_QWORD **)(v51 + 40);
      if (*v52)
        v53 = (*(_WORD *)(*v52 + 28) & 0x80) == 0;
      else
        v53 = 1;
      if (v53)
        v83 = v52[1] + 1328;
      else
        v83 = *v52 + 216;
      v54 = *(_QWORD *)v83;
      if (!*(_QWORD *)(*(_QWORD *)v83 + 32))
      {
        if (*(_QWORD *)(v54 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v54);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v54);
        v87 = *(WTF **)(v54 + 32);
        if (*((_DWORD *)v87 + 85) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        {
          v129 = *(WTF **)(v54 + 32);
          WebCore::Style::ScopeRuleSets::collectFeatures((WTF *)((char *)v87 + 32));
          v87 = v129;
        }
        if (*((_BYTE *)v87 + 242)
          || *((_BYTE *)v87 + 243)
          || *((_BYTE *)v87 + 244)
          || *((_BYTE *)v87 + 245)
          || *((_BYTE *)v87 + 246)
          || *((_BYTE *)v87 + 247)
          || *((_BYTE *)v87 + 248))
        {
          *(_BYTE *)(v54 + 236) = 1;
        }
      }
      v55 = *(_QWORD *)(v54 + 32);
      v146[0] = v25;
      memset(&v146[1], 0, 33);
      WebCore::Style::Resolver::styleForElement(v55, v51, (uint64_t)v146, 0, &v155);
      v57 = v156;
      if (v156)
      {
        LODWORD(v146[0]) = 0;
        *(_DWORD *)(v8 + 24) += 2;
        memset(&v146[2], 0, 32);
        v147 = 0u;
        v148 = 0u;
        v146[1] = (WebCore::Node *)v8;
        v149 = 0;
        v156 = 0;
        v154 = v57;
        WebCore::Style::commitRelations(&v154, (WebCore::Style::Update *)v146);
        v78 = v154;
        v154 = 0;
        if (v78)
        {
          v79 = (WTF *)*v78;
          if (v78 + 2 != (uint64_t *)*v78 && v79)
          {
            *v78 = 0;
            *((_DWORD *)v78 + 2) = 0;
            WTF::fastFree(v79, v77);
          }
          WTF::fastFree((WTF *)v78, v77);
        }
        WebCore::Style::Update::~Update((WebCore::Style::Update *)v146, v77);
      }
      v25 = v155;
      v58 = v157;
      v155 = 0;
      v157 = 0;
      if (v58)
      {
        v59 = *(WTF **)(v58 + 56);
        if ((WTF *)(v58 + 72) != v59 && v59)
        {
          *(_QWORD *)(v58 + 56) = 0;
          *(_DWORD *)(v58 + 64) = 0;
          WTF::fastFree(v59, v49);
        }
        WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v58 + 40, (WTF::StringImpl *)v49);
        WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v58 + 24, v60);
        WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v58 + 8, v61);
        WTF::fastFree((WTF *)v58, v62);
      }
      v51 = (uint64_t)v156;
      v156 = 0;
      if (v51)
      {
        v63 = *(WTF **)v51;
        if (v51 + 16 == *(_QWORD *)v51)
          goto LABEL_170;
        goto LABEL_308;
      }
    }
    else
    {
      v51 = *v50;
      LOBYTE(v134) = 0;
      v140 = 0;
      if (!*(_BYTE *)(v8 + 3390) || !*(_QWORD *)(v8 + 1944) || *(_BYTE *)(v8 + 3405))
      {
        v25 = 0;
        goto LABEL_155;
      }
      WebCore::Style::resolveForDocument((WebCore::Style *)v8, (uint64_t)v146);
      if (v140)
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v134, v73);
      v134 = 0;
      v74 = v146[1];
      v146[1] = 0;
      v135 = v74;
      v136 = (uint64_t)v146[2];
      v75 = *(_OWORD *)&v146[3];
      *(_OWORD *)&v146[3] = 0u;
      v137 = v75;
      v138 = v146[5];
      v76 = v147;
      v147 = 0u;
      v139 = v76;
      v140 = 1;
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v146, v73);
      if (v140)
      {
        v25 = (WebCore::Node *)&v134;
        goto LABEL_155;
      }
      __break(1u);
LABEL_308:
      if (v63)
      {
        *(_QWORD *)v51 = 0;
        *(_DWORD *)(v51 + 8) = 0;
        WTF::fastFree(v63, v49);
      }
LABEL_170:
      WTF::fastFree((WTF *)v51, v49);
    }
    v64 = v155;
    v155 = 0;
    if (v64)
    {
      WebCore::RenderStyle::~RenderStyle(v64, v49);
      if (*(_DWORD *)v65)
      {
        *((_OWORD *)v65 + 2) = 0u;
        *((_OWORD *)v65 + 3) = 0u;
        *(_OWORD *)v65 = 0u;
        *((_OWORD *)v65 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v65, v49);
      }
    }
    *(_BYTE *)(v8 + 3379) = v2;
    if (v140)
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v134, v49);
    v2 = *v50;
    v66 = *(_QWORD *)(*v50 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v66)
    {
      if ((*(_WORD *)(v2 + 28) & 8) != 0)
      {
        v68 = WTF::fastCompactMalloc((WTF *)0x100);
        *(_QWORD *)(v68 + 8) = 0;
        *(_QWORD *)(v68 + 16) = 0;
        *(_QWORD *)v68 = 0;
        *(_BYTE *)(v68 + 24) = 1;
        *(_DWORD *)(v68 + 36) = 0;
        *(_DWORD *)(v68 + 40) = 0;
        *(_QWORD *)(v68 + 25) = 0;
        *(_BYTE *)(v68 + 33) = 0;
        *(_OWORD *)(v68 + 48) = 0u;
        *(_OWORD *)(v68 + 64) = 0u;
        *(_OWORD *)(v68 + 80) = 0u;
        *(_OWORD *)(v68 + 96) = 0u;
        *(_OWORD *)(v68 + 112) = 0u;
        *(_OWORD *)(v68 + 128) = 0u;
        *(_QWORD *)(v68 + 144) = 0x3F0000003FLL;
        *(_OWORD *)(v68 + 152) = 0u;
        *(_OWORD *)(v68 + 168) = 0u;
        *(_OWORD *)(v68 + 184) = 0u;
        *(_OWORD *)(v68 + 200) = 0u;
        *(_OWORD *)(v68 + 216) = 0u;
        *(_OWORD *)(v68 + 232) = 0u;
        *(_BYTE *)(v68 + 248) = 0;
      }
      else
      {
        v68 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)(v68 + 8) = 0;
        *(_QWORD *)(v68 + 16) = 0;
        *(_QWORD *)v68 = 0;
        *(_WORD *)(v68 + 24) = 0;
      }
      v69 = *(_QWORD *)(v2 + 72);
      v70 = (WebCore::ElementRareData *)(v69 & 0xFFFFFFFFFFFFLL);
      if ((v69 & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_BYTE *)((v69 & 0xFFFFFFFFFFFFLL) + 0x18))
          WebCore::ElementRareData::~ElementRareData(v70);
        else
          std::__destroy_at[abi:sn180100]<WebCore::NodeRareData,0>((uint64_t)v70, v49);
        WTF::fastFree(v70, v86);
        v69 = *(_QWORD *)(v2 + 72);
      }
      *(_QWORD *)(v2 + 72) = v69 & 0xFFFF000000000000 | v68;
      v66 = v68 & 0xFFFFFFFFFFFFLL;
    }
    v67 = *(WebCore::Style **)(v66 + 48);
    if (!v67)
    {
      *(_QWORD *)(v66 + 48) = v25;
      goto LABEL_179;
    }
    if (WebCore::Style::determineChange(v67, v25, v56) < 2)
      goto LABEL_187;
    v128 = v144;
    WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)v146, *v50);
    bzero(&v134, 0x1258uLL);
    v129 = (WTF *)&v137;
    v135 = (WTF *)&v137;
    *((_QWORD *)&v137 + 1) = &v139;
    LODWORD(v138) = 16;
    v141 = 0;
    v142 = v128;
    v143 = 16;
    v144[64] = 0;
    v145 = -1;
    v136 = 0x100000008;
    if (!HIDWORD(v146[2]))
    {
LABEL_348:
      __break(0xC471u);
      JUMPOUT(0x194261EA0);
    }
    v91 = (char *)v146[1] + 584 * HIDWORD(v146[2]) - 584;
    v92 = 1;
    while (2)
    {
      v93 = v135;
      v94 = *(_QWORD *)v91;
      if (*(_QWORD *)v91 != *((_QWORD *)v135 + 73 * v92 - 73)
        && (*((_DWORD *)v91 + 70) || *((_DWORD *)v135 + 146 * v92 - 76)))
      {
        v95 = *(_DWORD *)(v94 + 24);
        *(_DWORD *)(v94 + 24) = v95 + 2;
        if ((*(_WORD *)(v94 + 28) & 8) != 0)
        {
          v102 = *(_WORD *)(v94 + 30);
          *(_WORD *)(v94 + 30) = v102 | 0x10;
          if (v95)
          {
            *(_DWORD *)(v94 + 24) = v95;
            goto LABEL_262;
          }
          if ((v102 & 0x400) != 0)
            goto LABEL_262;
        }
        else
        {
          if (v95)
          {
            *(_DWORD *)(v94 + 24) = v95;
LABEL_262:
            v96 = HIDWORD(v146[2]);
            if (!HIDWORD(v146[2]))
            {
              __break(0xC471u);
              JUMPOUT(0x194261E98);
            }
            v97 = (char *)v146[1] + 584 * HIDWORD(v146[2]) - 584;
            v98 = *(_QWORD *)v97;
            v99 = *(_QWORD *)(*(_QWORD *)v97 + 32);
            if (v99)
              v100 = (*(_WORD *)(v99 + 28) & 8) == 0;
            else
              v100 = 1;
            if (!v100 && (v101 = *(_QWORD *)(v99 + 72) & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)(v101 + 88))
            {
              WebCore::ComposedTreeIterator::traverseSiblingInSlot((WebCore::ComposedTreeIterator *)v146, 1);
              v96 = HIDWORD(v146[2]);
            }
            else
            {
              do
                v98 = *(_QWORD *)(v98 + 56);
              while (v98 && (*(_WORD *)(v98 + 28) & 0xA) == 0);
              *(_QWORD *)v97 = v98;
            }
            if (!v96)
              goto LABEL_348;
            v92 = HIDWORD(v136);
            v91 = (char *)v146[1] + 584 * v96 - 584;
            if (!HIDWORD(v136))
            {
              __break(0xC471u);
              JUMPOUT(0x194261EA8);
            }
            continue;
          }
          if ((*(_WORD *)(v94 + 30) & 0x400) != 0)
            goto LABEL_262;
        }
        WebCore::Node::removedLastRef((WebCore::Node *)v94);
        goto LABEL_262;
      }
      break;
    }
    v2 = 0;
    v112 = 584 * v92;
    do
    {
      v113 = (char *)v93 + v2;
      v114 = *(WTF **)((char *)v93 + v2 + 296);
      if ((WTF *)((char *)v93 + v2 + 312) != v114 && v114 != 0)
      {
        *((_QWORD *)v113 + 37) = 0;
        *((_DWORD *)v113 + 76) = 0;
        v127 = (char *)v93 + v2;
        v128 = (_DWORD *)v112;
        WTF::fastFree(v114, v49);
        v113 = v127;
        v112 = (uint64_t)v128;
      }
      v116 = (WTF *)*((_QWORD *)v113 + 1);
      if (v113 + 24 != (char *)v116 && v116 != 0)
      {
        *((_QWORD *)v113 + 1) = 0;
        *(_DWORD *)((char *)v93 + v2 + 16) = 0;
        v128 = (_DWORD *)v112;
        WTF::fastFree(v116, v49);
        v112 = (uint64_t)v128;
      }
      v2 += 584;
    }
    while (v112 != v2);
    v118 = v135;
    if (v129 != v135 && v135)
    {
      v135 = 0;
      LODWORD(v136) = 0;
      WTF::fastFree(v118, v49);
    }
    v119 = v146[1];
    if (HIDWORD(v146[2]))
    {
      v2 = 0;
      v120 = 584 * HIDWORD(v146[2]);
      do
      {
        v121 = (char *)v119 + v2;
        v122 = *(WTF **)((char *)v119 + v2 + 296);
        if ((WTF *)((char *)v119 + v2 + 312) != v122 && v122 != 0)
        {
          *((_QWORD *)v121 + 37) = 0;
          *((_DWORD *)v121 + 76) = 0;
          v128 = (_DWORD *)v120;
          v129 = v119;
          WTF::fastFree(v122, v49);
          v120 = (uint64_t)v128;
          v119 = v129;
        }
        v124 = (WTF *)*((_QWORD *)v121 + 1);
        if (v121 + 24 != (char *)v124 && v124 != 0)
        {
          *((_QWORD *)v121 + 1) = 0;
          *(_DWORD *)((char *)v119 + v2 + 16) = 0;
          v129 = v119;
          v126 = v120;
          WTF::fastFree(v124, v49);
          v120 = v126;
          v119 = v129;
        }
        v2 += 584;
      }
      while (v120 != v2);
      v119 = v146[1];
    }
    if (&v146[3] != (WebCore::Node **)v119 && v119)
    {
      v146[1] = 0;
      LODWORD(v146[2]) = 0;
      WTF::fastFree(v119, v49);
    }
LABEL_187:
    v71 = *(WebCore::RenderStyle **)(v66 + 48);
    *(_QWORD *)(v66 + 48) = v25;
    if (v71)
    {
      WebCore::RenderStyle::~RenderStyle(v71, v49);
      if (*(_DWORD *)v72)
      {
        *((_OWORD *)v72 + 2) = 0u;
        *((_OWORD *)v72 + 3) = 0u;
        *(_OWORD *)v72 = 0u;
        *((_OWORD *)v72 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v72, v49);
      }
    }
LABEL_179:
    *(_WORD *)(*v50 + 30) &= ~0x10u;
    if (v6 == 1 && (*((_QWORD *)v25 + 2) & 0x1FLL) == 0x1A)
    {
      v25 = 0;
      break;
    }
    if (v50 != (uint64_t *)v133)
      continue;
    break;
  }
LABEL_280:
  WebCore::Style::PostResolutionCallbackDisabler::~PostResolutionCallbackDisabler((WebCore::Style::PostResolutionCallbackDisabler *)&v150, v49);
  v104 = v132;
  v105 = v131;
  if (HIDWORD(v152))
  {
    v106 = v151;
    v107 = 8 * HIDWORD(v152);
    do
    {
      v108 = *(_QWORD *)v106;
      *(_QWORD *)v106 = 0;
      if (v108)
      {
        if (*(_DWORD *)(v108 + 24) == 2)
        {
          if ((*(_WORD *)(v108 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v108);
        }
        else
        {
          *(_DWORD *)(v108 + 24) -= 2;
        }
      }
      v106 = (WTF *)((char *)v106 + 8);
      v107 -= 8;
    }
    while (v107);
  }
  v109 = v151;
  if (v130 != v151 && v151 != 0)
  {
    v151 = 0;
    LODWORD(v152) = 0;
    WTF::fastFree(v109, v103);
  }
  if ((v105 & 1) == 0)
  {
    if (*((_DWORD *)v104 + 6) == 2)
    {
      if ((*((_WORD *)v104 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v104);
    }
    else
    {
      *((_DWORD *)v104 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v10 + 24) == 2)
  {
    if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v10);
  }
  else
  {
    *(_DWORD *)(v10 + 24) -= 2;
  }
LABEL_74:
  if (v8)
  {
    if (*(_DWORD *)(v8 + 24) == 2)
    {
      if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v8);
    }
    else
    {
      *(_DWORD *)(v8 + 24) -= 2;
    }
  }
  return v25;
}

BOOL WebCore::RenderBlock::hasLineIfEmpty(WebCore::RenderBlock *this, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  WebCore::Node *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  char v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int16 *)(v2 + 28);
  if ((v3 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942622C4);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  if (!*(_QWORD *)(v4 + 1944) || *(_BYTE *)(v4 + 3405))
    return 0;
  if ((~v3 & 0x408) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2))
      return 0;
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8);
  }
  *(_DWORD *)(v4 + 24) += 2;
  v5 = *(_QWORD *)(v4 + 528);
  v9 = v5
    && (v6 = *(_QWORD *)(v5 + 8)) != 0
    && (v7 = *(_QWORD *)(v6 + 24)) != 0
    && (v8 = *(_QWORD *)(v7 + 8)) != 0
    && *(unsigned __int8 *)(v8 + 656) != 0;
  if ((*(_BYTE *)(v2 + 22) & 0x10) != 0)
  {
    v25 = WebCore::HTMLElement::editabilityFromContentEditableAttr(v2, v9);
    goto LABEL_45;
  }
  v10 = *(unsigned __int16 *)(v2 + 28);
  if ((v10 & 0xF000) == 0x9000)
  {
    v11 = *(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v11 = *(_QWORD *)((*(_QWORD *)(v2 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v11)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v12 = (WebCore::Node *)(v11 + 80);
      goto LABEL_29;
    }
LABEL_66:
    v25 = 0;
    goto LABEL_45;
  }
  v13 = v2;
  if ((v10 & 8) == 0)
  {
    v14 = *(_QWORD *)(v2 + 32);
    if (v14)
    {
      if ((*(_WORD *)(v14 + 28) & 8) != 0)
      {
        v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL;
        if (v15)
        {
          v33 = *(_QWORD *)(v15 + 88);
          if (v33)
          {
            v34 = *(_QWORD *)(v33 + 224);
            if (v34)
            {
              v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v2);
              if (v13)
                goto LABEL_27;
              v10 = *(unsigned __int16 *)(v2 + 28);
            }
          }
        }
      }
    }
    if ((~v10 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 368))(v2))
    {
      v29 = *(_QWORD *)(v2 + 112);
      if (!v29)
        goto LABEL_66;
      goto LABEL_87;
    }
    v13 = *(_QWORD *)(v2 + 32);
    if (!v13)
      goto LABEL_66;
    v16 = *(_WORD *)(v13 + 28);
    if ((v16 & 0x80) != 0)
    {
      v29 = *(_QWORD *)(v13 + 200);
      if (!v29)
        goto LABEL_66;
LABEL_87:
      v13 = *(_QWORD *)(v29 + 8);
      if (!v13)
        goto LABEL_66;
      goto LABEL_27;
    }
    if ((v16 & 8) == 0)
      goto LABEL_66;
  }
LABEL_27:
  if ((*(_BYTE *)(v13 + 22) & 8) == 0)
    goto LABEL_66;
  v12 = WebCore::Element::resolveComputedStyle(v13, 2);
  if (!v12)
    goto LABEL_66;
LABEL_29:
  v17 = *((_QWORD *)v12 + 3);
  if ((*(_BYTE *)(v17 + 239) & 1) != 0)
  {
    if (v9)
      v25 = 2;
    else
      v25 = 0;
  }
  else
  {
    v18 = *(_DWORD *)(v17 + 228);
    v19 = (v18 >> 15) & 3;
    if ((v18 & 0x30) != 0)
    {
      v30 = v19 <= 1 ? 1 : (v18 >> 15) & 3;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v12 + 1) + 32) + 148) & 0xC00000) != 0x800000)
        v19 = v30;
    }
    if (v9)
      v20 = 2;
    else
      v20 = 0;
    v21 = v19 == 2;
    v22 = v19 == 2 || v9;
    if (v21)
      v20 = 0;
    v23 = (v18 >> 4) & 3;
    if (v23 == 2)
      v24 = 1;
    else
      v24 = 2 * (v23 == 1);
    if ((v22 & 1) != 0)
      v25 = v20;
    else
      v25 = v24;
  }
LABEL_45:
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    v31 = *(_WORD *)(v4 + 30);
    if ((v31 & 0x400) == 0)
    {
      v32 = *(_WORD *)(v4 + 28);
      if ((v32 & 0xF000) == 0x9000)
      {
        WebCore::Document::removedLastRef((WebCore::Document *)v4, a2);
      }
      else
      {
        if ((v32 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 160) + 16))(*(_QWORD *)(v4 + 160));
          v31 = *(_WORD *)(v4 + 30);
        }
        *(_WORD *)(v4 + 30) = v31 | 0x400;
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
      }
    }
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  if (!v25 || (*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  v27 = *(_QWORD *)(v2 + 32);
  if (!v27 || !WebCore::Node::hasEditableStyle(v27, 0) || (*(_WORD *)(*(_QWORD *)(v2 + 32) + 28) & 8) == 0)
    return 1;
  i = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1272);
  if (i)
  {
    if ((*(_WORD *)(i + 28) & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
    {
      for (i = *(_QWORD *)(i + 80); i; i = *(_QWORD *)(i + 56))
      {
        if ((*(_WORD *)(i + 28) & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(i + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
        {
          break;
        }
      }
    }
    else
    {
      i = 0;
    }
  }
  return i == v2;
}

uint64_t WebCore::RenderBox::needsPreferredWidthsRecalculation(WebCore::RenderBox *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  v1 = *((_QWORD *)this + 11);
  v2 = *((_DWORD *)this + 30);
  v3 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v4 = (v2 >> 26) & 1;
  v5 = v4;
  if ((v3 - 2) >= 2)
  {
    if (v3 == 4)
    {
      v5 = (v2 & 0x4000000) == 0;
    }
    else
    {
      v5 = (v2 >> 26) & 1;
      if (v3 != 5)
      {
        v6 = 3;
        if ((v2 & 0x4000000) != 0)
          v6 = 1;
        goto LABEL_6;
      }
    }
  }
  v12 = v5 == 0;
  v6 = 2;
  if (v12)
    v6 = 0;
LABEL_6:
  v7 = *(_QWORD *)(v1 + 24) + 72;
  if ((*(_BYTE *)(v7 + 8 * v6 + 4) & 0xF7) == 3)
    return 1;
  if ((v3 - 2) < 2)
    goto LABEL_28;
  if (v3 == 4)
  {
    v4 = (v2 & 0x4000000) == 0;
LABEL_28:
    v12 = v4 == 0;
    v8 = 2;
    if (!v12)
      v8 = 0;
    goto LABEL_12;
  }
  if (v3 == 5)
    goto LABEL_28;
  v8 = 3;
  if ((v2 & 0x4000000) == 0)
    v8 = 1;
LABEL_12:
  if ((*(_BYTE *)(v7 + 8 * v8 + 4) & 0xF7) == 3)
    return 1;
  if (((*(_DWORD *)(*(_QWORD *)(v1 + 32) + 148) >> 5) & 3u) - 1 > 1)
    return 0;
  if (((*(uint64_t (**)(void))(*(_QWORD *)this + 1544))() & 1) != 0)
    return 1;
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      if (*(char *)(v11 + 45) < 0 && (*((_BYTE *)this + 21) & 4) == 0)
        return WebCore::RenderBox::hasStretchedLogicalHeight(this);
    }
  }
  return 0;
}

uint64_t WebCore::RenderTableCell::paddingAfter(WebCore::RenderTableCell *this)
{
  unsigned int v2;
  int v3;
  BOOL v4;
  unsigned int v5;

  v2 = WebCore::RenderBoxModelObject::computedCSSPaddingAfter(this);
  v3 = *((_DWORD *)this + 64);
  v4 = __OFADD__(v2, v3);
  v5 = v2 + v3;
  if (v4)
    return (v2 >> 31) + 0x7FFFFFFF;
  else
    return v5;
}

uint64_t WebCore::RenderTableCell::borderAfter(WebCore::RenderTableCell *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t v13;
  int v14;
  WebCore::RenderStyle *v15;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    goto LABEL_39;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    goto LABEL_39;
  if (*(_BYTE *)(v2 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x19426258CLL);
  }
  v3 = *(_QWORD *)(v2 + 32);
  if (!v3)
    goto LABEL_39;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    goto LABEL_39;
  if (*(_BYTE *)(v4 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1942625ACLL);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = *(unsigned __int8 *)(v6 + 46);
    if (v7 != 35 && v7 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1942625E0);
    }
    if ((*(_BYTE *)(v6 + 124) & 4) == 0)
    {
      v8 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
      v15 = (WebCore::RenderTableCell *)((char *)this + 80);
      switch(v8)
      {
        case 0:
          goto LABEL_33;
        case 1:
        case 3:
          goto LABEL_29;
        case 2:
        case 4:
          goto LABEL_30;
        default:
          goto LABEL_13;
      }
    }
    return WebCore::RenderTableCell::borderHalfAfter(this, 0);
  }
  else
  {
LABEL_39:
    v14 = ((unsigned __int16)*((_DWORD *)this + 31) >> 13) - 1;
    v15 = (WebCore::RenderTableCell *)((char *)this + 80);
    switch(v14)
    {
      case 0:
LABEL_33:
        v10 = WebCore::RenderStyle::borderTopWidth(v15);
        break;
      case 1:
      case 3:
LABEL_29:
        v10 = WebCore::RenderStyle::borderRightWidth(v15);
        break;
      case 2:
      case 4:
LABEL_30:
        v10 = WebCore::RenderStyle::borderLeftWidth(v15);
        break;
      default:
LABEL_13:
        v9 = *(_QWORD *)(*((_QWORD *)v15 + 11) + 24);
        v10 = 0.0;
        if ((*(_BYTE *)(v9 + 196) & 0xE) != 0)
        {
          v13 = *(_QWORD *)(v9 + 200);
          if (*(_BYTE *)(v13 + 5) && *(_BYTE *)(v13 + 68) == 4)
          {
            if (*(_BYTE *)(v13 + 70))
              v10 = *(float *)(v13 + 64);
            else
              v10 = (float)*(int *)(v13 + 64);
          }
          else
          {
            v10 = *(float *)(v9 + 192);
          }
        }
        break;
    }
    v11 = v10 * 64.0;
    if (v11 >= 2147483650.0)
    {
      return 0x7FFFFFFFLL;
    }
    else if (v11 <= -2147483650.0)
    {
      return 0x80000000;
    }
    else
    {
      return (int)v11;
    }
  }
}

BOOL WebCore::RenderTableCell::hasLineIfEmpty(WebCore::RenderTableCell *this, void *a2)
{
  uint64_t v3;

  if ((*((_BYTE *)this + 45) & 1) != 0)
    return WebCore::RenderBlock::hasLineIfEmpty(this, a2);
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v3)
    return WebCore::RenderBlock::hasLineIfEmpty(this, a2);
  if ((*(_WORD *)(v3 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942626B0);
  }
  return WebCore::Node::computeEditability(v3, 0, 1) || WebCore::RenderBlock::hasLineIfEmpty(this, a2);
}

uint64_t WebCore::RenderBox::layoutOverflowRectForPropagation(WebCore::RenderBox *this, unint64_t a2, double a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  signed int v36;
  signed int v37;
  signed int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  WebCore::RenderBox *v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  float v85;
  double v86;
  double v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  _DWORD v121[4];

  v5 = *((_QWORD *)this + 20);
  v119 = 0;
  v120 = v5;
  v6 = *((_QWORD *)this + 4);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(_BYTE *)(v7 + 46) != 12 || (*((_BYTE *)this + 21) & 4) != 0)
  {
    v8 = v5;
    goto LABEL_5;
  }
  v76 = *((_DWORD *)this + 30);
  v77 = (v76 >> 26) & 1;
  v78 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if ((v78 - 2) < 2)
    goto LABEL_196;
  if (v78 == 4)
  {
    v77 = (v76 & 0x4000000) == 0;
LABEL_196:
    v10 = v77 == 0;
    v79 = 2;
    if (!v10)
      v79 = 0;
    goto LABEL_127;
  }
  if (v78 == 5)
    goto LABEL_196;
  v79 = 3;
  if ((v76 & 0x4000000) == 0)
    v79 = 1;
LABEL_127:
  v80 = *((_DWORD *)this + v79 + 42) & ~(*((int *)this + v79 + 42) >> 31);
  v8 = v5 + v80;
  if (__OFADD__((_DWORD)v5, v80))
    v8 = (v5 >> 31) + 0x7FFFFFFF;
  LODWORD(v120) = v8;
LABEL_5:
  v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 40);
  v10 = (*(_BYTE *)(v9 + 642) & 3u) - 3 <= 0xFFFFFFFD && (*(_BYTE *)(v9 + 462) & 1) == 0;
  v11 = v10 && (*(_DWORD *)(v9 + 636) & 0xC0000) == 0;
  if (!v11
    && ((*((_BYTE *)this + 20) & 1) != 0 || WebCore::RenderObject::isAtomicInlineLevelBox(this))
    && (*((_QWORD *)this + 12) & 0x1FLL) != 0x19
    && (*((unsigned __int8 *)this + 46) - 36 > 4 || (*((_BYTE *)this + 52) & 7) == 1))
  {
    goto LABEL_51;
  }
  v12 = HIDWORD(v5);
  if ((*((_BYTE *)this + 22) & 1) != 0)
  {
    v72 = (*((_QWORD *)this + 12) >> 10) & 7;
    v73 = *((_QWORD *)this + 12) & 0xE000;
    if (v72 == 2)
    {
      if (v73)
        goto LABEL_51;
      HIDWORD(v111) = WebCore::RenderBox::layoutOverflowRect(this) >> 32;
      LODWORD(v111) = 0;
      v112 = __PAIR64__(v88, v8);
    }
    else
    {
      if (v73 != 0x4000 || v72 != 0)
        goto LABEL_51;
      v111 = WebCore::RenderBox::layoutOverflowRect(this);
      v112 = __PAIR64__(HIDWORD(v5), v75);
    }
    *(_QWORD *)&a3 = WebCore::LayoutRect::unite((WebCore::LayoutRect *)&v119, (const WebCore::LayoutRect *)&v111).n128_u64[0];
    goto LABEL_51;
  }
  v13 = *((_QWORD *)this + 24);
  if (v13)
  {
    v28 = *(_QWORD *)(v13 + 4);
    v29 = *(_QWORD *)(v13 + 12);
  }
  else
  {
    v14 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 992))(this);
    v15 = v14;
    v16 = HIDWORD(a2);
    v17 = *((_DWORD *)this + 40);
    v18 = v17 - HIDWORD(a2);
    if (__OFSUB__(v17, HIDWORD(a2)))
      v18 = (v17 >> 31) + 0x7FFFFFFF;
    v19 = __OFSUB__(v18, HIDWORD(v14));
    v20 = v18 - HIDWORD(v14);
    v21 = (v18 >> 31) + 0x7FFFFFFF;
    if (v19)
      v22 = v21;
    else
      v22 = v20;
    v23 = *((_DWORD *)this + 41);
    v24 = v23 - v14;
    if (__OFSUB__(v23, (_DWORD)v14))
      v24 = (v23 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v24, (_DWORD)a2))
      v25 = (v24 >> 31) + 0x7FFFFFFF;
    else
      v25 = v24 - a2;
    v26 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v26 <= 5 && ((1 << v26) & 0x2A) != 0)
    {
      v27 = *((_DWORD *)this + 5);
      if ((v27 & 0x1000) != 0)
      {
        v95 = HIDWORD(a2) + v22;
        if (__OFADD__(HIDWORD(a2), v22))
          v95 = (HIDWORD(a2) >> 31) + 0x7FFFFFFF;
        LODWORD(v16) = v17 - v95;
        if (__OFSUB__(v17, v95))
          LODWORD(v16) = (v17 >> 31) + 0x7FFFFFFF;
      }
      else
      {
        v92 = v14 + v25;
        if (__OFADD__((_DWORD)v14, (_DWORD)v25))
          v92 = (v14 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v23, v92);
        v93 = v23 - v92;
        v94 = (v23 >> 31) + 0x7FFFFFFF;
        if (v19)
          v15 = v94;
        else
          v15 = v93;
      }
    }
    else
    {
      v27 = *((_DWORD *)this + 5);
    }
    if ((v27 & 0x10000) != 0)
    {
      v60 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1352))(this);
      v61 = (*(uint64_t (**)(WebCore::RenderBox *))(*(_QWORD *)this + 1360))(this);
      if (v60 <= 0x2000000)
        v62 = -64 * v60;
      else
        v62 = 0x80000000;
      if (v60 < -33554431)
        v62 = 0x7FFFFFFF;
      v19 = __OFADD__(v22, v62);
      v63 = v22 + v62;
      if (v19)
        v22 = (v22 >> 31) + 0x7FFFFFFF;
      else
        v22 = v63;
      if (v61 <= 0x2000000)
        v64 = -64 * v61;
      else
        v64 = 0x80000000;
      if (v61 < -33554431)
        v64 = 0x7FFFFFFF;
      v19 = __OFADD__((_DWORD)v25, v64);
      v65 = v25 + v64;
      if (v19)
        v25 = (v25 >> 31) + 0x7FFFFFFF;
      else
        v25 = v65;
    }
    v28 = v16 | (unint64_t)(v15 << 32);
    v29 = v22 | (unint64_t)(v25 << 32);
  }
  v30 = HIDWORD(v29);
  if ((int)v29 >= 1 && SHIDWORD(v29) >= 1)
  {
    if (v8 < 1 || (int)v12 <= 0)
    {
      v119 = v28;
      v120 = v29;
    }
    else
    {
      v32 = HIDWORD(v28);
      v33 = v28 & ((int)v28 >> 31);
      v34 = HIDWORD(v28) & (SHIDWORD(v28) >> 31);
      v19 = __OFADD__((_DWORD)v28, (_DWORD)v29);
      v35 = v28 + v29;
      v36 = (v28 >> 31) + 0x7FFFFFFF;
      if (!v19)
        v36 = v35;
      if (v8 <= v36)
        v37 = v36;
      else
        v37 = v8;
      v38 = v32 + v30;
      if (__OFADD__((_DWORD)v32, (_DWORD)v30))
        v38 = (v32 >> 31) + 0x7FFFFFFF;
      if ((int)v12 > v38)
        v38 = v12;
      v119 = v33 | (v34 << 32);
      v19 = __OFSUB__(v37, (_DWORD)v33);
      v39 = v37 - v33;
      if (v19)
        v39 = 0x7FFFFFFF;
      LODWORD(v120) = v39;
      v19 = __OFSUB__(v38, (_DWORD)v34);
      v40 = v38 - v34;
      if (v19)
        v40 = 0x7FFFFFFF;
      HIDWORD(v120) = v40;
    }
  }
LABEL_51:
  v41 = *((_DWORD *)this + 5);
  if ((v41 & 0x20000) == 0)
    goto LABEL_53;
  v48 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
    v48 = *(WebCore::RenderBox **)(*((_QWORD *)this + 4) + 8);
  v49 = *((_QWORD *)v48 + 11);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 32) + 40) + 20)
    || (v66 = *(_QWORD **)(v49 + 40), v66[41])
    || v66[38]
    || v66[39]
    || v66[40]
    || (v41 & 0x100000) != 0)
  {
    v50 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v50 <= 5 && ((1 << v50) & 0x2A) != 0)
    {
      if ((v41 & 0x1000) != 0)
      {
        v102 = *((_DWORD *)this + 40);
        v103 = v119 + v120;
        if (__OFADD__((_DWORD)v119, (_DWORD)v120))
          v103 = (v119 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v19)
          v104 = (v102 >> 31) + 0x7FFFFFFF;
        LODWORD(v119) = v104;
      }
      else
      {
        v96 = *((_DWORD *)this + 41);
        v97 = HIDWORD(v119) + HIDWORD(v120);
        if (__OFADD__(HIDWORD(v119), HIDWORD(v120)))
          v97 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v19)
          v98 = (v96 >> 31) + 0x7FFFFFFF;
        HIDWORD(v119) = v98;
      }
    }
    if ((v41 & 0x8000) != 0)
    {
      WebCore::RenderLayer::currentTransform(*((WebCore::RenderLayer **)this + 18), (void *)a2, (uint64_t)&v111);
      v119 = WebCore::TransformationMatrix::mapRect((WebCore::TransformationMatrix *)&v111, (const WebCore::LayoutRect *)&v119);
      v120 = v51;
      v41 = *((_DWORD *)this + 5);
    }
  }
  else
  {
LABEL_53:
    if ((v41 & 0x800000) == 0 || (v41 & 0x1800000) == 0x1800000)
      goto LABEL_54;
    v56 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
    if (v56 <= 5 && ((1 << v56) & 0x2A) != 0)
    {
      if ((v41 & 0x1000) != 0)
      {
        v105 = *((_DWORD *)this + 40);
        v106 = v119 + v120;
        if (__OFADD__((_DWORD)v119, (_DWORD)v120))
          v106 = (v119 >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v19)
          v107 = (v105 >> 31) + 0x7FFFFFFF;
        LODWORD(v119) = v107;
      }
      else
      {
        v57 = *((_DWORD *)this + 41);
        v58 = HIDWORD(v119) + HIDWORD(v120);
        if (__OFADD__(HIDWORD(v119), HIDWORD(v120)))
          v58 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
        v19 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v19)
          v59 = (v57 >> 31) + 0x7FFFFFFF;
        HIDWORD(v119) = v59;
      }
    }
  }
  if ((v41 & 0x800000) != 0)
  {
    v67 = v41 & 0x1800000;
    if (v67 == 0x800000)
    {
      v68 = WebCore::RenderBoxModelObject::relativePositionOffset(this);
      v69 = HIDWORD(v68);
    }
    else if (v67 == 25165824)
    {
      WebCore::RenderBoxModelObject::constrainingRectForStickyPosition(this, a3);
      v121[0] = v81;
      v121[1] = v82;
      v121[2] = v83;
      v121[3] = v84;
      v113 = 0;
      v111 = (unint64_t)off_1E34043D0;
      v112 = 0;
      v114 = 0u;
      v115 = 0u;
      v116 = 0u;
      v117 = 0u;
      v118 = 0u;
      WebCore::RenderBoxModelObject::computeStickyPositionConstraints(this, (WebCore::StickyPositionViewportConstraints *)&v111, (const WebCore::FloatRect *)v121);
      v86 = WebCore::StickyPositionViewportConstraints::computeStickyOffset((WebCore::StickyPositionViewportConstraints *)&v111, (const WebCore::FloatRect *)v121)* 64.0;
      if (v86 >= 2147483650.0)
      {
        LODWORD(v68) = 0x7FFFFFFF;
      }
      else if (v86 <= -2147483650.0)
      {
        LODWORD(v68) = 0x80000000;
      }
      else
      {
        LODWORD(v68) = (int)v86;
      }
      v87 = v85 * 64.0;
      if (v87 >= 2147483650.0)
      {
        LODWORD(v69) = 0x7FFFFFFF;
      }
      else if (v87 <= -2147483650.0)
      {
        LODWORD(v69) = 0x80000000;
      }
      else
      {
        LODWORD(v69) = (int)v87;
      }
    }
    else
    {
      LODWORD(v69) = 0;
      LODWORD(v68) = 0;
    }
    v70 = v119 + v68;
    if (__OFADD__((_DWORD)v119, (_DWORD)v68))
      v70 = (v119 >> 31) + 0x7FFFFFFF;
    LODWORD(v119) = v70;
    v19 = __OFADD__(HIDWORD(v119), (_DWORD)v69);
    v71 = HIDWORD(v119) + v69;
    if (v19)
      v71 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
    HIDWORD(v119) = v71;
  }
  v52 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  if (v52 <= 5 && ((1 << v52) & 0x2A) != 0)
  {
    if ((*((_BYTE *)this + 21) & 0x10) != 0)
    {
      v99 = *((_DWORD *)this + 40);
      v100 = v119 + v120;
      if (__OFADD__((_DWORD)v119, (_DWORD)v120))
        v100 = (v119 >> 31) + 0x7FFFFFFF;
      v19 = __OFSUB__(v99, v100);
      v101 = v99 - v100;
      if (v19)
        v101 = (v99 >> 31) + 0x7FFFFFFF;
      LODWORD(v119) = v101;
    }
    else
    {
      v53 = *((_DWORD *)this + 41);
      v54 = HIDWORD(v119) + HIDWORD(v120);
      if (__OFADD__(HIDWORD(v119), HIDWORD(v120)))
        v54 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
      v19 = __OFSUB__(v53, v54);
      v55 = v53 - v54;
      if (v19)
        v55 = (v53 >> 31) + 0x7FFFFFFF;
      HIDWORD(v119) = v55;
    }
  }
LABEL_54:
  v42 = (unsigned __int16)*(_DWORD *)(a2 + 44) >> 13;
  v43 = 0x30203020100uLL >> (8 * v42);
  if (v42 >= 6)
    LOBYTE(v43) = 0;
  v44 = v43 & 3;
  v45 = (unsigned __int16)*((_DWORD *)this + 31) >> 13;
  v46 = 0x30203020100uLL >> (8 * v45);
  if (v45 >= 6)
    LOBYTE(v46) = 0;
  if (v44 != (v46 & 3))
  {
    if (v45 == 3 || v45 == 5 || v42 == 5 || v42 == 3)
    {
      v108 = *((_DWORD *)this + 40);
      v109 = v119 + v120;
      if (__OFADD__((_DWORD)v119, (_DWORD)v120))
        v109 = (v119 >> 31) + 0x7FFFFFFF;
      v19 = __OFSUB__(v108, v109);
      v110 = v108 - v109;
      if (v19)
        v110 = (v108 >> 31) + 0x7FFFFFFF;
      LODWORD(v119) = v110;
    }
    else if (v42 == 1 || v45 == 1)
    {
      v89 = *((_DWORD *)this + 41);
      v90 = HIDWORD(v119) + HIDWORD(v120);
      if (__OFADD__(HIDWORD(v119), HIDWORD(v120)))
        v90 = (HIDWORD(v119) >> 31) + 0x7FFFFFFF;
      v19 = __OFSUB__(v89, v90);
      v91 = v89 - v90;
      if (v19)
        v91 = (v89 >> 31) + 0x7FFFFFFF;
      HIDWORD(v119) = v91;
    }
  }
  return v119;
}

BOOL WebCore::RenderBox::hasRelativeDimensions(WebCore::RenderBox *this)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(*((_QWORD *)this + 11) + 8);
  return (v1[16] & 0xF7) == 3
      || (v1[8] & 0xF7) == 3
      || (v1[48] & 0xF7) == 3
      || (v1[32] & 0xF7) == 3
      || (v1[40] & 0xF7) == 3
      || (v1[24] & 0xF7) == 3;
}

void WebCore::RenderLayerModelObject::~RenderLayerModelObject(WebCore::RenderLayerModelObject *this, void *a2)
{
  WebCore::RenderLayer *v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = off_1E34292D8;
  v3 = (WebCore::RenderLayer *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v3)
  {
    WebCore::RenderLayer::~RenderLayer(v3, a2);
    if (*(_DWORD *)(v4 + 8))
    {
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
    }
    else
    {
      bmalloc::api::isoDeallocate((bmalloc::api *)v4, a2);
    }
  }
  *(_QWORD *)this = off_1E3422BC8;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderLayerModelObject *)((char *)this + 80), a2);
  v6 = (WTF *)(*(unsigned int *)((char *)this + 71) | ((unint64_t)*((unsigned __int8 *)this + 75) << 32));
  *(_DWORD *)((char *)this + 71) = 0;
  *((_BYTE *)this + 75) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v5);
    else
      --*(_DWORD *)v6;
  }
  v7 = (WTF *)(*((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32));
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v5);
    else
      --*(_DWORD *)v7;
  }
  *(_QWORD *)this = off_1E342E320;
  v8 = *((_QWORD *)this + 7);
  if (v8)
  {
    v21 = *(_QWORD *)(v8 + 112);
    *(_QWORD *)(v8 + 112) = 0;
    if (v21)
    {
      v22 = *(_DWORD *)(v21 + 16);
      if (!v22)
      {
        __break(0xC471u);
        JUMPOUT(0x194263298);
      }
      *(_DWORD *)(v21 + 16) = v22 - 1;
    }
    v23 = *((_QWORD *)this + 7);
    if (v23)
    {
      v24 = *(_DWORD *)(v23 + 8);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1942632B8);
      }
      *(_DWORD *)(v23 + 8) = v24 - 1;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944);
  v10 = *(_DWORD *)(v9 + 16);
  --*(_QWORD *)(v9 + 256);
  *(_DWORD *)(v9 + 16) = v10 + 1;
  if (v10 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x19426324CLL);
  }
  *(_DWORD *)(v9 + 16) = v10;
  v11 = (WTF *)(*(unsigned int *)((char *)this + 47) | ((unint64_t)*((unsigned __int8 *)this + 51) << 32));
  *(_DWORD *)((char *)this + 47) = 0;
  *((_BYTE *)this + 51) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v5);
    else
      --*(_DWORD *)v11;
  }
  v12 = (WTF *)(*((unsigned int *)this + 10) | ((unint64_t)*((unsigned __int8 *)this + 44) << 32));
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v5);
    else
      --*(_DWORD *)v12;
  }
  v13 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v5);
    else
      --*(_DWORD *)v13;
  }
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v14);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v14));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v14);
      v19 = *(unsigned int *)(v14 + 28);
      if ((_DWORD)v19)
      {
        v26 = v14;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v14 + 16), (WTF::StringImpl *)(*(_QWORD *)(v14 + 16) + 32 * v19));
        v14 = v26;
      }
      v20 = *(WTF **)(v14 + 16);
      if (v20)
      {
        *(_QWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 24) = 0;
        v25 = v14;
        WTF::fastFree(v20, v5);
        v14 = v25;
      }
      WTF::fastFree((WTF *)v14, v5);
    }
  }
  *(_QWORD *)this = &off_1E33F87C8;
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v5);
      else
        --*(_DWORD *)v16;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::Node::parentElementInComposedTree(WebCore::Node *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 4);
  if (!v2
    || (*(_WORD *)(v2 + 28) & 8) == 0
    || (v3 = *(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (v7 = *(_QWORD *)(v3 + 88)) == 0
    || (v8 = *(_QWORD *)(v7 + 224)) == 0
    || (result = (*(uint64_t (**)(uint64_t, WebCore::Node *))(*(_QWORD *)v8 + 16))(v8, this)) == 0)
  {
    if ((~*((unsigned __int16 *)this + 14) & 0x408) != 0
      || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)this + 368))(this))
    {
      result = *((_QWORD *)this + 4);
      if (!result)
        return result;
      v5 = *(_WORD *)(result + 28);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 8) != 0)
          return result;
        return 0;
      }
      v6 = *(_QWORD *)(result + 200);
      if (!v6)
        return 0;
    }
    else
    {
      v6 = *((_QWORD *)this + 14);
      if (!v6)
        return 0;
    }
    return *(_QWORD *)(v6 + 8);
  }
  return result;
}

uint64_t WebCore::RenderImage::needsPreferredWidthsRecalculation(WebCore::RenderImage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::SVGImage *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16[2];

  if (((*(uint64_t (**)(WebCore::RenderImage *))(*(_QWORD *)this + 1544))(this) & 1) != 0
    || (v2 = *((_QWORD *)this + 4)) != 0
    && (v3 = *(_QWORD *)(v2 + 8)) != 0
    && *(_BYTE *)(v3 + 46) == 12
    && (*((_BYTE *)this + 21) & 4) == 0
    && WebCore::RenderBox::hasStretchedLogicalHeight(this))
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
    v10 = v9 + 12;
    v11 = v9 + 4;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v10 = v11;
    if (!*(_BYTE *)(v10 + 4))
      return 1;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 28) + 24);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return 0;
  if ((*(_WORD *)(v5 + 557) >> 5) - 3 <= 1 && (*(_BYTE *)(v5 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v16);
    v13 = (unsigned int *)v16[0];
    if (v16[0])
    {
      v6 = (WebCore::SVGImage *)*((_QWORD *)v16[0] + 1);
      v16[0] = 0;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v12);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = *(WebCore::SVGImage **)(v5 + 688);
    if (v6)
      goto LABEL_9;
    {
      v6 = (WebCore::SVGImage *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v16);
      v6 = v16[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v16[0];
    }
  }
  if (!v6)
    return 0;
LABEL_9:
  result = (*(uint64_t (**)(WebCore::SVGImage *))(*(_QWORD *)v6 + 56))(v6);
  if ((_DWORD)result)
    return WebCore::SVGImage::embeddedContentBox(v6, v8) != 0;
  return result;
}

uint64_t WebCore::InlineIterator::firstLineBoxFor@<X0>(uint64_t this@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v4 = *(_DWORD *)(this + 240);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v12 = *(_QWORD *)(this + 232);
      if (v12)
      {
        v13 = *(_QWORD **)(v12 + 8);
        if (v13)
        {
          if (((*(uint64_t (**)(_QWORD *, const WebCore::RenderBlockFlow *))(*v13 + 88))(v13, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x1942636ACLL);
          }
          this = v13[13];
          if (this)
            goto LABEL_33;
          this = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)this = 1;
          *(_QWORD *)(this + 8) = v13;
          v15 = (unsigned int *)v13[13];
          v13[13] = this;
          if (!v15)
            goto LABEL_33;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v14);
          }
          this = v13[13];
          if (this)
          {
LABEL_33:
            do
              v18 = __ldaxr((unsigned int *)this);
            while (__stlxr(v18 + 1, (unsigned int *)this));
          }
          goto LABEL_15;
        }
      }
    }
LABEL_14:
    this = 0;
LABEL_15:
    *(_QWORD *)a3 = this;
LABEL_16:
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v5 = *(_QWORD *)(this + 232);
  if (!v5)
    goto LABEL_14;
  v6 = *(uint64_t **)(v5 + 80);
  if (!v6)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_16;
  }
  this = *v6;
  if (*v6)
    goto LABEL_34;
  this = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = v6;
  v9 = (unsigned int *)*v6;
  *v6 = this;
  if (!v9)
    goto LABEL_34;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  this = *v6;
  if (*v6)
  {
LABEL_34:
    do
      v7 = __ldaxr((unsigned int *)this);
    while (__stlxr(v7 + 1, (unsigned int *)this));
  }
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *WebCore::InlineIterator::lastLineBoxFor@<X0>(unsigned int *this@<X0>, const WebCore::RenderBlockFlow *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;

  v4 = this[60];
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      v14 = *((_QWORD *)this + 29);
      if (v14)
      {
        v15 = *(_QWORD **)(v14 + 16);
        if (v15)
        {
          if (((*(uint64_t (**)(_QWORD *, const WebCore::RenderBlockFlow *))(*v15 + 88))(v15, a2) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194263844);
          }
          this = (unsigned int *)v15[13];
          if (this)
            goto LABEL_36;
          this = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
          *this = 1;
          *((_QWORD *)this + 1) = v15;
          v17 = (unsigned int *)v15[13];
          v15[13] = this;
          if (!v17)
            goto LABEL_36;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            WTF::fastFree((WTF *)v17, v16);
          }
          this = (unsigned int *)v15[13];
          if (this)
          {
LABEL_36:
            do
              v20 = __ldaxr(this);
            while (__stlxr(v20 + 1, this));
          }
          goto LABEL_18;
        }
      }
    }
LABEL_17:
    this = 0;
LABEL_18:
    *(_QWORD *)a3 = this;
LABEL_19:
    *(_DWORD *)(a3 + 16) = 1;
    return this;
  }
  v5 = *((_QWORD *)this + 29);
  if (!v5)
    goto LABEL_17;
  v6 = *(_QWORD *)(v5 + 80);
  if (!v6)
  {
    *(_QWORD *)a3 = 0;
    goto LABEL_19;
  }
  v7 = *(unsigned int *)(v6 + 44);
  if ((_DWORD)v7)
    v8 = v7 - 1;
  else
    v8 = 0;
  this = *(unsigned int **)v6;
  if (*(_QWORD *)v6)
    goto LABEL_37;
  this = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
  *this = 1;
  *((_QWORD *)this + 1) = v6;
  v11 = *(unsigned int **)v6;
  *(_QWORD *)v6 = this;
  if (!v11)
    goto LABEL_37;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  this = *(unsigned int **)v6;
  if (*(_QWORD *)v6)
  {
LABEL_37:
    do
      v9 = __ldaxr(this);
    while (__stlxr(v9 + 1, this));
  }
  *(_QWORD *)a3 = this;
  *(_QWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

void WebCore::HTMLTreeBuilder::processEndOfFile(uint64_t a1, void *a2)
{
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  __int16 v19;

  v4 = (uint64_t *)(a1 + 112);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 240))
    {
      case 0:
        if (!*(_BYTE *)(a1 + 225))
        {
          v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          if (!*(_BYTE *)(v6 + 3403))
          {
            *(_BYTE *)(a1 + 232) = 1;
            *(_DWORD *)(v6 + 24) += 2;
            WebCore::Document::setCompatibilityMode(v6, (void *)2);
            if (*(_DWORD *)(v6 + 24) == 2)
            {
              if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
            }
            else
            {
              *(_DWORD *)(v6 + 24) -= 2;
            }
          }
        }
        *(_DWORD *)(a1 + 240) = 1;
        goto LABEL_13;
      case 1:
LABEL_13:
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        v17 = 2;
        v18 = 59;
        v19 = 0;
        WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagBeforeHTML(a1 + 56, (uint64_t)&v13);
        *(_DWORD *)(a1 + 240) = 2;
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v8);
        goto LABEL_14;
      case 2:
LABEL_14:
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        v17 = 2;
        v18 = 55;
        v19 = 0;
        WebCore::HTMLTreeBuilder::processStartTag(a1, &v13);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v9);
        goto LABEL_15;
      case 3:
LABEL_15:
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        v17 = 3;
        v18 = 55;
        v19 = 0;
        WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v13);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v10);
        goto LABEL_16;
      case 4:
        WebCore::HTMLTreeBuilder::defaultForInHeadNoscript((WebCore::HTMLTreeBuilder *)a1);
        continue;
      case 5:
LABEL_16:
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        v17 = 2;
        v18 = 18;
        v19 = 0;
        WebCore::HTMLTreeBuilder::processStartTag(a1, &v13);
        *(_BYTE *)(a1 + 321) = 1;
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v11);
        goto LABEL_3;
      case 6:
        goto LABEL_25;
      case 7:
      case 0xB:
      case 0xE:
      case 0xF:
LABEL_3:
        if (!*(_DWORD *)(a1 + 260))
          goto LABEL_4;
        v16 = 0;
        v14 = 0u;
        v15 = 0u;
        v13 = 0u;
        v17 = 3;
        v18 = 119;
        v19 = 0;
        if (WebCore::HTMLTreeBuilder::processTemplateEndTag(a1))
        {
          WebCore::HTMLTreeBuilder::processEndOfFile(a1, a2);
          WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v12);
        }
        else
        {
          WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v13, v5);
LABEL_4:
          WebCore::HTMLElementStack::popAll(v4, a2);
        }
        return;
      case 8:
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)v4);
        *(_DWORD *)(a1 + 240) = *(_DWORD *)(a1 + 244);
        continue;
      case 9:
      case 0xD:
      case 0x10:
      case 0x11:
      case 0x13:
        goto LABEL_24;
      case 0xA:
        WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
        continue;
      case 0xC:
        if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) == *(_QWORD *)(a1 + 120))
          return;
        WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup((WebCore::HTMLTreeBuilder *)a1);
LABEL_24:
        if (!*(_DWORD *)(a1 + 260))
          goto LABEL_4;
LABEL_25:
        if ((WebCore::HTMLTreeBuilder::processEndOfFileForInTemplateContents(a1, (WTF::StringImpl *)a2) & 1) != 0)
          return;
        goto LABEL_4;
      default:
        goto LABEL_4;
    }
  }
}

void WebCore::HTMLTreeBuilder::processStartTag(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned __int16 **v4;
  int v5;
  unsigned int v6;
  uint64_t j;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t i;
  int v17;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  _DWORD **v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  WTF::StringImpl *v38;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  uint64_t v43;
  WTF::String *v44;
  __n128 v45;
  unsigned __int16 *v46;
  int v47;
  WTF::StringImpl *v49;
  WebCore::Element *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  uint64_t v53;
  WTF::String *v54;
  __n128 v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  WebCore::HTMLConstructionSite *v60;
  WTF::StringImpl *v63;
  unsigned int v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  WebCore::Node *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[56];
  char v78;
  __int16 v79;
  __int16 v80;

  v4 = (unsigned __int16 **)(a1 + 112);
  while (2)
  {
    v5 = *(_DWORD *)(a1 + 240);
    if (v5 == 7)
    {
LABEL_3:
      WebCore::HTMLTreeBuilder::processStartTagForInBody(a1, (uint64_t)a2);
      return;
    }
    switch(v5)
    {
      case 0:
        if (!*(_BYTE *)(a1 + 225))
        {
          v36 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
          if (!*(_BYTE *)(v36 + 3403))
          {
            *(_BYTE *)(a1 + 232) = 1;
            *(_DWORD *)(v36 + 24) += 2;
            v74 = (WebCore::Node *)v36;
            WebCore::Document::setCompatibilityMode(v36, (void *)2);
            if (*((_DWORD *)v74 + 6) == 2)
            {
              if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v74, v37);
            }
            else
            {
              *((_DWORD *)v74 + 6) -= 2;
            }
          }
        }
        *(_DWORD *)(a1 + 240) = 1;
        goto LABEL_77;
      case 1:
LABEL_77:
        if (*((_WORD *)a2 + 29) == 59)
        {
          WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagBeforeHTML(a1 + 56, (uint64_t)a2);
          v19 = 2;
          goto LABEL_29;
        }
        memset(v77, 0, sizeof(v77));
        v78 = 2;
        v79 = 59;
        v80 = 0;
        WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagBeforeHTML(a1 + 56, (uint64_t)v77);
        *(_DWORD *)(a1 + 240) = 2;
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v77, v38);
LABEL_80:
        v39 = *((unsigned __int16 *)a2 + 29);
        if (v39 == 55)
        {
          WebCore::HTMLConstructionSite::insertHTMLHeadElement(a1 + 56, (uint64_t)a2);
          v19 = 3;
          goto LABEL_29;
        }
        if (v39 == 59)
          goto LABEL_92;
        memset(v77, 0, sizeof(v77));
        v78 = 2;
        v79 = 55;
        v80 = 0;
        WebCore::HTMLTreeBuilder::processStartTag(a1, v77);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v77, v40);
LABEL_84:
        if (WebCore::HTMLTreeBuilder::processStartTagForInHead(a1, (uint64_t)a2))
          return;
        memset(v77, 0, sizeof(v77));
        v78 = 3;
        v79 = 55;
        v80 = 0;
        WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)v77);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v77, v41);
LABEL_86:
        v42 = *((unsigned __int16 *)a2 + 29);
        if (v42 == 18)
        {
          *(_BYTE *)(a1 + 321) = 0;
          WebCore::HTMLConstructionSite::insertHTMLBodyElement(a1 + 56, (uint64_t)a2);
          v19 = 7;
          goto LABEL_29;
        }
        if (*((unsigned __int16 *)a2 + 29) <= 0x36u)
        {
          if ((v42 - 11) >= 2 && v42 != 15)
          {
            if (v42 == 48)
            {
              WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, (uint64_t)a2);
              v19 = 19;
              goto LABEL_29;
            }
            goto LABEL_146;
          }
        }
        else
        {
          if ((v42 - 59) <= 0x3C)
          {
            if (((1 << (v42 - 59)) & 0x1000000001040800) != 0)
              goto LABEL_109;
            if (v42 == 59)
            {
LABEL_92:
              if ((WebCore::HTMLElementStack::hasTemplateInHTMLScope(v4) & 1) == 0)
                WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagInBody(a1 + 56, (uint64_t)a2, v45, v43, v44);
              return;
            }
          }
          if ((v42 - 255) >= 3)
          {
            if (v42 == 55)
              return;
LABEL_146:
            WebCore::HTMLTreeBuilder::defaultForAfterHead((WebCore::HTMLTreeBuilder *)a1, a2);
            goto LABEL_3;
          }
        }
LABEL_109:
        WebCore::HTMLStackItem::HTMLStackItem((uint64_t)v77, (__int16 *)(a1 + 56));
        WebCore::HTMLElementStack::pushHTMLHeadElement((uint64_t)v4, (__int16 *)v77);
        WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)v77, v49);
        WebCore::HTMLTreeBuilder::processStartTagForInHead(a1, (uint64_t)a2);
        v50 = *(WebCore::Element **)(a1 + 64);
        if ((*((_WORD *)v50 + 14) & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194264660);
        }
        WebCore::HTMLElementStack::removeHTMLHeadElement((WebCore::HTMLElementStack *)v4, v50);
        return;
      case 2:
        goto LABEL_80;
      case 3:
        goto LABEL_84;
      case 4:
        v67 = *((unsigned __int16 *)a2 + 29);
        if (v67 <= 0x45)
        {
          if (*((unsigned __int16 *)a2 + 29) > 0x36u)
          {
            if (v67 == 55)
              return;
            if (v67 == 59)
            {
LABEL_137:
              if ((WebCore::HTMLElementStack::hasTemplateInHTMLScope(v4) & 1) == 0)
                WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagInBody(a1 + 56, (uint64_t)a2, v55, v53, v54);
              return;
            }
            goto LABEL_210;
          }
          if (v67 != 12 && v67 != 15)
            goto LABEL_210;
        }
        else
        {
          if (*((unsigned __int16 *)a2 + 29) > 0x52u)
          {
            switch(v67)
            {
              case 0x53u:
                goto LABEL_31;
              case 0x54u:
                return;
              case 0x100u:
                goto LABEL_31;
            }
LABEL_210:
            WebCore::HTMLTreeBuilder::defaultForInHeadNoscript((WebCore::HTMLTreeBuilder *)a1);
            WebCore::HTMLTreeBuilder::processToken(a1, (uint64_t)a2);
            return;
          }
          if (v67 != 70 && v67 != 77)
            goto LABEL_210;
        }
        goto LABEL_31;
      case 5:
        goto LABEL_86;
      case 6:
        v20 = *((unsigned __int16 *)a2 + 29);
        if ((v20 - 255) < 2)
          goto LABEL_31;
        v21 = 9;
        if (*((unsigned __int16 *)a2 + 29) > 0x45u)
        {
          switch(*((_WORD *)a2 + 29))
          {
            case 'u':
            case 'y':
            case '{':
              goto LABEL_70;
            case 'v':
            case 'z':
              v21 = 14;
              goto LABEL_70;
            case 'w':
              goto LABEL_114;
            case 'x':
            case '|':
              goto LABEL_69;
            case '}':
              v21 = 13;
              goto LABEL_70;
            default:
              if (v20 != 70 && v20 != 77)
                goto LABEL_69;
              goto LABEL_31;
          }
        }
        if (v20 != 22)
        {
          if (v20 == 26)
          {
            v21 = 12;
          }
          else if (v20 != 27)
          {
LABEL_69:
            v21 = 7;
          }
        }
LABEL_70:
        v35 = *(unsigned int *)(a1 + 260);
        if (!(_DWORD)v35)
        {
          __break(0xC471u);
          JUMPOUT(0x194264668);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v35 - 4) = v21;
        *(_DWORD *)(a1 + 240) = v21;
        continue;
      case 9:
        goto LABEL_126;
      case 10:
        WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, a2);
        continue;
      case 11:
        v64 = *((unsigned __int16 *)a2 + 29);
        v65 = v64 - 117 > 8 || ((1 << (v64 - 117)) & 0x173) == 0;
        if (v65 && (v64 > 0x1B || ((1 << v64) & 0xC400000) == 0))
          goto LABEL_20;
        if (!WebCore::HTMLTreeBuilder::processCaptionEndTagForInCaption((WebCore::HTMLTreeBuilder *)a1))
          return;
        continue;
      case 12:
        v66 = *((unsigned __int16 *)a2 + 29);
        switch(v66)
        {
          case 26:
            goto LABEL_204;
          case 119:
            goto LABEL_114;
          case 59:
            goto LABEL_137;
        }
        if ((WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup((WebCore::HTMLTreeBuilder *)a1) & 1) == 0)
          return;
        continue;
      case 13:
        v15 = *((unsigned __int16 *)a2 + 29);
        if (v15 == 125)
        {
          for (i = a1 + 56; ; i = v70)
          {
            v17 = **v4;
            if (v17 == 117)
              break;
            if ((v17 - 119) <= 4 && ((1 << (v17 - 119)) & 0x15) != 0)
              break;
            v70 = i;
            v71 = *((_QWORD *)*v4 + 1);
            if (v71)
            {
              if (v17 == 59 || (*(_WORD *)(v71 + 28) & 0xF000) == 0xB000)
                break;
            }
            else if (v17 == 59)
            {
              break;
            }
            WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)v4);
          }
          WebCore::HTMLConstructionSite::insertHTMLElement(i, (uint64_t)a2);
          v19 = 14;
LABEL_29:
          *(_DWORD *)(a1 + 240) = v19;
          return;
        }
        if (v15 - 117 > 6)
          goto LABEL_124;
        v25 = 1 << (v15 - 117);
        if ((v25 & 0x51) == 0)
        {
          if ((v25 & 0x22) != 0)
          {
            *(_OWORD *)v77 = 0uLL;
            WebCore::HTMLTreeBuilder::processFakeStartTag(a1, 125, v77);
            WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v77, v51);
            goto LABEL_66;
          }
LABEL_124:
          if (v15 > 0x1B || ((1 << v15) & 0xC400000) == 0)
            goto LABEL_126;
        }
        v26 = *v4;
        if (!*v4)
          goto LABEL_216;
        v27 = *v4;
        while (2)
        {
          v28 = *v27;
          if (v28 == 117)
          {
            while (1)
            {
LABEL_55:
              v29 = *v26;
              v30 = *((_QWORD *)v26 + 1);
              if (v29 == 117 || (v29 - 119 <= 4 ? (v31 = ((1 << (v29 - 119)) & 0x15) == 0) : (v31 = 1), !v31))
              {
                if (v30)
                  goto LABEL_61;
                goto LABEL_62;
              }
              if (v30)
              {
                if (v29 == 59 || (*(_WORD *)(v30 + 28) & 0xF000) == 0xB000)
                {
                  v73 = v29 - 245;
                  if (v29 >= 0xF5)
                  {
                    if (v73 >= 0x1A)
                      LOWORD(v29) = 0;
                    else
                      LOWORD(v29) = word_1969F1F3E[(__int16)v73];
                  }
LABEL_61:
                  if ((*(_WORD *)(v30 + 28) & 8) != 0)
                    v32 = (_DWORD **)(*(_QWORD *)(v30 + 96) + 24);
                  else
LABEL_62:
                    v32 = (_DWORD **)MEMORY[0x1E0CBF2F8];
                  v33 = *v32;
                  if (v33)
                    *v33 += 2;
                  *(_QWORD *)v77 = v33;
                  memset(&v77[8], 0, 48);
                  v78 = 3;
                  v79 = v29;
                  v80 = 0;
                  WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)v77);
                  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v77, v34);
LABEL_66:
                  WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
                  return;
                }
              }
              else if (v29 == 59)
              {
                goto LABEL_62;
              }
              WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)v4);
              v26 = *v4;
            }
          }
          if (v28 == 116 || v28 == 119)
            break;
          v72 = *((_QWORD *)v27 + 1);
          if (v72)
          {
            if (v28 != 59 && (*(_WORD *)(v72 + 28) & 0xF000) != 0xB000)
            {
LABEL_226:
              v27 = (unsigned __int16 *)*((_QWORD *)v27 + 4);
              if (!v27)
                break;
              continue;
            }
          }
          else if (v28 != 59)
          {
            goto LABEL_226;
          }
          break;
        }
LABEL_216:
        if (WebCore::HTMLElementStack::inTableScope(v4, 123) || WebCore::HTMLElementStack::inTableScope(v4, 121))
          goto LABEL_55;
        return;
      case 14:
        v6 = *((unsigned __int16 *)a2 + 29);
        if (v6 == 118)
          goto LABEL_7;
        if (v6 - 117 > 8)
          goto LABEL_115;
        if (v6 != 122)
        {
          if (((1 << (v6 - 117)) & 0x151) == 0)
          {
LABEL_115:
            if (v6 > 0x1B || ((1 << v6) & 0xC400000) == 0)
            {
LABEL_126:
              WebCore::HTMLTreeBuilder::processStartTagForInTable(a1, (uint64_t)a2);
              return;
            }
          }
          if (!WebCore::HTMLTreeBuilder::processTrEndTagForInRow((unsigned __int16 **)a1))
            return;
          continue;
        }
LABEL_7:
        for (j = a1 + 56; ; j = v68)
        {
          v8 = **v4;
          if (v8 == 125 || v8 == 119)
            break;
          v68 = j;
          v69 = *((_QWORD *)*v4 + 1);
          if (v69)
          {
            if (v8 == 59 || (*(_WORD *)(v69 + 28) & 0xF000) == 0xB000)
              break;
          }
          else if (v8 == 59)
          {
            break;
          }
          WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)v4);
        }
        WebCore::HTMLConstructionSite::insertHTMLElement(j, (uint64_t)a2);
        *(_DWORD *)(a1 + 240) = 15;
        v9 = (uint64_t *)(a1 + 152);
        v10 = *(unsigned int *)(a1 + 164);
        if ((_DWORD)v10 == *(_DWORD *)(a1 + 160))
        {
          WTF::Vector<WebCore::HTMLFormattingElementList::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1);
          v10 = *(unsigned int *)(a1 + 164);
          v11 = *(_QWORD *)(a1 + 152);
        }
        else
        {
          v11 = *v9;
        }
        v12 = v11 + 32 * v10;
        *(_WORD *)v12 = 0;
        *(_BYTE *)(v12 + 2) = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 8) = 0;
        ++*(_DWORD *)(a1 + 164);
        return;
      case 15:
        v13 = *((unsigned __int16 *)a2 + 29);
        v14 = v13 - 117 > 8 || ((1 << (v13 - 117)) & 0x173) == 0;
        if (v14 && (v13 > 0x1B || ((1 << v13) & 0xC400000) == 0))
        {
LABEL_20:
          WebCore::HTMLTreeBuilder::processStartTagForInBody(a1, (uint64_t)a2);
          return;
        }
        if (!WebCore::HTMLElementStack::inTableScope(v4, 118) && !WebCore::HTMLElementStack::inTableScope(v4, 122))
          return;
        WebCore::HTMLTreeBuilder::closeTheCell((WebCore::HTMLTreeBuilder *)a1);
        continue;
      case 16:
        v22 = *((unsigned __int16 *)a2 + 29);
        goto LABEL_45;
      case 17:
        v22 = *((unsigned __int16 *)a2 + 29);
        if ((v22 - 116) <= 9 && ((1 << (v22 - 116)) & 0x2E7) != 0 || v22 == 22)
          goto LABEL_166;
LABEL_45:
        if (v22 == 88)
        {
          v23 = a1 + 56;
          if (**(_WORD **)(a1 + 112) != 88)
          {
LABEL_47:
            v24 = v23;
            goto LABEL_48;
          }
          v57 = a1;
          v58 = 88;
        }
        else
        {
          if (v22 > 105)
          {
            if (v22 > 119)
            {
              if (v22 != 120)
              {
                if (v22 != 255)
                  return;
LABEL_31:
                WebCore::HTMLTreeBuilder::processStartTagForInHead(a1, (uint64_t)a2);
                return;
              }
LABEL_96:
              v46 = *v4;
              if (!*v4)
                return;
              while (1)
              {
                v47 = *v46;
                if (v47 == 106)
                  break;
                if ((v47 - 87) <= 1)
                {
                  v46 = (unsigned __int16 *)*((_QWORD *)v46 + 4);
                  if (v46)
                    continue;
                }
                return;
              }
LABEL_166:
              memset(v77, 0, sizeof(v77));
              v75 = 0;
              v76 = 0;
              v78 = 3;
              v79 = 106;
              v80 = 0;
              WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v75, a2);
              WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)v77);
              WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
            }
            else
            {
              if (v22 != 106)
              {
                if (v22 == 119)
LABEL_114:
                  WebCore::HTMLTreeBuilder::processTemplateStartTag(a1, (uint64_t)a2);
                return;
              }
              memset(v77, 0, sizeof(v77));
              v75 = 0;
              v76 = 0;
              v78 = 3;
              v79 = 106;
              v80 = 0;
              WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v75, a2);
              WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)v77);
            }
            WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v77, v63);
            return;
          }
          switch(v22)
          {
            case ':':
              v59 = **(unsigned __int16 **)(a1 + 112);
              if (v59 == 88)
              {
                WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 88);
                v59 = **(unsigned __int16 **)(a1 + 112);
              }
              if (v59 == 87)
                WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 87);
              v60 = (WebCore::HTMLConstructionSite *)(a1 + 56);
              goto LABEL_152;
            case ';':
              goto LABEL_137;
            case '<':
            case '=':
            case '>':
            case '@':
            case 'A':
              return;
            case '?':
            case 'B':
              goto LABEL_96;
            default:
              if (v22 != 87)
                return;
              v23 = a1 + 56;
              v56 = **(unsigned __int16 **)(a1 + 112);
              if (v56 == 88)
              {
                WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 88);
                v56 = **(unsigned __int16 **)(a1 + 112);
              }
              if (v56 != 87)
                goto LABEL_47;
              v57 = a1;
              v58 = 87;
              break;
          }
        }
        WebCore::HTMLTreeBuilder::processFakeEndTag(v57, v58);
        goto LABEL_47;
      case 18:
      case 21:
        if (*((_WORD *)a2 + 29) == 59)
          goto LABEL_137;
        *(_DWORD *)(a1 + 240) = 7;
        continue;
      case 19:
        v52 = *((unsigned __int16 *)a2 + 29);
        if (v52 > 0x3A)
          goto LABEL_135;
        if (v52 == 47)
        {
LABEL_204:
          v60 = (WebCore::HTMLConstructionSite *)(a1 + 56);
LABEL_152:
          WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement(v60, (WTF::StringImpl **)a2);
        }
        else if (v52 == 48)
        {
          v24 = a1 + 56;
LABEL_48:
          WebCore::HTMLConstructionSite::insertHTMLElement(v24, (uint64_t)a2);
        }
        return;
      case 20:
      case 22:
        v52 = *((unsigned __int16 *)a2 + 29);
LABEL_135:
        if (v52 == 83)
          goto LABEL_31;
        if (v52 == 59)
          goto LABEL_137;
        return;
      default:
        return;
    }
  }
}

void WebCore::HTMLTreeBuilder::processEndTag(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WebCore::HTMLElementStack *v12;
  _WORD *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  _WORD *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::HTMLElementStack::ElementRecord *v29;
  WTF *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  int v35;
  int v36;
  int v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _QWORD v42[2];
  _QWORD v43[4];
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  __int16 v49;
  __int16 v50;

  while (2)
  {
    v4 = *(_DWORD *)(a1 + 240);
    if (v4 == 7)
      goto LABEL_2;
    switch(v4)
    {
      case 0:
        WebCore::HTMLConstructionSite::setDefaultCompatibilityMode((WebCore::HTMLConstructionSite *)(a1 + 56));
        *(_DWORD *)(a1 + 240) = 1;
        goto LABEL_61;
      case 1:
LABEL_61:
        v18 = a2[29];
        v19 = v18 > 0x3B;
        v20 = (1 << v18) & 0x8800000000C0000;
        if (v19 || v20 == 0)
          return;
        WebCore::HTMLTreeBuilder::defaultForBeforeHTML((WebCore::HTMLTreeBuilder *)a1);
LABEL_66:
        v22 = a2[29];
        v19 = v22 > 0x3B;
        v23 = (1 << v22) & 0x8800000000C0000;
        if (v19 || v23 == 0)
          return;
        WebCore::HTMLTreeBuilder::defaultForBeforeHead((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
LABEL_71:
        v16 = a2[29];
        if (v16 == 55)
        {
          *(_QWORD *)(a1 + 128) = 0;
          v25 = *(_WORD **)(*(_QWORD *)(a1 + 112) + 8);
          if ((v25[14] & 8) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194264D40);
          }
          (*(void (**)(_WORD *))(*(_QWORD *)v25 + 760))(v25);
          v27 = *(_QWORD *)(a1 + 112);
          v28 = *(_QWORD *)(v27 + 32);
          *(_QWORD *)(v27 + 32) = 0;
          v29 = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v28;
          if (v29)
          {
            WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v29, v26);
            WTF::fastFree(v30, v31);
          }
          --*(_DWORD *)(a1 + 144);
          v10 = 5;
          goto LABEL_76;
        }
        if ((v16 - 18) >= 2 && v16 != 59)
        {
LABEL_38:
          if (v16 != 119)
            return;
          goto LABEL_39;
        }
        WebCore::HTMLTreeBuilder::defaultForInHead((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
LABEL_80:
        v32 = a2[29];
        v19 = v32 > 0x3B;
        v33 = (1 << v32) & 0x8000000000C0000;
        if (!v19 && v33 != 0)
        {
          WebCore::HTMLTreeBuilder::defaultForAfterHead((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
          goto LABEL_2;
        }
        return;
      case 2:
        goto LABEL_66;
      case 3:
        goto LABEL_71;
      case 4:
        v35 = a2[29];
        if (v35 == 19)
        {
          WebCore::HTMLTreeBuilder::defaultForInHeadNoscript((WebCore::HTMLTreeBuilder *)a1);
          WebCore::HTMLTreeBuilder::processToken(a1, a2);
          return;
        }
        if (v35 != 84)
          return;
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
        v10 = 3;
        goto LABEL_76;
      case 5:
        goto LABEL_80;
      case 6:
        v16 = a2[29];
        goto LABEL_38;
      case 8:
        if (a2[29] == 255)
        {
          if ((*(_BYTE *)(a1 + 224) & 1) != 0)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
            v6 = *(_WORD *)(v5 + 28);
            if ((v6 & 8) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194264AA8);
            }
            if ((v6 & 0x10) == 0
              || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::scriptTag + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x1942648E4);
            }
            v7 = v5 + 112;
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 120) + 8) + 24) += 2;
            v8 = *(_QWORD *)(a1 + 296);
            *(_QWORD *)(a1 + 296) = v7;
            if (v8)
            {
              v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
              if (*(_DWORD *)(v9 + 24) == 2)
              {
                if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v9, a2);
              }
              else
              {
                *(_DWORD *)(v9 + 24) -= 2;
              }
            }
          }
          WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
          *(_DWORD *)(a1 + 240) = *(_DWORD *)(a1 + 244);
          *(_DWORD *)(*(_QWORD *)a1 + 248) = 0;
        }
        else
        {
          WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
          v10 = *(_DWORD *)(a1 + 244);
LABEL_76:
          *(_DWORD *)(a1 + 240) = v10;
        }
        return;
      case 9:
        WebCore::HTMLTreeBuilder::processEndTagForInTable(a1, a2);
        return;
      case 10:
        WebCore::HTMLTreeBuilder::defaultForInTableText((WebCore::HTMLTreeBuilder *)a1, (WTF::StringImpl *)a2);
        continue;
      case 11:
        v17 = a2[29];
        if (v17 == 22)
        {
          WebCore::HTMLTreeBuilder::processCaptionEndTagForInCaption((WebCore::HTMLTreeBuilder *)a1);
          return;
        }
        if (v17 - 116 > 9)
          goto LABEL_47;
        if (((1 << (v17 - 116)) & 0x2E6) != 0)
          return;
        if (v17 == 116)
        {
          if (!WebCore::HTMLTreeBuilder::processCaptionEndTagForInCaption((WebCore::HTMLTreeBuilder *)a1))
            return;
          continue;
        }
LABEL_47:
        if (v17 > 0x3B || ((1 << v17) & 0x80000000C040000) == 0)
LABEL_2:
          WebCore::HTMLTreeBuilder::processEndTagForInBody((WebCore::HTMLElementStack *)a1, a2);
        return;
      case 12:
        v36 = a2[29];
        switch(v36)
        {
          case 26:
            return;
          case 119:
            goto LABEL_39;
          case 27:
            WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup((WebCore::HTMLTreeBuilder *)a1);
            return;
        }
        if ((WebCore::HTMLTreeBuilder::processColgroupEndTagForInColumnGroup((WebCore::HTMLTreeBuilder *)a1) & 1) == 0)
          return;
        continue;
      case 13:
        WebCore::HTMLTreeBuilder::processEndTagForInTableBody((WebCore::HTMLElementStack *)a1, a2);
        return;
      case 14:
        WebCore::HTMLTreeBuilder::processEndTagForInRow((unsigned __int16 **)a1, a2);
        return;
      case 15:
        WebCore::HTMLTreeBuilder::processEndTagForInCell((WebCore::HTMLElementStack *)a1, a2);
        return;
      case 16:
        LODWORD(v11) = a2[29];
        goto LABEL_25;
      case 17:
        v11 = a2[29];
        if ((v11 - 116) <= 9 && ((1 << (v11 - 116)) & 0x2E7) != 0 || (_DWORD)v11 == 22)
        {
          v39 = WebCore::elementNameForTag(2, v11);
          if (WebCore::HTMLElementStack::inTableScope((unsigned __int16 **)(a1 + 112), v39))
          {
            memset(v43, 0, sizeof(v43));
            v42[0] = 0;
            v42[1] = 0;
            v44 = 0;
            v46 = 0;
            v45 = 0;
            v47 = 0;
            v48 = 3;
            v49 = 106;
            v50 = 0;
            WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v42, v40);
            WebCore::HTMLTreeBuilder::processEndTag(a1, v43);
            WebCore::HTMLTreeBuilder::processEndTag(a1, a2);
            WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v43, v41);
          }
        }
        else
        {
LABEL_25:
          switch((_DWORD)v11)
          {
            case 'X':
              v13 = *(_WORD **)(a1 + 112);
              v12 = (WebCore::HTMLElementStack *)(a1 + 112);
              if (*v13 == 88)
                WebCore::HTMLElementStack::pop(v12);
              break;
            case 'j':
              v14 = *(unsigned __int16 **)(a1 + 112);
              if (!v14)
                return;
              do
              {
                v15 = *v14;
                if (v15 == 106)
                {
                  WebCore::HTMLElementStack::popUntilPopped((_DWORD *)(a1 + 112), 106);
                  WebCore::HTMLTreeBuilder::resetInsertionModeAppropriately(a1);
                  return;
                }
                if ((v15 - 87) > 1)
                  break;
                v14 = (unsigned __int16 *)*((_QWORD *)v14 + 4);
              }
              while (v14);
              break;
            case 'w':
LABEL_39:
              WebCore::HTMLTreeBuilder::processTemplateEndTag(a1);
              break;
            case 'W':
              if (**(_WORD **)(a1 + 112) == 88
                && WebCore::HTMLElementStack::oneBelowTop((WebCore::HTMLElementStack *)(a1 + 112))
                && *(_WORD *)WebCore::HTMLElementStack::oneBelowTop((WebCore::HTMLElementStack *)(a1 + 112)) == 87)
              {
                WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 88);
              }
              if (**(_WORD **)(a1 + 112) == 87)
                WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
              break;
          }
        }
        return;
      case 18:
        if (a2[29] != 59)
          goto LABEL_59;
        if (*(_QWORD *)(a1 + 16))
          return;
        v10 = 21;
        goto LABEL_76;
      case 19:
        if (a2[29] != 48)
          return;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) == *(_QWORD *)(a1 + 120))
          return;
        if ((WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)) & 1) != 0)
          return;
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
        if (*(_QWORD *)(a1 + 16) || **(_WORD **)(a1 + 112) == 48)
          return;
        v10 = 20;
        goto LABEL_76;
      case 20:
        if (a2[29] != 59)
          return;
        v10 = 22;
        goto LABEL_76;
      case 21:
LABEL_59:
        *(_DWORD *)(a1 + 240) = 7;
        continue;
      default:
        return;
    }
  }
}

void WebCore::HTMLTreeBuilder::processStartTagForInBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WebCore::AtomHTMLToken *v5;
  WebCore::AtomHTMLToken *v6;
  uint64_t *v7;
  unsigned __int16 **v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WebCore::HTMLConstructionSite *v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::HTMLElementStack::ElementRecord **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WebCore::HTMLElementStack::ElementRecord *v27;
  WebCore::HTMLElementStack::ElementRecord *v28;
  WTF *v29;
  void *v30;
  void *v31;
  WebCore::HTMLConstructionSite *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  unsigned __int16 **v39;
  int v40;
  int v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v50;
  unsigned __int16 *v51;
  int v52;
  int v53;
  uint64_t v54;
  WebCore::HTMLConstructionSite *v55;
  int v56;
  WTF::StringImpl **v57;
  WebCore::HTMLConstructionSite *v58;
  uint64_t v59;
  WebCore::ContainerNode *v60;
  WTF::StringImpl *v61;
  WebCore::Element *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::String *v65;
  __n128 v66;
  uint64_t v67;
  WTF::String *v68;
  __n128 v69;
  WebCore::AtomHTMLToken *v70;
  WebCore::AtomHTMLToken *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[24];
  char v85;
  __int16 v86;
  __int16 v87;

  switch(*(_WORD *)(a2 + 58))
  {
    case 3:
    case 6:
    case 7:
    case 0x11:
    case 0x17:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x38:
    case 0x39:
    case 0x48:
    case 0x4C:
    case 0x50:
    case 0x56:
    case 0x5A:
    case 0x68:
    case 0x69:
    case 0x72:
    case 0x81:
      if (WebCore::HTMLElementStack::inButtonScope((unsigned __int16 **)(a1 + 112), 90))
      {
        v82 = 0uLL;
        v83 = 0uLL;
        v80 = 0;
        v81 = 0;
        memset(v84, 0, sizeof(v84));
        v85 = 3;
        v86 = 90;
        v87 = 0;
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v80, v23);
        WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v82);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v82, v73);
      }
      v24 = a1 + 56;
      goto LABEL_28;
    case 4:
    case 0x29:
    case 0x4B:
    case 0x55:
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      v56 = *(unsigned __int16 *)(a2 + 58);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      v55 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      v57 = (WTF::StringImpl **)a2;
      if (v56 == 41)
        goto LABEL_134;
      WebCore::HTMLConstructionSite::insertHTMLElement((uint64_t)v55, a2);
      WebCore::HTMLFormattingElementList::appendMarker(a1 + 152);
      goto LABEL_38;
    case 5:
    case 0x13:
    case 0x3E:
    case 0x42:
    case 0x84:
      goto LABEL_116;
    case 0xA:
    case 0x10:
    case 0x19:
    case 0x28:
    case 0x3C:
    case 0x66:
    case 0x6C:
    case 0x6F:
    case 0x70:
    case 0x7F:
    case 0x80:
    case 0xF7:
      v44 = a1 + 56;
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      v45 = v44;
      goto LABEL_122;
    case 0xB:
    case 0xC:
    case 0xF:
    case 0x46:
    case 0x4D:
    case 0x53:
    case 0xFF:
    case 0x100:
    case 0x101:
      WebCore::HTMLTreeBuilder::processStartTagForInHead(a1, a2);
      return;
    case 0x12:
      v63 = a1 + 112;
      if (WebCore::HTMLElementStack::secondElementIsHTMLBodyElement((WebCore::HTMLElementStack *)(a1 + 112))
        && *(_QWORD *)(*(_QWORD *)v63 + 32)
        && (WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)) & 1) == 0)
      {
        *(_BYTE *)(a1 + 321) = 0;
        WebCore::HTMLConstructionSite::insertHTMLBodyStartTagInBody(a1 + 56, a2, v66, v64, v65);
      }
      return;
    case 0x14:
      if (!WebCore::HTMLElementStack::inScope((unsigned __int16 **)(a1 + 112), 20))
      {
        WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
        WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
        goto LABEL_38;
      }
      WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 20);
      WebCore::HTMLTreeBuilder::processStartTag(a1, a2);
      return;
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x2F:
    case 0x37:
    case 0x75:
    case 0x76:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7D:
      return;
    case 0x1F:
    case 0x27:
      *(_BYTE *)(a1 + 321) = 0;
      v10 = a1 + 56;
      v8 = (unsigned __int16 **)(a1 + 112);
      v39 = (unsigned __int16 **)(a1 + 112);
      while (2)
      {
        v9 = *v39;
        v40 = **v39;
        if (v40 == 39 || v40 == 31)
          goto LABEL_93;
        if (!WebCore::isSpecialNode(v9) || (v42 = *v9, v42 == 3) || v42 == 37 || v42 == 90)
        {
          v39 = (unsigned __int16 **)(v9 + 16);
          continue;
        }
        goto LABEL_10;
      }
    case 0x2E:
      if (!*(_QWORD *)(a1 + 104)
        || WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)))
      {
        if (WebCore::HTMLElementStack::inButtonScope((unsigned __int16 **)(a1 + 112), 90))
        {
          v82 = 0uLL;
          v83 = 0uLL;
          v80 = 0;
          v81 = 0;
          memset(v84, 0, sizeof(v84));
          v85 = 3;
          v86 = 90;
          v87 = 0;
          WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v80, v43);
          WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v82);
          WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v82, v78);
        }
        WebCore::HTMLConstructionSite::insertHTMLFormElement(a1 + 56, a2);
      }
      return;
    case 0x30:
      v59 = a1 + 112;
      if (!WebCore::HTMLElementStack::secondElementIsHTMLBodyElement((WebCore::HTMLElementStack *)(a1 + 112))
        || !*(_QWORD *)(*(_QWORD *)v59 + 32)
        || !*(_BYTE *)(a1 + 321))
      {
        return;
      }
      v60 = (WebCore::ContainerNode *)WebCore::IDBClient::IDBConnectionToServer::proxy((WebCore::IDBClient::IDBConnectionToServer *)(a1 + 112));
      WebCore::Node::remove(v60, v79);
      WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v79, v61);
      v62 = (WebCore::Element *)WebCore::IDBClient::IDBConnectionToServer::proxy((WebCore::IDBClient::IDBConnectionToServer *)(a1 + 112));
      WebCore::HTMLElementStack::popUntil((WebCore::HTMLElementStack *)(a1 + 112), v62);
      WebCore::HTMLElementStack::popHTMLBodyElement((WebCore::HTMLElementStack *)(a1 + 112));
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      v38 = 19;
      goto LABEL_57;
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      if (WebCore::HTMLElementStack::inButtonScope((unsigned __int16 **)(a1 + 112), 90))
      {
        v82 = 0uLL;
        v83 = 0uLL;
        v80 = 0;
        v81 = 0;
        memset(v84, 0, sizeof(v84));
        v85 = 3;
        v86 = 90;
        v87 = 0;
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v80, v37);
        WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v82);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v82, v77);
      }
      if (**(unsigned __int16 **)(a1 + 112) - 49 <= 5)
        WebCore::HTMLElementStack::pop((WebCore::HTMLElementStack *)(a1 + 112));
      v24 = a1 + 56;
      goto LABEL_28;
    case 0x3A:
      WebCore::HTMLTreeBuilder::processFakePEndTagIfPInButtonScope((unsigned __int16 **)a1);
      v55 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      goto LABEL_133;
    case 0x3B:
      if ((WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)) & 1) == 0)
        WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagInBody(a1 + 56, a2, v69, v67, v68);
      return;
    case 0x3D:
      *(_BYTE *)(a1 + 321) = 0;
      goto LABEL_81;
    case 0x3F:
      v32 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      v33 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v33)
        goto LABEL_132;
      v34 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 8);
      v35 = 16 * v33;
      while (1)
      {
        v36 = *(v34 - 1);
        if (v36 == WebCore::HTMLNames::typeAttr
          || *(_QWORD *)(v36 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
          && *(_QWORD *)(v36 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
        {
          break;
        }
        v34 += 2;
        v35 -= 16;
        if (!v35)
          goto LABEL_132;
      }
      v74 = *v34;
      if (!v74 || *(_DWORD *)(v74 + 4) != 6)
        goto LABEL_132;
      v75 = *(_QWORD *)(v74 + 8);
      if ((*(_BYTE *)(v74 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v75 & 0xDF) != 0x48
          || (*(_BYTE *)(v75 + 1) & 0xDF) != 0x49
          || (*(_BYTE *)(v75 + 2) & 0xDF) != 0x44
          || (*(_BYTE *)(v75 + 3) & 0xDF) != 0x44
          || (*(_BYTE *)(v75 + 4) & 0xDF) != 0x45)
        {
          goto LABEL_132;
        }
        v76 = *(unsigned __int8 *)(v75 + 5);
      }
      else
      {
        if ((*(_WORD *)v75 & 0xFFDF) != 0x48
          || (*(_WORD *)(v75 + 2) & 0xFFDF) != 0x49
          || (*(_WORD *)(v75 + 4) & 0xFFDF) != 0x44
          || (*(_WORD *)(v75 + 6) & 0xFFDF) != 0x44
          || (*(_WORD *)(v75 + 8) & 0xFFDF) != 0x45)
        {
          goto LABEL_132;
        }
        v76 = *(unsigned __int16 *)(v75 + 10);
      }
      if ((v76 & 0xFFFFFFDF) == 0x4E)
      {
        v58 = (WebCore::HTMLConstructionSite *)(a1 + 56);
LABEL_145:
        WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement(v58, (WTF::StringImpl **)a2);
        return;
      }
LABEL_132:
      v55 = v32;
LABEL_133:
      v57 = (WTF::StringImpl **)a2;
LABEL_134:
      WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement(v55, v57);
LABEL_38:
      *(_BYTE *)(a1 + 321) = 0;
      return;
    case 0x45:
      v8 = (unsigned __int16 **)(a1 + 112);
      v9 = *(unsigned __int16 **)(a1 + 112);
      *(_BYTE *)(a1 + 321) = 0;
      v10 = a1 + 56;
      while (2)
      {
        if (*v9 == 69)
        {
LABEL_93:
          WebCore::HTMLTreeBuilder::processFakeEndTag((WebCore::HTMLTreeBuilder *)a1, (const WebCore::HTMLStackItem *)v9);
        }
        else if (!WebCore::isSpecialNode(v9) || (v11 = *v9, v11 == 3) || v11 == 90 || v11 == 37)
        {
          v9 = (unsigned __int16 *)*((_QWORD *)v9 + 4);
          continue;
        }
        break;
      }
LABEL_10:
      if (WebCore::HTMLElementStack::inButtonScope(v8, 90))
      {
        v82 = 0uLL;
        v83 = 0uLL;
        v80 = 0;
        v81 = 0;
        memset(v84, 0, sizeof(v84));
        v85 = 3;
        v86 = 90;
        v87 = 0;
        WTF::Vector<WebCore::Attribute,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)&v80, v12);
        WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v82);
        WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v82, v72);
      }
      WebCore::HTMLConstructionSite::insertHTMLElement(v10, a2);
      return;
    case 0x47:
    case 0x5E:
      WebCore::HTMLTreeBuilder::processFakePEndTagIfPInButtonScope((unsigned __int16 **)a1);
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      *(_WORD *)(a1 + 320) = 1;
      return;
    case 0x51:
      v13 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      if (!WebCore::HTMLElementStack::inScope((unsigned __int16 **)(a1 + 112), 81))
        goto LABEL_121;
      WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 81);
      goto LABEL_120;
    case 0x52:
      goto LABEL_81;
    case 0x54:
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_92;
LABEL_81:
      v50 = a1 + 56;
      goto LABEL_82;
    case 0x57:
    case 0x58:
      v54 = a1 + 56;
      if (**(_WORD **)(a1 + 112) == 88)
        WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 88);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      goto LABEL_87;
    case 0x5B:
    case 0x6D:
    case 0x7E:
      v58 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      goto LABEL_145;
    case 0x5D:
      WebCore::HTMLTreeBuilder::processFakePEndTagIfPInButtonScope((unsigned __int16 **)a1);
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      *(_DWORD *)(*(_QWORD *)a1 + 248) = 6;
      return;
    case 0x61:
    case 0x64:
      v54 = a1 + 56;
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)(a1 + 112), 101))
        WebCore::HTMLConstructionSite::generateImpliedEndTags(a1 + 56);
      goto LABEL_87;
    case 0x62:
    case 0x63:
      v54 = a1 + 56;
      if (WebCore::HTMLElementStack::inScope((unsigned __int16 **)(a1 + 112), 101))
        WebCore::HTMLConstructionSite::generateImpliedEndTagsWithExclusion(a1 + 56, 100);
LABEL_87:
      v24 = v54;
LABEL_28:
      WebCore::HTMLConstructionSite::insertHTMLElement(v24, a2);
      return;
    case 0x6A:
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      *(_BYTE *)(a1 + 321) = 0;
      v46 = *(_DWORD *)(a1 + 240);
      v47 = v46 > 0xF;
      v48 = (1 << v46) & 0xFA00;
      if (v47 || v48 == 0)
        v38 = 16;
      else
        v38 = 17;
      goto LABEL_57;
    case 0x74:
      if (!*(_BYTE *)(a1 + 232) && WebCore::HTMLElementStack::inButtonScope((unsigned __int16 **)(a1 + 112), 90))
        WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 90);
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      *(_BYTE *)(a1 + 321) = 0;
      v38 = 9;
LABEL_57:
      *(_DWORD *)(a1 + 240) = v38;
      return;
    case 0x77:
      *(_BYTE *)(a1 + 321) = 0;
      WebCore::HTMLTreeBuilder::processTemplateStartTag(a1, a2);
      return;
    case 0x78:
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      *(_WORD *)(a1 + 320) = 1;
      v51 = *(unsigned __int16 **)a1;
      v52 = 2;
      goto LABEL_83;
    case 0x85:
      WebCore::HTMLTreeBuilder::processFakePEndTagIfPInButtonScope((unsigned __int16 **)a1);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      *(_BYTE *)(a1 + 321) = 0;
      v50 = a1 + 56;
LABEL_82:
      WebCore::HTMLConstructionSite::insertHTMLElement(v50, a2);
      v51 = *(unsigned __int16 **)a1;
      v52 = 4;
LABEL_83:
      *((_DWORD *)v51 + 62) = v52;
      v53 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)(a1 + 240) = 8;
      *(_DWORD *)(a1 + 244) = v53;
      return;
    case 0x8A:
      v4 = a1 + 56;
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      WebCore::adjustMathMLAttributes((WebCore *)a2, v70);
      WebCore::adjustForeignAttributes(a2, v71);
      v7 = &WebCore::MathMLNames::mathmlNamespaceURI;
      goto LABEL_3;
    case 0xEB:
      v4 = a1 + 56;
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      WebCore::adjustSVGAttributes(a2, v5);
      WebCore::adjustForeignAttributes(a2, v6);
      v7 = &WebCore::SVGNames::svgNamespaceURI;
LABEL_3:
      WebCore::HTMLConstructionSite::insertForeignElement(v4, a2, v7);
      return;
    case 0xF5:
      v13 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      v14 = *(unsigned int *)(a1 + 164);
      if (!(_DWORD)v14)
        goto LABEL_120;
      v15 = 1;
      break;
    case 0xFD:
      *(_WORD *)(a2 + 58) = 62;
LABEL_116:
      v32 = (WebCore::HTMLConstructionSite *)(a1 + 56);
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      goto LABEL_132;
    default:
LABEL_92:
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
      WebCore::HTMLTreeBuilder::insertGenericHTMLElement(a1, a2);
      return;
  }
  while (1)
  {
    v16 = v14 - v15;
    if (v16 >= v14)
      goto LABEL_152;
    v17 = *(_QWORD *)(a1 + 152) + 32 * v16;
    v18 = *(_QWORD *)(v17 + 8);
    if (!v18)
      goto LABEL_120;
    if (*(_WORD *)v17 == 245)
      break;
    if (v14 < ++v15)
    {
LABEL_120:
      WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements(v13);
LABEL_121:
      v45 = (uint64_t)v13;
LABEL_122:
      WebCore::HTMLConstructionSite::insertFormattingElement(v45, a2);
      return;
    }
  }
  if ((*(_WORD *)(v18 + 28) & 8) == 0)
  {
LABEL_152:
    __break(0xC471u);
    JUMPOUT(0x1942652C0);
  }
  *(_DWORD *)(v18 + 24) += 2;
  v83 = 0u;
  memset(v84, 0, sizeof(v84));
  v82 = 0u;
  v85 = 3;
  v86 = 245;
  v87 = 0;
  WebCore::HTMLTreeBuilder::processEndTag(a1, (unsigned __int16 *)&v82);
  WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v82, v19);
  WebCore::HTMLFormattingElementList::remove((WebCore::HTMLFormattingElementList *)(a1 + 152), (WebCore::Element *)v18);
  v21 = (WebCore::HTMLElementStack::ElementRecord **)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 112);
  if (v20)
  {
    v22 = *(_QWORD *)(a1 + 112);
    while (*(_QWORD *)(v22 + 8) != v18)
    {
      v22 = *(_QWORD *)(v22 + 32);
      if (!v22)
        goto LABEL_34;
    }
    v25 = *(_QWORD *)(v20 + 8);
    if ((*(_WORD *)(v25 + 28) & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942652E0);
    }
    if (v25 == v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 760))(v18);
      v27 = (WebCore::HTMLElementStack::ElementRecord *)*((_QWORD *)*v21 + 4);
      *((_QWORD *)*v21 + 4) = 0;
      v28 = *v21;
      *v21 = v27;
      if (v28)
      {
        WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v28, v26);
        WTF::fastFree(v29, v30);
      }
      --*(_DWORD *)(a1 + 144);
    }
    else
    {
      WebCore::HTMLElementStack::removeNonTopCommon(a1 + 112, (WebCore::Element *)v18);
    }
  }
LABEL_34:
  WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLConstructionSite *)(a1 + 56));
  WebCore::HTMLConstructionSite::insertFormattingElement(a1 + 56, a2);
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v18, v31);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLConstructionSite::insertHTMLElement(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v4;
  WebCore::Node *v5;
  void *v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v16;
  void *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;

  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, 0, &v19);
  v4 = v19;
  v5 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
  *((_DWORD *)v5 + 6) += 2;
  v18 = v4;
  v19 = v5;
  *((_DWORD *)v4 + 6) += 2;
  WebCore::HTMLConstructionSite::attachLater(a1, &v19, &v18, 0);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v6);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v6);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  v7 = *((_QWORD *)v4 + 12);
  v8 = *(_WORD *)(v7 + 10);
  v9 = *(_BYTE *)(v7 + 8);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  ++*(_DWORD *)(a1 + 88);
  v13 = WTF::fastMalloc((WTF *)0x28);
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v13 = v8;
  *(_BYTE *)(v13 + 2) = v9;
  *(_QWORD *)(v13 + 8) = v4;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = v11;
  *(_QWORD *)(v13 + 32) = v14;
  result = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v13;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v12);
    return (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v16, v17);
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLTreeBuilder::processCharacterBufferForInBody(WebCore::HTMLTreeBuilder *this, WebCore::HTMLTreeBuilder::ExternalCharacterTokenBuffer *a2)
{
  WebCore::HTMLConstructionSite *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v20;
  int v21;
  WTF *v22;
  unint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  __int16 v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  int v42;
  WTF::StringImpl *v43;
  _QWORD *v44;
  WTF::StringImpl *v45;
  void *v46;
  const WebCore::Style::RuleSet *v47;
  WebCore::TreeScope *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  BOOL v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  __int128 v63;
  WTF *v64;
  int8x16_t v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  WTF *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  uint64_t v75;
  _BYTE v76[64];
  WTF *v77;
  unint64_t v78;
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  __int16 v85;
  __int16 v86;
  WTF **v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int16 v95;
  __int16 v96;
  WTF::StringImpl *v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  v4 = (WebCore::HTMLTreeBuilder *)((char *)this + 56);
  WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements((WebCore::HTMLTreeBuilder *)((char *)this + 56));
  if ((*((_QWORD *)a2 + 1) & 0xFF00000000) != 0)
  {
    v5 = WTF::String::String();
  }
  else if (*((_BYTE *)a2 + 16))
  {
    v5 = WTF::String::make8Bit();
  }
  else
  {
    v5 = WTF::String::String();
  }
  *(_QWORD *)a2 = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_BYTE *)a2 + 12) = 1;
  if (*((_QWORD *)this + 2))
    goto LABEL_5;
  v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v14 + 680) + 696) & 0x2000000000000) == 0 || !*(_BYTE *)(v14 + 3445))
    goto LABEL_5;
  v15 = *(_QWORD *)(*((_QWORD *)this + 14) + 8);
  do
  {
    if ((*(_WORD *)(v15 + 28) & 8) != 0)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 848))(v15);
      if ((v5 & 1) != 0)
        goto LABEL_5;
      if ((*(_WORD *)(v15 + 28) & 8) != 0)
      {
        if ((*(_WORD *)(v15 + 30) & 1) != 0)
          goto LABEL_5;
        v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 96) + 10);
        if (v16 > 0xF4)
        {
          v17 = v16 - 245;
          v11 = v17 > 0xB;
          v18 = (1 << v17) & 0xC01;
          if (!v11 && v18 != 0)
            goto LABEL_5;
        }
        else if (v16 == 25 || v16 == 94 || v16 == 127)
        {
          goto LABEL_5;
        }
      }
    }
    v15 = *(_QWORD *)(v15 + 32);
  }
  while (v15);
  {
    WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner = 0;
  }
  v20 = atomic_load(&WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::onceFlag);
  if (v20 != -1)
  {
    v74 = (WTF *)v80;
    v87 = &v74;
    std::__call_once(&WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::onceFlag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::$_0 &&>>);
  }
  if (!WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner)
  {
LABEL_5:
    WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v72);
    goto LABEL_6;
  }
  *(_QWORD *)v79 = 0;
  if (!v72)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    v5 = 0;
    v24 = (WTF *)v76;
    v74 = (WTF *)v76;
    LODWORD(v75) = 32;
    v77 = 0;
    v78 = 0;
    goto LABEL_43;
  }
  v21 = *((_DWORD *)v72 + 4);
  v22 = (WTF *)*((_QWORD *)v72 + 1);
  v23 = *((unsigned int *)v72 + 1);
  v24 = (WTF *)v76;
  v74 = (WTF *)v76;
  v75 = 32;
  v77 = 0;
  v78 = 0;
  if ((v21 & 4) != 0)
  {
    if (v23 > 0x20)
    {
LABEL_136:
      if (v23 <= 0x29)
        v62 = 41;
      else
        v62 = v23;
      v5 = WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v74, v62);
      HIDWORD(v75) = v23;
      v25 = v74;
      if (v23 < 0x40)
      {
        v26 = v74;
      }
      else
      {
        v26 = (WTF *)((char *)v74 + 2 * (v23 & 0xFFFFFFC0));
        v63 = 0uLL;
        v64 = v74;
        do
        {
          v98.val[0] = *(int8x16_t *)v22;
          v65 = *((int8x16_t *)v22 + 1);
          v99.val[0] = (int8x16_t)*((_OWORD *)v22 + 2);
          v66 = *((_OWORD *)v22 + 3);
          v22 = (WTF *)((char *)v22 + 64);
          v67 = v66;
          v99.val[1] = 0uLL;
          v100.val[0] = v65;
          v98.val[1] = 0uLL;
          v68 = (char *)v64;
          vst2q_s8(v68, v98);
          v68 += 32;
          v100.val[1] = 0uLL;
          vst2q_s8(v68, v100);
          v69 = (char *)v64 + 64;
          vst2q_s8(v69, v99);
          v70 = (char *)v64 + 96;
          vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
          v64 = (WTF *)((char *)v64 + 128);
        }
        while (v64 != v26);
      }
      goto LABEL_44;
    }
    v5 = v23;
LABEL_43:
    HIDWORD(v75) = v23;
    v23 = v5;
    v25 = (WTF *)v76;
    v26 = (WTF *)v76;
LABEL_44:
    v27 = (WTF *)((char *)v25 + 2 * v23);
    while (v26 != v27)
    {
      v28 = *(unsigned __int8 *)v22;
      v22 = (WTF *)((char *)v22 + 1);
      *(_WORD *)v26 = v28;
      v26 = (WTF *)((char *)v26 + 2);
    }
    v22 = v74;
    v23 = HIDWORD(v75);
  }
  v77 = v22;
  v78 = v23;
  if (v23)
  {
    v71 = v24;
    v24 = (WTF *)"tel:";
    while (1)
    {
      v33 = WebCore::TelephoneNumberDetector::phoneNumbersScanner((WebCore::TelephoneNumberDetector *)v5);
      if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))softLinkDDDFAScannerFirstResultInUnicharArray[0])(v33, (uint64_t)v22, v23, (uint64_t)&v79[1], (uint64_t)v79))
      {
LABEL_117:
        v55 = v77;
        v24 = v71;
        goto LABEL_119;
      }
      v34 = (unint64_t)(v22 - v77) >> 1;
      --v79[0];
      v35 = v72;
      if (v72)
      {
        if ((_DWORD)v34 || *((_DWORD *)v72 + 1) > v79[1])
        {
          WTF::StringImpl::substring(v72);
          v80[0] = (WTF::StringImpl *)v87;
        }
        else
        {
          *(_DWORD *)v72 += 2;
          v80[0] = v35;
        }
      }
      else
      {
        v80[0] = 0;
      }
      WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)v80);
      v37 = v80[0];
      v80[0] = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v36);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = v72;
      if (v72)
      {
        if (v79[1] + (_DWORD)v34 || *((_DWORD *)v72 + 1) > v79[0] - v79[1] + 1)
        {
          WTF::StringImpl::substring(v72);
          v38 = (WTF::StringImpl *)v87;
          v73 = (WTF::StringImpl *)v87;
          if (!v87)
            goto LABEL_81;
        }
        else
        {
          *(_DWORD *)v72 += 2;
          v73 = v38;
        }
        *(_DWORD *)v38 += 2;
      }
      else
      {
        v73 = 0;
      }
LABEL_81:
      v97 = v38;
      WTF::makeAtomString<WTF::ASCIILiteral,WTF::String>((WTF::StringImpl *)"tel:", 5, &v97, (WTF::AtomString *)&v87);
      v40 = (WTF::StringImpl **)WebCore::HTMLNames::hrefAttr;
      if (WebCore::HTMLNames::hrefAttr)
        ++*(_DWORD *)WebCore::HTMLNames::hrefAttr;
      v41 = (WTF::StringImpl *)v87;
      if (v87)
      {
        v42 = *(_DWORD *)v87;
        *(_DWORD *)v87 += 2;
        v87 = 0;
        if (v42)
          *(_DWORD *)v41 = v42;
        else
          WTF::StringImpl::destroy(v41, v39);
      }
      else
      {
        v87 = 0;
      }
      v43 = v97;
      v97 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v39);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      if (v40)
        ++*(_DWORD *)v40;
      *v44 = v40;
      if (v41)
      {
        *(_DWORD *)v41 += 2;
        v44[1] = v41;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = v44;
        v91 = 0x100000001;
        v92 = 0;
        v93 = 0;
        v94 = 2;
        v95 = 245;
        v96 = 0;
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v45);
        else
          *(_DWORD *)v41 -= 2;
      }
      else
      {
        v44[1] = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = v44;
        v91 = 0x100000001;
        v92 = 0;
        v93 = 0;
        v94 = 2;
        v95 = 245;
        v96 = 0;
      }
      if (v40)
      {
        if (*(_DWORD *)v40 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          WTF::fastFree(v53, v54);
        }
        else
        {
          --*(_DWORD *)v40;
        }
      }
      v83 = 0;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)v80 = 0u;
      v84 = 3;
      v85 = 245;
      v86 = 0;
      WebCore::HTMLTreeBuilder::processStartTag((uint64_t)this, (WTF::StringImpl *)&v87);
      WebCore::HTMLConstructionSite::executeQueuedTasks(v4, v46, v47, v48);
      WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v73);
      WebCore::HTMLTreeBuilder::processEndTag((uint64_t)this, (unsigned __int16 *)v80);
      WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)v80, v49);
      WebCore::AtomHTMLToken::~AtomHTMLToken((WebCore::AtomHTMLToken *)&v87, v50);
      v5 = (uint64_t)v73;
      v73 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          v5 = WTF::StringImpl::destroy((WTF::StringImpl *)v5, v6);
        else
          *(_DWORD *)v5 -= 2;
      }
      v51 = (int)v79[0] + 1;
      v52 = v23 >= v51;
      v23 -= v51;
      if (!v52)
      {
        __break(1u);
        goto LABEL_136;
      }
      v22 = (WTF *)((char *)v22 + 2 * v51);
      if (!v23)
        goto LABEL_117;
    }
  }
  v55 = v22;
LABEL_119:
  if (v22 == v55)
  {
    WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v72);
  }
  else
  {
    v56 = v72;
    if (v72)
    {
      v57 = v22 - v55;
      v58 = (v22 - v55) >> 1;
      v59 = *((unsigned int *)v72 + 1);
      if (v58 < v59)
      {
        if ((v57 >> 1) || (v59 & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(v72);
        }
        else
        {
          *(_DWORD *)v72 += 2;
          v87 = (WTF **)v56;
        }
        WebCore::HTMLConstructionSite::insertTextNode(v4, (const WTF::String *)&v87);
        v60 = (WTF::StringImpl *)v87;
        v87 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 2)
            WTF::StringImpl::destroy(v60, v6);
          else
            *(_DWORD *)v60 -= 2;
        }
      }
    }
  }
  v61 = v74;
  if (v24 != v74 && v74)
  {
    v74 = 0;
    LODWORD(v75) = 0;
    WTF::fastFree(v61, v6);
  }
LABEL_6:
  result = v72;
  if (!*((_BYTE *)this + 321))
    goto LABEL_58;
  if (!v72)
    return result;
  v8 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
  v9 = *((unsigned int *)v72 + 1);
  if ((*((_BYTE *)v72 + 16) & 4) != 0)
  {
    if ((_DWORD)v9)
    {
      while (1)
      {
        v10 = *v8;
        v11 = v10 > 0x20;
        v12 = (1 << v10) & 0x100003600;
        if (v11 || v12 == 0)
          break;
        ++v8;
        if (!--v9)
          goto LABEL_58;
      }
LABEL_132:
      *((_BYTE *)this + 321) = 0;
LABEL_58:
      v72 = 0;
      if (!result)
        return result;
      goto LABEL_59;
    }
  }
  else if ((_DWORD)v9)
  {
    v29 = 2 * v9;
    while (1)
    {
      v30 = *(unsigned __int16 *)v8;
      v31 = v30 > 0x20 || ((1 << v30) & 0x100003600) == 0;
      if (v31 && v30 != 65533)
        goto LABEL_132;
      v8 += 2;
      v29 -= 2;
      if (!v29)
        goto LABEL_58;
    }
  }
  v72 = 0;
LABEL_59:
  if (*(_DWORD *)result == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
  *(_DWORD *)result -= 2;
  return result;
}

WebCore::HTMLConstructionSite *WebCore::HTMLConstructionSite::reconstructTheActiveFormattingElements(WebCore::HTMLConstructionSite *this)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const WebCore::HTMLStackItem *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::HTMLConstructionSite *v15;
  WebCore::Node *v16[4];
  WebCore::Node *v17;
  __int16 v18;
  WebCore::Node *v19;

  v1 = *((_DWORD *)this + 27);
  if (v1)
  {
    v2 = (uint64_t *)((char *)this + 56);
    v3 = *((unsigned int *)this + 27);
    while (1)
    {
      v4 = v3 - 1;
      v5 = *(_QWORD *)(*((_QWORD *)this + 12) + 32 * (v3 - 1) + 8);
      if (!v5)
        break;
      if ((*(_WORD *)(v5 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19426620CLL);
      }
      v6 = *v2;
      if (*v2)
      {
        while (*(_QWORD *)(v6 + 8) != v5)
        {
          v6 = *(_QWORD *)(v6 + 32);
          if (!v6)
            goto LABEL_8;
        }
        break;
      }
LABEL_8:
      --v3;
      if (!v4)
        goto LABEL_13;
    }
    if (v1 <= v3)
      return this;
LABEL_13:
    v7 = v3;
    v8 = 32 * v3;
    v14 = (uint64_t)this + 56;
    v15 = this;
    do
    {
      v9 = (const WebCore::HTMLStackItem *)(*((_QWORD *)this + 12) + v8);
      WebCore::HTMLConstructionSite::createElementFromSavedToken(v15, v9, (uint64_t)&v18);
      v10 = *(WebCore::Node **)(*((_QWORD *)v15 + 7) + 8);
      *((_DWORD *)v10 + 6) += 2;
      v16[0] = v10;
      v11 = v19;
      *((_DWORD *)v19 + 6) += 2;
      v17 = v11;
      WebCore::HTMLConstructionSite::attachLater((uint64_t)v15, v16, &v17, 0);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v17);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v16);
      WebCore::HTMLStackItem::HTMLStackItem((uint64_t)v16, &v18);
      WebCore::HTMLElementStack::push(v14, (__int16 *)v16);
      WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)v16, v12);
      WebCore::HTMLStackItem::operator=((uint64_t)v9, &v18);
      WebCore::HTMLStackItem::~HTMLStackItem((WebCore::HTMLStackItem *)&v18, v13);
      this = v15;
      ++v7;
      v8 += 32;
    }
    while (v7 < *((unsigned int *)v15 + 27));
  }
  return this;
}

BOOL WebCore::HTMLElementStack::inButtonScope(unsigned __int16 **a1, int a2)
{
  unsigned __int16 *v2;
  int v3;
  _BOOL8 result;
  uint64_t v5;

  v2 = *a1;
  if (!*a1)
    return 0;
  while (1)
  {
    v3 = *v2;
    result = v3 == a2;
    if (v3 == a2)
      return result;
    v5 = *((_QWORD *)v2 + 1);
    if (*v2 <= 0xD7u)
    {
      switch(*v2)
      {
        case 0x4Bu:
        case 0x55u:
        case 0x74u:
        case 0x76u:
        case 0x77u:
        case 0x7Au:
        case 0x90u:
        case 0x94u:
        case 0x95u:
        case 0x9Cu:
        case 0xABu:
        case 0xBCu:
          return result;
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x50u:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
        case 0x5Bu:
        case 0x5Cu:
        case 0x5Du:
        case 0x5Eu:
        case 0x5Fu:
        case 0x60u:
        case 0x61u:
        case 0x62u:
        case 0x63u:
        case 0x64u:
        case 0x65u:
        case 0x66u:
        case 0x67u:
        case 0x68u:
        case 0x69u:
        case 0x6Au:
        case 0x6Bu:
        case 0x6Cu:
        case 0x6Du:
        case 0x6Eu:
        case 0x6Fu:
        case 0x70u:
        case 0x71u:
        case 0x72u:
        case 0x73u:
        case 0x75u:
        case 0x78u:
        case 0x79u:
        case 0x7Bu:
        case 0x7Cu:
        case 0x7Du:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0x8Bu:
        case 0x8Cu:
        case 0x8Du:
        case 0x8Eu:
        case 0x8Fu:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Bu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA1u:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
        case 0xA5u:
        case 0xA6u:
        case 0xA7u:
        case 0xA8u:
        case 0xA9u:
        case 0xAAu:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xB4u:
        case 0xB5u:
        case 0xB6u:
        case 0xB7u:
        case 0xB8u:
        case 0xB9u:
        case 0xBAu:
        case 0xBBu:
          goto LABEL_10;
        default:
          if (v3 != 4 && v3 != 22)
            goto LABEL_10;
          break;
      }
      return result;
    }
    if ((v3 - 216) <= 0x36 && ((1 << (v3 + 40)) & 0x40040000000001) != 0)
      return result;
LABEL_10:
    if (v5)
    {
      if ((*(_WORD *)(v5 + 28) & 0xF000) == 0xB000 || v3 == 20)
        return result;
    }
    else if (v3 == 20)
    {
      return result;
    }
    if (v3 != 59)
    {
      v2 = (unsigned __int16 *)*((_QWORD *)v2 + 4);
      if (v2)
        continue;
    }
    return result;
  }
}

uint64_t WebCore::HTMLConstructionSite::generateImpliedEndTags(uint64_t this)
{
  uint64_t i;
  unsigned __int16 *v2;
  int v3;
  BOOL v4;
  _WORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;

  for (i = this; ; --*(_DWORD *)(i + 88))
  {
    v2 = *(unsigned __int16 **)(i + 56);
    v3 = *v2;
    v4 = (v3 - 39) > 0x3D || ((1 << (v3 - 39)) & 0x3C0B000040000001) == 0;
    if (v4 && v3 != 31)
      break;
    v6 = (_WORD *)*((_QWORD *)v2 + 1);
    if ((v6[14] & 8) == 0)
    {
      this = 96;
      __break(0xC471u);
      return this;
    }
    (*(void (**)(_WORD *))(*(_QWORD *)v6 + 760))(v6);
    v8 = *(_QWORD *)(i + 56);
    v9 = *(_QWORD *)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    this = *(_QWORD *)(i + 56);
    *(_QWORD *)(i + 56) = v9;
    if (this)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)this, v7);
      this = WTF::fastFree(v10, v11);
    }
  }
  return this;
}

BOOL WebCore::HTMLTreeBuilder::processStartTagForInHead(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  WTF::String *v9;
  __n128 v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;

  result = 0;
  v4 = *(unsigned __int16 *)(a2 + 58);
  if (v4 <= 0xFE)
  {
    if (*(unsigned __int16 *)(a2 + 58) <= 0x4Cu)
    {
      if (*(unsigned __int16 *)(a2 + 58) <= 0x3Au)
      {
        if (v4 - 11 >= 2 && v4 != 15)
          return v4 == 55;
      }
      else if (v4 != 70)
      {
        if (v4 == 59)
        {
          if ((WebCore::HTMLElementStack::hasTemplateInHTMLScope((unsigned __int16 **)(a1 + 112)) & 1) == 0)
            WebCore::HTMLConstructionSite::insertHTMLHtmlStartTagInBody(a1 + 56, a2, v10, v8, v9);
          return 1;
        }
        return result;
      }
    }
    else
    {
      if (*(unsigned __int16 *)(a2 + 58) > 0x52u)
      {
        if (v4 == 84)
        {
          v14 = *(unsigned __int8 *)(a1 + 8);
          WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
          if (!v14)
          {
            *(_DWORD *)(a1 + 240) = 4;
            return 1;
          }
          goto LABEL_22;
        }
        if (v4 == 119)
        {
          *(_BYTE *)(a1 + 321) = 0;
          WebCore::HTMLTreeBuilder::processTemplateStartTag(a1, a2);
          return 1;
        }
        if (v4 != 83)
          return result;
LABEL_21:
        WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
LABEL_22:
        v11 = *(_DWORD **)a1;
        v12 = 4;
        goto LABEL_19;
      }
      if (v4 != 77)
        return result;
    }
    WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement((WebCore::HTMLConstructionSite *)(a1 + 56), (WTF::StringImpl **)a2);
    return 1;
  }
  if (v4 != 255)
  {
    if (v4 == 257)
    {
      WebCore::HTMLConstructionSite::insertHTMLElement(a1 + 56, a2);
      v11 = *(_DWORD **)a1;
      v12 = 2;
LABEL_19:
      v11[62] = v12;
      v13 = *(_DWORD *)(a1 + 240);
      *(_DWORD *)(a1 + 240) = 8;
      *(_DWORD *)(a1 + 244) = v13;
      return 1;
    }
    if (v4 != 256)
      return result;
    goto LABEL_21;
  }
  v5 = *(unsigned __int8 *)(a2 + 61);
  WebCore::HTMLConstructionSite::insertScriptElement(a1 + 56, a2);
  v6 = *(_DWORD **)a1;
  v6[62] = 5;
  v7 = *(_DWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 304) = v6[49] | ((unint64_t)(v6[32] + v6[47] - (v6[33] + v6[48])) << 32);
  *(_DWORD *)(a1 + 240) = 8;
  *(_DWORD *)(a1 + 244) = v7;
  result = 1;
  if (v5 && *(_BYTE *)(a1 + 9))
  {
    WebCore::HTMLTreeBuilder::processFakeEndTag(a1, 255);
    return 1;
  }
  return result;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLConstructionSite::insertScriptElement(uint64_t a1, uint64_t a2)
{
  char v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ScriptElement *v12;
  int v13;
  WebCore::Node *v14;
  void *v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v25;
  void *v26;
  uint64_t v27;
  WebCore::Node *v28;
  WebCore::Node *v29;

  v4 = *(_BYTE *)(a1 + 168);
  v5 = (v4 & 2) == 0;
  if (!*(_BYTE *)(a1 + 169))
    v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::templateTag + 24))
  {
    goto LABEL_5;
  }
  v27 = *(_QWORD *)(v6 + 120);
  if (!v27 || (v7 = *(_QWORD *)(v27 + 8)) == 0)
  {
    v6 = WebCore::HTMLTemplateElement::content((WebCore::HTMLTemplateElement *)v6);
LABEL_5:
    v7 = v6;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8);
  v9 = bmalloc::api::isoAllocate();
  v10 = v9;
  *(_OWORD *)(v9 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v9 + 24) = 0x101C00000002;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8 + 96;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  ++*(_DWORD *)(v8 + 3324);
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  v11 = WebCore::HTMLNames::scriptTag;
  if (WebCore::HTMLNames::scriptTag)
    ++*(_DWORD *)WebCore::HTMLNames::scriptTag;
  *(_QWORD *)(v9 + 96) = v11;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)v9 = off_1E33CC900;
  *(_QWORD *)(v9 + 112) = &unk_1E33CCE50;
  v12 = WebCore::ScriptElement::ScriptElement((WebCore::ScriptElement *)(v9 + 112), (WebCore::Element *)v9, (v4 & 2) == 0, v5);
  *(_QWORD *)v10 = off_1E33CC900;
  *(_QWORD *)v12 = &unk_1E33CCE50;
  v13 = *(unsigned __int8 *)(a2 + 62);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    WebCore::Element::stripScriptingAttributes((WTF::StringImpl **)v10, a2 + 24);
  WebCore::Element::parserSetAttributes(v10, *(WTF::StringImpl **)(a2 + 24), *(unsigned int *)(a2 + 36));
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v10 + 16) & 0xFEFFFFFFFFFFFFFFLL | ((unint64_t)(v13 != 0) << 56);
  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    v14 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
    *((_DWORD *)v14 + 6) += 2;
    v28 = (WebCore::Node *)v10;
    v29 = v14;
    *(_DWORD *)(v10 + 24) += 2;
    WebCore::HTMLConstructionSite::attachLater(a1, &v29, &v28, 0);
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v15);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v15);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
  }
  v16 = *(_QWORD *)(v10 + 96);
  v17 = *(_WORD *)(v16 + 10);
  v18 = *(_BYTE *)(v16 + 8);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  ++*(_DWORD *)(a1 + 88);
  v22 = WTF::fastMalloc((WTF *)0x28);
  v23 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v22 = v17;
  *(_BYTE *)(v22 + 2) = v18;
  *(_QWORD *)(v22 + 8) = v10;
  *(_QWORD *)(v22 + 16) = v19;
  *(_QWORD *)(v22 + 24) = v20;
  *(_QWORD *)(v22 + 32) = v23;
  result = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v22;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v21);
    return (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v25, v26);
  }
  return result;
}

void WebCore::HTMLConstructionSite::insertHTMLElementOrFindCustomElementInterface(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::JSCustomElementInterface *v6;
  WebCore::Node *v7;
  WebCore::Node *v8;
  void *v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::HTMLElementStack::ElementRecord *v18;
  WTF *v19;
  void *v20;
  _DWORD **v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WebCore::Node *v29;
  WebCore::JSCustomElementInterface *v30;

  v30 = 0;
  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, &v30, &v29);
  v6 = v30;
  if (v30)
  {
    v21 = (_DWORD **)a2;
    if (!*(_QWORD *)a2)
    {
      v22 = *(unsigned __int16 *)(a2 + 58);
      if (v22 >= 0x127)
      {
        __break(1u);
        return;
      }
      v21 = (_DWORD **)&WebCore::tagNameStrings[v22];
    }
    v23 = WTF::fastMalloc((WTF *)0x20);
    ++*((_DWORD *)v6 + 4);
    *(_QWORD *)v23 = v6;
    v25 = *v21;
    if (*v21)
      *v25 += 2;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)(v23 + 24) = 0;
    *(_QWORD *)(v23 + 8) = v25;
    v26 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(v23 + 16) = v26;
    LODWORD(v26) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(v23 + 24) = v26;
    LODWORD(v26) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(v23 + 28) = v26;
    *a3 = v23;
    if (v29)
    {
      if (*((_DWORD *)v29 + 6) == 2)
      {
        if ((*((_WORD *)v29 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v29, v24);
      }
      else
      {
        *((_DWORD *)v29 + 6) -= 2;
      }
    }
  }
  else
  {
    v7 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
    *((_DWORD *)v7 + 6) += 2;
    v8 = v29;
    *((_DWORD *)v29 + 6) += 2;
    v27 = v8;
    v28 = v7;
    WebCore::HTMLConstructionSite::attachLater(a1, &v28, &v27, 0);
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27, v9);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28, v9);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    v10 = *((_QWORD *)v8 + 12);
    v11 = *(_WORD *)(v10 + 10);
    v12 = *(_BYTE *)(v10 + 8);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    ++*(_DWORD *)(a1 + 88);
    v16 = WTF::fastMalloc((WTF *)0x28);
    v17 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_WORD *)v16 = v11;
    *(_BYTE *)(v16 + 2) = v12;
    *(_QWORD *)(v16 + 8) = v8;
    *(_QWORD *)(v16 + 16) = v13;
    *(_QWORD *)(v16 + 24) = v14;
    *(_QWORD *)(v16 + 32) = v17;
    v18 = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v16;
    if (v18)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord(v18, v15);
      WTF::fastFree(v19, v20);
    }
    *a3 = 0;
  }
}

unsigned int *WebCore::HTMLConstructionSite::insertSelfClosingHTMLElement(WebCore::HTMLConstructionSite *a1, WTF::StringImpl **a2)
{
  WebCore::Node *v3;
  void *v4;
  unsigned int *result;
  WebCore::Node *v6;
  WebCore::Node *v7;

  v3 = *(WebCore::Node **)(*((_QWORD *)a1 + 7) + 8);
  *((_DWORD *)v3 + 6) += 2;
  v7 = v3;
  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface(a1, a2, 0, &v6);
  WebCore::HTMLConstructionSite::attachLater((uint64_t)a1, &v7, &v6, 1);
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 2)
    {
      if ((*((_WORD *)v6 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v6, v4);
    }
    else
    {
      *((_DWORD *)v6 + 6) -= 2;
    }
  }
  result = (unsigned int *)v7;
  if (v7)
  {
    if (*((_DWORD *)v7 + 6) == 2)
    {
      if ((*((_WORD *)v7 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef(v7, v4);
    }
    else
    {
      *((_DWORD *)v7 + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::isSpecialNode(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;

  v1 = *((_QWORD *)a1 + 1);
  if (v1 && (*(_WORD *)(v1 + 28) & 0xF000) == 0xB000)
    return 1;
  v2 = *a1;
  result = 1;
  if (v2 != 129)
  {
    switch(v2)
    {
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 11:
      case 12:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 22:
      case 23:
      case 26:
      case 27:
      case 31:
      case 33:
      case 36:
      case 37:
      case 38:
      case 39:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 61:
      case 62:
      case 63:
      case 69:
      case 70:
      case 71:
      case 72:
      case 75:
      case 76:
      case 77:
      case 80:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 90:
      case 91:
      case 93:
      case 94:
      case 105:
      case 106:
      case 114:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 125:
      case 132:
      case 133:
      case 144:
      case 148:
      case 149:
      case 156:
      case 171:
      case 188:
        return result;
      case 8:
      case 9:
      case 10:
      case 13:
      case 14:
      case 16:
      case 21:
      case 24:
      case 25:
      case 28:
      case 29:
      case 30:
      case 32:
      case 34:
      case 35:
      case 40:
      case 60:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 73:
      case 74:
      case 78:
      case 79:
      case 81:
      case 87:
      case 88:
      case 89:
      case 92:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 115:
      case 124:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 145:
      case 146:
      case 147:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
        goto LABEL_11;
      default:
        v4 = v2 - 216;
        v5 = v4 >= 0x36;
        v7 = v4 == 54;
        v6 = (1 << v4) & 0x40058000000001;
        v7 = !v7 && v5 || v6 == 0;
        if (v7)
LABEL_11:
          result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebCore::HTMLConstructionSite::insertHTMLBodyElement(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v4;
  WebCore::Node *v5;
  void *v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  WTF *v16;
  void *v17;
  WebCore::Node *v18;
  WebCore::Node *v19;

  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, 0, &v19);
  v4 = v19;
  v5 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
  *((_DWORD *)v5 + 6) += 2;
  v18 = v4;
  v19 = v5;
  *((_DWORD *)v4 + 6) += 2;
  WebCore::HTMLConstructionSite::attachLater(a1, &v19, &v18, 0);
  if (v18)
  {
    if (*((_DWORD *)v18 + 6) == 2)
    {
      if ((*((_WORD *)v18 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v18, v6);
    }
    else
    {
      *((_DWORD *)v18 + 6) -= 2;
    }
  }
  if (v19)
  {
    if (*((_DWORD *)v19 + 6) == 2)
    {
      if ((*((_WORD *)v19 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v19, v6);
    }
    else
    {
      *((_DWORD *)v19 + 6) -= 2;
    }
  }
  v7 = *((_QWORD *)v4 + 12);
  v8 = *(_WORD *)(v7 + 10);
  v9 = *(_BYTE *)(v7 + 8);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  if ((*((_BYTE *)v4 + 28) & 8) != 0)
  {
    *(_QWORD *)(a1 + 80) = v4;
    ++*(_DWORD *)(a1 + 88);
    v13 = WTF::fastMalloc((WTF *)0x28);
    v14 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    *(_WORD *)v13 = v8;
    *(_BYTE *)(v13 + 2) = v9;
    *(_QWORD *)(v13 + 8) = v4;
    *(_QWORD *)(v13 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v11;
    *(_QWORD *)(v13 + 32) = v14;
    result = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v13;
    if (result)
    {
      WebCore::HTMLElementStack::ElementRecord::~ElementRecord((WebCore::HTMLElementStack::ElementRecord *)result, v12);
      return WTF::fastFree(v16, v17);
    }
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

WebCore::HTMLElementStack::ElementRecord *WebCore::HTMLConstructionSite::insertHTMLHeadElement(uint64_t a1, uint64_t a2)
{
  WebCore::Node *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::HTMLElementStack::ElementRecord *result;
  WTF *v29;
  void *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WTF *v35;
  void *v36;
  WebCore::Node *v37;
  WebCore::Node *v38;
  WebCore::Node *v39;
  WTF *v40;
  uint64_t v41;

  WebCore::HTMLConstructionSite::createHTMLElementOrFindCustomElementInterface((WebCore::HTMLConstructionSite *)a1, (WTF::StringImpl **)a2, 0, &v38);
  v4 = v38;
  v5 = *((_QWORD *)v38 + 12);
  LOWORD(v38) = *(_WORD *)(v5 + 10);
  BYTE2(v38) = *(_BYTE *)(v5 + 8);
  v6 = *(WTF **)(a2 + 24);
  v39 = v4;
  v40 = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v41 = v7;
  WebCore::HTMLStackItem::operator=(a1, (__int16 *)&v38);
  if (HIDWORD(v41))
  {
    v31 = 16 * HIDWORD(v41);
    v32 = (WTF::StringImpl **)((char *)v40 + 8);
    do
    {
      v33 = *v32;
      *v32 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v8);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = (WTF::StringImpl **)*(v32 - 1);
      *(v32 - 1) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v34);
          WTF::fastFree(v35, v36);
        }
        else
        {
          --*(_DWORD *)v34;
        }
      }
      v32 += 2;
      v31 -= 16;
    }
    while (v31);
  }
  v9 = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v9, v8);
  }
  v10 = v39;
  v39 = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v8);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  v11 = *(WebCore::Node **)(*(_QWORD *)(a1 + 56) + 8);
  *((_DWORD *)v11 + 6) += 2;
  v38 = v11;
  v12 = *(_QWORD *)(a1 + 8);
  if ((*(_WORD *)(v12 + 28) & 8) == 0)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  *(_DWORD *)(v12 + 24) += 2;
  v37 = (WebCore::Node *)v12;
  WebCore::HTMLConstructionSite::attachLater(a1, &v38, &v37, 0);
  if (v37)
  {
    if (*((_DWORD *)v37 + 6) == 2)
    {
      if ((*((_WORD *)v37 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v37, v13);
    }
    else
    {
      *((_DWORD *)v37 + 6) -= 2;
    }
  }
  if (v38)
  {
    if (*((_DWORD *)v38 + 6) == 2)
    {
      if ((*((_WORD *)v38 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v38, v13);
    }
    else
    {
      *((_DWORD *)v38 + 6) -= 2;
    }
  }
  LOWORD(v38) = *(_WORD *)a1;
  BYTE2(v38) = *(_BYTE *)(a1 + 2);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
    *(_DWORD *)(v14 + 24) += 2;
  v15 = *(unsigned int *)(a1 + 28);
  if (!(_DWORD)v15)
  {
    v17 = 0;
    goto LABEL_25;
  }
  if (v15 >> 28)
  {
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x194267048);
  }
  v16 = WTF::fastMalloc((WTF *)(16 * v15));
  v17 = v16;
  v18 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = v20 + 16 * v18;
    do
    {
      v22 = v20 + v19;
      v23 = *(_DWORD **)(v20 + v19);
      if (v23)
        ++*v23;
      *(_QWORD *)(v16 + v19) = v23;
      v24 = *(_DWORD **)(v22 + 8);
      if (v24)
        *v24 += 2;
      *(_QWORD *)(v16 + v19 + 8) = v24;
      v19 += 16;
    }
    while (v22 + 16 != v21);
  }
LABEL_25:
  if ((*(_WORD *)(v14 + 28) & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194267068);
  }
  *(_QWORD *)(a1 + 72) = v14;
  ++*(_DWORD *)(a1 + 88);
  v26 = WTF::fastMalloc((WTF *)0x28);
  v27 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)v26 = (_WORD)v38;
  *(_BYTE *)(v26 + 2) = BYTE2(v38);
  *(_QWORD *)(v26 + 8) = v14;
  *(_QWORD *)(v26 + 16) = v17;
  *(_DWORD *)(v26 + 24) = v15;
  *(_DWORD *)(v26 + 28) = v15;
  *(_QWORD *)(v26 + 32) = v27;
  result = *(WebCore::HTMLElementStack::ElementRecord **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v26;
  if (result)
  {
    WebCore::HTMLElementStack::ElementRecord::~ElementRecord(result, v25);
    return (WebCore::HTMLElementStack::ElementRecord *)WTF::fastFree(v29, v30);
  }
  return result;
}

uint64_t WebCore::HTMLStackItem::operator=(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF *v15;
  void *v16;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  v5 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, a2);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  v7 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v7)
  {
    v11 = 16 * v7;
    v12 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v13 = *v12;
      *v12 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = (WTF::StringImpl **)*(v12 - 1);
      *(v12 - 1) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v14);
          WTF::fastFree(v15, v16);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
      v12 += 2;
      v11 -= 16;
    }
    while (v11);
  }
  v8 = *(WTF **)(a1 + 16);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)(a1 + 16) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v9;
  LODWORD(v9) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v9;
  return a1;
}

uint64_t WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 40 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::HTMLConstructionSiteTask,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  v9 = *(unsigned int *)(result + 12);
  if (v8 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (v8 < 0x6666667)
  {
    v10 = 40 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(40 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 40 * v9);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::add@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int **v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::expand(a1, 0), (v6 = *a1) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::computeHash<WTF::SchedulePair>(*a2);
  v9 = result & v7;
  v10 = (unsigned int **)(v6 + 8 * (result & v7));
  v11 = *v10;
  if (*v10)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (v11 == (unsigned int *)*a2)
      {
        v22 = *a1;
        if (*a1)
          v23 = *(unsigned int *)(v22 - 4);
        else
          v23 = 0;
        v19 = 0;
        v18 = v22 + 8 * v23;
        goto LABEL_12;
      }
      if (v11 == (unsigned int *)-1)
        v20 = v10;
      v9 = (v9 + v21) & v7;
      v10 = (unsigned int **)(v6 + 8 * v9);
      v11 = *v10;
      ++v21;
    }
    while (*v10);
    if (v20)
    {
      *v20 = 0;
      --*(_DWORD *)(*a1 - 16);
      v10 = v20;
    }
  }
  result = (uint64_t)WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::operator=(v10, (unsigned int **)a2);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) + 1;
  else
    v13 = 1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
    v15 = *(_DWORD *)(v14 - 12);
  else
    v15 = 0;
  v16 = (*(_DWORD *)(v14 - 16) + v15);
  v17 = *(unsigned int *)(v14 - 4);
  if (v17 > 0x400)
  {
    if (v17 > 2 * v16)
      goto LABEL_11;
LABEL_16:
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::expand(a1, v10);
    v10 = (unsigned int **)result;
    v14 = *a1;
    if (*a1)
      v17 = *(unsigned int *)(v14 - 4);
    else
      v17 = 0;
    goto LABEL_11;
  }
  if (3 * v17 <= 4 * v16)
    goto LABEL_16;
LABEL_11:
  v18 = v14 + 8 * v17;
  v19 = 1;
LABEL_12:
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v19;
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *result;
  uint64_t v13;
  unsigned int **v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  WTF *v20;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (unsigned int **)(v6 + 8 * v13);
      if (*v14 != (unsigned int *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::reinsert(a1, (uint64_t *)(v6 + 8 * v13));
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              atomic_store(1u, v16);
              v19 = v15;
              v20 = (WTF *)v16;
              WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v20, v10);
              v15 = v19;
            }
          }
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
    goto LABEL_18;
  }
  v11 = 0;
  result = 0;
  if (v6)
  {
LABEL_18:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::rehash(a1, v5, a2);
}

unsigned int **WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::operator=(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (WTF *)v4;
      WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8, a2);
    }
  }
  return a1;
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;

  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = *a1;
  *a1 = v3;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (WTF *)v5;
      WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::DataURLDecoder::DecodeTask *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DataURLDecoder::DecodeTask *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E341D950;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    WebCore::DataURLDecoder::DecodeTask::~DecodeTask(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1E341D978;
  v3 = *((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__optional_destruct_base<WebCore::DataURLDecoder::Result,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)>::operator()(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  LOBYTE(v7[0]) = 0;
  v9 = 0;
  if (*((_BYTE *)a2 + 40))
  {
    v2 = *a2;
    v3 = a2[1];
    *a2 = 0u;
    a2[1] = 0u;
    v7[0] = v2;
    v7[1] = v3;
    v4 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    v8 = v4;
    v9 = 1;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 16))(a1, v7);
  return std::__optional_destruct_base<WebCore::DataURLDecoder::Result,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
}

WTF::StringImpl *WebCore::ResourceResponseBase::dataURLResponse@<X0>(WebCore::ResourceResponseBase *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  WebCore::ResourceResponse::ResourceResponse(a3, (uint64_t)this, (_DWORD **)a2, *((unsigned int *)a2 + 9), (_DWORD **)a2 + 1);
  WebCore::ResourceResponse::platformLazyInit(a3, 1);
  *(_WORD *)(a3 + 136) = 200;
  *(_BYTE *)(a3 + 138) &= ~1u;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::ResourceResponseBase::setHTTPStatusText(a3, (uint64_t *)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::ResourceResponse::platformLazyInit(a3, 2);
  result = WebCore::HTTPHeaderMap::set((WTF::StringImpl *)(a3 + 80), (WTF::StringImpl *)0x1A, (WTF::StringImpl **)a2 + 2);
  *(_WORD *)(a3 + 232) = *(_WORD *)(a3 + 232) & 0xC3FF | 0x400;
  return result;
}

int64x2_t WebCore::ResourceResponseBase::ResourceResponseBase(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t a4, _DWORD **a5)
{
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  int64x2_t result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = a4;
  v8 = *a5;
  if (*a5)
    *v8 += 2;
  *(_QWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) &= 0xCEu;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(int64x2_t *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 224) &= 0xF0u;
  *(_WORD *)(a1 + 232) &= 0xC000u;
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a1 + 234) & 0xF8 | 2;
  return result;
}

{
  _DWORD *v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  int64x2_t result;

  v5 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v5 += 2;
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v6;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = a4;
  v8 = *a5;
  if (*a5)
    *v8 += 2;
  *(_QWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) &= 0xCEu;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 144) = result;
  *(int64x2_t *)(a1 + 160) = result;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 216) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 224) &= 0xF0u;
  *(_WORD *)(a1 + 232) &= 0xC000u;
  *(_BYTE *)(a1 + 234) = *(_BYTE *)(a1 + 234) & 0xF8 | 2;
  return result;
}

void WebCore::ResourceResponse::~ResourceResponse(WebCore::ResourceResponse *this, WTF::StringImpl *a2)
{
  const void *v2;
  WebCore::ResourceResponse *v3;

  v2 = (const void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2)
  {
    v3 = this;
    CFRelease(v2);
    this = v3;
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(this, a2);
}

uint64_t WebCore::DataURLDecoder::decodeSynchronously(WebCore::DataURLDecoder *this, WebCore::DataURLDecoder::DecodeTask *a2, double a3, double a4, float a5)
{
  uint64_t result;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  uint64_t *v12;
  __n128 v13;
  WTF::StringImpl *v14;
  _QWORD v15[2];
  char v16;

  result = WebCore::DataURLDecoder::DecodeTask::process(a2, a3, a4, a5);
  if ((result & 1) == 0)
    goto LABEL_12;
  if (*((_BYTE *)a2 + 56))
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 5);
    v11 = *((_QWORD *)a2 + 6);
    v12 = PAL::UTF8Encoding((PAL *)result);
    PAL::decodeURLEscapeSequences(v10, v11, (PAL *)v12, &v14, v13);
    WTF::base64Decode();
    result = (uint64_t)v14;
    v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
      else
        *(_DWORD *)result -= 2;
    }
    if (v16)
      goto LABEL_4;
LABEL_12:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 40) = 0;
    return result;
  }
  PAL::decodeURLEscapeSequencesAsData((uint64_t)v15, *((char **)a2 + 5), *((_QWORD *)a2 + 6));
LABEL_4:
  v9 = (WTF *)*((_QWORD *)a2 + 14);
  if (v9)
  {
    *((_QWORD *)a2 + 14) = 0;
    *((_DWORD *)a2 + 30) = 0;
    WTF::fastFree(v9, v8);
  }
  *((_QWORD *)a2 + 14) = v15[0];
  *((_QWORD *)a2 + 15) = v15[1];
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkToFit((WebCore::DataURLDecoder::DecodeTask *)((char *)a2 + 112));
  return std::optional<WebCore::DataURLDecoder::Result>::optional[abi:sn180100]<WebCore::DataURLDecoder::Result,0>((uint64_t)this, (uint64_t *)a2 + 11);
}

uint64_t WebCore::DataURLDecoder::DecodeTask::process(WebCore::DataURLDecoder::DecodeTask *this, double a2, double a3, float a4)
{
  unsigned int v4;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  void *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  const char *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _OWORD v59[2];
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  __int128 v62;

  v6 = WTF::String::find(this, 0x2Cu, 5u, a2, a3, a4);
  if (v6 == -1)
    return 0;
  v7 = v6;
  if (!*(_QWORD *)this)
    goto LABEL_38;
  if (WTF::StringImpl::reverseFind() != -1)
    return 0;
  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this && (v10 = *(unsigned int *)(v9 + 4), v10 >= 6))
  {
    v11 = *(_QWORD *)(v9 + 8);
    LODWORD(v12) = v7 - 5;
    if ((int)v10 - 5 >= (v7 - 5))
      v12 = v12;
    else
      v12 = (v10 - 5);
    v13 = v10 - 5;
    if ((*(_BYTE *)(v9 + 16) & 4) != 0)
    {
      if (v13 >= v12)
      {
        v14 = (const char *)(v11 + 5);
        v12 |= 0x100000000uLL;
        goto LABEL_14;
      }
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    if (v13 < v12)
      goto LABEL_77;
    v14 = (const char *)(v11 + 10);
  }
  else
  {
LABEL_38:
    v12 = 0x100000000;
    v14 = "";
  }
LABEL_14:
  *(_QWORD *)&v62 = v14;
  *((_QWORD *)&v62 + 1) = v12;
  v15 = WTF::StringView::reverseFind((uint64_t)&v62, 0x3Bu, 0xFFFFFFFF);
  if (v15 == -1)
    v4 = DWORD2(v62);
  else
    v4 = v15;
  v16 = (char *)WTF::StringView::substring((const char *)&v62, v4 + 1, DWORD2(v62) - (v4 + 1));
  if ((v17 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v17)
    {
LABEL_19:
      v18 = v17;
      goto LABEL_20;
    }
    v32 = 0;
    while (1)
    {
      v33 = v16[v32];
      v34 = v33 > 0x20;
      v35 = (1 << v33) & 0x100002600;
      if (v34 || v35 == 0)
        break;
      if (v17 == ++v32)
      {
        v18 = 0x100000000;
        v16 = "";
        goto LABEL_20;
      }
    }
    if ((_DWORD)v17 != 1)
    {
      v37 = (v17 - 1);
      while (v37 < v17)
      {
        v38 = v16[v37];
        v34 = v38 > 0x20;
        v39 = (1 << v38) & 0x100002600;
        if (!v34 && v39 != 0)
        {
          if ((_DWORD)--v37)
            continue;
        }
        if (!(_DWORD)v32)
        {
          v18 = v17;
          if ((_DWORD)v37 == (_DWORD)v17 - 1)
            goto LABEL_20;
        }
        goto LABEL_56;
      }
      goto LABEL_77;
    }
    v18 = v17;
    if ((_DWORD)v32)
    {
      LODWORD(v37) = 0;
LABEL_56:
      v41 = (v37 - v32 + 1);
      if ((unint64_t)v17 - v32 < v41)
        goto LABEL_77;
      v16 += v32;
      v18 = v41 | 0x100000000;
    }
  }
  else
  {
    if (!(_DWORD)v17)
      goto LABEL_19;
    v42 = 0;
    v43 = v16;
    while (1)
    {
      v44 = *(unsigned __int16 *)v43;
      v34 = v44 > 0x20;
      v45 = (1 << v44) & 0x100002600;
      if (v34 || v45 == 0)
        break;
      ++v42;
      v43 += 2;
      if (v17 == v42)
      {
        v18 = 0x100000000;
        v16 = "";
        goto LABEL_20;
      }
    }
    if ((_DWORD)v17 != 1)
    {
      v47 = (v17 - 1);
      while (v47 < v17)
      {
        v48 = *(unsigned __int16 *)&v16[2 * v47];
        v34 = v48 > 0x20;
        v49 = (1 << v48) & 0x100002600;
        if (!v34 && v49 != 0)
        {
          if ((_DWORD)--v47)
            continue;
        }
        if (!(_DWORD)v42)
        {
          v18 = v17;
          if ((_DWORD)v47 == (_DWORD)v17 - 1)
            goto LABEL_20;
        }
        goto LABEL_76;
      }
      goto LABEL_77;
    }
    v18 = v17;
    if ((_DWORD)v42)
    {
      LODWORD(v47) = 0;
LABEL_76:
      v18 = (v47 - v42 + 1);
      v16 = v43;
      if ((unint64_t)v17 - v42 < v18)
        goto LABEL_77;
    }
  }
LABEL_20:
  v19 = WTF::equalLettersIgnoringASCIICase((unsigned __int16 *)v16, v17 & 0xFFFFFF0000000000 | v18 & 0xFFFFFFFFFFLL, "base64", 7uLL);
  *((_BYTE *)this + 56) = v19;
  if (v19)
  {
LABEL_78:
    if (DWORD2(v62))
    {
      if (DWORD2(v62) <= v4)
      {
        v52 = *((_QWORD *)&v62 + 1);
        v51 = (const char *)v62;
      }
      else
      {
        v51 = (const char *)v62;
        if (BYTE12(v62))
          v52 = v4 | 0x100000000;
        else
          v52 = v4;
      }
    }
    else
    {
      v52 = 0x100000000;
      v51 = "";
    }
    *(_QWORD *)&v59[0] = v51;
    *((_QWORD *)&v59[0] + 1) = v52;
    goto LABEL_22;
  }
  *(_QWORD *)&v59[0] = v62;
  *(_QWORD *)((char *)v59 + 5) = *(_QWORD *)((char *)&v62 + 5);
LABEL_22:
  WTF::StringView::toString((uint64_t *)&v61, (WTF::StringView *)v59);
  WTF::String::trim();
  v21 = *(WTF::StringImpl **)&v59[0];
  *(_QWORD *)&v59[0] = 0;
  v22 = v61;
  v61 = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      v57 = *(WTF::StringImpl **)&v59[0];
      *(_QWORD *)&v59[0] = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v20);
        else
          *(_DWORD *)v57 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
    v21 = v61;
  }
  if (v21 && WTF::StringImpl::startsWith())
  {
    v53 = v61;
    if (v61)
      *(_DWORD *)v61 += 2;
    v60 = v53;
    WTF::makeString<WTF::ASCIILiteral,WTF::String>((int8x16_t *)"text/plain", 11, (uint64_t *)&v60, v59);
    v54 = *(WTF::StringImpl **)&v59[0];
    *(_QWORD *)&v59[0] = 0;
    v55 = v61;
    v61 = v54;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::destroy(v55, v20);
        v58 = *(WTF::StringImpl **)&v59[0];
        *(_QWORD *)&v59[0] = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v20);
          else
            *(_DWORD *)v58 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v55 -= 2;
        *(_QWORD *)&v59[0] = 0;
      }
    }
    v56 = v60;
    v60 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v20);
      else
        *(_DWORD *)v56 -= 2;
    }
  }
  if (WebCore::DataURLDecoder::shouldRemoveFragmentIdentifier((WebCore::DataURLDecoder *)&v61, v20))
    WTF::URL::removeFragmentIdentifier(this);
  *(_QWORD *)&v59[0] = 0;
  v23 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v24 = *(unsigned __int8 *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 8);
    LODWORD(v23) = *(_DWORD *)(v23 + 4);
    *(_QWORD *)&v59[0] = v25;
    v26 = (v24 >> 2) & 1;
  }
  else
  {
    LOBYTE(v26) = 1;
  }
  DWORD2(v59[0]) = v23;
  BYTE12(v59[0]) = v26;
  *((_QWORD *)this + 5) = WTF::StringView::substring((const char *)v59, v7 + 1, 0xFFFFFFFF);
  *((_DWORD *)this + 12) = v27;
  *((_BYTE *)this + 52) = v28;
  WebCore::DataURLDecoder::parseMediaType((WebCore::DataURLDecoder *)v59, &v61);
  WebCore::DataURLDecoder::Result::operator=((uint64_t)this + 88, (WTF::StringImpl *)v59);
  WebCore::DataURLDecoder::Result::~Result((WebCore::DataURLDecoder::Result *)v59, v29);
  v31 = v61;
  v61 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v30);
    else
      *(_DWORD *)v31 -= 2;
  }
  return 1;
}

unint64_t WTF::StringView::reverseFind(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!*(_BYTE *)(a1 + 12))
    return WTF::reverseFind<char16_t>(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), a2, a3);
  if (a2 > 0xFF)
    return -1;
  return WTF::reverseFind<unsigned char>(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), a2, a3);
}

uint64_t WTF::String::find(WTF::String *this, unsigned __int8 a2, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return -1;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(unsigned int *)(v6 + 4);
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if (v8 > a3)
    {
      v9 = v8 - a3;
      v10 = 16;
      if (v9 < 0x10)
        v10 = v9;
      if (v10)
      {
        v11 = v10;
        v12 = (unsigned __int8 *)(v7 + a3);
        while (*v12 != a2)
        {
          ++v12;
          if (!--v11)
            goto LABEL_10;
        }
        return (uint64_t)&v12[-v7];
      }
LABEL_10:
      if (v9 >= 0x11)
      {
        v12 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v10), a2, v9 - v10);
        if (v12)
          return (uint64_t)&v12[-v7];
      }
    }
    return -1;
  }
  return WTF::find<char16_t,(void *)0>(v7, v8, a2, a3, a4, a5, a6);
}

void WebCore::DataURLDecoder::parseMediaType(WebCore::DataURLDecoder *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12[4];
  WTF::StringImpl *v13;
  char v14;

  WebCore::ParsedContentType::create(a2, (WTF::StringImpl *)1, (uint64_t)v12);
  if (v14)
  {
    v3 = v13;
    if (v13)
      *(_DWORD *)v13 += 2;
    v11 = v3;
    WTF::String::isolatedCopy();
    if (v14
      && (WebCore::ParsedContentType::charset((WebCore::ParsedContentType *)v12, &v10), WTF::String::isolatedCopy(), v14))
    {
      WebCore::ParsedContentType::serialize(v12, &v9);
      WTF::String::isolatedCopy();
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      v5 = v9;
      v9 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v4);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v4);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v4);
        else
          *(_DWORD *)v7 -= 2;
      }
      if (v14)
        WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v12, v4);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(WTF::StringImpl **)this = v12[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *((WTF::StringImpl **)this + 1) = v12[0];
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v12[0];
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 2) = v8;
  }
}

void WebCore::ParsedContentType::create(WTF::StringImpl **a1@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  __int128 v8;
  char v9;
  WTF::StringImpl *v10;
  _OWORD v11[3];

  v3 = (int)a2;
  if ((_DWORD)a2)
  {
    WTF::String::trim();
    v5 = v10;
    if (v10)
    {
      v6 = *(_DWORD *)v10;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = *a1;
    if (v5)
    {
      v6 = *(_DWORD *)v5 + 2;
      *(_DWORD *)v5 = v6;
LABEL_4:
      *(_DWORD *)v5 = v6 + 2;
      *(_QWORD *)&v11[0] = v5;
      memset((char *)v11 + 8, 0, 32);
      if (v6)
        *(_DWORD *)v5 = v6;
      else
        WTF::StringImpl::destroy(v5, a2);
      goto LABEL_6;
    }
  }
  memset(v11, 0, 40);
LABEL_6:
  if ((WebCore::ParsedContentType::parseContentType((WTF::String *)v11, v3) & 1) != 0)
  {
    v8 = v11[0];
    v11[0] = 0uLL;
    *(_OWORD *)a3 = v8;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v11[1];
    *(_QWORD *)&v8 = *((_QWORD *)&v11[1] + 1);
    v11[1] = 0uLL;
    *(_QWORD *)(a3 + 24) = v8;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)&v11[2];
    v9 = 1;
    *(_QWORD *)&v11[2] = 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 40) = v9;
  WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v11, v7);
}

BOOL WebCore::isValidHTTPToken(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  int v11;
  char v12;

  v2 = a2;
  if (!(_DWORD)a2)
    return 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    while (1)
    {
      v5 = *(unsigned __int8 *)a1;
      a1 = (unsigned __int16 *)((char *)a1 + 1);
      v4 = v5;
      v6 = (v5 | 0x20) - 97;
      v7 = (v5 - 48) >= 0xA && v6 >= 0x1A;
      if (v7)
      {
        v8 = (v4 - 33) > 0x3F || ((1 << (v4 - 33)) & 0xE00000000000367DLL) == 0;
        if (v8 && v4 != 124 && v4 != 126)
          break;
      }
      if (!--v2)
        return 1;
    }
    return 0;
  }
  else
  {
    v10 = a2 - 1;
    do
    {
      v11 = *a1++;
      result = RFC7230::isTokenCharacter(v11);
      v7 = v10-- != 0;
      v12 = v7;
    }
    while (result && (v12 & 1) != 0);
  }
  return result;
}

void WebCore::ParsedContentType::~ParsedContentType(WebCore::ParsedContentType *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v8 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v9 = 8 * v4;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v11)
    {
      v12 = (WTF::StringImpl **)*((_QWORD *)this + 1);
      do
      {
        v13 = *v12;
        if (*v12 != (WTF::StringImpl *)-1)
        {
          v14 = v12[1];
          v12[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
            {
              WTF::StringImpl::destroy(v14, a2);
              v13 = *v12;
            }
            else
            {
              *(_DWORD *)v14 -= 2;
            }
          }
          *v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, a2);
            else
              *(_DWORD *)v13 -= 2;
          }
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
}

WTF::StringImpl *WebCore::ParsedContentType::setContentType(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  _QWORD v36[2];
  WTF::StringImpl *v37;

  v4 = (WTF::StringImpl **)(a1 + 32);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 32), a2);
  if (a3 == 1)
  {
    v5 = *v4;
    if (!*v4)
    {
LABEL_48:
      v6 = 0;
      v9 = 0x100000000;
      goto LABEL_5;
    }
    v6 = (const char *)*((_QWORD *)v5 + 1);
    v7 = *((unsigned int *)v5 + 1);
    v8 = (unint64_t)*((unsigned int *)v5 + 4) >> 2;
    v9 = v7 | ((unint64_t)((*((_DWORD *)v5 + 4) & 4) != 0) << 32);
    if ((v8 & 1) != 0)
    {
      if (!(_DWORD)v7)
        goto LABEL_5;
      v14 = 0;
      while (1)
      {
        v15 = v6[v14];
        v16 = v15 > 0x20;
        v17 = (1 << v15) & 0x100002600;
        if (v16 || v17 == 0)
          break;
        if (v7 == ++v14)
        {
          v9 = 0x100000000;
          v6 = "";
          goto LABEL_5;
        }
      }
      if ((_DWORD)v7 != 1)
      {
        v19 = (v7 - 1);
        while (v19 < v7)
        {
          v20 = v6[v19];
          v16 = v20 > 0x20;
          v21 = (1 << v20) & 0x100002600;
          if (!v16 && v21 != 0)
          {
            if ((_DWORD)--v19)
              continue;
          }
          if (!(_DWORD)v14 && (_DWORD)v19 == (_DWORD)v7 - 1)
            goto LABEL_5;
          goto LABEL_26;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if ((_DWORD)v14)
      {
        LODWORD(v19) = 0;
LABEL_26:
        v23 = (v19 - v14 + 1);
        if (v7 - v14 >= v23)
        {
          v6 += v14;
          v9 = v23 | 0x100000000;
          goto LABEL_5;
        }
        goto LABEL_47;
      }
    }
    else
    {
      if (!(_DWORD)v7)
        goto LABEL_5;
      v24 = 0;
      v25 = v6;
      while (1)
      {
        v26 = *(unsigned __int16 *)v25;
        v16 = v26 > 0x20;
        v27 = (1 << v26) & 0x100002600;
        if (v16 || v27 == 0)
          break;
        ++v24;
        v25 += 2;
        if (v7 == v24)
        {
          v9 = 0x100000000;
          v6 = "";
          goto LABEL_5;
        }
      }
      if ((_DWORD)v7 != 1)
      {
        v29 = (v7 - 1);
        while (v29 < v7)
        {
          v30 = *(unsigned __int16 *)&v6[2 * v29];
          v16 = v30 > 0x20;
          v31 = (1 << v30) & 0x100002600;
          if (!v16 && v31 != 0)
          {
            if ((_DWORD)--v29)
              continue;
          }
          if (!(_DWORD)v24 && (_DWORD)v29 == (_DWORD)v7 - 1)
            goto LABEL_5;
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      if ((_DWORD)v24)
      {
        LODWORD(v29) = 0;
LABEL_46:
        v9 = (v29 - v24 + 1);
        v6 = v25;
        if (v7 - v24 < v9)
          goto LABEL_47;
      }
    }
LABEL_5:
    v36[0] = v6;
    v36[1] = v9;
    WTF::StringView::convertToASCIILowercase((WTF::StringView *)v36);
    v11 = v37;
    v37 = 0;
    result = *v4;
    *v4 = v11;
    if (!result)
      return result;
    v13 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
      goto LABEL_7;
    WTF::StringImpl::destroy(result, v10);
    result = v37;
    v37 = 0;
    if (result)
      goto LABEL_50;
    return result;
  }
  WTF::String::trim();
  v35 = (WTF::StringImpl *)v36[0];
  v36[0] = 0;
  result = *v4;
  *v4 = v35;
  if (result)
  {
    v13 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
    {
LABEL_7:
      *(_DWORD *)result = v13;
      return result;
    }
    WTF::StringImpl::destroy(result, v34);
    result = (WTF::StringImpl *)v36[0];
    v36[0] = 0;
    if (result)
    {
LABEL_50:
      v13 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
      goto LABEL_7;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::ParsedContentType::charset@<X0>(WebCore::ParsedContentType *this@<X0>, _QWORD *a2@<X8>)
{
  const WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>((uint64_t *)this + 1, &v9, v4);
  if (v5)
  {
    v7 = (_DWORD *)*((_QWORD *)v5 + 1);
    if (v7)
      *v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF *result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *(_DWORD *)(v3 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  if (v7 < 0x100)
    v8 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v8 = v7 >> 8;
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v6;
    result = *(WTF **)(v3 + 16 * v10);
    if (result != (WTF *)-1)
    {
      if (!result)
        return result;
      if ((WTF::equal(result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return (WTF *)(v3 + 16 * v10);
}

void WebCore::ParsedContentType::serialize(WTF::StringImpl **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::String *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20[2];
  int v21;
  char v22;

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 1;
  WTF::StringBuilder::append(v20, this + 4);
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v6 = (WTF::StringImpl **)this[2];
    v7 = &v6[v4];
    v8 = (uint64_t *)(this + 1);
    while (1)
    {
      WTF::StringBuilder::append((uint64_t)v20, 0x3Bu);
      WTF::StringBuilder::append(v20, v6);
      WTF::StringBuilder::append((uint64_t)v20, 0x3Du);
      v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(v8, v6, v9);
      if (!v10)
        break;
      v18 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
      if (!v18)
        break;
      *(_DWORD *)v18 += 2;
      v19 = v18;
      if (!*((_DWORD *)v18 + 1) || (WebCore::isValidHTTPToken((WebCore *)&v19, v11) & 1) == 0)
        goto LABEL_6;
      WTF::StringBuilder::append(v20, &v19);
LABEL_18:
      v17 = v19;
      v19 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v16);
        else
          *(_DWORD *)v17 -= 2;
      }
      if (++v6 == v7)
        goto LABEL_2;
    }
    v19 = 0;
LABEL_6:
    WTF::StringBuilder::append((uint64_t)v20, 0x22u);
    v12 = v19;
    if (v19)
    {
      v13 = 0;
      do
      {
        if (v13 >= *((unsigned int *)v12 + 1))
          break;
        v14 = *((_QWORD *)v12 + 1);
        if ((*((_BYTE *)v12 + 16) & 4) != 0)
          v15 = *(unsigned __int8 *)(v14 + v13);
        else
          v15 = *(unsigned __int16 *)(v14 + 2 * v13);
        if (v15 == 92 || v15 == 34)
          WTF::StringBuilder::append((uint64_t)v20, 0x5Cu);
        WTF::StringBuilder::append((uint64_t)v20, v15);
        ++v13;
        v12 = v19;
      }
      while (v19);
    }
    WTF::StringBuilder::append((uint64_t)v20, 0x22u);
    goto LABEL_18;
  }
LABEL_2:
  WTF::StringBuilder::toString((WTF::StringBuilder *)v20, a2);
  WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v20, v5);
}

void WTF::StringBuilder::~StringBuilder(WTF::StringBuilder *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
    {
      WTF::StringImpl::destroy(v3, a2);
      v4 = *(WTF::StringImpl **)this;
      *(_QWORD *)this = 0;
      if (!v4)
        return;
      goto LABEL_7;
    }
    *(_DWORD *)v3 -= 2;
  }
  v4 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (!v4)
    return;
LABEL_7:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy(v4, a2);
  else
    *(_DWORD *)v4 -= 2;
}

uint64_t WebCore::DataURLDecoder::Result::operator=(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF *v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v9 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = 0;
  *(_DWORD *)(a1 + 36) = v11;
  return a1;
}

void WebCore::DataURLDecoder::Result::~Result(WebCore::DataURLDecoder::Result *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v3 = (WTF *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

void WebCore::DataURLDecoder::DecodeTask::~DecodeTask(WebCore::DataURLDecoder::DecodeTask *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = (WTF *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 8);
  if (v8)
    WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(v8, a2);
  v9 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v9 -= 2;
  }
}

WTF::StringImpl *WebCore::ResourceLoader::loadDataURL(WebCore::ResourceLoader *this)
{
  WTF::StringImpl **v2;
  WTF::StringImpl *v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  WebCore::Page *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  void *v11;
  WTF::StringImpl *result;
  uint64_t v13;
  WebCore::Quirks *v14;
  void *v15;
  uint64_t v16[3];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;

  v2 = (WTF::StringImpl **)((char *)this + 336);
  if ((*((_BYTE *)this + 520) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceLoader *)((char *)this + 336));
    *((_BYTE *)this + 520) |= 1u;
  }
  v3 = *v2;
  if (*v2)
    *(_DWORD *)v3 += 2;
  v21 = v3;
  v4 = *(_OWORD *)((char *)this + 360);
  v22 = *(_OWORD *)((char *)this + 344);
  v23 = v4;
  v5 = *((_QWORD *)this + 4);
  if (v5 && (v13 = *(_QWORD *)(v5 + 296)) != 0)
  {
    *(_DWORD *)(v13 + 24) += 2;
    v14 = *(WebCore::Quirks **)(v13 + 688);
    if (!v14)
      v14 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v13);
    v6 = WebCore::Quirks::shouldDisableDataURLPaddingValidation(v14) ^ 1;
    if (*(_DWORD *)(v13 + 24) == 2)
    {
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v13, v15);
    }
    else
    {
      *(_DWORD *)(v13 + 24) -= 2;
    }
  }
  else
  {
    v6 = 1;
  }
  v20 = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
  if (v7)
  {
    v8 = *(WebCore::Page **)(v7 + 8);
    if (v8)
    {
      ++*(_DWORD *)v8;
      WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::operator=((uint64_t *)&v20, *((_QWORD ***)v8 + 3));
      WTF::RefCounted<WebCore::Page>::deref(v8);
    }
  }
  ++*((_DWORD *)this + 4);
  v16[0] = (uint64_t)this;
  v16[1] = (uint64_t)this;
  if (v3)
    *(_DWORD *)v3 += 2;
  v16[2] = (uint64_t)v3;
  v17 = v22;
  v18 = v23;
  WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)>::Function<WebCore::ResourceLoader::loadDataURL(void)::$_0,void>(&v19, v16);
  WebCore::DataURLDecoder::decode((WebCore::DataURLDecoder *)&v21, &v20, v6, &v19);
  v10 = v19;
  v19 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WebCore::ResourceLoader::loadDataURL(void)::$_0::~$_0((uint64_t)v16, v9);
  if (v20)
    WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable((uint64_t)v20, v11);
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  WTF *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(unsigned int **)(a1 + 8 * i);
      if (v5 != (unsigned int *)-1)
      {
        *(_QWORD *)(a1 + 8 * i) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr(v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, v5));
          if (!v7)
          {
            atomic_store(1u, v5);
            v9 = (WTF *)v5;
            WTF::ThreadSafeRefCounted<WTF::SchedulePair,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v9, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::Quirks::shouldDisableDataURLPaddingValidation(WebCore::Quirks *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)this)
    return 0;
  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(v1 + 680);
  if (!*(_BYTE *)(v3 + 243))
  {
    if ((*(_QWORD *)(v3 + 688) & 0x80000) != 0)
      goto LABEL_5;
    return 0;
  }
  if (!*(_BYTE *)(v3 + 242))
    return 0;
LABEL_5:
  if (*((_BYTE *)this + 70))
    return *((_BYTE *)this + 69) != 0;
  WTF::URL::host((WTF::URL *)(v1 + 736));
  if ((WTF::StringView::endsWith() & 1) != 0)
  {
    result = 1;
  }
  else
  {
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v4 = *(_QWORD *)(v4 + 8);
    WTF::URL::host((WTF::URL *)(v4 + 736));
    result = WTF::StringView::endsWith();
  }
  *(_WORD *)((char *)this + 69) = result | 0x100;
  return result;
}

WebCore::DataURLDecoder::DecodeTask **WebCore::DataURLDecoder::decode(WebCore::DataURLDecoder *a1, _QWORD **a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  WebCore::DataURLDecoder::DecodeTask *v14;
  _QWORD *v15;

  v8 = WebCore::DataURLDecoder::decodeQueue(a1);
  v9 = WTF::fastMalloc((WTF *)0x80);
  WebCore::DataURLDecoder::DecodeTask::DecodeTask(v9, (uint64_t)a1, a2, a3, a4);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = &off_1E341D950;
  v10[1] = v9;
  v14 = 0;
  v15 = v10;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 32))(v8, &v15);
  v12 = v15;
  v15 = 0;
  if (v12)
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  return WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0::~$_0(&v14, v11);
}

WebCore::DataURLDecoder::DecodeTask **WebCore::DataURLDecoder::decode(WTF::URL const&,WebCore::DataURLDecoder::ScheduleContext const&,WebCore::DataURLDecoder::ShouldValidatePadding,WTF::Function<void ()(std::optional<WebCore::DataURLDecoder::Result>)> &&)::$_0::~$_0(WebCore::DataURLDecoder::DecodeTask **a1, void *a2)
{
  WebCore::DataURLDecoder::DecodeTask *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::DataURLDecoder::DecodeTask::~DecodeTask(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

uint64_t WebCore::DataURLDecoder::decodeQueue(WebCore::DataURLDecoder *this)
{
  uint64_t result;
  uint64_t v2;

  if (_MergedGlobals_244 == 1)
    return qword_1ECE841A0;
  WTF::WorkQueue::create();
  result = v2;
  qword_1ECE841A0 = v2;
  _MergedGlobals_244 = 1;
  return result;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::operator=(uint64_t *a1, _QWORD **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t WebCore::DataURLDecoder::DecodeTask::DecodeTask(uint64_t a1, uint64_t a2, _QWORD **a3, char a4, uint64_t *a5)
{
  uint64_t v9;

  WTF::URL::isolatedCopy();
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 52) = 1;
  *(_BYTE *)(a1 + 56) = 0;
  WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::HashTable((uint64_t *)(a1 + 64), a3);
  *(_BYTE *)(a1 + 72) = a4;
  v9 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

uint64_t *WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::HashTable(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int **v13;

  *a1 = 0;
  v3 = *a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v6 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v7 = WTF::fastZeroedMalloc((WTF *)(8 * v6 + 16));
      *a1 = v7 + 16;
      *(_DWORD *)(v7 + 12) = v6;
      *(_DWORD *)(*a1 - 8) = v6 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v8 = WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin(a2);
      v9 = v8;
      v11 = v10;
      v12 = *a2 ? (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)] : 0;
      if ((uint64_t *)v12 != v8)
      {
        do
        {
          v13 = (unsigned int **)WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::SchedulePairHash>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>(a1, v9);
          WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>::operator=(v13, (unsigned int **)v9);
          while (++v9 != v11)
          {
            if ((unint64_t)(*v9 + 1) > 1)
              goto LABEL_11;
          }
          v9 = v11;
LABEL_11:
          ;
        }
        while (v9 != (uint64_t *)v12);
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *a1;
  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[v2];
  if (!*((_DWORD *)result - 3))
    return &result[v2];
  if ((_DWORD)v2)
  {
    v4 = 8 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v4 -= 8;
      if (!v4)
        return v3;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>,WTF::IdentityExtractor,WTF::SchedulePairHash,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>,WTF::SchedulePairHash>,WTF::RefPtr<WTF::SchedulePair,WTF::RawPtrTraits<WTF::SchedulePair>,WTF::DefaultRefDerefTraits<WTF::SchedulePair>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = WTF::computeHash<WTF::SchedulePair>(*a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + v6;
  }
  while (*(_QWORD *)(v2 + 8 * v6));
  return v2 + 8 * v6;
}

uint64_t WTF::computeHash<WTF::SchedulePair>(uint64_t a1)
{
  int v2;
  __int16 v3;
  char v4;

  v2 = -1640531527;
  v3 = 0;
  v4 = 0;
  WTF::add(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

uint64_t WTF::SuperFastHash::hash(WTF::SuperFastHash *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)this;
  if (*((_BYTE *)this + 6))
    v1 = ((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11))
       + (((v1 + *((unsigned __int16 *)this + 2)) ^ ((v1 + *((unsigned __int16 *)this + 2)) << 11)) >> 17);
  v2 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v3 = (v2 ^ (4 * v2)) + ((v2 ^ (4 * v2)) >> 15);
  v4 = v3 ^ (v3 << 10);
  if (v4)
    return v4;
  else
    return 0x800000;
}

_DWORD *WTF::add(_DWORD *a1, uint64_t a2)
{
  const void *v3;
  unint64_t v4;
  CFHashCode v5;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(const void **)(a2 + 24);
  if (v3)
    v5 = CFHash(v3);
  else
    v5 = 0;
  WTF::add<unsigned long>(a1, v4);
  return WTF::add<unsigned long>(a1, v5);
}

_DWORD *WTF::add<unsigned long>(_DWORD *result, unint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;

  v2 = (a2 >> 5) & 0x7FFF800 ^ ((*result + (unsigned __int16)a2) << 16) ^ (*result + (unsigned __int16)a2);
  v3 = v2 + WORD2(a2) + (v2 >> 11);
  v4 = (a2 >> 37) & 0x7FFF800 ^ (v3 << 16);
  *result = (v4 ^ v3) + ((v4 ^ v3) >> 11);
  return result;
}

WTF *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkToFit(WTF *result)
{
  unint64_t v1;
  WTF *v2;

  v1 = *((unsigned int *)result + 3);
  if (*((_DWORD *)result + 2) > v1)
  {
    v2 = result;
    result = *(WTF **)result;
    if ((_DWORD)v1)
    {
      *((_DWORD *)v2 + 2) = v1;
      result = (WTF *)WTF::fastRealloc(result, (void *)v1);
      *(_QWORD *)v2 = result;
    }
    else if (result)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, (void *)v1);
    }
  }
  return result;
}

WTF::StringImpl *PAL::decodeURLEscapeSequences@<X0>(WTF::StringImpl *a1@<X0>, unint64_t a2@<X1>, PAL *a3@<X2>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q1>)
{
  if ((_DWORD)a2)
    return PAL::decodeEscapeSequences<PAL::URLEscapeSequence>(a1, a2, a3, a4, a5);
  if ((a2 & 0xFF00000000) != 0)
    return (WTF::StringImpl *)WTF::String::String();
  return (WTF::StringImpl *)WTF::String::String();
}

WTF::StringImpl *PAL::decodeEscapeSequences<PAL::URLEscapeSequence>@<X0>(WTF::StringImpl *result@<X0>, unint64_t a2@<X1>, PAL *a3@<X2>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q1>)
{
  __int128 v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int16x8_t *v14;
  int16x8_t v15;
  int8x16_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int16x8_t *v21;
  unint64_t v22;
  int8x16_t v23;
  int16x8_t *v24;
  __int8 *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v40;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  PAL *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  char v54;
  char v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  char v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int16x8_t *v71;
  const char *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  char *v79;
  __int128 v80;
  int8x16_t v81;
  __int128 v82;
  char *v83;
  char *v84;
  char *v85;
  WTF::StringImpl *v86;
  _WORD *v87;
  unint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  _WORD *v92;
  const char *v93;
  __int16 v94;
  unint64_t v95;
  WTF::StringImpl *v96;
  __int128 v97;
  const char *v98;
  WTF::StringImpl *v99;
  const char *v100;
  WTF::StringImpl *v101;
  char *v102;
  unint64_t v103;
  BOOL v104;
  unint64_t v105;
  char *v106;
  const char *v107;
  char v108;
  size_t v109;
  unint64_t v110;
  _OWORD *v111;
  __int128 v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  _BYTE *v117;
  char *v118;
  char v119;
  uint8x8_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint8x16_t v123;
  uint16x8_t v124;
  uint8x8_t *v125;
  uint16x8_t *v126;
  unint64_t v127;
  uint8x8_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  __int128 v132;
  int8x16_t v133;
  int8x16_t v134;
  char *v135;
  char *v136;
  char *v137;
  _WORD *v138;
  unint64_t v139;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  _WORD *v143;
  unsigned __int8 *v144;
  __int16 v145;
  uint8x8_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint8x16_t v149;
  uint16x8_t v150;
  uint8x8_t *v151;
  uint16x8_t *v152;
  unint64_t v153;
  uint8x8_t v154;
  int8x16_t *v155;
  __n128 *v156;
  unint64_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int16x8_t *v163;
  int8x8_t *v164;
  unint64_t v165;
  int16x8_t v166;
  int8x16_t *v167;
  __n128 *v168;
  unint64_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int16x8_t *v175;
  int8x8_t *v176;
  unint64_t v177;
  int16x8_t v178;
  const char *v179;
  _BOOL4 shouldShowBackslashAsCurrencySymbolIn;
  __int16 v181;
  unint64_t v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  int v186;
  WTF::StringImpl **v187;
  WTF::StringImpl **v188;
  int16x8_t *v189;
  PAL *v190;
  unsigned int v191;
  __int128 v192;
  __int128 v193;
  int8x16_t v194;
  int8x16_t v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  int v199;
  char v200;
  WTF *v201;
  uint64_t v202;
  _BYTE v203[519];
  char v204;
  uint64_t v205;
  int8x16x2_t v206;
  int8x16x2_t v207;
  int8x16x2_t v208;
  int8x16x2_t v209;
  int8x16x2_t v210;

  v7 = a2;
  v8 = result;
  LODWORD(v10) = 0;
  v191 = 0;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v11 = a2;
  v200 = 1;
  v12 = a2 & 0xFF00000000;
  v13 = (unint64_t)result + 2 * a2;
  v14 = (int16x8_t *)(v13 - 16);
  v15.i64[0] = 0x25002500250025;
  v15.i64[1] = 0x25002500250025;
  v16 = 0uLL;
  while (2)
  {
    v192 = v5;
    v194 = v16;
    while (1)
    {
      if (v12)
      {
        if (v7 <= v10)
          goto LABEL_295;
        v17 = v11 - v10;
        v18 = 16;
        if (v17 < 0x10)
          v18 = v11 - v10;
        if (v18)
        {
          v19 = v18;
          result = (WTF::StringImpl *)((char *)v8 + v10);
          while (*(_BYTE *)result != 37)
          {
            result = (WTF::StringImpl *)((char *)result + 1);
            if (!--v19)
              goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          if (v17 < 0x11)
            goto LABEL_295;
          result = (WTF::StringImpl *)memchr((char *)v8 + v10 + v18, 37, v17 - v18);
          v5 = v192;
          v16 = v194;
          v15.i64[0] = 0x25002500250025;
          v15.i64[1] = 0x25002500250025;
          if (!result)
            goto LABEL_295;
        }
        v20 = result - v8;
        if (result - v8 == -1)
          goto LABEL_295;
      }
      else
      {
        if (v7 <= v10)
          goto LABEL_295;
        v21 = (int16x8_t *)((char *)v8 + 2 * v10);
        v22 = v13 - (_QWORD)v21;
        if ((uint64_t)(v13 - (_QWORD)v21) <= -2)
          goto LABEL_317;
        if (v22 <= 0x3E)
        {
          while (v21->i16[0] != 37)
          {
            v21 = (int16x8_t *)((char *)v21 + 2);
            v22 -= 2;
            if (!v22)
              goto LABEL_295;
          }
        }
        else
        {
          if ((unint64_t)&v21->u64[1] + 6 >= v13)
          {
            v24 = (int16x8_t *)((char *)v8 + 2 * v10);
LABEL_28:
            if ((unint64_t)v24 >= v13
              || (v23 = (int8x16_t)vceqq_s16(*v14, v15),
                  a5.n128_u16[0] = vmaxvq_u16((uint16x8_t)v23),
                  v21 = v14,
                  !a5.n128_u32[0]))
            {
LABEL_295:
              if (v7 <= v191)
                goto LABEL_303;
              if (!v191)
                goto LABEL_300;
              v182 = v7 - v191;
              if (!v12)
              {
                if (v11 - v191 < v182)
                  goto LABEL_317;
                goto LABEL_301;
              }
              if (v11 - v191 < v182)
                goto LABEL_317;
              v7 = v182 | 0x100000000;
LABEL_300:
              if ((v7 & 0xFF00000000) != 0)
              {
LABEL_303:
                WTF::StringBuilder::append();
                v184 = v197;
                if (!v197)
                  goto LABEL_304;
                goto LABEL_305;
              }
LABEL_301:
              WTF::StringBuilder::append();
              v184 = v197;
              if (v197)
                goto LABEL_305;
LABEL_304:
              WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v197);
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v197);
              v184 = v197;
              if (v197)
LABEL_305:
                *(_DWORD *)v184 += 2;
              *a4 = v184;
              v185 = v198;
              v198 = 0;
              if (v185)
              {
                if (*(_DWORD *)v185 != 2)
                {
                  *(_DWORD *)v185 -= 2;
                  goto LABEL_309;
                }
                WTF::StringImpl::destroy(v185, v183);
                result = v197;
                v197 = 0;
                if (!result)
                  return result;
              }
              else
              {
LABEL_309:
                result = v197;
                v197 = 0;
                if (!result)
                  return result;
              }
              if (*(_DWORD *)result == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v183);
              *(_DWORD *)result -= 2;
              return result;
            }
          }
          else
          {
            while (1)
            {
              v23 = (int8x16_t)vceqq_s16(*v21, v15);
              a5.n128_u16[0] = vmaxvq_u16((uint16x8_t)v23);
              if (a5.n128_u32[0])
                break;
              v24 = v21 + 1;
              v25 = &v21[1].i8[14];
              ++v21;
              if ((unint64_t)v25 >= v13)
                goto LABEL_28;
            }
          }
          a5.n128_u16[1] = 1;
          v21 = (int16x8_t *)((char *)v21
                            + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v23)));
        }
        if (v21 == (int16x8_t *)v13)
          goto LABEL_295;
        v20 = ((char *)v21 - (char *)v8) >> 1;
        if (v20 == -1)
          goto LABEL_295;
      }
      if (v20 < v11)
      {
        v26 = 0;
        v10 = v20;
        if (v12)
        {
          do
          {
            while (1)
            {
              if (v7 <= v10)
                goto LABEL_317;
              v27 = *((unsigned __int8 *)v8 + v10);
              if (v27 == 37)
                break;
              if (v27 >= 0x40 && (v27 & 0x80) == 0 && v26 <= 1)
              {
                ++v10;
                ++v26;
                if (v10 < v11)
                  continue;
              }
              goto LABEL_3;
            }
            if (v11 - v10 < 3)
              break;
            v28 = v10 + 1;
            if (v28 >= v7)
              goto LABEL_317;
            v29 = *((unsigned __int8 *)v8 + v28);
            v30 = v29 - 48;
            v31 = (v29 | 0x20) - 97;
            v32 = v30 >= 0xA && v31 >= 6;
            if (v32)
              break;
            v33 = v10 + 2;
            if (v33 >= v7)
              goto LABEL_317;
            v34 = *((unsigned __int8 *)v8 + v33);
            if ((v34 - 48) >= 0xA && (v34 | 0x20u) - 97 >= 6)
              break;
            v26 = 0;
            v10 += 3;
          }
          while (v10 < v11);
        }
        else
        {
          do
          {
            while (1)
            {
              if (v7 <= v10)
                goto LABEL_317;
              v35 = *((unsigned __int16 *)v8 + v10);
              if (v35 == 37)
                break;
              if (v35 >= 0x40 && v35 <= 0x7F && v26 <= 1)
              {
                ++v10;
                ++v26;
                if (v10 < v11)
                  continue;
              }
              goto LABEL_3;
            }
            if (v11 - v10 < 3)
              break;
            if ((int)v10 + 1 >= v7)
              goto LABEL_317;
            v36 = *((unsigned __int16 *)v8 + (v10 + 1));
            v37 = v36 - 48;
            v38 = (v36 | 0x20) - 97;
            if (v37 >= 0xA && v38 > 5)
              break;
            if ((int)v10 + 2 >= v7)
              goto LABEL_317;
            v40 = *((unsigned __int16 *)v8 + (v10 + 2));
            if ((v40 - 48) >= 0xA && (v40 | 0x20u) - 97 > 5)
              break;
            v26 = 0;
            v10 += 3;
          }
          while (v10 < v11);
        }
LABEL_3:
        if (v10 != v20)
          break;
      }
      LODWORD(v10) = v20 + 1;
    }
    v189 = v14;
    v190 = a3;
    if (v7 <= v20)
    {
      v46 = a3;
      v201 = (WTF *)v203;
      v47 = (WTF *)v203;
      v48 = 0;
      v202 = 512;
      if (!*((_QWORD *)v190 + 2))
        goto LABEL_126;
LABEL_82:
      v204 = 0;
      goto LABEL_129;
    }
    v187 = a4;
    v42 = v10 - v20;
    if ((int)v7 - (int)v20 > (v10 - v20) || (v42 = v7 - v20, (_DWORD)v20))
    {
      v43 = v42;
      v44 = v11 - v20;
      if (v12)
      {
        if (v44 < v43)
          goto LABEL_317;
        v45 = (WTF::StringImpl *)((char *)v8 + v20);
        v43 |= 0x100000000uLL;
      }
      else
      {
        if (v44 < v43)
          goto LABEL_317;
        v45 = (WTF::StringImpl *)((char *)v8 + 2 * v20);
      }
    }
    else
    {
      v45 = v8;
      v43 = v7;
    }
    v47 = (WTF *)v203;
    v201 = (WTF *)v203;
    v202 = 512;
    if (v43 >= 0x201uLL)
    {
      if (v43 <= 0x281uLL)
        v49 = 641;
      else
        v49 = v43;
      v186 = v49;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v49);
      v5 = v192;
      v16 = v194;
      v15.i64[0] = 0x25002500250025;
      v15.i64[1] = 0x25002500250025;
      v47 = result;
      LODWORD(v202) = v186;
      v201 = result;
    }
    HIDWORD(v202) = v43;
    if (!(_DWORD)v43)
    {
      v63 = (int)v47;
      goto LABEL_125;
    }
    v50 = v43;
    while (1)
    {
      v51 = v43 & 0xFF00000000;
      if ((v43 & 0xFF00000000) == 0)
        break;
      v52 = *(unsigned __int8 *)v45;
      if (v52 == 37)
      {
        if (v50 <= 2)
          goto LABEL_317;
        v53 = *((unsigned __int8 *)v45 + 1);
        if (v53 >= 0x41)
          v54 = 9;
        else
          v54 = 0;
        v55 = v54 + v53;
        v56 = *((unsigned __int8 *)v45 + 2);
        goto LABEL_109;
      }
      *(_BYTE *)v47 = v52;
      if (v50 < 2)
        goto LABEL_123;
      v62 = v50 - 1;
      if ((unint64_t)v50 - 1 < v62)
        goto LABEL_317;
      v45 = (WTF::StringImpl *)((char *)v45 + 1);
      v43 = v62 | 0x100000000;
LABEL_95:
      v47 = (WTF *)((char *)v47 + 1);
      v50 = v43;
      if (!(_DWORD)v43)
        goto LABEL_124;
    }
    v57 = *(unsigned __int16 *)v45;
    if (v57 != 37)
    {
      *(_BYTE *)v47 = v57;
      v43 = v50 - 1;
      if (v50 <= 1)
        goto LABEL_123;
      if ((unint64_t)v50 - 1 < v43)
        goto LABEL_317;
      v45 = (WTF::StringImpl *)((char *)v45 + 2);
      goto LABEL_95;
    }
    if (v50 <= 2)
      goto LABEL_317;
    v58 = *((unsigned __int16 *)v45 + 1);
    if (v58 >= 0x41)
      v59 = 9;
    else
      v59 = 0;
    v55 = v59 + v58;
    v56 = *((unsigned __int16 *)v45 + 2);
LABEL_109:
    if (v56 >= 0x41)
      v60 = (v56 + 9) & 0xF;
    else
      v60 = v56 - 48;
    *(_BYTE *)v47 = v60 | (16 * v55);
    if (v50 >= 4)
    {
      v43 = v50 - 3;
      v61 = v50 - 3;
      if (v51)
      {
        if (v61 < v43)
          goto LABEL_317;
        v45 = (WTF::StringImpl *)((char *)v45 + 3);
        v43 |= 0x100000000uLL;
      }
      else
      {
        if (v61 < v43)
          goto LABEL_317;
        v45 = (WTF::StringImpl *)((char *)v45 + 6);
      }
      goto LABEL_95;
    }
LABEL_123:
    LODWORD(v47) = (_DWORD)v47 + 1;
LABEL_124:
    v63 = (int)v47;
    v47 = v201;
LABEL_125:
    a4 = v187;
    v64 = v63 - (_DWORD)v47;
    v48 = v64;
    HIDWORD(v202) = v64;
    v46 = v190;
    if (*((_QWORD *)v190 + 2))
      goto LABEL_82;
LABEL_126:
    {
      PAL::UTF8Encoding(void)::globalUTF8Encoding = (uint64_t)&off_1E31F4A18;
      *(_QWORD *)&xmmword_1ECE86C80 = PAL::atomCanonicalTextEncodingName((PAL *)"UTF-8", (const char *)a2);
      *((_QWORD *)&xmmword_1ECE86C80 + 1) = v179;
      shouldShowBackslashAsCurrencySymbolIn = PAL::shouldShowBackslashAsCurrencySymbolIn((const char *)xmmword_1ECE86C80, v179);
      v5 = v192;
      v16 = v194;
      v15.i64[0] = 0x25002500250025;
      v15.i64[1] = 0x25002500250025;
      if (shouldShowBackslashAsCurrencySymbolIn)
        v181 = 165;
      else
        v181 = 92;
      word_1ECE86C90 = v181;
      v47 = v201;
      v48 = HIDWORD(v202);
      if (!*((_QWORD *)&xmmword_1ECE86C80 + 1))
        goto LABEL_293;
LABEL_128:
      v204 = 0;
      v46 = (PAL *)&PAL::UTF8Encoding(void)::globalUTF8Encoding;
LABEL_129:
      PAL::newTextCodec(v46, (const PAL::TextEncoding *)a2, &v205);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, WTF *, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)v205 + 24))(&v196, v205, v47, v48, 1, 0, &v204);
      v65 = v205;
      v205 = 0;
      if (v65)
        (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      v14 = v189;
      v15.i64[0] = 0x25002500250025;
      v15.i64[1] = 0x25002500250025;
      v5 = v192;
      v16 = v194;
      result = v201;
      if (v203 == (_BYTE *)v201)
        goto LABEL_134;
LABEL_132:
      if (result)
      {
        v201 = 0;
        LODWORD(v202) = 0;
        result = (WTF::StringImpl *)WTF::fastFree(result, (void *)a2);
        v5 = v192;
        v16 = v194;
        v15.i64[0] = 0x25002500250025;
        v15.i64[1] = 0x25002500250025;
      }
      goto LABEL_134;
    }
    if (*((_QWORD *)&xmmword_1ECE86C80 + 1))
      goto LABEL_128;
LABEL_293:
    v196 = 0;
    v14 = v189;
    result = v201;
    if (v203 != (_BYTE *)v201)
      goto LABEL_132;
LABEL_134:
    v66 = v196;
    if (!v196)
      goto LABEL_259;
    v67 = *((_DWORD *)v196 + 1);
    if (!v67)
    {
      v196 = 0;
LABEL_257:
      if (*(_DWORD *)v66 == 2)
      {
        v193 = v5;
        v195 = v16;
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(v66, (WTF::StringImpl *)a2);
        v5 = v193;
        v16 = v195;
        v15.i64[0] = 0x25002500250025;
        v15.i64[1] = 0x25002500250025;
        a3 = v190;
        continue;
      }
      *(_DWORD *)v66 -= 2;
LABEL_259:
      a3 = v190;
      continue;
    }
    break;
  }
  v188 = a4;
  if (v7 <= v191)
  {
    v71 = v14;
    v69 = 0x100000000;
    v72 = "";
    goto LABEL_147;
  }
  v68 = v20 - v191;
  if (v7 - v191 <= v20 - v191)
  {
    v68 = v7 - v191;
    if (!v191)
    {
      v71 = v14;
      v72 = (const char *)v8;
      v69 = v7;
      goto LABEL_147;
    }
  }
  v69 = v68;
  v70 = v11 - v191;
  if (!v12)
  {
    if (v70 < v69)
      goto LABEL_317;
    v71 = v14;
    v72 = (char *)v8 + 2 * v191;
LABEL_147:
    v32 = __CFADD__((_DWORD)v69, v67);
    v73 = v69 + v67;
    if (v32)
      v73 = -1;
    v32 = __CFADD__(v199, v73);
    v74 = v199 + v73;
    if (v32)
      v75 = 0xFFFFFFFFLL;
    else
      v75 = v74;
    v76 = v198;
    if (v198 || (v76 = v197) != 0)
    {
      if ((v69 & 0xFF00000000) != 0 && (*((_DWORD *)v76 + 4) & 4) != 0)
      {
LABEL_157:
        if ((*((_BYTE *)v196 + 16) & 4) == 0)
          goto LABEL_158;
        result = (WTF::StringImpl *)MEMORY[0x19AEA4824](&v197, v75);
        v15.i64[0] = 0x25002500250025;
        v15.i64[1] = 0x25002500250025;
        v5 = v192;
        v16 = v194;
        if (!result)
          goto LABEL_256;
        v86 = result;
        if ((v69 & 0xFF00000000) != 0)
        {
          if ((_DWORD)v69)
          {
            if ((_DWORD)v69 == 1)
            {
              *(_BYTE *)result = *v72;
            }
            else
            {
              v100 = v72;
              v101 = result;
              memcpy(result, v100, v69);
              v86 = v101;
              v5 = v192;
              v16 = v194;
              v15.i64[0] = 0x25002500250025;
              v15.i64[1] = 0x25002500250025;
            }
          }
LABEL_205:
          result = (WTF::StringImpl *)((char *)v86 + v69);
          a2 = *((_QWORD *)v66 + 1);
          v109 = *((unsigned int *)v66 + 1);
          if ((*((_BYTE *)v66 + 16) & 4) != 0)
          {
            if (!(_DWORD)v109)
              goto LABEL_256;
            if ((_DWORD)v109 == 1)
            {
              *(_BYTE *)result = *(_BYTE *)a2;
              goto LABEL_256;
            }
LABEL_255:
            result = (WTF::StringImpl *)memcpy(result, (const void *)a2, v109);
            v5 = v192;
            v16 = v194;
            v15.i64[0] = 0x25002500250025;
            v15.i64[1] = 0x25002500250025;
            goto LABEL_256;
          }
          if (v109 < 0x10)
          {
            v110 = (unint64_t)v86 + v69;
          }
          else
          {
            v110 = (unint64_t)result + (v109 & 0xFFFFFFF0);
            v111 = (_OWORD *)((char *)v86 + v69);
            do
            {
              *(int8x16x2_t *)(&a5 - 1) = vld2q_s8((const char *)a2);
              a2 += 32;
              *v111++ = v112;
            }
            while (v111 != (_OWORD *)v110);
          }
          if ((WTF::StringImpl *)v110 == (WTF::StringImpl *)((char *)result + v109))
            goto LABEL_256;
          v113 = (unint64_t)v86 + v109 + v69;
          v114 = v113 - v110;
          if (v113 - v110 < 8 || (v110 < a2 + 2 * v114 ? (v115 = a2 >= v113) : (v115 = 1), !v115))
          {
            v117 = (_BYTE *)v110;
            v118 = (char *)a2;
            goto LABEL_224;
          }
          if (v114 >= 0x20)
          {
            v116 = v114 & 0xFFFFFFFFFFFFFFE0;
            v155 = (int8x16_t *)(a2 + 32);
            v156 = (__n128 *)(v110 + 16);
            v157 = v114 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v159 = v155[-2];
              v158 = v155[-1];
              v161 = *v155;
              v160 = v155[1];
              v155 += 4;
              v162 = vuzp1q_s8(v159, v158);
              a5 = (__n128)vuzp1q_s8(v161, v160);
              v156[-1] = (__n128)v162;
              *v156 = a5;
              v156 += 2;
              v157 -= 32;
            }
            while (v157);
            if (v114 == v116)
              goto LABEL_256;
            if ((v114 & 0x18) == 0)
            {
              v118 = (char *)(a2 + 2 * v116);
              v117 = (_BYTE *)(v110 + v116);
              goto LABEL_224;
            }
          }
          else
          {
            v116 = 0;
          }
          v117 = (_BYTE *)(v110 + (v114 & 0xFFFFFFFFFFFFFFF8));
          v118 = (char *)(a2 + 2 * (v114 & 0xFFFFFFFFFFFFFFF8));
          v163 = (int16x8_t *)(a2 + 2 * v116);
          v164 = (int8x8_t *)(v110 + v116);
          v165 = v116 - (v114 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v166 = *v163++;
            *v164++ = vmovn_s16(v166);
            v165 += 8;
          }
          while (v165);
          if (v114 == (v114 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_256;
          do
          {
LABEL_224:
            v119 = *v118;
            v118 += 2;
            *v117++ = v119;
          }
          while (v117 != (char *)result + v109);
          goto LABEL_256;
        }
        if (v69 < 0x10)
        {
          v95 = (unint64_t)result;
        }
        else
        {
          v95 = (unint64_t)result + (v69 & 0xFFFFFFF0);
          v96 = result;
          do
          {
            *(int8x16x2_t *)(&a5 - 1) = vld2q_s8(v72);
            v72 += 32;
            *(_OWORD *)v96 = v97;
            v96 = (WTF::StringImpl *)((char *)v96 + 16);
          }
          while (v96 != (WTF::StringImpl *)v95);
        }
        v102 = (char *)result + v69;
        if ((char *)v95 == v102)
          goto LABEL_205;
        v103 = (unint64_t)result + v69 - v95;
        if (v103 < 8
          || (v95 < (unint64_t)&v72[2 * v103]
            ? (v104 = v72 >= (const char *)result + v69)
            : (v104 = 1),
              !v104))
        {
          v106 = (char *)v95;
          v107 = v72;
          goto LABEL_204;
        }
        if (v103 >= 0x20)
        {
          v105 = v103 & 0xFFFFFFFFFFFFFFE0;
          v167 = (int8x16_t *)(v72 + 32);
          v168 = (__n128 *)(v95 + 16);
          v169 = v103 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v171 = v167[-2];
            v170 = v167[-1];
            v173 = *v167;
            v172 = v167[1];
            v167 += 4;
            v174 = vuzp1q_s8(v171, v170);
            a5 = (__n128)vuzp1q_s8(v173, v172);
            v168[-1] = (__n128)v174;
            *v168 = a5;
            v168 += 2;
            v169 -= 32;
          }
          while (v169);
          if (v103 == v105)
            goto LABEL_205;
          if ((v103 & 0x18) == 0)
          {
            v107 = &v72[2 * v105];
            v106 = (char *)(v95 + v105);
            goto LABEL_204;
          }
        }
        else
        {
          v105 = 0;
        }
        v106 = (char *)(v95 + (v103 & 0xFFFFFFFFFFFFFFF8));
        v107 = &v72[2 * (v103 & 0xFFFFFFFFFFFFFFF8)];
        v175 = (int16x8_t *)&v72[2 * v105];
        v176 = (int8x8_t *)(v95 + v105);
        v177 = v105 - (v103 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v178 = *v175++;
          *v176++ = vmovn_s16(v178);
          v177 += 8;
        }
        while (v177);
        if (v103 == (v103 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_205;
        do
        {
LABEL_204:
          v108 = *v107;
          v107 += 2;
          *v106++ = v108;
        }
        while (v106 != v102);
        goto LABEL_205;
      }
    }
    else if ((v69 & 0xFF00000000) != 0)
    {
      goto LABEL_157;
    }
LABEL_158:
    result = (WTF::StringImpl *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v197);
    v15.i64[0] = 0x25002500250025;
    v15.i64[1] = 0x25002500250025;
    v5 = v192;
    v16 = v194;
    if (!result)
      goto LABEL_256;
    v77 = result;
    if ((v69 & 0xFF00000000) != 0)
    {
      if (v69 < 0x40)
      {
        v78 = (unint64_t)result;
      }
      else
      {
        v78 = (unint64_t)result + 2 * (v69 & 0xFFFFFFC0);
        v79 = (char *)result;
        do
        {
          v80 = *(_OWORD *)v72;
          v81 = *((int8x16_t *)v72 + 1);
          v206.val[0] = (int8x16_t)*((_OWORD *)v72 + 2);
          v82 = *((_OWORD *)v72 + 3);
          v72 += 64;
          v5 = v82;
          v206.val[1] = v194;
          v208.val[0] = v81;
          a5 = (__n128)v194;
          v83 = v79;
          vst2q_s8(v83, *(int8x16x2_t *)(&a5 - 1));
          v83 += 32;
          v208.val[1] = v194;
          vst2q_s8(v83, v208);
          v84 = v79 + 64;
          vst2q_s8(v84, v206);
          v85 = v79 + 96;
          vst2q_s8(v85, *(int8x16x2_t *)&v5);
          v79 += 128;
        }
        while (v79 != (char *)v78);
      }
      v87 = (_WORD *)((char *)result + 2 * v69);
      if ((_WORD *)v78 != v87)
      {
        v88 = (unint64_t)result + 2 * v69 - v78 - 2;
        if (v88 < 0xE
          || (v78 < (unint64_t)&v72[(v88 >> 1) + 1]
            ? (v89 = (unint64_t)v72 >= v78 + (v88 & 0xFFFFFFFFFFFFFFFELL) + 2)
            : (v89 = 1),
              !v89))
        {
          v92 = (_WORD *)v78;
          v93 = v72;
          goto LABEL_185;
        }
        v90 = (v88 >> 1) + 1;
        if (v88 >= 0x3E)
        {
          v91 = v90 & 0xFFFFFFFFFFFFFFE0;
          v120 = (uint8x8_t *)(v72 + 16);
          v121 = v78 + 32;
          v122 = v90 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v123 = *(uint8x16_t *)v120[-2].i8;
            v124 = vmovl_u8(*v120);
            a5 = (__n128)vmovl_high_u8(*(uint8x16_t *)v120->i8);
            *(uint16x8_t *)(v121 - 32) = vmovl_u8(*(uint8x8_t *)v123.i8);
            *(uint16x8_t *)(v121 - 16) = vmovl_high_u8(v123);
            *(uint16x8_t *)v121 = v124;
            *(__n128 *)(v121 + 16) = a5;
            v121 += 64;
            v120 += 4;
            v122 -= 32;
          }
          while (v122);
          if (v90 == v91)
            goto LABEL_233;
          if ((v90 & 0x18) == 0)
          {
            v93 = &v72[v91];
            v92 = (_WORD *)(v78 + 2 * v91);
            do
            {
LABEL_185:
              v94 = *(unsigned __int8 *)v93++;
              *v92++ = v94;
            }
            while (v92 != v87);
            goto LABEL_233;
          }
        }
        else
        {
          v91 = 0;
        }
        v92 = (_WORD *)(v78 + 2 * (v90 & 0xFFFFFFFFFFFFFFF8));
        v93 = &v72[v90 & 0xFFFFFFFFFFFFFFF8];
        v125 = (uint8x8_t *)&v72[v91];
        v126 = (uint16x8_t *)(v78 + 2 * v91);
        v127 = v91 - (v90 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v128 = *v125++;
          *v126++ = vmovl_u8(v128);
          v127 += 8;
        }
        while (v127);
        if (v90 != (v90 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_185;
      }
    }
    else if ((_DWORD)v69)
    {
      if ((_DWORD)v69 == 1)
      {
        *(_WORD *)result = *(_WORD *)v72;
      }
      else
      {
        v98 = v72;
        v99 = result;
        memcpy(result, v98, 2 * v69);
        v77 = v99;
        v5 = v192;
        v16 = v194;
        v15.i64[0] = 0x25002500250025;
        v15.i64[1] = 0x25002500250025;
      }
    }
LABEL_233:
    result = (WTF::StringImpl *)((char *)v77 + 2 * v69);
    a2 = *((_QWORD *)v66 + 1);
    v129 = *((unsigned int *)v66 + 1);
    if ((*((_BYTE *)v66 + 16) & 4) == 0)
    {
      if (!(_DWORD)v129)
        goto LABEL_256;
      if ((_DWORD)v129 == 1)
      {
        *(_WORD *)result = *(_WORD *)a2;
        goto LABEL_256;
      }
      v109 = 2 * v129;
      v192 = v5;
      v194 = v16;
      goto LABEL_255;
    }
    if (v129 < 0x40)
    {
      v130 = (unint64_t)v77 + 2 * v69;
    }
    else
    {
      v130 = (unint64_t)result + 2 * (v129 & 0xFFFFFFC0);
      v131 = (char *)v77 + 2 * v69;
      do
      {
        v132 = *(_OWORD *)a2;
        v133 = *(int8x16_t *)(a2 + 16);
        v207.val[0] = *(int8x16_t *)(a2 + 32);
        v134 = *(int8x16_t *)(a2 + 48);
        a2 += 64;
        v209.val[0] = v134;
        v207.val[1] = v16;
        v210.val[0] = v133;
        a5 = (__n128)v16;
        v135 = v131;
        vst2q_s8(v135, *(int8x16x2_t *)(&a5 - 1));
        v135 += 32;
        v209.val[1] = v16;
        v210.val[1] = v16;
        vst2q_s8(v135, v210);
        v136 = v131 + 64;
        vst2q_s8(v136, v207);
        v137 = v131 + 96;
        v131 += 128;
        vst2q_s8(v137, v209);
      }
      while (v131 != (char *)v130);
    }
    v138 = (_WORD *)((char *)result + 2 * v129);
    if ((_WORD *)v130 != v138)
    {
      v139 = (unint64_t)v77 + 2 * v129 + 2 * v69 - v130 - 2;
      if (v139 < 0xE
        || (v130 < a2 + (v139 >> 1) + 1 ? (v140 = a2 >= v130 + (v139 & 0xFFFFFFFFFFFFFFFELL) + 2) : (v140 = 1), !v140))
      {
        v143 = (_WORD *)v130;
        v144 = (unsigned __int8 *)a2;
        goto LABEL_252;
      }
      v141 = (v139 >> 1) + 1;
      if (v139 >= 0x3E)
      {
        v142 = v141 & 0xFFFFFFFFFFFFFFE0;
        v146 = (uint8x8_t *)(a2 + 16);
        v147 = v130 + 32;
        v148 = v141 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v149 = *(uint8x16_t *)v146[-2].i8;
          v150 = vmovl_u8(*v146);
          a5 = (__n128)vmovl_high_u8(*(uint8x16_t *)v146->i8);
          *(uint16x8_t *)(v147 - 32) = vmovl_u8(*(uint8x8_t *)v149.i8);
          *(uint16x8_t *)(v147 - 16) = vmovl_high_u8(v149);
          *(uint16x8_t *)v147 = v150;
          *(__n128 *)(v147 + 16) = a5;
          v147 += 64;
          v146 += 4;
          v148 -= 32;
        }
        while (v148);
        if (v141 == v142)
          goto LABEL_256;
        if ((v141 & 0x18) == 0)
        {
          v144 = (unsigned __int8 *)(a2 + v142);
          v143 = (_WORD *)(v130 + 2 * v142);
          do
          {
LABEL_252:
            v145 = *v144++;
            *v143++ = v145;
          }
          while (v143 != v138);
          goto LABEL_256;
        }
      }
      else
      {
        v142 = 0;
      }
      v143 = (_WORD *)(v130 + 2 * (v141 & 0xFFFFFFFFFFFFFFF8));
      v144 = (unsigned __int8 *)(a2 + (v141 & 0xFFFFFFFFFFFFFFF8));
      v151 = (uint8x8_t *)(a2 + v142);
      v152 = (uint16x8_t *)(v130 + 2 * v142);
      v153 = v142 - (v141 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v154 = *v151++;
        *v152++ = vmovl_u8(v154);
        v153 += 8;
      }
      while (v153);
      if (v141 != (v141 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_252;
    }
LABEL_256:
    v66 = v196;
    v196 = 0;
    v191 = v10;
    a4 = v188;
    v14 = v71;
    if (!v66)
      goto LABEL_259;
    goto LABEL_257;
  }
  if (v70 >= v69)
  {
    v71 = v14;
    v72 = (char *)v8 + v191;
    v69 |= 0x100000000uLL;
    goto LABEL_147;
  }
LABEL_317:
  __break(1u);
  return result;
}

uint64_t *PAL::UTF8Encoding(PAL *this)
{
  {
    WTF::NeverDestroyed<PAL::TextEncoding,WTF::AnyThreadsAccessTraits>::NeverDestroyed<char const(&)[6]>((uint64_t)&PAL::UTF8Encoding(void)::globalUTF8Encoding, (PAL *)"UTF-8");
  }
  return &PAL::UTF8Encoding(void)::globalUTF8Encoding;
}

WTF::StringImpl *WTF::String::substring@<X0>(WTF::StringImpl **this@<X0>, int a2@<W1>, unsigned int a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  WTF::StringImpl *result;

  result = *this;
  if (result)
  {
    if (a2 || *((_DWORD *)result + 1) > a3)
    {
      return (WTF::StringImpl *)WTF::StringImpl::substring(result);
    }
    else
    {
      *(_DWORD *)result += 2;
      *a4 = result;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

uint64_t WebCore::skipSpaces(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *a3;
  if (v3 < a2)
  {
    if ((a2 & 0xFF00000000) != 0)
    {
      v8 = (unsigned __int8 *)(result + v3);
      do
      {
        v9 = *v8++;
        v10 = (1 << v9) & 0x100002600;
        if (v9 > 0x20 || v10 == 0)
          break;
        LODWORD(v3) = v3 + 1;
        *a3 = v3;
      }
      while ((_DWORD)a2 != (_DWORD)v3);
    }
    else
    {
      v4 = (unsigned __int16 *)(result + 2 * v3);
      do
      {
        v5 = *v4++;
        v6 = (1 << v5) & 0x100002600;
        if (v5 > 0x20 || v6 == 0)
          break;
        LODWORD(v3) = v3 + 1;
        *a3 = v3;
      }
      while ((_DWORD)a2 != (_DWORD)v3);
    }
  }
  return result;
}

void WebCore::OpportunisticTaskScheduler::rescheduleIfNeeded(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __CFRunLoopObserver *v7;
  const void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
LABEL_18:
    v5 = 1;
    goto LABEL_4;
  }
  v5 = 0;
  ++*(_DWORD *)v4;
LABEL_4:
  if (!*(_BYTE *)(v4 + 1776)
    && (~*(unsigned __int16 *)(v4 + 658) & 5) == 0
    && (*(_BYTE *)(a1 + 56) || (*(_QWORD *)(*(_QWORD *)(v4 + 112) + 688) & 0x200000) != 0))
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(double *)(a1 + 40) = a2;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(__CFRunLoopObserver **)(v6 + 16);
    if (v7)
    {
      CFRunLoopObserverInvalidate(v7);
      v8 = *(const void **)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v8)
        CFRelease(v8);
    }
    v9 = *(_QWORD *)(a1 + 48);
    if (!*(_QWORD *)(v9 + 16))
      WebCore::RunLoopObserver::schedule(v9, 0, 5);
  }
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Page::~Page(v4);
      WTF::fastFree(v10, v11);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
}

WTF::StringImpl *WebCore::ResourceLoader::start(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  WebCore::DocumentLoader *v2;
  char v3;
  uint64_t v4;
  WebCore::ApplicationCacheHost *v5;
  char v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::ResourceHandle *v16;
  _DWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  void *v26;
  WebCore::ResourceHandle *v27;
  int v28[2];
  WebCore::ResourceHandle *v29;
  WTF *v30;

  v1 = this;
  v2 = (WebCore::DocumentLoader *)*((_QWORD *)this + 5);
  if (!v2)
    goto LABEL_64;
  ++*((_DWORD *)v2 + 6);
  this = (WTF::StringImpl *)WebCore::DocumentLoader::scheduleArchiveLoad(v2, this, (WTF::StringImpl *)((char *)this + 336));
  v3 = (char)this;
  if (*((_DWORD *)v2 + 6) == 1)
    this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::DocumentLoader *))(*(_QWORD *)v2 + 24))(v2);
  else
    --*((_DWORD *)v2 + 6);
  if ((v3 & 1) == 0)
  {
    v4 = *((_QWORD *)v1 + 5);
    if (!v4)
      goto LABEL_64;
    ++*(_DWORD *)(v4 + 24);
    v5 = *(WebCore::ApplicationCacheHost **)(v4 + 2872);
    if ((*((_BYTE *)v1 + 520) & 1) == 0)
    {
      WebCore::ResourceRequest::doUpdateResourceRequest((WTF::StringImpl *)((char *)v1 + 336));
      *((_BYTE *)v1 + 520) |= 1u;
    }
    this = (WTF::StringImpl *)WebCore::ApplicationCacheHost::maybeLoadResource(v5, v1, (WTF::StringImpl *)((char *)v1 + 336), (const WTF::StringImpl **)v1 + 42);
    v6 = (char)this;
    if (*(_DWORD *)(v4 + 24) == 1)
      this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      --*(_DWORD *)(v4 + 24);
    if ((v6 & 1) == 0)
    {
LABEL_64:
      if (*((_BYTE *)v1 + 760))
      {
        return (WTF::StringImpl *)WebCore::ResourceRequest::operator=((uint64_t)v1 + 768, (uint64_t)v1 + 336);
      }
      else if (!*((_BYTE *)v1 + 752))
      {
        if ((*((_BYTE *)v1 + 520) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WTF::StringImpl *)((char *)v1 + 336));
          *((_BYTE *)v1 + 520) |= 1u;
        }
        if (WTF::URL::protocolIs())
        {
          return WebCore::ResourceLoader::loadDataURL(v1);
        }
        else
        {
          v7 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v1 + 184))(v1);
          if (v7)
            v9 = v1;
          else
            v9 = 0;
          if (v9)
            ++*((_DWORD *)v9 + 4);
          if (v7 && (v10 = (unsigned int *)*((_QWORD *)v1 + 171)) != 0)
          {
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 + 1, v10));
            v30 = (WTF *)v10;
          }
          else
          {
            v30 = 0;
            v22 = *((_QWORD *)v1 + 4);
            if (v22)
            {
              v23 = *(_QWORD *)(v22 + 280);
              if (v23)
              {
                v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 296);
                if (v24)
                {
                  *(_DWORD *)(v24 + 24) += 2;
                  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v24 + 192), v8);
                  WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=((unsigned int **)&v30, v25);
                  if (*(_DWORD *)(v24 + 24) == 2)
                  {
                    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v24, v26);
                  }
                  else
                  {
                    *(_DWORD *)(v24 + 24) -= 2;
                  }
                }
                else
                {
                  WTF::RefPtr<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::operator=((unsigned int **)&v30, 0);
                }
              }
            }
          }
          v12 = *((_QWORD *)v1 + 4);
          if (v12)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 128) + 8) == v12 && *((_BYTE *)v1 + 977) == 0;
            v14 = *(_QWORD *)(v12 + 280);
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
          WebCore::FrameLoader::protectedNetworkingContext(v14, v28);
          WebCore::ResourceHandle::create((WTF::StringImpl *)((char *)v1 + 336), *(uint64_t *)v28, (uint64_t)v1, *((_BYTE *)v1 + 760), (*(_DWORD *)((_BYTE *)v1 + 1090) & 2) == 0, (*(_DWORD *)((_BYTE *)v1 + 1090) & 4) != 0, (uint64_t *)&v30, v13, &v29);
          v16 = v29;
          v29 = 0;
          v17 = (_DWORD *)*((_QWORD *)v1 + 3);
          *((_QWORD *)v1 + 3) = v16;
          if (v17)
          {
            if (v17[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 48))(v17);
              v27 = v29;
              v29 = 0;
              if (v27)
              {
                if (*((_DWORD *)v27 + 2) == 1)
                  (*(void (**)(WebCore::ResourceHandle *))(*(_QWORD *)v27 + 48))(v27);
                else
                  --*((_DWORD *)v27 + 2);
              }
            }
            else
            {
              --v17[2];
              v29 = 0;
            }
          }
          v18 = *(unsigned int **)v28;
          *(_QWORD *)v28 = 0;
          if (v18)
          {
            v19 = v18 + 2;
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v18 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
            }
          }
          this = v30;
          v30 = 0;
          if (this)
            this = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)this, v15);
          if (v9)
          {
            if (*((_DWORD *)v9 + 4) == 1)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
            else
              --*((_DWORD *)v9 + 4);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::DocumentLoader::scheduleArchiveLoad(WebCore::DocumentLoader *this, WebCore::ResourceLoader *a2, const WebCore::ResourceRequest *a3)
{
  WebCore::ArchiveResourceCollection *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::SubstituteResource *v10;

  if ((*((_BYTE *)a3 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a3);
    *((_BYTE *)a3 + 184) |= 1u;
  }
  v6 = (WebCore::ArchiveResourceCollection *)*((_QWORD *)this + 332);
  if (v6)
  {
    v10 = (WebCore::SubstituteResource *)WebCore::ArchiveResourceCollection::archiveResourceForURL(v6, (WTF::StringImpl **)a3, a3);
    if (v10)
    {
      if (!*((_BYTE *)v10 + 352))
      {
        WebCore::DocumentLoader::scheduleSubstituteResourceLoad(this, a2, v10);
        return 1;
      }
    }
  }
  v7 = *((_QWORD *)this + 333);
  if (!v7)
    return 0;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 136) + 720) & 8) != 0)
  {
    v8 = 1;
    WebCore::ResourceResponse::platformLazyInit((uint64_t)this + 1272, 1);
    if ((MEMORY[0x19AEA53F4](*((_QWORD *)this + 164), "application/x-webarchive", 24) & 1) != 0)
      return v8;
    v7 = *((_QWORD *)this + 333);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
}

uint64_t WebCore::DisplayList::DrawGlyphs::DrawGlyphs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _QWORD *a6, char a7)
{
  uint64_t IdentifierInternal;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(a2 + 248))
  {
    IdentifierInternal = *(_QWORD *)(a2 + 240);
  }
  else
  {
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
      goto LABEL_18;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (!*(_BYTE *)(a2 + 248))
      *(_BYTE *)(a2 + 248) = 1;
    *(_QWORD *)(a2 + 240) = IdentifierInternal;
  }
  *(_QWORD *)a1 = IdentifierInternal;
  if (!a5)
  {
    v16 = 0;
    v18 = 0;
    goto LABEL_10;
  }
  if ((a5 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19426ACECLL);
  }
  v15 = WTF::fastMalloc((WTF *)(2 * a5));
  v16 = v15;
  v17 = 0;
  do
  {
    *(_WORD *)(v15 + v17) = *(_WORD *)(a3 + v17);
    v17 += 2;
  }
  while (2 * a5 != v17);
  if (a5 >> 28)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19426ACE4);
  }
  v18 = WTF::fastMalloc((WTF *)(16 * a5));
  v19 = 0;
  do
  {
    *(_OWORD *)(v18 + v19) = *(_OWORD *)(a4 + v19);
    v19 += 16;
  }
  while (16 * a5 != v19);
LABEL_10:
  *(_QWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a5;
  *(_QWORD *)(a1 + 24) = v18;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a5;
  *(_QWORD *)(a1 + 40) = *a6;
  *(_BYTE *)(a1 + 48) = a7;
  return a1;
}

{
  uint64_t IdentifierInternal;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(a2 + 248))
  {
    IdentifierInternal = *(_QWORD *)(a2 + 240);
  }
  else
  {
    if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
      goto LABEL_18;
    IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
    if (!*(_BYTE *)(a2 + 248))
      *(_BYTE *)(a2 + 248) = 1;
    *(_QWORD *)(a2 + 240) = IdentifierInternal;
  }
  *(_QWORD *)a1 = IdentifierInternal;
  if (!a5)
  {
    v16 = 0;
    v18 = 0;
    goto LABEL_10;
  }
  if ((a5 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19623E1D8);
  }
  v15 = WTF::fastMalloc((WTF *)(2 * a5));
  v16 = v15;
  v17 = 0;
  do
  {
    *(_WORD *)(v15 + v17) = *(_WORD *)(a3 + v17);
    v17 += 2;
  }
  while (2 * a5 != v17);
  if (a5 >> 28)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x19623E1D0);
  }
  v18 = WTF::fastMalloc((WTF *)(16 * a5));
  v19 = 0;
  do
  {
    *(_OWORD *)(v18 + v19) = *(_OWORD *)(a4 + v19);
    v19 += 16;
  }
  while (16 * a5 != v19);
LABEL_10:
  *(_QWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = a5;
  *(_QWORD *)(a1 + 24) = v18;
  *(_DWORD *)(a1 + 32) = a5;
  *(_DWORD *)(a1 + 36) = a5;
  *(_QWORD *)(a1 + 40) = *a6;
  *(_BYTE *)(a1 + 48) = a7;
  return a1;
}

uint64_t WebCore::DisplayList::Recorder::Recorder(uint64_t a1, char a2, uint64_t *a3, const WebCore::FloatRect *a4, long double *a5, const void **a6, int a7)
{
  float v14;
  const void *v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  _BYTE v28[344];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[344];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState(a1 + 8, a3);
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = *(_BYTE *)(a1 + 716) & 0xFC | a2;
  *(_QWORD *)a1 = off_1E3413140;
  *(_QWORD *)(a1 + 720) = a1 + 736;
  *(_QWORD *)(a1 + 728) = 4;
  *(_QWORD *)(a1 + 3776) = 0;
  v14 = hypot(*a5, a5[1]);
  *(float *)(a1 + 3784) = v14;
  v15 = *a6;
  *(_QWORD *)(a1 + 3792) = *a6;
  if (v15)
    CFRetain(v15);
  *(_DWORD *)(a1 + 3800) = a7;
  *(_OWORD *)(a1 + 3804) = *(_OWORD *)a4;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v28, a3);
  v16 = *((_OWORD *)a5 + 1);
  v29 = *(_OWORD *)a5;
  v30 = v16;
  v31 = *((_OWORD *)a5 + 2);
  LODWORD(v32) = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)a5, a4);
  *(_QWORD *)((char *)&v32 + 4) = __PAIR64__(v18, v17);
  HIDWORD(v32) = v19;
  v33[0] = 0;
  v34 = 0;
  v20 = *(_DWORD *)(a1 + 732);
  if (v20 == *(_DWORD *)(a1 + 728))
  {
    WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::DisplayList::Recorder::ContextState>(a1 + 720, (unint64_t)v28);
  }
  else
  {
    v21 = WebCore::GraphicsContextState::GraphicsContextState(*(_QWORD *)(a1 + 720) + 760 * v20, (uint64_t)v28);
    v23 = v29;
    v24 = v30;
    v25 = v32;
    *(_OWORD *)(v21 + 376) = v31;
    *(_OWORD *)(v21 + 392) = v25;
    *(_OWORD *)(v21 + 344) = v23;
    *(_OWORD *)(v21 + 360) = v24;
    *(_BYTE *)(v21 + 408) = 0;
    *(_BYTE *)(v21 + 752) = 0;
    if (v34)
    {
      v26 = (_BYTE *)(v21 + 752);
      WebCore::GraphicsContextState::GraphicsContextState(v21 + 408, (uint64_t)v33);
      *v26 = 1;
    }
    ++*(_DWORD *)(a1 + 732);
  }
  if (v34)
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v33, v22);
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v28, v22);
  return a1;
}

void WebCore::TileGrid::platformCALayerPaintContents(uint64_t a1, WebCore::GraphicsContext *a2, WebCore::PlatformCALayer *a3, uint64_t a4, unsigned __int8 a5)
{
  double v9;
  float v10;
  void *v11;
  WTF *v12;
  WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _BOOL4 v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  const void *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  WTF *v54;
  const void *v55;
  const void *v56;
  WTF *v57;
  BOOL v58;
  int v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  const void **v64;
  const void *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;

  if (pthread_main_np())
    WebThreadLock();
  if ((a5 & 2) == 0)
    a5 |= (*(unsigned int (**)(uint64_t, WebCore::GraphicsContext *))(*(_QWORD *)a1 + 80))(a1, a2) == 0;
  (*(void (**)(WebCore::PlatformCALayer *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v9 = (*(double (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 264))(a2);
  (*(void (**)(WebCore::PlatformCALayer *, float, float))(*(_QWORD *)a3 + 648))(a3, -*(float *)&v9, -v10);
  LODWORD(v75) = *(_DWORD *)(a1 + 176);
  HIDWORD(v75) = (_DWORD)v75;
  (*(void (**)(WebCore::PlatformCALayer *, WTF **))(*(_QWORD *)a3 + 632))(a3, &v75);
  WebCore::PlatformCALayer::collectRectsToPaint(a3, a2, (uint64_t)&v75);
  WebCore::PlatformCALayer::drawLayerContents(a3, *(_QWORD **)(*(_QWORD *)(a1 + 16) + 16), (uint64_t *)&v75, a5);
  v12 = v75;
  if (&v77 != (uint64_t *)v75 && v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v12, v11);
  }
  (*(void (**)(WebCore::PlatformCALayer *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
  v13 = (WTF::String *)(*(uint64_t (**)(uint64_t, WebCore::GraphicsContext *))(*(_QWORD *)a1 + 88))(a1, a2);
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48);
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 320);
    v74 = v15;
    if ((v15 & 0x8000000000000) != 0)
    {
      v66 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
    }
    WebCore::PlatformCALayer::drawRepaintIndicator(a3, (_QWORD **)a2, v13, &v74);
    if ((v74 & 0x8000000000000) != 0)
    {
      v68 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        atomic_store(1u, v68);
        WTF::fastFree((WTF *)v68, v16);
      }
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 306))
  {
    v17 = (*(float (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 264))(a2);
    (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 264))(a2);
    v19 = v18;
    (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 248))(a2);
    v21 = v20;
    (*(void (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 248))(a2);
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(float *)(v23 + 72);
    v25 = *(float *)(v23 + 76);
    if (v17 >= v24)
      v26 = v17;
    else
      v26 = *(float *)(v23 + 72);
    if (v19 >= v25)
      v27 = v19;
    else
      v27 = *(float *)(v23 + 76);
    v28 = v24 + *(float *)(v23 + 80);
    if (v28 >= (float)(v17 + v21))
      v28 = v17 + v21;
    v29 = v19 + v22;
    v30 = v25 + *(float *)(v23 + 84);
    if (v30 < v29)
      v29 = v30;
    if (v26 >= v28 || v27 >= v29)
    {
      v26 = 0.0;
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
    }
    if ((_DWORD)v13 == 1 && (float)(v28 - v26) > 0.0 && (float)(v29 - v27) > 0.0)
    {
      v32 = *(_QWORD *)(a1 + 32);
      if (v32)
      {
        v33 = *(unsigned int *)(v32 - 12);
        v75 = 0;
        LODWORD(v76) = 0;
        HIDWORD(v76) = v33;
        if ((_DWORD)v33)
        {
          if (v33 >> 29)
          {
LABEL_105:
            __break(0xC471u);
            JUMPOUT(0x19426B43CLL);
          }
          v34 = (WTF *)WTF::fastMalloc((WTF *)(8 * v33));
          LODWORD(v76) = v33;
          v75 = v34;
          bzero(v34, 8 * v33);
          v35 = *(_QWORD *)(a1 + 32);
          if (v35 && *(_DWORD *)(v35 - 12))
          {
            v36 = *(unsigned int *)(v35 - 4);
            if ((_DWORD)v36)
            {
              v37 = 24 * v36;
              v38 = *(_QWORD *)(a1 + 32);
              while (1)
              {
                v39 = !*(_DWORD *)v38 && *(_DWORD *)(v38 + 4) == 0x80000000;
                v40 = v39;
                if (*(_DWORD *)v38 != 0x80000000 && !v40)
                  break;
                v38 += 24;
                v37 -= 24;
                if (!v37)
                  goto LABEL_85;
              }
            }
            else
            {
              v38 = *(_QWORD *)(a1 + 32);
            }
            v42 = v35 + 24 * v36;
            if (v42 != v38)
            {
              v43 = v33;
              v72 = v35 + 24 * v36;
              do
              {
                v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v38 + 8) + 40))(*(_QWORD *)(v38 + 8));
                if (!v44)
                  goto LABEL_71;
                v45 = (const void *)v44;
                if ((_DWORD)v33 == v43)
                {
                  v46 = v33 + ((unint64_t)v33 >> 2);
                  if (v46 >= 0x10)
                    v47 = v46 + 1;
                  else
                    v47 = 16;
                  if (v47 <= (unint64_t)v33 + 1)
                    v48 = v33 + 1;
                  else
                    v48 = v47;
                  if (v48 >> 29)
                    goto LABEL_105;
                  v49 = (WTF *)WTF::fastMalloc((WTF *)(8 * v48));
                  v51 = v49;
                  v73 = v48;
                  LODWORD(v76) = v48;
                  v75 = v49;
                  if ((_DWORD)v33)
                  {
                    v52 = 8 * v33;
                    v53 = v49;
                    v54 = v34;
                    do
                    {
                      v55 = *(const void **)v54;
                      *(_QWORD *)v54 = 0;
                      *(_QWORD *)v53 = v55;
                      v56 = *(const void **)v54;
                      *(_QWORD *)v54 = 0;
                      if (v56)
                      {
                        v71 = v51;
                        CFRelease(v56);
                        v51 = v71;
                      }
                      v53 = (WTF *)((char *)v53 + 8);
                      v54 = (WTF *)((char *)v54 + 8);
                      v52 -= 8;
                    }
                    while (v52);
                  }
                  if (v34)
                  {
                    v42 = v72;
                    v43 = v73;
                    if (v51 == v34)
                    {
                      v51 = 0;
                      v43 = 0;
                      v75 = 0;
                      LODWORD(v76) = 0;
                    }
                    v57 = v34;
                    v34 = v51;
                    WTF::fastFree(v57, v50);
                  }
                  else
                  {
                    v34 = v51;
                    v42 = v72;
                    v43 = v73;
                  }
                }
                *((_QWORD *)v34 + v33) = v45;
                CFRetain(v45);
                LODWORD(v33) = v33 + 1;
                HIDWORD(v76) = v33;
                do
                {
LABEL_71:
                  v38 += 24;
                  if (v38 == v42)
                    goto LABEL_84;
                  if (*(_DWORD *)v38)
                    v58 = 0;
                  else
                    v58 = *(_DWORD *)(v38 + 4) == 0x80000000;
                  v59 = v58;
                }
                while (*(_DWORD *)v38 == 0x80000000 || v59 != 0);
              }
              while (v38 != v42);
LABEL_84:
              v34 = v75;
            }
          }
        }
        else
        {
          v34 = 0;
        }
      }
      else
      {
        v34 = 0;
        v75 = 0;
        v76 = 0;
      }
LABEL_85:
      v79 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 72);
      v78 = 0;
      v62 = WebCore::TileController::blankPixelCountForTiles((uint64_t)&v75, (float *)&v79, (int *)&v78);
      if (HIDWORD(v76))
      {
        v63 = 8 * HIDWORD(v76);
        v64 = (const void **)v34;
        do
        {
          v65 = *v64;
          *v64 = 0;
          if (v65)
            CFRelease(v65);
          ++v64;
          v63 -= 8;
        }
        while (v63);
      }
      if (v34)
        WTF::fastFree(v34, v61);
      if (!*(_DWORD *)(v23 + 316))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v23 + 16) + 48) + 216))(*(_QWORD *)(*(_QWORD *)(v23 + 16) + 48), v62);
    }
  }
}

WTF::StringImpl *WebCore::PlatformCALayer::drawLayerContents(WTF::StringImpl *result, _QWORD *a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  WebCore::GraphicsContext *v8;
  PAL *FontAntialiasingStyle;
  int v10;
  PAL *v11;
  PAL *v12;
  CGContext *v13;
  uint64_t v14;
  int v15;
  WebCore::GraphicsContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::String *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;

  v4 = a2[6];
  if (v4)
  {
    v5 = a4;
    v8 = result;
    if ((a4 & 2) == 0)
      v5 = ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 80))(a2[6], a2) == 0) | a4;
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
    FontAntialiasingStyle = (PAL *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)v8 + 16))(v8);
    v10 = (int)FontAntialiasingStyle;
    if ((_DWORD)FontAntialiasingStyle)
    {
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
      v11 = (PAL *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)v8 + 24))(v8);
      v12 = v11;
      if (!v11 || (PAL *)PAL::softLinkUIKitUIGraphicsGetCurrentContext(v11) == v11)
      {
        v22 = 0;
      }
      else
      {
        PAL::softLinkUIKitUIGraphicsPushContext(v12, v13);
        v22 = 1;
      }
      v14 = (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)v8 + 24))(v8);
      WKSetCurrentGraphicsContext(v14);
      v24 = objc_msgSend((id)(*(uint64_t (**)(_QWORD *))(*a2 + 40))(a2), "isOpaque");
      +[WAKWindow hasLandscapeOrientation](WAKWindow, "hasLandscapeOrientation");
      FontAntialiasingStyle = (PAL *)CGContextGetFontAntialiasingStyle();
      if (v24)
      {
        v23 = 0;
        FontAntialiasingStyle = (PAL *)CGContextSetFontAntialiasingStyle();
      }
      else
      {
        v23 = 1;
      }
      v16 = v8;
      v15 = v22;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v17 = *((unsigned int *)a3 + 3);
    if ((_DWORD)v17 == 1)
    {
      FontAntialiasingStyle = (PAL *)(*(uint64_t (**)(uint64_t, _QWORD *, WebCore::GraphicsContext *, _QWORD, _QWORD))(*(_QWORD *)v4 + 56))(v4, a2, v8, *a3, v5);
    }
    else if ((_DWORD)v17)
    {
      v18 = *a3;
      v19 = 16 * v17;
      do
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 1);
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 456))(v8, v18);
        (*(void (**)(uint64_t, _QWORD *, WebCore::GraphicsContext *, uint64_t, _QWORD))(*(_QWORD *)v4 + 56))(v4, a2, v8, v18, v5);
        FontAntialiasingStyle = (PAL *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
        v18 += 16;
        v19 -= 16;
      }
      while (v19);
    }
    if (((v23 | v10 ^ 1) & 1) == 0)
      FontAntialiasingStyle = (PAL *)CGContextSetFontAntialiasingStyle();
    if (v10)
    {
      if (v15)
        PAL::softLinkUIKitUIGraphicsPopContext(FontAntialiasingStyle);
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v16 + 104))(v16, 1);
    }
    result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v8 + 104))(v8, 1);
    v20 = a2[6];
    if (v20)
    {
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v20 + 88))(a2[6], a2);
      if ((*((_BYTE *)a2 + 12) & 0xFE) != 4)
      {
        v21 = result;
        result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 72))(v20, a2);
        if ((_DWORD)result)
        {
          v25 = 0;
          return WebCore::PlatformCALayer::drawRepaintIndicator(v8, (_QWORD **)a2, v21, &v25);
        }
      }
    }
  }
  return result;
}

void sub_19426B7A0(PAL *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10;

  if (a10)
    PAL::softLinkUIKitUIGraphicsPopContext(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, 1);
  _Unwind_Resume((_Unwind_Exception *)a1);
}

uint64_t WebCore::GradientImage::draw(uint64_t a1, uint64_t a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  _QWORD v19[2];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*(unsigned __int8 *)(a2 + 194) != v10 || *(unsigned __int8 *)(a2 + 195) != v11)
  {
    *(_WORD *)(a2 + 194) = v10 | ((_WORD)v11 << 8);
    *(_DWORD *)(a2 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
  (*(void (**)(uint64_t, float *))(*(_QWORD *)a2 + 456))(a2, a3);
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    *(float *)v19 = v13 / v15;
    *((float *)v19 + 1) = v14 / v16;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 632))(a2, v19);
  }
  (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  v19[0] = 0;
  v19[1] = *(_QWORD *)(a1 + 64);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a2 + 240))(a2, v19, *(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return 3;
}

uint64_t WebCore::DisplayList::Recorder::restore(uint64_t result, void *a2)
{
  unsigned int v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _DWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  unint64_t v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  void *v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int *v193;
  unsigned int v194;
  void *v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  __int128 v204;
  __int128 v205;

  v2 = *(_DWORD *)(result + 732);
  if (!v2)
  {
    __break(0xC471u);
    goto LABEL_320;
  }
  v3 = (_BYTE *)result;
  v4 = *(_QWORD *)(result + 720);
  v5 = v4 + 760 * v2 - 760;
  v7 = (int *)(v4 + 760 * v2 - 584);
  v6 = *v7;
  if (!*v7)
    goto LABEL_65;
  if ((v6 & 0xFFFFFFF2) == 0 && ((v6 & 4) == 0 || !*(_DWORD *)(v5 + 168) && (*(_BYTE *)(v5 + 94) & 8) == 0))
  {
    if ((v6 & 1) == 0)
      goto LABEL_8;
    if (!*(_DWORD *)(v5 + 80) && (*(_BYTE *)(v5 + 6) & 8) == 0)
    {
      if ((*(_QWORD *)(result + 8) & 0x8000000000000) != 0)
        goto LABEL_320;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 784))(result, *(_QWORD *)(result + 8));
      v6 = *v7;
LABEL_8:
      if ((v6 & 0xC) == 0)
        goto LABEL_15;
      if ((v6 & 4) == 0)
      {
        v11 = 0;
        v10 = 0;
        v12 = 0;
        v9 = *((_DWORD *)v3 + 47);
        goto LABEL_13;
      }
      v8 = *((_QWORD *)v3 + 12);
      if ((v6 & 8) != 0)
      {
        if ((v8 & 0x8000000000000) == 0)
        {
          v9 = *((_DWORD *)v3 + 47);
          v10 = 0x100000000;
          v11 = *((_QWORD *)v3 + 12);
          v12 = v8 & 0xFFFFFF00;
LABEL_13:
          v13 = 0x100000000;
LABEL_14:
          *(_QWORD *)&v205 = v11 | (unint64_t)v10 | v12 & 0xFFFFFF00;
          *((_QWORD *)&v205 + 1) = v13 | v9;
          result = (*(uint64_t (**)(_BYTE *, __int128 *))(*(_QWORD *)v3 + 792))(v3, &v205);
          goto LABEL_15;
        }
      }
      else if ((v8 & 0x8000000000000) == 0)
      {
        v9 = 0;
        v13 = 0;
        v10 = 0x100000000;
        v11 = *((_QWORD *)v3 + 12);
        v12 = v8 & 0xFFFFFF00;
        goto LABEL_14;
      }
LABEL_320:
      __break(1u);
      goto LABEL_321;
    }
  }
  if ((v6 & 1) != 0)
  {
    v126 = *(_DWORD *)(result + 88);
    if (v126 == 1)
    {
      if (!*(_DWORD *)(result + 32))
      {
        v128 = *(_QWORD *)(result + 24);
        if (v128)
        {
          if (*(_BYTE *)(v128 + 40))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 1360))(result, v128);
        }
      }
    }
    else if (v126 == 2)
    {
      v127 = *(_QWORD *)(result + 24);
      if (v127)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 1336))(result, v127 + 8);
    }
  }
  if ((*(_BYTE *)v7 & 4) != 0)
  {
    v129 = *((_DWORD *)v3 + 44);
    if (v129 == 1)
    {
      if (!*((_DWORD *)v3 + 30))
      {
        v131 = *((_QWORD *)v3 + 14);
        if (v131)
        {
          if (*(_BYTE *)(v131 + 40))
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 1360))(v3, v131);
        }
      }
    }
    else if (v129 == 2)
    {
      v130 = *((_QWORD *)v3 + 14);
      if (v130)
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 1336))(v3, v130 + 8);
    }
  }
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 800))(v3, v5);
LABEL_15:
  *v7 = 0;
  v14 = *((_DWORD *)v3 + 183);
  if (!v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19426CB3CLL);
  }
  v15 = *((_QWORD *)v3 + 90) + 760 * v14;
  v16 = v15 - 352;
  v17 = (void *)(v15 - 336);
  if (*(_BYTE *)(v15 - 8))
  {
    v18 = *(_QWORD *)v16;
    v19 = *(_QWORD *)v5;
    if ((*(_QWORD *)v16 & 0x8000000000000) != 0)
    {
      if ((v19 & 0x8000000000000) != 0)
      {
        v178 = v17;
        v205 = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4);
        v204 = *(_OWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204);
        v18 = *(_QWORD *)v16;
        if ((_DWORD)result && HIBYTE(v18) == HIBYTE(*(_QWORD *)v5))
        {
          v17 = v178;
          if (BYTE6(v18) == BYTE6(*(_QWORD *)v5))
            goto LABEL_23;
        }
        else
        {
          v17 = v178;
        }
      }
    }
    else if (v18 == v19 && (v19 & 0x8000000000000) == 0)
    {
      goto LABEL_23;
    }
    if ((v18 & 0x8000000000000) != 0)
    {
      v195 = v17;
      result = v18 & 0xFFFFFFFFFFFFLL;
      do
      {
        v196 = __ldaxr((unsigned int *)result);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, (unsigned int *)result));
      if (!v197)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v17);
        v17 = v195;
      }
    }
    v192 = *(_QWORD *)v5;
    *(_QWORD *)v16 = *(_QWORD *)v5;
    if ((v192 & 0x8000000000000) != 0)
    {
      v193 = (unsigned int *)(v192 & 0xFFFFFFFFFFFFLL);
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 + 1, v193));
    }
LABEL_23:
    v21 = *(unsigned int *)(v16 + 80);
    v22 = *(unsigned int *)(v5 + 80);
    if ((_DWORD)v21 == -1)
    {
      if ((_DWORD)v22 != -1)
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)v22 != -1)
      {
LABEL_25:
        *(_QWORD *)&v205 = v17;
        result = ((uint64_t (*)(__int128 *))off_1E3413D80[v22])(&v205);
        goto LABEL_26;
      }
      result = ((uint64_t (*)(__int128 *, void *))off_1E3413D08[v21])(&v205, v17);
      *(_DWORD *)(v16 + 80) = -1;
    }
LABEL_26:
    v23 = *(_QWORD *)(v16 + 88);
    v24 = *(_QWORD *)(v5 + 88);
    if ((v23 & 0x8000000000000) != 0)
    {
      if ((v24 & 0x8000000000000) != 0)
      {
        v205 = *(_OWORD *)((v23 & 0xFFFFFFFFFFFFLL) + 4);
        v204 = *(_OWORD *)((v24 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204);
        v23 = *(_QWORD *)(v16 + 88);
        if ((_DWORD)result)
        {
          v179 = *(_QWORD *)(v5 + 88);
          if (HIBYTE(v23) == HIBYTE(v179) && BYTE6(v23) == BYTE6(v179))
            goto LABEL_29;
        }
      }
    }
    else if (v23 == v24 && (v24 & 0x8000000000000) == 0)
    {
      goto LABEL_29;
    }
    if ((v23 & 0x8000000000000) != 0)
    {
      result = v23 & 0xFFFFFFFFFFFFLL;
      do
      {
        v183 = __ldaxr((unsigned int *)result);
        v184 = v183 - 1;
      }
      while (__stlxr(v184, (unsigned int *)result));
      if (!v184)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v17);
      }
    }
    v180 = *(_QWORD *)(v5 + 88);
    *(_QWORD *)(v16 + 88) = v180;
    if ((v180 & 0x8000000000000) != 0)
    {
      v181 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFLL);
      do
        v182 = __ldaxr(v181);
      while (__stlxr(v182 + 1, v181));
    }
LABEL_29:
    v25 = (void *)(v16 + 104);
    v26 = *(unsigned int *)(v16 + 168);
    v27 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v26 == -1)
    {
      if ((_DWORD)v27 != -1)
        goto LABEL_31;
    }
    else
    {
      if ((_DWORD)v27 != -1)
      {
LABEL_31:
        *(_QWORD *)&v205 = v16 + 104;
        result = ((uint64_t (*)(__int128 *))off_1E3413D80[v27])(&v205);
        goto LABEL_32;
      }
      result = ((uint64_t (*)(__int128 *, void *))off_1E3413D08[v26])(&v205, v25);
      *(_DWORD *)(v16 + 168) = -1;
    }
LABEL_32:
    v28 = *(_QWORD *)v7;
    *(_DWORD *)(v16 + 184) = v7[2];
    *(_QWORD *)(v16 + 176) = v28;
    v29 = (_QWORD *)(v16 + 192);
    v30 = (uint64_t *)(v5 + 192);
    if (*(unsigned __int8 *)(v16 + 224) != *(unsigned __int8 *)(v5 + 224))
    {
      if (*(_BYTE *)(v16 + 224))
      {
        v44 = *(_QWORD *)(v16 + 208);
        if ((v44 & 0x8000000000000) != 0)
        {
          result = v44 & 0xFFFFFFFFFFFFLL;
          do
          {
            v190 = __ldaxr((unsigned int *)result);
            v191 = v190 - 1;
          }
          while (__stlxr(v191, (unsigned int *)result));
          if (!v191)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v25);
          }
        }
        *(_BYTE *)(v16 + 224) = 0;
      }
      else
      {
        v123 = *v30;
        *(_DWORD *)(v16 + 200) = *(_DWORD *)(v5 + 200);
        *v29 = v123;
        v124 = *(_QWORD *)(v5 + 208);
        *(_QWORD *)(v16 + 208) = v124;
        if ((v124 & 0x8000000000000) != 0)
        {
          v140 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 + 1, v140));
        }
        *(_QWORD *)(v16 + 216) = *(_QWORD *)(v5 + 216);
        *(_BYTE *)(v16 + 224) = 1;
      }
LABEL_55:
      a2 = (void *)(v16 + 232);
      v45 = v5 + 232;
      if (*(unsigned __int8 *)(v16 + 320) != *(unsigned __int8 *)(v5 + 320))
      {
        if (*(_BYTE *)(v16 + 320))
        {
          v48 = *(unsigned int *)(v16 + 312);
          if ((_DWORD)v48 != -1)
            result = ((uint64_t (*)(__int128 *, void *, uint64_t))off_1E3413CF0[v48])(&v205, a2, v45);
          *(_DWORD *)(v16 + 312) = -1;
          *(_BYTE *)(v16 + 320) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 232) = 0;
          *(_DWORD *)(v16 + 312) = -1;
          v125 = *(unsigned int *)(v5 + 312);
          if ((_DWORD)v125 != -1)
          {
            result = ((uint64_t (*)(__int128 *, void *, uint64_t))off_1E3413D50[v125])(&v205, a2, v45);
            *(_DWORD *)(v16 + 312) = v125;
          }
          *(_BYTE *)(v16 + 320) = 1;
        }
        goto LABEL_64;
      }
      if (*(_BYTE *)(v16 + 320))
      {
        v46 = *(unsigned int *)(v16 + 312);
        v47 = *(unsigned int *)(v5 + 312);
        if ((_DWORD)v46 == -1)
        {
          if ((_DWORD)v47 == -1)
            goto LABEL_64;
        }
        else if ((_DWORD)v47 == -1)
        {
          result = ((uint64_t (*)(__int128 *, void *, uint64_t))off_1E3413CF0[v46])(&v205, a2, v45);
          *(_DWORD *)(v16 + 312) = -1;
          goto LABEL_64;
        }
        *(_QWORD *)&v205 = v16 + 232;
        result = ((uint64_t (*)(__int128 *))*(&off_1E3413D98 + v47))(&v205);
      }
LABEL_64:
      v49 = *(_QWORD *)(v5 + 328);
      *(_QWORD *)(v16 + 333) = *(_QWORD *)(v5 + 333);
      *(_QWORD *)(v16 + 328) = v49;
      goto LABEL_65;
    }
    if (!*(_BYTE *)(v16 + 224))
      goto LABEL_55;
    v31 = *v30;
    *(_DWORD *)(v16 + 200) = *(_DWORD *)(v5 + 200);
    *v29 = v31;
    v32 = *(_QWORD *)(v16 + 208);
    v33 = *(_QWORD *)(v5 + 208);
    if ((v32 & 0x8000000000000) != 0)
    {
      if ((v33 & 0x8000000000000) != 0)
      {
        v205 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4);
        v204 = *(_OWORD *)((v33 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204);
        v32 = *(_QWORD *)(v16 + 208);
        if ((_DWORD)result)
        {
          v198 = *(_QWORD *)(v5 + 208);
          if (HIBYTE(v32) == HIBYTE(v198) && BYTE6(v32) == BYTE6(v198))
            goto LABEL_37;
        }
      }
    }
    else if (v32 == v33 && (v33 & 0x8000000000000) == 0)
    {
LABEL_37:
      *(_QWORD *)(v16 + 216) = *(_QWORD *)(v5 + 216);
      goto LABEL_55;
    }
    if ((v32 & 0x8000000000000) != 0)
    {
      result = v32 & 0xFFFFFFFFFFFFLL;
      do
      {
        v202 = __ldaxr((unsigned int *)result);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, (unsigned int *)result));
      if (!v203)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v25);
      }
    }
    v199 = *(_QWORD *)(v5 + 208);
    *(_QWORD *)(v16 + 208) = v199;
    if ((v199 & 0x8000000000000) != 0)
    {
      v200 = (unsigned int *)(v199 & 0xFFFFFFFFFFFFLL);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 + 1, v200));
    }
    goto LABEL_37;
  }
  v34 = *(_QWORD *)v5;
  *(_QWORD *)v16 = *(_QWORD *)v5;
  if ((v34 & 0x8000000000000) != 0)
  {
    v132 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 + 1, v132));
  }
  *(_BYTE *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 80) = -1;
  v35 = *(unsigned int *)(v5 + 80);
  if ((_DWORD)v35 != -1)
  {
    result = ((uint64_t (*)(__int128 *, void *, uint64_t))off_1E3413D38[v35])(&v205, v17, v5 + 16);
    *(_DWORD *)(v16 + 80) = v35;
  }
  v36 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v16 + 88) = v36;
  if ((v36 & 0x8000000000000) != 0)
  {
    v134 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 + 1, v134));
  }
  *(_BYTE *)(v16 + 104) = 0;
  *(_DWORD *)(v16 + 168) = -1;
  v37 = *(unsigned int *)(v5 + 168);
  if ((_DWORD)v37 != -1)
  {
    result = ((uint64_t (*)(__int128 *))off_1E3413D38[v37])(&v205);
    *(_DWORD *)(v16 + 168) = v37;
  }
  v38 = *(_QWORD *)v7;
  v39 = v7[2];
  *(_BYTE *)(v16 + 192) = 0;
  *(_DWORD *)(v16 + 184) = v39;
  *(_QWORD *)(v16 + 176) = v38;
  *(_BYTE *)(v16 + 224) = 0;
  if (*(_BYTE *)(v5 + 224))
  {
    v40 = *(_QWORD *)(v5 + 192);
    *(_DWORD *)(v16 + 200) = *(_DWORD *)(v5 + 200);
    *(_QWORD *)(v16 + 192) = v40;
    v41 = *(_QWORD *)(v5 + 208);
    *(_QWORD *)(v16 + 208) = v41;
    if ((v41 & 0x8000000000000) != 0)
    {
      v138 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 + 1, v138));
    }
    *(_QWORD *)(v16 + 216) = *(_QWORD *)(v5 + 216);
    *(_BYTE *)(v16 + 224) = 1;
  }
  *(_BYTE *)(v16 + 232) = 0;
  a2 = (void *)(v16 + 232);
  *(_BYTE *)(v16 + 320) = 0;
  if (*(_BYTE *)(v5 + 320))
  {
    *(_DWORD *)(v16 + 312) = -1;
    v42 = *(unsigned int *)(v5 + 312);
    if ((_DWORD)v42 != -1)
    {
      result = ((uint64_t (*)(__int128 *))off_1E3413D50[v42])(&v205);
      *(_DWORD *)(v16 + 312) = v42;
    }
    *(_BYTE *)(v16 + 320) = 1;
  }
  v43 = *(_QWORD *)(v5 + 328);
  *(_QWORD *)(v16 + 333) = *(_QWORD *)(v5 + 333);
  *(_QWORD *)(v16 + 328) = v43;
  *(_BYTE *)(v16 + 344) = 1;
LABEL_65:
  v50 = *((unsigned int *)v3 + 91);
  if (!(_DWORD)v50)
    goto LABEL_119;
  v51 = v50 - 1;
  v52 = *((_QWORD *)v3 + 44);
  v53 = (uint64_t *)(v52 + 344 * (v50 - 1));
  v54 = *((_QWORD *)v3 + 1);
  v55 = *v53;
  if ((v54 & 0x8000000000000) != 0)
  {
    if ((v55 & 0x8000000000000) != 0)
    {
      v205 = *(_OWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
      v204 = *(_OWORD *)((v55 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204);
      v54 = *((_QWORD *)v3 + 1);
      if ((_DWORD)result)
      {
        if (HIBYTE(v54) == HIBYTE(*v53) && BYTE6(v54) == BYTE6(*v53))
          goto LABEL_72;
      }
    }
  }
  else if (v54 == v55 && (v55 & 0x8000000000000) == 0)
  {
    goto LABEL_72;
  }
  if ((v54 & 0x8000000000000) != 0)
  {
    result = v54 & 0xFFFFFFFFFFFFLL;
    do
    {
      v166 = __ldaxr((unsigned int *)result);
      v167 = v166 - 1;
    }
    while (__stlxr(v167, (unsigned int *)result));
    if (!v167)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v163 = *v53;
  *((_QWORD *)v3 + 1) = *v53;
  if ((v163 & 0x8000000000000) != 0)
  {
    v164 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFLL);
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 + 1, v164));
  }
LABEL_72:
  v57 = v3 + 24;
  v58 = *((unsigned int *)v3 + 22);
  v59 = *((unsigned int *)v53 + 20);
  if ((_DWORD)v58 == -1)
  {
    if ((_DWORD)v59 != -1)
      goto LABEL_74;
  }
  else
  {
    if ((_DWORD)v59 != -1)
    {
LABEL_74:
      *(_QWORD *)&v205 = v3 + 24;
      result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v59])(&v205);
      goto LABEL_75;
    }
    result = ((uint64_t (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v58])(&v205, v57);
    *((_DWORD *)v3 + 22) = -1;
  }
LABEL_75:
  v60 = v52 + 344 * v51;
  v63 = *(_QWORD *)(v60 + 88);
  v62 = (uint64_t *)(v60 + 88);
  v61 = v63;
  v64 = *((_QWORD *)v3 + 12);
  if ((v64 & 0x8000000000000) != 0)
  {
    if ((v61 & 0x8000000000000) != 0)
    {
      v205 = *(_OWORD *)((v64 & 0xFFFFFFFFFFFFLL) + 4);
      v204 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204);
      v64 = *((_QWORD *)v3 + 12);
      if ((_DWORD)result)
      {
        if (HIBYTE(v64) == HIBYTE(*v62) && BYTE6(v64) == BYTE6(*v62))
          goto LABEL_81;
      }
    }
  }
  else if (v64 == v61 && (v61 & 0x8000000000000) == 0)
  {
    goto LABEL_81;
  }
  if ((v64 & 0x8000000000000) != 0)
  {
    result = v64 & 0xFFFFFFFFFFFFLL;
    do
    {
      v171 = __ldaxr((unsigned int *)result);
      v172 = v171 - 1;
    }
    while (__stlxr(v172, (unsigned int *)result));
    if (!v172)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v57);
    }
  }
  v168 = *v62;
  *((_QWORD *)v3 + 12) = *v62;
  if ((v168 & 0x8000000000000) != 0)
  {
    v169 = (unsigned int *)(v168 & 0xFFFFFFFFFFFFLL);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 + 1, v169));
  }
LABEL_81:
  v66 = v3 + 112;
  v67 = *((unsigned int *)v3 + 44);
  v68 = *(unsigned int *)(v52 + 344 * v51 + 168);
  if ((_DWORD)v67 == -1)
  {
    if ((_DWORD)v68 != -1)
      goto LABEL_83;
  }
  else
  {
    if ((_DWORD)v68 != -1)
    {
LABEL_83:
      *(_QWORD *)&v205 = v3 + 112;
      result = ((uint64_t (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISH_LNS0_6_TraitE1EEEEEvOT_EUlRSP_OT0_E_JRSI_SO_EEEDcmSQ_DpOT0____fdiagonal[v68])(&v205);
      goto LABEL_84;
    }
    result = ((uint64_t (*)(__int128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v67])(&v205, v66);
    *((_DWORD *)v3 + 44) = -1;
  }
LABEL_84:
  v69 = v52 + 344 * v51;
  v70 = *(_QWORD *)(v69 + 176);
  *((_DWORD *)v3 + 48) = *(_DWORD *)(v69 + 184);
  *((_QWORD *)v3 + 23) = v70;
  v71 = v3 + 200;
  v72 = (uint64_t *)(v69 + 192);
  if (v3[232] == *(_BYTE *)(v69 + 224))
  {
    if (!v3[232])
      goto LABEL_96;
    v73 = *v72;
    *((_DWORD *)v3 + 52) = *(_DWORD *)(v69 + 200);
    *v71 = v73;
    v74 = v52 + 344 * v51;
    v77 = *(_QWORD *)(v74 + 208);
    v76 = (uint64_t *)(v74 + 208);
    v75 = v77;
    v78 = *((_QWORD *)v3 + 27);
    if ((v78 & 0x8000000000000) != 0)
    {
      if ((v75 & 0x8000000000000) == 0
        || (v205 = *(_OWORD *)((v78 & 0xFFFFFFFFFFFFLL) + 4),
            v204 = *(_OWORD *)((v75 & 0xFFFFFFFFFFFFLL) + 4),
            result = WebCore::operator==<float,4ul>((float *)&v205, (float *)&v204),
            v78 = *((_QWORD *)v3 + 27),
            !(_DWORD)result)
        || HIBYTE(v78) != HIBYTE(*v76)
        || BYTE6(v78) != BYTE6(*v76))
      {
LABEL_310:
        if ((v78 & 0x8000000000000) != 0)
        {
          result = v78 & 0xFFFFFFFFFFFFLL;
          do
          {
            v188 = __ldaxr((unsigned int *)result);
            v189 = v188 - 1;
          }
          while (__stlxr(v189, (unsigned int *)result));
          if (!v189)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v66);
          }
        }
        v185 = *v76;
        *((_QWORD *)v3 + 27) = *v76;
        if ((v185 & 0x8000000000000) != 0)
        {
          v186 = (unsigned int *)(v185 & 0xFFFFFFFFFFFFLL);
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 + 1, v186));
        }
      }
    }
    else if (v78 != v75 || (v75 & 0x8000000000000) != 0)
    {
      goto LABEL_310;
    }
    *((_QWORD *)v3 + 28) = *(_QWORD *)(v52 + 344 * v51 + 216);
    goto LABEL_96;
  }
  if (v3[232])
  {
    v80 = *((_QWORD *)v3 + 27);
    if ((v80 & 0x8000000000000) != 0)
    {
      result = v80 & 0xFFFFFFFFFFFFLL;
      do
      {
        v176 = __ldaxr((unsigned int *)result);
        v177 = v176 - 1;
      }
      while (__stlxr(v177, (unsigned int *)result));
      if (!v177)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v66);
      }
    }
    v3[232] = 0;
  }
  else
  {
    v120 = *v72;
    *((_DWORD *)v3 + 52) = *(_DWORD *)(v69 + 200);
    *v71 = v120;
    v121 = *(_QWORD *)(v52 + 344 * v51 + 208);
    *((_QWORD *)v3 + 27) = v121;
    if ((v121 & 0x8000000000000) != 0)
    {
      v136 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFLL);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 + 1, v136));
    }
    *((_QWORD *)v3 + 28) = *(_QWORD *)(v52 + 344 * v51 + 216);
    v3[232] = 1;
  }
LABEL_96:
  a2 = v3 + 240;
  v81 = v52 + 344 * v51;
  v82 = v81 + 232;
  if (v3[328] == *(_BYTE *)(v81 + 320))
  {
    if (!v3[328])
      goto LABEL_105;
    v83 = *((unsigned int *)v3 + 80);
    v84 = *(unsigned int *)(v52 + 344 * v51 + 312);
    if ((_DWORD)v83 == -1)
    {
      if ((_DWORD)v84 != -1)
        goto LABEL_100;
    }
    else
    {
      if ((_DWORD)v84 != -1)
      {
LABEL_100:
        *(_QWORD *)&v205 = v3 + 240;
        result = ((uint64_t (*)(__int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISA_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRSB_SH_EEEDcmSJ_DpOT0____fdiagonal
                                                      + v84))(&v205);
        goto LABEL_105;
      }
      result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v83])(&v205, a2, v82);
      *((_DWORD *)v3 + 80) = -1;
    }
  }
  else if (v3[328])
  {
    v85 = *((unsigned int *)v3 + 80);
    if ((_DWORD)v85 != -1)
      result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v85])(&v205, a2, v82);
    *((_DWORD *)v3 + 80) = -1;
    v3[328] = 0;
  }
  else
  {
    v3[240] = 0;
    *((_DWORD *)v3 + 80) = -1;
    v122 = *(unsigned int *)(v52 + 344 * v51 + 312);
    if ((_DWORD)v122 != -1)
    {
      result = ((uint64_t (*)(__int128 *, void *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v122])(&v205, a2, v82);
      *((_DWORD *)v3 + 80) = v122;
    }
    v3[328] = 1;
  }
LABEL_105:
  v86 = *(_QWORD *)(v52 + 344 * v51 + 328);
  *(_QWORD *)(v3 + 341) = *(_QWORD *)(v52 + 344 * v51 + 333);
  *((_QWORD *)v3 + 42) = v86;
  v87 = *((unsigned int *)v3 + 91);
  if (!(_DWORD)v87)
  {
LABEL_321:
    __break(0xC471u);
    JUMPOUT(0x19426CB0CLL);
  }
  v88 = v87 - 1;
  v89 = *((_QWORD *)v3 + 44);
  v90 = v89 + 344 * (v87 - 1);
  if (*(_BYTE *)(v90 + 320))
  {
    v91 = (_DWORD *)(v89 + 344 * v88 + 312);
    v92 = *v91;
    if ((_DWORD)v92 != -1)
      result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v92])(&v205, v90 + 232, v82);
    *v91 = -1;
  }
  if (*(_BYTE *)(v89 + 344 * v88 + 224))
  {
    v93 = *(_QWORD *)(v89 + 344 * v88 + 208);
    if ((v93 & 0x8000000000000) != 0)
    {
      result = v93 & 0xFFFFFFFFFFFFLL;
      do
      {
        v152 = __ldaxr((unsigned int *)result);
        v153 = v152 - 1;
      }
      while (__stlxr(v153, (unsigned int *)result));
      if (!v153)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  v94 = v89 + 344 * v88;
  v97 = *(_DWORD *)(v94 + 168);
  v96 = (_DWORD *)(v94 + 168);
  v95 = v97;
  v98 = v96 - 20;
  if (v97 != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v95])(&v205, v89 + 344 * v88 + 104, v82);
  *v96 = -1;
  if ((*v98 & 0x8000000000000) != 0)
  {
    result = *v98 & 0xFFFFFFFFFFFFLL;
    do
    {
      v142 = __ldaxr((unsigned int *)result);
      v143 = v142 - 1;
    }
    while (__stlxr(v143, (unsigned int *)result));
    if (!v143)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v99 = *(unsigned int *)(v90 + 80);
  if ((_DWORD)v99 != -1)
    result = ((uint64_t (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v99])(&v205, v90 + 16);
  *(_DWORD *)(v90 + 80) = -1;
  if ((*(_QWORD *)v90 & 0x8000000000000) != 0)
  {
    result = *(_QWORD *)v90 & 0xFFFFFFFFFFFFLL;
    do
    {
      v144 = __ldaxr((unsigned int *)result);
      v145 = v144 - 1;
    }
    while (__stlxr(v145, (unsigned int *)result));
    if (!v145)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  *((_DWORD *)v3 + 91) = v88;
  if (!(_DWORD)v88 && *((_DWORD *)v3 + 90))
  {
    result = *((_QWORD *)v3 + 44);
    if (v3 + 368 != (_BYTE *)result && result)
    {
      *((_QWORD *)v3 + 44) = 0;
      *((_DWORD *)v3 + 90) = 0;
      WTF::fastFree((WTF *)result, a2);
      result = *((_QWORD *)v3 + 44);
    }
    if (!result)
    {
      *((_QWORD *)v3 + 44) = v3 + 368;
      *((_DWORD *)v3 + 90) = 1;
    }
  }
LABEL_119:
  v100 = *((unsigned int *)v3 + 183);
  if ((_DWORD)v100)
  {
    v101 = v100 - 1;
    v102 = *((_QWORD *)v3 + 90);
    v103 = v102 + 760 * (v100 - 1);
    if (*(_BYTE *)(v103 + 752))
    {
      v104 = v102 + 760 * v101;
      if (*(_BYTE *)(v104 + 728))
      {
        v105 = (_DWORD *)(v102 + 760 * v101 + 720);
        v106 = *v105;
        if ((_DWORD)v106 != -1)
          ((void (*)(__int128 *, uint64_t))off_1E3413CF0[v106])(&v205, v104 + 640);
        *v105 = -1;
      }
      if (*(_BYTE *)(v102 + 760 * v101 + 632))
      {
        v107 = *(_QWORD *)(v102 + 760 * v101 + 616);
        if ((v107 & 0x8000000000000) != 0)
        {
          v173 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFLL);
          do
          {
            v174 = __ldaxr(v173);
            v175 = v174 - 1;
          }
          while (__stlxr(v175, v173));
          if (!v175)
          {
            atomic_store(1u, v173);
            WTF::fastFree((WTF *)v173, a2);
          }
        }
      }
      v108 = v102 + 760 * v101;
      v109 = (_QWORD *)(v108 + 496);
      v110 = (_DWORD *)(v108 + 576);
      v111 = *(unsigned int *)(v108 + 576);
      if ((_DWORD)v111 != -1)
        ((void (*)(__int128 *, uint64_t))off_1E3413D08[v111])(&v205, v102 + 760 * v101 + 512);
      *v110 = -1;
      if ((*v109 & 0x8000000000000) != 0)
      {
        v154 = (unsigned int *)(*v109 & 0xFFFFFFFFFFFFLL);
        do
        {
          v155 = __ldaxr(v154);
          v156 = v155 - 1;
        }
        while (__stlxr(v156, v154));
        if (!v156)
        {
          atomic_store(1u, v154);
          WTF::fastFree((WTF *)v154, a2);
        }
      }
      v112 = (_QWORD *)(v104 + 408);
      v113 = (_DWORD *)(v102 + 760 * v101 + 488);
      v114 = *v113;
      if ((_DWORD)v114 != -1)
        ((void (*)(__int128 *, uint64_t))off_1E3413D08[v114])(&v205, v102 + 760 * v101 + 424);
      *v113 = -1;
      if ((*v112 & 0x8000000000000) != 0)
      {
        v157 = (unsigned int *)(*v112 & 0xFFFFFFFFFFFFLL);
        do
        {
          v158 = __ldaxr(v157);
          v159 = v158 - 1;
        }
        while (__stlxr(v159, v157));
        if (!v159)
        {
          atomic_store(1u, v157);
          WTF::fastFree((WTF *)v157, a2);
        }
      }
    }
    if (*(_BYTE *)(v103 + 320))
    {
      v115 = *(unsigned int *)(v103 + 312);
      if ((_DWORD)v115 != -1)
        ((void (*)(__int128 *, uint64_t))off_1E3413CF0[v115])(&v205, v103 + 232);
      *(_DWORD *)(v103 + 312) = -1;
    }
    if (*(_BYTE *)(v103 + 224))
    {
      v116 = *(_QWORD *)(v103 + 208);
      if ((v116 & 0x8000000000000) != 0)
      {
        v160 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFLL);
        do
        {
          v161 = __ldaxr(v160);
          v162 = v161 - 1;
        }
        while (__stlxr(v162, v160));
        if (!v162)
        {
          atomic_store(1u, v160);
          WTF::fastFree((WTF *)v160, a2);
        }
      }
    }
    v117 = *(unsigned int *)(v103 + 168);
    if ((_DWORD)v117 != -1)
      ((void (*)(__int128 *, uint64_t))off_1E3413D08[v117])(&v205, v103 + 104);
    *(_DWORD *)(v103 + 168) = -1;
    v118 = *(_QWORD *)(v103 + 88);
    if ((v118 & 0x8000000000000) != 0)
    {
      v146 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
      do
      {
        v147 = __ldaxr(v146);
        v148 = v147 - 1;
      }
      while (__stlxr(v148, v146));
      if (!v148)
      {
        atomic_store(1u, v146);
        WTF::fastFree((WTF *)v146, a2);
      }
    }
    v119 = *(unsigned int *)(v103 + 80);
    if ((_DWORD)v119 != -1)
      ((void (*)(__int128 *, uint64_t))off_1E3413D08[v119])(&v205, v103 + 16);
    *(_DWORD *)(v103 + 80) = -1;
    if ((*(_QWORD *)v103 & 0x8000000000000) != 0)
    {
      v149 = (unsigned int *)(*(_QWORD *)v103 & 0xFFFFFFFFFFFFLL);
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        atomic_store(1u, v149);
        WTF::fastFree((WTF *)v149, a2);
      }
    }
    *((_DWORD *)v3 + 183) = v101;
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 736))(v3);
  }
  return result;
}

uint64_t WebCore::DisplayList::Recorder::save(uint64_t a1, int a2)
{
  unsigned int v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  void *v142;
  _BOOL4 v143;
  _BOOL4 v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  void *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  __int128 v170;
  __int128 v171;

  v2 = *(_DWORD *)(a1 + 732);
  if (!v2)
  {
    __break(0xC471u);
    goto LABEL_217;
  }
  v5 = (_QWORD *)(a1 + 720);
  v6 = *(_QWORD *)(a1 + 720);
  v7 = v6 + 760 * v2 - 760;
  v9 = (int *)(v6 + 760 * v2 - 584);
  v8 = *v9;
  if (!*v9)
    goto LABEL_65;
  if ((v8 & 0xFFFFFFF2) == 0 && ((v8 & 4) == 0 || !*(_DWORD *)(v7 + 168) && (*(_BYTE *)(v7 + 94) & 8) == 0))
  {
    if ((v8 & 1) == 0)
      goto LABEL_8;
    if (!*(_DWORD *)(v7 + 80) && (*(_BYTE *)(v7 + 6) & 8) == 0)
    {
      if ((*(_QWORD *)(a1 + 8) & 0x8000000000000) != 0)
        goto LABEL_217;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 784))(a1, *(_QWORD *)(a1 + 8));
      v8 = *v9;
LABEL_8:
      if ((v8 & 0xC) == 0)
        goto LABEL_15;
      if ((v8 & 4) == 0)
      {
        v13 = 0;
        v12 = 0;
        v14 = 0;
        v11 = *(_DWORD *)(a1 + 188);
        goto LABEL_13;
      }
      v10 = *(_QWORD *)(a1 + 96);
      if ((v8 & 8) != 0)
      {
        if ((v10 & 0x8000000000000) == 0)
        {
          v11 = *(_DWORD *)(a1 + 188);
          v12 = 0x100000000;
          v13 = *(_QWORD *)(a1 + 96);
          v14 = v10 & 0xFFFFFF00;
LABEL_13:
          v15 = 0x100000000;
LABEL_14:
          *(_QWORD *)&v171 = v13 | (unint64_t)v12 | v14 & 0xFFFFFF00;
          *((_QWORD *)&v171 + 1) = v15 | v11;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 792))(a1, &v171);
          goto LABEL_15;
        }
      }
      else if ((v10 & 0x8000000000000) == 0)
      {
        v11 = 0;
        v15 = 0;
        v12 = 0x100000000;
        v13 = *(_QWORD *)(a1 + 96);
        v14 = v10 & 0xFFFFFF00;
        goto LABEL_14;
      }
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
  }
  if ((v8 & 1) != 0)
  {
    v105 = *(_DWORD *)(a1 + 88);
    if (v105 == 1)
    {
      if (!*(_DWORD *)(a1 + 32))
      {
        v108 = *(_QWORD *)(a1 + 24);
        if (v108)
        {
          if (*(_BYTE *)(v108 + 40))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1360))(a1, v108);
        }
      }
    }
    else if (v105 == 2)
    {
      v106 = *(_QWORD *)(a1 + 24);
      if (v106)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1336))(a1, v106 + 8);
    }
  }
  if ((*(_BYTE *)v9 & 4) != 0)
  {
    v113 = *(_DWORD *)(a1 + 176);
    if (v113 == 1)
    {
      if (!*(_DWORD *)(a1 + 120))
      {
        v133 = *(_QWORD *)(a1 + 112);
        if (v133)
        {
          if (*(_BYTE *)(v133 + 40))
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1360))(a1, v133);
        }
      }
    }
    else if (v113 == 2)
    {
      v114 = *(_QWORD *)(a1 + 112);
      if (v114)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1336))(a1, v114 + 8);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, v7);
LABEL_15:
  *v9 = 0;
  v16 = *(_DWORD *)(a1 + 732);
  if (!v16)
  {
    __break(0xC471u);
    JUMPOUT(0x19426DA40);
  }
  v17 = *v5 + 760 * v16;
  v18 = v17 - 352;
  v19 = (void *)(v17 - 336);
  if (*(_BYTE *)(v17 - 8))
  {
    v20 = *(_QWORD *)v18;
    v21 = *(_QWORD *)v7;
    if ((*(_QWORD *)v18 & 0x8000000000000) != 0)
    {
      if ((v21 & 0x8000000000000) != 0)
      {
        v142 = v19;
        v171 = *(_OWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 4);
        v170 = *(_OWORD *)((v21 & 0xFFFFFFFFFFFFLL) + 4);
        v143 = WebCore::operator==<float,4ul>((float *)&v171, (float *)&v170);
        v20 = *(_QWORD *)v18;
        if (v143 && HIBYTE(v20) == HIBYTE(*(_QWORD *)v7))
        {
          v19 = v142;
          if (BYTE6(v20) == BYTE6(*(_QWORD *)v7))
            goto LABEL_23;
        }
        else
        {
          v19 = v142;
        }
      }
    }
    else if (v20 == v21 && (v21 & 0x8000000000000) == 0)
    {
      goto LABEL_23;
    }
    if ((v20 & 0x8000000000000) != 0)
    {
      v158 = v19;
      v159 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        atomic_store(1u, v159);
        WTF::fastFree((WTF *)v159, v19);
        v19 = v158;
      }
    }
    v155 = *(_QWORD *)v7;
    *(_QWORD *)v18 = *(_QWORD *)v7;
    if ((v155 & 0x8000000000000) != 0)
    {
      v156 = (unsigned int *)(v155 & 0xFFFFFFFFFFFFLL);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 + 1, v156));
    }
LABEL_23:
    v23 = *(unsigned int *)(v18 + 80);
    v24 = *(unsigned int *)(v7 + 80);
    if ((_DWORD)v23 == -1)
    {
      if ((_DWORD)v24 != -1)
        goto LABEL_25;
    }
    else
    {
      if ((_DWORD)v24 != -1)
      {
LABEL_25:
        *(_QWORD *)&v171 = v19;
        ((void (*)(__int128 *))off_1E3413D80[v24])(&v171);
        goto LABEL_26;
      }
      ((void (*)(__int128 *, void *))off_1E3413D08[v23])(&v171, v19);
      *(_DWORD *)(v18 + 80) = -1;
    }
LABEL_26:
    v25 = *(_QWORD *)(v18 + 88);
    v26 = *(_QWORD *)(v7 + 88);
    if ((v25 & 0x8000000000000) != 0)
    {
      if ((v26 & 0x8000000000000) != 0)
      {
        v171 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
        v170 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
        v144 = WebCore::operator==<float,4ul>((float *)&v171, (float *)&v170);
        v25 = *(_QWORD *)(v18 + 88);
        if (v144)
        {
          v145 = *(_QWORD *)(v7 + 88);
          if (HIBYTE(v25) == HIBYTE(v145) && BYTE6(v25) == BYTE6(v145))
            goto LABEL_29;
        }
      }
    }
    else if (v25 == v26 && (v26 & 0x8000000000000) == 0)
    {
      goto LABEL_29;
    }
    if ((v25 & 0x8000000000000) != 0)
    {
      v149 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        atomic_store(1u, v149);
        WTF::fastFree((WTF *)v149, v19);
      }
    }
    v146 = *(_QWORD *)(v7 + 88);
    *(_QWORD *)(v18 + 88) = v146;
    if ((v146 & 0x8000000000000) != 0)
    {
      v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFLL);
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 + 1, v147));
    }
LABEL_29:
    v27 = (void *)(v18 + 104);
    v28 = *(unsigned int *)(v18 + 168);
    v29 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v28 == -1)
    {
      if ((_DWORD)v29 != -1)
        goto LABEL_31;
    }
    else
    {
      if ((_DWORD)v29 != -1)
      {
LABEL_31:
        *(_QWORD *)&v171 = v18 + 104;
        ((void (*)(__int128 *))off_1E3413D80[v29])(&v171);
        goto LABEL_32;
      }
      ((void (*)(__int128 *, void *))off_1E3413D08[v28])(&v171, v27);
      *(_DWORD *)(v18 + 168) = -1;
    }
LABEL_32:
    v30 = *(_QWORD *)v9;
    *(_DWORD *)(v18 + 184) = v9[2];
    *(_QWORD *)(v18 + 176) = v30;
    v31 = (_QWORD *)(v18 + 192);
    v32 = (uint64_t *)(v7 + 192);
    if (*(unsigned __int8 *)(v18 + 224) != *(unsigned __int8 *)(v7 + 224))
    {
      if (*(_BYTE *)(v18 + 224))
      {
        v46 = *(_QWORD *)(v18 + 208);
        if ((v46 & 0x8000000000000) != 0)
        {
          v152 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          if (!v154)
          {
            atomic_store(1u, v152);
            WTF::fastFree((WTF *)v152, v27);
          }
        }
        *(_BYTE *)(v18 + 224) = 0;
      }
      else
      {
        v102 = *v32;
        *(_DWORD *)(v18 + 200) = *(_DWORD *)(v7 + 200);
        *v31 = v102;
        v103 = *(_QWORD *)(v7 + 208);
        *(_QWORD *)(v18 + 208) = v103;
        if ((v103 & 0x8000000000000) != 0)
        {
          v140 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFLL);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 + 1, v140));
        }
        *(_QWORD *)(v18 + 216) = *(_QWORD *)(v7 + 216);
        *(_BYTE *)(v18 + 224) = 1;
      }
LABEL_55:
      v47 = v18 + 232;
      v48 = v7 + 232;
      if (*(unsigned __int8 *)(v18 + 320) != *(unsigned __int8 *)(v7 + 320))
      {
        if (*(_BYTE *)(v18 + 320))
        {
          v51 = *(unsigned int *)(v18 + 312);
          if ((_DWORD)v51 != -1)
            ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v51])(&v171, v47, v48);
          *(_DWORD *)(v18 + 312) = -1;
          *(_BYTE *)(v18 + 320) = 0;
        }
        else
        {
          *(_BYTE *)(v18 + 232) = 0;
          *(_DWORD *)(v18 + 312) = -1;
          v104 = *(unsigned int *)(v7 + 312);
          if ((_DWORD)v104 != -1)
          {
            ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413D50[v104])(&v171, v47, v48);
            *(_DWORD *)(v18 + 312) = v104;
          }
          *(_BYTE *)(v18 + 320) = 1;
        }
        goto LABEL_64;
      }
      if (*(_BYTE *)(v18 + 320))
      {
        v49 = *(unsigned int *)(v18 + 312);
        v50 = *(unsigned int *)(v7 + 312);
        if ((_DWORD)v49 == -1)
        {
          if ((_DWORD)v50 == -1)
            goto LABEL_64;
        }
        else if ((_DWORD)v50 == -1)
        {
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E3413CF0[v49])(&v171, v47, v48);
          *(_DWORD *)(v18 + 312) = -1;
          goto LABEL_64;
        }
        *(_QWORD *)&v171 = v18 + 232;
        ((void (*)(__int128 *))*(&off_1E3413D98 + v50))(&v171);
      }
LABEL_64:
      v52 = *(_QWORD *)(v7 + 328);
      *(_QWORD *)(v18 + 333) = *(_QWORD *)(v7 + 333);
      *(_QWORD *)(v18 + 328) = v52;
      goto LABEL_65;
    }
    if (!*(_BYTE *)(v18 + 224))
      goto LABEL_55;
    v33 = *v32;
    *(_DWORD *)(v18 + 200) = *(_DWORD *)(v7 + 200);
    *v31 = v33;
    v34 = *(_QWORD *)(v18 + 208);
    v35 = *(_QWORD *)(v7 + 208);
    if ((v34 & 0x8000000000000) != 0)
    {
      if ((v35 & 0x8000000000000) != 0)
      {
        v171 = *(_OWORD *)((v34 & 0xFFFFFFFFFFFFLL) + 4);
        v170 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFLL) + 4);
        v162 = WebCore::operator==<float,4ul>((float *)&v171, (float *)&v170);
        v34 = *(_QWORD *)(v18 + 208);
        if (v162)
        {
          v163 = *(_QWORD *)(v7 + 208);
          if (HIBYTE(v34) == HIBYTE(v163) && BYTE6(v34) == BYTE6(v163))
            goto LABEL_37;
        }
      }
    }
    else if (v34 == v35 && (v35 & 0x8000000000000) == 0)
    {
LABEL_37:
      *(_QWORD *)(v18 + 216) = *(_QWORD *)(v7 + 216);
      goto LABEL_55;
    }
    if ((v34 & 0x8000000000000) != 0)
    {
      v167 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        atomic_store(1u, v167);
        WTF::fastFree((WTF *)v167, v27);
      }
    }
    v164 = *(_QWORD *)(v7 + 208);
    *(_QWORD *)(v18 + 208) = v164;
    if ((v164 & 0x8000000000000) != 0)
    {
      v165 = (unsigned int *)(v164 & 0xFFFFFFFFFFFFLL);
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 + 1, v165));
    }
    goto LABEL_37;
  }
  v36 = *(_QWORD *)v7;
  *(_QWORD *)v18 = *(_QWORD *)v7;
  if ((v36 & 0x8000000000000) != 0)
  {
    v134 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFLL);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 + 1, v134));
  }
  *(_BYTE *)(v18 + 16) = 0;
  *(_DWORD *)(v18 + 80) = -1;
  v37 = *(unsigned int *)(v7 + 80);
  if ((_DWORD)v37 != -1)
  {
    ((void (*)(__int128 *, void *, uint64_t))off_1E3413D38[v37])(&v171, v19, v7 + 16);
    *(_DWORD *)(v18 + 80) = v37;
  }
  v38 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)(v18 + 88) = v38;
  if ((v38 & 0x8000000000000) != 0)
  {
    v136 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 + 1, v136));
  }
  *(_BYTE *)(v18 + 104) = 0;
  *(_DWORD *)(v18 + 168) = -1;
  v39 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v39 != -1)
  {
    ((void (*)(__int128 *))off_1E3413D38[v39])(&v171);
    *(_DWORD *)(v18 + 168) = v39;
  }
  v40 = *(_QWORD *)v9;
  v41 = v9[2];
  *(_BYTE *)(v18 + 192) = 0;
  *(_DWORD *)(v18 + 184) = v41;
  *(_QWORD *)(v18 + 176) = v40;
  *(_BYTE *)(v18 + 224) = 0;
  if (*(_BYTE *)(v7 + 224))
  {
    v42 = *(_QWORD *)(v7 + 192);
    *(_DWORD *)(v18 + 200) = *(_DWORD *)(v7 + 200);
    *(_QWORD *)(v18 + 192) = v42;
    v43 = *(_QWORD *)(v7 + 208);
    *(_QWORD *)(v18 + 208) = v43;
    if ((v43 & 0x8000000000000) != 0)
    {
      v138 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFLL);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 + 1, v138));
    }
    *(_QWORD *)(v18 + 216) = *(_QWORD *)(v7 + 216);
    *(_BYTE *)(v18 + 224) = 1;
  }
  *(_BYTE *)(v18 + 232) = 0;
  *(_BYTE *)(v18 + 320) = 0;
  if (*(_BYTE *)(v7 + 320))
  {
    *(_DWORD *)(v18 + 312) = -1;
    v44 = *(unsigned int *)(v7 + 312);
    if ((_DWORD)v44 != -1)
    {
      ((void (*)(__int128 *))off_1E3413D50[v44])(&v171);
      *(_DWORD *)(v18 + 312) = v44;
    }
    *(_BYTE *)(v18 + 320) = 1;
  }
  v45 = *(_QWORD *)(v7 + 328);
  *(_QWORD *)(v18 + 333) = *(_QWORD *)(v7 + 333);
  *(_QWORD *)(v18 + 328) = v45;
  *(_BYTE *)(v18 + 344) = 1;
LABEL_65:
  v53 = (uint64_t *)(a1 + 352);
  v54 = (uint64_t *)(a1 + 8);
  v55 = *(unsigned int *)(a1 + 364);
  if ((_DWORD)v55 == *(_DWORD *)(a1 + 360))
  {
    v107 = (uint64_t *)WTF::Vector<WebCore::GraphicsContextState,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, v55 + 1, (unint64_t)v54);
    WebCore::GraphicsContextState::GraphicsContextState(*(_QWORD *)(a1 + 352) + 344 * *(unsigned int *)(a1 + 364), v107);
  }
  else
  {
    v56 = *v53;
    v57 = *v53 + 344 * v55;
    v58 = *v54;
    *(_QWORD *)v57 = *v54;
    if ((v58 & 0x8000000000000) != 0)
    {
      v119 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFLL);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 + 1, v119));
    }
    *(_BYTE *)(v57 + 16) = 0;
    *(_DWORD *)(v57 + 80) = -1;
    v59 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v59 != -1)
    {
      ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v59])(&v171);
      *(_DWORD *)(v57 + 80) = v59;
    }
    v60 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(v56 + 344 * v55 + 88) = v60;
    if ((v60 & 0x8000000000000) != 0)
    {
      v121 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 + 1, v121));
    }
    v61 = v56 + 344 * v55;
    *(_DWORD *)(v61 + 168) = -1;
    v62 = (_DWORD *)(v61 + 168);
    *((_BYTE *)v62 - 64) = 0;
    v63 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v63 != -1)
    {
      ((void (*)(__int128 *, _DWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v63])(&v171, v62 - 16, a1 + 112);
      *v62 = v63;
    }
    v64 = v56 + 344 * v55;
    v65 = *(_QWORD *)(a1 + 184);
    v66 = *(_DWORD *)(a1 + 192);
    *(_BYTE *)(v64 + 192) = 0;
    v67 = v64 + 192;
    *(_DWORD *)(v67 - 8) = v66;
    *(_QWORD *)(v67 - 16) = v65;
    *(_BYTE *)(v67 + 32) = 0;
    v68 = (_BYTE *)(v67 + 32);
    if (*(_BYTE *)(a1 + 232))
    {
      v69 = *(_QWORD *)(a1 + 200);
      *(_DWORD *)(v67 + 8) = *(_DWORD *)(a1 + 208);
      *(_QWORD *)v67 = v69;
      v70 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(v56 + 344 * v55 + 208) = v70;
      if ((v70 & 0x8000000000000) != 0)
      {
        v129 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFLL);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 + 1, v129));
      }
      *(_QWORD *)(v56 + 344 * v55 + 216) = *(_QWORD *)(a1 + 224);
      *v68 = 1;
    }
    v71 = v56 + 344 * v55;
    *(_BYTE *)(v71 + 232) = 0;
    v71 += 232;
    *(_BYTE *)(v71 + 88) = 0;
    v72 = (_BYTE *)(v71 + 88);
    if (*(_BYTE *)(a1 + 328))
    {
      v73 = v56 + 344 * v55;
      *(_DWORD *)(v73 + 312) = -1;
      v74 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v74 != -1)
      {
        v75 = (_DWORD *)(v73 + 312);
        ((void (*)(__int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v74])(&v171);
        *v75 = v74;
      }
      *v72 = 1;
    }
    v76 = v56 + 344 * v55;
    v77 = *(_QWORD *)(a1 + 341);
    *(_QWORD *)(v76 + 328) = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(v76 + 333) = v77;
  }
  ++*(_DWORD *)(a1 + 364);
  if (a2)
  {
    if (a2 == 2)
      *(_DWORD *)(a1 + 336) = 1065353216;
  }
  else
  {
    *(_DWORD *)(a1 + 184) = 0;
  }
  *(_BYTE *)(a1 + 348) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 728))(a1);
  v79 = *(unsigned int *)(a1 + 732);
  if (!(_DWORD)v79)
  {
LABEL_218:
    __break(0xC471u);
    JUMPOUT(0x19426DA10);
  }
  v80 = v79 - 1;
  v81 = *(_QWORD *)(a1 + 720);
  v82 = (uint64_t *)(v81 + 760 * (v79 - 1));
  if ((_DWORD)v79 == *(_DWORD *)(a1 + 728))
  {
    v109 = WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v79 + 1, v81 + 760 * (v79 - 1));
    result = WebCore::GraphicsContextState::GraphicsContextState(*(_QWORD *)(a1 + 720) + 760 * *(unsigned int *)(a1 + 732), (uint64_t *)v109);
    v110 = *(_OWORD *)(v109 + 344);
    v111 = *(_OWORD *)(v109 + 360);
    v112 = *(_OWORD *)(v109 + 392);
    *(_OWORD *)(result + 376) = *(_OWORD *)(v109 + 376);
    *(_OWORD *)(result + 392) = v112;
    *(_OWORD *)(result + 344) = v110;
    *(_OWORD *)(result + 360) = v111;
    *(_BYTE *)(result + 408) = 0;
    *(_BYTE *)(result + 752) = 0;
    if (!*(_BYTE *)(v109 + 752))
      goto LABEL_114;
    v100 = (_BYTE *)(result + 752);
    result = WebCore::GraphicsContextState::GraphicsContextState(result + 408, (uint64_t *)(v109 + 408));
    goto LABEL_113;
  }
  v83 = v81 + 760 * v79;
  v84 = *v82;
  *(_QWORD *)v83 = *v82;
  if ((v84 & 0x8000000000000) != 0)
  {
    v115 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 + 1, v115));
  }
  *(_BYTE *)(v83 + 16) = 0;
  *(_DWORD *)(v83 + 80) = -1;
  v85 = *((unsigned int *)v82 + 20);
  if ((_DWORD)v85 != -1)
  {
    result = ((uint64_t (*)(__int128 *))off_1E3413D38[v85])(&v171);
    *(_DWORD *)(v83 + 80) = v85;
  }
  v86 = v82[11];
  *(_QWORD *)(v83 + 88) = v86;
  if ((v86 & 0x8000000000000) != 0)
  {
    v117 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 + 1, v117));
  }
  *(_BYTE *)(v83 + 104) = 0;
  *(_DWORD *)(v83 + 168) = -1;
  v87 = *((unsigned int *)v82 + 42);
  if ((_DWORD)v87 != -1)
  {
    result = ((uint64_t (*)(__int128 *))off_1E3413D38[v87])(&v171);
    *(_DWORD *)(v83 + 168) = v87;
  }
  *(_BYTE *)(v83 + 192) = 0;
  *(_QWORD *)(v83 + 176) = v82[22];
  *(_DWORD *)(v83 + 184) = *((_DWORD *)v82 + 46);
  *(_BYTE *)(v83 + 224) = 0;
  if (*((_BYTE *)v82 + 224))
  {
    *(_QWORD *)(v83 + 192) = v82[24];
    *(_DWORD *)(v83 + 200) = *((_DWORD *)v82 + 50);
    v88 = v82[26];
    *(_QWORD *)(v83 + 208) = v88;
    if ((v88 & 0x8000000000000) != 0)
    {
      v123 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFLL);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 + 1, v123));
    }
    *(_QWORD *)(v83 + 216) = v82[27];
    *(_BYTE *)(v83 + 224) = 1;
  }
  *(_BYTE *)(v83 + 232) = 0;
  *(_BYTE *)(v83 + 320) = 0;
  if (*((_BYTE *)v82 + 320))
  {
    *(_DWORD *)(v83 + 312) = -1;
    v89 = *((unsigned int *)v82 + 78);
    if ((_DWORD)v89 != -1)
    {
      result = ((uint64_t (*)(__int128 *))off_1E3413D50[v89])(&v171);
      *(_DWORD *)(v83 + 312) = v89;
    }
    *(_BYTE *)(v83 + 320) = 1;
  }
  *(_QWORD *)(v83 + 328) = v82[41];
  *(_QWORD *)(v83 + 333) = *(uint64_t *)((char *)v82 + 333);
  v90 = v81 + 760 * v79;
  v91 = v81 + 760 * v80;
  v92 = *(_OWORD *)(v91 + 360);
  *(_OWORD *)(v90 + 344) = *(_OWORD *)(v91 + 344);
  *(_OWORD *)(v90 + 360) = v92;
  v93 = *(_OWORD *)(v91 + 392);
  *(_OWORD *)(v90 + 376) = *(_OWORD *)(v91 + 376);
  *(_OWORD *)(v90 + 392) = v93;
  *(_BYTE *)(v90 + 408) = 0;
  *(_BYTE *)(v90 + 752) = 0;
  if (*(_BYTE *)(v91 + 752))
  {
    v94 = v81 + 760 * v80 + 408;
    v95 = *(_QWORD *)v94;
    *(_QWORD *)(v90 + 408) = *(_QWORD *)v94;
    if ((v95 & 0x8000000000000) != 0)
    {
      v125 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFLL);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 + 1, v125));
    }
    *(_BYTE *)(v90 + 424) = 0;
    *(_DWORD *)(v90 + 488) = -1;
    v96 = *(unsigned int *)(v81 + 760 * v80 + 488);
    if ((_DWORD)v96 != -1)
    {
      result = ((uint64_t (*)(__int128 *))off_1E3413D38[v96])(&v171);
      *(_DWORD *)(v90 + 488) = v96;
    }
    v97 = *(_QWORD *)(v94 + 88);
    *(_QWORD *)(v90 + 496) = v97;
    if ((v97 & 0x8000000000000) != 0)
    {
      v127 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 + 1, v127));
    }
    *(_BYTE *)(v90 + 512) = 0;
    *(_DWORD *)(v90 + 576) = -1;
    v98 = *(unsigned int *)(v94 + 168);
    if ((_DWORD)v98 != -1)
    {
      result = ((uint64_t (*)(__int128 *))off_1E3413D38[v98])(&v171);
      *(_DWORD *)(v90 + 576) = v98;
    }
    *(_BYTE *)(v90 + 600) = 0;
    *(_QWORD *)(v90 + 584) = *(_QWORD *)(v94 + 176);
    *(_DWORD *)(v90 + 592) = *(_DWORD *)(v94 + 184);
    *(_BYTE *)(v90 + 632) = 0;
    if (*(_BYTE *)(v94 + 224))
    {
      *(_QWORD *)(v90 + 600) = *(_QWORD *)(v94 + 192);
      *(_DWORD *)(v90 + 608) = *(_DWORD *)(v94 + 200);
      v99 = *(_QWORD *)(v94 + 208);
      *(_QWORD *)(v90 + 616) = v99;
      if ((v99 & 0x8000000000000) != 0)
      {
        v131 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFLL);
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 + 1, v131));
      }
      *(_QWORD *)(v90 + 624) = *(_QWORD *)(v94 + 216);
      *(_BYTE *)(v90 + 632) = 1;
    }
    v100 = (_BYTE *)(v90 + 752);
    *(_BYTE *)(v90 + 640) = 0;
    *(_BYTE *)(v90 + 728) = 0;
    if (*(_BYTE *)(v94 + 320))
    {
      *(_DWORD *)(v90 + 720) = -1;
      v101 = *(unsigned int *)(v94 + 312);
      if ((_DWORD)v101 != -1)
      {
        result = ((uint64_t (*)(__int128 *))off_1E3413D50[v101])(&v171);
        *(_DWORD *)(v90 + 720) = v101;
      }
      *(_BYTE *)(v90 + 728) = 1;
    }
    *(_QWORD *)(v90 + 736) = *(_QWORD *)(v94 + 328);
    *(_QWORD *)(v90 + 741) = *(_QWORD *)(v94 + 333);
LABEL_113:
    *v100 = 1;
  }
LABEL_114:
  ++*(_DWORD *)(a1 + 732);
  return result;
}

uint64_t WebCore::DisplayList::Recorder::translate(uint64_t this, float a2, float a3)
{
  unsigned int v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  if (a2 != 0.0 || a3 != 0.0)
  {
    v3 = *(_DWORD *)(this + 732);
    if (v3)
    {
      v4 = *(_QWORD *)(this + 720) + 760 * v3 - 760;
      v5 = a2;
      v6 = a3;
      v8 = *(double *)(*(_QWORD *)(this + 720) + 760 * v3 - 416);
      v7 = *(double *)(*(_QWORD *)(this + 720) + 760 * v3 - 408);
      v10 = *(double *)(*(_QWORD *)(this + 720) + 760 * v3 - 400);
      v9 = *(double *)(*(_QWORD *)(this + 720) + 760 * v3 - 392);
      if (v8 == 1.0 && v7 == 0.0 && (v10 == 0.0 ? (v11 = v9 == 1.0) : (v11 = 0), v11))
      {
        *(double *)(v4 + 376) = *(double *)(v4 + 376) + v5;
      }
      else
      {
        *(double *)(v4 + 376) = v10 * v6 + v5 * v8 + *(double *)(v4 + 376);
        v6 = v9 * v6 + v5 * v7;
      }
      *(double *)(v4 + 384) = v6 + *(double *)(v4 + 384);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 744))(this);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return this;
}

uint64_t WebCore::GraphicsContextState::GraphicsContextState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  char v21;
  char v22;
  char v23;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  v5 = *((unsigned int *)a2 + 20);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v5])(&v21);
    *(_DWORD *)(a1 + 80) = v5;
  }
  v6 = a2[11];
  *(_QWORD *)(a1 + 88) = v6;
  if ((v6 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_BYTE *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  v7 = *((unsigned int *)a2 + 42);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSQ_OT0_E_JSP_SO_EEEDcmSR_DpOT0____fdiagonal[v7])(&v22);
    *(_DWORD *)(a1 + 168) = v7;
  }
  v8 = a2[22];
  v9 = *((_DWORD *)a2 + 46);
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 176) = v8;
  *(_BYTE *)(a1 + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v10 = a2[24];
    *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 50);
    *(_QWORD *)(a1 + 192) = v10;
    v11 = a2[26];
    *(_QWORD *)(a1 + 208) = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*((_BYTE *)a2 + 320))
  {
    *(_DWORD *)(a1 + 312) = -1;
    v12 = *((unsigned int *)a2 + 78);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS6_20GraphicsGaussianBlurENS6_19GraphicsColorMatrixEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSJ_OT0_E_JSI_SH_EEEDcmSK_DpOT0____fdiagonal[v12])(&v23);
      *(_DWORD *)(a1 + 312) = v12;
    }
    *(_BYTE *)(a1 + 320) = 1;
  }
  v13 = a2[41];
  *(_QWORD *)(a1 + 333) = *(uint64_t *)((char *)a2 + 333);
  *(_QWORD *)(a1 + 328) = v13;
  return a1;
}

uint64_t WebCore::DisplayList::Recorder::scale(uint64_t this, const WebCore::FloatSize *a2)
{
  float v2;
  float v3;
  float v4;
  unsigned int v6;
  float64x2_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  BOOL v12;
  float v13;
  float v14;
  float v15;
  _BOOL4 v17;

  v2 = *(float *)a2;
  if (*(float *)a2 != 1.0)
  {
    v3 = fabsf(v2 + -1.0);
    v4 = fabsf(v2);
    if (v4 < 1.0 && (float)(v4 * 3.4028e38) < v3)
      goto LABEL_7;
    v12 = v4 <= 1.0;
    if ((float)(v4 * 1.1755e-38) <= v3)
      v12 = 1;
    if ((float)(v3 / v4) <= 0.00000011921)
      v12 = 0;
    if (v3 > 0.00000011921 || v12)
      goto LABEL_7;
  }
  v13 = *((float *)a2 + 1);
  if (v13 != 1.0)
  {
    v14 = fabsf(v13 + -1.0);
    v15 = fabsf(v13);
    if (v15 < 1.0 && (float)(v15 * 3.4028e38) < v14)
      goto LABEL_7;
    v17 = v15 <= 1.0;
    if ((float)(v15 * 1.1755e-38) <= v14)
      v17 = 1;
    if ((float)(v14 / v15) <= 0.00000011921)
      v17 = 0;
    if (v14 > 0.00000011921 || v17)
    {
LABEL_7:
      v6 = *(_DWORD *)(this + 732);
      if (v6)
      {
        v7 = (float64x2_t *)(*(_QWORD *)(this + 720) + 760 * v6);
        v8 = v7[-26];
        v9 = v7[-25];
        v7 -= 26;
        v10 = vmulq_n_f64(v8, v2);
        v11 = vmulq_n_f64(v9, *((float *)a2 + 1));
        *v7 = v10;
        v7[1] = v11;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 760))(this);
      }
      else
      {
        __break(0xC471u);
      }
    }
  }
  return this;
}

uint64_t WebCore::DisplayList::Recorder::fillRect(WebCore::DisplayList::Recorder *this, const WebCore::FloatRect *a2, WebCore::Gradient *a3)
{
  WebCore::DisplayList::Recorder::appendStateChangeItemIfNecessary((uint64_t)this, a2);
  return (*(uint64_t (**)(WebCore::DisplayList::Recorder *, const WebCore::FloatRect *, WebCore::Gradient *))(*(_QWORD *)this + 1072))(this, a2, a3);
}

_DWORD *`non-virtual thunk to'WebCore::GraphicsLayerCA::platformCALayerPaintContents(uint64_t a1, int a2, WebCore::GraphicsContext *a3, const WebCore::FloatRect *a4, unsigned __int8 a5)
{
  return WebCore::GraphicsLayerCA::platformCALayerPaintContents(a1 - 608, a2, a3, a4, a5);
}

uint64_t WebCore::TileGrid::platformCALayerIncrementRepaintCount(WebCore::TileGrid *this, WebCore::PlatformCALayer *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _OWORD *v10;
  WebCore::PlatformCALayer *v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;

  v4 = (uint64_t *)((char *)this + 160);
  v3 = *((_QWORD *)this + 20);
  if (v3
    || (WTF::HashTable<WebCore::PlatformCALayer *,WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>>,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashMap<WebCore::PlatformCALayer *,unsigned int,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PlatformCALayer *>>::expand((uint64_t *)this + 20, 0), (v3 = *v4) != 0))
  {
    v5 = *(_DWORD *)(v3 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (_OWORD *)(v3 + 16 * v9);
  v11 = *(WebCore::PlatformCALayer **)v10;
  if (!*(_QWORD *)v10)
  {
LABEL_12:
    *(_QWORD *)v10 = a2;
    *((_DWORD *)v10 + 2) = 0;
    v15 = *v4;
    if (*v4)
      v16 = *(_DWORD *)(v15 - 12) + 1;
    else
      v16 = 1;
    *(_DWORD *)(v15 - 12) = v16;
    v17 = *v4;
    if (*v4)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = (*(_DWORD *)(v17 - 16) + v18);
    v20 = *(unsigned int *)(v17 - 4);
    if (v20 > 0x400)
    {
      if (v20 > 2 * v19)
        goto LABEL_6;
    }
    else if (3 * v20 > 4 * v19)
    {
      goto LABEL_6;
    }
    v10 = WTF::HashTable<WebCore::PlatformCALayer *,WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>>,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashMap<WebCore::PlatformCALayer *,unsigned int,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PlatformCALayer *>>::expand(v4, (void **)v10);
    goto LABEL_6;
  }
  v12 = 0;
  v13 = 1;
  while (v11 != a2)
  {
    if (v11 == (WebCore::PlatformCALayer *)-1)
      v12 = v10;
    v9 = (v9 + v13) & v5;
    v10 = (_OWORD *)(v3 + 16 * v9);
    v11 = *(WebCore::PlatformCALayer **)v10;
    ++v13;
    if (!*(_QWORD *)v10)
    {
      if (v12)
      {
        *v12 = 0;
        v12[1] = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = v12;
      }
      goto LABEL_12;
    }
  }
LABEL_6:
  result = (*((_DWORD *)v10 + 2) + 1);
  *((_DWORD *)v10 + 2) = result;
  return result;
}

uint64_t WebCore::TileGrid::platformCALayerRepaintCount(WebCore::TileGrid *this, WebCore::PlatformCALayer *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::PlatformCALayer *v8;
  int v10;

  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WebCore::PlatformCALayer **)(v2 + 16 * v7);
    if (v8 == a2)
      return *(unsigned int *)(v2 + 16 * v7 + 8);
    v10 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v10) & v3;
      v8 = *(WebCore::PlatformCALayer **)(v2 + 16 * v7);
      ++v10;
      if (v8 == a2)
        return *(unsigned int *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

void WebThreadLock()
{
  _opaque_pthread_t *v0;
  _opaque_pthread_t *v1;
  __CFRunLoop *Current;
  __CFRunLoopObserver *v3;
  __CFRunLoop *Main;

  if (webThreadStarted == 1)
  {
    v0 = (_opaque_pthread_t *)webThread;
    v1 = pthread_self();
    if (!(pthread_equal(v0, v1) | mainThreadLockCount))
    {
      mainThreadHasPendingAutoUnlock = 1;
      Current = CFRunLoopGetCurrent();
      {
        v3 = (__CFRunLoopObserver *)mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver;
      }
      else
      {
        v3 = 0;
        mainRunLoopAutoUnlockObserver(void)::mainRunLoopAutoUnlockObserver = 0;
      }
      CFRunLoopAddObserver(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      _WebThreadLock();
      Main = CFRunLoopGetMain();
      CFRunLoopWakeUp(Main);
    }
  }
}

unint64_t WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 760 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DisplayList::Recorder::ContextState,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_OWORD *WTF::HashTable<WebCore::PlatformCALayer *,WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>>,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashMap<WebCore::PlatformCALayer *,unsigned int,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PlatformCALayer *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _OWORD *v10;
  _OWORD *result;
  void **v12;
  _OWORD *v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (void **)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<WebCore::PlatformCALayer *,WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PlatformCALayer *,unsigned int>>,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashMap<WebCore::PlatformCALayer *,unsigned int,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PlatformCALayer *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::PlatformCALayer *,unsigned int,WTF::DefaultHash<WebCore::PlatformCALayer *>,WTF::HashTraits<WebCore::PlatformCALayer *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::PlatformCALayer *>>,WebCore::PlatformCALayer *>(*a1, (uint64_t)v9);
        *v13 = *(_OWORD *)v12;
        if (v12 == a2)
          v10 = v13;
      }
      v12 += 2;
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  result = 0;
  if (v4)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

WebCore::Page **WebCore::FocusController::setIsVisibleAndActiveInternal(WebCore::FocusController *this, int a2)
{
  uint64_t v4;
  _DWORD *v5;
  WebCore::ScrollableArea *v6;
  uint64_t i;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  WebCore::ScrollableArea *v15;
  uint64_t *v16[5];
  uint64_t *v17;
  uint64_t *v18;
  WebCore::Page *v19;

  ++*(_DWORD *)this;
  v19 = this;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20));
  if (v4)
  {
    v5 = (_DWORD *)v4;
    ++*(_DWORD *)(v4 + 8);
    v6 = (WebCore::ScrollableArea *)(v4 + 64);
    if (a2)
      WebCore::ScrollableArea::contentAreaDidShow(v6);
    else
      WebCore::ScrollableArea::contentAreaDidHide(v6);
    for (i = *((_QWORD *)this + 20); i; i = WebCore::FrameTree::traverseNext((_QWORD *)(i + 48), 0))
    {
      if (!*(_BYTE *)(i + 144))
      {
        v9 = (unsigned int *)(i + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = *(_QWORD *)(i + 288);
        if (v11)
        {
          v12 = *(_DWORD *)(v11 + 8) + 1;
          *(_DWORD *)(v11 + 8) = v12;
          v13 = *(uint64_t **)(v11 + 1288);
          if (v13)
          {
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(*(uint64_t **)(v11 + 1288), &v17);
            WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v13, v16);
            while (v18 != v16[1])
            {
              v15 = *(WebCore::ScrollableArea **)(*v18 + 8);
              (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v15 + 16))(v15);
              if (a2)
                WebCore::ScrollableArea::contentAreaDidShow(v15);
              else
                WebCore::ScrollableArea::contentAreaDidHide(v15);
              (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)v15 + 24))(v15);
              WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
            }
            v12 = *(_DWORD *)(v11 + 8);
          }
          v14 = v12 - 1;
          if (v14)
            *(_DWORD *)(v11 + 8) = v14;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(i + 8));
      }
    }
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  return WTF::Ref<WebCore::Page,WTF::RawPtrTraits<WebCore::Page>,WTF::DefaultRefDerefTraits<WebCore::Page>>::~Ref(&v19);
}

WTF *WebCore::RenderLayer::paintLayerContents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  WTF *result;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  uint64_t shouldApplyPathClipping;
  double v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  const WebCore::FilterOperations *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  int32x4_t v42;
  const WebCore::FilterOperations *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)();
  uint64_t *v48;
  WTF *v49;
  int v50;
  float32x2_t v51;
  uint64_t v52;
  WebCore::RegionContext *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t **v79;
  int v80;
  int v81;
  int v82;
  int v83;
  WebCore::RegionContext *v84;
  int v85;
  int v86;
  float32x2_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  int v97;
  char v98;
  BOOL v99;
  unsigned int v100;
  _BOOL4 v102;
  float32x2_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  BOOL v118;
  char v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)();
  uint64_t (*v133)();
  uint64_t v134;
  WTF *v135;
  WTF **v136;
  WTF *v137;
  int v138;
  WebCore::RenderObject *v139;
  unsigned int v140;
  int v141;
  int v142;
  int v143;
  signed int v144;
  int v145;
  signed int v146;
  unsigned int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  WebCore::Node *v165;
  _BOOL4 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  WebCore::Node *v183;
  BOOL v184;
  _BOOL4 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  WebCore::Node *v198;
  BOOL v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  WebCore::Node *v216;
  uint64_t **v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)();
  uint64_t (*v224)();
  uint64_t v225;
  int *v226;
  float v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t k;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  signed int v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  int v266;
  float32x2_t i;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  WTF *v274;
  void *v275;
  uint64_t v276;
  WTF *v277;
  void *v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  double v287;
  uint64_t v288;
  WTF *v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  uint64_t v295;
  float v296;
  uint64_t v297;
  uint64_t v298;
  float *v299;
  int v300;
  float v301;
  double v302;
  double v303;
  int v304;
  WebCore::TreeScope *v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  WTF *v310;
  WTF *v311;
  uint64_t v312;
  _QWORD *v313;
  WTF *v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  WTF *v319;
  const WebCore::RenderLayerModelObject *v320;
  int v321;
  int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  unsigned int v335;
  unint64_t v336;
  float v337;
  unsigned int v338;
  float v339;
  unint64_t v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  void *v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _BOOL4 v352;
  uint64_t v353;
  uint64_t v354;
  _BOOL4 v355;
  uint64_t v356;
  int v357;
  uint64_t Ref;
  uint64_t v359;
  WebCore::RegionContext *v360;
  uint64_t v361;
  double v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  const WebCore::FilterOperations *v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  __int128 v374;
  int32x4_t v375;
  char v376;
  uint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t *v384;
  WTF *v385;
  uint64_t v386;
  float32x2_t v387;
  uint64_t v388;
  WebCore::RegionContext *v389;
  uint64_t v390;
  float v391;
  uint64_t v392;
  uint64_t v393;
  float *v394;
  int v395;
  int v396;
  int v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  unsigned int v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t **v416;
  int v417;
  int v418;
  int v419;
  int v420;
  WebCore::RegionContext *v421;
  int v422;
  int v423;
  float32x2_t v424;
  uint64_t v425;
  float v426;
  uint64_t v427;
  uint64_t v428;
  float *v429;
  int v430;
  int v431;
  char v432;
  uint64_t v433;
  int v434;
  char v435;
  BOOL v436;
  unsigned int v437;
  _BOOL4 v439;
  float32x2_t v440;
  uint64_t v441;
  int v442;
  unsigned int v443;
  uint64_t v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  uint64_t v450;
  unsigned int v451;
  unsigned int v452;
  int v453;
  int v454;
  BOOL v455;
  char v456;
  int v457;
  int v458;
  int v459;
  unsigned int v460;
  int v461;
  int v462;
  unsigned int v463;
  int v464;
  BOOL v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t (*v469)();
  uint64_t (*v470)();
  uint64_t v471;
  WTF *v472;
  WTF **v473;
  WTF *v474;
  int v475;
  WebCore::RenderObject *v476;
  unsigned int v477;
  int v478;
  int v479;
  int v480;
  signed int v481;
  int v482;
  signed int v483;
  unsigned int v484;
  int v485;
  int v486;
  WebCore::RenderTableCell *j;
  uint64_t v488;
  uint64_t v489;
  int hasBorderRadius;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int v495;
  unsigned int v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unsigned int v500;
  int v501;
  unsigned int v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  WebCore::Node *v506;
  _BOOL4 v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unsigned int v513;
  unsigned int v514;
  uint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unsigned int v518;
  int v519;
  unsigned int v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  WebCore::Node *v524;
  BOOL v525;
  _BOOL4 v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int v531;
  unsigned int v532;
  uint64_t v533;
  int v534;
  unsigned int v535;
  unsigned int v536;
  unsigned int v537;
  uint64_t v538;
  WebCore::Node *v539;
  BOOL v540;
  _BOOL4 v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  unsigned int v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unsigned int v551;
  int v552;
  unsigned int v553;
  uint64_t v554;
  unsigned int v555;
  uint64_t v556;
  WebCore::Node *v557;
  uint64_t **v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t (*v564)();
  uint64_t (*v565)();
  const WebCore::RenderLayerModelObject *v566;
  int v567;
  int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  float v578;
  float v579;
  float v580;
  unsigned int v581;
  unint64_t v582;
  float v583;
  float v584;
  unsigned int v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int *v590;
  uint64_t v591;
  float v592;
  uint64_t v593;
  uint64_t *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t kk;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  signed int v611;
  unsigned int v612;
  uint64_t v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  unsigned int v618;
  unsigned int v619;
  uint64_t v620;
  unint64_t v621;
  unint64_t v622;
  unsigned int v623;
  unsigned int v624;
  unsigned int v625;
  unsigned int v626;
  unsigned int v627;
  uint64_t v628;
  unsigned int v629;
  uint64_t v630;
  int v631;
  unsigned int ***v632;
  int v633;
  uint64_t v634;
  double v635;
  void *v636;
  WTF *v637;
  unsigned int ***v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  __int128 v642;
  int v643;
  int v644;
  uint64_t v645;
  WebCore::RenderElement *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  _BOOL4 v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  __int128 v656;
  uint64_t v657;
  unsigned int v658;
  unsigned int v659;
  uint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unsigned int v663;
  unsigned int v664;
  unsigned int v665;
  unsigned int v666;
  unsigned int v667;
  uint64_t v668;
  unsigned int v669;
  uint64_t v670;
  WebCore::Node *v671;
  WTF *v672;
  void *v673;
  float32x2_t n;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  WTF *v681;
  void *v682;
  uint64_t v683;
  WTF *v684;
  void *v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  double v694;
  uint64_t v695;
  WTF *v696;
  uint64_t v697;
  int v698;
  unsigned int v699;
  int v700;
  int v701;
  uint64_t v702;
  float v703;
  uint64_t v704;
  uint64_t v705;
  float *v706;
  int v707;
  float v708;
  double v709;
  int v710;
  double v711;
  int v712;
  WebCore::TreeScope *v713;
  int v714;
  uint64_t v715;
  WTF *v716;
  uint64_t v717;
  _QWORD *v718;
  WTF *v719;
  WTF *v720;
  uint64_t v721;
  _QWORD *v722;
  uint64_t v723;
  WTF *v724;
  int v725;
  const WebCore::RenderLayerModelObject *v726;
  int v727;
  int v728;
  unsigned int v729;
  unsigned int v730;
  unsigned int v731;
  unsigned int v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  float v740;
  uint64_t v741;
  unint64_t v742;
  float v743;
  uint64_t v744;
  float v745;
  unint64_t v746;
  int v747;
  uint64_t jj;
  uint64_t v749;
  uint64_t v750;
  const WebCore::RenderLayerModelObject *v751;
  int v752;
  int v753;
  unsigned int v754;
  unsigned int v755;
  unsigned int v756;
  unsigned int v757;
  float v758;
  float v759;
  float v760;
  float v761;
  float v762;
  float v763;
  float v764;
  float v765;
  uint64_t v766;
  unint64_t v767;
  float v768;
  float v769;
  uint64_t v770;
  unint64_t v771;
  int v772;
  int v773;
  int v774;
  int v775;
  int v776;
  int v777;
  int v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unsigned int ***v782;
  int v783;
  uint64_t v784;
  double v785;
  void *v786;
  WTF *v787;
  unsigned int ***v788;
  int v789;
  uint64_t v790;
  uint64_t v791;
  _BOOL4 v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  __int128 v796;
  uint64_t v797;
  unsigned int v798;
  unsigned int v799;
  uint64_t v800;
  unint64_t v801;
  unint64_t v802;
  unsigned int v803;
  unsigned int v804;
  unsigned int v805;
  unsigned int v806;
  unsigned int v807;
  uint64_t v808;
  unsigned int v809;
  uint64_t v810;
  WebCore::Node *v811;
  WTF *v812;
  void *v813;
  uint64_t (*v814)();
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  WTF *v819;
  WTF *v820;
  uint64_t (*v821)();
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  int v825;
  uint64_t v826;
  float v827;
  _BOOL4 isDescendantOf;
  WebCore::RenderObject *v829;
  const WebCore::RenderLayerModelObject *v830;
  double v831;
  uint64_t v832;
  uint64_t v833;
  int32x2_t *v834;
  int32x2_t *v835;
  uint64_t (*v836)();
  int32x2_t *v837;
  int v838;
  WTF *v839;
  uint64_t v840;
  uint64_t *v841;
  uint64_t v842;
  uint64_t v843;
  WebCore::RenderSVGResourceClipper *v844;
  unint64_t v845;
  int v846;
  __int32 v847;
  unsigned int v848;
  unsigned int v849;
  unsigned int v850;
  int v851;
  uint64_t v852;
  WTF *v853;
  int v854;
  uint64_t m;
  WebCore::RenderTableCell *v856;
  uint64_t v857;
  WebCore::RenderTableCell *v858;
  uint64_t v859;
  void *v860;
  uint64_t v861;
  int v862;
  char v863;
  unint64_t v864;
  int v865;
  int v866;
  uint64_t v867;
  unsigned int v868;
  uint64_t v869;
  unsigned int v870;
  int v871;
  unsigned int v872;
  unsigned int v873;
  int v874;
  void (*v875)(void);
  int v876;
  unint64_t v877;
  int v878;
  int v879;
  uint64_t v880;
  unsigned int v881;
  uint64_t v882;
  unsigned int v883;
  int v884;
  unsigned int v885;
  unsigned int v886;
  int v887;
  void (*v888)(void);
  WebCore::ReferencedSVGResources *v889;
  const WebCore::ReferencePathOperation *v890;
  WebCore::LegacyRenderSVGResourceClipper *v891;
  __int32 v892;
  unsigned int v893;
  unsigned int v894;
  const WebCore::RenderLayerModelObject *v895;
  float v896;
  float v897;
  float v898;
  float v899;
  const WebCore::RenderLayerModelObject *v900;
  unsigned int v901;
  unsigned int v902;
  float v903;
  float v904;
  uint64_t v905;
  WebCore::RenderElement *v906;
  uint64_t v907;
  int v908;
  char v909;
  uint64_t v910;
  uint64_t v911;
  int v912;
  char v913;
  uint64_t v914;
  int v915;
  unsigned int v916;
  unsigned int v917;
  float v918;
  __int32 v919;
  unsigned int v920;
  unsigned int v921;
  void *v922;
  int v923;
  int v924;
  int v925;
  int v926;
  int v927;
  int v928;
  int v929;
  int v930;
  BOOL v931;
  uint64_t v932;
  WTF *v933;
  int v934;
  __int128 v935;
  int v936;
  int v937;
  uint64_t v938;
  WebCore::RenderElement *v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  int v948;
  WTF *v949;
  WTF *v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  int v954;
  uint64_t v955;
  _BOOL4 v956;
  WebCore::RenderObject *v957;
  const WebCore::RenderLayerModelObject *v958;
  double v959;
  uint64_t v960;
  uint64_t v961;
  int32x2_t *v962;
  int32x2_t *v963;
  int32x2_t *v964;
  int32x2_t *v965;
  int v966;
  WTF *v967;
  uint64_t v968;
  uint64_t *v969;
  uint64_t v970;
  uint64_t v971;
  WebCore::RenderSVGResourceClipper *v972;
  unint64_t v973;
  int v974;
  unint64_t v975;
  __int32 v976;
  unsigned int v977;
  unsigned int v978;
  unsigned int v979;
  int v980;
  uint64_t v981;
  WTF *v982;
  int v983;
  uint64_t ii;
  uint64_t v985;
  uint64_t v986;
  unint64_t v987;
  uint64_t v988;
  void *v989;
  uint64_t v990;
  int v991;
  char v992;
  unint64_t v993;
  int v994;
  int v995;
  uint64_t v996;
  unsigned int v997;
  uint64_t v998;
  unsigned int v999;
  int v1000;
  unsigned int v1001;
  unsigned int v1002;
  int v1003;
  unint64_t v1004;
  int v1005;
  int v1006;
  uint64_t v1007;
  unsigned int v1008;
  uint64_t v1009;
  unsigned int v1010;
  int v1011;
  unsigned int v1012;
  unsigned int v1013;
  int v1014;
  WebCore::ReferencedSVGResources *v1015;
  const WebCore::ReferencePathOperation *v1016;
  WebCore::LegacyRenderSVGResourceClipper *v1017;
  __int32 v1018;
  unsigned int v1019;
  unsigned int v1020;
  const WebCore::RenderLayerModelObject *v1021;
  float v1022;
  float v1023;
  float v1024;
  float v1025;
  const WebCore::RenderLayerModelObject *v1026;
  unsigned int v1027;
  unsigned int v1028;
  float v1029;
  float v1030;
  uint64_t v1031;
  WebCore::RenderElement *v1032;
  uint64_t v1033;
  int v1034;
  char v1035;
  uint64_t v1036;
  int v1037;
  unsigned int v1038;
  unsigned int v1039;
  float v1040;
  __int32 v1041;
  unsigned int v1042;
  unsigned int v1043;
  void *v1044;
  BOOL v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  int v1049;
  char v1050;
  uint64_t v1051;
  int v1052;
  double v1053;
  int v1054;
  WebCore::Node *v1055;
  WebCore::Node *v1056;
  WTF *v1057;
  WebCore::RenderLayerBacking *v1058;
  WebCore::RenderLayerBacking *v1059;
  int v1060;
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  unsigned int v1064;
  unsigned int v1065;
  unsigned int v1066;
  unsigned int v1067;
  uint64_t v1068;
  unsigned int v1069;
  int v1070;
  uint64_t v1071;
  uint64_t v1072;
  WebCore::RenderTableCell *v1073;
  WebCore::RenderTableCell *v1074;
  WebCore::RenderTableCell *v1075;
  WebCore::RenderTableCell *v1076;
  int v1077;
  int v1078;
  WebCore::RenderTableCell *v1079;
  int v1080;
  int v1081;
  int v1082;
  __int16 v1083;
  unsigned int v1084;
  int v1085;
  int v1086;
  int v1087;
  int v1088;
  int v1089;
  int v1090;
  char v1091;
  int v1092;
  unsigned int v1093;
  WebCore::RegionContext *v1094;
  int v1095;
  int v1096;
  unsigned int v1097;
  int v1098;
  int v1099;
  WebCore::RegionContext *v1100;
  int v1101;
  _BOOL4 v1102;
  int v1103;
  int v1104;
  uint64_t v1105;
  int v1106;
  int v1107;
  unsigned int v1108;
  int v1109;
  int v1110;
  int v1111;
  _BOOL4 v1112;
  unsigned int v1113;
  uint64_t v1114;
  WebCore::GraphicsContext *v1116;
  WebCore::GraphicsContext *v1117;
  unint64_t v1118;
  unsigned int v1120;
  WebCore::RenderObject *v1121[2];
  float32x4_t v1122;
  __int128 v1123;
  WebCore::RegionContext *v1124[2];
  WTF *v1125[2];
  _WORD v1126[2];
  int v1127;
  __int128 v1128;
  __int128 v1129;
  char v1130;
  uint64_t v1131;
  WebCore::RegionContext *v1132;
  WebCore::GraphicsContext *v1133;
  int32x4_t v1134;
  __int8 v1135;
  unint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  uint64_t v1139;
  int8x8_t v1140[2];
  int32x4_t v1141;
  int32x4_t v1142;
  __int128 v1143;
  float32x4_t v1144;
  WebCore::Node *v1145;
  unint64_t v1146;
  _BYTE *v1147;
  unint64_t v1148;
  _BYTE v1149[48];
  int v1150;
  unsigned __int8 v1151;
  uint64_t v1152;

  v1152 = *MEMORY[0x1E0C80C00];
  result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  v7 = (a4 >> 10) & 1;
  v8 = v7 == 0;
  if ((a4 & 0x200) == 0)
    v8 = 1;
  v1097 = (a4 >> 5) & 1;
  v1120 = a4;
  if ((a4 & 0x40) != 0
    && (*(_DWORD *)&v8 & ((v1097 == 0) | ((unsigned __int16)(a4 & 0x200) >> 9))) == 0
    && (a4 & 0x8000) != 0)
  {
    if ((_DWORD)result && (*(_BYTE *)(a2 + 716) & 2) != 0)
      return result;
    result = *(WTF **)(a3 + 56);
    if (result)
    {
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 24))(result);
      v1107 = (int)result;
    }
    else
    {
      v1107 = 0;
    }
    v1102 = 0;
    v10 = (a4 >> 15) & 1;
    v11 = *(_QWORD *)(a1 + 24);
    if ((v11 & 0x800) != 0 && (a4 & 0x10) == 0 && ((a4 >> 15) & 1) == 0 && (v1107 & 1) == 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8)
                      + 1944);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 24) + 8) + 40) + 8) + 3382)
        || *(_DWORD *)(v12 + 436))
      {
        v652 = (a4 & 0x200) == 0 || v1097 != 0;
        v1102 = v652;
      }
      else
      {
        v1102 = 0;
      }
    }
    if ((v11 & 0x80000) != 0)
    {
      v14 = *(_QWORD *)(a1 + 224);
      if (!v14 || (v852 = *(_QWORD *)(v14 + 8)) == 0)
      {
        v13 = 1;
        goto LABEL_22;
      }
      if ((*(_BYTE *)(v852 + 52) & 7) == 4 && (*(_BYTE *)(v852 + 53) & 1) == 0 && (*(_BYTE *)(v852 + 53) & 8) != 0)
      {
        v13 = (*(unsigned __int8 *)(*(_QWORD *)(v852 + 144) + 28) >> 2) & 1;
        goto LABEL_22;
      }
    }
    v13 = 0;
LABEL_22:
    v15 = v13 & (v11 >> 11);
    if ((a4 & 0x10) != 0)
      v15 = 0;
    if ((a4 & 0x8000) != 0)
      v16 = 0;
    else
      v16 = v15;
    if ((a4 & 0x800) != 0)
    {
      v826 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v826 + 46) != 49
        && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v826 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v826 + 24) + 8))
      {
LABEL_1500:
        if ((a4 & 1) != 0 && (v11 & 0xC000) == 0x4000)
        {
          if (*(_BYTE *)(a1 + 20))
          {
            v827 = *(float *)(a1 + 16);
            if (*(float *)(a2 + 336) != v827)
            {
              *(float *)(a2 + 336) = v827;
              *(_DWORD *)(a2 + 184) |= 0x100u;
            }
            result = (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
            if (*(_BYTE *)(a1 + 20))
              *(_BYTE *)(a1 + 20) = 0;
          }
          else
          {
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
            result = (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          }
          *(_QWORD *)(a1 + 24) &= ~0x4000uLL;
        }
        return result;
      }
    }
    WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
    v18 = *(_QWORD *)(a1 + 24);
    if ((v18 & 0x80) != 0)
    {
      if ((v18 & 0x4A) != 0)
      {
        WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a1, v17);
        v18 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        WebCore::RenderLayer::clearZOrderLists(a1, v17);
        v18 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFF7FLL;
        *(_QWORD *)(a1 + 24) = v18;
      }
    }
    if ((v18 & 0x100) != 0)
    {
      for (i = *(float32x2_t *)(a1 + 64); ; i = *(float32x2_t *)(*(_QWORD *)&i + 56))
      {
        v1147 = (_BYTE *)i;
        if (!*(_QWORD *)&i)
          break;
        if ((*(_BYTE *)(*(_QWORD *)&i + 24) & 4) != 0)
        {
          v307 = *(_QWORD *)(a1 + 208);
          if (!v307 || *(_QWORD *)(v307 + 144) != *(_QWORD *)&i)
          {
            v308 = *(_QWORD *)(a1 + 104);
            if (!v308)
            {
              v309 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v309 = 0;
              v309[1] = 0;
              v310 = *(WTF **)(a1 + 104);
              *(_QWORD *)(a1 + 104) = v309;
              if (v310)
              {
                v311 = *(WTF **)v310;
                if (*(_QWORD *)v310)
                {
                  *(_QWORD *)v310 = 0;
                  *((_DWORD *)v310 + 2) = 0;
                  WTF::fastFree(v311, v17);
                }
                WTF::fastFree(v310, v17);
                v308 = *(_QWORD *)(a1 + 104);
              }
              else
              {
                v308 = (uint64_t)v309;
              }
            }
            v312 = *(unsigned int *)(v308 + 12);
            if ((_DWORD)v312 == *(_DWORD *)(v308 + 8))
            {
              v313 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v308, v312 + 1, (unint64_t)&v1147);
              v312 = *(unsigned int *)(v308 + 12);
              *(_QWORD *)(*(_QWORD *)v308 + 8 * v312) = *v313;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v308 + 8 * v312) = v1147;
            }
            *(_DWORD *)(v308 + 12) = v312 + 1;
            i = (float32x2_t)v1147;
            *((_QWORD *)v1147 + 3) &= ~0x20000000000000uLL;
          }
        }
      }
      v268 = *(_QWORD *)(a1 + 104);
      if (v268)
      {
        v318 = *(unsigned int *)(v268 + 12);
        if (*(_DWORD *)(v268 + 8) > v318)
        {
          v319 = *(WTF **)v268;
          if ((_DWORD)v318)
          {
            *(_DWORD *)(v268 + 8) = v318;
            *(_QWORD *)v268 = WTF::fastRealloc(v319, (void *)(8 * v318));
          }
          else if (v319)
          {
            *(_QWORD *)v268 = 0;
            *(_DWORD *)(v268 + 8) = 0;
            WTF::fastFree(v319, v17);
          }
        }
      }
      *(_QWORD *)(a1 + 24) &= ~0x100uLL;
    }
    v19 = *(_QWORD *)(a1 + 208);
    if (v19)
    {
      v859 = *(_QWORD *)(v19 + 144);
      if (v859)
      {
        WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v19 + 144), v17);
        WebCore::RenderLayer::updateNormalFlowList(v859, v860);
      }
    }
    v20 = WebCore::RenderLayer::offsetFromAncestor(a1, *(_QWORD *)a3, 0);
    v1137 = v20;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0)
      goto LABEL_427;
    v21 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                        + 8)
                                                                            + 24)
                                                                + 8));
    if (v21
      && (v22 = v21,
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)
                                                                          + 8)
                                                              + 40)
                                                  + 8)
                                      + 1944)
                          + 248),
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 8) + 160),
          (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24) == v23))
    {
      v269 = *(_QWORD *)(*(_QWORD *)(v23 + 328) + 296);
      if (v269 && (v270 = *(_QWORD *)(v269 + 1944)) != 0 && (v271 = *(_QWORD *)(*(_QWORD *)(v270 + 144) + 256)) != 0)
      {
        v272 = *(_QWORD *)(v271 + 224);
        v273 = *(_QWORD *)(v271 + 232);
      }
      else
      {
        v272 = 0;
        v273 = 0;
      }
      v25 = (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 360))(v22, v272, v273) != 0;
    }
    else
    {
      v25 = 1;
    }
    v26 = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(v26 + 22) & 1) == 0
      || (v276 = *(_QWORD *)(a1 + 264)) != 0 && *(_BYTE *)(v276 + 79) && *(_QWORD *)(*(_QWORD *)(v276 + 96) + 256))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40)
                                                          + 8)
                                              + 528)
                                  + 8)
                      + 120);
      v28 = v27 && *(_QWORD *)(v27 + 8) != 0;
    }
    else
    {
      v28 = 1;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8) + 40)
                                                                                            + 8)
                                                                                + 528)
                                                                    + 8)
                                                        + 24)
                                            + 8)
                                + 48)
                    + 16);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 896))(v29);
    if (!v25 && !v28 && v30)
    {
LABEL_427:
      v1086 = 0;
      v1082 = 1;
    }
    else
    {
      v1082 = *(unsigned __int8 *)(a2 + 344);
      if (*(_BYTE *)(a2 + 344))
      {
        *(_BYTE *)(a2 + 344) = 0;
        *(_DWORD *)(a2 + 184) |= 0x2000u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
      v1086 = 1;
    }
    v1136 = v20;
    shouldApplyPathClipping = *(_QWORD *)(a1 + 32);
    if ((*(_BYTE *)(shouldApplyPathClipping + 23) & 0x10) != 0)
    {
      shouldApplyPathClipping = (*(uint64_t (**)(uint64_t))(*(_QWORD *)shouldApplyPathClipping + 648))(shouldApplyPathClipping);
      if (shouldApplyPathClipping)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264)
          || (shouldApplyPathClipping = WebCore::RenderLayer::filtersForPainting((_QWORD *)a1, a2, v1120)) != 0)
        {
          shouldApplyPathClipping = WebCore::RenderLayer::convertToLayerCoords((WebCore::RenderLayer *)a1, *(WebCore::RenderLayer **)a3, 0, 1);
          v20 = shouldApplyPathClipping;
          v1136 = shouldApplyPathClipping;
        }
      }
    }
    v1093 = v1120 & 0xFFFFFFFD;
    v1100 = *(WebCore::RegionContext **)(a3 + 56);
    if (v1100)
      ++*((_DWORD *)v1100 + 2);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264))
    {
      shouldApplyPathClipping = *(_QWORD *)(a1 + 256);
      if (!shouldApplyPathClipping
        || (v825 = *(_DWORD *)(a3 + 48),
            shouldApplyPathClipping = WebCore::RenderLayerBacking::paintsIntoWindow((WebCore::RenderLayerBacking *)shouldApplyPathClipping),
            (shouldApplyPathClipping & 1) != 0)
        || (v825 & 0x200) != 0
        || (v1120 & 0x8100) != 0)
      {
        if ((v1120 & 0x8000) != 0)
        {
          v286 = 1;
        }
        else
        {
          shouldApplyPathClipping = *(_QWORD *)(a3 + 56);
          if (shouldApplyPathClipping)
          {
            shouldApplyPathClipping = (*(uint64_t (**)(uint64_t))(*(_QWORD *)shouldApplyPathClipping + 24))(shouldApplyPathClipping);
            v286 = shouldApplyPathClipping;
          }
          else
          {
            v286 = 0;
          }
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264))
        {
          shouldApplyPathClipping = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
          if ((shouldApplyPathClipping ^ 1 | v286) == 1)
          {
            v1087 = 0;
            if (*(int *)(a3 + 24) < 1 || *(int *)(a3 + 28) < 1)
            {
              v1080 = 0;
              goto LABEL_49;
            }
            if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 46) != 103)
            {
              v288 = *(_QWORD *)(a1 + 224);
              if (v288)
              {
                v932 = *(_QWORD *)(v288 + 8);
                if (v932)
                {
                  if (*(_BYTE *)(v932 + 46) == 75)
                  {
                    v1087 = 0;
                    v1080 = 0;
                    v1093 = ((*(_QWORD *)(a1 + 24) >> 20) & 0x4000 | v1120 & 0xFFFFBFFD) ^ 0x4000;
                    goto LABEL_49;
                  }
                }
              }
              v1125[0] = (WTF *)WebCore::RenderLayer::calculateLayerBounds(a1, *(const WebCore::RenderLayerModelObject **)a3, &v1136, 2u, v287);
              v1125[1] = v289;
              v290 = *(_QWORD *)(a1 + 32);
              v291 = *(_DWORD *)(a3 + 32);
              v70 = __OFADD__((_DWORD)v20, v291);
              v292 = v20 + v291;
              if (v70)
                v292 = (v20 >> 31) + 0x7FFFFFFF;
              v293 = *(_DWORD *)(a3 + 36);
              v70 = __OFADD__(HIDWORD(v20), v293);
              v294 = HIDWORD(v20) + v293;
              if (v70)
                v294 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
              LODWORD(v1147) = v292;
              HIDWORD(v1147) = v294;
              v1121[0] = 0;
              v295 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v290 + 24) + 8) + 40) + 8) + 528);
              v296 = 1.0;
              if (v295)
              {
                v297 = *(_QWORD *)(v295 + 8);
                if (v297)
                {
                  v298 = *(_QWORD *)(v297 + 24);
                  if (v298)
                  {
                    v299 = *(float **)(v298 + 8);
                    if (v299)
                    {
                      v300 = (*(_DWORD *)v299)++;
                      v296 = v299[91];
                      if (v300)
                      {
                        *(_DWORD *)v299 = v300;
                      }
                      else
                      {
                        WebCore::Page::~Page((uint64_t)v299);
                        WTF::fastFree(v672, v673);
                      }
                    }
                  }
                }
              }
              v302 = WebCore::snapSizeToDevicePixel((int *)&v1147, (int *)v1121, v296) * 64.0;
              v303 = v301 * 64.0;
              if (v303 >= 2147483650.0 || v302 <= -2147483650.0 || v303 <= -2147483650.0 || v302 >= 2147483650.0)
              {
                if (v302 >= 2147483650.0)
                {
                  v1052 = 0x7FFFFFFF;
                }
                else if (v302 <= -2147483650.0)
                {
                  v1052 = 0x80000000;
                }
                else
                {
                  v1052 = (int)v302;
                }
                v1134.i32[0] = v1052;
                v1053 = v301 * 64.0;
                if (v1053 >= 2147483650.0)
                {
                  v304 = 0x7FFFFFFF;
                }
                else if (v1053 <= -2147483650.0)
                {
                  v304 = 0x80000000;
                }
                else
                {
                  v304 = (int)v1053;
                }
              }
              else
              {
                v1134.i32[0] = (int)v302;
                v304 = (int)v303;
              }
              v1134.i32[1] = v304;
              v305 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(v290 + 88) + 40) + 264);
              v306 = *((_DWORD *)v305 + 3);
              if (v306 == 1)
              {
LABEL_557:
                WebCore::RenderLayer::computeClipPath((WebCore::RenderLayer *)&v1147, (const WebCore::LayoutSize *)a1, (int32x2_t *)&v1134, (int *)v1125);
                if (v286)
                {
                  if (v1100)
                    shouldApplyPathClipping = (uint64_t)WebCore::RegionContext::pushClip(v1100, (const WebCore::Path *)&v1147);
                  v1087 = 0;
                  v1080 = 1;
                }
                else
                {
                  v1087 = 1;
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
                  shouldApplyPathClipping = (*(uint64_t (**)(uint64_t, _BYTE **, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v1147, v1151);
                  v1080 = 0;
                }
                if (v1150 != -1)
                  shouldApplyPathClipping = ((uint64_t (*)(WebCore::RenderObject **, unint64_t *))off_1E3428F58[v1150])(v1121, &v1148);
                goto LABEL_49;
              }
              if (!v306)
              {
                ++*((_DWORD *)v305 + 2);
                v843 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(*(WebCore::RenderLayerModelObject **)(a1 + 32));
                if (v843)
                {
                  v844 = (WebCore::RenderSVGResourceClipper *)v843;
                  shouldApplyPathClipping = WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(v843, &v1145);
                  if (v1145)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
                    v1147 = 0;
                    v1148 = 0;
                    *(_QWORD *)&v1143 = 0;
                    if (WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32)))
                    {
                      v845 = WebCore::RenderLayerModelObject::nominalSVGLayoutLocation(*(WebCore::RenderLayerModelObject **)(a1 + 32));
                      v846 = v845;
                      v1118 = HIDWORD(v845);
                      LODWORD(v1147) = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32));
                      HIDWORD(v1147) = v847;
                      v1148 = __PAIR64__(v849, v848);
                      v850 = v20 - v846;
                      if (__OFSUB__((_DWORD)v20, v846))
                        v850 = (v20 >> 31) + 0x7FFFFFFF;
                      v851 = HIDWORD(v20) - v1118;
                      if (__OFSUB__(HIDWORD(v20), (_DWORD)v1118))
                        v851 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
                      *(float32x2_t *)&v1143 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v851, v850)), (float32x2_t)vdup_n_s32(0x3C800000u));
                    }
                    else
                    {
                      LODWORD(v1121[0]) = WebCore::RenderLayer::referenceBoxRectForClipPath(a1, (int *)&v1136, (int *)v1125);
                      HIDWORD(v1121[0]) = v915;
                      v1121[1] = (WebCore::RenderObject *)__PAIR64__(v917, v916);
                      WebCore::LayoutRect::LayoutRect((int *)&v1144, (const WebCore::FloatRect *)v1121);
                      v918 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                                                                        + 8));
                      LODWORD(v1147) = WebCore::snapRectToDevicePixels((int *)&v1144, v918);
                      HIDWORD(v1147) = v919;
                      v1148 = __PAIR64__(v921, v920);
                    }
                    if (!WebCore::FloatSize::isZero((WebCore::FloatSize *)&v1143))
                      (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *(float *)&v1143, *((float *)&v1143 + 1));
                    WebCore::RenderSVGResourceClipper::applyPathClipping(v844, (WebCore::GraphicsContext *)a2, *(const WebCore::RenderLayerModelObject **)(a1 + 32), (float32x2_t *)&v1147, v1145);
                    if (!WebCore::FloatSize::isZero((WebCore::FloatSize *)&v1143))
                      (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, -*(float *)&v1143, -*((float *)&v1143 + 1));
                    shouldApplyPathClipping = (uint64_t)v1145;
                    v1145 = 0;
                    if (shouldApplyPathClipping)
                    {
                      if (*(_DWORD *)(shouldApplyPathClipping + 24) == 2)
                      {
                        if ((*(_WORD *)(shouldApplyPathClipping + 30) & 0x400) == 0)
                          shouldApplyPathClipping = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)shouldApplyPathClipping, v922);
                      }
                      else
                      {
                        *(_DWORD *)(shouldApplyPathClipping + 24) -= 2;
                      }
                    }
                    v1087 = 1;
                  }
                  else
                  {
                    v1087 = 0;
                    v1093 = v1120 & 0xFFFFBFFD | 0x4000;
                  }
                }
                else
                {
                  v889 = (WebCore::ReferencedSVGResources *)WebCore::Node::treeScopeForSVGReferences(*(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8));
                  shouldApplyPathClipping = WebCore::ReferencedSVGResources::referencedClipperRenderer(v889, v305, v890);
                  if (shouldApplyPathClipping)
                  {
                    v891 = (WebCore::LegacyRenderSVGResourceClipper *)shouldApplyPathClipping;
                    LODWORD(v1147) = WebCore::RenderLayer::referenceBoxRectForClipPath(a1, (int *)&v1136, (int *)v1125);
                    HIDWORD(v1147) = v892;
                    v1148 = __PAIR64__(v894, v893);
                    WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)&v1147, *(const WebCore::FloatRect **)(a1 + 32), v895);
                    v897 = v896;
                    v899 = v898;
                    WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v900);
                    v1121[1] = (WebCore::RenderObject *)__PAIR64__(v902, v901);
                    *(float *)v1121 = v903 - v897;
                    *((float *)v1121 + 1) = v904 - v899;
                    v905 = a2;
                    v1087 = 1;
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
                    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v905 + 648))(v905, v897, v899);
                    v906 = *(WebCore::RenderElement **)(a1 + 32);
                    v1144.i64[0] = 0;
                    v1144.i64[1] = v1148;
                    WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(v891, (WebCore::GraphicsContext *)a2, v906, (float32x2_t *)&v1144, (const WebCore::FloatRect *)v1121, *(float *)(*((_QWORD *)v906 + 13) + 184));
                    shouldApplyPathClipping = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v905 + 648))(v905, -v897, -v899);
                  }
                  else
                  {
                    v1087 = 0;
                  }
                }
                if (*((_DWORD *)v305 + 2) != 1)
                {
                  v1080 = 0;
                  --*((_DWORD *)v305 + 2);
                  goto LABEL_49;
                }
                shouldApplyPathClipping = (*(uint64_t (**)(WebCore::TreeScope *))(*(_QWORD *)v305 + 8))(v305);
                goto LABEL_48;
              }
              if (v306 == 2 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 45) & 4) != 0)
                goto LABEL_557;
            }
          }
        }
      }
    }
    v1087 = 0;
LABEL_48:
    v1080 = 0;
LABEL_49:
    v1113 = v1093;
    if ((v1093 & 0x4000) != 0)
      v1113 = v1093 & 0xFFFFBFFF;
    v1095 = *(_DWORD *)(a3 + 48);
    v32 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 528)
                                                        + 8)
                                            + 24)
                                + 8)
                    + 1688);
    if (v32 == 0.0)
      WTF::MonotonicTime::now((WTF::MonotonicTime *)shouldApplyPathClipping);
    *(_BYTE *)(a1 + 284) = 0;
    if (v32 - *(double *)(a1 + 272) > 5.0)
    {
      v33 = 0;
    }
    else
    {
      v33 = *(_DWORD *)(a1 + 280);
      if (v33 >= 0x14)
        *(_BYTE *)(a1 + 284) = 1;
    }
    v1110 = v16 & (v1107 ^ 1);
    *(double *)(a1 + 272) = v32;
    *(_DWORD *)(a1 + 280) = v33 + 1;
    v1147 = v1149;
    v1148 = 1;
    v34 = *(_DWORD *)(a3 + 48);
    v35 = (v1113 >> 5) & 0x40;
    if ((v1113 & 0x1000) != 0)
      v35 = 32;
    v36 = v34 & 0x50300 | v35;
    if ((v34 & 0x800) != 0)
      v36 |= (*(_DWORD *)(a1 + 24) & 1) << 11;
    if (v7)
      v36 |= 0x1000u;
    if ((v1120 & 0x8000) != 0)
      v36 = v36 & 0x1000 | (v1097 << 15) | 0x4000;
    v1089 = v36;
    v1134 = 0uLL;
    v1135 = 0;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) == 0 && (v1120 & 0x10) == 0)
    {
      v38 = *(_QWORD *)(a1 + 32);
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 88) + 32) + 32);
      v40 = *(_DWORD *)(v39 + 20);
      if (v40)
      {
        if ((v632 = (unsigned int ***)(v39 + 8), v633 = *(unsigned __int8 *)(v38 + 46), v633 != 103) && v633 != 83
          || v40 != 1
          || *((_BYTE *)**v632 + 12))
        {
          if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v38, v632, v37) & 1) == 0)
          {
            v634 = *(_QWORD *)(a1 + 256);
            if (!v634 || !*(_BYTE *)(v634 + 292))
            {
              if (*(_QWORD *)(a1 + 248))
              {
                v1125[0] = (WTF *)v1126;
                v1125[1] = (WTF *)1;
                WebCore::RenderLayer::collectFragments(a1, v1125, *(WebCore::RenderLayer **)a3, (const WebCore::LayoutRect *)(a3 + 16), 0, ((int)(v1113 << 29) >> 31) & 5, v7 ^ 1, (uint64_t *)&v1137, 0, 1);
                WebCore::RenderLayer::updatePaintingInfoForFragments(a1, v1125[0], HIDWORD(v1125[1]), (_QWORD *)a3, v1113, v1110, &v1137, v635);
                if (HIDWORD(v1125[1]))
                {
                  v637 = v1125[0];
                  *(_OWORD *)v1121 = *(_OWORD *)((char *)v1125[0] + 40);
                  v1122.i8[0] = *((_BYTE *)v1125[0] + 56);
                }
                else
                {
                  v1121[0] = 0;
                  v1121[1] = 0;
                  v1122.i32[0] = 0;
                  v637 = v1125[0];
                }
                v1134 = *(int32x4_t *)v1121;
                v1135 = v1122.i8[0];
                if (v1126 != (_WORD *)v637)
                {
                  if (v637)
                  {
                    v1125[0] = 0;
                    LODWORD(v1125[1]) = 0;
                    WTF::fastFree(v637, v636);
                  }
                }
              }
            }
          }
        }
      }
    }
    v41 = *(_OWORD *)(a3 + 48);
    v1123 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)v1124 = v41;
    v42 = *(int32x4_t *)(a3 + 16);
    *(_OWORD *)v1121 = *(_OWORD *)a3;
    v1122 = (float32x4_t)v42;
    v1091 = 1;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) != 0)
    {
      v1116 = (WebCore::GraphicsContext *)a2;
    }
    else
    {
      v1116 = (WebCore::GraphicsContext *)a2;
      if ((v1120 & 0x10) == 0)
      {
        v44 = *(_QWORD *)(a1 + 32);
        v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 88) + 32) + 32);
        v46 = *(_DWORD *)(v45 + 20);
        if (!v46)
          goto LABEL_70;
        v638 = (unsigned int ***)(v45 + 8);
        v639 = *(unsigned __int8 *)(v44 + 46);
        if ((v639 == 103 || v639 == 83) && v46 == 1 && !*((_BYTE *)**v638 + 12))
          goto LABEL_70;
        if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v44, v638, v43) & 1) != 0)
          goto LABEL_70;
        v640 = *(_QWORD *)(a1 + 256);
        if (v640)
        {
          if (*(_BYTE *)(v640 + 292))
            goto LABEL_70;
        }
        v641 = *(_QWORD *)(a1 + 248);
        if (!v641)
          goto LABEL_70;
        v642 = *(_OWORD *)(v641 + 72);
        *(_OWORD *)v1125 = v642;
        v643 = v642 + v20;
        if (__OFADD__((_DWORD)v642, (_DWORD)v20))
          v643 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        LODWORD(v1125[0]) = v643;
        v644 = HIDWORD(v1125[0]) + HIDWORD(v20);
        if (__OFADD__(HIDWORD(v1125[0]), HIDWORD(v20)))
          v644 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v1125[0]) = v644;
        v1144.i64[0] = WebCore::RenderLayer::calculateLayerBounds(a1, v1121[0], &v1136, 0, *(double *)&v642);
        v1144.i64[1] = v645;
        v646 = *(WebCore::RenderElement **)(a1 + 32);
        *(_QWORD *)&v1143 = WebCore::enclosingIntRect((uint64_t *)&v1144);
        *((_QWORD *)&v1143 + 1) = v647;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1145, (int32x2_t *)&v1143);
        v1141.i64[0] = WebCore::enclosingIntRect((uint64_t *)&v1122);
        v1141.i64[1] = v648;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1142, (int32x2_t *)&v1141);
        v1138 = WebCore::enclosingIntRect((uint64_t *)v1125);
        v1139 = v649;
        WebCore::LayoutRect::LayoutRect(v1140, (int32x2_t *)&v1138);
        v1116 = (WebCore::GraphicsContext *)WebCore::RenderLayerFilters::beginFilterEffect((WebCore::RenderLayerFilters *)v641, v646, (WebCore::GraphicsContext *)a2, (const WebCore::LayoutRect *)&v1145, (const WebCore::LayoutRect *)&v1142, (const WebCore::LayoutRect *)v1140, &v1134);
        if (!v1116)
        {
LABEL_70:
          v1091 = 1;
          v1116 = (WebCore::GraphicsContext *)a2;
        }
        else
        {
          v1122 = *(float32x4_t *)(v641 + 88);
          v650 = *(_QWORD *)(v641 + 136);
          if (v650)
            LOBYTE(v650) = *(_BYTE *)(v650 + 76) != 0;
          BYTE5(v1124[0]) = v650 ^ 1;
          BYTE4(v1124[0]) = WebCore::RenderLayerFilters::hasFilterThatShouldBeRestrictedBySecurityOrigin((WebCore::RenderLayerFilters *)v641);
          if ((v1120 & 1) != 0)
            WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
          v1091 = 0;
          LODWORD(v1124[0]) |= 0x20000u;
        }
      }
    }
    v47 = (uint64_t (*)())v1121[1];
    if (v1121[1])
    {
      isDescendantOf = WebCore::RenderObject::isDescendantOf(*(WebCore::RenderObject **)(a1 + 32), v1121[1]);
      v829 = v1121[1];
      if (isDescendantOf)
        v829 = 0;
      v1105 = (uint64_t)v829;
    }
    else
    {
      v1105 = 0;
    }
    if ((v11 & 0x800) != 0)
    {
      v48 = (uint64_t *)*((_QWORD *)&v1123 + 1);
      if (*((_QWORD *)&v1123 + 1))
      {
        if (**((_QWORD **)&v1123 + 1) && *(_DWORD *)(**((_QWORD **)&v1123 + 1) - 12))
        {
          v830 = v1121[0];
          v1125[0] = 0;
          v1125[1] = 0;
          v1145 = (WebCore::Node *)WebCore::RenderLayer::offsetFromAncestor(a1, (uint64_t)v1121[0], 0);
          v1144.i64[0] = WebCore::RenderLayer::boundingBox(a1, v830, &v1145, 0, v831);
          v1144.i64[1] = v832;
          v833 = *v48;
          v834 = (int32x2_t *)WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::begin((_QWORD *)*v48);
          v835 = v834;
          v836 = v47;
          v837 = 0;
          if (v833)
            v837 = (int32x2_t *)(v833 + 24 * *(unsigned int *)(v833 - 4));
          if (v837 != v834)
          {
            do
            {
              WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1145, v835 + 1);
              if (WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v1144, (const WebCore::LayoutRect *)&v1145))
              {
                (*(void (**)(int32x2_t, uint64_t))(**(_QWORD **)v835 + 16))(*v835, 1);
                v838 = HIDWORD(v1125[1]);
                if (HIDWORD(v1125[1]) == LODWORD(v1125[1]))
                {
                  WTF::Vector<__CTFont const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CTFont const*>((uint64_t)v1125, (unint64_t)v835);
                }
                else
                {
                  *((int32x2_t *)v1125[0] + HIDWORD(v1125[1])) = *v835;
                  HIDWORD(v1125[1]) = v838 + 1;
                }
              }
              while (1)
              {
                v835 += 3;
                if (v835 == (int32x2_t *)v836)
                  break;
                if ((unint64_t)(*(_QWORD *)v835 + 1) > 1)
                  goto LABEL_1526;
              }
              v835 = (int32x2_t *)v836;
LABEL_1526:
              ;
            }
            while (v835 != v837);
            v839 = v1125[0];
            if (HIDWORD(v1125[1]))
            {
              v840 = 8 * HIDWORD(v1125[1]);
              v841 = (uint64_t *)v1125[0];
              do
              {
                v842 = *v841++;
                WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::remove(v48, v842);
                v840 -= 8;
              }
              while (v840);
            }
            if (v839)
            {
              v1125[0] = 0;
              WTF::fastFree(v839, v47);
            }
          }
        }
      }
    }
    v1141 = (int32x4_t)v1122;
    if ((v1110 | v1102 | ((v1120 & 0x10) >> 4) | v10 | v1107) != 1)
      goto LABEL_79;
    if (!BYTE5(v1124[0]) && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 22) & 1) != 0)
    {
      BYTE5(v1124[0]) = 1;
      *(_OWORD *)v1125 = xmmword_1969FCA90;
      v1141.i64[0] = WebCore::RenderLayer::clipRectRelativeToAncestor((_QWORD *)a1, (_QWORD *)v1121[0], v1137, (const WebCore::LayoutRect *)v1125, (v1113 >> 2) & 1);
      v1141.i64[1] = v824;
    }
    WebCore::RenderLayer::collectFragments(a1, &v1147, v1121[0], (const WebCore::LayoutRect *)&v1141, 0, ((int)(v1113 << 29) >> 31) & 5, v7 ^ 1, (uint64_t *)&v1137, 0, 1);
    if (!HIDWORD(v1148))
    {
LABEL_79:
      v50 = v1110 ^ 1;
      if (v1097 && (v50 & 1) == 0 && (v1095 & 1) == 0 && HIDWORD(v1148))
      {
        v51 = (float32x2_t)v1147;
        v52 = (uint64_t)&v1147[104 * HIDWORD(v1148)];
        while (!**(_BYTE **)&v51)
        {
LABEL_122:
          *(_QWORD *)&v51 += 104;
          if (*(_QWORD *)&v51 == v52)
            goto LABEL_123;
        }
        if ((v1120 & 1) != 0)
          WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
        v53 = v1124[1];
        if (v1124[1])
          ++*((_DWORD *)v1124[1] + 2);
        if (!BYTE5(v1124[0]))
        {
          v61 = 0;
          v62 = 0;
LABEL_106:
          v63 = *((_QWORD *)v1121[0] + 4);
          *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v51 + 40);
          v1126[0] = 0;
          v1127 = v1089;
          *(_QWORD *)&v1129 = 0;
          v1128 = (unint64_t)v1105;
          *((_QWORD *)&v1129 + 1) = v63;
          v1130 = 0;
          v1131 = a1;
          v1132 = 0;
          v1133 = v1116;
          v64 = *(_QWORD *)(a1 + 32);
          v66 = *(_DWORD *)(*(_QWORD *)&v51 + 24);
          v65 = *(_DWORD *)(*(_QWORD *)&v51 + 28);
          if (v64 && (*(_BYTE *)(v64 + 45) & 4) != 0)
            goto LABEL_108;
          v68 = 0;
          if ((*(_BYTE *)(v64 + 52) & 7) != 4)
          {
            LODWORD(v67) = 0;
            goto LABEL_109;
          }
          LODWORD(v67) = 0;
          if ((*(_BYTE *)(v64 + 53) & 1) == 0)
          {
LABEL_108:
            v67 = *(_QWORD *)(v64 + 152);
            v68 = v67 & 0xFFFFFFFF00000000;
          }
LABEL_109:
          v69 = HIDWORD(v68);
          v70 = __OFSUB__(v66, (_DWORD)v67);
          v71 = v66 - v67;
          v72 = (v66 >> 31) + 0x7FFFFFFF;
          if (!v70)
            v72 = v71;
          v70 = __OFSUB__(v65, (_DWORD)v69);
          v73 = v65 - v69;
          v74 = (v65 >> 31) + 0x7FFFFFFF;
          if (!v70)
            v74 = v73;
          v70 = __OFADD__(v72, (_DWORD)v1123);
          v75 = v72 + v1123;
          LODWORD(v76) = (v72 >> 31) + 0x7FFFFFFF;
          if (v70)
            v76 = v76;
          else
            v76 = v75;
          v70 = __OFADD__(v74, DWORD1(v1123));
          v77 = v74 + DWORD1(v1123);
          LODWORD(v78) = (v74 >> 31) + 0x7FFFFFFF;
          if (v70)
            v78 = v78;
          else
            v78 = v77;
          v1144.i64[0] = v76 | (v78 << 32);
          (*(void (**)(uint64_t, WTF **, float32x4_t *))(*(_QWORD *)v64 + 680))(v64, v1125, &v1144);
          if (v53)
          {
            if (v61)
            {
              v773 = *((_DWORD *)v53 + 11);
              if (v773)
                *((_DWORD *)v53 + 11) = v773 - 1;
            }
            v281 = *((_DWORD *)v53 + 2);
            if (!v281)
            {
              __break(0xC471u);
              JUMPOUT(0x1942726B0);
            }
            *((_DWORD *)v53 + 2) = v281 - 1;
          }
          if (v62)
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1116 + 104))(v1116, 1);
          goto LABEL_122;
        }
        v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                    + 8)
                        + 528);
        v55 = 1.0;
        if (v54)
        {
          v56 = *(_QWORD *)(v54 + 8);
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 24);
            if (v57)
            {
              v58 = *(float **)(v57 + 8);
              if (v58)
              {
                v59 = (*(_DWORD *)v58)++;
                v55 = v58[91];
                if (v59)
                {
                  *(_DWORD *)v58 = v59;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v58);
                  WTF::fastFree(v274, v275);
                }
              }
            }
          }
        }
        v60 = *(_DWORD *)(*(_QWORD *)&v51 + 40);
        if (v60 == -1073741808
          && *(_DWORD *)(*(_QWORD *)&v51 + 44) == -1073741808
          && *(_DWORD *)(*(_QWORD *)&v51 + 48) == 2147483615
          && *(_DWORD *)(*(_QWORD *)&v51 + 52) == 2147483615
          || v60 == v1122.i32[0]
          && *(_QWORD *)(*(_QWORD *)&v51 + 44) == *(uint64_t *)((char *)v1122.i64 + 4)
          && *(_DWORD *)(*(_QWORD *)&v51 + 52) == v1122.i32[3])
        {
          if (*(_BYTE *)(*(_QWORD *)&v51 + 56))
          {
            v62 = 1;
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1116 + 96))(v1116, 1);
            v61 = 0;
          }
          else
          {
            v61 = 0;
            v62 = 0;
          }
LABEL_105:
          if (*(_BYTE *)(*(_QWORD *)&v51 + 56))
          {
            for (j = *(WebCore::RenderTableCell **)(a1 + 40); j; j = (WebCore::RenderTableCell *)*((_QWORD *)j + 5))
            {
              if ((v1089 & 0x1000) != 0)
              {
                v488 = *((_QWORD *)j + 33);
                if (v488)
                {
                  if (*(_BYTE *)(v488 + 79) && *(_QWORD *)(*(_QWORD *)(v488 + 96) + 256))
                    break;
                }
              }
              v489 = *((_QWORD *)j + 4);
              if ((*(_BYTE *)(v489 + 22) & 1) != 0)
              {
                v1074 = j;
                hasBorderRadius = WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v489 + 80));
                j = v1074;
                if (hasBorderRadius)
                {
                  v876 = WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)a1, v1074, 0);
                  j = v1074;
                  if (v876)
                  {
                    v877 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v1074, (uint64_t)v1121[0], 1);
                    v878 = *((_DWORD *)v1074 + 41);
                    v879 = *((_DWORD *)v1074 + 42);
                    LODWORD(v880) = v878 << 6;
                    if (v878 < -33554432)
                      LODWORD(v880) = 0x80000000;
                    if (v878 <= 0x1FFFFFF)
                      v880 = v880;
                    else
                      v880 = 0x7FFFFFFFLL;
                    if (v879 >= -33554432)
                      v881 = v879 << 6;
                    else
                      v881 = 0x80000000;
                    if (v879 <= 0x1FFFFFF)
                      v882 = v881;
                    else
                      v882 = 0x7FFFFFFFLL;
                    v1146 = v880 | (v882 << 32);
                    v883 = v877 + v1123;
                    if (__OFADD__((_DWORD)v877, (_DWORD)v1123))
                      v883 = (v877 >> 31) + 0x7FFFFFFF;
                    v884 = (HIDWORD(v877) >> 31) + 0x7FFFFFFF;
                    if (!__OFADD__(HIDWORD(v877), DWORD1(v1123)))
                      v884 = HIDWORD(v877) + DWORD1(v1123);
                    v1145 = (WebCore::Node *)__PAIR64__(v884, v883);
                    WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*((_QWORD *)v1074 + 4) + 80), (const WebCore::LayoutRect *)&v1145, 1, 1, (uint64_t)&v1144);
                    WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v1144, v55, (uint64_t)v1125);
                    v1144 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v1122), (float32x4_t)vdupq_n_s32(0x3C800000u));
                    if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v1125, (const WebCore::FloatRect *)&v1144))
                    {
                      v1144 = v1122;
                      WebCore::LayoutRect::intersect((int *)&v1144, (const WebCore::LayoutRect *)&v1145);
                      v1142 = (int32x4_t)v1144;
                      LODWORD(v1143) = WebCore::snapRectToDevicePixels(v1142.i32, v55);
                      *(_QWORD *)((char *)&v1143 + 4) = __PAIR64__(v886, v885);
                      HIDWORD(v1143) = v887;
                      v888 = *(void (**)(void))(*(_QWORD *)v1116 + 456);
                    }
                    else
                    {
                      v888 = *(void (**)(void))(*(_QWORD *)v1116 + 464);
                    }
                    v888();
                    j = v1074;
                  }
                }
              }
              if (j == v1121[0])
                break;
            }
          }
          goto LABEL_106;
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1116 + 96))(v1116, 1);
        *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v51 + 40);
        v321 = LODWORD(v1125[0]) + v1123;
        if (__OFADD__(v1125[0], (_DWORD)v1123))
          v321 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        LODWORD(v1125[0]) = v321;
        v322 = HIDWORD(v1125[0]) + DWORD1(v1123);
        if (__OFADD__(HIDWORD(v1125[0]), DWORD1(v1123)))
          v322 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v1125[0]) = v322;
        WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v320);
        v1144.i64[0] = __PAIR64__(v324, v323);
        v1144.i64[1] = __PAIR64__(v326, v325);
        (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v1116 + 456))(v1116, &v1144);
        v327 = floorf(v1144.f32[0]);
        if (v327 < 2147500000.0 && v327 > -2147500000.0
          || (v328 = 2147500000.0, v327 < 2147500000.0) && (v328 = -2147500000.0, v327 > -2147500000.0))
        {
          v328 = (float)(int)v327;
        }
        v329 = floorf(v1144.f32[1]);
        if (v329 < 2147500000.0 && v329 > -2147500000.0
          || (v330 = 2147500000.0, v329 < 2147500000.0) && (v330 = -2147500000.0, v329 > -2147500000.0))
        {
          v330 = (float)(int)v329;
        }
        v331 = ceilf(v1144.f32[0] + v1144.f32[2]);
        if (v331 < 2147500000.0 && v331 > -2147500000.0
          || (v332 = 2147500000.0, v331 < 2147500000.0) && (v332 = -2147500000.0, v331 > -2147500000.0))
        {
          v332 = (float)(int)v331;
        }
        v333 = ceilf(v1144.f32[1] + v1144.f32[3]);
        if (v333 < 2147500000.0 && v333 > -2147500000.0
          || (v334 = 2147500000.0, v333 < 2147500000.0) && (v334 = -2147500000.0, v333 > -2147500000.0))
        {
          v334 = (float)(int)v333;
        }
        if (v328 < 2147500000.0 && v328 > -2147500000.0)
          goto LABEL_603;
        if (v328 >= 2147500000.0)
        {
          v335 = 0x7FFFFFFF;
        }
        else
        {
          if (v328 > -2147500000.0)
          {
LABEL_603:
            v335 = (int)v328;
            goto LABEL_604;
          }
          v335 = 0x80000000;
        }
LABEL_604:
        if (v330 < 2147500000.0 && v330 > -2147500000.0)
          goto LABEL_606;
        if (v330 >= 2147500000.0)
        {
          v336 = 0x7FFFFFFF00000000;
          goto LABEL_607;
        }
        if (v330 > -2147500000.0)
LABEL_606:
          v336 = (unint64_t)(int)v330 << 32;
        else
          v336 = 0x8000000000000000;
LABEL_607:
        v337 = v332 - v328;
        if (v337 < 2147500000.0 && v337 > -2147500000.0)
          goto LABEL_609;
        if (v337 >= 2147500000.0)
        {
          v338 = 0x7FFFFFFF;
        }
        else
        {
          if (v337 > -2147500000.0)
          {
LABEL_609:
            v338 = (int)v337;
            goto LABEL_610;
          }
          v338 = 0x80000000;
        }
LABEL_610:
        v339 = v334 - v330;
        if (v339 < 2147500000.0 && v339 > -2147500000.0)
          goto LABEL_612;
        if (v339 >= 2147500000.0)
        {
          v340 = 0x7FFFFFFF00000000;
          goto LABEL_613;
        }
        if (v339 > -2147500000.0)
LABEL_612:
          v340 = (unint64_t)(int)v339 << 32;
        else
          v340 = 0x8000000000000000;
LABEL_613:
        v1145 = (WebCore::Node *)(v336 | v335);
        v1146 = v340 | v338;
        if (v53)
          WebCore::RegionContext::pushClip(v53, (const WebCore::IntRect *)&v1145);
        v61 = 1;
        v62 = 1;
        goto LABEL_105;
      }
LABEL_123:
      v79 = *(uint64_t ***)(a1 + 96);
      if (!v79 || (v228 = *((unsigned int *)v79 + 3), !(_DWORD)v228) || (*(_BYTE *)(a1 + 25) & 0x10) == 0)
      {
LABEL_124:
        if ((v1110 & (v1120 >> 6)) != 1)
        {
          if (HIDWORD(v1148))
          {
            v240 = BYTE5(v1124[0]);
            v241 = 104 * HIDWORD(v1148);
            v242 = (uint64_t)(v1147 + 40);
            do
            {
              *(_OWORD *)v1125 = *(_OWORD *)(v242 + 20);
              v1126[0] = 4096;
              v1127 = v1089;
              v1128 = 0u;
              v1129 = 0u;
              v1130 = 0;
              v1131 = 0;
              v1132 = v1124[1];
              v1133 = v1116;
              if (v240)
              {
                v243 = *(_QWORD *)v242;
                v244 = ((int)*(_QWORD *)v242 >> 6);
                v245 = *(_DWORD *)(v242 + 8);
                if (v245)
                {
                  v70 = __OFADD__((_DWORD)v243, v245);
                  v246 = v243 + v245;
                  if (v70)
                    v246 = (v243 >> 31) + 0x7FFFFFFF;
                  if (v246 > 2147483583)
                  {
                    v247 = 0x1FFFFFF;
                  }
                  else if (v246 >= 0)
                  {
                    v247 = (v246 + 63) >> 6;
                  }
                  else
                  {
                    v247 = -(-v246 >> 6);
                  }
                }
                else
                {
                  v247 = (int)*(_QWORD *)v242 >> 6;
                }
                v248 = v243 >> 38;
                v249 = *(_DWORD *)(v242 + 12);
                v250 = v243 >> 38;
                if (v249)
                {
                  v251 = HIDWORD(v243);
                  LODWORD(v243) = HIDWORD(v243) + v249;
                  if (__OFADD__(HIDWORD(v243), v249))
                    LODWORD(v243) = (v251 >> 31) + 0x7FFFFFFF;
                  if ((int)v243 > 2147483583)
                  {
                    LODWORD(v250) = 0x1FFFFFF;
                  }
                  else if ((v243 & 0x80000000) != 0)
                  {
                    LODWORD(v250) = -(-(int)v243 >> 6);
                  }
                  else
                  {
                    LODWORD(v250) = (v243 + 63) >> 6;
                  }
                }
                v1144.i64[0] = v244 | (v248 << 32);
                v1144.i32[2] = v247 - v244;
                v1144.i32[3] = v250 - v248;
                WebCore::RegionContext::pushClip(v1124[1], (const WebCore::IntRect *)&v1144);
              }
              v252 = *(_QWORD *)(a1 + 32);
              v254 = *(_DWORD *)(v242 - 16);
              v253 = *(_DWORD *)(v242 - 12);
              if (v252 && (*(_BYTE *)(v252 + 45) & 4) != 0
                || ((*(_BYTE *)(v252 + 52) & 7) == 4 ? (v931 = (*(_BYTE *)(v252 + 53) & 1) == 0) : (v931 = 0), v931))
              {
                v255 = *(_QWORD *)(v252 + 152);
                v256 = v255 & 0xFFFFFFFF00000000;
              }
              else
              {
                v256 = 0;
                LODWORD(v255) = 0;
              }
              v257 = HIDWORD(v256);
              v70 = __OFSUB__(v254, (_DWORD)v255);
              v258 = v254 - v255;
              v259 = (v254 >> 31) + 0x7FFFFFFF;
              if (!v70)
                v259 = v258;
              v70 = __OFSUB__(v253, (_DWORD)v257);
              v260 = v253 - v257;
              v261 = (v253 >> 31) + 0x7FFFFFFF;
              if (!v70)
                v261 = v260;
              v70 = __OFADD__(v259, (_DWORD)v1123);
              v262 = v259 + v1123;
              LODWORD(v263) = (v259 >> 31) + 0x7FFFFFFF;
              if (v70)
                v263 = v263;
              else
                v263 = v262;
              v70 = __OFADD__(v261, DWORD1(v1123));
              v264 = v261 + DWORD1(v1123);
              LODWORD(v265) = (v261 >> 31) + 0x7FFFFFFF;
              if (v70)
                v265 = v265;
              else
                v265 = v264;
              v1144.i64[0] = v263 | (v265 << 32);
              (*(void (**)(uint64_t, WTF **, float32x4_t *))(*(_QWORD *)v252 + 680))(v252, v1125, &v1144);
              v240 = BYTE5(v1124[0]);
              if (BYTE5(v1124[0]))
              {
                v266 = *((_DWORD *)v1132 + 11);
                if (v266)
                  *((_DWORD *)v1132 + 11) = v266 - 1;
              }
              v242 += 104;
              v241 -= 104;
            }
            while (v241);
          }
          goto LABEL_380;
        }
        if ((v1120 & 1) != 0 && HIDWORD(v1148))
        {
          v225 = 104 * HIDWORD(v1148);
          v226 = (int *)(v1147 + 72);
          while (!*((_BYTE *)v226 - 72) || *(v226 - 1) < 1 || *v226 < 1)
          {
            v226 += 26;
            v225 -= 104;
            if (!v225)
              goto LABEL_126;
          }
          WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
        }
LABEL_126:
        if (((uint64_t)v1124[0] & 8) != 0)
          v80 = 8;
        else
          v80 = v1089;
        if (((uint64_t)v1124[0] & 4) != 0)
          v81 = 4;
        else
          v81 = v80;
        v82 = v81 | (uint64_t)v1124[0] & 0x51D00;
        if (((uint64_t)v1124[0] & 0x20000) != 0)
          v82 |= 0x20000u;
        v83 = v80 | (uint64_t)v1124[0] & 0x51D00;
        if (((uint64_t)v1124[0] & 0x20004) != 0)
          v83 = v82;
        v1111 = v83;
        v84 = v1124[1];
        if (v1124[1])
          ++*((_DWORD *)v1124[1] + 2);
        v85 = 0;
        if (!BYTE5(v1124[0]))
        {
          v86 = 0;
          goto LABEL_160;
        }
        v86 = 0;
        if (HIDWORD(v1148) != 1)
          goto LABEL_160;
        v87 = (float32x2_t)v1147;
        if (!*v1147 || *((int *)v1147 + 17) < 1 || *((int *)v1147 + 18) < 1)
        {
          v85 = 0;
          v86 = 0;
          goto LABEL_160;
        }
        v88 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                    + 8)
                        + 528);
        v89 = 1.0;
        if (v88)
        {
          v90 = *(_QWORD *)(v88 + 8);
          if (v90)
          {
            v91 = *(_QWORD *)(v90 + 24);
            if (v91)
            {
              v92 = *(float **)(v91 + 8);
              if (v92)
              {
                v93 = (*(_DWORD *)v92)++;
                v89 = v92[91];
                if (v93)
                {
                  *(_DWORD *)v92 = v93;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v92);
                  WTF::fastFree(v277, v278);
                }
              }
            }
          }
        }
        v94 = *(_DWORD *)(*(_QWORD *)&v87 + 60);
        if (v94 == -1073741808
          && *(_DWORD *)(*(_QWORD *)&v87 + 64) == -1073741808
          && *(_DWORD *)(*(_QWORD *)&v87 + 68) == 2147483615
          && *(_DWORD *)(*(_QWORD *)&v87 + 72) == 2147483615
          || v94 == v1122.i32[0]
          && *(_QWORD *)(*(_QWORD *)&v87 + 64) == *(uint64_t *)((char *)v1122.i64 + 4)
          && *(_DWORD *)(*(_QWORD *)&v87 + 72) == v1122.i32[3])
        {
          if (*(_BYTE *)(*(_QWORD *)&v87 + 76))
          {
            v85 = 1;
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1116 + 96))(v1116, 1);
          }
          else
          {
            v85 = 0;
          }
          v86 = 0;
LABEL_159:
          if (*(_BYTE *)(*(_QWORD *)&v87 + 76))
          {
            v587 = a1;
            do
            {
              if ((v1111 & 0x1000) != 0)
              {
                v588 = *(_QWORD *)(v587 + 264);
                if (v588)
                {
                  if (*(_BYTE *)(v588 + 79) && *(_QWORD *)(*(_QWORD *)(v588 + 96) + 256))
                    break;
                }
              }
              v589 = *(_QWORD *)(v587 + 32);
              if ((*(_BYTE *)(v589 + 22) & 1) != 0
                && WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v589 + 80))
                && WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)a1, (const WebCore::RenderLayer *)v587, 0))
              {
                v864 = WebCore::RenderLayer::offsetFromAncestor(v587, (uint64_t)v1121[0], 1);
                v865 = *(_DWORD *)(v587 + 164);
                v866 = *(_DWORD *)(v587 + 168);
                LODWORD(v867) = v865 << 6;
                if (v865 < -33554432)
                  LODWORD(v867) = 0x80000000;
                if (v865 <= 0x1FFFFFF)
                  v867 = v867;
                else
                  v867 = 0x7FFFFFFFLL;
                if (v866 >= -33554432)
                  v868 = v866 << 6;
                else
                  v868 = 0x80000000;
                if (v866 <= 0x1FFFFFF)
                  v869 = v868;
                else
                  v869 = 0x7FFFFFFFLL;
                v1146 = v867 | (v869 << 32);
                v870 = v864 + v1123;
                if (__OFADD__((_DWORD)v864, (_DWORD)v1123))
                  v870 = (v864 >> 31) + 0x7FFFFFFF;
                v871 = (HIDWORD(v864) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(HIDWORD(v864), DWORD1(v1123)))
                  v871 = HIDWORD(v864) + DWORD1(v1123);
                v1145 = (WebCore::Node *)__PAIR64__(v871, v870);
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)(v587 + 32) + 80), (const WebCore::LayoutRect *)&v1145, 1, 1, (uint64_t)&v1144);
                WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v1144, v89, (uint64_t)v1125);
                v1144 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v1122), (float32x4_t)vdupq_n_s32(0x3C800000u));
                if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v1125, (const WebCore::FloatRect *)&v1144))
                {
                  v1144 = v1122;
                  WebCore::LayoutRect::intersect((int *)&v1144, (const WebCore::LayoutRect *)&v1145);
                  v1142 = (int32x4_t)v1144;
                  LODWORD(v1143) = WebCore::snapRectToDevicePixels(v1142.i32, v89);
                  *(_QWORD *)((char *)&v1143 + 4) = __PAIR64__(v873, v872);
                  HIDWORD(v1143) = v874;
                  v875 = *(void (**)(void))(*(_QWORD *)v1116 + 456);
                }
                else
                {
                  v875 = *(void (**)(void))(*(_QWORD *)v1116 + 464);
                }
                v875();
              }
              if ((WebCore::RenderObject *)v587 == v1121[0])
                break;
              v587 = *(_QWORD *)(v587 + 40);
            }
            while (v587);
          }
LABEL_160:
          v95 = (char)v1124[0];
          v96 = *(_QWORD *)(a1 + 32);
          v97 = *(_BYTE *)(v96 + 52) & 7;
          v98 = *(_BYTE *)(v96 + 53);
          v99 = v97 == 4 && (v98 & 1) == 0;
          v1098 = v86;
          if (v99 && (v98 & 2) == 0)
          {
            if (((uint64_t)v1124[0] & 0x81) == 0)
              WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(a1, 8, (uint64_t)v1147, HIDWORD(v1148), (uint64_t)v1116, (uint64_t)v1121, v1111, v1105);
            goto LABEL_377;
          }
          v43 = (const WebCore::FilterOperations *)v1147;
          v100 = HIDWORD(v1148);
          if (((uint64_t)v1124[0] & 1) != 0)
          {
            v1077 = v50;
            goto LABEL_1497;
          }
          v102 = HIDWORD(v1148) > 1 && BYTE5(v1124[0]) != 0;
          if (!HIDWORD(v1148))
          {
            if (((uint64_t)v1124[0] & 0x80) != 0)
            {
              v1077 = v50;
              v100 = 0;
              goto LABEL_1497;
            }
            goto LABEL_377;
          }
          v1077 = v50;
          v150 = 104 * HIDWORD(v1148);
          v151 = (uint64_t)(v1147 + 60);
          while (!*(_BYTE *)(v151 - 60) || *(int *)(v151 + 8) < 1 || *(int *)(v151 + 12) < 1)
          {
LABEL_281:
            v151 += 104;
            v150 -= 104;
            if (!v150)
            {
              v43 = (const WebCore::FilterOperations *)v1147;
              v100 = HIDWORD(v1148);
              v50 = v1077;
              if ((v95 & 0x80) == 0)
              {
                v167 = HIDWORD(v1148) > 1 && BYTE5(v1124[0]) != 0;
                if (!HIDWORD(v1148))
                  goto LABEL_377;
                v168 = 104 * HIDWORD(v1148);
                v169 = (uint64_t)(v1147 + 60);
                while (2)
                {
                  if (*(_BYTE *)(v169 - 60) && *(int *)(v169 + 8) >= 1 && *(int *)(v169 + 12) >= 1)
                  {
                    v1144.i64[0] = (uint64_t)v1116;
                    v1144.i8[8] = 0;
                    v1145 = v1124[1];
                    if (v1124[1])
                      ++*((_DWORD *)v1124[1] + 2);
                    LOBYTE(v1146) = 0;
                    if (v167)
                      WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1116, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1111, v169, 0);
                    v170 = *((_QWORD *)v1121[0] + 4);
                    *(_OWORD *)v1125 = *(_OWORD *)v169;
                    v1126[0] = 4;
                    v1127 = v1111;
                    *(_QWORD *)&v1129 = 0;
                    v1128 = (unint64_t)v1105;
                    *((_QWORD *)&v1129 + 1) = v170;
                    v1130 = BYTE4(v1124[0]);
                    v1131 = a1;
                    v1132 = 0;
                    v1133 = v1116;
                    v171 = *(_QWORD *)(a1 + 32);
                    v173 = *(_DWORD *)(v169 - 36);
                    v172 = *(_DWORD *)(v169 - 32);
                    if (v171 && (*(_BYTE *)(v171 + 45) & 4) != 0)
                    {
LABEL_300:
                      v174 = *(_QWORD *)(v171 + 152);
                      v175 = v174 & 0xFFFFFFFF00000000;
                    }
                    else
                    {
                      v175 = 0;
                      if ((*(_BYTE *)(v171 + 52) & 7) == 4)
                      {
                        LODWORD(v174) = 0;
                        v50 = v1077;
                        if ((*(_BYTE *)(v171 + 53) & 1) == 0)
                          goto LABEL_300;
                      }
                      else
                      {
                        LODWORD(v174) = 0;
                        v50 = v1077;
                      }
                    }
                    v176 = HIDWORD(v175);
                    v70 = __OFSUB__(v173, (_DWORD)v174);
                    v177 = v173 - v174;
                    v178 = (v173 >> 31) + 0x7FFFFFFF;
                    if (v70)
                      v177 = v178;
                    v179 = v172 - v176;
                    if (__OFSUB__(v172, (_DWORD)v176))
                      v179 = (v172 >> 31) + 0x7FFFFFFF;
                    v70 = __OFADD__(v177, (_DWORD)v1123);
                    LODWORD(v180) = v177 + v1123;
                    v181 = (v177 >> 31) + 0x7FFFFFFF;
                    if (v70)
                      v180 = v181;
                    else
                      v180 = v180;
                    v182 = v179 + DWORD1(v1123);
                    if (__OFADD__(v179, DWORD1(v1123)))
                      v182 = (v179 >> 31) + 0x7FFFFFFF;
                    *(_QWORD *)&v1143 = v180 | (v182 << 32);
                    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v171 + 680))(v171, v1125, &v1143);
                    v183 = v1145;
                    if (v1145)
                    {
                      if ((_BYTE)v1146)
                      {
                        v775 = *((_DWORD *)v1145 + 11);
                        if (v775)
                          *((_DWORD *)v1145 + 11) = v775 - 1;
                      }
                      v283 = *((_DWORD *)v183 + 2);
                      if (!v283)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1942726F0);
                      }
                      *((_DWORD *)v183 + 2) = v283 - 1;
                    }
                    if (v1144.i8[8])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
                  }
                  v169 += 104;
                  v168 -= 104;
                  if (v168)
                    continue;
                  break;
                }
                v184 = BYTE5(v1124[0]) && HIDWORD(v1148) > 1uLL;
                v185 = v184;
                if (!HIDWORD(v1148))
                  goto LABEL_377;
                v186 = 104 * HIDWORD(v1148);
                v187 = (uint64_t)(v1147 + 60);
                while (2)
                {
                  if (*(_BYTE *)(v187 - 60) && *(int *)(v187 + 8) >= 1 && *(int *)(v187 + 12) >= 1)
                  {
                    v1144.i64[0] = (uint64_t)v1116;
                    v1144.i8[8] = 0;
                    v1145 = v1124[1];
                    if (v1124[1])
                      ++*((_DWORD *)v1124[1] + 2);
                    LOBYTE(v1146) = 0;
                    if (v185)
                      WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1116, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1111, v187, 0);
                    v188 = *((_QWORD *)v1121[0] + 4);
                    *(_OWORD *)v1125 = *(_OWORD *)v187;
                    v1126[0] = 8;
                    v1127 = v1111;
                    v1128 = (unint64_t)v1105;
                    v1130 = BYTE4(v1124[0]);
                    v1131 = a1;
                    v1132 = 0;
                    v1133 = v1116;
                    *(_QWORD *)&v1129 = *((_QWORD *)&v1123 + 1);
                    *((_QWORD *)&v1129 + 1) = v188;
                    v189 = *(_QWORD *)(a1 + 32);
                    v191 = *(_DWORD *)(v187 - 36);
                    v190 = *(_DWORD *)(v187 - 32);
                    if (v189 && (*(_BYTE *)(v189 + 45) & 4) != 0)
                    {
LABEL_332:
                      v192 = *(_QWORD *)(v189 + 152);
                      v193 = HIDWORD(v192);
                    }
                    else
                    {
                      v193 = 0;
                      if ((*(_BYTE *)(v189 + 52) & 7) == 4)
                      {
                        LODWORD(v192) = 0;
                        v50 = v1077;
                        if ((*(_BYTE *)(v189 + 53) & 1) == 0)
                          goto LABEL_332;
                      }
                      else
                      {
                        LODWORD(v192) = 0;
                        v50 = v1077;
                      }
                    }
                    v70 = __OFSUB__(v191, (_DWORD)v192);
                    v194 = v191 - v192;
                    if (v70)
                      v194 = (v191 >> 31) + 0x7FFFFFFF;
                    v195 = v190 - v193;
                    if (__OFSUB__(v190, v193))
                      v195 = (v190 >> 31) + 0x7FFFFFFF;
                    v196 = v194 + v1123;
                    if (__OFADD__(v194, (_DWORD)v1123))
                      v196 = (v194 >> 31) + 0x7FFFFFFF;
                    v197 = v195 + DWORD1(v1123);
                    if (__OFADD__(v195, DWORD1(v1123)))
                      v197 = (v195 >> 31) + 0x7FFFFFFF;
                    *(_QWORD *)&v1143 = v196 | (unint64_t)(v197 << 32);
                    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v189 + 680))(v189, v1125, &v1143);
                    v198 = v1145;
                    if (v1145)
                    {
                      if ((_BYTE)v1146)
                      {
                        v776 = *((_DWORD *)v1145 + 11);
                        if (v776)
                          *((_DWORD *)v1145 + 11) = v776 - 1;
                      }
                      v284 = *((_DWORD *)v198 + 2);
                      if (!v284)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194272710);
                      }
                      *((_DWORD *)v198 + 2) = v284 - 1;
                    }
                    if (v1144.i8[8])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
                  }
                  v187 += 104;
                  v186 -= 104;
                  if (v186)
                    continue;
                  break;
                }
                v199 = BYTE5(v1124[0]) && HIDWORD(v1148) > 1uLL;
                v200 = v199;
                if (!HIDWORD(v1148))
                  goto LABEL_377;
                v201 = 104 * HIDWORD(v1148);
                v202 = (uint64_t)(v1147 + 60);
                while (2)
                {
                  if (*(_BYTE *)(v202 - 60) && *(int *)(v202 + 8) >= 1 && *(int *)(v202 + 12) >= 1)
                  {
                    v1144.i64[0] = (uint64_t)v1116;
                    v1144.i8[8] = 0;
                    v1145 = v1124[1];
                    if (v1124[1])
                      ++*((_DWORD *)v1124[1] + 2);
                    LOBYTE(v1146) = 0;
                    if (v200)
                      WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1116, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1111, v202, 0);
                    v203 = *((_QWORD *)v1121[0] + 4);
                    *(_OWORD *)v1125 = *(_OWORD *)v202;
                    v1126[0] = 32;
                    v1127 = v1111;
                    *(_QWORD *)&v1129 = 0;
                    v1128 = (unint64_t)v1105;
                    *((_QWORD *)&v1129 + 1) = v203;
                    v1130 = BYTE4(v1124[0]);
                    v1131 = a1;
                    v1132 = 0;
                    v1133 = v1116;
                    v204 = *(_QWORD *)(a1 + 32);
                    v206 = *(_DWORD *)(v202 - 36);
                    v205 = *(_DWORD *)(v202 - 32);
                    if (v204 && (*(_BYTE *)(v204 + 45) & 4) != 0)
                    {
LABEL_362:
                      v207 = *(_QWORD *)(v204 + 152);
                      v208 = v207 & 0xFFFFFFFF00000000;
                    }
                    else
                    {
                      v208 = 0;
                      if ((*(_BYTE *)(v204 + 52) & 7) == 4)
                      {
                        LODWORD(v207) = 0;
                        v50 = v1077;
                        if ((*(_BYTE *)(v204 + 53) & 1) == 0)
                          goto LABEL_362;
                      }
                      else
                      {
                        LODWORD(v207) = 0;
                        v50 = v1077;
                      }
                    }
                    v209 = HIDWORD(v208);
                    v70 = __OFSUB__(v206, (_DWORD)v207);
                    v210 = v206 - v207;
                    v211 = (v206 >> 31) + 0x7FFFFFFF;
                    if (v70)
                      v210 = v211;
                    v212 = v205 - v209;
                    if (__OFSUB__(v205, (_DWORD)v209))
                      v212 = (v205 >> 31) + 0x7FFFFFFF;
                    v70 = __OFADD__(v210, (_DWORD)v1123);
                    LODWORD(v213) = v210 + v1123;
                    v214 = (v210 >> 31) + 0x7FFFFFFF;
                    if (v70)
                      v213 = v214;
                    else
                      v213 = v213;
                    v215 = v212 + DWORD1(v1123);
                    if (__OFADD__(v212, DWORD1(v1123)))
                      v215 = (v212 >> 31) + 0x7FFFFFFF;
                    *(_QWORD *)&v1143 = v213 | (v215 << 32);
                    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v204 + 680))(v204, v1125, &v1143);
                    v216 = v1145;
                    if (v1145)
                    {
                      if ((_BYTE)v1146)
                      {
                        v777 = *((_DWORD *)v1145 + 11);
                        if (v777)
                          *((_DWORD *)v1145 + 11) = v777 - 1;
                      }
                      v285 = *((_DWORD *)v216 + 2);
                      if (!v285)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194272730);
                      }
                      *((_DWORD *)v216 + 2) = v285 - 1;
                    }
                    if (v1144.i8[8])
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
                  }
                  v202 += 104;
                  v201 -= 104;
                  if (!v201)
                    goto LABEL_377;
                  continue;
                }
              }
LABEL_1497:
              WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(a1, 128, (uint64_t)v43, v100, (uint64_t)v1116, (uint64_t)v1121, v1111, v1105);
              v50 = v1077;
LABEL_377:
              if (v84)
              {
                if (v1098)
                {
                  v747 = *((_DWORD *)v84 + 11);
                  if (v747)
                    *((_DWORD *)v84 + 11) = v747 - 1;
                }
                v280 = *((_DWORD *)v84 + 2);
                if (!v280)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19427260CLL);
                }
                *((_DWORD *)v84 + 2) = v280 - 1;
              }
              if (v85)
                (*(void (**)(WebCore::GraphicsContext *, uint64_t, const WebCore::FilterOperations *))(*(_QWORD *)v1116 + 104))(v1116, 1, v43);
LABEL_380:
              if (v1107)
                WebCore::RenderLayer::collectAccessibilityRegionsForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), (uint64_t)v1116, (uint64_t)v1121, v1089);
              if (v1102 && HIDWORD(v1148))
              {
                v653 = 104 * HIDWORD(v1148);
                v654 = (uint64_t)(v1147 + 40);
                while (*(int *)(v654 + 8) < 1 || *(int *)(v654 + 12) < 1)
                {
LABEL_1207:
                  v654 += 104;
                  v653 -= 104;
                  if (!v653)
                    goto LABEL_383;
                }
                v655 = *((_QWORD *)v1121[0] + 4);
                v656 = *(_OWORD *)v654;
                v1128 = (unint64_t)v1105;
                *((_QWORD *)&v1129 + 1) = v655;
                *(_OWORD *)v1125 = v656;
                v1126[0] = 64;
                v1127 = v1089;
                *(_QWORD *)&v1129 = 0;
                v1130 = 0;
                v1131 = a1;
                v1132 = 0;
                v1133 = v1116;
                v1144.i64[0] = (uint64_t)v1116;
                v1144.i8[8] = 0;
                v1145 = v1124[1];
                if (v1124[1])
                  ++*((_DWORD *)v1124[1] + 2);
                LOBYTE(v1146) = 0;
                WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1116, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1089, v654, 1);
                v657 = *(_QWORD *)(a1 + 32);
                v659 = *(_DWORD *)(v654 - 16);
                v658 = *(_DWORD *)(v654 - 12);
                if (v657 && (*(_BYTE *)(v657 + 45) & 4) != 0)
                  goto LABEL_1193;
                v661 = 0;
                if ((*(_BYTE *)(v657 + 52) & 7) != 4)
                {
                  LODWORD(v660) = 0;
                  goto LABEL_1194;
                }
                LODWORD(v660) = 0;
                if ((*(_BYTE *)(v657 + 53) & 1) == 0)
                {
LABEL_1193:
                  v660 = *(_QWORD *)(v657 + 152);
                  v661 = v660 & 0xFFFFFFFF00000000;
                }
LABEL_1194:
                v662 = HIDWORD(v661);
                v70 = __OFSUB__(v659, (_DWORD)v660);
                v663 = v659 - v660;
                v664 = (v659 >> 31) + 0x7FFFFFFF;
                if (!v70)
                  v664 = v663;
                v70 = __OFSUB__(v658, (_DWORD)v662);
                v665 = v658 - v662;
                v666 = (v658 >> 31) + 0x7FFFFFFF;
                if (!v70)
                  v666 = v665;
                v70 = __OFADD__(v664, (_DWORD)v1123);
                v667 = v664 + v1123;
                LODWORD(v668) = (v664 >> 31) + 0x7FFFFFFF;
                if (v70)
                  v668 = v668;
                else
                  v668 = v667;
                v70 = __OFADD__(v666, DWORD1(v1123));
                v669 = v666 + DWORD1(v1123);
                LODWORD(v670) = (v666 >> 31) + 0x7FFFFFFF;
                if (v70)
                  v670 = v670;
                else
                  v670 = v669;
                *(_QWORD *)&v1143 = v668 | (v670 << 32);
                (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v657 + 680))(v657, v1125, &v1143);
                v671 = v1145;
                if (v1145)
                {
                  if ((_BYTE)v1146)
                  {
                    v934 = *((_DWORD *)v1145 + 11);
                    if (v934)
                      *((_DWORD *)v1145 + 11) = v934 - 1;
                  }
                  v772 = *((_DWORD *)v671 + 2);
                  if (!v772)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942742C8);
                  }
                  *((_DWORD *)v671 + 2) = v772 - 1;
                }
                if (v1144.i8[8])
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
                goto LABEL_1207;
              }
LABEL_383:
              v217 = *(uint64_t ***)(a1 + 104);
              if (!v217 || (v232 = *((unsigned int *)v217 + 3), !(_DWORD)v232) || (*(_BYTE *)(a1 + 25) & 0x10) == 0)
              {
LABEL_384:
                v218 = *(_QWORD *)(a1 + 88);
                if (v218)
                {
                  v236 = *(unsigned int *)(v218 + 12);
                  if ((_DWORD)v236)
                  {
                    if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
                    {
                      v237 = *(uint64_t **)v218;
                      for (k = 8 * v236; k; k -= 8)
                      {
                        v239 = *v237;
                        if ((v1113 & 0x10000) != 0)
                        {
                          if ((WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(v239 + 32)) & 1) != 0)
                            goto LABEL_443;
                          v861 = *(_QWORD *)(v239 + 32);
                          v862 = *(_BYTE *)(v861 + 52) & 7;
                          if (v862 == 1)
                          {
                            v863 = 16;
                            goto LABEL_1574;
                          }
                          if (v862 == 3)
                          {
                            v863 = 8;
LABEL_1574:
                            if ((*(_BYTE *)(v861 + 53) & v863) != 0)
                              goto LABEL_443;
                          }
                        }
                        WebCore::RenderLayer::paintLayer(v239, v1116, v1121, v1113);
LABEL_443:
                        ++v237;
                      }
                    }
                  }
                }
                v219 = *(_QWORD *)(a1 + 264);
                if (v219 && (v1120 & 0x10) != 0 && (*(_QWORD *)(v219 + 128) || *(_QWORD *)(v219 + 136)))
                  WebCore::RenderLayer::paintOverflowControlsForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), v1116, (uint64_t)v1121);
                if ((v1091 & 1) == 0)
                  WebCore::RenderLayer::applyFilters(a1, a2, a3, v1089, (uint64_t)&v1134);
                if (((v50 | v1095) & 1) != 0 || (v1095 & 0x80) != 0)
                {
LABEL_404:
                  if ((v1120 & 1) != 0 && (*(_QWORD *)(a1 + 24) & 0xC000) == 0x4000)
                  {
                    if (*(_BYTE *)(a1 + 20))
                    {
                      v227 = *(float *)(a1 + 16);
                      if (*(float *)(a2 + 336) != v227)
                      {
                        *(float *)(a2 + 336) = v227;
                        *(_DWORD *)(a2 + 184) |= 0x100u;
                      }
                      (*(void (**)(uint64_t, uint64_t, const WebCore::FilterOperations *))(*(_QWORD *)a2 + 88))(a2, a2 + 8, v43);
                      if (*(_BYTE *)(a1 + 20))
                        *(_BYTE *)(a1 + 20) = 0;
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
                    }
                    *(_QWORD *)(a1 + 24) &= ~0x4000uLL;
                  }
                  if (v1086)
                  {
                    if (*(unsigned __int8 *)(a2 + 344) != v1082)
                    {
                      *(_BYTE *)(a2 + 344) = v1082;
                      *(_DWORD *)(a2 + 184) |= 0x2000u;
                    }
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
                  }
                  result = (WTF *)v1147;
                  if (v1149 != v1147 && v1147)
                  {
                    v1147 = 0;
                    LODWORD(v1148) = 0;
                    result = (WTF *)WTF::fastFree(result, v47);
                  }
                  if (v1100)
                  {
                    if (v1080)
                    {
                      v725 = *((_DWORD *)v1100 + 11);
                      if (v725)
                        *((_DWORD *)v1100 + 11) = v725 - 1;
                    }
                    v279 = *((_DWORD *)v1100 + 2);
                    if (!v279)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x194272310);
                    }
                    *((_DWORD *)v1100 + 2) = v279 - 1;
                  }
                  if (!v1087)
                    return result;
                  return (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
                }
                v220 = *(_DWORD *)(a3 + 48);
                v221 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
                v222 = *(_QWORD *)(*(_QWORD *)(v221 + 32) + 48);
                if (*(_QWORD *)(v222 + 8))
                {
                  while (!*(_QWORD *)(v222 + 16))
                  {
                    v222 = *(_QWORD *)(v222 + 8);
                    if (!v222)
                      goto LABEL_396;
                  }
                }
                else
                {
                  if (*(_QWORD *)(v222 + 16))
                    v223 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                  else
                    v223 = 0;
                  if (!v223)
                  {
LABEL_396:
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v221 + 40) + 216) + 8))
                      v224 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                    else
                      v224 = 0;
                    if (!v224)
                    {
LABEL_400:
                      if ((v1093 & 0x4000) != 0 || (v1120 & 0x180) == 0x100)
                        WebCore::RenderLayer::paintChildClippingMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1089, v1105);
                      if ((v1113 & 0x2000) != 0)
                        WebCore::RenderLayer::paintChildClippingMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1089, v1105);
                      goto LABEL_404;
                    }
                  }
                }
                v1058 = *(WebCore::RenderLayerBacking **)(a1 + 256);
                if (!v1058 || WebCore::RenderLayerBacking::paintsIntoWindow(v1058) || v220 & 0x200 | v1113 & 0x80)
                  WebCore::RenderLayer::paintMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1089, v1105);
                goto LABEL_400;
              }
              v233 = *v217;
              v234 = 8 * v232;
              if ((v1113 & 0x10000) == 0)
              {
                do
                {
                  v235 = *v233++;
                  WebCore::RenderLayer::paintLayer(v235, v1116, a3, v1113);
                  v234 -= 8;
                }
                while (v234);
                goto LABEL_384;
              }
              while (1)
              {
                v914 = *v233;
                if ((WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(*v233 + 32)) & 1) != 0)
                  goto LABEL_1638;
                v911 = *(_QWORD *)(v914 + 32);
                v912 = *(_BYTE *)(v911 + 52) & 7;
                if (v912 == 1)
                {
                  v913 = 16;
                }
                else
                {
                  if (v912 != 3)
                  {
LABEL_1634:
                    WebCore::RenderLayer::paintLayer(v914, v1116, a3, v1113);
                    goto LABEL_1638;
                  }
                  v913 = 8;
                }
                if ((*(_BYTE *)(v911 + 53) & v913) == 0)
                  goto LABEL_1634;
LABEL_1638:
                ++v233;
                v234 -= 8;
                if (!v234)
                  goto LABEL_384;
              }
            }
          }
          v1144.i64[0] = (uint64_t)v1116;
          v1144.i8[8] = 0;
          v1145 = v1124[1];
          if (v1124[1])
            ++*((_DWORD *)v1124[1] + 2);
          LOBYTE(v1146) = 0;
          if (v102)
            WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1116, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1111, v151, 0);
          v152 = *((_QWORD *)v1121[0] + 4);
          *(_OWORD *)v1125 = *(_OWORD *)v151;
          v1126[0] = 2;
          v1127 = v1111;
          *(_QWORD *)&v1129 = 0;
          v1128 = (unint64_t)v1105;
          *((_QWORD *)&v1129 + 1) = v152;
          v1130 = BYTE4(v1124[0]);
          v1131 = a1;
          v1132 = 0;
          v1133 = v1116;
          v153 = *(_QWORD *)(a1 + 32);
          v155 = *(_DWORD *)(v151 - 36);
          v154 = *(_DWORD *)(v151 - 32);
          if (v153 && (*(_BYTE *)(v153 + 45) & 4) != 0)
            goto LABEL_267;
          v157 = 0;
          if ((*(_BYTE *)(v153 + 52) & 7) != 4)
          {
            LODWORD(v156) = 0;
            goto LABEL_268;
          }
          LODWORD(v156) = 0;
          if ((*(_BYTE *)(v153 + 53) & 1) == 0)
          {
LABEL_267:
            v156 = *(_QWORD *)(v153 + 152);
            v157 = v156 & 0xFFFFFFFF00000000;
          }
LABEL_268:
          v158 = HIDWORD(v157);
          v70 = __OFSUB__(v155, (_DWORD)v156);
          v159 = v155 - v156;
          v160 = (v155 >> 31) + 0x7FFFFFFF;
          if (v70)
            v159 = v160;
          v161 = v154 - v158;
          if (__OFSUB__(v154, (_DWORD)v158))
            v161 = (v154 >> 31) + 0x7FFFFFFF;
          v70 = __OFADD__(v159, (_DWORD)v1123);
          LODWORD(v162) = v159 + v1123;
          v163 = (v159 >> 31) + 0x7FFFFFFF;
          if (v70)
            v162 = v163;
          else
            v162 = v162;
          v164 = v161 + DWORD1(v1123);
          if (__OFADD__(v161, DWORD1(v1123)))
            v164 = (v161 >> 31) + 0x7FFFFFFF;
          *(_QWORD *)&v1143 = v162 | (v164 << 32);
          (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v153 + 680))(v153, v1125, &v1143);
          v165 = v1145;
          if (v1145)
          {
            if ((_BYTE)v1146)
            {
              v774 = *((_DWORD *)v1145 + 11);
              if (v774)
                *((_DWORD *)v1145 + 11) = v774 - 1;
            }
            v282 = *((_DWORD *)v165 + 2);
            if (!v282)
            {
              __break(0xC471u);
              JUMPOUT(0x1942726D0);
            }
            *((_DWORD *)v165 + 2) = v282 - 1;
          }
          if (v1144.i8[8])
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
          goto LABEL_281;
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1116 + 96))(v1116, 1);
        *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v87 + 60);
        v567 = LODWORD(v1125[0]) + v1123;
        if (__OFADD__(v1125[0], (_DWORD)v1123))
          v567 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        LODWORD(v1125[0]) = v567;
        v568 = HIDWORD(v1125[0]) + DWORD1(v1123);
        if (__OFADD__(HIDWORD(v1125[0]), DWORD1(v1123)))
          v568 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v1125[0]) = v568;
        WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v566);
        v1144.i64[0] = __PAIR64__(v570, v569);
        v1144.i64[1] = __PAIR64__(v572, v571);
        (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v1116 + 456))(v1116, &v1144);
        v573 = floorf(v1144.f32[0]);
        if (v573 < 2147500000.0 && v573 > -2147500000.0
          || (v574 = 2147500000.0, v573 < 2147500000.0) && (v574 = -2147500000.0, v573 > -2147500000.0))
        {
          v574 = (float)(int)v573;
        }
        v575 = floorf(v1144.f32[1]);
        if (v575 < 2147500000.0 && v575 > -2147500000.0
          || (v576 = 2147500000.0, v575 < 2147500000.0) && (v576 = -2147500000.0, v575 > -2147500000.0))
        {
          v576 = (float)(int)v575;
        }
        v577 = ceilf(v1144.f32[0] + v1144.f32[2]);
        if (v577 < 2147500000.0 && v577 > -2147500000.0
          || (v578 = 2147500000.0, v577 < 2147500000.0) && (v578 = -2147500000.0, v577 > -2147500000.0))
        {
          v578 = (float)(int)v577;
        }
        v579 = ceilf(v1144.f32[1] + v1144.f32[3]);
        if (v579 < 2147500000.0 && v579 > -2147500000.0
          || (v580 = 2147500000.0, v579 < 2147500000.0) && (v580 = -2147500000.0, v579 > -2147500000.0))
        {
          v580 = (float)(int)v579;
        }
        if (v574 < 2147500000.0 && v574 > -2147500000.0)
          goto LABEL_1048;
        if (v574 >= 2147500000.0)
        {
          v581 = 0x7FFFFFFF;
        }
        else
        {
          if (v574 > -2147500000.0)
          {
LABEL_1048:
            v581 = (int)v574;
            goto LABEL_1049;
          }
          v581 = 0x80000000;
        }
LABEL_1049:
        if (v576 < 2147500000.0 && v576 > -2147500000.0)
          goto LABEL_1051;
        if (v576 >= 2147500000.0)
        {
          v582 = 0x7FFFFFFF00000000;
          goto LABEL_1052;
        }
        if (v576 > -2147500000.0)
LABEL_1051:
          v582 = (unint64_t)(int)v576 << 32;
        else
          v582 = 0x8000000000000000;
LABEL_1052:
        v583 = v578 - v574;
        v584 = v580 - v576;
        if (v583 < 2147500000.0 && v583 > -2147500000.0)
          goto LABEL_1054;
        if (v583 >= 2147500000.0)
        {
          v585 = 0x7FFFFFFF;
        }
        else
        {
          if (v583 > -2147500000.0)
          {
LABEL_1054:
            v585 = (int)v583;
            goto LABEL_1055;
          }
          v585 = 0x80000000;
        }
LABEL_1055:
        if (v584 < 2147500000.0 && v584 > -2147500000.0)
          goto LABEL_1057;
        if (v584 >= 2147500000.0)
        {
          v586 = 0x7FFFFFFF00000000;
          goto LABEL_1058;
        }
        if (v584 > -2147500000.0)
LABEL_1057:
          v586 = (unint64_t)(int)v584 << 32;
        else
          v586 = 0x8000000000000000;
LABEL_1058:
        v1145 = (WebCore::Node *)(v582 | v581);
        v1146 = v586 | v585;
        if (v84)
          WebCore::RegionContext::pushClip(v84, (const WebCore::IntRect *)&v1145);
        v85 = 1;
        v86 = 1;
        goto LABEL_159;
      }
      v229 = *v79;
      v230 = 8 * v228;
      if ((v1113 & 0x10000) == 0)
      {
        do
        {
          v231 = *v229++;
          WebCore::RenderLayer::paintLayer(v231, v1116, a3, v1113);
          v230 -= 8;
        }
        while (v230);
        goto LABEL_124;
      }
      while (1)
      {
        v910 = *v229;
        if ((WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(*v229 + 32)) & 1) != 0)
          goto LABEL_1629;
        v907 = *(_QWORD *)(v910 + 32);
        v908 = *(_BYTE *)(v907 + 52) & 7;
        if (v908 == 1)
        {
          v909 = 16;
        }
        else
        {
          if (v908 != 3)
          {
LABEL_1625:
            WebCore::RenderLayer::paintLayer(v910, v1116, a3, v1113);
            goto LABEL_1629;
          }
          v909 = 8;
        }
        if ((*(_BYTE *)(v907 + 53) & v909) == 0)
          goto LABEL_1625;
LABEL_1629:
        ++v229;
        v230 -= 8;
        if (!v230)
          goto LABEL_124;
      }
    }
    v103 = (float32x2_t)v1147;
    v104 = (uint64_t)&v1147[104 * HIDWORD(v1148)];
    v105 = v1137;
    v106 = HIDWORD(v1137);
    v107 = (v1137 >> 31) + 0x7FFFFFFF;
    v47 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
    while (1)
    {
      **(_BYTE **)&v103 = v1110;
      if ((v1113 & 0x400) == 0 || v1121[0] != (WebCore::RenderObject *)a1)
        break;
LABEL_211:
      *(_QWORD *)&v103 += 104;
      if (*(_QWORD *)&v103 == v104)
        goto LABEL_79;
    }
    v108 = *(_DWORD *)(*(_QWORD *)&v103 + 80);
    v109 = *(_DWORD *)(*(_QWORD *)&v103 + 84);
    v70 = __OFADD__(v105, v108);
    v110 = v105 + v108;
    if (v70)
      v111 = v107;
    else
      v111 = v110;
    if (__OFADD__(v106, v109))
      v112 = (v106 >> 31) + 0x7FFFFFFF;
    else
      v112 = v106 + v109;
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      goto LABEL_206;
    v113 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v113 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v113 + 24) + 8))
      goto LABEL_206;
    v115 = *(_DWORD *)(*(_QWORD *)&v103 + 40);
    v114 = *(_DWORD *)(*(_QWORD *)&v103 + 44);
    v116 = *(_DWORD *)(*(_QWORD *)&v103 + 48);
    if (v115 == -1073741808 && v114 == -1073741808)
    {
      v117 = *(_DWORD *)(*(_QWORD *)&v103 + 52);
      if (v116 == 2147483615 && v117 == 2147483615)
      {
LABEL_206:
        v118 = 1;
        goto LABEL_207;
      }
    }
    else
    {
      v117 = *(_DWORD *)(*(_QWORD *)&v103 + 52);
    }
    v118 = 0;
    if (v116 < 1 || v117 < 1)
      goto LABEL_207;
    v119 = *(_BYTE *)(v113 + 45);
    if ((v119 & 0x20) != 0)
    {
      if (!*(_BYTE *)(*(_QWORD *)&v103 + 20))
      {
        v1125[0] = 0;
        v1125[1] = 0;
        ++*(_DWORD *)(v113 + 16);
        v129 = v113;
        if ((*(_BYTE *)(v113 + 20) & 1) == 0)
        {
          v817 = v104;
          v818 = v107;
          v819 = (WTF *)WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v113, (WebCore::RenderObject *)v47);
          v107 = v818;
          v104 = v817;
          v1125[0] = v819;
          v1125[1] = v820;
          v47 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          v129 = v113;
          goto LABEL_233;
        }
        goto LABEL_215;
      }
    }
    else
    {
      v120 = *(_DWORD *)(*(_QWORD *)&v103 + 32);
      if (v120 >= 1)
      {
        v121 = *(_DWORD *)(*(_QWORD *)&v103 + 36);
        if (v121 >= 1)
        {
          v70 = __OFADD__(v115, v116);
          v122 = v115 + v116;
          if (v70)
            v122 = (v115 >> 31) + 0x7FFFFFFF;
          v123 = *(_DWORD *)(*(_QWORD *)&v103 + 24);
          if ((int)v123 < v122)
          {
            v124 = v123 + v120;
            if (__OFADD__(v123, v120))
              v124 = (v123 >> 31) + 0x7FFFFFFF;
            if ((int)v115 < v124)
            {
              v125 = v114 + v117;
              if (__OFADD__(v114, v117))
                v125 = (v114 >> 31) + 0x7FFFFFFF;
              v126 = *(_DWORD *)(*(_QWORD *)&v103 + 28);
              if ((int)v126 < v125)
              {
                v127 = v126 + v121;
                if (__OFADD__(v126, v121))
                  v127 = (v126 >> 31) + 0x7FFFFFFF;
                if ((int)v114 < v127)
                  goto LABEL_206;
              }
            }
          }
        }
      }
      if (!*(_BYTE *)(*(_QWORD *)&v103 + 20))
      {
        v129 = 0;
        v1125[0] = 0;
        v1125[1] = 0;
LABEL_215:
        if ((*(_BYTE *)(v113 + 52) & 7) == 4 && (*(_BYTE *)(v113 + 53) & 1) == 0)
        {
          v1067 = v107;
          v1071 = v104;
          ++*(_DWORD *)(v113 + 16);
          v1125[0] = (WTF *)WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v113, (const WebCore::RenderLayerModelObject *)v47, *(double *)&v49);
          v1125[1] = v853;
          v854 = *(_DWORD *)(v113 + 16);
          if (!v854)
          {
            __break(0xC471u);
            JUMPOUT(0x194273620);
          }
LABEL_1567:
          *(_DWORD *)(v113 + 16) = v854 - 1;
          v104 = v1071;
          v107 = v1067;
          v47 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
LABEL_232:
          if ((v119 & 0x20) == 0)
          {
LABEL_235:
            v49 = v1125[0];
            v1143 = *(_OWORD *)v1125;
            v139 = *(WebCore::RenderObject **)(a1 + 32);
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v139 + 3) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 1944)
                                      + 248)
                          + 1383))
            {
              v814 = v47;
              v815 = v107;
              v816 = v104;
              if ((*((_BYTE *)v139 + 45) & 4) == 0)
                v139 = WebCore::RenderObject::containingBlock(v139);
              WebCore::RenderBox::flipForWritingMode((uint64_t)v139, (WebCore::LayoutRect *)&v1143);
              v104 = v816;
              v107 = v815;
              v47 = v814;
            }
            v140 = (v1143 >> 31) + 0x7FFFFFFF;
            if (!__OFADD__((_DWORD)v1143, v111))
              v140 = v1143 + v111;
            v141 = (DWORD1(v1143) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(DWORD1(v1143), v112))
              v141 = DWORD1(v1143) + v112;
            *(_QWORD *)&v1143 = __PAIR64__(v141, v140);
            if (SDWORD2(v1143) < 1 || SHIDWORD(v1143) < 1)
            {
LABEL_484:
              v118 = 0;
              goto LABEL_207;
            }
            v118 = 0;
            v142 = *(_DWORD *)(*(_QWORD *)&v103 + 48);
            if (v142 >= 1)
            {
              v143 = *(_DWORD *)(*(_QWORD *)&v103 + 52);
              if (v143 >= 1)
              {
                v144 = *(_DWORD *)(*(_QWORD *)&v103 + 40);
                v70 = __OFADD__(v144, v142);
                v145 = v144 + v142;
                if (v70)
                  v145 = (v144 >> 31) + 0x7FFFFFFF;
                if (v145 > (int)v1143)
                {
                  v146 = v1143 + DWORD2(v1143);
                  if (__OFADD__((_DWORD)v1143, DWORD2(v1143)))
                    v146 = (v1143 >> 31) + 0x7FFFFFFF;
                  if (v144 < v146)
                  {
                    v147 = *(_DWORD *)(*(_QWORD *)&v103 + 44);
                    v70 = __OFADD__(v147, v143);
                    v148 = v147 + v143;
                    if (v70)
                      v148 = (v147 >> 31) + 0x7FFFFFFF;
                    if (v148 > SDWORD1(v1143))
                    {
                      v149 = DWORD1(v1143) + HIDWORD(v1143);
                      if (__OFADD__(DWORD1(v1143), HIDWORD(v1143)))
                        v149 = (DWORD1(v1143) >> 31) + 0x7FFFFFFF;
                      v118 = (int)v147 < v149;
                      goto LABEL_207;
                    }
                  }
                }
                goto LABEL_484;
              }
            }
LABEL_207:
            if (**(_BYTE **)&v103)
              v128 = v118;
            else
              v128 = 0;
            **(_BYTE **)&v103 = v128;
            goto LABEL_211;
          }
LABEL_233:
          v138 = *(_DWORD *)(v129 + 16);
          if (!v138)
          {
            __break(0xC471u);
            JUMPOUT(0x194271FE8);
          }
          *(_DWORD *)(v129 + 16) = v138 - 1;
          goto LABEL_235;
        }
        if (*(_BYTE *)(v113 + 46) != 39)
        {
          if ((v119 & 4) == 0)
            v113 = 0;
          v130 = *(_QWORD *)(v113 + 88);
          v131 = *(_QWORD *)(*(_QWORD *)(v130 + 32) + 48);
          if (*(_QWORD *)(v131 + 8))
          {
            while (!*(_QWORD *)(v131 + 16))
            {
              v131 = *(_QWORD *)(v131 + 8);
              if (!v131)
                goto LABEL_225;
            }
          }
          else
          {
            if (*(_QWORD *)(v131 + 16))
              v132 = v47;
            else
              v132 = 0;
            if (!v132)
            {
LABEL_225:
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v130 + 40) + 216) + 8))
                v133 = v47;
              else
                v133 = 0;
              if (!v133)
              {
                v134 = *(_QWORD *)(v113 + 192);
                if (v134)
                {
                  v135 = *(WTF **)(v134 + 20);
                  v136 = (WTF **)(v134 + 28);
                }
                else
                {
                  v135 = 0;
                  v136 = (WTF **)(v113 + 160);
                }
                v137 = *v136;
                v1125[0] = v135;
                v1125[1] = v137;
                goto LABEL_232;
              }
            }
          }
          v1144.i64[0] = 0;
          v1072 = v104;
          v1069 = v107;
          v1125[0] = (WTF *)WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v113, (const WebCore::LayoutPoint *)&v1144);
          v1125[1] = v1057;
          WebCore::RenderBox::flipForWritingMode(v113, (WebCore::LayoutRect *)v1125);
          v47 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
          v107 = v1069;
          v104 = v1072;
          goto LABEL_232;
        }
        v1067 = v107;
        v1071 = v104;
        ++*(_DWORD *)(v113 + 16);
        for (m = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v113);
              ;
              m = WebCore::RenderTableCell::nextCell(v1079))
        {
          v1079 = (WebCore::RenderTableCell *)m;
          if (!m)
          {
            v854 = *(_DWORD *)(v113 + 16);
            if (!v854)
            {
              __break(0xC471u);
              JUMPOUT(0x194274980);
            }
            goto LABEL_1567;
          }
          v856 = *(WebCore::RenderTableCell **)(m + 160);
          v1144.i64[0] = 0;
          v1075 = v856;
          v1144.i64[1] = (uint64_t)v856;
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)v1125, (const WebCore::LayoutRect *)&v1144);
          v857 = *(_QWORD *)(v113 + 192);
          if (!v857)
            break;
          v1055 = *(WebCore::Node **)(v857 + 20);
          v858 = *(WebCore::RenderTableCell **)(v857 + 28);
          v1145 = v1055;
          v1146 = (unint64_t)v858;
          if (!v1055)
            goto LABEL_1563;
LABEL_1564:
          WebCore::LayoutRect::unite((WebCore::LayoutRect *)v1125, (const WebCore::LayoutRect *)&v1145);
LABEL_1565:
          ;
        }
        v858 = *(WebCore::RenderTableCell **)(v113 + 160);
        v1145 = 0;
        v1146 = (unint64_t)v858;
LABEL_1563:
        if (v1075 == v858)
          goto LABEL_1565;
        goto LABEL_1564;
      }
    }
    v821 = v47;
    v822 = v104;
    v823 = v107;
    v118 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)(*(_QWORD *)&v103 + 4), (const WebCore::LayoutRect *)(*(_QWORD *)&v103 + 40));
    v47 = v821;
    v107 = v823;
    v104 = v822;
    goto LABEL_207;
  }
  if ((_DWORD)result && (*(_BYTE *)(a2 + 716) & 2) != 0)
    return result;
  result = *(WTF **)(a3 + 56);
  if (result)
  {
    result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 24))(result);
    v314 = result;
  }
  else
  {
    v314 = 0;
  }
  v1112 = 0;
  v1108 = (a4 >> 5) & 1;
  v11 = *(_QWORD *)(a1 + 24);
  v315 = (a4 >> 15) & 1;
  if ((v11 & 0x800) != 0 && (a4 & 0x10) == 0 && ((a4 >> 15) & 1) == 0 && !(_DWORD)v314)
  {
    v316 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8)
                     + 1944);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v316 + 24) + 8) + 40) + 8) + 3382)
      || *(_DWORD *)(v316 + 436))
    {
      v792 = (a4 & 0x40) != 0;
      if ((a4 & 0x200) != 0)
        v792 = v1108 != 0;
      v1112 = v792;
    }
    else
    {
      v1112 = 0;
    }
  }
  if ((v11 & 0x80000) != 0)
  {
    v341 = *(_QWORD *)(a1 + 224);
    if (!v341 || (v981 = *(_QWORD *)(v341 + 8)) == 0)
    {
      v317 = 1;
      goto LABEL_618;
    }
    if ((*(_BYTE *)(v981 + 52) & 7) == 4 && (*(_BYTE *)(v981 + 53) & 1) == 0 && (*(_BYTE *)(v981 + 53) & 8) != 0)
    {
      v317 = (*(unsigned __int8 *)(*(_QWORD *)(v981 + 144) + 28) >> 2) & 1;
      goto LABEL_618;
    }
  }
  v317 = 0;
LABEL_618:
  v342 = v317 & (v11 >> 11);
  if ((a4 & 0x10) != 0)
    v342 = 0;
  if ((a4 & 0x8000) != 0)
    v343 = 0;
  else
    v343 = v342;
  if ((a4 & 0x800) != 0)
  {
    v955 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v955 + 46) != 49
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v955 + 24) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*(_QWORD *)(v955 + 24) + 8))
    {
      goto LABEL_1500;
    }
  }
  WebCore::RenderLayer::updateDescendantDependentFlags((WebCore::RenderLayer *)a1);
  v345 = *(_QWORD *)(a1 + 24);
  if ((v345 & 0x80) != 0)
  {
    if ((v345 & 0x4A) != 0)
    {
      WebCore::RenderLayer::rebuildZOrderLists((WebCore::RenderLayer *)a1, v344);
      v345 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      WebCore::RenderLayer::clearZOrderLists(a1, v344);
      v345 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFF7FLL;
      *(_QWORD *)(a1 + 24) = v345;
    }
  }
  if ((v345 & 0x100) != 0)
  {
    for (n = *(float32x2_t *)(a1 + 64); ; n = *(float32x2_t *)(*(_QWORD *)&n + 56))
    {
      v1147 = (_BYTE *)n;
      if (!*(_QWORD *)&n)
        break;
      if ((*(_BYTE *)(*(_QWORD *)&n + 24) & 4) != 0)
      {
        v715 = *(_QWORD *)(a1 + 208);
        if (!v715 || *(_QWORD *)(v715 + 144) != *(_QWORD *)&n)
        {
          v716 = v314;
          v717 = *(_QWORD *)(a1 + 104);
          if (!v717)
          {
            v718 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v718 = 0;
            v718[1] = 0;
            v719 = *(WTF **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v718;
            if (v719)
            {
              v720 = *(WTF **)v719;
              if (*(_QWORD *)v719)
              {
                *(_QWORD *)v719 = 0;
                *((_DWORD *)v719 + 2) = 0;
                WTF::fastFree(v720, v344);
              }
              WTF::fastFree(v719, v344);
              v717 = *(_QWORD *)(a1 + 104);
            }
            else
            {
              v717 = (uint64_t)v718;
            }
          }
          v721 = *(unsigned int *)(v717 + 12);
          if ((_DWORD)v721 == *(_DWORD *)(v717 + 8))
          {
            v722 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v717, v721 + 1, (unint64_t)&v1147);
            v721 = *(unsigned int *)(v717 + 12);
            *(_QWORD *)(*(_QWORD *)v717 + 8 * v721) = *v722;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v717 + 8 * v721) = v1147;
          }
          *(_DWORD *)(v717 + 12) = v721 + 1;
          n = (float32x2_t)v1147;
          *((_QWORD *)v1147 + 3) &= ~0x20000000000000uLL;
          v314 = v716;
        }
      }
    }
    v675 = *(_QWORD *)(a1 + 104);
    if (v675)
    {
      v723 = *(unsigned int *)(v675 + 12);
      if (*(_DWORD *)(v675 + 8) > v723)
      {
        v724 = *(WTF **)v675;
        if ((_DWORD)v723)
        {
          *(_DWORD *)(v675 + 8) = v723;
          *(_QWORD *)v675 = WTF::fastRealloc(v724, (void *)(8 * v723));
        }
        else if (v724)
        {
          *(_QWORD *)v675 = 0;
          *(_DWORD *)(v675 + 8) = 0;
          WTF::fastFree(v724, v344);
        }
      }
    }
    *(_QWORD *)(a1 + 24) &= ~0x100uLL;
  }
  v346 = *(_QWORD *)(a1 + 208);
  if (v346)
  {
    v988 = *(_QWORD *)(v346 + 144);
    if (v988)
    {
      WebCore::RenderLayer::updateZOrderLists(*(WebCore::RenderLayer **)(v346 + 144), v344);
      WebCore::RenderLayer::updateNormalFlowList(v988, v989);
    }
  }
  v347 = WebCore::RenderLayer::offsetFromAncestor(a1, *(_QWORD *)a3, 0);
  v1137 = v347;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
    goto LABEL_1089;
  v348 = WebCore::Page::scrollingCoordinator(*(WebCore::Page **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40) + 8) + 528)
                                                                                       + 8)
                                                                           + 24)
                                                               + 8));
  if (v348
    && (v349 = v348,
        v350 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                             + 40)
                                                 + 8)
                                     + 1944)
                         + 248),
        v351 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v348 + 24) + 8) + 160),
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 56))(v351) == v350))
  {
    v676 = *(_QWORD *)(*(_QWORD *)(v350 + 328) + 296);
    if (v676 && (v677 = *(_QWORD *)(v676 + 1944)) != 0 && (v678 = *(_QWORD *)(*(_QWORD *)(v677 + 144) + 256)) != 0)
    {
      v679 = *(_QWORD *)(v678 + 224);
      v680 = *(_QWORD *)(v678 + 232);
    }
    else
    {
      v679 = 0;
      v680 = 0;
    }
    v352 = (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v349 + 360))(v349, v679, v680) != 0;
  }
  else
  {
    v352 = 1;
  }
  v353 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v353 + 22) & 1) == 0
    || (v683 = *(_QWORD *)(a1 + 264)) != 0 && *(_BYTE *)(v683 + 79) && *(_QWORD *)(*(_QWORD *)(v683 + 96) + 256))
  {
    v354 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v353 + 24) + 8) + 40)
                                                         + 8)
                                             + 528)
                                 + 8)
                     + 120);
    v355 = v354 && *(_QWORD *)(v354 + 8) != 0;
  }
  else
  {
    v355 = 1;
  }
  v356 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v353 + 24) + 8) + 40)
                                                                                           + 8)
                                                                               + 528)
                                                                   + 8)
                                                       + 24)
                                           + 8)
                               + 48)
                   + 16);
  v357 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v356 + 896))(v356);
  if (!v352 && !v355 && v357)
  {
LABEL_1089:
    v1088 = 0;
    v1081 = 1;
  }
  else
  {
    v1081 = *(unsigned __int8 *)(a2 + 344);
    if (*(_BYTE *)(a2 + 344))
    {
      *(_BYTE *)(a2 + 344) = 0;
      *(_DWORD *)(a2 + 184) |= 0x2000u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
    v1088 = 1;
  }
  v1136 = v347;
  Ref = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(Ref + 23) & 0x10) != 0)
  {
    Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 648))(Ref);
    if (Ref)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264)
        || (Ref = WebCore::RenderLayer::filtersForPainting((_QWORD *)a1, a2, v1120)) != 0)
      {
        Ref = WebCore::RenderLayer::convertToLayerCoords((WebCore::RenderLayer *)a1, *(WebCore::RenderLayer **)a3, 0, 1);
        v347 = Ref;
        v1136 = Ref;
      }
    }
  }
  v359 = v1120 & 0xFFFFFFFD;
  v360 = *(WebCore::RegionContext **)(a3 + 56);
  if (v360)
    ++*((_DWORD *)v360 + 2);
  v1094 = v360;
  v1092 = (int)v314;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264))
  {
    v1090 = 0;
    v1070 = 0;
    goto LABEL_644;
  }
  v1084 = v1120 & 0xFFFFFFFD;
  Ref = *(_QWORD *)(a1 + 256);
  if (Ref)
  {
    v954 = *(_DWORD *)(a3 + 48);
    Ref = WebCore::RenderLayerBacking::paintsIntoWindow((WebCore::RenderLayerBacking *)Ref);
    if ((Ref & 1) == 0 && (v954 & 0x200) == 0 && (v1120 & 0x8100) == 0)
      goto LABEL_1813;
  }
  if ((v1120 & 0x8000) != 0)
  {
    v693 = 1;
  }
  else
  {
    Ref = *(_QWORD *)(a3 + 56);
    if (Ref)
    {
      Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 24))(Ref);
      v693 = Ref;
    }
    else
    {
      v693 = 0;
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) + 40) + 264))
    goto LABEL_1813;
  Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((Ref ^ 1 | v693) != 1)
    goto LABEL_1813;
  v1090 = 0;
  if (*(int *)(a3 + 24) < 1 || *(int *)(a3 + 28) < 1)
  {
    v1070 = 0;
LABEL_1301:
    LODWORD(v314) = v1092;
    v359 = v1084;
    goto LABEL_644;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 46) == 103)
    goto LABEL_1813;
  v695 = *(_QWORD *)(a1 + 224);
  if (!v695 || (v1051 = *(_QWORD *)(v695 + 8)) == 0 || *(_BYTE *)(v1051 + 46) != 75)
  {
    v1125[0] = (WTF *)WebCore::RenderLayer::calculateLayerBounds(a1, *(const WebCore::RenderLayerModelObject **)a3, &v1136, 2u, v694);
    v1125[1] = v696;
    v697 = *(_QWORD *)(a1 + 32);
    v698 = *(_DWORD *)(a3 + 32);
    v70 = __OFADD__((_DWORD)v347, v698);
    v699 = v347 + v698;
    if (v70)
      v699 = (v347 >> 31) + 0x7FFFFFFF;
    v700 = *(_DWORD *)(a3 + 36);
    v70 = __OFADD__(HIDWORD(v347), v700);
    v701 = HIDWORD(v347) + v700;
    if (v70)
      v701 = (HIDWORD(v347) >> 31) + 0x7FFFFFFF;
    LODWORD(v1147) = v699;
    HIDWORD(v1147) = v701;
    v1121[0] = 0;
    v702 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v697 + 24) + 8) + 40) + 8) + 528);
    v703 = 1.0;
    if (v702)
    {
      v704 = *(_QWORD *)(v702 + 8);
      if (v704)
      {
        v705 = *(_QWORD *)(v704 + 24);
        if (v705)
        {
          v706 = *(float **)(v705 + 8);
          if (v706)
          {
            v707 = (*(_DWORD *)v706)++;
            v703 = v706[91];
            if (v707)
            {
              *(_DWORD *)v706 = v707;
            }
            else
            {
              WebCore::Page::~Page((uint64_t)v706);
              WTF::fastFree(v812, v813);
            }
          }
        }
      }
    }
    v709 = WebCore::snapSizeToDevicePixel((int *)&v1147, (int *)v1121, v703) * 64.0;
    if (v709 >= 2147483650.0)
    {
      v710 = 0x7FFFFFFF;
    }
    else if (v709 <= -2147483650.0)
    {
      v710 = 0x80000000;
    }
    else
    {
      v710 = (int)v709;
    }
    v1134.i32[0] = v710;
    v711 = v708 * 64.0;
    if (v711 >= 2147483650.0)
    {
      v712 = 0x7FFFFFFF;
    }
    else if (v711 <= -2147483650.0)
    {
      v712 = 0x80000000;
    }
    else
    {
      v712 = (int)v711;
    }
    v1134.i32[1] = v712;
    v713 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(v697 + 88) + 40) + 264);
    v714 = *((_DWORD *)v713 + 3);
    if (v714 == 1)
      goto LABEL_1297;
    if (!v714)
    {
      ++*((_DWORD *)v713 + 2);
      v971 = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(*(WebCore::RenderLayerModelObject **)(a1 + 32));
      if (v971)
      {
        v972 = (WebCore::RenderSVGResourceClipper *)v971;
        Ref = WebCore::RenderSVGResourceClipper::shouldApplyPathClipping(v971, &v1145);
        if (v1145)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          v1147 = 0;
          v1148 = 0;
          *(_QWORD *)&v1143 = 0;
          if (WebCore::RenderObject::isSVGLayerAwareRenderer(*(WebCore::RenderObject **)(a1 + 32)))
          {
            v973 = WebCore::RenderLayerModelObject::nominalSVGLayoutLocation(*(WebCore::RenderLayerModelObject **)(a1 + 32));
            v974 = v973;
            v975 = HIDWORD(v973);
            LODWORD(v1147) = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32));
            HIDWORD(v1147) = v976;
            v1148 = __PAIR64__(v978, v977);
            v979 = v347 - v974;
            if (__OFSUB__((_DWORD)v347, v974))
              v979 = (v347 >> 31) + 0x7FFFFFFF;
            v980 = HIDWORD(v347) - v975;
            if (__OFSUB__(HIDWORD(v347), (_DWORD)v975))
              v980 = (HIDWORD(v347) >> 31) + 0x7FFFFFFF;
            *(float32x2_t *)&v1143 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v980, v979)), (float32x2_t)vdup_n_s32(0x3C800000u));
          }
          else
          {
            LODWORD(v1121[0]) = WebCore::RenderLayer::referenceBoxRectForClipPath(a1, (int *)&v1136, (int *)v1125);
            HIDWORD(v1121[0]) = v1037;
            v1121[1] = (WebCore::RenderObject *)__PAIR64__(v1039, v1038);
            WebCore::LayoutRect::LayoutRect((int *)&v1144, (const WebCore::FloatRect *)v1121);
            v1040 = WebCore::Document::deviceScaleFactor(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                           + 40)
                                                                               + 8));
            LODWORD(v1147) = WebCore::snapRectToDevicePixels((int *)&v1144, v1040);
            HIDWORD(v1147) = v1041;
            v1148 = __PAIR64__(v1043, v1042);
          }
          if (!WebCore::FloatSize::isZero((WebCore::FloatSize *)&v1143))
            (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, *(float *)&v1143, *((float *)&v1143 + 1));
          WebCore::RenderSVGResourceClipper::applyPathClipping(v972, (WebCore::GraphicsContext *)a2, *(const WebCore::RenderLayerModelObject **)(a1 + 32), (float32x2_t *)&v1147, v1145);
          if (!WebCore::FloatSize::isZero((WebCore::FloatSize *)&v1143))
            (*(void (**)(uint64_t, float, float))(*(_QWORD *)a2 + 648))(a2, -*(float *)&v1143, -*((float *)&v1143 + 1));
          Ref = (uint64_t)v1145;
          v1145 = 0;
          if (Ref)
          {
            if (*(_DWORD *)(Ref + 24) == 2)
            {
              if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
                Ref = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)Ref, v1044);
            }
            else
            {
              *(_DWORD *)(Ref + 24) -= 2;
            }
          }
          v1090 = 1;
        }
        else
        {
          v1090 = 0;
          v1084 = v1120 & 0xFFFFBFFD | 0x4000;
        }
      }
      else
      {
        v1015 = (WebCore::ReferencedSVGResources *)WebCore::Node::treeScopeForSVGReferences(*(WebCore::Node **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8));
        Ref = WebCore::ReferencedSVGResources::referencedClipperRenderer(v1015, v713, v1016);
        if (Ref)
        {
          v1017 = (WebCore::LegacyRenderSVGResourceClipper *)Ref;
          LODWORD(v1147) = WebCore::RenderLayer::referenceBoxRectForClipPath(a1, (int *)&v1136, (int *)v1125);
          HIDWORD(v1147) = v1018;
          v1148 = __PAIR64__(v1020, v1019);
          WebCore::snapRectToDevicePixelsIfNeeded((WebCore::Page *)&v1147, *(const WebCore::FloatRect **)(a1 + 32), v1021);
          v1023 = v1022;
          v1025 = v1024;
          WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v1026);
          v1121[1] = (WebCore::RenderObject *)__PAIR64__(v1028, v1027);
          *(float *)v1121 = v1029 - v1023;
          *((float *)v1121 + 1) = v1030 - v1025;
          v1031 = a2;
          v1090 = 1;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
          (*(void (**)(uint64_t, float, float))(*(_QWORD *)v1031 + 648))(v1031, v1023, v1025);
          v1032 = *(WebCore::RenderElement **)(a1 + 32);
          v1144.i64[0] = 0;
          v1144.i64[1] = v1148;
          WebCore::LegacyRenderSVGResourceClipper::applyClippingToContext(v1017, (WebCore::GraphicsContext *)a2, v1032, (float32x2_t *)&v1144, (const WebCore::FloatRect *)v1121, *(float *)(*((_QWORD *)v1032 + 13) + 184));
          Ref = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v1031 + 648))(v1031, -v1023, -v1025);
        }
        else
        {
          v1090 = 0;
        }
      }
      if (*((_DWORD *)v713 + 2) != 1)
      {
        v1070 = 0;
        --*((_DWORD *)v713 + 2);
        goto LABEL_1301;
      }
      Ref = (*(uint64_t (**)(WebCore::TreeScope *))(*(_QWORD *)v713 + 8))(v713);
      goto LABEL_1814;
    }
    if (v714 == 2 && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 45) & 4) != 0)
    {
LABEL_1297:
      WebCore::RenderLayer::computeClipPath((WebCore::RenderLayer *)&v1147, (const WebCore::LayoutSize *)a1, (int32x2_t *)&v1134, (int *)v1125);
      if (v693)
      {
        if (v1094)
          Ref = (uint64_t)WebCore::RegionContext::pushClip(v1094, (const WebCore::Path *)&v1147);
        v1090 = 0;
        v1070 = 1;
      }
      else
      {
        v1090 = 1;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        Ref = (*(uint64_t (**)(uint64_t, _BYTE **, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v1147, v1151);
        v1070 = 0;
      }
      if (v1150 != -1)
        Ref = ((uint64_t (*)(WebCore::RenderObject **, unint64_t *))off_1E3428F58[v1150])(v1121, &v1148);
      goto LABEL_1301;
    }
LABEL_1813:
    v1090 = 0;
LABEL_1814:
    v1070 = 0;
    goto LABEL_1301;
  }
  v1090 = 0;
  v1070 = 0;
  v359 = ((*(_QWORD *)(a1 + 24) >> 20) & 0x4000 | v1120 & 0xFFFFBFFD) ^ 0x4000;
  LODWORD(v314) = v1092;
LABEL_644:
  v361 = v359;
  if ((v359 & 0x4000) != 0)
    v361 = v359 & 0xFFFFBFFF;
  v1099 = *(_DWORD *)(a3 + 48);
  v362 = *(double *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8)
                                                                                           + 40)
                                                                               + 8)
                                                                   + 528)
                                                       + 8)
                                           + 24)
                               + 8)
                   + 1688);
  if (v362 == 0.0)
    WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
  *(_BYTE *)(a1 + 284) = 0;
  if (v362 - *(double *)(a1 + 272) > 5.0)
  {
    v363 = 0;
  }
  else
  {
    v363 = *(_DWORD *)(a1 + 280);
    if (v363 >= 0x14)
      *(_BYTE *)(a1 + 284) = 1;
  }
  *(double *)(a1 + 272) = v362;
  *(_DWORD *)(a1 + 280) = v363 + 1;
  v1147 = v1149;
  v1148 = 1;
  v364 = *(_DWORD *)(a3 + 48);
  v365 = (v361 >> 5) & 0x40;
  if ((v361 & 0x1000) != 0)
    v365 = 32;
  v366 = v364 & 0x50300 | v365;
  if ((v364 & 0x800) != 0)
    v366 |= (*(_DWORD *)(a1 + 24) & 1) << 11;
  v1083 = v359;
  v1106 = (v1120 >> 6) & 1;
  v367 = v343 & (v314 ^ 1);
  if (((v1120 >> 10) & 1) != 0)
    v368 = v366 | 0x1000;
  else
    v368 = v366;
  if ((v1120 & 0x8000) != 0)
  {
    v369 = v368 & 0x1000;
    if (v1106)
      v369 = v368 & 0x1000 | 0x4000;
    v368 = v369 | (v1108 << 15);
  }
  v1103 = v367;
  v1134 = 0uLL;
  v1135 = 0;
  v1096 = v368;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) == 0 && (v1120 & 0x10) == 0)
  {
    v371 = *(_QWORD *)(a1 + 32);
    v372 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v371 + 88) + 32) + 32);
    v373 = *(_DWORD *)(v372 + 20);
    if (v373)
    {
      if ((v782 = (unsigned int ***)(v372 + 8), v783 = *(unsigned __int8 *)(v371 + 46), v783 != 83) && v783 != 103
        || v373 != 1
        || *((_BYTE *)**v782 + 12))
      {
        if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v371, v782, v370) & 1) == 0)
        {
          v784 = *(_QWORD *)(a1 + 256);
          if (!v784 || !*(_BYTE *)(v784 + 292))
          {
            if (*(_QWORD *)(a1 + 248))
            {
              v1125[0] = (WTF *)v1126;
              v1125[1] = (WTF *)1;
              WebCore::RenderLayer::collectFragments(a1, v1125, *(WebCore::RenderLayer **)a3, (const WebCore::LayoutRect *)(a3 + 16), 0, ((int)((_DWORD)v361 << 29) >> 31) & 5, (v1120 & 0x400) == 0, (uint64_t *)&v1137, 0, 1);
              WebCore::RenderLayer::updatePaintingInfoForFragments(a1, v1125[0], HIDWORD(v1125[1]), (_QWORD *)a3, v361, v1103, &v1137, v785);
              if (HIDWORD(v1125[1]))
              {
                v787 = v1125[0];
                *(_OWORD *)v1121 = *(_OWORD *)((char *)v1125[0] + 40);
                v1122.i8[0] = *((_BYTE *)v1125[0] + 56);
              }
              else
              {
                v1121[0] = 0;
                v1121[1] = 0;
                v1122.i32[0] = 0;
                v787 = v1125[0];
              }
              v1134 = *(int32x4_t *)v1121;
              v1135 = v1122.i8[0];
              if (v1126 != (_WORD *)v787 && v787)
              {
                v1125[0] = 0;
                LODWORD(v1125[1]) = 0;
                WTF::fastFree(v787, v786);
              }
              LODWORD(v314) = v1092;
            }
          }
        }
      }
    }
  }
  v374 = *(_OWORD *)(a3 + 48);
  v1123 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)v1124 = v374;
  v375 = *(int32x4_t *)(a3 + 16);
  *(_OWORD *)v1121 = *(_OWORD *)a3;
  v1122 = (float32x4_t)v375;
  v376 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v378 = 1;
  if ((v376 & 1) != 0)
  {
    v1117 = (WebCore::GraphicsContext *)a2;
    v379 = v1103;
  }
  else
  {
    v1117 = (WebCore::GraphicsContext *)a2;
    v379 = v1103;
    if ((v1120 & 0x10) == 0)
    {
      v380 = *(_QWORD *)(a1 + 32);
      v381 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v380 + 88) + 32) + 32);
      v382 = *(_DWORD *)(v381 + 20);
      if (v382)
      {
        v788 = (unsigned int ***)(v381 + 8);
        v789 = *(unsigned __int8 *)(v380 + 46);
        if ((v789 == 83 || v789 == 103) && v382 == 1 && !*((_BYTE *)**v788 + 12))
          goto LABEL_1444;
        if ((WebCore::CSSFilter::isIdentity((WebCore::CSSFilter *)v380, v788, (const WebCore::FilterOperations *)v377) & 1) != 0)
          goto LABEL_1444;
        v790 = *(_QWORD *)(a1 + 256);
        if (v790)
        {
          if (*(_BYTE *)(v790 + 292))
            goto LABEL_1444;
        }
        v791 = *(_QWORD *)(a1 + 248);
        if (!v791)
          goto LABEL_1444;
        v935 = *(_OWORD *)(v791 + 72);
        *(_OWORD *)v1125 = v935;
        v936 = v935 + v347;
        if (__OFADD__((_DWORD)v935, (_DWORD)v347))
          v936 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        LODWORD(v1125[0]) = v936;
        v937 = HIDWORD(v1125[0]) + HIDWORD(v347);
        if (__OFADD__(HIDWORD(v1125[0]), HIDWORD(v347)))
          v937 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v1125[0]) = v937;
        v1144.i64[0] = WebCore::RenderLayer::calculateLayerBounds(a1, v1121[0], &v1136, 0, *(double *)&v935);
        v1144.i64[1] = v938;
        v939 = *(WebCore::RenderElement **)(a1 + 32);
        *(_QWORD *)&v1143 = WebCore::enclosingIntRect((uint64_t *)&v1144);
        *((_QWORD *)&v1143 + 1) = v940;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1145, (int32x2_t *)&v1143);
        v1141.i64[0] = WebCore::enclosingIntRect((uint64_t *)&v1122);
        v1141.i64[1] = v941;
        WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1142, (int32x2_t *)&v1141);
        v1138 = WebCore::enclosingIntRect((uint64_t *)v1125);
        v1139 = v942;
        WebCore::LayoutRect::LayoutRect(v1140, (int32x2_t *)&v1138);
        v1117 = (WebCore::GraphicsContext *)WebCore::RenderLayerFilters::beginFilterEffect((WebCore::RenderLayerFilters *)v791, v939, (WebCore::GraphicsContext *)a2, (const WebCore::LayoutRect *)&v1145, (const WebCore::LayoutRect *)&v1142, (const WebCore::LayoutRect *)v1140, &v1134);
        if (!v1117)
        {
LABEL_1444:
          v378 = 1;
          v1117 = (WebCore::GraphicsContext *)a2;
        }
        else
        {
          v1122 = *(float32x4_t *)(v791 + 88);
          v943 = *(_QWORD *)(v791 + 136);
          if (v943)
            LOBYTE(v943) = *(_BYTE *)(v943 + 76) != 0;
          BYTE5(v1124[0]) = v943 ^ 1;
          BYTE4(v1124[0]) = WebCore::RenderLayerFilters::hasFilterThatShouldBeRestrictedBySecurityOrigin((WebCore::RenderLayerFilters *)v791);
          if ((v1120 & 1) != 0)
            WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
          v378 = 0;
          LODWORD(v1124[0]) |= 0x20000u;
        }
        v379 = v1103;
      }
      else
      {
        v378 = 1;
        v1117 = (WebCore::GraphicsContext *)a2;
      }
    }
  }
  v1085 = v378;
  v383 = (uint64_t)v1121[1];
  if (v1121[1])
  {
    v956 = WebCore::RenderObject::isDescendantOf(*(WebCore::RenderObject **)(a1 + 32), v1121[1]);
    v957 = v1121[1];
    if (v956)
      v957 = 0;
    v1114 = (uint64_t)v957;
  }
  else
  {
    v1114 = 0;
  }
  if ((v11 & 0x800) != 0)
  {
    v384 = (uint64_t *)*((_QWORD *)&v1123 + 1);
    if (*((_QWORD *)&v1123 + 1))
    {
      if (**((_QWORD **)&v1123 + 1) && *(_DWORD *)(**((_QWORD **)&v1123 + 1) - 12))
      {
        v958 = v1121[0];
        v1125[0] = 0;
        v1125[1] = 0;
        v1145 = (WebCore::Node *)WebCore::RenderLayer::offsetFromAncestor(a1, (uint64_t)v1121[0], 0);
        v1144.i64[0] = WebCore::RenderLayer::boundingBox(a1, v958, &v1145, 0, v959);
        v1144.i64[1] = v960;
        v961 = *v384;
        v962 = (int32x2_t *)WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::begin((_QWORD *)*v384);
        v963 = v962;
        v964 = (int32x2_t *)v383;
        v965 = 0;
        if (v961)
          v965 = (int32x2_t *)(v961 + 24 * *(unsigned int *)(v961 - 4));
        if (v965 != v962)
        {
          do
          {
            WebCore::LayoutRect::LayoutRect((int8x8_t *)&v1145, v963 + 1);
            if (WebCore::LayoutRect::intersects((WebCore::LayoutRect *)&v1144, (const WebCore::LayoutRect *)&v1145))
            {
              (*(void (**)(int32x2_t, uint64_t))(**(_QWORD **)v963 + 16))(*v963, 1);
              v966 = HIDWORD(v1125[1]);
              if (HIDWORD(v1125[1]) == LODWORD(v1125[1]))
              {
                WTF::Vector<__CTFont const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CTFont const*>((uint64_t)v1125, (unint64_t)v963);
              }
              else
              {
                *((int32x2_t *)v1125[0] + HIDWORD(v1125[1])) = *v963;
                HIDWORD(v1125[1]) = v966 + 1;
              }
            }
            while (1)
            {
              v963 += 3;
              if (v963 == v964)
                break;
              if ((unint64_t)(*(_QWORD *)v963 + 1) > 1)
                goto LABEL_1785;
            }
            v963 = v964;
LABEL_1785:
            ;
          }
          while (v963 != v965);
          v967 = v1125[0];
          if (HIDWORD(v1125[1]))
          {
            v968 = 8 * HIDWORD(v1125[1]);
            v969 = (uint64_t *)v1125[0];
            do
            {
              v970 = *v969++;
              WTF::HashMap<WebCore::OverlapTestRequestClient *,WebCore::IntRect,WTF::DefaultHash<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::OverlapTestRequestClient *>,WTF::HashTraits<WebCore::IntRect>,WTF::HashTableTraits>::remove(v384, v970);
              v968 -= 8;
            }
            while (v968);
          }
          if (v967)
          {
            v1125[0] = 0;
            WTF::fastFree(v967, (void *)v383);
          }
        }
        v379 = v1103;
      }
    }
  }
  v1141 = (int32x4_t)v1122;
  if ((v379 | v1112 | ((v1120 & 0x10) >> 4) | v315 | v314) == 1)
  {
    if (!BYTE5(v1124[0]) && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 22) & 1) != 0)
    {
      BYTE5(v1124[0]) = 1;
      *(_OWORD *)v1125 = xmmword_1969FCA90;
      v1141.i64[0] = WebCore::RenderLayer::clipRectRelativeToAncestor((_QWORD *)a1, (_QWORD *)v1121[0], v1137, (const WebCore::LayoutRect *)v1125, (v361 >> 2) & 1);
      v1141.i64[1] = v953;
    }
    WebCore::RenderLayer::collectFragments(a1, &v1147, v1121[0], (const WebCore::LayoutRect *)&v1141, 0, ((int)((_DWORD)v361 << 29) >> 31) & 5, (v1120 & 0x400) == 0, (uint64_t *)&v1137, 0, 1);
    if (HIDWORD(v1148))
    {
      v440 = (float32x2_t)v1147;
      v441 = (uint64_t)&v1147[104 * HIDWORD(v1148)];
      v442 = v1137;
      v443 = HIDWORD(v1137);
      v383 = 0x7FFFFFFFLL;
      v377 = (v1137 >> 31) + 0x7FFFFFFF;
      while (1)
      {
        **(_BYTE **)&v440 = v379;
        v444 = v361;
        if ((v361 & 0x400) == 0 || v1121[0] != (WebCore::RenderObject *)a1)
          break;
LABEL_816:
        *(_QWORD *)&v440 += 104;
        v361 = v444;
        v368 = v1096;
        if (*(_QWORD *)&v440 == v441)
          goto LABEL_677;
      }
      v445 = *(_DWORD *)(*(_QWORD *)&v440 + 80);
      v446 = *(_DWORD *)(*(_QWORD *)&v440 + 84);
      v70 = __OFADD__(v442, v445);
      v447 = v442 + v445;
      if (v70)
        v448 = v377;
      else
        v448 = v447;
      if (__OFADD__(v443, v446))
        v449 = (v443 >> 31) + 0x7FFFFFFF;
      else
        v449 = v443 + v446;
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        goto LABEL_811;
      v450 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v450 + 24) + 8) + 40) + 8) + 1272) == *(_QWORD *)(*(_QWORD *)(v450 + 24) + 8))
        goto LABEL_811;
      v452 = *(_DWORD *)(*(_QWORD *)&v440 + 40);
      v451 = *(_DWORD *)(*(_QWORD *)&v440 + 44);
      v453 = *(_DWORD *)(*(_QWORD *)&v440 + 48);
      if (v452 == -1073741808 && v451 == -1073741808)
      {
        v454 = *(_DWORD *)(*(_QWORD *)&v440 + 52);
        if (v453 == 2147483615 && v454 == 2147483615)
        {
LABEL_811:
          v455 = 1;
          goto LABEL_812;
        }
      }
      else
      {
        v454 = *(_DWORD *)(*(_QWORD *)&v440 + 52);
      }
      v455 = 0;
      if (v453 < 1 || v454 < 1)
        goto LABEL_812;
      v456 = *(_BYTE *)(v450 + 45);
      if ((v456 & 0x20) != 0)
      {
        if (!*(_BYTE *)(*(_QWORD *)&v440 + 20))
        {
          v1125[0] = 0;
          v1125[1] = 0;
          ++*(_DWORD *)(v450 + 16);
          v466 = v450;
          if ((*(_BYTE *)(v450 + 20) & 1) == 0)
          {
            v947 = v441;
            v1065 = v377;
            v948 = v448;
            v949 = (WTF *)WebCore::RenderInline::linesVisualOverflowBoundingBox((WebCore::LegacyInlineBox **)v450, (WebCore::RenderObject *)0x7FFFFFFF);
            v448 = v948;
            v377 = v1065;
            v441 = v947;
            v1125[0] = v949;
            v1125[1] = v950;
            v383 = 0x7FFFFFFFLL;
            v466 = v450;
            goto LABEL_838;
          }
          goto LABEL_820;
        }
      }
      else
      {
        v457 = *(_DWORD *)(*(_QWORD *)&v440 + 32);
        if (v457 > 0)
        {
          v458 = *(_DWORD *)(*(_QWORD *)&v440 + 36);
          if (v458 >= 1)
          {
            v70 = __OFADD__(v452, v453);
            v459 = v452 + v453;
            if (v70)
              v459 = (v452 >> 31) + 0x7FFFFFFF;
            v460 = *(_DWORD *)(*(_QWORD *)&v440 + 24);
            if ((int)v460 < v459)
            {
              v461 = v460 + v457;
              if (__OFADD__(v460, v457))
                v461 = (v460 >> 31) + 0x7FFFFFFF;
              if ((int)v452 < v461)
              {
                v462 = v451 + v454;
                if (__OFADD__(v451, v454))
                  v462 = (v451 >> 31) + 0x7FFFFFFF;
                v463 = *(_DWORD *)(*(_QWORD *)&v440 + 28);
                if ((int)v463 < v462)
                {
                  v464 = v463 + v458;
                  if (__OFADD__(v463, v458))
                    v464 = (v463 >> 31) + 0x7FFFFFFF;
                  if ((int)v451 < v464)
                    goto LABEL_811;
                }
              }
            }
          }
        }
        if (!*(_BYTE *)(*(_QWORD *)&v440 + 20))
        {
          v466 = 0;
          v1125[0] = 0;
          v1125[1] = 0;
LABEL_820:
          if ((*(_BYTE *)(v450 + 52) & 7) == 4 && (*(_BYTE *)(v450 + 53) & 1) == 0)
          {
            v1061 = v448;
            v1066 = v377;
            v1063 = v441;
            ++*(_DWORD *)(v450 + 16);
            v1125[0] = (WTF *)WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)v450, (const WebCore::RenderLayerModelObject *)0x7FFFFFFF, *(double *)&v385);
            v1125[1] = v982;
            v983 = *(_DWORD *)(v450 + 16);
            if (!v983)
            {
              __break(0xC471u);
              JUMPOUT(0x194274A44);
            }
LABEL_1825:
            *(_DWORD *)(v450 + 16) = v983 - 1;
            v441 = v1063;
            v383 = 0x7FFFFFFFLL;
            v377 = v1066;
            v448 = v1061;
LABEL_837:
            if ((v456 & 0x20) == 0)
            {
LABEL_840:
              v385 = v1125[0];
              v1143 = *(_OWORD *)v1125;
              v476 = *(WebCore::RenderObject **)(a1 + 32);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v476 + 3) + 8)
                                                                            + 40)
                                                                + 8)
                                                    + 1944)
                                        + 248)
                            + 1383))
              {
                v944 = v448;
                v945 = v377;
                v946 = v441;
                if ((*((_BYTE *)v476 + 45) & 4) == 0)
                  v476 = WebCore::RenderObject::containingBlock(v476);
                WebCore::RenderBox::flipForWritingMode((uint64_t)v476, (WebCore::LayoutRect *)&v1143);
                v441 = v946;
                v383 = 0x7FFFFFFFLL;
                v377 = v945;
                v448 = v944;
              }
              v477 = (v1143 >> 31) + 0x7FFFFFFF;
              if (!__OFADD__((_DWORD)v1143, v448))
                v477 = v1143 + v448;
              v478 = (DWORD1(v1143) >> 31) + 0x7FFFFFFF;
              if (!__OFADD__(DWORD1(v1143), v449))
                v478 = DWORD1(v1143) + v449;
              *(_QWORD *)&v1143 = __PAIR64__(v478, v477);
              v379 = v1103;
              if (SDWORD2(v1143) < 1 || SHIDWORD(v1143) < 1)
              {
LABEL_1211:
                v455 = 0;
                goto LABEL_812;
              }
              v455 = 0;
              v479 = *(_DWORD *)(*(_QWORD *)&v440 + 48);
              if (v479 >= 1)
              {
                v480 = *(_DWORD *)(*(_QWORD *)&v440 + 52);
                if (v480 >= 1)
                {
                  v481 = *(_DWORD *)(*(_QWORD *)&v440 + 40);
                  v70 = __OFADD__(v481, v479);
                  v482 = v481 + v479;
                  if (v70)
                    v482 = (v481 >> 31) + 0x7FFFFFFF;
                  if (v482 > (int)v1143)
                  {
                    v483 = v1143 + DWORD2(v1143);
                    if (__OFADD__((_DWORD)v1143, DWORD2(v1143)))
                      v483 = (v1143 >> 31) + 0x7FFFFFFF;
                    if (v481 < v483)
                    {
                      v484 = *(_DWORD *)(*(_QWORD *)&v440 + 44);
                      v70 = __OFADD__(v484, v480);
                      v485 = v484 + v480;
                      if (v70)
                        v485 = (v484 >> 31) + 0x7FFFFFFF;
                      if (v485 > SDWORD1(v1143))
                      {
                        v486 = DWORD1(v1143) + HIDWORD(v1143);
                        if (__OFADD__(DWORD1(v1143), HIDWORD(v1143)))
                          v486 = (DWORD1(v1143) >> 31) + 0x7FFFFFFF;
                        v455 = (int)v484 < v486;
                        goto LABEL_812;
                      }
                    }
                  }
                  goto LABEL_1211;
                }
              }
LABEL_812:
              if (**(_BYTE **)&v440)
                v465 = v455;
              else
                v465 = 0;
              **(_BYTE **)&v440 = v465;
              goto LABEL_816;
            }
LABEL_838:
            v475 = *(_DWORD *)(v466 + 16);
            if (!v475)
            {
              __break(0xC471u);
              JUMPOUT(0x194273028);
            }
            *(_DWORD *)(v466 + 16) = v475 - 1;
            goto LABEL_840;
          }
          if (*(_BYTE *)(v450 + 46) != 39)
          {
            if ((v456 & 4) == 0)
              v450 = 0;
            v467 = *(_QWORD *)(v450 + 88);
            v468 = *(_QWORD *)(*(_QWORD *)(v467 + 32) + 48);
            if (*(_QWORD *)(v468 + 8))
            {
              while (!*(_QWORD *)(v468 + 16))
              {
                v468 = *(_QWORD *)(v468 + 8);
                if (!v468)
                  goto LABEL_830;
              }
            }
            else
            {
              if (*(_QWORD *)(v468 + 16))
                v469 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
              else
                v469 = 0;
              if (!v469)
              {
LABEL_830:
                if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v467 + 40) + 216) + 8))
                  v470 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
                else
                  v470 = 0;
                if (!v470)
                {
                  v471 = *(_QWORD *)(v450 + 192);
                  if (v471)
                  {
                    v472 = *(WTF **)(v471 + 20);
                    v473 = (WTF **)(v471 + 28);
                  }
                  else
                  {
                    v472 = 0;
                    v473 = (WTF **)(v450 + 160);
                  }
                  v474 = *v473;
                  v1125[0] = v472;
                  v1125[1] = v474;
                  goto LABEL_837;
                }
              }
            }
            v1144.i64[0] = 0;
            v1062 = v441;
            v1064 = v377;
            v1060 = v448;
            v1125[0] = (WTF *)WebCore::RenderBox::maskClipRect((WebCore::RenderBox *)v450, (const WebCore::LayoutPoint *)&v1144);
            v1125[1] = v933;
            WebCore::RenderBox::flipForWritingMode(v450, (WebCore::LayoutRect *)v1125);
            v448 = v1060;
            v377 = v1064;
            v383 = 0x7FFFFFFFLL;
            v441 = v1062;
            goto LABEL_837;
          }
          v1061 = v448;
          v1066 = v377;
          v1063 = v441;
          ++*(_DWORD *)(v450 + 16);
          for (ii = WebCore::RenderTableRow::firstCell((WebCore::RenderTableRow *)v450);
                ;
                ii = WebCore::RenderTableCell::nextCell(v1076))
          {
            v1076 = (WebCore::RenderTableCell *)ii;
            if (!ii)
            {
              v983 = *(_DWORD *)(v450 + 16);
              if (!v983)
              {
                __break(0xC471u);
                JUMPOUT(0x194275668);
              }
              goto LABEL_1825;
            }
            v985 = *(_QWORD *)(ii + 160);
            v1144.i64[0] = 0;
            v1068 = v985;
            v1144.i64[1] = v985;
            WebCore::LayoutRect::unite((WebCore::LayoutRect *)v1125, (const WebCore::LayoutRect *)&v1144);
            v986 = *(_QWORD *)(v450 + 192);
            if (!v986)
              break;
            v1056 = *(WebCore::Node **)(v986 + 20);
            v987 = *(_QWORD *)(v986 + 28);
            v1145 = v1056;
            v1146 = v987;
            if (!v1056)
              goto LABEL_1821;
LABEL_1822:
            WebCore::LayoutRect::unite((WebCore::LayoutRect *)v1125, (const WebCore::LayoutRect *)&v1145);
LABEL_1823:
            ;
          }
          v987 = *(_QWORD *)(v450 + 160);
          v1145 = 0;
          v1146 = v987;
LABEL_1821:
          if (v1068 == v987)
            goto LABEL_1823;
          goto LABEL_1822;
        }
      }
      v951 = v441;
      v952 = v377;
      v455 = WebCore::LayoutRect::intersects((WebCore::LayoutRect *)(*(_QWORD *)&v440 + 4), (const WebCore::LayoutRect *)(*(_QWORD *)&v440 + 40));
      v377 = v952;
      v383 = 0x7FFFFFFFLL;
      v441 = v951;
      v379 = v1103;
      goto LABEL_812;
    }
  }
LABEL_677:
  v386 = v379 ^ 1u;
  if (v1108 && ((v379 ^ 1) & 1) == 0 && (v1099 & 1) == 0 && HIDWORD(v1148))
  {
    v387 = (float32x2_t)v1147;
    v1073 = (WebCore::RenderTableCell *)&v1147[104 * HIDWORD(v1148)];
    while (!**(_BYTE **)&v387)
    {
LABEL_720:
      *(_QWORD *)&v387 += 104;
      if ((WebCore::RenderTableCell *)v387 == v1073)
        goto LABEL_721;
    }
    v388 = v386;
    if ((v1120 & 1) != 0)
      WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
    v389 = v1124[1];
    if (v1124[1])
      ++*((_DWORD *)v1124[1] + 2);
    if (BYTE5(v1124[0]))
    {
      v390 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                   + 8)
                       + 528);
      v391 = 1.0;
      if (v390)
      {
        v392 = *(_QWORD *)(v390 + 8);
        if (v392)
        {
          v393 = *(_QWORD *)(v392 + 24);
          if (v393)
          {
            v394 = *(float **)(v393 + 8);
            if (v394)
            {
              v395 = (*(_DWORD *)v394)++;
              v391 = v394[91];
              if (v395)
              {
                *(_DWORD *)v394 = v395;
              }
              else
              {
                WebCore::Page::~Page((uint64_t)v394);
                WTF::fastFree(v681, v682);
              }
            }
          }
        }
      }
      v396 = *(_DWORD *)(*(_QWORD *)&v387 + 40);
      if (v396 == -1073741808
        && *(_DWORD *)(*(_QWORD *)&v387 + 44) == -1073741808
        && *(_DWORD *)(*(_QWORD *)&v387 + 48) == 2147483615
        && *(_DWORD *)(*(_QWORD *)&v387 + 52) == 2147483615
        || v396 == v1122.i32[0]
        && *(_QWORD *)(*(_QWORD *)&v387 + 44) == *(uint64_t *)((char *)v1122.i64 + 4)
        && *(_DWORD *)(*(_QWORD *)&v387 + 52) == v1122.i32[3])
      {
        if (*(_BYTE *)(*(_QWORD *)&v387 + 56))
        {
          v398 = 1;
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1117 + 96))(v1117, 1);
          v397 = 0;
        }
        else
        {
          v397 = 0;
          v398 = 0;
        }
      }
      else
      {
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1117 + 96))(v1117, 1);
        *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v387 + 40);
        v727 = LODWORD(v1125[0]) + v1123;
        if (__OFADD__(v1125[0], (_DWORD)v1123))
          v727 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        LODWORD(v1125[0]) = v727;
        v728 = HIDWORD(v1125[0]) + DWORD1(v1123);
        if (__OFADD__(HIDWORD(v1125[0]), DWORD1(v1123)))
          v728 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
        HIDWORD(v1125[0]) = v728;
        WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v726);
        v1144.i64[0] = __PAIR64__(v730, v729);
        v1144.i64[1] = __PAIR64__(v732, v731);
        (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v1117 + 456))(v1117, &v1144);
        v733 = floorf(v1144.f32[0]);
        v734 = 2147500000.0;
        if (v733 < 2147500000.0)
        {
          v734 = -2147500000.0;
          if (v733 > -2147500000.0)
            v734 = (float)(int)v733;
        }
        v735 = floorf(v1144.f32[1]);
        v736 = 2147500000.0;
        if (v735 < 2147500000.0)
        {
          v736 = -2147500000.0;
          if (v735 > -2147500000.0)
            v736 = (float)(int)v735;
        }
        v737 = ceilf(v1144.f32[0] + v1144.f32[2]);
        v738 = 2147500000.0;
        if (v737 < 2147500000.0)
        {
          v738 = -2147500000.0;
          if (v737 > -2147500000.0)
            v738 = (float)(int)v737;
        }
        v739 = ceilf(v1144.f32[1] + v1144.f32[3]);
        v740 = 2147500000.0;
        if (v739 < 2147500000.0)
        {
          v740 = -2147500000.0;
          if (v739 > -2147500000.0)
            v740 = (float)(int)v739;
        }
        if (v734 >= 2147500000.0)
        {
          v741 = 0x7FFFFFFFLL;
        }
        else if (v734 <= -2147500000.0)
        {
          v741 = 0x80000000;
        }
        else
        {
          v741 = (int)v734;
        }
        if (v736 >= 2147500000.0)
        {
          v742 = 0x7FFFFFFF00000000;
        }
        else if (v736 <= -2147500000.0)
        {
          v742 = 0x8000000000000000;
        }
        else
        {
          v742 = (unint64_t)(int)v736 << 32;
        }
        v743 = v738 - v734;
        if (v743 >= 2147500000.0)
        {
          v744 = 0x7FFFFFFFLL;
        }
        else if (v743 <= -2147500000.0)
        {
          v744 = 0x80000000;
        }
        else
        {
          v744 = (int)v743;
        }
        v745 = v740 - v736;
        if (v745 >= 2147500000.0)
        {
          v746 = 0x7FFFFFFF00000000;
        }
        else if (v745 <= -2147500000.0)
        {
          v746 = 0x8000000000000000;
        }
        else
        {
          v746 = (unint64_t)(int)v745 << 32;
        }
        v1145 = (WebCore::Node *)(v742 | v741);
        v1146 = v746 | v744;
        if (v389)
          WebCore::RegionContext::pushClip(v389, (const WebCore::IntRect *)&v1145);
        v397 = 1;
        v398 = 1;
        v368 = v1096;
      }
      if (*(_BYTE *)(*(_QWORD *)&v387 + 56))
      {
        for (jj = *(_QWORD *)(a1 + 40); jj; jj = *(_QWORD *)(jj + 40))
        {
          if ((v1096 & 0x1000) != 0)
          {
            v749 = *(_QWORD *)(jj + 264);
            if (v749)
            {
              if (*(_BYTE *)(v749 + 79) && *(_QWORD *)(*(_QWORD *)(v749 + 96) + 256))
                break;
            }
          }
          v750 = *(_QWORD *)(jj + 32);
          if ((*(_BYTE *)(v750 + 22) & 1) != 0
            && WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v750 + 80))
            && WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)a1, (const WebCore::RenderLayer *)jj, 0))
          {
            v1004 = WebCore::RenderLayer::offsetFromAncestor(jj, (uint64_t)v1121[0], 1);
            v1005 = *(_DWORD *)(jj + 164);
            v1006 = *(_DWORD *)(jj + 168);
            LODWORD(v1007) = v1005 << 6;
            if (v1005 < -33554432)
              LODWORD(v1007) = 0x80000000;
            if (v1005 <= 0x1FFFFFF)
              v1007 = v1007;
            else
              v1007 = 0x7FFFFFFFLL;
            if (v1006 >= -33554432)
              v1008 = v1006 << 6;
            else
              v1008 = 0x80000000;
            if (v1006 <= 0x1FFFFFF)
              v1009 = v1008;
            else
              v1009 = 0x7FFFFFFFLL;
            v1146 = v1007 | (v1009 << 32);
            v1010 = v1004 + v1123;
            if (__OFADD__((_DWORD)v1004, (_DWORD)v1123))
              v1010 = (v1004 >> 31) + 0x7FFFFFFF;
            v1011 = (HIDWORD(v1004) >> 31) + 0x7FFFFFFF;
            if (!__OFADD__(HIDWORD(v1004), DWORD1(v1123)))
              v1011 = HIDWORD(v1004) + DWORD1(v1123);
            v1145 = (WebCore::Node *)__PAIR64__(v1011, v1010);
            WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)(jj + 32) + 80), (const WebCore::LayoutRect *)&v1145, 1, 1, (uint64_t)&v1144);
            WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v1144, v391, (uint64_t)v1125);
            v1144 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v1122), (float32x4_t)vdupq_n_s32(0x3C800000u));
            if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v1125, (const WebCore::FloatRect *)&v1144))
            {
              v1144 = v1122;
              WebCore::LayoutRect::intersect((int *)&v1144, (const WebCore::LayoutRect *)&v1145);
              v1142 = (int32x4_t)v1144;
              LODWORD(v1143) = WebCore::snapRectToDevicePixels(v1142.i32, v391);
              *(_QWORD *)((char *)&v1143 + 4) = __PAIR64__(v1013, v1012);
              HIDWORD(v1143) = v1014;
              (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)v1117 + 456))(v1117, &v1143);
            }
            else
            {
              (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)v1117 + 464))(v1117, v1125);
            }
          }
          if ((WebCore::RenderObject *)jj == v1121[0])
            break;
        }
        v368 = v1096;
      }
    }
    else
    {
      v397 = 0;
      v398 = 0;
    }
    v399 = *((_QWORD *)v1121[0] + 4);
    *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v387 + 40);
    v1126[0] = 0;
    v1127 = v368;
    *(_QWORD *)&v1129 = 0;
    v1128 = (unint64_t)v1114;
    *((_QWORD *)&v1129 + 1) = v399;
    v1130 = 0;
    v1131 = a1;
    v1132 = 0;
    v1133 = v1117;
    v400 = *(_QWORD *)(a1 + 32);
    v402 = *(_DWORD *)(*(_QWORD *)&v387 + 24);
    v401 = *(_DWORD *)(*(_QWORD *)&v387 + 28);
    if (v400 && (*(_BYTE *)(v400 + 45) & 4) != 0)
      goto LABEL_706;
    v404 = 0;
    if ((*(_BYTE *)(v400 + 52) & 7) != 4)
    {
      LODWORD(v403) = 0;
      v368 = v1096;
      goto LABEL_707;
    }
    LODWORD(v403) = 0;
    v368 = v1096;
    if ((*(_BYTE *)(v400 + 53) & 1) == 0)
    {
LABEL_706:
      v403 = *(_QWORD *)(v400 + 152);
      v404 = v403 & 0xFFFFFFFF00000000;
    }
LABEL_707:
    v405 = HIDWORD(v404);
    v70 = __OFSUB__(v402, (_DWORD)v403);
    v406 = v402 - v403;
    v407 = (v402 >> 31) + 0x7FFFFFFF;
    if (!v70)
      v407 = v406;
    v70 = __OFSUB__(v401, (_DWORD)v405);
    v408 = v401 - v405;
    v409 = (v401 >> 31) + 0x7FFFFFFF;
    if (!v70)
      v409 = v408;
    v70 = __OFADD__(v407, (_DWORD)v1123);
    v410 = v407 + v1123;
    LODWORD(v411) = (v407 >> 31) + 0x7FFFFFFF;
    if (v70)
      v411 = v411;
    else
      v411 = v410;
    v70 = __OFADD__(v409, DWORD1(v1123));
    v412 = v409 + DWORD1(v1123);
    LODWORD(v413) = (v409 >> 31) + 0x7FFFFFFF;
    if (v70)
      v413 = v413;
    else
      v413 = v412;
    v1144.i64[0] = v411 | (v413 << 32);
    (*(void (**)(uint64_t, WTF **, float32x4_t *))(*(_QWORD *)v400 + 680))(v400, v1125, &v1144);
    if (v389)
    {
      if (v397)
      {
        v926 = *((_DWORD *)v389 + 11);
        if (v926)
          *((_DWORD *)v389 + 11) = v926 - 1;
      }
      v688 = *((_DWORD *)v389 + 2);
      if (!v688)
      {
        __break(0xC471u);
        JUMPOUT(0x194273FDCLL);
      }
      *((_DWORD *)v389 + 2) = v688 - 1;
      v368 = v1096;
    }
    v386 = v388;
    if (v398)
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1117 + 104))(v1117, 1);
    goto LABEL_720;
  }
LABEL_721:
  v414 = (v1120 >> 9) & 1;
  if (v1108)
    v415 = (v1120 >> 9) & 1;
  else
    v415 = 1;
  if (((v1120 >> 10) & 1) == 0)
    LOBYTE(v414) = 0;
  if ((v414 & 1) != 0 || !v415)
  {
    v416 = *(uint64_t ***)(a1 + 96);
    if (v416)
    {
      v593 = *((unsigned int *)v416 + 3);
      if ((_DWORD)v593)
      {
        if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
        {
          v594 = *v416;
          v595 = 8 * v593;
          if ((v361 & 0x10000) == 0)
          {
            do
            {
              v596 = *v594++;
              WebCore::RenderLayer::paintLayer(v596, v1117, a3, v361);
              v595 -= 8;
            }
            while (v595);
            goto LABEL_729;
          }
          v368 = v1096;
          do
          {
            v1046 = v386;
            v1047 = *v594;
            if (!WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(*v594 + 32)))
            {
              v1048 = *(_QWORD *)(v1047 + 32);
              v1049 = *(_BYTE *)(v1048 + 52) & 7;
              if (v1049 == 1)
              {
                v1050 = 16;
              }
              else
              {
                if (v1049 != 3)
                {
LABEL_1943:
                  WebCore::RenderLayer::paintLayer(v1047, v1117, a3, v361);
                  goto LABEL_1938;
                }
                v1050 = 8;
              }
              if ((*(_BYTE *)(v1048 + 53) & v1050) == 0)
                goto LABEL_1943;
            }
LABEL_1938:
            ++v594;
            v595 -= 8;
            v386 = v1046;
          }
          while (v595);
        }
      }
    }
  }
LABEL_729:
  v417 = v1103;
  if (!v1106)
    v417 = 0;
  if (v417 == 1)
  {
    if ((v1120 & 1) != 0 && HIDWORD(v1148))
    {
      v590 = (int *)(v1147 + 72);
      v591 = 104 * HIDWORD(v1148);
      while (!*((_BYTE *)v590 - 72) || *(v590 - 1) < 1 || *v590 < 1)
      {
        v590 += 26;
        v591 -= 104;
        if (!v591)
          goto LABEL_733;
      }
      WebCore::RenderLayer::beginTransparencyLayers(a1, a2, (uint64_t)v1121, (const WebCore::LayoutRect *)(a3 + 16));
    }
LABEL_733:
    if (((uint64_t)v1124[0] & 8) != 0)
      v418 = 8;
    else
      v418 = v368;
    if (((uint64_t)v1124[0] & 4) != 0)
      v418 = 4;
    v419 = v418 | (uint64_t)v1124[0] & 0x51D00;
    if (((uint64_t)v1124[0] & 0x20000) != 0)
      v420 = v419 | 0x20000;
    else
      v420 = v419;
    v1109 = v420;
    v421 = v1124[1];
    if (v1124[1])
      ++*((_DWORD *)v1124[1] + 2);
    v422 = 0;
    if (BYTE5(v1124[0]))
    {
      v423 = 0;
      if (HIDWORD(v1148) == 1)
      {
        v424 = (float32x2_t)v1147;
        if (*v1147 && *((int *)v1147 + 17) >= 1 && *((int *)v1147 + 18) >= 1)
        {
          v425 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 8) + 40)
                                       + 8)
                           + 528);
          v426 = 1.0;
          if (v425)
          {
            v427 = *(_QWORD *)(v425 + 8);
            if (v427)
            {
              v428 = *(_QWORD *)(v427 + 24);
              if (v428)
              {
                v429 = *(float **)(v428 + 8);
                if (v429)
                {
                  v430 = (*(_DWORD *)v429)++;
                  v426 = v429[91];
                  if (v430)
                  {
                    *(_DWORD *)v429 = v430;
                  }
                  else
                  {
                    WebCore::Page::~Page((uint64_t)v429);
                    WTF::fastFree(v684, v685);
                  }
                }
              }
            }
          }
          v431 = *(_DWORD *)(*(_QWORD *)&v424 + 60);
          if (v431 == -1073741808
            && *(_DWORD *)(*(_QWORD *)&v424 + 64) == -1073741808
            && *(_DWORD *)(*(_QWORD *)&v424 + 68) == 2147483615
            && *(_DWORD *)(*(_QWORD *)&v424 + 72) == 2147483615
            || v431 == v1122.i32[0]
            && *(_QWORD *)(*(_QWORD *)&v424 + 64) == *(uint64_t *)((char *)v1122.i64 + 4)
            && *(_DWORD *)(*(_QWORD *)&v424 + 72) == v1122.i32[3])
          {
            if (*(_BYTE *)(*(_QWORD *)&v424 + 76))
            {
              v422 = 1;
              (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1117 + 96))(v1117, 1);
            }
            else
            {
              v422 = 0;
            }
            v423 = 0;
          }
          else
          {
            (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v1117 + 96))(v1117, 1);
            *(_OWORD *)v1125 = *(_OWORD *)(*(_QWORD *)&v424 + 60);
            v752 = LODWORD(v1125[0]) + v1123;
            if (__OFADD__(v1125[0], (_DWORD)v1123))
              v752 = (LODWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
            LODWORD(v1125[0]) = v752;
            v753 = HIDWORD(v1125[0]) + DWORD1(v1123);
            if (__OFADD__(HIDWORD(v1125[0]), DWORD1(v1123)))
              v753 = (HIDWORD(v1125[0]) >> 31) + 0x7FFFFFFF;
            HIDWORD(v1125[0]) = v753;
            WebCore::snapRectToDevicePixelsIfNeeded((WebCore *)v1125, *(const WebCore::LayoutRect **)(a1 + 32), v751);
            v1144.i64[0] = __PAIR64__(v755, v754);
            v1144.i64[1] = __PAIR64__(v757, v756);
            (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v1117 + 456))(v1117, &v1144);
            v758 = floorf(v1144.f32[0]);
            v759 = 2147500000.0;
            if (v758 < 2147500000.0)
            {
              v759 = -2147500000.0;
              if (v758 > -2147500000.0)
                v759 = (float)(int)v758;
            }
            v760 = floorf(v1144.f32[1]);
            v761 = 2147500000.0;
            if (v760 < 2147500000.0)
            {
              v761 = -2147500000.0;
              if (v760 > -2147500000.0)
                v761 = (float)(int)v760;
            }
            v762 = ceilf(v1144.f32[0] + v1144.f32[2]);
            v763 = 2147500000.0;
            if (v762 < 2147500000.0)
            {
              v763 = -2147500000.0;
              if (v762 > -2147500000.0)
                v763 = (float)(int)v762;
            }
            v764 = ceilf(v1144.f32[1] + v1144.f32[3]);
            v765 = 2147500000.0;
            if (v764 < 2147500000.0)
            {
              v765 = -2147500000.0;
              if (v764 > -2147500000.0)
                v765 = (float)(int)v764;
            }
            if (v759 >= 2147500000.0)
            {
              v766 = 0x7FFFFFFFLL;
            }
            else if (v759 <= -2147500000.0)
            {
              v766 = 0x80000000;
            }
            else
            {
              v766 = (int)v759;
            }
            if (v761 >= 2147500000.0)
            {
              v767 = 0x7FFFFFFF00000000;
            }
            else if (v761 <= -2147500000.0)
            {
              v767 = 0x8000000000000000;
            }
            else
            {
              v767 = (unint64_t)(int)v761 << 32;
            }
            v768 = v763 - v759;
            v769 = v765 - v761;
            if (v768 >= 2147500000.0)
            {
              v770 = 0x7FFFFFFFLL;
            }
            else if (v768 <= -2147500000.0)
            {
              v770 = 0x80000000;
            }
            else
            {
              v770 = (int)v768;
            }
            if (v769 >= 2147500000.0)
            {
              v771 = 0x7FFFFFFF00000000;
            }
            else if (v769 <= -2147500000.0)
            {
              v771 = 0x8000000000000000;
            }
            else
            {
              v771 = (unint64_t)(int)v769 << 32;
            }
            v1145 = (WebCore::Node *)(v767 | v766);
            v1146 = v771 | v770;
            if (v421)
              WebCore::RegionContext::pushClip(v421, (const WebCore::IntRect *)&v1145);
            v422 = 1;
            v423 = 1;
          }
          if (*(_BYTE *)(*(_QWORD *)&v424 + 76))
          {
            v778 = v423;
            v779 = a1;
            do
            {
              if ((v1109 & 0x1000) != 0)
              {
                v780 = *(_QWORD *)(v779 + 264);
                if (v780)
                {
                  if (*(_BYTE *)(v780 + 79) && *(_QWORD *)(*(_QWORD *)(v780 + 96) + 256))
                    break;
                }
              }
              v781 = *(_QWORD *)(v779 + 32);
              if ((*(_BYTE *)(v781 + 22) & 1) != 0
                && WebCore::RenderStyle::hasBorderRadius((WebCore::RenderStyle *)(v781 + 80))
                && WebCore::RenderLayer::ancestorLayerIsInContainingBlockChain((WebCore::RenderLayer *)a1, (const WebCore::RenderLayer *)v779, 0))
              {
                v993 = WebCore::RenderLayer::offsetFromAncestor(v779, (uint64_t)v1121[0], 1);
                v994 = *(_DWORD *)(v779 + 164);
                v995 = *(_DWORD *)(v779 + 168);
                LODWORD(v996) = v994 << 6;
                if (v994 < -33554432)
                  LODWORD(v996) = 0x80000000;
                if (v994 <= 0x1FFFFFF)
                  v996 = v996;
                else
                  v996 = 0x7FFFFFFFLL;
                if (v995 >= -33554432)
                  v997 = v995 << 6;
                else
                  v997 = 0x80000000;
                if (v995 <= 0x1FFFFFF)
                  v998 = v997;
                else
                  v998 = 0x7FFFFFFFLL;
                v1146 = v996 | (v998 << 32);
                v999 = v993 + v1123;
                if (__OFADD__((_DWORD)v993, (_DWORD)v1123))
                  v999 = (v993 >> 31) + 0x7FFFFFFF;
                v1000 = (HIDWORD(v993) >> 31) + 0x7FFFFFFF;
                if (!__OFADD__(HIDWORD(v993), DWORD1(v1123)))
                  v1000 = HIDWORD(v993) + DWORD1(v1123);
                v1145 = (WebCore::Node *)__PAIR64__(v1000, v999);
                WebCore::RenderStyle::getRoundedInnerBorderFor((WebCore::RenderStyle *)(*(_QWORD *)(v779 + 32) + 80), (const WebCore::LayoutRect *)&v1145, 1, 1, (uint64_t)&v1144);
                WebCore::RoundedRect::pixelSnappedRoundedRectForPainting((WebCore::RoundedRect *)&v1144, v426, (uint64_t)v1125);
                v1144 = vmulq_f32(vcvtq_f32_s32((int32x4_t)v1122), (float32x4_t)vdupq_n_s32(0x3C800000u));
                if (WebCore::FloatRoundedRect::intersectionIsRectangular((WebCore::FloatRoundedRect *)v1125, (const WebCore::FloatRect *)&v1144))
                {
                  v1144 = v1122;
                  WebCore::LayoutRect::intersect((int *)&v1144, (const WebCore::LayoutRect *)&v1145);
                  v1142 = (int32x4_t)v1144;
                  LODWORD(v1143) = WebCore::snapRectToDevicePixels(v1142.i32, v426);
                  *(_QWORD *)((char *)&v1143 + 4) = __PAIR64__(v1002, v1001);
                  HIDWORD(v1143) = v1003;
                  (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)v1117 + 456))(v1117, &v1143);
                }
                else
                {
                  (*(void (**)(WebCore::GraphicsContext *, WTF **))(*(_QWORD *)v1117 + 464))(v1117, v1125);
                }
              }
              if ((WebCore::RenderObject *)v779 == v1121[0])
                break;
              v779 = *(_QWORD *)(v779 + 40);
            }
            while (v779);
            v423 = v778;
          }
        }
        else
        {
          v422 = 0;
          v423 = 0;
        }
      }
    }
    else
    {
      v423 = 0;
    }
    v1101 = v423;
    v432 = (char)v1124[0];
    v433 = *(_QWORD *)(a1 + 32);
    v434 = *(_BYTE *)(v433 + 52) & 7;
    v435 = *(_BYTE *)(v433 + 53);
    v436 = v434 == 4 && (v435 & 1) == 0;
    v1078 = v361;
    if (v436 && (v435 & 2) == 0)
    {
      if (((uint64_t)v1124[0] & 0x81) == 0)
        WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(a1, 8, (uint64_t)v1147, HIDWORD(v1148), (uint64_t)v1117, (uint64_t)v1121, v1109, v1114);
      goto LABEL_993;
    }
    v377 = (uint64_t)v1147;
    v437 = HIDWORD(v1148);
    if (((uint64_t)v1124[0] & 1) != 0)
    {
      v1104 = v386;
      goto LABEL_1763;
    }
    v439 = HIDWORD(v1148) > 1 && BYTE5(v1124[0]) != 0;
    if (!HIDWORD(v1148))
    {
      if (((uint64_t)v1124[0] & 0x80) != 0)
      {
        v1104 = v386;
        v437 = 0;
        goto LABEL_1763;
      }
      goto LABEL_993;
    }
    v1104 = v386;
    v491 = (uint64_t)(v1147 + 60);
    v492 = 104 * HIDWORD(v1148);
    while (!*(_BYTE *)(v491 - 60) || *(int *)(v491 + 8) < 1 || *(int *)(v491 + 12) < 1)
    {
LABEL_897:
      v491 += 104;
      v492 -= 104;
      if (!v492)
      {
        v377 = (uint64_t)v1147;
        v437 = HIDWORD(v1148);
        if ((v432 & 0x80) == 0)
        {
          v508 = HIDWORD(v1148) > 1 && BYTE5(v1124[0]) != 0;
          if (!HIDWORD(v1148))
            goto LABEL_993;
          v509 = (uint64_t)(v1147 + 60);
          v510 = 104 * HIDWORD(v1148);
          while (2)
          {
            if (*(_BYTE *)(v509 - 60) && *(int *)(v509 + 8) >= 1 && *(int *)(v509 + 12) >= 1)
            {
              v1144.i64[0] = (uint64_t)v1117;
              v1144.i8[8] = 0;
              v1145 = v1124[1];
              if (v1124[1])
                ++*((_DWORD *)v1124[1] + 2);
              LOBYTE(v1146) = 0;
              if (v508)
                WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1117, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1109, v509, 0);
              v511 = *((_QWORD *)v1121[0] + 4);
              *(_OWORD *)v1125 = *(_OWORD *)v509;
              v1126[0] = 4;
              v1127 = v1109;
              *(_QWORD *)&v1129 = 0;
              v1128 = (unint64_t)v1114;
              *((_QWORD *)&v1129 + 1) = v511;
              v1130 = BYTE4(v1124[0]);
              v1131 = a1;
              v1132 = 0;
              v1133 = v1117;
              v512 = *(_QWORD *)(a1 + 32);
              v514 = *(_DWORD *)(v509 - 36);
              v513 = *(_DWORD *)(v509 - 32);
              if (v512 && (*(_BYTE *)(v512 + 45) & 4) != 0)
              {
LABEL_916:
                v515 = *(_QWORD *)(v512 + 152);
                v516 = v515 & 0xFFFFFFFF00000000;
              }
              else
              {
                v516 = 0;
                if ((*(_BYTE *)(v512 + 52) & 7) == 4)
                {
                  LODWORD(v515) = 0;
                  LODWORD(v386) = v1104;
                  if ((*(_BYTE *)(v512 + 53) & 1) == 0)
                    goto LABEL_916;
                }
                else
                {
                  LODWORD(v515) = 0;
                  LODWORD(v386) = v1104;
                }
              }
              v517 = HIDWORD(v516);
              v70 = __OFSUB__(v514, (_DWORD)v515);
              v518 = v514 - v515;
              v519 = (v514 >> 31) + 0x7FFFFFFF;
              if (v70)
                v518 = v519;
              v520 = v513 - v517;
              if (__OFSUB__(v513, (_DWORD)v517))
                v520 = (v513 >> 31) + 0x7FFFFFFF;
              v70 = __OFADD__(v518, (_DWORD)v1123);
              LODWORD(v521) = v518 + v1123;
              v522 = (v518 >> 31) + 0x7FFFFFFF;
              if (v70)
                v521 = v522;
              else
                v521 = v521;
              v523 = v520 + DWORD1(v1123);
              if (__OFADD__(v520, DWORD1(v1123)))
                v523 = (v520 >> 31) + 0x7FFFFFFF;
              *(_QWORD *)&v1143 = v521 | (v523 << 32);
              (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v512 + 680))(v512, v1125, &v1143);
              v524 = v1145;
              if (v1145)
              {
                if ((_BYTE)v1146)
                {
                  v928 = *((_DWORD *)v1145 + 11);
                  if (v928)
                    *((_DWORD *)v1145 + 11) = v928 - 1;
                }
                v690 = *((_DWORD *)v524 + 2);
                if (!v690)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19427401CLL);
                }
                *((_DWORD *)v524 + 2) = v690 - 1;
                LODWORD(v386) = v1104;
              }
              if (v1144.i8[8])
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
            }
            v509 += 104;
            v510 -= 104;
            if (v510)
              continue;
            break;
          }
          v525 = BYTE5(v1124[0]) && HIDWORD(v1148) > 1uLL;
          v526 = v525;
          if (!HIDWORD(v1148))
            goto LABEL_993;
          v527 = (uint64_t)(v1147 + 60);
          v528 = 104 * HIDWORD(v1148);
          while (2)
          {
            if (*(_BYTE *)(v527 - 60) && *(int *)(v527 + 8) >= 1 && *(int *)(v527 + 12) >= 1)
            {
              v1144.i64[0] = (uint64_t)v1117;
              v1144.i8[8] = 0;
              v1145 = v1124[1];
              if (v1124[1])
                ++*((_DWORD *)v1124[1] + 2);
              LOBYTE(v1146) = 0;
              if (v526)
                WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1117, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1109, v527, 0);
              v529 = *((_QWORD *)v1121[0] + 4);
              *(_OWORD *)v1125 = *(_OWORD *)v527;
              v1126[0] = 8;
              v1127 = v1109;
              v1128 = (unint64_t)v1114;
              v1130 = BYTE4(v1124[0]);
              v1131 = a1;
              v1132 = 0;
              v1133 = v1117;
              *(_QWORD *)&v1129 = *((_QWORD *)&v1123 + 1);
              *((_QWORD *)&v1129 + 1) = v529;
              v530 = *(_QWORD *)(a1 + 32);
              v532 = *(_DWORD *)(v527 - 36);
              v531 = *(_DWORD *)(v527 - 32);
              if (v530 && (*(_BYTE *)(v530 + 45) & 4) != 0)
              {
LABEL_948:
                v533 = *(_QWORD *)(v530 + 152);
                v534 = HIDWORD(v533);
              }
              else
              {
                v534 = 0;
                if ((*(_BYTE *)(v530 + 52) & 7) == 4)
                {
                  LODWORD(v533) = 0;
                  LODWORD(v386) = v1104;
                  if ((*(_BYTE *)(v530 + 53) & 1) == 0)
                    goto LABEL_948;
                }
                else
                {
                  LODWORD(v533) = 0;
                  LODWORD(v386) = v1104;
                }
              }
              v70 = __OFSUB__(v532, (_DWORD)v533);
              v535 = v532 - v533;
              if (v70)
                v535 = (v532 >> 31) + 0x7FFFFFFF;
              v536 = v531 - v534;
              if (__OFSUB__(v531, v534))
                v536 = (v531 >> 31) + 0x7FFFFFFF;
              v537 = v535 + v1123;
              if (__OFADD__(v535, (_DWORD)v1123))
                v537 = (v535 >> 31) + 0x7FFFFFFF;
              v538 = v536 + DWORD1(v1123);
              if (__OFADD__(v536, DWORD1(v1123)))
                v538 = (v536 >> 31) + 0x7FFFFFFF;
              *(_QWORD *)&v1143 = v537 | (unint64_t)(v538 << 32);
              (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v530 + 680))(v530, v1125, &v1143);
              v539 = v1145;
              if (v1145)
              {
                if ((_BYTE)v1146)
                {
                  v929 = *((_DWORD *)v1145 + 11);
                  if (v929)
                    *((_DWORD *)v1145 + 11) = v929 - 1;
                }
                v691 = *((_DWORD *)v539 + 2);
                if (!v691)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19427403CLL);
                }
                *((_DWORD *)v539 + 2) = v691 - 1;
                LODWORD(v386) = v1104;
              }
              if (v1144.i8[8])
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
            }
            v527 += 104;
            v528 -= 104;
            if (v528)
              continue;
            break;
          }
          v540 = BYTE5(v1124[0]) && HIDWORD(v1148) > 1uLL;
          v541 = v540;
          if (!HIDWORD(v1148))
            goto LABEL_993;
          v542 = (uint64_t)(v1147 + 60);
          v543 = 104 * HIDWORD(v1148);
          while (2)
          {
            if (*(_BYTE *)(v542 - 60) && *(int *)(v542 + 8) >= 1 && *(int *)(v542 + 12) >= 1)
            {
              v1144.i64[0] = (uint64_t)v1117;
              v1144.i8[8] = 0;
              v1145 = v1124[1];
              if (v1124[1])
                ++*((_DWORD *)v1124[1] + 2);
              LOBYTE(v1146) = 0;
              if (v541)
                WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1117, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1109, v542, 0);
              v544 = *((_QWORD *)v1121[0] + 4);
              *(_OWORD *)v1125 = *(_OWORD *)v542;
              v1126[0] = 32;
              v1127 = v1109;
              *(_QWORD *)&v1129 = 0;
              v1128 = (unint64_t)v1114;
              *((_QWORD *)&v1129 + 1) = v544;
              v1130 = BYTE4(v1124[0]);
              v1131 = a1;
              v1132 = 0;
              v1133 = v1117;
              v545 = *(_QWORD *)(a1 + 32);
              v547 = *(_DWORD *)(v542 - 36);
              v546 = *(_DWORD *)(v542 - 32);
              if (v545 && (*(_BYTE *)(v545 + 45) & 4) != 0)
              {
LABEL_978:
                v548 = *(_QWORD *)(v545 + 152);
                v549 = v548 & 0xFFFFFFFF00000000;
              }
              else
              {
                v549 = 0;
                if ((*(_BYTE *)(v545 + 52) & 7) == 4)
                {
                  LODWORD(v548) = 0;
                  LODWORD(v386) = v1104;
                  if ((*(_BYTE *)(v545 + 53) & 1) == 0)
                    goto LABEL_978;
                }
                else
                {
                  LODWORD(v548) = 0;
                  LODWORD(v386) = v1104;
                }
              }
              v550 = HIDWORD(v549);
              v70 = __OFSUB__(v547, (_DWORD)v548);
              v551 = v547 - v548;
              v552 = (v547 >> 31) + 0x7FFFFFFF;
              if (v70)
                v551 = v552;
              v553 = v546 - v550;
              if (__OFSUB__(v546, (_DWORD)v550))
                v553 = (v546 >> 31) + 0x7FFFFFFF;
              v70 = __OFADD__(v551, (_DWORD)v1123);
              LODWORD(v554) = v551 + v1123;
              v555 = (v551 >> 31) + 0x7FFFFFFF;
              if (v70)
                v554 = v555;
              else
                v554 = v554;
              v556 = v553 + DWORD1(v1123);
              if (__OFADD__(v553, DWORD1(v1123)))
                v556 = (v553 >> 31) + 0x7FFFFFFF;
              *(_QWORD *)&v1143 = v554 | (v556 << 32);
              (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v545 + 680))(v545, v1125, &v1143);
              v557 = v1145;
              if (v1145)
              {
                if ((_BYTE)v1146)
                {
                  v930 = *((_DWORD *)v1145 + 11);
                  if (v930)
                    *((_DWORD *)v1145 + 11) = v930 - 1;
                }
                v692 = *((_DWORD *)v557 + 2);
                if (!v692)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19427405CLL);
                }
                *((_DWORD *)v557 + 2) = v692 - 1;
                LODWORD(v386) = v1104;
              }
              if (v1144.i8[8])
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
            }
            v542 += 104;
            v543 -= 104;
            if (!v543)
              goto LABEL_993;
            continue;
          }
        }
LABEL_1763:
        WebCore::RenderLayer::paintForegroundForFragmentsWithPhase(a1, 128, v377, v437, (uint64_t)v1117, (uint64_t)v1121, v1109, v1114);
        LODWORD(v386) = v1104;
LABEL_993:
        if (v421)
        {
          if (v1101)
          {
            v924 = *((_DWORD *)v421 + 11);
            if (v924)
              *((_DWORD *)v421 + 11) = v924 - 1;
          }
          v687 = *((_DWORD *)v421 + 2);
          if (!v687)
          {
            __break(0xC471u);
            JUMPOUT(0x194273DCCLL);
          }
          *((_DWORD *)v421 + 2) = v687 - 1;
        }
        LODWORD(v361) = v1078;
        if (v422)
          (*(void (**)(WebCore::GraphicsContext *, uint64_t, uint64_t))(*(_QWORD *)v1117 + 104))(v1117, 1, v377);
        goto LABEL_996;
      }
    }
    v1144.i64[0] = (uint64_t)v1117;
    v1144.i8[8] = 0;
    v1145 = v1124[1];
    if (v1124[1])
      ++*((_DWORD *)v1124[1] + 2);
    LOBYTE(v1146) = 0;
    if (v439)
      WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1117, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1109, v491, 0);
    v493 = *((_QWORD *)v1121[0] + 4);
    *(_OWORD *)v1125 = *(_OWORD *)v491;
    v1126[0] = 2;
    v1127 = v1109;
    *(_QWORD *)&v1129 = 0;
    v1128 = (unint64_t)v1114;
    *((_QWORD *)&v1129 + 1) = v493;
    v1130 = BYTE4(v1124[0]);
    v1131 = a1;
    v1132 = 0;
    v1133 = v1117;
    v494 = *(_QWORD *)(a1 + 32);
    v496 = *(_DWORD *)(v491 - 36);
    v495 = *(_DWORD *)(v491 - 32);
    if (v494 && (*(_BYTE *)(v494 + 45) & 4) != 0)
      goto LABEL_883;
    v498 = 0;
    if ((*(_BYTE *)(v494 + 52) & 7) != 4)
    {
      LODWORD(v497) = 0;
      goto LABEL_884;
    }
    LODWORD(v497) = 0;
    if ((*(_BYTE *)(v494 + 53) & 1) == 0)
    {
LABEL_883:
      v497 = *(_QWORD *)(v494 + 152);
      v498 = v497 & 0xFFFFFFFF00000000;
    }
LABEL_884:
    v499 = HIDWORD(v498);
    v70 = __OFSUB__(v496, (_DWORD)v497);
    v500 = v496 - v497;
    v501 = (v496 >> 31) + 0x7FFFFFFF;
    if (v70)
      v500 = v501;
    v502 = v495 - v499;
    if (__OFSUB__(v495, (_DWORD)v499))
      v502 = (v495 >> 31) + 0x7FFFFFFF;
    v70 = __OFADD__(v500, (_DWORD)v1123);
    LODWORD(v503) = v500 + v1123;
    v504 = (v500 >> 31) + 0x7FFFFFFF;
    if (v70)
      v503 = v504;
    else
      v503 = v503;
    v505 = v502 + DWORD1(v1123);
    if (__OFADD__(v502, DWORD1(v1123)))
      v505 = (v502 >> 31) + 0x7FFFFFFF;
    *(_QWORD *)&v1143 = v503 | (v505 << 32);
    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v494 + 680))(v494, v1125, &v1143);
    v506 = v1145;
    if (v1145)
    {
      if ((_BYTE)v1146)
      {
        v927 = *((_DWORD *)v1145 + 11);
        if (v927)
          *((_DWORD *)v1145 + 11) = v927 - 1;
      }
      v689 = *((_DWORD *)v506 + 2);
      if (!v689)
      {
        __break(0xC471u);
        JUMPOUT(0x194273FFCLL);
      }
      *((_DWORD *)v506 + 2) = v689 - 1;
    }
    if (v1144.i8[8])
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
    goto LABEL_897;
  }
  if ((v1120 & 0x8000) != 0 && HIDWORD(v1148))
  {
    v605 = BYTE5(v1124[0]);
    v606 = (uint64_t)(v1147 + 40);
    v607 = 104 * HIDWORD(v1148);
    do
    {
      *(_OWORD *)v1125 = *(_OWORD *)(v606 + 20);
      v1126[0] = 4096;
      v1127 = v1096;
      v1128 = 0u;
      v1129 = 0u;
      v1130 = 0;
      v1131 = 0;
      v1132 = v1124[1];
      v1133 = v1117;
      if (v605)
      {
        v608 = *(_QWORD *)v606;
        v609 = ((int)*(_QWORD *)v606 >> 6);
        v610 = *(_DWORD *)(v606 + 8);
        if (v610)
        {
          v70 = __OFADD__((_DWORD)v608, v610);
          v611 = v608 + v610;
          if (v70)
            v611 = (v608 >> 31) + 0x7FFFFFFF;
          if (v611 > 2147483583)
          {
            v612 = 0x1FFFFFF;
          }
          else if (v611 < 0)
          {
            v612 = -(-v611 >> 6);
          }
          else
          {
            v612 = (v611 + 63) >> 6;
          }
        }
        else
        {
          v612 = (int)*(_QWORD *)v606 >> 6;
        }
        v613 = v608 >> 38;
        v614 = *(_DWORD *)(v606 + 12);
        v615 = v608 >> 38;
        if (v614)
        {
          v616 = HIDWORD(v608);
          LODWORD(v608) = HIDWORD(v608) + v614;
          if (__OFADD__(HIDWORD(v608), v614))
            LODWORD(v608) = (v616 >> 31) + 0x7FFFFFFF;
          if ((int)v608 > 2147483583)
          {
            LODWORD(v615) = 0x1FFFFFF;
          }
          else if ((v608 & 0x80000000) != 0)
          {
            LODWORD(v615) = -(-(int)v608 >> 6);
          }
          else
          {
            LODWORD(v615) = (v608 + 63) >> 6;
          }
        }
        v1144.i64[0] = v609 | (v613 << 32);
        v1144.i32[2] = v612 - v609;
        v1144.i32[3] = v615 - v613;
        WebCore::RegionContext::pushClip(v1124[1], (const WebCore::IntRect *)&v1144);
      }
      v617 = *(_QWORD *)(a1 + 32);
      v619 = *(_DWORD *)(v606 - 16);
      v618 = *(_DWORD *)(v606 - 12);
      if (v617 && (*(_BYTE *)(v617 + 45) & 4) != 0
        || ((*(_BYTE *)(v617 + 52) & 7) == 4 ? (v1045 = (*(_BYTE *)(v617 + 53) & 1) == 0) : (v1045 = 0), v1045))
      {
        v620 = *(_QWORD *)(v617 + 152);
        v621 = v620 & 0xFFFFFFFF00000000;
      }
      else
      {
        v621 = 0;
        LODWORD(v620) = 0;
      }
      v622 = HIDWORD(v621);
      v70 = __OFSUB__(v619, (_DWORD)v620);
      v623 = v619 - v620;
      v624 = (v619 >> 31) + 0x7FFFFFFF;
      if (!v70)
        v624 = v623;
      v70 = __OFSUB__(v618, (_DWORD)v622);
      v625 = v618 - v622;
      v626 = (v618 >> 31) + 0x7FFFFFFF;
      if (!v70)
        v626 = v625;
      v70 = __OFADD__(v624, (_DWORD)v1123);
      v627 = v624 + v1123;
      LODWORD(v628) = (v624 >> 31) + 0x7FFFFFFF;
      if (v70)
        v628 = v628;
      else
        v628 = v627;
      v70 = __OFADD__(v626, DWORD1(v1123));
      v629 = v626 + DWORD1(v1123);
      LODWORD(v630) = (v626 >> 31) + 0x7FFFFFFF;
      if (v70)
        v630 = v630;
      else
        v630 = v629;
      v1144.i64[0] = v628 | (v630 << 32);
      (*(void (**)(uint64_t, WTF **, float32x4_t *))(*(_QWORD *)v617 + 680))(v617, v1125, &v1144);
      v605 = BYTE5(v1124[0]);
      if (BYTE5(v1124[0]))
      {
        v631 = *((_DWORD *)v1132 + 11);
        if (v631)
          *((_DWORD *)v1132 + 11) = v631 - 1;
      }
      v606 += 104;
      v607 -= 104;
    }
    while (v607);
  }
LABEL_996:
  if (v1092)
    WebCore::RenderLayer::collectAccessibilityRegionsForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), (uint64_t)v1117, (uint64_t)v1121, v1096);
  if (v1112 && HIDWORD(v1148))
  {
    v793 = (uint64_t)(v1147 + 40);
    v794 = 104 * HIDWORD(v1148);
    while (*(int *)(v793 + 8) <= 0 || *(int *)(v793 + 12) < 1)
    {
LABEL_1473:
      v793 += 104;
      v794 -= 104;
      if (!v794)
        goto LABEL_999;
    }
    v795 = *((_QWORD *)v1121[0] + 4);
    v796 = *(_OWORD *)v793;
    v1128 = (unint64_t)v1114;
    *((_QWORD *)&v1129 + 1) = v795;
    *(_OWORD *)v1125 = v796;
    v1126[0] = 64;
    v1127 = v1096;
    *(_QWORD *)&v1129 = 0;
    v1130 = 0;
    v1131 = a1;
    v1132 = 0;
    v1133 = v1117;
    v1144.i64[0] = (uint64_t)v1117;
    v1144.i8[8] = 0;
    v1145 = v1124[1];
    if (v1124[1])
      ++*((_DWORD *)v1124[1] + 2);
    LOBYTE(v1146) = 0;
    WebCore::RenderLayer::clipToRect(a1, (uint64_t)v1117, &v1144, (uint64_t)&v1145, (uint64_t)v1121, v1096, v793, 1);
    v797 = *(_QWORD *)(a1 + 32);
    v799 = *(_DWORD *)(v793 - 16);
    v798 = *(_DWORD *)(v793 - 12);
    if (v797 && (*(_BYTE *)(v797 + 45) & 4) != 0)
      goto LABEL_1459;
    v801 = 0;
    if ((*(_BYTE *)(v797 + 52) & 7) != 4)
    {
      LODWORD(v800) = 0;
      goto LABEL_1460;
    }
    LODWORD(v800) = 0;
    if ((*(_BYTE *)(v797 + 53) & 1) == 0)
    {
LABEL_1459:
      v800 = *(_QWORD *)(v797 + 152);
      v801 = v800 & 0xFFFFFFFF00000000;
    }
LABEL_1460:
    v802 = HIDWORD(v801);
    v70 = __OFSUB__(v799, (_DWORD)v800);
    v803 = v799 - v800;
    v804 = (v799 >> 31) + 0x7FFFFFFF;
    if (!v70)
      v804 = v803;
    v70 = __OFSUB__(v798, (_DWORD)v802);
    v805 = v798 - v802;
    v806 = (v798 >> 31) + 0x7FFFFFFF;
    if (!v70)
      v806 = v805;
    v70 = __OFADD__(v804, (_DWORD)v1123);
    v807 = v804 + v1123;
    LODWORD(v808) = (v804 >> 31) + 0x7FFFFFFF;
    if (v70)
      v808 = v808;
    else
      v808 = v807;
    v70 = __OFADD__(v806, DWORD1(v1123));
    v809 = v806 + DWORD1(v1123);
    LODWORD(v810) = (v806 >> 31) + 0x7FFFFFFF;
    if (v70)
      v810 = v810;
    else
      v810 = v809;
    *(_QWORD *)&v1143 = v808 | (v810 << 32);
    (*(void (**)(uint64_t, WTF **, __int128 *))(*(_QWORD *)v797 + 680))(v797, v1125, &v1143);
    v811 = v1145;
    if (v1145)
    {
      if ((_BYTE)v1146)
      {
        v1054 = *((_DWORD *)v1145 + 11);
        if (v1054)
          *((_DWORD *)v1145 + 11) = v1054 - 1;
      }
      v925 = *((_DWORD *)v811 + 2);
      if (!v925)
      {
        __break(0xC471u);
        JUMPOUT(0x1942754E0);
      }
      *((_DWORD *)v811 + 2) = v925 - 1;
    }
    if (v1144.i8[8])
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1144.i64[0] + 104))(v1144.i64[0], 1);
    goto LABEL_1473;
  }
LABEL_999:
  if (!v1106)
    goto LABEL_1002;
  v558 = *(uint64_t ***)(a1 + 104);
  if (v558)
  {
    v597 = *((unsigned int *)v558 + 3);
    if ((_DWORD)v597)
    {
      if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
      {
        v598 = *v558;
        v599 = 8 * v597;
        if ((v361 & 0x10000) == 0)
        {
          do
          {
            v600 = *v598++;
            WebCore::RenderLayer::paintLayer(v600, v1117, a3, v361);
            v599 -= 8;
          }
          while (v599);
          goto LABEL_1001;
        }
        do
        {
          v1036 = *v598;
          if (WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(*v598 + 32)))
            goto LABEL_1882;
          v1033 = *(_QWORD *)(v1036 + 32);
          v1034 = *(_BYTE *)(v1033 + 52) & 7;
          if (v1034 == 1)
          {
            v1035 = 16;
          }
          else
          {
            if (v1034 != 3)
            {
LABEL_1878:
              WebCore::RenderLayer::paintLayer(v1036, v1117, a3, v361);
              goto LABEL_1882;
            }
            v1035 = 8;
          }
          if ((*(_BYTE *)(v1033 + 53) & v1035) == 0)
            goto LABEL_1878;
LABEL_1882:
          ++v598;
          v599 -= 8;
        }
        while (v599);
      }
    }
  }
LABEL_1001:
  v559 = *(_QWORD *)(a1 + 88);
  if (v559)
  {
    v601 = *(unsigned int *)(v559 + 12);
    if ((_DWORD)v601)
    {
      if ((*(_BYTE *)(a1 + 25) & 0x10) != 0)
      {
        v602 = *(uint64_t **)v559;
        for (kk = 8 * v601; kk; kk -= 8)
        {
          v604 = *v602;
          if ((v361 & 0x10000) != 0)
          {
            if ((WebCore::RenderObject::effectiveCapturedInViewTransition(*(WebCore::RenderObject **)(v604 + 32)) & 1) != 0)
              goto LABEL_1107;
            v990 = *(_QWORD *)(v604 + 32);
            v991 = *(_BYTE *)(v990 + 52) & 7;
            if (v991 == 1)
            {
              v992 = 16;
              goto LABEL_1831;
            }
            if (v991 == 3)
            {
              v992 = 8;
LABEL_1831:
              if ((*(_BYTE *)(v990 + 53) & v992) != 0)
                goto LABEL_1107;
            }
          }
          WebCore::RenderLayer::paintLayer(v604, v1117, v1121, v361);
LABEL_1107:
          ++v602;
        }
      }
    }
  }
LABEL_1002:
  v560 = *(_QWORD *)(a1 + 264);
  if (v560 && (v1120 & 0x10) != 0 && (*(_QWORD *)(v560 + 128) || *(_QWORD *)(v560 + 136)))
    WebCore::RenderLayer::paintOverflowControlsForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), v1117, (uint64_t)v1121);
  if (!v1085)
    WebCore::RenderLayer::applyFilters(a1, a2, a3, v1096, (uint64_t)&v1134);
  if (((v386 | v1099) & 1) == 0 && (v1099 & 0x80) == 0)
  {
    v561 = *(_DWORD *)(a3 + 48);
    v562 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88);
    v563 = *(_QWORD *)(*(_QWORD *)(v562 + 32) + 48);
    if (*(_QWORD *)(v563 + 8))
    {
      while (!*(_QWORD *)(v563 + 16))
      {
        v563 = *(_QWORD *)(v563 + 8);
        if (!v563)
          goto LABEL_1013;
      }
    }
    else
    {
      if (*(_QWORD *)(v563 + 16))
        v564 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
      else
        v564 = 0;
      if (!v564)
      {
LABEL_1013:
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v562 + 40) + 216) + 8))
          v565 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v565 = 0;
        if (!v565)
        {
LABEL_1017:
          if ((v1083 & 0x4000) != 0 || (v1120 & 0x180) == 0x100)
            WebCore::RenderLayer::paintChildClippingMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1096, v1114);
          if ((v361 & 0x2000) != 0)
            WebCore::RenderLayer::paintChildClippingMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1096, v1114);
          goto LABEL_1021;
        }
      }
    }
    v1059 = *(WebCore::RenderLayerBacking **)(a1 + 256);
    if (!v1059 || WebCore::RenderLayerBacking::paintsIntoWindow(v1059) || v561 & 0x200 | v361 & 0x80)
      WebCore::RenderLayer::paintMaskForFragments(a1, (uint64_t)v1147, HIDWORD(v1148), a2, a3, v1096, v1114);
    goto LABEL_1017;
  }
LABEL_1021:
  if ((v1120 & 1) != 0 && (*(_QWORD *)(a1 + 24) & 0xC000) == 0x4000)
  {
    if (*(_BYTE *)(a1 + 20))
    {
      v592 = *(float *)(a1 + 16);
      if (*(float *)(a2 + 336) != v592)
      {
        *(float *)(a2 + 336) = v592;
        *(_DWORD *)(a2 + 184) |= 0x100u;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8, v377);
      if (*(_BYTE *)(a1 + 20))
        *(_BYTE *)(a1 + 20) = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
    }
    *(_QWORD *)(a1 + 24) &= ~0x4000uLL;
  }
  if (v1088)
  {
    if (*(unsigned __int8 *)(a2 + 344) != v1081)
    {
      *(_BYTE *)(a2 + 344) = v1081;
      *(_DWORD *)(a2 + 184) |= 0x2000u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
  }
  result = (WTF *)v1147;
  if (v1149 != v1147 && v1147)
  {
    v1147 = 0;
    LODWORD(v1148) = 0;
    result = (WTF *)WTF::fastFree(result, (void *)v383);
  }
  if (v1094)
  {
    if (v1070)
    {
      v923 = *((_DWORD *)v1094 + 11);
      if (v923)
        *((_DWORD *)v1094 + 11) = v923 - 1;
    }
    v686 = *((_DWORD *)v1094 + 2);
    if (!v686)
    {
      __break(0xC471u);
      JUMPOUT(0x194273DA0);
    }
    *((_DWORD *)v1094 + 2) = v686 - 1;
  }
  if (v1090)
    return (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return result;
}

uint64_t WebCore::LocalFrame::virtualView(WebCore::LocalFrame *this)
{
  return *((_QWORD *)this + 36);
}

uint64_t WebCore::NullGraphicsContext::paintingDisabled(WebCore::NullGraphicsContext *this)
{
  return 1;
}

void WebCore::RenderView::paint(WebCore::RenderView *this, int32x4_t *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  WebCore::RenderView *v8;
  BOOL v9;
  uint64_t v10;
  WebCore::RenderView *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::PaintInfo *v22;
  const WebCore::LayoutPoint *v23;
  uint64_t v24;
  _DWORD v25[4];

  v3 = *((_QWORD *)this + 31);
  if (*(_BYTE *)(v3 + 1316))
    goto LABEL_11;
  if (!*(_BYTE *)(v3 + 1317) && !*(_DWORD *)(v3 + 1320) && !*(_DWORD *)(v3 + 1324))
  {
    v4 = *(_QWORD *)(v3 + 328);
    if (*(_QWORD *)(*(_QWORD *)(v4 + 128) + 8) == v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = (_BYTE *)(v3 + 1316);
        v7 = *(_QWORD *)(v5 + 8);
        if (v7)
          v6 = (_BYTE *)(v7 + 468);
        if (*v6)
        {
LABEL_11:
          v8 = (WebCore::RenderView *)a2[1].i64[1];
          if (v8)
            v9 = v8 == this;
          else
            v9 = 1;
          if (v9)
          {
            v22 = (WebCore::PaintInfo *)a2;
            v23 = a3;
            v10 = a2[5].i64[0];
            v11 = this;
            v25[0] = WebCore::LayoutRect::operator WebCore::FloatRect(a2->i32);
            v25[1] = v12;
            v25[2] = v13;
            v25[3] = v14;
            v15 = *(_QWORD *)(*((_QWORD *)v11 + 31) + 1024);
            v24 = v15;
            if ((v15 & 0x8000000000000) != 0)
            {
              v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 + 1, v17));
            }
            (*(void (**)(uint64_t, _DWORD *, uint64_t *))(*(_QWORD *)v10 + 224))(v10, v25, &v24);
            if ((v24 & 0x8000000000000) != 0)
            {
              v19 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
              do
              {
                v20 = __ldaxr(v19);
                v21 = v20 - 1;
              }
              while (__stlxr(v21, v19));
              if (!v21)
              {
                atomic_store(1u, v19);
                WTF::fastFree((WTF *)v19, v16);
              }
            }
            a2 = (int32x4_t *)v22;
            a3 = v23;
            this = v11;
          }
        }
      }
    }
  }
  WebCore::RenderBlock::paintObject(this, a2, a3);
}

BOOL WebCore::NullGraphicsContext::detectingContentfulPaint(WebCore::NullGraphicsContext *this)
{
  return *((_BYTE *)this + 717) == 3;
}

BOOL WebCore::FloatRoundedRect::intersectionIsRectangular(WebCore::FloatRoundedRect *this, const WebCore::FloatRect *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9;
  float v11;
  float v12;
  float v13;
  float v15;
  float v17;
  float v18;
  float v19;
  float v21;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v29;

  v2 = *((float *)a2 + 2);
  if (v2 <= 0.0)
    return 1;
  v3 = *((float *)a2 + 3);
  if (v3 <= 0.0)
    return 1;
  v4 = *(float *)this;
  v5 = *((float *)this + 1);
  v6 = *((float *)this + 4);
  if (v6 > 0.0)
  {
    v7 = *((float *)this + 5);
    if (v7 > 0.0 && *(float *)a2 < (float)(v4 + v6) && v4 < (float)(v2 + *(float *)a2))
    {
      v9 = *((float *)a2 + 1);
      if (v9 < (float)(v5 + v7) && v5 < (float)(v3 + v9))
        return 0;
    }
  }
  v11 = v4 + *((float *)this + 2);
  v12 = *((float *)this + 6);
  if (v12 > 0.0)
  {
    v13 = *((float *)this + 7);
    if (v13 > 0.0
      && *(float *)a2 < (float)(v12 + (float)(v11 - v12))
      && (float)(v11 - v12) < (float)(v2 + *(float *)a2))
    {
      v15 = *((float *)a2 + 1);
      if (v15 < (float)(v5 + v13) && v5 < (float)(v3 + v15))
        return 0;
    }
  }
  v17 = v5 + *((float *)this + 3);
  v18 = *((float *)this + 8);
  if (v18 > 0.0)
  {
    v19 = *((float *)this + 9);
    if (v19 > 0.0 && *(float *)a2 < (float)(v4 + v18) && v4 < (float)(v2 + *(float *)a2))
    {
      v21 = *((float *)a2 + 1);
      if (v21 < (float)(v19 + (float)(v17 - v19)) && (float)(v17 - v19) < (float)(v3 + v21))
        return 0;
    }
  }
  v23 = *((float *)this + 10);
  v24 = 1;
  if (v23 > 0.0)
  {
    v25 = *((float *)this + 11);
    if (v25 > 0.0)
    {
      v26 = v11 - v23;
      v27 = v2 + *(float *)a2;
      if (*(float *)a2 < (float)(v23 + v26) && v26 < v27)
      {
        v29 = *((float *)a2 + 1);
        if (v29 < (float)(v25 + (float)(v17 - v25)))
          return (float)(v17 - v25) >= (float)(v3 + v29);
      }
    }
  }
  return v24;
}

uint64_t WebCore::ScrollableArea::contentAreaDidShow(WebCore::ScrollableArea *this)
{
  uint64_t v1;

  v1 = WebCore::ScrollableArea::scrollbarsController(this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
}

uint64_t WebCore::SQLiteDatabaseTracker::setClient(uint64_t result)
{
  uint64_t v1;
  int v3;

  v1 = result;
  if (__ldaxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
  {
    __clrex();
LABEL_3:
    result = MEMORY[0x19AEA534C](WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    goto LABEL_3;
LABEL_4:
  WebCore::SQLiteDatabaseTracker::s_staticSQLiteDatabaseTrackerClient = v1;
  v3 = __ldxr(WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  }
  if (__stlxr(0, WebCore::SQLiteDatabaseTracker::transactionInProgressLock))
    return WTF::Lock::unlockSlow((WTF::Lock *)WebCore::SQLiteDatabaseTracker::transactionInProgressLock);
  return result;
}

uint64_t ___ZN3PAL12UIKitLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  qword_1ECE7EC40 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::XMLHttpRequest::clearResponseBuffers(WebCore::XMLHttpRequest *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t result;

  WTF::StringBuilder::clear((WTF::StringImpl **)this + 67, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  *((_WORD *)this + 40) &= ~8u;
  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)this + 65);
  result = WebCore::SharedBufferBuilder::reset((WebCore::XMLHttpRequest *)((char *)this + 528), v5);
  *((_WORD *)this + 40) &= ~0x80u;
  return result;
}

uint64_t WebCore::ResourceRequestBase::httpMethod(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return (uint64_t)this + 88;
}

void WebCore::SubresourceLoader::didFinishLoading(WebCore::SubresourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  NSObject *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::LegacyPreviewLoader *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  const WebCore::NetworkLoadMetrics *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  NSObject *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  _WORD *v47;
  int v48;
  _BOOL4 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WTF *v73;
  unsigned int *v75;
  char v76;
  WTF::StringImpl *v77;
  _BYTE buf[12];
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  _QWORD *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7C860;
  if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 4);
    if (v6)
    {
      v7 = v6[3];
      if (v7)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7)
        {
          if (*(_BYTE *)(v7 + 40))
            v7 = *(_QWORD *)(v7 + 32);
          else
            v7 = 0;
        }
      }
      v8 = v6[4];
      v6 = (_QWORD *)v6[35];
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v9 = *((_QWORD *)this + 93);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = this;
    v79 = 2048;
    v80 = v7;
    v81 = 2048;
    v82 = v8;
    v83 = 2048;
    v84 = v6;
    v85 = 2048;
    v86 = v9;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didFinishLoading:", buf, 0x34u);
  }
  v10 = (WebCore::LegacyPreviewLoader *)*((_QWORD *)this + 40);
  if ((!v10 || !WebCore::LegacyPreviewLoader::didFinishLoading(v10)) && *((_DWORD *)this + 334) == 1)
  {
    ++*((_DWORD *)this + 4);
    v11 = *((_QWORD *)this + 166);
    if (!v11)
      goto LABEL_15;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      goto LABEL_15;
    v13 = *(unsigned int **)(v12 + 8);
    if (!v13)
    {
      v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v13 = 1;
      *((_QWORD *)v13 + 1) = v12;
      v62 = *(unsigned int **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v13;
      if (v62)
      {
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          atomic_store(1u, v62);
          WTF::fastFree((WTF *)v62, v5);
        }
        v13 = *(unsigned int **)(v12 + 8);
        if (!v13)
        {
LABEL_15:
          v75 = 0;
          goto LABEL_16;
        }
      }
    }
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    v75 = v13;
    v15 = *((_QWORD *)v13 + 1);
    if (!v15)
      goto LABEL_16;
    v77 = (WTF::StringImpl *)&v75;
    ++*(_DWORD *)(v15 + 548);
    v16 = *(_QWORD *)(v15 + 488);
    if (v16)
    {
      if (*(_QWORD *)(v16 + 8))
      {
        WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v77, (uint64_t)buf);
        v13 = v75;
        if (!v75)
          goto LABEL_16;
      }
    }
    if (!*((_QWORD *)v13 + 1))
      goto LABEL_16;
    v17 = *((_QWORD *)this + 4);
    if (v17)
    {
      v18 = (unsigned int *)(v17 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = *(_QWORD *)(v17 + 24);
      if (v20 && *(_QWORD *)(v20 + 8))
      {
        v21 = *(_BYTE *)(*((_QWORD *)v75 + 1) + 556) & 0x1F;
        *(_QWORD *)buf = 0;
        switch(v21)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
            v13 = (unsigned int *)WTF::StringImpl::createWithoutCopyingNonEmpty();
            *(_QWORD *)buf = v77;
            break;
          default:
            break;
        }
        v22 = *(_QWORD *)(v17 + 24);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 8);
          if (v23)
            ++*(_DWORD *)v23;
        }
        else
        {
          v23 = 0;
        }
        if ((*(_QWORD *)(*(_QWORD *)(v23 + 112) + 672) & 0x800000000000) == 0
          || (v24 = *(uint64_t **)(v23 + 256)) == 0)
        {
          v24 = WebCore::emptyDiagnosticLoggingClient((WebCore *)v13);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(uint64_t *, WTF::StringImpl **, _BYTE *, uint64_t))*v24)(v24, &v77, buf, 1);
        v26 = v77;
        v77 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v25);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::Page::~Page(v23);
          WTF::fastFree(v59, v60);
        }
        else
        {
          --*(_DWORD *)v23;
        }
        v13 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v13)
        {
          if (*v13 == 2)
            v13 = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)v13, v25);
          else
            *v13 -= 2;
        }
      }
      do
      {
        v27 = __ldaxr(v18);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v18));
      if (!v28)
      {
        atomic_store(1u, v18);
        v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v65 = off_1E31FE290;
        v65[1] = v18;
        *(_QWORD *)buf = v65;
        WTF::ensureOnMainThread();
        v13 = *(unsigned int **)buf;
        *(_QWORD *)buf = 0;
        if (v13)
          v13 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v13);
    *((_QWORD *)this + 39) = v29;
    v30 = a2;
    if ((*((_BYTE *)a2 + 98) & 1) == 0)
    {
      v31 = *(uint64_t **)(*((_QWORD *)v75 + 1) + 400);
      if (!v31)
      {
        v32 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
        if (v32 != -1)
        {
          *(_QWORD *)buf = &v76;
          v77 = (WTF::StringImpl *)buf;
          std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
        }
        v31 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
      }
      v33 = v31[14];
      if (v33)
      {
        v30 = (const WebCore::NetworkLoadMetrics *)(v33 + 8);
      }
      else
      {
        v30 = (const WebCore::NetworkLoadMetrics *)&WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics;
        {
          dword_1EE2F9230 = 0;
          xmmword_1EE2F9210 = 0u;
          unk_1EE2F9220 = 0u;
          xmmword_1EE2F91F0 = 0u;
          *(_OWORD *)&qword_1EE2F9200 = 0u;
          WebCore::NetworkLoadMetrics::emptyMetrics(void)::metrics = 0u;
          *(_OWORD *)&qword_1EE2F91E0 = 0u;
          qword_1EE2F9238 = -1;
          unk_1EE2F9240 = -1;
          qword_1EE2F9248 = 0;
        }
      }
    }
    WebCore::SubresourceLoader::reportResourceTiming(this, v30);
    if ((*(_BYTE *)(*((_QWORD *)v75 + 1) + 556) & 0x1F) != 0)
      kdebug_trace();
    *((_DWORD *)this + 334) = 2;
    if (*((_BYTE *)this + 1644) && (*((_BYTE *)this + 1522) & 1) == 0)
      (*(void (**)(_QWORD, char *))(**((_QWORD **)v75 + 1) + 128))(*((_QWORD *)v75 + 1), (char *)this + 1384);
    if (v75)
      v35 = *((_QWORD *)v75 + 1);
    else
      v35 = 0;
    v36 = (unsigned int *)WebCore::ResourceLoader::resourceData(this, v34);
    if (v36)
    {
      v37 = v36;
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 + 1, v36));
      (*(void (**)(uint64_t, unsigned int *, const WebCore::NetworkLoadMetrics *))(*(_QWORD *)v35 + 64))(v35, v36, a2);
      do
      {
        v40 = __ldaxr(v37);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v37));
      if (!v41)
      {
        atomic_store(1u, v37);
        v66 = v37[5];
        if ((_DWORD)v66)
        {
          v67 = *((_QWORD *)v37 + 1);
          v68 = v67 + 16 * v66;
          do
          {
            v69 = *(unsigned int **)(v67 + 8);
            *(_QWORD *)(v67 + 8) = 0;
            if (v69)
            {
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                atomic_store(1u, v69);
                v72 = v69[6];
                if ((_DWORD)v72 != -1)
                  ((void (*)(_BYTE *, unsigned int *))off_1E33F7AE0[v72])(buf, v69 + 2);
                v69[6] = -1;
                WTF::fastFree((WTF *)v69, v39);
              }
            }
            v67 += 16;
          }
          while (v67 != v68);
        }
        v73 = (WTF *)*((_QWORD *)v37 + 1);
        if (v37 + 6 != (unsigned int *)v73 && v73 != 0)
        {
          *((_QWORD *)v37 + 1) = 0;
          v37[4] = 0;
          WTF::fastFree(v73, v39);
        }
        WTF::fastFree((WTF *)v37, v39);
      }
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, const WebCore::NetworkLoadMetrics *))(*(_QWORD *)v35 + 64))(v35, 0, a2);
    }
    if (*((int *)this + 189) < 2)
    {
      v46 = v75;
      if (v75)
        v46 = (unsigned int *)*((_QWORD *)v75 + 1);
      v47 = (_WORD *)((char *)v46 + 557);
      if ((*v47 >> 5) - 3 >= 2)
        *v47 = *v47 & 0xFF1F | 0x40;
      WebCore::ResourceLoader::didFinishLoadingOnePart(this, a2);
      WebCore::SubresourceLoader::notifyDone((uint64_t)this, 0);
      v48 = *((unsigned __int8 *)this + 752);
      v42 = qword_1ECE7C860;
      v49 = os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT);
      if (!v48)
      {
        if (v49)
        {
          v53 = (_QWORD *)*((_QWORD *)this + 4);
          if (v53)
          {
            v54 = v53[3];
            if (v54)
            {
              v54 = *(_QWORD *)(v54 + 8);
              if (v54)
              {
                if (*(_BYTE *)(v54 + 40))
                  v54 = *(_QWORD *)(v54 + 32);
                else
                  v54 = 0;
              }
            }
            v55 = v53[4];
            v53 = (_QWORD *)v53[35];
          }
          else
          {
            v55 = 0;
            v54 = 0;
          }
          v61 = *((_QWORD *)this + 93);
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = this;
          v79 = 2048;
          v80 = v54;
          v81 = 2048;
          v82 = v55;
          v83 = 2048;
          v84 = v53;
          v85 = 2048;
          v86 = v61;
          _os_log_impl(&dword_1940B8000, v42, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didFinishLoading: Did not reach terminal state", buf, 0x34u);
        }
        WebCore::SubresourceLoader::releaseResources(this, v5);
        goto LABEL_16;
      }
      if (!v49)
      {
LABEL_16:
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v75, v5);
        if (*((_DWORD *)this + 4) == 1)
          (*(void (**)(WebCore::SubresourceLoader *))(*(_QWORD *)this + 8))(this);
        else
          --*((_DWORD *)this + 4);
        return;
      }
      v50 = (_QWORD *)*((_QWORD *)this + 4);
      if (v50)
      {
        v51 = v50[3];
        if (v51)
        {
          v51 = *(_QWORD *)(v51 + 8);
          if (v51)
          {
            if (*(_BYTE *)(v51 + 40))
              v51 = *(_QWORD *)(v51 + 32);
            else
              v51 = 0;
          }
        }
        v52 = v50[4];
        v50 = (_QWORD *)v50[35];
      }
      else
      {
        v52 = 0;
        v51 = 0;
      }
      v58 = *((_QWORD *)this + 93);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = this;
      v79 = 2048;
      v80 = v51;
      v81 = 2048;
      v82 = v52;
      v83 = 2048;
      v84 = v50;
      v85 = 2048;
      v86 = v58;
      v57 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didFinishLoading: reach"
            "ed terminal state";
    }
    else
    {
      v42 = qword_1ECE7C860;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
        goto LABEL_16;
      v43 = (_QWORD *)*((_QWORD *)this + 4);
      if (v43)
      {
        v44 = v43[3];
        if (v44)
        {
          v44 = *(_QWORD *)(v44 + 8);
          if (v44)
          {
            if (*(_BYTE *)(v44 + 40))
              v44 = *(_QWORD *)(v44 + 32);
            else
              v44 = 0;
          }
        }
        v45 = v43[4];
        v43 = (_QWORD *)v43[35];
      }
      else
      {
        v45 = 0;
        v44 = 0;
      }
      v56 = *((_QWORD *)this + 93);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = this;
      v79 = 2048;
      v80 = v44;
      v81 = 2048;
      v82 = v45;
      v83 = 2048;
      v84 = v43;
      v85 = 2048;
      v86 = v56;
      v57 = "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::didFinishLoading: was canceled";
    }
    _os_log_impl(&dword_1940B8000, v42, OS_LOG_TYPE_DEFAULT, v57, buf, 0x34u);
    goto LABEL_16;
  }
}

uint64_t *WebCore::emptyDiagnosticLoggingClient(WebCore *this)
{
  if ((_MergedGlobals_205 & 1) == 0)
  {
    qword_1ECE837E0 = (uint64_t)off_1E33F5960;
    unk_1ECE837E8 = 0;
    _MergedGlobals_205 = 1;
  }
  return &qword_1ECE837E0;
}

void WebCore::SubresourceLoader::reportResourceTiming(WebCore::SubresourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  WebCore::CachedResourceLoader *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  WTF *v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  WebCore::SubresourceLoader *v53;
  unsigned int *v54;
  _QWORD v55[27];
  unsigned int *v56;
  uint64_t v57[3];
  unsigned int **v58;

  v2 = *((_QWORD *)this + 166);
  if (!v2)
    goto LABEL_3;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_3;
  v5 = *(unsigned int **)(v3 + 8);
  v53 = this;
  if (!v5)
  {
    v5 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v5 = 1;
    *((_QWORD *)v5 + 1) = v3;
    v37 = *(unsigned int **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = v5;
    if (v37)
    {
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, a2);
      }
      v5 = *(unsigned int **)(v3 + 8);
      if (!v5)
      {
LABEL_3:
        v56 = 0;
        goto LABEL_4;
      }
    }
  }
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v56 = v5;
  v7 = *((_QWORD *)v5 + 1);
  if (v7)
  {
    v57[0] = (uint64_t)&v56;
    ++*(_DWORD *)(v7 + 548);
    v8 = *(_QWORD *)(v7 + 488);
    if (!v8
      || !*(_QWORD *)(v8 + 8)
      || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v7 + 464), v57, (uint64_t)v55), (v5 = v56) != 0))
    {
      v9 = *((_QWORD *)v5 + 1);
      if (v9)
      {
        if ((*(_BYTE *)(v9 + 344) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v9 + 160));
          *(_BYTE *)(v9 + 344) |= 1u;
        }
        if ((*(_BYTE *)(v9 + 168) & 2) != 0)
        {
          v10 = *(_QWORD *)(v9 + 400);
          if (v10)
          {
            v11 = (uint64_t *)(v10 + 320);
          }
          else
          {
            std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)v55);
            v11 = &WebCore::CachedResource::resourceError(void)const::emptyError;
          }
          if (!*((_BYTE *)v11 + 60) && (*(_BYTE *)(v9 + 132) & 0x40) == 0)
          {
            v12 = *((_QWORD *)v53 + 5);
            if (v12)
              ++*(_DWORD *)(v12 + 24);
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 72) + 72);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                v15 = 0;
                *(_DWORD *)(v14 + 24) += 2;
                goto LABEL_23;
              }
            }
            else
            {
              v14 = 0;
            }
            v15 = 1;
LABEL_23:
            if (*(_DWORD *)(v12 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
            else
              --*(_DWORD *)(v12 + 24);
            if ((v15 & 1) == 0)
            {
              v16 = *((_QWORD *)v53 + 171);
              if (!v16)
              {
                WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v14 + 192), a2);
                v16 = v17;
              }
              do
                v18 = __ldaxr((unsigned int *)v16);
              while (__stlxr(v18 + 1, (unsigned int *)v16));
              v19 = *((_QWORD *)v56 + 1);
              v20 = v19;
              if ((*(_BYTE *)(v19 + 344) & 1) == 0)
              {
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v19 + 160));
                *(_BYTE *)(v19 + 344) |= 1u;
                v20 = *((_QWORD *)v56 + 1);
              }
              v21 = *(unsigned int ***)(v20 + 520);
              if (v21)
                *(_DWORD *)v21 += 2;
              v58 = v21;
              v22 = *(uint64_t **)(v19 + 400);
              if (!v22)
              {
                v34 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
                if (v34 != -1)
                {
                  v55[0] = &v54;
                  v57[0] = (uint64_t)v55;
                  std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
                }
                v22 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
              }
              WebCore::ResourceTiming::ResourceTiming((uint64_t)v55, v19 + 160, (_DWORD **)&v58, (_OWORD *)v53 + 19, (uint64_t)a2, (uint64_t)v22, (WebCore::SecurityOrigin *)v16);
              if (v21)
              {
                if (*(_DWORD *)v21 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v21, v23);
                else
                  *(_DWORD *)v21 -= 2;
              }
              if ((*((_BYTE *)v53 + 1091) & 0x10) != 0)
              {
                v47 = *((_QWORD *)v56 + 1);
                v48 = *(_BYTE *)(v47 + 556) & 0x1F;
                v49 = v48 > 0xB;
                v50 = (1 << v48) & 0xFC1;
                if (v49 || v50 == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194276D1CLL);
                }
                WebCore::CachedRawResource::finishedTimingForWorkerLoad(v47, (uint64_t)v55);
              }
              else
              {
                v24 = *(WebCore::CachedResourceLoader **)(*((_QWORD *)v53 + 5) + 72);
                ++*(_DWORD *)v24;
                v25 = *(_QWORD *)(*((_QWORD *)v53 + 166) + 8);
                v26 = *(_QWORD *)(v25 + 8);
                if (!v26)
                {
                  v26 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v26 = 1;
                  *(_QWORD *)(v26 + 8) = v25;
                  v41 = *(unsigned int **)(v25 + 8);
                  *(_QWORD *)(v25 + 8) = v26;
                  if (v41)
                  {
                    do
                    {
                      v42 = __ldaxr(v41);
                      v43 = v42 - 1;
                    }
                    while (__stlxr(v43, v41));
                    if (!v43)
                    {
                      atomic_store(1u, v41);
                      WTF::fastFree((WTF *)v41, v40);
                    }
                    v26 = *(_QWORD *)(v25 + 8);
                  }
                }
                do
                  v27 = __ldaxr((unsigned int *)v26);
                while (__stlxr(v27 + 1, (unsigned int *)v26));
                v54 = (unsigned int *)v26;
                v28 = *(_QWORD *)(v26 + 8);
                v58 = &v54;
                ++*(_DWORD *)(v28 + 548);
                v29 = *(_QWORD *)(v28 + 488);
                if (v29 && *(_QWORD *)(v29 + 8))
                {
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v28 + 464), (uint64_t *)&v58, (uint64_t)v57);
                  v28 = *((_QWORD *)v54 + 1);
                }
                WebCore::ResourceTimingInformation::addResourceTiming((uint64_t)v24 + 216, v28, (WebCore::Document *)v14, (WebCore::ResourceTiming *)v55);
                WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v54, v30);
                if (*(_DWORD *)v24 == 1)
                {
                  WebCore::CachedResourceLoader::~CachedResourceLoader(v24, v31);
                  WTF::fastFree(v35, v36);
                }
                else
                {
                  --*(_DWORD *)v24;
                }
              }
              WebCore::ResourceTiming::~ResourceTiming((WebCore::ResourceTiming *)v55, (WTF::StringImpl *)v31);
              do
              {
                v32 = __ldaxr((unsigned int *)v16);
                v33 = v32 - 1;
              }
              while (__stlxr(v33, (unsigned int *)v16));
              if (!v33)
              {
                atomic_store(1u, (unsigned int *)v16);
                v44 = *(WTF::StringImpl **)(v16 + 48);
                *(_QWORD *)(v16 + 48) = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 2)
                    WTF::StringImpl::destroy(v44, a2);
                  else
                    *(_DWORD *)v44 -= 2;
                }
                v45 = *(WTF::StringImpl **)(v16 + 40);
                *(_QWORD *)(v16 + 40) = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, a2);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v46 = *(unsigned int *)(v16 + 32);
                if ((_DWORD)v46 != -1)
                  ((void (*)(_QWORD *, uint64_t))off_1E33F7B38[v46])(v55, v16 + 8);
                *(_DWORD *)(v16 + 32) = -1;
                WTF::fastFree((WTF *)v16, a2);
              }
              if (*(_DWORD *)(v14 + 24) == 2)
              {
                if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v14, a2);
              }
              else
              {
                *(_DWORD *)(v14 + 24) -= 2;
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v56, a2);
}

void WebCore::SubresourceLoader::releaseResources(WebCore::SubresourceLoader *this, void *a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::CachedResource *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  _BYTE v21[24];
  unsigned int **v22;

  if (*((_BYTE *)this + 1360))
  {
    WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader *)((char *)this + 1344), a2);
    *((_BYTE *)this + 1360) = 0;
  }
  v3 = *((_DWORD *)this + 334);
  if (v3)
    v4 = v3 == 3;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)this + 166);
    if (!v5)
      goto LABEL_9;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      goto LABEL_9;
    v13 = *(unsigned int **)(v6 + 8);
    if (v13)
      goto LABEL_37;
    v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v13 = 1;
    *((_QWORD *)v13 + 1) = v6;
    v17 = *(unsigned int **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v13;
    if (!v17)
      goto LABEL_37;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
    }
    v13 = *(unsigned int **)(v6 + 8);
    if (v13)
    {
LABEL_37:
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v20 = v13;
      v15 = *((_QWORD *)v13 + 1);
      if (v15
        && ((v22 = &v20, ++*(_DWORD *)(v15 + 548), (v16 = *(_QWORD *)(v15 + 488)) == 0)
         || !*(_QWORD *)(v16 + 8)
         || (WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v22, (uint64_t)v21), (v13 = v20) != 0)))
      {
        v7 = (WebCore::CachedResource *)*((_QWORD *)v13 + 1);
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
LABEL_9:
      v7 = 0;
      v20 = 0;
    }
    v8 = *((_QWORD *)v7 + 48);
    if (v8)
    {
      *((_QWORD *)v7 + 55) = *(_QWORD *)(v8 + 744);
      *((_QWORD *)v7 + 48) = 0;
      if (*(_DWORD *)(v8 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      else
        --*(_DWORD *)(v8 + 16);
    }
    else
    {
      *((_QWORD *)v7 + 48) = 0;
    }
    WebCore::CachedResource::deleteIfPossible(v7, a2);
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v20, v9);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  WebCore::ResourceLoader::releaseResources(this);
}

void WebCore::SubresourceLoader::notifyDone(uint64_t a1, void *a2)
{
  uint64_t v4;
  int v5;
  WTF::MonotonicTime *v6;
  void *v7;
  _DWORD *v8;
  WTF *v9;
  void *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _QWORD *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 752))
  {
    if (*(_BYTE *)(a1 + 1360))
    {
      WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader::RequestCountTracker *)(a1 + 1344), a2);
      *(_BYTE *)(a1 + 1360) = 0;
    }
    v4 = *(_QWORD *)(a1 + 40);
    if (v4)
    {
      v5 = *(_DWORD *)(a1 + 1336);
      ++*(_DWORD *)(v4 + 24);
      v6 = *(WTF::MonotonicTime **)(v4 + 72);
      ++*(_DWORD *)v6;
      WebCore::CachedResourceLoader::loadDone(v6, a2, v5 != 3);
      if (*(_DWORD *)v6 == 1)
      {
        WebCore::CachedResourceLoader::~CachedResourceLoader(v6, v7);
        WTF::fastFree(v9, v10);
      }
      else
      {
        --*(_DWORD *)v6;
      }
      if (*(_DWORD *)(v4 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      else
        --*(_DWORD *)(v4 + 24);
    }
    else
    {
      v11 = qword_1ECE7C860;
      if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD **)(a1 + 32);
        if (v12)
        {
          v14 = v12[3];
          if (v14)
          {
            v14 = *(_QWORD *)(v14 + 8);
            if (v14)
            {
              if (*(_BYTE *)(v14 + 40))
                v14 = *(_QWORD *)(v14 + 32);
              else
                v14 = 0;
            }
          }
          v13 = v12[4];
          v12 = (_QWORD *)v12[35];
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
        v19 = *(_QWORD *)(a1 + 744);
        v21 = 134219008;
        v22 = a1;
        v23 = 2048;
        v24 = v14;
        v25 = 2048;
        v26 = v13;
        v27 = 2048;
        v28 = v12;
        v29 = 2048;
        v30 = v19;
        _os_log_error_impl(&dword_1940B8000, v11, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::notifyDone: document loader is null. Could not call loadDone()", (uint8_t *)&v21, 0x34u);
      }
    }
    if (!*(_BYTE *)(a1 + 752))
    {
      v8 = *(_DWORD **)(a1 + 40);
      if (v8)
      {
        ++v8[6];
        WebCore::DocumentLoader::removeSubresourceLoader((uint64_t)v8, (char)a2, a1);
        if (v8[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
        else
          --v8[6];
      }
      else
      {
        v15 = qword_1ECE7C860;
        if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_ERROR))
        {
          v16 = *(_QWORD **)(a1 + 32);
          if (v16)
          {
            v18 = v16[3];
            if (v18)
            {
              v18 = *(_QWORD *)(v18 + 8);
              if (v18)
              {
                if (*(_BYTE *)(v18 + 40))
                  v18 = *(_QWORD *)(v18 + 32);
                else
                  v18 = 0;
              }
            }
            v17 = v16[4];
            v16 = (_QWORD *)v16[35];
          }
          else
          {
            v17 = 0;
            v18 = 0;
          }
          v20 = *(_QWORD *)(a1 + 744);
          v21 = 134219008;
          v22 = a1;
          v23 = 2048;
          v24 = v18;
          v25 = 2048;
          v26 = v17;
          v27 = 2048;
          v28 = v16;
          v29 = 2048;
          v30 = v20;
          _os_log_error_impl(&dword_1940B8000, v15, OS_LOG_TYPE_ERROR, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] SubresourceLoader::notifyDone: document loader is null. Could not call removeSubresourceLoader()", (uint8_t *)&v21, 0x34u);
        }
      }
    }
  }
}

void WebCore::CachedResourceLoader::loadDone(WTF::MonotonicTime *a1, void *a2, int a3)
{
  WTF::MonotonicTime *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  WebCore::FrameLoader *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  WTF::MonotonicTime *v23;
  WTF::MonotonicTime *v24;

  v4 = a1;
  v5 = *((_QWORD *)a1 + 10);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
  {
    v7 = 0;
    v8 = (_DWORD *)(v6 - 56);
    ++*(_DWORD *)(v6 - 32);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *((_QWORD *)a1 + 9);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_37;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
LABEL_37:
    v11 = 1;
    goto LABEL_7;
  }
  v11 = 0;
  *(_DWORD *)(v10 + 24) += 2;
LABEL_7:
  if (v5)
  {
    v12 = *(_QWORD *)(v5 + 8);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 - 40);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = (unsigned int *)(v14 + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          v17 = *(WebCore::FrameLoader **)(v14 + 280);
          ++*(_DWORD *)v17;
          if ((a2 & 1) != 0)
            WebCore::FrameLoader::scheduleCheckCompleted(v17);
          else
            WebCore::FrameLoader::checkCompleted(v17, a2);
          if (!*(_DWORD *)v17)
          {
            __break(0xC471u);
            JUMPOUT(0x1942773A0);
          }
          --*(_DWORD *)v17;
          do
          {
            v18 = __ldaxr(v15);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v15));
          if (!v19)
          {
            atomic_store(1u, v15);
            v23 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v23 = off_1E31FE290;
            *((_QWORD *)v23 + 1) = v15;
            v24 = v23;
            WTF::ensureOnMainThread();
            a1 = v24;
            if (v24)
              a1 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v24 + 8))(v24);
          }
        }
      }
    }
  }
  if (a3)
  {
    v20 = WebCore::s_platformStrategies;
    v21 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
    if (!v21)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
      *(_QWORD *)(v20 + 8) = v21;
    }
    a1 = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 56))(v21, 0);
  }
  if ((*((_QWORD *)v4 + 24) & 0xFFFFFFFFFFFFLL) == 0
    || *(double *)((*((_QWORD *)v4 + 24) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
  {
    *((_QWORD *)v4 + 23) = 0;
    WTF::MonotonicTime::now(a1);
    WebCore::TimerBase::setNextFireTime((uint64_t)v4 + 160, v22 + 0.0);
  }
  if ((v11 & 1) == 0)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, a2);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if ((v7 & 1) == 0)
  {
    if (v8[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
    else
      --v8[6];
  }
}

void WebCore::FrameLoader::checkCompleted(WebCore::FrameLoader *this, void *a2)
{
  BOOL v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  os_signpost_id_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  char v14;
  WebCore::HistoryItem *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;

  if (WebCore::ScriptDisallowedScope::s_count)
  {
    v3 = WebCore::auxiliaryProcessType(void)::auxiliaryProcessType >= 0x100u
      && WebCore::auxiliaryProcessType(void)::auxiliaryProcessType == 0;
    if (v3 && !webThreadDelegateMessageScopeCount)
      goto LABEL_56;
  }
  *((_BYTE *)this + 320) = 0;
  if (*((_BYTE *)this + 216))
    return;
  v4 = *(_QWORD **)(*((_QWORD *)this + 1) + 8);
  v5 = (unsigned int *)(v4 + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = v4[37];
  *(_DWORD *)(v7 + 24) += 2;
  if (*(_BYTE *)(v7 + 3392))
  {
    WebCore::FrameLoader::scheduleCheckCompleted(this);
    goto LABEL_13;
  }
  if (*(_BYTE *)(v7 + 3389))
    goto LABEL_13;
  v10 = *(_QWORD *)(v7 + 720);
  if (!v10)
    v10 = WebCore::Document::ensureCachedResourceLoader((WebCore::Document *)v7, a2);
  if (*(_DWORD *)(v10 + 88) || *(_DWORD *)(v7 + 3328))
    goto LABEL_13;
  v11 = *(_QWORD *)(v7 + 728);
  if (!v11)
  {
    v13 = 0;
    goto LABEL_49;
  }
  v12 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v13 = v12;
  if (!v12)
  {
LABEL_49:
    v14 = 1;
    goto LABEL_26;
  }
  ++v12[2];
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 176))(v12) & 1) != 0)
    goto LABEL_36;
  v14 = 0;
LABEL_26:
  if (!WebCore::FrameLoader::allChildrenAreComplete(this))
    goto LABEL_35;
  *((_BYTE *)this + 216) = 1;
  v15 = (WebCore::HistoryItem *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
    {
      WebCore::HistoryItem::~HistoryItem(v15);
      WTF::fastFree(v19, v20);
    }
    else
    {
      --*(_DWORD *)v15;
    }
  }
  WebCore::Document::setReadyState(v7, 2);
  if (!*((_BYTE *)this + 209))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 296);
    *(_DWORD *)(v18 + 24) += 2;
    if (!*(_BYTE *)(v18 + 3389)
      && !*(_DWORD *)(v18 + 3328)
      && WebCore::FrameLoader::allChildrenAreComplete(this))
    {
      *(_WORD *)((char *)this + 209) = 1;
      WebCore::Document::implicitClose((WebCore::Document *)v18);
    }
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  v16 = (_DWORD *)v4[19];
  ++*v16;
  WebCore::NavigationScheduler::startTimer((uint64_t)v16);
  if (!*v16)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1942776C4);
  }
  --*v16;
  WebCore::FrameLoader::completed(this);
  v17 = v4[3];
  if (v17 && *(_QWORD *)(v17 + 8))
    WebCore::FrameLoader::checkLoadComplete(this, 0);
LABEL_35:
  if ((v14 & 1) == 0)
  {
LABEL_36:
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
LABEL_13:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  do
  {
    v8 = __ldaxr(v5);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v5));
  if (!v9)
  {
    atomic_store(1u, v5);
    v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v21 = off_1E33F5E98;
    v21[1] = v5;
    v22 = v21;
    WTF::ensureOnMainThread();
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  }
}

void WebCore::ResourceLoader::didFinishLoadingOnePart(WebCore::ResourceLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v3;
  _DWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  WebCore::ResourceLoader *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((int *)this + 189) >= 2)
  {
    v5 = qword_1ECE7C608;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C608, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)this + 4);
      if (v6)
      {
        WebCore::Frame::pageID(*((WebCore::Frame **)this + 4));
        if (v8)
          v9 = v7;
        else
          v9 = 0;
        v10 = *(_QWORD *)(v6 + 32);
        v11 = *(_QWORD *)(v6 + 280);
      }
      else
      {
        v10 = 0;
        v9 = 0;
        v11 = 0;
      }
      v12 = *((_QWORD *)this + 93);
      v13 = 134219008;
      v14 = this;
      v15 = 2048;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      v19 = 2048;
      v20 = v11;
      v21 = 2048;
      v22 = v12;
      _os_log_impl(&dword_1940B8000, v5, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, frameLoader=%p, resourceID=%llu] ResourceLoader::didFinishLoadingOnePart: Load was cancelled after finishing.", (uint8_t *)&v13, 0x34u);
    }
  }
  else if (!*((_BYTE *)this + 753))
  {
    *((_BYTE *)this + 753) = 1;
    if ((*((_BYTE *)this + 1090) & 1) == 0)
    {
      v3 = *((_QWORD *)this + 4);
      if (v3 && (v4 = *(_DWORD **)(v3 + 280)) != 0)
      {
        ++*v4;
        WebCore::ResourceLoadNotifier::didFinishLoad((WebCore::ResourceLoadNotifier *)(v4 + 8), (void **)this, a2);
        if (!*v4)
        {
          __break(0xC471u);
          JUMPOUT(0x194277808);
        }
        --*v4;
      }
      else
      {
        WebCore::ResourceLoadNotifier::didFinishLoad((WebCore::ResourceLoadNotifier *)0x20, (void **)this, a2);
      }
    }
  }
}

void WebCore::ResourceLoader::releaseResources(WebCore::ResourceLoader *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[7];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  char v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  ++*((_DWORD *)this + 4);
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v18 = off_1E31FE290;
      *((_QWORD *)v18 + 1) = v3;
      v20 = v18;
      WTF::ensureOnMainThread();
      v19 = v20;
      v20 = 0;
      if (v19)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 24))(v6);
    else
      --v6[6];
  }
  *((_BYTE *)this + 752) = 1;
  v7 = WebCore::s_platformStrategies;
  v8 = *(_QWORD *)(WebCore::s_platformStrategies + 8);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WebCore::s_platformStrategies + 16))(WebCore::s_platformStrategies);
    *(_QWORD *)(v7 + 8) = v8;
  }
  (*(void (**)(uint64_t, WebCore::ResourceLoader *))(*(_QWORD *)v8 + 32))(v8, this);
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    ++*(_DWORD *)(v10 + 8);
    *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8) = 0;
    v11 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v11)
    {
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 48))(v11);
      else
        --v11[2];
    }
    if (*(_DWORD *)(v10 + 8) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
    else
      --*(_DWORD *)(v10 + 8);
  }
  *((_QWORD *)this + 93) = 0;
  WebCore::SharedBufferBuilder::reset((WebCore::ResourceLoader *)((char *)this + 736), v9);
  v36 = 0;
  WTF::URL::invalidate((WTF::URL *)&v36);
  v12 = v36;
  if (v36)
    *(_DWORD *)v36 += 2;
  v20 = v12;
  v21 = v37;
  v22 = v38;
  v23[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v23);
  v23[5] = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23[6] = v39;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0x10000;
  v14 = v28 & 0x80 | 4;
  v28 = v14;
  v29 = 0;
  v15 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
  {
    *v15 += 2;
    v14 = v28;
  }
  v30 = v15;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = v34 & 0xE0 | 5;
  v28 = v14 | 2;
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v35 = 0;
  WebCore::ResourceRequest::operator=((uint64_t)this + 768, (uint64_t)&v20);
  WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v20, v17);
  if (*((_DWORD *)this + 4) == 1)
    (*(void (**)(WebCore::ResourceLoader *))(*(_QWORD *)this + 8))(this);
  else
    --*((_DWORD *)this + 4);
}

uint64_t WebCore::SharedBufferBuilder::reset(WebCore::SharedBufferBuilder *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  result = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)result));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)result);
      v6 = *(unsigned int *)(result + 20);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(result + 8);
        v8 = v7 + 16 * v6;
        do
        {
          v9 = *(unsigned int **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              v15 = v7;
              v16 = v8;
              v19 = result;
              atomic_store(1u, v9);
              v17 = (WTF *)v9;
              v14 = v9[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_1[v14])(&v20, v9 + 2);
              *((_DWORD *)v17 + 6) = -1;
              WTF::fastFree(v17, a2);
              result = v19;
              v7 = v15;
              v8 = v16;
            }
          }
          v7 += 16;
        }
        while (v7 != v8);
      }
      v12 = *(WTF **)(result + 8);
      if ((WTF *)(result + 24) != v12 && v12 != 0)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_DWORD *)(result + 16) = 0;
        v18 = result;
        WTF::fastFree(v12, a2);
        result = v18;
      }
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

WTF *WebCore::Document::decrementActiveParserCount(WTF *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WTF *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;

  --*((_DWORD *)this + 837);
  v1 = *((_QWORD *)this + 66);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = *(WTF **)(v2 + 280);
      ++*(_DWORD *)v5;
      this = WebCore::FrameLoader::checkLoadComplete(v5, 0);
      if (!*(_DWORD *)v5)
      {
        __break(0xC471u);
        JUMPOUT(0x194277D74);
      }
      --*(_DWORD *)v5;
      do
      {
        v6 = __ldaxr(v3);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v3));
      if (!v7)
      {
        atomic_store(1u, v3);
        v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v8 = off_1E31FE290;
        v8[1] = v3;
        v9 = (uint64_t)v8;
        WTF::ensureOnMainThread();
        this = (WTF *)v9;
        if (v9)
          return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
    }
  }
  return this;
}

uint64_t WebCore::DocumentLoader::isLoadingInAPISense(WebCore::DocumentLoader *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::FrameLoader *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    goto LABEL_19;
  v3 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v3 + 280) + 80) != 2)
  {
    if (*((_BYTE *)this + 3548))
      return 1;
    v4 = *(_QWORD *)(v3 + 296);
    if (!*(_BYTE *)(v4 + 3387))
    {
      v5 = *((_QWORD *)this + 11);
      if (v5)
      {
        if (*(_DWORD *)(v5 - 12))
          return 1;
      }
      v7 = *((_QWORD *)this + 13);
      if (v7)
      {
        if (*(_DWORD *)(v7 - 12))
          return 1;
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 9) + 88))
      return 1;
    if (*(_DWORD *)(v4 + 3328))
      return 1;
    if (*(_BYTE *)(v4 + 3386))
      return 1;
    if (*(_DWORD *)(v4 + 3348))
      return 1;
    v8 = *(_QWORD *)(v4 + 728);
    if (v8)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 80))(v8) & 1) != 0)
        return 1;
      v12 = *(_QWORD *)(v4 + 728);
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        if (v13)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13) & 1) != 0)
            return 1;
        }
      }
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    v11 = *(WebCore::FrameLoader **)(v10 + 280);
  else
LABEL_19:
    v11 = 0;
  return WebCore::FrameLoader::subframeIsLoading(v11);
}

uint64_t WebCore::CachedResource::deleteIfPossible(WebCore::CachedResource *this, void *a2)
{
  uint64_t result;
  void *v4;
  WebCore::CachedResource *v5;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int **v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  const WebCore::HTTPHeaderMap *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  uint64_t v28;
  unsigned int *v29;
  WTF::OSAllocator *BytePtr;
  void *Length;
  uint64_t v32;
  char v33;
  _BYTE *v34;
  _BYTE v35[25];

  result = WebCore::CachedResource::canDelete(this, a2);
  if ((_DWORD)result)
  {
    if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) == 0)
    {
      if ((WebCore::CachedResource::canDelete(this, v4) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942780ACLL);
      }
      if ((*(_WORD *)((_BYTE *)this + 557) & 0x200) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942780CCLL);
      }
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        WebCore::InspectorInstrumentation::willDestroyCachedResourceImpl(this, v5);
      (*(void (**)(WebCore::CachedResource *))(*(_QWORD *)this + 8))(this);
      return 1;
    }
    v7 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v7)
    {
      v16 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
      if (v16 != -1)
      {
        *(_QWORD *)v35 = &v33;
        v34 = v35;
        std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
      }
      v7 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
    }
    if ((v7[29] & 1) == 0)
    {
      WebCore::ResourceResponse::platformLazyInit((uint64_t)v7, 1);
      result = (uint64_t)WebCore::parseCacheControlDirectives((unsigned int *)v7 + 20, v17, (int64x2_t *)v35);
      *(_OWORD *)(v7 + 25) = *(_OWORD *)v35;
      *(_OWORD *)((char *)v7 + 209) = *(_OWORD *)&v35[9];
      *((_WORD *)v7 + 116) |= 1u;
    }
    if ((v7[28] & 2) != 0
      || WebCore::CachedResource::isExpired(this)
      && (result = WebCore::CachedResource::canUseCacheValidator(this), (result & 1) == 0))
    {
      if ((WTF::isMainThread((WTF *)result) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942780F8);
      }
      {
        WebCore::MemoryCache::MemoryCache((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache);
      }
      WebCore::MemoryCache::remove((WebCore::MemoryCache *)&WebCore::MemoryCache::singleton(void)::memoryCache, this);
      return 1;
    }
    v9 = *((_QWORD *)this + 49);
    if (v9)
    {
      do
        v10 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v10 + 1, (unsigned int *)v9));
      v11 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        v13 = (unsigned int **)(*(_QWORD *)(v9 + 8) + 8);
        do
        {
          v14 = atomic_load(*v13);
          if (v14 == 1 && (*v13)[6] == 1)
          {
            v28 = v9;
            v29 = *v13;
            BytePtr = (WTF::OSAllocator *)CFDataGetBytePtr(*((CFDataRef *)*v13 + 1));
            Length = (void *)CFDataGetLength(*((CFDataRef *)v29 + 1));
            WTF::OSAllocator::hintMemoryNotNeededSoon(BytePtr, Length);
            v9 = v28;
          }
          v13 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      do
        v15 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v15 - 1, (unsigned int *)v9));
      if (v15 == 1)
      {
        atomic_store(1u, (unsigned int *)v9);
        v18 = v9;
        v19 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)(v18 + 8);
          v21 = v20 + 16 * v19;
          do
          {
            v22 = *(unsigned int **)(v20 + 8);
            *(_QWORD *)(v20 + 8) = 0;
            if (v22)
            {
              v23 = v22;
              do
              {
                v24 = __ldaxr(v22);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v22));
              if (!v25)
              {
                atomic_store(1u, v22);
                v32 = v22[6];
                if ((_DWORD)v32 != -1)
                  ((void (*)(_BYTE *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v32])(v35, v23 + 2);
                v23[6] = -1;
                WTF::fastFree((WTF *)v23, v8);
              }
            }
            v20 += 16;
          }
          while (v20 != v21);
        }
        v26 = *(WTF **)(v18 + 8);
        if ((WTF *)(v18 + 24) != v26 && v26 != 0)
        {
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 16) = 0;
          WTF::fastFree(v26, v8);
        }
        WTF::fastFree((WTF *)v18, v8);
      }
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::CachedResource::canDelete(WebCore::CachedResource *this, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];
  _BYTE v9[8];
  uint64_t v10;

  result = WTF::WeakHashMap<WebCore::CachedResourceClient,unsigned int,WTF::SingleThreadWeakPtrImpl>::isEmptyIgnoringNullReferences((uint64_t)this + 360, a2);
  if ((_DWORD)result)
  {
    v4 = *((_QWORD *)this + 56);
    if (v4 && *(_DWORD *)(v4 - 12))
    {
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t *)this + 56, (uint64_t)v9);
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::end((uint64_t *)this + 56, (uint64_t)v8);
      if (v10 != v8[1])
        return 0;
      WTF::WeakHashMap<WebCore::CachedResourceClient,std::unique_ptr<WebCore::CachedResource::Callback>,WTF::SingleThreadWeakPtrImpl>::clear((uint64_t)this + 448, v7);
    }
    if (*((_QWORD *)this + 48))
      return 0;
    if (*((_DWORD *)this + 138))
      return 0;
    if (*((_DWORD *)this + 137))
      return 0;
    v5 = *((_QWORD *)this + 61);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 8))
        return 0;
    }
    v6 = *((_QWORD *)this + 62);
    return !v6 || *(_QWORD *)(v6 + 8) == 0;
  }
  return result;
}

void WebCore::SubresourceLoader::~SubresourceLoader(WebCore::SubresourceLoader *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SubresourceLoader::~SubresourceLoader(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  const void *v13;
  WebCore::FormData *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  char v21;

  v3 = (WebCore::SubresourceLoader *)((char *)this + 1384);
  v4 = (const void *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v6 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      atomic_store(1u, (unsigned int *)v7);
      v18 = *(WTF::StringImpl **)(v7 + 48);
      *(_QWORD *)(v7 + 48) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v5);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = *(WTF::StringImpl **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v5);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *(unsigned int *)(v7 + 32);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, uint64_t))off_1E33F7B38[v20])(&v21, v7 + 8);
      *(_DWORD *)(v7 + 32) = -1;
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  if (*((_BYTE *)this + 1360))
    WebCore::SubresourceLoader::RequestCountTracker::~RequestCountTracker((WebCore::SubresourceLoader *)((char *)this + 1344), v5);
  v10 = (unsigned int *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v5);
    }
  }
  v13 = (const void *)*((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v13)
    CFRelease(v13);
  v14 = (WebCore::FormData *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v14)
    WTF::RefCounted<WebCore::FormData>::deref(v14, v5);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v5);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v5);
    else
      *(_DWORD *)v16 -= 2;
  }
  WebCore::ResourceRequestBase::RequestData::~RequestData((WebCore::SubresourceLoader *)((char *)this + 1128), v5);
  WebCore::ResourceLoader::~ResourceLoader(this, v17);
}

void WebCore::ResourceTiming::~ResourceTiming(WebCore::ResourceTiming *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v3 = *((unsigned int *)this + 51);
  if ((_DWORD)v3)
  {
    v9 = 32 * v3;
    v10 = (WTF::StringImpl **)(*((_QWORD *)this + 24) + 16);
    do
    {
      v11 = *v10;
      *v10 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = *(v10 - 2);
      *(v10 - 2) = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v10 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  v4 = (WTF *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5, a2);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

void WebCore::ResourceTimingInformation::addResourceTiming(uint64_t a1, uint64_t a2, WebCore::Document *this, WebCore::ResourceTiming *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::LocalDOMWindow *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WebCore::Performance *v27;
  void *v28;
  WebCore::Node *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  bmalloc::api *v37;
  void *v38;
  uint64_t v39;
  unsigned int *v40;
  WebCore::Node *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  if ((*(_BYTE *)(a2 + 168) & 2) == 0)
    return;
  v8 = *(_QWORD *)(a2 + 400);
  if (v8)
  {
    v9 = (uint64_t *)(v8 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v42);
    v9 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v9 + 60) || (*(_BYTE *)(a2 + 132) & 0x40) != 0)
    return;
  v10 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(a1 + 8);
  if (!v10 || !*(_QWORD *)(v10 + 8))
  {
    WTF::WeakHashMap<WebCore::CachedResource,WebCore::ResourceTimingInformation::InitiatorInfo,WTF::DefaultWeakPtrImpl>::end((uint64_t)&v42, (uint64_t *)a1);
    v11 = *(_QWORD *)a1;
    goto LABEL_21;
  }
  v11 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v18 = 0;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    v43 = 0;
    v44 = 0;
    v42 = a1;
    goto LABEL_18;
  }
  v12 = *(_DWORD *)(v11 - 8);
  v13 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  for (i = 1; ; ++i)
  {
    v18 = v11 + 24 * v16;
    v19 = *(_QWORD *)v18;
    if (*(_QWORD *)v18 == -1)
      goto LABEL_15;
    if (!v19)
      break;
    if (v19 == v10)
    {
      v20 = *(_DWORD *)(v11 - 4);
      v21 = v11 + 24 * v20;
      goto LABEL_17;
    }
LABEL_15:
    v16 = (v16 + i) & v12;
  }
  v20 = *(_DWORD *)(v11 - 4);
  v18 = v11 + 24 * v20;
  v21 = v18;
LABEL_17:
  v42 = a1;
  v43 = v18;
  v44 = v21;
  v22 = v11 + 24 * v20;
LABEL_18:
  v45 = v22;
  v46 = v11 + 24 * v20;
  v47 = 0;
LABEL_19:
  while (v18 != v22 && !*(_QWORD *)(*(_QWORD *)v18 + 8))
  {
    v39 = v18 + 24;
    v43 = v39;
    v18 = v21;
    if (v39 != v21)
    {
      v18 = v39;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 24;
        v43 = v18;
        if (v18 == v21)
        {
          v18 = v21;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_21:
  if (v11)
    v11 += 24 * *(unsigned int *)(v11 - 4);
  v23 = v43;
  if (v43 != v11 && *(_DWORD *)(v43 + 16) != 1)
  {
    *((_DWORD *)this + 6) += 2;
    v41 = this;
    if ((*(_BYTE *)(a2 + 556) & 0x1F) != 0)
      goto LABEL_27;
    v30 = *((_QWORD *)this + 66);
    if (!v30)
      goto LABEL_27;
    v31 = *(_QWORD *)(v30 + 8);
    if (!v31 || !*(_BYTE *)(*(_QWORD *)(v31 + 280) + 156))
      goto LABEL_27;
    v32 = WebCore::Document::parentDocument(this);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)&v41, v32);
    if (v41)
    {
      WebCore::SecurityContext::securityOrigin((WebCore::Node *)((char *)v41 + 192), v33);
      if (v34)
      {
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
      v40 = v34;
      WebCore::ResourceTiming::updateExposure(a4, (const WebCore::SecurityOrigin *)v34);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref((uint64_t *)&v40, v36);
      this = v41;
      if (v41)
      {
LABEL_27:
        v24 = (WebCore::LocalDOMWindow *)*((_QWORD *)this + 87);
        if (v24)
        {
          ++*((_DWORD *)v24 + 6);
          v25 = *(_DWORD **)(v23 + 8);
          if (v25)
            *v25 += 2;
          v26 = (WTF::StringImpl *)*((_QWORD *)a4 + 5);
          *((_QWORD *)a4 + 5) = v25;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = (WebCore::Performance *)WebCore::LocalDOMWindow::performance(v24);
          ++*((_DWORD *)v27 + 4);
          WebCore::Performance::addResourceTiming((uint64_t)v27, (uint64_t)a4);
          if (*((_DWORD *)v27 + 4) == 1)
          {
            WebCore::Performance::~Performance(v27, v28);
            bmalloc::api::isoDeallocate(v37, v38);
          }
          else
          {
            --*((_DWORD *)v27 + 4);
          }
          *(_DWORD *)(v23 + 16) = 1;
          if (*((_DWORD *)v24 + 6) == 1)
            (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v24 + 72))(v24);
          else
            --*((_DWORD *)v24 + 6);
        }
        v29 = v41;
        v41 = 0;
        if (v29)
        {
          if (*((_DWORD *)v29 + 6) == 2)
          {
            if ((*((_WORD *)v29 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v29);
          }
          else
          {
            *((_DWORD *)v29 + 6) -= 2;
          }
        }
      }
    }
  }
}

uint64_t WebCore::FrameLoader::allChildrenAreComplete(WebCore::FrameLoader *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;

  v1 = *(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 88);
  if (!v1)
    return 1;
  v2 = v1 + 2;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  while (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 32))(v1) & 1) == 0)
  {
    v4 = (unsigned int *)*((_QWORD *)v1 + 9);
    if (v4)
    {
      v5 = v4 + 2;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
    v7 = v1 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v13 = off_1E31FE290;
      v13[1] = v7;
      v15 = v13;
      WTF::ensureOnMainThread();
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
    v1 = v4;
    if (!v4)
      return 1;
  }
  v11 = v1 + 2;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12 == 1)
  {
    atomic_store(1u, v11);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = off_1E31FE290;
    v14[1] = v11;
    v16 = v14;
    WTF::ensureOnMainThread();
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  }
  return 0;
}

void WebCore::NetworkLoadMetrics::~NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

void WebCore::Document::implicitClose(WebCore::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Page *v20;
  WebCore::SVGDocumentExtensions *v21;
  char v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::LocalFrameView *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned __int8 v54;
  WebCore::SVGDocumentExtensions *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  bmalloc::api *v60;
  void *v61;
  WTF *v62;
  void *v63;
  WebCore::AXObjectCache *v64;
  WebCore::RenderObject *v65;
  WebCore::Document *v66;
  WebCore::AXObjectCache *v67;
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;

  if (*((_BYTE *)this + 3391))
  {
    __break(0xC471u);
    JUMPOUT(0x194279174);
  }
  v2 = *((_QWORD *)this + 66);
  if (!v2)
    goto LABEL_154;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    goto LABEL_154;
  v4 = *(_BYTE **)(*(_QWORD *)(v3 + 152) + 72);
  if (!v4)
    goto LABEL_5;
  if (v4[19])
    LOBYTE(v4) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 48))(v4);
  else
LABEL_154:
    LOBYTE(v4) = 0;
LABEL_5:
  if (*((_BYTE *)this + 3389))
    return;
  v5 = *((_QWORD *)this + 91);
  if (!v5)
    return;
  v6 = *((_BYTE *)this + 3386) ? 1 : (char)v4;
  if ((v6 & 1) != 0)
    return;
  *((_DWORD *)this + 6) += 2;
  *((_BYTE *)this + 3386) = 1;
  v7 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v8 = v7;
  if (v7)
  {
    ++v7[2];
    LOBYTE(v7) = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 152))(v7);
  }
  *((_BYTE *)this + 3376) = (_BYTE)v7;
  v9 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v9)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 112))(v9);
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 66);
  if (!v10)
  {
    v23 = 0;
    v11 = 0;
LABEL_126:
    v22 = 1;
    goto LABEL_41;
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v23 = 0;
    goto LABEL_126;
  }
  v12 = (unsigned int *)(v11 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  if (*((_BYTE *)this + 3438))
  {
    if ((*((_QWORD *)this + 209) & 0xFFFFFFFFFFFFLL) != 0)
      WebCore::TimerBase::stopSlowCase((WebCore::Document *)((char *)this + 1640));
    WebCore::Document::applyPendingXSLTransformsTimerFired((uint64_t)this);
  }
  v14 = *((_QWORD *)this + 66);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = *(_DWORD **)(*(_QWORD *)(v15 + 280) + 88);
      if (v16)
      {
        if (*(WebCore::Document **)(v15 + 296) == this)
        {
          ++v16[6];
          WebCore::DocumentLoader::startIconLoading((uint64_t)v16);
          if (v16[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 24))(v16);
          else
            --v16[6];
        }
      }
    }
    v17 = *((_QWORD *)this + 66);
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 8);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 24);
        if (v19)
        {
          v20 = *(WebCore::Page **)(v19 + 8);
          if (v20)
          {
            ++*(_DWORD *)v20;
            {
              v71 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>,WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)&WebCore::loadEventSender(void)::sender, (uint64_t)WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::timerFired, 0);
              *(_OWORD *)(v71 + 72) = 0u;
              *(_OWORD *)(v71 + 56) = 0u;
            }
            WebCore::EventSender<WebCore::ImageLoader,WTF::SingleThreadWeakPtrImpl>::dispatchPendingEvents((WTF **)&WebCore::loadEventSender(void)::sender, v20);
            {
              v72 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
              *(_OWORD *)(v72 + 72) = 0u;
              *(_OWORD *)(v72 + 56) = 0u;
            }
            WebCore::EventSender<WebCore::HTMLLinkElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents((WebCore::TimerBase *)&WebCore::linkLoadEventSender(void)::sharedLoadEventSender, v20);
            {
              v73 = WebCore::Timer::Timer<WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>,WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>>((uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, (uint64_t)WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::timerFired, 0);
              *(_OWORD *)(v73 + 72) = 0u;
              *(_OWORD *)(v73 + 56) = 0u;
            }
            WebCore::EventSender<WebCore::HTMLStyleElement,WebCore::WeakPtrImplWithEventTargetData>::dispatchPendingEvents((WebCore::TimerBase *)&WebCore::styleLoadEventSender(void)::sharedLoadEventSender, v20);
            if (*(_DWORD *)v20 == 1)
            {
              WebCore::Page::~Page(v20);
              WTF::fastFree(v62, v63);
            }
            else
            {
              --*(_DWORD *)v20;
            }
          }
        }
      }
    }
  }
  v21 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)this + 226);
  if (v21)
  {
    ++*(_DWORD *)v21;
    WebCore::SVGDocumentExtensions::dispatchLoadEventToOutermostSVGElements(v21);
    if (!*(_DWORD *)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x194279200);
    }
    v22 = 0;
    --*(_DWORD *)v21;
  }
  else
  {
    v22 = 0;
  }
  v23 = 1;
LABEL_41:
  WebCore::Document::dispatchWindowLoadEvent((uint64_t)this);
  WebCore::Document::dispatchPageshowEvent(this, 0);
  if (v23)
  {
    v25 = *(_QWORD *)(v11 + 280);
    ++*(_DWORD *)v25;
    (*(void (**)(_QWORD))(**(_QWORD **)(v25 + 16) + 176))(*(_QWORD *)(v25 + 16));
    v26 = *(_QWORD *)(v25 + 88);
    if (v26)
    {
      ++*(_DWORD *)(v26 + 24);
      *(_BYTE *)(v26 + 3545) = 1;
      WebCore::ApplicationCacheHost::stopDeferringEvents(*(WTF **)(v26 + 2872), v24);
      if (*(_DWORD *)(v26 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      else
        --*(_DWORD *)(v26 + 24);
    }
    if (!*(_DWORD *)v25)
    {
      __break(0xC471u);
      JUMPOUT(0x194279220);
    }
    --*(_DWORD *)v25;
  }
  v27 = *((_QWORD *)this + 66);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      v29 = (unsigned int *)(v28 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v31 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    v28 = 0;
  }
  v31 = 1;
LABEL_52:
  if ((v22 & 1) == 0)
  {
    v32 = (unsigned int *)(v11 + 8);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v69 = off_1E31FE290;
      v69[1] = v32;
      v74 = v69;
      WTF::ensureOnMainThread();
      if (v74)
        (*(void (**)(_QWORD *))(*v74 + 8))(v74);
    }
  }
  if ((v31 & 1) != 0)
  {
    *((_BYTE *)this + 3386) = 0;
  }
  else
  {
    v35 = *(_QWORD *)(v28 + 280);
    v36 = *(_DWORD *)v35 + 1;
    *(_DWORD *)v35 = v36;
    if (!*(_BYTE *)(v35 + 209))
    {
      v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 296);
      *(_DWORD *)(v59 + 24) += 2;
      if (!*(_BYTE *)(v59 + 3389)
        && !*(_DWORD *)(v59 + 3328)
        && WebCore::FrameLoader::allChildrenAreComplete((WebCore::FrameLoader *)v35))
      {
        *(_WORD *)(v35 + 209) = 1;
        WebCore::Document::implicitClose((WebCore::Document *)v59);
      }
      if (*(_DWORD *)(v59 + 24) == 2)
      {
        if ((*(_WORD *)(v59 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v59);
      }
      else
      {
        *(_DWORD *)(v59 + 24) -= 2;
      }
      v36 = *(_DWORD *)v35;
    }
    if (!v36)
    {
      __break(0xC471u);
      JUMPOUT(0x194279240);
    }
    *(_DWORD *)v35 = v36 - 1;
    v37 = *((_QWORD *)this + 66);
    if (!v37)
      goto LABEL_66;
    v38 = *(_QWORD *)(v37 + 8);
    if (!v38)
      goto LABEL_66;
    v39 = *(_QWORD *)(v38 + 120);
    if (!v39)
      goto LABEL_66;
    v40 = *(_QWORD *)(v39 + 8);
    if (!v40)
      goto LABEL_66;
    v41 = *(_QWORD *)(v40 + 64) & 0xFFFFFFFFFFFFLL;
    if (v41)
    {
      if ((*(_BYTE *)(v41 + 45) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942792C4);
      }
      if ((*(_BYTE *)(v41 + 20) & 0xF8) == 0)
      {
LABEL_66:
        WebCore::Document::updateStyleIfNeeded(this);
        v42 = *((_QWORD *)this + 66);
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 8);
          if (v43)
          {
            v44 = *(_DWORD **)(v43 + 288);
            if (v44)
            {
              v45 = *((_QWORD *)this + 243);
              if (v45)
              {
                v46 = *(unsigned int *)(v45 + 64);
                if (!(v46 | ((unint64_t)*(unsigned __int8 *)(v45 + 68) << 32))
                  || !*(_QWORD *)((v46 | ((unint64_t)*(unsigned __int8 *)(v45 + 68) << 32)) + 8)
                  || (*(_BYTE *)(v45 + 20) & 0xF8) != 0)
                {
                  ++v44[2];
                  WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v44 + 84));
                  if (v44[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
                  else
                    --v44[2];
                  v47 = *((_QWORD *)this + 66);
                  if (v47
                    && (v48 = *(_QWORD *)(v47 + 8)) != 0
                    && (v49 = *(WebCore::LocalFrameView **)(v48 + 288)) != 0)
                  {
                    ++*((_DWORD *)v49 + 2);
                    WebCore::LocalFrameView::updateCompositingLayersAfterLayoutIfNeeded(v49);
                    if (*((_DWORD *)v49 + 2) == 1)
                      (*(void (**)(WebCore::LocalFrameView *))(*(_QWORD *)v49 + 8))(v49);
                    else
                      --*((_DWORD *)v49 + 2);
                  }
                  else
                  {
                    WebCore::LocalFrameView::updateCompositingLayersAfterLayoutIfNeeded(0);
                  }
                }
              }
            }
          }
        }
      }
    }
    *((_BYTE *)this + 3386) = 0;
    v50 = *((_QWORD *)this + 331);
    if (v50)
    {
      ++*(_DWORD *)(v50 + 8);
      v51 = *(_QWORD *)(v50 + 88);
      if (v51)
      {
        v52 = *(_DWORD *)(v51 + 16);
        *(_DWORD *)(v51 + 16) = v52 + 1;
        *(_BYTE *)(v51 + 96) = 1;
        if (*(_DWORD *)(*(_QWORD *)(v51 + 72) + 80))
        {
          v53 = *(_QWORD *)(v51 + 88);
          if (!*(_BYTE *)(v53 + 32))
          {
            WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::FontFaceSet>>::resolve(v53, (WTF::StringImpl *)v51);
            v52 = *(_DWORD *)(v51 + 16) - 1;
          }
        }
        if (v52)
        {
          *(_DWORD *)(v51 + 16) = v52;
        }
        else
        {
          WebCore::FontFaceSet::~FontFaceSet((WebCore::FontFaceSet *)v51, v24);
          bmalloc::api::isoDeallocate(v60, v61);
        }
      }
      if (*(_DWORD *)(v50 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      else
        --*(_DWORD *)(v50 + 8);
    }
    if (*((_QWORD *)this + 243))
    {
      if (!*((_BYTE *)this + 3405))
      {
        v54 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
        if ((v54 & 1) != 0)
        {
          v64 = WebCore::Document::axObjectCache(this);
          v65 = (WebCore::RenderObject *)*((_QWORD *)this + 243);
          if (v65)
            WebCore::AXObjectCache::getOrCreate(v64, v65);
          v66 = (WebCore::Document *)WebCore::Document::topDocument((uint64_t)this);
          v67 = WebCore::Document::axObjectCache(this);
          if (v66 == this)
            v68 = 38;
          else
            v68 = 34;
          WebCore::AXObjectCache::postNotification(v67, *((WebCore::RenderObject **)this + 243), v68, 0);
        }
      }
    }
    v55 = (WebCore::SVGDocumentExtensions *)*((_QWORD *)this + 226);
    if (v55)
    {
      ++*(_DWORD *)v55;
      WebCore::SVGDocumentExtensions::startAnimations(v55);
      if (!*(_DWORD *)v55)
      {
        __break(0xC471u);
        JUMPOUT(0x1942792A4);
      }
      --*(_DWORD *)v55;
    }
    v56 = (unsigned int *)(v28 + 8);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v56);
      v70 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v70 = off_1E31FE290;
      v70[1] = v56;
      v75 = v70;
      WTF::ensureOnMainThread();
      if (v75)
        (*(void (**)(_QWORD *))(*v75 + 8))(v75);
    }
  }
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
}

uint64_t WebCore::NavigationScheduler::startTimer(uint64_t this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  double v5;
  double v6;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(this + 72))
  {
    v1 = this;
    if ((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)((*(_QWORD *)(this + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      v2 = *(unsigned int **)(*(_QWORD *)(this + 8) + 8);
      v3 = v2 + 2;
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      this = (*(uint64_t (**)(_QWORD, unsigned int *))(**(_QWORD **)(this + 72) + 24))(*(_QWORD *)(this + 72), v2);
      if ((_DWORD)this)
      {
        v5 = *(double *)(*(_QWORD *)(v1 + 72) + 8);
        *(_QWORD *)(v1 + 40) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
        WebCore::TimerBase::setNextFireTime(v1 + 16, v5 + v6);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v11 = *((_QWORD *)v2 + 3);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
              WebCore::InspectorInstrumentation::frameScheduledNavigationImpl(*(_QWORD *)(*(_QWORD *)(v12 + 80) + 8), (WebCore::Frame *)v2, v5);
          }
        }
        this = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(v1 + 72) + 32))(*(_QWORD *)(v1 + 72), v2, v1 + 16);
      }
      if (v2)
      {
        do
        {
          v8 = __ldaxr(v3);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v3));
        if (!v9)
        {
          atomic_store(1u, v3);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E31FE290;
          v10[1] = v3;
          v13 = (uint64_t)v10;
          WTF::ensureOnMainThread();
          this = v13;
          if (v13)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
      }
    }
  }
  return this;
}

void WebCore::FrameLoader::setState(uint64_t a1)
{
  int v2;
  int *v3;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  NSObject *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  _BYTE v16[12];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 80);
  *(_BYTE *)(a1 + 80) = 2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 712))(*(_QWORD *)(a1 + 16));
  v3 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 184);
  v4 = *v3;
  *((_BYTE *)v3 + 40) = 1;
  *v3 = v4 + 1;
  if (v4 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x194279738);
  }
  *v3 = v4;
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 64);
    if (v6 > 2 && v6 != 4)
      *(_DWORD *)(a1 + 64) = 4;
    ++*(_DWORD *)(v5 + 24);
    *(_BYTE *)(v5 + 3546) = 1;
    WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v5 + 2536, *(unsigned int *)(v5 + 2548));
    if (*(_DWORD *)(v5 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    else
      --*(_DWORD *)(v5 + 24);
  }
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_QWORD **)(v7[16] + 8) == v7 && v2 != 2)
  {
    v9 = qword_1ECE7C860;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C860, OS_LOG_TYPE_DEFAULT))
    {
      v11 = v7[3];
      if (v11)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if (v11)
        {
          if (*(_BYTE *)(v11 + 40))
            v11 = *(_QWORD *)(v11 + 32);
          else
            v11 = 0;
        }
      }
      v12 = v7[4];
      *(_DWORD *)v16 = 134218752;
      *(_QWORD *)&v16[4] = a1;
      v17 = 2048;
      v18 = v11;
      v19 = 2048;
      v20 = v12;
      v21 = 1024;
      v22 = 1;
      _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "%p - [pageID=%llu, frameID=%llu, isMainFrame=%d] FrameLoader::setState: main frame load completed", v16, 0x26u);
      v7 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    }
    v13 = (unsigned int *)(v7 + 1);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)v16 = v7;
    v15 = *(uint64_t **)(v7[3] + 8);
    ++*(_DWORD *)v15;
    WebCore::PerformanceLogging::didReachPointOfInterest(v15[150], 1);
    WTF::RefCounted<WebCore::Page>::deref((WebCore::Page *)v15);
    WTF::Ref<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::~Ref((uint64_t *)v16);
  }
}

void WTF::Vector<WebCore::ResourceResponse,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  const void *v12;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v4 = *(unsigned int *)(a1 + 12);
    if (v4 > a2)
    {
      WTF::VectorTypeOperations<WebCore::ResourceResponse>::destruct((WebCore::ResourceResponseBase *)(*(_QWORD *)a1 + (a2 << 8)), (WTF::StringImpl *)(*(_QWORD *)a1 + (v4 << 8)));
      *(_DWORD *)(a1 + 12) = a2;
      LODWORD(v4) = a2;
    }
    v5 = *(WTF **)a1;
    if (a2)
    {
      if (a2 >> 24)
      {
        __break(0xC471u);
        return;
      }
      v6 = WTF::fastMalloc((WTF *)(a2 << 8));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v7 = v6;
        if ((WTF *)v6 != v5)
        {
          v8 = (unint64_t)v4 << 8;
          v9 = v5;
          do
          {
            WebCore::ResourceResponseBase::ResourceResponseBase(v7, (uint64_t *)v9);
            v11 = *((_QWORD *)v9 + 30);
            *((_QWORD *)v9 + 30) = 0;
            *(_QWORD *)(v7 + 240) = v11;
            *(_BYTE *)(v7 + 248) = *((_BYTE *)v9 + 248);
            v12 = (const void *)*((_QWORD *)v9 + 30);
            *((_QWORD *)v9 + 30) = 0;
            if (v12)
              CFRelease(v12);
            WebCore::ResourceResponseBase::~ResourceResponseBase(v9, v10);
            v7 += 256;
            v9 = (WTF *)((char *)v9 + 256);
            v8 -= 256;
          }
          while (v8);
        }
      }
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, (void *)a2);
    }
  }
}

WTF::StringImpl *WebCore::CachedCSSStyleSheet::finishLoading(WebCore::CachedCSSStyleSheet *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  unsigned int *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  WTF::StringImpl *v50;

  if (a2)
  {
    WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v48);
    WebCore::CachedResource::setEncodedSize(this, *((_DWORD *)a2 + 12));
    v10 = *((_QWORD *)this + 82);
    ++*(_DWORD *)v10;
    v11 = v48;
    if (*(_DWORD *)(v48 + 20))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8);
      v13 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v13 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_57;
      }
      v50 = (WTF::StringImpl *)&v49;
      v14 = (const char *)((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v50, v12 + 8);
    }
    else
    {
      v14 = 0;
    }
    WebCore::TextResourceDecoder::decodeAndFlush((WebCore::TextResourceDecoder *)v10, v14, *(_QWORD *)(v11 + 48), &v50);
    v16 = v50;
    v50 = 0;
    v17 = (WTF::StringImpl *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v15);
        v23 = v50;
        v50 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, v15);
          else
            *(_DWORD *)v23 -= 2;
        }
      }
      else
      {
        *(_DWORD *)v17 -= 2;
        v50 = 0;
      }
    }
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::TextResourceDecoder::~TextResourceDecoder((WebCore::TextResourceDecoder *)v10, v15);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v10;
    }
    v18 = v48;
    v48 = 0;
    v10 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = v18;
    if (v10)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v10);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v10));
      if (!v20)
      {
        atomic_store(1u, (unsigned int *)v10);
        v32 = *(unsigned int *)(v10 + 20);
        if ((_DWORD)v32)
        {
          v33 = *(_QWORD *)(v10 + 8);
          v34 = v33 + 16 * v32;
          do
          {
            v35 = *(unsigned int **)(v33 + 8);
            *(_QWORD *)(v33 + 8) = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
LABEL_57:
                v45 = v33;
                v47 = v34;
                atomic_store(1u, v35);
                v42 = v35;
                v43 = v35[6];
                if ((_DWORD)v43 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v43])(&v50, v35 + 2);
                v42[6] = -1;
                WTF::fastFree((WTF *)v42, v15);
                v33 = v45;
                v34 = v47;
              }
            }
            v33 += 16;
          }
          while (v33 != v34);
        }
        v38 = *(WTF **)(v10 + 8);
        if ((WTF *)(v10 + 24) != v38 && v38 != 0)
        {
          *(_QWORD *)(v10 + 8) = 0;
          *(_DWORD *)(v10 + 16) = 0;
          WTF::fastFree(v38, v15);
        }
        WTF::fastFree((WTF *)v10, v15);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v48, v15);
  }
  else
  {
    v4 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v24 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v24)
        {
          v25 = *(_QWORD *)(v4 + 8);
          v26 = v25 + 16 * v24;
          do
          {
            v27 = *(unsigned int **)(v25 + 8);
            *(_QWORD *)(v25 + 8) = 0;
            if (v27)
            {
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                v44 = v25;
                v46 = v26;
                atomic_store(1u, v27);
                v40 = v27;
                v41 = v27[6];
                if ((_DWORD)v41 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *, const WebCore::NetworkLoadMetrics *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v41])(&v50, v27 + 2, a3);
                v40[6] = -1;
                WTF::fastFree((WTF *)v40, a2);
                v25 = v44;
                v26 = v46;
              }
            }
            v25 += 16;
          }
          while (v25 != v26);
        }
        v30 = *(WTF **)(v4 + 8);
        if ((WTF *)(v4 + 24) != v30 && v30 != 0)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          WTF::fastFree(v30, a2);
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    WebCore::CachedResource::setEncodedSize(this, 0);
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  WebCore::CachedCSSStyleSheet::checkNotify((uint64_t)this);
  result = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CachedRawResource::finishLoading(WebCore::CachedRawResource *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  void *v32;
  _DWORD *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  unsigned int *v67;
  WTF *v68;
  __int128 v69;
  WTF *v70;
  WTF *v71[2];
  char v72;
  char v73;

  if (*((_BYTE *)this + 697))
  {
    if (a2)
    {
      do
        v5 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v5 + 1, (unsigned int *)a2));
    }
    LOBYTE(v71[0]) = 1;
    v6 = *((unsigned __int8 *)this + 688);
    v70 = 0;
    if (v6)
    {
      v7 = *((_QWORD *)this + 85);
      *((_QWORD *)this + 85) = a2;
      if (v7)
      {
        do
        {
          v8 = __ldaxr((unsigned int *)v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, (unsigned int *)v7));
        if (!v9)
        {
          atomic_store(1u, (unsigned int *)v7);
          v10 = *(unsigned int *)(v7 + 20);
          if ((_DWORD)v10)
          {
            v11 = *(_QWORD *)(v7 + 8);
            v12 = v11 + 16 * v10;
            do
            {
              v13 = *(unsigned int **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = 0;
              if (v13)
              {
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                {
                  atomic_store(1u, v13);
                  v16 = v13[6];
                  if ((_DWORD)v16 != -1)
                    ((void (*)(WTF **, unsigned int *, const WebCore::NetworkLoadMetrics *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v16])(&v68, v13 + 2, a3);
                  v13[6] = -1;
                  WTF::fastFree((WTF *)v13, a2);
                }
              }
              v11 += 16;
            }
            while (v11 != v12);
          }
          v49 = *(WTF **)(v7 + 8);
          if ((WTF *)(v7 + 24) != v49 && v49 != 0)
          {
            *(_QWORD *)(v7 + 8) = 0;
            *(_DWORD *)(v7 + 16) = 0;
            WTF::fastFree(v49, a2);
          }
          WTF::fastFree((WTF *)v7, a2);
        }
      }
    }
    else
    {
      *((_QWORD *)this + 85) = a2;
      *((_BYTE *)this + 688) = 1;
    }
    std::__optional_destruct_base<WebCore::CachedRawResource::DelayedFinishLoading,false>::~__optional_destruct_base[abi:sn180100]((uint64_t *)&v70, a2);
    return;
  }
  v18 = *((_QWORD *)this + 1);
  if (v18)
    goto LABEL_95;
  v18 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v18 = 1;
  *(_QWORD *)(v18 + 8) = this;
  v34 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v18;
  if (!v34)
    goto LABEL_95;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, v34);
    WTF::fastFree((WTF *)v34, a2);
  }
  v18 = *((_QWORD *)this + 1);
  if (v18)
  {
LABEL_95:
    do
      v19 = __ldaxr((unsigned int *)v18);
    while (__stlxr(v19 + 1, (unsigned int *)v18));
    v67 = (unsigned int *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    if (v20)
    {
      v68 = (WTF *)&v67;
      ++*(_DWORD *)(v20 + 548);
      v21 = *(_QWORD *)(v20 + 488);
      if (v21)
      {
        if (*(_QWORD *)(v21 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v20 + 464), (uint64_t *)&v68, (uint64_t)&v70);
      }
    }
  }
  else
  {
    v67 = 0;
  }
  v22 = *(_DWORD *)((char *)this + 130);
  if ((v22 & 8) == 0)
  {
    if (a2)
    {
      do
        v23 = __ldaxr((unsigned int *)a2);
      while (__stlxr(v23 + 1, (unsigned int *)a2));
    }
    v24 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = a2;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v51 = *(unsigned int *)(v24 + 20);
        if ((_DWORD)v51)
        {
          v52 = *(_QWORD *)(v24 + 8);
          v53 = v52 + 16 * v51;
          do
          {
            v54 = *(unsigned int **)(v52 + 8);
            *(_QWORD *)(v52 + 8) = 0;
            if (v54)
            {
              do
              {
                v55 = __ldaxr(v54);
                v56 = v55 - 1;
              }
              while (__stlxr(v56, v54));
              if (!v56)
              {
                v64 = v52;
                v65 = v53;
                v63 = v24;
                atomic_store(1u, v54);
                v66 = (WTF *)v54;
                v57 = v54[6];
                if ((_DWORD)v57 != -1)
                  ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v57])(&v70, v54 + 2);
                *((_DWORD *)v66 + 6) = -1;
                WTF::fastFree(v66, a2);
                v24 = v63;
                v52 = v64;
                v53 = v65;
              }
            }
            v52 += 16;
          }
          while (v52 != v53);
        }
        v58 = *(WTF **)(v24 + 8);
        if ((WTF *)(v24 + 24) != v58 && v58 != 0)
        {
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 16) = 0;
          v60 = v24;
          WTF::fastFree(v58, a2);
          v24 = v60;
        }
        WTF::fastFree((WTF *)v24, a2);
        if (!a2)
          goto LABEL_37;
        goto LABEL_31;
      }
    }
    if (a2)
    {
LABEL_31:
      v27 = *((_QWORD *)this + 50);
      if (v27)
        v28 = *(unsigned int *)(v27 + 400);
      else
        v28 = 0;
      if (*((_QWORD *)a2 + 6) > v28)
      {
        WebCore::FragmentedSharedBuffer::getSomeData(a2, v28, &v68);
        v38 = (unsigned int *)v68;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
        v70 = (WTF *)v38;
        *(_OWORD *)v71 = v69;
        v40 = (unsigned int *)v68;
        v68 = 0;
        if (v40)
        {
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            atomic_store(1u, v40);
            v61 = v40;
            v62 = v40[6];
            if ((_DWORD)v62 != -1)
              ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v62])(&v73, v61 + 2);
            v61[6] = -1;
            WTF::fastFree((WTF *)v61, v37);
          }
        }
        v72 = 1;
        WebCore::CachedResource::setEncodedSize(this, *((_DWORD *)a2 + 12));
        WebCore::SharedBufferDataView::createSharedBuffer((unsigned int **)&v70, (uint64_t *)&v68);
        WebCore::CachedRawResource::notifyClientsDataWasReceived(this, v68);
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v68, v43);
        v45 = (unsigned int *)v70;
        v70 = 0;
        if (v45)
        {
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            atomic_store(1u, v45);
            v48 = v45[6];
            if ((_DWORD)v48 != -1)
              ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v48])(&v68, v45 + 2);
            v45[6] = -1;
            WTF::fastFree((WTF *)v45, v44);
          }
        }
      }
    }
  }
LABEL_37:
  v29 = *((_QWORD *)this + 48);
  if (v29)
    LOBYTE(v29) = *(_QWORD *)(v29 + 320) == 0;
  *((_BYTE *)this + 696) = v29;
  LOBYTE(v70) = 0;
  v72 = 0;
  std::array<std::optional<WebCore::ResourceCryptographicDigest>,3ul>::fill[abi:sn180100]((uint64_t)this + 560, (uint64_t)&v70);
  if (v72)
  {
    v31 = v71[0];
    if (v71[0])
    {
      v71[0] = 0;
      LODWORD(v71[1]) = 0;
      WTF::fastFree(v31, v30);
    }
  }
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  (*(void (**)(WebCore::CachedRawResource *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
  if ((v22 & 8) == 0 && (*((_BYTE *)this + 130) & 8) != 0)
  {
    v33 = (_DWORD *)*((_QWORD *)this + 48);
    if (v33)
    {
      ++v33[4];
      *(_DWORD *)((char *)v33 + 1090) |= 8u;
      WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(v33 + 184), v32);
      if (v33[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
      else
        --v33[4];
    }
    WebCore::CachedRawResource::clear(this, v32);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v67, v32);
}

uint64_t WebCore::RenderBoxModelObject::chooseInterpolationQuality(uint64_t this, WebCore::GraphicsContext *a2, WebCore::Image *a3, uint64_t a4, const WebCore::LayoutSize *a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  float v16;
  uint64_t *v17;
  float v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  WebCore::RenderBoxModelObject *v45;
  uint64_t v46;
  double v47;
  double v48;
  unint64_t StatusReg;
  unsigned int *v50;
  uint64_t *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  WebCore::RenderBoxModelObject *v55;
  uint64_t v56;
  WebCore::RenderBoxModelObject *v57;
  uint64_t v58;
  double v59;
  double v60;
  int v61;
  WebCore::GraphicsContext *v62;
  uint64_t *v63;
  uint64_t *v64;
  double v65;
  float v66;
  unsigned int v67;
  int v68;
  double v69;
  float v70;
  uint64_t *v71;
  uint64_t *v72;
  const WebCore::LayoutSize *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t **v76;
  uint64_t *v77;
  unint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 1944);
  v12 = *(_QWORD *)(v11 + 376);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v12 = v11;
    *(_QWORD *)(v12 + 8) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v5 = off_1E341E698;
    v5[1] = WebCore::ImageQualityController::highQualityRepaintTimerFired;
    v5[2] = 0;
    v5[3] = v12;
    *(_QWORD *)(v12 + 16) = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    v50 = *(unsigned int **)(StatusReg + 736);
    if (!v50)
      v50 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    v51 = (uint64_t *)(v11 + 376);
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 + 1, v50));
    *(_QWORD *)(v12 + 16) = off_1E33DC988;
    *(_QWORD *)(v12 + 56) = v50;
    *(_QWORD *)(v12 + 64) = v5;
    *(_QWORD *)(v12 + 72) = 0x3FE0000000000000;
    *(_WORD *)(v12 + 80) = 0;
    v53 = (_QWORD *)*v51;
    *v51 = v12;
    if (v53)
    {
      std::default_delete<WebCore::ImageQualityController>::operator()[abi:sn180100]((uint64_t)v51, v53);
      v12 = *v51;
    }
  }
  v81 = a4;
  v82 = this;
  if (((*(uint64_t (**)(WebCore::Image *))(*(_QWORD *)a3 + 16))(a3) & 1) == 0
    && !(*(unsigned int (**)(WebCore::Image *))(*(_QWORD *)a3 + 80))(a3)
    || ((*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 40))(a2) & 1) != 0)
  {
    goto LABEL_23;
  }
  v13 = (*(_BYTE *)(*(_QWORD *)(this + 104) + 234) & 7) - 1;
  if (v13 >= 4)
  {
    v16 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
    v17 = (uint64_t *)(*(uint64_t (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
    v19 = *(_QWORD *)(v12 + 8);
    if (!v19)
      goto LABEL_43;
    v20 = *(_DWORD *)(v19 - 8);
    v21 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
    v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
    v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
    v24 = v20 & ((v23 >> 31) ^ v23);
    for (i = 1; ; ++i)
    {
      v26 = v24;
      v27 = *(_QWORD *)(v19 + 16 * v24);
      if (v27 != -1)
      {
        if (!v27)
          goto LABEL_43;
        if (*(_QWORD *)(v27 + 8) == this)
          break;
      }
      v24 = (v26 + i) & v20;
    }
    if ((_DWORD)v26 == *(_DWORD *)(v19 - 4))
    {
LABEL_43:
      v28 = 0;
      v80 = 0;
      LOBYTE(v78) = 0;
      v79 = 0;
    }
    else
    {
      v28 = (uint64_t *)(v19 + 16 * v26 + 8);
      v80 = v28;
      LOBYTE(v78) = 0;
      v79 = 0;
      v29 = *v28;
      if (*v28)
      {
        v30 = *(_DWORD *)(v29 - 8);
        v31 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
        v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
        v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
        v34 = v30 & ((v33 >> 31) ^ v33);
        v35 = *(const void **)(v29 + 16 * v34);
        if (v35 != (const void *)a4)
        {
          v61 = 1;
          while (v35)
          {
            v34 = ((_DWORD)v34 + v61) & v30;
            v35 = *(const void **)(v29 + 16 * v34);
            ++v61;
            if (v35 == (const void *)a4)
              goto LABEL_16;
          }
          v34 = *(unsigned int *)(v29 - 4);
        }
LABEL_16:
        if (v34 != *(_DWORD *)(v29 - 4))
        {
          v36 = *(_QWORD *)(v29 + 16 * v34 + 8);
          v79 = 1;
          v78 = v36;
          v5 = (_QWORD *)HIDWORD(v36);
        }
      }
    }
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 528);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 288);
        if (v39 && *(_BYTE *)(v39 + 110))
        {
          WebCore::ImageQualityController::set(v12, this, v28, a4, (unint64_t *)a5);
          WebCore::ImageQualityController::restartTimer(v12);
          *(_BYTE *)(v12 + 81) = 1;
          goto LABEL_42;
        }
        if (*(_BYTE *)(v12 + 81))
        {
LABEL_23:
          LOBYTE(v14) = 0;
          return v14;
        }
      }
    }
    v40 = (int)v16;
    v41 = (int)v18;
    v42 = (int)v16 << 6;
    if ((int)v16 < -33554432)
      v42 = 0x80000000;
    if (v40 <= 0x1FFFFFF && v41 <= 0x1FFFFFF)
    {
      if (v41 >= -33554432)
        v43 = v41 << 6;
      else
        v43 = 0x80000000;
      if (*(_DWORD *)a5 == v42 && *((_DWORD *)a5 + 1) == v43)
      {
        v62 = a2;
        v63 = v28;
        v17 = (uint64_t *)WebCore::ImageQualityController::chooseInterpolationQuality(WebCore::GraphicsContext &,WebCore::RenderBoxModelObject *,WebCore::Image &,void const*,WebCore::LayoutSize const&)::$_0::operator()((uint64_t)v62);
        v28 = v63;
        if ((v17 & 1) == 0)
          goto LABEL_56;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 528)
                                                        + 8)
                                            + 24)
                                + 8)
                    + 344))
      {
        v64 = v28;
        v65 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
        v17 = (uint64_t *)(*(uint64_t (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
        v28 = v64;
        if (v65 * v66 > 640000.0)
        {
LABEL_42:
          LOBYTE(v14) = 2;
          return v14;
        }
      }
      v72 = (uint64_t *)&v78;
      v73 = a5;
      v74 = v12;
      v75 = &v82;
      v76 = &v80;
      v77 = &v81;
      if (*(_BYTE *)(v12 + 80))
      {
        if (!v79 || (_DWORD)v78 != *(_DWORD *)a5 || (_DWORD)v5 != *((_DWORD *)a5 + 1))
        {
          v44 = v12;
          v45 = (WebCore::RenderBoxModelObject *)this;
LABEL_39:
          v17 = WebCore::ImageQualityController::set(v44, (uint64_t)v45, v28, a4, (unint64_t *)a5);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
      if (v79)
      {
        if ((_DWORD)v78 != *(_DWORD *)a5 || (_DWORD)v5 != *((_DWORD *)a5 + 1))
        {
          if ((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) == 0
            || *(double *)((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
          {
LABEL_56:
            v54 = v12;
            v55 = (WebCore::RenderBoxModelObject *)this;
LABEL_57:
            WebCore::ImageQualityController::removeLayer(v54, v55, v28, a4);
            goto LABEL_23;
          }
          goto LABEL_100;
        }
LABEL_60:
        v58 = *(_QWORD *)(v12 + 48);
        if ((v58 & 0xFFFFFFFFFFFFLL) != 0 && *(double *)((v58 & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
        {
          LOBYTE(v14) = 0;
          *(_QWORD *)(v12 + 48) = v58 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
          return v14;
        }
        v59 = *(double *)(v12 + 72);
        *(_QWORD *)(v12 + 40) = 0;
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
        WebCore::TimerBase::setNextFireTime(v12 + 16, v59 + v60);
        goto LABEL_23;
      }
      v56 = v12;
      v57 = (WebCore::RenderBoxModelObject *)this;
LABEL_59:
      v17 = WebCore::ImageQualityController::set(v56, (uint64_t)v57, v28, a4, (unint64_t *)a5);
      goto LABEL_60;
    }
    v71 = v28;
    if (v40 >= 0x2000000)
      v42 = 0x7FFFFFFF;
    if (v41 >= -33554432)
      v67 = v41 << 6;
    else
      v67 = 0x80000000;
    if (v41 <= 0x1FFFFFF)
      v68 = v67;
    else
      v68 = 0x7FFFFFFF;
    if (*(_DWORD *)a5 != v42
      || *((_DWORD *)a5 + 1) != v68
      || (v17 = (uint64_t *)WebCore::ImageQualityController::chooseInterpolationQuality(WebCore::GraphicsContext &,WebCore::RenderBoxModelObject *,WebCore::Image &,void const*,WebCore::LayoutSize const&)::$_0::operator()((uint64_t)a2),
          (_DWORD)v17))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 24) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 528)
                                                        + 8)
                                            + 24)
                                + 8)
                    + 344))
      {
        v69 = (*(float (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
        v17 = (uint64_t *)(*(uint64_t (**)(WebCore::Image *, _QWORD))(*(_QWORD *)a3 + 168))(a3, 0);
        if (v69 * v70 > 640000.0)
          goto LABEL_42;
      }
      v72 = (uint64_t *)&v78;
      v73 = a5;
      v74 = v12;
      v75 = &v82;
      v76 = &v80;
      v77 = &v81;
      if (*(_BYTE *)(v12 + 80))
      {
        if (!v79 || (_DWORD)v78 != *(_DWORD *)a5 || (_DWORD)v5 != *((_DWORD *)a5 + 1))
        {
          v44 = v12;
          v45 = (WebCore::RenderBoxModelObject *)this;
          v28 = v71;
          goto LABEL_39;
        }
LABEL_40:
        v46 = *(_QWORD *)(v12 + 48);
        if ((v46 & 0xFFFFFFFFFFFFLL) == 0 || *(double *)((v46 & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
        {
          v47 = *(double *)(v12 + 72);
          *(_QWORD *)(v12 + 40) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v17);
          WebCore::TimerBase::setNextFireTime(v12 + 16, v47 + v48);
        }
        else
        {
          *(_QWORD *)(v12 + 48) = v46 & 0xFDFFFFFFFFFFFFLL | 0x2000000000000;
        }
        goto LABEL_42;
      }
      if (!v79)
      {
        v56 = v12;
        v57 = (WebCore::RenderBoxModelObject *)this;
        v28 = v71;
        goto LABEL_59;
      }
      if ((_DWORD)v78 == *(_DWORD *)a5 && (_DWORD)v5 == *((_DWORD *)a5 + 1))
        goto LABEL_60;
      if ((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) != 0
        && *(double *)((*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
LABEL_100:
        WebCore::ImageQualityController::chooseInterpolationQuality(WebCore::GraphicsContext &,WebCore::RenderBoxModelObject *,WebCore::Image &,void const*,WebCore::LayoutSize const&)::$_1::operator()((uint64_t)&v72);
        *(_BYTE *)(v12 + 80) = 1;
        WebCore::ImageQualityController::restartTimer(v12);
        goto LABEL_42;
      }
    }
    v54 = v12;
    v55 = (WebCore::RenderBoxModelObject *)this;
    v28 = v71;
    goto LABEL_57;
  }
  return (0x1010002u >> (8 * v13));
}

uint64_t WebCore::RenderBoxModelObject::decodingModeForImageDraw(WebCore::RenderBoxModelObject *this, const WebCore::Image *a2, const WebCore::PaintInfo *a3)
{
  int v6;
  const WebCore::Image *v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t result;
  _QWORD v16[3];
  const WebCore::Image *v17;

  if ((WebCore::IOSApplication::isIBooksStorytime(this) & 1) != 0
    || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 3358) & 4) != 0
    || (*((_BYTE *)a3 + 22) & 1) != 0)
  {
    return 1;
  }
  v6 = (*(uint64_t (**)(const WebCore::Image *))(*(_QWORD *)a2 + 16))(a2);
  v7 = v6 ? a2 : 0;
  v17 = v7;
  if (!v6)
    return 1;
  v16[0] = a3;
  v16[1] = &v17;
  v16[2] = this;
  if ((*((_BYTE *)this + 45) & 1) != 0 || (v8 = *(_QWORD *)(*((_QWORD *)this + 3) + 8)) == 0)
  {
LABEL_22:
    if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 8) + 344))(*((_QWORD *)v17 + 8)) & 1) != 0)
      return 2;
    v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 8) + 56))(*((_QWORD *)v17 + 8));
    v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 8) + 80))(*((_QWORD *)v17 + 8));
    if (v13)
    {
      if (v14
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                              + 8)
                                                                                  + 528)
                                                                      + 8)
                                                          + 24)
                                              + 8)
                                  + 112)
                      + 664) & 0x2000000) != 0)
      {
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 8) + 72))(*((_QWORD *)v17 + 8)) & 1) != 0)
          return 2;
        return WebCore::RenderBoxModelObject::decodingModeForImageDraw(WebCore::Image const&,WebCore::PaintInfo const&)const::$_0::operator()((uint64_t)v16);
      }
    }
    else if (v14
           && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                                                                 + 8)
                                                                                     + 528)
                                                                         + 8)
                                                             + 24)
                                                 + 8)
                                     + 112)
                         + 680) & 0x400000000000) != 0)
    {
      return WebCore::RenderBoxModelObject::decodingModeForImageDraw(WebCore::Image const&,WebCore::PaintInfo const&)const::$_0::operator()((uint64_t)v16);
    }
    return 1;
  }
  v9 = *(_WORD *)(v8 + 28);
  if ((v9 & 8) != 0)
  {
    if ((v9 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
    {
      *(_DWORD *)(v8 + 24) += 2;
      if (WebCore::HTMLImageElement::decodingMode((WebCore::HTMLImageElement *)v8) == 1)
      {
        v11 = 1;
LABEL_15:
        if (*(_DWORD *)(v8 + 24) == 2)
        {
          if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v8, v10);
        }
        else
        {
          *(_DWORD *)(v8 + 24) -= 2;
        }
        return v11;
      }
      if (WebCore::HTMLImageElement::decodingMode((WebCore::HTMLImageElement *)v8) == 2)
      {
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 8) + 344))(*((_QWORD *)v17 + 8)) & 1) != 0)
          v11 = 2;
        else
          v11 = WebCore::RenderBoxModelObject::decodingModeForImageDraw(WebCore::Image const&,WebCore::PaintInfo const&)const::$_0::operator()((uint64_t)v16);
        goto LABEL_15;
      }
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    goto LABEL_22;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::BitmapImage::isBitmapImage(WebCore::BitmapImage *this)
{
  return 1;
}

uint64_t WebCore::HTMLImageElement::decodingMode(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    goto LABEL_12;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) == 0)
  {
    v3 = v1 + 32;
    LODWORD(v4) = v2 >> 5;
    if ((_DWORD)v4)
      goto LABEL_4;
LABEL_12:
    v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v1 + 40);
  LODWORD(v4) = *(_DWORD *)(v1 + 52);
  if (!(_DWORD)v4)
    goto LABEL_12;
LABEL_4:
  v4 = v4;
  v5 = (uint64_t *)(v3 + 8);
  while (1)
  {
    v6 = *(v5 - 1);
    if (v6 == WebCore::HTMLNames::decodingAttr
      || *(_QWORD *)(v6 + 24) == *(_QWORD *)(WebCore::HTMLNames::decodingAttr + 24)
      && *(_QWORD *)(v6 + 32) == *(_QWORD *)(WebCore::HTMLNames::decodingAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v4)
    {
      v5 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_9:
  v7 = *v5;
  if (!*v5)
    return 0;
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 != 4)
  {
    if (v9 == 5)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v7 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v10 & 0xDF) != 0x41
          || (*(_BYTE *)(v10 + 1) & 0xDF) != 0x53
          || (*(_BYTE *)(v10 + 2) & 0xDF) != 0x59
          || (*(_BYTE *)(v10 + 3) & 0xDF) != 0x4E)
        {
          return 0;
        }
        v11 = *(unsigned __int8 *)(v10 + 4);
      }
      else
      {
        if ((*(_WORD *)v10 & 0xFFDF) != 0x41
          || (*(_WORD *)(v10 + 2) & 0xFFDF) != 0x53
          || (*(_WORD *)(v10 + 4) & 0xFFDF) != 0x59
          || (*(_WORD *)(v10 + 6) & 0xFFDF) != 0x4E)
        {
          return 0;
        }
        v11 = *(unsigned __int16 *)(v10 + 8);
      }
      if ((v11 & 0xFFFFFFDF) == 0x43)
        return 2;
    }
    return 0;
  }
  v12 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v12 & 0xDF) != 0x53 || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x59 || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x4E)
      return 0;
    v13 = *(unsigned __int8 *)(v12 + 3);
  }
  else
  {
    if ((*(_WORD *)v12 & 0xFFDF) != 0x53
      || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x59
      || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x4E)
    {
      return 0;
    }
    v13 = *(unsigned __int16 *)(v12 + 6);
  }
  return (v13 & 0xFFFFFFDF) == 0x43;
}

uint64_t WebCore::CachedImage::updateImageData(WebCore::CachedImage *this, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::MonotonicTime *v28;
  char v29;

  v2 = *((_QWORD *)this + 86);
  if (!v2)
    return 0;
  ++*(_DWORD *)(v2 + 8);
  v4 = (unsigned int *)*((_QWORD *)this + 49);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v28 = (WTF::MonotonicTime *)v4;
    v7 = WebCore::Image::setData((_QWORD *)v2, (uint64_t *)&v28, a2);
    v8 = (uint64_t)v28;
    v28 = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v14 = *(unsigned int *)(v8 + 20);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v8 + 8);
          v16 = v15 + 16 * v14;
          do
          {
            v17 = *(unsigned int **)(v15 + 8);
            *(_QWORD *)(v15 + 8) = 0;
            if (v17)
            {
              do
              {
                v18 = __ldaxr(v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, v17));
              if (!v19)
              {
                v23 = v15;
                v24 = v16;
                v25 = (WTF *)v17;
                v27 = v8;
                atomic_store(1u, v17);
                v22 = v17[6];
                if ((_DWORD)v22 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_6[v22])(&v29, v17 + 2);
                *((_DWORD *)v25 + 6) = -1;
                WTF::fastFree(v25, v6);
                v8 = v27;
                v15 = v23;
                v16 = v24;
              }
            }
            v15 += 16;
          }
          while (v15 != v16);
        }
        v20 = *(WTF **)(v8 + 8);
        if ((WTF *)(v8 + 24) != v20 && v20 != 0)
        {
          *(_QWORD *)(v8 + 8) = 0;
          *(_DWORD *)(v8 + 16) = 0;
          v26 = v8;
          WTF::fastFree(v20, v6);
          v8 = v26;
        }
        v8 = WTF::fastFree((WTF *)v8, v6);
      }
    }
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    *((_QWORD *)this + 88) = v11;
    v12 = *((_BYTE *)this + 720);
    if ((v12 & 7) != 4)
      *((_BYTE *)this + 720) = v12 & 0xF8 | (v12 + 1) & 7;
  }
  else
  {
    v7 = 0;
  }
  if (*(_DWORD *)(v2 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  else
    --*(_DWORD *)(v2 + 8);
  return v7;
}

uint64_t WebCore::Image::setData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v5 = *a2;
  *a2 = 0;
  v6 = a1[3];
  a1[3] = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v10 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v6 + 8);
        v12 = v11 + 16 * v10;
        do
        {
          v13 = *(unsigned int **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v19 = v11;
              v20 = v12;
              v21 = (WTF *)v13;
              v23 = v6;
              atomic_store(1u, v13);
              v18 = v13[6];
              if ((_DWORD)v18 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_10[v18])(&v24, v13 + 2);
              *((_DWORD *)v21 + 6) = -1;
              WTF::fastFree(v21, a2);
              v6 = v23;
              v11 = v19;
              v12 = v20;
            }
          }
          v11 += 16;
        }
        while (v11 != v12);
      }
      v16 = *(WTF **)(v6 + 8);
      if ((WTF *)(v6 + 24) != v16 && v16 != 0)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        v22 = v6;
        WTF::fastFree(v16, a2);
        v6 = v22;
      }
      WTF::fastFree((WTF *)v6, a2);
    }
    v5 = a1[3];
  }
  if (v5 && *(_QWORD *)(v5 + 48))
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 208))(a1, a3);
  else
    return 4;
}

uint64_t WebCore::BitmapImage::dataChanged(WebCore::BitmapImage *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), *((_QWORD *)this + 3), a2);
}

void WebCore::ImageSource::dataChanged()
{
  __break(0xC471u);
}

BOOL WebCore::ImageDecoder::isSizeAvailable(WebCore::ImageDecoder *this)
{
  return (*(int (**)(WebCore::ImageDecoder *))(*(_QWORD *)this + 24))(this) > 2;
}

uint64_t WebCore::ImageDecoderCG::encodedDataStatus(WebCore::ImageDecoderCG *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  WTF::StringImpl *v6;
  int v7;
  CGImageSourceStatus Status;
  int v9;
  CGImageSource *v10;
  const void *v11;
  const __CFDictionary *v12;
  int v13;
  WTF::StringImpl *v14;
  uint64_t v15;

  v3 = *((unsigned int *)this + 4);
  if ((v3 | 4) == 4)
    return v3;
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  if (!v6)
    return 1;
  v7 = *(_DWORD *)v6;
  *(_DWORD *)v6 += 2;
  v14 = v6;
  if (!*((_DWORD *)v6 + 1))
  {
    v14 = 0;
    v3 = 1;
LABEL_11:
    if (v7)
      *(_DWORD *)v6 = v7;
    else
      WTF::StringImpl::destroy(v6, a2);
    return v3;
  }
  if ((WebCore::isSupportedImageType(&v14, a2, a3) & 1) != 0)
  {
    Status = CGImageSourceGetStatus(*((CGImageSourceRef *)this + 4));
    if (Status != kCGImageStatusIncomplete)
    {
      switch(Status)
      {
        case kCGImageStatusUnexpectedEOF:
        case kCGImageStatusInvalidData:
        case kCGImageStatusReadingHeader:
          if (*((_BYTE *)this + 12))
            goto LABEL_28;
          v9 = 1;
          goto LABEL_15;
        case kCGImageStatusUnknownType:
LABEL_28:
          *((_DWORD *)this + 4) = 0;
          goto LABEL_8;
        case kCGImageStatusComplete:
          v9 = 4;
          goto LABEL_15;
        default:
          goto LABEL_8;
      }
    }
    if (*((_DWORD *)this + 4) != 3)
    {
      v10 = (CGImageSource *)*((_QWORD *)this + 4);
      if ((byte_1ECE83F59 & 1) != 0)
      {
        v11 = (const void *)qword_1ECE83F80;
      }
      else
      {
        WebCore::createImageSourceOptions((WebCore *)&v15);
        v11 = (const void *)v15;
        qword_1ECE83F80 = v15;
        byte_1ECE83F59 = 1;
      }
      if (v11)
      {
        CFRetain(v11);
        v12 = CGImageSourceCopyPropertiesAtIndex(v10, 0, (CFDictionaryRef)v11);
        CFRelease(v11);
      }
      else
      {
        v12 = CGImageSourceCopyPropertiesAtIndex(v10, 0, 0);
      }
      if (v12)
      {
        v13 = 2;
        if (CFDictionaryContainsKey(v12, (const void *)*MEMORY[0x1E0CBD048]))
        {
          if (CFDictionaryContainsKey(v12, (const void *)*MEMORY[0x1E0CBD040]))
            v13 = 3;
          else
            v13 = 2;
        }
        *((_DWORD *)this + 4) = v13;
        CFRelease(v12);
      }
      else
      {
        v9 = 2;
LABEL_15:
        *((_DWORD *)this + 4) = v9;
      }
    }
LABEL_8:
    v3 = *((unsigned int *)this + 4);
  }
  else
  {
    v3 = 0;
    *((_DWORD *)this + 4) = 0;
  }
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    v7 = *(_DWORD *)v6 - 2;
    goto LABEL_11;
  }
  return v3;
}

WTF *WebCore::isSupportedImageType(WTF::StringImpl **this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;

  if (!*this || !*((_DWORD *)*this + 1))
    return 0;
  {
    WebCore::defaultSupportedImageTypes(void)::$_0::operator()(&v9);
    WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes = v9;
    v6 = v10;
    v9 = 0;
    v10 = 0;
    qword_1EE2F4EF0 = v6;
    v7 = v11;
    v11 = 0;
    dword_1EE2F4EF8 = v7;
    LOBYTE(v7) = v12;
    v12 = 0;
    byte_1EE2F4EFC = v7;
    WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)&v9, v8);
  }
  if ((WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(&WebCore::defaultSupportedImageTypes(void)::defaultSupportedImageTypes, this, a3) & 1) != 0)return (WTF *)1;
  {
    WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes = 0;
    unk_1EE2F4F10 = 0;
    qword_1EE2F4F18 = 0;
  }
  return WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(&WebCore::additionalSupportedImageTypes(void)::additionalSupportedImageTypes, this, v5);
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  WTF **v12;
  WTF *result;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (!*a1)
    return 0;
  v6 = *((_DWORD *)a1 + 2);
  v7 = v6 - 1;
  v8 = *((_DWORD *)a1 + 4);
  v9 = *((_DWORD *)*a2 + 4);
  if (v9 < 0x100)
  {
    v10 = WTF::StringImpl::hashSlowCase(*a2);
    v3 = *a1;
  }
  else
  {
    v10 = v9 >> 8;
  }
  v11 = (v10 ^ v8) & v7;
  v12 = (WTF **)(v3 + 8 * v11);
  result = *v12;
  if (*v12)
  {
    v14 = -1;
    while (1)
    {
      v15 = *((_DWORD *)result + 4);
      v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v15 >> 8;
      if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
        break;
      if (v16 == v10 && (WTF::equal(*v12, *a2, a3) & 1) != 0)
        return (WTF *)1;
      v11 = (v11 + 1) & v7;
      v12 = (WTF **)(*a1 + 8 * v11);
      result = *v12;
      if (!*v12)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::ImageDecoderCG::bytesDecodedToDetermineProperties(WebCore::ImageDecoderCG *this)
{
  return 13088;
}

uint64_t WebCore::ImageDecoderCG::repetitionCount(WebCore::ImageDecoderCG *this)
{
  CGImageSource *v1;
  const void *v2;
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const __CFNumber *v5;
  uint64_t v6;
  unsigned int valuePtr;
  uint64_t v9;

  v1 = (CGImageSource *)*((_QWORD *)this + 4);
  if ((byte_1ECE83F59 & 1) != 0)
  {
    v2 = (const void *)qword_1ECE83F80;
  }
  else
  {
    WebCore::createImageSourceOptions((WebCore *)&v9);
    v2 = (const void *)v9;
    qword_1ECE83F80 = v9;
    byte_1ECE83F59 = 1;
  }
  if (v2)
  {
    CFRetain(v2);
    v3 = CGImageSourceCopyProperties(v1, (CFDictionaryRef)v2);
    CFRelease(v2);
  }
  else
  {
    v3 = CGImageSourceCopyProperties(v1, 0);
  }
  if (!v3)
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CBCCE0]);
  if (Value
    || (Value = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CBD118])) != 0
    || (Value = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CBD028])) != 0
    || (Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("{AVIS}"))) != 0
    || (Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("{HEICS}"))) != 0)
  {
    v5 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("LoopCount"));
    if (v5)
    {
      valuePtr = 0;
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      if (valuePtr)
        v6 = valuePtr;
      else
        v6 = 0xFFFFFFFFLL;
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  CFRelease(v3);
  return v6;
}

size_t WebCore::ImageDecoderCG::frameCount(CGImageSourceRef *this)
{
  return CGImageSourceGetCount(this[4]);
}

uint64_t WebCore::ImageDecoderCG::frameHasAlphaAtIndex(WebCore::ImageDecoderCG **this, size_t a2)
{
  WTF::StringImpl *v3;

  if (WebCore::ImageDecoderCG::frameIsCompleteAtIndex(this, a2))
    return WebCore::ImageDecoderCG::hasAlpha(this[3], v3);
  else
    return 1;
}

unint64_t WebCore::ImageDecoderCG::frameSizeAtIndex(uint64_t a1, size_t a2, int a3)
{
  CGImageSource *v4;
  CFDictionaryRef v5;
  const __CFDictionary *v6;
  WebCore *v7;
  unint64_t v8;
  CFDictionaryRef options;

  v4 = *(CGImageSource **)(a1 + 32);
  WebCore::imageSourceOptions((uint64_t *)&options, a3);
  v5 = options;
  v7 = CGImageSourceCopyPropertiesAtIndex(v4, a2, options);
  if (v5)
    CFRelease(v5);
  v8 = WebCore::frameSizeFromProperties(v7, v6);
  if (v7)
    CFRelease(v7);
  return v8;
}

void WebCore::imageSourceOptions(uint64_t *a1, int a2)
{
  const void *v4;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v7;

  if ((byte_1ECE83F59 & 1) == 0)
  {
    WebCore::createImageSourceOptions((WebCore *)&v7);
    qword_1ECE83F80 = v7;
    byte_1ECE83F59 = 1;
  }
  if (a2)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)qword_1ECE83F80);
    WebCore::appendImageSourceOption((CFMutableDictionaryRef *)&v7, &MutableCopy, a2);
    v5 = MutableCopy;
    *a1 = v7;
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v4 = (const void *)qword_1ECE83F80;
    *a1 = qword_1ECE83F80;
    if (v4)
      CFRetain(v4);
  }
}

void WebCore::CachedImage::CachedImageObserver::decodedSizeChanged(WebCore::CachedImage::CachedImageObserver *this, const WebCore::Image *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _BYTE v27[24];
  unsigned int **v28;

  v6 = *((_QWORD *)this + 3);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_3:
    v9 = v7;
    v7 = v6 + 8 * v8;
    goto LABEL_4;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v7 = v6 + 8 * v8;
  if (!*(_DWORD *)(v6 - 12))
    goto LABEL_3;
  if (!(_DWORD)v8)
  {
    v22 = 0;
    v9 = *((_QWORD *)this + 3);
    goto LABEL_44;
  }
  v21 = 8 * v8;
  v9 = *((_QWORD *)this + 3);
  while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
  {
    v9 += 8;
    v21 -= 8;
    if (!v21)
    {
      v9 = v7;
      break;
    }
  }
LABEL_4:
  if (!v6)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v22 = *(unsigned int *)(v6 - 4);
LABEL_44:
  v10 = v6 + 8 * v22;
LABEL_6:
  if (v10 != v9)
  {
    while (!*(_QWORD *)(*(_QWORD *)v9 + 8))
    {
      v25 = v9 + 8;
      v9 = v7;
      if (v25 != v7)
      {
        v9 = v25;
        while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
        {
          v9 += 8;
          if (v9 == v7)
          {
            v9 = v7;
            break;
          }
        }
      }
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  if (v6)
    v11 = v6 + 8 * *(unsigned int *)(v6 - 4);
  else
    v11 = 0;
  for (; v9 != v11; ++*((_DWORD *)this + 8))
  {
    v12 = *(_QWORD *)(*(_QWORD *)v9 + 8);
    v13 = *(unsigned int **)(v12 + 8);
    if (v13)
      goto LABEL_67;
    v13 = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v13 = 1;
    *((_QWORD *)v13 + 1) = v12;
    v23 = *(unsigned int **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v13;
    if (!v23)
      goto LABEL_67;
    do
    {
      v19 = __ldaxr(v23);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v23));
    if (!v20)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
    v13 = *(unsigned int **)(v12 + 8);
    if (v13)
    {
LABEL_67:
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v26 = v13;
      v15 = *((_QWORD *)v13 + 1);
    }
    else
    {
      v15 = 0;
      v26 = 0;
    }
    v28 = &v26;
    ++*(_DWORD *)(v15 + 548);
    v16 = *(_QWORD *)(v15 + 488);
    if (v16 && *(_QWORD *)(v16 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v15 + 464), (uint64_t *)&v28, (uint64_t)v27);
      v13 = v26;
    }
    if (v13)
      v13 = (unsigned int *)*((_QWORD *)v13 + 1);
    if (*((const WebCore::Image **)v13 + 86) == a2)
    {
      v17 = *((_QWORD *)v13 + 50);
      if (v17)
        LODWORD(v17) = *(_DWORD *)(v17 + 404);
      WebCore::CachedResource::setDecodedSize((WebCore::CachedResource *)v13, v17 + a3);
    }
    WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v26, a2);
    v18 = v7;
    if (v9 + 8 != v7)
    {
      v18 = v9 + 8;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 8;
        if (v18 == v7)
        {
          v18 = v7;
          break;
        }
      }
    }
    v9 = v10;
    if (v18 != v10)
    {
      v9 = v18;
      if (!*(_QWORD *)(*(_QWORD *)v18 + 8))
      {
        while (1)
        {
          v24 = v9 + 8;
          v9 = v7;
          if (v24 != v7)
          {
            v9 = v24;
            while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
            {
              v9 += 8;
              if (v9 == v7)
              {
                v9 = v7;
                break;
              }
            }
          }
          if (v9 == v10)
            break;
          if (*(_QWORD *)(*(_QWORD *)v9 + 8))
            goto LABEL_29;
        }
        v9 = v10;
      }
    }
LABEL_29:
    ;
  }
}

uint64_t *WebCore::ImageQualityController::set(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t *result;
  uint64_t *v8;
  WTF *v9;
  void *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  _BYTE v15[24];
  unint64_t v16;

  v16 = a4;
  if (a3)
    return WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::inlineSet<void const* const&,WebCore::LayoutSize const&>(a3, &v16, a5, (uint64_t)v15);
  v14 = 0;
  WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::inlineSet<void const* const&,WebCore::LayoutSize const&>(&v14, &v16, a5, (uint64_t)v15);
  v8 = (uint64_t *)(a1 + 8);
  v9 = *(WTF **)(a2 + 8);
  if (!v9)
  {
    v9 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *((_QWORD *)v9 + 1) = a2;
    v12 = *(WTF **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v9;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
      {
        WTF::fastFree(v12, v11);
        v9 = *(WTF **)(a2 + 8);
      }
      else
      {
        --*(_DWORD *)v12;
      }
    }
  }
  ++*(_DWORD *)v9;
  v13 = v9;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderBoxModelObject,WTF::SingleThreadWeakPtrImpl>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>&>(v8, &v13, &v14, (uint64_t)v15);
  result = (uint64_t *)v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (uint64_t *)WTF::fastFree((WTF *)result, v10);
    else
      --*(_DWORD *)result;
  }
  if (v14)
    return (uint64_t *)WTF::fastFree((WTF *)(v14 - 16), v10);
  return result;
}

uint64_t WebCore::IOSApplication::isIBooksStorytime(WebCore::IOSApplication *this)
{
  uint64_t result;
  WTF::StringImpl *v2;
  const WTF::String *v3;
  WTF::StringImpl *v4;
  unsigned int IsEqualTo;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

    return WebCore::IOSApplication::isIBooksStorytime(void)::isIBooksStorytime != 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v2 = v7;
  v6 = v7;
  IsEqualTo = WebCore::applicationBundleIsEqualTo(&v6, v3);
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v4);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = IsEqualTo;
  WebCore::IOSApplication::isIBooksStorytime(void)::isIBooksStorytime = IsEqualTo;
  return result;
}

void sub_19427BB80(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)1> [43]>::contains<WTF::String>(const char ***a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unint64_t v5;
  BOOL v6;
  const char **v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    v8 = 0;
    v4 = 0;
    v7 = *a1;
    goto LABEL_39;
  }
  v3 = *(_DWORD *)(v2 + 16);
  v4 = *(unsigned __int8 **)(v2 + 8);
  v5 = *(unsigned int *)(v2 + 4);
  v6 = *(_DWORD *)(v2 + 4) == 0;
  v7 = *a1;
  v8 = (v3 & 4) == 0;
  if ((v3 & 4) != 0)
  {
    if ((_DWORD)v5)
    {
      v9 = 0;
      v10 = 43;
      do
      {
        v11 = v10 >> 1;
        v12 = v9 + (v10 >> 1);
        v13 = v7[2 * v12];
        v14 = v5;
        v15 = v4;
        while (1)
        {
          v16 = *v13;
          if (!*v13)
            break;
          v17 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v15);
          if (v17 != v16)
          {
            if (v16 >= v17)
              goto LABEL_12;
            break;
          }
          ++v13;
          ++v15;
          if (!--v14)
            goto LABEL_12;
        }
        v9 = v12 + 1;
        v11 = v10 + ~v11;
LABEL_12:
        v10 = v11;
      }
      while (v11);
      goto LABEL_13;
    }
    v5 = 0;
    v8 = 0;
LABEL_39:
    v6 = 1;
    goto LABEL_15;
  }
  if (!(_DWORD)v5)
  {
    v5 = 0;
    v6 = 1;
    v8 = 1;
    goto LABEL_15;
  }
  v9 = 0;
  v25 = 43;
  do
  {
    v26 = v25 >> 1;
    v27 = v9 + (v25 >> 1);
    v28 = v7[2 * v27];
    v29 = 2 * v5;
    v30 = v4;
    while (1)
    {
      v31 = *v28;
      if (!*v28)
        break;
      v32 = *(unsigned __int16 *)v30 | (32 * (*(unsigned __int16 *)v30 - 65 < 0x1A));
      if (v32 != v31)
      {
        if (v31 >= v32)
          goto LABEL_36;
        break;
      }
      ++v28;
      v30 += 2;
      v29 -= 2;
      if (!v29)
        goto LABEL_36;
    }
    v9 = v27 + 1;
    v26 = v25 + ~v26;
LABEL_36:
    v25 = v26;
  }
  while (v26);
LABEL_13:
  if (v9 == 43)
    return 0;
  v7 += 2 * v9;
LABEL_15:
  v18 = *v7;
  if (*v7)
    v19 = strlen(*v7);
  else
    v19 = 0;
  if (v19 == v5)
  {
    if (v8)
    {
      if (!v6)
      {
        if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v18))
        {
          v33 = 1;
          do
          {
            v23 = v33;
            if (v5 == v33)
              break;
            v34 = *(unsigned __int16 *)&v4[2 * v33] | (32 * (*(unsigned __int16 *)&v4[2 * v33] - 65 < 0x1A));
            ++v33;
          }
          while (v34 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[v23]));
          return v23 >= v5;
        }
        return 0;
      }
    }
    else if (!v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v4) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                 + *(unsigned __int8 *)v18))
      {
        v20 = 1;
        while (v5 != v20)
        {
          v21 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v4[v20]);
          v22 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v18[v20++]);
          if (v21 != v22)
          {
            v23 = v20 - 1;
            return v23 >= v5;
          }
        }
        v23 = v5;
        return v23 >= v5;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::Image::mimeType@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;

  v2 = *(_QWORD *)(this + 32);
  if (v2 && (v3 = *(_DWORD **)(v2 + 8)) != 0)
  {
    v3[2] += 2;
    this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
    v4 = v3[2] - 1;
    if (v3[2] == 1)
    {
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v4 = v3[2];
    }
    else
    {
      v3[2] = v4;
    }
    v5 = v4 - 1;
    if (v5)
      v3[2] = v5;
    else
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
  return this;
}

void WebCore::CachedResource::mimeType(WebCore::CachedResource *this, uint64_t *a2)
{
  uint64_t *v2;
  _DWORD *v4;
  unint64_t v5;
  char v6;
  char **v7;
  char *v8;

  v2 = a2;
  if (!a2)
  {
    v5 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v5 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v2 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v2, 1);
  v4 = (_DWORD *)v2[5];
  if (v4)
    *v4 += 2;
  *(_QWORD *)this = v4;
}

uint64_t WebCore::CachedImage::CachedImageObserver::expectedContentLength(WebCore::CachedImage::CachedImageObserver *this)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WebCore::ResourceResponseBase *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char **v13;
  char *v14;

  v1 = (uint64_t *)*((_QWORD *)this + 3);
  if (!v1 || !*((_DWORD *)v1 - 3))
    return 0;
  v3 = *((unsigned int *)v1 - 1);
  v4 = 8 * v3;
  i = (uint64_t *)*((_QWORD *)this + 3);
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    for (i = (uint64_t *)*((_QWORD *)this + 3); (unint64_t)(*i + 1) <= 1; ++i)
    {
      v6 -= 8;
      if (!v6)
        return 0;
    }
  }
  v7 = &v1[v3];
  if (i == v7)
    return 0;
  v8 = *i;
  while (!*(_QWORD *)(v8 + 8))
  {
    if (++i != v7)
    {
      while (1)
      {
        v8 = *i;
        if ((unint64_t)(*i + 1) > 1)
          break;
        result = 0;
        if (++i == v7)
          return result;
      }
      if (i != v7)
        continue;
    }
    return 0;
  }
  if ((_DWORD)v3)
  {
    while ((unint64_t)(*v1 + 1) <= 1)
    {
      ++v1;
      v4 -= 8;
      if (!v4)
        goto LABEL_15;
    }
  }
  if (v7 != v1)
  {
    v10 = *v1;
LABEL_20:
    if (*(_QWORD *)(v10 + 8))
      goto LABEL_16;
    while (++v1 != v7)
    {
      v10 = *v1;
      if ((unint64_t)(*v1 + 1) > 1)
      {
        if (v1 != v7)
          goto LABEL_20;
        break;
      }
    }
  }
LABEL_15:
  v1 = v7;
LABEL_16:
  v9 = *(WebCore::ResourceResponseBase **)(*(_QWORD *)(*v1 + 8) + 400);
  if (!v9)
  {
    v11 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v11 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v9 = (WebCore::ResourceResponseBase *)&WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  return WebCore::ResourceResponseBase::expectedContentLength(v9);
}

uint64_t WebCore::ScalableImageDecoder::create@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  WebCore::DataSegment **v6;
  uint64_t v7;
  WebCore::DataSegment *v8;
  WebCore::DataSegment *v9;

  v3 = *(unsigned int *)(result + 20);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 16 * v3;
    v6 = (WebCore::DataSegment **)(*(_QWORD *)(result + 8) + 8);
    while (1)
    {
      v7 = WebCore::DataSegment::size(*v6);
      v8 = *v6;
      if (v7 + (unint64_t)v4 >= 0xF)
        break;
      WebCore::DataSegment::span(*v6);
      WebCore::DataSegment::size(*v6);
      v9 = *v6;
      v6 += 2;
      result = WebCore::DataSegment::size(v9);
      v4 += result;
      v5 -= 16;
      if (!v5)
        goto LABEL_5;
    }
    WebCore::DataSegment::data(*v6);
    result = WebCore::DataSegment::size(v8);
  }
LABEL_5:
  *a2 = 0;
  return result;
}

uint64_t WebCore::ImageDecoderCG::ImageDecoderCG(uint64_t a1, WebCore::FragmentedSharedBuffer *this)
{
  void *v3;
  WebCore::SharedBuffer *TypeWithData;
  CFTypeRef v5;
  const void *v6;
  const __CFDictionary *v7;
  CGImageSourceRef Incremental;
  const void *v9;
  CGImageSourceRef v11;
  WebCore::SharedBuffer *v12;
  CFTypeRef cf;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E3412248;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (*((_QWORD *)this + 6) < 0x20uLL)
    goto LABEL_11;
  WebCore::FragmentedSharedBuffer::makeContiguous(this, &v12);
  WebCore::SharedBuffer::createCFData(v12, (WebCoreSharedBufferData **)&cf);
  TypeWithData = (WebCore::SharedBuffer *)CGImageSourceGetTypeWithData();
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v12, v3);
  if (TypeWithData)
  {
    v6 = (const void *)*MEMORY[0x1E0CBD2A8];
    v12 = TypeWithData;
    cf = v6;
    v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &cf, (const void **)&v12, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    Incremental = CGImageSourceCreateIncremental(v7);
    v9 = *(const void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = Incremental;
    if (v9)
      CFRelease(v9);
    if (v7)
      CFRelease(v7);
  }
  else
  {
LABEL_11:
    v11 = CGImageSourceCreateIncremental(0);
    TypeWithData = *(WebCore::SharedBuffer **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v11;
    if (!TypeWithData)
      return a1;
  }
  CFRelease(TypeWithData);
  return a1;
}

void sub_19427C344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::Image::isBitmapImage(WebCore::Image *this)
{
  return 0;
}

uint64_t *WTF::HashTable<void const*,WTF::KeyValuePair<void const*,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,WebCore::LayoutSize>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,WebCore::LayoutSize,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v26;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_35;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_35:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastMalloc((WTF *)(16 * v11 + 16));
  bzero((void *)(v12 + 16), 16 * v11);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v13 = (_QWORD *)*a2;
  if (*a2)
  {
    v14 = *((unsigned int *)v13 - 1);
    v15 = &v13[2 * v14];
    if (*((_DWORD *)v13 - 3))
    {
      v16 = (_QWORD *)*a2;
      if ((_DWORD)v14)
      {
        v17 = 16 * v14;
        v16 = (_QWORD *)*a2;
        while ((unint64_t)(*v16 + 1) <= 1)
        {
          v16 += 2;
          v17 -= 16;
          if (!v17)
          {
            v16 = v15;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v16 = &v13[2 * v14];
  }
  else
  {
    v16 = 0;
    v14 = 0;
  }
  v15 = &v13[2 * v14];
LABEL_19:
  if (v13)
    v13 += 2 * *((unsigned int *)v13 - 1);
  while (v16 != v13)
  {
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 8);
    else
      v19 = 0;
    v20 = ~(*v16 << 32) + *v16;
    v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
    v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
    v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ ((_DWORD)v22 + ~((_DWORD)v22 << 27)));
    if (*(_QWORD *)(v18 + 16 * v23))
    {
      v26 = 1;
      do
        v23 = ((_DWORD)v23 + v26++) & v19;
      while (*(_QWORD *)(v18 + 16 * v23));
    }
    *(_OWORD *)(v18 + 16 * v23) = *(_OWORD *)v16;
    v24 = v16 + 2;
    v16 = v15;
    if (v24 != v15)
    {
      v16 = v24;
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        v16 += 2;
        if (v16 == v15)
        {
          v16 = v15;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WebCore::Image::isPDFDocumentImage(WebCore::Image *this)
{
  return 0;
}

void WebCore::ImageDecoderCG::frameDurationAtIndex(WebCore::ImageDecoderCG *this, size_t index)
{
  CGImageSource *v4;
  const void *v5;
  const __CFDictionary *v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFNumber *v10;
  CGImageSource *v11;
  const void *v12;
  const __CFDictionary *v13;
  const __CFArray *v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  const __CFArray *v17;
  const __CFDictionary *v18;
  uint64_t valuePtr;

  v4 = (CGImageSource *)*((_QWORD *)this + 4);
  if ((byte_1ECE83F59 & 1) != 0)
  {
    v5 = (const void *)qword_1ECE83F80;
    if (qword_1ECE83F80)
      goto LABEL_3;
LABEL_31:
    v6 = CGImageSourceCopyPropertiesAtIndex(v4, index, 0);
    if (v6)
      goto LABEL_4;
    return;
  }
  WebCore::createImageSourceOptions((WebCore *)&valuePtr);
  v5 = (const void *)valuePtr;
  qword_1ECE83F80 = valuePtr;
  byte_1ECE83F59 = 1;
  if (!valuePtr)
    goto LABEL_31;
LABEL_3:
  CFRetain(v5);
  v6 = CGImageSourceCopyPropertiesAtIndex(v4, index, (CFDictionaryRef)v5);
  CFRelease(v5);
  if (v6)
  {
LABEL_4:
    Value = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CBCCE0]);
    if (Value)
      goto LABEL_10;
    Value = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CBD118]);
    if (Value)
      goto LABEL_10;
    Value = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0CBD028]);
    if (Value)
      goto LABEL_10;
    Value = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("{AVIS}"));
    if (Value)
      goto LABEL_10;
    v8 = (const __CFDictionary *)CFDictionaryGetValue(v6, CFSTR("{HEICS}"));
    if (v8)
    {
      Value = v8;
LABEL_10:
      v9 = 0;
LABEL_11:
      LODWORD(valuePtr) = 0;
LABEL_12:
      v10 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("UnclampedDelayTime"));
      if (v10 || (v10 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("DelayTime"))) != 0)
        CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr);
LABEL_15:
      CFRelease(v6);
      if (!v9)
        return;
      goto LABEL_16;
    }
    v11 = (CGImageSource *)*((_QWORD *)this + 4);
    if ((byte_1ECE83F59 & 1) != 0)
    {
      v12 = (const void *)qword_1ECE83F80;
      if (qword_1ECE83F80)
        goto LABEL_20;
    }
    else
    {
      WebCore::createImageSourceOptions((WebCore *)&valuePtr);
      v12 = (const void *)valuePtr;
      qword_1ECE83F80 = valuePtr;
      byte_1ECE83F59 = 1;
      if (valuePtr)
      {
LABEL_20:
        CFRetain(v12);
        v9 = CGImageSourceCopyProperties(v11, (CFDictionaryRef)v12);
        CFRelease(v12);
        if (!v9)
          goto LABEL_35;
        goto LABEL_21;
      }
    }
    v9 = CGImageSourceCopyProperties(v11, 0);
    if (!v9)
      goto LABEL_35;
LABEL_21:
    v13 = (const __CFDictionary *)CFDictionaryGetValue(v9, CFSTR("{AVIS}"));
    if (v13)
    {
      v14 = (const __CFArray *)CFDictionaryGetValue(v13, CFSTR("FrameInfo"));
      if (v14)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, index);
        if (ValueAtIndex)
        {
          Value = ValueAtIndex;
          goto LABEL_11;
        }
      }
    }
    v16 = (const __CFDictionary *)CFDictionaryGetValue(v9, CFSTR("{HEICS}"));
    if (v16)
    {
      v17 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("FrameInfo"));
      if (v17)
      {
        v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, index);
        LODWORD(valuePtr) = 0;
        if (!v18)
        {
          CFRelease(v6);
LABEL_16:
          CFRelease(v9);
          return;
        }
        Value = v18;
        goto LABEL_12;
      }
    }
LABEL_35:
    LODWORD(valuePtr) = 0;
    goto LABEL_15;
  }
}

uint64_t *WebCore::MockRealtimeMediaSourceCenter::singleton(WebCore::MockRealtimeMediaSourceCenter *this)
{
  {
    WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
    unk_1ECE91270 = &off_1E341C010;
    qword_1ECE91278 = (uint64_t)&off_1E341C048;
    *(_QWORD *)&byte_1ECE91280 = 65793;
  }
  return &WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center;
}

WTF *WebCore::LocalDOMWindow::dispatchEvent(WebCore::LocalDOMWindow *this, WebCore::Event *a2, WebCore::EventTarget *a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  WebCore::InspectorInstrumentation *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WTF *result;
  WebCore::Node *v24;
  uint64_t v25;
  WebCore::LocalDOMWindow *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  const WebCore::Event *v34;
  WebCore::InspectorInstrumentation *v35;
  WTF *v36;
  WTF *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;

  v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v5 + 1;
  if (a3)
  {
    if ((*((_BYTE *)a3 + 22) & 2) != 0)
      *((_DWORD *)a3 + 6) += 2;
    else
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a3 + 88))(a3);
    v7 = *((_QWORD *)a2 + 6);
    if ((WebCore::EventTarget *)v7 == a3)
    {
      if ((*((_BYTE *)a3 + 22) & 2) == 0)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)a3 + 96))(a3);
        goto LABEL_8;
      }
      if (*((_DWORD *)a3 + 6) != 2)
      {
        *((_DWORD *)a3 + 6) -= 2;
        goto LABEL_8;
      }
      if ((*((_WORD *)a3 + 15) & 0x400) != 0)
        goto LABEL_8;
      v24 = a3;
LABEL_63:
      WebCore::Node::removedLastRef(v24);
      goto LABEL_8;
    }
    *((_QWORD *)a2 + 6) = a3;
    if (v7)
      goto LABEL_46;
LABEL_50:
    (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 176))(a2);
    goto LABEL_8;
  }
  *((_DWORD *)this + 6) = v5 + 2;
  v7 = *((_QWORD *)a2 + 6);
  if ((WebCore::LocalDOMWindow *)v7 == this)
  {
    if ((*((_BYTE *)this + 22) & 2) == 0)
    {
      (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 96))(this);
      goto LABEL_8;
    }
    if (v5)
    {
      *((_DWORD *)this + 6) = v5;
      goto LABEL_8;
    }
    if ((*((_WORD *)this + 15) & 0x400) != 0)
      goto LABEL_8;
    v24 = this;
    goto LABEL_63;
  }
  *((_QWORD *)a2 + 6) = this;
  if (!v7)
    goto LABEL_50;
LABEL_46:
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (*((_QWORD *)a2 + 6))
    goto LABEL_50;
LABEL_8:
  WebCore::EventPath::EventPath((WebCore::EventPath *)&v36, this);
  if ((*((_BYTE *)this + 22) & 2) != 0)
    *((_DWORD *)this + 6) += 2;
  else
    (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 88))(this);
  v9 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = this;
  v10 = (unint64_t)this;
  if (!v9)
    goto LABEL_41;
  if ((*(_BYTE *)(v9 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  }
  v10 = *((_QWORD *)a2 + 4);
  if (v10)
  {
LABEL_41:
    v10 = *(_QWORD *)(v10 + 16);
    if ((v10 & 0x2000000000000) != 0)
      LODWORD(v10) = (v10 >> 41) & 0x800;
    else
      LODWORD(v10) = 0;
  }
  *((_DWORD *)a2 + 5) = v10 | *((_DWORD *)a2 + 5) & 0xFFFFC77F | 0x2000;
  v11 = v36;
  if (v36)
    goto LABEL_19;
  v11 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *((_QWORD *)v11 + 1) = &v36;
  v12 = v36;
  v36 = v11;
  if (!v12)
    goto LABEL_19;
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
LABEL_19:
    ++*(_DWORD *)v11;
    goto LABEL_20;
  }
  WTF::fastFree(v12, v8);
  v11 = v36;
  if (v36)
    goto LABEL_19;
LABEL_20:
  v13 = (WTF *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v11;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v8);
    else
      --*(_DWORD *)v13;
  }
  v35 = 0;
  v14 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter);
  if (v14
    && (v25 = WebCore::LocalDOMWindow::frame(this),
        WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=((uint64_t *)&v35, v25), v27 = *((_QWORD *)this + 2), (v27 & 0x1000000000000) != 0)&& (v28 = v27 & 0xFFFFFFFFFFFFLL, v29 = *(unsigned int *)(v28 + 28), (_DWORD)v29))
  {
    v30 = *(_QWORD **)(v28 + 16);
    v31 = 32 * v29;
    while (*v30 != *((_QWORD *)a2 + 3))
    {
      v30 += 4;
      v31 -= 32;
      if (!v31)
        goto LABEL_24;
    }
    WebCore::InspectorInstrumentation::willDispatchEventOnWindow((uint64_t)v35, a2, this, v26);
    WebCore::EventTarget::fireEventListeners(this, a2, 0);
    WebCore::EventTarget::fireEventListeners(this, a2, 1);
    WebCore::InspectorInstrumentation::didDispatchEventOnWindow((uint64_t)v35, a2, v34);
  }
  else
  {
LABEL_24:
    WebCore::EventTarget::fireEventListeners(this, a2, 0);
    WebCore::EventTarget::fireEventListeners(this, a2, 1);
  }
  WebCore::Event::resetAfterDispatch(a2, v15);
  v17 = v35;
  v35 = 0;
  if (v17)
  {
    v18 = (unsigned int *)((char *)v17 + 8);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v32 = off_1E31FE290;
      v32[1] = v18;
      v41 = v32;
      WTF::ensureOnMainThread();
      v33 = v41;
      v41 = 0;
      if (v33)
        (*(void (**)(_QWORD *))(*v33 + 8))(v33);
    }
  }
  if (v39)
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v37, (WTF *)((char *)v37 + 64 * (unint64_t)v39));
  v21 = v37;
  if (&v40 != (uint64_t *)v37 && v37 != 0)
  {
    v37 = 0;
    v38 = 0;
    WTF::fastFree(v21, v16);
  }
  result = v36;
  if (v36)
  {
    *((_QWORD *)v36 + 1) = 0;
    v36 = 0;
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v16);
    else
      --*(_DWORD *)result;
  }
  if (*((_DWORD *)this + 6) == 1)
    return (WTF *)(*(uint64_t (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)this + 72))(this);
  --*((_DWORD *)this + 6);
  return result;
}

WTF *WebCore::EventTarget::dispatchEvent(WebCore::EventTarget *this, WebCore::Event *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::EventTarget *v7;
  int v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  void *v12;
  void *v13;
  WTF *v14;
  WTF *result;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  WebCore::EventPath::EventPath((WebCore::EventPath *)&v17, this);
  if ((*((_BYTE *)this + 22) & 2) != 0)
    *((_DWORD *)this + 6) += 2;
  else
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)this + 88))(this);
  v5 = *((_QWORD *)a2 + 6);
  if ((WebCore::EventTarget *)v5 == this)
  {
    if ((*((_BYTE *)this + 22) & 2) != 0)
    {
      if (*((_DWORD *)this + 6) == 2)
      {
        if ((*((_WORD *)this + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(this);
      }
      else
      {
        *((_DWORD *)this + 6) -= 2;
      }
    }
    else
    {
      (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)this + 96))(this);
    }
  }
  else
  {
    *((_QWORD *)a2 + 6) = this;
    if (!v5)
      goto LABEL_37;
    if ((*(_BYTE *)(v5 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    }
    if (*((_QWORD *)a2 + 6))
LABEL_37:
      (*(void (**)(WebCore::Event *))(*(_QWORD *)a2 + 176))(a2);
  }
  if ((*((_BYTE *)this + 22) & 2) != 0)
    *((_DWORD *)this + 6) += 2;
  else
    (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)this + 88))(this);
  v6 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = this;
  v7 = this;
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 22) & 2) != 0)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    }
    v7 = (WebCore::EventTarget *)*((_QWORD *)a2 + 4);
    if (!v7)
      goto LABEL_14;
  }
  v16 = *((_QWORD *)v7 + 2);
  if ((v16 & 0x2000000000000) != 0)
    v8 = (v16 >> 41) & 0x800 | 0x2000;
  else
LABEL_14:
    v8 = 0x2000;
  *((_DWORD *)a2 + 5) = v8 | *((_DWORD *)a2 + 5) & 0xFFFFC77F;
  v9 = v17;
  if (v17)
    goto LABEL_19;
  v9 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = &v17;
  v10 = v17;
  v17 = v9;
  if (!v10)
    goto LABEL_19;
  if (*(_DWORD *)v10 != 1)
  {
    --*(_DWORD *)v10;
LABEL_19:
    ++*(_DWORD *)v9;
    goto LABEL_20;
  }
  WTF::fastFree(v10, v4);
  v9 = v17;
  if (v17)
    goto LABEL_19;
LABEL_20:
  v11 = (WTF *)*((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v9;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
      WTF::fastFree(v11, v4);
    else
      --*(_DWORD *)v11;
  }
  WebCore::EventTarget::fireEventListeners(this, a2, 0);
  WebCore::EventTarget::fireEventListeners(this, a2, 1);
  WebCore::Event::resetAfterDispatch(a2, v12);
  if (v20)
    WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v18, (WTF *)((char *)v18 + 64 * (unint64_t)v20));
  v14 = v18;
  if (&v21 != (uint64_t *)v18 && v18)
  {
    v18 = 0;
    v19 = 0;
    WTF::fastFree(v14, v13);
  }
  result = v17;
  if (v17)
  {
    *((_QWORD *)v17 + 1) = 0;
    v17 = 0;
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v13);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::VisualViewport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

uint64_t WebCore::HTMLScriptElement::dispatchLoadEvent(WebCore::HTMLScriptElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Event *v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;
  uint64_t result;

  *(_WORD *)((char *)this + 133) |= 8u;
  v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
    v3 = WebCore::threadGlobalDataSlow(this);
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
    v4 = *(_QWORD *)(v3 + 40);
  }
  v5 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v5);
  *(_QWORD *)v5 = off_1E33A4B48;
  *(_QWORD *)(v5 + 8) = 0;
  v8 = *(_DWORD *)(v5 + 20) & 0xFFC00000 | 0x1E8200;
  v9 = *(_QWORD *)(v4 + 1104) != 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_DWORD *)(v5 + 20) = v8 | v9;
  v10 = *(_DWORD **)(v4 + 1104);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v5 + 24) = v10;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = 0;
  result = WebCore::EventDispatcher::dispatchEvent((WebCore::EventNames **)this, (WebCore::Node *)v5, v6);
  if (*(_DWORD *)(v5 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  --*(_DWORD *)(v5 + 16);
  return result;
}

uint64_t WebCore::EventDispatcher::dispatchEvent(WebCore::EventNames **this, WebCore::Node *a2, WebCore::Event *a3)
{
  WebCore::EventNames **v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  char v8;
  unint64_t StatusReg;
  uint64_t v10;
  WebCore::EventNames **v11;
  WebCore::EventNames *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _BOOL4 hasEventListenersOfType;
  uint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t Ref;
  uint64_t v50;
  int v51;
  WebCore::EventNames **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::EventNames ***v57;
  int v58;
  char v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v64;
  int v65;
  WebCore::EventNames **v66;
  uint64_t v67;
  char v68;
  WebCore::Node *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  WebCore::Node *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  int *v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  WebCore::Node *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  int v103;
  int v104;
  uint64_t result;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  WebCore::Node *v122;
  uint64_t v123;
  uint64_t v124;
  WebCore::Node *v125;
  WTF *v126;
  WebCore::EventNames *v127;
  WebCore::EventNames *v128;
  WebCore::EventNames *v129;
  int v130;
  BOOL v131;
  int v132;
  _BOOL4 v133;
  _DWORD *v134;
  int v135;
  WebCore::Node *v136;
  WTF *v137;
  WTF *v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  WebCore::Node *v142;

  v4 = this;
  *((_DWORD *)this + 6) += 2;
  v5 = *(_QWORD *)(*((_QWORD *)this[5] + 1) + 528);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 8)) == 0)
  {
    v7 = 0;
    goto LABEL_202;
  }
  v7 = *(_DWORD **)(v6 + 288);
  if (!v7)
  {
LABEL_202:
    v8 = 1;
    goto LABEL_5;
  }
  v8 = 0;
  ++v7[2];
LABEL_5:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (v11 = *(WebCore::EventNames ***)(v10 + 96)) == 0)
  {
    this = (WebCore::EventNames **)WebCore::threadGlobalDataSlow((WebCore *)this);
    v11 = this;
  }
  v12 = v11[5];
  if (!v12)
  {
    this = WebCore::ThreadGlobalData::initializeEventNames(v11);
    v12 = v11[5];
  }
  v13 = *((_QWORD *)v12 + 319);
  if (v13)
  {
    v14 = *((_DWORD *)v12 + 640);
    v15 = v14 - 1;
    v16 = *((_DWORD *)v12 + 642);
    v17 = *((_QWORD *)a2 + 3);
    v18 = *(_DWORD *)(v17 + 16);
    v19 = (v16 ^ (v18 >> 8)) & (v14 - 1);
    v20 = *(_QWORD *)(v13 + 16 * v19);
    if (v20)
    {
      v21 = v18 >> 8;
      v22 = -1;
      do
      {
        v23 = *(_DWORD *)(v20 + 16);
        this = (WebCore::EventNames **)(((_DWORD)v19 + v14 - ((v16 ^ (v23 >> 8)) & v15)) & v15);
        if (++v22 > this)
          break;
        if (v20 == v17 && v23 >> 8 == v21)
        {
          v24 = *(_DWORD *)(v13 + 16 * v19 + 8);
          goto LABEL_19;
        }
        v19 = ((_DWORD)v19 + 1) & v15;
        v20 = *(_QWORD *)(v13 + 16 * v19);
      }
      while (v20);
    }
  }
  v24 = 0;
LABEL_19:
  v25 = *((_QWORD *)v4[5] + 1);
  v26 = *(_QWORD *)(v25 + 3296);
  if (v26)
  {
    v27 = *(_DWORD *)(v25 + 3304);
    v28 = v27 - 1;
    v29 = *(_DWORD *)(v25 + 3312);
    v30 = *((_QWORD *)a2 + 3);
    v31 = *(_DWORD *)(v30 + 16);
    v32 = (v29 ^ (v31 >> 8)) & (v27 - 1);
    v33 = *(_QWORD *)(v26 + 16 * v32);
    if (v33)
    {
      v34 = v31 >> 8;
      v35 = -1;
      do
      {
        v36 = *(_DWORD *)(v33 + 16);
        this = (WebCore::EventNames **)(((_DWORD)v32 + v27 - ((v29 ^ (v36 >> 8)) & v28)) & v28);
        if (++v35 > this)
          break;
        if (v33 == v30 && v36 >> 8 == v34)
        {
          if (!*(_DWORD *)(v26 + 16 * v32 + 8))
            break;
          hasEventListenersOfType = 1;
          goto LABEL_29;
        }
        v32 = ((_DWORD)v32 + 1) & v28;
        v33 = *(_QWORD *)(v26 + 16 * v32);
      }
      while (v33);
    }
  }
  v94 = *(_QWORD *)(StatusReg + 736);
  if (!v94 || (v95 = *(_QWORD *)(v94 + 96)) == 0)
    v95 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v96 = *(WTF::StringImpl ***)(v95 + 40);
  if (!v96)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v95);
    v96 = *(WTF::StringImpl ***)(v95 + 40);
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  if (v97 == v96[16])
  {
    v99 = v96 + 289;
  }
  else if (v97 == v96[18])
  {
    v99 = v96 + 291;
  }
  else if (v97 == v96[17])
  {
    v99 = v96 + 290;
  }
  else if (v97 == v96[266])
  {
    v99 = v96 + 293;
  }
  else
  {
    v98 = v96[314];
    v99 = v96 + 158;
    if (v97 != v98)
      v99 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  }
  v100 = *v99;
  if (*v99)
  {
    v101 = *(_DWORD *)v100;
    *(_DWORD *)v100 += 2;
    hasEventListenersOfType = WebCore::Document::hasEventListenersOfType(v25, (uint64_t)v100);
    if (v101)
      *(_DWORD *)v100 = v101;
    else
      WTF::StringImpl::destroy(v100, v102);
  }
  else
  {
    hasEventListenersOfType = 0;
  }
LABEL_29:
  if ((*((_BYTE *)v4 + 22) & 0x10) != 0)
  {
    LOBYTE(v39) = 1;
  }
  else
  {
    v38 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 152))(a2);
    if (v38 && (v107 = *(_QWORD *)(v38 + 16), (v107 & 0x2000000000000) != 0))
      v39 = (v107 >> 52) & 1;
    else
      LOBYTE(v39) = 0;
  }
  v40 = v24 < 0 || hasEventListenersOfType;
  if ((v40 & 1) != 0)
  {
    v41 = 0;
    goto LABEL_37;
  }
  v103 = *(_DWORD *)(*((_QWORD *)v4[5] + 1) + 3320);
  v41 = v103 == 0;
  if (v103)
    LOBYTE(v39) = 1;
  if ((v39 & 1) != 0)
  {
LABEL_37:
    WebCore::EventPath::EventPath((WebCore::EventPath *)&v137, (WebCore::Node *)v4, a2);
    if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4[5] + 1) + 680) + 696) & 0x20) == 0
      || (*((_BYTE *)a2 + 21) & 2) == 0
      || !(*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 88))(a2))
    {
      goto LABEL_40;
    }
    if ((unsigned __int16)v24 > 0x97u)
    {
      if ((unsigned __int16)v24 != 158 && (unsigned __int16)v24 != 152)
        goto LABEL_40;
    }
    else if ((unsigned __int16)v24 != 51 && (unsigned __int16)v24 != 74)
    {
      goto LABEL_40;
    }
    WebCore::EventPath::adjustForDisabledFormControl((uint64_t)&v137);
LABEL_40:
    v43 = (unint64_t)v140 << 6;
    do
    {
      v44 = v43 - 64;
      if (!v43)
        goto LABEL_45;
      v45 = *(_QWORD *)((char *)v138 + v43 - 48);
      v43 -= 64;
    }
    while (!v45);
    if ((~*(_QWORD *)(v45 + 16) & 0x12000000000000) != 0)
    {
      v46 = *(_QWORD *)((char *)v138 + v44 + 24);
      if (v46 && (v108 = *(_QWORD *)(v46 + 16), (v108 & 0x2000000000000) != 0))
        v47 = (v108 >> 52) & 1;
      else
LABEL_45:
        LODWORD(v47) = 0;
      if (!v41)
      {
LABEL_47:
        *((_DWORD *)a2 + 5) &= ~0x80u;
        v48 = *((unsigned __int16 *)v4 + 14);
        if ((~v48 & 0x408) == 0)
        {
          if ((*((unsigned int (**)(WebCore::EventNames **))*v4 + 46))(v4))
          {
            v127 = v4[14];
            if (v127)
            {
              Ref = *((_QWORD *)v127 + 1);
              if (Ref)
LABEL_49:
                *(_DWORD *)(Ref + 24) += 2;
            }
            else
            {
              Ref = 0;
            }
            v50 = *((_QWORD *)a2 + 6);
            if (v50 == Ref)
            {
              if (!Ref)
                goto LABEL_280;
              if ((*(_BYTE *)(Ref + 22) & 2) != 0)
              {
                if (*(_DWORD *)(Ref + 24) == 2)
                {
                  if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
                    Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref);
                }
                else
                {
                  *(_DWORD *)(Ref + 24) -= 2;
                }
              }
              else
              {
                Ref = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Ref + 96))(Ref);
              }
            }
            else
            {
              *((_QWORD *)a2 + 6) = Ref;
              if (v50)
              {
                if ((*(_BYTE *)(v50 + 22) & 2) != 0)
                {
                  if (*(_DWORD *)(v50 + 24) == 2)
                  {
                    if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v50);
                  }
                  else
                  {
                    *(_DWORD *)(v50 + 24) -= 2;
                  }
                }
                else
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 96))(v50);
                }
                Ref = *((_QWORD *)a2 + 6);
              }
              if (Ref)
                Ref = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 176))(a2);
            }
            if (*((_QWORD *)a2 + 6))
            {
              v136 = 0;
              v135 = 0;
              v51 = *((_DWORD *)a2 + 5);
              HIBYTE(v135) = (v51 & 0x200) != 0;
              if ((*((_BYTE *)v4 + 28) & 0x10) == 0
                || (v52 = v4, *((_QWORD *)v4[12] + 3) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)))
              {
                if ((v51 & 2) == 0)
                  goto LABEL_75;
                v53 = *(_QWORD *)(StatusReg + 736);
                if (!v53 || (v54 = *(_QWORD *)(v53 + 96)) == 0)
                  v54 = WebCore::threadGlobalDataSlow((WebCore *)Ref);
                v55 = *(_QWORD *)(v54 + 40);
                if (!v55)
                {
                  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v54);
                  v55 = *(_QWORD *)(v54 + 40);
                }
                if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v55 + 400) || (v56 = v140) == 0)
                {
LABEL_75:
                  v52 = 0;
                  goto LABEL_76;
                }
                v57 = (WebCore::EventNames ***)((char *)v138 + 8);
                while (1)
                {
                  v52 = *v57;
                  if (*v57)
                  {
                    if ((*((_BYTE *)v52 + 22) & 2) != 0
                      && (*((_WORD *)v52 + 14) & 0x10) != 0
                      && *((_QWORD *)v52[12] + 3) == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                    {
                      break;
                    }
                  }
                  v57 += 8;
                  if (!--v56)
                    goto LABEL_75;
                }
              }
              *((_DWORD *)v52 + 6) += 2;
              if ((*((_BYTE *)a2 + 21) & 2) == 0 || ((_BYTE)v52[20] & 0x18) == 0)
                WebCore::HTMLInputElement::willDispatchEvent(v52, (uint64_t)a2, &v135);
LABEL_76:
              v58 = *((_DWORD *)a2 + 5);
              if ((v58 & 0x30) != 0 || v140 == 0)
                goto LABEL_93;
              if ((v58 & 0x200) == 0
                || (v74 = *(_QWORD *)(*((_QWORD *)v4[5] + 1) + 528)) == 0
                || (v75 = *(_QWORD *)(v74 + 8)) == 0)
              {
                v60 = 0;
                goto LABEL_82;
              }
              v76 = (unsigned int *)(v75 + 8);
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 + 1, v76));
              v78 = *(_QWORD *)(*(_QWORD *)(v75 + 128) + 8);
              if (v78)
                v79 = *(_BYTE *)(v78 + 144) == 0;
              else
                v79 = 0;
              if (!v79)
              {
                v60 = 0;
                do
                {
LABEL_140:
                  v90 = __ldaxr(v76);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v76));
                if (!v91)
                {
                  atomic_store(1u, v76);
                  v92 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v92 = off_1E31FE290;
                  *((_QWORD *)v92 + 1) = v76;
                  v142 = v92;
                  WTF::ensureOnMainThread();
                  v93 = (uint64_t)v142;
                  v142 = 0;
                  if (v93)
                    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
                }
LABEL_82:
                if ((v60 & 1) != 0 || !hasEventListenersOfType)
                  goto LABEL_93;
                v61 = v137;
                if (!v137)
                {
                  v61 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v61 = 1;
                  *((_QWORD *)v61 + 1) = &v137;
                  v62 = v137;
                  v137 = v61;
                  if (v62)
                  {
                    if (*(_DWORD *)v62 == 1)
                    {
                      WTF::fastFree(v62, v42);
                      v61 = v137;
                      if (!v137)
                        goto LABEL_89;
                    }
                    else
                    {
                      --*(_DWORD *)v62;
                    }
                  }
                }
                ++*(_DWORD *)v61;
LABEL_89:
                v63 = (WTF *)*((_QWORD *)a2 + 5);
                *((_QWORD *)a2 + 5) = v61;
                if (v63)
                {
                  if (*(_DWORD *)v63 == 1)
                    WTF::fastFree(v63, v42);
                  else
                    --*(_DWORD *)v63;
                }
                WebCore::dispatchEventInDOM((uint64_t)a2, (uint64_t)&v137);
LABEL_93:
                WebCore::Event::resetAfterDispatch(a2, v42);
                if ((_BYTE)v135)
                  (*(void (**)(WebCore::EventNames *, WebCore::Node *, int *))(*(_QWORD *)v52[30] + 336))(v52[30], a2, &v135);
                if ((v24 & 0x80000000) == 0 || (*((_WORD *)a2 + 10) & 0x1C0) != 0)
                {
LABEL_272:
                  if ((_DWORD)v47)
                    WebCore::resetAfterDispatchInShadowTree(a2, (WebCore::Event *)v42);
                  if (v52)
                  {
                    if (*((_DWORD *)v52 + 6) == 2)
                    {
                      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v52);
                    }
                    else
                    {
                      *((_DWORD *)v52 + 6) -= 2;
                    }
                  }
                  v125 = v136;
                  v136 = 0;
                  if (v125)
                  {
                    if (*((_DWORD *)v125 + 6) == 2)
                    {
                      if ((*((_WORD *)v125 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v125);
                    }
                    else
                    {
                      *((_DWORD *)v125 + 6) -= 2;
                    }
                  }
                  goto LABEL_280;
                }
                v64 = *((_QWORD *)a2 + 6);
                if (v64)
                {
                  if ((*(_BYTE *)(v64 + 22) & 2) != 0)
                    *(_DWORD *)(v64 + 24) += 2;
                  else
                    (*(void (**)(_QWORD))(*(_QWORD *)v64 + 88))(*((_QWORD *)a2 + 6));
                }
                v65 = *((unsigned __int16 *)v4 + 14);
                if ((~v65 & 0x408) == 0)
                {
                  if ((*((unsigned int (**)(WebCore::EventNames **))*v4 + 46))(v4))
                  {
                    v128 = v4[14];
                    if (!v128)
                    {
                      v66 = 0;
                      goto LABEL_103;
                    }
                    v66 = (WebCore::EventNames **)*((_QWORD *)v128 + 1);
                    if (!v66)
                      goto LABEL_103;
LABEL_102:
                    *((_DWORD *)v66 + 6) += 2;
LABEL_103:
                    v67 = *((_QWORD *)a2 + 6);
                    if ((WebCore::EventNames **)v67 == v66)
                    {
                      if (v66)
                      {
                        if ((*((_BYTE *)v66 + 22) & 2) != 0)
                        {
                          if (*((_DWORD *)v66 + 6) == 2)
                          {
                            if ((*((_WORD *)v66 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v66);
                          }
                          else
                          {
                            *((_DWORD *)v66 + 6) -= 2;
                          }
                        }
                        else
                        {
                          (*((void (**)(WebCore::EventNames **))*v66 + 12))(v66);
                        }
                      }
                    }
                    else
                    {
                      *((_QWORD *)a2 + 6) = v66;
                      if (v67)
                      {
                        if ((*(_BYTE *)(v67 + 22) & 2) != 0)
                        {
                          if (*(_DWORD *)(v67 + 24) == 2)
                          {
                            if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v67);
                          }
                          else
                          {
                            *(_DWORD *)(v67 + 24) -= 2;
                          }
                        }
                        else
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 96))(v67);
                        }
                        v66 = (WebCore::EventNames **)*((_QWORD *)a2 + 6);
                      }
                      if (v66)
                        (*(void (**)(WebCore::Node *))(*(_QWORD *)a2 + 176))(a2);
                    }
                    v134 = v7;
                    if (v140)
                    {
                      v132 = v47;
                      v68 = v8;
                      v69 = *(WebCore::Node **)v138;
                      *((_DWORD *)v69 + 6) = *(_DWORD *)(*(_QWORD *)v138 + 24) + 2;
                      (*(void (**)(WebCore::Node *, WebCore::Node *))(*(_QWORD *)v69 + 344))(v69, a2);
                      if ((*((_DWORD *)a2 + 5) & 0xC2) == 2 && v140 >= 2)
                      {
                        v70 = (unint64_t)v140 << 6;
                        v71 = 1;
                        v72 = 64;
                        while (1)
                        {
                          if (v71 >= v140)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19427E130);
                          }
                          v73 = *(WebCore::Node **)((char *)v138 + v72);
                          *((_DWORD *)v73 + 6) += 2;
                          v142 = v73;
                          (*(void (**)(WebCore::Node *, WebCore::Node *))(*(_QWORD *)v73 + 344))(v73, a2);
                          if ((*((_BYTE *)a2 + 20) & 0xC0) != 0)
                            break;
                          if (*((_DWORD *)v73 + 6) == 2)
                          {
                            if ((*((_WORD *)v73 + 15) & 0x400) == 0)
                              WebCore::Node::removedLastRef(v73);
                          }
                          else
                          {
                            *((_DWORD *)v73 + 6) -= 2;
                          }
                          ++v71;
                          v72 += 64;
                          if (v70 == v72)
                            goto LABEL_265;
                        }
                        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v142);
                      }
LABEL_265:
                      if (*((_DWORD *)v69 + 6) == 2)
                      {
                        v8 = v68;
                        LODWORD(v47) = v132;
                        if ((*((_WORD *)v69 + 15) & 0x400) == 0)
                          WebCore::Node::removedLastRef(v69);
                      }
                      else
                      {
                        *((_DWORD *)v69 + 6) -= 2;
                        v8 = v68;
                        LODWORD(v47) = v132;
                      }
                    }
                    v124 = *((_QWORD *)a2 + 6);
                    v7 = v134;
                    if (v124 == v64)
                    {
                      if (v64)
                      {
                        if ((*(_BYTE *)(v64 + 22) & 2) != 0)
                        {
                          if (*(_DWORD *)(v64 + 24) == 2)
                          {
                            if ((*(_WORD *)(v64 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v64);
                          }
                          else
                          {
                            *(_DWORD *)(v64 + 24) -= 2;
                          }
                        }
                        else
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 96))(v64);
                        }
                      }
                    }
                    else
                    {
                      *((_QWORD *)a2 + 6) = v64;
                      if (v124)
                      {
                        if ((*(_BYTE *)(v124 + 22) & 2) != 0)
                        {
                          if (*(_DWORD *)(v124 + 24) == 2)
                          {
                            if ((*(_WORD *)(v124 + 30) & 0x400) == 0)
                              WebCore::Node::removedLastRef((WebCore::Node *)v124);
                          }
                          else
                          {
                            *(_DWORD *)(v124 + 24) -= 2;
                          }
                        }
                        else
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v124 + 96))(v124);
                        }
                        v64 = *((_QWORD *)a2 + 6);
                      }
                      if (v64)
                        (*(void (**)(WebCore::Node *))(*(_QWORD *)a2 + 176))(a2);
                    }
                    goto LABEL_272;
                  }
                  LOWORD(v65) = *((_WORD *)v4 + 14);
                }
                v66 = v4;
                if ((v65 & 0x20) != 0)
                {
                  v114 = *(_QWORD *)v4[5];
                  v66 = v4;
                  if (v114)
                  {
                    v66 = v4;
                    if ((*(_WORD *)(v114 + 28) & 0x80) != 0)
                    {
                      v66 = v4;
                      if (!*(_BYTE *)(v114 + 193))
                      {
                        v115 = *(_QWORD *)(v114 + 200);
                        v66 = v4;
                        if (v115)
                        {
                          v116 = *(_QWORD *)(v115 + 8);
                          v66 = v4;
                          if (v116)
                          {
                            v66 = v4;
                            if ((*(_WORD *)(v116 + 28) & 0x20) != 0)
                            {
                              v66 = v4;
                              if (*(_QWORD *)(*(_QWORD *)(v116 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag
                                                                                           + 24))
                              {
                                v117 = *(_DWORD *)(v116 + 24);
                                *(_DWORD *)(v116 + 24) = v117 + 2;
                                if (v117)
                                {
                                  *(_DWORD *)(v116 + 24) = v117;
                                }
                                else if ((*(_WORD *)(v116 + 30) & 0x400) == 0)
                                {
                                  WebCore::Node::removedLastRef((WebCore::Node *)v116);
                                }
                                v66 = (WebCore::EventNames **)v116;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_102;
              }
              v133 = hasEventListenersOfType;
              v80 = v24;
              v81 = v47;
              v82 = (unsigned int *)(v78 + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 + 1, v82));
              v84 = *(int **)(v78 + 280);
              v85 = *v84;
              v86 = *v84 + 1;
              *v84 = v86;
              if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v84 + 1) + 8) + 136) + 696) & 0x2000000) != 0)
              {
                if (v86)
                {
                  v87 = *((unsigned __int8 *)v84 + 80);
                  *v84 = v85;
                  if (v87)
                  {
                    v60 = 0;
                  }
                  else if ((*(unsigned int (**)(WebCore::Node *))(*(_QWORD *)a2 + 104))(a2))
                  {
                    v130 = *((_DWORD *)a2 + 21);
                    if (v130)
                      v131 = v130 == 3;
                    else
                      v131 = 1;
                    v60 = v131;
                  }
                  else if (((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 40))(a2) & 1) != 0
                         || ((*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
                  {
                    v60 = 1;
                  }
                  else
                  {
                    v60 = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 80))(a2);
                  }
                  goto LABEL_137;
                }
              }
              else if (v86)
              {
                v60 = 0;
                *v84 = v85;
                do
                {
LABEL_137:
                  v88 = __ldaxr(v82);
                  v89 = v88 - 1;
                }
                while (__stlxr(v89, v82));
                if (!v89)
                {
                  atomic_store(1u, v82);
                  v122 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v122 = off_1E31FE290;
                  *((_QWORD *)v122 + 1) = v82;
                  v142 = v122;
                  WTF::ensureOnMainThread();
                  v123 = (uint64_t)v142;
                  v142 = 0;
                  if (v123)
                    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
                }
                LODWORD(v47) = v81;
                v24 = v80;
                hasEventListenersOfType = v133;
                goto LABEL_140;
              }
              __break(0xC471u);
              JUMPOUT(0x19427E024);
            }
LABEL_280:
            v126 = v138;
            if (v140)
            {
              WTF::VectorDestructor<true,WebCore::EventContext>::destruct((uint64_t)v138, (WTF *)((char *)v138 + 64 * (unint64_t)v140));
              v126 = v138;
            }
            if (&v141 != (uint64_t *)v126 && v126)
            {
              v138 = 0;
              v139 = 0;
              WTF::fastFree(v126, v42);
            }
            result = (uint64_t)v137;
            if (v137)
            {
              *((_QWORD *)v137 + 1) = 0;
              v137 = 0;
              if (*(_DWORD *)result == 1)
                result = WTF::fastFree((WTF *)result, v42);
              else
                --*(_DWORD *)result;
            }
            goto LABEL_286;
          }
          LOWORD(v48) = *((_WORD *)v4 + 14);
        }
        Ref = (uint64_t)v4;
        if ((v48 & 0x20) != 0)
        {
          v109 = *(_QWORD *)v4[5];
          v110 = !v109 || (*(_WORD *)(v109 + 28) & 0x80) == 0;
          Ref = (uint64_t)v4;
          if (!v110)
          {
            Ref = (uint64_t)v4;
            if (!*(_BYTE *)(v109 + 193))
            {
              v111 = *(_QWORD *)(v109 + 200);
              Ref = (uint64_t)v4;
              if (v111)
              {
                v112 = *(_QWORD *)(v111 + 8);
                Ref = (uint64_t)v4;
                if (v112)
                {
                  Ref = (uint64_t)v4;
                  if ((*(_WORD *)(v112 + 28) & 0x20) != 0)
                  {
                    Ref = (uint64_t)v4;
                    if (*(_QWORD *)(*(_QWORD *)(v112 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                    {
                      v113 = *(_DWORD *)(v112 + 24);
                      *(_DWORD *)(v112 + 24) = v113 + 2;
                      if (v113)
                      {
                        *(_DWORD *)(v112 + 24) = v113;
                      }
                      else if ((*(_WORD *)(v112 + 30) & 0x400) == 0)
                      {
                        WebCore::Node::removedLastRef((WebCore::Node *)v112);
                      }
                      Ref = v112;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_49;
      }
      if (!(_DWORD)v47)
        goto LABEL_280;
    }
    else if (!v41)
    {
      LODWORD(v47) = 1;
      goto LABEL_47;
    }
    WebCore::resetAfterDispatchInShadowTree(a2, (WebCore::Event *)v42);
    goto LABEL_280;
  }
  *((_DWORD *)a2 + 5) &= ~0x80u;
  v104 = *((unsigned __int16 *)v4 + 14);
  if ((~v104 & 0x408) != 0)
    goto LABEL_162;
  if (!(*((unsigned int (**)(WebCore::EventNames **))*v4 + 46))(v4))
  {
    LOWORD(v104) = *((_WORD *)v4 + 14);
LABEL_162:
    result = (uint64_t)v4;
    if ((v104 & 0x20) != 0)
    {
      v118 = *(_QWORD *)v4[5];
      result = (uint64_t)v4;
      if (v118)
      {
        result = (uint64_t)v4;
        if ((*(_WORD *)(v118 + 28) & 0x80) != 0)
        {
          result = (uint64_t)v4;
          if (!*(_BYTE *)(v118 + 193))
          {
            v119 = *(_QWORD *)(v118 + 200);
            result = (uint64_t)v4;
            if (v119)
            {
              v120 = *(_QWORD *)(v119 + 8);
              result = (uint64_t)v4;
              if (v120)
              {
                result = (uint64_t)v4;
                if ((*(_WORD *)(v120 + 28) & 0x20) != 0)
                {
                  result = (uint64_t)v4;
                  if (*(_QWORD *)(*(_QWORD *)(v120 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::useTag + 24))
                  {
                    v121 = *(_DWORD *)(v120 + 24);
                    *(_DWORD *)(v120 + 24) = v121 + 2;
                    if (v121)
                    {
                      *(_DWORD *)(v120 + 24) = v121;
                    }
                    else if ((*(_WORD *)(v120 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v120);
                    }
                    result = v120;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_163;
  }
  v129 = v4[14];
  if (v129)
  {
    result = *((_QWORD *)v129 + 1);
    if (result)
LABEL_163:
      *(_DWORD *)(result + 24) += 2;
  }
  else
  {
    result = 0;
  }
  v106 = *((_QWORD *)a2 + 6);
  if (v106 == result)
  {
    if (result)
    {
      if ((*(_BYTE *)(result + 22) & 2) != 0)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
      }
    }
  }
  else
  {
    *((_QWORD *)a2 + 6) = result;
    if (v106)
    {
      if ((*(_BYTE *)(v106 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v106 + 24) == 2)
        {
          if ((*(_WORD *)(v106 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v106);
        }
        else
        {
          *(_DWORD *)(v106 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v106 + 96))(v106);
      }
      result = *((_QWORD *)a2 + 6);
    }
    if (result)
      result = (*(uint64_t (**)(WebCore::Node *))(*(_QWORD *)a2 + 176))(a2);
  }
LABEL_286:
  if ((v8 & 1) == 0)
  {
    if (v7[2] == 1)
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  if (*((_DWORD *)v4 + 6) == 2)
  {
    if ((*((_WORD *)v4 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *((_DWORD *)v4 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::Event::relatedTarget(WebCore::Event *this)
{
  return 0;
}

uint64_t WebCore::Event::isMouseEvent(WebCore::Event *this)
{
  return 0;
}

uint64_t *WebCore::Event::resetAfterDispatch(WebCore::Event *this, void *a2)
{
  WTF *v3;
  uint64_t *result;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  WebCore::ScriptExecutionContext *v9;

  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  result = (uint64_t *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    if ((*((_BYTE *)result + 22) & 2) != 0)
    {
      if (*((_DWORD *)result + 6) == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          result = (uint64_t *)WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *((_DWORD *)result + 6) -= 2;
      }
    }
    else
    {
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 96))(result);
    }
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      v5 = *(_QWORD *)(v5 + 16);
      if ((v5 & 0x2000000000000) != 0)
        LODWORD(v5) = (v5 >> 41) & 0x800;
      else
        LODWORD(v5) = 0;
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  *((_DWORD *)this + 5) = *((_DWORD *)this + 5) & 0xFFFFC7CF | v5;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = *((_QWORD *)this + 6);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 22) & 2) != 0)
      {
        v8 = WebCore::Document::contextDocument(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8));
        result = (uint64_t *)WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 + 192), v9);
        if (result)
          return WebCore::InspectorInstrumentation::eventDidResetAfterDispatchImpl((uint64_t)result, this);
      }
    }
  }
  return result;
}

uint64_t WTF::VectorDestructor<true,WebCore::EventContext>::destruct(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF **v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF **v19;
  WTF **v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WTF **v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  uint64_t *v37;
  unsigned int *v38;
  uint64_t *v39;
  unsigned int *v40;
  uint64_t *v41;
  unsigned int *v42;

  if ((WTF::StringImpl *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = v3[6];
      v3[6] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 1)
        {
          v10 = *(unsigned int *)(v4 + 20);
          if ((_DWORD)v10)
          {
            v11 = *(WTF ***)(v4 + 8);
            v12 = &v11[v10];
            do
            {
              v13 = *v11;
              *v11 = 0;
              if (v13)
              {
                if (*(_DWORD *)v13 == 1)
                {
                  v14 = *((_QWORD *)v13 + 2);
                  *((_QWORD *)v13 + 2) = 0;
                  if (v14)
                  {
                    if ((*(_BYTE *)(v14 + 22) & 2) != 0)
                    {
                      if (*(_DWORD *)(v14 + 24) == 2)
                      {
                        if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v14);
                      }
                      else
                      {
                        *(_DWORD *)(v14 + 24) -= 2;
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 96))(v14);
                    }
                  }
                  v15 = (WTF *)*((_QWORD *)v13 + 1);
                  *((_QWORD *)v13 + 1) = 0;
                  if (v15)
                  {
                    if (*(_DWORD *)v15 == 1)
                    {
                      v37 = (uint64_t *)*((_QWORD *)v15 + 2);
                      *((_QWORD *)v15 + 2) = 0;
                      if (v37)
                      {
                        if (*v37)
                          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v37, a2);
                        WTF::fastFree((WTF *)v37, a2);
                      }
                      v38 = (unsigned int *)*((_QWORD *)v15 + 1);
                      *((_QWORD *)v15 + 1) = 0;
                      if (v38)
                      {
                        do
                        {
                          v16 = __ldaxr(v38);
                          v17 = v16 - 1;
                        }
                        while (__stlxr(v17, v38));
                        if (!v17)
                        {
                          atomic_store(1u, v38);
                          WTF::fastFree((WTF *)v38, a2);
                        }
                      }
                      WTF::fastFree(v15, a2);
                    }
                    else
                    {
                      --*(_DWORD *)v15;
                    }
                  }
                  WTF::fastFree(v13, a2);
                }
                else
                {
                  --*(_DWORD *)v13;
                }
              }
              ++v11;
            }
            while (v11 != v12);
          }
          v34 = *(WTF **)(v4 + 8);
          if (v34)
          {
            *(_QWORD *)(v4 + 8) = 0;
            *(_DWORD *)(v4 + 16) = 0;
            WTF::fastFree(v34, a2);
          }
          WTF::fastFree((WTF *)v4, a2);
        }
        else
        {
          --*(_DWORD *)v4;
        }
      }
      v5 = v3[5];
      v3[5] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          v18 = *(unsigned int *)(v5 + 20);
          if ((_DWORD)v18)
          {
            v19 = *(WTF ***)(v5 + 8);
            v20 = &v19[v18];
            do
            {
              v21 = *v19;
              *v19 = 0;
              if (v21)
              {
                if (*(_DWORD *)v21 == 1)
                {
                  v22 = *((_QWORD *)v21 + 2);
                  *((_QWORD *)v21 + 2) = 0;
                  if (v22)
                  {
                    if ((*(_BYTE *)(v22 + 22) & 2) != 0)
                    {
                      if (*(_DWORD *)(v22 + 24) == 2)
                      {
                        if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v22);
                      }
                      else
                      {
                        *(_DWORD *)(v22 + 24) -= 2;
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 96))(v22);
                    }
                  }
                  v23 = (WTF *)*((_QWORD *)v21 + 1);
                  *((_QWORD *)v21 + 1) = 0;
                  if (v23)
                  {
                    if (*(_DWORD *)v23 == 1)
                    {
                      v39 = (uint64_t *)*((_QWORD *)v23 + 2);
                      *((_QWORD *)v23 + 2) = 0;
                      if (v39)
                      {
                        if (*v39)
                          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v39, a2);
                        WTF::fastFree((WTF *)v39, a2);
                      }
                      v40 = (unsigned int *)*((_QWORD *)v23 + 1);
                      *((_QWORD *)v23 + 1) = 0;
                      if (v40)
                      {
                        do
                        {
                          v24 = __ldaxr(v40);
                          v25 = v24 - 1;
                        }
                        while (__stlxr(v25, v40));
                        if (!v25)
                        {
                          atomic_store(1u, v40);
                          WTF::fastFree((WTF *)v40, a2);
                        }
                      }
                      WTF::fastFree(v23, a2);
                    }
                    else
                    {
                      --*(_DWORD *)v23;
                    }
                  }
                  WTF::fastFree(v21, a2);
                }
                else
                {
                  --*(_DWORD *)v21;
                }
              }
              ++v19;
            }
            while (v19 != v20);
          }
          v35 = *(WTF **)(v5 + 8);
          if (v35)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v35, a2);
          }
          WTF::fastFree((WTF *)v5, a2);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      v6 = v3[4];
      v3[4] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          v26 = *(unsigned int *)(v6 + 20);
          if ((_DWORD)v26)
          {
            v27 = *(WTF ***)(v6 + 8);
            v28 = &v27[v26];
            do
            {
              v29 = *v27;
              *v27 = 0;
              if (v29)
              {
                if (*(_DWORD *)v29 == 1)
                {
                  v30 = *((_QWORD *)v29 + 2);
                  *((_QWORD *)v29 + 2) = 0;
                  if (v30)
                  {
                    if ((*(_BYTE *)(v30 + 22) & 2) != 0)
                    {
                      if (*(_DWORD *)(v30 + 24) == 2)
                      {
                        if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v30);
                      }
                      else
                      {
                        *(_DWORD *)(v30 + 24) -= 2;
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 96))(v30);
                    }
                  }
                  v31 = (WTF *)*((_QWORD *)v29 + 1);
                  *((_QWORD *)v29 + 1) = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 1)
                    {
                      v41 = (uint64_t *)*((_QWORD *)v31 + 2);
                      *((_QWORD *)v31 + 2) = 0;
                      if (v41)
                      {
                        if (*v41)
                          WTF::HashTable<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashMap<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>,JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>,WTF::DefaultHash<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>,WTF::HashTraits<JSC::Strong<WebCore::JSDOMWindow,(JSC::ShouldStrongDestructorGrabLock)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::DOMWrapperWorld,WTF::RawPtrTraits<WebCore::DOMWrapperWorld>,WTF::DefaultRefDerefTraits<WebCore::DOMWrapperWorld>>>>::deallocateTable(*v41, a2);
                        WTF::fastFree((WTF *)v41, a2);
                      }
                      v42 = (unsigned int *)*((_QWORD *)v31 + 1);
                      *((_QWORD *)v31 + 1) = 0;
                      if (v42)
                      {
                        do
                        {
                          v32 = __ldaxr(v42);
                          v33 = v32 - 1;
                        }
                        while (__stlxr(v33, v42));
                        if (!v33)
                        {
                          atomic_store(1u, v42);
                          WTF::fastFree((WTF *)v42, a2);
                        }
                      }
                      WTF::fastFree(v31, a2);
                    }
                    else
                    {
                      --*(_DWORD *)v31;
                    }
                  }
                  WTF::fastFree(v29, a2);
                }
                else
                {
                  --*(_DWORD *)v29;
                }
              }
              ++v27;
            }
            while (v27 != v28);
          }
          v36 = *(WTF **)(v6 + 8);
          if (v36)
          {
            *(_QWORD *)(v6 + 8) = 0;
            *(_DWORD *)(v6 + 16) = 0;
            WTF::fastFree(v36, a2);
          }
          WTF::fastFree((WTF *)v6, a2);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      v7 = v3[3];
      v3[3] = 0;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 24) == 2)
        {
          if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v7);
        }
        else
        {
          *(_DWORD *)(v7 + 24) -= 2;
        }
      }
      v8 = v3[2];
      v3[2] = 0;
      if (v8)
      {
        if ((*(_BYTE *)(v8 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v8 + 24) == 2)
          {
            if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v8);
          }
          else
          {
            *(_DWORD *)(v8 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
        }
      }
      v9 = v3[1];
      v3[1] = 0;
      if (v9)
      {
        if ((*(_BYTE *)(v9 + 22) & 2) != 0)
        {
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
        }
      }
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      v3 += 8;
    }
    while (v3 != (uint64_t *)a2);
  }
  return result;
}

uint64_t WebCore::dispatchEventInDOM(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 20);
  v5 = v4 << 6;
  while (v5)
  {
    if (--v4 >= (unint64_t)*(unsigned int *)(a2 + 20))
    {
LABEL_24:
      __break(0xC471u);
      JUMPOUT(0x19427E8CCLL);
    }
    v6 = v5 - 64;
    v7 = *(_QWORD *)(a2 + 8) + v5;
    v8 = v7 - 64;
    if (*(_QWORD *)(v7 - 56) == *(_QWORD *)(v7 - 48))
      v9 = 0x2000;
    else
      v9 = 4096;
    *(_DWORD *)(v3 + 20) = *(_DWORD *)(v3 + 20) & 0xFFFFCFFF | v9;
    result = WebCore::EventContext::handleLocalEvents(v8, (uint64_t *)v3, 0);
    v5 = v6;
    if ((*(_BYTE *)(v3 + 20) & 0x30) != 0)
      return result;
  }
  v10 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *(_DWORD *)(v3 + 20);
    v13 = *(unsigned int *)(a2 + 20);
    while (1)
    {
      result = *(_QWORD *)(a2 + 8) + (v11 << 6);
      if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 16))
      {
        v14 = v12 & 0xFFFFCFFF | 0x2000;
      }
      else
      {
        if ((v12 & 2) == 0)
        {
          if (++v11 >= v10)
            return result;
          goto LABEL_19;
        }
        v14 = v12 | 0x3000;
      }
      *(_DWORD *)(v3 + 20) = v14;
      result = WebCore::EventContext::handleLocalEvents(result, (uint64_t *)v3, 1);
      v12 = *(_DWORD *)(v3 + 20);
      ++v11;
      if ((v12 & 0x30) != 0 || v11 >= v10)
        return result;
      v13 = *(unsigned int *)(a2 + 20);
LABEL_19:
      if (v11 >= v13)
        goto LABEL_24;
    }
  }
  return result;
}

uint64_t WebCore::EventContext::handleLocalEvents(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  WebCore::Node *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  WTF **v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  WTF **v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  WTF **v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  uint64_t v38;
  WTF **v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  WTF **v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::Node *v59;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 22) & 2) != 0)
      *(_DWORD *)(v6 + 24) += 2;
    else
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 88))(*(_QWORD *)(a1 + 16));
    v8 = a2 + 6;
    v7 = a2[6];
    if (v7 == v6)
    {
      if ((*(_BYTE *)(v6 + 22) & 2) != 0)
      {
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
      }
      goto LABEL_8;
    }
    *v8 = v6;
    if (!v7)
    {
LABEL_72:
      (*(void (**)(uint64_t *))(*a2 + 176))(a2);
      goto LABEL_8;
    }
  }
  else
  {
    v8 = a2 + 6;
    v7 = a2[6];
    if (!v7)
      goto LABEL_8;
    *v8 = 0;
  }
  if ((*(_BYTE *)(v7 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  }
  if (*v8)
    goto LABEL_72;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 22) & 2) != 0)
      *(_DWORD *)(v9 + 24) += 2;
    else
      (*(void (**)(_QWORD))(*(_QWORD *)v9 + 88))(*(_QWORD *)(a1 + 8));
  }
  v10 = *(unsigned __int8 *)(a1 + 60);
  result = a2[4];
  a2[4] = v9;
  if (result)
  {
    if ((*(_BYTE *)(result + 22) & 2) != 0)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
    }
  }
  *((_DWORD *)a2 + 5) = *((_DWORD *)a2 + 5) & 0xFFFFF7FF | (v10 << 11);
  if (*(_BYTE *)(a1 + 62))
  {
    v12 = *(WebCore::Node **)(a1 + 24);
    if (v12)
      *((_DWORD *)v12 + 6) += 2;
    v59 = v12;
    (*(void (**)(uint64_t *, WebCore::Node **))(*a2 + 160))(a2, &v59);
    result = (uint64_t)v59;
    v59 = 0;
    if (result)
    {
      if ((*(_BYTE *)(result + 22) & 2) != 0)
      {
        if (*(_DWORD *)(result + 24) == 2)
        {
          if ((*(_WORD *)(result + 30) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)result);
        }
        else
        {
          *(_DWORD *)(result + 24) -= 2;
        }
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
      }
    }
  }
  if (*(_BYTE *)(a1 + 63) != 2)
    goto LABEL_48;
  result = (*(uint64_t (**)(uint64_t *))(*a2 + 120))(a2);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19427EF34);
  }
  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
    *(_DWORD *)v14 += 2;
  v15 = a2[21];
  a2[21] = v14;
  if (!v15)
  {
LABEL_29:
    if (!v14)
      goto LABEL_32;
    goto LABEL_30;
  }
  if (*(_DWORD *)v15 != 1)
  {
    --*(_DWORD *)v15;
    goto LABEL_29;
  }
  v23 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v23)
  {
    v24 = *(WTF ***)(v15 + 8);
    v25 = 8 * v23;
    do
    {
      v26 = *v24;
      *v24 = 0;
      if (v26)
        WTF::RefCounted<WebCore::Touch>::deref(v26, v13);
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  v27 = *(WTF **)(v15 + 8);
  if (v27)
  {
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    WTF::fastFree(v27, v13);
  }
  result = WTF::fastFree((WTF *)v15, v13);
  if (v14)
  {
LABEL_30:
    if (*(_DWORD *)v14 == 1)
    {
      v28 = *(unsigned int *)(v14 + 20);
      if ((_DWORD)v28)
      {
        v29 = *(WTF ***)(v14 + 8);
        v30 = 8 * v28;
        do
        {
          v31 = *v29;
          *v29 = 0;
          if (v31)
            WTF::RefCounted<WebCore::Touch>::deref(v31, v13);
          ++v29;
          v30 -= 8;
        }
        while (v30);
      }
      v32 = *(WTF **)(v14 + 8);
      if (v32)
      {
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 16) = 0;
        WTF::fastFree(v32, v13);
      }
      result = WTF::fastFree((WTF *)v14, v13);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
LABEL_32:
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
    *(_DWORD *)v16 += 2;
  v17 = a2[22];
  a2[22] = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v33 = *(unsigned int *)(v17 + 20);
      if ((_DWORD)v33)
      {
        v34 = *(WTF ***)(v17 + 8);
        v35 = 8 * v33;
        do
        {
          v36 = *v34;
          *v34 = 0;
          if (v36)
            WTF::RefCounted<WebCore::Touch>::deref(v36, v13);
          ++v34;
          v35 -= 8;
        }
        while (v35);
      }
      v37 = *(WTF **)(v17 + 8);
      if (v37)
      {
        *(_QWORD *)(v17 + 8) = 0;
        *(_DWORD *)(v17 + 16) = 0;
        WTF::fastFree(v37, v13);
      }
      result = WTF::fastFree((WTF *)v17, v13);
      if (!v16)
        goto LABEL_40;
      goto LABEL_38;
    }
    --*(_DWORD *)v17;
  }
  if (v16)
  {
LABEL_38:
    if (*(_DWORD *)v16 == 1)
    {
      v38 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v38)
      {
        v39 = *(WTF ***)(v16 + 8);
        v40 = 8 * v38;
        do
        {
          v41 = *v39;
          *v39 = 0;
          if (v41)
            WTF::RefCounted<WebCore::Touch>::deref(v41, v13);
          ++v39;
          v40 -= 8;
        }
        while (v40);
      }
      v42 = *(WTF **)(v16 + 8);
      if (v42)
      {
        *(_QWORD *)(v16 + 8) = 0;
        *(_DWORD *)(v16 + 16) = 0;
        WTF::fastFree(v42, v13);
      }
      result = WTF::fastFree((WTF *)v16, v13);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
LABEL_40:
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
    *(_DWORD *)v18 += 2;
  v19 = a2[23];
  a2[23] = v18;
  if (!v19)
  {
LABEL_45:
    if (!v18)
      goto LABEL_48;
    goto LABEL_46;
  }
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
    goto LABEL_45;
  }
  v43 = *(unsigned int *)(v19 + 20);
  if ((_DWORD)v43)
  {
    v44 = *(WTF ***)(v19 + 8);
    v45 = 8 * v43;
    do
    {
      v46 = *v44;
      *v44 = 0;
      if (v46)
        WTF::RefCounted<WebCore::Touch>::deref(v46, v13);
      ++v44;
      v45 -= 8;
    }
    while (v45);
  }
  v47 = *(WTF **)(v19 + 8);
  if (v47)
  {
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = 0;
    WTF::fastFree(v47, v13);
  }
  result = WTF::fastFree((WTF *)v19, v13);
  if (v18)
  {
LABEL_46:
    if (*(_DWORD *)v18 == 1)
    {
      v48 = *(unsigned int *)(v18 + 20);
      if ((_DWORD)v48)
      {
        v49 = *(WTF ***)(v18 + 8);
        v50 = 8 * v48;
        do
        {
          v51 = *v49;
          *v49 = 0;
          if (v51)
            WTF::RefCounted<WebCore::Touch>::deref(v51, v13);
          ++v49;
          v50 -= 8;
        }
        while (v50);
      }
      v52 = *(WTF **)(v18 + 8);
      if (v52)
      {
        *(_QWORD *)(v18 + 8) = 0;
        *(_DWORD *)(v18 + 16) = 0;
        WTF::fastFree(v52, v13);
      }
      result = WTF::fastFree((WTF *)v18, v13);
    }
    else
    {
      --*(_DWORD *)v18;
    }
  }
LABEL_48:
  v20 = *(_WORD **)a1;
  if (!*(_QWORD *)a1 || *(_BYTE *)(a1 + 63) == 3)
  {
    v22 = *(_WORD **)(a1 + 8);
    if (v22)
    {
      if ((v22[11] & 2) != 0)
        *((_DWORD *)v22 + 6) += 2;
      else
        (*(void (**)(_WORD *))(*(_QWORD *)v22 + 88))(v22);
      result = (uint64_t)WebCore::EventTarget::fireEventListeners((WTF::StringImpl *)v22, (WebCore::Event *)a2, a3);
      if ((v22[11] & 2) == 0)
        return (*(uint64_t (**)(_WORD *))(*(_QWORD *)v22 + 96))(v22);
      goto LABEL_64;
    }
    return (uint64_t)WebCore::EventTarget::fireEventListeners(0, (WebCore::Event *)a2, a3);
  }
  if (*(_BYTE *)(a1 + 61))
  {
    v53 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v53 || (v54 = *(_QWORD *)(v53 + 96)) == 0)
    {
      result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v54 = result;
    }
    v55 = *(_QWORD *)(v54 + 40);
    if (!v55)
    {
      result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v54);
      v55 = *(_QWORD *)(v54 + 40);
    }
    v56 = a2[3];
    if (v56 == *(_QWORD *)(v55 + 2008))
    {
      v20 = *(_WORD **)a1;
    }
    else
    {
      v57 = *(_QWORD *)(v55 + 1688);
      v20 = *(_WORD **)a1;
      if (v56 != v57)
        goto LABEL_51;
    }
    if ((*((_DWORD *)a2 + 5) & 0x3000) != 0x1000)
    {
      v58 = *v8;
      if (*v8)
      {
        if (v20 != (_WORD *)v58 && (*(_BYTE *)(v58 + 22) & 2) != 0)
        {
          *((_DWORD *)a2 + 5) |= 0x10u;
          return result;
        }
      }
    }
  }
LABEL_51:
  if ((v20[11] & 1) != 0)
  {
    if ((*((_BYTE *)a2 + 21) & 2) == 0
      || !(*(unsigned int (**)(uint64_t *))(*a2 + 88))(a2)
      || ((*(uint64_t (**)(uint64_t *))(*a2 + 144))(a2) & 1) != 0
      || (v21 = *(_WORD **)a1,
          (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8) + 680) + 696) & 0x20) != 0)
      || (v21[14] & 8) == 0
      || (result = (*(uint64_t (**)(_WORD *))(*(_QWORD *)v21 + 960))(v21), (result & 1) == 0))
    {
      v22 = *(_WORD **)a1;
      if (v22)
      {
        *((_DWORD *)v22 + 6) += 2;
        result = (uint64_t)WebCore::EventTarget::fireEventListeners((WTF::StringImpl *)v22, (WebCore::Event *)a2, a3);
LABEL_64:
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((v22[15] & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)v22);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
        return result;
      }
      return (uint64_t)WebCore::EventTarget::fireEventListeners(0, (WebCore::Event *)a2, a3);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::EventTarget::fireEventListeners(WTF::StringImpl *result, WebCore::Event *this, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::AtomString **v13;
  const WTF::AtomString *v14;
  const WTF::AtomString *v15;
  const WTF::AtomString **v16;
  const WTF::AtomString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  void *v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  _DWORD *v30;
  void *v32;
  WTF::StringImpl *v33;
  void *v34;
  _BYTE v35[24];
  WTF *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;

  v3 = *((_QWORD *)result + 2);
  if ((v3 & 0x1000000000000) != 0)
  {
    v6 = (uint64_t)result;
    v7 = v3 & 0xFFFFFFFFFFFFLL;
    v8 = *(unsigned int *)((v3 & 0xFFFFFFFFFFFFLL) + 0x1C);
    if ((_DWORD)v8)
    {
      v9 = (unsigned int *)(*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10) + 20);
      v10 = 32 * v8;
      while (*(_QWORD *)(v9 - 5) != *((_QWORD *)this + 3))
      {
        v9 += 8;
        v10 -= 32;
        if (!v10)
          goto LABEL_6;
      }
      v21 = *v9;
      v36 = (WTF *)&v39;
      v37 = 1;
      v38 = v21;
      if (v21 >= 2)
      {
        if (v21 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * v21));
        v37 = v21;
        v36 = v22;
        v21 = *v9;
      }
      else
      {
        v22 = (WTF *)&v39;
      }
      if ((_DWORD)v21)
      {
        v23 = *(_DWORD ***)(v9 - 3);
        v24 = 8 * v21;
        do
        {
          v25 = *v23;
          if (*v23)
            ++*v25;
          *(_QWORD *)v22 = v25;
          v22 = (WTF *)((char *)v22 + 8);
          ++v23;
          v24 -= 8;
        }
        while (v24);
      }
      WebCore::EventTarget::innerInvokeEventListeners(v6, (uint64_t)this, (uint64_t)&v36, a3);
      if (v38)
      {
        v27 = v36;
        v28 = 8 * v38;
        do
        {
          v29 = *(WTF **)v27;
          *(_QWORD *)v27 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
            {
              v30 = (_DWORD *)*((_QWORD *)v29 + 1);
              *((_QWORD *)v29 + 1) = 0;
              if (v30)
              {
                if (v30[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
                else
                  --v30[4];
              }
              WTF::fastFree(v29, v26);
            }
            else
            {
              --*(_DWORD *)v29;
            }
          }
          v27 = (WTF *)((char *)v27 + 8);
          v28 -= 8;
        }
        while (v28);
      }
      result = v36;
      if (&v39 != (uint64_t *)v36 && v36 != 0)
      {
        v36 = 0;
        v37 = 0;
        return (WTF::StringImpl *)WTF::fastFree(result, v26);
      }
    }
    else
    {
LABEL_6:
      if ((*((_BYTE *)this + 21) & 2) != 0)
      {
        v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v11 || (v12 = *(_QWORD *)(v11 + 96)) == 0)
        {
          result = (WTF::StringImpl *)WebCore::threadGlobalDataSlow(result);
          v12 = (uint64_t)result;
        }
        v13 = *(const WTF::AtomString ***)(v12 + 40);
        if (!v13)
        {
          result = (WTF::StringImpl *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v12);
          v13 = *(const WTF::AtomString ***)(v12 + 40);
        }
        v14 = (const WTF::AtomString *)*((_QWORD *)this + 3);
        if (v14 == v13[16])
        {
          v16 = v13 + 289;
        }
        else if (v14 == v13[18])
        {
          v16 = v13 + 291;
        }
        else if (v14 == v13[17])
        {
          v16 = v13 + 290;
        }
        else if (v14 == v13[266])
        {
          v16 = v13 + 293;
        }
        else
        {
          v15 = v13[314];
          v16 = v13 + 158;
          if (v14 != v15)
            v16 = (const WTF::AtomString **)MEMORY[0x1E0CBF2F8];
        }
        v17 = *v16;
        if (*v16)
        {
          v18 = *(unsigned int *)(v7 + 28);
          if ((_DWORD)v18)
          {
            v19 = *(_QWORD *)(v7 + 16) + 8;
            v20 = 32 * v18;
            while (*(const WTF::AtomString **)(v19 - 8) != v17)
            {
              v19 += 32;
              v20 -= 32;
              if (!v20)
                return result;
            }
            if (v14)
            {
              *(_DWORD *)v14 += 2;
              WebCore::Event::setType(this, v17);
              WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::Vector((uint64_t)v35, v19);
              WebCore::EventTarget::innerInvokeEventListeners(v6, (uint64_t)this, (uint64_t)v35, a3);
              WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v32);
              result = WebCore::Event::setType(this, v14);
              if (*(_DWORD *)v14 == 2)
                return (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v33);
              else
                *(_DWORD *)v14 -= 2;
            }
            else
            {
              WebCore::Event::setType(this, v17);
              WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::Vector((uint64_t)v35, v19);
              WebCore::EventTarget::innerInvokeEventListeners(v6, (uint64_t)this, (uint64_t)v35, a3);
              WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v34);
              return WebCore::Event::setType(this, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Element::isDisabledFormControl(WebCore::Element *this)
{
  return 0;
}

uint64_t WebCore::VisualViewport::derefEventTarget(WebCore::VisualViewport *this, void *a2)
{
  return WTF::RefCounted<WebCore::DOMApplicationCache>::deref((uint64_t)this + 24, a2);
}

void WebCore::EventTarget::innerInvokeEventListeners(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  char v17;
  unsigned int *v19;
  uint64_t v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  char v23;
  unsigned int *v24;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::Frame *v38;
  WTF::JSONImpl::Object *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  BOOL isEventListenerDisabledImpl;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  WTF::JSONImpl::Object *v71;

  if ((*(_BYTE *)(a1 + 22) & 2) != 0)
    *(_DWORD *)(a1 + 24) += 2;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v8 = v7;
  v9 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
  if (*(_BYTE *)(v7 + 274))
  {
    v11 = 0;
    if (*(unsigned __int8 *)(v7 + 274) - 1 <= 1)
      ++*(_DWORD *)(v7 + 312);
  }
  else
  {
    *(_DWORD *)(v7 - 168) += 2;
    if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
LABEL_5:
      v11 = 1;
      goto LABEL_6;
    }
    v33 = *(_QWORD *)(v7 + 336);
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 24);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 8);
          if (v36)
          {
            v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 80) + 8) + 232);
            if (!v37)
              goto LABEL_5;
            goto LABEL_52;
          }
        }
      }
    }
    v56 = *(_QWORD *)(v7 + 2440);
    if (!v56)
      goto LABEL_5;
    v57 = *(_QWORD *)(v56 + 8);
    if (!v57)
      goto LABEL_5;
    v58 = *(_QWORD *)(v57 + 528);
    if (!v58)
      goto LABEL_5;
    v59 = *(_QWORD *)(v58 + 8);
    if (!v59)
      goto LABEL_5;
    v60 = *(_QWORD *)(v59 + 24);
    if (!v60)
      goto LABEL_5;
    v61 = *(_QWORD *)(v60 + 8);
    if (v61)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 80) + 8) + 232);
      if (v37)
      {
        if (!v33)
        {
          v38 = 0;
LABEL_53:
          WebCore::TimelineRecordFactory::createEventDispatchData((WebCore::TimelineRecordFactory *)a2, (uint64_t *)&v71);
          WebCore::InspectorTimelineAgent::pushCurrentRecord(v37, &v71, 0, 0, v38, 0, 0);
          v39 = v71;
          v71 = 0;
          v9 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
            {
              WTF::JSONImpl::Value::operator delete();
              v9 = (unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
            }
            else
            {
              --*(_DWORD *)v39;
            }
          }
          goto LABEL_5;
        }
LABEL_52:
        v38 = *(WebCore::Frame **)(v33 + 8);
        goto LABEL_53;
      }
    }
    v11 = 1;
  }
LABEL_6:
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    v69 = v11;
    while (1)
    {
      v15 = *v13;
      if ((*(_BYTE *)(*v13 + 4) & 8) != 0)
        goto LABEL_11;
      if ((_DWORD)a4)
      {
        if ((_DWORD)a4 == 1 && (*(_BYTE *)(*v13 + 4) & 1) != 0)
          goto LABEL_11;
      }
      else if ((*(_BYTE *)(*v13 + 4) & 1) == 0)
      {
        goto LABEL_11;
      }
      v16 = *(_DWORD **)(v15 + 8);
      ++v16[4];
      v17 = *(_BYTE *)(v15 + 4);
      if (atomic_load(v9))
      {
        v45 = v9;
        v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
        v9 = v45;
        if (v46)
        {
          v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47);
          v9 = v45;
          if (v48)
          {
            isEventListenerDisabledImpl = WebCore::InspectorInstrumentation::isEventListenerDisabledImpl(v48, a1, (_QWORD *)(a2 + 24), (uint64_t)v16, v17 & 1);
            v9 = v45;
            if (isEventListenerDisabledImpl)
              break;
          }
        }
      }
      v19 = v9;
      if ((*(_BYTE *)(a2 + 20) & 0x20) != 0)
      {
        v29 = 2;
        goto LABEL_103;
      }
      v20 = a4;
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 64))(v16);
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 56))(v16);
      v22 = *v13;
      v23 = *(_BYTE *)(*v13 + 4);
      if ((v23 & 4) != 0)
      {
        LOBYTE(v71) = v23 & 1;
        (*(void (**)(uint64_t, uint64_t, _DWORD *, WTF::JSONImpl::Object **))(*(_QWORD *)a1 + 32))(a1, a2 + 24, v16, &v71);
        v22 = *v13;
        v23 = *(_BYTE *)(*v13 + 4);
      }
      v24 = v19;
      if ((v23 & 2) != 0)
      {
        *(_DWORD *)(a2 + 20) |= 0x400u;
        v22 = *v13;
      }
      if (atomic_load(v19))
      {
        v50 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v8, v21);
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 136);
          if (v51)
          {
            v67 = v50;
            WebCore::WebDebuggerAgent::willHandleEvent(v51, v22);
            v50 = v67;
          }
          v52 = *(_QWORD *)(v50 + 144);
          v24 = v19;
          if (v52)
            WebCore::InspectorDOMDebuggerAgent::willHandleEvent(v52, (WebCore::ScriptExecutionContext *)v8, a2, v22);
        }
      }
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v8, a2);
      v27 = *v13;
      v28 = atomic_load(v24);
      v9 = v24;
      a4 = v20;
      v11 = v69;
      if (v28)
      {
        v53 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)v8, v26);
        v9 = v19;
        if (v53)
        {
          v54 = *(uint64_t **)(v53 + 136);
          if (v54)
          {
            v68 = v53;
            WebCore::WebDebuggerAgent::didHandleEvent(v54, v27);
            v9 = v19;
            v53 = v68;
          }
          v55 = *(_QWORD *)(v53 + 144);
          if (v55)
          {
            WebCore::InspectorDOMDebuggerAgent::didHandleEvent(v55, (WebCore::ScriptExecutionContext *)v8, a2, v27);
            v9 = v19;
          }
        }
      }
      if ((*(_BYTE *)(*v13 + 4) & 2) != 0)
        *(_DWORD *)(a2 + 20) &= ~0x400u;
      v29 = 0;
LABEL_26:
      if (v16[4] == 1)
      {
        v32 = v9;
        (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
        v9 = v32;
      }
      else
      {
        --v16[4];
      }
      if (v29 != 3 && v29)
        goto LABEL_30;
LABEL_11:
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_30;
    }
    v29 = 3;
LABEL_103:
    v11 = v69;
    goto LABEL_26;
  }
LABEL_30:
  if (v11 && (v30 = atomic_load(v9)) != 0)
  {
    v40 = *(_QWORD *)(v8 + 336);
    if (v40)
    {
      v41 = *(_QWORD *)(v40 + 8);
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 24);
        if (v42)
        {
          v43 = *(_QWORD *)(v42 + 8);
          if (v43)
            goto LABEL_108;
        }
      }
    }
    v62 = *(_QWORD *)(v8 + 2440);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 8);
      if (v63)
      {
        v64 = *(_QWORD *)(v63 + 528);
        if (v64)
        {
          v65 = *(_QWORD *)(v64 + 8);
          if (v65)
          {
            v66 = *(_QWORD *)(v65 + 24);
            if (v66)
            {
              v43 = *(_QWORD *)(v66 + 8);
              if (v43)
              {
LABEL_108:
                v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 80) + 8) + 232);
                if (v44)
                  WebCore::InspectorTimelineAgent::didDispatchEvent(v44, (WTF::JSONImpl::Value *)((*(_DWORD *)(a2 + 20) >> 6) & 1));
              }
            }
          }
        }
      }
    }
  }
  else if (!v8)
  {
    goto LABEL_36;
  }
  v31 = *(unsigned __int8 *)(v8 + 274);
  if (*(_BYTE *)(v8 + 274))
  {
    if (v31 == 1)
    {
      if (*(_DWORD *)(v8 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      else
        --*(_DWORD *)(v8 + 312);
    }
    else if (v31 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v8 + 312));
    }
  }
  else if (*(_DWORD *)(v8 - 168) == 2)
  {
    if ((*(_WORD *)(v8 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 192));
  }
  else
  {
    *(_DWORD *)(v8 - 168) -= 2;
  }
LABEL_36:
  if ((*(_BYTE *)(a1 + 22) & 2) != 0)
  {
    if (*(_DWORD *)(a1 + 24) == 2)
    {
      if ((*(_WORD *)(a1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)a1);
    }
    else
    {
      *(_DWORD *)(a1 + 24) -= 2;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  }
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::Node::scriptExecutionContext(WebCore::Node *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  v2 = *(_QWORD *)(v1 + 704);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v1 = v3;
  }
  return v1 + 192;
}

uint64_t WebCore::JSEventListener::wrapper(WebCore::JSEventListener *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v1 || (v1[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t WebCore::JSEventListener::jsFunction(WebCore::JSEventListener *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 6);
  if (!v1 || (v1[8] & 3) != 0)
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::scriptExecutionContext(WebCore::MessagePort *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::MessagePort::removeEventListener(WebCore *a1, WTF::StringImpl **a2, WebCore::EventListener *a3, unsigned __int8 *a4)
{
  WebCore *v4;
  uint64_t v5;
  WebCore::EventListenerMap *v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  _QWORD *v25;

  v4 = a1;
  v5 = *((_QWORD *)a1 + 2);
  if ((v5 & 0x1000000000000) == 0)
    goto LABEL_13;
  v9 = (WebCore::EventListenerMap *)((v5 & 0xFFFFFFFFFFFFLL) + 16);
  v10 = *a4;
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)a1 + 8))(a1);
    if (v23)
    {
      v25 = (_QWORD *)WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24);
      if (v25)
        WebCore::InspectorInstrumentation::willRemoveEventListenerImpl(v25, v4, a2, a3, v10 != 0);
    }
  }
  a1 = (WebCore *)WebCore::EventListenerMap::remove(v9, (const WTF::AtomString *)a2, a3, *a4);
  if ((_DWORD)a1)
  {
    a1 = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)v4 + 80))(v4);
    v12 = 1;
  }
  else
  {
LABEL_13:
    v12 = 0;
  }
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
    v14 = WebCore::threadGlobalDataSlow(a1);
  v15 = *(_QWORD *)(v14 + 40);
  if (!v15)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
    v15 = *(_QWORD *)(v14 + 40);
  }
  v16 = *((_QWORD *)v4 + 2);
  if ((v16 & 0x1000000000000) != 0 && (v18 = v16 & 0xFFFFFFFFFFFFLL, v19 = *(unsigned int *)(v18 + 28), (_DWORD)v19))
  {
    v20 = *(_QWORD **)(v18 + 16);
    v21 = *(_QWORD *)(v15 + 1192);
    v22 = 32 * v19;
    while (*v20 != v21)
    {
      v20 += 4;
      v22 -= 32;
      if (!v22)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    *((_BYTE *)v4 + 35) = 0;
  }
  return v12;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **result;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (WTF::StringImpl **)v6;
    do
    {
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(a1, v14);
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v14, v10);
        }
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    goto LABEL_13;
  }
  result = 0;
  if (v6)
  {
LABEL_13:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::reinsert(uint64_t *a1, WTF::StringImpl **this)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = WTF::ASCIICaseInsensitiveHash::hash((WTF::ASCIICaseInsensitiveHash *)this, (const WTF::String *)this);
  v7 = 0;
  do
  {
    v8 = v5 & v4;
    v5 = ++v7 + v8;
  }
  while (*(_QWORD *)(v3 + 16 * v8));
  v9 = (WTF::StringImpl **)(v3 + 16 * v8);
  v10 = v9[1];
  v9[1] = 0;
  if (!v10)
    goto LABEL_8;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
LABEL_8:
    *v9 = 0;
    goto LABEL_9;
  }
  WTF::StringImpl::destroy(v10, v6);
  v15 = *v9;
  *v9 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
LABEL_9:
  v11 = *this;
  *this = 0;
  *v9 = v11;
  v12 = this[1];
  this[1] = 0;
  v9[1] = v12;
  return v9;
}

void WebCore::RenderTreeUpdater::GeneratedContent::updatePseudoElement(uint64_t *a1, WTF::StringImpl *a2, WebCore::RenderTreeBuilder *a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  WebCore::Style *v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t **v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::Style **v49;
  uint64_t v50;
  int v51;
  const WebCore::RenderStyle *v52;
  WebCore::Node *v53;
  WebCore::RenderStyle *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const WebCore::RenderStyle *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  WebCore::RenderStyle *v64;
  WebCore::RenderStyle *v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::RenderStyle *v68;
  WTF *v69;
  uint64_t v70;
  const WebCore::RenderStyle *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  WebCore::RenderStyle *v80;
  const WTF::StringImpl *v81;
  WebCore::RenderStyle *v82;
  const WebCore::RenderStyle *v83;
  WebCore::RenderStyle *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  WebCore::RenderStyle *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  WebCore::Element *v102;
  uint64_t v103;
  uint64_t v104;
  WebCore::RenderQuote *v105;
  uint64_t v106;
  WebCore::RenderQuote *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  WebCore::Style **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  WebCore::RenderStyle *v129;
  WebCore::RenderStyle *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WebCore::RenderStyle *v138;
  char v139;
  char v140;
  char v141;
  WebCore::RenderStyle *v142;
  WebCore::RenderStyle *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  v7 = a4;
  v8 = (uint64_t)a3;
  v9 = a2;
  v10 = *((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL;
  if ((_DWORD)a4 == 6)
  {
    if (v10)
    {
      v11 = (uint64_t *)(v10 + 168);
      goto LABEL_51;
    }
LABEL_5:
    v12 = 0;
LABEL_6:
    v13 = 1;
    goto LABEL_7;
  }
  if (!v10)
    goto LABEL_5;
  v11 = (uint64_t *)(v10 + 176);
LABEL_51:
  v12 = *v11;
  if (!*v11)
    goto LABEL_6;
  if ((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_60;
  if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194280720);
  }
  v34 = *a1;
  v35 = *(unsigned int *)(*a1 + 28);
  v36 = 72 * v35;
  while (1)
  {
    v37 = v36 - 72;
    if (!v36)
      break;
    v38 = *(_QWORD *)(v34 + 16);
    v39 = *(unsigned __int8 *)(v38 + v36 - 32);
    v36 -= 72;
    if (v39)
    {
      v40 = v38 + v37;
      goto LABEL_58;
    }
  }
  if (!(_DWORD)v35)
  {
    __break(0xC471u);
    goto LABEL_198;
  }
  v40 = *(_QWORD *)(v34 + 16) + 72 * v35 - 72;
LABEL_58:
  if (!*(_BYTE *)(v40 + 40))
  {
LABEL_198:
    __break(1u);
    goto LABEL_199;
  }
  if (*(_BYTE *)(v40 + 32)
    && (v119 = *(_QWORD *)(v40 + 24)) != 0
    && *(_QWORD *)(v119 + 8) == (*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL))
  {
    v13 = 0;
    *(_BYTE *)(v40 + 32) = 0;
  }
  else
  {
LABEL_60:
    v13 = 0;
  }
LABEL_7:
  v14 = *(_QWORD *)a3;
  v15 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
LABEL_14:
    v18 = 1;
    goto LABEL_15;
  }
  v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *(_DWORD *)v16 += 2;
    v17 = *(_QWORD *)(v14 + 48);
    if (v17 && (v48 = *(unsigned int *)(v17 + 12), (_DWORD)v48))
    {
      v49 = *(WebCore::Style ***)v17;
      v50 = 8 * v48;
      do
      {
        v6 = *v49;
        if (((*((_QWORD *)*v49 + 2) >> 43) & 0x1F) == (_DWORD)a4
          && *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 40) + 592) == v16)
        {
          break;
        }
        v6 = 0;
        ++v49;
        v50 -= 8;
      }
      while (v50);
    }
    else
    {
      v6 = 0;
    }
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  else
  {
    v108 = *(_QWORD *)(v14 + 48);
    if (v108 && (v120 = *(unsigned int *)(v108 + 12), (_DWORD)v120))
    {
      v121 = *(WebCore::Style ***)v108;
      v122 = 8 * v120;
      do
      {
        v6 = *v121;
        if (((*((_QWORD *)*v121 + 2) >> 43) & 0x1F) == (_DWORD)a4
          && !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 40) + 592))
        {
          break;
        }
        v6 = 0;
        ++v121;
        v122 -= 8;
      }
      while (v122);
    }
    else
    {
      v6 = 0;
    }
  }
  if (!v6)
    goto LABEL_14;
  v41 = *a1;
  v42 = *(unsigned int *)(*a1 + 28);
  v43 = 72 * v42;
  while (1)
  {
    v44 = v43 - 72;
    if (!v43)
      break;
    v45 = *(_QWORD *)(v41 + 16);
    v46 = *(unsigned __int8 *)(v45 + v43 - 32);
    v43 -= 72;
    if (v46)
    {
      v47 = v45 + v44;
      goto LABEL_68;
    }
  }
  if (!(_DWORD)v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1942807B8);
  }
  v47 = *(_QWORD *)(v41 + 16) + 72 * v42 - 72;
LABEL_68:
  if (!*(_BYTE *)(v47 + 40))
    goto LABEL_198;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v47 + 16) + 136))(*(_QWORD *)(v47 + 16))
    && (*((_QWORD *)v6 + 2) & 0x1FLL) != 0x1A
    && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 32) + 80))
  {
    goto LABEL_87;
  }
  v18 = 0;
LABEL_15:
  v19 = v9;
  while ((~*((unsigned __int16 *)v19 + 14) & 0x408) == 0
       && (*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 368))(v19))
  {
    v103 = *((_QWORD *)v19 + 14);
    if (v103)
    {
      v19 = *(WTF::StringImpl **)(v103 + 8);
      if (v19)
        continue;
    }
    goto LABEL_24;
  }
  v20 = *v15;
  if (*v15)
  {
    *(_DWORD *)v20 += 2;
    if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v24 = *(unsigned int *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v24))
    {
      v25 = *(uint64_t **)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
      v26 = 8 * v24;
      while (1)
      {
        v27 = *v25;
        if (*(_BYTE *)(*v25 + 96))
        {
          if (*(_DWORD *)(v27 + 80) == v7 && *(_QWORD *)(v27 + 88) == (_QWORD)v20)
            break;
        }
        v21 = 0;
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_21;
      }
      v21 = *(uint64_t ***)v27;
    }
    else
    {
      v21 = 0;
    }
LABEL_21:
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  else if ((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) != 0
         && (v109 = *(unsigned int *)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v109))
  {
    v110 = *(uint64_t **)((*((_QWORD *)v19 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
    v111 = 8 * v109;
    while (1)
    {
      v112 = *v110;
      if (*(_BYTE *)(*v110 + 96))
      {
        if (*(_DWORD *)(v112 + 80) == v7 && *(_QWORD *)(v112 + 88) == 0)
          break;
      }
      v21 = 0;
      ++v110;
      v111 -= 8;
      if (!v111)
        goto LABEL_23;
    }
    v21 = *(uint64_t ***)v112;
  }
  else
  {
    v21 = 0;
  }
LABEL_23:
  if (v21 && (WebCore::KeyframeEffectStack::requiresPseudoElement(v21) & 1) != 0)
    goto LABEL_86;
LABEL_24:
  v22 = *v15;
  if (*v15)
  {
    *(_DWORD *)v22 += 2;
    if ((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) != 0
      && (v29 = *(unsigned int *)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v29))
    {
      v30 = *(uint64_t **)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
      v31 = 8 * v29;
      while (1)
      {
        v32 = *v30;
        if (*(_BYTE *)(*v30 + 96))
        {
          if (*(_DWORD *)(v32 + 80) == v7 && *(_QWORD *)(v32 + 88) == (_QWORD)v22)
            break;
        }
        v23 = 0;
        ++v30;
        v31 -= 8;
        if (!v31)
          goto LABEL_27;
      }
      v23 = *(_QWORD *)v32;
    }
    else
    {
      v23 = 0;
    }
LABEL_27:
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  else if ((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) != 0
         && (v114 = *(unsigned int *)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v114))
  {
    v115 = *(uint64_t **)((*((_QWORD *)v9 + 9) & 0xFFFFFFFFFFFFLL) + 0x98);
    v116 = 8 * v114;
    while (1)
    {
      v117 = *v115;
      if (*(_BYTE *)(*v115 + 96))
      {
        if (*(_DWORD *)(v117 + 80) == v7 && *(_QWORD *)(v117 + 88) == 0)
          break;
      }
      v23 = 0;
      ++v115;
      v116 -= 8;
      if (!v116)
        goto LABEL_29;
    }
    v23 = *(_QWORD *)v117;
  }
  else
  {
    v23 = 0;
  }
LABEL_29:
  if (!v23 || (WebCore::KeyframeEffectStack::containsProperty(v23, 7) & 1) == 0)
  {
    if ((v13 & 1) == 0)
    {
      v102 = (WebCore::Element *)(*a1 + 48);
      if (v7 == 6)
        WebCore::RenderTreeUpdater::GeneratedContent::removeBeforePseudoElement(v9, v102, a3);
      else
        WebCore::RenderTreeUpdater::GeneratedContent::removeAfterPseudoElement(v9, v102, a3);
    }
    return;
  }
LABEL_86:
  if ((v18 & 1) != 0)
    return;
LABEL_87:
  if ((v13 & 1) == 0)
  {
    if ((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v71 = *(const WebCore::RenderStyle **)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
      || (*((_QWORD *)v71 + 2) & 0x1FLL) != 0x12)
    {
      v70 = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v70)
        goto LABEL_88;
      if ((*(_BYTE *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v70 = *(_QWORD *)((*(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v70)
          v70 = *(_QWORD *)(v70 + 8);
      }
      v71 = (const WebCore::RenderStyle *)(v70 + 80);
    }
    v51 = WebCore::Style::determineChange(v6, v71, a3);
    if (!v51)
      return;
    goto LABEL_89;
  }
LABEL_88:
  v51 = 5;
LABEL_89:
  v53 = (WebCore::Node *)WebCore::Element::ensurePseudoElement(v9, v7);
  if ((*((_QWORD *)v6 + 2) & 0x1FLL) == 0x12)
  {
    WebCore::RenderStyle::createPtr(&v138);
    v80 = v138;
    *((_QWORD *)v138 + 2) = *((_QWORD *)v138 + 2) & 0xFFFF07FFFFFFFFFFLL | ((unint64_t)(v7 & 0x1F) << 43);
    WebCore::RenderStyle::inheritFrom(v80, v6, v81);
    WebCore::RenderStyle::copyContentFrom((WTF **)v138, v6);
    WebCore::RenderStyle::copyPseudoElementsFrom(v138, v6);
    v82 = v138;
    v138 = 0;
    v130 = v82;
    LOBYTE(v131) = v51;
    *(_WORD *)((char *)&v131 + 1) = *(unsigned __int8 *)(v8 + 9);
    WebCore::RenderTreeUpdater::updateElementRenderer(*a1, (uint64_t)v53, (uint64_t)&v130);
    WebCore::RenderStyle::cloneIncludingPseudoElements(v6, v83, (uint64_t)&v143);
    v84 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v84 = 0;
    v85 = v144;
    v144 = 0;
    *((_QWORD *)v84 + 1) = v85;
    *((_QWORD *)v84 + 2) = v145;
    v86 = v146;
    v146 = 0;
    *((_QWORD *)v84 + 3) = v86;
    v87 = v147;
    v147 = 0;
    *((_QWORD *)v84 + 4) = v87;
    *((_QWORD *)v84 + 5) = v148;
    v88 = v149;
    v149 = 0;
    *((_QWORD *)v84 + 6) = v88;
    v89 = v150;
    v150 = 0;
    *((_QWORD *)v84 + 7) = v89;
    v142 = v84;
    WebCore::Element::storeDisplayContentsOrNoneStyle(v53, (uint64_t *)&v142);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v142, v90);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v143, v91);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v130, v92);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v138, v93);
  }
  else
  {
    WebCore::RenderStyle::cloneIncludingPseudoElements(v6, v52, (uint64_t)&v143);
    v54 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v54 = 0;
    v55 = v144;
    v144 = 0;
    *((_QWORD *)v54 + 1) = v55;
    *((_QWORD *)v54 + 2) = v145;
    v56 = v146;
    v146 = 0;
    *((_QWORD *)v54 + 3) = v56;
    v57 = v147;
    v147 = 0;
    *((_QWORD *)v54 + 4) = v57;
    *((_QWORD *)v54 + 5) = v148;
    v58 = v149;
    v149 = 0;
    *((_QWORD *)v54 + 6) = v58;
    v59 = v150;
    v150 = 0;
    *((_QWORD *)v54 + 7) = v59;
    v138 = v54;
    v139 = v51;
    v140 = *(_BYTE *)(v8 + 9);
    v141 = 0;
    WebCore::RenderTreeUpdater::updateElementRenderer(*a1, (uint64_t)v53, (uint64_t)&v138);
    if ((*((_QWORD *)v6 + 2) & 0x1FLL) == 0x1A)
    {
      WebCore::RenderStyle::cloneIncludingPseudoElements(v6, v60, (uint64_t)&v130);
      v94 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v94 = 0;
      v95 = v131;
      v131 = 0;
      *((_QWORD *)v94 + 1) = v95;
      *((_QWORD *)v94 + 2) = v132;
      v96 = v133;
      v133 = 0;
      *((_QWORD *)v94 + 3) = v96;
      v97 = v134;
      v134 = 0;
      *((_QWORD *)v94 + 4) = v97;
      *((_QWORD *)v94 + 5) = v135;
      v98 = v136;
      v136 = 0;
      *((_QWORD *)v94 + 6) = v98;
      v99 = v137;
      v137 = 0;
      *((_QWORD *)v94 + 7) = v99;
      v129 = v94;
      WebCore::Element::storeDisplayContentsOrNoneStyle(v53, (uint64_t *)&v129);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v129, v100);
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v130, v101);
    }
    else if ((*((_QWORD *)v53 + 9) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v68 = *(WebCore::RenderStyle **)((*((_QWORD *)v53 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
      *(_QWORD *)((*((_QWORD *)v53 + 9) & 0xFFFFFFFFFFFFLL) + 0x38) = 0;
      if (v68)
      {
        WebCore::RenderStyle::~RenderStyle(v68, v60);
        if (*(_DWORD *)v69)
        {
          *((_OWORD *)v69 + 2) = 0u;
          *((_OWORD *)v69 + 3) = 0u;
          *(_OWORD *)v69 = 0u;
          *((_OWORD *)v69 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v69, v60);
        }
      }
    }
    WebCore::RenderStyle::~RenderStyle(v54, v60);
    if (*(_DWORD *)v54)
    {
      *((_OWORD *)v54 + 2) = 0u;
      *((_OWORD *)v54 + 3) = 0u;
      *(_OWORD *)v54 = 0u;
      *((_OWORD *)v54 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v54, v61);
    }
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v143, v61);
  }
  v8 = *((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    if ((*(_BYTE *)((*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1942803A4);
    }
    if (v51 == 5)
    {
      v62 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)v6 + 1) + 32) + 80);
      if (v62)
      {
        v63 = *a1 + 48;
        do
        {
          (*(void (**)(WebCore::RenderStyle **__return_ptr, _QWORD *, _QWORD, WebCore::Style *))(*v62 + 16))(&v143, v62, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 8) + 40) + 8), v6);
          if ((*(unsigned int (**)(uint64_t, WebCore::RenderStyle *, WebCore::Style *))(*(_QWORD *)v8 + 664))(v8, v143, v6))
          {
            v64 = v143;
            v143 = 0;
            v130 = v64;
            WebCore::RenderTreeBuilder::attach(v63, (WebCore::RenderTable *)v8, (unint64_t *)&v130);
            v65 = v130;
            v130 = 0;
            if (v65)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v130, (uint64_t)v65);
          }
          v66 = (uint64_t)v143;
          v143 = 0;
          if (v66)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v143, v66);
          v62 = (_QWORD *)v62[1];
        }
        while (v62);
      }
      goto LABEL_106;
    }
    v72 = *(unsigned int *)((*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFLL) + 0x40);
    if (!(v72 | ((unint64_t)*(unsigned __int8 *)((*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFLL) + 0x44) << 32)))
      goto LABEL_106;
    v9 = *(WTF::StringImpl **)((v72 | ((unint64_t)*(unsigned __int8 *)((*((_QWORD *)v53 + 8) & 0xFFFFFFFFFFFFLL)
                                                                            + 0x44) << 32))
                             + 8);
    if (!v9)
      goto LABEL_106;
    if ((*((_BYTE *)v9 + 45) & 2) != 0)
    {
      while (1)
      {
        v73 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 112))(v9);
        if (!v73)
        {
LABEL_199:
          if (v9 == (WTF::StringImpl *)v8)
            goto LABEL_106;
          v123 = *(unsigned int *)((char *)v9 + 47);
          if (!(v123 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32))
            || (v73 = *(WTF::StringImpl **)((v123 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32)) + 8)) == 0)
          {
            v124 = *((_QWORD *)v9 + 4);
            if (v124)
            {
              while (1)
              {
                v125 = *(_QWORD *)(v124 + 8);
                if (!v125 || v125 == v8)
                  break;
                v127 = *(unsigned int *)(v125 + 47);
                if (v127 | ((unint64_t)*(unsigned __int8 *)(v125 + 51) << 32))
                {
                  v73 = *(WTF::StringImpl **)((v127 | ((unint64_t)*(unsigned __int8 *)(v125 + 51) << 32)) + 8);
                  if (v73)
                    goto LABEL_209;
                }
                v124 = *(_QWORD *)(v125 + 32);
                if (!v124)
                  goto LABEL_106;
              }
            }
            goto LABEL_106;
          }
        }
LABEL_209:
        v9 = v73;
        if ((*((_BYTE *)v73 + 45) & 2) == 0)
          goto LABEL_121;
      }
    }
    v73 = *(WTF::StringImpl **)((v72 | ((unint64_t)*(unsigned __int8 *)(v8 + 68) << 32)) + 8);
    do
    {
LABEL_121:
      v74 = (*((_BYTE *)v73 + 52) & 7) != 3 || (*((_BYTE *)v73 + 53) & 1) == 0;
      if (!v74 || *((_BYTE *)v73 + 46) == 29)
      {
        {
          WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
        }
        LODWORD(v143) = 0;
        v75 = qword_1ECE913C0;
        ++*(_DWORD *)qword_1ECE913C0;
        v76 = qword_1ECE913D0;
        v144 = v75;
        v145 = qword_1ECE913C8;
        ++*(_DWORD *)qword_1ECE913D0;
        v146 = v76;
        v77 = qword_1ECE913D8;
        ++*(_DWORD *)qword_1ECE913D8;
        v147 = v77;
        v148 = qword_1ECE913E0;
        v149 = 0;
        v78 = qword_1ECE913F0;
        ++*(_DWORD *)qword_1ECE913F0;
        v150 = v78;
        WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)&v143, v6, a3);
        WebCore::RenderElement::setStyle(v73, &v143, 0);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v143, v79);
      }
      v73 = (WTF::StringImpl *)WebCore::RenderTraversal::next<WebCore::RenderElement,WebCore::RenderElement>((uint64_t)v73, (WebCore::RenderObject *)v8, a3);
    }
    while (v73);
LABEL_106:
    v67 = *a1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)*a1 + 1944) + 408))
    {
      v104 = WebCore::RenderDescendantIteratorAdapter<WebCore::RenderQuote>::begin(v8);
      if (v105)
      {
        v106 = v104;
        v107 = v105;
        do
        {
          WebCore::RenderTreeUpdater::GeneratedContent::updateQuotesUpTo(a1, v107, a3);
          v107 = (WebCore::RenderQuote *)WebCore::RenderTraversal::next<WebCore::RenderQuote,WebCore::RenderQuote>((uint64_t)v107, v106);
        }
        while (v107);
      }
      v67 = *a1;
    }
    WebCore::RenderTreeBuilder::updateAfterDescendants((WebCore::RenderTreeBuilder::SVG **)(v67 + 48), (WebCore::RenderElement *)v8, a3, a4, a5, a6);
  }
}

void WebCore::RenderStyle::cloneIncludingPseudoElements(WebCore::RenderStyle *this@<X0>, const WebCore::RenderStyle *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::RenderStyle **v12;
  uint64_t i;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WebCore::RenderStyle *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::RenderStyle *v33;

  v4 = (_DWORD *)*((_QWORD *)this + 1);
  ++*v4;
  v5 = *((_QWORD *)this + 2);
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  ++*v6;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  ++*v7;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = *((_QWORD *)this + 5);
  *(_QWORD *)(a3 + 48) = 0;
  v8 = (_DWORD *)*((_QWORD *)this + 7);
  ++*v8;
  *(_QWORD *)(a3 + 56) = v8;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(WebCore::RenderStyle ***)v9;
      for (i = 8 * v10; i; i -= 8)
      {
        WebCore::RenderStyle::cloneIncludingPseudoElements(&v25, *v12, a2);
        v14 = WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v14 = 0;
        v16 = v26;
        v26 = 0;
        *(_QWORD *)(v14 + 8) = v16;
        *(_QWORD *)(v14 + 16) = v27;
        v17 = v28;
        v28 = 0;
        *(_QWORD *)(v14 + 24) = v17;
        v18 = v29;
        v29 = 0;
        *(_QWORD *)(v14 + 32) = v18;
        *(_QWORD *)(v14 + 40) = v30;
        v19 = v31;
        v31 = 0;
        *(_QWORD *)(v14 + 48) = v19;
        v20 = v32;
        v32 = 0;
        *(_QWORD *)(v14 + 56) = v20;
        v33 = (WebCore::RenderStyle *)v14;
        if (v11)
        {
          v21 = *(_DWORD *)(v11 + 12);
          if (v21 == *(_DWORD *)(v11 + 8))
          {
            WTF::Vector<std::unique_ptr<WebCore::RenderStyle>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::RenderStyle>>(v11, (unint64_t)&v33);
            goto LABEL_8;
          }
          v22 = *(_QWORD *)v11;
        }
        else
        {
          v11 = WTF::fastMalloc((WTF *)0x30);
          v21 = 0;
          *(_OWORD *)(v11 + 16) = 0u;
          v22 = v11 + 16;
          *(_OWORD *)(v11 + 32) = 0u;
          *(_QWORD *)v11 = v11 + 16;
          *(_QWORD *)(v11 + 8) = 4;
          *(_QWORD *)(a3 + 48) = v11;
          v14 = (uint64_t)v33;
        }
        v33 = 0;
        *(_QWORD *)(v22 + 8 * v21) = v14;
        *(_DWORD *)(v11 + 12) = v21 + 1;
LABEL_8:
        v23 = v33;
        v33 = 0;
        if (v23)
        {
          WebCore::RenderStyle::~RenderStyle(v23, v15);
          if (*(_DWORD *)v24)
          {
            *((_OWORD *)v24 + 2) = 0u;
            *((_OWORD *)v24 + 3) = 0u;
            *(_OWORD *)v24 = 0u;
            *((_OWORD *)v24 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v24, v15);
          }
        }
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v25, v15);
        ++v12;
      }
    }
  }
}

uint64_t WebCore::RenderBlock::canHaveChildren(WebCore::RenderBlock *this)
{
  return 1;
}

void WebCore::RenderTreeBuilder::updateAfterDescendants(WebCore::RenderTreeBuilder::SVG **this, WebCore::RenderElement *a2, WebCore::RenderObject *a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t **v14;
  WebCore::RenderElement *v15;
  WebCore::RenderObject *v16;

  v8 = *((unsigned __int8 *)a2 + 46);
  if (v8 == 83)
  {
    WebCore::RenderTreeBuilder::SVG::updateAfterDescendants(this[12], a2, a3);
  }
  else
  {
    if ((*((_BYTE *)a2 + 45) & 0x40) != 0)
    {
      if ((*((_BYTE *)a2 + 102) & 2) != 0)
      {
        v14 = (uint64_t **)this[3];
        if (v8 == 2
          || v8 != 85
          && (*((_BYTE *)a2 + 52) & 7) == 1
          && (*(unsigned int (**)(WebCore::RenderElement *))(*(_QWORD *)a2 + 136))(a2))
        {
          v15 = 0;
          v16 = 0;
          WebCore::RenderBlock::getFirstLetter((uint64_t)a2, &v16, &v15, 0);
          a3 = v16;
          if (v16)
          {
            if (v15 == a2)
            {
              if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 8) + 96) & 0xF80000000000) == 0x100000000000)
              {
                WebCore::RenderTreeBuilder::FirstLetter::updateStyle(v14, a2, v16);
              }
              else if ((*((_BYTE *)v16 + 45) & 2) != 0)
              {
                WebCore::RenderTreeBuilder::FirstLetter::createRenderers((uint64_t)v14, v16);
              }
            }
          }
        }
      }
      v8 = *((unsigned __int8 *)a2 + 46);
    }
    if (v8 == 19)
      WebCore::RenderTreeBuilder::List::updateItemMarker(this[4], a2, (uint64_t)a3, a4, a5, a6);
    if ((*((_BYTE *)a2 + 52) & 7) == 1)
    {
      v9 = (uint64_t **)this[5];
      v10 = (*(uint64_t (**)(WebCore::RenderElement *, _QWORD))(*(_QWORD *)a2 + 1920))(a2, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 32) + 24) + 8));
      v11 = *((_QWORD *)a2 + 28);
      v12 = !v11 || (v13 = *(_QWORD *)(v11 + 24)) == 0 || *(_QWORD *)(v13 + 8) == 0;
      if ((v12 & v10) == 1)
      {
        WebCore::RenderTreeBuilder::MultiColumn::createFragmentedFlow(v9, a2);
      }
      else if (((v12 | v10) & 1) == 0)
      {
        WebCore::RenderTreeBuilder::MultiColumn::destroyFragmentedFlow(v9, a2);
      }
    }
  }
}

uint64_t WebCore::RenderElement::isChildAllowed(WebCore::RenderElement *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return 1;
}

BOOL WebCore::Element::rendererIsNeeded(WebCore::Element *this, const WebCore::RenderStyle *a2)
{
  return (*((_QWORD *)a2 + 2) & 0x17) != 18;
}

void WebCore::Element::createElementRenderer(WebCore::Document *a1@<X0>, WebCore::Style *a2@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  WebCore::RenderElement::createFor(a1, a2, 0, a3, a4);
}

BOOL WebCore::RenderView::requiresColumns(WebCore::RenderView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 31);
  LODWORD(v2) = *(unsigned __int8 *)(v1 + 1316);
  if (!*(_BYTE *)(v1 + 1316))
  {
    if (*(_BYTE *)(v1 + 1317)
      || *(_DWORD *)(v1 + 1320)
      || *(_DWORD *)(v1 + 1324)
      || (v3 = *(_QWORD *)(v1 + 328), *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8) != v3))
    {
      LODWORD(v2) = 0;
    }
    else
    {
      v2 = *(_QWORD *)(v3 + 24);
      if (v2)
      {
        v4 = (unsigned __int8 *)(v1 + 1316);
        v5 = *(_QWORD *)(v2 + 8);
        if (v5)
          v4 = (unsigned __int8 *)(v5 + 468);
        LODWORD(v2) = *v4;
      }
    }
  }
  return (_DWORD)v2 != 0;
}

uint64_t WebCore::RenderObject::canHaveGeneratedChildren(WebCore::RenderObject *this)
{
  return (*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 128))(this);
}

uint64_t WebCore::Element::ensurePseudoElement(WebCore::Node *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)a1 + 9);
  v4 = v3 & 0xFFFFFFFFFFFFLL;
  if (a2 != 6)
  {
    if (v4)
    {
      if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0xB0))
      {
LABEL_18:
        v7 = v4 + 176;
        return *(_QWORD *)v7;
      }
    }
    else
    {
      WebCore::Node::materializeRareData(a1);
      v4 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
    }
    WebCore::PseudoElement::create((uint64_t)a1, a2, &v10);
    v9 = *(_QWORD *)(v4 + 176);
    *(_QWORD *)(v4 + 176) = v10;
    if (v9)
    {
      if (*(_DWORD *)(v9 + 24) == 2)
      {
        if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
      else
      {
        *(_DWORD *)(v9 + 24) -= 2;
      }
    }
    v4 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
    if (!v4)
      return 0;
    goto LABEL_18;
  }
  if (!v4)
  {
    WebCore::Node::materializeRareData(a1);
    v4 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
    goto LABEL_4;
  }
  if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0xA8))
  {
LABEL_4:
    WebCore::PseudoElement::create((uint64_t)a1, 6, &v10);
    v5 = *(_QWORD *)(v4 + 168);
    *(_QWORD *)(v4 + 168) = v10;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    v4 = *((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL;
    if (!v4)
      return 0;
  }
  v7 = v4 + 168;
  return *(_QWORD *)v7;
}

uint64_t WebCore::RenderView::isChildAllowed(WebCore::RenderView *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3)
{
  return (*((unsigned __int8 *)a2 + 45) >> 2) & 1;
}

void WebCore::HTMLImageElement::didAttachRenderers(WebCore::HTMLImageElement *this)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  _BYTE v15[24];
  unsigned int **v16;

  v1 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if ((((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) == 3) & *(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL)
                                                                                                  + 0x35)) != 1)
        return;
      ++*(_DWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x10);
      v3 = *((_QWORD *)this + 22);
      if ((*(_BYTE *)(v3 + 128) & 1) == 0)
      {
        v4 = *(_QWORD **)(v1 + 224);
        v5 = v4[3];
        if (!v5 || !*(_QWORD *)(v5 + 8))
        {
          v6 = *(_QWORD *)(v3 + 24);
          if (v6)
          {
            do
              v7 = __ldaxr((unsigned int *)v6);
            while (__stlxr(v7 + 1, (unsigned int *)v6));
            v14 = (unsigned int *)v6;
            v8 = *(_QWORD *)(v6 + 8);
            if (v8)
            {
              v16 = &v14;
              ++*(_DWORD *)(v8 + 548);
              v9 = *(_QWORD *)(v8 + 488);
              if (v9)
              {
                if (*(_QWORD *)(v9 + 8))
                  WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v8 + 464), (uint64_t *)&v16, (uint64_t)v15);
              }
            }
          }
          else
          {
            v14 = 0;
          }
          WebCore::RenderImageResource::setCachedImage(v4, (uint64_t *)&v14);
          WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v14, v10);
          v11 = *(_QWORD *)(*((_QWORD *)this + 22) + 24);
          if (!v11 || !*(_QWORD *)(v11 + 8))
          {
            v13 = v4[3];
            if (!v13 || !*(_QWORD *)(v13 + 8))
              WebCore::RenderImage::setImageSizeForAltText((WebCore::RenderImage *)v1, 0);
          }
        }
      }
      v12 = *(_DWORD *)(v1 + 16);
      if (v12)
      {
        *(_DWORD *)(v1 + 16) = v12 - 1;
        return;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x194280F20);
  }
}

uint64_t WebCore::RenderTableRow::canHaveChildren(WebCore::RenderTableRow *this)
{
  return 1;
}

void WebCore::HTMLImageElement::createElementRenderer(uint64_t a1@<X0>, WebCore::Style *a2@<X1>, const WebCore::Element *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const WebCore::HTMLElement *v11;
  char hasOverlay;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80))
  {
    WebCore::RenderElement::createFor((WebCore::Document *)a1, a2, 0, a3, a4);
  }
  else
  {
    v7 = bmalloc::api::isoAllocate();
    v8 = *(_DWORD *)(a1 + 260);
    v9 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v7, 15, a1, a2, 12, 259);
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_DWORD *)(v9 + 20) |= 2u;
    *(_QWORD *)v9 = off_1E34280E8;
    *(_QWORD *)(v9 + 216) = 0;
    v10 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = off_1E34287A0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_BYTE *)(v10 + 32) = 1;
    *(_QWORD *)(v7 + 224) = v10;
    *(_WORD *)(v7 + 232) = 0;
    *(_BYTE *)(v7 + 234) = 0;
    if ((*(_BYTE *)(a1 + 28) & 0x10) != 0)
      hasOverlay = WebCore::ImageOverlay::hasOverlay((WebCore::ImageOverlay *)a1, v11);
    else
      hasOverlay = 0;
    *(_BYTE *)(v7 + 235) = hasOverlay;
    *(_DWORD *)(v7 + 236) = v8;
    WebCore::RenderImage::updateAltText(v7);
    *a4 = v7;
  }
}

uint64_t WebCore::HTMLLIElement::didAttachRenderers(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t i;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int16 v9;

  v1 = *(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL;
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_22;
    if (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) != 19)
      return this;
    v2 = *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    *(_DWORD *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x10) = v2 + 1;
    for (i = *(_QWORD *)(this + 32); i; i = *(_QWORD *)(i + 32))
    {
      v4 = *(_WORD *)(i + 28);
      if ((v4 & 8) == 0)
        break;
      if ((v4 & 0x10) != 0)
      {
        v5 = *(_QWORD *)(WebCore::HTMLNames::ulTag + 24);
        v6 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
        if (v6 != v5)
        {
          v7 = 0;
          v8 = *(_QWORD *)(WebCore::HTMLNames::olTag + 24);
LABEL_14:
          v7 |= v6 == v8;
          if (v6 != v8)
          {
            while (1)
            {
              i = *(_QWORD *)(i + 32);
              if (!i)
                break;
              v9 = *(_WORD *)(i + 28);
              if ((v9 & 8) == 0)
                break;
              if ((v9 & 0x10) != 0)
              {
                v6 = *(_QWORD *)(*(_QWORD *)(i + 96) + 24);
                if (v6 == v5)
                  goto LABEL_9;
                goto LABEL_14;
              }
            }
          }
          if ((v7 & 1) == 0)
            break;
        }
        goto LABEL_9;
      }
    }
    *(_BYTE *)(v1 + 264) = 1;
LABEL_9:
    if (v2 == -1)
    {
LABEL_22:
      __break(0xC471u);
      JUMPOUT(0x194281164);
    }
    *(_DWORD *)(v1 + 16) = v2;
  }
  return this;
}

uint64_t WebCore::ImageOverlay::hasOverlay(WebCore::ImageOverlay *this, const WebCore::HTMLElement *a2)
{
  uint64_t hasElementWithId;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  v4 = *(_QWORD *)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 2;
  if (*(_BYTE *)(v4 + 193))
  {
    hasElementWithId = 0;
  }
  else
  {
    v7 = v4;
    v6 = v4 + 96;
    {
      v8[0] = "image-overlay";
      v8[1] = 14;
      WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier, (uint64_t)v8);
    }
    hasElementWithId = WebCore::TreeScope::hasElementWithId(v6, (uint64_t)&WebCore::ImageOverlay::imageOverlayElementIdentifier(void)::identifier);
    v4 = v7;
    v5 = *(_DWORD *)(v7 + 24) - 2;
  }
  if (v5)
  {
    *(_DWORD *)(v4 + 24) = v5;
  }
  else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  return hasElementWithId;
}

unint64_t WebCore::RenderLayerScrollableArea::reachableTotalContentsSize(WebCore::RenderLayerScrollableArea *this)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  WebCore::RenderBox *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  WebCore::RenderBox *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  WebCore::RenderBox *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  WebCore::RenderBox *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;

  if (!*((_BYTE *)this + 76))
  {
    v2 = *((_DWORD *)this + 22);
LABEL_3:
    v3 = *((unsigned int *)this + 23);
    goto LABEL_4;
  }
  WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
  v2 = *((_DWORD *)this + 22);
  if (!*((_BYTE *)this + 76))
    goto LABEL_3;
  WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
  v3 = *((unsigned int *)this + 23);
  if (*((_BYTE *)this + 76))
    WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
LABEL_4:
  v4 = *((_DWORD *)this + 22);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v5 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  else
    v5 = 0;
  v6 = WebCore::RenderBox::clientWidth(v5);
  v8 = ((int)(v6 - (v7 & 0xFFFFFFC0) + 32) >> 6) + v6 / 64;
  v9 = *((_QWORD *)this + 12);
  if (v4 > v8)
  {
    v10 = *(WebCore::RenderBox **)(v9 + 32);
    if ((*((_BYTE *)v10 + 45) & 4) != 0)
      v27 = *(_QWORD *)(v9 + 32);
    else
      v27 = 0;
    if ((*(_BYTE *)(v27 + 22) & 1) != 0 && ((*(_DWORD *)(v27 + 96) >> 10) & 7u) - 3 < 2)
      goto LABEL_16;
  }
  else
  {
    v10 = *(WebCore::RenderBox **)(v9 + 32);
  }
  if (v10)
    v11 = (*((_BYTE *)v10 + 45) & 4) == 0;
  else
    v11 = 1;
  if (v11)
  {
    v14 = 0;
  }
  else
  {
    v12 = WebCore::RenderBox::clientWidth(v10);
    v14 = ((int)(v12 - (v13 & 0xFFFFFFC0) + 32) >> 6) + v12 / 64;
    WebCore::RenderBox::clientHeight(v10);
  }
  if ((int)v2 >= v14)
    v2 = v14;
LABEL_16:
  if (*((_BYTE *)this + 76))
    WebCore::RenderLayerScrollableArea::computeScrollDimensions(this);
  v15 = *((_DWORD *)this + 23);
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 12) + 32) + 45) & 4) != 0)
    v16 = *(WebCore::RenderBox **)(*((_QWORD *)this + 12) + 32);
  else
    v16 = 0;
  v17 = WebCore::RenderBox::clientHeight(v16);
  v19 = ((int)(v17 - (v18 & 0xFFFFFFC0) + 32) >> 6) + v17 / 64;
  v20 = *((_QWORD *)this + 12);
  if (v15 > v19)
  {
    v21 = *(WebCore::RenderBox **)(v20 + 32);
    if ((*((_BYTE *)v21 + 45) & 4) != 0)
      v26 = *(_QWORD *)(v20 + 32);
    else
      v26 = 0;
    if ((*(_BYTE *)(v26 + 22) & 1) != 0 && ((unsigned __int16)*(_DWORD *)(v26 + 96) >> 13) - 3 < 2)
      return v2 | (unint64_t)(v3 << 32);
  }
  else
  {
    v21 = *(WebCore::RenderBox **)(v20 + 32);
  }
  v22 = 0;
  if (v21 && (*((_BYTE *)v21 + 45) & 4) != 0)
  {
    WebCore::RenderBox::clientWidth(v21);
    v23 = WebCore::RenderBox::clientHeight(v21);
    v22 = ((int)(v23 - (v24 & 0xFFFFFFC0) + 32) >> 6) + v23 / 64;
  }
  if ((int)v3 >= v22)
    v3 = v22;
  else
    v3 = v3;
  return v2 | (unint64_t)(v3 << 32);
}

double WebCore::ResourceRequestBase::timeoutInterval(WebCore::ResourceRequestBase *this)
{
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  return *((double *)this + 10);
}

uint64_t WebCore::HTMLCanvasElement::virtualHasPendingActivity(WebCore::HTMLCanvasElement *this)
{
  uint64_t result;
  _BYTE *v2;

  if (!*((_BYTE *)this + 274))
    return 0;
  v2 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v2)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 32))(*((_QWORD *)this + 31)) & 1) != 0)
    return !v2[356] || v2[352] != 0;
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 40))(v2);
  if ((_DWORD)result)
    return !v2[356] || v2[352] != 0;
  return result;
}

uint64_t PAL::initVKCImageAnalysis(PAL *this)
{
  if (qword_1ECE7EE98 != -1)
    dispatch_once(&qword_1ECE7EE98, &__block_literal_global_12_9);
  return qword_1ECE7EEA0;
}

uint64_t PAL::initDDScannerResult(PAL *this)
{
  if (qword_1ECE7E298 != -1)
    dispatch_once(&qword_1ECE7E298, &__block_literal_global_5);
  return qword_1ECE7E2A0;
}

uint64_t PAL::initCNPostalAddress(PAL *this)
{
  if (qword_1ECE7E188 != -1)
    dispatch_once(&qword_1ECE7E188, &__block_literal_global_52_0);
  return qword_1ECE7E190;
}

uint64_t PAL::initAVOutputContext(PAL *this)
{
  if (qword_1ECE7DD68 != -1)
    dispatch_once(&qword_1ECE7DD68, &__block_literal_global_264);
  return qword_1ECE7DD70;
}

uint64_t PAL::initCNPhoneNumber(PAL *this)
{
  if (qword_1ECE7E178 != -1)
    dispatch_once(&qword_1ECE7E178, &__block_literal_global_50_1);
  return qword_1ECE7E180;
}

uint64_t PAL::initPKContact(PAL *this)
{
  if (qword_1ECE7E848 != -1)
    dispatch_once(&qword_1ECE7E848, &__block_literal_global_123_1);
  return qword_1ECE7E850;
}

uint64_t PAL::initRVItem(PAL *this)
{
  if (qword_1ECE7EA30 != -1)
    dispatch_once(&qword_1ECE7EA30, &__block_literal_global_7);
  return qword_1ECE7EA38;
}

WTF *WebCore::FontCascade::layoutSimpleText(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  float v13;
  void *v14;
  double *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *result;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;
  float v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v42;
  uint64_t v43;
  _BYTE v44[8192];
  WTF *v45;
  uint64_t v46;
  _BYTE v47[2048];
  WTF *v48;
  uint64_t v49;
  _BYTE v50[16384];
  WTF *v51;
  uint64_t v52;
  _BYTE v53[16384];
  WTF *v54;
  uint64_t v55;
  _BYTE v56[8192];
  __int128 v57;
  uint64_t v58;
  _DWORD *v59;
  double v60;
  double v61;
  float v62;
  float v63;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = (double *)v2;
  *(_QWORD *)v2 = v2 + 16;
  *(_QWORD *)(v2 + 8) = 1024;
  *(_QWORD *)(v2 + 8208) = v2 + 8224;
  *(_QWORD *)(v2 + 8216) = 1024;
  *(_QWORD *)(v2 + 10272) = v2 + 10288;
  *(_QWORD *)(v2 + 10280) = 1024;
  *(_QWORD *)(v2 + 26672) = v2 + 26688;
  *(_QWORD *)(v2 + 26680) = 1024;
  *(_QWORD *)(v2 + 43072) = v2 + 43088;
  *(_QWORD *)(v2 + 43080) = 1024;
  *(_OWORD *)(v2 + 51280) = 0u;
  v12 = WebCore::WidthIterator::WidthIterator((uint64_t)&v58, v10, v7, 0, 0, v11);
  v42 = (WTF *)v44;
  v43 = 1024;
  v45 = (WTF *)v47;
  v46 = 1024;
  v48 = (WTF *)v50;
  v49 = 1024;
  v51 = (WTF *)v53;
  v52 = 1024;
  v54 = (WTF *)v56;
  v55 = 1024;
  v57 = 0u;
  WebCore::WidthIterator::advance(v12, v6, (WebCore::GlyphBuffer *)&v42);
  v13 = v63;
  WebCore::WidthIterator::advance((uint64_t)&v58, v4, (WebCore::GlyphBuffer *)v9);
  if (*((_DWORD *)v9 + 3))
  {
    v15 = v9 + 6410;
    v16 = v63;
    if ((*(_BYTE *)(v8 + 37) & 2) != 0)
    {
      v30 = *(_QWORD *)(v8 + 8);
      if (v30)
        v31 = *(_DWORD *)(v30 + 4);
      else
        v31 = 0;
      WebCore::WidthIterator::advance((uint64_t)&v58, v31, (WebCore::GlyphBuffer *)&v42);
      v32 = *(double *)&v57;
      v33 = v60;
      v34 = *((double *)&v57 + 1);
      v35 = v61;
      *((double *)&v57 + 1) = (float)(v35 + v34);
      *(double *)&v57 = (float)((float)(v33 + v32) + v62);
      v63 = (float)(v63 + v33) + v62;
      v62 = 0.0;
      v36 = *(_BYTE *)(v8 + 37);
      v37 = *v15;
      *v15 = (float)((float)(v63 - v16) + v37);
      if ((v36 & 2) != 0)
      {
        v38 = *((_DWORD *)v9 + 3);
        v39 = v38 - 1;
        if (v38 != 1)
        {
          v40 = 1;
          do
            WebCore::GlyphBuffer::swap((uint64_t)v9, v40 - 1, v39--);
          while (v40++ < v39);
        }
      }
    }
    else
    {
      v17 = *(double *)&v57;
      v18 = v60;
      v19 = *((double *)&v57 + 1);
      v20 = v61;
      *((double *)&v57 + 1) = (float)(v20 + v19);
      *(double *)&v57 = (float)((float)(v18 + v17) + v62);
      v63 = (float)(v63 + v18) + v62;
      v62 = 0.0;
      v21 = *v15;
      *v15 = (float)(v13 + v21);
    }
  }
  v22 = v54;
  if (v56 != (_BYTE *)v54 && v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree(v22, v14);
  }
  v23 = v51;
  if (v53 != (_BYTE *)v51 && v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v23, v14);
  }
  v24 = v48;
  if (v50 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    WTF::fastFree(v24, v14);
  }
  v25 = v45;
  if (v47 != (_BYTE *)v45 && v45)
  {
    v45 = 0;
    LODWORD(v46) = 0;
    WTF::fastFree(v25, v14);
  }
  result = v42;
  if (v44 != (_BYTE *)v42 && v42)
  {
    v42 = 0;
    LODWORD(v43) = 0;
    result = (WTF *)WTF::fastFree(result, v14);
  }
  v27 = v59;
  v59 = 0;
  if (v27)
  {
    if (!*v27)
    {
      __break(0xC471u);
      JUMPOUT(0x194281A78);
    }
    --*v27;
  }
  v28 = v58;
  v58 = 0;
  if (v28)
  {
    v29 = *(_DWORD *)(v28 + 8);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x194281A98);
    }
    *(_DWORD *)(v28 + 8) = v29 - 1;
  }
  return result;
}

WTF *WebCore::Layout::InlineItemsBuilder::build(WTF *this, unint64_t a2, uint64_t a3, const WebCore::RenderStyle *a4)
{
  unint64_t v4;
  int v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  __int16 v18;
  BOOL v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  int v33;
  __int16 v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  BOOL v39;
  const float *v40;
  uint32x4_t v41;
  WTF *v42;
  int16x8_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  _DWORD *v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  WebCore::Length *v66;
  int v67;
  float v68;
  _BOOL4 v69;
  char *v70;
  unsigned int v71;
  char *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  _BOOL4 v76;
  int v77;
  int v78;
  int v80;
  uint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  int v85;
  WTF *v86;
  int v87;
  unsigned int v88;
  char *v89;
  int v90;
  uint64_t v91;
  char *v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v115;
  uint64_t v116;
  int v117;
  unsigned int v119;
  int v120;
  uint64_t v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  char *v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  WTF *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  WTF *v138;
  size_t v139;
  int v140;
  WTF *v141;
  unsigned int v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  char *v146;
  __int128 v147;
  uint64_t v148;
  BOOL v149;
  unsigned int v150;
  int v151;
  BOOL v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unsigned int v158;
  BOOL v160;
  BOOL v161;
  int v162;
  char *v163;
  uint64_t v164;
  int v166;
  char *v167;
  __int128 v168;
  __int16 v169;
  int v170;
  int v171;
  unsigned int v172;
  BOOL v174;
  BOOL v176;
  int v177;
  WTF *v178;
  _DWORD *v180;
  int v181;
  WebCore::Layout::Box **v182;
  WebCore::Layout::Box **v183;
  int v184;
  WTF *v185;
  _WORD *v186;
  __int16 v187;
  _WORD *v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  __int16 v196;
  float v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  WTF *v201;
  float *v202;
  WTF::StringImpl *v203;
  float v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  WTF *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  __int128 v215;
  WTF *v216;
  WTF *v217;
  int v218;
  WTF *result;
  WTF *v220;
  void *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  WTF *v226;
  int v230;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  WTF *v236;
  WTF *v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  WTF *v244;
  uint64_t v245;
  WTF *v246;
  int v247;
  int v248;
  int v249;
  int v250;
  unint64_t v251;
  int NextBreakablePosition;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  char *v258;
  int v259;
  WTF *v260;
  int v261;
  int v262;
  BOOL v263;
  uint64_t v264;
  int v265;
  char *v266;
  char v267;
  uint64_t v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  uint64_t v271;
  int8x16_t *v272;
  uint64_t v273;
  _BYTE *v274;
  char *v275;
  char *v276;
  __int16 v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  WTF *v281;
  int v282;
  WTF *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  WTF *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  WTF *v297;
  __int16 v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  int v303;
  int v305;
  BOOL v306;
  int v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  int v311;
  unint64_t v312;
  unsigned int v313;
  int v314;
  uint64_t v315;
  int v316;
  unint64_t v317;
  int v318;
  unsigned int v319;
  uint64_t v320;
  unint64_t v321;
  char v322;
  WTF *v323;
  WTF *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  BOOL v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  WTF *v333;
  int v334;
  WTF *v335;
  unsigned int v336;
  uint64_t v337;
  unint64_t v338;
  WTF *v339;
  uint64_t v340;
  BOOL v341;
  __int16 v342;
  unsigned int v343;
  unsigned int v344;
  WTF *v345;
  uint64_t v346;
  int v347;
  char v348;
  char *v349;
  int v350;
  char *v351;
  uint64_t v352;
  unint64_t v353;
  int v354;
  WTF *v355;
  uint64_t v356;
  uint64_t v357;
  BOOL v358;
  unsigned int v359;
  int v360;
  BOOL v361;
  unsigned int v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  WTF *v368;
  void *v369;
  char *v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  int v375;
  WTF *v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  WTF::StringImpl *v382;
  int v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  unsigned __int16 v393;
  unsigned int v394;
  int v395;
  unint64_t v396;
  __int128 v397;
  char *v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  char *v402;
  char *v403;
  char *v404;
  int v405;
  char *v406;
  uint64_t v407;
  int v408;
  const char *v409;
  uint64_t v410;
  char v411;
  const char *v412;
  uint64_t v413;
  unsigned int v414;
  int v416;
  int v418;
  int v419;
  uint64_t v420;
  void *v421;
  int v422;
  uint64_t v424;
  uint64_t LineStyle;
  _BOOL4 v427;
  _BOOL4 v428;
  _BOOL4 v429;
  WTF *v430;
  _BOOL4 v431;
  int v432;
  int v433;
  unsigned int v434;
  uint64_t v435;
  float v437;
  int v438;
  _BOOL4 v439;
  _BOOL4 v440;
  WTF *v441;
  unsigned int v442;
  int v443;
  unsigned int v444;
  unsigned int v445;
  WTF *v446;
  WTF *v447;
  uint64_t v448;
  int v449;
  WTF *__src;
  WTF *__srca;
  uint64_t v452;
  unsigned int v453[2];
  unsigned int v454;
  unsigned __int8 v455;
  unsigned int v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  __int128 v463;
  WTF::StringImpl *v465;
  WTF::StringImpl *v466;
  WTF::StringImpl *v467;
  WTF *v468;
  WTF *v469;
  WTF *v470[2];
  _QWORD v471[8];
  unsigned int v472;
  char v473;
  int v474;
  WTF *v475;
  uint64_t v476;
  WTF::StringImpl *v477;
  WTF::StringImpl *v478;
  unsigned int v479;
  char v480;
  _BYTE v481[24];
  char v482[8];
  _BYTE v483[24];
  int v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  uint64_t v488;
  char v489;
  BOOL v490;
  int v491;
  uint64_t v492;
  int8x16x2_t v493;
  int8x16x2_t v494;
  int8x16x2_t v495;

  v6 = this;
  v492 = *MEMORY[0x1E0C80C00];
  v468 = 0;
  v469 = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 120);
  *((_QWORD *)&v463 + 1) = a2;
  *(_QWORD *)&v463 = a3;
  if (v7)
  {
    if (a2 | a3)
    {
      if (a2 >= *(unsigned int *)(*(_QWORD *)this + 28))
      {
        *(_QWORD *)v481 = *(_QWORD *)(*((_QWORD *)this + 1) + 120);
        ++*(_DWORD *)(v7 + 8);
        WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v470, (uint64_t *)v481, 1uLL);
        v407 = *(_QWORD *)v481;
        *(_QWORD *)v481 = 0;
        if (v407)
        {
          v408 = *(_DWORD *)(v407 + 8);
          if (!v408)
          {
            __break(0xC471u);
            JUMPOUT(0x194284E0CLL);
          }
          *(_DWORD *)(v407 + 8) = v408 - 1;
        }
        v6 = this;
      }
      else
      {
        v6 = this;
        WebCore::Layout::InlineItemsBuilder::traverseUntilDamaged((WebCore::Layout::InlineItemsBuilder *)v470, this, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 24 * a2));
      }
    }
    else
    {
      v8 = *(_DWORD *)(v7 + 8);
      v470[0] = (WTF *)v471;
      v471[0] = v7;
      *(_DWORD *)(v7 + 8) = v8 + 2;
      v470[1] = (WTF *)0x100000008;
      if (v8 == -2)
      {
        __break(0xC471u);
        JUMPOUT(0x194283EACLL);
      }
      *(_DWORD *)(v7 + 8) = v8 + 1;
    }
  }
  else
  {
    v470[0] = (WTF *)v471;
    v470[1] = (WTF *)8;
  }
  v9 = v481;
  v10 = HIDWORD(v470[1]);
  if (HIDWORD(v470[1]))
  {
    v11 = 20971521;
    v12 = *(_QWORD *)v6;
    v13 = 254;
    v5 = 458755;
    v459 = *(_QWORD *)v6;
    do
    {
      while (1)
      {
        v14 = *((_QWORD *)v470[0] + v10 - 1);
        v15 = *(_DWORD *)(v14 + 8);
        *(_DWORD *)(v14 + 8) = v15 + 1;
        v16 = *(_QWORD *)(v14 + 32);
        v17 = (v16 & 0x1Fu) > 0x18 || ((1 << (v16 & 0x1F)) & 0x1400001) == 0;
        if (v17)
          break;
        v18 = *(_WORD *)(v14 + 12);
        v19 = (v18 & 0xFu) > 0xB || ((1 << (v18 & 0xF)) & 0x884) == 0;
        if (!v19 || (v18 & 0x20) != 0)
          goto LABEL_17;
        if ((v16 & 0x180000) == 0x100000 || (v18 & 0xFu) - 9 < 2)
          goto LABEL_17;
        *(_QWORD *)v481 = v14;
        *(_QWORD *)&v481[12] = 0;
        *(_DWORD *)&v481[8] = 0;
        v481[20] = -2;
        *(_WORD *)&v481[21] = 5;
        v166 = HIDWORD(v469);
        if (HIDWORD(v469) == (_DWORD)v469)
        {
          v294 = WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v468, HIDWORD(v469) + 1, (unint64_t)v481);
          v166 = HIDWORD(v469);
          v295 = (char *)v468 + 24 * HIDWORD(v469);
          v296 = *(_QWORD *)(v294 + 16);
          v13 = 254;
          *(_OWORD *)v295 = *(_OWORD *)v294;
          *((_QWORD *)v295 + 2) = v296;
        }
        else
        {
          v167 = (char *)v468 + 24 * HIDWORD(v469);
          v168 = *(_OWORD *)v481;
          *((_QWORD *)v167 + 2) = *(_QWORD *)&v481[16];
          *(_OWORD *)v167 = v168;
        }
        HIDWORD(v469) = v166 + 1;
        if (*((_BYTE *)v6 + 24))
        {
LABEL_960:
          LOBYTE(v170) = 1;
          goto LABEL_336;
        }
        v169 = *(_WORD *)(v14 + 12);
        if ((v169 & 0x20) != 0)
        {
          v170 = (*(unsigned __int8 *)(v14 + 129) >> 3) & 1;
          goto LABEL_336;
        }
        v357 = *(_QWORD *)(v14 + 32);
        v358 = (v357 & 0x1Fu) > 0x18 || ((1 << (v357 & 0x1F)) & 0x1400001) == 0;
        if (v358
          || ((v359 = v169 & 0xF, v64 = v359 > 0xB, v360 = (1 << v359) & 0x884, !v64) ? (v361 = v360 == 0) : (v361 = 1),
              !v361))
        {
          LOBYTE(v170) = 0;
          goto LABEL_336;
        }
        LOBYTE(v170) = 0;
        if ((v357 & 0xE000000) == 0 && (v357 & 0x180000) != 0x100000)
        {
          if ((*(_BYTE *)(v14 + 59) & 4) != 0)
            goto LABEL_960;
          LOBYTE(v170) = (*(_BYTE *)(v14 + 60) & 0x10) == 0 && (*(_QWORD *)(v14 + 32) & 0x1C00000) != 0;
        }
LABEL_336:
        *((_BYTE *)v6 + 24) = v170;
        ++*((_QWORD *)v6 + 4);
        if ((*(_BYTE *)(v14 + 12) & 0x40) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19428480CLL);
        }
        a2 = *(_QWORD *)(v14 + 120);
        if (!a2)
        {
LABEL_17:
          v20 = 0;
          goto LABEL_18;
        }
        v171 = HIDWORD(v470[1]);
        if (HIDWORD(v470[1]) == LODWORD(v470[1]))
        {
          WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Box const&>((uint64_t)v470, a2);
          v13 = 254;
        }
        else
        {
          *((_QWORD *)v470[0] + HIDWORD(v470[1])) = a2;
          ++*(_DWORD *)(a2 + 8);
          HIDWORD(v470[1]) = v171 + 1;
        }
        v20 = 1;
LABEL_18:
        v21 = *(_DWORD *)(v14 + 8);
        if (!v21)
          goto LABEL_726;
        *(_DWORD *)(v14 + 8) = v21 - 1;
        if ((v20 & 1) == 0)
          goto LABEL_24;
        v10 = HIDWORD(v470[1]);
        if (!HIDWORD(v470[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x194284E1CLL);
        }
      }
      if (v15 == -1)
      {
LABEL_726:
        __break(0xC471u);
        JUMPOUT(0x194283F04);
      }
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
LABEL_24:
        if (!HIDWORD(v470[1]))
          goto LABEL_359;
        v22 = HIDWORD(v470[1]) - 1;
        v23 = *((_QWORD *)v470[0] + v22);
        *((_QWORD *)v470[0] + v22) = 0;
        v24 = *((_QWORD *)v470[0] + v22);
        *((_QWORD *)v470[0] + v22) = 0;
        if (v24)
        {
          v25 = *(_DWORD *)(v24 + 8);
          if (!v25)
          {
            __break(0xC471u);
            JUMPOUT(0x194283F88);
          }
          *(_DWORD *)(v24 + 8) = v25 - 1;
        }
        HIDWORD(v470[1]) = v22;
        v26 = *(_QWORD *)(v23 + 32);
        if ((v26 & 0x180000) == 0x100000)
        {
          *((_BYTE *)v6 + 25) = 0;
          *(_QWORD *)v481 = v23;
          *(_QWORD *)&v481[12] = 0;
          *(_DWORD *)&v481[8] = 0;
          v481[20] = -2;
          v144 = *(_WORD *)&v481[21] & 0xFE00 | 8;
          goto LABEL_266;
        }
        v27 = *(_WORD *)(v23 + 12);
        if ((v27 & 0x20) == 0)
        {
          v142 = v26 & 0x1F;
          if (v142 <= 0x19)
          {
            if (((1 << v142) & 0x2128000) != 0)
              goto LABEL_275;
            if (((1 << v142) & 0x1400001) != 0)
            {
LABEL_304:
              v158 = v27 & 0xF;
              if (v158 <= 0xB && ((1 << (v27 & 0xF)) & 0x884) != 0)
                goto LABEL_275;
LABEL_309:
              if (v158 - 9 <= 1)
                goto LABEL_275;
              v160 = v142 > 0x18 || ((1 << v142) & 0x1400001) == 0;
              if (v160 || (v158 <= 0xB ? (v161 = ((1 << v158) & 0x884) == 0) : (v161 = 1), !v161))
              {
                if ((v26 & 0xE000000) != 0)
                {
                  *(_QWORD *)v481 = v23;
                  *(_QWORD *)&v481[12] = 0;
                  *(_DWORD *)&v481[8] = 0;
                  v481[20] = -2;
                  *(_WORD *)&v481[21] = *(_WORD *)&v481[21] & 0xFE00 | 7;
                  v162 = HIDWORD(v469);
                  if (HIDWORD(v469) == (_DWORD)v469)
                  {
                    WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineItem>((uint64_t)&v468, (unint64_t)v481);
                    v13 = 254;
                  }
                  else
                  {
                    v163 = (char *)v468 + 24 * HIDWORD(v469);
                    v164 = *(_QWORD *)&v481[16];
                    *(_OWORD *)v163 = *(_OWORD *)v481;
                    *((_QWORD *)v163 + 2) = v164;
                    HIDWORD(v469) = v162 + 1;
                  }
                  *((_BYTE *)v6 + 25) = 0;
                }
                goto LABEL_198;
              }
              *(_QWORD *)v481 = v23;
              *(_QWORD *)&v481[12] = 0;
              *(_DWORD *)&v481[8] = 0;
              v481[20] = -2;
              *(_WORD *)&v481[21] = 6;
              v140 = HIDWORD(v469);
              if (HIDWORD(v469) != (_DWORD)v469)
              {
                v146 = (char *)v468 + 24 * HIDWORD(v469);
LABEL_285:
                v147 = *(_OWORD *)v481;
                *((_QWORD *)v146 + 2) = *(_QWORD *)&v481[16];
                *(_OWORD *)v146 = v147;
LABEL_265:
                HIDWORD(v469) = v140 + 1;
                goto LABEL_198;
              }
LABEL_267:
              v153 = WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v468, HIDWORD(v469) + 1, (unint64_t)v481);
              v140 = HIDWORD(v469);
              v154 = (char *)v468 + 24 * HIDWORD(v469);
              v155 = *(_QWORD *)(v153 + 16);
              v13 = 254;
              *(_OWORD *)v154 = *(_OWORD *)v153;
              *((_QWORD *)v154 + 2) = v155;
              goto LABEL_265;
            }
          }
          if ((*(_QWORD *)(v23 + 32) & 0x1FLL) != 3 && (*(_QWORD *)(v23 + 32) & 0x1FLL) != 5)
          {
            v158 = v27 & 0xF;
            goto LABEL_309;
          }
          if (v142 <= 0x18 && ((1 << v142) & 0x1400001) != 0)
            goto LABEL_304;
LABEL_275:
          v143 = *(_QWORD *)(v23 + 32) & 0x1FLL;
          if (v143 == 25)
            goto LABEL_198;
          if (v142 > 0x19)
            goto LABEL_461;
          if (((1 << v142) & 0x2128000) != 0)
          {
LABEL_278:
            *((_BYTE *)v6 + 25) = 0;
            *(_QWORD *)v481 = v23;
            *(_QWORD *)&v481[12] = 0;
            *(_DWORD *)&v481[8] = 0;
            v481[20] = -2;
            v144 = 4;
            goto LABEL_266;
          }
          if (((1 << v142) & 0x1400001) != 0)
          {
LABEL_342:
            v172 = v27 & 0xF;
            if (v172 <= 0xB && ((1 << (v27 & 0xF)) & 0x884) != 0)
              goto LABEL_278;
          }
          else
          {
LABEL_461:
            if (v143 == 3 || v143 == 5)
            {
              v64 = v142 > 0x18;
              v230 = (1 << v142) & 0x1400001;
              if (v64 || v230 == 0)
                goto LABEL_278;
              goto LABEL_342;
            }
            v172 = v27 & 0xF;
          }
          if (v172 - 9 > 1)
            goto LABEL_198;
          v174 = (v27 & 0xF) != 10;
          v176 = (v26 & 0xE000000) == 0 && *((_BYTE *)v6 + 25) != 0 && v174;
          *((_BYTE *)v6 + 25) = v176;
          v177 = *(_WORD *)(v23 + 12) & 0xF;
          *(_QWORD *)v481 = v23;
          *(_QWORD *)&v481[12] = 0;
          *(_DWORD *)&v481[8] = 0;
          v481[20] = -2;
          if (v177 == 10)
            v144 = 3;
          else
            v144 = 1;
LABEL_266:
          *(_WORD *)&v481[21] = v144;
          v140 = HIDWORD(v469);
          if (HIDWORD(v469) != (_DWORD)v469)
          {
            v146 = (char *)v468 + 24 * HIDWORD(v469);
            goto LABEL_285;
          }
          goto LABEL_267;
        }
        if (v463 == 0
          || *((_QWORD *)&v463 + 1) >= (unint64_t)*(unsigned int *)(v12 + 28)
          || (v28 = *(_QWORD *)(v12 + 16), *(_QWORD *)(v28 + 24 * *((_QWORD *)&v463 + 1)) != v23)
          || (*(_WORD *)(v28 + 24 * *((_QWORD *)&v463 + 1) + 21) & 0xF) != 2
          && (*(_WORD *)(v28 + 24 * *((_QWORD *)&v463 + 1) + 21) & 0xF) != 0)
        {
          LOBYTE(v29) = 0;
          v457 = 0;
          v30 = 1;
        }
        else
        {
          v30 = 0;
          v29 = *(_DWORD *)(v28 + 24 * *((_QWORD *)&v463 + 1) + 16);
          v457 = v29 & 0xFFFFFF00;
        }
        v31 = *(WTF::StringImpl **)(v23 + 120);
        v465 = v31;
        if (!v31 || (v33 = *(_DWORD *)v31, v32 = *((unsigned int *)v31 + 1), *(_DWORD *)v31 += 2, !(_DWORD)v32))
        {
          v156 = HIDWORD(v469);
          if (HIDWORD(v469) == (_DWORD)v469)
          {
            v278 = HIDWORD(v469) + ((unint64_t)HIDWORD(v469) >> 2);
            if (v278 >= 0x10)
              v279 = v278 + 1;
            else
              v279 = 16;
            if (v279 <= (unint64_t)HIDWORD(v469) + 1)
              v280 = HIDWORD(v469) + 1;
            else
              v280 = v279;
            if (v280 >= 0xAAAAAAB)
            {
              __break(0xC471u);
              JUMPOUT(0x194284E4CLL);
            }
            v281 = v468;
            v282 = 24 * v280;
            v283 = (WTF *)WTF::fastMalloc((WTF *)(24 * v280));
            LODWORD(v469) = (v282 & 0xFFFFFFF8) / 0x18;
            v468 = v283;
            memcpy(v283, v281, 24 * v156);
            if (v281)
            {
              if (v468 == v281)
              {
                v468 = 0;
                LODWORD(v469) = 0;
              }
              WTF::fastFree(v281, (void *)a2);
            }
            v31 = v465;
            v157 = (char *)v468 + 24 * HIDWORD(v469);
            v9 = v481;
            v11 = 20971521;
            v12 = v459;
            v13 = 254;
          }
          else
          {
            v157 = (char *)v468 + 24 * HIDWORD(v469);
          }
          *(_QWORD *)v157 = v23;
          *((_QWORD *)v157 + 1) = 0;
          *((_DWORD *)v157 + 4) = 0;
          v157[20] = -2;
          *(_WORD *)(v157 + 21) = 0;
          ++HIDWORD(v469);
          goto LABEL_195;
        }
        v455 = v29;
        if (*((_BYTE *)v6 + 24))
        {
LABEL_855:
          LOBYTE(v35) = 1;
          goto LABEL_39;
        }
        v34 = *(_WORD *)(v23 + 12);
        if ((v34 & 0x20) != 0)
        {
          v35 = (*(unsigned __int8 *)(v23 + 129) >> 3) & 1;
          goto LABEL_39;
        }
        v148 = *(_QWORD *)(v23 + 32);
        v149 = (v148 & 0x1Fu) > 0x18 || ((1 << (v148 & 0x1F)) & 0x1400001) == 0;
        if (v149
          || ((v150 = v34 & 0xF, v64 = v150 > 0xB, v151 = (1 << v150) & 0x884, !v64) ? (v152 = v151 == 0) : (v152 = 1),
              !v152))
        {
          LOBYTE(v35) = 0;
          goto LABEL_39;
        }
        LOBYTE(v35) = 0;
        if ((v148 & 0xE000000) == 0 && (v148 & 0x180000) != 0x100000)
        {
          if ((*(_BYTE *)(v23 + 59) & 4) != 0)
            goto LABEL_855;
          LOBYTE(v35) = (*(_BYTE *)(v23 + 60) & 0x10) == 0 && (*(_QWORD *)(v23 + 32) & 0x1C00000) != 0;
        }
LABEL_39:
        *((_BYTE *)v6 + 24) = v35;
        if (*(_BYTE *)(v23 + 128))
        {
          *(_QWORD *)v481 = v23;
          v481[20] = -2;
          *(_DWORD *)&v481[12] = v32;
          *(_DWORD *)&v481[16] = 0;
          *(_DWORD *)&v481[8] = 0;
          strcpy(&v481[21], " ");
          v405 = HIDWORD(v469);
          if (HIDWORD(v469) == (_DWORD)v469)
          {
            WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineTextItem>((uint64_t)&v468, (__int128 *)v481);
            v6 = this;
            v9 = v481;
          }
          else
          {
            v406 = (char *)v468 + 24 * HIDWORD(v469);
            v9 = v481;
            *(_OWORD *)v406 = *(_OWORD *)v481;
            *((_QWORD *)v406 + 2) = *(_QWORD *)&v481[16];
            HIDWORD(v469) = v405 + 1;
            v6 = this;
          }
          v11 = 20971521;
          v12 = v459;
          v13 = 254;
          v31 = v465;
          goto LABEL_196;
        }
        v36 = v32;
        v461 = v32;
        if (!v30)
          goto LABEL_78;
        *(_DWORD *)v31 = v33 + 4;
        {
          WebCore::Layout::TextBreakingPositionCache::TextBreakingPositionCache((WebCore::Layout::TextBreakingPositionCache *)&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache);
          v31 = v465;
        }
        v37 = *(_DWORD *)(v23 + 56);
        v38 = (v37 >> 27) & 7;
        if ((v37 & 0x40000000) == 0 && v38 == 3)
        {
          LOBYTE(v38) = 5;
        }
        else
        {
          if (v38)
            v39 = 0;
          else
            v39 = (v37 & 0x40000000) == 0;
          if (v39)
          {
            LOBYTE(v38) = 0;
          }
          else if ((v37 & 0x40000000) == 0 || v38)
          {
            if ((v37 & 0x40000000) == 0 || v38 != 1)
            {
              if ((v37 & 0x40000000) == 0 && v38 == 2)
              {
                LOBYTE(v38) = 3;
              }
              else if (v38 == 1 && (v37 & 0x40000000) == 0)
              {
                LOBYTE(v38) = 2;
              }
              else
              {
                LOBYTE(v38) = 0;
              }
            }
          }
          else
          {
            LOBYTE(v38) = 4;
          }
        }
        v40 = (const float *)(*(_QWORD *)(v23 + 40) + 228);
        v41 = (uint32x4_t)vld1q_dup_f32(v40);
        v42 = *(WTF **)(*(_QWORD *)(v23 + 48) + 176);
        if (v42)
          *(_DWORD *)v42 += 2;
        v43 = (int16x8_t)vshlq_u32(v41, (uint32x4_t)xmmword_1969F24B0);
        *(int8x8_t *)v43.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v43), (int8x8_t)0x1000700070003);
        v44 = *((_QWORD *)v6 + 2);
        *(_DWORD *)v31 += 2;
        *(_QWORD *)v481 = v31;
        v481[8] = v38;
        *(_DWORD *)&v481[9] = vmovn_s16(v43).u32[0];
        if (v42)
          *(_DWORD *)v42 += 2;
        v4 = (unint64_t)v483;
        *(_QWORD *)&v481[16] = v42;
        v482[0] = 0;
        v483[0] = 0;
        v484 = -1;
        v45 = *(unsigned int *)(v44 + 32);
        if ((_DWORD)v45 != -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t))off_1E33F2BF0[v45])(&v477, v483, v44 + 8);
          v31 = v465;
          v484 = v45;
        }
        if (WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
        {
          v46 = WTF::HashTable<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>,WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>,WTF::HashTraits<WTF::Vector<unsigned long,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>>,std::tuple<WTF::String,WebCore::Layout::TextBreakingPositionContext,WebCore::SecurityOriginData>>(&WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache, (uint64_t)v481);
          if (v46)
          {
            v48 = v46;
            if (!WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
              goto LABEL_722;
            v47 = *(_DWORD *)(WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache - 4);
          }
          else
          {
            if (!WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache)
            {
              v48 = 0;
LABEL_722:
              v49 = 0;
              v31 = v465;
              goto LABEL_61;
            }
            v47 = *(_DWORD *)(WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache - 4);
            v48 = WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache + 144 * v47;
          }
          v31 = v465;
          v49 = WebCore::Layout::TextBreakingPositionCache::singleton(void)::cache + 144 * v47;
        }
        else
        {
          v48 = 0;
          v49 = 0;
        }
LABEL_61:
        if (v484 != -1)
        {
          ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33F2BE0[v484])(&v477, v483);
          v31 = v465;
        }
        v484 = -1;
        v50 = *(WTF::StringImpl **)&v481[16];
        *(_QWORD *)&v481[16] = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
            v31 = v465;
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
        v51 = *(WTF::StringImpl **)v481;
        *(_QWORD *)v481 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::destroy(v51, (WTF::StringImpl *)a2);
            v31 = v465;
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
            v31 = v465;
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        if (v48 == v49)
        {
LABEL_73:
          v52 = 0;
          goto LABEL_74;
        }
        v103 = *(_DWORD *)(v23 + 56);
        v104 = *((unsigned int *)v31 + 1);
        v105 = HIDWORD(v469);
        v106 = *(unsigned int *)(v48 + 76) + (unint64_t)HIDWORD(v469);
        *(_QWORD *)v453 = v104;
        if (v106 > v469)
        {
          if (v106 >= 0xAAAAAAB)
          {
            __break(0xC471u);
            JUMPOUT(0x194284E3CLL);
          }
          v42 = v468;
          LODWORD(v4) = 24 * v106;
          v141 = (WTF *)WTF::fastMalloc((WTF *)(24 * v106));
          LODWORD(v469) = (v4 & 0xFFFFFFF8) / 0x18;
          v468 = v141;
          memcpy(v141, v42, 24 * v105);
          v31 = v465;
          v104 = *(_QWORD *)v453;
          if (v42)
          {
            if (v468 == v42)
            {
              v468 = 0;
              LODWORD(v469) = 0;
            }
            WTF::fastFree(v42, (void *)a2);
            v31 = v465;
            v104 = *(_QWORD *)v453;
          }
        }
        v107 = *(unsigned int *)(v48 + 76);
        if (!(_DWORD)v107)
        {
          v52 = 1;
          v6 = this;
          goto LABEL_74;
        }
        v442 = v105;
        v443 = v30;
        v108 = 0;
        v109 = ((v103 >> 27) & 7) - 1;
        v110 = v103 & 0x28000000;
        v111 = *(unint64_t **)(v48 + 64);
        v112 = 8 * v107;
        v444 = v103 & 0x28000000;
        v445 = v109;
        while (1)
        {
          v113 = v108;
          v108 = *v111;
          if (*v111 > v104 || v108 <= v113)
            break;
          v115 = *((_DWORD *)v31 + 1);
          if (v115 <= v113)
            goto LABEL_235;
          v116 = *((_QWORD *)v31 + 1);
          if ((*((_BYTE *)v31 + 16) & 4) != 0)
            v117 = *(unsigned __int8 *)(v116 + v113);
          else
            v117 = *(unsigned __int16 *)(v116 + 2 * v113);
          if (v117 != 10 || v109 > 2)
          {
            if (v117 == 10 || v117 == 32)
            {
              LODWORD(v4) = v108 - v113;
              v119 = v42 & 0xFFFFFE00;
              goto LABEL_223;
            }
            if (v117 == 9)
            {
              LODWORD(v4) = v108 - v113;
              v119 = v42 & 0xFFFFFE00;
              if (v110 == 0x8000000)
                v120 = 16;
              else
LABEL_223:
                v120 = 272;
              v121 = HIDWORD(v469);
              if (HIDWORD(v469) == (_DWORD)v469)
              {
                v454 = v13;
                v130 = HIDWORD(v469) + ((unint64_t)HIDWORD(v469) >> 2);
                if (v130 >= 0x10)
                  v131 = v130 + 1;
                else
                  v131 = 16;
                if (v131 <= (unint64_t)HIDWORD(v469) + 1)
                  v132 = HIDWORD(v469) + 1;
                else
                  v132 = v131;
                if (v132 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194284E2CLL);
                }
                v449 = 24 * v132;
                __src = v468;
                v133 = (WTF *)WTF::fastMalloc((WTF *)(24 * v132));
                LODWORD(v469) = (v449 & 0xFFFFFFF8) / 0x18;
                v468 = v133;
                memcpy(v133, __src, 24 * v121);
                if (__src)
                {
                  if (v468 == __src)
                  {
                    v468 = 0;
                    LODWORD(v469) = 0;
                  }
                  WTF::fastFree(__src, (void *)a2);
                }
                v31 = v465;
                v122 = (char *)v468 + 24 * HIDWORD(v469);
                v104 = *(_QWORD *)v453;
                v110 = v444;
                v109 = v445;
                v13 = v454;
              }
              else
              {
                v122 = (char *)v468 + 24 * HIDWORD(v469);
              }
              LODWORD(v42) = v120 | v119;
              *(_QWORD *)v122 = v23;
              *((_DWORD *)v122 + 2) = 0;
              *((_DWORD *)v122 + 3) = v4;
              *((_DWORD *)v122 + 4) = v113;
              v122[20] = -2;
              *(_WORD *)(v122 + 21) = (_WORD)v42;
            }
            else
            {
LABEL_235:
              v124 = (v108 - 1);
              if (v115 <= v124)
              {
                v127 = 0;
              }
              else
              {
                v125 = *((_QWORD *)v31 + 1);
                if ((*((_BYTE *)v31 + 16) & 4) != 0)
                  v126 = *(unsigned __int8 *)(v125 + v124);
                else
                  v126 = *(unsigned __int16 *)(v125 + 2 * v124);
                v127 = (v126 == 173) << 7;
              }
              v4 = HIDWORD(v469);
              if (HIDWORD(v469) == (_DWORD)v469)
              {
                v454 = v13;
                v134 = HIDWORD(v469) + ((unint64_t)HIDWORD(v469) >> 2);
                if (v134 >= 0x10)
                  v135 = v134 + 1;
                else
                  v135 = 16;
                if (v135 <= (unint64_t)HIDWORD(v469) + 1)
                  v136 = HIDWORD(v469) + 1;
                else
                  v136 = v135;
                if (v136 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194284E34);
                }
                __srca = v468;
                v137 = 24 * v136;
                v138 = (WTF *)WTF::fastMalloc((WTF *)(24 * v136));
                LODWORD(v469) = (v137 & 0xFFFFFFF8) / 0x18;
                v468 = v138;
                v139 = 24 * v4;
                LODWORD(v4) = (_DWORD)__srca;
                memcpy(v138, __srca, v139);
                if (__srca)
                {
                  if (v468 == __srca)
                  {
                    v468 = 0;
                    LODWORD(v469) = 0;
                  }
                  WTF::fastFree(__srca, (void *)a2);
                }
                v31 = v465;
                v128 = (char *)v468 + 24 * HIDWORD(v469);
                v104 = *(_QWORD *)v453;
                v110 = v444;
                v109 = v445;
                LODWORD(v13) = v454;
              }
              else
              {
                v128 = (char *)v468 + 24 * HIDWORD(v469);
              }
              v129 = v13 & 0xFFFFFE00 | v127;
              v13 = v129 | 0x20u;
              *(_QWORD *)v128 = v23;
              *((_DWORD *)v128 + 2) = 0;
              *((_DWORD *)v128 + 3) = v108 - v113;
              *((_DWORD *)v128 + 4) = v113;
              v128[20] = -2;
              *(_WORD *)(v128 + 21) = v129 | 0x20;
            }
            v123 = HIDWORD(v469) + 1;
            goto LABEL_228;
          }
          *(_QWORD *)v481 = v23;
          *(_QWORD *)&v481[8] = 0;
          v481[20] = -2;
          *(_WORD *)&v481[21] = *(_WORD *)&v481[21] & 0xFE00 | 2;
          *(_DWORD *)&v481[16] = v113;
          v350 = HIDWORD(v469);
          if (HIDWORD(v469) == (_DWORD)v469)
          {
            v420 = v13;
            WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::InlineSoftLineBreakItem>((uint64_t)&v468, (__n128 *)v481);
            v13 = v420;
            v110 = v444;
            v109 = v445;
            v104 = *(_QWORD *)v453;
            v31 = v465;
            goto LABEL_229;
          }
          v351 = (char *)v468 + 24 * HIDWORD(v469);
          *(_OWORD *)v351 = *(_OWORD *)v481;
          *((_QWORD *)v351 + 2) = *(_QWORD *)&v481[16];
          v123 = v350 + 1;
LABEL_228:
          HIDWORD(v469) = v123;
LABEL_229:
          ++v111;
          v112 -= 8;
          if (!v112)
          {
            v52 = 1;
            v6 = this;
LABEL_264:
            v30 = v443;
            goto LABEL_74;
          }
        }
        if (HIDWORD(v469) <= v442)
          goto LABEL_937;
        if (v442)
        {
          v52 = 0;
          HIDWORD(v469) = v442;
LABEL_938:
          v6 = this;
          v31 = v465;
          goto LABEL_264;
        }
        if (!(_DWORD)v469)
        {
LABEL_937:
          v52 = 0;
          goto LABEL_938;
        }
        v52 = 0;
        HIDWORD(v469) = 0;
        v31 = v465;
        v430 = v468;
        v6 = this;
        v30 = v443;
        if (v468)
        {
          v468 = 0;
          LODWORD(v469) = 0;
          WTF::fastFree(v430, (void *)a2);
          v31 = v465;
          goto LABEL_73;
        }
LABEL_74:
        v9 = v481;
        v11 = 20971521;
        v12 = v459;
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
          v31 = v465;
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
        v13 = 254;
        v32 = v461;
        if ((v52 & 1) != 0)
          goto LABEL_196;
        v36 = *((unsigned int *)v31 + 1);
LABEL_78:
        v53 = *(_DWORD *)(v23 + 56);
        v54 = (*((_DWORD *)v31 + 4) >> 2) & 1;
        v55 = *(_QWORD *)(v23 + 48);
        v56 = *(_DWORD *)(*(_QWORD *)(v23 + 40) + 228);
        v57 = (v56 >> 12) & 7;
        if (((v56 >> 12) & 4) != 0)
          LOBYTE(v57) = 0;
        *(_QWORD *)v481 = *((_QWORD *)v31 + 1);
        *(_QWORD *)&v481[8] = v36 | (v54 << 32);
        v58 = *(_DWORD **)(v55 + 176);
        if (v58)
          *v58 += 2;
        *(_QWORD *)&v481[16] = v58;
        v482[0] = 0;
        v487 = 0;
        v488 = 0;
        v489 = v57;
        v490 = (v56 & 0x1C0) != 256;
        v491 = 0;
        if (v30)
          v59 = 0;
        else
          v59 = v457 | v455;
        if (v59 < v32)
        {
          v452 = v23 + 16;
          v458 = v53 & 0x28000000;
          v60 = ((v53 >> 27) & 7) - 1;
          v448 = -(uint64_t)v32;
          v456 = v60;
          while (1)
          {
            v61 = *((_DWORD *)v31 + 1);
            if (v61 > v59)
            {
              v62 = *((_QWORD *)v31 + 1);
              v63 = (*((_BYTE *)v31 + 16) & 4) != 0
                  ? *(unsigned __int8 *)(v62 + v59)
                  : *(unsigned __int16 *)(v62 + 2 * v59);
              v64 = v63 != 10 || v60 > 2;
              if (!v64)
              {
                if (HIDWORD(v469) == (_DWORD)v469)
                {
                  WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v468, HIDWORD(v469) + 1);
                  v32 = v461;
                  v31 = v465;
                }
                v72 = (char *)v468 + 24 * HIDWORD(v469);
                v73 = v59 + 1;
                *(_QWORD *)v72 = v23;
                *((_QWORD *)v72 + 1) = 0;
                *((_DWORD *)v72 + 4) = v59;
                v72[20] = -2;
                *(_WORD *)(v72 + 21) = 2;
                ++HIDWORD(v469);
                goto LABEL_105;
              }
            }
            if (v458 == 0x8000000)
            {
              v65 = *(_QWORD *)(v23 + 48);
              v66 = (WebCore::Length *)(v65 + 240);
              v67 = *(unsigned __int8 *)(v65 + 244);
              if (v67 == 4)
              {
                if (*(_BYTE *)(v65 + 246))
                  v68 = *(float *)v66;
                else
                  v68 = (float)*(int *)v66;
              }
              else if (v67 == 3)
              {
                if (*(_BYTE *)(v65 + 246))
                  v437 = *(float *)v66;
                else
                  v437 = (float)*(int *)v66;
                v68 = (float)(v437 / 100.0) * *(float *)(v65 + 204);
                v6 = this;
                v31 = v465;
                v60 = v456;
              }
              else
              {
                v68 = 0.0;
                v6 = this;
                v31 = v465;
                v60 = v456;
                if (v67 == 11)
                {
                  WebCore::Length::nonNanCalculatedValue(v66, *(float *)(v65 + 204));
                  v31 = v465;
                  v61 = *((_DWORD *)v465 + 1);
                }
              }
              v69 = v68 != 0.0;
              v32 = v461;
            }
            else
            {
              v69 = 0;
            }
            v74 = *((_DWORD *)v31 + 4);
            v75 = *((_QWORD *)v31 + 1);
            if ((v74 & 4) != 0)
            {
              if (v59 < v61)
              {
                if (!v69)
                {
                  if (v60 < 3)
                  {
                    LOBYTE(v76) = 0;
                    v73 = v59;
                    do
                    {
                      v377 = *(unsigned __int8 *)(v75 + v73);
                      if (v377 == 32)
                      {
                        v439 = 1;
                      }
                      else
                      {
                        if (v377 != 9)
                          goto LABEL_925;
                        v439 = v458 != 0x8000000;
                      }
                      v76 = v76 || v439;
                      ++v73;
                    }
                    while (v61 != v73);
LABEL_797:
                    v73 = v61;
                    goto LABEL_798;
                  }
                  LOBYTE(v76) = 0;
                  v73 = v59;
                  do
                  {
                    v78 = *(unsigned __int8 *)(v75 + v73);
                    if (v78 == 32 || v78 == 10)
                    {
                      v431 = 1;
                    }
                    else
                    {
                      if (v78 != 9)
                        goto LABEL_152;
                      v431 = v458 != 0x8000000;
                    }
                    v76 = v76 || v431;
                    ++v73;
                  }
                  while (v61 != v73);
LABEL_571:
                  v73 = v61;
                  goto LABEL_153;
                }
                LOBYTE(v418) = 0;
                v73 = v59;
                while (2)
                {
                  v419 = *(unsigned __int8 *)(v75 + v73);
                  if (v419 != 32)
                  {
                    if (v419 != 10)
                    {
                      if (v419 != 9)
                        goto LABEL_981;
                      v440 = v458 != 0x8000000 || v418 != 0;
                      if (v458 == 0x8000000)
                      {
                        v17 = v418 == 0;
                        v418 = v440;
                        if (!v17)
                        {
                          v76 = v440;
LABEL_798:
                          v6 = this;
                          v31 = v465;
                          v32 = v461;
                          goto LABEL_153;
                        }
                      }
                      else
                      {
                        v418 = v440;
                      }
                      goto LABEL_899;
                    }
                    if (v456 < 3)
                    {
LABEL_981:
                      v6 = this;
                      v31 = v465;
                      v32 = v461;
                      LOBYTE(v76) = v418;
                      goto LABEL_152;
                    }
                  }
                  v418 = 1;
LABEL_899:
                  if (v61 == ++v73)
                  {
                    v73 = v61;
                    v6 = this;
                    v31 = v465;
                    v32 = v461;
                    v76 = v418;
                    goto LABEL_153;
                  }
                  continue;
                }
              }
              goto LABEL_510;
            }
            if (v59 < v61)
              break;
LABEL_510:
            v248 = *(_DWORD *)(*(_QWORD *)(v23 + 40) + 228);
            if ((v248 & 0x800) != 0)
            {
              v284 = 0;
              v73 = v59;
              v285 = v75 + 2 * v59;
              v286 = v75 + v59;
              while (v61 > (int)v59 + (int)v284)
              {
                if ((v74 & 4) != 0)
                  v287 = *(unsigned __int8 *)(v286 + v284);
                else
                  v287 = *(unsigned __int16 *)(v285 + 2 * v284);
                if (v287 != 160)
                {
                  v73 = v59 + v284;
                  break;
                }
                ++v73;
                ++v284;
                if (!(v448 + v59 + v284))
                {
                  v73 = v32;
                  break;
                }
              }
              if (v73 != v59)
              {
                v352 = HIDWORD(v469);
                v353 = v73 - v59 + HIDWORD(v469);
                if (v353 > v469)
                {
                  if (v353 >= 0xAAAAAAB)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194284E54);
                  }
                  v4 = (unint64_t)v468;
                  v354 = 24 * v353;
                  v355 = (WTF *)WTF::fastMalloc((WTF *)(24 * v353));
                  LODWORD(v469) = (v354 & 0xFFFFFFF8) / 0x18;
                  v468 = v355;
                  memcpy(v355, (const void *)v4, 24 * v352);
                  v6 = this;
                  v31 = v465;
                  v32 = v461;
                  if (v4)
                  {
                    if (v468 == (WTF *)v4)
                    {
                      v468 = 0;
                      LODWORD(v469) = 0;
                    }
                    WTF::fastFree((WTF *)v4, (void *)a2);
                    v31 = v465;
                    v32 = v461;
                  }
                }
                v71 = HIDWORD(v469);
                v60 = v456;
                do
                {
                  LODWORD(v9) = v9 & 0xFFFFFE00 | 0x20;
                  v70 = (char *)v468 + 24 * v71;
                  *(_QWORD *)v70 = v23;
                  *((_QWORD *)v70 + 1) = 0x100000000;
                  *((_DWORD *)v70 + 4) = v59;
                  v70[20] = -2;
                  *(_WORD *)(v70 + 21) = (_WORD)v9;
                  v71 = ++HIDWORD(v469);
                  ++v59;
                }
                while (v73 != v59);
                goto LABEL_105;
              }
            }
            if ((v248 & 0xC00000) != 0)
            {
              v249 = *(_DWORD *)&v481[8];
              if (v59 <= *(_DWORD *)&v481[8])
                v250 = *(_DWORD *)&v481[8];
              else
                v250 = v59;
              v251 = v59;
              while (v250 != (_DWORD)v251)
              {
                NextBreakablePosition = WebCore::Layout::TextUtil::findNextBreakablePosition((WebCore::Layout::TextUtil *)v481, (WTF::CachedLineBreakIteratorFactory *)v251, v452, a4);
                v31 = v465;
                v251 = (v251 + 1);
                if (NextBreakablePosition != (_DWORD)v59)
                {
                  v249 = NextBreakablePosition;
                  break;
                }
              }
              v4 = (v249 - v59);
              v73 = v59 + v4;
              v253 = (v249 - 1);
              if (*((_DWORD *)v31 + 1) <= v253)
              {
                v256 = 0;
                v32 = v461;
              }
              else
              {
                v254 = *((_QWORD *)v31 + 1);
                v32 = v461;
                if ((*((_BYTE *)v31 + 16) & 4) != 0)
                  v255 = *(unsigned __int8 *)(v254 + v253);
                else
                  v255 = *(unsigned __int16 *)(v254 + 2 * v253);
                v256 = (v255 == 173) << 7;
              }
            }
            else
            {
              v73 = v59;
              do
              {
                v93 = *(_DWORD *)&v481[8];
                if (v73 <= *(_DWORD *)&v481[8])
                  v94 = *(_DWORD *)&v481[8];
                else
                  v94 = v73;
                v95 = v73;
                while (v94 != (_DWORD)v95)
                {
                  v96 = WebCore::Layout::TextUtil::findNextBreakablePosition((WebCore::Layout::TextUtil *)v481, (WTF::CachedLineBreakIteratorFactory *)v95, v452, a4);
                  v31 = v465;
                  v95 = (v95 + 1);
                  if (v96 != (_DWORD)v73)
                  {
                    v93 = v96;
                    break;
                  }
                }
                v73 += (v93 - v73);
                v32 = v461;
                if (v73 >= v461)
                  break;
                v97 = (v73 - 1);
                if (*((_DWORD *)v31 + 1) <= v97)
                  break;
                v98 = *((_QWORD *)v31 + 1);
                v99 = (*((_BYTE *)v31 + 16) & 4) != 0
                    ? *(unsigned __int8 *)(v98 + v97)
                    : *(unsigned __int16 *)(v98 + 2 * v97);
              }
              while (v99 == 173);
              v256 = 0;
              LODWORD(v4) = v73 - v59;
            }
            v257 = HIDWORD(v469);
            if (HIDWORD(v469) == (_DWORD)v469)
            {
              v372 = HIDWORD(v469) + ((unint64_t)HIDWORD(v469) >> 2);
              if (v372 >= 0x10)
                v373 = v372 + 1;
              else
                v373 = 16;
              if (v373 <= (unint64_t)HIDWORD(v469) + 1)
                v374 = HIDWORD(v469) + 1;
              else
                v374 = v373;
              if (v374 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x194284E5CLL);
              }
              v447 = v468;
              v375 = 24 * v374;
              v376 = (WTF *)WTF::fastMalloc((WTF *)(24 * v374));
              LODWORD(v469) = (v375 & 0xFFFFFFF8) / 0x18;
              v468 = v376;
              memcpy(v376, v447, 24 * v257);
              if (v447)
              {
                if (v468 == v447)
                {
                  v468 = 0;
                  LODWORD(v469) = 0;
                }
                WTF::fastFree(v447, (void *)a2);
              }
              v31 = v465;
              v258 = (char *)v468 + 24 * HIDWORD(v469);
              v32 = v461;
            }
            else
            {
              v258 = (char *)v468 + 24 * HIDWORD(v469);
            }
            *(_QWORD *)v258 = v23;
            *((_DWORD *)v258 + 2) = 0;
            *((_DWORD *)v258 + 3) = v4;
            *((_DWORD *)v258 + 4) = v59;
            v258[20] = -2;
            v444 = v444 & 0xFFFFFE00 | v256 | 0x20;
            *(_WORD *)(v258 + 21) = v444;
            ++HIDWORD(v469);
            v6 = this;
LABEL_170:
            v60 = v456;
LABEL_105:
            v59 = v73;
            if (v73 >= v32)
            {
              v9 = v481;
              v11 = 20971521;
              if (v487)
              {
                WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v482);
                v31 = v465;
              }
              goto LABEL_191;
            }
          }
          if (!v69)
          {
            if (v60 >= 3)
            {
              LOBYTE(v76) = 0;
              v73 = v59;
              do
              {
                v80 = *(unsigned __int16 *)(v75 + 2 * v73);
                if (v80 == 32 || v80 == 10)
                {
                  v429 = 1;
                }
                else
                {
                  if (v80 != 9)
                    goto LABEL_152;
                  v429 = v458 != 0x8000000;
                }
                v76 = v76 || v429;
                ++v73;
              }
              while (v61 != v73);
            }
            else
            {
              LOBYTE(v76) = 0;
              v73 = v59;
              do
              {
                v77 = *(unsigned __int16 *)(v75 + 2 * v73);
                if (v77 == 32)
                {
                  v428 = 1;
                }
                else
                {
                  if (v77 != 9)
                    goto LABEL_152;
                  v428 = v458 != 0x8000000;
                }
                v76 = v76 || v428;
                ++v73;
              }
              while (v61 != v73);
            }
            goto LABEL_571;
          }
          if (v458 == 0x8000000)
          {
            if (v456 < 3)
            {
              LOBYTE(v76) = 0;
              v73 = v59;
              while (1)
              {
                v395 = *(unsigned __int16 *)(v75 + 2 * v73);
                if (v395 == 32)
                {
                  v76 = 1;
                }
                else
                {
                  if (v395 != 9)
                    goto LABEL_925;
                  if (v76)
                    goto LABEL_1011;
                  v76 = 0;
                }
                if (v61 == ++v73)
                  goto LABEL_797;
              }
            }
            LOBYTE(v76) = 0;
            v73 = v59;
            while (1)
            {
              v422 = *(unsigned __int16 *)(v75 + 2 * v73);
              if (v422 == 32 || v422 == 10)
              {
                v76 = 1;
              }
              else
              {
                if (v422 != 9)
                  goto LABEL_925;
                if (v76)
                {
LABEL_1011:
                  v76 = 1;
                  goto LABEL_798;
                }
                v76 = 0;
              }
              if (v61 == ++v73)
                goto LABEL_797;
            }
          }
          v414 = *(unsigned __int16 *)(v75 + 2 * v59);
          if (v456 >= 3)
          {
            v64 = v414 > 0x20;
            v424 = (1 << v414) & 0x100000600;
            if (!v64 && v424 != 0)
            {
              v73 = v59 + 1;
              if (v59 + 1 == v61)
              {
LABEL_986:
                v76 = 1;
                goto LABEL_797;
              }
              while (1)
              {
                v434 = *(unsigned __int16 *)(v75 + 2 * v73);
                v64 = v434 > 0x20;
                v435 = (1 << v434) & 0x100000600;
                if (v64 || v435 == 0)
                  goto LABEL_955;
                if (v61 == ++v73)
                {
LABEL_1029:
                  v73 = v61;
                  v6 = this;
                  v31 = v465;
                  v32 = v461;
                  v76 = 1;
                  goto LABEL_153;
                }
              }
            }
LABEL_924:
            LOBYTE(v76) = 0;
            v73 = v59;
          }
          else
          {
            if (v414 != 32 && v414 != 9)
              goto LABEL_924;
            v73 = v59 + 1;
            if (v59 + 1 == v61)
              goto LABEL_986;
            while (1)
            {
              v416 = *(unsigned __int16 *)(v75 + 2 * v73);
              if (v416 != 32 && v416 != 9)
                break;
              if (v61 == ++v73)
                goto LABEL_1029;
            }
LABEL_955:
            LOBYTE(v76) = 1;
          }
LABEL_925:
          v6 = this;
          v31 = v465;
          v32 = v461;
LABEL_152:
          v76 = v76;
LABEL_153:
          if (v73 != v59)
          {
            v4 = v73 - v59;
            if ((*(_DWORD *)(v23 + 56) & 0x38000000) == 0x18000000)
            {
              v82 = HIDWORD(v469);
              v83 = v4 + HIDWORD(v469);
              if (v83 > v469)
              {
                if (v83 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194284E24);
                }
                v84 = v76;
                v4 = (unint64_t)v468;
                v85 = 24 * v83;
                v86 = (WTF *)WTF::fastMalloc((WTF *)(24 * v83));
                LODWORD(v469) = (v85 & 0xFFFFFFF8) / 0x18;
                v468 = v86;
                memcpy(v86, (const void *)v4, 24 * v82);
                v6 = this;
                v31 = v465;
                v32 = v461;
                v76 = v84;
                if (v4)
                {
                  if (v468 == (WTF *)v4)
                  {
                    v468 = 0;
                    LODWORD(v469) = 0;
                  }
                  WTF::fastFree((WTF *)v4, (void *)a2);
                  v31 = v465;
                  v32 = v461;
                  v76 = v84;
                }
              }
              if (v76)
                v87 = 272;
              else
                v87 = 16;
              v88 = HIDWORD(v469);
              v60 = v456;
              do
              {
                v11 = v11 & 0xFFFFFE00 | v87;
                v89 = (char *)v468 + 24 * v88;
                *(_QWORD *)v89 = v23;
                *((_QWORD *)v89 + 1) = 0x100000000;
                *((_DWORD *)v89 + 4) = v59;
                v89[20] = -2;
                *(_WORD *)(v89 + 21) = v11;
                v88 = ++HIDWORD(v469);
                ++v59;
              }
              while (v73 != v59);
              goto LABEL_105;
            }
            if (v76)
              v90 = 272;
            else
              v90 = 16;
            v91 = HIDWORD(v469);
            if (HIDWORD(v469) == (_DWORD)v469)
            {
              v222 = HIDWORD(v469) + ((unint64_t)HIDWORD(v469) >> 2);
              if (v222 >= 0x10)
                v223 = v222 + 1;
              else
                v223 = 16;
              if (v223 <= (unint64_t)HIDWORD(v469) + 1)
                v224 = HIDWORD(v469) + 1;
              else
                v224 = v223;
              if (v224 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x194284E44);
              }
              v446 = v468;
              v225 = 24 * v224;
              v226 = (WTF *)WTF::fastMalloc((WTF *)(24 * v224));
              LODWORD(v469) = (v225 & 0xFFFFFFF8) / 0x18;
              v468 = v226;
              memcpy(v226, v446, 24 * v91);
              v6 = this;
              if (v446)
              {
                if (v468 == v446)
                {
                  v468 = 0;
                  LODWORD(v469) = 0;
                }
                WTF::fastFree(v446, (void *)a2);
              }
              v31 = v465;
              v92 = (char *)v468 + 24 * HIDWORD(v469);
              v32 = v461;
            }
            else
            {
              v92 = (char *)v468 + 24 * HIDWORD(v469);
              v6 = this;
            }
            *(_QWORD *)v92 = v23;
            *((_DWORD *)v92 + 2) = 0;
            *((_DWORD *)v92 + 3) = v4;
            *((_DWORD *)v92 + 4) = v59;
            v92[20] = -2;
            v454 = v90 | v454 & 0xFFFFFE00;
            *(_WORD *)(v92 + 21) = v454;
            ++HIDWORD(v469);
            goto LABEL_170;
          }
          goto LABEL_510;
        }
LABEL_191:
        v100 = *(WTF::StringImpl **)&v481[16];
        *(_QWORD *)&v481[16] = 0;
        v12 = v459;
        if (v100)
        {
          if (*(_DWORD *)v100 == 2)
          {
            WTF::StringImpl::destroy(v100, (WTF::StringImpl *)a2);
            v31 = v465;
          }
          else
          {
            *(_DWORD *)v100 -= 2;
          }
        }
        v13 = 254;
LABEL_195:
        if (v31)
        {
LABEL_196:
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a2);
            v13 = 254;
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
LABEL_198:
        v101 = *(_QWORD *)(v23 + 88);
        if (v101)
        {
          if (HIDWORD(v470[1]) == LODWORD(v470[1]))
          {
            WTF::Vector<WTF::CheckedRef<WebCore::Layout::Box const,WTF::RawPtrTraits<WebCore::Layout::Box const>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Layout::Box const&>((uint64_t)v470, *(_QWORD *)(v23 + 88));
            v13 = 254;
          }
          else
          {
            v145 = HIDWORD(v470[1]) + 1;
            *((_QWORD *)v470[0] + HIDWORD(v470[1])) = v101;
            ++*(_DWORD *)(v101 + 8);
            HIDWORD(v470[1]) = v145;
          }
        }
        v102 = *(_DWORD *)(v23 + 8);
        if (!v102)
        {
          __break(0xC471u);
          JUMPOUT(0x194283F68);
        }
        *(_DWORD *)(v23 + 8) = v102 - 1;
      }
      while (!v101);
      v10 = HIDWORD(v470[1]);
    }
    while (HIDWORD(v470[1]));
  }
LABEL_359:
  v178 = v470[0];
  if (v471 != (_QWORD *)v470[0] && v470[0] != 0)
  {
    v470[0] = 0;
    LODWORD(v470[1]) = 0;
    WTF::fastFree(v178, (void *)a2);
  }
  v180 = (_DWORD *)*((_QWORD *)v6 + 1);
  v181 = v180[14];
  if ((v181 & 0x4000000) == 0 && !*((_BYTE *)v6 + 24))
    goto LABEL_366;
  v477 = 0;
  v478 = 0;
  v479 = 0;
  v480 = 1;
  v475 = 0;
  v476 = 0;
  v259 = HIDWORD(v469);
  if (HIDWORD(v469))
  {
    if (HIDWORD(v469) >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x194284F88);
    }
    v260 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v469)));
    LODWORD(v476) = v259;
    v475 = v260;
    v180 = (_DWORD *)*((_QWORD *)v6 + 1);
    v181 = v180[14];
  }
  v261 = v181 & 0x4000000;
  v470[0] = 0;
  v470[1] = 0;
  v262 = (v180[8] >> 22) & 7;
  v263 = (v181 & 0x4000000) == 0;
  if (v262 == 5)
  {
    WTF::StringBuilder::append((uint64_t)&v477, 0x2068u);
    if (v261)
      v394 = 8238;
    else
      v394 = 8237;
    WTF::StringBuilder::append((uint64_t)&v477, v394);
  }
  else
  {
    if (v262 == 4)
    {
      v393 = 8296;
    }
    else
    {
      if (v262 != 2)
        goto LABEL_533;
      if (v261)
        v393 = 8238;
      else
        v393 = 8237;
    }
    WTF::StringBuilder::append((uint64_t)&v477, v393);
    v6 = this;
  }
LABEL_533:
  v481[0] = v262;
  v481[1] = v263;
  v481[2] = 1;
  v264 = WTF::Vector<WebCore::Layout::BidiContext,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v470, 1uLL, (unint64_t)v481);
  v265 = HIDWORD(v470[1]);
  v266 = (char *)v470[0] + 3 * HIDWORD(v470[1]);
  v267 = *(_BYTE *)(v264 + 2);
  *(_WORD *)v266 = *(_WORD *)v264;
  v266[2] = v267;
  LODWORD(v266) = v180[15];
  HIDWORD(v470[1]) = v265 + 1;
  if ((v266 & 0x10) != 0)
    v264 = WebCore::Layout::handleEnterExitBidiContext((uint64_t)&v477, 2, (v180[14] & 0x4000000) == 0, 0, (uint64_t)v470);
  if (HIDWORD(v469))
  {
    v199 = 0;
    v183 = 0;
    v182 = 0;
    v184 = 24;
    while (1)
    {
      v297 = v468;
      v185 = (WTF *)((char *)v468 + 24 * (_QWORD)v182);
      v198 = *(WTF::StringImpl **)v185;
      v298 = *(_WORD *)((char *)v185 + 21);
      v186 = (_WORD *)((char *)v185 + 21);
      v299 = v298 & 0xF;
      if ((v298 & 0xF) != 0)
        break;
LABEL_591:
      if ((*((_WORD *)v198 + 6) & 0x20) == 0 || !v198 || ((*((_DWORD *)v198 + 14) >> 27) & 7u) - 1 < 3)
      {
        if (v299 == 2)
        {
LABEL_856:
          v264 = (uint64_t)WebCore::Layout::handleBidiParagraphStart((WTF *)&v477, (unsigned int *)&v475, (uint64_t)v470);
        }
        else if (!v299)
        {
          if ((v479 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194284DBCLL);
          }
          *(_QWORD *)v481 = v479;
          v481[8] = 1;
          v381 = HIDWORD(v476);
          if (HIDWORD(v476) == (_DWORD)v476)
          {
            WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>((uint64_t)&v475, (unint64_t)v481);
          }
          else
          {
            *((_OWORD *)v475 + HIDWORD(v476)) = *(_OWORD *)v481;
            HIDWORD(v476) = v381 + 1;
          }
          v382 = *(WTF::StringImpl **)v185;
          if ((*(_WORD *)(*(_QWORD *)v185 + 12) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194284DDCLL);
          }
          *(_QWORD *)v481 = 0;
          *(_DWORD *)&v481[8] = 0;
          LOBYTE(v383) = 1;
          v481[12] = 1;
          v384 = *((_QWORD *)v382 + 15);
          if (v384)
          {
            v385 = *(unsigned __int8 *)(v384 + 16);
            v386 = *(_QWORD *)(v384 + 8);
            LODWORD(v384) = *(_DWORD *)(v384 + 4);
            *(_QWORD *)v481 = v386;
            v383 = (v385 >> 2) & 1;
          }
          *(_DWORD *)&v481[8] = v384;
          v481[12] = v383;
          v387 = WTF::StringView::substring(v481, *((_DWORD *)v297 + 6 * (_QWORD)v182 + 4), *((_DWORD *)v297 + 6 * (_QWORD)v182 + 3));
          v264 = WTF::StringBuilder::append((uint64_t)&v477, (uint64_t)v387, v388);
        }
LABEL_857:
        v6 = this;
        goto LABEL_626;
      }
      if (v199 != v198)
      {
        v183 = (WebCore::Layout::Box **)v479;
        if ((v479 & 0x80000000) != 0)
        {
          a2 = (unint64_t)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xco"
                                 "de.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Inter"
                                 "nal.sdk/usr/local/include/wtf/text/StringBuilder.h";
          v264 = 268;
          __break(0xC471u);
          goto LABEL_905;
        }
        v199 = (WTF::StringImpl *)*((_QWORD *)v198 + 15);
        if (v199)
        {
          v185 = (WTF *)*((unsigned int *)v199 + 1);
          *(_DWORD *)v199 += 2;
          if ((_DWORD)v185)
          {
            if ((*((_BYTE *)v199 + 16) & 4) == 0)
            {
              a2 = 0;
              v300 = 0;
              while (1)
              {
                v301 = *((unsigned int *)v199 + 1);
                if (v300 >= v301)
                  break;
                v302 = *((_QWORD *)v199 + 1);
                v4 = v300 + 1;
                v303 = *(unsigned __int16 *)(v302 + 2 * v300);
                if ((v303 & 0xFC00) == 0xD800 && v4 != (_QWORD)v185)
                {
                  if (v4 >= v301)
                    break;
                  v305 = *(unsigned __int16 *)(v302 + 2 * v4);
                  v306 = (v305 & 0xFC00) == 56320;
                  v307 = v305 + (v303 << 10) - 56613888;
                  if (v306)
                    v4 = v300 + 2;
                  else
                    v4 = v300 + 1;
                  if (v306)
                    v303 = v307;
                }
                if ((v303 - 9) <= 1)
                {
                  if (v300 > a2)
                  {
                    v411 = *((_BYTE *)v199 + 16);
                    *(_QWORD *)v481 = *((_QWORD *)v199 + 1);
                    *(_DWORD *)&v481[8] = v301;
                    v481[12] = (v411 & 4) != 0;
                    v412 = WTF::StringView::substring(v481, a2, (int)v300 - (int)a2);
                    WTF::StringBuilder::append((uint64_t)&v477, (uint64_t)v412, v413);
                  }
                  v264 = WTF::StringBuilder::append((uint64_t)&v477, 0x20u);
                  a2 = v4;
                }
                v300 = v4;
                if (v4 >= (unint64_t)v185)
                  goto LABEL_614;
              }
LABEL_905:
              __break(1u);
              goto LABEL_906;
            }
            a2 = 0;
            v312 = 0;
            do
            {
              v313 = *((_DWORD *)v199 + 1);
              if (v313 <= v312)
              {
                v4 = v312 + 1;
              }
              else
              {
                v314 = *((_DWORD *)v199 + 4);
                v315 = *((_QWORD *)v199 + 1);
                if ((v314 & 4) != 0)
                  v316 = *(unsigned __int8 *)(v315 + v312);
                else
                  v316 = *(unsigned __int16 *)(v315 + 2 * v312);
                v4 = v312 + 1;
                if (v316 == 10 || v316 == 9)
                {
                  if (v312 > a2)
                  {
                    *(_QWORD *)v481 = *((_QWORD *)v199 + 1);
                    *(_DWORD *)&v481[8] = v313;
                    v481[12] = (v314 & 4) != 0;
                    v409 = WTF::StringView::substring(v481, a2, (int)v312 - (int)a2);
                    WTF::StringBuilder::append((uint64_t)&v477, (uint64_t)v409, v410);
                  }
                  v264 = WTF::StringBuilder::append((uint64_t)&v477, 0x20u);
                  a2 = v4;
                }
              }
              v312 = v4;
            }
            while (v4 < (unint64_t)v185);
LABEL_614:
            if (a2 < (unint64_t)v185)
            {
              v308 = *((unsigned int *)v199 + 1);
              v309 = ((_DWORD)v185 - a2);
              if ((int)v308 - (int)v309 >= v308)
                goto LABEL_619;
              a2 = *((_QWORD *)v199 + 1);
              v310 = ((unint64_t)*((unsigned int *)v199 + 4) >> 2) & 1;
              if ((_DWORD)v309 == (_DWORD)v308)
              {
                v309 = v308 | (v310 << 32);
              }
              else
              {
                v371 = v308 - (v308 - v309);
                if ((_DWORD)v310)
                {
                  if (v371 < v309)
                    goto LABEL_905;
                  v309 |= 0x100000000uLL;
                }
                else if (v371 < v309)
                {
                  goto LABEL_905;
                }
              }
              if ((v309 & 0x100000000) != 0)
LABEL_619:
                v264 = WTF::StringBuilder::append();
              else
                v264 = WTF::StringBuilder::append();
            }
          }
          if (*(_DWORD *)v199 == 2)
            v264 = WTF::StringImpl::destroy(v199, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v199 -= 2;
        }
        v199 = v198;
      }
      if ((*v186 & 0xF) != 0 && (*v186 & 0xF) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x194284554);
      }
      *(_QWORD *)v481 = (char *)v183 + *((unsigned int *)v297 + 6 * (_QWORD)v182 + 4);
      v481[8] = 1;
      v311 = HIDWORD(v476);
      v6 = this;
      if (HIDWORD(v476) == (_DWORD)v476)
      {
        WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>((uint64_t)&v475, (unint64_t)v481);
      }
      else
      {
        *((_OWORD *)v475 + HIDWORD(v476)) = *(_OWORD *)v481;
        HIDWORD(v476) = v311 + 1;
      }
LABEL_626:
      v182 = (WebCore::Layout::Box **)((char *)v182 + 1);
      if ((unint64_t)v182 >= HIDWORD(v469))
        goto LABEL_536;
    }
    switch(v299)
    {
      case 1:
        goto LABEL_856;
      case 2:
        goto LABEL_591;
      case 3:
      case 7:
        goto LABEL_976;
      case 4:
        v389 = v479;
        if ((v479 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194284E94);
        }
        goto LABEL_828;
      case 5:
      case 6:
        if ((*((_BYTE *)v198 + 60) & 0x10) != 0 || (*((_WORD *)v198 + 17) & 0x1C0) == 0)
          goto LABEL_976;
        if ((v479 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x194284EE0);
        }
        *(_QWORD *)v481 = v479;
        v481[8] = 1;
        v432 = HIDWORD(v476);
        if (HIDWORD(v476) == (_DWORD)v476)
        {
          WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>((uint64_t)&v475, (unint64_t)v481);
        }
        else
        {
          *((_OWORD *)v475 + HIDWORD(v476)) = *(_OWORD *)v481;
          HIDWORD(v476) = v432 + 1;
        }
        if ((*v186 & 0xF) == 5)
          v433 = 2;
        else
          v433 = 3;
        v264 = WebCore::Layout::handleEnterExitBidiContext((uint64_t)&v477, (*((_DWORD *)v198 + 8) >> 22) & 7, (*((_DWORD *)v198 + 14) & 0x4000000) == 0, v433, (uint64_t)v470);
        break;
      case 8:
        if ((*((_QWORD *)v198 + 4) & 0x180000) == 0x100000)
        {
          v389 = v479;
          if ((v479 & 0x80000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x194284CF4);
          }
LABEL_828:
          *(_QWORD *)v481 = v389;
          v481[8] = 1;
          v390 = HIDWORD(v476);
          if (HIDWORD(v476) == (_DWORD)v476)
          {
            WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>((uint64_t)&v475, (unint64_t)v481);
          }
          else
          {
            *((_OWORD *)v475 + HIDWORD(v476)) = *(_OWORD *)v481;
            HIDWORD(v476) = v390 + 1;
          }
          v264 = WTF::StringBuilder::append((uint64_t)&v477, 0xFFFCu);
        }
        else
        {
LABEL_976:
          v481[0] = 0;
          v481[8] = 0;
          v438 = HIDWORD(v476);
          if (HIDWORD(v476) == (_DWORD)v476)
          {
            WTF::Vector<std::optional<unsigned long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::optional<unsigned long>>((uint64_t)&v475, (unint64_t)v481);
          }
          else
          {
            *((_OWORD *)v475 + HIDWORD(v476)) = *(_OWORD *)v481;
            HIDWORD(v476) = v438 + 1;
          }
        }
        break;
      default:
        goto LABEL_857;
    }
    goto LABEL_857;
  }
LABEL_536:
  if (v470[0])
    WTF::fastFree(v470[0], (void *)a2);
  if (!v479)
    goto LABEL_580;
  if (!*((_BYTE *)v6 + 24) && (*(_QWORD *)(*((_QWORD *)v6 + 1) + 32) & 0x1C00000) == 0x1000000)
  {
    v391 = WTF::StringBuilder::operator WTF::StringView((uint64_t *)&v477);
    if (!WebCore::Layout::TextUtil::directionForTextContent(v391, v392))
      goto LABEL_580;
  }
  v268 = ubidi_open();
  v269 = v478;
  if (v478)
  {
    v270 = v478;
  }
  else
  {
    v270 = v477;
    if (!v477)
      goto LABEL_543;
  }
  if ((*((_BYTE *)v270 + 16) & 4) == 0)
  {
    LODWORD(v288) = v479;
    if (v479)
    {
      if (v477)
        v269 = v477;
      if ((v479 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x194284C18);
      }
      v356 = *((_QWORD *)v269 + 1);
    }
    else
    {
      v356 = 0;
    }
    *(_QWORD *)v481 = &v481[16];
    *(_QWORD *)&v481[8] = 32;
    v485 = v356;
    v486 = v479;
    goto LABEL_573;
  }
LABEL_543:
  v271 = v479;
  if (!v479)
  {
    v273 = 0;
    v272 = 0;
    *(_QWORD *)v481 = &v481[16];
    *(_DWORD *)&v481[8] = 32;
    v485 = 0;
    v486 = 0;
    goto LABEL_549;
  }
  if (v477)
    v269 = v477;
  if ((v479 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1942849D8);
  }
  v272 = (int8x16_t *)*((_QWORD *)v269 + 1);
  *(_QWORD *)v481 = &v481[16];
  *(_QWORD *)&v481[8] = 32;
  v485 = 0;
  v486 = 0;
  if (v479 <= 0x20)
  {
    v273 = v479;
LABEL_549:
    *(_DWORD *)&v481[12] = v479;
    v271 = v273;
    v274 = &v481[16];
    v275 = &v481[16];
    goto LABEL_550;
  }
  if (v479 <= 0x29uLL)
    v396 = 41;
  else
    v396 = v479;
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v481, v396);
  *(_DWORD *)&v481[12] = v271;
  v274 = *(_BYTE **)v481;
  if (v271 < 0x40)
  {
    v275 = *(char **)v481;
  }
  else
  {
    v275 = (char *)(*(_QWORD *)v481 + 2 * (v271 & 0xFFFFFFC0));
    v397 = 0uLL;
    v398 = *(char **)v481;
    do
    {
      v493.val[0] = *v272;
      v399 = v272[1];
      v494.val[0] = v272[2];
      v400 = v272[3];
      v272 += 4;
      v401 = v400;
      v494.val[1] = 0uLL;
      v495.val[0] = v399;
      v493.val[1] = 0uLL;
      v402 = v398;
      vst2q_s8(v402, v493);
      v402 += 32;
      v495.val[1] = 0uLL;
      vst2q_s8(v402, v495);
      v403 = v398 + 64;
      vst2q_s8(v403, v494);
      v404 = v398 + 96;
      vst2q_s8(v404, *(int8x16x2_t *)(&v397 - 1));
      v398 += 128;
    }
    while (v398 != v275);
  }
LABEL_550:
  v276 = &v274[2 * v271];
  while (v275 != v276)
  {
    v277 = v272->u8[0];
    v272 = (int8x16_t *)((char *)v272 + 1);
    *(_WORD *)v275 = v277;
    v275 += 2;
  }
  LODWORD(v288) = v479;
  v485 = *(_QWORD *)v481;
  v486 = *(unsigned int *)&v481[12];
  if ((v479 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x194284904);
  }
LABEL_573:
  v474 = 0;
  ubidi_setPara();
  if (v474 > 0 || (_DWORD)v288 == 0)
    goto LABEL_578;
  LODWORD(v289) = 0;
  v317 = 0;
  v318 = 0;
  v319 = HIDWORD(v476);
  v320 = 24;
  v288 = v288;
  while (2)
  {
    v473 = 0;
    v472 = v289;
    ubidi_getLogicalRun();
    v289 = v472;
    v321 = (int)v472;
    if (v317 >= v319)
      goto LABEL_657;
    v466 = (WTF::StringImpl *)v268;
    v322 = v473;
    v323 = v475;
    v324 = v468;
    if (v317 <= HIDWORD(v469))
      v325 = HIDWORD(v469);
    else
      v325 = v317;
    v326 = 16 * v317 + 16;
    v462 = v320;
    v327 = v320 + 24 * v317;
    while (1)
    {
      if (v325 == v317)
      {
        __break(0xC471u);
        JUMPOUT(0x194284EF4);
      }
      if (*((_BYTE *)v323 + v326 - 8))
        break;
      *((_BYTE *)v324 + v327 - 4) = v322;
      v318 = 1;
LABEL_654:
      ++v317;
      v326 += 16;
      v327 += 24;
      if (v319 == v317)
      {
        v317 = v319;
LABEL_656:
        v268 = (uint64_t)v466;
        v320 = v462;
        goto LABEL_657;
      }
    }
    v328 = *(_QWORD *)((char *)v323 + v326 - 16);
    if (v321 <= v328)
      goto LABEL_656;
    *((_BYTE *)v324 + v327 - 4) = v322;
    v329 = (*((_BYTE *)v324 + v327 - 3) & 0xF) != 0 || v324 == 0;
    if (v329 || v328 + *(unsigned int *)((char *)v324 + v327 - 12) <= v321)
      goto LABEL_654;
    WebCore::Layout::InlineTextItem::split((uint64_t)v324 + v327 - 24, v321 - v328, (uint64_t)v470);
    v362 = HIDWORD(v469);
    v460 = v288;
    if (HIDWORD(v469) == (unint64_t)v469)
    {
      WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v468, HIDWORD(v469) + 1);
      v362 = HIDWORD(v469);
    }
    v363 = (char *)v468 + v327;
    memmove((char *)v468 + v327 + 24, (char *)v468 + v327, 24 * v362 - v327);
    v364 = v471[0];
    *(_OWORD *)v363 = *(_OWORD *)v470;
    *((_QWORD *)v363 + 2) = v364;
    ++HIDWORD(v469);
    if (v319 == (_DWORD)v476)
    {
      v365 = v319 + ((unint64_t)v319 >> 2);
      if (v365 >= 0x10)
        v366 = v365 + 1;
      else
        v366 = 16;
      if (v366 <= (unint64_t)v319 + 1)
        v367 = v319 + 1;
      else
        v367 = v366;
      if (v367 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x194284F90);
      }
      v368 = (WTF *)WTF::fastMalloc((WTF *)(16 * v367));
      v333 = v368;
      LODWORD(v476) = v367;
      v475 = v368;
      if (!v319)
        goto LABEL_663;
      v332 = 0;
      do
      {
        *(_OWORD *)((char *)v368 + v332) = *(_OWORD *)((char *)v323 + v332);
        v332 += 16;
      }
      while (16 * v319 != v332);
      if (v323)
      {
LABEL_663:
        if (v368 == v323)
        {
          v333 = 0;
          v475 = 0;
          LODWORD(v476) = 0;
        }
        WTF::fastFree(v323, v369);
      }
      v323 = v333;
    }
    v288 = v460;
    v320 = v462;
    if (v319 - 1 != v317)
    {
      v331 = 16 * v319;
      v330 = (char *)v323 + ((v331 - v326) & 0xFFFFFFFFFFFFFFF0);
      do
      {
        *(_OWORD *)&v330[v326] = *(_OWORD *)((char *)v323 + v331 - 16);
        v330 -= 16;
        v331 -= 16;
      }
      while (v326 != v331);
    }
    ++v317;
    v370 = (char *)v323 + v326;
    *(_QWORD *)v370 = v321;
    v370[8] = 1;
    v319 = ++HIDWORD(v476);
    v289 = v472;
    v321 = (int)v472;
    v268 = (uint64_t)v466;
LABEL_657:
    if (v321 < v288)
      continue;
    break;
  }
  if (v318)
  {
    v470[1] = 0;
    v334 = HIDWORD(v469);
    if (HIDWORD(v469))
    {
      v335 = (WTF *)WTF::fastMalloc((WTF *)HIDWORD(v469));
      LODWORD(v470[1]) = v334;
      v470[0] = v335;
      if (!HIDWORD(v469))
        goto LABEL_747;
      v336 = 0;
      v337 = 24 * HIDWORD(v469);
      v338 = HIDWORD(v469) - 1;
      do
      {
        if (v338 >= HIDWORD(v469))
        {
          __break(0xC471u);
          JUMPOUT(0x194284EFCLL);
        }
        v339 = v468;
        v340 = *(_QWORD *)((char *)v468 + v337 - 24);
        v341 = (*(_BYTE *)(v340 + 60) & 0x10) == 0 && (*(_WORD *)(v340 + 34) & 0x1C0) != 0;
        v342 = *(_WORD *)((char *)v468 + v337 - 3);
        switch(v342 & 0xF)
        {
          case 0:
            if ((v342 & 0x30) != 0x10 || (*(_DWORD *)(v340 + 56) & 0x28000000) == 0x8000000)
              goto LABEL_678;
            break;
          case 3:
            goto LABEL_697;
          case 5:
            if (!v336)
            {
              __break(0xC471u);
              JUMPOUT(0x194284F98);
            }
            v347 = *((unsigned __int8 *)v335 + --v336);
            HIDWORD(v470[1]) = v336;
            if (v347)
              v348 = v341;
            else
              v348 = 1;
            if ((v348 & 1) == 0)
              goto LABEL_697;
            break;
          case 6:
            LOBYTE(v472) = 0;
            if (v336 == LODWORD(v470[1]))
            {
              v349 = WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v470, (WTF *)(v336 + 1), (unint64_t)&v472);
              v335 = v470[0];
              v336 = HIDWORD(v470[1]);
              *((_BYTE *)v470[0] + HIDWORD(v470[1])) = *v349;
            }
            else
            {
              *((_BYTE *)v335 + v336) = 0;
            }
            HIDWORD(v470[1]) = ++v336;
            if (v341)
              break;
LABEL_697:
            *((_BYTE *)v339 + v337 - 4) = -1;
            break;
          default:
LABEL_678:
            v343 = v470[1];
            v344 = v336;
            if (LODWORD(v470[1]) < v336)
            {
              if (LODWORD(v470[1]))
              {
                HIDWORD(v470[1]) = 0;
                if (v335)
                {
                  v470[0] = 0;
                  LODWORD(v470[1]) = 0;
                  WTF::fastFree(v335, (void *)v289);
                  v343 = 0;
                  v344 = HIDWORD(v470[1]);
                }
                else
                {
                  v344 = 0;
                }
              }
              else
              {
                v344 = v336;
              }
              v335 = v470[0];
              if (v343 < v336)
              {
                v345 = (WTF *)WTF::fastMalloc((WTF *)v336);
                LODWORD(v470[1]) = v336;
                v470[0] = v345;
                memcpy(v345, v335, v344);
                if (v335)
                {
                  if (v345 == v335)
                  {
                    v345 = 0;
                    v470[0] = 0;
                    LODWORD(v470[1]) = 0;
                  }
                  WTF::fastFree(v335, (void *)v289);
                  v335 = v345;
                }
                else
                {
                  v335 = v345;
                }
              }
            }
            if (v344)
            {
              memset(v335, 1, v344);
              v346 = HIDWORD(v470[1]);
            }
            else
            {
              v346 = 0;
            }
            if (v336 != v346)
              memset((char *)v335 + v346, 1, v336 - v346);
            HIDWORD(v470[1]) = v336;
            break;
        }
        --v338;
        v337 -= 24;
      }
      while (v337);
      v335 = v470[0];
      if (v470[0])
LABEL_747:
        WTF::fastFree(v335, (void *)v289);
    }
  }
LABEL_578:
  v291 = *(WTF **)v481;
  if (&v481[16] != *(_BYTE **)v481 && *(_QWORD *)v481)
  {
    *(_QWORD *)v481 = 0;
    *(_DWORD *)&v481[8] = 0;
    WTF::fastFree(v291, (void *)v289);
  }
  ubidi_close();
LABEL_580:
  if (v475)
    WTF::fastFree(v475, (void *)a2);
  v292 = v478;
  v478 = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
      WTF::StringImpl::destroy(v292, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v292 -= 2;
  }
  v293 = v477;
  v477 = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
      WTF::StringImpl::destroy(v293, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v293 -= 2;
  }
LABEL_366:
  if (HIDWORD(v469))
  {
    v182 = (WebCore::Layout::Box **)v468;
    v183 = (WebCore::Layout::Box **)((char *)v468 + 24 * HIDWORD(v469));
    v184 = 8203;
    LODWORD(v185) = 671088640;
    LODWORD(v4) = 0x8000000;
    LODWORD(v186) = 2139095040;
    v5 = 0;
    while (1)
    {
      if (!v182)
        goto LABEL_376;
      v187 = *(_WORD *)((char *)v182 + 21);
      if ((v187 & 0xF) != 0)
        goto LABEL_376;
      v188 = *v182;
      if ((*((_WORD *)*v182 + 6) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1942830BCLL);
      }
      v190 = *((_DWORD *)v182 + 3);
      v189 = *((unsigned int *)v182 + 4);
      if (v190 == 1)
        break;
      if (v190)
        goto LABEL_379;
LABEL_376:
      v182 += 3;
      if (v182 == v183)
        goto LABEL_403;
    }
    v191 = *((_QWORD *)v188 + 15);
    if (v191
      && *(_DWORD *)(v191 + 4) > v189
      && (*(_BYTE *)(v191 + 16) & 4) == 0
      && *(unsigned __int16 *)(*(_QWORD *)(v191 + 8) + 2 * v189) == v184)
    {
      goto LABEL_376;
    }
LABEL_379:
    v192 = v187 & 0x30;
    if ((*((_WORD *)*v182 + 6) & 0x200) != 0
      && *(_QWORD *)(WebCore::Layout::Box::rareData(*v182) + 24)
      && v188 + 8 != *(_WORD **)(WebCore::Layout::Box::rareData((WebCore::Layout::Box *)v188) + 24))
    {
      v467 = (WTF::StringImpl *)(*((_QWORD *)v188 + 6) + 32);
      LineStyle = WebCore::Layout::Box::firstLineStyle((WebCore::Layout::Box *)v188);
      v427 = WebCore::FontCascade::operator==((uint64_t)v467, *(_QWORD *)(LineStyle + 32) + 32);
      if (v192 != 16 || !v427)
      {
        if (!v427)
          goto LABEL_376;
LABEL_383:
        v193 = *((_DWORD *)v182 + 4);
        if (v193 > v189)
        {
          __break(0xC471u);
          JUMPOUT(0x1942830DCLL);
        }
        if (*((_DWORD *)v182 + 3) + v193 < v190 + (int)v189)
        {
          __break(0xC471u);
          JUMPOUT(0x1942830FCLL);
        }
        v194 = (uint64_t)*v182;
        v195 = *((_QWORD *)*v182 + 6);
        v196 = *((_WORD *)*v182 + 6);
        if ((*(_WORD *)((_BYTE *)v182 + 21) & 0x30) != 0x10)
        {
          if ((v196 & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19428311CLL);
          }
          goto LABEL_387;
        }
        if ((v196 & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1942831B4);
        }
        if (v190 != -1 && (*(_DWORD *)(v194 + 56) & v185) == (_DWORD)v4)
        {
LABEL_387:
          v197 = WebCore::Layout::TextUtil::width((WTF::MemoryPressureHandler *)v194, v195 + 32, v189, v190 + v189, 1, 0.0);
        }
        else
        {
          if ((*(_BYTE *)(v194 + 129) & 1) != 0)
          {
            WebCore::FontCascade::protectedFonts(v195 + 32, &v477);
            v198 = v477;
            v199 = (WTF::StringImpl *)(v195 + 48);
            v200 = *((_QWORD *)v477 + 13);
            if (v200 && *(_QWORD *)(v200 + 8))
              goto LABEL_395;
            v232 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v477, (const WebCore::FontCascadeDescription *)(v195 + 48), 0);
            WebCore::FontRanges::glyphDataForCharacter(0x20u, v232, 1, (uint64_t)v481);
            if (!*(_QWORD *)&v481[8] || (v234 = *(_QWORD *)(*(_QWORD *)&v481[8] + 8)) == 0)
            {
              v235 = 0;
              goto LABEL_480;
            }
            v235 = *(_QWORD *)(v234 + 8);
            if (v235)
              goto LABEL_984;
            v235 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v235 = 1;
            *(_QWORD *)(v235 + 8) = v234;
            v441 = *(WTF **)(v234 + 8);
            *(_QWORD *)(v234 + 8) = v235;
            if (!v441)
              goto LABEL_984;
            if (*(_DWORD *)v441 != 1)
            {
              --*(_DWORD *)v441;
              goto LABEL_984;
            }
            WTF::fastFree(v441, v233);
            v235 = *(_QWORD *)(v234 + 8);
            if (v235)
LABEL_984:
              ++*(_DWORD *)v235;
LABEL_480:
            v236 = (WTF *)*((_QWORD *)v198 + 13);
            *((_QWORD *)v198 + 13) = v235;
            if (v236)
            {
              if (*(_DWORD *)v236 == 1)
                WTF::fastFree(v236, v233);
              else
                --*(_DWORD *)v236;
            }
            v237 = *(WTF **)&v481[8];
            *(_QWORD *)&v481[8] = 0;
            if (v237)
            {
              if (*(_DWORD *)v237 == 1)
                WTF::fastFree(v237, v233);
              else
                --*(_DWORD *)v237;
            }
            v238 = *((_QWORD *)v198 + 13);
            if (v238 && (v239 = *(_QWORD *)(v238 + 8)) != 0)
            {
              if ((*(_BYTE *)(v239 + 256) & 2) != 0)
              {
                v240 = 1;
                do
                {
                  v241 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v198, v199, v240);
                  if (!*(_DWORD *)(v241 + 12))
                    break;
                  WebCore::FontRanges::glyphDataForCharacter(0x20u, v241, 0, (uint64_t)v481);
                  if (*(_QWORD *)&v481[8])
                    v242 = *(_QWORD *)(*(_QWORD *)&v481[8] + 8);
                  else
                    v242 = 0;
                  WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v470, v242);
                  v244 = *(WTF **)&v481[8];
                  *(_QWORD *)&v481[8] = 0;
                  if (v244)
                  {
                    if (*(_DWORD *)v244 == 1)
                      WTF::fastFree(v244, v243);
                    else
                      --*(_DWORD *)v244;
                  }
                  v201 = v470[0];
                  if (v470[0])
                  {
                    v245 = *((_QWORD *)v470[0] + 1);
                    if (!v245 || (*(_BYTE *)(v245 + 256) & 2) != 0)
                    {
                      v247 = 0;
                      v470[0] = 0;
                    }
                    else
                    {
                      v470[0] = 0;
                      v246 = (WTF *)*((_QWORD *)v198 + 13);
                      *((_QWORD *)v198 + 13) = v201;
                      if (!v246)
                        goto LABEL_396;
                      if (*(_DWORD *)v246 != 1)
                      {
                        --*(_DWORD *)v246;
                        break;
                      }
                      WTF::fastFree(v246, v243);
                      v201 = v470[0];
                      v470[0] = 0;
                      if (!v201)
                        break;
                      v247 = 2;
                    }
                    if (*(_DWORD *)v201 == 1)
                      WTF::fastFree(v201, v243);
                    else
                      --*(_DWORD *)v201;
                  }
                  else
                  {
                    v247 = 0;
                  }
                  ++v240;
                }
                while (!v247);
              }
            }
            else
            {
              if (!*(_DWORD *)(v232 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x194284E74);
              }
              v378 = WebCore::FontRanges::Range::font(*(_QWORD *)v232);
              WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v481, v378);
              v379 = *(_QWORD *)v481;
              *(_QWORD *)v481 = 0;
              v264 = *((_QWORD *)v198 + 13);
              *((_QWORD *)v198 + 13) = v379;
              if (v264)
              {
                v380 = *(_DWORD *)v264 - 1;
                if (*(_DWORD *)v264 == 1)
                {
LABEL_906:
                  WTF::fastFree((WTF *)v264, (void *)a2);
                  v264 = *(_QWORD *)v481;
                  *(_QWORD *)v481 = 0;
                  if (!v264)
                    goto LABEL_395;
                  v380 = *(_DWORD *)v264 - 1;
                  if (*(_DWORD *)v264 == 1)
                  {
                    WTF::fastFree((WTF *)v264, v421);
                    goto LABEL_395;
                  }
                }
                *(_DWORD *)v264 = v380;
              }
            }
LABEL_395:
            v201 = (WTF *)*((_QWORD *)v198 + 13);
            if (v201)
LABEL_396:
              v202 = (float *)*((_QWORD *)v201 + 1);
            else
              v202 = 0;
            v203 = v477;
            v477 = 0;
            if (v203)
            {
              if (*(_DWORD *)v203 == 1)
              {
                WebCore::FontCascadeFonts::~FontCascadeFonts(v203);
                WTF::fastFree(v220, v221);
              }
              else
              {
                --*(_DWORD *)v203;
              }
            }
            WebCore::FontCascadeDescription::resolveFontSizeAdjustFromFontIfNeeded(v199, (const WebCore::Font *)v202);
            v204 = v202[84] + v202[85];
          }
          else
          {
            v204 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)(v195 + 32));
          }
          if (fabsf(v204) == *(float *)&v186)
            v197 = 3.4028e38;
          else
            v197 = fmaxf(v204, *(float *)&v5);
        }
        *((float *)v182 + 2) = v197;
        *(_WORD *)((char *)v182 + 21) |= 0x40u;
        goto LABEL_376;
      }
    }
    else if (v192 != 16)
    {
      goto LABEL_383;
    }
    if ((*((_DWORD *)v188 + 14) & v185) == (_DWORD)v4 && (*((_BYTE *)v188 + 129) & 4) != 0)
      goto LABEL_376;
    goto LABEL_383;
  }
LABEL_403:
  v205 = *((unsigned __int8 *)this + 24);
  v206 = *((unsigned __int8 *)this + 25);
  v207 = *((_QWORD *)this + 4);
  v208 = *(_QWORD *)this;
  v209 = (void **)(*(_QWORD *)this + 16);
  if (v463 == 0 || *((_QWORD *)&v463 + 1) >= (unint64_t)*(unsigned int *)(v208 + 28))
  {
    v216 = (WTF *)*v209;
    if (v216)
    {
      *(_QWORD *)(v208 + 16) = 0;
      *(_DWORD *)(v208 + 24) = 0;
      WTF::fastFree(v216, (void *)a2);
    }
    v217 = v468;
    v468 = 0;
    *(_QWORD *)(v208 + 16) = v217;
    v218 = HIDWORD(v469);
    HIDWORD(v469) = 0;
    *(_DWORD *)(v208 + 24) = (_DWORD)v469;
    *(_DWORD *)(v208 + 28) = v218;
  }
  else
  {
    *(_DWORD *)(v208 + 28) = DWORD2(v463);
    v210 = HIDWORD(v469);
    a2 = HIDWORD(v469) + (unint64_t)DWORD2(v463);
    if (a2 > *(unsigned int *)(v208 + 24))
    {
      WTF::Vector<WebCore::Layout::InlineItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v209, a2);
      v210 = HIDWORD(v469);
    }
    if ((_DWORD)v210)
    {
      v211 = v468;
      v212 = *(_DWORD *)(v208 + 28);
      v213 = 24 * v210;
      do
      {
        v214 = *(_QWORD *)(v208 + 16) + 24 * v212;
        v215 = *(_OWORD *)v211;
        *(_QWORD *)(v214 + 16) = *((_QWORD *)v211 + 2);
        *(_OWORD *)v214 = v215;
        v212 = *(_DWORD *)(v208 + 28) + 1;
        *(_DWORD *)(v208 + 28) = v212;
        v211 = (WTF *)((char *)v211 + 24);
        v213 -= 24;
      }
      while (v213);
    }
  }
  *(_QWORD *)v208 = v205 | (v206 << 8);
  *(_QWORD *)(v208 + 8) = v207;
  result = v468;
  if (v468)
  {
    v468 = 0;
    LODWORD(v469) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

float WebCore::Layout::TextUtil::width(WTF::MemoryPressureHandler *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5, float a6)
{
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::MemoryPressureHandler *v10;
  uint64_t v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  WebCore::FontCascadeFonts *v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  _BOOL4 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  int v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  float v69;
  WebCore::FontCascadeFonts *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  float v74;
  WebCore::Length *v75;
  int v76;
  float v77;
  float v78;
  _WORD *v80;
  char *v81;
  __int16 v82;
  WTF *v83;
  void *v84;
  WTF *v85;
  void *v86;
  WTF *v87;
  void *v88;
  float *v89;
  unsigned int v90;
  int v91;
  BOOL v92;
  BOOL v93;
  _BOOL4 v95;
  float v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  WTF::StringImpl *v112;
  char v113;
  char v114;
  unsigned int v115;
  int v116;
  int v117;
  BOOL v118;
  WTF::StringImpl *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  uint64_t v131;
  WTF *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  int v141;
  float v142;
  float v143;
  BOOL v144;
  char v145;
  char v146;
  WTF *v147;
  float v148;
  _BYTE __dst[36];
  char v150;
  char v151;
  WTF::StringImpl *v152;

  if (a3 == a4)
    return 0.0;
  v9 = a2;
  v10 = a1;
  if (*((_BYTE *)a1 + 128))
    return *(float *)(a2 + 172);
  v12 = *((_QWORD *)a1 + 15);
  if (v12)
    *(_DWORD *)v12 += 2;
  if (*(_BYTE *)(a2 + 229))
    v13 = 1;
  else
    v13 = *(_BYTE *)(a2 + 230) != 0;
  v14 = 0;
  if (v13 && a5)
  {
    if (!v12)
    {
      if ((*((_BYTE *)a1 + 129) & 1) != 0)
      {
        v14 = 0;
LABEL_205:
        v20 = 0x100000000;
        v18 = "";
        goto LABEL_22;
      }
      v14 = 0;
      v103 = *((_QWORD *)a1 + 4);
      goto LABEL_275;
    }
    if (*(_DWORD *)(v12 + 4) <= a4)
    {
      v14 = 0;
    }
    else
    {
      v15 = *(_QWORD *)(v12 + 8);
      if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        v16 = *(unsigned __int8 *)(v15 + a4);
      else
        v16 = *(unsigned __int16 *)(v15 + 2 * a4);
      v14 = v16 == 32;
      if (v16 == 32)
        ++a4;
    }
  }
  if ((*((_BYTE *)a1 + 129) & 1) == 0)
  {
    v103 = *((_QWORD *)a1 + 4);
    if (v12)
    {
      v104 = *(unsigned int *)(v12 + 4);
      v18 = (char *)a1 + 16;
      if (v104 <= a3)
      {
        v108 = 0x100000000;
      }
      else
      {
        v105 = *(unsigned int *)(v12 + 16);
        v106 = a4 - a3;
        if (v104 - a3 <= a4 - a3)
        {
          if (!a3)
          {
            v108 = v104 & 0xFFFFFFFEFFFFFFFFLL | (((v105 >> 2) & 1) << 32);
            goto LABEL_170;
          }
          v106 = v104 - a3;
        }
        v107 = (v105 >> 2) & 1;
        v108 = v106;
        v109 = v104 - a3;
        if ((_DWORD)v107)
        {
          if (v109 < v106)
            goto LABEL_261;
          v108 = v106 | 0x100000000;
        }
        else if (v109 < v106)
        {
          goto LABEL_261;
        }
      }
LABEL_170:
      if ((*((_QWORD *)a1 + 4) & 0x1C00000) != 0x800000)
      {
        v110 = 0;
        v111 = 0;
        goto LABEL_172;
      }
LABEL_304:
      v111 = (*((unsigned __int8 *)a1 + 59) >> 2) & 1;
      v110 = 1;
LABEL_172:
      a2 = v108;
      if ((v108 & 0x100000000) != 0)
      {
        if ((_DWORD)v108)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_175:
          v112 = v152;
LABEL_176:
          *(_DWORD *)__dst = 0;
          if (v112)
          {
            *(_DWORD *)v112 += 2;
            *(_QWORD *)&__dst[8] = v112;
            *(_DWORD *)&__dst[16] = 0;
            __dst[20] = 1;
            *(float *)&__dst[24] = a6;
            *(_QWORD *)&__dst[28] = 1065353216;
            v150 = 4;
            if (v111)
              v113 = 2;
            else
              v113 = 0;
            if (v110)
              v114 = 12;
            else
              v114 = 8;
            v151 = v114 | v113 | v151 & 0xE0;
            if (*(_DWORD *)v112 == 2)
              WTF::StringImpl::destroy(v112, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v112 -= 2;
          }
          else
          {
            *(_QWORD *)&__dst[8] = 0;
            *(_DWORD *)&__dst[16] = 0;
            __dst[20] = 1;
            *(float *)&__dst[24] = a6;
            *(_QWORD *)&__dst[28] = 1065353216;
            v150 = 4;
            if (v111)
              v145 = 2;
            else
              v145 = 0;
            if (v110)
              v146 = 12;
            else
              v146 = 8;
            v151 = v146 | v145;
          }
          v115 = *((_DWORD *)v18 + 10);
          v116 = (v115 >> 27) & 7;
          v117 = v115 & 0x40000000;
          v118 = v116 == 3 && v117 == 0;
          if (v118 || v116 == 1)
          {
            v134 = *((_QWORD *)v10 + 5);
            if (*(float *)(v134 + 336) != 0.0)
            {
              v135 = v134 + 336;
              v151 |= 1u;
              *(_DWORD *)&__dst[16] = *(_DWORD *)v135;
              __dst[20] = *(_BYTE *)(v135 + 4);
            }
          }
          v69 = WebCore::FontCascade::width(v9, (uint64_t)__dst);
          v119 = *(WTF::StringImpl **)&__dst[8];
          *(_QWORD *)&__dst[8] = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
              WTF::StringImpl::destroy(v119, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v119 -= 2;
          }
          if (!v14)
            goto LABEL_113;
          v74 = WebCore::FontCascade::widthOfSpaceString((WebCore::FontCascade *)v9);
LABEL_109:
          v75 = (WebCore::Length *)(v9 + 208);
          v76 = *(unsigned __int8 *)(v9 + 212);
          if (v76 == 4)
          {
            if (*(_BYTE *)(v9 + 214))
              v77 = *(float *)v75;
            else
              v77 = (float)*(int *)v75;
            goto LABEL_112;
          }
          v148 = v74;
          if (v76 == 3)
          {
            v143 = *(float *)(v9 + 208);
            if (!*(_BYTE *)(v9 + 214))
              v143 = (float)SLODWORD(v143);
            v77 = *(float *)(v9 + 172) * (float)(v143 / 100.0);
          }
          else
          {
            v77 = 0.0;
            if (v76 != 11)
            {
LABEL_112:
              v69 = v69 - (float)(v74 + v77);
              goto LABEL_113;
            }
            WebCore::Length::nonNanCalculatedValue(v75, *(float *)(v9 + 172));
            v77 = v142;
          }
          v74 = v148;
          goto LABEL_112;
        }
      }
      else if ((_DWORD)v108)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        goto LABEL_175;
      }
LABEL_277:
      v112 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
      goto LABEL_176;
    }
LABEL_275:
    v18 = (char *)a1 + 16;
    if ((v103 & 0x1C00000) != 0x800000)
    {
      v110 = 0;
      v111 = 0;
      goto LABEL_277;
    }
    v108 = 0x100000000;
    goto LABEL_304;
  }
  if (!v12)
    goto LABEL_205;
  v17 = *(unsigned int *)(v12 + 4);
  if (v17 <= a3)
    goto LABEL_205;
  v18 = *(char **)(v12 + 8);
  v19 = a4 - a3;
  if (v17 - a3 <= a4 - a3)
  {
    if (!a3)
    {
      v20 = v17 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)*(unsigned int *)(v12 + 16) >> 2) & 1) << 32);
      goto LABEL_22;
    }
    v19 = v17 - a3;
  }
  v20 = v19;
  v21 = v17 - a3;
  if (((*(_DWORD *)(v12 + 16) >> 2) & 1) != 0)
  {
    if (v21 >= v19)
    {
      v18 += a3;
      v20 = v19 | 0x100000000;
      goto LABEL_22;
    }
LABEL_261:
    __break(1u);
LABEL_262:
    WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(v6, 0);
    v33 = *v6;
    if (!*v6)
    {
      v34 = 0;
LABEL_43:
      v35 = v34 & v8;
      a2 = v33 + 40 * (v34 & v8);
      v36 = *(_DWORD *)(a2 + 32);
      if (v36)
      {
        v37 = 0;
        v38 = 1;
        do
        {
          v42 = *(_QWORD *)a2 != *(_QWORD *)__dst
             || *(_QWORD *)(a2 + 8) != *(_QWORD *)&__dst[8]
             || *(_QWORD *)(a2 + 16) != *(_QWORD *)&__dst[16]
             || *(_QWORD *)(a2 + 24) != *(_QWORD *)&__dst[24];
          if (v36 == v7 && !v42)
          {
            v51 = 0;
            goto LABEL_92;
          }
          if (v36 == 17)
            v37 = a2;
          v35 = (v35 + v38) & v34;
          a2 = v33 + 40 * v35;
          v36 = *(_DWORD *)(a2 + 32);
          ++v38;
        }
        while (v36);
        if (v37)
        {
          *(_QWORD *)(v37 + 32) = 0;
          *(_OWORD *)v37 = 0u;
          *(_OWORD *)(v37 + 16) = 0u;
          --*(_DWORD *)(*v6 - 16);
          a2 = v37;
        }
      }
      v43 = *(_OWORD *)&__dst[16];
      v44 = *(_DWORD *)&__dst[32];
      *(_OWORD *)a2 = *(_OWORD *)__dst;
      *(_OWORD *)(a2 + 16) = v43;
      *(_DWORD *)(a2 + 32) = v44;
      *(_DWORD *)(a2 + 36) = 2143289344;
      v45 = *v6;
      if (*v6)
        v46 = *(_DWORD *)(v45 - 12) + 1;
      else
        v46 = 1;
      *(_DWORD *)(v45 - 12) = v46;
      v47 = *v6;
      if (*v6)
        v48 = *(_DWORD *)(v47 - 12);
      else
        v48 = 0;
      v49 = (*(_DWORD *)(v47 - 16) + v48);
      v50 = *(unsigned int *)(v47 - 4);
      if (v50 > 0x400)
      {
        if (v50 > 2 * v49)
          goto LABEL_70;
      }
      else if (3 * v50 > 4 * v49)
      {
        goto LABEL_70;
      }
      a2 = WTF::HashTable<WebCore::WidthCache::SmallStringKey,WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::WidthCache::SmallStringKey,float>>,WebCore::WidthCache::SmallStringKeyHash,WTF::HashMap<WebCore::WidthCache::SmallStringKey,float,WebCore::WidthCache::SmallStringKeyHash,WebCore::WidthCache::SmallStringKeyHashTraits,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::WidthCache::SmallStringKeyHashTraits>::expand(v6, (__int128 *)a2);
LABEL_70:
      v51 = 1;
LABEL_92:
      v89 = (float *)(a2 + 36);
      goto LABEL_93;
    }
LABEL_42:
    v34 = *(_DWORD *)(v33 - 8);
    goto LABEL_43;
  }
  if (v21 < v19)
    goto LABEL_261;
  v18 += 2 * a3;
LABEL_22:
  v22 = *(WebCore::FontCascadeFonts **)(a2 + 216);
  if (v22)
    ++*(_DWORD *)v22;
  v23 = *((_BYTE *)v22 + 152) & 3;
  if (v23 == 2)
  {
    a1 = (WTF::MemoryPressureHandler *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v22, (const WebCore::FontCascadeDescription *)(a2 + 16), 0);
    if (*((_DWORD *)a1 + 3) == 1)
    {
      a1 = (WTF::MemoryPressureHandler *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8)
                                                                                   + 16))(*(_QWORD *)(*(_QWORD *)a1 + 8), 0);
      v136 = *((_BYTE *)v22 + 152) & 0xFC | (*((unsigned __int8 *)a1 + 344) >> 1) & 1;
    }
    else
    {
      LOBYTE(v136) = *((_BYTE *)v22 + 152) & 0xFC;
    }
    *((_BYTE *)v22 + 152) = v136;
    v23 = v136 & 3;
  }
  if (*(_DWORD *)v22 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v22, (void *)a2);
    a1 = (WTF::MemoryPressureHandler *)WTF::fastFree(v83, v84);
  }
  else
  {
    --*(_DWORD *)v22;
  }
  if (v23 == 1)
  {
    v90 = *((_DWORD *)v10 + 14);
    v91 = (v90 >> 27) & 7;
    v92 = (v90 & 0x40000000) == 0;
    v93 = (v90 & 0x40000000) == 0 && v91 == 1;
    if (((v91 != 2) | ((v90 & 0x40000000) >> 30)) == 1 && v93)
    {
      if ((v91 != 3) | ((v90 & 0x40000000) >> 30) & 1)
      {
        if (v91)
          v92 = 0;
        if (v92)
          goto LABEL_143;
        if ((v90 & 0x40000000) == 0 || v91)
        {
          if (((v91 == 1) & (v90 >> 30)) != 0)
            LOBYTE(v91) = 1;
          else
            LOBYTE(v91) = 2;
LABEL_144:
          v95 = v91 != 5 && (v91 - 3) < 0xFEu;
          WebCore::FontCascade::widthForSimpleTextWithFixedPitch((float *)v9, (unsigned __int8 *)v18, v20, v95);
LABEL_255:
          v69 = v96;
          if (!v14)
            goto LABEL_113;
LABEL_100:
          v70 = *(WebCore::FontCascadeFonts **)(v9 + 216);
          if (v70)
            ++*(_DWORD *)v70;
          v71 = *((_QWORD *)v70 + 13);
          if (v71 && *(_QWORD *)(v71 + 8))
            goto LABEL_104;
          v120 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v70, (const WebCore::FontCascadeDescription *)(v9 + 16), 0);
          WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v120, 1, (uint64_t)__dst);
          if (!*(_QWORD *)&__dst[8] || (v121 = *(_QWORD *)(*(_QWORD *)&__dst[8] + 8)) == 0)
          {
            v122 = 0;
            goto LABEL_213;
          }
          v122 = *(_QWORD *)(v121 + 8);
          if (!v122)
          {
            v122 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v122 = 1;
            *(_QWORD *)(v122 + 8) = v121;
            v147 = *(WTF **)(v121 + 8);
            *(_QWORD *)(v121 + 8) = v122;
            if (v147)
            {
              if (*(_DWORD *)v147 == 1)
              {
                WTF::fastFree(v147, (void *)a2);
                v122 = *(_QWORD *)(v121 + 8);
                if (!v122)
                {
LABEL_213:
                  v123 = (WTF *)*((_QWORD *)v70 + 13);
                  *((_QWORD *)v70 + 13) = v122;
                  if (v123)
                  {
                    if (*(_DWORD *)v123 == 1)
                      WTF::fastFree(v123, (void *)a2);
                    else
                      --*(_DWORD *)v123;
                  }
                  v124 = *(WTF **)&__dst[8];
                  *(_QWORD *)&__dst[8] = 0;
                  if (v124)
                  {
                    if (*(_DWORD *)v124 == 1)
                      WTF::fastFree(v124, (void *)a2);
                    else
                      --*(_DWORD *)v124;
                  }
                  v125 = *((_QWORD *)v70 + 13);
                  if (v125)
                  {
                    v126 = *(_QWORD *)(v125 + 8);
                    if (v126)
                    {
                      if ((*(_BYTE *)(v126 + 256) & 2) != 0)
                      {
                        v127 = 1;
                        while (1)
                        {
                          v128 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v70, (const WebCore::FontCascadeDescription *)(v9 + 16), v127);
                          if (!*(_DWORD *)(v128 + 12))
                            break;
                          WebCore::FontRanges::glyphDataForCharacter(0x20u, v128, 0, (uint64_t)__dst);
                          if (*(_QWORD *)&__dst[8])
                            v129 = *(_QWORD *)(*(_QWORD *)&__dst[8] + 8);
                          else
                            v129 = 0;
                          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v152, v129);
                          v130 = *(WTF **)&__dst[8];
                          *(_QWORD *)&__dst[8] = 0;
                          if (v130)
                          {
                            if (*(_DWORD *)v130 == 1)
                              WTF::fastFree(v130, (void *)a2);
                            else
                              --*(_DWORD *)v130;
                          }
                          v72 = v152;
                          if (v152)
                          {
                            v131 = *((_QWORD *)v152 + 1);
                            if (!v131 || (*(_BYTE *)(v131 + 256) & 2) != 0)
                            {
                              v133 = 0;
                              v152 = 0;
                            }
                            else
                            {
                              v152 = 0;
                              v132 = (WTF *)*((_QWORD *)v70 + 13);
                              *((_QWORD *)v70 + 13) = v72;
                              if (!v132)
                                goto LABEL_105;
                              if (*(_DWORD *)v132 != 1)
                              {
                                --*(_DWORD *)v132;
                                goto LABEL_104;
                              }
                              WTF::fastFree(v132, (void *)a2);
                              v72 = v152;
                              v152 = 0;
                              if (!v72)
                                goto LABEL_104;
                              v133 = 2;
                            }
                            if (*(_DWORD *)v72 == 1)
                              WTF::fastFree(v72, (void *)a2);
                            else
                              --*(_DWORD *)v72;
                          }
                          else
                          {
                            v133 = 0;
                          }
                          ++v127;
                          if (v133)
                            goto LABEL_104;
                        }
                      }
                      goto LABEL_104;
                    }
                  }
                  if (!v120[3])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x194285EBCLL);
                  }
                  v138 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v120 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v120 + 8), 1);
                  WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)__dst, v138);
                  v139 = *(_QWORD *)__dst;
                  *(_QWORD *)__dst = 0;
                  v140 = (WTF *)*((_QWORD *)v70 + 13);
                  *((_QWORD *)v70 + 13) = v139;
                  if (v140)
                  {
                    v141 = *(_DWORD *)v140 - 1;
                    if (*(_DWORD *)v140 == 1)
                    {
                      WTF::fastFree(v140, (void *)a2);
                      v140 = *(WTF **)__dst;
                      *(_QWORD *)__dst = 0;
                      if (!v140)
                        goto LABEL_104;
                      v141 = *(_DWORD *)v140 - 1;
                      if (*(_DWORD *)v140 == 1)
                      {
                        WTF::fastFree(v140, (void *)a2);
                        goto LABEL_104;
                      }
                    }
                    *(_DWORD *)v140 = v141;
                  }
LABEL_104:
                  v72 = (WTF::StringImpl *)*((_QWORD *)v70 + 13);
                  if (v72)
LABEL_105:
                    v73 = *((_QWORD *)v72 + 1);
                  else
                    v73 = 0;
                  if (*(_DWORD *)v70 == 1)
                  {
                    WebCore::FontCascadeFonts::~FontCascadeFonts(v70, (void *)a2);
                    WTF::fastFree(v87, v88);
                  }
                  else
                  {
                    --*(_DWORD *)v70;
                  }
                  *(_QWORD *)__dst = *(_QWORD *)(v9 + 136);
                  v74 = *(float *)(v73 + 336) + *(float *)(v73 + 340);
                  goto LABEL_109;
                }
              }
              else
              {
                --*(_DWORD *)v147;
              }
            }
          }
          ++*(_DWORD *)v122;
          goto LABEL_213;
        }
        goto LABEL_209;
      }
    }
    else if ((v91 != 3) | ((v90 & 0x40000000) >> 30) & 1)
    {
      if (v91)
        v144 = 0;
      else
        v144 = (v90 & 0x40000000) == 0;
      if (v144)
      {
LABEL_143:
        LOBYTE(v91) = 0;
        goto LABEL_144;
      }
      if ((v90 & 0x40000000) == 0 || v91)
      {
        if ((v90 & 0x40000000) == 0 || v91 != 1)
        {
          if ((v90 & 0x40000000) == 0 && v91 == 2)
          {
            LOBYTE(v91) = 3;
          }
          else if (v91 == 1 && (v90 & 0x40000000) == 0)
          {
            LOBYTE(v91) = 2;
          }
          else
          {
            LOBYTE(v91) = 0;
          }
        }
        goto LABEL_144;
      }
LABEL_209:
      LOBYTE(v91) = 4;
      goto LABEL_144;
    }
    LOBYTE(v91) = 5;
    goto LABEL_144;
  }
  v24 = v20;
  if ((_DWORD)v20)
  {
    v10 = *(WTF::MemoryPressureHandler **)(v9 + 216);
    if (v10)
    {
      ++*(_DWORD *)v10;
      if ((v20 - 17) < 0xFFFFFFF0)
        goto LABEL_90;
    }
    else if ((v20 - 17) < 0xFFFFFFF0)
    {
LABEL_254:
      v96 = WebCore::FontCascade::widthForSimpleTextSlow(v9, (uint64_t)v18);
      goto LABEL_255;
    }
    v25 = *((_DWORD *)v10 + 31);
    v26 = __OFSUB__(v25, 1);
    v27 = v25 - 1;
    if (v27 < 0 == v26)
    {
      v89 = 0;
      *((_DWORD *)v10 + 31) = v27;
      goto LABEL_95;
    }
    v28 = WTF::MemoryPressureHandler::singleton(a1);
    v89 = 0;
    v29 = atomic_load((unsigned __int8 *)(v28 + 4));
    if (v29 == 2 || *(_BYTE *)(v28 + 7))
      goto LABEL_95;
    if (v20 != 1)
    {
      v6 = (uint64_t *)((char *)v10 + 136);
      memset(__dst, 0, sizeof(__dst));
      if ((v20 & 0x100000000) != 0)
      {
        v80 = __dst;
        v81 = v18;
        do
        {
          v82 = *v81++;
          *v80++ = v82;
          --v24;
        }
        while (v24);
      }
      else
      {
        memcpy(__dst, v18, 2 * v20);
      }
      v30 = *(_QWORD *)&__dst[24] ^ (((*(_QWORD *)&__dst[8] ^ 0x1FF5C2923A788D2CuLL)
                                    * (unsigned __int128)(*(_QWORD *)__dst ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ ((*(_QWORD *)&__dst[8] ^ 0x1FF5C2923A788D2CLL) * (*(_QWORD *)__dst ^ 0xE7037ED1A0B428DBLL));
      v31 = ((v30 * (unsigned __int128)(*(_QWORD *)&__dst[16] ^ 0xE7037ED1A0B428DBLL)) >> 64) ^ 0xE7037ED1A0B428DBLL;
      v32 = (((v31 * (unsigned __int128)((v30 * (*(_QWORD *)&__dst[16] ^ 0xE7037ED1A0B428DBLL)) ^ 0xA0761D6478BD640FLL)) >> 64) ^ (v31 * ((v30 * (*(_DWORD *)&__dst[16] ^ 0xA0B428DB)) ^ 0x78BD640F))) & 0xFFFFFF;
      if (v32)
        v8 = v32;
      else
        v8 = 0x800000;
      v7 = v8 | ((_DWORD)v20 << 24);
      *(_DWORD *)&__dst[32] = v7;
      v33 = *v6;
      if (*v6)
        goto LABEL_42;
      goto LABEL_262;
    }
    if ((v20 & 0x100000000) != 0)
      v52 = *v18;
    else
      v52 = *(unsigned __int16 *)v18;
    v54 = (uint64_t *)((char *)v10 + 128);
    v53 = *((_QWORD *)v10 + 16);
    v55 = v52 + 1;
    if (v53
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)v10 + 16, 8u, 0), v55 = v52 + 1, (v53 = *v54) != 0))
    {
      v56 = *(_DWORD *)(v53 - 8);
    }
    else
    {
      v56 = 0;
    }
    v57 = 9 * ((v52 - (v55 << 15)) ^ ((v52 - (v55 << 15)) >> 10));
    v58 = (v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11);
    v59 = v56 & (v58 ^ HIWORD(v58));
    v60 = (_DWORD *)(v53 + 8 * v59);
    v61 = *v60;
    if (*v60)
    {
      v62 = 0;
      v63 = 1;
      do
      {
        if (v61 == v55)
        {
          v89 = (float *)(v60 + 1);
          goto LABEL_94;
        }
        if (v61 == -1)
          v62 = v60;
        v59 = (v59 + v63) & v56;
        v60 = (_DWORD *)(v53 + 8 * v59);
        v61 = *v60;
        ++v63;
      }
      while (*v60);
      if (v62)
      {
        *v62 = 0;
        --*(_DWORD *)(*v54 - 16);
        v60 = v62;
      }
    }
    *v60 = v55;
    v60[1] = 2143289344;
    v97 = *v54;
    if (*v54)
      v98 = *(_DWORD *)(v97 - 12) + 1;
    else
      v98 = 1;
    *(_DWORD *)(v97 - 12) = v98;
    v99 = *v54;
    if (*v54)
      v100 = *(_DWORD *)(v99 - 12);
    else
      v100 = 0;
    v101 = (*(_DWORD *)(v99 - 16) + v100);
    v102 = *(unsigned int *)(v99 - 4);
    if (v102 > 0x400)
    {
      if (v102 > 2 * v101)
        goto LABEL_163;
    }
    else
    {
      if (3 * v102 > 4 * v101)
      {
LABEL_163:
        v51 = 1;
        v89 = (float *)(v60 + 1);
LABEL_93:
        if (!v51)
        {
LABEL_94:
          *((_DWORD *)v10 + 30) = -3;
          goto LABEL_95;
        }
        v64 = *((_DWORD *)v10 + 30);
        if (v64 <= 19)
          *((_DWORD *)v10 + 30) = ++v64;
        *((_DWORD *)v10 + 31) = v64;
        v65 = *((_QWORD *)v10 + 16);
        if (v65)
          v66 = *(_DWORD *)(v65 - 12);
        else
          v66 = 0;
        v67 = *((_QWORD *)v10 + 17);
        if (v67)
          v68 = *(_DWORD *)(v67 - 12);
        else
          v68 = 0;
        if ((v68 + v66) < 0x7A120)
        {
LABEL_95:
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v10, (void *)a2);
            WTF::fastFree(v85, v86);
          }
          else
          {
            --*(_DWORD *)v10;
          }
          if (v89)
          {
            v69 = *v89;
            goto LABEL_99;
          }
          goto LABEL_254;
        }
        if (v65)
        {
          *((_QWORD *)v10 + 16) = 0;
          WTF::fastFree((WTF *)(v65 - 16), (void *)a2);
          v67 = *((_QWORD *)v10 + 17);
        }
        if (v67)
        {
          *((_QWORD *)v10 + 17) = 0;
          WTF::fastFree((WTF *)(v67 - 16), (void *)a2);
        }
LABEL_90:
        v89 = 0;
        goto LABEL_95;
      }
      if (!(_DWORD)v102)
      {
        v137 = 8;
        goto LABEL_271;
      }
    }
    v137 = (_DWORD)v102 << (6 * *(_DWORD *)(v99 - 12) >= (2 * v102));
LABEL_271:
    v60 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,float>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,float>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,float,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::FloatWithZeroEmptyKeyHashTraits<float>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)v10 + 16, v137, v60);
    goto LABEL_163;
  }
  v69 = 0.0;
LABEL_99:
  if (v14)
    goto LABEL_100;
LABEL_113:
  if (fabsf(v69) == INFINITY)
    v78 = 3.4028e38;
  else
    v78 = fmaxf(v69, 0.0);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v78;
}

float WebCore::FontCascade::widthOfSpaceString(WebCore::FontCascade *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  float v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  __int16 v14;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = v8;
  LODWORD(v8) = 0;
  if (v3)
    *(_DWORD *)v3 += 2;
  v9 = v3;
  v10 = 0;
  v11 = 1;
  v12 = 0x3F80000000000000;
  v13 = 0;
  v14 = 2052;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v5 = WebCore::FontCascade::width((uint64_t)this, (uint64_t)&v8);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v5;
}

float WebCore::FontCascade::width(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  WebCore::Length *v15;
  int v16;
  float v17;
  WebCore::Length *v18;
  int v19;
  float v20;
  _BOOL4 v21;
  uint64_t *v22;
  _BOOL4 v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  void *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  WTF **v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  void *v37;
  int v38;
  float v39;
  float v40;
  float v41;
  int v42;
  double v43;
  int v44;
  int v45;
  int v46;
  float v47;
  int v48;
  double v49;
  int v50;
  int v51;
  int v52;
  double v53;
  int v54;
  int v55;
  int v56;
  double v57;
  int v58;
  float v59;
  float v60;
  _QWORD v61[2];
  _BYTE v62[5552];
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v6 = *(_QWORD *)(v3 + 8);
  v7 = 0.0;
  if (!v6)
    return v7;
  v8 = v3;
  v9 = *(unsigned int *)(v6 + 4);
  if (!(_DWORD)v9)
    return v7;
  v10 = v5;
  v11 = v4;
  v12 = v2;
  v13 = WebCore::FontCascade::s_codePath;
  if (!WebCore::FontCascade::s_codePath)
  {
    if ((*(_BYTE *)(v8 + 37) & 8) == 0 || (*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      v13 = 1;
      goto LABEL_6;
    }
    v13 = WebCore::FontCascade::characterRangeCodePath(*(_QWORD *)(v6 + 8), v9);
  }
  if (v13 == 2)
  {
    v14 = 1;
    goto LABEL_8;
  }
LABEL_6:
  v14 = 0;
  if (v10)
  {
    if (v13 != 3)
    {
      v14 = 0;
      if (!*(_BYTE *)(v10 + 16))
        v10 = 0;
    }
  }
LABEL_8:
  v15 = (WebCore::Length *)(v12 + 208);
  v16 = *(unsigned __int8 *)(v12 + 212);
  switch(v16)
  {
    case 4:
      if (*(_BYTE *)(v12 + 214))
        v17 = *(float *)v15;
      else
        v17 = (float)*(int *)v15;
      break;
    case 3:
      if (*(_BYTE *)(v12 + 214))
        v59 = *(float *)v15;
      else
        v59 = (float)*(int *)v15;
      v17 = (float)(v59 / 100.0) * *(float *)(v12 + 172);
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v15, *(float *)(v12 + 172));
      break;
    default:
      goto LABEL_12;
  }
  if (v17 == 0.0)
  {
LABEL_12:
    v18 = (WebCore::Length *)(v12 + 200);
    v19 = *(unsigned __int8 *)(v12 + 204);
    if (v19 == 4)
    {
      if (*(_BYTE *)(v12 + 206))
        v20 = *(float *)v18;
      else
        v20 = (float)*(int *)v18;
    }
    else if (v19 == 3)
    {
      if (*(_BYTE *)(v12 + 206))
        v60 = *(float *)v18;
      else
        v60 = (float)*(int *)v18;
      v20 = (float)(v60 / 100.0) * *(float *)(v12 + 172);
    }
    else
    {
      v20 = 0.0;
      if (v19 == 11)
        WebCore::Length::nonNanCalculatedValue(v18, *(float *)(v12 + 172));
    }
    v21 = v20 != 0.0;
    goto LABEL_16;
  }
  v21 = 1;
LABEL_16:
  v22 = *(uint64_t **)(v12 + 216);
  if (v22)
    ++*(_DWORD *)v22;
  if (*(_BYTE *)(v12 + 229))
    v23 = 1;
  else
    v23 = *(_BYTE *)(v12 + 230) != 0;
  v24 = 0;
  if (!v10 && v23 && !v21)
  {
    if ((*(_BYTE *)(v8 + 37) & 1) != 0)
    {
      v24 = 0;
    }
    else
    {
      v25 = *(_QWORD *)(v8 + 8);
      if (v25)
      {
        v26 = *(unsigned __int8 **)(v25 + 8);
        v27 = *(unsigned int *)(v25 + 4) | ((unint64_t)((*(_DWORD *)(v25 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v26 = 0;
        v27 = 0x100000000;
      }
      v24 = WebCore::WidthCache::add(v22 + 15, v26, v27);
    }
  }
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts((WebCore::FontCascadeFonts *)v22, (void *)v9);
      WTF::fastFree(v35, v36);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  if (v24)
    return *(float *)v24;
  v61[0] = 0;
  v61[1] = 0;
  if (!v11)
    v11 = v61;
  if (v14)
  {
    WebCore::ComplexTextController::ComplexTextController((WebCore::ComplexTextController *)v62, v12, v8, 1, (uint64_t)v11, 0);
    if (v10)
    {
      v38 = *(_DWORD *)(v10 + 8);
      v39 = ceilf(-v66);
      v40 = 0.0;
      v41 = 0.0;
      if (!*(_BYTE *)(v10 + 16))
        v41 = (float)*(int *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v12, v37) + 44);
      v42 = (int)(float)(v39 - v41);
      if (v38 / 64 > v42)
        v42 = v38 / 64;
      v43 = (float)v42 * 64.0;
      if (v43 > -2147483650.0)
        v44 = (int)v43;
      else
        v44 = 0x80000000;
      if (v43 < 2147483650.0)
        v45 = v44;
      else
        v45 = 0x7FFFFFFF;
      *(_DWORD *)(v10 + 8) = v45;
      v46 = *(_DWORD *)(v10 + 12);
      v47 = ceilf(v67);
      if (!*(_BYTE *)(v10 + 16))
        v40 = (float)*(int *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)v12, v37) + 48);
      v48 = (int)(float)(v47 - v40);
      if (v46 / 64 > v48)
        v48 = v46 / 64;
      v49 = (float)v48 * 64.0;
      if (v49 > -2147483650.0)
        v50 = (int)v49;
      else
        v50 = 0x80000000;
      if (v49 < 2147483650.0)
        v51 = v50;
      else
        v51 = 0x7FFFFFFF;
      *(_DWORD *)(v10 + 12) = v51;
      v52 = vcvtps_s32_f32(-v64);
      v53 = (float)(v52 & ~(v52 >> 31)) * 64.0;
      if (v53 > -2147483650.0)
        v54 = (int)v53;
      else
        v54 = 0x80000000;
      if (v53 < 2147483650.0)
        v55 = v54;
      else
        v55 = 0x7FFFFFFF;
      v7 = v63;
      v56 = vcvtps_s32_f32(v65 - v63);
      *(_DWORD *)v10 = v55;
      v57 = (float)(v56 & ~(v56 >> 31)) * 64.0;
      if (v57 >= 2147483650.0)
      {
        v58 = 0x7FFFFFFF;
      }
      else if (v57 <= -2147483650.0)
      {
        v58 = 0x80000000;
      }
      else
      {
        v58 = (int)v57;
      }
      *(_DWORD *)(v10 + 4) = v58;
    }
    else
    {
      v7 = v63;
    }
    WebCore::ComplexTextController::~ComplexTextController((WebCore::ComplexTextController *)v62, (WTF::StringImpl *)v37);
  }
  else
  {
    WebCore::FontCascade::widthForSimpleText(v12, v8);
    v7 = v30;
  }
  v31 = v61[0];
  if (v61[0])
  {
    v32 = *(unsigned int *)(v61[0] - 4);
    if ((_DWORD)v32)
    {
      v33 = (WTF **)v61[0];
      do
      {
        v34 = *v33;
        if (*v33 != (WTF *)-1)
        {
          *v33 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 1)
              WTF::fastFree(v34, v29);
            else
              --*(_DWORD *)v34;
          }
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree((WTF *)(v31 - 16), v29);
  }
  return v7;
}

uint64_t WebCore::WidthIterator::WidthIterator(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  float v6;
  char v7;
  float v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  ++*(_DWORD *)(a2 + 8);
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  ++*(_DWORD *)a3;
  *(_QWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 56) = 0;
  v6 = *(float *)(a3 + 32);
  *(float *)(result + 60) = v6;
  *(_OWORD *)(result + 64) = xmmword_1969F7E30;
  *(_DWORD *)(result + 80) = 0;
  v7 = *(_BYTE *)(a3 + 37);
  *(_BYTE *)(result + 84) = (v7 & 2) != 0;
  *(_BYTE *)(result + 85) = 0;
  *(_BYTE *)(result + 86) = (*(_BYTE *)(a3 + 36) & 3) == 0;
  *(_BYTE *)(result + 87) = a5;
  *(_WORD *)(result + 88) = *(_WORD *)(a2 + 229);
  *(_BYTE *)(result + 90) = a6;
  v8 = 0.0;
  if (v6 != 0.0)
  {
    v14 = result;
    v9 = v7 & 2;
    v10 = *(_QWORD *)(a3 + 8);
    if (v10)
    {
      v11 = *(unsigned __int8 **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v12 = 0x100000000;
    }
    v13 = WebCore::FontCascade::expansionOpportunityCount(v11, v12, v9 != 0, *(_BYTE *)(a3 + 36));
    result = v14;
    v8 = 0.0;
    if (v13)
      v8 = *(float *)(v14 + 60) / (float)v13;
  }
  *(float *)(result + 64) = v8;
  return result;
}

double WebCore::ViewportConfiguration::setDefaultConfiguration(WebCore::ViewportConfiguration *this, __int128 *a2)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  if (*((double *)this + 7) != *(double *)a2
    || *((double *)this + 8) != *((double *)a2 + 1)
    || *((double *)this + 9) != *((double *)a2 + 2)
    || *((double *)this + 10) != *((double *)a2 + 3)
    || *((double *)this + 11) != *((double *)a2 + 4)
    || (result = *((double *)this + 12), result != *((double *)a2 + 5))
    || *((unsigned __int8 *)this + 104) != *((unsigned __int8 *)a2 + 48)
    || *((unsigned __int8 *)this + 105) != *((unsigned __int8 *)a2 + 49)
    || *((unsigned __int8 *)this + 106) != *((unsigned __int8 *)a2 + 50)
    || *((unsigned __int8 *)this + 107) != *((unsigned __int8 *)a2 + 51)
    || *((unsigned __int8 *)this + 108) != *((unsigned __int8 *)a2 + 52)
    || *((unsigned __int8 *)this + 109) != *((unsigned __int8 *)a2 + 53)
    || *((unsigned __int8 *)this + 110) != *((unsigned __int8 *)a2 + 54))
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = a2[2];
    *(_QWORD *)((char *)this + 103) = *(_QWORD *)((char *)a2 + 47);
    *(_OWORD *)((char *)this + 72) = v4;
    *(_OWORD *)((char *)this + 88) = v5;
    *(_OWORD *)((char *)this + 56) = v3;
    return WebCore::ViewportConfiguration::updateConfiguration(this);
  }
  return result;
}

void WebCore::Layout::InlineFormattingContext::lineLayout(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, int *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t *v8;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WTF *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  float v34;
  WebCore::Layout::Box *v35;
  WebCore::RenderStyle *v36;
  uint64_t v37;
  WebCore::Length *v38;
  int v39;
  uint64_t v41;
  int v42;
  WebCore::RenderStyle *v44;
  WTF::StringImpl *v45;
  void *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  _BOOL4 v52;
  unint64_t v53;
  char v54;
  unsigned int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  __int16 v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  BOOL v89;
  char v90;
  WTF **v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  void **v95;
  BOOL v96;
  uint64_t v97;
  void *v98;
  int v99;
  int v100;
  uint64_t v101;
  BOOL v102;
  int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  WTF *v109;
  WTF *v110;
  unsigned int v111;
  WTF *v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  _DWORD *v117;
  _DWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  unsigned int v132;
  char *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  WTF *v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  unint64_t v154;
  BOOL v155;
  int v156;
  BOOL v157;
  char v158;
  uint64_t v159;
  int v160;
  int v161;
  WTF *v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  WTF *v166;
  uint64_t v167;
  int v168;
  WTF *v169;
  WTF *v170;
  WTF *v171;
  WTF *v172;
  unint64_t v173;
  unint64_t v174;
  WTF *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF *v180;
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  _DWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  int v190;
  WTF *v191;
  WebCore::Layout::Box *v192;
  uint64_t LineStyle;
  uint64_t v194;
  WTF::StringImpl *v195;
  float v196;
  WTF::StringImpl *v197;
  float v198;
  const WebCore::FontCascade *v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  double v214;
  BOOL v215;
  float v216;
  float v217;
  double v218;
  int v220;
  WTF *v221;
  unsigned int v222;
  int v223;
  const WebCore::Layout::Box *v225;
  uint64_t v226;
  WebCore::Layout::BoxGeometry **v227;
  WebCore::Layout::BoxGeometry *v228;
  float v229;
  float v230;
  unsigned int v231;
  int v232;
  BOOL v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  float v242;
  int v243;
  float v244;
  float v245;
  int v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  const WebCore::Layout::Box *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  float v257;
  float v258;
  int v259;
  int v260;
  int v261;
  float v262;
  int v263;
  WTF *v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  double v268;
  float v270;
  float v271;
  float v273;
  const WebCore::Layout::Box *v274;
  uint64_t v275;
  _QWORD *v276;
  _DWORD *v277;
  float v278;
  float v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t j;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  WTF **v296;
  WTF *v297;
  float v298;
  WTF::StringImpl *v299;
  unint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  unsigned __int16 v304;
  __n128 v305;
  float v306;
  float v307;
  int v308;
  void *v309;
  void *v310;
  float v311;
  int32x2_t v312;
  void *v313;
  WTF *v314;
  uint64_t v315;
  void *v316;
  WTF *v317;
  uint64_t v318;
  int v319;
  uint64_t *v320;
  uint64_t v321;
  _QWORD *v322;
  BOOL v323;
  uint64_t v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  __int16 v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  WTF *v332;
  double v333;
  float32x2_t v334;
  _DWORD *v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  int v339;
  int v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF *v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  _DWORD **v347;
  uint64_t v348;
  _DWORD *v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unsigned int v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t *v363;
  int v364;
  uint64_t v365;
  void *v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  unint64_t v372;
  unsigned int v373;
  uint64_t v374;
  unsigned int v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  const WebCore::Layout::Box *v380;
  int v381;
  uint64_t v382;
  uint64_t i;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF **v387;
  WTF *v388;
  uint64_t v389;
  unsigned int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  const WebCore::Layout::Box *v395;
  int v396;
  uint64_t v397;
  unsigned int v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  const WebCore::Layout::Box *v403;
  int v404;
  unsigned int v405;
  uint64_t v406;
  unsigned int v407;
  unsigned int v408;
  int v409;
  int v410;
  unint64_t v411;
  unint64_t v412;
  int v413;
  unint64_t v414;
  unint64_t v416;
  int v417;
  BOOL v418;
  char v419;
  char *v420;
  unint64_t v421;
  float v422;
  float v423;
  unsigned int v424;
  WTF *v425;
  float v426;
  float v427;
  int v428;
  unsigned int *v429;
  WebCore::Layout::Box ***v430;
  void (***v431)(__int128 *__return_ptr, _QWORD, uint64_t *, uint64_t);
  uint64_t *v432;
  WTF::StringImpl *v433;
  int v434;
  float v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  float v444;
  float v445;
  float v446;
  float v447;
  uint64_t v448;
  __int128 v449;
  unint64_t v450;
  WTF::StringImpl *v451;
  uint64_t **v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  WTF *v456;
  int v457;
  unsigned int v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  float v471;
  float v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  float v476;
  float v477;
  float v478;
  float v479;
  float v480;
  char v481;
  float v482;
  float v483;
  char v484;
  WTF *v485;
  int v486;
  unsigned int v487;
  uint64_t v488;
  __int128 v489;
  __int128 v490;
  WTF *v491;
  uint64_t v492;
  _BYTE v493[1200];
  __int128 v494;
  __int128 v495;
  unsigned __int8 v496;
  __int128 v497;
  char v498;
  float v499;
  float32x2_t v500;
  int v501;
  int v502;
  char v503;
  char v504;
  uint64_t v505;
  WTF *v506;
  uint64_t v507;
  char v508;
  __int16 v509;
  uint64_t v510;
  int v511;
  char v512;
  uint64_t v513;
  int v514;
  char v515;
  char v516;

  v431 = (void (***)(__int128 *__return_ptr, _QWORD, uint64_t *, uint64_t))a2;
  if (a7 && a7[40])
  {
    v428 = 1;
  }
  else
  {
    *(_BYTE *)(a8 + 32) = 0;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    v14 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v14 + 1456))
    {
      v303 = *(_QWORD *)(v14 + 1472);
      if ((v303 & 0xFF00000000) != 0)
      {
        LODWORD(v450) = a6[2];
        if ((float)((float)(int)v450 * 0.015625) < *(float *)&v303 || *(_DWORD *)(**(_QWORD **)(a1 + 64) + 20))
          goto LABEL_718;
        *(_QWORD *)&v459 = a1;
        *((_QWORD *)&v459 + 1) = v14 + 32;
        *(_QWORD *)&v460 = &v450;
        v304 = WebCore::Layout::InlineFormattingContext::createDisplayContentForLineFromCachedContent(WebCore::Layout::ConstraintsForInlineContent const&,WebCore::Layout::InlineLayoutResult &)::$_0::operator()((uint64_t)&v459);
        if (v304 < 0x100u || (_BYTE)v304)
        {
          v306 = (float)a6[3] * 0.015625;
          *(float *)(v14 + 1340) = (float)a6[1] * 0.015625;
          *(float *)(v14 + 1344) = v306;
          v307 = (float)a6[2] * 0.015625;
          *(float *)(v14 + 1348) = v307;
          v305.n128_u32[0] = *(_DWORD *)(v14 + 1324);
          WebCore::Layout::InlineFormattingUtils::horizontalAlignmentOffset(*(_QWORD *)a1 + 16, v14 + 64, 1, v305, v307, *(float *)(v14 + 1368));
          *(_DWORD *)(v14 + 1320) = v308;
          v469 = (uint64_t *)a1;
          v470 = v14 + 32;
          LOWORD(v471) = 0;
          v475 = 0;
          v473 = 0;
          v474 = 0;
          WebCore::Layout::LineBoxBuilder::build(&v469, 0, (uint64_t)&v489);
          WebCore::Layout::LineBoxBuilder::~LineBoxBuilder((WebCore::Layout::LineBoxBuilder *)&v469, v309);
          WebCore::Layout::InlineFormattingContext::createDisplayContentForInlineContent(a1, (WebCore::Layout::LineBox *)&v489, (WebCore::Layout::LineLayoutResult *)(v14 + 32), (uint64_t)a6, a8);
          WebCore::Layout::LineBox::~LineBox((WebCore::Layout::LineBox *)&v489, v310);
          return;
        }
        if (*(_BYTE *)(v14 + 1456))
        {
LABEL_718:
          WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)(v14 + 32), (void *)a2);
          *(_BYTE *)(v14 + 1456) = 0;
        }
      }
    }
    if (a3[3] == 1)
    {
      v15 = *(_QWORD *)a3;
      v16 = (*(_WORD *)(*(_QWORD *)a3 + 21) & 0xF) != 0 || v15 == 0;
      if (!v16 && !*(_DWORD *)(v15 + 12))
      {
        v489 = 0u;
        v490 = 0u;
        v492 = 10;
        v494 = 0u;
        v495 = 0u;
        v311 = (float)a6[1] * 0.015625;
        v491 = (WTF *)v493;
        v498 = 0;
        v504 = 0;
        v496 = 0;
        *(_QWORD *)((char *)&v497 + 5) = 0;
        *(_QWORD *)&v497 = 0;
        v505 = 0;
        v507 = 0;
        v506 = 0;
        v508 = 0;
        v509 = 257;
        v510 = 0;
        v511 = 0;
        v512 = 0;
        v513 = 0;
        v514 = 0;
        v515 = 0;
        v516 = 0;
        v499 = v311;
        v312 = *(int32x2_t *)(a6 + 3);
        v312.i32[1] = a6[2];
        v500 = vmul_f32(vcvt_f32_s32(v312), (float32x2_t)vdup_n_s32(0x3C800000u));
        v501 = 0;
        LOBYTE(v502) = 0;
        v503 = 0;
        *(_QWORD *)&v459 = a1;
        *((_QWORD *)&v459 + 1) = &v489;
        LOWORD(v460) = 0;
        v461 = 0uLL;
        *((_QWORD *)&v460 + 1) = 0;
        WebCore::Layout::LineBoxBuilder::build((uint64_t **)&v459, 0, (uint64_t)&v469);
        v314 = (WTF *)v461;
        if ((_QWORD)v461)
        {
          *(_QWORD *)&v461 = 0;
          DWORD2(v461) = 0;
          WTF::fastFree(v314, v313);
        }
        v315 = *((_QWORD *)&v460 + 1);
        if (*((_QWORD *)&v460 + 1))
        {
          v382 = *(unsigned int *)(*((_QWORD *)&v460 + 1) - 4);
          if ((_DWORD)v382)
          {
            for (i = 0; i != v382; ++i)
            {
              if (*(_QWORD *)(v315 + 24 * i) != -1)
              {
                v384 = v315 + 24 * i;
                v385 = *(_QWORD *)(v384 + 8);
                if (v385)
                {
                  v386 = *(unsigned int *)(v385 - 4);
                  if ((_DWORD)v386)
                  {
                    v387 = *(WTF ***)(v384 + 8);
                    do
                    {
                      v388 = *v387;
                      if (*v387 != (WTF *)-1)
                      {
                        *v387 = 0;
                        if (v388)
                        {
                          if (*(_DWORD *)v388 == 1)
                            WTF::fastFree(v388, v313);
                          else
                            --*(_DWORD *)v388;
                        }
                      }
                      ++v387;
                      --v386;
                    }
                    while (v386);
                  }
                  WTF::fastFree((WTF *)(v385 - 16), v313);
                }
              }
            }
          }
          WTF::fastFree((WTF *)(v315 - 16), v313);
        }
        WebCore::Layout::InlineFormattingContext::createDisplayContentForInlineContent(a1, (WebCore::Layout::LineBox *)&v469, (WebCore::Layout::LineLayoutResult *)&v489, (uint64_t)a6, a8);
        if (v488)
          WTF::fastFree((WTF *)(v488 - 16), v316);
        if (v487)
        {
          v343 = v485;
          v344 = 104 * v487;
          do
          {
            v345 = *(_QWORD *)v343;
            *(_QWORD *)v343 = 0;
            if (v345)
            {
              v346 = *(_DWORD *)(v345 + 8);
              if (!v346)
              {
                __break(0xC471u);
                JUMPOUT(0x194288B6CLL);
              }
              *(_DWORD *)(v345 + 8) = v346 - 1;
            }
            v343 = (WTF *)((char *)v343 + 104);
            v344 -= 104;
          }
          while (v344);
        }
        v317 = v485;
        if (v485)
        {
          v485 = 0;
          v486 = 0;
          WTF::fastFree(v317, v316);
        }
        v318 = v475;
        v475 = 0;
        if (v318)
        {
          v319 = *(_DWORD *)(v318 + 8);
          if (!v319)
          {
            __break(0xC471u);
            JUMPOUT(0x194288968);
          }
          *(_DWORD *)(v318 + 8) = v319 - 1;
        }
        WebCore::Layout::LineLayoutResult::~LineLayoutResult((WebCore::Layout::LineLayoutResult *)&v489, v316);
        return;
      }
    }
    v17 = *(unsigned int *)(a8 + 28);
    v18 = *(uint64_t **)(a8 + 16);
    if ((_DWORD)v17)
    {
      v19 = 80 * v17;
      v8 = &WebCore::GlyphDisplayListCache::singleton(void)::cache;
      do
      {
        if ((*((_WORD *)v18 + 25) & 0x100) != 0)
        {
          {
            WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
            qword_1EE2F92D8 = 0;
            qword_1EE2F92E0 = 0;
          }
          *(_QWORD *)&v489 = v18;
          WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v489);
        }
        v20 = *(WTF::StringImpl **)((char *)v18 + 60);
        *(uint64_t *)((char *)v18 + 60) = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v20 -= 2;
        }
        v21 = *(WTF::StringImpl **)((char *)v18 + 52);
        *(uint64_t *)((char *)v18 + 52) = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = *v18;
        *v18 = 0;
        if (v22)
        {
          v23 = *(_DWORD *)(v22 + 8);
          if (!v23)
          {
            __break(0xC471u);
            JUMPOUT(0x19428863CLL);
          }
          *(_DWORD *)(v22 + 8) = v23 - 1;
        }
        v18 += 10;
        v19 -= 80;
      }
      while (v19);
      v18 = *(uint64_t **)(a8 + 16);
    }
    if (v18)
    {
      *(_QWORD *)(a8 + 16) = 0;
      *(_DWORD *)(a8 + 24) = 0;
      WTF::fastFree((WTF *)v18, (void *)a2);
    }
    v24 = *(WTF **)a8;
    if (*(_QWORD *)a8)
    {
      *(_QWORD *)a8 = 0;
      *(_DWORD *)(a8 + 8) = 0;
      WTF::fastFree(v24, (void *)a2);
    }
    v428 = 0;
  }
  *(_OWORD *)(a8 + 16) = 0u;
  v429 = (unsigned int *)(a8 + 16);
  *(_BYTE *)(a8 + 32) = 0;
  *(_OWORD *)a8 = 0u;
  v25 = a4;
  v26 = *a4;
  v420 = a7;
  if (!*a4)
  {
    if (a4[1] || (v27 = a3[3], !(_DWORD)v27))
    {
      v26 = 0;
      v25 = a4;
    }
    else
    {
      if (v27 >= 0x3333334)
      {
        __break(0xC471u);
        JUMPOUT(0x194288E2CLL);
      }
      v28 = 80 * v27;
      v29 = WTF::fastMalloc((WTF *)(80 * v27));
      *(_DWORD *)(a8 + 24) = (v28 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)(a8 + 16) = v29;
      v25 = a4;
      v26 = *a4;
    }
  }
  v30 = 0;
  v434 = 0;
  v440 = 0;
  v448 = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(v448 + 8);
  v449 = *(_OWORD *)(a1 + 24);
  v430 = (WebCore::Layout::Box ***)(a1 + 40);
  v435 = (float)a6[3] * 0.015625;
  v31 = v25[1];
  while (2)
  {
    v432 = v8;
    v436 = v30;
    v33 = a6[1];
    v32 = a6[2];
    v34 = 0.0;
    if (*((_BYTE *)*v430 + 161))
    {
      v35 = **v430;
      if (!*(_BYTE *)(a5 + 40))
      {
        if ((*((_WORD *)v35 + 6) & 0x200) != 0 && *(_QWORD *)(WebCore::Layout::Box::rareData(**v430) + 24))
          v36 = *(WebCore::RenderStyle **)(WebCore::Layout::Box::rareData(v35) + 24);
        else
          v36 = (WebCore::Layout::Box *)((char *)v35 + 16);
        v37 = *((_QWORD *)v36 + 4);
        v38 = (WebCore::Length *)(v37 + 12);
        v39 = *(unsigned __int8 *)(v37 + 16);
        if (v39 == 11 || v39 == 13)
          goto LABEL_46;
        if (*(_BYTE *)(v37 + 18))
        {
          if (*(float *)v38 >= 0.0)
          {
LABEL_46:
            if ((v39 & 0xFFFFFFF7) != 3)
            {
              if (!*(_BYTE *)(v37 + 18))
              {
LABEL_48:
                v34 = (float)*(int *)v38;
                goto LABEL_60;
              }
              goto LABEL_57;
            }
            v214 = *(float *)(v37 + 204) * 64.0;
            v215 = v214 >= 2147483650.0 || v214 <= -2147483650.0;
            if (!v215)
              goto LABEL_304;
            if (v214 >= 2147483650.0)
            {
              v216 = 33554000.0;
              goto LABEL_305;
            }
            if (v214 <= -2147483650.0)
              v216 = -33554000.0;
            else
LABEL_304:
              v216 = (float)(int)v214 * 0.015625;
LABEL_305:
            switch(v39)
            {
              case 4:
                v217 = *(float *)(v37 + 12);
                if (!*(_BYTE *)(v37 + 18))
                  v217 = (float)SLODWORD(v217);
                goto LABEL_308;
              case 3:
                v273 = *(float *)(v37 + 12);
                if (!*(_BYTE *)(v37 + 18))
                  v273 = (float)SLODWORD(v273);
                v217 = (float)(v216 * v273) / 100.0;
LABEL_308:
                v218 = v217 * 64.0;
                if (v218 < 2147483650.0 && v218 > -2147483650.0)
                {
LABEL_312:
                  v220 = (int)v218;
LABEL_313:
                  v34 = (float)v220 * 0.015625;
                  goto LABEL_60;
                }
                if (v218 < 2147483650.0)
                {
LABEL_707:
                  if (v218 <= -2147483650.0)
                  {
                    v220 = 0x80000000;
                    goto LABEL_313;
                  }
                  goto LABEL_312;
                }
LABEL_713:
                v220 = 0x7FFFFFFF;
                goto LABEL_313;
              case 11:
                WebCore::Length::nonNanCalculatedValue(v38, v216);
                goto LABEL_308;
            }
LABEL_499:
            v220 = 0;
            goto LABEL_313;
          }
        }
        else if ((*(_DWORD *)v38 & 0x80000000) == 0)
        {
          goto LABEL_46;
        }
        v44 = v36;
LABEL_59:
        v34 = *((float *)WebCore::RenderStyle::metricsOfPrimaryFont(v44, (void *)a2) + 6);
        goto LABEL_60;
      }
      v41 = *((_QWORD *)v35 + 6);
      v38 = (WebCore::Length *)(v41 + 12);
      v42 = *(unsigned __int8 *)(v41 + 16);
      if (v42 != 11 && v42 != 13)
      {
        if (*(_BYTE *)(v41 + 18))
        {
          if (*(float *)v38 >= 0.0)
            goto LABEL_55;
LABEL_387:
          v44 = (WebCore::Layout::Box *)((char *)v35 + 16);
          goto LABEL_59;
        }
        if ((*(_DWORD *)v38 & 0x80000000) != 0)
          goto LABEL_387;
      }
LABEL_55:
      if ((v42 & 0xFFFFFFF7) != 3)
      {
        if (!*(_BYTE *)(v41 + 18))
          goto LABEL_48;
LABEL_57:
        v34 = *(float *)v38;
        goto LABEL_60;
      }
      v268 = *(float *)(v41 + 204) * 64.0;
      if (v268 < 2147483650.0 && v268 > -2147483650.0)
        goto LABEL_392;
      if (v268 >= 2147483650.0)
      {
        v270 = 33554000.0;
      }
      else
      {
        if (v268 > -2147483650.0)
        {
LABEL_392:
          v270 = (float)(int)v268 * 0.015625;
          goto LABEL_393;
        }
        v270 = -33554000.0;
      }
LABEL_393:
      switch(v42)
      {
        case 4:
          v271 = *(float *)(v41 + 12);
          if (!*(_BYTE *)(v41 + 18))
            v271 = (float)SLODWORD(v271);
          break;
        case 3:
          v298 = *(float *)(v41 + 12);
          if (!*(_BYTE *)(v41 + 18))
            v298 = (float)SLODWORD(v298);
          v271 = (float)(v270 * v298) / 100.0;
          break;
        case 11:
          WebCore::Length::nonNanCalculatedValue(v38, v270);
          break;
        default:
          goto LABEL_499;
      }
      v218 = v271 * 64.0;
      if (v218 < 2147483650.0 && v218 > -2147483650.0)
        goto LABEL_312;
      if (v218 < 2147483650.0)
        goto LABEL_707;
      goto LABEL_713;
    }
LABEL_60:
    v441 = v26;
    v442 = v31;
    v443 = *((_OWORD *)a4 + 1);
    v444 = (float)v33 * 0.015625;
    v445 = v435;
    v446 = (float)v32 * 0.015625;
    v447 = v34;
    if (*(_BYTE *)(a5 + 40))
      v45 = (WTF::StringImpl *)(*(_QWORD *)a5 + 1);
    else
      v45 = 0;
    (**v431)(&v489, v431, &v441, a5);
    *(_QWORD *)&v459 = a1;
    *((_QWORD *)&v459 + 1) = &v489;
    LOWORD(v460) = 0;
    v461 = 0uLL;
    *((_QWORD *)&v460 + 1) = 0;
    v433 = v45;
    WebCore::Layout::LineBoxBuilder::build((uint64_t **)&v459, v45, (uint64_t)&v469);
    v47 = (WTF *)v461;
    if ((_QWORD)v461)
    {
      *(_QWORD *)&v461 = 0;
      DWORD2(v461) = 0;
      WTF::fastFree(v47, v46);
    }
    v48 = *((_QWORD *)&v460 + 1);
    if (*((_QWORD *)&v460 + 1))
    {
      v291 = *(unsigned int *)(*((_QWORD *)&v460 + 1) - 4);
      if ((_DWORD)v291)
      {
        for (j = 0; j != v291; ++j)
        {
          if (*(_QWORD *)(v48 + 24 * j) != -1)
          {
            v293 = v48 + 24 * j;
            v294 = *(_QWORD *)(v293 + 8);
            if (v294)
            {
              v295 = *(unsigned int *)(v294 - 4);
              if ((_DWORD)v295)
              {
                v296 = *(WTF ***)(v293 + 8);
                do
                {
                  v297 = *v296;
                  if (*v296 != (WTF *)-1)
                  {
                    *v296 = 0;
                    if (v297)
                    {
                      if (*(_DWORD *)v297 == 1)
                        WTF::fastFree(v297, v46);
                      else
                        --*(_DWORD *)v297;
                    }
                  }
                  ++v296;
                  --v295;
                }
                while (v295);
              }
              WTF::fastFree((WTF *)(v294 - 16), v46);
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v48 - 16), v46);
    }
    v49 = *(_QWORD *)(a1 + 64);
    v50 = *(unsigned __int8 *)(v49 + 24);
    if (*(_BYTE *)(v49 + 24))
    {
      v51 = *(_QWORD *)(v49 + 8) - *(_QWORD *)(v49 + 16);
      v53 = v440;
      if (HIDWORD(v492))
        v53 = v440 + 1;
      v52 = v53 > v51;
    }
    else
    {
      v51 = 0;
      v52 = 0;
      v53 = v440;
      if (HIDWORD(v492))
        v53 = v440 + 1;
    }
    v54 = v508;
    v55 = HIDWORD(v470);
    v56 = v471;
    v57 = v472;
    LODWORD(v58) = v473;
    v437 = v53;
    if (v508)
    {
      v405 = a6[4];
      v406 = *(_QWORD *)(a6 + 1);
      v233 = __OFADD__(v405, HIDWORD(v406));
      v407 = v405 + HIDWORD(v406);
      v408 = (v405 >> 31) + 0x7FFFFFFF;
      if (!v233)
        v408 = v407;
      v233 = __OFADD__(v408, (_DWORD)v406);
      v409 = v408 + v406;
      v410 = (v408 >> 31) + 0x7FFFFFFF;
      if (!v233)
        v410 = v409;
      v60 = (float)((float)v410 * 0.015625) - (float)(*((float *)&v470 + 1) + v472);
      v59 = v476;
      v61 = v472 - *((float *)&v497 + 2);
    }
    else
    {
      v59 = v476;
      v60 = *((float *)&v470 + 1);
      v61 = v476;
    }
    v62 = 0;
    v63 = v477;
    v64 = v478;
    v65 = 0.0;
    if (!(_BYTE)v470)
    {
      v66 = 0.0;
      v68 = *(_QWORD *)a1;
      v69 = *(_DWORD *)(*(_QWORD *)a1 + 56);
      if (v504)
        goto LABEL_76;
LABEL_83:
      if ((v69 & 0x4000000) != 0)
      {
        v72 = (float)(v478 - *(float *)&v505) - v472;
        v70 = v472;
        v71 = *(float *)&v473;
        v73 = v60;
        v74 = v471;
        if (v72 > 0.0)
          goto LABEL_87;
      }
      else
      {
        v72 = v478 - v472;
        v70 = v472;
        v71 = *(float *)&v473;
        v73 = v60;
        v74 = v471;
        if ((float)(v478 - v472) > 0.0)
          goto LABEL_78;
      }
      v75 = v487;
      if (!v487)
        goto LABEL_90;
      goto LABEL_314;
    }
    v66 = 0.0;
    if (v481)
    {
      v66 = v471 + v477;
      v67 = 0.0;
      if (v484)
      {
        v67 = v483;
        v66 = v66 - v482;
      }
      v65 = (float)(v471 + (float)(v477 + v479)) + v67;
      v62 = 1;
    }
    v68 = *(_QWORD *)a1;
    v69 = *(_DWORD *)(*(_QWORD *)a1 + 56);
    if (!v504)
      goto LABEL_83;
LABEL_76:
    v70 = v472 + *(float *)&v505;
    v71 = *(float *)&v473 + 0.0;
    v72 = v478 - (float)(v472 + *(float *)&v505);
    if (v72 <= 0.0)
      goto LABEL_79;
    if ((v69 & 0x4000000) != 0)
    {
LABEL_87:
      v73 = v60 - v72;
      v74 = v471 + 0.0;
      v70 = fmaxf(v70 + v72, 0.0);
      v75 = v487;
      if (!v487)
        goto LABEL_90;
      goto LABEL_314;
    }
LABEL_78:
    v70 = fmaxf(v70 + (float)((float)((float)(v60 + v70) + v72) - (float)(v60 + v70)), 0.0);
LABEL_79:
    v73 = v60;
    v74 = v471;
    v75 = v487;
    if (!v487)
      goto LABEL_90;
LABEL_314:
    v221 = v485;
    v425 = (WTF *)((char *)v485 + 104 * v75);
    v423 = v59;
    v424 = HIDWORD(v470);
    v422 = v61;
    do
    {
      v222 = *((unsigned __int8 *)v221 + 47);
      v426 = v65;
      v427 = v66;
      if (v222 > 7)
      {
        if (v222 == 8)
        {
          v252 = *(const WebCore::Layout::Box **)v221;
          v253 = *(_QWORD *)(a1 + 8);
          if (!*(_DWORD *)(v253 + 8))
          {
            v254 = v51;
            v255 = (uint64_t *)((char *)v252 + 104);
LABEL_369:
            v256 = *v255;
LABEL_370:
            WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)&v469, v252);
            v259 = *(_DWORD *)(v256 + 24);
            v260 = *(_DWORD *)(v256 + 28);
            v233 = __OFADD__(v259, v260);
            v261 = v259 + v260;
            if (v233)
              v261 = (v259 >> 31) + 0x7FFFFFFF;
            v262 = v257 + (float)((float)v259 * 0.015625);
            if (v261 == 0x80000000)
              v263 = 0x7FFFFFFF;
            else
              v263 = -v261;
            v242 = v258 + (float)((float)v263 * 0.015625);
LABEL_377:
            v244 = v56 + v262;
            v51 = v254;
LABEL_346:
            v59 = v423;
            v55 = v424;
            v61 = v422;
            v65 = v426;
            v66 = v427;
            goto LABEL_347;
          }
          v389 = *(_QWORD *)(v253 + 40);
          if (v389)
          {
            v390 = *(_DWORD *)(v389 - 8);
            v391 = ((unint64_t)v252 + ~((_QWORD)v252 << 32)) ^ (((unint64_t)v252 + ~((_QWORD)v252 << 32)) >> 22);
            v392 = 9 * ((v391 + ~(v391 << 13)) ^ ((v391 + ~(v391 << 13)) >> 8));
            v393 = (v392 ^ (v392 >> 15)) + ~((v392 ^ (v392 >> 15)) << 27);
            v394 = v390 & ((v393 >> 31) ^ v393);
            v395 = *(const WebCore::Layout::Box **)(v389 + 16 * v394);
            if (v395 == v252)
            {
LABEL_610:
              v254 = v51;
              v255 = (uint64_t *)(v389 + 16 * v394 + 8);
              goto LABEL_369;
            }
            v396 = 1;
            while (v395)
            {
              v394 = ((_DWORD)v394 + v396) & v390;
              v395 = *(const WebCore::Layout::Box **)(v389 + 16 * v394);
              ++v396;
              if (v395 == v252)
                goto LABEL_610;
            }
          }
          v254 = v51;
          v256 = 0;
          goto LABEL_370;
        }
        if (v222 != 16)
          goto LABEL_364;
        v274 = *(const WebCore::Layout::Box **)v221;
        v275 = *(_QWORD *)(a1 + 8);
        if (!*(_DWORD *)(v275 + 8))
        {
          v254 = v51;
          v276 = (_QWORD *)((char *)v274 + 104);
LABEL_422:
          v277 = (_DWORD *)*v276;
LABEL_423:
          WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)&v469, v274);
          v280 = v277[10];
          v281 = v277[11];
          v233 = __OFADD__(v280, v281);
          v282 = v280 + v281;
          v283 = (v280 >> 31) + 0x7FFFFFFF;
          if (v233)
            v282 = (v280 >> 31) + 0x7FFFFFFF;
          v284 = v277[14];
          v285 = v277[15];
          v233 = __OFADD__(v284, v285);
          v286 = v284 + v285;
          if (v233)
            v286 = (v284 >> 31) + 0x7FFFFFFF;
          v233 = __OFADD__(v282, v286);
          v287 = v282 + v286;
          v288 = (v282 >> 31) + 0x7FFFFFFF;
          if (!v233)
            v288 = v287;
          v233 = __OFADD__(v280, v284);
          v289 = v280 + v284;
          if (v233)
            v289 = v283;
          v242 = v279 + (float)((float)v288 * 0.015625);
          if (v289 == 0x80000000)
            v290 = 0x7FFFFFFF;
          else
            v290 = -v289;
          v262 = v278 + (float)((float)v290 * 0.015625);
          goto LABEL_377;
        }
        v254 = v51;
        v397 = *(_QWORD *)(v275 + 40);
        if (v397)
        {
          v398 = *(_DWORD *)(v397 - 8);
          v399 = ((unint64_t)v274 + ~((_QWORD)v274 << 32)) ^ (((unint64_t)v274 + ~((_QWORD)v274 << 32)) >> 22);
          v400 = 9 * ((v399 + ~(v399 << 13)) ^ ((v399 + ~(v399 << 13)) >> 8));
          v401 = (v400 ^ (v400 >> 15)) + ~((v400 ^ (v400 >> 15)) << 27);
          v402 = v398 & ((v401 >> 31) ^ v401);
          v403 = *(const WebCore::Layout::Box **)(v397 + 16 * v402);
          if (v403 == v274)
          {
LABEL_617:
            v276 = (_QWORD *)(v397 + 16 * v402 + 8);
            goto LABEL_422;
          }
          v404 = 1;
          while (v403)
          {
            v402 = ((_DWORD)v402 + v404) & v398;
            v403 = *(const WebCore::Layout::Box **)(v397 + 16 * v402);
            ++v404;
            if (v403 == v274)
              goto LABEL_617;
          }
        }
        v277 = 0;
        goto LABEL_423;
      }
      if (v222 != 4 && v222 - 1 >= 2)
        goto LABEL_364;
      v215 = v222 > 4;
      v223 = (1 << v222) & 0x16;
      if (!v215 && v223 != 0)
      {
        v421 = v51;
        v225 = *(const WebCore::Layout::Box **)v221;
        v226 = *(_QWORD *)(a1 + 8);
        if (!*(_DWORD *)(v226 + 8))
        {
          v227 = (WebCore::Layout::BoxGeometry **)((char *)v225 + 104);
LABEL_323:
          v228 = *v227;
          goto LABEL_324;
        }
        v374 = *(_QWORD *)(v226 + 40);
        if (v374)
        {
          v375 = *(_DWORD *)(v374 - 8);
          v376 = ((unint64_t)v225 + ~((_QWORD)v225 << 32)) ^ (((unint64_t)v225 + ~((_QWORD)v225 << 32)) >> 22);
          v377 = 9 * ((v376 + ~(v376 << 13)) ^ ((v376 + ~(v376 << 13)) >> 8));
          v378 = (v377 ^ (v377 >> 15)) + ~((v377 ^ (v377 >> 15)) << 27);
          v379 = v375 & ((v378 >> 31) ^ v378);
          v380 = *(const WebCore::Layout::Box **)(v374 + 16 * v379);
          if (v380 == v225)
          {
LABEL_581:
            v227 = (WebCore::Layout::BoxGeometry **)(v374 + 16 * v379 + 8);
            goto LABEL_323;
          }
          v381 = 1;
          while (v380)
          {
            v379 = ((_DWORD)v379 + v381) & v375;
            v380 = *(const WebCore::Layout::Box **)(v374 + 16 * v379);
            ++v381;
            if (v380 == v225)
              goto LABEL_581;
          }
        }
        v228 = 0;
LABEL_324:
        if (!*(_BYTE *)(a1 + 161)
          && !*((_BYTE *)v221 + 44)
          && !WebCore::Layout::BoxGeometry::horizontalBorderAndPadding(v228))
        {
          v51 = v421;
          v59 = v423;
          v55 = v424;
          v61 = v422;
          v65 = v426;
          v66 = v427;
          goto LABEL_364;
        }
        WebCore::Layout::LineBox::logicalRectForInlineLevelBox((uint64_t)&v469, v225);
        v231 = *((_DWORD *)v228 + 10);
        v232 = *((_DWORD *)v228 + 11);
        v233 = __OFADD__(v231, v232);
        v234 = v231 + v232;
        v235 = (v231 >> 31) + 0x7FFFFFFF;
        if (v233)
          v234 = (v231 >> 31) + 0x7FFFFFFF;
        v236 = *((_DWORD *)v228 + 14);
        v237 = *((_DWORD *)v228 + 15);
        v233 = __OFADD__(v236, v237);
        v238 = v236 + v237;
        if (v233)
          v238 = (v236 >> 31) + 0x7FFFFFFF;
        v233 = __OFADD__(v234, v238);
        v239 = v234 + v238;
        v240 = (v234 >> 31) + 0x7FFFFFFF;
        if (!v233)
          v240 = v239;
        v233 = __OFADD__(v231, v236);
        v241 = v231 + v236;
        if (v233)
          v241 = v235;
        v242 = v230 + (float)((float)v240 * 0.015625);
        if (v241 == 0x80000000)
          v243 = 0x7FFFFFFF;
        else
          v243 = -v241;
        v244 = v56 + (float)(v229 + (float)((float)v243 * 0.015625));
        if ((_BYTE)v470)
        {
          v245 = v71 + v74;
          if (v244 < v74)
            v74 = v244;
          if (v245 < (float)(v242 + v244))
            v245 = v242 + v244;
          v71 = fmaxf(v71 + (float)(v245 - (float)(v71 + v74)), 0.0);
        }
        v51 = v421;
        goto LABEL_346;
      }
      v242 = 0.0;
      v244 = 0.0;
LABEL_347:
      if (*((_BYTE *)v221 + 44))
      {
        v246 = *((unsigned __int8 *)v221 + 96);
        v247 = 0.0;
        goto LABEL_349;
      }
      v247 = 0.0;
      if (*((_BYTE *)v221 + 47) == 8)
      {
        v246 = *((unsigned __int8 *)v221 + 96);
LABEL_349:
        v248 = v244;
        if (v246)
        {
          v247 = *((float *)v221 + 23);
          v248 = v244 - *((float *)v221 + 22);
        }
        goto LABEL_351;
      }
      v248 = v244;
LABEL_351:
      v249 = (float)(v242 + v244) + v247;
      if (v62)
        v250 = v66;
      else
        v250 = v248;
      if (v248 >= v250)
        v66 = v250;
      else
        v66 = v248;
      if (v62)
        v251 = v65;
      else
        v251 = v249;
      if (v251 >= v249)
        v65 = v251;
      else
        v65 = v249;
      v62 = 1;
LABEL_364:
      v221 = (WTF *)((char *)v221 + 104);
    }
    while (v221 != v425);
    v68 = *(_QWORD *)a1;
    v63 = v477;
    v64 = v478;
LABEL_90:
    v76 = (unsigned __int16)*(_DWORD *)(v475 + 60) >> 13;
    v419 = 2;
    switch((unsigned __int16)*(_DWORD *)(v475 + 60) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_92;
      case 3:
      case 5:
        LOBYTE(v76) = 3;
        goto LABEL_92;
      case 4:
        goto LABEL_93;
      default:
        LOBYTE(v76) = 0;
LABEL_92:
        v419 = v76;
LABEL_93:
        v77 = ((*(_DWORD *)(v68 + 60) >> 13) & 6) - 2;
        v459 = 0uLL;
        if (v77 >= 4)
          v78 = v73;
        else
          v78 = v74;
        if (v77 >= 4)
          v79 = v60;
        else
          v79 = v56;
        if (v77 >= 4)
          v80 = v56;
        else
          v80 = v60;
        *(_QWORD *)&v460 = __PAIR64__(LODWORD(v80), LODWORD(v79));
        if (v77 >= 4)
          v81 = v74;
        else
          v81 = v73;
        if (v77 >= 4)
          v82 = v70;
        else
          v82 = v71;
        if (v77 >= 4)
          v83 = v57;
        else
          v83 = v58;
        if (v77 >= 4)
          v84 = v58;
        else
          v84 = v57;
        *((_QWORD *)&v460 + 1) = __PAIR64__(LODWORD(v84), LODWORD(v83));
        if (v77 >= 4)
          v85 = v71;
        else
          v85 = v70;
        v86 = v63 + v480;
        if (v62)
          v87 = v65;
        else
          v87 = v56;
        *(_QWORD *)&v461 = __PAIR64__(LODWORD(v56), v55);
        if (v62)
          v88 = v66;
        else
          v88 = v56;
        v89 = (v419 & 6) != 2;
        *((_QWORD *)&v461 + 1) = __PAIR64__(LODWORD(v58), LODWORD(v57));
        v462 = 0uLL;
        *(_QWORD *)&v463 = __PAIR64__(LODWORD(v81), LODWORD(v78));
        *((_QWORD *)&v463 + 1) = __PAIR64__(LODWORD(v85), LODWORD(v82));
        v464 = 0uLL;
        *(_QWORD *)&v465 = __PAIR64__(LODWORD(v87), LODWORD(v88));
        *((_QWORD *)&v465 + 1) = __PAIR64__(LODWORD(v59), LODWORD(v86));
        *(_QWORD *)&v466 = __PAIR64__(LODWORD(v64), LODWORD(v61));
        DWORD2(v466) = v474;
        if (v52)
          v90 = 8;
        else
          v90 = 0;
        BYTE12(v466) = (v90 | (2 * v89) | BYTE12(v466) & 0xE0 | v54) ^ 1;
        LOBYTE(v467) = 0;
        LOBYTE(v468) = 0;
        v450 = a1;
        v451 = (WTF::StringImpl *)a6;
        v452 = &v469;
        v453 = (uint64_t)&v459;
        v454 = 0;
        v455 = 0;
        if ((*(_BYTE *)(v68 + 12) & 0x80) != 0)
        {
          v91 = (WTF **)(a8 + 16);
        }
        else
        {
          v91 = (WTF **)(a8 + 16);
          do
            v68 = *(_QWORD *)(v68 + 80);
          while ((*(_WORD *)(v68 + 12) & 0x80) == 0);
        }
        v92 = *(_QWORD *)(a1 + 8);
        v93 = *(_DWORD *)(v92 + 8);
        v95 = (void **)(v68 + 104);
        v94 = *(_QWORD *)(v68 + 104);
        if (v93)
          v96 = 1;
        else
          v96 = v94 == 0;
        if (!v96)
          goto LABEL_138;
        if (v93)
        {
          v354 = *(_QWORD *)(v92 + 40);
          v353 = (uint64_t *)(v92 + 40);
          v352 = v354;
          if (v354
            || (WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v353, 8u, 0), (v352 = *v353) != 0))
          {
            v355 = v51;
            v356 = *(_DWORD *)(v352 - 8);
          }
          else
          {
            v355 = v51;
            v356 = 0;
          }
          v357 = (~(v68 << 32) + v68) ^ ((unint64_t)(~(v68 << 32) + v68) >> 22);
          v358 = 9 * ((v357 + ~(v357 << 13)) ^ ((v357 + ~(v357 << 13)) >> 8));
          v359 = (v358 ^ (v358 >> 15)) + ~((v358 ^ (v358 >> 15)) << 27);
          v360 = v356 & ((v359 >> 31) ^ v359);
          v361 = (uint64_t *)(v352 + 16 * v360);
          v362 = *v361;
          if (*v361)
          {
            v363 = 0;
            v364 = 1;
            do
            {
              if (v362 == v68)
                goto LABEL_566;
              if (v362 == -1)
                v363 = v361;
              v360 = (v360 + v364) & v356;
              v361 = (uint64_t *)(v352 + 16 * v360);
              v362 = *v361;
              ++v364;
            }
            while (*v361);
            if (v363)
            {
              *v363 = 0;
              v363[1] = 0;
              --*(_DWORD *)(*v353 - 16);
              v361 = v363;
            }
          }
          *v361 = v68;
          v365 = WebCore::Layout::BoxGeometry::operator new(72);
          *(_OWORD *)v365 = 0u;
          *(_OWORD *)(v365 + 16) = 0u;
          *(_OWORD *)(v365 + 32) = 0u;
          *(_OWORD *)(v365 + 48) = 0u;
          *(_QWORD *)(v365 + 64) = 0;
          v366 = (void *)v361[1];
          v361[1] = v365;
          if (v366)
            WebCore::MediaQueryList::operator delete(v366);
          v367 = *v353;
          if (*v353)
            v368 = *(_DWORD *)(v367 - 12) + 1;
          else
            v368 = 1;
          *(_DWORD *)(v367 - 12) = v368;
          v369 = *v353;
          if (*v353)
            v370 = *(_DWORD *)(v369 - 12);
          else
            v370 = 0;
          v371 = (*(_DWORD *)(v369 - 16) + v370);
          v372 = *(unsigned int *)(v369 - 4);
          if (v372 > 0x400)
          {
            if (v372 <= 2 * v371)
            {
LABEL_564:
              v373 = (_DWORD)v372 << (6 * *(_DWORD *)(v369 - 12) >= (2 * v372));
              goto LABEL_565;
            }
          }
          else if (3 * v372 <= 4 * v371)
          {
            if ((_DWORD)v372)
              goto LABEL_564;
            v373 = 8;
LABEL_565:
            v361 = WTF::HashTable<WebCore::Layout::Box const*,WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>>>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashMap<WebCore::Layout::Box const*,std::unique_ptr<WebCore::Layout::BoxGeometry>,WTF::DefaultHash<WebCore::Layout::Box const*>,WTF::HashTraits<WebCore::Layout::Box const*>,WTF::HashTraits<std::unique_ptr<WebCore::Layout::BoxGeometry>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Layout::Box const*>>::rehash(v353, v373, v361);
          }
LABEL_566:
          v95 = (void **)(v361 + 1);
          v51 = v355;
          goto LABEL_137;
        }
        v97 = WebCore::Layout::BoxGeometry::operator new(72);
        *(_OWORD *)v97 = 0u;
        *(_OWORD *)(v97 + 16) = 0u;
        *(_OWORD *)(v97 + 32) = 0u;
        *(_OWORD *)(v97 + 48) = 0u;
        *(_QWORD *)(v97 + 64) = 0;
        v98 = *v95;
        *v95 = (void *)v97;
        if (v98)
          WebCore::MediaQueryList::operator delete(v98);
LABEL_137:
        v94 = (uint64_t)*v95;
LABEL_138:
        v100 = *(_DWORD *)(v94 + 8);
        v99 = *(_DWORD *)(v94 + 12);
        LODWORD(v94) = -(-v100 >> 6);
        if (v100 >= 0)
          LODWORD(v94) = (v100 + 63) >> 6;
        if (v100 <= 2147483583)
          v94 = v94;
        else
          v94 = 0x1FFFFFFLL;
        if (v99 > 2147483583)
        {
          v101 = 0x1FFFFFFLL;
        }
        else if (v99 < 0)
        {
          v101 = -(-v99 >> 6);
        }
        else
        {
          v101 = (v99 + 63) >> 6;
        }
        v454 = v94 | (v101 << 32);
        WebCore::Layout::InlineDisplayContentBuilder::build((WebCore::Layout::InlineDisplayContentBuilder *)&v450, (const WebCore::Layout::LineLayoutResult *)&v489, (unint64_t)&v456);
        if (v50)
          v102 = v51 == v437;
        else
          v102 = 0;
        v103 = v102;
        if (v102)
          v104 = 2;
        else
          v104 = (*(_BYTE *)(*(_QWORD *)a1 + 33) & 0x1C) != 0
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 32) + 150) & 0x20) != 0;
        if (!v458)
          goto LABEL_160;
        if (v104 == 2)
        {
          if (HIBYTE(v509))
            goto LABEL_160;
        }
        else if (v104 != 1 || *((float *)&v466 + 1) == 0.0 || *((float *)&v466 + 1) <= *((float *)&v461 + 2))
        {
          goto LABEL_160;
        }
        v191 = v456;
        v192 = *(WebCore::Layout::Box **)v456;
        if (*((_DWORD *)v456 + 10))
          LineStyle = (uint64_t)v192 + 16;
        else
          LineStyle = WebCore::Layout::Box::firstLineStyle(v192);
        v194 = *(_QWORD *)(LineStyle + 32);
        {
          v195 = (WTF::StringImpl *)WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr;
        }
        else
        {
          WTF::AtomStringImpl::add();
          v195 = (WTF::StringImpl *)v450;
          WebCore::Layout::TextUtil::ellipsisTextRun(BOOL)::horizontalEllipsisStr = v450;
          v91 = (WTF **)(a8 + 16);
        }
        LODWORD(v450) = 0;
        if (v195)
          *(_DWORD *)v195 += 2;
        v451 = v195;
        LODWORD(v452) = 0;
        BYTE4(v452) = 1;
        v453 = 0x3F80000000000000;
        LODWORD(v454) = 0;
        WORD2(v454) = 2052;
        v196 = WebCore::FontCascade::width(v194 + 32, (uint64_t)&v450);
        v197 = v451;
        v451 = 0;
        if (v197)
        {
          if (*(_DWORD *)v197 == 2)
            WTF::StringImpl::destroy(v197, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v197 -= 2;
        }
        v198 = fmaxf(v196, 0.0);
        if (v104 == 1
          || (float)(v198 + (float)(*((float *)&v465 + 3) + *((float *)&v466 + 1))) > (float)(*(float *)&v461
                                                                                            + *((float *)&v461 + 2)))
        {
          v199 = (const WebCore::FontCascade *)*(unsigned int *)(LineStyle + 44);
          if (((v199 >> 13) & 6) - 2 < 4)
          {
            v200 = *((float *)&v460 + 1);
            v201 = *((float *)&v460 + 3);
          }
          else
          {
            v200 = *(float *)&v460;
            v201 = *((float *)&v460 + 2);
          }
          v202 = v200 + v201;
          if (v202 < v200)
            v202 = v200;
          WebCore::Layout::truncateOverflowingDisplayBoxes((uint64_t *)&v456, 0, v458 - 1, *(unsigned int *)(LineStyle + 40), v199, v200, v202, v198);
        }
        else if (v458 < 2)
        {
          if (!v458)
          {
            __break(0xC471u);
            JUMPOUT(0x194288E24);
          }
          v203 = *((float *)v456 + 2);
        }
        else if ((*(_BYTE *)(LineStyle + 43) & 4) != 0)
        {
          v203 = *((float *)v456 + 22) - v198;
        }
        else
        {
          v203 = *((float *)v456 + 20 * v458 - 18) + *((float *)v456 + 20 * v458 - 16);
        }
        if (((*(_DWORD *)(LineStyle + 44) >> 13) & 6u) - 2 < 4)
        {
          v204 = *((float *)v191 + 2);
          v205 = v198;
          v198 = *((float *)v191 + 4);
        }
        else
        {
          v204 = v203;
          v203 = *((float *)v191 + 3);
          v205 = *((float *)v191 + 5);
        }
        *(_QWORD *)&v467 = __PAIR64__(LODWORD(v203), LODWORD(v204));
        *((_QWORD *)&v467 + 1) = __PAIR64__(LODWORD(v205), LODWORD(v198));
        if ((_BYTE)v468)
        {
          if (!v103)
            goto LABEL_160;
LABEL_295:
          *(_QWORD *)(a1 + 80) = v469;
          *(_BYTE *)(a1 + 88) = 1;
          goto LABEL_160;
        }
        LOBYTE(v468) = 1;
        if (v103)
          goto LABEL_295;
LABEL_160:
        v105 = *(unsigned int *)(a8 + 24);
        v106 = *(unsigned int *)(a8 + 28);
        v107 = v458 + v106;
        if (v107 <= v105)
          goto LABEL_161;
        v173 = v105 + (v105 >> 2);
        if (v173 >= 0x10)
          v174 = v173 + 1;
        else
          v174 = 16;
        if (v174 > v107)
          v107 = v174;
        if (v107 >= 0x3333334)
        {
          __break(0xC471u);
          JUMPOUT(0x194288DACLL);
        }
        v175 = *v91;
        v176 = 80 * v107;
        v177 = WTF::fastMalloc((WTF *)(80 * v107));
        *(_DWORD *)(a8 + 24) = (v176 & 0xFFFFFFF0) / 0x50;
        *(_QWORD *)(a8 + 16) = v177;
        if ((_DWORD)v106)
        {
          v178 = v177;
          v179 = 80 * v106;
          v180 = v175;
          do
          {
            v181 = *(_QWORD *)v180;
            *(_QWORD *)v178 = *(_QWORD *)v180;
            ++*(_DWORD *)(v181 + 8);
            v182 = *(_OWORD *)((char *)v180 + 8);
            v183 = *(_OWORD *)((char *)v180 + 24);
            *(_OWORD *)(v178 + 36) = *(_OWORD *)((char *)v180 + 36);
            *(_OWORD *)(v178 + 24) = v183;
            *(_OWORD *)(v178 + 8) = v182;
            v184 = *(_DWORD **)((char *)v180 + 52);
            if (v184)
              *v184 += 2;
            *(_QWORD *)(v178 + 52) = v184;
            v185 = *(_DWORD **)((char *)v180 + 60);
            if (v185)
              *v185 += 2;
            *(_QWORD *)(v178 + 60) = v185;
            v186 = *(_QWORD *)((char *)v180 + 68);
            *(_DWORD *)(v178 + 76) = *((_DWORD *)v180 + 19);
            *(_QWORD *)(v178 + 68) = v186;
            if ((*((_BYTE *)v180 + 51) & 1) != 0)
            {
              {
                WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
                qword_1EE2F92D8 = 0;
                qword_1EE2F92E0 = 0;
              }
              v450 = (unint64_t)v180;
              WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v450);
            }
            v187 = *(WTF::StringImpl **)((char *)v180 + 60);
            *(_QWORD *)((char *)v180 + 60) = 0;
            if (v187)
            {
              if (*(_DWORD *)v187 == 2)
                WTF::StringImpl::destroy(v187, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v187 -= 2;
            }
            v188 = *(WTF::StringImpl **)((char *)v180 + 52);
            *(_QWORD *)((char *)v180 + 52) = 0;
            if (v188)
            {
              if (*(_DWORD *)v188 == 2)
                WTF::StringImpl::destroy(v188, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v188 -= 2;
            }
            v189 = *(_QWORD *)v180;
            *(_QWORD *)v180 = 0;
            if (v189)
            {
              v190 = *(_DWORD *)(v189 + 8);
              if (!v190)
              {
                __break(0xC471u);
                JUMPOUT(0x194288314);
              }
              *(_DWORD *)(v189 + 8) = v190 - 1;
            }
            v180 = (WTF *)((char *)v180 + 80);
            v178 += 80;
            v179 -= 80;
          }
          while (v179);
        }
        if (!v175)
        {
LABEL_161:
          v108 = v458;
          if (!v458)
            goto LABEL_168;
LABEL_162:
          v109 = v456;
          v110 = (WTF *)((char *)v456 + 80 * v108);
          v111 = *(_DWORD *)(a8 + 28);
          do
          {
            v112 = *v91;
            v113 = (uint64_t)*v91 + 80 * v111;
            v114 = *(_QWORD *)v109;
            *(_QWORD *)v113 = *(_QWORD *)v109;
            ++*(_DWORD *)(v114 + 8);
            v115 = *(_OWORD *)((char *)v109 + 8);
            v116 = *(_OWORD *)((char *)v109 + 24);
            *(_OWORD *)(v113 + 36) = *(_OWORD *)((char *)v109 + 36);
            *(_OWORD *)(v113 + 24) = v116;
            *(_OWORD *)(v113 + 8) = v115;
            v117 = *(_DWORD **)((char *)v109 + 52);
            if (v117)
              *v117 += 2;
            *(_QWORD *)(v113 + 52) = v117;
            v118 = *(_DWORD **)((char *)v109 + 60);
            if (v118)
              *v118 += 2;
            v119 = (char *)v112 + 80 * v111;
            *(_QWORD *)(v119 + 60) = v118;
            v120 = *(_QWORD *)((char *)v109 + 68);
            *((_DWORD *)v119 + 19) = *((_DWORD *)v109 + 19);
            *(_QWORD *)(v119 + 68) = v120;
            v111 = *(_DWORD *)(a8 + 28) + 1;
            *(_DWORD *)(a8 + 28) = v111;
            v109 = (WTF *)((char *)v109 + 80);
          }
          while (v109 != v110);
          goto LABEL_168;
        }
        if (*v91 == v175)
        {
          *(_QWORD *)(a8 + 16) = 0;
          *(_DWORD *)(a8 + 24) = 0;
        }
        WTF::fastFree(v175, (void *)a2);
        v108 = v458;
        if (v458)
          goto LABEL_162;
LABEL_168:
        v121 = *(unsigned int *)(a8 + 12);
        if ((_DWORD)v121 == *(_DWORD *)(a8 + 8))
        {
          v122 = WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, v121 + 1, (unint64_t)&v459);
          LODWORD(v121) = *(_DWORD *)(a8 + 12);
          v123 = *(WTF **)a8;
          v124 = *(_QWORD *)a8 + 152 * v121;
          v125 = *(_OWORD *)(v122 + 16);
          *(_OWORD *)v124 = *(_OWORD *)v122;
          *(_OWORD *)(v124 + 16) = v125;
          v126 = *(_OWORD *)(v122 + 80);
          v128 = *(_OWORD *)(v122 + 32);
          v127 = *(_OWORD *)(v122 + 48);
          *(_OWORD *)(v124 + 64) = *(_OWORD *)(v122 + 64);
          *(_OWORD *)(v124 + 80) = v126;
          *(_OWORD *)(v124 + 32) = v128;
          *(_OWORD *)(v124 + 48) = v127;
          v130 = *(_OWORD *)(v122 + 112);
          v129 = *(_OWORD *)(v122 + 128);
          v131 = *(_OWORD *)(v122 + 96);
          *(_QWORD *)(v124 + 144) = *(_QWORD *)(v122 + 144);
          *(_OWORD *)(v124 + 112) = v130;
          *(_OWORD *)(v124 + 128) = v129;
          *(_OWORD *)(v124 + 96) = v131;
        }
        else
        {
          v123 = *(WTF **)a8;
          v206 = *(_QWORD *)a8 + 152 * v121;
          v207 = v464;
          v209 = v461;
          v208 = v462;
          *(_OWORD *)(v206 + 64) = v463;
          *(_OWORD *)(v206 + 80) = v207;
          *(_OWORD *)(v206 + 32) = v209;
          *(_OWORD *)(v206 + 48) = v208;
          v211 = v466;
          v210 = v467;
          v212 = v465;
          *(_QWORD *)(v206 + 144) = v468;
          *(_OWORD *)(v206 + 112) = v211;
          *(_OWORD *)(v206 + 128) = v210;
          *(_OWORD *)(v206 + 96) = v212;
          v213 = v460;
          *(_OWORD *)v206 = v459;
          *(_OWORD *)(v206 + 16) = v213;
        }
        v418 = __CFADD__((_DWORD)v121, 1);
        v132 = v121 + 1;
        *(_DWORD *)(a8 + 12) = v132;
        if (v418)
        {
          __break(0xC471u);
          JUMPOUT(0x194288D90);
        }
        v133 = (char *)v123 + 152 * v132;
        v134 = *((_DWORD *)v133 - 33);
        v135 = *((_DWORD *)v133 - 31);
        if (((*(_DWORD *)(*(_QWORD *)a1 + 60) >> 13) & 6u) - 2 <= 3)
        {
          v136 = *((_DWORD *)v133 - 32);
          v137 = *((_DWORD *)v133 - 34);
        }
        else
        {
          v136 = *((_DWORD *)v133 - 31);
          v135 = *((_DWORD *)v133 - 32);
          v137 = *((_DWORD *)v133 - 33);
          v134 = *((_DWORD *)v133 - 34);
        }
        v138 = v456;
        if (v458)
        {
          v139 = 80 * v458;
          while (1)
          {
            if ((*((_WORD *)v138 + 25) & 0x100) != 0)
            {
              {
                WebCore::GlyphDisplayListCache::singleton(void)::cache = 0;
                qword_1EE2F92D8 = 0;
                qword_1EE2F92E0 = 0;
              }
              v450 = (unint64_t)v138;
              WTF::HashMap<void const*,WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<WTF::Ref<WebCore::GlyphDisplayListCacheEntry,WTF::RawPtrTraits<WebCore::GlyphDisplayListCacheEntry>,WTF::DefaultRefDerefTraits<WebCore::GlyphDisplayListCacheEntry>>>,WTF::HashTableTraits>::remove(&WebCore::GlyphDisplayListCache::singleton(void)::cache, &v450);
            }
            v140 = *(WTF::StringImpl **)((char *)v138 + 60);
            *(_QWORD *)((char *)v138 + 60) = 0;
            if (v140)
            {
              if (*(_DWORD *)v140 == 2)
                WTF::StringImpl::destroy(v140, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v140 -= 2;
            }
            v141 = *(WTF::StringImpl **)((char *)v138 + 52);
            *(_QWORD *)((char *)v138 + 52) = 0;
            if (v141)
            {
              if (*(_DWORD *)v141 == 2)
                WTF::StringImpl::destroy(v141, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v141 -= 2;
            }
            v142 = *(_QWORD *)v138;
            *(_QWORD *)v138 = 0;
            if (v142)
            {
              v143 = *(_DWORD *)(v142 + 8);
              if (!v143)
              {
                __break(0xC471u);
                goto LABEL_724;
              }
              *(_DWORD *)(v142 + 8) = v143 - 1;
            }
            v138 = (WTF *)((char *)v138 + 80);
            v139 -= 80;
            if (!v139)
            {
              v138 = v456;
              break;
            }
          }
        }
        if (v138)
        {
          v456 = 0;
          v457 = 0;
          WTF::fastFree(v138, (void *)a2);
        }
        v450 = __PAIR64__(v137, v134);
        v451 = (WTF::StringImpl *)__PAIR64__(v136, v135);
        if (HIDWORD(v494))
        {
          v320 = (uint64_t *)v494;
          v321 = 120 * HIDWORD(v494);
          do
          {
            a2 = *v320;
            if (*v320)
            {
              v322 = *(_QWORD **)(a2 + 104);
              if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
                v323 = 1;
              else
                v323 = v322 == 0;
              if (v323)
                v322 = (_QWORD *)WebCore::Layout::LayoutState::ensureGeometryForBoxSlow(*(WebCore::Layout::LayoutState **)(a1 + 8), a2);
              v324 = *(uint64_t *)((char *)v320 + 28);
              *v322 = *(uint64_t *)((char *)v320 + 84);
              v322[2] = v324;
            }
            v320 += 15;
            v321 -= 120;
          }
          while (v321);
        }
        if (v503)
          *(_DWORD *)(a1 + 72) = v502;
        if (!HIBYTE(v509))
          goto LABEL_200;
        if (v489 == v490)
        {
          *(_QWORD *)&v459 = &v489;
          *((_QWORD *)&v459 + 1) = &v450;
          *(_QWORD *)&v460 = a1 + 40;
          *((_QWORD *)&v460 + 1) = &v448;
          v414 = WebCore::Layout::InlineFormattingUtils::logicalTopForNextLine(WebCore::Layout::LineLayoutResult const&,WebCore::Layout::InlineRect const&,WebCore::Layout::FloatingContext const&)const::$_0::operator()((uint64_t *)&v459, (void *)a2);
          v146 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
          if (HIDWORD(v414))
            v147 = *(float *)&v414;
          else
            v147 = ceilf(nextafterf(*((float *)&v450 + 1) + *((float *)&v451 + 1), 3.4028e38));
        }
        else
        {
          if (!HIDWORD(v492))
            goto LABEL_198;
          v144 = *((_QWORD *)v491 + 15 * HIDWORD(v492) - 14);
          v145 = *(_QWORD *)(v144 + 32);
          if ((v145 & 0x70000) == 0)
            goto LABEL_198;
          if ((v145 & 0x1Fu) > 0x15 || ((1 << (v145 & 0x1F)) & 0x290016) == 0)
          {
            v418 = (v145 & 0x180000) != 0x100000 && (*(_BYTE *)(v144 + 12) & 0xFu) - 11 >= 0xFFFFFFFE;
            if (!v418)
            {
LABEL_198:
              v146 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
              v147 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
              goto LABEL_199;
            }
          }
          else if ((v145 & 0x180000) == 0x100000)
          {
            goto LABEL_198;
          }
          v416 = WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*v430, v144);
          v417 = WebCore::Layout::FloatingContext::verticalPositionWithClearance((WebCore::Layout::FloatingContext *)&v448, (const WebCore::Layout::Box *)v144, v416);
          if ((a2 & 0xFF00000000) == 0)
            goto LABEL_198;
          v146 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
          v147 = (float)v417 * 0.015625;
          if ((float)(*((float *)&v450 + 1) + *((float *)&v451 + 1)) >= v147)
            v147 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
        }
LABEL_199:
        *(float *)(a1 + 76) = v147 - v146;
LABEL_200:
        if (v512)
          v148 = *(_QWORD *)(a1 + 112) + 1;
        else
          v148 = 0;
        *(_QWORD *)(a1 + 112) = v148;
        v8 = (uint64_t *)*((_QWORD *)&v490 + 1);
        v30 = v490;
        v149 = (v496 | HIDWORD(v494)) != 0;
        v151 = a4[2];
        v150 = a4[3];
        v31 = *((_QWORD *)&v490 + 1);
        v26 = v490;
        if (v434)
        {
          v31 = *((_QWORD *)&v490 + 1);
          v26 = v490;
          if (v436 >= (unint64_t)v490)
          {
            if (v436 != (_QWORD)v490)
              goto LABEL_740;
            if (*((uint64_t **)&v490 + 1) != v432)
              v149 = 0;
            v26 = v436;
            v31 = *((_QWORD *)&v490 + 1);
            if ((unint64_t)v432 >= *((_QWORD *)&v490 + 1))
            {
              v26 = v436;
              v31 = *((_QWORD *)&v490 + 1);
              if (!v149)
              {
LABEL_740:
                if ((_QWORD)v490 != v151 || (v31 = *((_QWORD *)&v490 + 1), v26 = v490, *((_QWORD *)&v490 + 1) != v150))
                {
                  v31 = 0;
                  if (v151 >= (uint64_t)v490 + 1)
                    v26 = v490 + 1;
                  else
                    v26 = a4[2];
                }
              }
            }
          }
        }
        if (v26 == v151 && v31 == v150 && !HIDWORD(v495))
        {
          v152 = 0;
          v153 = v428;
LABEL_208:
          *(_BYTE *)(a8 + 32) = v153;
          v30 = v436;
          v8 = v432;
          goto LABEL_223;
        }
        if (v428
          && WebCore::Layout::mayExitFromPartialLayout(v420, v433, *(const WTF::StringImpl **)(a8 + 16), *(_DWORD *)(a8 + 28)))
        {
          v152 = 0;
          v153 = 2;
          goto LABEL_208;
        }
        v154 = v440;
        if (HIDWORD(v492))
          v154 = v440 + 1;
        v440 = v154;
        if (HIDWORD(v492))
        {
          LODWORD(v459) = HIDWORD(v497);
          BYTE4(v459) = v498;
          v155 = *((unsigned __int8 *)v491 + 120 * HIDWORD(v492) - 120) - 3 < 2;
          v156 = *(unsigned __int8 *)(a5 + 40);
          v157 = 1;
        }
        else
        {
          v156 = *(unsigned __int8 *)(a5 + 40);
          if (*(_BYTE *)(a5 + 40))
            v157 = *(_BYTE *)(a5 + 17) != 0;
          else
            v157 = 0;
          v155 = 0;
          LODWORD(v459) = HIDWORD(v497);
          BYTE4(v459) = v498;
        }
        v158 = v508;
        v159 = v495;
        v160 = DWORD2(v495);
        v161 = HIDWORD(v495);
        v495 = 0uLL;
        *(_QWORD *)a5 = v433;
        *(_DWORD *)(a5 + 8) = v459;
        *(_BYTE *)(a5 + 12) = BYTE4(v459);
        *(_WORD *)(a5 + 13) = (_WORD)v456;
        *(_BYTE *)(a5 + 15) = BYTE2(v456);
        *(_BYTE *)(a5 + 16) = v155;
        *(_BYTE *)(a5 + 17) = v157;
        *(_BYTE *)(a5 + 18) = v158;
        if (v156)
        {
          v162 = *(WTF **)(a5 + 24);
          if (v162)
          {
            *(_QWORD *)(a5 + 24) = 0;
            *(_DWORD *)(a5 + 32) = 0;
            WTF::fastFree(v162, (void *)a2);
          }
          *(_QWORD *)(a5 + 24) = v159;
          *(_DWORD *)(a5 + 32) = v160;
          *(_DWORD *)(a5 + 36) = v161;
        }
        else
        {
          *(_QWORD *)(a5 + 24) = v159;
          *(_DWORD *)(a5 + 32) = v160;
          *(_DWORD *)(a5 + 36) = v161;
          *(_BYTE *)(a5 + 40) = 1;
        }
        if (v489 == v490)
        {
          *(_QWORD *)&v459 = &v489;
          *((_QWORD *)&v459 + 1) = &v450;
          *(_QWORD *)&v460 = a1 + 40;
          *((_QWORD *)&v460 + 1) = &v448;
          v411 = WebCore::Layout::InlineFormattingUtils::logicalTopForNextLine(WebCore::Layout::LineLayoutResult const&,WebCore::Layout::InlineRect const&,WebCore::Layout::FloatingContext const&)const::$_0::operator()((uint64_t *)&v459, (void *)a2);
          if (HIDWORD(v411))
            v165 = *(float *)&v411;
          else
            v165 = ceilf(nextafterf(*((float *)&v450 + 1) + *((float *)&v451 + 1), 3.4028e38));
        }
        else
        {
          if (!HIDWORD(v492)
            || (v163 = *((_QWORD *)v491 + 15 * HIDWORD(v492) - 14), v164 = *(_QWORD *)(v163 + 32), (v164 & 0x70000) == 0))
          {
LABEL_221:
            v165 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
            goto LABEL_222;
          }
          if ((v164 & 0x1Fu) <= 0x15 && ((1 << (v164 & 0x1F)) & 0x290016) != 0)
          {
            if ((v164 & 0x180000) == 0x100000)
              goto LABEL_221;
          }
          else if ((v164 & 0x180000) == 0x100000 || (*(_BYTE *)(v163 + 12) & 0xFu) - 11 < 0xFFFFFFFE)
          {
            goto LABEL_221;
          }
          v412 = WebCore::Layout::InlineFormattingContext::geometryForBox((uint64_t)*v430, v163);
          v413 = WebCore::Layout::FloatingContext::verticalPositionWithClearance((WebCore::Layout::FloatingContext *)&v448, (const WebCore::Layout::Box *)v163, v412);
          if ((a2 & 0xFF00000000) == 0)
            goto LABEL_221;
          v165 = *((float *)&v450 + 1) + *((float *)&v451 + 1);
          if ((float)(*((float *)&v450 + 1) + *((float *)&v451 + 1)) < (float)((float)v413 * 0.015625))
            v165 = (float)v413 * 0.015625;
        }
LABEL_222:
        v435 = v165;
        v434 = 1;
        v152 = 1;
LABEL_223:
        if (v488)
          WTF::fastFree((WTF *)(v488 - 16), (void *)a2);
        if (v487)
        {
          v264 = v485;
          v265 = 104 * v487;
          do
          {
            v266 = *(_QWORD *)v264;
            *(_QWORD *)v264 = 0;
            if (v266)
            {
              v267 = *(_DWORD *)(v266 + 8);
              if (!v267)
              {
                __break(0xC471u);
                JUMPOUT(0x19428854CLL);
              }
              *(_DWORD *)(v266 + 8) = v267 - 1;
            }
            v264 = (WTF *)((char *)v264 + 104);
            v265 -= 104;
          }
          while (v265);
        }
        v166 = v485;
        if (v485)
        {
          v485 = 0;
          v486 = 0;
          WTF::fastFree(v166, (void *)a2);
        }
        v167 = v475;
        v475 = 0;
        if (v167)
        {
          v168 = *(_DWORD *)(v167 + 8);
          if (!v168)
          {
            __break(0xC471u);
            JUMPOUT(0x1942882E4);
          }
          *(_DWORD *)(v167 + 8) = v168 - 1;
        }
        if (v510)
          WTF::fastFree((WTF *)(v510 - 16), (void *)a2);
        v169 = v506;
        if (v506)
        {
          v506 = 0;
          LODWORD(v507) = 0;
          WTF::fastFree(v169, (void *)a2);
        }
        v170 = (WTF *)v495;
        if ((_QWORD)v495)
        {
          *(_QWORD *)&v495 = 0;
          DWORD2(v495) = 0;
          WTF::fastFree(v170, (void *)a2);
        }
        v171 = (WTF *)v494;
        if (HIDWORD(v494))
        {
          v347 = (_DWORD **)(v494 + 96);
          v348 = 120 * HIDWORD(v494);
          do
          {
            v349 = *v347;
            *v347 = 0;
            if (v349)
            {
              if (v349[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v349 + 8))(v349);
              else
                --v349[2];
            }
            v350 = (uint64_t)*(v347 - 12);
            if (v350)
            {
              v351 = *(_DWORD *)(v350 + 8);
              if (!v351)
              {
                __break(0xC471u);
                JUMPOUT(0x194288B8CLL);
              }
              *(_DWORD *)(v350 + 8) = v351 - 1;
            }
            v347 += 15;
            v348 -= 120;
          }
          while (v348);
          v171 = (WTF *)v494;
        }
        if (v171)
        {
          *(_QWORD *)&v494 = 0;
          DWORD2(v494) = 0;
          WTF::fastFree(v171, (void *)a2);
        }
        v172 = v491;
        if (v493 != (_BYTE *)v491 && v491)
        {
          v491 = 0;
          LODWORD(v492) = 0;
          WTF::fastFree(v172, (void *)a2);
        }
        if ((v152 & 1) != 0)
          continue;
        v300 = *(_QWORD *)(a1 + 80);
        v299 = *(WTF::StringImpl **)(a1 + 88);
        v450 = v300;
        v451 = v299;
        if (!(_BYTE)v299)
          goto LABEL_464;
        if (v300 >= *(unsigned int *)(a8 + 12))
          goto LABEL_464;
        if (!*(_BYTE *)(*(_QWORD *)a8 + 152 * v300 + 144))
          goto LABEL_464;
        v325 = *(_DWORD *)(a8 + 28);
        if (v325 < 3)
          goto LABEL_464;
        v326 = *(_QWORD *)(a8 + 16);
        if ((*(_BYTE *)(*(_QWORD *)v326 + 59) & 4) != 0)
          goto LABEL_464;
        if (((*(_DWORD *)(*(_QWORD *)v326 + 60) >> 13) & 6u) - 2 < 4)
          goto LABEL_464;
        v327 = v326 + 80 * v325;
        v328 = *(_WORD *)(v327 - 110);
        if ((v328 & 0xF) != 6)
          goto LABEL_464;
        if ((v328 & 0x20) == 0)
          goto LABEL_464;
        if ((*(_BYTE *)(*(_QWORD *)(v327 - 160) + 37) & 4) == 0)
          goto LABEL_464;
        v329 = WebCore::Layout::InlineDisplayLineBuilder::addLineClampTrailingLinkBoxIfApplicable(WebCore::Layout::InlineFormattingContext const&,WebCore::Layout::InlineLayoutState const&,WebCore::InlineDisplay::Content &)::$_0::operator()((uint64_t)v429, (uint64_t)&v450);
        v441 = v329;
        v442 = v330;
        if (!(_BYTE)v330 || !v329)
          goto LABEL_464;
        if (v300 >= *(unsigned int *)(a8 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x194288E7CLL);
        }
        v331 = *(_DWORD *)(a8 + 28);
        if (v331 <= 1)
        {
          __break(0xC471u);
          goto LABEL_723;
        }
        v332 = *(WTF **)a8;
        LODWORD(v456) = *(_DWORD *)(*(_QWORD *)v429 + 80 * v331 - 144);
        if (*(float *)&v456 < *((float *)v332 + 38 * v300 + 6))
        {
          WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v429, (uint64_t)&v489);
          WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::takeLast((uint64_t)v429, (uint64_t)&v469);
          *(_QWORD *)&v459 = a8 + 16;
          *((_QWORD *)&v459 + 1) = &v441;
          *(_QWORD *)&v460 = &v456;
          WebCore::Layout::InlineDisplayLineBuilder::addLineClampTrailingLinkBoxIfApplicable(WebCore::Layout::InlineFormattingContext const&,WebCore::Layout::InlineLayoutState const&,WebCore::InlineDisplay::Content &)::$_1::operator()((uint64_t **)&v459, v333, v334);
          if ((_BYTE)v442)
          {
            WebCore::Layout::makeRoomForLinkBoxOnClampedLineIfNeeded<WebCore::InlineDisplay::Line,WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long,float>((uint64_t)v332 + 152 * v300, (uint64_t)v429, v441, *(float *)&v456);
            v335 = (_DWORD *)WebCore::Layout::InlineFormattingContext::geometryForBox(a1, (uint64_t)v469);
            v336 = v335[4];
            v337 = v335[8];
            v338 = v335[12];
            v233 = __OFADD__(v337, v338);
            v339 = v337 + v338;
            if (v233)
              v339 = (v337 >> 31) + 0x7FFFFFFF;
            v233 = __OFADD__(v336, v339);
            v340 = v336 + v339;
            if (v233)
              v340 = (v336 >> 31) + 0x7FFFFFFF;
            WebCore::Layout::moveDisplayBoxToClampedLine<WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long,WebCore::InlineDisplay::Box,WebCore::LayoutUnit>(*(_QWORD *)a8, *(_DWORD *)(a8 + 12), v300, (uint64_t)&v489, v340);
            if ((_BYTE)v442)
            {
              WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::InlineDisplay::Box&>(v429, v441, (unint64_t)&v489);
              WebCore::Layout::moveDisplayBoxToClampedLine<WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned long,WebCore::InlineDisplay::Box,WebCore::LayoutUnit>(*(_QWORD *)a8, *(_DWORD *)(a8 + 12), v300, (uint64_t)&v469, 0);
              if ((_BYTE)v442)
              {
                WTF::Vector<WebCore::InlineDisplay::Box,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::InlineDisplay::Box&>(v429, v441, (unint64_t)&v469);
                *((_BYTE *)v332 + 152 * v300 + 124) |= 0x10u;
                WebCore::InlineDisplay::Box::~Box((WebCore::InlineDisplay::Box *)&v469, v341);
                WebCore::InlineDisplay::Box::~Box((WebCore::InlineDisplay::Box *)&v489, v342);
                goto LABEL_464;
              }
            }
          }
LABEL_723:
          __break(1u);
LABEL_724:
          JUMPOUT(0x1942880B0);
        }
LABEL_464:
        v301 = v448;
        v448 = 0;
        if (v301)
        {
          v302 = *(_DWORD *)(v301 + 8);
          if (!v302)
          {
            __break(0xC471u);
            JUMPOUT(0x194288718);
          }
          *(_DWORD *)(v301 + 8) = v302 - 1;
        }
        return;
    }
  }
}

uint64_t WebCore::Layout::LineBox::logicalRectForInlineLevelBox(uint64_t this, const WebCore::Layout::Box *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const WebCore::Layout::Box *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;

  v2 = this + 40;
  if (*(const WebCore::Layout::Box **)(this + 40) == a2)
    return WebCore::Layout::LineBox::inlineLevelBoxAbsoluteTop(this, v2);
  v3 = *(_QWORD *)(this + 160);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(const WebCore::Layout::Box **)(v3 + 16 * v8);
    if (v9 != a2)
    {
      v12 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v12) & v4;
        v9 = *(const WebCore::Layout::Box **)(v3 + 16 * v8);
        ++v12;
        if (v9 == a2)
          goto LABEL_6;
      }
      v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_6:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      v10 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v10 >= *(unsigned int *)(this + 156))
      {
        __break(0xC471u);
        return this;
      }
      v11 = *(_QWORD *)(this + 144);
      if (v11)
      {
        v2 = v11 + 104 * v10;
        return WebCore::Layout::LineBox::inlineLevelBoxAbsoluteTop(this, v2);
      }
    }
  }
  return this;
}

uint64_t WebCore::Layout::LineBox::inlineLevelBoxAbsoluteTop(uint64_t result, uint64_t a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;

  v2 = *(float *)(a2 + 12);
  if (*(_BYTE *)(a2 + 47) != 4 && (*(_QWORD *)(a2 + 72) & 0xFELL) != 6)
  {
    v3 = result + 40;
    v4 = *(_QWORD *)(result + 40);
    if (*(_QWORD *)(*(_QWORD *)a2 + 80) != v4 && v3 != a2)
    {
      do
      {
        if ((*(_QWORD *)(a2 + 72) & 0xFELL) == 6)
          break;
        v5 = *(_QWORD *)(*(_QWORD *)a2 + 80);
        if (v4 == v5)
          break;
        v6 = *(_QWORD *)(result + 160);
        v7 = *(_DWORD *)(v6 - 8);
        v8 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
        v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
        v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
        v11 = v7 & ((v10 >> 31) ^ v10);
        v12 = *(_QWORD *)(v6 + 16 * v11);
        if (v12 != v5)
        {
          v14 = 1;
          while (v12)
          {
            v11 = ((_DWORD)v11 + v14) & v7;
            v12 = *(_QWORD *)(v6 + 16 * v11);
            ++v14;
            if (v12 == v5)
              goto LABEL_9;
          }
          v11 = *(unsigned int *)(v6 - 4);
        }
LABEL_9:
        v13 = *(_QWORD *)(v6 + 16 * v11 + 8);
        if (v13 >= *(unsigned int *)(result + 156))
        {
          __break(0xC471u);
          return result;
        }
        a2 = *(_QWORD *)(result + 144) + 104 * v13;
        v2 = v2 + *(float *)(a2 + 12);
      }
      while (a2 != v3);
    }
  }
  return result;
}

WTF *WebCore::Layout::InlineLevelBox::InlineLevelBox(WebCore::Layout::InlineLevelBox *this, WebCore::Layout::Box *a2, _QWORD *a3, char a4, char a5, float a6, float a7, float a8)
{
  BOOL v12;
  WTF **v13;
  WebCore::FontCascadeFonts *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF *result;
  WTF *v21;
  void *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  int v39;
  WebCore *v40;
  const WebCore::Length *v41;
  float v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;

  v12 = 0;
  *(_QWORD *)this = a2;
  ++*((_DWORD *)a2 + 2);
  *((float *)this + 2) = a6;
  *((_DWORD *)this + 3) = 0;
  *((float *)this + 4) = a7;
  *((float *)this + 5) = a8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  if ((*((_QWORD *)a2 + 4) & 0x1FLL) == 0x18)
    v12 = WebCore::Layout::Box::associatedRubyAnnotationBox(a2) != 0;
  *((_BYTE *)this + 44) = v12;
  *((_BYTE *)this + 45) = a5 & 1;
  *((_BYTE *)this + 46) = (a5 & 2) != 0;
  *((_BYTE *)this + 47) = a4;
  v13 = (WTF **)a3[4];
  v14 = v13[31];
  if (v14)
    ++*(_DWORD *)v14;
  v15 = *((_QWORD *)v14 + 13);
  if (v15 && *(_QWORD *)(v15 + 8))
    goto LABEL_7;
  v23 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v14, (const WebCore::FontCascadeDescription *)(v13 + 6), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v23, 1, (uint64_t)&v45);
  if (!v46 || (v24 = *((_QWORD *)v46 + 1)) == 0)
  {
    v25 = 0;
    goto LABEL_18;
  }
  v25 = *(_QWORD *)(v24 + 8);
  if (v25)
    goto LABEL_62;
  v25 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v25 = 1;
  *(_QWORD *)(v25 + 8) = v24;
  v43 = *(WTF **)(v24 + 8);
  *(_QWORD *)(v24 + 8) = v25;
  if (!v43)
    goto LABEL_62;
  if (*(_DWORD *)v43 != 1)
  {
    --*(_DWORD *)v43;
LABEL_62:
    ++*(_DWORD *)v25;
    goto LABEL_18;
  }
  WTF::fastFree(v43, a2);
  v25 = *(_QWORD *)(v24 + 8);
  if (v25)
    goto LABEL_62;
LABEL_18:
  v26 = (WTF *)*((_QWORD *)v14 + 13);
  *((_QWORD *)v14 + 13) = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::fastFree(v26, a2);
    else
      --*(_DWORD *)v26;
  }
  result = v46;
  v46 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  v27 = *((_QWORD *)v14 + 13);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      if ((*(_BYTE *)(v28 + 256) & 2) != 0)
      {
        v29 = 1;
        while (1)
        {
          v30 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v14, (const WebCore::FontCascadeDescription *)(v13 + 6), v29);
          if (!*(_DWORD *)(v30 + 12))
            break;
          WebCore::FontRanges::glyphDataForCharacter(0x20u, v30, 0, (uint64_t)&v45);
          if (v46)
            v31 = *((_QWORD *)v46 + 1);
          else
            v31 = 0;
          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v44, v31);
          v32 = v46;
          v46 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
              WTF::fastFree(v32, a2);
            else
              --*(_DWORD *)v32;
          }
          v16 = v44;
          if (v44)
          {
            v33 = *((_QWORD *)v44 + 1);
            if (!v33 || (*(_BYTE *)(v33 + 256) & 2) != 0)
            {
              v35 = 0;
              v44 = 0;
            }
            else
            {
              v44 = 0;
              v34 = (WTF *)*((_QWORD *)v14 + 13);
              *((_QWORD *)v14 + 13) = v16;
              if (!v34)
                goto LABEL_8;
              if (*(_DWORD *)v34 != 1)
              {
                --*(_DWORD *)v34;
                goto LABEL_7;
              }
              WTF::fastFree(v34, a2);
              v16 = v44;
              v44 = 0;
              if (!v16)
                goto LABEL_7;
              v35 = 2;
            }
            if (*(_DWORD *)v16 == 1)
              WTF::fastFree(v16, a2);
            else
              --*(_DWORD *)v16;
          }
          else
          {
            v35 = 0;
          }
          ++v29;
          if (v35)
            goto LABEL_7;
        }
      }
      goto LABEL_7;
    }
  }
  if (!v23[3])
  {
    __break(0xC471u);
    return result;
  }
  v36 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v23 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v23 + 8), 1);
  WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v45, v36);
  v37 = v45;
  v45 = 0;
  v38 = (WTF *)*((_QWORD *)v14 + 13);
  *((_QWORD *)v14 + 13) = v37;
  if (v38)
  {
    v39 = *(_DWORD *)v38 - 1;
    if (*(_DWORD *)v38 == 1)
    {
      WTF::fastFree(v38, a2);
      v38 = v45;
      v45 = 0;
      if (!v38)
        goto LABEL_7;
      v39 = *(_DWORD *)v38 - 1;
      if (*(_DWORD *)v38 == 1)
      {
        WTF::fastFree(v38, a2);
        goto LABEL_7;
      }
    }
    *(_DWORD *)v38 = v39;
  }
LABEL_7:
  v16 = (WTF *)*((_QWORD *)v14 + 13);
  if (v16)
LABEL_8:
    v17 = *((_QWORD *)v16 + 1);
  else
    v17 = 0;
  if (*(_DWORD *)v14 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v14, a2);
    WTF::fastFree(v21, v22);
  }
  else
  {
    --*(_DWORD *)v14;
  }
  v45 = v13[21];
  *((_QWORD *)this + 6) = v17 + 16;
  *((_QWORD *)this + 7) = a3[4] + 12;
  *((_WORD *)this + 32) = *(_WORD *)(a3[3] + 196);
  *((_BYTE *)this + 66) = (*(_BYTE *)(*(_QWORD *)(a3[1] + 40) + 642) >> 2) & 3;
  *((_BYTE *)this + 67) = *(_BYTE *)(a3[3] + 233) & 0x7F;
  *((_DWORD *)this + 17) = *(_DWORD *)(a3[4] + 204);
  *((_BYTE *)this + 72) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  v18 = *(_QWORD *)(a3[1] + 8);
  v19 = *(unsigned __int8 *)(v18 + 68) >> 4;
  *((_BYTE *)this + 72) = *(_BYTE *)(v18 + 68) >> 4;
  if (v19 == 9)
  {
    v40 = (WebCore *)(v18 + 52);
    WebCore::Layout::InlineLevelBox::preferredLineHeight(this);
    *((float *)this + 19) = WebCore::floatValueForLength(v40, v41, v42);
    *((_BYTE *)this + 80) = 1;
  }
  return this;
}

uint64_t WebCore::FontCascade::metricsOfPrimaryFont(WebCore::FontCascade *this, void *a2)
{
  WebCore::FontCascadeFonts *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WTF *v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  int v24;
  WTF *v25;
  WTF *v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;

  v3 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 27);
  if (v3)
    ++*(_DWORD *)v3;
  v4 = *((_QWORD *)v3 + 13);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
LABEL_5:
    v5 = (WTF *)*((_QWORD *)v3 + 13);
    goto LABEL_6;
  }
  v10 = (_DWORD *)WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (WebCore::FontCascade *)((char *)this + 16), 0);
  WebCore::FontRanges::glyphDataForCharacter(0x20u, (uint64_t)v10, 1, (uint64_t)&v29);
  if (!v30 || (v11 = *((_QWORD *)v30 + 1)) == 0)
  {
    v12 = 0;
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    goto LABEL_57;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v11;
  v26 = *(WTF **)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v12;
  if (!v26)
    goto LABEL_57;
  if (*(_DWORD *)v26 != 1)
  {
    --*(_DWORD *)v26;
LABEL_57:
    ++*(_DWORD *)v12;
    goto LABEL_15;
  }
  WTF::fastFree(v26, a2);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
    goto LABEL_57;
LABEL_15:
  v13 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, a2);
    else
      --*(_DWORD *)v13;
  }
  v14 = v30;
  v30 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
      WTF::fastFree(v14, a2);
    else
      --*(_DWORD *)v14;
  }
  v15 = *((_QWORD *)v3 + 13);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      if ((*(_BYTE *)(v16 + 256) & 2) != 0)
      {
        v17 = 1;
        while (1)
        {
          v18 = WebCore::FontCascadeFonts::realizeFallbackRangesAt(v3, (WebCore::FontCascade *)((char *)this + 16), v17);
          if (!*(_DWORD *)(v18 + 12))
            break;
          WebCore::FontRanges::glyphDataForCharacter(0x20u, v18, 0, (uint64_t)&v29);
          if (v30)
            v19 = *((_QWORD *)v30 + 1);
          else
            v19 = 0;
          WTF::WeakPtr<WebCore::Font,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v28, v19);
          v20 = v30;
          v30 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 1)
              WTF::fastFree(v20, a2);
            else
              --*(_DWORD *)v20;
          }
          v5 = v28;
          if (v28)
          {
            v21 = *((_QWORD *)v28 + 1);
            if (!v21 || (*(_BYTE *)(v21 + 256) & 2) != 0)
            {
              v24 = 0;
              v28 = 0;
            }
            else
            {
              v28 = 0;
              v22 = (WTF *)*((_QWORD *)v3 + 13);
              *((_QWORD *)v3 + 13) = v5;
              if (!v22)
                goto LABEL_7;
              v23 = *(_DWORD *)v22 - 1;
              if (*(_DWORD *)v22 != 1)
                goto LABEL_51;
              WTF::fastFree(v22, a2);
              v5 = v28;
              v28 = 0;
              if (!v5)
                goto LABEL_5;
              v24 = 2;
            }
            if (*(_DWORD *)v5 == 1)
              WTF::fastFree(v5, a2);
            else
              --*(_DWORD *)v5;
          }
          else
          {
            v24 = 0;
          }
          ++v17;
          if (v24)
            goto LABEL_5;
        }
      }
      goto LABEL_5;
    }
  }
  if (!v10[3])
  {
    __break(0xC471u);
    JUMPOUT(0x1942898A4);
  }
  v5 = (WTF *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8), 1);
  if (v5)
  {
    v25 = v5;
    v5 = (WTF *)*((_QWORD *)v5 + 1);
    if (!v5)
    {
      v5 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v5 = 1;
      *((_QWORD *)v5 + 1) = v25;
      v27 = (WTF *)*((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = v5;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          WTF::fastFree(v27, a2);
          v5 = (WTF *)*((_QWORD *)v25 + 1);
          if (!v5)
            goto LABEL_49;
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
    }
    ++*(_DWORD *)v5;
  }
LABEL_49:
  v22 = (WTF *)*((_QWORD *)v3 + 13);
  *((_QWORD *)v3 + 13) = v5;
  if (v22)
  {
    v23 = *(_DWORD *)v22 - 1;
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, a2);
    else
LABEL_51:
      *(_DWORD *)v22 = v23;
    goto LABEL_5;
  }
LABEL_6:
  if (v5)
LABEL_7:
    v6 = *((_QWORD *)v5 + 1);
  else
    v6 = 0;
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v3, a2);
    WTF::fastFree(v8, v9);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  v29 = *((_QWORD *)this + 17);
  return v6 + 16;
}

void WebCore::Layout::InlineFormattingUtils::textEmphasisForInlineBox(WebCore::Layout::InlineFormattingUtils *this, const WebCore::Layout::Box *a2, const WebCore::Layout::ElementBox *a3)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  WebCore::Layout::InlineFormattingUtils *v7;
  int v8;
  char v9;
  char v10;
  WebCore::FontCascade *v11;
  const WTF::AtomString *v12;

  v3 = *((_QWORD *)this + 5);
  if ((*(_BYTE *)(v3 + 231) & 0x1C) != 0)
  {
    v4 = *(_BYTE *)(v3 + 232);
    if (((*((_DWORD *)this + 15) >> 13) & 6u) - 2 < 4)
    {
      v6 = 0;
      v5 = 1;
      if ((v4 & 8) == 0 && (v4 & 0xF) != 1)
      {
        v5 = 0;
        v6 = 1;
        if ((v4 & 4) == 0 && (v4 & 0xF) != 2)
          return;
      }
    }
    else if ((v4 & 1) != 0)
    {
      v6 = 0;
      v5 = 1;
    }
    else
    {
      if ((v4 & 2) == 0)
        return;
      v5 = 0;
      v6 = 1;
    }
    if (this != a2)
    {
      v7 = this;
      while (1)
      {
        v7 = (WebCore::Layout::InlineFormattingUtils *)*((_QWORD *)v7 + 10);
        if (v7 == a2)
          break;
        if ((*((_QWORD *)v7 + 4) & 0x1FLL) == 0x18)
        {
          if (WebCore::Layout::RubyFormattingContext::hasInterlinearAnnotation((uint64_t)v7))
          {
            v8 = (*(_DWORD *)(*((_QWORD *)v7 + 5) + 236) >> 3) & 3;
            v9 = v8 ? 0 : v5;
            v10 = v8 == 1 ? v6 : 0;
            if ((v9 & 1) != 0 || (v10 & 1) != 0)
              return;
          }
          break;
        }
      }
    }
    v11 = (WebCore::FontCascade *)(*((_QWORD *)this + 6) + 32);
    WebCore::RenderStyle::textEmphasisMarkString((WebCore::Layout::InlineFormattingUtils *)((char *)this + 16));
    WebCore::FontCascade::floatEmphasisMarkHeight(v11, v12);
  }
}

uint64_t WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 152 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::InlineDisplay::Line,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x1AF286C)
  {
    v9 = *(_DWORD *)(result + 12);
    v10 = 152 * v8;
    v11 = WTF::fastMalloc((WTF *)(152 * v8));
    *(_DWORD *)(v4 + 8) = v10 / 0x98;
    *(_QWORD *)v4 = v11;
    if (v9)
    {
      v13 = 152 * v9;
      v14 = v5;
      do
      {
        v15 = *((_OWORD *)v14 + 1);
        *(_OWORD *)v11 = *(_OWORD *)v14;
        *(_OWORD *)(v11 + 16) = v15;
        v16 = *((_OWORD *)v14 + 2);
        v17 = *((_OWORD *)v14 + 3);
        v18 = *((_OWORD *)v14 + 5);
        *(_OWORD *)(v11 + 64) = *((_OWORD *)v14 + 4);
        *(_OWORD *)(v11 + 80) = v18;
        *(_OWORD *)(v11 + 32) = v16;
        *(_OWORD *)(v11 + 48) = v17;
        v19 = *((_OWORD *)v14 + 6);
        v20 = *((_OWORD *)v14 + 7);
        v21 = *((_OWORD *)v14 + 8);
        *(_QWORD *)(v11 + 144) = *((_QWORD *)v14 + 18);
        *(_OWORD *)(v11 + 112) = v20;
        *(_OWORD *)(v11 + 128) = v21;
        *(_OWORD *)(v11 + 96) = v19;
        v11 += 152;
        v14 = (WTF *)((char *)v14 + 152);
        v13 -= 152;
      }
      while (v13);
    }
    if (v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 56 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RenderLayerCompositor::BackingSharingState::Provider,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 56 * a2;
      result = WTF::fastMalloc((WTF *)(56 * a2));
      *(_DWORD *)(v2 + 8) = v5 / 0x38;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t)v3;
        do
        {
          v8 = *(WTF **)result;
          *(_QWORD *)result = 0;
          *(_QWORD *)v7 = v8;
          *(_QWORD *)(v7 + 8) = 0;
          v9 = *(_QWORD *)(result + 8);
          *(_QWORD *)(result + 8) = 0;
          *(_QWORD *)(v7 + 8) = v9;
          v10 = *(_QWORD *)(result + 16);
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          v11 = *(_QWORD *)(result + 24);
          *(_QWORD *)(result + 24) = 0;
          *(_QWORD *)(v7 + 24) = v11;
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(result + 32);
          *(_OWORD *)(v7 + 40) = *(_OWORD *)(result + 40);
          WebCore::RenderLayerCompositor::BackingSharingState::Provider::~Provider((WebCore::RenderLayerCompositor::BackingSharingState::Provider *)result, v6);
          result = v12 + 56;
          v7 += 56;
        }
        while ((WTF *)result != (WTF *)((char *)v3 + 56 * v4));
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_BYTE *WebCore::ScrollView::setDelegatedScrollingMode(_BYTE *result, int a2)
{
  if (result[312] != a2)
  {
    result[312] = a2;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 584))(result);
  }
  return result;
}

uint64_t WebCore::SQLiteStatement::columnBlobAsString@<X0>(sqlite3_stmt **this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _DWORD *v7;

  if (!sqlite3_stmt_busy(this[1]) && (result = (uint64_t)WebCore::SQLiteStatement::step(this), (_DWORD)result != 100)
    || (result = sqlite3_data_count(this[1]), (int)result <= a2))
  {
LABEL_7:
    *a3 = 0;
    return result;
  }
  result = (uint64_t)sqlite3_column_blob(this[1], a2);
  if (result)
  {
    result = sqlite3_column_bytes(this[1], a2);
    if ((result & 0x80000000) == 0)
      return WTF::StringImpl::create8BitIfPossible();
    goto LABEL_7;
  }
  v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v7 += 2;
  *a3 = v7;
  return result;
}

BOOL PAL::canLoad_QuartzCore_CAIOSurfaceCreate(PAL *this)
{
  _BOOL8 result;

    return PAL::canLoad_QuartzCore_CAIOSurfaceCreate(void)::loaded != 0;
  result = PAL::init_QuartzCore_CAIOSurfaceCreate(this);
  PAL::canLoad_QuartzCore_CAIOSurfaceCreate(void)::loaded = result;
  return result;
}

BOOL PAL::init_QuartzCore_CAIOSurfaceCreate(PAL *this)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN3PAL17QuartzCoreLibraryEb_block_invoke;
  block[3] = &__block_descriptor_33_e5_v8__0l;
  v3 = 0;
  if (qword_1ECE7E980 != -1)
    dispatch_once(&qword_1ECE7E980, block);
  PAL::softLinkQuartzCoreCAIOSurfaceCreate = dlsym((void *)_MergedGlobals_71, "CAIOSurfaceCreate");
  return PAL::softLinkQuartzCoreCAIOSurfaceCreate != 0;
}

uint64_t ___ZN3PAL24DataDetectorsCoreLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore", 2);
  qword_1ECE7E278 = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

void WebCore::RenderLayer::rebuildZOrderLists(WebCore::RenderLayer *this, void *a2)
{
  WebCore::RenderLayer *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  char *v13;
  unint64_t v14;
  char *v15;
  const std::nothrow_t *v16;
  unint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WebCore::RenderLayer *v37;
  int v38;
  char *v39;
  unint64_t v40;
  char *v41;
  const std::nothrow_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  int v48;
  unint64_t v49;
  uint64_t *v50;
  int v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  unsigned int v55;

  v2 = this;
  v51 = 0;
  v3 = (uint64_t *)((char *)this + 88);
  v4 = (uint64_t *)((char *)this + 96);
  for (i = *((_QWORD *)this + 8); i; i = *(_QWORD *)(i + 56))
  {
    v6 = *((_QWORD *)v2 + 26);
    if (!v6 || *(_QWORD *)(v6 + 144) != i)
      WebCore::RenderLayer::collectLayers(i, v3, v4, &v51);
  }
  v7 = *v3;
  if (*v3)
  {
    v13 = *(char **)v7;
    v14 = *(unsigned int *)(v7 + 12);
    v15 = (char *)(*(_QWORD *)v7 + 8 * v14);
    if (v14 < 0x81)
    {
LABEL_18:
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v13, v15, v14, 0, 0);
    }
    else
    {
      v16 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v17 = *(unsigned int *)(v7 + 12);
      while (1)
      {
        v18 = (uint64_t *)operator new(8 * v17, v16);
        if (v18)
          break;
        v19 = v17 > 1;
        v17 >>= 1;
        if (!v19)
          goto LABEL_18;
      }
      v23 = v18;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v13, v15, v14, v18, v17);
      operator delete(v23);
    }
    v20 = *v3;
    v21 = *(unsigned int *)(*v3 + 12);
    if (*(_DWORD *)(*v3 + 8) > v21)
    {
      v22 = *(WTF **)v20;
      if ((_DWORD)v21)
      {
        *(_DWORD *)(v20 + 8) = v21;
        *(_QWORD *)v20 = WTF::fastRealloc(v22, (void *)(8 * v21));
      }
      else if (v22)
      {
        *(_QWORD *)v20 = 0;
        *(_DWORD *)(v20 + 8) = 0;
        WTF::fastFree(v22, a2);
      }
    }
  }
  v8 = *v4;
  if (*v4)
  {
    v39 = *(char **)v8;
    v40 = *(unsigned int *)(v8 + 12);
    v41 = (char *)(*(_QWORD *)v8 + 8 * v40);
    if (v40 < 0x81)
    {
LABEL_65:
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v39, v41, v40, 0, 0);
    }
    else
    {
      v42 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v43 = *(unsigned int *)(v8 + 12);
      while (1)
      {
        v44 = (uint64_t *)operator new(8 * v43, v42);
        if (v44)
          break;
        v19 = v43 > 1;
        v43 >>= 1;
        if (!v19)
          goto LABEL_65;
      }
      v50 = v44;
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::RenderLayer::rebuildZOrderLists(std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,std::unique_ptr<WTF::Vector<WebCore::RenderLayer*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &,WTF::OptionSet<WebCore::RenderLayer::Compositing> &)::$_0 &,WebCore::RenderLayer**>(v39, v41, v40, v44, v43);
      operator delete(v50);
    }
    v45 = *v4;
    v46 = *(unsigned int *)(v45 + 12);
    if (*(_DWORD *)(v45 + 8) > v46)
    {
      v47 = *(WTF **)v45;
      if ((_DWORD)v46)
      {
        *(_DWORD *)(v45 + 8) = v46;
        *(_QWORD *)v45 = WTF::fastRealloc(v47, (void *)(8 * v46));
      }
      else if (v47)
      {
        *(_QWORD *)v45 = 0;
        *(_DWORD *)(v45 + 8) = 0;
        WTF::fastFree(v47, a2);
      }
    }
  }
  v9 = *((_QWORD *)v2 + 3);
  if ((v9 & 1) != 0)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 4) + 24) + 8) + 40) + 8);
    v26 = *(_QWORD *)(v25 + 3088);
    if (v26)
    {
      if (*(_DWORD *)(v26 - 12))
      {
        WebCore::RenderLayer::topLayerRenderLayers(*(_QWORD **)(v25 + 1944), (const WebCore::RenderView *)a2, (uint64_t)&v54);
        v28 = v55;
        if (v55)
        {
          v29 = *v3;
          if (!*v3)
          {
            v30 = (WTF *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v30 = 0;
            *((_QWORD *)v30 + 1) = 0;
            v53 = v30;
            std::unique_ptr<WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((WTF **)v3, &v53);
            std::unique_ptr<WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~unique_ptr[abi:sn180100](&v53, v31);
            v29 = *v3;
          }
          v53 = 0;
          v32 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(_QWORD *)(*(_QWORD *)v29 + 8 * v32 - 8);
            if ((*(_QWORD *)(*(_QWORD *)(v33 + 32) + 96) & 0xF80000000000) == 0x600000000000)
            {
              *(_DWORD *)(v29 + 12) = v32 - 1;
              WTF::CheckedPtr<WebCore::RenderLayer,WTF::RawPtrTraits<WebCore::RenderLayer>>::operator=((uint64_t)&v53, v33);
              v29 = *v3;
            }
          }
          WTF::Vector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::RenderLayer *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)v29, v54, v28);
          if (v53)
          {
            v34 = *v3;
            v52 = v53;
            v35 = *(unsigned int *)(v34 + 12);
            if ((_DWORD)v35 == *(_DWORD *)(v34 + 8))
            {
              WTF::Vector<WebCore::FlexItem *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FlexItem *>(v34, (unint64_t)&v52);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v53;
              *(_DWORD *)(v34 + 12) = v35 + 1;
            }
            if (v53)
            {
              v36 = *((_DWORD *)v53 + 2);
              if (!v36)
              {
                __break(0xC471u);
                JUMPOUT(0x19428A450);
              }
              *((_DWORD *)v53 + 2) = v36 - 1;
            }
          }
        }
        if (v54)
          WTF::fastFree(v54, v27);
        v9 = *((_QWORD *)v2 + 3);
      }
    }
  }
  *((_QWORD *)v2 + 3) = v9 & 0xFFFFFFFFFFFFFF7FLL;
  v10 = *((_QWORD *)v2 + 12);
  if (v10)
  {
    v48 = *(_DWORD *)(v10 + 12);
    if (((v9 & 0x200) == 0) != (v48 != 0))
      goto LABEL_10;
    v49 = (unint64_t)(v48 != 0) << 9;
  }
  else
  {
    if ((v9 & 0x200) == 0)
      goto LABEL_10;
    v49 = 0;
  }
  *((_QWORD *)v2 + 3) = v49 | v9 & 0xFFFFFFFFFFFFFD7FLL;
  if (*((_QWORD *)v2 + 32))
    WebCore::RenderLayer::setNeedsCompositingConfigurationUpdate((uint64_t)v2);
LABEL_10:
  v11 = *((_DWORD *)v2 + 3);
  if ((~v11 & 0x810) != 0)
  {
    v12 = v51;
    if ((v51 & 0x3C) != 0)
    {
      *((_DWORD *)v2 + 3) = v11 | 0x10;
      if ((*((_BYTE *)v2 + 24) & 4) != 0)
      {
        v37 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
        if (v37)
        {
LABEL_55:
          do
          {
            v38 = *((_DWORD *)v37 + 3);
            if ((v38 & 1) != 0)
              break;
            *((_DWORD *)v37 + 3) = v38 | 1;
            if ((*((_BYTE *)v37 + 24) & 4) == 0)
            {
              while (1)
              {
                v37 = (WebCore::RenderLayer *)*((_QWORD *)v37 + 5);
                if (!v37)
                  goto LABEL_12;
                if ((*((_BYTE *)v37 + 24) & 0x4A) != 0)
                  goto LABEL_59;
              }
            }
            v37 = (WebCore::RenderLayer *)*((_QWORD *)v37 + 5);
LABEL_59:
            ;
          }
          while (v37);
        }
      }
      else
      {
        v37 = v2;
        while (1)
        {
          v37 = (WebCore::RenderLayer *)*((_QWORD *)v37 + 5);
          if (!v37)
            break;
          if ((*((_BYTE *)v37 + 24) & 0x4A) != 0)
            goto LABEL_55;
        }
      }
    }
LABEL_12:
    if ((v12 & 0xFC0) != 0)
    {
      *((_DWORD *)v2 + 3) |= 0x800u;
      if ((*((_BYTE *)v2 + 24) & 4) != 0)
      {
        v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
        if (v2)
        {
LABEL_26:
          do
          {
            v24 = *((_DWORD *)v2 + 3);
            if ((v24 & 2) != 0)
              break;
            *((_DWORD *)v2 + 3) = v24 | 2;
            if ((*((_BYTE *)v2 + 24) & 4) == 0)
            {
              while (1)
              {
                v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
                if (!v2)
                  return;
                if ((*((_BYTE *)v2 + 24) & 0x4A) != 0)
                  goto LABEL_30;
              }
            }
            v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
LABEL_30:
            ;
          }
          while (v2);
        }
      }
      else
      {
        while (1)
        {
          v2 = (WebCore::RenderLayer *)*((_QWORD *)v2 + 5);
          if (!v2)
            break;
          if ((*((_BYTE *)v2 + 24) & 0x4A) != 0)
            goto LABEL_26;
        }
      }
    }
  }
}

WTF *WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(WTF *result, WTF *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = (WTF *)*((_QWORD *)v3 + 5);
      if (v4)
      {
        *((_QWORD *)v3 + 5) = 0;
        *((_DWORD *)v3 + 12) = 0;
        WTF::fastFree(v4, a2);
      }
      v5 = *((_DWORD *)v3 + 9);
      if (v5)
        WTF::VectorTypeOperations<WebCore::OverlapMapContainer::ClippingScope>::destruct(*((_QWORD *)v3 + 3), *((_QWORD *)v3 + 3) + 72 * v5);
      result = (WTF *)*((_QWORD *)v3 + 3);
      if (result)
      {
        *((_QWORD *)v3 + 3) = 0;
        *((_DWORD *)v3 + 8) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v3 = (WTF *)((char *)v3 + 72);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::NetworkStorageSession::shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor(uint64_t a1, WTF::ASCIICaseInsensitiveHash *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 136))
    return 0;
  result = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return result;
  if (*(_DWORD *)(result + 4)
    && (MEMORY[0x19AEA53F4]() & 1) == 0
    && (v6 = *(_QWORD *)(a1 + 152), v5 = (uint64_t *)(a1 + 152), v6))
  {
    return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(v5, a2) != 0;
  }
  else
  {
    return 0;
  }
}

unint64_t WebCore::LocalFrameView::baseLayoutViewportSize(WebCore::LocalFrameView *this)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const CGRect *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  void *v14;
  CGRect v15;

  v1 = *(_QWORD *)(*((_QWORD *)this + 41) + 296);
  if (v1 && (v2 = *(_QWORD *)(v1 + 1944)) != 0)
  {
    v5 = *(_QWORD *)(v2 + 160);
    v7 = v5 & 0xFFFFFFFF00000000;
  }
  else
  {
    v3 = (void *)*((_QWORD *)this + 5);
    if (v3)
    {
      v14 = (void *)*((_QWORD *)this + 5);
      if (objc_msgSend(v3, "conformsToProtocol:", &unk_1EE342188))
        objc_msgSend((id)objc_msgSend(v14, "superview"), "frame");
      else
        objc_msgSend(v14, "frame");
      v15.origin.x = v10;
      v15.origin.y = v11;
      v15.size.width = v12;
      v15.size.height = v13;
      WebCore::enclosingIntRect(&v15, v9);
    }
    else
    {
      v4 = *((_QWORD *)this + 7);
    }
    LODWORD(v5) = (_DWORD)v4 << 6;
    if ((int)v4 < -33554432)
      LODWORD(v5) = 0x80000000;
    if ((int)v4 > 0x1FFFFFF)
      LODWORD(v5) = 0x7FFFFFFF;
    v6 = 0x8000000000000000;
    if (SHIDWORD(v4) >= -33554432)
      v6 = HIDWORD(v4) << 38;
    v7 = 0x7FFFFFFF00000000;
    if (SHIDWORD(v4) <= 0x1FFFFFF)
      v7 = v6;
  }
  return v7 | v5;
}

uint64_t WebCore::RenderStyle::addCachedPseudoStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::RenderStyle *v11;
  WTF *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  if (*a2)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (!v5)
    {
      v5 = WTF::fastMalloc((WTF *)0x30);
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_QWORD *)v5 = v5 + 16;
      *(_QWORD *)(v5 + 8) = 4;
      v7 = *(WTF **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v5;
      if (v7)
      {
        v8 = *((unsigned int *)v7 + 3);
        v9 = *(WTF **)v7;
        if ((_DWORD)v8)
        {
          v10 = 8 * v8;
          do
          {
            v11 = *(WebCore::RenderStyle **)v9;
            *(_QWORD *)v9 = 0;
            if (v11)
            {
              WebCore::RenderStyle::~RenderStyle(v11, v6);
              if (*(_DWORD *)v12)
              {
                *((_OWORD *)v12 + 2) = 0u;
                *((_OWORD *)v12 + 3) = 0u;
                *(_OWORD *)v12 = 0u;
                *((_OWORD *)v12 + 1) = 0u;
              }
              else
              {
                WTF::fastFree(v12, v6);
              }
            }
            v9 = (WTF *)((char *)v9 + 8);
            v10 -= 8;
          }
          while (v10);
          v9 = *(WTF **)v7;
        }
        if ((WTF *)((char *)v7 + 16) != v9 && v9 != 0)
        {
          *(_QWORD *)v7 = 0;
          *((_DWORD *)v7 + 2) = 0;
          WTF::fastFree(v9, v6);
        }
        WTF::fastFree(v7, v6);
        v5 = *(_QWORD *)(a1 + 48);
      }
    }
    v14 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v14 == *(_DWORD *)(v5 + 8))
    {
      WTF::Vector<std::unique_ptr<WebCore::RenderStyle>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::RenderStyle>>(v5, (unint64_t)a2);
    }
    else
    {
      v15 = *(_QWORD *)v5;
      v16 = *a2;
      *a2 = 0;
      *(_QWORD *)(v15 + 8 * v14) = v16;
      *(_DWORD *)(v5 + 12) = v14 + 1;
    }
  }
  return v2;
}

uint64_t WebCore::DisplayList::FillPath::apply(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, a1);
}

void WebCore::RenderTreeBuilder::attachInternal(uint64_t a1, WebCore::RenderTable *this, const WebCore::RenderObject **a3, uint64_t a4)
{
  int v7;
  int v8;
  WebCore::RenderTreeBuilder **v9;
  const WebCore::RenderObject *v10;
  int v11;
  WebCore::RenderObject *Row;
  WebCore::RenderObject *v13;
  int v14;
  WebCore::RenderTreeBuilder *v15;
  WebCore::RenderTable *v16;
  uint64_t v17;
  WTF *v18;
  WTF **v19;
  uint64_t *v20;
  WTF *v21;
  WebCore::RenderObject *v22;
  uint64_t v23;
  uint64_t *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  WebCore::RenderElement *v30;
  WebCore::RenderObject *v31;
  WebCore::RenderTreeBuilder **v32;
  const WebCore::RenderObject *v33;
  WebCore::RenderMultiColumnFlow *v35;
  WebCore::RenderObject *ColumnSpannerPlaceholder;
  uint64_t v37;
  WebCore::RenderElement *v38;
  WebCore::RenderObject *v39;
  int v40;
  uint64_t v41;
  void *v42;
  WTF *v43;
  WebCore::RenderObject *v44;
  uint64_t v45;
  const WebCore::RenderObject *v46;
  uint64_t v47;
  const WebCore::RenderObject *v48;
  uint64_t *v49;
  const WebCore::RenderObject *v50;
  WebCore::RenderObject *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  WTF *v63;
  uint64_t v64;
  WebCore::RenderObject *v65;
  uint64_t v66;
  WTF *v67;
  WTF **v68;
  WTF *v69;
  WTF **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  const WebCore::Element *v80;
  WebCore::RenderTreeBuilder *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WebCore::RenderTable *v88;
  WTF *v89;
  uint64_t v90;
  char v92;
  int v93;
  const WebCore::RenderObject *v94;
  uint64_t *v95;
  uint64_t v96;
  const WebCore::RenderObject *v97;
  uint64_t *v98;
  WebCore::RenderObject *v99;
  WebCore::RenderObject *v100;
  WebCore::RenderTreeBuilder **v101;
  const WebCore::RenderObject *v102;
  WebCore::RenderTreeBuilder *v103;
  uint64_t *v104;
  const WebCore::RenderObject *v105;
  uint64_t v106;
  WebCore::RenderTable *v107;
  uint64_t *v108;
  WebCore::RenderTable *ParentForChild;
  WebCore::RenderObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WebCore::RenderElement *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  const WebCore::Element *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  WebCore::RenderTreeBuilder::FormControls *v143;
  WTF *v144;
  WebCore::RenderObject *v145;
  uint64_t *v146;
  uint64_t v147;
  const WebCore::RenderObject *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  const WebCore::Element *v153;
  uint64_t v154;
  uint64_t v155;
  WebCore::RenderTable *v156;
  WebCore::RenderObject *v157;
  WebCore::RenderTable *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  WebCore::RenderObject *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t v169;
  WebCore::RenderTreeBuilder::FormControls *v170;
  WebCore::RenderObject *v171;
  uint64_t v172;
  WebCore::RenderTreeBuilder *v173;
  WebCore::RenderObject *v174;
  const WebCore::RenderObject *v175;
  uint64_t v176;
  char v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  const WebCore::RenderObject *v182;
  const WebCore::RenderObject *v183;
  uint64_t v184;
  WebCore::RenderTable *v185;
  WebCore::RenderTreeBuilder::SVG *v186;
  const WebCore::RenderObject *v187;
  WebCore::RenderTextFragment *v188;
  uint64_t v189;
  BOOL v190;
  _BOOL4 isFieldset;
  uint64_t v192;
  WebCore::RenderTreeBuilder::MultiColumn *v193;
  WTF *v194;
  const WebCore::RenderObject *v195;
  WTF *v196;
  WTF *v197;
  WTF *v198;
  const WebCore::RenderObject *v199;
  WebCore::RenderObject *v200;
  WTF *v201;
  _QWORD v202[4];
  WebCore::RenderObject *v203;
  WTF *v204;
  uint64_t v205;
  uint64_t v206;
  WTF *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;

  v202[0] = this;
  v202[1] = a1;
  v202[2] = a3;
  v202[3] = &v203;
  v203 = (WebCore::RenderObject *)a4;
  if (a4)
  {
    if ((*(_BYTE *)(a4 + 45) & 2) != 0)
    {
      if ((*(_WORD *)(a4 + 118) & 0x1000) != 0)
      {
        {
          WebCore::inlineWrapperForDisplayContentsMap(void)::map = 0;
        }
        WTF::HashMap<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakPtr<WebCore::RenderInline,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>>((uint64_t)&WebCore::inlineWrapperForDisplayContentsMap(void)::map, a4, &v207);
        v43 = v207;
        if (v207)
        {
          v44 = (WebCore::RenderObject *)*((_QWORD *)v207 + 1);
          v207 = 0;
          if (*(_DWORD *)v43 == 1)
            WTF::fastFree(v43, v42);
          else
            --*(_DWORD *)v43;
          if (v44)
            v203 = v44;
        }
      }
    }
    else if ((*(_BYTE *)(a4 + 45) & 4) != 0 && (*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v35 = (WebCore::RenderMultiColumnFlow *)(*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 648))(this);
      if (v35)
      {
        if (*((_BYTE *)v35 + 46) == 25)
        {
          ColumnSpannerPlaceholder = (WebCore::RenderObject *)WebCore::RenderMultiColumnFlow::findColumnSpannerPlaceholder(v35, (const WebCore::RenderBox *)a4);
          if (ColumnSpannerPlaceholder)
            v203 = ColumnSpannerPlaceholder;
        }
      }
    }
  }
  v7 = *((unsigned __int8 *)this + 46);
  if (v7 == 85)
  {
    v96 = *(_QWORD *)(a1 + 96);
    v97 = *a3;
    *a3 = 0;
    v98 = *(uint64_t **)(*(_QWORD *)v96 + 80);
    v207 = v97;
    WebCore::RenderTreeBuilder::BlockFlow::attach(v98, this, &v207, v203);
    v99 = v207;
    if (v207)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v207, (uint64_t)v207);
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v97 + 3) + 8) + 40) + 8) + 680)
                    + 680) & 0x800000000000) == 0)
      WebCore::SVGResourcesCache::clientWasAddedToTree(v97, v99);
    WebCore::RenderSVGText::subtreeChildWasAdded((uint64_t)this, v97);
    return;
  }
  if ((*((_QWORD *)this + 12) & 0x1ELL) == 0x16)
  {
    v30 = WebCore::RenderTreeBuilder::Ruby::findOrCreateParentForStyleBasedRubyChild(*(WebCore::RenderTreeBuilder::Ruby **)(a1 + 56), this, *a3, &v203);
    if (v30 == this)
    {
      v181 = *(uint64_t **)(a1 + 56);
      v182 = *a3;
      *a3 = 0;
      v201 = v182;
      WebCore::RenderTreeBuilder::Ruby::attachForStyleBasedRuby(v181, (uint64_t)this, (const WTF::StringImpl *)&v201, (uint64_t)v203);
      v18 = v201;
      v201 = 0;
      if (v18)
      {
        v19 = &v201;
        goto LABEL_17;
      }
      return;
    }
    goto LABEL_304;
  }
  v8 = *((_BYTE *)this + 52) & 7;
  if (v8 == 1)
  {
    v20 = *(uint64_t **)(a1 + 80);
    v21 = *a3;
    *a3 = 0;
    v22 = v203;
    v23 = *((_QWORD *)this + 28);
    if (!v23 || (v106 = *(_QWORD *)(v23 + 24)) == 0 || (v107 = *(WebCore::RenderTable **)(v106 + 8)) == 0)
    {
      if ((*((_BYTE *)this + 23) & 0x10) != 0)
      {
        v193 = (WebCore::RenderTreeBuilder::MultiColumn *)(*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 648))(this);
        if (v193)
          v22 = WebCore::RenderTreeBuilder::MultiColumn::resolveMovedChild(v193, v193, v22);
      }
      v24 = *(uint64_t **)(*v20 + 72);
      v207 = v21;
      WebCore::RenderTreeBuilder::Block::attach(v24, this, (const WTF::StringImpl *)&v207, v22);
      v25 = v207;
      if (v207)
      {
        v26 = *((_QWORD *)v207 + 4);
        if (v26 && *(_QWORD *)(v26 + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x19428B5F4);
        }
        v27 = *(unsigned int *)((char *)v207 + 47);
        if (v27 | ((unint64_t)*((unsigned __int8 *)v207 + 51) << 32)
          && *(_QWORD *)((v27 | ((unint64_t)*((unsigned __int8 *)v207 + 51) << 32)) + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x19428B9DCLL);
        }
        v28 = *((unsigned int *)v207 + 10);
        if (v28 | ((unint64_t)*((unsigned __int8 *)v207 + 44) << 32)
          && *(_QWORD *)((v28 | ((unint64_t)*((unsigned __int8 *)v207 + 44) << 32)) + 8))
        {
          __break(0xC471u);
          JUMPOUT(0x19428BA04);
        }
        v29 = *((_DWORD *)v207 + 5);
        if ((v29 & 4) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19428B614);
        }
        *((_DWORD *)v207 + 5) = v29 | 4;
        (*(void (**)(WTF *))(*(_QWORD *)v25 + 640))(v25);
        if ((*((_BYTE *)v25 + 52) & 7) == 3 && (*((_BYTE *)v25 + 53) & 4) != 0 && *((_DWORD *)v25 + 56) != 1)
          --*((_DWORD *)v25 + 56);
        else
          (*(void (**)(WTF *))(*(_QWORD *)v25 + 8))(v25);
      }
      return;
    }
    if (WebCore::RenderObject::isFieldset(this) && WebCore::RenderObject::isLegend(v21))
    {
      v108 = *(uint64_t **)(*v20 + 72);
      v207 = v21;
      ParentForChild = this;
    }
    else
    {
      isFieldset = WebCore::RenderObject::isFieldset(this);
      if (!v22 || !isFieldset || !WebCore::RenderObject::isLegend(v22))
      {
        v192 = *v20;
        v207 = v21;
        WebCore::RenderTreeBuilder::attach(v192, v107, (unint64_t *)&v207);
LABEL_15:
        v18 = v207;
        if (v207)
        {
          v19 = &v207;
LABEL_17:
          WebCore::RenderObjectDeleter::operator()((uint64_t)v19, (uint64_t)v18);
          return;
        }
        return;
      }
      v108 = *(uint64_t **)(*v20 + 72);
      v207 = v21;
      ParentForChild = v107;
    }
    v110 = 0;
LABEL_227:
    WebCore::RenderTreeBuilder::Block::attach(v108, ParentForChild, (const WTF::StringImpl *)&v207, v110);
    goto LABEL_15;
  }
  if (*((unsigned __int8 *)this + 46) > 0x26u)
  {
    switch(v7)
    {
      case '?':
        goto LABEL_7;
      case '\'':
        v30 = WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(*(WebCore::RenderTreeBuilder::Table **)(a1 + 48), this, *a3, &v203);
        if (v30 == this)
        {
          v100 = 0;
          v101 = *(WebCore::RenderTreeBuilder ***)(a1 + 48);
          v102 = *a3;
          *a3 = 0;
          if (v203)
          {
            v180 = *((_QWORD *)v203 + 4);
            if (v180 && *(WebCore::RenderTable **)(v180 + 8) == this)
              v100 = v203;
            else
              v100 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(*v101, this, v203);
          }
          v103 = *v101;
          v207 = v102;
          WebCore::RenderTreeBuilder::attachToRenderElement((uint64_t)v103, (uint64_t)this, (const WebCore::RenderStyle *)&v207, (uint64_t)v100);
          if (v207)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v207, (uint64_t)v207);
          if (*((_BYTE *)v102 + 46) == 37 && v102)
            WebCore::RenderTableRow::didInsertTableCell(this, v102, v100);
          return;
        }
        break;
      case '(':
        v30 = WebCore::RenderTreeBuilder::Table::findOrCreateParentForChild(*(WebCore::RenderTreeBuilder::Table **)(a1 + 48), this, *a3, &v203);
        if (v30 == this)
        {
          v31 = 0;
          v32 = *(WebCore::RenderTreeBuilder ***)(a1 + 48);
          v33 = *a3;
          *a3 = 0;
          if (v203)
          {
            v179 = *((_QWORD *)v203 + 4);
            if (v179 && *(WebCore::RenderTable **)(v179 + 8) == this)
              v31 = v203;
            else
              v31 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(*v32, this, v203);
          }
          if (v33 && *((_BYTE *)v33 + 46) == 39)
            WebCore::RenderTableSection::willInsertTableRow(this, v33, v31);
          v15 = *v32;
          v207 = v33;
          v16 = this;
          v17 = (uint64_t)v31;
          goto LABEL_14;
        }
        break;
      default:
        goto LABEL_69;
    }
LABEL_304:
    v84 = (uint64_t)v30;
    goto LABEL_131;
  }
  switch(v7)
  {
    case 35:
LABEL_7:
      v9 = *(WebCore::RenderTreeBuilder ***)(a1 + 48);
      v10 = *a3;
      v11 = *((unsigned __int8 *)*a3 + 46);
      if (v11 != 40 && v11 != 36)
      {
        if (v11 != 38)
        {
          v37 = *(unsigned int *)((char *)this + 71);
          if (v37 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32))
          {
            v38 = *(WebCore::RenderElement **)((v37 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8);
            v39 = v203;
            if (v38)
            {
              v40 = *((unsigned __int8 *)v38 + 46);
              v41 = v40 == 40 ? *(_QWORD *)((v37 | ((unint64_t)*((unsigned __int8 *)this + 75) << 32)) + 8) : 0;
              if (!v203 && v40 == 40)
              {
                if ((*(_BYTE *)(v41 + 45) & 1) != 0
                  && ((*(_BYTE *)(v41 + 45) & 2) != 0 || (*(_QWORD *)(v41 + 96) & 0xF80000000000) != 0x300000000000))
                {
                  Row = 0;
LABEL_129:
                  if (v38 != this)
                  {
                    v84 = (uint64_t)v38;
LABEL_131:
                    WebCore::RenderTreeBuilder::attachInternal(WebCore::RenderElement &,std::unique_ptr<WebCore::RenderObject,WebCore::RenderObjectDeleter>,WebCore::RenderObject*)::$_0::operator()((uint64_t)v202, v84);
                    return;
                  }
                  v9 = *(WebCore::RenderTreeBuilder ***)(a1 + 48);
                  v10 = *a3;
                  goto LABEL_9;
                }
LABEL_125:
                v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
                WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)6, (const WTF::StringImpl *)a3, (uint64_t)&v207);
                v38 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
                v72 = WebCore::RenderObject::RenderObject((uint64_t)v38, 40, v71, 28, 0);
                *(_QWORD *)v72 = off_1E3422BC8;
                *(_QWORD *)(v72 + 64) = 0;
                *(_QWORD *)(v72 + 70) = 0;
                *(_DWORD *)(v72 + 80) = 0;
                v73 = v208;
                v74 = v209;
                v208 = 0;
                *(_QWORD *)(v72 + 88) = v73;
                *(_QWORD *)(v72 + 96) = v74;
                v75 = v210;
                v210 = 0u;
                *(_OWORD *)(v72 + 104) = v75;
                *(_QWORD *)(v72 + 120) = v211;
                v76 = v212;
                v212 = 0u;
                *(_OWORD *)(v72 + 128) = v76;
                *(_OWORD *)(v72 + 144) = 0u;
                *(_OWORD *)(v72 + 160) = 0u;
                *(_OWORD *)(v72 + 176) = 0u;
                *(_QWORD *)(v72 + 192) = 0;
                *(_QWORD *)v72 = off_1E3434710;
                *(_OWORD *)(v72 + 248) = 0u;
                *(_OWORD *)(v72 + 232) = 0u;
                *(_OWORD *)(v72 + 200) = 0u;
                *(_OWORD *)(v72 + 216) = 0u;
                *(_DWORD *)(v72 + 279) = 0;
                *(_OWORD *)(v72 + 264) = 0u;
                *(_DWORD *)(v72 + 20) |= 1u;
                WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v207, v77);
                WebCore::RenderElement::initializeStyle(v38, v78, v79, v80);
                v81 = *v9;
                v205 = (uint64_t)v38;
                WebCore::RenderTreeBuilder::attach((uint64_t)v81, this, (unint64_t *)&v205);
                v82 = v205;
                v205 = 0;
                if (!v82)
                {
LABEL_128:
                  Row = 0;
                  v203 = 0;
                  goto LABEL_129;
                }
                v83 = &v205;
LABEL_127:
                WebCore::RenderObjectDeleter::operator()((uint64_t)v83, v82);
                goto LABEL_128;
              }
            }
          }
          else
          {
            v39 = v203;
          }
          if (v39)
          {
            v155 = *((_QWORD *)v39 + 4);
            if ((*((_BYTE *)v39 + 45) & 1) == 0 && *(WebCore::RenderTable **)(v155 + 8) == this)
            {
              v169 = *((unsigned int *)v39 + 10);
              if (v169 | ((unint64_t)*((unsigned __int8 *)v39 + 44) << 32))
              {
                v38 = *(WebCore::RenderElement **)((v169 | ((unint64_t)*((unsigned __int8 *)v39 + 44) << 32)) + 8);
                if (v38)
                {
                  if (*((_BYTE *)v38 + 46) == 40 && (*((_BYTE *)v38 + 45) & 1) != 0)
                    goto LABEL_128;
                }
              }
            }
            v156 = *(WebCore::RenderTable **)(v155 + 8);
            v157 = v39;
            v158 = v156;
            if ((*((_BYTE *)v156 + 45) & 1) != 0)
            {
              v158 = v156;
              v157 = v39;
              while (1)
              {
                v164 = v158;
                if (*((_BYTE *)v157 + 46) == 40)
                  break;
                v165 = (*((_BYTE *)v157 + 45) & 2) != 0 ? *((_QWORD *)v158 + 12) : *((_QWORD *)v157 + 12);
                v166 = v165 & 0x1F;
                if (v166 == 10 || v166 == 13)
                  break;
                v158 = *(WebCore::RenderTable **)(*((_QWORD *)v164 + 4) + 8);
                v157 = v164;
                if ((*((_BYTE *)v158 + 45) & 1) == 0)
                  goto LABEL_241;
              }
              v158 = v164;
            }
LABEL_241:
            if ((*((_BYTE *)v39 + 45) & 1) == 0 && v158 == this)
            {
              v168 = *((unsigned int *)v157 + 10);
              if (v168 | ((unint64_t)*((unsigned __int8 *)v157 + 44) << 32))
              {
                v38 = *(WebCore::RenderElement **)((v168 | ((unint64_t)*((unsigned __int8 *)v157 + 44) << 32)) + 8);
                if (v38)
                {
                  if (*((_BYTE *)v38 + 46) == 40 && (*((_BYTE *)v38 + 45) & 1) != 0)
                    goto LABEL_128;
                }
              }
            }
            if (*((_BYTE *)v157 + 46) == 40
              && (*((_BYTE *)v157 + 45) & 1) != 0
              && ((*((_BYTE *)v157 + 45) & 2) != 0 || (*((_QWORD *)v157 + 12) & 0xF80000000000) != 0x380000000000))
            {
              Row = v39;
              if (v39 == v157)
              {
                v38 = v39;
                Row = (WebCore::RenderObject *)WebCore::RenderTableSection::firstRow(v39);
                v203 = Row;
              }
              else
              {
                v38 = v157;
              }
              goto LABEL_129;
            }
            if (*((_BYTE *)v39 + 46) != 40)
            {
              v159 = (*((_BYTE *)v39 + 45) & 2) != 0 ? *((_QWORD *)v156 + 12) : *((_QWORD *)v39 + 12);
              v160 = v159 & 0x1F;
              if (v160 != 13 && v160 != 10)
                v203 = 0;
            }
          }
          goto LABEL_125;
        }
        if ((*((_BYTE *)v10 + 45) & 1) == 0 && *(_QWORD *)(*((_QWORD *)v10 + 3) + 8))
        {
          v148 = *a3;
          if ((*((_BYTE *)v10 + 45) & 2) != 0)
            v148 = *(const WebCore::RenderObject **)(*((_QWORD *)v10 + 4) + 8);
          if ((*((_QWORD *)v148 + 12) & 0x1FLL) != 0xA)
          {
            v149 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
            WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)0xA, (const WTF::StringImpl *)a3, (uint64_t)&v207);
            v38 = (WebCore::RenderElement *)WebCore::RenderTableCol::operator new(208);
            WebCore::RenderTableCol::RenderTableCol((uint64_t)v38, v149, &v207);
            WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v207, v150);
            WebCore::RenderElement::initializeStyle(v38, v151, v152, v153);
            v154 = (uint64_t)*v9;
            v206 = (uint64_t)v38;
            WebCore::RenderTreeBuilder::attach(v154, this, (unint64_t *)&v206);
            v82 = v206;
            v206 = 0;
            if (!v82)
              goto LABEL_128;
            v83 = &v206;
            goto LABEL_127;
          }
        }
      }
      Row = v203;
LABEL_9:
      v13 = 0;
      *a3 = 0;
      if (Row)
      {
        v147 = *((_QWORD *)Row + 4);
        if (v147 && *(WebCore::RenderTable **)(v147 + 8) == this)
          v13 = Row;
        else
          v13 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(*v9, this, Row);
      }
      v14 = *((unsigned __int8 *)v10 + 46);
      if (v10 && v14 == 40)
      {
        WebCore::RenderTable::willInsertTableSection(this, v10, v13);
      }
      else if (v14 == 38)
      {
        WebCore::RenderTable::willInsertTableColumn((uint64_t)this);
      }
      v15 = *v9;
      v207 = v10;
      v16 = this;
      v17 = (uint64_t)v13;
LABEL_14:
      WebCore::RenderTreeBuilder::attachToRenderElement((uint64_t)v15, (uint64_t)v16, (const WebCore::RenderStyle *)&v207, v17);
      goto LABEL_15;
    case 2:
      v143 = *(WebCore::RenderTreeBuilder::FormControls **)(a1 + 64);
      v144 = *a3;
      *a3 = 0;
      v145 = v203;
      v146 = *(uint64_t **)(*(_QWORD *)v143 + 72);
      ParentForChild = WebCore::RenderTreeBuilder::FormControls::findOrCreateParentForChild(v143, this);
      v207 = v144;
      v108 = v146;
      v110 = v145;
      goto LABEL_227;
    case 22:
      v170 = *(WebCore::RenderTreeBuilder::FormControls **)(a1 + 64);
      v171 = *a3;
      *a3 = 0;
      v200 = v171;
      WebCore::RenderTreeBuilder::FormControls::attach(v170, this, &v200, v203);
      v18 = v200;
      v200 = 0;
      if (v18)
      {
        v19 = &v200;
        goto LABEL_17;
      }
      return;
  }
LABEL_69:
  if (v8 == 4 && (~*((unsigned __int8 *)this + 53) & 3) == 0)
    goto LABEL_110;
  if (*((unsigned __int8 *)this + 46) > 0x55u)
  {
    if (v7 != 86)
    {
      if (v7 == 103)
      {
LABEL_110:
        v62 = *(uint64_t **)(a1 + 96);
        v63 = *a3;
        *a3 = 0;
        v64 = *v62;
        v207 = v63;
        WebCore::RenderTreeBuilder::attachToRenderElement(v64, (uint64_t)this, (const WebCore::RenderStyle *)&v207, (uint64_t)v203);
        v65 = v207;
        if (v207)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v207, (uint64_t)v207);
        WebCore::SVGResourcesCache::clientWasAddedToTree(v63, v65);
        return;
      }
LABEL_82:
      if ((*((_BYTE *)this + 45) & 0x40) == 0)
      {
        if ((*((_BYTE *)this + 45) & 0x20) != 0)
        {
          v104 = *(uint64_t **)(a1 + 88);
          v105 = *a3;
          *a3 = 0;
          v195 = v105;
          WebCore::RenderTreeBuilder::Inline::attach(v104, this, &v195, v203);
          v18 = v195;
          if (v195)
          {
            v19 = &v195;
            goto LABEL_17;
          }
        }
        else
        {
          v183 = *a3;
          *a3 = 0;
          v194 = v183;
          WebCore::RenderTreeBuilder::attachToRenderElement(a1, (uint64_t)this, (const WebCore::RenderStyle *)&v194, (uint64_t)v203);
          v18 = v194;
          if (v194)
          {
            v19 = &v194;
            goto LABEL_17;
          }
        }
        return;
      }
      v49 = *(uint64_t **)(a1 + 72);
      v50 = *a3;
      *a3 = 0;
      v51 = v203;
      if ((*(_WORD *)((_BYTE *)this + 69) & 0x10) == 0)
        goto LABEL_84;
      ++dword_1ECE91378;
      v128 = *((_QWORD *)this + 1);
      v129 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
      v130 = (~(v128 << 32) + v128) ^ ((unint64_t)(~(v128 << 32) + v128) >> 22);
      v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
      v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
      v133 = v129 & ((v132 >> 31) ^ v132);
      v134 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v133);
      if (v134 == -1 || v134 != v128)
      {
        v161 = 1;
        do
        {
          v133 = ((_DWORD)v133 + v161) & v129;
          v162 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v133);
          ++v161;
        }
        while (v162 == -1 || v162 != v128);
      }
      v136 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v133 + 8) + 16);
      if (!v136)
        goto LABEL_84;
      v137 = *v136;
      if (!v137 || !*(_QWORD *)(v137 + 8))
        goto LABEL_84;
      if ((*((_BYTE *)this + 45) & 1) == 0)
      {
LABEL_203:
        v196 = 0;
        v207 = v50;
        WebCore::RenderTreeBuilder::Block::insertChildToContinuation(v49, (uint64_t *)this, (uint64_t *)&v207, v51);
        v69 = v207;
        if (!v207)
        {
LABEL_121:
          v18 = v196;
          if (v196)
          {
            v19 = &v196;
            goto LABEL_17;
          }
          return;
        }
        v70 = &v207;
LABEL_120:
        WebCore::RenderObjectDeleter::operator()((uint64_t)v70, (uint64_t)v69);
        goto LABEL_121;
      }
      v174 = v203;
      v175 = v50;
      if ((*((_BYTE *)this + 45) & 2) != 0)
      {
        v176 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 8) + 96);
        v190 = (v176 & 0x1F) == 1 || (v176 & 0x1F) == 14;
      }
      else
      {
        v176 = *((_QWORD *)this + 12);
        if ((v176 & 0x1F) == 1)
        {
LABEL_307:
          if ((*((_BYTE *)this + 45) & 0x40) == 0)
            goto LABEL_203;
          if ((v176 & 0xF80000000000) != 0)
            goto LABEL_203;
          v177 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 176))(this);
          v51 = v174;
          v50 = v175;
          if ((v177 & 1) != 0)
            goto LABEL_203;
          v178 = *((unsigned __int8 *)this + 46);
          if (v178 == 20)
            goto LABEL_203;
          if ((*((_BYTE *)this + 52) & 7) == 1)
          {
            v50 = v175;
            v51 = v174;
            if ((*((_BYTE *)this + 53) & 2) != 0 || v178 == 26)
              goto LABEL_203;
          }
          else
          {
            v50 = v175;
            v51 = v174;
            if (v178 == 26)
              goto LABEL_203;
          }
          if (v178 == 49)
            goto LABEL_203;
LABEL_84:
          v52 = 0;
          v196 = 0;
          v204 = v50;
          if (v51)
          {
            v142 = *((_QWORD *)v51 + 4);
            if (v142 && *(WebCore::RenderTable **)(v142 + 8) == this)
            {
              v52 = (uint64_t)v51;
            }
            else
            {
              v172 = (uint64_t)v50;
              v52 = (uint64_t)v51;
              WebCore::findParentAndBeforeChildForNonSibling((uint64_t)&v207, this, v50, v51);
              if ((_BYTE)v209)
              {
                v173 = (WebCore::RenderTreeBuilder *)*v49;
                if (v207)
                {
                  v204 = 0;
                  v206 = v172;
                  WebCore::RenderTreeBuilder::attach((uint64_t)v173, v207, (unint64_t *)&v206);
                  v67 = (WTF *)v206;
                  if (!v206)
                    goto LABEL_118;
                  v68 = (WTF **)&v206;
                  goto LABEL_117;
                }
                v188 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(v173, this, (WebCore::RenderObject *)v52);
                v189 = *((_QWORD *)v188 + 4);
                if (!v189 || (v52 = (uint64_t)v188, *(WebCore::RenderTable **)(v189 + 8) != this))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19428BBA0);
                }
              }
              v50 = (const WebCore::RenderObject *)v172;
            }
          }
          v53 = *((_DWORD *)v50 + 5);
          v54 = *((_DWORD *)this + 5);
          if ((v53 & 0x800) != 0 || (v53 & 0x1800000) == 0x1000000)
          {
            if ((v54 & 0x40000) != 0 || *((char *)this + 45) < 0 || *((_BYTE *)this + 46) == 12)
              goto LABEL_114;
            if (v52)
            {
              v85 = *(unsigned __int8 *)(v52 + 44);
              v86 = *(unsigned int *)(v52 + 40);
            }
            else
            {
              v85 = *((unsigned __int8 *)this + 75);
              v86 = *(unsigned int *)((char *)this + 71);
            }
            v87 = v86 | (v85 << 32);
            if (!v87)
              goto LABEL_114;
            v88 = *(WebCore::RenderTable **)(v87 + 8);
            if (!v88 || (*((_BYTE *)v88 + 45) & 1) == 0)
              goto LABEL_114;
            v89 = v50;
            v90 = (*((_BYTE *)v88 + 45) & 2) != 0
                ? *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v88 + 4) + 8) + 96)
                : *((_QWORD *)v88 + 12);
            if ((v90 & 0x1F) != 1 && (v90 & 0x1F) != 14)
              goto LABEL_114;
            if ((*((_BYTE *)v88 + 45) & 0x40) == 0)
              goto LABEL_114;
            if ((v90 & 0xF80000000000) != 0)
              goto LABEL_114;
            v92 = (*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)v88 + 176))(v88);
            v50 = v89;
            if ((v92 & 1) != 0)
              goto LABEL_114;
            v93 = *((unsigned __int8 *)v88 + 46);
            if (v93 == 20)
              goto LABEL_114;
            if ((*((_BYTE *)v88 + 52) & 7) == 1)
            {
              v50 = v89;
              if ((*((_BYTE *)v88 + 53) & 2) != 0 || v93 == 26 || v93 == 49)
                goto LABEL_114;
            }
            else
            {
              v50 = v89;
              if (v93 == 49 || v93 == 26)
                goto LABEL_114;
            }
            if ((*((_BYTE *)v88 + 45) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19428AFA8);
            }
          }
          else
          {
            if ((v54 & 0x40000) != 0)
            {
              if ((v53 & 1) != 0)
              {
                WebCore::RenderTreeBuilder::createAnonymousWrappersForInlineContent((WebCore::RenderTreeBuilder *)*v49, this, (WebCore::RenderObject *)v52);
                if (v52 && (v184 = *(_QWORD *)(v52 + 32)) != 0)
                {
                  v185 = *(WebCore::RenderTable **)(v184 + 8);
                  if (v185 == this)
                    v55 = v52;
                  else
                    v55 = (uint64_t)v185;
                }
                else
                {
                  v55 = 0;
                }
                v56 = *v49;
                v57 = v204;
                v204 = 0;
                v207 = v57;
                WebCore::RenderTreeBuilder::attachToRenderElement(v56, (uint64_t)this, (const WebCore::RenderStyle *)&v207, v55);
                if (v207)
                  WebCore::RenderObjectDeleter::operator()((uint64_t)&v207, (uint64_t)v207);
                v58 = *((_QWORD *)this + 4);
                if (!v58)
                  goto LABEL_118;
                v59 = *(_QWORD *)(v58 + 8);
                if (!v59 || (*(_BYTE *)(v59 + 45) & 0x40) == 0 || (*((_BYTE *)this + 45) & 1) == 0)
                  goto LABEL_118;
                v60 = (*((_BYTE *)this + 45) & 2) != 0 ? *(_QWORD *)(v59 + 96) : *((_QWORD *)this + 12);
                if ((v60 & 0x1F) != 1 && (v60 & 0x1F) != 0xE)
                  goto LABEL_118;
                if ((*((_BYTE *)this + 45) & 0x40) == 0)
                  goto LABEL_118;
                if ((v60 & 0xF80000000000) != 0)
                  goto LABEL_118;
                if (((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)this + 176))(this) & 1) != 0)
                  goto LABEL_118;
                v61 = *((unsigned __int8 *)this + 46);
                if (v61 == 20)
                  goto LABEL_118;
                if ((*((_BYTE *)this + 52) & 7) == 1)
                {
                  if ((*((_BYTE *)this + 53) & 2) != 0 || v61 == 26 || v61 == 49)
                    goto LABEL_118;
                }
                else if (v61 == 49 || v61 == 26)
                {
                  goto LABEL_118;
                }
                WebCore::RenderTreeBuilder::Block::removeLeftoverAnonymousBlock((WebCore::RenderTreeBuilder::Block *)v49, this);
LABEL_118:
                v69 = v204;
                if (!v204)
                  goto LABEL_121;
                v70 = &v204;
                goto LABEL_120;
              }
              goto LABEL_114;
            }
            if ((v53 & 1) != 0)
            {
LABEL_114:
              v66 = *v49;
              v204 = 0;
              v207 = v50;
              WebCore::RenderTreeBuilder::attachToRenderElement(v66, (uint64_t)this, (const WebCore::RenderStyle *)&v207, v52);
LABEL_115:
              v67 = v207;
              if (!v207)
                goto LABEL_118;
              v68 = &v207;
LABEL_117:
              WebCore::RenderObjectDeleter::operator()((uint64_t)v68, (uint64_t)v67);
              goto LABEL_118;
            }
            if (v52)
            {
              v111 = *(unsigned __int8 *)(v52 + 44);
              v112 = *(unsigned int *)(v52 + 40);
            }
            else
            {
              v111 = *((unsigned __int8 *)this + 75);
              v112 = *(unsigned int *)((char *)this + 71);
            }
            v113 = v112 | (v111 << 32);
            if (!v113
              || (v88 = *(WebCore::RenderTable **)(v113 + 8)) == 0
              || (*((_BYTE *)v88 + 45) & 1) == 0
              || ((v89 = v50, (*((_BYTE *)v88 + 45) & 2) != 0)
                ? (v138 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v88 + 4) + 8) + 96))
                : (v138 = *((_QWORD *)v88 + 12)),
                  (v138 & 0x1F) != 1 ? (v139 = (v138 & 0x1F) == 14) : (v139 = 1),
                  !v139
               || (*((_BYTE *)v88 + 45) & 0x40) == 0
               || (v138 & 0xF80000000000) != 0
               || ((*(uint64_t (**)(WebCore::RenderTable *))(*(_QWORD *)v88 + 176))(v88) & 1) != 0
               || (v140 = *((unsigned __int8 *)v88 + 46), v140 == 20)
               || (*((_BYTE *)v88 + 52) & 7) == 1 && (*((_BYTE *)v88 + 53) & 2) != 0
               || v140 == 26
               || v140 == 49))
            {
              v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
              WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)this + 10, (WTF::StringImpl *)1, v50, (uint64_t)&v207);
              v115 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
              v116 = WebCore::RenderObject::RenderObject((uint64_t)v115, 1, v114, 92, 1);
              *(_QWORD *)v116 = off_1E3422BC8;
              *(_QWORD *)(v116 + 64) = 0;
              *(_QWORD *)(v116 + 70) = 0;
              *(_DWORD *)(v116 + 80) = 0;
              v117 = v208;
              v118 = v209;
              v208 = 0;
              *(_QWORD *)(v116 + 88) = v117;
              *(_QWORD *)(v116 + 96) = v118;
              v119 = v210;
              v210 = 0u;
              *(_OWORD *)(v116 + 104) = v119;
              *(_QWORD *)(v116 + 120) = v211;
              v120 = v212;
              v212 = 0u;
              *(_OWORD *)(v116 + 128) = v120;
              *(_OWORD *)(v116 + 144) = 0u;
              *(_OWORD *)(v116 + 160) = 0u;
              *(_OWORD *)(v116 + 176) = 0u;
              *(_QWORD *)(v116 + 192) = 0;
              *(_QWORD *)v116 = off_1E341F9F8;
              *(_DWORD *)(v116 + 200) = -1;
              *(_BYTE *)(v116 + 204) &= 0xFCu;
              *(_BYTE *)(v116 + 208) = 0;
              *(_BYTE *)(v116 + 212) = 0;
              *(_DWORD *)(v116 + 240) = 0;
              *(_OWORD *)(v116 + 216) = 0u;
              *(_DWORD *)(v116 + 20) |= 0x40000u;
              WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v207, v121);
              WebCore::RenderElement::initializeStyle(v115, v122, v123, v124);
              v125 = *v49;
              v206 = (uint64_t)v115;
              v207 = 0;
              WebCore::RenderTreeBuilder::attachToRenderElement(v125, (uint64_t)this, (const WebCore::RenderStyle *)&v206, v52);
              if (v206)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v206, v206);
              v126 = *v49;
              v127 = (uint64_t)v204;
              v204 = 0;
              v205 = v127;
              WebCore::RenderTreeBuilder::attach(v126, v115, (unint64_t *)&v205);
              if (v205)
                WebCore::RenderObjectDeleter::operator()((uint64_t)&v205, v205);
              goto LABEL_115;
            }
            if ((*((_BYTE *)v88 + 45) & 0x40) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19428BBC0);
            }
          }
          v141 = *v49;
          v204 = 0;
          v207 = v89;
          WebCore::RenderTreeBuilder::attach(v141, v88, (unint64_t *)&v207);
          goto LABEL_115;
        }
        v190 = (v176 & 0x1F) == 14;
      }
      if (!v190)
        goto LABEL_203;
      goto LABEL_307;
    }
LABEL_77:
    v47 = *(_QWORD *)(a1 + 96);
    v48 = *a3;
    *a3 = 0;
    v199 = v48;
    WebCore::RenderTreeBuilder::SVG::attach(v47, this, &v199, v203);
    v18 = v199;
    if (v199)
    {
      v19 = &v199;
      goto LABEL_17;
    }
    return;
  }
  if (*((unsigned __int8 *)this + 46) > 0x46u)
  {
    if (v7 != 84)
    {
      if (v7 == 83)
      {
        v186 = *(WebCore::RenderTreeBuilder::SVG **)(a1 + 96);
        v187 = *a3;
        *a3 = 0;
        v198 = v187;
        WebCore::RenderTreeBuilder::SVG::attach(v186, (uint64_t)this, (const WTF::StringImpl *)&v198, (uint64_t)v203);
        v18 = v198;
        v198 = 0;
        if (v18)
        {
          v19 = &v198;
          goto LABEL_17;
        }
        return;
      }
      if (v7 != 71)
        goto LABEL_82;
    }
    goto LABEL_77;
  }
  if (v7 == 12)
  {
    v94 = *a3;
    *a3 = 0;
    v95 = *(uint64_t **)(a1 + 72);
    v207 = v94;
    WebCore::RenderTreeBuilder::Block::attach(v95, this, (const WTF::StringImpl *)&v207, v203);
    if (v207)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v207, (uint64_t)v207);
    if ((*((_DWORD *)v94 + 5) & 0x1800000) != 0x1000000)
      WebCore::RenderGrid::dirtyGrid(this, 0);
    return;
  }
  if (v7 != 52)
    goto LABEL_82;
  v45 = *(_QWORD *)(a1 + 104);
  v46 = *a3;
  *a3 = 0;
  v197 = v46;
  WebCore::RenderTreeBuilder::MathML::attach(v45, (WTF::StringImpl **)this, (uint64_t *)&v197, v203);
  v18 = v197;
  v197 = 0;
  if (v18)
  {
    v19 = &v197;
    goto LABEL_17;
  }
}

void WebCore::RenderTreeBuilder::BlockFlow::attach(uint64_t *a1, WebCore::RenderObject *this, WebCore::RenderObject **a3, WebCore::RenderObject *a4)
{
  uint64_t v4;
  uint64_t *v5;
  WebCore::RenderObject *v6;
  WebCore::RenderObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  WebCore::RenderTable *v14;
  uint64_t *v15;
  WebCore::RenderObject *v16;
  WebCore::RenderObject **v17;
  _BOOL4 isFieldset;
  WebCore::RenderObject *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  WebCore::RenderObject **v24;
  WebCore::RenderObject *v25;
  WebCore::RenderObject *v26;
  WebCore::RenderTreeBuilder::MultiColumn *v27;
  uint64_t *v28;
  uint64_t v29;
  WebCore::RenderBlock *v30;
  WebCore::RenderObject **v31;
  WebCore::RenderObject *v32;
  WebCore::RenderObject *v33;
  WebCore::RenderObject *v34;
  WebCore::RenderObject *v35;

  v4 = *((_QWORD *)this + 28);
  if (!v4 || (v13 = *(_QWORD *)(v4 + 24)) == 0 || (v14 = *(WebCore::RenderTable **)(v13 + 8)) == 0)
  {
    if ((*((_BYTE *)this + 23) & 0x10) != 0)
    {
      v23 = a1;
      v24 = a3;
      v25 = a4;
      v26 = this;
      v27 = (WebCore::RenderTreeBuilder::MultiColumn *)(*(uint64_t (**)(WebCore::RenderObject *))(*(_QWORD *)this + 648))(this);
      if (v27)
        a4 = WebCore::RenderTreeBuilder::MultiColumn::resolveMovedChild(v27, v27, v25);
      else
        a4 = v25;
      a3 = v24;
      this = v26;
      a1 = v23;
    }
    v5 = *(uint64_t **)(*a1 + 72);
    v6 = *a3;
    *a3 = 0;
    v32 = v6;
    WebCore::RenderTreeBuilder::Block::attach(v5, this, (const WTF::StringImpl *)&v32, a4);
    v7 = v32;
    if (v32)
    {
      v8 = *((_QWORD *)v32 + 4);
      if (v8 && *(_QWORD *)(v8 + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x19428BD44);
      }
      v9 = *(unsigned int *)((char *)v32 + 47);
      if (v9 | ((unint64_t)*((unsigned __int8 *)v32 + 51) << 32)
        && *(_QWORD *)((v9 | ((unint64_t)*((unsigned __int8 *)v32 + 51) << 32)) + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x19428BDB0);
      }
      v10 = *((unsigned int *)v32 + 10);
      if (v10 | ((unint64_t)*((unsigned __int8 *)v32 + 44) << 32)
        && *(_QWORD *)((v10 | ((unint64_t)*((unsigned __int8 *)v32 + 44) << 32)) + 8))
      {
        __break(0xC471u);
        JUMPOUT(0x19428BDD8);
      }
      v11 = *((_DWORD *)v32 + 5);
      if ((v11 & 4) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19428BD64);
      }
      *((_DWORD *)v32 + 5) = v11 | 4;
      (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 640))(v7);
      v12 = (*((_BYTE *)v7 + 52) & 7) != 3 || (*((_BYTE *)v7 + 53) & 4) == 0;
      if (v12 || *((_DWORD *)v7 + 56) == 1)
        (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 56);
    }
    return;
  }
  v15 = a1;
  v16 = a4;
  v30 = this;
  v17 = a3;
  isFieldset = WebCore::RenderObject::isFieldset(this);
  v31 = v17;
  v19 = *v17;
  if (!isFieldset)
    goto LABEL_37;
  if (WebCore::RenderObject::isLegend(v19))
  {
    v20 = *(uint64_t **)(*v15 + 72);
    *v31 = 0;
    v35 = v19;
    WebCore::RenderTreeBuilder::Block::attach(v20, v30, (const WTF::StringImpl *)&v35, 0);
    v21 = (uint64_t)v35;
    if (v35)
    {
      v22 = (unint64_t *)&v35;
LABEL_39:
      WebCore::RenderObjectDeleter::operator()((uint64_t)v22, v21);
      return;
    }
    return;
  }
  if (!v16 || !WebCore::RenderObject::isLegend(v16))
  {
LABEL_37:
    v29 = *v15;
    *v31 = 0;
    v33 = v19;
    WebCore::RenderTreeBuilder::attach(v29, v14, (unint64_t *)&v33);
    v21 = (uint64_t)v33;
    v33 = 0;
    if (v21)
    {
      v22 = (unint64_t *)&v33;
      goto LABEL_39;
    }
    return;
  }
  v28 = *(uint64_t **)(*v15 + 72);
  *v31 = 0;
  v34 = v19;
  WebCore::RenderTreeBuilder::Block::attach(v28, v14, (const WTF::StringImpl *)&v34, 0);
  v21 = (uint64_t)v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34;
    goto LABEL_39;
  }
}

void WebCore::RenderTreeBuilder::Block::attach(uint64_t *a1, WebCore::RenderBlock *a2, const WTF::StringImpl *a3, WebCore::RenderObject *a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  char v31;
  WTF *v32;
  int v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  WebCore::AXObjectCache *v40;
  uint64_t *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::RenderElement *v52;
  uint64_t v53;
  WebCore::AXObjectCache **v54;
  WebCore::RenderBlock **v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  const WebCore::Element *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  WebCore::LayoutIntegration::LineLayout *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  WebCore::RenderObject *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned __int8 v88;
  int v89;
  char v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  WebCore::RenderObject *v96;
  int v97;
  char v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  WebCore::RenderObject *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  WebCore::WillChangeData *v117;
  uint64_t v118;
  char v119;
  int v120;
  char v121;
  char v122;
  uint64_t v123;
  int v124;
  WebCore::RenderElement *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  WebCore::WillChangeData *v130;
  uint64_t v131;
  char v132;
  int v133;
  char v134;
  char v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  WebCore::WillChangeData *v140;
  uint64_t v141;
  char v142;
  int v143;
  char v144;
  char v145;
  unint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  int j;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WebCore::RenderObject *v158;
  WebCore::RenderObject *v159;
  uint64_t v160;
  _DWORD *v162;
  int v163;
  WebCore::RenderObject *v164;
  int v165;
  WebCore::RenderObject *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  char v173;
  WTF *v174;
  uint64_t v175;
  WTF *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  WTF *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WebCore::RenderTable *v213;
  int v214;
  BOOL v215;
  WebCore::RenderTable *v216;
  WTF *v217;
  WTF *v218;
  WTF *v219;
  WTF *v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int v234;
  WebCore::RenderTreeBuilder *v235;
  const WTF::StringImpl *v236;
  WebCore::RenderObject *v237;
  uint64_t v238;
  char v239;
  int v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  WebCore::RenderBlock *v245;
  WebCore::RenderTextFragment *v246;
  uint64_t v247;
  int v248;
  BOOL v250;
  int v251;
  int v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  BOOL v256;
  WebCore::AXObjectCache **v257;
  WebCore::AXObjectCache *v258;
  WebCore::AXObjectCache *v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  WebCore::AXObjectCache *v263;
  WebCore::AXObjectCache *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  WebCore::RenderBlock *v268;
  _BYTE *v269;
  WebCore::AXObjectCache *v270;
  WebCore::RenderTable *v271;
  WebCore::AXObjectCache **v272;
  WebCore::RenderBlock **v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;

  if ((*(_WORD *)((_BYTE *)a2 + 69) & 0x10) == 0)
    goto LABEL_2;
  ++dword_1ECE91378;
  v190 = *((_QWORD *)a2 + 1);
  v191 = *(_DWORD *)(WebCore::continuationChainNodeMap(void)::map - 8);
  v192 = (~(v190 << 32) + v190) ^ ((unint64_t)(~(v190 << 32) + v190) >> 22);
  v193 = 9 * ((v192 + ~(v192 << 13)) ^ ((v192 + ~(v192 << 13)) >> 8));
  v194 = (v193 ^ (v193 >> 15)) + ~((v193 ^ (v193 >> 15)) << 27);
  v195 = v191 & ((v194 >> 31) ^ v194);
  v196 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v195);
  if (v196 == -1 || v196 != v190)
  {
    v206 = 1;
    do
    {
      v195 = ((_DWORD)v195 + v206) & v191;
      v207 = *(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v195);
      ++v206;
    }
    while (v207 == -1 || v207 != v190);
  }
  v198 = *(uint64_t **)(*(_QWORD *)(WebCore::continuationChainNodeMap(void)::map + 16 * v195 + 8) + 16);
  if (!v198)
    goto LABEL_2;
  v199 = *v198;
  if (!v199 || !*(_QWORD *)(v199 + 8))
    goto LABEL_2;
  if ((*((_BYTE *)a2 + 45) & 1) == 0)
    goto LABEL_430;
  v236 = a3;
  v237 = a4;
  if ((*((_BYTE *)a2 + 45) & 2) != 0)
  {
    v238 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 8) + 96);
    v250 = (v238 & 0x1F) == 1 || (v238 & 0x1F) == 14;
LABEL_684:
    if (!v250)
      goto LABEL_430;
    goto LABEL_618;
  }
  v238 = *((_QWORD *)a2 + 12);
  if ((v238 & 0x1F) != 1)
  {
    v250 = (v238 & 0x1F) == 14;
    goto LABEL_684;
  }
LABEL_618:
  if ((*((_BYTE *)a2 + 45) & 0x40) == 0
    || (v238 & 0xF80000000000) != 0
    || (v239 = (*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)a2 + 176))(a2),
        a3 = v236,
        a4 = v237,
        (v239 & 1) != 0)
    || (v240 = *((unsigned __int8 *)a2 + 46), v240 == 20))
  {
LABEL_430:
    v200 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v263 = (WebCore::AXObjectCache *)v200;
    WebCore::RenderTreeBuilder::Block::insertChildToContinuation(a1, (uint64_t *)a2, (uint64_t *)&v263, a4);
    v40 = v263;
    if (v263)
    {
      v41 = (uint64_t *)&v263;
      goto LABEL_180;
    }
    return;
  }
  if ((*((_BYTE *)a2 + 52) & 7) == 1)
  {
    a4 = v237;
    a3 = v236;
    if ((*((_BYTE *)a2 + 53) & 2) != 0 || v240 == 26)
      goto LABEL_430;
  }
  else
  {
    a4 = v237;
    a3 = v236;
    if (v240 == 26)
      goto LABEL_430;
  }
  if (v240 == 49)
    goto LABEL_430;
LABEL_2:
  v6 = 0;
  v7 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  if (a4)
  {
    v205 = *((_QWORD *)a4 + 4);
    if (v205 && *(WebCore::RenderBlock **)(v205 + 8) == a2)
    {
      v6 = (uint64_t)a4;
    }
    else
    {
      v6 = (uint64_t)a4;
      WebCore::findParentAndBeforeChildForNonSibling((uint64_t)&v271, a2, (const WebCore::RenderObject *)v7, a4);
      if ((_BYTE)v273)
      {
        v235 = (WebCore::RenderTreeBuilder *)*a1;
        if (v271)
        {
          v270 = (WebCore::AXObjectCache *)v7;
          WebCore::RenderTreeBuilder::attach((uint64_t)v235, v271, (unint64_t *)&v270);
          v40 = v270;
          if (v270)
          {
            v41 = (uint64_t *)&v270;
            goto LABEL_180;
          }
          return;
        }
        v246 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(v235, a2, (WebCore::RenderObject *)v6);
        v247 = *((_QWORD *)v246 + 4);
        if (!v247 || (v6 = (uint64_t)v246, *(WebCore::RenderBlock **)(v247 + 8) != a2))
        {
          __break(0xC471u);
          JUMPOUT(0x19428DFFCLL);
        }
      }
    }
  }
  v8 = *(_DWORD *)(v7 + 20);
  v9 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x800) != 0 || (v8 & 0x1800000) == 0x1000000)
  {
    if ((v9 & 0x40000) == 0 && (*((char *)a2 + 45) & 0x80000000) == 0 && *((_BYTE *)a2 + 46) != 12)
    {
      if (v6)
      {
        v183 = *(unsigned __int8 *)(v6 + 44);
        v184 = *(unsigned int *)(v6 + 40);
      }
      else
      {
        v183 = *((unsigned __int8 *)a2 + 75);
        v184 = *(unsigned int *)((char *)a2 + 71);
      }
      v185 = v184 | (v183 << 32);
      if (v185)
      {
        v50 = *(_QWORD *)(v185 + 8);
        if (v50)
        {
          if ((*(_BYTE *)(v50 + 45) & 1) != 0)
          {
            v186 = (*(_BYTE *)(v50 + 45) & 2) != 0
                 ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 32) + 8) + 96)
                 : *(_QWORD *)(v50 + 96);
            if (((v186 & 0x1F) == 1 || (v186 & 0x1F) == 14)
              && (*(_BYTE *)(v50 + 45) & 0x40) != 0
              && (v186 & 0xF80000000000) == 0
              && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 176))(v50) & 1) == 0)
            {
              v188 = *(unsigned __int8 *)(v50 + 46);
              if (v188 != 20)
              {
                if ((*(_BYTE *)(v50 + 52) & 7) == 1)
                {
                  if ((*(_BYTE *)(v50 + 53) & 2) == 0 && v188 != 26)
                  {
                    v189 = v50;
                    if (v188 != 49)
                      goto LABEL_419;
                  }
                }
                else if (v188 != 49)
                {
                  v189 = v50;
                  if (v188 != 26)
                  {
LABEL_419:
                    if ((*(_BYTE *)(v189 + 45) & 0x40) == 0)
                    {
                      __break(0xC471u);
                      goto LABEL_784;
                    }
LABEL_449:
                    v204 = *a1;
                    v271 = (WebCore::RenderTable *)v7;
                    WebCore::RenderTreeBuilder::attach(v204, (WebCore::RenderTable *)v50, (unint64_t *)&v271);
                    goto LABEL_81;
                  }
                }
              }
            }
          }
        }
      }
    }
    v39 = *a1;
    v271 = (WebCore::RenderTable *)v7;
    WebCore::RenderTreeBuilder::attachToRenderElement(v39, (uint64_t)a2, (const WebCore::RenderStyle *)&v271, v6);
LABEL_81:
    v40 = v271;
    if (!v271)
      return;
    v41 = (uint64_t *)&v271;
    goto LABEL_180;
  }
  if ((v9 & 0x40000) == 0)
  {
    if ((v8 & 1) != 0)
      goto LABEL_28;
    if (v6)
    {
      v47 = *(unsigned __int8 *)(v6 + 44);
      v48 = *(unsigned int *)(v6 + 40);
    }
    else
    {
      v47 = *((unsigned __int8 *)a2 + 75);
      v48 = *(unsigned int *)((char *)a2 + 71);
    }
    v49 = v48 | (v47 << 32);
    if (!v49
      || (v50 = *(_QWORD *)(v49 + 8)) == 0
      || (*(_BYTE *)(v50 + 45) & 1) == 0
      || ((*(_BYTE *)(v50 + 45) & 2) != 0
        ? (v201 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 32) + 8) + 96))
        : (v201 = *(_QWORD *)(v50 + 96)),
          (v201 & 0x1F) != 1 ? (v202 = (v201 & 0x1F) == 14) : (v202 = 1),
          !v202
       || (*(_BYTE *)(v50 + 45) & 0x40) == 0
       || (v201 & 0xF80000000000) != 0
       || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 176))(v50) & 1) != 0
       || (v203 = *(unsigned __int8 *)(v50 + 46), v203 == 20)
       || (*(_BYTE *)(v50 + 52) & 7) == 1 && (*(_BYTE *)(v50 + 53) & 2) != 0
       || v203 == 26
       || v203 == 49))
    {
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
      WebCore::RenderStyle::createAnonymousStyleWithDisplay((_QWORD *)a2 + 10, (WTF::StringImpl *)1, a3, (uint64_t)&v271);
      v52 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
      v53 = WebCore::RenderObject::RenderObject((uint64_t)v52, 1, v51, 92, 1);
      *(_QWORD *)v53 = off_1E3422BC8;
      *(_QWORD *)(v53 + 64) = 0;
      *(_QWORD *)(v53 + 70) = 0;
      *(_DWORD *)(v53 + 80) = 0;
      v54 = v272;
      v55 = v273;
      v272 = 0;
      *(_QWORD *)(v53 + 88) = v54;
      *(_QWORD *)(v53 + 96) = v55;
      v56 = v274;
      v274 = 0u;
      *(_OWORD *)(v53 + 104) = v56;
      *(_QWORD *)(v53 + 120) = v275;
      v57 = v276;
      v276 = 0u;
      *(_OWORD *)(v53 + 128) = v57;
      *(_OWORD *)(v53 + 144) = 0u;
      *(_OWORD *)(v53 + 160) = 0u;
      *(_OWORD *)(v53 + 176) = 0u;
      *(_QWORD *)(v53 + 192) = 0;
      *(_QWORD *)v53 = off_1E341F9F8;
      *(_DWORD *)(v53 + 200) = -1;
      *(_BYTE *)(v53 + 204) &= 0xFCu;
      *(_BYTE *)(v53 + 208) = 0;
      *(_BYTE *)(v53 + 212) = 0;
      *(_DWORD *)(v53 + 240) = 0;
      *(_OWORD *)(v53 + 216) = 0u;
      *(_DWORD *)(v53 + 20) |= 0x40000u;
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v271, v58);
      WebCore::RenderElement::initializeStyle(v52, v59, v60, v61);
      v62 = *a1;
      v270 = v52;
      v271 = 0;
      WebCore::RenderTreeBuilder::attachToRenderElement(v62, (uint64_t)a2, (const WebCore::RenderStyle *)&v270, v6);
      if (v270)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v270, (uint64_t)v270);
      v63 = *a1;
      v269 = (_BYTE *)v7;
      WebCore::RenderTreeBuilder::attach(v63, v52, (unint64_t *)&v269);
      if (v269)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v269, (uint64_t)v269);
      goto LABEL_81;
    }
    if ((*(_BYTE *)(v50 + 45) & 0x40) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19428E434);
    }
    goto LABEL_449;
  }
  if ((v8 & 1) == 0)
  {
LABEL_28:
    v16 = *a1;
    v264 = (WebCore::AXObjectCache *)v7;
    switch(*(_BYTE *)(v7 + 46))
    {
      case '$':
      case '(':
        v209 = *((unsigned __int8 *)a2 + 46);
        goto LABEL_492;
      case '%':
        if (*((_BYTE *)a2 + 46) != 39)
          goto LABEL_494;
        goto LABEL_29;
      case '&':
        v209 = *((unsigned __int8 *)a2 + 46);
        if (v209 == 38 && (*(_QWORD *)(v7 + 96) & 0x1FLL) == 11)
          goto LABEL_29;
LABEL_492:
        if (v209 != 35 && v209 != 63)
        {
LABEL_494:
          if (v6)
          {
            v210 = *(unsigned __int8 *)(v6 + 44);
            v211 = *(unsigned int *)(v6 + 40);
          }
          else
          {
            v210 = *((unsigned __int8 *)a2 + 75);
            v211 = *(unsigned int *)((char *)a2 + 71);
          }
          v212 = v211 | (v210 << 32);
          if (!v212
            || (v213 = *(WebCore::RenderTable **)(v212 + 8)) == 0
            || ((v214 = *((unsigned __int8 *)v213 + 46), v214 != 63) ? (v215 = v214 == 35) : (v215 = 1),
                !v215
             || (*((_BYTE *)v213 + 45) & 1) == 0
             || (*((_BYTE *)v213 + 45) & 2) == 0 && (*((_QWORD *)v213 + 12) & 0xF80000000000) == 0x300000000000))
          {
            WebCore::RenderTable::createAnonymousWithParentRenderer(a2, a3, &v271);
            v213 = v271;
            v271 = 0;
            v267 = (uint64_t)v213;
            WebCore::RenderTreeBuilder::attach(v16, a2, (unint64_t *)&v267);
            if (v267)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v267, v267);
            v216 = v271;
            v271 = 0;
            if (v216)
              WebCore::RenderObjectDeleter::operator()((uint64_t)&v271, (uint64_t)v216);
            v7 = (unint64_t)v264;
          }
          v266 = v7;
          WebCore::RenderTreeBuilder::attach(v16, v213, &v266);
          v40 = (WebCore::AXObjectCache *)v266;
          if (v266)
          {
            v41 = (uint64_t *)&v266;
            goto LABEL_180;
          }
          return;
        }
LABEL_29:
        v264 = 0;
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                    + 1944)
                        + 248);
        v18 = *(unsigned int *)(v17 + 508);
        if ((_DWORD)v18 && *(_QWORD *)(*(_QWORD *)(v17 + 496) + 8 * v18 - 8))
        {
          __break(0xC471u);
          JUMPOUT(0x19428D784);
        }
        if (v6)
        {
          while (1)
          {
            v182 = *(_QWORD *)(v6 + 32);
            if (!v182)
              break;
            v19 = v6;
            v6 = *(_QWORD *)(v182 + 8);
            if (!v6)
              break;
            if ((WebCore::RenderBlock *)v6 == a2)
              goto LABEL_33;
          }
        }
        v19 = 0;
LABEL_33:
        v265 = 0;
        v20 = *((_QWORD *)a2 + 1);
        if (v20)
          goto LABEL_34;
        v20 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = a2;
        v42 = (WTF *)*((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v20;
        if (!v42)
          goto LABEL_34;
        if (*(_DWORD *)v42 != 1)
        {
          --*(_DWORD *)v42;
LABEL_34:
          ++*(_DWORD *)v20;
          goto LABEL_35;
        }
        WTF::fastFree(v42, a2);
        v20 = *((_QWORD *)a2 + 1);
        if (v20)
          goto LABEL_34;
LABEL_35:
        v21 = *(WTF **)(v7 + 32);
        *(_QWORD *)(v7 + 32) = v20;
        if (v21)
        {
          if (*(_DWORD *)v21 == 1)
            WTF::fastFree(v21, a2);
          else
            --*(_DWORD *)v21;
        }
        v22 = *((unsigned int *)a2 + 16);
        v23 = v22 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32);
        if (v23)
          v23 = *(_QWORD *)((v22 | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32)) + 8);
        if (v23 != v19)
          goto LABEL_46;
        v24 = *(_QWORD *)(v7 + 8);
        if (v24)
          goto LABEL_42;
        v24 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = v7;
        v46 = *(WTF **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = v24;
        if (!v46)
          goto LABEL_42;
        if (*(_DWORD *)v46 == 1)
        {
          WTF::fastFree(v46, a2);
          v24 = *(_QWORD *)(v7 + 8);
          if (!v24)
          {
LABEL_43:
            v25 = (WTF *)(*((unsigned int *)a2 + 16) | ((unint64_t)*((unsigned __int8 *)a2 + 68) << 32));
            *((_DWORD *)a2 + 16) = v24;
            *((_BYTE *)a2 + 68) = BYTE4(v24);
            if (v25)
            {
              if (*(_DWORD *)v25 == 1)
                WTF::fastFree(v25, a2);
              else
                --*(_DWORD *)v25;
            }
LABEL_46:
            if (!v19)
            {
              v26 = *(unsigned int *)((char *)a2 + 71);
              if (v26 | ((unint64_t)*((unsigned __int8 *)a2 + 75) << 32))
              {
                v27 = *(_QWORD *)((v26 | ((unint64_t)*((unsigned __int8 *)a2 + 75) << 32)) + 8);
                if (v27)
                {
                  ++*(_DWORD *)(v27 + 16);
                  v28 = *(_QWORD *)(v7 + 8);
                  if (!v28)
                  {
                    v28 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v28 = 1;
                    *(_QWORD *)(v28 + 8) = v7;
                    v44 = *(WTF **)(v7 + 8);
                    *(_QWORD *)(v7 + 8) = v28;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 1)
                      {
                        WTF::fastFree(v44, a2);
                        v28 = *(_QWORD *)(v7 + 8);
                        if (!v28)
                          goto LABEL_51;
                      }
                      else
                      {
                        --*(_DWORD *)v44;
                      }
                    }
                  }
                  ++*(_DWORD *)v28;
LABEL_51:
                  v29 = (WTF *)(*(unsigned int *)(v27 + 47) | ((unint64_t)*(unsigned __int8 *)(v27 + 51) << 32));
                  *(_DWORD *)(v27 + 47) = v28;
                  *(_BYTE *)(v27 + 51) = BYTE4(v28);
                  if (v29)
                  {
                    if (*(_DWORD *)v29 == 1)
                      WTF::fastFree(v29, a2);
                    else
                      --*(_DWORD *)v29;
                  }
                  v30 = *(_QWORD *)(v27 + 8);
                  if (v30)
                    goto LABEL_55;
                  v30 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v30 = 1;
                  *(_QWORD *)(v30 + 8) = v27;
                  v45 = *(WTF **)(v27 + 8);
                  *(_QWORD *)(v27 + 8) = v30;
                  if (!v45)
                    goto LABEL_55;
                  if (*(_DWORD *)v45 != 1)
                  {
                    --*(_DWORD *)v45;
LABEL_55:
                    v31 = 0;
                    ++*(_DWORD *)v30;
                    goto LABEL_56;
                  }
                  WTF::fastFree(v45, a2);
                  v30 = *(_QWORD *)(v27 + 8);
                  if (v30)
                    goto LABEL_55;
                  v31 = 0;
LABEL_56:
                  v32 = (WTF *)(*(unsigned int *)(v7 + 40) | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32));
                  *(_DWORD *)(v7 + 40) = v30;
                  *(_BYTE *)(v7 + 44) = BYTE4(v30);
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 1)
                      WTF::fastFree(v32, a2);
                    else
                      --*(_DWORD *)v32;
                  }
                  if ((v31 & 1) == 0)
                  {
                    v33 = *(_DWORD *)(v27 + 16);
                    if (!v33)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19428D7E4);
                    }
                    *(_DWORD *)(v27 + 16) = v33 - 1;
                  }
                  v34 = *(_QWORD *)(v7 + 8);
                  if (!v34)
                  {
                    v34 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v34 = 1;
                    *(_QWORD *)(v34 + 8) = v7;
                    v43 = *(WTF **)(v7 + 8);
                    *(_QWORD *)(v7 + 8) = v34;
                    if (v43)
                    {
                      if (*(_DWORD *)v43 == 1)
                      {
                        WTF::fastFree(v43, a2);
                        v34 = *(_QWORD *)(v7 + 8);
                        if (!v34)
                        {
LABEL_64:
                          v35 = (WTF *)(*(unsigned int *)((char *)a2 + 71) | ((unint64_t)*((unsigned __int8 *)a2
                                                                                                + 75) << 32));
                          *(_DWORD *)((char *)a2 + 71) = v34;
                          *((_BYTE *)a2 + 75) = BYTE4(v34);
                          if (v35)
                          {
                            if (*(_DWORD *)v35 == 1)
                              WTF::fastFree(v35, a2);
                            else
                              --*(_DWORD *)v35;
                          }
LABEL_67:
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8)
                                        + 3405))
                            goto LABEL_172;
                          (*(void (**)(unint64_t))(*(_QWORD *)v7 + 608))(v7);
                          if (*(unsigned __int8 *)(v7 + 46) - 32 <= 0xFFFFFFFD)
                          {
                            for (i = *(_QWORD *)(v7 + 32); i; i = *(_QWORD *)(v38 + 32))
                            {
                              v38 = *(_QWORD *)(i + 8);
                              if (!v38 || (*(_BYTE *)(v38 + 22) & 4) == 0)
                                break;
                              if ((*(_BYTE *)(v38 + 52) & 7) == 1)
                              {
                                v64 = *(_DWORD *)(v38 + 16) + 1;
                                *(_DWORD *)(v38 + 16) = v64;
                                if (*(_DWORD *)(v38 + 240) == 1)
                                {
                                  v65 = *(WebCore::LayoutIntegration::LineLayout **)(v38 + 232);
                                  if (v65
                                    && (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v38, v7, *(_QWORD *)(v38 + 232), 0)|| (WebCore::LayoutIntegration::LineLayout::insertedIntoTree(v65, *(const WebCore::RenderElement **)(*(_QWORD *)(v7 + 32) + 8), (WebCore::RenderObject *)v7) & 1) == 0))
                                  {
                                    WebCore::RenderBlockFlow::invalidateLineLayoutPath(v38, 1);
                                  }
                                  v64 = *(_DWORD *)(v38 + 16);
                                }
                                if (!v64)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19428DDA8);
                                }
                                *(_DWORD *)(v38 + 16) = v64 - 1;
                                break;
                              }
                            }
                          }
                          if (*(_BYTE *)(v16 + 121))
                          {
LABEL_159:
                            v82 = *(_DWORD *)(v7 + 20);
                            if ((v82 & 8) != 0)
                            {
LABEL_162:
                              *(_DWORD *)(v7 + 20) = v82 | 0x2000;
                              if ((v82 & 0x2000) != 0)
                                goto LABEL_163;
                              v90 = *(_BYTE *)(v7 + 45);
                              if ((v90 & 2) == 0 && (*(_QWORD *)(v7 + 96) & 0x180000) == 0x100000)
                                goto LABEL_163;
                              v91 = *(unsigned __int8 *)(v7 + 46);
                              if (v91 == 37)
                              {
                                v96 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7);
                                goto LABEL_196;
                              }
                              v269 = 0;
                              v270 = 0;
                              if ((v90 & 2) != 0 || v91 == 17)
                                goto LABEL_194;
                              v268 = (WebCore::RenderBlock *)v7;
                              v271 = (WebCore::RenderTable *)&v269;
                              v272 = &v270;
                              v273 = &v268;
                              if ((v90 & 1) == 0)
                              {
                                v92 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
                                if (v92)
                                {
                                  if ((*(_WORD *)(v92 + 28) & 8) == 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19428D918);
                                  }
                                  if ((*(_BYTE *)(v92 + 23) & 0x20) != 0)
                                    goto LABEL_735;
                                }
                              }
                              v93 = *(_QWORD *)(v7 + 96);
                              if ((v93 & 0xF80000000000) == 0x480000000000)
                              {
LABEL_735:
                                WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                                v96 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8)
                                                                                        + 40)
                                                                            + 8)
                                                                + 1944);
LABEL_196:
                                if (v96)
                                {
                                  ++*((_DWORD *)v96 + 4);
                                  while ((*((_BYTE *)v96 + 21) & 0x20) == 0)
                                  {
                                    if (*((_BYTE *)v96 + 46) == 37)
                                      v164 = WebCore::RenderObject::containingBlock(v96);
                                    else
                                      v164 = (WebCore::RenderObject *)WebCore::RenderObject::container(v96);
                                    if (v164)
                                    {
                                      ++*((_DWORD *)v164 + 4);
                                      *((_DWORD *)v96 + 5) |= 0x2000u;
                                      if ((*((_QWORD *)v96 + 12) & 0x180000) == 0x100000)
                                      {
                                        v221 = *((_DWORD *)v164 + 4);
                                        if (!v221)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x19428E28CLL);
                                        }
                                        *((_DWORD *)v164 + 4) = v221 - 1;
                                        break;
                                      }
                                    }
                                    else
                                    {
                                      if (*((_BYTE *)v96 + 46) != 49)
                                        break;
                                      *((_DWORD *)v96 + 5) |= 0x2000u;
                                      if ((*((_QWORD *)v96 + 12) & 0x180000) == 0x100000)
                                        break;
                                    }
                                    v165 = *((_DWORD *)v96 + 4);
                                    if (!v165)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19428DE50);
                                    }
                                    *((_DWORD *)v96 + 4) = v165 - 1;
                                    v96 = v164;
                                    if (!v164)
                                      goto LABEL_163;
                                  }
                                  v97 = *((_DWORD *)v96 + 4);
                                  if (!v97)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19428D8F8);
                                  }
                                  *((_DWORD *)v96 + 4) = v97 - 1;
                                }
LABEL_163:
                                v84 = v7;
                                if ((*(_BYTE *)(v7 + 45) & 2) != 0)
                                  v84 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
                                v85 = *(_QWORD *)(v84 + 96) & 0x180000;
                                v86 = *((_DWORD *)a2 + 5);
                                if (v85 == 0x100000)
                                {
                                  if ((v86 & 0x20) != 0)
                                    goto LABEL_169;
                                  if (WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v7) == a2
                                    && *(_BYTE *)(v7 + 46) != 48)
                                  {
                                    *((_DWORD *)a2 + 5) |= 0x100u;
                                    goto LABEL_169;
                                  }
                                }
                                else
                                {
                                  *((_DWORD *)a2 + 5) = v86 | 0x2000;
                                  if ((v86 & 0x2000) == 0)
                                  {
                                    v98 = *((_BYTE *)a2 + 45);
                                    if ((v98 & 2) != 0 || (*((_QWORD *)a2 + 12) & 0x180000) != 0x100000)
                                    {
                                      v99 = *((unsigned __int8 *)a2 + 46);
                                      if (v99 == 37)
                                      {
                                        v104 = WebCore::RenderObject::containingBlock(a2);
                                        goto LABEL_215;
                                      }
                                      v269 = 0;
                                      v270 = 0;
                                      if ((v98 & 2) != 0 || v99 == 17)
                                        goto LABEL_213;
                                      v268 = a2;
                                      v271 = (WebCore::RenderTable *)&v269;
                                      v272 = &v270;
                                      v273 = &v268;
                                      if ((v98 & 1) == 0)
                                      {
                                        v100 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
                                        if (v100)
                                        {
                                          if ((*(_WORD *)(v100 + 28) & 8) == 0)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x19428D958);
                                          }
                                          if ((*(_BYTE *)(v100 + 23) & 0x20) != 0)
                                            goto LABEL_739;
                                        }
                                      }
                                      v101 = *((_QWORD *)a2 + 12);
                                      if ((v101 & 0xF80000000000) == 0x480000000000)
                                      {
LABEL_739:
                                        WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                                        v104 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8)
                                                                                                 + 40)
                                                                                     + 8)
                                                                         + 1944);
LABEL_215:
                                        if (v104)
                                        {
                                          ++*((_DWORD *)v104 + 4);
                                          while ((*((_BYTE *)v104 + 21) & 0x20) == 0)
                                          {
                                            if (*((_BYTE *)v104 + 46) == 37)
                                              v166 = WebCore::RenderObject::containingBlock(v104);
                                            else
                                              v166 = (WebCore::RenderObject *)WebCore::RenderObject::container(v104);
                                            if (v166)
                                            {
                                              ++*((_DWORD *)v166 + 4);
                                              *((_DWORD *)v104 + 5) |= 0x2000u;
                                              if ((*((_QWORD *)v104 + 12) & 0x180000) == 0x100000)
                                              {
                                                v222 = *((_DWORD *)v166 + 4);
                                                if (!v222)
                                                {
                                                  __break(0xC471u);
                                                  JUMPOUT(0x19428E32CLL);
                                                }
                                                *((_DWORD *)v166 + 4) = v222 - 1;
                                                break;
                                              }
                                            }
                                            else
                                            {
                                              if (*((_BYTE *)v104 + 46) != 49)
                                                break;
                                              *((_DWORD *)v104 + 5) |= 0x2000u;
                                              if ((*((_QWORD *)v104 + 12) & 0x180000) == 0x100000)
                                                break;
                                            }
                                            v167 = *((_DWORD *)v104 + 4);
                                            if (!v167)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x19428DE9CLL);
                                            }
                                            *((_DWORD *)v104 + 4) = v167 - 1;
                                            v104 = v166;
                                            if (!v166)
                                              goto LABEL_167;
                                          }
                                          v105 = *((_DWORD *)v104 + 4);
                                          if (!v105)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x19428D938);
                                          }
                                          *((_DWORD *)v104 + 4) = v105 - 1;
                                        }
                                        goto LABEL_167;
                                      }
                                      v102 = (v101 >> 19) & 7;
                                      if (v102 <= 3 && v102 != 2)
                                      {
LABEL_213:
                                        v103 = *((_QWORD *)a2 + 4);
                                        if (v103)
                                        {
                                          v104 = *(WebCore::RenderObject **)(v103 + 8);
                                          goto LABEL_215;
                                        }
                                        goto LABEL_580;
                                      }
                                      v126 = *((_QWORD *)a2 + 4);
                                      if (v126)
                                      {
                                        v127 = *(_QWORD *)(v126 + 8);
                                        if (v127)
                                          ++*(_DWORD *)(v127 + 16);
                                      }
                                      else
                                      {
                                        v127 = 0;
                                      }
                                      if (v102 == 2)
                                      {
                                        if (v127)
                                        {
                                          while (1)
                                          {
                                            v128 = *(unsigned __int8 *)(v127 + 46);
                                            if (v128 == 49 || (*(_BYTE *)(v127 + 98) & 0x38) != 0)
                                              break;
                                            if (((*(_BYTE *)(v127 + 45) & 0x40) != 0
                                               || (v128 - 36) <= 4 && v128 != 38)
                                              && (*(_BYTE *)(v127 + 22) & 2) != 0)
                                            {
                                              break;
                                            }
                                            v129 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 40);
                                            if (*(_DWORD *)(*(_QWORD *)(v129 + 72) + 20))
                                            {
                                              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 24)
                                                                                                 + 8)
                                                                                     + 40)
                                                                         + 8)
                                                             + 1272) != *(_QWORD *)(*(_QWORD *)(v127 + 24) + 8))
                                                break;
                                            }
                                            if ((*(_BYTE *)(v127 + 45) & 0x40) != 0)
                                            {
                                              v130 = *(WebCore::WillChangeData **)(v129 + 200);
                                              if (v130)
                                              {
                                                if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v130, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 24) + 8)+ 40)+ 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v127 + 24) + 8)) & 1) != 0)break;
                                                v128 = *(unsigned __int8 *)(v127 + 46);
                                              }
                                            }
                                            if (v128 == 67 || v128 == 90)
                                              break;
                                            v131 = *(_QWORD *)(*(_QWORD *)(v127 + 88) + 40);
                                            v132 = *(_BYTE *)(v131 + 462);
                                            v133 = *(_BYTE *)(v131 + 642) & 3;
                                            v134 = v132 | 0x19;
                                            if (v133 == 1)
                                              v132 |= 0x15u;
                                            v135 = v133 == 2 ? v134 : v132;
                                            if ((v135 & 3) != 0
                                              && ((*(_BYTE *)(v127 + 20) & 1) != 0
                                               || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v127))
                                              && (*(_QWORD *)(v127 + 96) & 0x1FLL) != 0x19
                                              && (*(unsigned __int8 *)(v127 + 46) - 36 > 4
                                               || (*(_BYTE *)(v127 + 52) & 7) == 1))
                                            {
                                              break;
                                            }
                                            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 88) + 40) + 636) & 0xC0000) != 0
                                              && ((*(_BYTE *)(v127 + 20) & 1) != 0
                                               || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v127))
                                              && (*(_QWORD *)(v127 + 96) & 0x1FLL) != 0x19)
                                            {
                                              v251 = *(unsigned __int8 *)(v127 + 46);
                                              if ((v251 - 36) <= 4)
                                              {
                                                if (v251 == 36)
                                                  break;
                                              }
                                              else if (v251 != 63 && v251 != 35)
                                              {
                                                break;
                                              }
                                            }
                                            if (v269 && (WebCore::AXObjectCache *)v127 == v270)
                                              *v269 = 1;
                                            v136 = *(_QWORD *)(v127 + 32);
                                            if (v136)
                                            {
                                              v136 = *(_QWORD *)(v136 + 8);
                                              if (v136)
                                                ++*(_DWORD *)(v136 + 16);
                                            }
                                            v137 = *(_DWORD *)(v127 + 16);
                                            if (!v137)
                                            {
                                              __break(0xC471u);
                                              JUMPOUT(0x19428DC6CLL);
                                            }
                                            v104 = 0;
                                            *(_DWORD *)(v127 + 16) = v137 - 1;
                                            v127 = v136;
                                            if (!v136)
                                              goto LABEL_215;
                                          }
LABEL_692:
                                          v104 = (WebCore::RenderObject *)v127;
LABEL_693:
                                          v242 = *(_DWORD *)(v127 + 16);
                                          if (!v242)
                                          {
                                            __break(0xC471u);
                                            JUMPOUT(0x19428E128);
                                          }
LABEL_694:
                                          *(_DWORD *)(v127 + 16) = v242 - 1;
                                          goto LABEL_215;
                                        }
                                      }
                                      else if (v127)
                                      {
                                        while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v127))
                                        {
                                          if ((*(_BYTE *)(v127 + 45) & 1) == 0)
                                          {
                                            v227 = *(_QWORD *)(*(_QWORD *)(v127 + 24) + 8);
                                            if (v227)
                                            {
                                              if ((*(_WORD *)(v227 + 28) & 8) == 0)
                                              {
                                                __break(0xC471u);
                                                JUMPOUT(0x19428E2CCLL);
                                              }
                                              if ((*(_BYTE *)(v227 + 23) & 0x20) != 0)
                                                goto LABEL_737;
                                            }
                                          }
                                          if ((*(_QWORD *)(v127 + 96) & 0xF80000000000) == 0x480000000000)
                                          {
LABEL_737:
                                            WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                                            v104 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8) + 40)
                                                                                         + 8)
                                                                             + 1944);
                                            goto LABEL_693;
                                          }
                                          if (v269 && (WebCore::AXObjectCache *)v127 == v270)
                                            *v269 = 1;
                                          v228 = *(_QWORD *)(v127 + 32);
                                          if (!v228)
                                          {
                                            v242 = *(_DWORD *)(v127 + 16);
                                            if (!v242)
                                            {
LABEL_723:
                                              __break(0xC471u);
                                              JUMPOUT(0x19428E2ACLL);
                                            }
                                            v104 = 0;
                                            goto LABEL_694;
                                          }
                                          v229 = *(_QWORD *)(v228 + 8);
                                          if (v229)
                                            ++*(_DWORD *)(v229 + 16);
                                          v230 = *(_DWORD *)(v127 + 16);
                                          if (!v230)
                                            goto LABEL_723;
                                          v104 = 0;
                                          *(_DWORD *)(v127 + 16) = v230 - 1;
                                          v127 = v229;
                                          if (!v229)
                                            goto LABEL_215;
                                        }
                                        goto LABEL_692;
                                      }
LABEL_580:
                                      v104 = 0;
                                      goto LABEL_215;
                                    }
                                  }
                                }
LABEL_167:
                                v87 = *((_DWORD *)a2 + 5);
                                if ((v87 & 0x20) == 0)
                                {
                                  *((_DWORD *)a2 + 5) = v87 | 0x20;
                                  v125 = WebCore::RenderObject::markContainingBlocksForLayout(a2, 0);
                                  WebCore::RenderObject::scheduleLayout(a2, v125);
                                }
LABEL_169:
                                v88 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
                                if ((v88 & 1) != 0)
                                {
                                  v255 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                              + 40)
                                                                                  + 8));
                                  *(_DWORD *)(v255 + 24) += 2;
                                  v271 = (WebCore::RenderTable *)v255;
                                  if (*(_QWORD *)(v255 + 1944))
                                    v256 = *(_BYTE *)(v255 + 3405) == 0;
                                  else
                                    v256 = 0;
                                  if (v256)
                                  {
                                    v257 = (WebCore::AXObjectCache **)v255;
                                    v258 = *(WebCore::AXObjectCache **)(v255 + 1488);
                                    if (v258)
                                    {
                                      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v271);
                                    }
                                    else
                                    {
                                      v259 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                                      v270 = WebCore::AXObjectCache::AXObjectCache(v259, (WebCore::Document *)v257);
                                      std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v257 + 186, &v270);
                                      std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v270);
                                      WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                                      v258 = v257[186];
                                      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v271);
                                      if (!v258)
                                        goto LABEL_170;
                                    }
                                    WebCore::AXObjectCache::childrenChanged(v258, a2, (WebCore::RenderObject *)v7);
                                  }
                                  else
                                  {
                                    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v271);
                                  }
                                }
LABEL_170:
                                if ((*((_BYTE *)a2 + 21) & 0x40) != 0)
                                {
                                  v148 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
                                  v149 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2
                                                                                        + ~((_QWORD)a2 << 32)) >> 22);
                                  v150 = 9 * ((v149 + ~(v149 << 13)) ^ ((v149 + ~(v149 << 13)) >> 8));
                                  v151 = (v150 ^ (v150 >> 15)) + ~((v150 ^ (v150 >> 15)) << 27);
                                  v152 = v148 & ((v151 >> 31) ^ v151);
                                  for (j = 1; ; v152 = (v154 + j++) & v148)
                                  {
                                    v154 = v152;
                                    v155 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v152);
                                    if (v155 != -1 && *(WebCore::RenderBlock **)(v155 + 8) == a2)
                                      break;
                                  }
                                  if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map
                                                            + 16 * v154
                                                            + 8)
                                                + 1))
                                    goto LABEL_338;
                                }
                                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)a2 + 424))(a2)
                                                                       + 8)
                                                           + 16)
                                               + 52) & 0x10) != 0)
                                {
LABEL_338:
                                  v156 = *(unsigned int *)(v7 + 40);
                                  if (!(v156 | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32))
                                    || (v157 = *(_QWORD *)((v156 | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32))
                                                         + 8)) == 0
                                    || *(_BYTE *)(v157 + 46) != 26)
                                  {
                                    *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v7, (void *)v36)+ 1) = 1;
                                  }
                                }
LABEL_172:
                                if (v265)
                                  WebCore::RenderObjectDeleter::operator()((uint64_t)&v265, v265);
                                if ((*(_BYTE *)(v7 + 45) & 2) != 0)
                                {
                                  ++*(_DWORD *)(v7 + 16);
                                  (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 680))(v7, 0, 0);
                                  v89 = *(_DWORD *)(v7 + 16);
                                  if (!v89)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19428D7A4);
                                  }
                                  *(_DWORD *)(v7 + 16) = v89 - 1;
                                }
                                if ((*(_BYTE *)(v7 + 21) & 0x80) != 0
                                  && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3)
                                                                                                + 8)
                                                                                    + 40)
                                                                        + 8)
                                                            + 680)
                                                + 680) & 0x800000000000) == 0)
                                {
                                  v106 = *((_QWORD *)a2 + 4);
                                  if (v106)
                                  {
                                    v107 = *(_QWORD *)(v106 + 8);
                                    if (v107)
                                    {
                                      while (*(_BYTE *)(v107 + 46) != 91
                                           && ((*(_BYTE *)(v107 + 52) & 7) != 4
                                            || (~*(unsigned __int8 *)(v107 + 53) & 9) != 0))
                                      {
                                        v108 = *(_QWORD *)(v107 + 32);
                                        if (v108)
                                        {
                                          v107 = *(_QWORD *)(v108 + 8);
                                          if (v107)
                                            continue;
                                        }
                                        goto LABEL_178;
                                      }
                                      if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x19428DEBCLL);
                                      }
                                      v109 = *(_QWORD *)(v7 + 144);
                                      if (v109)
                                      {
                                        ++*(_DWORD *)(v109 + 8);
                                        WebCore::RenderLayer::removeOnlyThisLayer(v109, 1);
                                        v110 = *(_DWORD *)(v109 + 8);
                                        if (!v110)
                                        {
                                          __break(0xC471u);
                                          JUMPOUT(0x19428DEECLL);
                                        }
                                        *(_DWORD *)(v109 + 8) = v110 - 1;
                                      }
                                      else
                                      {
                                        WebCore::RenderLayer::removeOnlyThisLayer(0, 1);
                                      }
                                    }
                                  }
                                }
LABEL_178:
                                v40 = v264;
                                if (v264)
                                {
                                  v41 = (uint64_t *)&v264;
LABEL_180:
                                  WebCore::RenderObjectDeleter::operator()((uint64_t)v41, (uint64_t)v40);
                                  return;
                                }
                                return;
                              }
                              v94 = (v93 >> 19) & 7;
                              if (v94 <= 3 && v94 != 2)
                              {
LABEL_194:
                                v95 = *(_QWORD *)(v7 + 32);
                                if (v95)
                                {
                                  v96 = *(WebCore::RenderObject **)(v95 + 8);
                                  goto LABEL_196;
                                }
                                goto LABEL_561;
                              }
                              v113 = *(_QWORD *)(v7 + 32);
                              if (v113)
                              {
                                v114 = *(_QWORD *)(v113 + 8);
                                if (v114)
                                  ++*(_DWORD *)(v114 + 16);
                              }
                              else
                              {
                                v114 = 0;
                              }
                              if (v94 == 2)
                              {
                                if (v114)
                                {
                                  while (1)
                                  {
                                    v115 = *(unsigned __int8 *)(v114 + 46);
                                    if (v115 == 49 || (*(_BYTE *)(v114 + 98) & 0x38) != 0)
                                      break;
                                    if (((*(_BYTE *)(v114 + 45) & 0x40) != 0
                                       || (v115 - 36) <= 4 && v115 != 38)
                                      && (*(_BYTE *)(v114 + 22) & 2) != 0)
                                    {
                                      break;
                                    }
                                    v116 = *(_QWORD *)(*(_QWORD *)(v114 + 88) + 40);
                                    if (*(_DWORD *)(*(_QWORD *)(v116 + 72) + 20))
                                    {
                                      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 24) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1272) != *(_QWORD *)(*(_QWORD *)(v114 + 24) + 8))
                                        break;
                                    }
                                    if ((*(_BYTE *)(v114 + 45) & 0x40) != 0)
                                    {
                                      v117 = *(WebCore::WillChangeData **)(v116 + 200);
                                      if (v117)
                                      {
                                        if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v117, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 24)+ 8)+ 40)+ 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v114 + 24) + 8)) & 1) != 0)break;
                                        v115 = *(unsigned __int8 *)(v114 + 46);
                                      }
                                    }
                                    if (v115 == 67 || v115 == 90)
                                      break;
                                    v118 = *(_QWORD *)(*(_QWORD *)(v114 + 88) + 40);
                                    v119 = *(_BYTE *)(v118 + 462);
                                    v120 = *(_BYTE *)(v118 + 642) & 3;
                                    v121 = v119 | 0x19;
                                    if (v120 == 1)
                                      v119 |= 0x15u;
                                    v122 = v120 == 2 ? v121 : v119;
                                    if ((v122 & 3) != 0
                                      && ((*(_BYTE *)(v114 + 20) & 1) != 0
                                       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v114))
                                      && (*(_QWORD *)(v114 + 96) & 0x1FLL) != 0x19
                                      && (*(unsigned __int8 *)(v114 + 46) - 36 > 4
                                       || (*(_BYTE *)(v114 + 52) & 7) == 1))
                                    {
                                      break;
                                    }
                                    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 88) + 40) + 636) & 0xC0000) != 0
                                      && ((*(_BYTE *)(v114 + 20) & 1) != 0
                                       || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v114))
                                      && (*(_QWORD *)(v114 + 96) & 0x1FLL) != 0x19)
                                    {
                                      v248 = *(unsigned __int8 *)(v114 + 46);
                                      if ((v248 - 36) <= 4)
                                      {
                                        if (v248 == 36)
                                          break;
                                      }
                                      else if (v248 != 63 && v248 != 35)
                                      {
                                        break;
                                      }
                                    }
                                    if (v269 && (WebCore::AXObjectCache *)v114 == v270)
                                      *v269 = 1;
                                    v123 = *(_QWORD *)(v114 + 32);
                                    if (v123)
                                    {
                                      v123 = *(_QWORD *)(v123 + 8);
                                      if (v123)
                                        ++*(_DWORD *)(v123 + 16);
                                    }
                                    v124 = *(_DWORD *)(v114 + 16);
                                    if (!v124)
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x19428DC40);
                                    }
                                    v96 = 0;
                                    *(_DWORD *)(v114 + 16) = v124 - 1;
                                    v114 = v123;
                                    if (!v123)
                                      goto LABEL_196;
                                  }
LABEL_671:
                                  v96 = (WebCore::RenderObject *)v114;
LABEL_672:
                                  v241 = *(_DWORD *)(v114 + 16);
                                  if (!v241)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19428E06CLL);
                                  }
LABEL_673:
                                  *(_DWORD *)(v114 + 16) = v241 - 1;
                                  goto LABEL_196;
                                }
                              }
                              else if (v114)
                              {
                                while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v114))
                                {
                                  if ((*(_BYTE *)(v114 + 45) & 1) == 0)
                                  {
                                    v223 = *(_QWORD *)(*(_QWORD *)(v114 + 24) + 8);
                                    if (v223)
                                    {
                                      if ((*(_WORD *)(v223 + 28) & 8) == 0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x19428E244);
                                      }
                                      if ((*(_BYTE *)(v223 + 23) & 0x20) != 0)
                                        goto LABEL_734;
                                    }
                                  }
                                  if ((*(_QWORD *)(v114 + 96) & 0xF80000000000) == 0x480000000000)
                                  {
LABEL_734:
                                    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                                    v96 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8)
                                                                                            + 40)
                                                                                + 8)
                                                                    + 1944);
                                    goto LABEL_672;
                                  }
                                  if (v269 && (WebCore::AXObjectCache *)v114 == v270)
                                    *v269 = 1;
                                  v224 = *(_QWORD *)(v114 + 32);
                                  if (!v224)
                                  {
                                    v241 = *(_DWORD *)(v114 + 16);
                                    if (!v241)
                                    {
LABEL_717:
                                      __break(0xC471u);
                                      JUMPOUT(0x19428E224);
                                    }
                                    v96 = 0;
                                    goto LABEL_673;
                                  }
                                  v225 = *(_QWORD *)(v224 + 8);
                                  if (v225)
                                    ++*(_DWORD *)(v225 + 16);
                                  v226 = *(_DWORD *)(v114 + 16);
                                  if (!v226)
                                    goto LABEL_717;
                                  v96 = 0;
                                  *(_DWORD *)(v114 + 16) = v226 - 1;
                                  v114 = v225;
                                  if (!v225)
                                    goto LABEL_196;
                                }
                                goto LABEL_671;
                              }
LABEL_561:
                              v96 = 0;
                              goto LABEL_196;
                            }
                            *(_DWORD *)(v7 + 20) = v82 | 8;
                            v83 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v7, 0);
                            if (v83)
                            {
                              v36 = (uint64_t)v83;
                              if (*((_BYTE *)v83 + 46) == 49)
                              {
                                v162 = (_DWORD *)*((_QWORD *)v83 + 31);
                                ++v162[2];
                                ++v162[84];
                                WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v162 + 84));
                                v163 = v162[84];
                                if (!v163)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19428D4B8);
                                }
                              }
                              else
                              {
                                v158 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v83 + 3) + 8)
                                                                                         + 40)
                                                                             + 8)
                                                                 + 1944);
                                if (v158 != v83)
                                {
                                  v159 = v83;
                                  while (1)
                                  {
                                    v160 = *((_QWORD *)v159 + 4);
                                    if (!v160)
                                      goto LABEL_161;
                                    v159 = *(WebCore::RenderObject **)(v160 + 8);
                                    if (v159 == v158 || v159 == 0)
                                    {
                                      if (!v159)
                                        goto LABEL_161;
                                      break;
                                    }
                                  }
                                }
                                v162 = (_DWORD *)*((_QWORD *)v158 + 31);
                                ++v162[2];
                                ++v162[84];
                                WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v162 + 84), (WTF::MonotonicTime **)v83);
                                v163 = v162[84];
                                if (!v163)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19428DDC8);
                                }
                              }
                              v162[84] = v163 - 1;
                              if (v162[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v162 + 8))(v162);
                              else
                                --v162[2];
                            }
LABEL_161:
                            v82 = *(_DWORD *)(v7 + 20);
                            if ((v82 & 0x8000) != 0)
                            {
                              if ((*(_BYTE *)(v7 + 45) & 0x10) == 0)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19428DBACLL);
                              }
                              v111 = *(_QWORD *)(v7 + 144);
                              if (v111)
                              {
                                v112 = *(_DWORD *)(v111 + 8) + 1;
                                *(_DWORD *)(v111 + 8) = v112;
                              }
                              else
                              {
                                v112 = MEMORY[8];
                              }
                              *(_QWORD *)(v111 + 24) = *(_QWORD *)(v111 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                              if (!v112)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19428DBD8);
                              }
                              *(_DWORD *)(v111 + 8) = v112 - 1;
                              v82 = *(_DWORD *)(v7 + 20);
                            }
                            goto LABEL_162;
                          }
                          v66 = *(_BYTE *)(v7 + 52) & 7;
                          if (v66 == 1 && (*(_BYTE *)(v7 + 53) & 2) != 0)
                            goto LABEL_148;
                          v67 = *(_QWORD *)(v7 + 32);
                          if (!v67)
                            goto LABEL_705;
                          v68 = *(_QWORD *)(v67 + 8);
                          if (!v68)
                            goto LABEL_705;
                          v69 = *(unsigned __int8 *)(v7 + 46);
                          if (v69 == 25)
                          {
                            if ((*(_BYTE *)(v7 + 23) & 0x10) != 0)
                              goto LABEL_148;
                            v36 = 1;
LABEL_682:
                            WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v7, v36, 0);
LABEL_148:
                            if ((*(_BYTE *)(v7 + 23) & 0x10) == 0
                              || (v260 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 648))(v7)) == 0
                              || (v261 = v260, *(_BYTE *)(v260 + 46) != 25))
                            {
LABEL_149:
                              v79 = *(unsigned __int8 *)(v7 + 46);
                              if (v79 == 19)
                                v80 = v7;
                              else
                                v80 = 0;
                              if (v80)
                                ++*(_DWORD *)(v80 + 16);
                              if (v79 == 19)
                                WebCore::RenderListItem::updateListMarkerNumbers((WebCore::RenderListItem *)v7);
                              if (v80)
                              {
                                v81 = *(_DWORD *)(v80 + 16);
                                if (!v81)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19428D7C4);
                                }
                                *(_DWORD *)(v80 + 16) = v81 - 1;
                              }
                              goto LABEL_159;
                            }
                            ++*(_DWORD *)(v260 + 16);
                            WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*(WebCore::RenderTreeBuilder::MultiColumn **)(v16 + 40), (WebCore::RenderMultiColumnFlow *)v260, (WebCore::RenderObject *)v7);
                            v262 = *(_DWORD *)(v261 + 16);
                            if (v262)
                            {
                              *(_DWORD *)(v261 + 16) = v262 - 1;
                              goto LABEL_149;
                            }
                            __break(0xC471u);
LABEL_784:
                            JUMPOUT(0x19428D2ECLL);
                          }
                          v70 = *(_BYTE *)(v7 + 45);
                          if ((v70 & 2) != 0)
                          {
                            v76 = *(_DWORD *)(v68 + 20);
                            goto LABEL_147;
                          }
                          if (v66 == 1 && (*(_BYTE *)(v7 + 53) & 8) != 0)
                            goto LABEL_243;
                          if ((v69 - 71) <= 0xF && ((1 << (v69 - 71)) & 0xA001) != 0)
                          {
                            do
                            {
LABEL_127:
                              if (*(_BYTE *)(v68 + 46) == 103)
                              {
                                v77 = v68;
                                goto LABEL_145;
                              }
                              v71 = *(_QWORD *)(v68 + 32);
                              if (!v71)
                                break;
                              v68 = *(_QWORD *)(v71 + 8);
                            }
                            while (v68);
                            if ((*(_BYTE *)(v7 + 23) & 0x10) == 0)
                              goto LABEL_148;
                            v36 = 0;
                            goto LABEL_682;
                          }
                          if (v66 == 4 && (*(_BYTE *)(v7 + 53) & 1) != 0)
                          {
LABEL_243:
                            v77 = v7;
                            if (v69 != 103)
                              goto LABEL_127;
LABEL_145:
                            v78 = *(_DWORD *)(v77 + 16);
                            *(_DWORD *)(v77 + 16) = v78 + 1;
                            if (v78 == -1)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19428D8B0);
                            }
                            v76 = *(_DWORD *)(v77 + 20);
                            *(_DWORD *)(v77 + 16) = v78;
LABEL_147:
                            v36 = (v76 >> 28) & 1;
                            if ((_DWORD)v36 == (*(_BYTE *)(v7 + 23) & 0x10) >> 4)
                              goto LABEL_148;
                            goto LABEL_682;
                          }
                          v269 = 0;
                          v270 = 0;
                          if (v69 != 17)
                          {
                            v268 = (WebCore::RenderBlock *)v7;
                            v271 = (WebCore::RenderTable *)&v269;
                            v272 = &v270;
                            v273 = &v268;
                            if ((v70 & 1) == 0)
                            {
                              v72 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8);
                              if (v72)
                              {
                                if ((*(_WORD *)(v72 + 28) & 8) == 0)
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x19428D978);
                                }
                                if ((*(_BYTE *)(v72 + 23) & 0x20) != 0)
                                  goto LABEL_740;
                              }
                            }
                            v73 = *(_QWORD *)(v7 + 96);
                            if ((v73 & 0xF80000000000) == 0x480000000000)
                            {
LABEL_740:
                              WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                              v253 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8) + 40)
                                                           + 8)
                                               + 1944);
                            }
                            else
                            {
                              v74 = (v73 >> 19) & 7;
                              if (v74 <= 3 && v74 != 2)
                                goto LABEL_142;
                              ++*(_DWORD *)(v68 + 16);
                              if (v74 == 2)
                              {
                                while (1)
                                {
                                  v138 = *(unsigned __int8 *)(v68 + 46);
                                  if (v138 == 49 || (*(_BYTE *)(v68 + 98) & 0x38) != 0)
                                    break;
                                  if (((*(_BYTE *)(v68 + 45) & 0x40) != 0
                                     || (v138 - 36) <= 4 && v138 != 38)
                                    && (*(_BYTE *)(v68 + 22) & 2) != 0)
                                  {
                                    break;
                                  }
                                  v139 = *(_QWORD *)(*(_QWORD *)(v68 + 88) + 40);
                                  if (*(_DWORD *)(*(_QWORD *)(v139 + 72) + 20))
                                  {
                                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8)
                                                                           + 40)
                                                               + 8)
                                                   + 1272) != *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8))
                                      break;
                                  }
                                  if ((*(_BYTE *)(v68 + 45) & 0x40) != 0)
                                  {
                                    v140 = *(WebCore::WillChangeData **)(v139 + 200);
                                    if (v140)
                                    {
                                      if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v140, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 24) + 8)+ 40)+ 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8)) & 1) != 0)break;
                                      v138 = *(unsigned __int8 *)(v68 + 46);
                                    }
                                  }
                                  if (v138 == 67 || v138 == 90)
                                    break;
                                  v141 = *(_QWORD *)(*(_QWORD *)(v68 + 88) + 40);
                                  v142 = *(_BYTE *)(v141 + 462);
                                  v143 = *(_BYTE *)(v141 + 642) & 3;
                                  v144 = v142 | 0x19;
                                  if (v143 == 1)
                                    v142 |= 0x15u;
                                  v145 = v143 == 2 ? v144 : v142;
                                  if ((v145 & 3) != 0
                                    && ((*(_BYTE *)(v68 + 20) & 1) != 0
                                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v68))
                                    && (*(_QWORD *)(v68 + 96) & 0x1FLL) != 0x19
                                    && (*(unsigned __int8 *)(v68 + 46) - 36 > 4
                                     || (*(_BYTE *)(v68 + 52) & 7) == 1))
                                  {
                                    break;
                                  }
                                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 88) + 40) + 636) & 0xC0000) != 0
                                    && ((*(_BYTE *)(v68 + 20) & 1) != 0
                                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v68))
                                    && (*(_QWORD *)(v68 + 96) & 0x1FLL) != 0x19)
                                  {
                                    v252 = *(unsigned __int8 *)(v68 + 46);
                                    if ((v252 - 36) <= 4)
                                    {
                                      if (v252 == 36)
                                        break;
                                    }
                                    else if (v252 != 63 && v252 != 35)
                                    {
                                      break;
                                    }
                                  }
                                  if (v269 && (WebCore::AXObjectCache *)v68 == v270)
                                    *v269 = 1;
                                  v146 = *(_QWORD *)(v68 + 32);
                                  if (v146)
                                  {
                                    v146 = *(_QWORD *)(v146 + 8);
                                    if (v146)
                                      ++*(_DWORD *)(v146 + 16);
                                  }
                                  v147 = *(_DWORD *)(v68 + 16);
                                  if (!v147)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x19428DC94);
                                  }
                                  *(_DWORD *)(v68 + 16) = v147 - 1;
                                  v68 = v146;
                                  if (!v146)
                                    goto LABEL_705;
                                }
                              }
                              else
                              {
                                while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v68))
                                {
                                  if ((*(_BYTE *)(v68 + 45) & 1) == 0)
                                  {
                                    v231 = *(_QWORD *)(*(_QWORD *)(v68 + 24) + 8);
                                    if (v231)
                                    {
                                      if ((*(_WORD *)(v231 + 28) & 8) == 0)
                                      {
                                        __break(0xC471u);
                                        JUMPOUT(0x19428E30CLL);
                                      }
                                      if ((*(_BYTE *)(v231 + 23) & 0x20) != 0)
                                        goto LABEL_738;
                                    }
                                  }
                                  if ((*(_QWORD *)(v68 + 96) & 0xF80000000000) == 0x480000000000)
                                  {
LABEL_738:
                                    WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()((_QWORD **)&v271);
                                    v253 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v268 + 3) + 8)
                                                                             + 40)
                                                                 + 8)
                                                     + 1944);
                                    goto LABEL_702;
                                  }
                                  if (v269 && (WebCore::AXObjectCache *)v68 == v270)
                                    *v269 = 1;
                                  v232 = *(_QWORD *)(v68 + 32);
                                  if (!v232)
                                  {
                                    v243 = *(_DWORD *)(v68 + 16);
                                    if (!v243)
                                    {
LABEL_725:
                                      __break(0xC471u);
                                      JUMPOUT(0x19428E2ECLL);
                                    }
                                    *(_DWORD *)(v68 + 16) = v243 - 1;
                                    goto LABEL_705;
                                  }
                                  v233 = *(_QWORD *)(v232 + 8);
                                  if (v233)
                                    ++*(_DWORD *)(v233 + 16);
                                  v234 = *(_DWORD *)(v68 + 16);
                                  if (!v234)
                                    goto LABEL_725;
                                  *(_DWORD *)(v68 + 16) = v234 - 1;
                                  v68 = v233;
                                  if (!v233)
                                    goto LABEL_705;
                                }
                              }
                              v253 = v68;
LABEL_702:
                              v254 = *(_DWORD *)(v68 + 16);
                              if (!v254)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x19428E1A4);
                              }
                              *(_DWORD *)(v68 + 16) = v254 - 1;
                            }
                            v68 = v253;
                            if (!v253)
                            {
LABEL_705:
                              v76 = *(_DWORD *)(v7 + 20);
                              goto LABEL_147;
                            }
                          }
LABEL_142:
                          v75 = *(_DWORD *)(v68 + 16);
                          *(_DWORD *)(v68 + 16) = v75 + 1;
                          if (v75 == -1)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19428DA48);
                          }
                          v76 = *(_DWORD *)(v68 + 20);
                          *(_DWORD *)(v68 + 16) = v75;
                          goto LABEL_147;
                        }
                      }
                      else
                      {
                        --*(_DWORD *)v43;
                      }
                    }
                  }
                  ++*(_DWORD *)v34;
                  goto LABEL_64;
                }
              }
              else
              {
                v27 = 0;
              }
              v30 = 0;
              v31 = 1;
              goto LABEL_56;
            }
            v168 = *(unsigned int *)(v19 + 40);
            if (v168 | ((unint64_t)*(unsigned __int8 *)(v19 + 44) << 32))
            {
              v169 = *(_QWORD *)((v168 | ((unint64_t)*(unsigned __int8 *)(v19 + 44) << 32)) + 8);
              if (v169)
              {
                ++*(_DWORD *)(v169 + 16);
                v170 = *(_QWORD *)(v7 + 8);
                if (!v170)
                {
                  v170 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v170 = 1;
                  *(_QWORD *)(v170 + 8) = v7;
                  v219 = *(WTF **)(v7 + 8);
                  *(_QWORD *)(v7 + 8) = v170;
                  if (v219)
                  {
                    if (*(_DWORD *)v219 == 1)
                    {
                      WTF::fastFree(v219, a2);
                      v170 = *(_QWORD *)(v7 + 8);
                      if (!v170)
                        goto LABEL_374;
                    }
                    else
                    {
                      --*(_DWORD *)v219;
                    }
                  }
                }
                ++*(_DWORD *)v170;
LABEL_374:
                v171 = (WTF *)(*(unsigned int *)(v169 + 47) | ((unint64_t)*(unsigned __int8 *)(v169 + 51) << 32));
                *(_DWORD *)(v169 + 47) = v170;
                *(_BYTE *)(v169 + 51) = BYTE4(v170);
                if (v171)
                {
                  if (*(_DWORD *)v171 == 1)
                    WTF::fastFree(v171, a2);
                  else
                    --*(_DWORD *)v171;
                }
                v172 = *(_QWORD *)(v169 + 8);
                if (v172)
                  goto LABEL_378;
                v172 = WTF::fastCompactMalloc((WTF *)0x10);
                *(_DWORD *)v172 = 1;
                *(_QWORD *)(v172 + 8) = v169;
                v220 = *(WTF **)(v169 + 8);
                *(_QWORD *)(v169 + 8) = v172;
                if (!v220)
                  goto LABEL_378;
                if (*(_DWORD *)v220 != 1)
                {
                  --*(_DWORD *)v220;
LABEL_378:
                  v173 = 0;
                  ++*(_DWORD *)v172;
                  goto LABEL_379;
                }
                WTF::fastFree(v220, a2);
                v172 = *(_QWORD *)(v169 + 8);
                if (v172)
                  goto LABEL_378;
                v173 = 0;
LABEL_379:
                v174 = (WTF *)(*(unsigned int *)(v7 + 40) | ((unint64_t)*(unsigned __int8 *)(v7 + 44) << 32));
                *(_DWORD *)(v7 + 40) = v172;
                *(_BYTE *)(v7 + 44) = BYTE4(v172);
                if (v174)
                {
                  if (*(_DWORD *)v174 == 1)
                    WTF::fastFree(v174, a2);
                  else
                    --*(_DWORD *)v174;
                }
                v175 = *(_QWORD *)(v19 + 8);
                if (!v175)
                {
                  v175 = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)v175 = 1;
                  *(_QWORD *)(v175 + 8) = v19;
                  v217 = *(WTF **)(v19 + 8);
                  *(_QWORD *)(v19 + 8) = v175;
                  if (v217)
                  {
                    if (*(_DWORD *)v217 == 1)
                    {
                      WTF::fastFree(v217, a2);
                      v175 = *(_QWORD *)(v19 + 8);
                      if (!v175)
                      {
LABEL_384:
                        v176 = (WTF *)(*(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32));
                        *(_DWORD *)(v7 + 47) = v175;
                        *(_BYTE *)(v7 + 51) = BYTE4(v175);
                        if (v176)
                        {
                          if (*(_DWORD *)v176 == 1)
                            WTF::fastFree(v176, a2);
                          else
                            --*(_DWORD *)v176;
                        }
                        v177 = *(_QWORD *)(v7 + 8);
                        if (!v177)
                        {
                          v177 = WTF::fastCompactMalloc((WTF *)0x10);
                          *(_DWORD *)v177 = 1;
                          *(_QWORD *)(v177 + 8) = v7;
                          v218 = *(WTF **)(v7 + 8);
                          *(_QWORD *)(v7 + 8) = v177;
                          if (v218)
                          {
                            if (*(_DWORD *)v218 == 1)
                            {
                              WTF::fastFree(v218, a2);
                              v177 = *(_QWORD *)(v7 + 8);
                              if (!v177)
                                goto LABEL_389;
                            }
                            else
                            {
                              --*(_DWORD *)v218;
                            }
                          }
                        }
                        ++*(_DWORD *)v177;
LABEL_389:
                        v179 = *(_DWORD *)(v19 + 40);
                        v178 = v19 + 40;
                        v180 = (WTF *)(v179 | ((unint64_t)*(unsigned __int8 *)(v178 + 4) << 32));
                        *(_DWORD *)v178 = v177;
                        *(_BYTE *)(v178 + 4) = BYTE4(v177);
                        if (v180)
                        {
                          if (*(_DWORD *)v180 == 1)
                            WTF::fastFree(v180, a2);
                          else
                            --*(_DWORD *)v180;
                        }
                        if ((v173 & 1) == 0)
                        {
                          v181 = *(_DWORD *)(v169 + 16);
                          if (!v181)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19428DF0CLL);
                          }
                          *(_DWORD *)(v169 + 16) = v181 - 1;
                        }
                        goto LABEL_67;
                      }
                    }
                    else
                    {
                      --*(_DWORD *)v217;
                    }
                  }
                }
                ++*(_DWORD *)v175;
                goto LABEL_384;
              }
            }
            else
            {
              v169 = 0;
            }
            v172 = 0;
            v173 = 1;
            goto LABEL_379;
          }
        }
        else
        {
          --*(_DWORD *)v46;
        }
LABEL_42:
        ++*(_DWORD *)v24;
        goto LABEL_43;
      case '\'':
        if (*((_BYTE *)a2 + 46) != 40)
          goto LABEL_494;
        goto LABEL_29;
      default:
        goto LABEL_29;
    }
  }
  WebCore::RenderTreeBuilder::createAnonymousWrappersForInlineContent((WebCore::RenderTreeBuilder *)*a1, a2, (WebCore::RenderObject *)v6);
  if (v6 && (v244 = *(_QWORD *)(v6 + 32)) != 0)
  {
    v245 = *(WebCore::RenderBlock **)(v244 + 8);
    if (v245 == a2)
      v10 = v6;
    else
      v10 = (uint64_t)v245;
  }
  else
  {
    v10 = 0;
  }
  v11 = *a1;
  v271 = (WebCore::RenderTable *)v7;
  WebCore::RenderTreeBuilder::attachToRenderElement(v11, (uint64_t)a2, (const WebCore::RenderStyle *)&v271, v10);
  if (v271)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v271, (uint64_t)v271);
  v12 = *((_QWORD *)a2 + 4);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 45) & 0x40) != 0 && (*((_BYTE *)a2 + 45) & 1) != 0)
      {
        v14 = (*((_BYTE *)a2 + 45) & 2) != 0 ? *(_QWORD *)(v13 + 96) : *((_QWORD *)a2 + 12);
        if (((v14 & 0x1F) == 1 || (v14 & 0x1F) == 0xE)
          && (*((_BYTE *)a2 + 45) & 0x40) != 0
          && (v14 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)a2 + 176))(a2) & 1) == 0)
        {
          v15 = *((unsigned __int8 *)a2 + 46);
          if (v15 != 20)
          {
            if ((*((_BYTE *)a2 + 52) & 7) == 1)
            {
              if ((*((_BYTE *)a2 + 53) & 2) != 0 || v15 == 26 || v15 == 49)
                return;
            }
            else if (v15 == 49 || v15 == 26)
            {
              return;
            }
            WebCore::RenderTreeBuilder::Block::removeLeftoverAnonymousBlock((WebCore::RenderTreeBuilder::Block *)a1, a2);
          }
        }
      }
    }
  }
}

void WebCore::RenderTreeBuilder::Block::attachIgnoringContinuation(WebCore::RenderTreeBuilder **a1, WebCore::RenderBlock *a2, const WebCore::RenderObject **a3, WebCore::RenderObject *a4)
{
  WebCore::RenderObject *v4;
  const WebCore::RenderObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  WebCore::RenderTreeBuilder *v12;
  const WebCore::RenderObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  WebCore::RenderElement *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::RenderTable *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::RenderObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WebCore::RenderObject *v35;
  uint64_t v36;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  WebCore::RenderTable *v41;
  WebCore::RenderTreeBuilder *v42;
  const WebCore::RenderObject *v43;
  uint64_t v44;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  const WebCore::RenderObject *v49;
  uint64_t v50;
  const WebCore::RenderObject *v51;
  uint64_t v52;
  WebCore::RenderBlock *v53;
  WebCore::RenderTextFragment *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  WebCore::RenderTable *v59;
  WebCore::RenderElement *v60;
  const WebCore::RenderObject *v61;
  WebCore::RenderElement *v62;
  WebCore::RenderElement *v63;
  WebCore::RenderElement *v64;
  WebCore::RenderElement *v65;
  WebCore::RenderElement *v66;
  WebCore::RenderElement *v67;
  char v68;

  v4 = a4;
  if (a4)
  {
    v40 = *((_QWORD *)a4 + 4);
    if (!v40 || *(WebCore::RenderBlock **)(v40 + 8) != a2)
    {
      WebCore::findParentAndBeforeChildForNonSibling((uint64_t)&v67, a2, *a3, a4);
      if (v68)
      {
        v41 = v67;
        v42 = *a1;
        if (v67)
        {
          v43 = *a3;
          *a3 = 0;
          v66 = v43;
          WebCore::RenderTreeBuilder::attach((uint64_t)v42, v41, (unint64_t *)&v66);
          v19 = v66;
          if (v66)
          {
            v20 = (unint64_t *)&v66;
            goto LABEL_29;
          }
          return;
        }
        v54 = WebCore::RenderTreeBuilder::splitAnonymousBoxesAroundChild(v42, a2, v4);
        v55 = *((_QWORD *)v54 + 4);
        if (!v55 || (v4 = v54, *(WebCore::RenderBlock **)(v55 + 8) != a2))
        {
LABEL_119:
          __break(0xC471u);
          JUMPOUT(0x19428EC84);
        }
      }
    }
  }
  v8 = *a3;
  v9 = *((_DWORD *)*a3 + 5);
  v10 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x800) != 0 || (v9 & 0x1800000) == 0x1000000)
  {
    if ((v10 & 0x40000) != 0 || *((char *)a2 + 45) < 0 || *((_BYTE *)a2 + 46) == 12)
    {
      v21 = (uint64_t)*a1;
      *a3 = 0;
      v65 = v8;
      WebCore::RenderTreeBuilder::attachToRenderElement(v21, (uint64_t)a2, (const WebCore::RenderStyle *)&v65, (uint64_t)v4);
      v19 = v65;
      if (!v65)
        return;
      v20 = (unint64_t *)&v65;
      goto LABEL_29;
    }
    if (v4)
    {
      v30 = *((unsigned __int8 *)v4 + 44);
      v31 = *((unsigned int *)v4 + 10);
    }
    else
    {
      v30 = *((unsigned __int8 *)a2 + 75);
      v31 = *(unsigned int *)((char *)a2 + 71);
    }
    v32 = v31 | (v30 << 32);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        if ((*(_BYTE *)(v33 + 45) & 1) != 0)
        {
          v57 = *(unsigned __int8 **)(v32 + 8);
          v44 = (*(_BYTE *)(v33 + 45) & 2) != 0
              ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 32) + 8) + 96)
              : *(_QWORD *)(v33 + 96);
          if (((v44 & 0x1F) == 1 || (v44 & 0x1F) == 14)
            && (*(_BYTE *)(v33 + 45) & 0x40) != 0
            && (v44 & 0xF80000000000) == 0
            && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 176))(v33) & 1) == 0)
          {
            v46 = v57[46];
            if (v46 != 20)
            {
              if ((v57[52] & 7) == 1)
              {
                v47 = v57;
                if ((v57[53] & 2) == 0 && v46 != 26 && v46 != 49)
                  goto LABEL_97;
              }
              else
              {
                v47 = v57;
                if (v46 != 49 && v46 != 26)
                {
LABEL_97:
                  if ((v47[45] & 0x40) != 0)
                  {
                    v48 = (uint64_t)*a1;
                    v49 = *a3;
                    *a3 = 0;
                    v63 = v49;
                    WebCore::RenderTreeBuilder::attach(v48, (WebCore::RenderTable *)v57, (unint64_t *)&v63);
                    v19 = v63;
                    if (v63)
                    {
                      v20 = (unint64_t *)&v63;
                      goto LABEL_29;
                    }
                    return;
                  }
                  goto LABEL_119;
                }
              }
            }
          }
        }
      }
    }
    v34 = (uint64_t)*a1;
    v35 = *a3;
    *a3 = 0;
    v64 = v35;
    WebCore::RenderTreeBuilder::attachToRenderElement(v34, (uint64_t)a2, (const WebCore::RenderStyle *)&v64, (uint64_t)v4);
    v19 = v64;
    if (!v64)
      return;
    v20 = (unint64_t *)&v64;
    goto LABEL_29;
  }
  if ((v10 & 0x40000) == 0)
  {
    if ((v9 & 1) != 0)
      goto LABEL_27;
    if (v4)
    {
      v22 = *((unsigned __int8 *)v4 + 44);
      v23 = *((unsigned int *)v4 + 10);
    }
    else
    {
      v22 = *((unsigned __int8 *)a2 + 75);
      v23 = *(unsigned int *)((char *)a2 + 71);
    }
    v24 = v23 | (v22 << 32);
    if (!v24)
      goto LABEL_40;
    v25 = *(_QWORD *)(v24 + 8);
    if (!v25 || (*(_BYTE *)(v25 + 45) & 1) == 0)
      goto LABEL_40;
    v56 = *(unsigned __int8 **)(v24 + 8);
    v36 = (*(_BYTE *)(v25 + 45) & 2) != 0
        ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 8) + 96)
        : *(_QWORD *)(v25 + 96);
    if ((v36 & 0x1F) != 1 && (v36 & 0x1F) != 14)
      goto LABEL_40;
    if ((*(_BYTE *)(v25 + 45) & 0x40) == 0)
      goto LABEL_40;
    if ((v36 & 0xF80000000000) != 0)
      goto LABEL_40;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 176))(v25) & 1) != 0)
      goto LABEL_40;
    v38 = v56[46];
    if (v38 == 20)
      goto LABEL_40;
    if ((v56[52] & 7) == 1)
    {
      v39 = v56;
      if ((v56[53] & 2) != 0 || v38 == 26)
        goto LABEL_40;
    }
    else
    {
      v39 = v56;
      if (v38 == 26)
      {
LABEL_40:
        WebCore::RenderBlock::createAnonymousBlockWithStyleAndDisplay(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8), (_QWORD *)a2 + 10, (const WTF::StringImpl *)1, &v67);
        v26 = v67;
        v27 = (uint64_t)*a1;
        v67 = 0;
        v59 = v26;
        WebCore::RenderTreeBuilder::attachToRenderElement(v27, (uint64_t)a2, (const WebCore::RenderStyle *)&v59, (uint64_t)v4);
        if (v59)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v59, (uint64_t)v59);
        v28 = (uint64_t)*a1;
        v29 = *a3;
        *a3 = 0;
        v58 = (uint64_t)v29;
        WebCore::RenderTreeBuilder::attach(v28, v26, (unint64_t *)&v58);
        if (v58)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v58, v58);
        v19 = v67;
        v67 = 0;
        if (!v19)
          return;
        v20 = (unint64_t *)&v67;
LABEL_29:
        WebCore::RenderObjectDeleter::operator()((uint64_t)v20, (uint64_t)v19);
        return;
      }
    }
    if (v38 != 49)
    {
      if ((v39[45] & 0x40) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19428ECA4);
      }
      v50 = (uint64_t)*a1;
      v51 = *a3;
      *a3 = 0;
      v60 = v51;
      WebCore::RenderTreeBuilder::attach(v50, (WebCore::RenderTable *)v56, (unint64_t *)&v60);
      v19 = v60;
      if (v60)
      {
        v20 = (unint64_t *)&v60;
        goto LABEL_29;
      }
      return;
    }
    goto LABEL_40;
  }
  if ((v9 & 1) == 0)
  {
LABEL_27:
    v18 = (uint64_t)*a1;
    *a3 = 0;
    v62 = v8;
    WebCore::RenderTreeBuilder::attachToRenderElement(v18, (uint64_t)a2, (const WebCore::RenderStyle *)&v62, (uint64_t)v4);
    v19 = v62;
    if (!v62)
      return;
    v20 = (unint64_t *)&v62;
    goto LABEL_29;
  }
  WebCore::RenderTreeBuilder::createAnonymousWrappersForInlineContent(*a1, a2, v4);
  if (v4 && (v52 = *((_QWORD *)v4 + 4)) != 0)
  {
    v53 = *(WebCore::RenderBlock **)(v52 + 8);
    if (v53 == a2)
      v11 = (uint64_t)v4;
    else
      v11 = (uint64_t)v53;
  }
  else
  {
    v11 = 0;
  }
  v12 = *a1;
  v13 = *a3;
  *a3 = 0;
  v61 = v13;
  WebCore::RenderTreeBuilder::attachToRenderElement((uint64_t)v12, (uint64_t)a2, (const WebCore::RenderStyle *)&v61, v11);
  if (v61)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v61, (uint64_t)v61);
  v14 = *((_QWORD *)a2 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 45) & 0x40) != 0 && (*((_BYTE *)a2 + 45) & 1) != 0)
      {
        v16 = (*((_BYTE *)a2 + 45) & 2) != 0 ? *(_QWORD *)(v15 + 96) : *((_QWORD *)a2 + 12);
        if (((v16 & 0x1F) == 1 || (v16 & 0x1F) == 0xE)
          && (*((_BYTE *)a2 + 45) & 0x40) != 0
          && (v16 & 0xF80000000000) == 0
          && ((*(uint64_t (**)(WebCore::RenderBlock *))(*(_QWORD *)a2 + 176))(a2) & 1) == 0)
        {
          v17 = *((unsigned __int8 *)a2 + 46);
          if (v17 != 20)
          {
            if ((*((_BYTE *)a2 + 52) & 7) == 1)
            {
              if ((*((_BYTE *)a2 + 53) & 2) != 0 || v17 == 26 || v17 == 49)
                return;
            }
            else if (v17 == 49 || v17 == 26)
            {
              return;
            }
            WebCore::RenderTreeBuilder::Block::removeLeftoverAnonymousBlock((WebCore::RenderTreeBuilder::Block *)a1, a2);
          }
        }
      }
    }
  }
}

double WebCore::RenderTreeBuilder::attachToRenderElement(uint64_t a1, uint64_t a2, const WebCore::RenderStyle *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  char v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  double result;
  uint64_t i;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  WTF *v35;
  WTF *v36;
  int v37;
  WebCore::LayoutIntegration::LineLayout *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  WebCore::RenderObject *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned __int8 v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  WebCore::RenderObject *v69;
  int v70;
  char v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WebCore::RenderObject *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  WebCore::WillChangeData *v90;
  uint64_t v91;
  char v92;
  int v93;
  char v94;
  char v95;
  uint64_t v96;
  int v97;
  WebCore::RenderElement *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  WebCore::WillChangeData *v103;
  uint64_t v104;
  char v105;
  int v106;
  char v107;
  char v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  WebCore::WillChangeData *v113;
  uint64_t v114;
  char v115;
  int v116;
  char v117;
  char v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  int j;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WebCore::RenderObject *v131;
  WebCore::RenderObject *v132;
  uint64_t v133;
  _DWORD *v135;
  int v136;
  WebCore::RenderObject *v137;
  int v138;
  WebCore::RenderObject *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  char v146;
  WTF *v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  WTF *v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  int v161;
  BOOL v162;
  _QWORD *v163;
  WTF *v164;
  WTF *v165;
  WTF *v166;
  WTF *v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  BOOL v192;
  WebCore::AXObjectCache **v193;
  WebCore::AXObjectCache *v194;
  WebCore::AXObjectCache *v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  WebCore::AXObjectCache **v202;
  uint64_t *v203;
  uint64_t v204;
  _BYTE *v205;
  WebCore::AXObjectCache *v206;

  v4 = a4;
  v8 = *(_QWORD *)a3;
  switch(*(_BYTE *)(*(_QWORD *)a3 + 46))
  {
    case '$':
    case '(':
      v156 = *(unsigned __int8 *)(a2 + 46);
      goto LABEL_387;
    case '%':
      if (*(_BYTE *)(a2 + 46) != 39)
        goto LABEL_389;
      goto LABEL_2;
    case '&':
      v156 = *(unsigned __int8 *)(a2 + 46);
      if (v156 == 38 && (*(_QWORD *)(v8 + 96) & 0x1FLL) == 11)
        goto LABEL_2;
LABEL_387:
      if (v156 != 35 && v156 != 63)
      {
LABEL_389:
        if (a4)
        {
          v157 = *(unsigned __int8 *)(a4 + 44);
          v158 = *(unsigned int *)(a4 + 40);
        }
        else
        {
          v157 = *(unsigned __int8 *)(a2 + 75);
          v158 = *(unsigned int *)(a2 + 71);
        }
        v159 = v158 | (v157 << 32);
        if (!v159
          || (v160 = *(_QWORD **)(v159 + 8)) == 0
          || ((v161 = *((unsigned __int8 *)v160 + 46), v161 != 63) ? (v162 = v161 == 35) : (v162 = 1),
              !v162
           || (*((_BYTE *)v160 + 45) & 1) == 0
           || (*((_BYTE *)v160 + 45) & 2) == 0 && (v160[12] & 0xF80000000000) == 0x300000000000))
        {
          WebCore::RenderTable::createAnonymousWithParentRenderer((WebCore::RenderTable *)a2, a3, (WebCore::RenderElement **)&v201);
          v160 = v201;
          v200 = v201;
          v201 = 0;
          WebCore::RenderTreeBuilder::attach(a1, (WebCore::RenderTable *)a2, (unint64_t *)&v200);
          if (v200)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v200, (uint64_t)v200);
          v163 = v201;
          v201 = 0;
          if (v163)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v201, (uint64_t)v163);
          v8 = *(_QWORD *)a3;
        }
        *(_QWORD *)a3 = 0;
        v199 = v8;
        WebCore::RenderTreeBuilder::attach(a1, (WebCore::RenderTable *)v160, (unint64_t *)&v199);
        if (v199)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v199, v199);
        return result;
      }
LABEL_2:
      *(_QWORD *)a3 = 0;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                 + 1944)
                     + 248);
      v10 = *(unsigned int *)(v9 + 508);
      if ((_DWORD)v10 && *(_QWORD *)(*(_QWORD *)(v9 + 496) + 8 * v10 - 8))
      {
        __break(0xC471u);
        JUMPOUT(0x194290048);
      }
      if (a4)
      {
        while (1)
        {
          v155 = *(_QWORD *)(v4 + 32);
          if (!v155)
            break;
          v11 = v4;
          v4 = *(_QWORD *)(v155 + 8);
          if (!v4)
            break;
          if (v4 == a2)
            goto LABEL_6;
        }
      }
      v11 = 0;
LABEL_6:
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
        goto LABEL_7;
      v12 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = a2;
      v32 = *(WTF **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v12;
      if (!v32)
        goto LABEL_7;
      if (*(_DWORD *)v32 != 1)
      {
        --*(_DWORD *)v32;
LABEL_7:
        ++*(_DWORD *)v12;
        goto LABEL_8;
      }
      WTF::fastFree(v32, (void *)a2);
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
        goto LABEL_7;
LABEL_8:
      v13 = *(WTF **)(v8 + 32);
      *(_QWORD *)(v8 + 32) = v12;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, (void *)a2);
        else
          --*(_DWORD *)v13;
      }
      v14 = *(unsigned int *)(a2 + 64);
      v15 = v14 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32);
      if (v15)
        v15 = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32)) + 8);
      if (v15 != v11)
        goto LABEL_19;
      v16 = *(_QWORD *)(v8 + 8);
      if (v16)
        goto LABEL_15;
      v16 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = v8;
      v36 = *(WTF **)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v16;
      if (!v36)
        goto LABEL_15;
      if (*(_DWORD *)v36 != 1)
      {
        --*(_DWORD *)v36;
LABEL_15:
        ++*(_DWORD *)v16;
        goto LABEL_16;
      }
      WTF::fastFree(v36, (void *)a2);
      v16 = *(_QWORD *)(v8 + 8);
      if (v16)
        goto LABEL_15;
LABEL_16:
      v17 = (WTF *)(*(unsigned int *)(a2 + 64) | ((unint64_t)*(unsigned __int8 *)(a2 + 68) << 32));
      *(_DWORD *)(a2 + 64) = v16;
      *(_BYTE *)(a2 + 68) = BYTE4(v16);
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
          WTF::fastFree(v17, (void *)a2);
        else
          --*(_DWORD *)v17;
      }
LABEL_19:
      if (!v11)
      {
        v18 = *(unsigned int *)(a2 + 71);
        if (v18 | ((unint64_t)*(unsigned __int8 *)(a2 + 75) << 32))
        {
          v19 = *(_QWORD *)((v18 | ((unint64_t)*(unsigned __int8 *)(a2 + 75) << 32)) + 8);
          if (v19)
          {
            ++*(_DWORD *)(v19 + 16);
            v20 = *(_QWORD *)(v8 + 8);
            if (!v20)
            {
              v20 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v20 = 1;
              *(_QWORD *)(v20 + 8) = v8;
              v34 = *(WTF **)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v20;
              if (v34)
              {
                if (*(_DWORD *)v34 == 1)
                {
                  WTF::fastFree(v34, (void *)a2);
                  v20 = *(_QWORD *)(v8 + 8);
                  if (!v20)
                    goto LABEL_24;
                }
                else
                {
                  --*(_DWORD *)v34;
                }
              }
            }
            ++*(_DWORD *)v20;
LABEL_24:
            v21 = (WTF *)(*(unsigned int *)(v19 + 47) | ((unint64_t)*(unsigned __int8 *)(v19 + 51) << 32));
            *(_DWORD *)(v19 + 47) = v20;
            *(_BYTE *)(v19 + 51) = BYTE4(v20);
            if (v21)
            {
              if (*(_DWORD *)v21 == 1)
                WTF::fastFree(v21, (void *)a2);
              else
                --*(_DWORD *)v21;
            }
            v22 = *(_QWORD *)(v19 + 8);
            if (v22)
              goto LABEL_28;
            v22 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v22 = 1;
            *(_QWORD *)(v22 + 8) = v19;
            v35 = *(WTF **)(v19 + 8);
            *(_QWORD *)(v19 + 8) = v22;
            if (!v35)
              goto LABEL_28;
            if (*(_DWORD *)v35 != 1)
            {
              --*(_DWORD *)v35;
LABEL_28:
              v23 = 0;
              ++*(_DWORD *)v22;
              goto LABEL_29;
            }
            WTF::fastFree(v35, (void *)a2);
            v22 = *(_QWORD *)(v19 + 8);
            if (v22)
              goto LABEL_28;
            v23 = 0;
LABEL_29:
            v24 = (WTF *)(*(unsigned int *)(v8 + 40) | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32));
            *(_DWORD *)(v8 + 40) = v22;
            *(_BYTE *)(v8 + 44) = BYTE4(v22);
            if (v24)
            {
              if (*(_DWORD *)v24 == 1)
                WTF::fastFree(v24, (void *)a2);
              else
                --*(_DWORD *)v24;
            }
            if ((v23 & 1) == 0)
            {
              v25 = *(_DWORD *)(v19 + 16);
              if (!v25)
              {
                __break(0xC471u);
                JUMPOUT(0x1942900A8);
              }
              *(_DWORD *)(v19 + 16) = v25 - 1;
            }
            v26 = *(_QWORD *)(v8 + 8);
            if (!v26)
            {
              v26 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v26 = 1;
              *(_QWORD *)(v26 + 8) = v8;
              v33 = *(WTF **)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v26;
              if (v33)
              {
                if (*(_DWORD *)v33 == 1)
                {
                  WTF::fastFree(v33, (void *)a2);
                  v26 = *(_QWORD *)(v8 + 8);
                  if (!v26)
                  {
LABEL_37:
                    v27 = (WTF *)(*(unsigned int *)(a2 + 71) | ((unint64_t)*(unsigned __int8 *)(a2 + 75) << 32));
                    *(_DWORD *)(a2 + 71) = v26;
                    *(_BYTE *)(a2 + 75) = BYTE4(v26);
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 1)
                        WTF::fastFree(v27, (void *)a2);
                      else
                        --*(_DWORD *)v27;
                    }
                    goto LABEL_40;
                  }
                }
                else
                {
                  --*(_DWORD *)v33;
                }
              }
            }
            ++*(_DWORD *)v26;
            goto LABEL_37;
          }
        }
        else
        {
          v19 = 0;
        }
        v22 = 0;
        v23 = 1;
        goto LABEL_29;
      }
      v141 = *(unsigned int *)(v11 + 40);
      if (!(v141 | ((unint64_t)*(unsigned __int8 *)(v11 + 44) << 32)))
      {
        v142 = 0;
        goto LABEL_356;
      }
      v142 = *(_QWORD *)((v141 | ((unint64_t)*(unsigned __int8 *)(v11 + 44) << 32)) + 8);
      if (!v142)
      {
LABEL_356:
        v145 = 0;
        v146 = 1;
        goto LABEL_333;
      }
      ++*(_DWORD *)(v142 + 16);
      v143 = *(_QWORD *)(v8 + 8);
      if (!v143)
      {
        v143 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v143 = 1;
        *(_QWORD *)(v143 + 8) = v8;
        v166 = *(WTF **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v143;
        if (v166)
        {
          if (*(_DWORD *)v166 == 1)
          {
            WTF::fastFree(v166, (void *)a2);
            v143 = *(_QWORD *)(v8 + 8);
            if (!v143)
              goto LABEL_328;
          }
          else
          {
            --*(_DWORD *)v166;
          }
        }
      }
      ++*(_DWORD *)v143;
LABEL_328:
      v144 = (WTF *)(*(unsigned int *)(v142 + 47) | ((unint64_t)*(unsigned __int8 *)(v142 + 51) << 32));
      *(_DWORD *)(v142 + 47) = v143;
      *(_BYTE *)(v142 + 51) = BYTE4(v143);
      if (v144)
      {
        if (*(_DWORD *)v144 == 1)
          WTF::fastFree(v144, (void *)a2);
        else
          --*(_DWORD *)v144;
      }
      v145 = *(_QWORD *)(v142 + 8);
      if (v145)
        goto LABEL_332;
      v145 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v145 = 1;
      *(_QWORD *)(v145 + 8) = v142;
      v167 = *(WTF **)(v142 + 8);
      *(_QWORD *)(v142 + 8) = v145;
      if (!v167)
        goto LABEL_332;
      if (*(_DWORD *)v167 != 1)
      {
        --*(_DWORD *)v167;
LABEL_332:
        v146 = 0;
        ++*(_DWORD *)v145;
        goto LABEL_333;
      }
      WTF::fastFree(v167, (void *)a2);
      v145 = *(_QWORD *)(v142 + 8);
      if (v145)
        goto LABEL_332;
      v146 = 0;
LABEL_333:
      v147 = (WTF *)(*(unsigned int *)(v8 + 40) | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32));
      *(_DWORD *)(v8 + 40) = v145;
      *(_BYTE *)(v8 + 44) = BYTE4(v145);
      if (v147)
      {
        if (*(_DWORD *)v147 == 1)
          WTF::fastFree(v147, (void *)a2);
        else
          --*(_DWORD *)v147;
      }
      v148 = *(_QWORD *)(v11 + 8);
      if (v148)
        goto LABEL_337;
      v148 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v148 = 1;
      *(_QWORD *)(v148 + 8) = v11;
      v164 = *(WTF **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v148;
      if (!v164)
        goto LABEL_337;
      if (*(_DWORD *)v164 != 1)
      {
        --*(_DWORD *)v164;
LABEL_337:
        ++*(_DWORD *)v148;
        goto LABEL_338;
      }
      WTF::fastFree(v164, (void *)a2);
      v148 = *(_QWORD *)(v11 + 8);
      if (v148)
        goto LABEL_337;
LABEL_338:
      v149 = (WTF *)(*(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32));
      *(_DWORD *)(v8 + 47) = v148;
      *(_BYTE *)(v8 + 51) = BYTE4(v148);
      if (v149)
      {
        if (*(_DWORD *)v149 == 1)
          WTF::fastFree(v149, (void *)a2);
        else
          --*(_DWORD *)v149;
      }
      v150 = *(_QWORD *)(v8 + 8);
      if (!v150)
      {
        v150 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v150 = 1;
        *(_QWORD *)(v150 + 8) = v8;
        v165 = *(WTF **)(v8 + 8);
        *(_QWORD *)(v8 + 8) = v150;
        if (v165)
        {
          if (*(_DWORD *)v165 == 1)
          {
            WTF::fastFree(v165, (void *)a2);
            v150 = *(_QWORD *)(v8 + 8);
            if (!v150)
              goto LABEL_343;
          }
          else
          {
            --*(_DWORD *)v165;
          }
        }
      }
      ++*(_DWORD *)v150;
LABEL_343:
      v152 = *(_DWORD *)(v11 + 40);
      v151 = v11 + 40;
      v153 = (WTF *)(v152 | ((unint64_t)*(unsigned __int8 *)(v151 + 4) << 32));
      *(_DWORD *)v151 = v150;
      *(_BYTE *)(v151 + 4) = BYTE4(v150);
      if (v153)
      {
        if (*(_DWORD *)v153 == 1)
          WTF::fastFree(v153, (void *)a2);
        else
          --*(_DWORD *)v153;
      }
      if ((v146 & 1) == 0)
      {
        v154 = *(_DWORD *)(v142 + 16);
        if (!v154)
        {
          __break(0xC471u);
          JUMPOUT(0x1942906B8);
        }
        *(_DWORD *)(v142 + 16) = v154 - 1;
      }
LABEL_40:
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8) + 3405))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 608))(v8);
        if (*(unsigned __int8 *)(v8 + 46) - 32 <= 0xFFFFFFFD)
        {
          for (i = *(_QWORD *)(v8 + 32); i; i = *(_QWORD *)(v31 + 32))
          {
            v31 = *(_QWORD *)(i + 8);
            if (!v31 || (*(_BYTE *)(v31 + 22) & 4) == 0)
              break;
            if ((*(_BYTE *)(v31 + 52) & 7) == 1)
            {
              v37 = *(_DWORD *)(v31 + 16) + 1;
              *(_DWORD *)(v31 + 16) = v37;
              if (*(_DWORD *)(v31 + 240) == 1)
              {
                v38 = *(WebCore::LayoutIntegration::LineLayout **)(v31 + 232);
                if (v38
                  && (WebCore::LayoutIntegration::shouldInvalidateLineLayoutPathAfterChangeFor((WebCore::RenderObject *)v31, v8, *(_QWORD *)(v31 + 232), 0)|| (WebCore::LayoutIntegration::LineLayout::insertedIntoTree(v38, *(const WebCore::RenderElement **)(*(_QWORD *)(v8 + 32) + 8), (WebCore::RenderObject *)v8) & 1) == 0))
                {
                  WebCore::RenderBlockFlow::invalidateLineLayoutPath(v31, 1);
                }
                v37 = *(_DWORD *)(v31 + 16);
              }
              if (!v37)
              {
                __break(0xC471u);
                JUMPOUT(0x19429056CLL);
              }
              *(_DWORD *)(v31 + 16) = v37 - 1;
              break;
            }
          }
        }
        if (*(_BYTE *)(a1 + 121))
          goto LABEL_118;
        v39 = *(_BYTE *)(v8 + 52) & 7;
        if (v39 == 1 && (*(_BYTE *)(v8 + 53) & 2) != 0)
        {
LABEL_107:
          if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
          {
            v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 648))(v8);
            if (v196)
            {
              v197 = v196;
              if (*(_BYTE *)(v196 + 46) == 25)
              {
                ++*(_DWORD *)(v196 + 16);
                WebCore::RenderTreeBuilder::MultiColumn::multiColumnDescendantInserted(*(WebCore::RenderTreeBuilder::MultiColumn **)(a1 + 40), (WebCore::RenderMultiColumnFlow *)v196, (WebCore::RenderObject *)v8);
                v198 = *(_DWORD *)(v197 + 16);
                if (!v198)
                  goto LABEL_633;
                *(_DWORD *)(v197 + 16) = v198 - 1;
              }
            }
          }
          v52 = *(unsigned __int8 *)(v8 + 46);
          if (v52 == 19)
            v53 = v8;
          else
            v53 = 0;
          if (v53)
            ++*(_DWORD *)(v53 + 16);
          if (v52 == 19)
            WebCore::RenderListItem::updateListMarkerNumbers((WebCore::RenderListItem *)v8);
          if (v53)
          {
            v54 = *(_DWORD *)(v53 + 16);
            if (!v54)
            {
              __break(0xC471u);
              JUMPOUT(0x194290088);
            }
            *(_DWORD *)(v53 + 16) = v54 - 1;
          }
LABEL_118:
          v55 = *(_DWORD *)(v8 + 20);
          if ((v55 & 8) != 0)
          {
LABEL_121:
            *(_DWORD *)(v8 + 20) = v55 | 0x2000;
            if ((v55 & 0x2000) != 0)
              goto LABEL_122;
            v63 = *(_BYTE *)(v8 + 45);
            if ((v63 & 2) == 0 && (*(_QWORD *)(v8 + 96) & 0x180000) == 0x100000)
              goto LABEL_122;
            v64 = *(unsigned __int8 *)(v8 + 46);
            if (v64 == 37)
            {
              v69 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8);
              goto LABEL_150;
            }
            v205 = 0;
            v206 = 0;
            if ((v63 & 2) != 0 || v64 == 17)
              goto LABEL_148;
            v201 = &v205;
            v202 = &v206;
            v203 = &v204;
            v204 = v8;
            if ((v63 & 1) == 0)
            {
              v65 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
              if (v65)
              {
                if ((*(_WORD *)(v65 + 28) & 8) == 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942901C8);
                }
                if ((*(_BYTE *)(v65 + 23) & 0x20) != 0)
                  goto LABEL_586;
              }
            }
            v66 = *(_QWORD *)(v8 + 96);
            if ((v66 & 0xF80000000000) == 0x480000000000)
            {
LABEL_586:
              WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
              v69 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24) + 8) + 40)
                                                          + 8)
                                              + 1944);
LABEL_150:
              if (v69)
              {
                ++*((_DWORD *)v69 + 4);
                while ((*((_BYTE *)v69 + 21) & 0x20) == 0)
                {
                  if (*((_BYTE *)v69 + 46) == 37)
                    v137 = WebCore::RenderObject::containingBlock(v69);
                  else
                    v137 = (WebCore::RenderObject *)WebCore::RenderObject::container(v69);
                  if (v137)
                  {
                    ++*((_DWORD *)v137 + 4);
                    *((_DWORD *)v69 + 5) |= 0x2000u;
                    if ((*((_QWORD *)v69 + 12) & 0x180000) == 0x100000)
                    {
                      v168 = *((_DWORD *)v137 + 4);
                      if (!v168)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x194290964);
                      }
                      *((_DWORD *)v137 + 4) = v168 - 1;
                      break;
                    }
                  }
                  else
                  {
                    if (*((_BYTE *)v69 + 46) != 49)
                      break;
                    *((_DWORD *)v69 + 5) |= 0x2000u;
                    if ((*((_QWORD *)v69 + 12) & 0x180000) == 0x100000)
                      break;
                  }
                  v138 = *((_DWORD *)v69 + 4);
                  if (!v138)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1942905FCLL);
                  }
                  *((_DWORD *)v69 + 4) = v138 - 1;
                  v69 = v137;
                  if (!v137)
                    goto LABEL_122;
                }
                v70 = *((_DWORD *)v69 + 4);
                if (!v70)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942901A8);
                }
                *((_DWORD *)v69 + 4) = v70 - 1;
              }
LABEL_122:
              v57 = v8;
              if ((*(_BYTE *)(v8 + 45) & 2) != 0)
                v57 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8);
              v58 = *(_QWORD *)(v57 + 96) & 0x180000;
              v59 = *(_DWORD *)(a2 + 20);
              if (v58 == 0x100000)
              {
                if ((v59 & 0x20) != 0)
                  goto LABEL_128;
                if (WebCore::RenderObject::containingBlock((WebCore::RenderObject *)v8) == (WebCore::RenderObject *)a2
                  && *(_BYTE *)(v8 + 46) != 48)
                {
                  *(_DWORD *)(a2 + 20) |= 0x100u;
                  goto LABEL_128;
                }
              }
              else
              {
                *(_DWORD *)(a2 + 20) = v59 | 0x2000;
                if ((v59 & 0x2000) == 0)
                {
                  v71 = *(_BYTE *)(a2 + 45);
                  if ((v71 & 2) != 0 || (*(_QWORD *)(a2 + 96) & 0x180000) != 0x100000)
                  {
                    v72 = *(unsigned __int8 *)(a2 + 46);
                    if (v72 == 37)
                    {
                      v77 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a2);
                      goto LABEL_169;
                    }
                    v205 = 0;
                    v206 = 0;
                    if ((v71 & 2) != 0 || v72 == 17)
                      goto LABEL_167;
                    v201 = &v205;
                    v202 = &v206;
                    v203 = &v204;
                    v204 = a2;
                    if ((v71 & 1) == 0)
                    {
                      v73 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
                      if (v73)
                      {
                        if ((*(_WORD *)(v73 + 28) & 8) == 0)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x194290208);
                        }
                        if ((*(_BYTE *)(v73 + 23) & 0x20) != 0)
                          goto LABEL_589;
                      }
                    }
                    v74 = *(_QWORD *)(a2 + 96);
                    if ((v74 & 0xF80000000000) == 0x480000000000)
                    {
LABEL_589:
                      WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
                      v77 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 1944);
LABEL_169:
                      if (v77)
                      {
                        ++*((_DWORD *)v77 + 4);
                        while ((*((_BYTE *)v77 + 21) & 0x20) == 0)
                        {
                          if (*((_BYTE *)v77 + 46) == 37)
                            v139 = WebCore::RenderObject::containingBlock(v77);
                          else
                            v139 = (WebCore::RenderObject *)WebCore::RenderObject::container(v77);
                          if (v139)
                          {
                            ++*((_DWORD *)v139 + 4);
                            *((_DWORD *)v77 + 5) |= 0x2000u;
                            if ((*((_QWORD *)v77 + 12) & 0x180000) == 0x100000)
                            {
                              v169 = *((_DWORD *)v139 + 4);
                              if (!v169)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x194290A04);
                              }
                              *((_DWORD *)v139 + 4) = v169 - 1;
                              break;
                            }
                          }
                          else
                          {
                            if (*((_BYTE *)v77 + 46) != 49)
                              break;
                            *((_DWORD *)v77 + 5) |= 0x2000u;
                            if ((*((_QWORD *)v77 + 12) & 0x180000) == 0x100000)
                              break;
                          }
                          v140 = *((_DWORD *)v77 + 4);
                          if (!v140)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x194290648);
                          }
                          *((_DWORD *)v77 + 4) = v140 - 1;
                          v77 = v139;
                          if (!v139)
                            goto LABEL_126;
                        }
                        v78 = *((_DWORD *)v77 + 4);
                        if (!v78)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1942901E8);
                        }
                        *((_DWORD *)v77 + 4) = v78 - 1;
                      }
                      goto LABEL_126;
                    }
                    v75 = (v74 >> 19) & 7;
                    if (v75 <= 3 && v75 != 2)
                    {
LABEL_167:
                      v76 = *(_QWORD *)(a2 + 32);
                      if (v76)
                      {
                        v77 = *(WebCore::RenderObject **)(v76 + 8);
                        goto LABEL_169;
                      }
                      goto LABEL_471;
                    }
                    v99 = *(_QWORD *)(a2 + 32);
                    if (v99)
                    {
                      v100 = *(_QWORD *)(v99 + 8);
                      if (v100)
                        ++*(_DWORD *)(v100 + 16);
                    }
                    else
                    {
                      v100 = 0;
                    }
                    if (v75 == 2)
                    {
                      if (v100)
                      {
                        while (1)
                        {
                          v101 = *(unsigned __int8 *)(v100 + 46);
                          if (v101 == 49 || (*(_BYTE *)(v100 + 98) & 0x38) != 0)
                            break;
                          if (((*(_BYTE *)(v100 + 45) & 0x40) != 0 || (v101 - 36) <= 4 && v101 != 38)
                            && (*(_BYTE *)(v100 + 22) & 2) != 0)
                          {
                            break;
                          }
                          v102 = *(_QWORD *)(*(_QWORD *)(v100 + 88) + 40);
                          if (*(_DWORD *)(*(_QWORD *)(v102 + 72) + 20))
                          {
                            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 24) + 8) + 40)
                                                       + 8)
                                           + 1272) != *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8))
                              break;
                          }
                          if ((*(_BYTE *)(v100 + 45) & 0x40) != 0)
                          {
                            v103 = *(WebCore::WillChangeData **)(v102 + 200);
                            if (v103)
                            {
                              if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v103, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 24) + 8)+ 40)+ 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8)) & 1) != 0)break;
                              v101 = *(unsigned __int8 *)(v100 + 46);
                            }
                          }
                          if (v101 == 67 || v101 == 90)
                            break;
                          v104 = *(_QWORD *)(*(_QWORD *)(v100 + 88) + 40);
                          v105 = *(_BYTE *)(v104 + 462);
                          v106 = *(_BYTE *)(v104 + 642) & 3;
                          v107 = v105 | 0x19;
                          if (v106 == 1)
                            v105 |= 0x15u;
                          v108 = v106 == 2 ? v107 : v105;
                          if ((v108 & 3) != 0
                            && ((*(_BYTE *)(v100 + 20) & 1) != 0
                             || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v100))
                            && (*(_QWORD *)(v100 + 96) & 0x1FLL) != 0x19
                            && (*(unsigned __int8 *)(v100 + 46) - 36 > 4
                             || (*(_BYTE *)(v100 + 52) & 7) == 1))
                          {
                            break;
                          }
                          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v100 + 88) + 40) + 636) & 0xC0000) != 0
                            && ((*(_BYTE *)(v100 + 20) & 1) != 0
                             || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v100))
                            && (*(_QWORD *)(v100 + 96) & 0x1FLL) != 0x19)
                          {
                            v187 = *(unsigned __int8 *)(v100 + 46);
                            if ((v187 - 36) <= 4)
                            {
                              if (v187 == 36)
                                break;
                            }
                            else if (v187 != 63 && v187 != 35)
                            {
                              break;
                            }
                          }
                          if (v205 && (WebCore::AXObjectCache *)v100 == v206)
                            *v205 = 1;
                          v109 = *(_QWORD *)(v100 + 32);
                          if (v109)
                          {
                            v109 = *(_QWORD *)(v109 + 8);
                            if (v109)
                              ++*(_DWORD *)(v109 + 16);
                          }
                          v110 = *(_DWORD *)(v100 + 16);
                          if (!v110)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1942904BCLL);
                          }
                          v77 = 0;
                          *(_DWORD *)(v100 + 16) = v110 - 1;
                          v100 = v109;
                          if (!v109)
                            goto LABEL_169;
                        }
LABEL_546:
                        v77 = (WebCore::RenderObject *)v100;
LABEL_547:
                        v183 = *(_DWORD *)(v100 + 16);
                        if (!v183)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19429081CLL);
                        }
LABEL_548:
                        *(_DWORD *)(v100 + 16) = v183 - 1;
                        goto LABEL_169;
                      }
                    }
                    else if (v100)
                    {
                      while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v100))
                      {
                        if ((*(_BYTE *)(v100 + 45) & 1) == 0)
                        {
                          v174 = *(_QWORD *)(*(_QWORD *)(v100 + 24) + 8);
                          if (v174)
                          {
                            if ((*(_WORD *)(v174 + 28) & 8) == 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1942909A4);
                            }
                            if ((*(_BYTE *)(v174 + 23) & 0x20) != 0)
                              goto LABEL_587;
                          }
                        }
                        if ((*(_QWORD *)(v100 + 96) & 0xF80000000000) == 0x480000000000)
                        {
LABEL_587:
                          WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
                          v77 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24)
                                                                                              + 8)
                                                                                  + 40)
                                                                      + 8)
                                                          + 1944);
                          goto LABEL_547;
                        }
                        if (v205 && (WebCore::AXObjectCache *)v100 == v206)
                          *v205 = 1;
                        v175 = *(_QWORD *)(v100 + 32);
                        if (!v175)
                        {
                          v183 = *(_DWORD *)(v100 + 16);
                          if (!v183)
                          {
LABEL_574:
                            __break(0xC471u);
                            JUMPOUT(0x194290984);
                          }
                          v77 = 0;
                          goto LABEL_548;
                        }
                        v176 = *(_QWORD *)(v175 + 8);
                        if (v176)
                          ++*(_DWORD *)(v176 + 16);
                        v177 = *(_DWORD *)(v100 + 16);
                        if (!v177)
                          goto LABEL_574;
                        v77 = 0;
                        *(_DWORD *)(v100 + 16) = v177 - 1;
                        v100 = v176;
                        if (!v176)
                          goto LABEL_169;
                      }
                      goto LABEL_546;
                    }
LABEL_471:
                    v77 = 0;
                    goto LABEL_169;
                  }
                }
              }
LABEL_126:
              v60 = *(_DWORD *)(a2 + 20);
              if ((v60 & 0x20) == 0)
              {
                *(_DWORD *)(a2 + 20) = v60 | 0x20;
                v98 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)a2, 0);
                WebCore::RenderObject::scheduleLayout((WebCore::RenderObject *)a2, v98);
              }
LABEL_128:
              v61 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled);
              if ((v61 & 1) != 0)
              {
                v191 = WebCore::Document::topDocument(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8)
                                                                            + 40)
                                                                + 8));
                *(_DWORD *)(v191 + 24) += 2;
                v201 = (_QWORD *)v191;
                if (*(_QWORD *)(v191 + 1944))
                  v192 = *(_BYTE *)(v191 + 3405) == 0;
                else
                  v192 = 0;
                if (v192)
                {
                  v193 = (WebCore::AXObjectCache **)v191;
                  v194 = *(WebCore::AXObjectCache **)(v191 + 1488);
                  if (v194)
                  {
                    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v201);
                  }
                  else
                  {
                    v195 = (WebCore::AXObjectCache *)WTF::fastMalloc((WTF *)0x318);
                    v206 = WebCore::AXObjectCache::AXObjectCache(v195, (WebCore::Document *)v193);
                    std::unique_ptr<WebCore::AXObjectCache>::operator=[abi:sn180100](v193 + 186, &v206);
                    std::unique_ptr<WebCore::AXObjectCache>::~unique_ptr[abi:sn180100](&v206);
                    WebCore::Document::hasEverCreatedAnAXObjectCache = 1;
                    v194 = v193[186];
                    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v201);
                    if (!v194)
                      goto LABEL_129;
                  }
                  result = WebCore::AXObjectCache::childrenChanged(v194, (WebCore::RenderObject *)a2, (WebCore::RenderObject *)v8);
                }
                else
                {
                  WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v201);
                }
              }
LABEL_129:
              if ((*(_BYTE *)(a2 + 21) & 0x40) != 0)
              {
                v121 = *(_DWORD *)(WebCore::RenderObject::rareDataMap(void)::map - 8);
                v122 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
                v123 = 9 * ((v122 + ~(v122 << 13)) ^ ((v122 + ~(v122 << 13)) >> 8));
                v124 = (v123 ^ (v123 >> 15)) + ~((v123 ^ (v123 >> 15)) << 27);
                v125 = v121 & ((v124 >> 31) ^ v124);
                for (j = 1; ; v125 = (v127 + j++) & v121)
                {
                  v127 = v125;
                  v128 = *(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v125);
                  if (v128 != -1 && *(_QWORD *)(v128 + 8) == a2)
                    break;
                }
                if (*(_BYTE *)(*(_QWORD *)(WebCore::RenderObject::rareDataMap(void)::map + 16 * v127 + 8) + 1))
                  goto LABEL_292;
              }
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 424))(a2)
                                                     + 8)
                                         + 16)
                             + 52) & 0x10) != 0)
              {
LABEL_292:
                v129 = *(unsigned int *)(v8 + 40);
                if (!(v129 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32))
                  || (v130 = *(_QWORD *)((v129 | ((unint64_t)*(unsigned __int8 *)(v8 + 44) << 32)) + 8)) == 0
                  || *(_BYTE *)(v130 + 46) != 26)
                {
                  *((_BYTE *)WebCore::RenderObject::ensureRareData((WebCore::RenderObject *)v8, (void *)v28) + 1) = 1;
                }
              }
              goto LABEL_131;
            }
            v67 = (v66 >> 19) & 7;
            if (v67 <= 3 && v67 != 2)
            {
LABEL_148:
              v68 = *(_QWORD *)(v8 + 32);
              if (v68)
              {
                v69 = *(WebCore::RenderObject **)(v68 + 8);
                goto LABEL_150;
              }
              goto LABEL_453;
            }
            v86 = *(_QWORD *)(v8 + 32);
            if (v86)
            {
              v87 = *(_QWORD *)(v86 + 8);
              if (v87)
                ++*(_DWORD *)(v87 + 16);
            }
            else
            {
              v87 = 0;
            }
            if (v67 == 2)
            {
              if (v87)
              {
                while (1)
                {
                  v88 = *(unsigned __int8 *)(v87 + 46);
                  if (v88 == 49 || (*(_BYTE *)(v87 + 98) & 0x38) != 0)
                    break;
                  if (((*(_BYTE *)(v87 + 45) & 0x40) != 0 || (v88 - 36) <= 4 && v88 != 38)
                    && (*(_BYTE *)(v87 + 22) & 2) != 0)
                  {
                    break;
                  }
                  v89 = *(_QWORD *)(*(_QWORD *)(v87 + 88) + 40);
                  if (*(_DWORD *)(*(_QWORD *)(v89 + 72) + 20))
                  {
                    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 24) + 8) + 40) + 8)
                                   + 1272) != *(_QWORD *)(*(_QWORD *)(v87 + 24) + 8))
                      break;
                  }
                  if ((*(_BYTE *)(v87 + 45) & 0x40) != 0)
                  {
                    v90 = *(WebCore::WillChangeData **)(v89 + 200);
                    if (v90)
                    {
                      if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v90, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v87 + 24) + 8)) & 1) != 0)break;
                      v88 = *(unsigned __int8 *)(v87 + 46);
                    }
                  }
                  if (v88 == 67 || v88 == 90)
                    break;
                  v91 = *(_QWORD *)(*(_QWORD *)(v87 + 88) + 40);
                  v92 = *(_BYTE *)(v91 + 462);
                  v93 = *(_BYTE *)(v91 + 642) & 3;
                  v94 = v92 | 0x19;
                  if (v93 == 1)
                    v92 |= 0x15u;
                  v95 = v93 == 2 ? v94 : v92;
                  if ((v95 & 3) != 0
                    && ((*(_BYTE *)(v87 + 20) & 1) != 0
                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v87))
                    && (*(_QWORD *)(v87 + 96) & 0x1FLL) != 0x19
                    && (*(unsigned __int8 *)(v87 + 46) - 36 > 4 || (*(_BYTE *)(v87 + 52) & 7) == 1))
                  {
                    break;
                  }
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 88) + 40) + 636) & 0xC0000) != 0
                    && ((*(_BYTE *)(v87 + 20) & 1) != 0
                     || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v87))
                    && (*(_QWORD *)(v87 + 96) & 0x1FLL) != 0x19)
                  {
                    v185 = *(unsigned __int8 *)(v87 + 46);
                    if ((v185 - 36) <= 4)
                    {
                      if (v185 == 36)
                        break;
                    }
                    else if (v185 != 63 && v185 != 35)
                    {
                      break;
                    }
                  }
                  if (v205 && (WebCore::AXObjectCache *)v87 == v206)
                    *v205 = 1;
                  v96 = *(_QWORD *)(v87 + 32);
                  if (v96)
                  {
                    v96 = *(_QWORD *)(v96 + 8);
                    if (v96)
                      ++*(_DWORD *)(v96 + 16);
                  }
                  v97 = *(_DWORD *)(v87 + 16);
                  if (!v97)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19429049CLL);
                  }
                  v69 = 0;
                  *(_DWORD *)(v87 + 16) = v97 - 1;
                  v87 = v96;
                  if (!v96)
                    goto LABEL_150;
                }
LABEL_529:
                v69 = (WebCore::RenderObject *)v87;
LABEL_530:
                v182 = *(_DWORD *)(v87 + 16);
                if (!v182)
                {
                  __break(0xC471u);
                  JUMPOUT(0x194290774);
                }
LABEL_531:
                *(_DWORD *)(v87 + 16) = v182 - 1;
                goto LABEL_150;
              }
            }
            else if (v87)
            {
              while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v87))
              {
                if ((*(_BYTE *)(v87 + 45) & 1) == 0)
                {
                  v170 = *(_QWORD *)(*(_QWORD *)(v87 + 24) + 8);
                  if (v170)
                  {
                    if ((*(_WORD *)(v170 + 28) & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19429091CLL);
                    }
                    if ((*(_BYTE *)(v170 + 23) & 0x20) != 0)
                      goto LABEL_585;
                  }
                }
                if ((*(_QWORD *)(v87 + 96) & 0xF80000000000) == 0x480000000000)
                {
LABEL_585:
                  WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
                  v69 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 1944);
                  goto LABEL_530;
                }
                if (v205 && (WebCore::AXObjectCache *)v87 == v206)
                  *v205 = 1;
                v171 = *(_QWORD *)(v87 + 32);
                if (!v171)
                {
                  v182 = *(_DWORD *)(v87 + 16);
                  if (!v182)
                  {
LABEL_568:
                    __break(0xC471u);
                    JUMPOUT(0x1942908FCLL);
                  }
                  v69 = 0;
                  goto LABEL_531;
                }
                v172 = *(_QWORD *)(v171 + 8);
                if (v172)
                  ++*(_DWORD *)(v172 + 16);
                v173 = *(_DWORD *)(v87 + 16);
                if (!v173)
                  goto LABEL_568;
                v69 = 0;
                *(_DWORD *)(v87 + 16) = v173 - 1;
                v87 = v172;
                if (!v172)
                  goto LABEL_150;
              }
              goto LABEL_529;
            }
LABEL_453:
            v69 = 0;
            goto LABEL_150;
          }
          *(_DWORD *)(v8 + 20) = v55 | 8;
          v56 = WebCore::RenderObject::markContainingBlocksForLayout((WebCore::RenderObject *)v8, 0);
          if (!v56)
          {
LABEL_120:
            v55 = *(_DWORD *)(v8 + 20);
            if ((v55 & 0x8000) != 0)
            {
              if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194290450);
              }
              v84 = *(_QWORD *)(v8 + 144);
              if (v84)
              {
                v85 = *(_DWORD *)(v84 + 8) + 1;
                *(_DWORD *)(v84 + 8) = v85;
              }
              else
              {
                v85 = MEMORY[8];
              }
              *(_QWORD *)(v84 + 24) = *(_QWORD *)(v84 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
              if (!v85)
              {
                __break(0xC471u);
                JUMPOUT(0x19429047CLL);
              }
              *(_DWORD *)(v84 + 8) = v85 - 1;
              v55 = *(_DWORD *)(v8 + 20);
            }
            goto LABEL_121;
          }
          v28 = (uint64_t)v56;
          if (*((_BYTE *)v56 + 46) != 49)
          {
            v131 = *(WebCore::RenderObject **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v56 + 3) + 8) + 40)
                                                         + 8)
                                             + 1944);
            if (v131 != v56)
            {
              v132 = v56;
              while (1)
              {
                v133 = *((_QWORD *)v132 + 4);
                if (!v133)
                  goto LABEL_120;
                v132 = *(WebCore::RenderObject **)(v133 + 8);
                if (v132 == v131 || v132 == 0)
                {
                  if (!v132)
                    goto LABEL_120;
                  break;
                }
              }
            }
            v135 = (_DWORD *)*((_QWORD *)v131 + 31);
            ++v135[2];
            ++v135[84];
            WebCore::LocalFrameViewLayoutContext::scheduleSubtreeLayout((WebCore::RenderObject *)(v135 + 84), (WTF::MonotonicTime **)v56);
            v136 = v135[84];
            if (!v136)
            {
              __break(0xC471u);
              JUMPOUT(0x19429058CLL);
            }
            goto LABEL_305;
          }
          v135 = (_DWORD *)*((_QWORD *)v56 + 31);
          ++v135[2];
          ++v135[84];
          result = WebCore::LocalFrameViewLayoutContext::scheduleLayout((WebCore::LocalFrameViewLayoutContext *)(v135 + 84));
          v136 = v135[84];
          if (v136)
          {
LABEL_305:
            v135[84] = v136 - 1;
            if (v135[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v135 + 8))(v135);
            else
              --v135[2];
            goto LABEL_120;
          }
LABEL_633:
          __break(0xC471u);
          JUMPOUT(0x19428FDA0);
        }
        v40 = *(_QWORD *)(v8 + 32);
        if (!v40)
          goto LABEL_559;
        v41 = *(_QWORD *)(v40 + 8);
        if (!v41)
          goto LABEL_559;
        v42 = *(unsigned __int8 *)(v8 + 46);
        if (v42 == 25)
        {
          if ((*(_BYTE *)(v8 + 23) & 0x10) != 0)
            goto LABEL_107;
          v28 = 1;
          goto LABEL_540;
        }
        v43 = *(_BYTE *)(v8 + 45);
        if ((v43 & 2) != 0)
        {
          v49 = *(_DWORD *)(v41 + 20);
          goto LABEL_106;
        }
        if (v39 == 1 && (*(_BYTE *)(v8 + 53) & 8) != 0)
          goto LABEL_197;
        if ((v42 - 71) <= 0xF && ((1 << (v42 - 71)) & 0xA001) != 0)
        {
          do
          {
LABEL_86:
            if (*(_BYTE *)(v41 + 46) == 103)
            {
              v50 = v41;
              goto LABEL_104;
            }
            v44 = *(_QWORD *)(v41 + 32);
            if (!v44)
              break;
            v41 = *(_QWORD *)(v44 + 8);
          }
          while (v41);
          if ((*(_BYTE *)(v8 + 23) & 0x10) == 0)
            goto LABEL_107;
          v28 = 0;
LABEL_540:
          WebCore::RenderObject::setFragmentedFlowStateIncludingDescendants(v8, v28, 0);
          goto LABEL_107;
        }
        if (v39 == 4 && (*(_BYTE *)(v8 + 53) & 1) != 0)
        {
LABEL_197:
          v50 = v8;
          if (v42 != 103)
            goto LABEL_86;
LABEL_104:
          v51 = *(_DWORD *)(v50 + 16);
          *(_DWORD *)(v50 + 16) = v51 + 1;
          if (v51 == -1)
          {
            __break(0xC471u);
            JUMPOUT(0x194290160);
          }
          v49 = *(_DWORD *)(v50 + 20);
          *(_DWORD *)(v50 + 16) = v51;
LABEL_106:
          v28 = (v49 >> 28) & 1;
          if ((_DWORD)v28 == (*(_BYTE *)(v8 + 23) & 0x10) >> 4)
            goto LABEL_107;
          goto LABEL_540;
        }
        v205 = 0;
        v206 = 0;
        if (v42 != 17)
        {
          v201 = &v205;
          v202 = &v206;
          v203 = &v204;
          v204 = v8;
          if ((v43 & 1) == 0)
          {
            v45 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8);
            if (v45)
            {
              if ((*(_WORD *)(v45 + 28) & 8) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x194290228);
              }
              if ((*(_BYTE *)(v45 + 23) & 0x20) != 0)
                goto LABEL_590;
            }
          }
          v46 = *(_QWORD *)(v8 + 96);
          if ((v46 & 0xF80000000000) == 0x480000000000)
          {
LABEL_590:
            WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
            v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24) + 8) + 40) + 8) + 1944);
          }
          else
          {
            v47 = (v46 >> 19) & 7;
            if (v47 <= 3 && v47 != 2)
              goto LABEL_101;
            ++*(_DWORD *)(v41 + 16);
            if (v47 == 2)
            {
              while (1)
              {
                v111 = *(unsigned __int8 *)(v41 + 46);
                if (v111 == 49 || (*(_BYTE *)(v41 + 98) & 0x38) != 0)
                  break;
                if (((*(_BYTE *)(v41 + 45) & 0x40) != 0 || (v111 - 36) <= 4 && v111 != 38)
                  && (*(_BYTE *)(v41 + 22) & 2) != 0)
                {
                  break;
                }
                v112 = *(_QWORD *)(*(_QWORD *)(v41 + 88) + 40);
                if (*(_DWORD *)(*(_QWORD *)(v112 + 72) + 20))
                {
                  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40) + 8)
                                 + 1272) != *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8))
                    break;
                }
                if ((*(_BYTE *)(v41 + 45) & 0x40) != 0)
                {
                  v113 = *(WebCore::WillChangeData **)(v112 + 200);
                  if (v113)
                  {
                    if ((WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(v113, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 24) + 8) + 40) + 8)+ 1272) == *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8)) & 1) != 0)break;
                    v111 = *(unsigned __int8 *)(v41 + 46);
                  }
                }
                if (v111 == 67 || v111 == 90)
                  break;
                v114 = *(_QWORD *)(*(_QWORD *)(v41 + 88) + 40);
                v115 = *(_BYTE *)(v114 + 462);
                v116 = *(_BYTE *)(v114 + 642) & 3;
                v117 = v115 | 0x19;
                if (v116 == 1)
                  v115 |= 0x15u;
                v118 = v116 == 2 ? v117 : v115;
                if ((v118 & 3) != 0
                  && ((*(_BYTE *)(v41 + 20) & 1) != 0
                   || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v41))
                  && (*(_QWORD *)(v41 + 96) & 0x1FLL) != 0x19
                  && (*(unsigned __int8 *)(v41 + 46) - 36 > 4 || (*(_BYTE *)(v41 + 52) & 7) == 1))
                {
                  break;
                }
                if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 88) + 40) + 636) & 0xC0000) != 0
                  && ((*(_BYTE *)(v41 + 20) & 1) != 0
                   || WebCore::RenderObject::isAtomicInlineLevelBox((WebCore::RenderObject *)v41))
                  && (*(_QWORD *)(v41 + 96) & 0x1FLL) != 0x19)
                {
                  v188 = *(unsigned __int8 *)(v41 + 46);
                  if ((v188 - 36) <= 4)
                  {
                    if (v188 == 36)
                      break;
                  }
                  else if (v188 != 63 && v188 != 35)
                  {
                    break;
                  }
                }
                if (v205 && (WebCore::AXObjectCache *)v41 == v206)
                  *v205 = 1;
                v119 = *(_QWORD *)(v41 + 32);
                if (v119)
                {
                  v119 = *(_QWORD *)(v119 + 8);
                  if (v119)
                    ++*(_DWORD *)(v119 + 16);
                }
                v120 = *(_DWORD *)(v41 + 16);
                if (!v120)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1942904DCLL);
                }
                *(_DWORD *)(v41 + 16) = v120 - 1;
                v41 = v119;
                if (!v119)
                  goto LABEL_559;
              }
            }
            else
            {
              while (!WebCore::RenderElement::canContainFixedPositionObjects((WebCore::RenderElement *)v41))
              {
                if ((*(_BYTE *)(v41 + 45) & 1) == 0)
                {
                  v178 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8);
                  if (v178)
                  {
                    if ((*(_WORD *)(v178 + 28) & 8) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1942909E4);
                    }
                    if ((*(_BYTE *)(v178 + 23) & 0x20) != 0)
                      goto LABEL_588;
                  }
                }
                if ((*(_QWORD *)(v41 + 96) & 0xF80000000000) == 0x480000000000)
                {
LABEL_588:
                  WebCore::containerForElement(WebCore::RenderObject const&,WebCore::RenderLayerModelObject const*,BOOL *)::{lambda(void)#1}::operator()(&v201);
                  v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v204 + 24) + 8) + 40) + 8)
                                   + 1944);
                  goto LABEL_556;
                }
                if (v205 && (WebCore::AXObjectCache *)v41 == v206)
                  *v205 = 1;
                v179 = *(_QWORD *)(v41 + 32);
                if (!v179)
                {
                  v184 = *(_DWORD *)(v41 + 16);
                  if (!v184)
                  {
LABEL_576:
                    __break(0xC471u);
                    JUMPOUT(0x1942909C4);
                  }
                  *(_DWORD *)(v41 + 16) = v184 - 1;
                  goto LABEL_559;
                }
                v180 = *(_QWORD *)(v179 + 8);
                if (v180)
                  ++*(_DWORD *)(v180 + 16);
                v181 = *(_DWORD *)(v41 + 16);
                if (!v181)
                  goto LABEL_576;
                *(_DWORD *)(v41 + 16) = v181 - 1;
                v41 = v180;
                if (!v180)
                  goto LABEL_559;
              }
            }
            v189 = v41;
LABEL_556:
            v190 = *(_DWORD *)(v41 + 16);
            if (!v190)
            {
              __break(0xC471u);
              JUMPOUT(0x194290898);
            }
            *(_DWORD *)(v41 + 16) = v190 - 1;
          }
          v41 = v189;
          if (!v189)
          {
LABEL_559:
            v49 = *(_DWORD *)(v8 + 20);
            goto LABEL_106;
          }
        }
LABEL_101:
        v48 = *(_DWORD *)(v41 + 16);
        *(_DWORD *)(v41 + 16) = v48 + 1;
        if (v48 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1942902F8);
        }
        v49 = *(_DWORD *)(v41 + 20);
        *(_DWORD *)(v41 + 16) = v48;
        goto LABEL_106;
      }
LABEL_131:
      if ((*(_BYTE *)(v8 + 45) & 2) != 0)
      {
        ++*(_DWORD *)(v8 + 16);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 680))(v8, 0, 0);
        v62 = *(_DWORD *)(v8 + 16);
        if (!v62)
        {
          __break(0xC471u);
          JUMPOUT(0x194290068);
        }
        *(_DWORD *)(v8 + 16) = v62 - 1;
      }
      if ((*(_BYTE *)(v8 + 21) & 0x80) != 0
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8)
                                  + 680)
                      + 680) & 0x800000000000) == 0)
      {
        v79 = *(_QWORD *)(a2 + 32);
        if (v79)
        {
          v80 = *(_QWORD *)(v79 + 8);
          if (v80)
          {
            while (*(_BYTE *)(v80 + 46) != 91
                 && ((*(_BYTE *)(v80 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v80 + 53) & 9) != 0))
            {
              v81 = *(_QWORD *)(v80 + 32);
              if (v81)
              {
                v80 = *(_QWORD *)(v81 + 8);
                if (v80)
                  continue;
              }
              return result;
            }
            if ((*(_BYTE *)(v8 + 45) & 0x10) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x194290668);
            }
            v82 = *(_QWORD *)(v8 + 144);
            if (v82)
            {
              ++*(_DWORD *)(v82 + 8);
              result = WebCore::RenderLayer::removeOnlyThisLayer(v82, 1);
              v83 = *(_DWORD *)(v82 + 8);
              if (!v83)
              {
                __break(0xC471u);
                JUMPOUT(0x194290698);
              }
              *(_DWORD *)(v82 + 8) = v83 - 1;
            }
            else
            {
              return WebCore::RenderLayer::removeOnlyThisLayer(0, 1);
            }
          }
        }
      }
      return result;
    case '\'':
      if (*(_BYTE *)(a2 + 46) != 40)
        goto LABEL_389;
      goto LABEL_2;
    default:
      goto LABEL_2;
  }
}

