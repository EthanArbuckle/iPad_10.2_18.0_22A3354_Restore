void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

uint64_t __Block_byref_object_dispose__15(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B4A3D050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A3D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t REMDynamicCast(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a2;
  return 0;
}

void sub_1B4A40D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  os_activity_scope_leave(&state);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A411C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  os_activity_scope_leave(&state);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A417F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A41B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A420F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A422E4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B4A43848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t rem_currentRuntimeVersion()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  +[REMUserDefaults daemonUserDefaults](REMUserDefaults, "daemonUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "remCurrentRuntimeVersionDebuggingOverride");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    v2 = objc_msgSend(v1, "integerValue");
    +[REMLogStore write](REMLogStore, "write");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v5 = 134217984;
      v6 = v2;
      _os_log_impl(&dword_1B4A39000, v3, OS_LOG_TYPE_INFO, "remCurrentRuntimeVersionDebuggingOverride = %ld", (uint8_t *)&v5, 0xCu);
    }

  }
  else
  {
    v2 = 20240430;
  }

  return v2;
}

void sub_1B4A45FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A463CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A46590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL REMSymbolicColorIsSupportedByCK(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  ckSymbolicColorNameToRGBMapping();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3 != 0;
}

id ckSymbolicColorNameToRGBMapping()
{
  if (ckSymbolicColorNameToRGBMapping_onceToken != -1)
    dispatch_once(&ckSymbolicColorNameToRGBMapping_onceToken, &__block_literal_global_23);
  return (id)ckSymbolicColorNameToRGBMapping_mapping;
}

BOOL REMSymbolicColorIsSupportedByDA(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  EKSymbolicColorToRGBMapping();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3 != 0;
}

id _REMGetLocalizedString(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;

  switch(a1)
  {
    case 0:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New in %@");
      goto LABEL_89;
    case 1:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("This list is shared");
      goto LABEL_89;
    case 2:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Shared with %@");
      goto LABEL_89;
    case 3:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Shared with %@ & %u other(s)");
      goto LABEL_86;
    case 4:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Shared by %@");
      goto LABEL_89;
    case 5:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Invited by %@");
      goto LABEL_89;
    case 6:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("“%@” list is no longer shared.");
      goto LABEL_89;
    case 7:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Invitation to share a reminder list with %@.");
      goto LABEL_89;
    case 8:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%1$@ %2$@ your shared reminder list.");
      goto LABEL_89;
    case 9:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("joined");
      goto LABEL_89;
    case 10:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("declined");
      goto LABEL_89;
    case 11:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Reminders");
      goto LABEL_89;
    case 12:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Local");
      goto LABEL_89;
    case 13:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Untitled");
      goto LABEL_89;
    case 14:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Due Today");
      goto LABEL_89;
    case 15:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ and %lu other items");
      goto LABEL_86;
    case 16:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Arrived at location: %@");
      goto LABEL_89;
    case 17:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Left location: %@");
      goto LABEL_89;
    case 18:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Got in car");
      goto LABEL_89;
    case 19:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Got out of car");
      goto LABEL_89;
    case 20:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Because you’re messaging %@");
      goto LABEL_89;
    case 21:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("You have overdue reminders");
      goto LABEL_89;
    case 22:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New Reminder");
      goto LABEL_89;
    case 23:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%u more reminders");
      goto LABEL_89;
    case 24:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Ignore");
      goto LABEL_89;
    case 25:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Later");
      goto LABEL_89;
    case 26:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Mark as Completed");
      goto LABEL_89;
    case 27:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("MARK_AS_COMPLETED_SHORTENED_NOTIFICATION_ACTION");
      v5 = CFSTR("Mark as Completed");
      goto LABEL_90;
    case 28:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me Tomorrow");
      goto LABEL_89;
    case 29:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me in an Hour");
      goto LABEL_89;
    case 30:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me in the Morning");
      goto LABEL_89;
    case 31:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me Next Weekend");
      goto LABEL_89;
    case 32:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me This Afternoon");
      goto LABEL_89;
    case 33:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Remind Me Tonight");
      goto LABEL_89;
    case 34:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ assigned you a reminder");
      goto LABEL_89;
    case 35:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ assigned you %lu reminders");
      goto LABEL_86;
    case 36:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("You’ve been assigned a reminder");
      goto LABEL_89;
    case 37:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("You’ve been assigned %lu reminders");
      goto LABEL_86;
    case 38:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("“%@” in your “%@” list.");
      goto LABEL_89;
    case 39:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("See the “%@” list.");
      goto LABEL_89;
    case 40:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ assigned you an item");
      goto LABEL_89;
    case 41:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ assigned you %lu items");
      goto LABEL_86;
    case 42:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("You’ve been assigned an item");
      goto LABEL_89;
    case 43:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("You’ve been assigned %lu items");
      goto LABEL_86;
    case 44:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("View");
      goto LABEL_89;
    case 45:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Decline");
      goto LABEL_89;
    case 46:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Decline All");
      goto LABEL_89;
    case 47:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%u more lists with assignments");
      goto LABEL_89;
    case 48:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New Assignment");
      goto LABEL_89;
    case 49:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New List");
      goto LABEL_89;
    case 50:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Unknown");
      goto LABEL_89;
    case 51:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_MORNING_START_HOUR");
      goto LABEL_62;
    case 52:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_MORNING_END_HOUR");
      goto LABEL_65;
    case 53:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_AFTERNOON_START_HOUR");
      goto LABEL_65;
    case 54:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_AFTERNOON_END_HOUR");
      goto LABEL_58;
    case 55:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_EVENING_START_HOUR");
LABEL_58:
      v5 = CFSTR("17");
      goto LABEL_90;
    case 56:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_EVENING_END_HOUR");
      goto LABEL_69;
    case 57:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_NIGHT_START_HOUR");
      goto LABEL_69;
    case 58:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("CUSTOM_SMART_LIST_NIGHT_END_HOUR");
LABEL_62:
      v5 = CFSTR("6");
      goto LABEL_90;
    case 59:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_MORNING");
      v5 = CFSTR("9");
      goto LABEL_90;
    case 60:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_NOON");
LABEL_65:
      v5 = CFSTR("12");
      goto LABEL_90;
    case 61:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_AFTERNOON");
      v5 = CFSTR("15");
      goto LABEL_90;
    case 62:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_EVENING");
      goto LABEL_71;
    case 63:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_NIGHT");
LABEL_69:
      v5 = CFSTR("21");
      goto LABEL_90;
    case 64:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("TIME_OF_DAY_CREATION_TONIGHT");
LABEL_71:
      v5 = CFSTR("18");
      goto LABEL_90;
    case 65:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ added “%@” to %@");
      goto LABEL_89;
    case 66:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("“%@“ was added to %@");
      goto LABEL_89;
    case 67:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ added %lu reminders to %@");
      goto LABEL_86;
    case 68:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%lu reminders were added to %@");
      goto LABEL_86;
    case 69:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New reminders added");
      goto LABEL_89;
    case 70:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ added %lu items to %@");
      goto LABEL_86;
    case 71:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%lu items were added to %@");
      goto LABEL_86;
    case 72:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ completed “%@” in %@");
      goto LABEL_89;
    case 73:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("“%@“ was completed in %@");
      goto LABEL_89;
    case 74:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ completed %lu reminders in %@");
      goto LABEL_86;
    case 75:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%lu reminders were completed in %@");
      goto LABEL_86;
    case 76:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("New reminders completed");
      goto LABEL_89;
    case 77:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%@ completed %lu items in %@");
      goto LABEL_86;
    case 78:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("%lu items were completed in %@");
LABEL_86:
      v5 = &stru_1E67FB1F0;
      v6 = CFSTR("PluralLocalizable");
      goto LABEL_91;
    case 79:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("Family Groceries");
      goto LABEL_89;
    case 80:
      REMBundleGet();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("None");
LABEL_89:
      v5 = &stru_1E67FB1F0;
LABEL_90:
      v6 = 0;
LABEL_91:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, v5, v6);
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

id REMBundleGet()
{
  if (REMBundleGet_onceToken != -1)
    dispatch_once(&REMBundleGet_onceToken, &__block_literal_global);
  return (id)REMBundleGet_bundle;
}

void __ckSymbolicColorNameToRGBMapping_block_invoke()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[12];
  _QWORD v3[13];

  v3[12] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("red");
  v2[1] = CFSTR("orange");
  v3[0] = CFSTR("#FF3B30");
  v3[1] = CFSTR("#FF9500");
  v2[2] = CFSTR("yellow");
  v2[3] = CFSTR("green");
  v3[2] = CFSTR("#FFCC00");
  v3[3] = CFSTR("#4CD964");
  v2[4] = CFSTR("lightBlue");
  v2[5] = CFSTR("blue");
  v3[4] = CFSTR("#5AC8FA");
  v3[5] = CFSTR("#007AFF");
  v2[6] = CFSTR("indigo");
  v2[7] = CFSTR("purple");
  v3[6] = CFSTR("#5856D6");
  v3[7] = CFSTR("#E357A8");
  v2[8] = CFSTR("pink");
  v2[9] = CFSTR("rose");
  v3[8] = CFSTR("#FF2D55");
  v3[9] = CFSTR("#D9A69F");
  v2[10] = CFSTR("brown");
  v2[11] = CFSTR("gray");
  v3[10] = CFSTR("#9D8563");
  v3[11] = CFSTR("#5B626A");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 12);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)ckSymbolicColorNameToRGBMapping_mapping;
  ckSymbolicColorNameToRGBMapping_mapping = v0;

}

void OUTLINED_FUNCTION_0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  NSObject *v11;

  _os_log_fault_impl(a1, v11, OS_LOG_TYPE_FAULT, a4, &buf, 0x16u);
}

void sub_1B4A4A1A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4A33C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4A41C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4A4A5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4A6D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4A8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4AAB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4ABCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4ACC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4AD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4ADAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4AE74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4AEF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4AFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B4A4B198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4B510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B4A4B640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4B704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4BAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B4A4BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4BFD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4C0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4C624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B4A4C7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id clientDescription(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = objc_opt_class();
  objc_msgSend(v1, "crdtID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("<%@: %p>{crdtID: %@}"), v3, v1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1B4A4C8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4C960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B4A4CB2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B4A4CDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4A4CF48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4A4D000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B4A4D204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4A4D310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1B4A4D3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B4A4D5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4D6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B4A4D9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B4A4DB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1B4A4DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4DCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4DE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4DFC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  replica_manager::ReplicaManager::~ReplicaManager((replica_manager::ReplicaManager *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4A4E288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  replica_manager::ReplicaManager::~ReplicaManager((replica_manager::ReplicaManager *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4A4E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4E588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4E858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4A4E8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4E934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4EA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4A4EBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A4ED18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B4A4F048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4A4F2B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4F424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4A4F570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4A4F6A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B4A4F774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4F7DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4F83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4F8D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4A4F950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4A4FA68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

replica_manager::VectorTimestampElement *google::protobuf::internal::GenericTypeHandler<replica_manager::VectorTimestampElement>::New()
{
  replica_manager::VectorTimestampElement *v0;

  v0 = (replica_manager::VectorTimestampElement *)operator new();
  replica_manager::VectorTimestampElement::VectorTimestampElement(v0);
  return v0;
}

void sub_1B4A4FAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C405ACC521ELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4A4FBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4A4FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4A4FD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

replica_manager::ReplicaEntry *google::protobuf::internal::GenericTypeHandler<replica_manager::ReplicaEntry>::New()
{
  replica_manager::ReplicaEntry *v0;

  v0 = (replica_manager::ReplicaEntry *)operator new();
  replica_manager::ReplicaEntry::ReplicaEntry(v0);
  return v0;
}

void sub_1B4A4FDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C409202FEF5);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

id REMGetRecurrenceUIDFromRealUID(void *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  double v6;
  double v7;
  void *v8;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  REMGetRealUIDFromRecurrenceUID(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSinceReferenceDate");
  v7 = v6;

  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/RID=%llu"), v5, (unint64_t)v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id REMGetRealUIDFromRecurrenceUID(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("/RID="));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v1;
  if (objc_msgSend(v2, "count"))
  {
    objc_msgSend(v2, "objectAtIndex:", 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

id _iCalendarDataFromICSCalendar(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = a1;
  v4 = (void *)MEMORY[0x1B5E3DEC4]();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB820]), "initWithCalendar:", v3);
  v6 = v5;
  if (a2)
    v7 = 68;
  else
    v7 = 4;
  objc_msgSend(v5, "ICSDataWithOptions:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v4);
  return v8;
}

id REMiCalendarDataFromICSCalendar(void *a1)
{
  return _iCalendarDataFromICSCalendar(a1, 0);
}

uint64_t REMWeekdayFromICSWeekday(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = a1;
  if ((unint64_t)(a1 - 1) >= 7)
  {
    +[REMLogStore write](REMLogStore, "write");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      REMWeekdayFromICSWeekday_cold_1(v1, v2);

    return 1;
  }
  return v1;
}

void OUTLINED_FUNCTION_2_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

BOOL rem_isNonceUnset(double a1)
{
  return fabs(a1) < 2.22044605e-16;
}

BOOL rem_isEqualNonces(double a1, double a2)
{
  return vabdd_f64(a1, a2) < 2.22044605e-16;
}

void sub_1B4A5AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  NSObject *v5;

  _os_log_fault_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_1_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_3_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1B4A5D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A5D790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A5EA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A5EE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A5F2E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A6020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A62434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A627D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A635EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A63CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A63F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A67844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A689E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A695C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A69948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A69ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A6A528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A6A75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A6A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_7_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_8_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_21(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

uint64_t OUTLINED_FUNCTION_27()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t OUTLINED_FUNCTION_28(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_31(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t OUTLINED_FUNCTION_32()
{
  return MEMORY[0x1E0CB37E8];
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1B4A70AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void __cdKeyToStorageKeyMap_block_invoke()
{
  void *v0;

  v0 = (void *)cdKeyToStorageKeyMap_mapping;
  cdKeyToStorageKeyMap_mapping = MEMORY[0x1E0C9AA70];

}

void sub_1B4A727C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t recurrenceDateMatchesAnyDaySpecifiedInByDayList(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setTimeZone:", v7);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v10)
    {
      v18 = v5;
      v11 = *(_QWORD *)v20;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v9);
          v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          objc_msgSend(v8, "components:fromDate:", 512, v6);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v13, "dayOfTheWeek");
          v16 = objc_msgSend(v14, "weekday");

          if (v15 == v16)
          {
            v10 = 1;
            goto LABEL_12;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
        if (v10)
          continue;
        break;
      }
LABEL_12:
      v5 = v18;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t recurrenceDateMatchesAnyDaySpecifiedInByMonthDayList(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setTimeZone:", v7);
    objc_msgSend(v8, "components:fromDate:", 16, v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "day");

    objc_msgSend(v8, "rangeOfUnit:inUnit:forDate:", 16, 8, v6);
    v12 = v11;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = v5;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v24;
      v17 = v12 + 1;
      while (2)
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v24 != v16)
            objc_enumerationMutation(v13);
          v19 = objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "integerValue", (_QWORD)v23);
          if (v19 < 0)
          {
            if (v19 == v10 || v17 + v19 == v10)
            {
LABEL_17:
              v21 = 1;
              goto LABEL_18;
            }
          }
          else if (v19 == v10)
          {
            goto LABEL_17;
          }
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v15)
          continue;
        break;
      }
    }
    v21 = 0;
LABEL_18:

  }
  else
  {
    v21 = 0;
  }

  return v21;
}

uint64_t recurrenceMonthMatchesAnyMonthSpecifiedInByMonthList(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  if (!a2)
    return 0;
  v5 = (void *)MEMORY[0x1E0C99D48];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  objc_msgSend(v5, "currentCalendar");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setTimeZone:", v6);

  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v9, "components:fromDate:", 8, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "numberWithInteger:", objc_msgSend(v11, "month"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_msgSend(v8, "containsObject:", v12);
  return v13;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  uint64_t v0;

  return v0;
}

id dynamicMethodIMP(void *a1, const char *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  NSStringFromSelector(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_opt_class();
  REMCheckedDynamicCast(v5, (uint64_t)v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "storage");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "valueForKey:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id _REMDateGetDateComponents(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v5 = a3;
    v6 = a1;
    _REMSharedGregorianCalendarForTimeZone(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "components:fromDate:", a2, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "setTimeZone:", v5);
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

id REMDateComponentsGetDateWithTimeZone(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "rem_isValidDateComponents"))
  {
    v5 = (void *)objc_msgSend(v3, "copy");
    if (objc_msgSend(v5, "rem_isAllDayDateComponents"))
      objc_msgSend(v5, "setTimeZone:", 0);
    objc_msgSend(v5, "calendar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      objc_msgSend(v5, "calendar");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(v7, "copy");
      objc_msgSend(v5, "setCalendar:", v8);

      if (v4)
      {
        v9 = v4;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
        v9 = (id)objc_claimAutoreleasedReturnValue();
      }
      v13 = v9;
      objc_msgSend(v5, "calendar");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setTimeZone:", v13);

      objc_msgSend(v5, "setTimeZone:", v13);
      objc_msgSend(v5, "calendar");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v12;
      v14 = v5;
    }
    else
    {
      if (!v5)
      {
        v10 = 0;
        goto LABEL_13;
      }
      v11 = v5;
      _REMSharedGregorianCalendarForTimeZone(v4);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      v14 = v11;
    }
    objc_msgSend(v12, "dateFromComponents:", v14);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_13:
    goto LABEL_14;
  }
  v10 = 0;
LABEL_14:

  return v10;
}

id _REMSharedGregorianCalendarForTimeZone(void *a1)
{
  id v1;
  __CFString *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;

  v1 = a1;
  objc_msgSend(v1, "name");
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v1)
  {

    v3 = CFSTR("__floating");
LABEL_5:
    os_unfair_lock_lock((os_unfair_lock_t)&_REMSharedGregorianCalendarForTimeZone___sharedGeorgianCalendarLock);
    v5 = (void *)_REMSharedGregorianCalendarForTimeZone___calendarCache;
    if (!_REMSharedGregorianCalendarForTimeZone___calendarCache)
    {
      v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
      v7 = (void *)_REMSharedGregorianCalendarForTimeZone___calendarCache;
      _REMSharedGregorianCalendarForTimeZone___calendarCache = v6;

      v5 = (void *)_REMSharedGregorianCalendarForTimeZone___calendarCache;
    }
    objc_msgSend(v5, "objectForKeyedSubscript:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
      v8 = objc_alloc(MEMORY[0x1E0C99D48]);
      v9 = (void *)objc_msgSend(v8, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
      v4 = v9;
      if (!v9)
      {
LABEL_13:
        os_unfair_lock_unlock((os_unfair_lock_t)&_REMSharedGregorianCalendarForTimeZone___sharedGeorgianCalendarLock);
        goto LABEL_14;
      }
      objc_msgSend(v9, "setTimeZone:", v1);
      objc_msgSend((id)_REMSharedGregorianCalendarForTimeZone___calendarCache, "setObject:forKeyedSubscript:", v4, v3);
    }
    if (-[__CFString isEqualToString:](v3, "isEqualToString:", CFSTR("__floating")))
    {
      objc_msgSend(v4, "timeZone");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "rem_isEquivalentTo:", v11);

      if ((v12 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setTimeZone:", v13);

      }
    }
    goto LABEL_13;
  }
  if (v2)
    goto LABEL_5;
  v4 = 0;
LABEL_14:

  return v4;
}

OS_os_log *rem_logObject()
{
  return +[REMLog utility](REMLog, "utility");
}

void sub_1B4A7A068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

id REMInvalidICSAlarmDateComponents()
{
  if (REMInvalidICSAlarmDateComponents_onceToken != -1)
    dispatch_once(&REMInvalidICSAlarmDateComponents_onceToken, &__block_literal_global_7);
  return (id)REMInvalidICSAlarmDateComponents_sInvalidDate;
}

uint64_t REMIsInvalidICSAlarmDateComponents(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = a1;
  REMInvalidICSAlarmDateComponents();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqual:", v1) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = objc_msgSend(v2, "year");
    if (v4 == objc_msgSend(v1, "year")
      && (v5 = objc_msgSend(v2, "month"), v5 == objc_msgSend(v1, "month"))
      && (v6 = objc_msgSend(v2, "day"), v6 == objc_msgSend(v1, "day"))
      && (v7 = objc_msgSend(v2, "hour"), v7 == objc_msgSend(v1, "hour"))
      && (v8 = objc_msgSend(v2, "minute"), v8 == objc_msgSend(v1, "minute"))
      && (v9 = objc_msgSend(v2, "second"), v9 == objc_msgSend(v1, "second")))
    {
      objc_msgSend(v1, "timeZone");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        objc_msgSend(v2, "timeZone");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "timeZone");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v3 = objc_msgSend(v11, "rem_isEquivalentTo:", v12);

      }
      else
      {
        v3 = 1;
      }

    }
    else
    {
      v3 = 0;
    }
  }

  return v3;
}

void *REMSpecificCast(uint64_t a1, void *a2)
{
  if (!a2)
    return 0;
  if (objc_msgSend(a2, "isMemberOfClass:", a1))
    return a2;
  return 0;
}

void *REMProtocolCast(uint64_t a1, void *a2)
{
  if (!a2)
    return 0;
  if (objc_msgSend(a2, "conformsToProtocol:", a1))
    return a2;
  return 0;
}

void *REMClassAndProtocolCast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t *v11;
  uint64_t *v13;

  v9 = a1;
  if (a1)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
    v13 = &a9;
    if (a3)
    {
      while (1)
      {
        v11 = v13++;
        if ((objc_msgSend(v9, "conformsToProtocol:", *v11) & 1) == 0)
          break;
        if (!--a3)
          return v9;
      }
      return 0;
    }
  }
  return v9;
}

CFTypeRef REMCFTypeCast(uint64_t a1, CFTypeRef cf)
{
  if (!cf)
    return 0;
  if (CFGetTypeID(cf) == a1)
    return cf;
  return 0;
}

uint64_t REMCheckedDynamicCast(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  OS_os_log *v5;

  v2 = a2;
  if (a2 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    v5 = +[REMLog utility](REMLog, "utility");
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_FAULT))
      REMCheckedDynamicCast_cold_1(v2, a1, v5);
    return 0;
  }
  return v2;
}

void *REMCheckedProtocolCast(Protocol *a1, void *a2)
{
  OS_os_log *v5;
  OS_os_log *v6;
  uint64_t v7;
  const char *Name;
  int v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v5 = +[REMLog utility](REMLog, "utility");
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_FAULT))
      REMCheckedProtocolCast_cold_1((uint64_t)a2, v5);
  }
  if (a2 && (objc_msgSend(a2, "conformsToProtocol:", a1) & 1) == 0)
  {
    v6 = +[REMLog utility](REMLog, "utility");
    if (os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_FAULT))
    {
      v7 = objc_opt_class();
      if (a1)
        Name = protocol_getName(a1);
      else
        Name = "<No protocol supplied>";
      v9 = 138412546;
      v10 = v7;
      v11 = 2080;
      v12 = Name;
      _os_log_fault_impl(&dword_1B4A39000, (os_log_t)v6, OS_LOG_TYPE_FAULT, "rem_log_fault_if (src != nil && result == nil) -- Unexpected object type in checked protocol cast %@ expects %s", (uint8_t *)&v9, 0x16u);
    }
    return 0;
  }
  return a2;
}

void sub_1B4A802F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cdSavedReminderKeyToStorageKeyMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("titleDocumentData"), CFSTR("metadata"), CFSTR("titleDocument"), CFSTR("metadata"), CFSTR("priority"), CFSTR("metadata"), CFSTR("flagged"), CFSTR("metadata"), CFSTR("creationDate"), CFSTR("metadata"), CFSTR("recurrenceRules"), CFSTR("metadata"), CFSTR("startDateComponents"), CFSTR("metadata"), CFSTR("dueDateComponents"), CFSTR("metadata"), CFSTR("timeZone"),
    CFSTR("metadata"),
    CFSTR("allDay"),
    CFSTR("metadata"),
    CFSTR("notesDocumentData"),
    CFSTR("metadata"),
    CFSTR("notesDocument"),
    CFSTR("metadata"),
    CFSTR("alarms"),
    CFSTR("metadata"),
    CFSTR("dueDateDeltaAlertsData"),
    CFSTR("metadata"),
    CFSTR("hashtags"),
    CFSTR("metadata"),
    CFSTR("contactHandles"),
    CFSTR("metadata"),
    CFSTR("parentReminderID"),
    CFSTR("parentSavedReminderIdentifier"),
    CFSTR("listID"),
    CFSTR("template"),
    0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdSavedReminderKeyToStorageKeyMap_mapping;
  cdSavedReminderKeyToStorageKeyMap_mapping = v0;

}

void __cdReminderKeyToStorageKeyMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("startDateComponents"), CFSTR("startDate"), CFSTR("dueDateComponents"), CFSTR("dueDate"), CFSTR("alarms"), CFSTR("alarmStorage"), CFSTR("listID"), CFSTR("list"), CFSTR("parentReminderID"), CFSTR("parentReminder"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdReminderKeyToStorageKeyMap_mapping;
  cdReminderKeyToStorageKeyMap_mapping = v0;

}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_1B4A82D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A83594(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1B4A89844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A89C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A89E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8A194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8A4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8A790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8ACFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8B4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8B6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8C330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

void sub_1B4A8CA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cdSmartListSectionKeyToStorageKeyMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentID"), CFSTR("smartList"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdSmartListSectionKeyToStorageKeyMap_mapping;
  cdSmartListSectionKeyToStorageKeyMap_mapping = v0;

}

void __cdTemplateSectionKeyToStorageKeyMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentID"), CFSTR("template"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdTemplateSectionKeyToStorageKeyMap_mapping;
  cdTemplateSectionKeyToStorageKeyMap_mapping = v0;

}

void __cdListSectionKeyToStorageKeyMap_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentID"), CFSTR("list"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdListSectionKeyToStorageKeyMap_mapping;
  cdListSectionKeyToStorageKeyMap_mapping = v0;

}

BOOL rem_isUnsupportedVersionByRuntime(uint64_t a1)
{
  return rem_currentRuntimeVersion() < a1;
}

uint64_t rem_loggableSupportedVersionFrom(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const __CFString *v6;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_msgSend(v2, "minimumSupportedVersion");
  v4 = objc_msgSend(v2, "effectiveMinimumSupportedVersion");
  v5 = objc_msgSend(v2, "isUnsupported");

  v6 = CFSTR("N");
  if (v5)
    v6 = CFSTR("Y");
  return objc_msgSend(v1, "stringWithFormat:", CFSTR("supportedVersion=(V:%lld,EV:%lld,U:%@)"), v3, v4, v6);
}

uint64_t rem_feature_enabled(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = objc_retainAutorelease(a1);
  v4 = a2;
  objc_msgSend(v3, "cStringUsingEncoding:", 1);
  v5 = objc_retainAutorelease(v4);
  objc_msgSend(v5, "cStringUsingEncoding:", 1);

  return _os_feature_enabled_impl();
}

void sub_1B4A99D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  os_activity_scope_leave(&state);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1B4A9A174(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1B4A9A4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AA5DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B4AA6254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _defaultPropertiesAffectingIsConcealed()
{
  _QWORD v1[3];

  v1[2] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("markedForDeletion");
  v1[1] = CFSTR("effectiveMinimumSupportedAppVersion");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t OUTLINED_FUNCTION_6_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return objc_opt_class();
}

uint64_t REMLocalizedTimeOfDayCreationHour(unint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;

  if (a1 >= 6)
    v2 = 0;
  else
    v2 = a1 + 59;
  _REMGetLocalizedString(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "integerValue");
  }
  else if (a1 - 1 > 4)
  {
    v5 = 9;
  }
  else
  {
    v5 = qword_1B4B74510[a1 - 1];
  }

  return v5;
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_1_5(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2_5(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_1(uint64_t result, float a2)
{
  _QWORD *v2;
  float *v3;

  *v3 = a2;
  *v2 = result;
  return result;
}

uint64_t _auto_REMAccountTypeForPrimaryCloudKit()
{
  return 2;
}

id cloudBasedAccountTypes()
{
  if (cloudBasedAccountTypes_onceToken != -1)
    dispatch_once(&cloudBasedAccountTypes_onceToken, &__block_literal_global_19);
  return (id)cloudBasedAccountTypes_result;
}

void __cloudBasedAccountTypes_block_invoke()
{
  void *v0;

  v0 = (void *)cloudBasedAccountTypes_result;
  cloudBasedAccountTypes_result = (uint64_t)&unk_1E6836E08;

}

id cloudKitAccountTypes()
{
  if (cloudKitAccountTypes_onceToken != -1)
    dispatch_once(&cloudKitAccountTypes_onceToken, &__block_literal_global_5_0);
  return (id)cloudKitAccountTypes_result;
}

void __cloudKitAccountTypes_block_invoke()
{
  void *v0;

  v0 = (void *)cloudKitAccountTypes_result;
  cloudKitAccountTypes_result = (uint64_t)&unk_1E6836E20;

}

BOOL REMAccountTypeMaskContainsType(unint64_t a1, char a2)
{
  return ((1 << a2) & a1) != 0;
}

const __CFString *NSStringFromREMAccountType(uint64_t a1)
{
  const __CFString *result;
  NSObject *v4;
  NSObject *v5;

  result = CFSTR("Local");
  switch(a1)
  {
    case 0:
      +[REMLogStore read](REMLogStore, "read");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        NSStringFromREMAccountType_cold_2();

      goto LABEL_11;
    case 1:
      return result;
    case 2:
      result = CFSTR("iCloud");
      break;
    case 3:
      result = CFSTR("CalDAV");
      break;
    case 4:
      result = CFSTR("Exchange");
      break;
    case 6:
      result = CFSTR("iCloud Non-primary");
      break;
    default:
      +[REMLogStore read](REMLogStore, "read");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        NSStringFromREMAccountType_cold_1(a1);

LABEL_11:
      result = CFSTR("Unknown");
      break;
  }
  return result;
}

const __CFString *REMInternalDescriptionFromREMAccountType(uint64_t a1)
{
  const __CFString *result;
  NSObject *v4;
  NSObject *v5;

  result = CFSTR("Unknown");
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("Local");
      break;
    case 2:
      result = CFSTR("CloudKit_Primary");
      break;
    case 3:
      result = CFSTR("CalDav");
      break;
    case 4:
      result = CFSTR("Exchange");
      break;
    case 5:
      result = CFSTR("LocalInternal");
      break;
    case 6:
      result = CFSTR("CloudKit_Full");
      break;
    case 7:
      +[REMLogStore read](REMLogStore, "read");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        REMInternalDescriptionFromREMAccountType_cold_2();

      result = CFSTR("count");
      break;
    default:
      +[REMLogStore read](REMLogStore, "read");
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        NSStringFromREMAccountType_cold_1(a1);

      result = CFSTR("Undefined");
      break;
  }
  return result;
}

void OUTLINED_FUNCTION_3_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1B4AC034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC0458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC0574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC1670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AC1EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getUMUserManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getUMUserManagerClass_softClass;
  v7 = getUMUserManagerClass_softClass;
  if (!getUMUserManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getUMUserManagerClass_block_invoke;
    v3[3] = &unk_1E67FA198;
    v3[4] = &v4;
    __getUMUserManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B4AC1FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getUMUserManagerClass_block_invoke(uint64_t a1)
{
  UserManagementLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("UMUserManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUMUserManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getUMUserManagerClass_block_invoke_cold_1();
    UserManagementLibrary();
  }
}

void UserManagementLibrary()
{
  void *v0;

  if (!UserManagementLibraryCore_frameworkLibrary)
    UserManagementLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!UserManagementLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getUMUserPersonaAttributesClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;

  UserManagementLibrary();
  result = objc_getClass("UMUserPersonaAttributes");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUMUserPersonaAttributesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)__getUMUserPersonaAttributesClass_block_invoke_cold_1();
    return (Class)+[_REMNSPersistentHistoryTransactionStorage supportsSecureCoding](v3, v4);
  }
  return result;
}

void sub_1B4AC9040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

char *NewBase64Decode(char *__s, size_t a2, uint64_t *a3)
{
  size_t v4;
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  int v15;

  v4 = a2;
  if (a2 == -1)
    v4 = strlen(__s);
  result = (char *)malloc_type_calloc(3 * (v4 >> 2), 1uLL, 0x100004077774924uLL);
  v7 = 0;
  if (v4)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v15 = 0;
      do
      {
        v10 = v8;
        v11 = base64DecodeLookup[__s[v8]];
        if (v11 != 65)
        {
          *((_BYTE *)&v15 + v9++) = v11;
          if (v9 == 4)
            break;
        }
        v8 = v10 + 1;
      }
      while (v10 + 1 < v4);
      v12 = BYTE1(v15);
      v13 = &result[v7];
      *v13 = (BYTE1(v15) >> 4) | (4 * v15);
      v14 = BYTE2(v15);
      v13[1] = (BYTE2(v15) >> 2) | (16 * v12);
      v13[2] = HIBYTE(v15) | (v14 << 6);
      v7 = v7 + v9 - 1;
      v8 = v10 + 1;
    }
    while (v10 + 1 < v4);
  }
  if (a3)
    *a3 = v7;
  return result;
}

_BYTE *NewBase64Encode(uint64_t a1, unint64_t a2, int a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  _BYTE *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char v21;
  _BYTE *v22;
  char *v23;

  if (a2 == 3 * (a2 / 3))
    v8 = a2 / 3;
  else
    v8 = a2 / 3 + 1;
  v9 = (v8 >> 3) & 0x7FFFFFFFFFFFFFFLL;
  if (!a3)
    v9 = 0;
  result = malloc_type_calloc((v9 + 4 * v8) | 1, 1uLL, 0x100004077774924uLL);
  if (result)
  {
    v11 = 0;
    v12 = 0;
    if (a3)
      v13 = 48;
    else
      v13 = a2;
    v14 = v13;
    while (1)
    {
      v15 = v14 >= a2 ? a2 : v14;
      if (v11 + 2 >= v15)
      {
        v17 = v11;
      }
      else
      {
        do
        {
          v16 = &result[v12 + 3];
          *(v16 - 3) = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v11) >> 2];
          *(v16 - 2) = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(a1 + v11 + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(a1 + v11) & 3))];
          *(v16 - 1) = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(a1 + v11 + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(_BYTE *)(a1 + v11 + 1) & 0xF))];
          v17 = v11 + 3;
          v12 += 4;
          *v16 = base64EncodeLookup[*(_BYTE *)(a1 + v11 + 2) & 0x3F];
          v18 = v11 + 5;
          v11 += 3;
        }
        while (v18 < v15);
      }
      if (v14 >= a2)
        break;
      *(_WORD *)&result[v12] = 2573;
      v12 += 2;
      v14 = v15 + v13;
      v11 = v17;
    }
    v19 = v17 + 1;
    if (v17 + 1 >= a2)
    {
      if (v17 >= a2)
        goto LABEL_25;
      v22 = &result[v12];
      *v22 = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v17) >> 2];
      v22[1] = base64EncodeLookup[16 * (*(_BYTE *)(a1 + v17) & 3)];
      v21 = 61;
    }
    else
    {
      v20 = &result[v12];
      *v20 = base64EncodeLookup[(unint64_t)*(unsigned __int8 *)(a1 + v17) >> 2];
      v20[1] = base64EncodeLookup[((unint64_t)*(unsigned __int8 *)(a1 + v19) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)(a1 + v17) & 3))];
      v21 = base64EncodeLookup[4 * (*(_BYTE *)(a1 + v19) & 0xF)];
    }
    v23 = &result[v12];
    v23[2] = v21;
    v12 += 4;
    v23[3] = 61;
LABEL_25:
    result[v12] = 0;
    if (a4)
      *a4 = v12;
  }
  return result;
}

void sub_1B4ACC554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void __cdKeyToStorageKeyMap_block_invoke_0()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentAccountID"), CFSTR("parentAccount"), CFSTR("parentListID"), CFSTR("parentList"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdKeyToStorageKeyMap_mapping_0;
  cdKeyToStorageKeyMap_mapping_0 = v0;

}

void sub_1B4AD49E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_11_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_fault_impl(a1, v4, OS_LOG_TYPE_FAULT, a4, v5, 0xCu);
}

__CFString *NSStringFromREMFetchRequestType(unint64_t a1)
{
  if (a1 < 5)
    return off_1E67FA358[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown REMFetchRequestType %ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void __cdKeyToStorageKeyMap_block_invoke_1()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentAccountID"), CFSTR("parentAccount"), CFSTR("parentListID"), CFSTR("parentList"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdKeyToStorageKeyMap_mapping_1;
  cdKeyToStorageKeyMap_mapping_1 = v0;

}

void sub_1B4AE28D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getUMUserManagerClass_block_invoke_0(uint64_t a1)
{
  UserManagementLibrary_0();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("UMUserManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUMUserManagerClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getUMUserManagerClass_block_invoke_cold_1();
    UserManagementLibrary_0();
  }
}

void UserManagementLibrary_0()
{
  void *v0;

  if (!UserManagementLibraryCore_frameworkLibrary_0)
    UserManagementLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  if (!UserManagementLibraryCore_frameworkLibrary_0)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getUMUserPersonaAttributesClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;
  id v6;
  BOOL v7;
  id v8;
  id v9;
  id v10;

  UserManagementLibrary_0();
  result = objc_getClass("UMUserPersonaAttributes");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getUMUserPersonaAttributesClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)__getUMUserPersonaAttributesClass_block_invoke_cold_1();
    return (Class)+[REMDisplayDateUtils _displayDateWithDueDateComponents:alarms:hasAlarmDateComponents:floatingDateComponents:nonFloatingDateComponents:displayDateUtils:](v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return result;
}

void sub_1B4AE85B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __cdKeyToStorageKeyMap_block_invoke_2()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("parentAccountID"), CFSTR("parentAccount"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)cdKeyToStorageKeyMap_mapping_2;
  cdKeyToStorageKeyMap_mapping_2 = v0;

}

id rem_ICSDateFromNSDate(void *a1, void *a2)
{
  if (a2)
    rem_ICSDateFromNSDateInTimezone(a1, a2);
  else
    rem_ICSFloatingDateTimeFromNSDateInTimezone(a1, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id rem_ICSDateFromNSDateInTimezone(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  void *v6;
  void *v7;

  v3 = a1;
  v4 = a2;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v4 = (id)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v3, "timeIntervalSinceReferenceDate");
  rem_DateComponentsFromAbsoluteTime(v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithYear:month:day:hour:minute:second:timeZone:", objc_msgSend(v6, "year"), objc_msgSend(v6, "month"), objc_msgSend(v6, "day"), objc_msgSend(v6, "hour"), objc_msgSend(v6, "minute"), objc_msgSend(v6, "second"), v4);

  return v7;
}

id rem_DateComponentsFromAbsoluteTime(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "CalGregorianGMTCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "copy");

  if (v3)
  {
    objc_msgSend(v6, "setTimeZone:", v3);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithName:", CFSTR("UTC"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setTimeZone:", v7);

  }
  objc_msgSend(v6, "components:fromDate:", 252, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id rem_ICSFloatingDateTimeFromNSDateInTimezone(void *a1, void *a2)
{
  id v3;
  double v4;
  void *v5;
  void *v6;

  v3 = a2;
  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  rem_DateComponentsFromAbsoluteTime(v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB800]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v5, "year"), objc_msgSend(v5, "month"), objc_msgSend(v5, "day"), objc_msgSend(v5, "hour"), objc_msgSend(v5, "minute"), objc_msgSend(v5, "second"));
  return v6;
}

void ___setSubcomponentsOnICSComponent_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  REMInvalidICSAlarmDateComponents();
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DDB808]), "initWithYear:month:day:hour:minute:second:", objc_msgSend(v3, "year"), objc_msgSend(v3, "month"), objc_msgSend(v3, "day"), objc_msgSend(v3, "hour"), objc_msgSend(v3, "minute"), objc_msgSend(v3, "second"));
  v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0DDB880]), "initWithDate:", v0);
  v2 = (void *)_setSubcomponentsOnICSComponent_sInvalidTrigger;
  _setSubcomponentsOnICSComponent_sInvalidTrigger = v1;

}

void OUTLINED_FUNCTION_0_8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t REMReminderPriorityLevelForPriority(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 3;
  v2 = 1;
  if (a1 == 5)
    v2 = 2;
  if (a1 >= 5)
    v1 = v2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t REMReminderDefaultPriorityForPriorityLevel(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
    return 0;
  else
    return 9 - 4 * (a1 - 1);
}

const __CFString *NSStringFromPriorityLevel(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("none");
  else
    return off_1E67FA658[a1 - 1];
}

__CFString *PropertyNameFromREMReminderChangeTrackingProperty(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) < 0x11)
    return off_1E67FA670[a1 - 1];
  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("Unexpected REMReminderChangeTrackingProperty key."));
  return 0;
}

void sub_1B4AF3C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4AFC398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFC4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4AFC554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4AFC698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4AFC7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4AFC948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFCA00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFD274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  MEMORY[0x1B5E3DB94](v4, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4AFD458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFD4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4AFD750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4AFD85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B4AFD8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4AFD96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFD9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFDADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFDB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFDC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFDD0C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1B5E3DB94](v2, 0x10B3C407D90225ELL);

  _Unwind_Resume(a1);
}

void sub_1B4AFDDAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40A258B440);
  _Unwind_Resume(a1);
}

void sub_1B4AFDE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CRDT::Document_DocObject *google::protobuf::internal::GenericTypeHandler<CRDT::Document_DocObject>::New()
{
  CRDT::Document_DocObject *v0;

  v0 = (CRDT::Document_DocObject *)operator new();
  CRDT::Document_DocObject::Document_DocObject(v0);
  return v0;
}

void sub_1B4AFE000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

CRDT::Document_CustomObject_MapEntry *google::protobuf::internal::GenericTypeHandler<CRDT::Document_CustomObject_MapEntry>::New()
{
  CRDT::Document_CustomObject_MapEntry *v0;

  v0 = (CRDT::Document_CustomObject_MapEntry *)operator new();
  CRDT::Document_CustomObject_MapEntry::Document_CustomObject_MapEntry(v0);
  return v0;
}

void sub_1B4AFE060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40078F06BDLL);
  _Unwind_Resume(a1);
}

void std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E67F5500, MEMORY[0x1E0DE42D0]);
}

{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E67F5500, MEMORY[0x1E0DE42D0]);
}

void sub_1B4AFE0D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void sub_1B4AFE270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFE310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFE3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFE400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFE4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4AFE568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4AFE648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4AFE740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFE7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFE88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4AFE9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  uint64_t v12;

  MEMORY[0x1B5E3DB94](v12, 0x10B3C407D90225ELL);

  _Unwind_Resume(a1);
}

void sub_1B4AFEC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B4AFED74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFEE40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFF050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B4AFF170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4AFF1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFF230(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFF278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFF410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4AFF4A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFF544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4AFF5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4AFF774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4AFF854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4AFF8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4AFFB2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4AFFC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B00074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1B4B00348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B005F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B4B00824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B00AF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CRDT::Dictionary_Element *google::protobuf::internal::GenericTypeHandler<CRDT::Dictionary_Element>::New()
{
  CRDT::Dictionary_Element *v0;

  v0 = (CRDT::Dictionary_Element *)operator new();
  CRDT::Dictionary_Element::Dictionary_Element(v0);
  return v0;
}

void sub_1B4B00C44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C4079506790);
  _Unwind_Resume(a1);
}

void sub_1B4B01F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *removeDirectToSinkEdges(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = result[7];
  v2 = v1 - result[6];
  if ((unint64_t)v2 >= 9)
  {
    v3 = result;
    v4 = 0;
    v5 = v2 >> 3;
    do
    {
      v6 = v3[6] + 8 * v4;
      v7 = *(_DWORD *)(*(_QWORD *)v6 + 72);
      if (v7 < 2)
      {
        ++v4;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v6 + 72) = v7 - 1;
        v8 = v1 - (v6 + 8);
        if (v1 != v6 + 8)
          result = memmove((void *)v6, (const void *)(v6 + 8), v1 - (v6 + 8));
        v1 = v6 + v8;
        v3[7] = v6 + v8;
        --v5;
      }
    }
    while (v4 < v5);
  }
  return result;
}

void minIdPath(TopoSubstring *a1@<X0>, uint64_t a2@<X8>)
{
  TopoSubstring *v2;
  id v3;
  uint64_t v4;
  TopoSubstring **v5;
  TopoSubstring ***v6;
  TopoSubstring **v7;
  _QWORD *v8;
  unint64_t v9;
  TopoSubstring *v10;
  TopoSubstring ***v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id *v20;
  void *v21;
  id *v22;
  id *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  unsigned int v31;
  id *v32;
  id v33;
  void *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  id *v40;
  id *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  float v48;
  __n128 *v49;
  uint64_t v50;
  id *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  id **v60;
  id **v61;
  id obj;
  unsigned int v63;
  __int128 v64;
  id v65;
  __int128 v66;
  __int128 v67;
  id v68;
  __int128 v69;
  __int128 v70;
  float v71;
  id *v72;
  id *v73;
  uint64_t v74;

  v2 = a1;
  v3 = *(id *)a1;
  v4 = *((unsigned int *)v2 + 2);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 1.0;
  v6 = (TopoSubstring ***)((char *)v2 + 48);
  v5 = (TopoSubstring **)*((_QWORD *)v2 + 6);
  v8 = (_QWORD *)((char *)v2 + 56);
  v7 = (TopoSubstring **)*((_QWORD *)v2 + 7);
  if (v7 == v5)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    while (1)
    {
      if ((unint64_t)((char *)v7 - (char *)v5) >= 9)
      {
        v10 = v2;
        v11 = v6;
        v12 = v8;
        removeDirectToSinkEdges(v10);
        v8 = v12;
        v6 = v11;
        v7 = (TopoSubstring **)*v12;
        v5 = *v11;
      }
      v13 = (char *)v7 - (char *)v5;
      if (v13 != 8)
        break;
      v2 = *v5;
      if (*((_DWORD *)*v5 + 18) > 1u)
      {
        v9 = 1;
        goto LABEL_76;
      }
      v14 = v3;
      v15 = *(id *)v2;
      v16 = v15;
      v17 = *((unsigned int *)v2 + 2);
      if (v4 < v17)
      {
        v18 = v14;
LABEL_70:
        v17 = v4;
        goto LABEL_71;
      }
      v18 = v15;
      if ((_DWORD)v4 == (_DWORD)v17)
      {
        if (objc_msgSend(v14, "TTCompare:", v15) == -1)
          v18 = v14;
        else
          v18 = v16;
        goto LABEL_70;
      }
LABEL_71:
      v3 = v18;

      v4 = v17;
LABEL_72:
      v6 = (TopoSubstring ***)((char *)v2 + 48);
      v5 = (TopoSubstring **)*((_QWORD *)v2 + 6);
      v8 = (_QWORD *)((char *)v2 + 56);
      v7 = (TopoSubstring **)*((_QWORD *)v2 + 7);
      if (v7 == v5)
        goto LABEL_76;
    }
    v60 = (id **)v8;
    v61 = (id **)v6;
    v19 = (uint64_t)v72;
    v20 = v73;
    if (v73 != v72)
    {
      do
      {
        v21 = *(v20 - 5);
        v20 -= 5;

      }
      while (v20 != (id *)v19);
      v13 = (char *)*v60 - (char *)*v61;
    }
    v73 = (id *)v19;
    std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve((uint64_t *)&v72, v13 >> 3);
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(&v69);
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>((uint64_t)&v69, vcvtps_u32_f32((float)(unint64_t)(*v60 - *v61) / v71));
    v22 = *v61;
    v23 = *v60;
    while (v22 != v23)
    {
      obj = 0;
      obj = *v22;
      *(_QWORD *)&v66 = &obj;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v69, &obj, (uint64_t)&std::piecewise_construct, (_QWORD **)&v66)[3] = 1;
      *(_QWORD *)&v66 = 0;
      DWORD2(v66) = 0;
      v67 = (unint64_t)obj;
      v68 = obj;
      std::vector<std::pair<minIdPathData,TopoSubstring *>>::push_back[abi:ne180100]((uint64_t *)&v72, (uint64_t *)&v66);

      ++v22;
    }
    do
    {
      v66 = 0u;
      v67 = 0u;
      LODWORD(v68) = 1065353216;
      v24 = (_QWORD *)v70;
      if ((_QWORD)v70)
      {
        while (1)
        {
          v25 = v24[2];
          v26 = v24[3];
          v65 = (id)v25;
          if (v26 < *(unsigned int *)(v25 + 72))
            goto LABEL_47;
          minIdPath((uint64_t *)&obj, (TopoSubstring *)v25);
          if (v73 == v72)
            goto LABEL_39;
          v27 = 0;
          v28 = obj;
          if ((unint64_t)(((char *)v73 - (char *)v72) / 40) <= 1)
            v29 = 1;
          else
            v29 = ((char *)v73 - (char *)v72) / 40;
          do
          {
            if (v72[v27 + 2] == v65 && v72[v27])
            {
              v30 = v28;
              v31 = v63;
              v32 = &v72[v27];
              v33 = v72[v27];
              v34 = v33;
              v35 = *((_DWORD *)v32 + 2);
              if (v31 < v35)
              {
                v36 = v30;
                goto LABEL_29;
              }
              v36 = v33;
              if (v31 == v35)
              {
                if (objc_msgSend(v30, "TTCompare:", v33) == -1)
                  v36 = v30;
                else
                  v36 = v34;
LABEL_29:
                v35 = v31;
              }
              v28 = v36;

              v63 = v35;
            }
            v27 += 5;
            --v29;
          }
          while (v29);
          obj = v28;
          if (v73 != v72)
          {
            v37 = 0;
            v38 = v63;
            if ((unint64_t)(((char *)v73 - (char *)v72) / 40) <= 1)
              v39 = 1;
            else
              v39 = ((char *)v73 - (char *)v72) / 40;
            do
            {
              v40 = &v72[v37];
              v41 = &v72[v37 + 2];
              if (*v41 == v65)
              {
                objc_storeStrong(&v72[v37], v28);
                *((_DWORD *)v40 + 2) = v38;
                *(_OWORD *)v41 = v64;
              }
              v37 += 5;
              --v39;
            }
            while (v39);
          }
LABEL_39:
          v42 = v3;
          v43 = obj;
          v44 = v43;
          v45 = v63;
          if (v4 < v63)
          {
            v46 = v42;
            goto LABEL_45;
          }
          v46 = v43;
          if ((_DWORD)v4 == v63)
          {
            if (objc_msgSend(v42, "TTCompare:", v43) == -1)
              v46 = v42;
            else
              v46 = v44;
LABEL_45:
            v45 = v4;
          }
          v3 = v46;

          v26 = *((_QWORD *)&v64 + 1);
          v65 = (id)v64;

          v4 = v45;
LABEL_47:
          v47 = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(&v66, &v65);
          if (v47)
          {
            v47[3] += v26;
          }
          else
          {
            obj = &v65;
            std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v66, &v65, (uint64_t)&std::piecewise_construct, (_QWORD **)&obj)[3] = v26;
          }
          v24 = (_QWORD *)*v24;
          if (!v24)
          {
            v48 = *(float *)&v68;
            v49 = (__n128 *)v67;
            goto LABEL_53;
          }
        }
      }
      v49 = 0;
      v48 = 1.0;
LABEL_53:
      v71 = v48;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(&v69, v49, 0);
      v50 = (uint64_t)v72;
      v51 = v73;
      if ((char *)v73 - (char *)v72 < 1)
      {
        v52 = 0;
        v54 = 0;
      }
      else
      {
        v52 = (void **)std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(0xCCCCCCCCCCCCCCCDLL * (v73 - v72));
        v54 = v53;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v50, v51, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v51 - v50) >> 3), v52, v54);
      if (v52)
        operator delete(v52);
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&v66);
    }
    while (*((_QWORD *)&v70 + 1) > 1uLL);
    if (*v60 != *v61)
    {
      v55 = 0;
      v56 = *v60 - *v61;
      if (v56 <= 1)
        v56 = 1;
      v57 = 4;
      do
      {
        (*v61)[v55++] = v72[v57];
        v57 += 5;
      }
      while (v56 != v55);
    }
    v2 = *(TopoSubstring **)(v70 + 16);
    v9 = *(_QWORD *)(v70 + 24);
    if (v9 >= *((unsigned int *)v2 + 18))
      goto LABEL_72;
  }
LABEL_76:
  v58 = v3;
  *(_QWORD *)a2 = v58;
  *(_DWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v2;
  *(_QWORD *)(a2 + 24) = v9;
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&v69);
  *(_QWORD *)&v69 = &v72;
  std::vector<std::pair<minIdPathData,TopoSubstring *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);

}

void sub_1B4B02560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a23);
  a23 = (void **)(v25 - 120);
  std::vector<std::pair<minIdPathData,TopoSubstring *>>::__destroy_vector::operator()[abi:ne180100](&a23);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    std::vector<std::pair<minIdPathData,TopoSubstring *>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<minIdPathData,TopoSubstring *>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B4B0269C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<minIdPathData,TopoSubstring *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<minIdPathData,TopoSubstring *>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v18[4] = result;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(result, v13);
    v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v16];
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *((_OWORD *)v15 + 1) = *((_OWORD *)a2 + 1);
    *((_QWORD *)v15 + 4) = a2[4];
    v18[2] = v15 + 40;
    std::vector<std::pair<minIdPathData,TopoSubstring *>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<minIdPathData,TopoSubstring *>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_OWORD *)(v7 + 16) = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v7 + 32) = a2[4];
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_1B4B027E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<minIdPathData,TopoSubstring *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t traverseRecursive(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v4;
  void (**v5)(id, uint64_t, char *);
  _QWORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  char v16;
  uint64_t v17;
  uint64_t *v18;

  v4 = a1;
  v17 = a1;
  v5 = a3;
  v16 = 0;
  if (*(_DWORD *)(v4 + 72) >= 2u)
  {
    v6 = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(a2, &v17);
    if (!v6)
    {
      v11 = *(_DWORD *)(v17 + 72);
      v18 = &v17;
      v10 = 0;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)a2, &v17, (uint64_t)&std::piecewise_construct, &v18)+ 6) = v11 - 1;
      goto LABEL_20;
    }
    v7 = *((_DWORD *)v6 + 6) - 1;
    *((_DWORD *)v6 + 6) = v7;
    if (v7)
    {
LABEL_19:
      v10 = 0;
      goto LABEL_20;
    }
    v4 = v17;
  }
  v5[2](v5, v4, &v16);
  while (1)
  {
    if (v16)
    {
      v10 = 1;
      goto LABEL_20;
    }
    v8 = *(uint64_t **)(v17 + 48);
    v9 = *(uint64_t **)(v17 + 56);
    if ((char *)v9 - (char *)v8 != 8 || *(_DWORD *)(*v8 + 72) != 1)
      break;
    v17 = *v8;
    ((void (*)(void (**)(id, uint64_t, char *)))v5[2])(v5);
  }
  if (v8 == v9)
    goto LABEL_19;
  v12 = v8 + 1;
  do
  {
    v13 = traverseRecursive(*(v12 - 1), a2, v5);
    v10 = v13;
    if (v12 == v9)
      v14 = 1;
    else
      v14 = v13;
    ++v12;
  }
  while ((v14 & 1) == 0);
LABEL_20:

  return v10;
}

void sub_1B4B02948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void traverseRecursive(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  traverseRecursive(a1, (_QWORD *)v3, v5);
  v4 = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(v3);
  MEMORY[0x1B5E3DB94](v4, 0x10A0C408EF24B1CLL);

}

void sub_1B4B029EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void traverseUnorderedSimple(uint64_t a1, void *a2)
{
  void (**v2)(id, uint64_t, char *);
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  _OWORD v8[2];
  __int128 v9;
  _OWORD v10[2];
  int v11;
  uint64_t v12;

  v12 = a1;
  v2 = a2;
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  v9 = 0u;
  memset(v8, 0, sizeof(v8));
  v7 = 0;
  std::deque<TopoSubstring *>::push_back(v8, &v12);
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v10, &v12, &v12);
  while (*((_QWORD *)&v9 + 1))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v8[0] + 1)
                               + (((unint64_t)(v9 + *((_QWORD *)&v9 + 1) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v9 + *((_QWORD *)&v9 + 1) - 1) & 0x1FF));
    --*((_QWORD *)&v9 + 1);
    std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v8, 1);
    v2[2](v2, v3, &v7);
    if (v7)
      break;
    v5 = *(uint64_t **)(v3 + 48);
    v4 = *(uint64_t **)(v3 + 56);
    while (v5 != v4)
    {
      v6 = 0;
      v6 = *v5;
      if (!std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(v10, &v6))
      {
        std::deque<TopoSubstring *>::push_back(v8, &v6);
        std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v10, &v6, &v6);
      }
      ++v5;
    }
  }
  std::deque<TopoSubstring *>::~deque[abi:ne180100](v8);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)v10);

}

void sub_1B4B02B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::deque<TopoSubstring *>::~deque[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

void traverseUnordered(uint64_t a1, void *a2)
{
  void (**v2)(id, uint64_t, char *);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  _OWORD v9[2];
  __int128 v10;
  _OWORD v11[2];
  int v12;
  uint64_t v13;

  v13 = a1;
  v2 = a2;
  memset(v11, 0, sizeof(v11));
  v12 = 1065353216;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  v8 = 0;
  std::deque<TopoSubstring *>::push_back(v9, &v13);
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v11, &v13, &v13);
  while (*((_QWORD *)&v10 + 1))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v9[0] + 1)
                               + (((unint64_t)(v10 + *((_QWORD *)&v10 + 1) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v10 + *((_QWORD *)&v10 + 1) - 1) & 0x1FF));
    --*((_QWORD *)&v10 + 1);
    std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v9, 1);
    v2[2](v2, v3, &v8);
    v4 = v3;
    if (v8)
      break;
    while (1)
    {
      v6 = *(char **)(v4 + 48);
      v5 = *(char **)(v4 + 56);
      if (v5 - v6 != 8)
        break;
      v4 = *(_QWORD *)v6;
      if (*(_DWORD *)(*(_QWORD *)v6 + 72) != 1)
        break;
      v2[2](v2, *(_QWORD *)v6, &v8);
      if (v8 || v4 == v3)
        goto LABEL_16;
    }
    while (v6 != v5)
    {
      v7 = 0;
      v7 = *(_QWORD *)v6;
      if (*(_DWORD *)(v7 + 72) > 1u)
      {
        if (!std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(v11, &v7))
        {
          std::deque<TopoSubstring *>::push_back(v9, &v7);
          std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v11, &v7, &v7);
        }
      }
      else
      {
        std::deque<TopoSubstring *>::push_back(v9, &v7);
      }
      v6 += 8;
    }
  }
LABEL_16:
  std::deque<TopoSubstring *>::~deque[abi:ne180100](v9);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)v11);

}

void sub_1B4B02CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::deque<TopoSubstring *>::~deque[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

BOOL hasLoop(TopoSubstring *a1)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD v5[5];
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v2 = MEMORY[0x1E0C809B0];
  v10 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___Z7hasLoopP13TopoSubstring_block_invoke;
  v6[3] = &unk_1E67FA860;
  v6[4] = &v7;
  traverseUnordered((uint64_t)a1, v6);
  v5[0] = v2;
  v5[1] = 3221225472;
  v5[2] = ___Z7hasLoopP13TopoSubstring_block_invoke_2;
  v5[3] = &unk_1E67FA860;
  v5[4] = &v7;
  traverseRecursive((uint64_t)a1, v5);
  v3 = v8[3] != 0;
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1B4B02DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z7hasLoopP13TopoSubstring_block_invoke(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t ___Z7hasLoopP13TopoSubstring_block_invoke_2(uint64_t result)
{
  --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

id updateTopoID(const TopoID *a1, const TopoIDRange *a2, const TopoIDRange *a3)
{
  id v6;
  unsigned int var1;
  unsigned int v8;
  id v9;

  v6 = a1->var0;
  if (objc_msgSend(a1->var0, "isEqual:", a2->var0.var0))
  {
    var1 = a1->var1;
    v8 = a2->var0.var1;
    if (var1 >= v8 && var1 < a2->var1 + v8)
    {
      v9 = a3->var0.var0;

      return v9;
    }
  }
  return v6;
}

void sub_1B4B02EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void updateTopoIDRange(TopoIDRange *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int var1;
  unsigned int v16;
  id v17;
  unsigned int v18;
  id v19;
  void *v20;
  int v21;
  id v22;
  int v23;
  int v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  unsigned int v29;
  id v30;
  void *v31;
  unsigned int v32;
  int v33;
  id v34;
  id v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  unsigned int v46;
  id v47;
  int v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  int v54;
  id location;
  uint64_t v56;
  unsigned int v57;
  id v58;
  int v59;
  int v60;

  if ((objc_msgSend(a1->var0.var0, "isEqual:", *a2) & 1) == 0)
  {
LABEL_5:
    v13 = a4[1];
    if (v13 >= a4[2])
    {
      v14 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)a1);
    }
    else
    {
      *(_QWORD *)v13 = a1->var0.var0;
      *(_DWORD *)(v13 + 8) = a1->var0.var1;
      *(_DWORD *)(v13 + 16) = a1->var1;
      v14 = v13 + 24;
    }
    a4[1] = v14;
    return;
  }
  v8 = a1->var0.var0;
  v9 = a1->var1 + a1->var0.var1;
  location = v8;
  v56 = v9;
  if (TopoID::operator<=((uint64_t)&location, a2))
  {

    goto LABEL_5;
  }
  v10 = (id)*a2;
  v11 = (*((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 2));
  v52 = v10;
  v53 = v11;
  v12 = TopoID::operator>=((uint64_t)a1, &v52);

  if (v12)
    goto LABEL_5;
  var1 = a1->var0.var1;
  v16 = *((_DWORD *)a2 + 2);
  if (v16 > var1)
  {
    TopoIDRange::splitPairAt(a1, v16 - var1, (uint64_t)&location);
    v17 = (id)*a2;
    v18 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 2);
    v19 = v58;
    v20 = v19;
    if (v18 >= v60 + v59)
    {
      if (v18 != v60 + v59)
      {

        goto LABEL_31;
      }
      v39 = objc_msgSend(v17, "TTCompare:", v19);

      if (v39 != -1)
      {
LABEL_31:
        v41 = *(id *)a3;
        v42 = *(_DWORD *)(a3 + 8);
        objc_storeStrong(&v58, v41);
        v59 = v42;
        v43 = a4[1];
        if (v43 >= a4[2])
        {
          v38 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)&location);
        }
        else
        {
          *(_QWORD *)v43 = location;
          *(_DWORD *)(v43 + 8) = v56;
          *(_DWORD *)(v43 + 16) = v57;
          v38 = v43 + 24;
        }
        a4[1] = v38;
        if (v38 < a4[2])
        {
LABEL_35:
          *(_QWORD *)v38 = v58;
          *(_DWORD *)(v38 + 8) = v59;
          *(_DWORD *)(v38 + 16) = v60;
          v44 = v38 + 24;
LABEL_37:
          a4[1] = v44;

          return;
        }
LABEL_36:
        v44 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)&v58);
        goto LABEL_37;
      }
    }
    else
    {

    }
    v21 = *((_DWORD *)a2 + 4);
    v22 = v58;
    v23 = v59 + v21;
    v52 = v22;
    v53 = (v59 + v21);
    v24 = v60 - v21;
    v54 = v60 - v21;
    v60 = v21;
    v25 = a4[1];
    if (v25 >= a4[2])
    {
      v27 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)&v52);
      v26 = v52;
    }
    else
    {
      v26 = v22;
      *(_QWORD *)v25 = v26;
      *(_DWORD *)(v25 + 8) = v23;
      *(_DWORD *)(v25 + 16) = v24;
      v27 = v25 + 24;
    }
    a4[1] = v27;

    goto LABEL_31;
  }
  v28 = a1->var0.var0;
  v29 = a1->var1 + a1->var0.var1;
  v30 = (id)*a2;
  v31 = v30;
  v32 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 2);
  if (v29 > v32)
  {

    goto LABEL_16;
  }
  if (v29 == v32)
  {
    v40 = objc_msgSend(v28, "TTCompare:", v30);

    if (v40 == 1)
    {
LABEL_16:
      v33 = *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 2) - a1->var0.var1;
      v34 = (id)*a2;
      TopoIDRange::splitPairAt(a1, v33, (uint64_t)&location);

      v35 = *(id *)a3;
      v36 = a1->var0.var1 + *(_DWORD *)(a3 + 8) - *((_DWORD *)a2 + 2);
      objc_storeStrong(&location, v35);
      LODWORD(v56) = v36;
      v37 = a4[1];
      if (v37 >= a4[2])
      {
        v38 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)&location);
      }
      else
      {
        *(_QWORD *)v37 = location;
        *(_DWORD *)(v37 + 8) = v56;
        *(_DWORD *)(v37 + 16) = v57;
        v38 = v37 + 24;
      }
      a4[1] = v38;
      if (v38 < a4[2])
        goto LABEL_35;
      goto LABEL_36;
    }
  }
  else
  {

  }
  v45 = a1->var0.var0;
  v46 = a1->var1;
  v57 = v46;
  v47 = *(id *)a3;
  v48 = a1->var0.var1 + *(_DWORD *)(a3 + 8) - *((_DWORD *)a2 + 2);
  location = v47;

  LODWORD(v56) = v48;
  v49 = a4[1];
  if (v49 >= a4[2])
  {
    v51 = std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(a4, (uint64_t)&location);
    v50 = location;
  }
  else
  {
    v50 = v47;
    *(_QWORD *)v49 = v50;
    *(_DWORD *)(v49 + 8) = v48;
    *(_DWORD *)(v49 + 16) = v46;
    v51 = v49 + 24;
  }
  a4[1] = v51;

}

void sub_1B4B03330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

BOOL TopoID::operator<=(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *((_DWORD *)a2 + 2);
  if (v4 == v5)
  {
    if ((objc_msgSend(*(id *)a1, "isEqual:", *a2) & 1) != 0)
      return 1;
    v4 = *(_DWORD *)(a1 + 8);
    v5 = *((_DWORD *)a2 + 2);
  }
  if (v4 < v5)
    return 1;
  return v4 == v5 && objc_msgSend(*(id *)a1, "TTCompare:", *a2) == -1;
}

BOOL TopoID::operator>=(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *((_DWORD *)a2 + 2);
  if (v4 == v5)
  {
    if ((objc_msgSend(*(id *)a1, "isEqual:", *a2) & 1) != 0)
      return 1;
    v4 = *(_DWORD *)(a1 + 8);
    v5 = *((_DWORD *)a2 + 2);
  }
  if (v4 > v5)
    return 1;
  return v4 == v5 && objc_msgSend(*(id *)a1, "TTCompare:", *a2) == 1;
}

void TopoIDRange::splitPairAt(TopoIDRange *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id v6;
  unsigned int var1;
  id v8;
  int v9;
  int v10;

  v6 = this->var0.var0;
  var1 = this->var0.var1;
  v8 = this->var0.var0;
  v9 = this->var0.var1 + a2;
  v10 = this->var1 - a2;
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = var1;
  *(_DWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 24) = v8;
  *(_DWORD *)(a3 + 32) = v9;
  *(_DWORD *)(a3 + 40) = v10;

}

void sub_1B4B03730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B038FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  _Block_object_dispose(&a17, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(v17);
  a9.super_class = (Class)TTMergeableString;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1B4B039FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  topotext::String::~String((topotext::String *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4B03AC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B03B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B03BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B03C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B03D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B4B03EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B04290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B046D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B4B047FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B04928(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B049F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1B4B04B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B04F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  return result;
}

char *std::vector<TopoSubstring *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<TopoSubstring *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1B4B051F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B4B052C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  id *v4;
  id *v5;
  va_list va;

  va_start(va, a4);
  std::vector<TopoIDRange>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1B4B0533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B4B0584C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B05D1C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4B05F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<_NSRange>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B4B0616C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B06244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B062C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B06398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B06564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B0673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B0694C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1B4B06CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B06FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  uint64_t v31;

  _Block_object_dispose(&a30, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(a11);
  _Block_object_dispose((const void *)(v31 - 208), 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(a12);
  _Block_object_dispose((const void *)(v31 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1B4B07378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B0755C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B076E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B07760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B07990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B07B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1B4B07DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B07FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void sub_1B4B081C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B083D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B087BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B4B09398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  uint64_t v39;

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a19);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a25);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a31);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a37);
  std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::~__hash_table(v39 - 176);

  _Unwind_Resume(a1);
}

void TopoSubstring::addChild(TopoSubstring *this, TopoSubstring *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 8);
  v4 = (char *)this + 64;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 6);
    v18 = (char *)*((_QWORD *)this + 7);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 6) = v16;
    *((_QWORD *)this + 7) = v8;
    *((_QWORD *)this + 8) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 7) = v8;
  ++*((_DWORD *)a2 + 18);
}

void std::vector<TopoSubstring *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<TopoSubstring *>::__append((void **)a1, a2 - v2);
  }
}

void sub_1B4B096FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B09790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B09820(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B09A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::~__hash_table(v13);
  _Block_object_dispose((const void *)(v14 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__51(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__52(uint64_t a1)
{
  return std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::~__hash_table(a1 + 48);
}

void sub_1B4B09BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B09F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t std::deque<TopoSubstring *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TopoSubstring **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<TopoSubstring **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void TopoSubstring::TopoSubstring(TopoSubstring *this, TopoID a2, int a3, int a4)
{
  unsigned int var1;
  id var0;
  void *v8;
  id v9;

  var1 = a2.var1;
  var0 = a2.var0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = a3;
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  objc_storeStrong((id *)this, a2.var0);
  *((_DWORD *)this + 2) = var1;
  *((_DWORD *)this + 4) = a4;
  v8 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = var0;
  v9 = var0;

  *((_DWORD *)this + 8) = var1;
}

void TopoSubstring::TopoSubstring(TopoSubstring *this, TopoIDRange *a2, int a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = a3;
  *((_BYTE *)this + 44) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 18) = 0;
  objc_storeStrong((id *)this, a2->var0.var0);
  *((_DWORD *)this + 2) = a2->var0.var1;
  *((_DWORD *)this + 4) = a2->var1;

}

void TopoSubstring::TopoSubstring(TopoSubstring *this, TopoSubstring *a2)
{
  *(_QWORD *)this = *(id *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((id *)a2 + 3);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_BYTE *)this + 44) = *((_BYTE *)a2 + 44);
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
}

void std::vector<std::pair<minIdPathData,TopoSubstring *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        v4 -= 40;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::vector<std::pair<minIdPathData,TopoSubstring *>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 40);
    v2 -= 40;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<minIdPathData,TopoSubstring *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0A9D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(_QWORD *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[1].n128_u64[1];
      v8[2] = a2[1].n128_u64[0];
      v8[3] = v9;
      v10 = (_QWORD *)*v8;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v8);
      a2 = (__n128 *)a2->n128_u64[0];
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v11 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(a1, a2 + 1);
      a2 = (__n128 *)a2->n128_u64[0];
    }
  }
}

void sub_1B4B0AB94(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B4B0ABB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(_QWORD *a1, __n128 *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v4);
}

void sub_1B4B0B104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = a1 + 16;
  v6 = (__n128 *)operator new(0x20uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = *a2;
  v6[1] = *a2;
  *(_BYTE *)(a3 + 16) = 1;
  v8 = v6[1].n128_u64[0];
  v9 = HIDWORD(v8);
  v10 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x333333333333333)
    v1 = 0x333333333333333;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(40 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, id *a2, unint64_t a3, void **a4, uint64_t a5)
{
  id *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  _OWORD *v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  char *v52;
  void **v53;
  _QWORD *v54;
  void **v55;
  char *v56;
  id v57;
  void *v58;
  unsigned int v59;
  id v60;
  void *v61;
  void *v62;
  unsigned int v63;
  id v64;
  void *v65;
  uint64_t v66;
  id v67;
  void *v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void **v77;
  void *v78;
  void *v79;
  void **v80;
  unint64_t v81;
  void *v82;
  uint64_t v84;
  uint64_t v85;
  id *v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v90;
  char *v91;
  id v92;
  id v93;
  id v94;
  void **v95;

  if (a3 < 2)
    return;
  v5 = a2;
  v6 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      v16 = a3 >> 1;
      v18 = a1 + 40 * (a3 >> 1);
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, a1 + 40 * (a3 >> 1), a3 >> 1, a4, a5);
        v19 = a3 - v16;
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v18, v5, v19, a4, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v18, (uint64_t)v5, v16, v19, a4, a5);
        return;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, (id *)(a1 + 40 * (a3 >> 1)), a3 >> 1, (char *)a4);
      v52 = (char *)&a4[5 * v16];
      std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v18, v5, a3 - v16, v52);
      v87 = a3;
      v53 = &a4[5 * a3];
      v54 = (_QWORD *)(a1 + 32);
      v55 = a4;
      v56 = v52;
      v91 = v52;
      v95 = v53;
      while (1)
      {
        if (v56 == (char *)v53)
        {
          if (v55 != (void **)v52)
          {
            v75 = 0;
            do
            {
              v76 = &v54[v75];
              v77 = &v55[v75];
              v78 = v55[v75];
              v55[v75] = 0;
              v79 = (void *)v54[v75 - 4];
              v54[v75 - 4] = v78;

              *((_DWORD *)v76 - 6) = v55[v75 + 1];
              *((_OWORD *)v76 - 1) = *(_OWORD *)&v55[v75 + 2];
              *v76 = v55[v75 + 4];
              v75 += 5;
            }
            while (v77 + 5 != (void **)v52);
          }
LABEL_69:
          v80 = a4;
          if (a4)
          {
            v81 = v87;
            do
            {
              v82 = *v80;
              v80 += 5;

              --v81;
            }
            while (v81);
          }
          return;
        }
        v57 = *(id *)v56;
        v58 = (void *)*((_QWORD *)v56 + 2);
        v59 = *((_DWORD *)v56 + 2);
        v60 = *v55;
        v61 = v60;
        v62 = v55[2];
        if (v58 == v62)
        {
          v63 = *((_DWORD *)v55 + 2);
          if (v59 >= v63)
          {
            if (v59 != v63)
            {

LABEL_56:
              v67 = *v55;
              *v55 = 0;
              v68 = (void *)*(v54 - 4);
              *(v54 - 4) = v67;

              *((_DWORD *)v54 - 6) = *((_DWORD *)v55 + 2);
              *((_OWORD *)v54 - 1) = *((_OWORD *)v55 + 1);
              *v54 = v55[4];
              v55 += 5;
              goto LABEL_57;
            }
            v66 = objc_msgSend(v57, "TTCompare:", v60);

            if (v66 != -1)
              goto LABEL_56;
          }
          else
          {

          }
        }
        else
        {

          if (v58 >= v62)
            goto LABEL_56;
        }
        v64 = *(id *)v56;
        *(_QWORD *)v56 = 0;
        v65 = (void *)*(v54 - 4);
        *(v54 - 4) = v64;

        *((_DWORD *)v54 - 6) = *((_DWORD *)v56 + 2);
        *((_OWORD *)v54 - 1) = *((_OWORD *)v56 + 1);
        *v54 = *((_QWORD *)v56 + 4);
        v56 += 40;
LABEL_57:
        v52 = v91;
        v53 = v95;
        v54 += 5;
        if (v55 == (void **)v91)
        {
          if (v56 != (char *)v95)
          {
            v69 = 0;
            do
            {
              v70 = &v56[v69];
              v71 = &v54[v69 / 8];
              v72 = *(_QWORD *)&v56[v69];
              *(_QWORD *)&v56[v69] = 0;
              v73 = (void *)v54[v69 / 8 - 4];
              v54[v69 / 8 - 4] = v72;

              *((_DWORD *)v71 - 6) = *(_DWORD *)&v56[v69 + 8];
              *((_OWORD *)v71 - 1) = *(_OWORD *)&v56[v69 + 16];
              *v71 = *(_QWORD *)&v56[v69 + 32];
              v69 += 40;
            }
            while (v70 + 40 != (char *)v95);
          }
          goto LABEL_69;
        }
      }
    }
    if ((id *)a1 == a2)
      return;
    v21 = (id *)(a1 + 40);
    if ((id *)(a1 + 40) == a2)
      return;
    v88 = 0;
    v22 = a1;
LABEL_16:
    v23 = v22;
    v86 = v21;
    v93 = *v21;
    v24 = *(_DWORD *)(v22 + 48);
    v25 = *(_QWORD *)(v22 + 56);
    v26 = *(id *)v23;
    v27 = v26;
    v29 = (_OWORD *)(v23 + 16);
    v28 = *(_QWORD *)(v23 + 16);
    if (v25 == v28)
    {
      v31 = *(_DWORD *)(v23 + 8);
      if (v24 >= v31)
      {
        if (v24 != v31)
        {

          v22 = (uint64_t)v86;
          goto LABEL_42;
        }
        v50 = objc_msgSend(v93, "TTCompare:", v26);

        v22 = (uint64_t)v86;
        if (v50 != -1)
          goto LABEL_42;
      }
      else
      {

        v22 = (uint64_t)v86;
      }
    }
    else
    {

      v30 = v25 >= v28;
      v22 = (uint64_t)v86;
      if (v30)
        goto LABEL_42;
    }
    v94 = *(id *)v22;
    *(_QWORD *)v22 = 0;
    v90 = *(_DWORD *)(v23 + 48);
    v32 = *(_QWORD *)(v23 + 56);
    v33 = *(_QWORD *)(v23 + 64);
    v34 = *(_QWORD *)(v23 + 72);
    v35 = *(id *)v23;
    *(_QWORD *)v23 = 0;
    *(_QWORD *)v22 = v35;
    *(_DWORD *)(v22 + 8) = *(_DWORD *)(v23 + 8);
    *(_OWORD *)(v22 + 16) = *v29;
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
    if (v23 == v6)
    {
      v23 = v6;
      goto LABEL_41;
    }
    v84 = v34;
    v85 = v33;
    v36 = v6;
    v37 = v88;
    while (1)
    {
      v38 = v36;
      v39 = v36 + v37;
      v40 = v94;
      v41 = *(id *)(v36 + v37 - 40);
      v42 = v41;
      v43 = (unint64_t *)(v36 + v37 - 24);
      v44 = *v43;
      if (v32 == *v43)
      {
        v45 = *(_DWORD *)(v39 - 32);
        if (v90 >= v45)
        {
          if (v90 != v45)
          {

LABEL_39:
            v23 = v38 + v37;
            v6 = v38;
            v29 = (_OWORD *)(v23 + 16);
LABEL_40:
            v5 = a2;
            v34 = v84;
            v33 = v85;
            v22 = (uint64_t)v86;
LABEL_41:
            v51 = *(id *)v23;
            *(_QWORD *)v23 = v94;

            *(_DWORD *)(v23 + 8) = v90;
            *(_QWORD *)v29 = v32;
            *(_QWORD *)(v23 + 24) = v33;
            *(_QWORD *)(v23 + 32) = v34;
LABEL_42:
            v21 = (id *)(v22 + 40);
            v88 += 40;
            if ((id *)(v22 + 40) == v5)
              return;
            goto LABEL_16;
          }
          v46 = objc_msgSend(v40, "TTCompare:", v41);

          if (v46 != -1)
          {
            v6 = v38;
            goto LABEL_40;
          }
        }
        else
        {

        }
      }
      else
      {

        if (v32 >= v44)
          goto LABEL_39;
      }
      v29 = (_OWORD *)(v23 - 24);
      v47 = *(_QWORD *)(v39 - 40);
      *(_QWORD *)(v39 - 40) = 0;
      v36 = v38;
      v48 = v38 + v37;
      v49 = *(void **)(v38 + v37);
      *(_QWORD *)(v38 + v37) = v47;

      *(_DWORD *)(v48 + 8) = *(_DWORD *)(v39 - 32);
      *(_OWORD *)(v48 + 16) = *(_OWORD *)v43;
      *(_QWORD *)(v48 + 32) = *(_QWORD *)(v48 - 8);
      v23 -= 40;
      v37 -= 40;
      if (!v37)
      {
        v29 = (_OWORD *)(v38 + 16);
        v23 = v38;
        v6 = v38;
        goto LABEL_40;
      }
    }
  }
  v7 = (uint64_t)(a2 - 5);
  v92 = *(a2 - 5);
  v8 = *(_DWORD *)(v7 + 8);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(id *)v6;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 16);
  if (v9 != v12)
  {

    if (v9 >= v12)
      return;
    goto LABEL_12;
  }
  v20 = *(_DWORD *)(v6 + 8);
  if (v8 < v20)
  {

    goto LABEL_12;
  }
  if (v8 != v20)
  {

    return;
  }
  v74 = objc_msgSend(v92, "TTCompare:", v10);

  if (v74 == -1)
LABEL_12:
    std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100]((__n128 *)v6, v7);
}

void sub_1B4B0B874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, id *a2, unint64_t a3, char *a4)
{
  char *v4;
  id *v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  id *v12;
  id v13;
  id v14;
  unsigned int v15;
  id v16;
  void *v17;
  id v18;
  _OWORD *v19;
  BOOL v20;
  char *v21;
  id v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  unsigned int v29;
  id v30;
  void *v31;
  id v32;
  unsigned int v33;
  id v34;
  char *v35;
  id *v36;
  char *v37;
  id v38;
  unsigned int v39;
  id v40;
  id v41;
  void *v42;
  unint64_t v43;
  id *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  id *v54;
  uint64_t v55;
  uint64_t v56;
  id *v57;
  id v58;
  id v59;
  unsigned int v60;
  id v61;
  id v62;
  unsigned int v63;
  id v64;
  char *v65;
  void *v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  char *v71;
  id *v72;
  id v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  id *v82;
  id v83;
  char *v84;
  uint64_t v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  id *v95;
  id *v96;

  if (!a3)
    return;
  v4 = a4;
  v7 = (id *)a1;
  if (a3 == 2)
  {
    v11 = *(a2 - 5);
    v14 = *(a2 - 3);
    v12 = a2 - 3;
    v13 = v14;
    v15 = *((_DWORD *)v12 - 2);
    v16 = *v7;
    v17 = v16;
    v19 = v7 + 2;
    v18 = v7[2];
    if (v14 != v18)
    {

      v20 = v13 >= v18;
      v21 = a4;
      if (!v20)
        goto LABEL_60;
LABEL_68:
      v10 = v12 + 2;
      v86 = *v7;
      *v7 = 0;
      *(_QWORD *)v21 = v86;
      *((_DWORD *)v21 + 2) = *((_DWORD *)v7 + 2);
      *((_OWORD *)v21 + 1) = *v19;
      v87 = v7[4];
      v88 = (uint64_t)*(a2 - 5);
      *(a2 - 5) = 0;
      *((_QWORD *)v21 + 4) = v87;
      *((_QWORD *)v21 + 5) = v88;
      *((_DWORD *)v21 + 12) = *((_DWORD *)a2 - 8);
      v79 = *(_OWORD *)v12;
      goto LABEL_69;
    }
    v75 = *((_DWORD *)v7 + 2);
    if (v15 >= v75)
    {
      v21 = a4;
      if (v15 != v75)
      {

        goto LABEL_68;
      }
      v85 = objc_msgSend(v11, "TTCompare:", v16);

      if (v85 != -1)
        goto LABEL_68;
    }
    else
    {

      v21 = a4;
    }
LABEL_60:
    v10 = v7 + 4;
    v76 = (uint64_t)*(a2 - 5);
    *(a2 - 5) = 0;
    *(_QWORD *)v21 = v76;
    *((_DWORD *)v21 + 2) = *((_DWORD *)a2 - 8);
    *((_OWORD *)v21 + 1) = *(_OWORD *)v12;
    v77 = (uint64_t)*(a2 - 1);
    v78 = *v7;
    *v7 = 0;
    *((_QWORD *)v21 + 4) = v77;
    *((_QWORD *)v21 + 5) = v78;
    *((_DWORD *)v21 + 12) = *((_DWORD *)v7 + 2);
    v79 = *v19;
LABEL_69:
    *(_OWORD *)(v21 + 56) = v79;
    v9 = v21 + 72;
    goto LABEL_70;
  }
  if (a3 == 1)
  {
    v8 = *(id *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)a4 = v8;
    *((_DWORD *)a4 + 2) = *(_DWORD *)(a1 + 8);
    *((_OWORD *)a4 + 1) = *(_OWORD *)(a1 + 16);
    v9 = a4 + 32;
    v10 = (_QWORD *)(a1 + 32);
LABEL_70:
    *v9 = *v10;
    return;
  }
  if ((uint64_t)a3 > 8)
  {
    v54 = (id *)(a1 + 40 * (a3 >> 1));
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v54, a3 >> 1, a4, a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(&v7[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[40 * (a3 >> 1)], a3 - (a3 >> 1));
    v55 = 0;
    v56 = 0;
    v57 = &v7[5 * (a3 >> 1)];
    v96 = v57;
    while (1)
    {
      if (v57 == a2)
      {
        if (v7 != v54)
        {
          v80 = 0;
          v81 = &v4[v56];
          do
          {
            v82 = &v7[v80];
            v83 = v7[v80];
            *v82 = 0;
            *(_QWORD *)&v81[v80 * 8] = v83;
            v84 = &v4[v80 * 8 + v56];
            *((_DWORD *)v84 + 2) = v7[v80 + 1];
            *((_OWORD *)v84 + 1) = *(_OWORD *)&v7[v80 + 2];
            *(_QWORD *)&v81[v80 * 8 + 32] = v7[v80 + 4];
            v80 += 5;
          }
          while (v82 + 5 != v54);
        }
        return;
      }
      v58 = *v57;
      v59 = v57[2];
      v60 = *((_DWORD *)v57 + 2);
      v61 = *v7;
      v62 = v7[2];
      if (v59 == v62)
      {
        v63 = *((_DWORD *)v7 + 2);
        if (v60 >= v63)
        {
          if (v60 != v63)
          {

LABEL_52:
            v68 = *v7;
            *v7 = 0;
            v69 = &a4[v56];
            *(_QWORD *)v69 = v68;
            *((_DWORD *)v69 + 2) = *((_DWORD *)v7 + 2);
            v4 = a4;
            *((_OWORD *)v69 + 1) = *((_OWORD *)v7 + 1);
            *((_QWORD *)v69 + 4) = v7[4];
            v7 += 5;
            goto LABEL_53;
          }
          v66 = v61;
          v67 = objc_msgSend(v58, "TTCompare:", v61);

          if (v67 != -1)
            goto LABEL_52;
        }
        else
        {

        }
      }
      else
      {

        if (v59 >= v62)
          goto LABEL_52;
      }
      v64 = *v57;
      *v57 = 0;
      v4 = a4;
      v65 = &a4[v56];
      *(_QWORD *)v65 = v64;
      *((_DWORD *)v65 + 2) = *((_DWORD *)v57 + 2);
      *((_OWORD *)v65 + 1) = *((_OWORD *)v57 + 1);
      *((_QWORD *)v65 + 4) = v57[4];
      v57 += 5;
LABEL_53:
      v54 = v96;
      v56 += 40;
      --v55;
      if (v7 == v96)
      {
        if (v57 != a2)
        {
          v70 = 0;
          v71 = &v4[v56];
          do
          {
            v72 = &v57[v70];
            v73 = v57[v70];
            *v72 = 0;
            *(_QWORD *)&v71[v70 * 8] = v73;
            v74 = &v4[v70 * 8 + v56];
            *((_DWORD *)v74 + 2) = v57[v70 + 1];
            *((_OWORD *)v74 + 1) = *(_OWORD *)&v57[v70 + 2];
            *(_QWORD *)&v71[v70 * 8 + 32] = v57[v70 + 4];
            v70 += 5;
          }
          while (v72 + 5 != a2);
        }
        return;
      }
    }
  }
  if ((id *)a1 == a2)
    return;
  v22 = *(id *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a4 = v22;
  *((_DWORD *)a4 + 2) = *(_DWORD *)(a1 + 8);
  *((_OWORD *)a4 + 1) = *(_OWORD *)(a1 + 16);
  *((_QWORD *)a4 + 4) = *(_QWORD *)(a1 + 32);
  v23 = (id *)(a1 + 40);
  if ((id *)(a1 + 40) == a2)
    return;
  v24 = 0;
  v25 = 1;
  v26 = a4;
  do
  {
    v95 = v23;
    v27 = *v23;
    v28 = v7[7];
    v91 = v7 + 7;
    v29 = *((_DWORD *)v7 + 12);
    v30 = *(id *)v26;
    v31 = v30;
    v32 = (id)*((_QWORD *)v26 + 2);
    v92 = v26 + 16;
    if (v28 == v32)
    {
      v33 = *((_DWORD *)v26 + 2);
      if (v29 >= v33)
      {
        if (v29 != v33)
        {

LABEL_34:
          v36 = v95;
          v51 = *v95;
          *v95 = 0;
          *((_QWORD *)v26 + 5) = v51;
          *((_DWORD *)v26 + 12) = *((_DWORD *)v7 + 12);
          *(_OWORD *)(v26 + 56) = *v91;
          *((_QWORD *)v26 + 9) = v7[9];
          ++v25;
          goto LABEL_38;
        }
        v50 = objc_msgSend(v27, "TTCompare:", v30);

        if (v50 != -1)
          goto LABEL_34;
      }
      else
      {

      }
    }
    else
    {

      if (v28 >= v32)
        goto LABEL_34;
    }
    v34 = *(id *)v26;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 5) = v34;
    *((_DWORD *)v26 + 12) = *((_DWORD *)v26 + 2);
    *(_OWORD *)(v26 + 56) = *v92;
    *((_QWORD *)v26 + 9) = *((_QWORD *)v26 + 4);
    ++v25;
    v35 = v4;
    v36 = v95;
    if (v26 == v4)
      goto LABEL_37;
    v89 = v24;
    v90 = v25;
    while (1)
    {
      v37 = &v4[v24];
      v38 = *v36;
      v39 = *((_DWORD *)v7 + 12);
      v40 = v7[7];
      v41 = *(id *)&v4[v24 - 40];
      v42 = v41;
      v44 = (id *)&v4[v24 - 24];
      v43 = (unint64_t)*v44;
      if (v40 != *v44)
      {

        v20 = (unint64_t)v40 >= v43;
        v4 = a4;
        if (v20)
          goto LABEL_35;
        goto LABEL_29;
      }
      v45 = *((_DWORD *)v37 - 8);
      if (v39 < v45)
      {

        v4 = a4;
        goto LABEL_29;
      }
      v4 = a4;
      if (v39 != v45)
      {

LABEL_35:
        v35 = &v4[v24];
        goto LABEL_36;
      }
      v46 = objc_msgSend(v38, "TTCompare:", v41);

      if (v46 != -1)
        break;
LABEL_29:
      v26 -= 40;
      v47 = *((_QWORD *)v37 - 5);
      *((_QWORD *)v37 - 5) = 0;
      v48 = &v4[v24];
      v49 = *(void **)&v4[v24];
      *(_QWORD *)&v4[v24] = v47;

      *((_DWORD *)v48 + 2) = *((_DWORD *)v37 - 8);
      *((_OWORD *)v48 + 1) = *(_OWORD *)v44;
      *((_QWORD *)v48 + 4) = *((_QWORD *)v37 - 1);
      v24 -= 40;
      v36 = v95;
      if (!v24)
      {
        v35 = v4;
        v24 = v89;
        v25 = v90;
        goto LABEL_37;
      }
    }
    v35 = v26;
LABEL_36:
    v24 = v89;
    v25 = v90;
    v36 = v95;
LABEL_37:
    v52 = *v36;
    *v36 = 0;
    v53 = *(void **)v35;
    *(_QWORD *)v35 = v52;

    *((_DWORD *)v35 + 2) = *((_DWORD *)v7 + 12);
    *((_OWORD *)v35 + 1) = *v91;
    *((_QWORD *)v35 + 4) = v7[9];
LABEL_38:
    v26 = (char *)v92 + 24;
    v23 = v36 + 5;
    v24 += 40;
    v7 = v36;
  }
  while (v36 + 5 != a2);
}

void sub_1B4B0BF50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unsigned int v14;
  unint64_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  unint64_t v27;
  unint64_t v28;
  id *v29;
  id v30;
  unsigned int v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  unsigned int v48;
  unint64_t v49;
  id v50;
  void *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  _OWORD *v66;
  unint64_t v67;
  unsigned int v68;
  id v69;
  _OWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  void **v79;
  _QWORD *v80;
  void *v81;
  void **v82;
  id v83;
  void *v84;
  unsigned int v85;
  id v86;
  void *v87;
  void *v88;
  unsigned int v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD v113[4];

  v101 = a5;
  if (!a5)
    return;
  while (1)
  {
    v111 = a1;
    if (v101 <= a7 || a4 <= a7)
      break;
    if (!a4)
      return;
    v9 = 0;
    v10 = -a4;
    while (1)
    {
      v11 = a1 + v9;
      v12 = a2;
      v13 = *(id *)a2;
      v14 = *(_DWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 16);
      v16 = *(id *)v11;
      v17 = v16;
      v18 = *(_QWORD *)(v11 + 16);
      if (v15 == v18)
        break;

      v19 = v15 >= v18;
      a1 = v111;
      if (!v19)
        goto LABEL_17;
LABEL_13:
      v9 += 40;
      v19 = __CFADD__(v10++, 1);
      if (v19)
        return;
    }
    v20 = *(_DWORD *)(v11 + 8);
    if (v14 >= v20)
    {
      a1 = v111;
      if (v14 == v20)
      {
        v21 = objc_msgSend(v13, "TTCompare:", v16);

        if (v21 == -1)
          goto LABEL_17;
      }
      else
      {

      }
      goto LABEL_13;
    }

    a1 = v111;
LABEL_17:
    v22 = -v10;
    v97 = a1 + v9;
    if (-v10 >= v101)
    {
      if (v10 == -1)
      {
        std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100]((__n128 *)(a1 + v9), a2);
        return;
      }
      if (v10 > 0)
        v22 = 1 - v10;
      v96 = v22 >> 1;
      v105 = (id *)(a1 + 40 * (v22 >> 1) + v9);
      v25 = a2;
      if (a2 == a3)
      {
LABEL_39:
        a1 = v111;
        v12 = a2;
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - a2) >> 3);
        v38 = v96;
        v26 = (__n128 *)(v111 + 40 * v96 + v9);
        goto LABEL_40;
      }
      v25 = a2;
      v44 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
      v103 = v111 + 40 * v96 + v9;
      while (2)
      {
        v45 = v44 >> 1;
        v108 = v25;
        v46 = v25 + 40 * (v44 >> 1);
        v47 = *(id *)v46;
        v48 = *(_DWORD *)(v46 + 8);
        v49 = *(_QWORD *)(v46 + 16);
        v50 = *v105;
        v51 = v50;
        v52 = *(_QWORD *)(v103 + 16);
        if (v49 == v52)
        {
          v53 = *(_DWORD *)(v103 + 8);
          if (v48 < v53)
          {

            goto LABEL_55;
          }
          if (v48 == v53)
          {
            v25 = v108;
            v54 = objc_msgSend(v47, "TTCompare:", v50);

            if (v54 == -1)
            {
LABEL_55:
              v25 = v46 + 40;
              v45 = v44 + ~v45;
            }
          }
          else
          {

            v25 = v108;
          }
        }
        else
        {

          v19 = v49 >= v52;
          v25 = v108;
          if (!v19)
            goto LABEL_55;
        }
        v44 = v45;
        if (!v45)
          goto LABEL_39;
        continue;
      }
    }
    if (v101 >= 0)
      v23 = v101;
    else
      v23 = v101 + 1;
    v24 = v23 >> 1;
    v25 = a2 + 40 * (v23 >> 1);
    v26 = (__n128 *)(a1 + v9);
    v105 = (id *)(a1 + v9);
    if (a2 - a1 != v9)
    {
      v102 = v23 >> 1;
      v105 = (id *)(a1 + v9);
      v27 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1 - v9) >> 3);
      v107 = a2 + 40 * (v23 >> 1);
      while (1)
      {
        v28 = v27 >> 1;
        v29 = &v105[5 * (v27 >> 1)];
        v30 = *(id *)v25;
        v31 = *(_DWORD *)(v25 + 8);
        v32 = *(id *)(v25 + 16);
        v33 = *v29;
        v34 = v33;
        v35 = v29[2];
        if (v32 != v35)
          break;
        v36 = *((_DWORD *)v29 + 2);
        if (v31 >= v36)
        {
          v25 = v107;
          if (v31 != v36)
          {

LABEL_31:
            v105 = v29 + 5;
            v28 = v27 + ~v28;
            goto LABEL_32;
          }
          v37 = objc_msgSend(v30, "TTCompare:", v33);

          if (v37 != -1)
            goto LABEL_31;
        }
        else
        {

          v25 = v107;
        }
LABEL_32:
        v27 = v28;
        if (!v28)
        {
          v24 = v102;
          v26 = (__n128 *)v105;
          a1 = v111;
          v12 = a2;
          goto LABEL_34;
        }
      }

      v19 = v32 >= v35;
      v25 = v107;
      if (!v19)
        goto LABEL_32;
      goto LABEL_31;
    }
LABEL_34:
    v38 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v26 - a1 - v9) >> 3);
LABEL_40:
    v39 = v25;
    if (v105 != (id *)v12)
    {
      v39 = (uint64_t)v26;
      if (v25 != v12)
      {
        v40 = v38;
        v41 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v26, v12, v25);
        v38 = v40;
        v39 = (uint64_t)v41;
      }
    }
    a4 = -(uint64_t)(v38 + v10);
    v42 = v101 - v24;
    if ((uint64_t)(v38 + v24) >= (uint64_t)(v101 - (v38 + v24) - v10))
    {
      v43 = v38;
      std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v39, v25, a3, -(uint64_t)(v38 + v10), v101 - v24, a6, a7);
      v25 = (uint64_t)v26;
      v42 = v24;
      a4 = v43;
      a3 = v39;
      a1 = v97;
    }
    else
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *)::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1 + v9, v26, v39, v38, v24, a6, a7);
      a1 = v39;
    }
    v101 = v42;
    a2 = v25;
    if (!v42)
      return;
  }
  if (a4 <= v101)
  {
    if (a1 == a2)
      return;
    v78 = 0;
    v56 = 0;
    v57 = (uint64_t)a6;
    do
    {
      v79 = &a6[v78 / 8];
      v80 = (_QWORD *)(a1 + v78);
      v81 = *(void **)(a1 + v78);
      *v80 = 0;
      *v79 = v81;
      *((_DWORD *)v79 + 2) = *(_DWORD *)(a1 + v78 + 8);
      *((_OWORD *)v79 + 1) = *(_OWORD *)(a1 + v78 + 16);
      v79[4] = *(void **)(a1 + v78 + 32);
      ++v56;
      v78 += 40;
    }
    while (v80 + 5 != (_QWORD *)a2);
    if (!v78)
      goto LABEL_102;
    v110 = (uint64_t *)&a6[v78 / 8];
    v82 = a6;
    while (1)
    {
      if (a2 == a3)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *> *,std::pair<minIdPathData,TopoSubstring *> *,std::pair<minIdPathData,TopoSubstring *> *>((uint64_t)v113, (uint64_t *)v82, v110, a1);
        goto LABEL_102;
      }
      v83 = *(id *)a2;
      v84 = *(void **)(a2 + 16);
      v85 = *(_DWORD *)(a2 + 8);
      v86 = *v82;
      v87 = v86;
      v88 = v82[2];
      if (v84 == v88)
      {
        v89 = *((_DWORD *)v82 + 2);
        if (v85 >= v89)
        {
          if (v85 != v89)
          {

LABEL_96:
            v93 = (uint64_t)*v82;
            *v82 = 0;
            v94 = *(void **)a1;
            *(_QWORD *)a1 = v93;

            *(_DWORD *)(a1 + 8) = *((_DWORD *)v82 + 2);
            *(_OWORD *)(a1 + 16) = *((_OWORD *)v82 + 1);
            *(_QWORD *)(a1 + 32) = v82[4];
            v82 += 5;
            goto LABEL_97;
          }
          v92 = objc_msgSend(v83, "TTCompare:", v86);

          if (v92 != -1)
            goto LABEL_96;
        }
        else
        {

        }
      }
      else
      {

        if (v84 >= v88)
          goto LABEL_96;
      }
      v90 = *(id *)a2;
      *(_QWORD *)a2 = 0;
      v91 = *(void **)a1;
      *(_QWORD *)a1 = v90;

      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      a2 += 40;
LABEL_97:
      v57 = (uint64_t)a6;
      a1 += 40;
      if (v110 == (uint64_t *)v82)
        goto LABEL_102;
    }
  }
  if (a3 == a2)
    return;
  v55 = 0;
  v56 = 0;
  v58 = a3;
  v57 = (uint64_t)a6;
  do
  {
    v59 = &a6[v55 / 8];
    v60 = (_QWORD *)(a2 + v55);
    v61 = *(void **)(a2 + v55);
    *v60 = 0;
    *v59 = v61;
    *((_DWORD *)v59 + 2) = *(_DWORD *)(a2 + v55 + 8);
    *((_OWORD *)v59 + 1) = *(_OWORD *)(a2 + v55 + 16);
    v59[4] = *(void **)(a2 + v55 + 32);
    ++v56;
    v55 += 40;
  }
  while (v60 + 5 != (_QWORD *)a3);
  if (!v55)
    goto LABEL_102;
  v62 = (uint64_t)&a6[v55 / 8];
  v63 = a3 - 40;
  v104 = (uint64_t)&a6[v55 / 8];
  while (a2 != a1)
  {
    v106 = v62 - 40;
    v64 = *(id *)(v62 - 40);
    v109 = v62;
    v67 = *(_QWORD *)(v62 - 24);
    v66 = (_OWORD *)(v62 - 24);
    v65 = v67;
    v68 = *((_DWORD *)v66 - 2);
    v69 = *(id *)(a2 - 40);
    v70 = (_OWORD *)(a2 - 24);
    v71 = *(_QWORD *)(a2 - 24);
    if (v67 == v71)
    {
      v73 = *(_DWORD *)(a2 - 32);
      if (v68 < v73)
      {

        v72 = a2;
        a2 -= 40;
        v57 = (uint64_t)a6;
        goto LABEL_74;
      }
      if (v68 != v73)
      {

        v57 = (uint64_t)a6;
LABEL_78:
        v70 = v66;
        v62 = v106;
        v72 = v109;
        goto LABEL_79;
      }
      v74 = v69;
      v75 = objc_msgSend(v64, "TTCompare:", v69);

      v57 = (uint64_t)a6;
      if (v75 != -1)
        goto LABEL_78;
    }
    else
    {

      v19 = v65 >= v71;
      v57 = (uint64_t)a6;
      if (v19)
        goto LABEL_78;
    }
    v72 = a2;
    a2 -= 40;
LABEL_74:
    v62 = v109;
LABEL_79:
    v76 = *(_QWORD *)(v72 - 40);
    *(_QWORD *)(v72 - 40) = 0;
    v77 = *(void **)v63;
    *(_QWORD *)v63 = v76;

    *(_DWORD *)(v63 + 8) = *(_DWORD *)(v72 - 32);
    *(_OWORD *)(v63 + 16) = *v70;
    *(_QWORD *)(v63 + 32) = *(_QWORD *)(v72 - 8);
    v58 -= 40;
    v63 -= 40;
    a1 = v111;
    if (v62 == v57)
      goto LABEL_102;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<std::pair<minIdPathData,TopoSubstring *> *>,std::reverse_iterator<std::pair<minIdPathData,TopoSubstring *> *>,std::reverse_iterator<std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>,0>(v104, v62, v57, a3, v58, v113);
LABEL_102:
  if (v57)
  {
    do
    {
      v95 = *a6;
      a6 += 5;

      --v56;
    }
    while (v56);
  }
}

void sub_1B4B0C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;
  void **v15;
  void *v16;

  if (a13)
  {
    v15 = a13;
    do
    {
      v16 = *v15;
      v15 += 5;

      --v13;
    }
    while (v13);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100](__n128 *a1, uint64_t a2)
{
  unint64_t v4;
  unsigned __int32 v5;
  void *v6;
  void *v7;
  void *v8;
  __n128 result;
  unint64_t v10;
  __n128 v11;

  v4 = a1->n128_u64[0];
  a1->n128_u64[0] = 0;
  v5 = a1->n128_u32[2];
  v11 = a1[1];
  v6 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  v7 = (void *)a1->n128_u64[0];
  a1->n128_u64[0] = (unint64_t)v6;

  a1->n128_u32[2] = *(_DWORD *)(a2 + 8);
  a1[1] = *(__n128 *)(a2 + 16);
  v8 = *(void **)a2;
  *(_QWORD *)a2 = v4;

  *(_DWORD *)(a2 + 8) = v5;
  result = v11;
  *(__n128 *)(a2 + 16) = v11;
  v10 = a1[2].n128_u64[0];
  a1[2].n128_u64[0] = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v10;
  return result;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *> *,std::pair<minIdPathData,TopoSubstring *> *,std::pair<minIdPathData,TopoSubstring *> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    *v5 = 0;
    v8 = *(void **)a4;
    *(_QWORD *)a4 = v7;

    *(_DWORD *)(a4 + 8) = *((_DWORD *)v5 + 2);
    *(_OWORD *)(a4 + 16) = *((_OWORD *)v5 + 1);
    *(_QWORD *)(a4 + 32) = v5[4];
    a4 += 40;
    v5 += 5;
  }
  while (v5 != v6);
  return v6;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::reverse_iterator<std::pair<minIdPathData,TopoSubstring *> *>,std::reverse_iterator<std::pair<minIdPathData,TopoSubstring *> *>,std::reverse_iterator<std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>,0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = a5;
  v8 = a2;
  if (a2 != a3)
  {
    v12 = a5 - 40;
    do
    {
      v13 = *(_QWORD *)(v8 - 40);
      v8 -= 40;
      *(_QWORD *)v8 = 0;
      v14 = *(void **)v12;
      *(_QWORD *)v12 = v13;

      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v8 + 8);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(v8 + 16);
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v8 + 32);
      v6 -= 40;
      v12 -= 40;
    }
    while (v8 != a3);
    v8 = a3;
  }
  *a6 = a1;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = v6;
}

__n128 *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(__n128 *a1, uint64_t a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v6;
  uint64_t i;
  __n128 *v8;
  uint64_t v9;

  v4 = (__n128 *)a2;
  std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100](a1, a2);
  v6 = (__n128 *)((char *)a1 + 40);
  for (i = (uint64_t)&v4[2].n128_i64[1]; i != a3; i += 40)
  {
    if (v6 == v4)
      v4 = (__n128 *)i;
    std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100](v6, i);
    v6 = (__n128 *)((char *)v6 + 40);
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = (uint64_t)v4;
    do
    {
      while (1)
      {
        std::pair<minIdPathData,TopoSubstring *>::swap[abi:ne180100](v8, v9);
        v8 = (__n128 *)((char *)v8 + 40);
        v9 += 40;
        if (v9 == a3)
          break;
        if (v8 == v4)
          v4 = (__n128 *)v9;
      }
      v9 = (uint64_t)v4;
    }
    while (v8 != v4);
  }
  return v6;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1B4B0CD24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<TopoSubstring *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TopoSubstring *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TopoSubstring *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TopoSubstring **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TopoSubstring **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B4B0D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<TopoSubstring **>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<TopoSubstring **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0D768(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::vector<TopoIDRange>::__push_back_slow_path<TopoIDRange const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *(id *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  v14[2] = v11 + 24;
  std::vector<TopoIDRange>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<TopoIDRange>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B4B0D8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TopoIDRange>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TopoIDRange>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 24);
    v2 -= 24;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<TopoIDRange>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring * const*,TopoSubstring * const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<TopoSubstring *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<TopoSubstring *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::vector<std::pair<TopoID,TopoID>>::__push_back_slow_path<std::pair<TopoID,TopoID> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[32 * v9];
  *(_QWORD *)v11 = *(id *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v11 + 2) = *(id *)(a2 + 16);
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v14[2] = v11 + 32;
  std::vector<std::pair<TopoID,TopoID>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<TopoID,TopoID>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B4B0DCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TopoID,TopoID>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TopoID,TopoID>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>,std::reverse_iterator<std::pair<TopoID,TopoID>*>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>,std::reverse_iterator<std::pair<TopoID,TopoID>*>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 32) = v10;
      *(_DWORD *)(v8 - 24) = *(_DWORD *)(a3 + v7 - 24);
      v11 = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v8 - 16) = v11;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 32;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v17 + 1) = a7 + v7;
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::pair<TopoID,TopoID>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoID,TopoID>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoID,TopoID>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoID,TopoID>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoID,TopoID>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<std::pair<TopoID,TopoID>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<TopoID,TopoID>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<TopoID,TopoID>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
}

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v32 = *((_QWORD *)a2 - 2);
        v31 = a2 - 1;
        if (*(_QWORD *)v8 < v32)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v31;
          *v31 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        v33 = (__int128 *)(v8 + 16);
        v34 = (__int128 *)(v8 + 32);
        v35 = (__int128 *)(v8 + 48);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)(v8 + 48));
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 1;
        if (*(_QWORD *)(v8 + 48) < v37)
        {
          v38 = *v35;
          *v35 = *v36;
          *v36 = v38;
          if (*(_QWORD *)v34 < *(_QWORD *)v35)
          {
            v39 = *v34;
            *v34 = *v35;
            *v35 = v39;
            if (*(_QWORD *)v33 < *(_QWORD *)v34)
            {
              v40 = *v33;
              *v33 = *v34;
              *v34 = v40;
              if (*(_QWORD *)v8 < *(_QWORD *)(v8 + 16))
              {
                v86 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v33;
                *v33 = v86;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v41 = (__int128 *)(v8 + 16);
          v43 = (__int128 *)v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = (unint64_t *)v8;
              do
              {
                v46 = v41;
                v47 = v45[2];
                if (*v45 < v47)
                {
                  v48 = v45[3];
                  v49 = v44;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v49 + 16) = *(_OWORD *)(v8 + v49);
                    if (!v49)
                      break;
                    v50 = *(_QWORD *)(v8 + v49 - 16);
                    v49 -= 16;
                    if (v50 >= v47)
                    {
                      v51 = (_QWORD *)(v8 + v49 + 16);
                      goto LABEL_76;
                    }
                  }
                  v51 = (_QWORD *)v8;
LABEL_76:
                  *v51 = v47;
                  v51[1] = v48;
                }
                v41 = v46 + 1;
                v44 += 16;
                v45 = (unint64_t *)v46;
              }
              while (v46 + 1 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v77 = (uint64_t)v41;
              v78 = *(_QWORD *)(a1 + 16);
              if (*(_QWORD *)a1 < v78)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD *)(v80 - 32);
                  v80 -= 16;
                }
                while (v81 < v78);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v41 = (__int128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__int128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v52 = (v10 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = (unint64_t *)(v8 + 16 * v55);
                v57 = *v56;
                if (2 * v54 + 2 < (uint64_t)v10 && v56[2] < v57)
                {
                  v57 = v56[2];
                  v56 += 2;
                  v55 = 2 * v54 + 2;
                }
                v58 = (__int128 *)(v8 + 16 * v54);
                v59 = *v58;
                v60 = *(_QWORD *)v58;
                if (*(_QWORD *)v58 >= v57)
                {
                  do
                  {
                    v61 = (__int128 *)v56;
                    *v58 = *(_OWORD *)v56;
                    if (v52 < v55)
                      break;
                    v62 = (2 * v55) | 1;
                    v56 = (unint64_t *)(v8 + 16 * v62);
                    v55 = 2 * v55 + 2;
                    v63 = *v56;
                    if (v55 >= (uint64_t)v10)
                    {
                      v55 = v62;
                    }
                    else if (v56[2] >= v63)
                    {
                      v55 = v62;
                    }
                    else
                    {
                      v63 = v56[2];
                      v56 += 2;
                    }
                    v58 = v61;
                  }
                  while (v60 >= v63);
                  *v61 = v59;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v87 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = &v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && *((_QWORD *)v67 + 2) < *(_QWORD *)v67)
                {
                  ++v67;
                  v68 = v69;
                }
                *v66 = *v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if (v67 == --a2)
              {
                *v67 = v87;
              }
              else
              {
                *v67 = *a2;
                *a2 = v87;
                v70 = (uint64_t)v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (__int128 *)(v8 + 16 * v71);
                  v73 = *(_QWORD *)v67;
                  if (*(_QWORD *)v67 < *(_QWORD *)v72)
                  {
                    v74 = *((_QWORD *)v67 + 1);
                    do
                    {
                      v75 = v72;
                      *v67 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (__int128 *)(v8 + 16 * v71);
                      v67 = v75;
                    }
                    while (v73 < *(_QWORD *)v72);
                    *(_QWORD *)v75 = v73;
                    *((_QWORD *)v75 + 1) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 16 * (v10 >> 1)), (unint64_t *)a1, (unint64_t *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v10 >> 1)), (unint64_t *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 16), v12 - 2, (unint64_t *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v11), (unint64_t *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v12 - 1, v12, (unint64_t *)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (v13 < *(_QWORD *)(a1 - 16))
            goto LABEL_11;
          if (*((_QWORD *)a2 - 2) >= v13)
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (*(_QWORD *)v8 >= v13);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v25 >= v13);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
              v28 = *((_QWORD *)v27-- - 2);
            while (v28 < v13);
          }
          while (v8 < (unint64_t)v27)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v27;
            *v27 = v84;
            do
            {
              v29 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v29 >= v13);
            do
              v30 = *((_QWORD *)v27-- - 2);
            while (v30 < v13);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v13 < v16);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *((_QWORD *)v18-- - 2);
          }
          while (v13 >= v20);
        }
        else
        {
          do
            v19 = *((_QWORD *)v18-- - 2);
          while (v13 >= v19);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = v18;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v21;
            *v21 = v83;
            do
            {
              v22 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 < v22);
            do
              v23 = *((_QWORD *)v21-- - 2);
            while (v13 >= v23);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        if (v17 < (unint64_t)v18)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(a1, (_OWORD *)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(v8, a2))
        {
          if (v24)
            continue;
          goto LABEL_30;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*(_QWORD *)result >= *a2)
  {
    if (v3 < v4)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*(_QWORD *)result < *a2)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a2 >= *a3)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (*(_QWORD *)a1 < *((_QWORD *)a2 - 2))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), a2 - 1);
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)(a1 + 48));
      v21 = *((_QWORD *)a2 - 2);
      v20 = a2 - 1;
      if (*(_QWORD *)(a1 + 48) < v21)
      {
        v22 = *v19;
        *v19 = *v20;
        *v20 = v22;
        if (*(_QWORD *)v18 < *(_QWORD *)v19)
        {
          v23 = *v18;
          *v18 = *v19;
          *v19 = v23;
          if (*(_QWORD *)v17 < *(_QWORD *)v18)
          {
            v24 = *v17;
            *v17 = *v18;
            *v18 = v24;
            if (*(_QWORD *)a1 < *(_QWORD *)(a1 + 16))
            {
              v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((_OWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *(_QWORD *)v9;
    if (*v8 < *(_QWORD *)v9)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v15 >= v13)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_13:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[TTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(a1, a2, a3);
  if (*a3 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a2 < *a3)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_QWORD *)a1 < *a2)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

char *std::vector<TopoSubstring *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void std::vector<TopoIDRange>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        v4 -= 24;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::__emplace_unique_key_args<TopoID,TopoID>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *((unsigned int *)a2 + 2);
  v8 = objc_msgSend((id)*a2, "hash");
  v9 = v8 ^ v7;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8 ^ v7;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v17 = *a3;
  *a3 = 0;
  *((_QWORD *)i + 2) = v17;
  *((_DWORD *)i + 6) = *((_DWORD *)a3 + 2);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_39:
    *v25 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0EF88(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void *std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::__emplace_unique_key_args<TopoID,TopoID const&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *((unsigned int *)a2 + 2);
  v8 = objc_msgSend((id)*a2, "hash");
  v9 = v8 ^ v7;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8 ^ v7;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_QWORD *)i + 2) = *(id *)a3;
  *((_DWORD *)i + 6) = *(_DWORD *)(a3 + 8);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_39:
    *v24 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0F248(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::__erase_unique<TopoID>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::find<TopoID>(a1, a2);
  if (result)
  {
    std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::find<TopoID>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;

  v4 = *((unsigned int *)a2 + 2);
  v5 = objc_msgSend((id)*a2, "hash");
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5 ^ v4;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = (uint64_t *)*i)
  {
    v13 = i[1];
    if (v13 == v7)
    {
      if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend((id)i[2], "isEqual:", *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(_QWORD *)&v6)
          v13 %= *(_QWORD *)&v6;
      }
      else
      {
        v13 &= *(_QWORD *)&v6 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

uint64_t std::__hash_table<TopoID,std::hash<TopoID>,std::equal_to<TopoID>,std::allocator<TopoID>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<TopoID,TopoSubstring *>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,TopoSubstring *>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = *((unsigned int *)a2 + 2);
  v9 = objc_msgSend((id)*a2, "hash");
  v10 = v9 ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9 ^ v8;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  *((_QWORD *)i + 2) = *(id *)v18;
  *((_DWORD *)i + 6) = *(_DWORD *)(v18 + 8);
  *((_QWORD *)i + 4) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_39:
    *v26 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0F660(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<TopoID,TopoSubstring *>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,TopoSubstring *>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = *((unsigned int *)a2 + 2);
  v9 = objc_msgSend((id)*a2, "hash");
  v10 = v9 ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9 ^ v8;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *v18 = 0;
  *((_QWORD *)i + 2) = v19;
  *((_DWORD *)i + 6) = *((_DWORD *)v18 + 2);
  *((_QWORD *)i + 4) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_39:
    *v27 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0F8E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__erase_unique<TopoSubstring *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::find<TopoSubstring *>(a1, a2);
  if (result)
  {
    std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void std::vector<TopoSubstring *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__hash_table<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = *((unsigned int *)a2 + 2);
  v9 = objc_msgSend((id)*a2, "hash");
  v10 = v9 ^ v8;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9 ^ v8;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (*((_DWORD *)i + 6) == *((_DWORD *)a2 + 2) && (objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  *((_QWORD *)i + 2) = *(id *)v18;
  *((_DWORD *)i + 6) = *(_DWORD *)(v18 + 8);
  *((_QWORD *)i + 4) = 0;
  *((_QWORD *)i + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_39:
    *v26 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B4B0FC9C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<TopoID,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_1B4B0FF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B100C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B104F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B10BC8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B10C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B10DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B10F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  topotext::Selection::~Selection((topotext::Selection *)&a9);

  _Unwind_Resume(a1);
}

void sub_1B4B1117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TopoID,TopoID>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = (uint64_t)(v7 - *a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v13 = v5 - *a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v20[4] = result;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>(result, v14);
    v16 = &v15[32 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[32 * v17];
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)v16 = v18;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    v19 = a2[2];
    a2[2] = 0;
    *((_QWORD *)v16 + 2) = v19;
    *((_DWORD *)v16 + 6) = *((_DWORD *)a2 + 6);
    v20[2] = v16 + 32;
    std::vector<std::pair<TopoID,TopoID>>::__swap_out_circular_buffer(a1, v20);
    v10 = a1[1];
    result = std::__split_buffer<std::pair<TopoID,TopoID>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    v9 = a2[2];
    a2[2] = 0;
    *(_QWORD *)(v7 + 16) = v9;
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
    v10 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v10;
  return result;
}

void sub_1B4B11304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TopoID,TopoID>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4B1170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B4B117E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B11888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  topotext::Selection::~Selection((topotext::Selection *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4B119D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B11AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B11BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

topotext::Selection_Range *google::protobuf::internal::GenericTypeHandler<topotext::Selection_Range>::New()
{
  topotext::Selection_Range *v0;

  v0 = (topotext::Selection_Range *)operator new();
  topotext::Selection_Range::Selection_Range(v0);
  return v0;
}

void sub_1B4B11C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40CCCF3E6ELL);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TopoID,TopoID>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<TopoID,TopoID>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<TopoID,TopoID>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {

    v5 = *(void **)(i - 32);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_1B4B11D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B11DE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B11F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B12094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40A258B440);
  _Unwind_Resume(a1);
}

void sub_1B4B12418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  versioned_document::Version::~Version((versioned_document::Version *)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<versioned_document::Version>::DeleteSubrange(google::protobuf::internal::RepeatedPtrFieldBase *a1, int a2, int a3)
{
  std::string *v6;
  std::string *v7;
  std::string *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1134);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    if ((a3 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1135);
  v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (num) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
LABEL_6:
  if (a3 + a2 > *((_DWORD *)a1 + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1136);
    v8 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (a3 >= 1)
  {
    v9 = a2;
    v10 = a3;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)a1, v9);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      ++v9;
      --v10;
    }
    while (v10);
  }
  google::protobuf::RepeatedPtrField<versioned_document::Version>::ExtractSubrange(a1, a2, a3, 0);
}

void sub_1B4B125AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B12740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B127F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B128B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B12B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);

  _Unwind_Resume(a1);
}

void sub_1B4B12CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B12DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

versioned_document::Version *google::protobuf::internal::GenericTypeHandler<versioned_document::Version>::New()
{
  versioned_document::Version *v0;

  v0 = (versioned_document::Version *)operator new();
  versioned_document::Version::Version(v0);
  return v0;
}

{
  versioned_document::Version *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (versioned_document::Version *)operator new();
  versioned_document::Version::Version(v0, v1, v2);
  return v0;
}

void sub_1B4B12E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  uint64_t v7;
  const versioned_document::Version *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  versioned_document::Version *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v8 = (const versioned_document::Version *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)a2, v6);
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = google::protobuf::internal::GenericTypeHandler<versioned_document::Version>::New();
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(versioned_document::Version **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = versioned_document::Version::MergeFrom(v12, v8, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

{
  std::string *v4;
  void *result;
  int v6;
  uint64_t v7;
  const versioned_document::Version *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  versioned_document::Version *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v8 = (const versioned_document::Version *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)a2, v6);
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = google::protobuf::internal::GenericTypeHandler<versioned_document::Version>::New();
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(versioned_document::Version **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = versioned_document::Version::MergeFrom(v12, v8, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B12F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 894);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 895);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B13028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<versioned_document::Version>::ExtractSubrange(google::protobuf::internal::RepeatedPtrFieldBase *this, int a2, int a3, uint64_t *a4)
{
  std::string *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  char v13;
  std::string v14[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1145);
    v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    if ((a3 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1146);
  v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (num) >= (0): ");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
LABEL_6:
  if (a3 + a2 > *((_DWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 1147);
    v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (start + num) <= (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v10);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  if (a3 >= 1)
  {
    if (a4)
    {
      v11 = a3;
      v12 = a2;
      do
      {
        *a4++ = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)this, v12++);
        --v11;
      }
      while (v11);
    }
    google::protobuf::internal::RepeatedPtrFieldBase::CloseGap((uint64_t)this, a2, a3);
  }
}

void sub_1B4B1319C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::CloseGap(uint64_t this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(int *)(this + 12);
  if (a3 + a2 < (int)v3)
  {
    v4 = a2;
    do
    {
      *(_QWORD *)(*(_QWORD *)this + 8 * v4) = *(_QWORD *)(*(_QWORD *)this + 8 * v4 + 8 * a3);
      ++v4;
    }
    while (a3 + v4 < v3);
  }
  *(_DWORD *)(this + 8) -= a3;
  *(_DWORD *)(this + 12) = v3 - a3;
  return this;
}

void OUTLINED_FUNCTION_1_7(float a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = a4;
  *(_WORD *)(a3 + 8) = 1024;
  *(_DWORD *)(a3 + 10) = v4;
}

void OUTLINED_FUNCTION_2_6(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0xEu);
}

void sub_1B4B132BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4B13358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4B13434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1350C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B13618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  topotext::VectorTimestamp::~VectorTimestamp((topotext::VectorTimestamp *)&a9);

  _Unwind_Resume(a1);
}

void sub_1B4B13824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B13B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B13C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  topotext::VectorTimestamp::~VectorTimestamp((topotext::VectorTimestamp *)&a9);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B13D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B13DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

topotext::VectorTimestamp_Clock *google::protobuf::internal::GenericTypeHandler<topotext::VectorTimestamp_Clock>::New()
{
  topotext::VectorTimestamp_Clock *v0;

  v0 = (topotext::VectorTimestamp_Clock *)operator new();
  topotext::VectorTimestamp_Clock::VectorTimestamp_Clock(v0);
  return v0;
}

{
  topotext::VectorTimestamp_Clock *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (topotext::VectorTimestamp_Clock *)operator new();
  topotext::VectorTimestamp_Clock::VectorTimestamp_Clock(v0, v1, v2);
  return v0;
}

void sub_1B4B13E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40E3C8ABF7);
  _Unwind_Resume(a1);
}

topotext::VectorTimestamp_Clock_ReplicaClock *google::protobuf::internal::GenericTypeHandler<topotext::VectorTimestamp_Clock_ReplicaClock>::New()
{
  topotext::VectorTimestamp_Clock_ReplicaClock *v0;

  v0 = (topotext::VectorTimestamp_Clock_ReplicaClock *)operator new();
  topotext::VectorTimestamp_Clock_ReplicaClock::VectorTimestamp_Clock_ReplicaClock(v0);
  return v0;
}

void sub_1B4B13EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40110CF19CLL);
  _Unwind_Resume(a1);
}

void sub_1B4B13FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  topotext::ParagraphStyle::~ParagraphStyle((topotext::ParagraphStyle *)va);

  _Unwind_Resume(a1);
}

void sub_1B4B140CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B142C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  topotext::ParagraphStyle::~ParagraphStyle((topotext::ParagraphStyle *)va);
  _Unwind_Resume(a1);
}

void sub_1B4B14354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B143D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B14484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B144F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1461C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4B147C0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B148F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B14A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B14ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CGColorSpaceRef ___Z22TSUDeviceRGBColorSpacev_block_invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateDeviceRGB();
  TSUDeviceRGBColorSpace(void)::sDeviceRGBColorSpace = (uint64_t)result;
  return result;
}

void sub_1B4B15338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B15884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1603C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  MEMORY[0x1B5E3DB94](v7, 0x10B3C400074EEDFLL);

  _Unwind_Resume(a1);
}

void sub_1B4B161DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B16310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B163C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  topotext::String::~String((topotext::String *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4B16444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B1650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

topotext::AttributeRun *google::protobuf::internal::GenericTypeHandler<topotext::AttributeRun>::New()
{
  topotext::AttributeRun *v0;

  v0 = (topotext::AttributeRun *)operator new();
  topotext::AttributeRun::AttributeRun(v0);
  return v0;
}

{
  topotext::AttributeRun *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (topotext::AttributeRun *)operator new();
  topotext::AttributeRun::AttributeRun(v0, v1, v2);
  return v0;
}

void sub_1B4B16568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40BCC55259);
  _Unwind_Resume(a1);
}

void sub_1B4B16F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B17A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B17D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B18528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B4B187B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B18828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B188E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B18944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B18A7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B18B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1B4B18E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B18F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B191EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B192C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B19398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4B19558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  uint64_t v12;

  MEMORY[0x1B5E3DB94](v12, 0x10B3C407D90225ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B195E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B196C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1B4B19794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B19844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B198E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B199E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B4B19AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B19B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B19B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B19CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B19D24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B19D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B19DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B19E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B19FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1A030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1A084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B1A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B1A194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B1A1F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1A2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B4B1A320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1A3D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B4B1A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1A5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1A664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B4B1A780(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B4B1A858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x10B3C40CCCF3E6ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B1A9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1AB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B4B1ACB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  MEMORY[0x1B5E3DB94](v11, 0x10B3C407D90225ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B1AE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4B1AFC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B4B1B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4B1B20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B1B2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1B39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1B4F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4B1B5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1B674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B4B1B7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B1B858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1B8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1B988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1BB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1BC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1BCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1BDA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B1BE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B1BEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B4B1BFAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B1C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1C098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1C220(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1C400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1CF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x10B3C40CCCF3E6ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B1CFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1D074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1D110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1D1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B1D28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1D338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1D3C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1D580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  id *v18;
  id *v19;

  a11 = (void **)&a18;
  std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](&a11);

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = (uint64_t)(v7 - *a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v13 = v5 - *a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v20[4] = result;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>(result, v14);
    v16 = &v15[32 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[32 * v17];
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)v16 = v18;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    v19 = a2[3];
    a2[3] = 0;
    *((_QWORD *)v16 + 3) = v19;
    v20[2] = v16 + 32;
    std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__swap_out_circular_buffer(a1, v20);
    v10 = a1[1];
    result = std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    v9 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(v7 + 24) = v9;
    v10 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v10;
  return result;
}

void sub_1B4B1D6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4B1D868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B4B1D938(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1DA14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 32)
  {

    v5 = *(void **)(i - 32);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      v10 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {

    i = (id *)(*(_QWORD *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;

  }
}

void std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__assign_with_size[abi:ne180100]<std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2;
  v8 = (uint64_t)(a1 + 2);
  v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__vdeallocate(a1);
    if (a4 >> 59)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v10 = a1[2] - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__vallocate[abi:ne180100](a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*>(v8, v6, a3, a1[1]);
LABEL_15:
    a1[1] = v13;
    return;
  }
  v14 = a1[1];
  v15 = (v14 - v9) >> 5;
  if (v15 < a4)
  {
    v16 = a2 + 32 * v15;
    if (v14 != v9)
    {
      v17 = 32 * v15;
      do
      {
        std::pair<TopoIDRange,NSDictionary * {__strong}>::operator=[abi:ne180100](v9, v6);
        v6 += 32;
        v9 += 32;
        v17 -= 32;
      }
      while (v17);
      v9 = a1[1];
    }
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*>(v8, v16, a3, v9);
    goto LABEL_15;
  }
  if (a2 == a3)
  {
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    do
    {
      std::pair<TopoIDRange,NSDictionary * {__strong}>::operator=[abi:ne180100](v9, v6);
      v6 += 32;
      v9 += 32;
      v18 += 32;
    }
    while (v6 != a3);
  }
  std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v18);
}

void sub_1B4B1DEE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::pair<TopoIDRange,NSDictionary * {__strong}>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*,std::pair<TopoIDRange,NSDictionary * {__strong}>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 == a3)
  {
    v7 = a4;
  }
  else
  {
    v6 = a2;
    v7 = v12;
    do
    {
      *(_QWORD *)v4 = *(id *)v6;
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v6 + 16);
      *(_QWORD *)(v4 + 24) = *(id *)(v6 + 24);
      v7 += 32;
      v6 += 32;
      v4 = v7;
    }
    while (v6 != a3);
    v12 = v7;
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::pair<TopoIDRange,NSDictionary * {__strong}>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v7;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::pair<TopoIDRange,NSDictionary * {__strong}>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;

  if (a3 != a5)
  {
    v6 = a3;
    do
    {

      v7 = *(void **)(v6 - 32);
      v6 -= 32;

    }
    while (v6 != a5);
  }
}

uint64_t std::pair<TopoIDRange,NSDictionary * {__strong}>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)a1, *(id *)a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  objc_storeStrong((id *)(a1 + 24), *(id *)(a2 + 24));
  return a1;
}

void sub_1B4B1E16C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1E370(_Unwind_Exception *a1, void *a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a3);
  v7 = v4;

  CRDT::StringArray_ArrayAttachment::~StringArray_ArrayAttachment((CRDT::StringArray_ArrayAttachment *)va);
  _Unwind_Resume(a1);
}

void sub_1B4B1E5E8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1B5E3DB94](v2, 0x10B3C406C843DA2);

  _Unwind_Resume(a1);
}

void sub_1B4B1E6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;

  v15 = v10;
  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1B4B1EA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x10B3C40E3C8ABF7);

  _Unwind_Resume(a1);
}

CRDT::StringArray_ArrayAttachment *google::protobuf::internal::GenericTypeHandler<CRDT::StringArray_ArrayAttachment>::New()
{
  CRDT::StringArray_ArrayAttachment *v0;

  v0 = (CRDT::StringArray_ArrayAttachment *)operator new();
  CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(v0);
  return v0;
}

{
  CRDT::StringArray_ArrayAttachment *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (CRDT::StringArray_ArrayAttachment *)operator new();
  CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(v0, v1, v2);
  return v0;
}

void sub_1B4B1EAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

void sub_1B4B1EC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1EDDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1EF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1F044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1F0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B1F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B4B1F524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B4B1F610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B1F870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B1FB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B4B1FCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void setPropertyIMP(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  id v11;

  v11 = a1;
  v5 = a3;
  +[CRObject keyFromSelector:](CRObject, "keyFromSelector:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "fields");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v8, "setContents:", v5);
  }
  else
  {
    +[CRConstant constant](CRConstant, "constant");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "isEqual:", v9);

    if (v10)
      objc_msgSend(v11, "setFieldKey:value:", v6, v5);
  }

}

id propertyIMP(void *a1, const char *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  objc_msgSend(a1, "fields");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromSelector(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v5, "contents");
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = v5;
  }
  v7 = v6;

  return v7;
}

void sub_1B4B21EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  id *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v9);
  _Unwind_Resume(a1);
}

void sub_1B4B22654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B226F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B227B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B22868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B22900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1B4B22984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B22B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  topotext::Font::~Font((topotext::Font *)va);

  _Unwind_Resume(a1);
}

void sub_1B4B22C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B22D9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B22E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  topotext::Font::~Font((topotext::Font *)va);
  _Unwind_Resume(a1);
}

void sub_1B4B22ED4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B22F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B23010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x10B3C40CCCF3E6ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B23138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  MEMORY[0x1B5E3DB94](v11, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4B2321C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B23310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B4B238F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  topotext::String::~String((topotext::String *)&a9);

  _Unwind_Resume(a1);
}

void sub_1B4B243C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  void *v41;

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a25);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B4B24C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v12;
  va_list va;

  va_start(va, a11);
  MEMORY[0x1B5E3DB94](v11, 0x1093C4020A6E6BFLL);

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4B24E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  topotext::String::~String((topotext::String *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B4B25300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)va1);
  v12 = *(void **)(v10 - 112);
  if (v12)
  {
    *(_QWORD *)(v10 - 104) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

void sub_1B4B25434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  topotext::String::~String((topotext::String *)&a9);

  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B2551C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedField<unsigned int>::Get(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 664);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 665);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)a1 + 4 * a2;
}

{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 664);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 665);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)a1 + 4 * a2;
}

void sub_1B4B255F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

topotext::Substring *google::protobuf::internal::GenericTypeHandler<topotext::Substring>::New()
{
  topotext::Substring *v0;

  v0 = (topotext::Substring *)operator new();
  topotext::Substring::Substring(v0);
  return v0;
}

void sub_1B4B25650(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C403C0DBAE8);
  _Unwind_Resume(a1);
}

_DWORD *google::protobuf::RepeatedField<unsigned int>::Reserve(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    result[3] = v5;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, 4 * (int)v3[2]);
      JUMPOUT(0x1B5E3DB7CLL);
    }
  }
  return result;
}

void sub_1B4B25778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B2582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x1093C405ACC521ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B258E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B25998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B25A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B25B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B25C10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25C80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25D20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B25D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B4B25EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B25FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B26058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B2613C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x10B3C40CCCF3E6ELL);

  _Unwind_Resume(a1);
}

void sub_1B4B26268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  uint64_t v11;

  MEMORY[0x1B5E3DB94](v11, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4B2634C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B26440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1B4B26508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B26630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;

  MEMORY[0x1B5E3DB94](v10, 0x1093C4020A6E6BFLL);

  _Unwind_Resume(a1);
}

void sub_1B4B26758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B269F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26A6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26B4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26B94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B26C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B26CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B26D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B26DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B26E48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B270BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B4B272D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B274E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B27584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B27778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B4B27954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

CRDT::VectorTimestamp_Element *google::protobuf::internal::GenericTypeHandler<CRDT::VectorTimestamp_Element>::New()
{
  CRDT::VectorTimestamp_Element *v0;

  v0 = (CRDT::VectorTimestamp_Element *)operator new();
  CRDT::VectorTimestamp_Element::VectorTimestamp_Element(v0);
  return v0;
}

void sub_1B4B279E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40D780A9F4);
  _Unwind_Resume(a1);
}

void sub_1B4B27B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B27C8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B27CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B4B27D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B27F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TopoIDRange,NSAttributedString * {__strong}>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = (uint64_t)(v7 - *a1) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v13 = v5 - *a1;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v20[4] = result;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoID,TopoID>>>(result, v14);
    v16 = &v15[32 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[32 * v17];
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)v16 = v18;
    *((_DWORD *)v16 + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    v19 = a2[3];
    a2[3] = 0;
    *((_QWORD *)v16 + 3) = v19;
    v20[2] = v16 + 32;
    std::vector<std::pair<TopoIDRange,NSAttributedString * {__strong}>>::__swap_out_circular_buffer(a1, v20);
    v10 = a1[1];
    result = std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    v9 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(v7 + 24) = v9;
    v10 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v10;
  return result;
}

void sub_1B4B28084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<TopoIDRange,NSDictionary * {__strong}>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B4B28410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1B4B285AC(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<TopoIDRange,NSAttributedString * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSAttributedString * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<TopoIDRange,NSAttributedString * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(a3 + 16);
      v10 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSAttributedString * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSAttributedString * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSAttributedString * {__strong}>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<TopoIDRange,NSDictionary * {__strong}>>,std::reverse_iterator<std::pair<TopoIDRange,NSDictionary * {__strong}>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void sub_1B4B2A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B4B2AA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B2AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  id *v15;
  id *v16;
  uint64_t v17;

  *(_QWORD *)(v17 - 56) = &a15;
  std::vector<TopoIDRange>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 56));

  _Unwind_Resume(a1);
}

void sub_1B4B2AD30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B2AE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  id *v9;
  id *v10;

  _Unwind_Resume(a1);
}

void sub_1B4B2AF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B4B2B048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B4B2B190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<TopoIDRange>::__assign_with_size[abi:ne180100]<TopoIDRange*,TopoIDRange*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  id *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  char v19;

  v8 = a1 + 16;
  v9 = *(id **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<TopoIDRange>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<TopoIDRange>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<TopoIDRange>,TopoIDRange*,TopoIDRange*,TopoIDRange*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TopoIDRange *,TopoIDRange *,TopoIDRange *>((int)&v18, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<TopoIDRange>,TopoIDRange*,TopoIDRange*,TopoIDRange*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TopoIDRange *,TopoIDRange *,TopoIDRange *>((int)&v19, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = *(void **)(v16 - 24);
      v16 -= 24;

    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B4B2B338(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B4B2B340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<TopoIDRange>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<TopoIDRange>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<CRDT::Document_DocObject *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<TopoIDRange>,TopoIDRange*,TopoIDRange*,TopoIDRange*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)a4 = *(id *)v6;
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(a4 + 16) = *(_DWORD *)(v6 + 16);
      a4 += 24;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<TopoIDRange *,TopoIDRange *,TopoIDRange *>(int a1, uint64_t a2, uint64_t a3, id *location)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    objc_storeStrong(location, *(id *)v5);
    *((_DWORD *)location + 2) = *(_DWORD *)(v5 + 8);
    *((_DWORD *)location + 4) = *(_DWORD *)(v5 + 16);
    location += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

unint64_t *google::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v5;

  v2 = *result;
  __dmb(0xBu);
  if (v2 != 2)
  {
    v3 = (uint64_t *)result;
    do
    {
      while (!__ldaxr(result))
      {
        if (!__stlxr(1uLL, result))
        {
          result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
          __dmb(0xBu);
          *v3 = 2;
          return result;
        }
      }
      __clrex();
    }
    while (!*result);
    if (*result == 1)
    {
      do
      {
        result = (unint64_t *)sched_yield();
        v5 = *v3;
        __dmb(0xBu);
      }
      while (v5 == 1);
    }
  }
  return result;
}

_QWORD *google::protobuf::MessageLite::InitializationErrorString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

BOOL google::protobuf::MessageLite::ParseFromArray(google::protobuf::MessageLite *this, char *a2, int a3)
{
  _BOOL8 v4;
  std::string *v5;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  std::string __p;
  std::string v18[2];

  v7[0] = 0;
  v7[1] = a2;
  v7[2] = &a2[a3];
  v8 = a3;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  v12 = xmmword_1B4B747C0;
  v13 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
  v14 = 0;
  v15 = 0;
  (*(void (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 32))(this);
  if (!(*(unsigned int (**)(google::protobuf::MessageLite *, _QWORD *))(*(_QWORD *)this + 64))(this, v7))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 123);
    v5 = google::protobuf::internal::LogMessage::operator<<(v18, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (google::protobuf::internal::LogMessage *)v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    goto LABEL_7;
  }
  v4 = (_BYTE)v10 != 0;
LABEL_8:
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)v7);
  return v4;
}

void sub_1B4B2C7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage((void **)(v25 - 64));
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::MessageLite::SerializeWithCachedSizesToArray(google::protobuf::MessageLite *this, unsigned __int8 *a2)
{
  int v4;
  std::string *v5;
  char v7;
  std::string v8[2];
  _BYTE v9[32];
  _BYTE v10[32];

  v4 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 96))(this);
  google::protobuf::io::ArrayOutputStream::ArrayOutputStream((uint64_t)v10, a2, v4, -1);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v9, (google::protobuf::io::ZeroCopyOutputStream *)v10);
  (*(void (**)(google::protobuf::MessageLite *, _BYTE *))(*(_QWORD *)this + 80))(this, v9);
  if (v9[24])
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 224);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: !coded_out.HadError(): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v9);
  google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((google::protobuf::io::ArrayOutputStream *)v10);
  return &a2[v4];
}

void sub_1B4B2C8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va1);
  google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((google::protobuf::io::ArrayOutputStream *)(v3 - 64));
  _Unwind_Resume(a1);
}

void google::protobuf::`anonymous namespace'::InitializationErrorMessage(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  void *__p;
  std::string::size_type v11;
  unsigned __int8 v12;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = v11;
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = v11;
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0)
    operator delete(__p);
}

void sub_1B4B2CA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void google::protobuf::`anonymous namespace'::ByteSizeConsistencyError(google::protobuf::_anonymous_namespace_ *this, int a2, int a3)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  v4 = (int)this;
  if ((_DWORD)this != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 63);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, "Protocol message was modified concurrently during serialization.");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  if (a3 != v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 65);
    v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
    v8 = google::protobuf::internal::LogMessage::operator<<(v7, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of the message.");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (google::protobuf::internal::LogMessage *)v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 69);
  v9 = google::protobuf::internal::LogMessage::operator<<(v11, "This shouldn't be called if all the sizes are equal.");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (google::protobuf::internal::LogMessage *)v9);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
}

void sub_1B4B2CB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializeToArray(google::protobuf::MessageLite *this, void *a2, int a3)
{
  std::string *v6;
  std::string *v7;
  char v9;
  std::string __p;
  std::string v11[2];

  if (((*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/message_lite.cc", 301);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: IsInitialized(): ");
    v7 = google::protobuf::internal::LogMessage::operator<<(v6, (const std::string::value_type *)&__p);
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  return google::protobuf::MessageLite::SerializePartialToArray(this, a2, a3);
}

void sub_1B4B2CC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::MessageLite::SerializePartialToArray(google::protobuf::MessageLite *this, void *a2, int a3)
{
  google::protobuf::_anonymous_namespace_ *v6;
  uint64_t v7;
  int v8;

  v6 = (google::protobuf::_anonymous_namespace_ *)(*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 72))(this);
  if ((int)v6 <= a3)
  {
    v7 = (*(uint64_t (**)(google::protobuf::MessageLite *, void *))(*(_QWORD *)this + 88))(this, a2)
       - (_QWORD)a2;
    if (v7 != (int)v6)
    {
      v8 = (*(uint64_t (**)(google::protobuf::MessageLite *))(*(_QWORD *)this + 72))(this);
    }
  }
  return (int)v6 <= a3;
}

void sub_1B4B2CE08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::ArrayOutputStream::ArrayOutputStream(uint64_t this, void *a2, int a3, int a4)
{
  int v4;

  *(_QWORD *)this = &off_1E67F6AF0;
  *(_QWORD *)(this + 8) = a2;
  if (a4 <= 0)
    v4 = a3;
  else
    v4 = a4;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = v4;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

void google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(google::protobuf::io::ArrayOutputStream *this)
{
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
  JUMPOUT(0x1B5E3DB94);
}

BOOL google::protobuf::io::ArrayOutputStream::Next(google::protobuf::io::ArrayOutputStream *this, void **a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *((int *)this + 6);
  v4 = *((_DWORD *)this + 4);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 7) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 5))
      v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 7) = v5;
    *a2 = (void *)(*((_QWORD *)this + 1) + v3);
    *a3 = v5;
    *((_DWORD *)this + 6) += *((_DWORD *)this + 7);
  }
  return (int)v3 < v4;
}

void google::protobuf::io::ArrayOutputStream::BackUp(google::protobuf::io::ArrayOutputStream *this, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  v4 = *((_DWORD *)this + 7);
  if (v4 <= 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 136);
    v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (last_returned_size_) > (0): ");
    v6 = google::protobuf::internal::LogMessage::operator<<(v5, "BackUp() can only be called after a successful Next().");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v4 = *((_DWORD *)this + 7);
  }
  if (v4 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 138);
    v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) <= (last_returned_size_): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v7);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 139);
    v8 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  *((_QWORD *)this + 3) = (*((_DWORD *)this + 6) - a2);
}

void sub_1B4B2CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::ArrayOutputStream::ByteCount(google::protobuf::io::ArrayOutputStream *this)
{
  return *((int *)this + 6);
}

_QWORD *google::protobuf::io::StringOutputStream::StringOutputStream(_QWORD *result, uint64_t a2)
{
  *result = &off_1E67F6B38;
  result[1] = a2;
  return result;
}

void google::protobuf::io::StringOutputStream::~StringOutputStream(google::protobuf::io::StringOutputStream *this)
{
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t google::protobuf::io::StringOutputStream::Next(google::protobuf::io::StringOutputStream *this, void **a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  std::string v18[2];

  v6 = *((_QWORD *)this + 1);
  if (*(char *)(v6 + 23) < 0)
  {
    v9 = *(_QWORD *)(v6 + 8);
    v7 = (int)v9;
    v8 = (*(_QWORD *)(v6 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((int)v9 < v8)
      goto LABEL_11;
    v10 = *(_QWORD *)(v6 + 8);
    if ((int)v9 >= 0x40000000)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 170);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "Cannot allocate buffer larger than kint32max for ");
      v12 = google::protobuf::internal::LogMessage::operator<<(v11, "StringOutputStream.");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v12);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 23);
    if (*(unsigned __int8 *)(v6 + 23) < 0x16u)
    {
      v8 = 22;
      LODWORD(v9) = *(unsigned __int8 *)(v6 + 23);
      goto LABEL_11;
    }
    LODWORD(v10) = *(unsigned __int8 *)(v6 + 23);
    LODWORD(v9) = v10;
  }
  v14 = 2 * v10;
  if (v14 <= 16)
    v8 = 16;
  else
    v8 = v14;
LABEL_11:
  std::string::resize((std::string *)v6, v8, 0);
  v15 = (uint64_t *)*((_QWORD *)this + 1);
  if (*((char *)v15 + 23) < 0)
  {
    if (!v15[1])
    {
LABEL_16:
      v15 = 0;
      goto LABEL_17;
    }
    v15 = (uint64_t *)*v15;
  }
  else if (!*((_BYTE *)v15 + 23))
  {
    goto LABEL_16;
  }
LABEL_17:
  *a2 = (char *)v15 + v7;
  v16 = *((_QWORD *)this + 1);
  if (*(char *)(v16 + 23) < 0)
    v16 = *(_QWORD *)(v16 + 8);
  else
    LODWORD(v16) = *(unsigned __int8 *)(v16 + 23);
  *a3 = v16 - v9;
  return 1;
}

void sub_1B4B2D17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::io::StringOutputStream::BackUp(google::protobuf::io::StringOutputStream *this, int a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 188);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)this + 1);
  LODWORD(v6) = *(char *)(v5 + 23);
  if ((v6 & 0x80000000) != 0)
    v7 = *(_QWORD *)(v5 + 8);
  else
    v7 = *(unsigned __int8 *)(v5 + 23);
  if (v7 < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream_impl_lite.cc", 189);
    v8 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) <= (target_->size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (google::protobuf::internal::LogMessage *)v8);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v5 = *((_QWORD *)this + 1);
    LOBYTE(v6) = *(_BYTE *)(v5 + 23);
  }
  if ((v6 & 0x80) != 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = v6;
  std::string::resize((std::string *)v5, v6 - a2, 0);
}

void sub_1B4B2D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::StringOutputStream::ByteCount(google::protobuf::io::StringOutputStream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (*(char *)(v1 + 23) < 0)
    return *(_QWORD *)(v1 + 8);
  else
    return *(unsigned __int8 *)(v1 + 23);
}

uint64_t google::protobuf::io::ZeroCopyOutputStream::AllowsAliasing(google::protobuf::io::ZeroCopyOutputStream *this)
{
  return 0;
}

uint64_t replica_manager::protobuf_ShutdownFile_replica_2dmanager_2eproto(replica_manager *this)
{
  uint64_t result;

  if (replica_manager::VectorTimestampElement::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)replica_manager::VectorTimestampElement::default_instance_ + 8))(replica_manager::VectorTimestampElement::default_instance_);
  if (replica_manager::ReplicaEntry::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)replica_manager::ReplicaEntry::default_instance_ + 8))(replica_manager::ReplicaEntry::default_instance_);
  result = replica_manager::ReplicaManager::default_instance_;
  if (replica_manager::ReplicaManager::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)replica_manager::ReplicaManager::default_instance_ + 8))(replica_manager::ReplicaManager::default_instance_);
  return result;
}

void replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto_impl(replica_manager *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  replica_manager::ReplicaManager *v6;
  void (*v7)(void);

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x1E9BF1, (google::protobuf::internal *)0x1E9BF0, "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/replica-manager.pb.cc", a4);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E67F6078;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  replica_manager::VectorTimestampElement::default_instance_ = v4;
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E67F5F88;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 52) = 0u;
  replica_manager::ReplicaEntry::default_instance_ = v5;
  v6 = (replica_manager::ReplicaManager *)operator new();
  replica_manager::ReplicaManager::ReplicaManager(v6);
  replica_manager::ReplicaManager::default_instance_ = (uint64_t)v6;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)replica_manager::protobuf_ShutdownFile_replica_2dmanager_2eproto, v7);
}

void sub_1B4B2D404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40BC69FF43);
  _Unwind_Resume(a1);
}

double replica_manager::VectorTimestampElement::VectorTimestampElement(replica_manager::VectorTimestampElement *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6078;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double replica_manager::ReplicaEntry::ReplicaEntry(replica_manager::ReplicaEntry *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F5F88;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

void replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto(replica_manager *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = &off_1E67F6B80;
    v2[1] = replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto_impl;
    v3 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto_once_, (uint64_t)v2);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_1B4B2D4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

replica_manager::VectorTimestampElement *replica_manager::VectorTimestampElement::VectorTimestampElement(replica_manager::VectorTimestampElement *this, const replica_manager::VectorTimestampElement *a2)
{
  *(_QWORD *)this = &off_1E67F6078;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  replica_manager::VectorTimestampElement::MergeFrom(this, a2);
  return this;
}

void sub_1B4B2D538(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

std::string *replica_manager::VectorTimestampElement::MergeFrom(replica_manager::VectorTimestampElement *this, const replica_manager::VectorTimestampElement *a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/replica-manager.pb.cc", 260);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 5) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_QWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 2u;
      *((_QWORD *)this + 6) = v7;
    }
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B2D628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void replica_manager::VectorTimestampElement::~VectorTimestampElement(void **this)
{
  *this = &off_1E67F6078;
  replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto((replica_manager *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  replica_manager::VectorTimestampElement::~VectorTimestampElement(this);
  JUMPOUT(0x1B5E3DB94);
}

double replica_manager::VectorTimestampElement::New(replica_manager::VectorTimestampElement *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6078;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t replica_manager::VectorTimestampElement::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t replica_manager::VectorTimestampElement::MergePartialFromCodedStream(replica_manager::VectorTimestampElement *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v18, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17, (google::protobuf::io::ZeroCopyOutputStream *)v18);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_38;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_QWORD *)this + 5) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_28;
        }
      }
      else
      {
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_37:
          v15 = 1;
          goto LABEL_39;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v17, v4))goto LABEL_38;
      }
    }
    if ((_DWORD)v7 != 16)
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_37;
      goto LABEL_16;
    }
    v13 = (char *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_28:
    if ((unint64_t)v13 < v9 && (*v13 & 0x80000000) == 0)
    {
      *((_QWORD *)this + 6) = *v13;
      v14 = (unsigned __int8 *)(v13 + 1);
      *((_QWORD *)a2 + 1) = v14;
      goto LABEL_33;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 6))
      break;
    v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_33:
    *((_DWORD *)this + 8) |= 2u;
    if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v15 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_39;
    }
  }
LABEL_38:
  v15 = 0;
LABEL_39:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v18);
  return v15;
}

void sub_1B4B2D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t replica_manager::VectorTimestampElement::SerializeWithCachedSizes(replica_manager::VectorTimestampElement *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)this + 6), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t replica_manager::VectorTimestampElement::ByteSize(replica_manager::VectorTimestampElement *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v2 = google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 5)) + 1;
    if ((*((_DWORD *)this + 8) & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
LABEL_7:
    v2 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 6)) + 1;
LABEL_8:
  if (*((char *)this + 31) < 0)
    v3 = *((_QWORD *)this + 2);
  else
    LODWORD(v3) = *((unsigned __int8 *)this + 31);
  result = (v2 + v3);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *replica_manager::VectorTimestampElement::CheckTypeAndMergeFrom(replica_manager::VectorTimestampElement *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return replica_manager::VectorTimestampElement::MergeFrom(this, lpsrc);
}

uint64_t replica_manager::VectorTimestampElement::IsInitialized(replica_manager::VectorTimestampElement *this)
{
  return 1;
}

_QWORD *replica_manager::VectorTimestampElement::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "replica_manager.VectorTimestampElement");
}

std::string *replica_manager::ReplicaEntry::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  __int32 v5;
  __int32 v6;
  __int32 v7;
  const std::string::value_type *v8;
  int32x2_t *v9;
  int32x2_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/replica-manager.pb.cc", 528);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(this + 6, a2 + 6);
  LOBYTE(v5) = a2[4].i8[0];
  if ((_BYTE)v5)
  {
    if ((a2[4].i8[0] & 1) != 0)
    {
      v6 = a2[5].i32[0];
      this[4].i32[0] |= 1u;
      this[5].i32[0] = v6;
      v5 = a2[4].i32[0];
    }
    if ((v5 & 2) != 0)
    {
      v7 = a2[5].i32[1];
      this[4].i32[0] |= 2u;
      this[5].i32[1] = v7;
    }
  }
  v10 = a2[1];
  v9 = a2 + 1;
  v8 = (const std::string::value_type *)v10;
  v11 = v9[2].i8[7];
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[2].u8[7];
  else
    v13 = (std::string::size_type)v9[1];
  return std::string::append((std::string *)&this[1], v12, v13);
}

void sub_1B4B2DB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void replica_manager::ReplicaEntry::~ReplicaEntry(replica_manager::ReplicaEntry *this)
{
  *(_QWORD *)this = &off_1E67F5F88;
  replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 6);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  replica_manager::ReplicaEntry::~ReplicaEntry(this);
  JUMPOUT(0x1B5E3DB94);
}

double replica_manager::ReplicaEntry::New(replica_manager::ReplicaEntry *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F5F88;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  return result;
}

uint64_t replica_manager::ReplicaEntry::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  *(_QWORD *)(this + 40) = 0;
  if (*(int *)(this + 56) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t replica_manager::ReplicaEntry::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  BOOL v13;
  char *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE v32[32];
  _QWORD v33[2];
  unsigned int v34;

  google::protobuf::io::StringOutputStream::StringOutputStream(v33, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v32, (google::protobuf::io::ZeroCopyOutputStream *)v33);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_13;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      v9 = v7 >> 3;
      if (v7 >> 3 == 3)
        break;
      if (v9 == 2)
      {
        if ((_DWORD)v7 == 16)
        {
          v14 = (char *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          goto LABEL_32;
        }
LABEL_22:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_61;
        goto LABEL_24;
      }
      if (v9 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_22;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)&this[5]))
            goto LABEL_60;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          this[5].i32[0] = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        this[4].i32[0] |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v14 = v12 + 1;
          *((_QWORD *)a2 + 1) = v14;
LABEL_32:
          if ((unint64_t)v14 >= v10 || *v14 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)&this[5] + 1))goto LABEL_60;
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            v10 = *((_QWORD *)a2 + 2);
          }
          else
          {
            this[5].i32[1] = *v14;
            v15 = v14 + 1;
            *((_QWORD *)a2 + 1) = v15;
          }
          this[4].i32[0] |= 2u;
          if ((unint64_t)v15 < v10 && *v15 == 26)
            goto LABEL_39;
        }
      }
      else
      {
LABEL_13:
        if ((_DWORD)v7)
          v13 = (v7 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
LABEL_61:
          v30 = 1;
          goto LABEL_62;
        }
LABEL_24:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v32, v4))goto LABEL_60;
      }
    }
    if ((_DWORD)v7 != 26)
      goto LABEL_22;
    while (2)
    {
      v16 = this[7].i32[1];
      v17 = this[7].i32[0];
      if ((int)v17 >= v16)
      {
        if (v16 == this[8].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[6], v16 + 1);
        v19 = operator new();
        *(_QWORD *)v19 = &off_1E67F6078;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        v20 = this[6];
        v21 = this[7];
        this[7] = vadd_s32(v21, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v20 + 8 * v21.i32[0]) = v19;
      }
      else
      {
        v18 = this[6];
        this[7].i32[0] = v17 + 1;
        v19 = *(_QWORD *)(*(_QWORD *)&v18 + 8 * v17);
      }
      v34 = 0;
      v22 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34))
          goto LABEL_60;
      }
      else
      {
        v34 = *v22;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      v23 = *((_DWORD *)a2 + 14);
      v24 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v23 + 1;
      if (v23 >= v24
        || (v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v34),
            !replica_manager::VectorTimestampElement::MergePartialFromCodedStream((replica_manager::VectorTimestampElement *)v19, a2))|| !*((_BYTE *)a2 + 36))
      {
LABEL_60:
        v30 = 0;
        goto LABEL_62;
      }
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v25);
      v26 = *((_DWORD *)a2 + 14);
      v27 = __OFSUB__(v26, 1);
      v28 = v26 - 1;
      if (v28 < 0 == v27)
        *((_DWORD *)a2 + 14) = v28;
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      v29 = (_BYTE *)*((_QWORD *)a2 + 2);
      if (v15 < v29 && *v15 == 26)
      {
LABEL_39:
        *((_QWORD *)a2 + 1) = v15 + 1;
        continue;
      }
      break;
    }
  }
  while (v15 != v29 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  v30 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_62:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v32);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v33);
  return v30;
}

void sub_1B4B2E04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t replica_manager::ReplicaEntry::SerializeWithCachedSizes(replica_manager::ReplicaEntry *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 10), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)this + 11), a2, a4);
  if (*((int *)this + 14) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t)this + 48, v7);
      google::protobuf::internal::WireFormatLite::WriteMessage(3, v8, a2);
      ++v7;
    }
    while (v7 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
  {
    v9 = (char *)*((_QWORD *)this + 1);
    v10 = *((_QWORD *)this + 2);
  }
  else
  {
    v9 = (char *)this + 8;
    LODWORD(v10) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v9, v10);
}

uint64_t replica_manager::ReplicaEntry::ByteSize(replica_manager::ReplicaEntry *this)
{
  char v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  replica_manager::VectorTimestampElement *v10;
  google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t result;

  v2 = *((_BYTE *)this + 32);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_14;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v4 >= 0x80)
    {
      v3 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      if ((*((_DWORD *)this + 8) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v5 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  else
    v6 = 2;
  v3 += v6;
LABEL_14:
  v7 = *((_DWORD *)this + 14);
  v8 = v7 + v3;
  if (v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (replica_manager::VectorTimestampElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t)this + 48, v9);
      v11 = (google::protobuf::io::CodedOutputStream *)replica_manager::VectorTimestampElement::ByteSize(v10);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      else
        v13 = 1;
      v8 += v12 + v13;
      ++v9;
    }
    while (v9 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
    v14 = *((_QWORD *)this + 2);
  else
    LODWORD(v14) = *((unsigned __int8 *)this + 31);
  result = (v8 + v14);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *replica_manager::ReplicaEntry::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return replica_manager::ReplicaEntry::MergeFrom(this, lpsrc);
}

uint64_t replica_manager::ReplicaEntry::IsInitialized(replica_manager::ReplicaEntry *this)
{
  return 1;
}

_QWORD *replica_manager::ReplicaEntry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "replica_manager.ReplicaEntry");
}

replica_manager::ReplicaManager *replica_manager::ReplicaManager::ReplicaManager(replica_manager::ReplicaManager *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E67F6000;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  replica_manager::ReplicaManager::SharedCtor(this);
  return this;
}

void sub_1B4B2E314(_Unwind_Exception *a1)
{
  uint64_t v1;
  int *v2;
  uint64_t *v3;
  int *v4;
  void **v5;
  uint64_t *v6;

  v6 = v3;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v5);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void replica_manager::ReplicaManager::SharedCtor(replica_manager::ReplicaManager *this)
{
  uint64_t v2;
  _QWORD v3[2];
  char v4;

  v2 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v2 != 2)
  {
    v3[0] = &off_1E67F6B80;
    v3[1] = google::protobuf::internal::InitEmptyString;
    v4 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v3);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v3);
  }
  if (!google::protobuf::internal::empty_string_)
    replica_manager::ReplicaManager::SharedCtor();
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B2E3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *replica_manager::ReplicaManager::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/replica-manager.pb.cc", 783);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 5, a2 + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 8, a2 + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>(this + 11, a2 + 11);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B2E4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void replica_manager::ReplicaManager::~ReplicaManager(replica_manager::ReplicaManager *this)
{
  *(_QWORD *)this = &off_1E67F6000;
  replica_manager::protobuf_AddDesc_replica_2dmanager_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 11);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 16);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 10);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  replica_manager::ReplicaManager::~ReplicaManager(this);
  JUMPOUT(0x1B5E3DB94);
}

replica_manager::ReplicaManager *replica_manager::ReplicaManager::New(replica_manager::ReplicaManager *this)
{
  replica_manager::ReplicaManager *v1;

  v1 = (replica_manager::ReplicaManager *)operator new();
  replica_manager::ReplicaManager::ReplicaManager(v1);
  return v1;
}

void sub_1B4B2E594(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40BC69FF43);
  _Unwind_Resume(a1);
}

uint64_t replica_manager::ReplicaManager::Clear(replica_manager::ReplicaManager *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 64);
  if (*((int *)this + 24) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *((int *)this + 24));
  }
  *((_DWORD *)this + 24) = 0;
  *((_DWORD *)this + 8) = 0;
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

uint64_t replica_manager::ReplicaManager::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  unint64_t TagFallback;
  google::protobuf::io::CodedOutputStream *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int32x2_t v13;
  std::string *v14;
  int32x2_t v15;
  int32x2_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  int32x2_t v21;
  std::string *v22;
  int32x2_t v23;
  int32x2_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int32x2_t v28;
  uint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE v42[32];
  _QWORD v43[2];
  unsigned int v44;

  google::protobuf::io::StringOutputStream::StringOutputStream(v43, (uint64_t)&this[1]);
  TagFallback = (unint64_t)google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v42, (google::protobuf::io::ZeroCopyOutputStream *)v43);
  do
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v8 = TagFallback | ((unint64_t)((TagFallback - 1) < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          goto LABEL_11;
      }
      else
      {
        v7 = *v6;
        *((_DWORD *)a2 + 8) = v7;
        *((_QWORD *)a2 + 1) = v6 + 1;
        v8 = v7 | 0x100000000;
      }
      v9 = v8 >> 3;
      if (v8 >> 3 == 3)
        break;
      if (v9 == 2)
      {
        if ((_DWORD)v8 != 18)
        {
LABEL_31:
          if (!(_DWORD)v8 || (v8 & 7) == 4)
            goto LABEL_67;
          goto LABEL_33;
        }
        while (1)
        {
          v19 = this[9].i32[1];
          v20 = this[9].i32[0];
          if ((int)v20 >= v19)
          {
            if (v19 == this[10].i32[0])
              TagFallback = (unint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[8], v19 + 1);
            v22 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v23 = this[8];
            v24 = this[9];
            this[9] = vadd_s32(v24, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v23 + 8 * v24.i32[0]) = v22;
          }
          else
          {
            v21 = this[8];
            this[9].i32[0] = v20 + 1;
            v22 = *(std::string **)(*(_QWORD *)&v21 + 8 * v20);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v22);
          if (!(_DWORD)TagFallback)
            goto LABEL_66;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2))
            break;
          v25 = *v17;
          if (v25 != 18)
          {
            if (v25 != 26)
              goto LABEL_2;
            goto LABEL_45;
          }
LABEL_35:
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
      }
      else if (v9 == 1)
      {
        if ((_DWORD)v8 != 10)
          goto LABEL_31;
        while (1)
        {
          v11 = this[6].i32[1];
          v12 = this[6].i32[0];
          if ((int)v12 >= v11)
          {
            if (v11 == this[7].i32[0])
              TagFallback = (unint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v11 + 1);
            v14 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v15 = this[5];
            v16 = this[6];
            this[6] = vadd_s32(v16, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v15 + 8 * v16.i32[0]) = v14;
          }
          else
          {
            v13 = this[5];
            this[6].i32[0] = v12 + 1;
            v14 = *(std::string **)(*(_QWORD *)&v13 + 8 * v12);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v14);
          if (!(_DWORD)TagFallback)
            goto LABEL_66;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2))
            break;
          v18 = *v17;
          if (v18 != 10)
          {
            if (v18 != 18)
              goto LABEL_2;
            goto LABEL_35;
          }
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
      }
      else
      {
LABEL_11:
        if ((_DWORD)v8)
          v10 = (v8 & 7) == 4;
        else
          v10 = 1;
        if (v10)
        {
LABEL_67:
          v40 = 1;
          goto LABEL_68;
        }
LABEL_33:
        TagFallback = google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, (google::protobuf::io::CodedOutputStream *)v42, v5);
        if ((TagFallback & 1) == 0)
          goto LABEL_66;
      }
    }
    if ((_DWORD)v8 != 26)
      goto LABEL_31;
    while (1)
    {
      v26 = this[12].i32[1];
      v27 = this[12].i32[0];
      if ((int)v27 >= v26)
      {
        if (v26 == this[13].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[11], v26 + 1);
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E67F5F88;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(_OWORD *)(v29 + 40) = 0u;
        *(_OWORD *)(v29 + 52) = 0u;
        v30 = this[11];
        v31 = this[12];
        this[12] = vadd_s32(v31, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v30 + 8 * v31.i32[0]) = v29;
      }
      else
      {
        v28 = this[11];
        this[12].i32[0] = v27 + 1;
        v29 = *(_QWORD *)(*(_QWORD *)&v28 + 8 * v27);
      }
      v44 = 0;
      v32 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44))
          goto LABEL_66;
      }
      else
      {
        v44 = *v32;
        *((_QWORD *)a2 + 1) = v32 + 1;
      }
      v33 = *((_DWORD *)a2 + 14);
      v34 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v33 + 1;
      if (v33 >= v34
        || (v35 = google::protobuf::io::CodedInputStream::PushLimit(a2, v44),
            !replica_manager::ReplicaEntry::MergePartialFromCodedStream((int32x2_t *)v29, a2))
        || !*((_BYTE *)a2 + 36))
      {
LABEL_66:
        v40 = 0;
        goto LABEL_68;
      }
      TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v35);
      v36 = *((_DWORD *)a2 + 14);
      v37 = __OFSUB__(v36, 1);
      v38 = v36 - 1;
      if (v38 < 0 == v37)
        *((_DWORD *)a2 + 14) = v38;
      v17 = (_BYTE *)*((_QWORD *)a2 + 1);
      v39 = (_BYTE *)*((_QWORD *)a2 + 2);
      if (v17 >= v39 || *v17 != 26)
        break;
LABEL_45:
      *((_QWORD *)a2 + 1) = v17 + 1;
    }
  }
  while (v17 != v39 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  v40 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_68:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v42);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v43);
  return v40;
}

void sub_1B4B2EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t replica_manager::ReplicaManager::SerializeWithCachedSizes(replica_manager::ReplicaManager *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteBytes(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((int *)this + 18) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 64, v6);
      google::protobuf::internal::WireFormatLite::WriteString(2, v7, a2);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 18));
  }
  if (*((int *)this + 24) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>((uint64_t)this + 88, v8);
      google::protobuf::internal::WireFormatLite::WriteMessage(3, v9, a2);
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 24));
  }
  if (*((char *)this + 31) < 0)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2);
  }
  else
  {
    v10 = (char *)this + 8;
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v10, v11);
}

uint64_t replica_manager::ReplicaManager::ByteSize(replica_manager::ReplicaManager *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  replica_manager::ReplicaEntry *v22;
  google::protobuf::io::CodedOutputStream *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v8 = *(unsigned __int8 *)(v4 + 23);
      else
        v8 = v7;
      if (v8 >= 0x80)
      {
        v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
        v5 = *(unsigned __int8 *)(v4 + 23);
        v7 = *(_QWORD *)(v4 + 8);
        v6 = *(_BYTE *)(v4 + 23);
      }
      else
      {
        v9 = 1;
      }
      if (v6 < 0)
        v5 = v7;
      v2 += v9 + v5;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  v10 = *((_DWORD *)this + 18);
  v11 = v10 + v2;
  if (v10 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 64, v12);
      v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = v14;
      v16 = *(_QWORD *)(v13 + 8);
      if ((v14 & 0x80u) == 0)
        v17 = *(unsigned __int8 *)(v13 + 23);
      else
        v17 = v16;
      if (v17 >= 0x80)
      {
        v18 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v17);
        v14 = *(unsigned __int8 *)(v13 + 23);
        v16 = *(_QWORD *)(v13 + 8);
        v15 = *(_BYTE *)(v13 + 23);
      }
      else
      {
        v18 = 1;
      }
      if (v15 < 0)
        v14 = v16;
      v11 += v18 + v14;
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 18));
  }
  v19 = *((_DWORD *)this + 24);
  v20 = v19 + v11;
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = (replica_manager::ReplicaEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>((uint64_t)this + 88, v21);
      v23 = (google::protobuf::io::CodedOutputStream *)replica_manager::ReplicaEntry::ByteSize(v22);
      v24 = (int)v23;
      if (v23 >= 0x80)
        v25 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      else
        v25 = 1;
      v20 += v24 + v25;
      ++v21;
    }
    while (v21 < *((_DWORD *)this + 24));
  }
  if (*((char *)this + 31) < 0)
    v26 = *((_QWORD *)this + 2);
  else
    LODWORD(v26) = *((unsigned __int8 *)this + 31);
  result = (v20 + v26);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *replica_manager::ReplicaManager::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return replica_manager::ReplicaManager::MergeFrom(this, lpsrc);
}

uint64_t replica_manager::ReplicaManager::IsInitialized(replica_manager::ReplicaManager *this)
{
  return 1;
}

_QWORD *replica_manager::ReplicaManager::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "replica_manager.ReplicaManager");
}

uint64_t replica_manager::VectorTimestampElement::GetCachedSize(replica_manager::VectorTimestampElement *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t replica_manager::ReplicaEntry::GetCachedSize(replica_manager::ReplicaEntry *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t replica_manager::ReplicaManager::GetCachedSize(replica_manager::ReplicaManager *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (*(int *)(result + 8) >= 1)
  {
    v1 = 0;
    do
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8 * v1);
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v2 = 0;
        *(_BYTE *)(v2 + 23) = 0;
      }
      ++v1;
    }
    while (v1 < *(int *)(result + 8));
  }
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x1B5E3DB7CLL);
  return result;
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const replica_manager::VectorTimestampElement *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const replica_manager::VectorTimestampElement *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6078;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = replica_manager::VectorTimestampElement::MergeFrom((replica_manager::VectorTimestampElement *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B2EFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int *a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1[3] >= 1)
  {
    v2 = 0;
    do
      google::protobuf::internal::StringTypeHandlerBase::Delete(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2++));
    while (v2 < a1[3]);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    JUMPOUT(0x1B5E3DB7CLL);
  return result;
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  google::protobuf::internal::StringTypeHandlerBase *v7;
  const std::string *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  std::string *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (google::protobuf::internal::StringTypeHandlerBase *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)a2, v6);
      v8 = (const std::string *)v7;
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          v7 = (google::protobuf::internal::StringTypeHandlerBase *)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New(v7);
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(std::string **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = std::string::operator=(v12, v8);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B2F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int32x2_t *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<replica_manager::ReplicaEntry>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F5F88;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 52) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = replica_manager::ReplicaEntry::MergeFrom((int32x2_t *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B2F2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_9(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 344, a4);
}

void replica_manager::VectorTimestampElement::CheckTypeAndMergeFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_9("down_cast", "common.h", a3, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void replica_manager::ReplicaManager::SharedCtor()
{
  __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
}

int *google::protobuf::internal::RepeatedPtrFieldBase::Reserve(int *this, int a2)
{
  int v2;
  int *v3;
  const void *v4;
  int v5;

  v2 = this[4];
  if (v2 < a2)
  {
    v3 = this;
    v4 = *(const void **)this;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    this[4] = v5;
    this = (int *)operator new[]();
    *(_QWORD *)v3 = this;
    if (v4)
    {
      memcpy(this, v4, 8 * v3[3]);
      JUMPOUT(0x1B5E3DB7CLL);
    }
  }
  return this;
}

_QWORD *google::protobuf::internal::StringTypeHandlerBase::New(google::protobuf::internal::StringTypeHandlerBase *this)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t google::protobuf::internal::StringTypeHandlerBase::Delete(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1B5E3DB94);
  }
  return result;
}

uint64_t google::protobuf::io::ZeroCopyOutputStream::WriteAliasedRaw(google::protobuf::io::ZeroCopyOutputStream *this, const void *a2)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/zero_copy_stream.cc", 49);
  v2 = google::protobuf::internal::LogMessage::operator<<(v5, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (google::protobuf::internal::LogMessage *)v2);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_1B4B2F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::protobuf_ShutdownFile_versioned_2ddocument_2eproto(versioned_document *this)
{
  uint64_t result;

  if (versioned_document::Document::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)versioned_document::Document::default_instance_ + 8))(versioned_document::Document::default_instance_);
  result = versioned_document::Version::default_instance_;
  if (versioned_document::Version::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)versioned_document::Version::default_instance_ + 8))(versioned_document::Version::default_instance_);
  return result;
}

void versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto_impl(versioned_document *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  versioned_document::Version *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x1E9BF1, (google::protobuf::internal *)0x1E9BF0, "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/versioned-document.pb.cc", a4);
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E67F6168;
  *(_DWORD *)(v4 + 64) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_DWORD *)(v4 + 56) = 0;
  versioned_document::Document::default_instance_ = v4;
  v5 = (versioned_document::Version *)operator new();
  versioned_document::Version::Version(v5, v6, v7);
  versioned_document::Version::default_instance_ = (uint64_t)v5;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)versioned_document::protobuf_ShutdownFile_versioned_2ddocument_2eproto, v8);
}

void sub_1B4B2F5AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

double versioned_document::Document::Document(versioned_document::Document *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6168;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

void versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto(versioned_document *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = &off_1E67F6B80;
    v2[1] = versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto_impl;
    v3 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto_once_, (uint64_t)v2);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_1B4B2F664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *versioned_document::Document::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  __int32 v5;
  const std::string::value_type *v6;
  int32x2_t *v7;
  int32x2_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/versioned-document.pb.cc", 244);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>(this + 5, a2 + 5);
  if ((a2[4].i8[0] & 1) != 0)
  {
    v5 = a2[8].i32[0];
    this[4].i32[0] |= 1u;
    this[8].i32[0] = v5;
  }
  v8 = a2[1];
  v7 = a2 + 1;
  v6 = (const std::string::value_type *)v8;
  v9 = v7[2].i8[7];
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = v7[2].u8[7];
  else
    v11 = (std::string::size_type)v7[1];
  return std::string::append((std::string *)&this[1], v10, v11);
}

void sub_1B4B2F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void versioned_document::Document::~Document(versioned_document::Document *this)
{
  *(_QWORD *)this = &off_1E67F6168;
  versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  versioned_document::Document::~Document(this);
  JUMPOUT(0x1B5E3DB94);
}

double versioned_document::Document::New(versioned_document::Document *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6168;
  *(_DWORD *)(v1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t versioned_document::Document::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  *(_DWORD *)(this + 64) = 0;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t versioned_document::Document::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int32x2_t v15;
  versioned_document::Version *v16;
  int32x2_t v17;
  int32x2_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v29[32];
  _QWORD v30[2];
  unsigned int v31;

  google::protobuf::io::StringOutputStream::StringOutputStream(v30, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v29, (google::protobuf::io::ZeroCopyOutputStream *)v30);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
      {
        if ((_DWORD)v7 == 18)
          goto LABEL_27;
LABEL_19:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_48;
        goto LABEL_16;
      }
      if (v7 >> 3 == 1)
        break;
LABEL_12:
      if ((_DWORD)v7)
        v12 = (v7 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
LABEL_48:
        v27 = 1;
        goto LABEL_49;
      }
LABEL_16:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v29, v4))goto LABEL_47;
    }
    if ((_DWORD)v7 != 8)
      goto LABEL_19;
    v9 = (char *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v9 >= v10 || *v9 < 0)
    {
      if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)&this[8]))
        goto LABEL_47;
      v11 = (_BYTE *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
    }
    else
    {
      this[8].i32[0] = *v9;
      v11 = v9 + 1;
      *((_QWORD *)a2 + 1) = v11;
    }
    this[4].i32[0] |= 1u;
    if ((unint64_t)v11 < v10 && *v11 == 18)
    {
      do
      {
        *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_27:
        v13 = this[6].i32[1];
        v14 = this[6].i32[0];
        if ((int)v14 >= v13)
        {
          if (v13 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v13 + 1);
          v16 = google::protobuf::internal::GenericTypeHandler<versioned_document::Version>::New();
          v17 = this[5];
          v18 = this[6];
          this[6] = vadd_s32(v18, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v17 + 8 * v18.i32[0]) = v16;
        }
        else
        {
          v15 = this[5];
          this[6].i32[0] = v14 + 1;
          v16 = *(versioned_document::Version **)(*(_QWORD *)&v15 + 8 * v14);
        }
        v31 = 0;
        v19 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31))
            goto LABEL_47;
        }
        else
        {
          v31 = *v19;
          *((_QWORD *)a2 + 1) = v19 + 1;
        }
        v20 = *((_DWORD *)a2 + 14);
        v21 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v20 + 1;
        if (v20 >= v21
          || (v22 = google::protobuf::io::CodedInputStream::PushLimit(a2, v31),
              !versioned_document::Version::MergePartialFromCodedStream(v16, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_47:
          v27 = 0;
          goto LABEL_49;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v22);
        v23 = *((_DWORD *)a2 + 14);
        v24 = __OFSUB__(v23, 1);
        v25 = v23 - 1;
        if (v25 < 0 == v24)
          *((_DWORD *)a2 + 14) = v25;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = (_BYTE *)*((_QWORD *)a2 + 2);
      }
      while (v11 < v26 && *v11 == 18);
      if (v11 == v26 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        break;
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  v27 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_49:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v29);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v30);
  return v27;
}

void sub_1B4B2FB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Document::SerializeWithCachedSizes(versioned_document::Document *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 32) & 1) != 0)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 16), a2, a4);
  if (*((int *)this + 12) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)this + 40, v6);
      google::protobuf::internal::WireFormatLite::WriteMessage(2, v7, a2);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
  }
  else
  {
    v8 = (char *)this + 8;
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v8, v9);
}

uint64_t versioned_document::Document::ByteSize(versioned_document::Document *this)
{
  int v2;
  google::protobuf::io::CodedOutputStream *v3;
  int v4;
  int v5;
  int v6;
  versioned_document::Version *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if (v3 >= 0x80)
      v2 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    else
      v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  v4 = *((_DWORD *)this + 12);
  v5 = v4 + v2;
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (versioned_document::Version *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<versioned_document::Version>::TypeHandler>((uint64_t)this + 40, v6);
      v8 = (google::protobuf::io::CodedOutputStream *)versioned_document::Version::ByteSize(v7);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
      else
        v10 = 1;
      v5 += v9 + v10;
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v5 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *versioned_document::Document::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  return versioned_document::Document::MergeFrom(this, lpsrc);
}

uint64_t versioned_document::Document::IsInitialized(versioned_document::Document *this)
{
  return 1;
}

_QWORD *versioned_document::Document::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "versioned_document.Document");
}

versioned_document::Version *versioned_document::Version::Version(versioned_document::Version *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F60F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  versioned_document::Version::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B2FD98(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void versioned_document::Version::SharedCtor(versioned_document::Version *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B2FE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

versioned_document::Version *versioned_document::Version::Version(versioned_document::Version *this, const versioned_document::Version *a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)this = &off_1E67F60F0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  versioned_document::Version::SharedCtor(this, (uint64_t)a2, a3);
  versioned_document::Version::MergeFrom(this, a2, v5);
  return this;
}

void sub_1B4B2FEB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

std::string *versioned_document::Version::MergeFrom(versioned_document::Version *this, const versioned_document::Version *a2, uint64_t a3)
{
  std::string *v5;
  int v6;
  int v7;
  int v8;
  const std::string *v9;
  std::string *v10;
  const std::string::value_type *v11;
  char *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/versioned-document.pb.cc", 519);
    v5 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v7 = *((_DWORD *)a2 + 10);
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 10) = v7;
      v6 = *((_DWORD *)a2 + 8);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_14;
        goto LABEL_10;
      }
    }
    else if ((*((_BYTE *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v8 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 11) = v8;
    if ((*((_DWORD *)a2 + 8) & 4) == 0)
      goto LABEL_14;
LABEL_10:
    v9 = (const std::string *)*((_QWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 4u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
    v10 = (std::string *)*((_QWORD *)this + 6);
    if (v10 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 6) = v10;
    }
    std::string::operator=(v10, v9);
  }
LABEL_14:
  v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v12 = (char *)a2 + 8;
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  return std::string::append((std::string *)((char *)this + 8), v15, v16);
}

void sub_1B4B30018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void versioned_document::Version::~Version(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F60F0;
  versioned_document::Version::SharedDtor((versioned_document::Version *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  versioned_document::Version::~Version(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void versioned_document::Version::SharedDtor(versioned_document::Version *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    v4 = v3 == google::protobuf::internal::empty_string_;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    this = (versioned_document::Version *)MEMORY[0x1B5E3DB94](v3, 0x1012C40EC159624);
  }
  versioned_document::protobuf_AddDesc_versioned_2ddocument_2eproto(this);
}

versioned_document::Version *versioned_document::Version::New(versioned_document::Version *this)
{
  versioned_document::Version *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (versioned_document::Version *)operator new();
  versioned_document::Version::Version(v1, v2, v3);
  return v1;
}

void sub_1B4B30140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Version::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 7) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    if ((v3 & 4) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 48);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t versioned_document::Version::MergePartialFromCodedStream(versioned_document::Version *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  BOOL v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  _BYTE v20[32];
  _QWORD v21[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v21, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v20, (google::protobuf::io::ZeroCopyOutputStream *)v21);
  while (1)
  {
    do
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
        {
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_13;
        }
        else
        {
          v6 = *v5;
          *((_DWORD *)a2 + 8) = v6;
          *((_QWORD *)a2 + 1) = v5 + 1;
          v7 = v6 | 0x100000000;
        }
        v9 = v7 >> 3;
        if (v7 >> 3 == 3)
        {
          if ((_DWORD)v7 == 26)
          {
            v15 = *((_DWORD *)this + 8);
            goto LABEL_40;
          }
LABEL_22:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_48;
          goto LABEL_24;
        }
        if (v9 == 2)
          break;
        if (v9 == 1)
        {
          if ((_DWORD)v7 != 8)
            goto LABEL_22;
          v11 = (char *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v11 >= v10 || *v11 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 10))goto LABEL_49;
            v12 = (_BYTE *)*((_QWORD *)a2 + 1);
            v10 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *((_DWORD *)this + 10) = *v11;
            v12 = v11 + 1;
            *((_QWORD *)a2 + 1) = v12;
          }
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 16)
          {
            v14 = v12 + 1;
            *((_QWORD *)a2 + 1) = v14;
            goto LABEL_32;
          }
        }
        else
        {
LABEL_13:
          if ((_DWORD)v7)
            v13 = (v7 & 7) == 4;
          else
            v13 = 1;
          if (v13)
          {
LABEL_48:
            v18 = 1;
            goto LABEL_50;
          }
LABEL_24:
          if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v20, v4))goto LABEL_49;
        }
      }
      if ((_DWORD)v7 != 16)
        goto LABEL_22;
      v14 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
LABEL_32:
      if ((unint64_t)v14 >= v10 || *v14 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 11))
          goto LABEL_49;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *((_DWORD *)this + 11) = *v14;
        v16 = v14 + 1;
        *((_QWORD *)a2 + 1) = v16;
      }
      v15 = *((_DWORD *)this + 8) | 2;
      *((_DWORD *)this + 8) = v15;
    }
    while ((unint64_t)v16 >= v10 || *v16 != 26);
    *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_40:
    *((_DWORD *)this + 8) = v15 | 4;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v17 = (std::string *)*((_QWORD *)this + 6);
    if (v17 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v17 = (std::string *)operator new();
      v17->__r_.__value_.__r.__words[0] = 0;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)this + 6) = v17;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v17))
      break;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v18 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_50;
    }
  }
LABEL_49:
  v18 = 0;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v20);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v21);
  return v18;
}

void sub_1B4B304AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t versioned_document::Version::SerializeWithCachedSizes(versioned_document::Version *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 10), a2, a4);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)this + 11), a2, a4);
  if ((*((_DWORD *)this + 8) & 4) != 0)
LABEL_4:
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, *((_QWORD *)this + 6), a2);
LABEL_5:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t versioned_document::Version::ByteSize(versioned_document::Version *this)
{
  int v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v4 >= 0x80)
    {
      v3 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      v2 = *((_DWORD *)this + 8);
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v5 >= 0x80)
  {
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v6 = 2;
  }
  v3 += v6;
LABEL_14:
  if ((v2 & 4) != 0)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = v8;
    v10 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = v10;
    if (v11 >= 0x80)
    {
      v12 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v11);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v10 = *(_QWORD *)(v7 + 8);
      v9 = *(_BYTE *)(v7 + 23);
    }
    else
    {
      v12 = 1;
    }
    if (v9 < 0)
      v8 = v10;
    v3 += v12 + v8 + 1;
  }
LABEL_24:
  if (*((char *)this + 31) < 0)
    v13 = *((_QWORD *)this + 2);
  else
    LODWORD(v13) = *((unsigned __int8 *)this + 31);
  result = (v3 + v13);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *versioned_document::Version::CheckTypeAndMergeFrom(versioned_document::Version *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;

  return versioned_document::Version::MergeFrom(this, lpsrc, v4);
}

uint64_t versioned_document::Version::IsInitialized(versioned_document::Version *this)
{
  return 1;
}

_QWORD *versioned_document::Version::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "versioned_document.Version");
}

uint64_t versioned_document::Document::GetCachedSize(versioned_document::Document *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t versioned_document::Version::GetCachedSize(versioned_document::Version *this)
{
  return *((unsigned int *)this + 9);
}

void sub_1B4B30714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

void sub_1B4B307F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B30934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 80, a4);
}

void versioned_document::Document::CheckTypeAndMergeFrom()
{
  __assert_rtn("down_cast", "common.h", 344, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void versioned_document::Version::SharedCtor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_10("GetEmptyStringAlreadyInited", "generated_message_util.h", a3, "empty_string_ != NULL");
}

uint64_t topotext::protobuf_ShutdownFile_topotext_2eproto(topotext *this)
{
  uint64_t result;

  if (topotext::String::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::String::default_instance_ + 8))(topotext::String::default_instance_);
  if (topotext::VectorTimestamp::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::VectorTimestamp::default_instance_ + 8))(topotext::VectorTimestamp::default_instance_);
  if (topotext::VectorTimestamp_Clock::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::VectorTimestamp_Clock::default_instance_ + 8))(topotext::VectorTimestamp_Clock::default_instance_);
  if (topotext::VectorTimestamp_Clock_ReplicaClock::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::VectorTimestamp_Clock_ReplicaClock::default_instance_ + 8))(topotext::VectorTimestamp_Clock_ReplicaClock::default_instance_);
  if (topotext::CharID::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::CharID::default_instance_ + 8))(topotext::CharID::default_instance_);
  if (topotext::Substring::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Substring::default_instance_ + 8))(topotext::Substring::default_instance_);
  if (topotext::Selection::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Selection::default_instance_ + 8))(topotext::Selection::default_instance_);
  if (topotext::Selection_Range::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Selection_Range::default_instance_ + 8))(topotext::Selection_Range::default_instance_);
  if (topotext::AttributeRun::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::AttributeRun::default_instance_ + 8))(topotext::AttributeRun::default_instance_);
  if (topotext::Font::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Font::default_instance_ + 8))(topotext::Font::default_instance_);
  if (topotext::ParagraphStyle::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::ParagraphStyle::default_instance_ + 8))(topotext::ParagraphStyle::default_instance_);
  if (topotext::HashtagInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::HashtagInfo::default_instance_ + 8))(topotext::HashtagInfo::default_instance_);
  if (topotext::AttachmentInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::AttachmentInfo::default_instance_ + 8))(topotext::AttachmentInfo::default_instance_);
  if (topotext::Attachment::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Attachment::default_instance_ + 8))(topotext::Attachment::default_instance_);
  if (topotext::Location::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Location::default_instance_ + 8))(topotext::Location::default_instance_);
  if (topotext::Media::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Media::default_instance_ + 8))(topotext::Media::default_instance_);
  if (topotext::PreviewImage::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::PreviewImage::default_instance_ + 8))(topotext::PreviewImage::default_instance_);
  if (topotext::Todo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)topotext::Todo::default_instance_ + 8))(topotext::Todo::default_instance_);
  result = topotext::Color::default_instance_;
  if (topotext::Color::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)topotext::Color::default_instance_ + 8))(topotext::Color::default_instance_);
  return result;
}

void topotext::protobuf_AddDesc_topotext_2eproto_impl(topotext *this, uint64_t a2, uint64_t a3, const char *a4)
{
  topotext::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  topotext::VectorTimestamp_Clock *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  topotext::Selection *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  topotext::AttributeRun *v18;
  uint64_t v19;
  uint64_t v20;
  topotext::Font *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  topotext::HashtagInfo *v25;
  uint64_t v26;
  uint64_t v27;
  topotext::AttachmentInfo *v28;
  uint64_t v29;
  uint64_t v30;
  topotext::Attachment *v31;
  uint64_t v32;
  uint64_t v33;
  topotext::Location *v34;
  uint64_t v35;
  uint64_t v36;
  topotext::Media *v37;
  uint64_t v38;
  uint64_t v39;
  topotext::PreviewImage *v40;
  uint64_t v41;
  uint64_t v42;
  topotext::Todo *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x1E9BF1, (google::protobuf::internal *)0x1E9BF0, "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", a4);
  v4 = (topotext::String *)operator new();
  topotext::String::String(v4, v5, v6);
  topotext::String::default_instance_ = (uint64_t)v4;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E67F6EF0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_DWORD *)(v7 + 56) = 0;
  topotext::VectorTimestamp::default_instance_ = v7;
  v8 = (topotext::VectorTimestamp_Clock *)operator new();
  topotext::VectorTimestamp_Clock::VectorTimestamp_Clock(v8, v9, v10);
  topotext::VectorTimestamp_Clock::default_instance_ = (uint64_t)v8;
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E67F6FE0;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_QWORD *)(v11 + 40) = 0;
  topotext::VectorTimestamp_Clock_ReplicaClock::default_instance_ = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_1E67F7238;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_QWORD *)(v12 + 40) = 0;
  topotext::CharID::default_instance_ = v12;
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E67F7418;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_QWORD *)(v13 + 53) = 0;
  topotext::Substring::default_instance_ = v13;
  v14 = (topotext::Selection *)operator new();
  topotext::Selection::Selection(v14, v15, v16);
  topotext::Selection::default_instance_ = (uint64_t)v14;
  v17 = operator new();
  *(_QWORD *)v17 = &off_1E67F6E78;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  topotext::Selection_Range::default_instance_ = v17;
  v18 = (topotext::AttributeRun *)operator new();
  topotext::AttributeRun::AttributeRun(v18, v19, v20);
  topotext::AttributeRun::default_instance_ = (uint64_t)v18;
  v21 = (topotext::Font *)operator new();
  topotext::Font::Font(v21, v22, v23);
  topotext::Font::default_instance_ = (uint64_t)v21;
  v24 = operator new();
  *(_QWORD *)v24 = &off_1E67F6E00;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  topotext::ParagraphStyle::default_instance_ = v24;
  v25 = (topotext::HashtagInfo *)operator new();
  topotext::HashtagInfo::HashtagInfo(v25, v26, v27);
  topotext::HashtagInfo::default_instance_ = (uint64_t)v25;
  v28 = (topotext::AttachmentInfo *)operator new();
  topotext::AttachmentInfo::AttachmentInfo(v28, v29, v30);
  topotext::AttachmentInfo::default_instance_ = (uint64_t)v28;
  v31 = (topotext::Attachment *)operator new();
  topotext::Attachment::Attachment(v31, v32, v33);
  topotext::Attachment::default_instance_ = (uint64_t)v31;
  v34 = (topotext::Location *)operator new();
  topotext::Location::Location(v34, v35, v36);
  topotext::Location::default_instance_ = (uint64_t)v34;
  v37 = (topotext::Media *)operator new();
  topotext::Media::Media(v37, v38, v39);
  topotext::Media::default_instance_ = (uint64_t)v37;
  v40 = (topotext::PreviewImage *)operator new();
  topotext::PreviewImage::PreviewImage(v40, v41, v42);
  topotext::PreviewImage::default_instance_ = (uint64_t)v40;
  v43 = (topotext::Todo *)operator new();
  topotext::Todo::Todo(v43, v44, v45);
  topotext::Todo::default_instance_ = (uint64_t)v43;
  v46 = operator new();
  *(_QWORD *)v46 = &off_1E67F7148;
  *(_OWORD *)(v46 + 8) = 0u;
  *(_OWORD *)(v46 + 24) = 0u;
  *(_OWORD *)(v46 + 40) = 0u;
  topotext::Color::default_instance_ = v46;
  *(_QWORD *)(topotext::String::default_instance_ + 72) = topotext::VectorTimestamp::default_instance_;
  v47 = topotext::Substring::default_instance_;
  v48 = topotext::CharID::default_instance_;
  *(_QWORD *)(topotext::Substring::default_instance_ + 40) = topotext::CharID::default_instance_;
  *(_QWORD *)(v47 + 48) = v48;
  v49 = topotext::Selection_Range::default_instance_;
  *(_QWORD *)(topotext::Selection_Range::default_instance_ + 40) = v48;
  *(_QWORD *)(v49 + 48) = v48;
  v50 = (_QWORD *)topotext::AttributeRun::default_instance_;
  v51 = topotext::ParagraphStyle::default_instance_;
  *(_QWORD *)(topotext::AttributeRun::default_instance_ + 40) = topotext::ParagraphStyle::default_instance_;
  v50[7] = topotext::Font::default_instance_;
  v52 = topotext::AttachmentInfo::default_instance_;
  v50[11] = v46;
  v50[12] = v52;
  v50[14] = topotext::HashtagInfo::default_instance_;
  *(_QWORD *)(v51 + 56) = topotext::Todo::default_instance_;
  v53 = topotext::Attachment::default_instance_;
  v54 = topotext::Media::default_instance_;
  *(_QWORD *)(topotext::Attachment::default_instance_ + 96) = topotext::Location::default_instance_;
  *(_QWORD *)(v53 + 104) = v54;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)topotext::protobuf_ShutdownFile_topotext_2eproto, v55);
}

void sub_1B4B30FE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x1B5E3DB94](v2, 0x10B3C40417120EDLL);
  _Unwind_Resume(a1);
}

double topotext::VectorTimestamp::VectorTimestamp(topotext::VectorTimestamp *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6EF0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

double topotext::VectorTimestamp_Clock_ReplicaClock::VectorTimestamp_Clock_ReplicaClock(topotext::VectorTimestamp_Clock_ReplicaClock *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6FE0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double topotext::CharID::CharID(topotext::CharID *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F7238;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  return result;
}

double topotext::Substring::Substring(topotext::Substring *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F7418;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)((char *)this + 53) = 0;
  return result;
}

double topotext::Selection_Range::Selection_Range(topotext::Selection_Range *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6E78;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double topotext::ParagraphStyle::ParagraphStyle(topotext::ParagraphStyle *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6E00;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

double topotext::Color::Color(topotext::Color *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F7148;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void topotext::protobuf_AddDesc_topotext_2eproto(topotext *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = topotext::protobuf_AddDesc_topotext_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = &off_1E67F6B80;
    v2[1] = topotext::protobuf_AddDesc_topotext_2eproto_impl;
    v3 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&topotext::protobuf_AddDesc_topotext_2eproto_once_, (uint64_t)v2);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_1B4B3128C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

topotext::String *topotext::String::String(topotext::String *this, uint64_t a2, uint64_t a3)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E67F72B0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  topotext::String::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3131C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  uint64_t *v6;

  v6 = v3;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v6);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v5);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::String::SharedCtor(topotext::String *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
  *((_QWORD *)this + 9) = 0;
}

void sub_1B4B313F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::String::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int32 v8;
  const std::string *v9;
  std::string *v10;
  int32x2_t *v11;
  int32x2_t *v12;
  const std::string::value_type *v13;
  int32x2_t *v14;
  int32x2_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 402);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>(this + 6, a2 + 6);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>(this + 10, a2 + 10);
  v5 = (uint64_t)google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>(this + 13, a2 + 13);
  LOBYTE(v8) = a2[4].i8[0];
  if ((_BYTE)v8)
  {
    if ((a2[4].i8[0] & 1) != 0)
    {
      v9 = (const std::string *)a2[5];
      this[4].i32[0] |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(v5, v6, v7);
      v10 = (std::string *)this[5];
      if (v10 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        this[5] = (int32x2_t)v10;
      }
      v5 = (uint64_t)std::string::operator=(v10, v9);
      v8 = a2[4].i32[0];
    }
    if ((v8 & 4) != 0)
    {
      this[4].i32[0] |= 4u;
      v11 = (int32x2_t *)this[9];
      if (!v11)
      {
        v5 = operator new();
        v11 = (int32x2_t *)v5;
        *(_QWORD *)v5 = &off_1E67F6EF0;
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_DWORD *)(v5 + 56) = 0;
        this[9] = (int32x2_t)v5;
      }
      v12 = (int32x2_t *)a2[9];
      if (!v12)
      {
        topotext::protobuf_AddDesc_topotext_2eproto((topotext *)v5);
        v12 = *(int32x2_t **)(topotext::String::default_instance_ + 72);
      }
      topotext::VectorTimestamp::MergeFrom(v11, v12);
    }
  }
  v15 = a2[1];
  v14 = a2 + 1;
  v13 = (const std::string::value_type *)v15;
  v16 = v14[2].i8[7];
  if (v16 >= 0)
    v17 = (const std::string::value_type *)v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = v14[2].u8[7];
  else
    v18 = (std::string::size_type)v14[1];
  return std::string::append((std::string *)&this[1], v17, v18);
}

void sub_1B4B315A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::String::~String(topotext::String *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F72B0;
  topotext::String::SharedDtor(this, a2, a3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 13);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 10);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 6);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::String::~String(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::String::SharedDtor(topotext::String *this, uint64_t a2, uint64_t a3)
{
  topotext::String *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 5);
  if (v4)
    v5 = v4 == google::protobuf::internal::empty_string_;
  else
    v5 = 1;
  if (!v5)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (topotext::String *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  if ((topotext::String *)topotext::String::default_instance_ != v3)
  {
    v6 = *((_QWORD *)v3 + 9);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t topotext::String::default_instance(topotext::String *this)
{
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  return topotext::String::default_instance_;
}

topotext::String *topotext::String::New(topotext::String *this)
{
  topotext::String *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::String *)operator new();
  topotext::String::String(v1, v2, v3);
  return v1;
}

void sub_1B4B31740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C406C843DA2);
  _Unwind_Resume(a1);
}

uint64_t topotext::String::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = this;
  v4 = *(_DWORD *)(this + 32);
  if ((v4 & 5) != 0)
  {
    if ((v4 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(this + 40);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      this = *(_QWORD *)(this + 72);
      if (this)
        this = topotext::VectorTimestamp::Clear(this);
    }
  }
  if (*(int *)(v3 + 56) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v3 + 56));
  }
  *(_DWORD *)(v3 + 56) = 0;
  if (*(int *)(v3 + 88) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v3 + 88));
  }
  *(_DWORD *)(v3 + 88) = 0;
  if (*(int *)(v3 + 112) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 104) + 8 * v10);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      ++v10;
    }
    while (v10 < *(int *)(v3 + 112));
  }
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t topotext::VectorTimestamp::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t topotext::String::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  _BYTE *v10;
  int v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  int32x2_t v36;
  topotext::AttributeRun *v37;
  int32x2_t v38;
  int32x2_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int32x2_t v49;
  int32x2_t *v50;
  int32x2_t v51;
  int32x2_t v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE v62[32];
  _QWORD v63[2];
  unsigned int v64;

  google::protobuf::io::StringOutputStream::StringOutputStream(v63, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v62, (google::protobuf::io::ZeroCopyOutputStream *)v63);
  while (1)
  {
LABEL_2:
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && *v5 >= 1)
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
LABEL_6:
      switch(v7 >> 3)
      {
        case 2u:
          if ((_DWORD)v7 != 18)
            goto LABEL_28;
          this[4].i32[0] |= 1u;
          if (!google::protobuf::internal::empty_string_)
            __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
          v9 = (std::string *)this[5];
          if (v9 == (std::string *)google::protobuf::internal::empty_string_)
          {
            v9 = (std::string *)operator new();
            v9->__r_.__value_.__r.__words[0] = 0;
            v9->__r_.__value_.__l.__size_ = 0;
            v9->__r_.__value_.__r.__words[2] = 0;
            this[5] = (int32x2_t)v9;
          }
          if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
            goto LABEL_103;
          v10 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 != 26)
            continue;
          break;
        case 3u:
          if ((_DWORD)v7 != 26)
            goto LABEL_28;
          goto LABEL_33;
        case 4u:
          if ((_DWORD)v7 == 34)
            goto LABEL_51;
          goto LABEL_28;
        case 5u:
          if ((_DWORD)v7 == 42)
            goto LABEL_65;
          goto LABEL_28;
        case 6u:
          if ((_DWORD)v7 == 50)
            goto LABEL_83;
LABEL_28:
          if ((_DWORD)v7 && (v7 & 7) != 4)
            goto LABEL_30;
          goto LABEL_104;
        default:
          goto LABEL_15;
      }
      while (1)
      {
        *((_QWORD *)a2 + 1) = v10 + 1;
LABEL_33:
        v12 = this[7].i32[1];
        v13 = this[7].i32[0];
        if ((int)v13 >= v12)
        {
          if (v12 == this[8].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[6], v12 + 1);
          v15 = operator new();
          *(_QWORD *)v15 = &off_1E67F7418;
          *(_QWORD *)(v15 + 64) = 0;
          *(_QWORD *)(v15 + 72) = 0;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_QWORD *)(v15 + 53) = 0;
          v16 = this[6];
          v17 = this[7];
          this[7] = vadd_s32(v17, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v16 + 8 * v17.i32[0]) = v15;
        }
        else
        {
          v14 = this[6];
          this[7].i32[0] = v13 + 1;
          v15 = *(_QWORD *)(*(_QWORD *)&v14 + 8 * v13);
        }
        v64 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v64))
            break;
        }
        else
        {
          v64 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20)
          break;
        v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, v64);
        if (!topotext::Substring::MergePartialFromCodedStream((topotext::Substring *)v15, a2)
          || !*((_BYTE *)a2 + 36))
        {
          break;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v21);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2))
          goto LABEL_2;
        v25 = *v10;
        if (v25 != 26)
        {
          if (v25 != 34)
            goto LABEL_2;
          *((_QWORD *)a2 + 1) = v10 + 1;
LABEL_51:
          this[4].i32[0] |= 4u;
          v26 = (uint64_t)this[9];
          if (!v26)
          {
            v26 = operator new();
            *(_QWORD *)v26 = &off_1E67F6EF0;
            *(_OWORD *)(v26 + 8) = 0u;
            *(_OWORD *)(v26 + 24) = 0u;
            *(_OWORD *)(v26 + 40) = 0u;
            *(_DWORD *)(v26 + 56) = 0;
            this[9] = (int32x2_t)v26;
          }
          v64 = 0;
          v27 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v64))
              break;
          }
          else
          {
            v64 = *v27;
            *((_QWORD *)a2 + 1) = v27 + 1;
          }
          v28 = *((_DWORD *)a2 + 14);
          v29 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v28 + 1;
          if (v28 < v29)
          {
            v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v64);
            if (topotext::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v26, a2))
            {
              if (*((_BYTE *)a2 + 36))
              {
                google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v30);
                v31 = *((_DWORD *)a2 + 14);
                v23 = __OFSUB__(v31, 1);
                v32 = v31 - 1;
                if (v32 < 0 == v23)
                  *((_DWORD *)a2 + 14) = v32;
                v33 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 42)
                  goto LABEL_2;
                while (1)
                {
                  *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_65:
                  v34 = this[11].i32[1];
                  v35 = this[11].i32[0];
                  if ((int)v35 >= v34)
                  {
                    if (v34 == this[12].i32[0])
                      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[10], v34 + 1);
                    v37 = google::protobuf::internal::GenericTypeHandler<topotext::AttributeRun>::New();
                    v38 = this[10];
                    v39 = this[11];
                    this[11] = vadd_s32(v39, (int32x2_t)0x100000001);
                    *(_QWORD *)(*(_QWORD *)&v38 + 8 * v39.i32[0]) = v37;
                  }
                  else
                  {
                    v36 = this[10];
                    this[11].i32[0] = v35 + 1;
                    v37 = *(topotext::AttributeRun **)(*(_QWORD *)&v36 + 8 * v35);
                  }
                  v64 = 0;
                  v40 = (char *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
                  {
                    if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v64))
                      goto LABEL_103;
                  }
                  else
                  {
                    v64 = *v40;
                    *((_QWORD *)a2 + 1) = v40 + 1;
                  }
                  v41 = *((_DWORD *)a2 + 14);
                  v42 = *((_DWORD *)a2 + 15);
                  *((_DWORD *)a2 + 14) = v41 + 1;
                  if (v41 >= v42)
                    break;
                  v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v64);
                  if (!topotext::AttributeRun::MergePartialFromCodedStream(v37, a2)
                    || !*((_BYTE *)a2 + 36))
                  {
                    break;
                  }
                  google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v43);
                  v44 = *((_DWORD *)a2 + 14);
                  v23 = __OFSUB__(v44, 1);
                  v45 = v44 - 1;
                  if (v45 < 0 == v23)
                    *((_DWORD *)a2 + 14) = v45;
                  v33 = (_BYTE *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v33 >= *((_QWORD *)a2 + 2))
                    goto LABEL_2;
                  v46 = *v33;
                  if (v46 != 42)
                  {
                    if (v46 != 50)
                      goto LABEL_2;
                    while (1)
                    {
                      *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_83:
                      v47 = this[14].i32[1];
                      v48 = this[14].i32[0];
                      if ((int)v48 >= v47)
                      {
                        if (v47 == this[15].i32[0])
                          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[13], v47 + 1);
                        v50 = (int32x2_t *)google::protobuf::internal::GenericTypeHandler<topotext::Attachment>::New();
                        v51 = this[13];
                        v52 = this[14];
                        this[14] = vadd_s32(v52, (int32x2_t)0x100000001);
                        *(_QWORD *)(*(_QWORD *)&v51 + 8 * v52.i32[0]) = v50;
                      }
                      else
                      {
                        v49 = this[13];
                        this[14].i32[0] = v48 + 1;
                        v50 = *(int32x2_t **)(*(_QWORD *)&v49 + 8 * v48);
                      }
                      v64 = 0;
                      v53 = (char *)*((_QWORD *)a2 + 1);
                      if ((unint64_t)v53 >= *((_QWORD *)a2 + 2) || *v53 < 0)
                      {
                        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v64))
                          goto LABEL_103;
                      }
                      else
                      {
                        v64 = *v53;
                        *((_QWORD *)a2 + 1) = v53 + 1;
                      }
                      v54 = *((_DWORD *)a2 + 14);
                      v55 = *((_DWORD *)a2 + 15);
                      *((_DWORD *)a2 + 14) = v54 + 1;
                      if (v54 >= v55)
                        goto LABEL_103;
                      v56 = google::protobuf::io::CodedInputStream::PushLimit(a2, v64);
                      if (!topotext::Attachment::MergePartialFromCodedStream(v50, a2)
                        || !*((_BYTE *)a2 + 36))
                      {
                        goto LABEL_103;
                      }
                      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v56);
                      v57 = *((_DWORD *)a2 + 14);
                      v23 = __OFSUB__(v57, 1);
                      v58 = v57 - 1;
                      if (v58 < 0 == v23)
                        *((_DWORD *)a2 + 14) = v58;
                      v33 = (_BYTE *)*((_QWORD *)a2 + 1);
                      v59 = (_BYTE *)*((_QWORD *)a2 + 2);
                      if (v33 >= v59 || *v33 != 50)
                      {
                        if (v33 == v59 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                        {
                          *((_DWORD *)a2 + 8) = 0;
                          v60 = 1;
                          *((_BYTE *)a2 + 36) = 1;
                          goto LABEL_105;
                        }
                        goto LABEL_2;
                      }
                    }
                  }
                }
              }
            }
          }
          break;
        }
      }
LABEL_103:
      v60 = 0;
      goto LABEL_105;
    }
    TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) != 0)
      goto LABEL_6;
LABEL_15:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
LABEL_30:
    if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v62, v4))goto LABEL_103;
  }
LABEL_104:
  v60 = 1;
LABEL_105:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v62);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v63);
  return v60;
}

void sub_1B4B31FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::String::SerializeWithCachedSizes(topotext::String *this, google::protobuf::io::CodedOutputStream *a2)
{
  topotext::String *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = this;
  if ((*((_BYTE *)this + 32) & 1) != 0)
    this = (topotext::String *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 5), a2);
  if (*((int *)v3 + 14) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>((uint64_t)v3 + 48, v4);
      this = (topotext::String *)google::protobuf::internal::WireFormatLite::WriteMessage(3, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)v3 + 14));
  }
  if ((*((_BYTE *)v3 + 32) & 4) != 0)
  {
    v6 = *((_QWORD *)v3 + 9);
    if (!v6)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v6 = *(_QWORD *)(topotext::String::default_instance_ + 72);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(4, v6, a2);
  }
  if (*((int *)v3 + 22) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>((uint64_t)v3 + 80, v7);
      google::protobuf::internal::WireFormatLite::WriteMessage(5, v8, a2);
      ++v7;
    }
    while (v7 < *((_DWORD *)v3 + 22));
  }
  if (*((int *)v3 + 28) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((uint64_t)v3 + 104, v9);
      google::protobuf::internal::WireFormatLite::WriteMessage(6, v10, a2);
      ++v9;
    }
    while (v9 < *((_DWORD *)v3 + 28));
  }
  if (*((char *)v3 + 31) < 0)
  {
    v11 = (char *)*((_QWORD *)v3 + 1);
    v12 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v11 = (char *)v3 + 8;
    LODWORD(v12) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v11, v12);
}

uint64_t topotext::String::ByteSize(topotext::String *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  topotext::VectorTimestamp *v11;
  google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  topotext::Substring *v18;
  google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  topotext::AttributeRun *v25;
  google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  topotext::Attachment *v32;
  google::protobuf::io::CodedOutputStream *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_21;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 8);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = v9 + v5;
  if ((v2 & 4) != 0)
  {
LABEL_15:
    v11 = (topotext::VectorTimestamp *)*((_QWORD *)this + 9);
    if (!v11)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v11 = *(topotext::VectorTimestamp **)(topotext::String::default_instance_ + 72);
    }
    v12 = (google::protobuf::io::CodedOutputStream *)topotext::VectorTimestamp::ByteSize(v11);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    else
      v14 = 1;
    v3 += v13 + v14 + 1;
  }
LABEL_21:
  v15 = *((_DWORD *)this + 14);
  v16 = v15 + v3;
  if (v15 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = (topotext::Substring *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>((uint64_t)this + 48, v17);
      v19 = (google::protobuf::io::CodedOutputStream *)topotext::Substring::ByteSize(v18);
      v20 = (int)v19;
      if (v19 >= 0x80)
        v21 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
      else
        v21 = 1;
      v16 += v20 + v21;
      ++v17;
    }
    while (v17 < *((_DWORD *)this + 14));
  }
  v22 = *((_DWORD *)this + 22);
  v23 = v22 + v16;
  if (v22 >= 1)
  {
    v24 = 0;
    do
    {
      v25 = (topotext::AttributeRun *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>((uint64_t)this + 80, v24);
      v26 = (google::protobuf::io::CodedOutputStream *)topotext::AttributeRun::ByteSize(v25);
      v27 = (int)v26;
      if (v26 >= 0x80)
        v28 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26);
      else
        v28 = 1;
      v23 += v27 + v28;
      ++v24;
    }
    while (v24 < *((_DWORD *)this + 22));
  }
  v29 = *((_DWORD *)this + 28);
  v30 = v29 + v23;
  if (v29 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = (topotext::Attachment *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((uint64_t)this + 104, v31);
      v33 = (google::protobuf::io::CodedOutputStream *)topotext::Attachment::ByteSize(v32);
      v34 = (int)v33;
      if (v33 >= 0x80)
        v35 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33);
      else
        v35 = 1;
      v30 += v34 + v35;
      ++v31;
    }
    while (v31 < *((_DWORD *)this + 28));
  }
  if (*((char *)this + 31) < 0)
    v36 = *((_QWORD *)this + 2);
  else
    LODWORD(v36) = *((unsigned __int8 *)this + 31);
  result = (v30 + v36);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::String::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::String::MergeFrom(this, lpsrc);
}

std::string *topotext::VectorTimestamp::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 1070);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>(this + 5, a2 + 5);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B32474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::String::IsInitialized(topotext::String *this)
{
  return 1;
}

_QWORD *topotext::String::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.String");
}

std::string *topotext::VectorTimestamp_Clock_ReplicaClock::MergeFrom(topotext::VectorTimestamp_Clock_ReplicaClock *this, const topotext::VectorTimestamp_Clock_ReplicaClock *a2)
{
  std::string *v4;
  int v5;
  int v6;
  int v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 646);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 10);
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 10) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_DWORD *)a2 + 11);
      *((_DWORD *)this + 8) |= 2u;
      *((_DWORD *)this + 11) = v7;
    }
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B32570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::VectorTimestamp_Clock_ReplicaClock::~VectorTimestamp_Clock_ReplicaClock(void **this)
{
  *this = &off_1E67F6FE0;
  topotext::protobuf_AddDesc_topotext_2eproto((topotext *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::VectorTimestamp_Clock_ReplicaClock::~VectorTimestamp_Clock_ReplicaClock(this);
  JUMPOUT(0x1B5E3DB94);
}

double topotext::VectorTimestamp_Clock_ReplicaClock::New(topotext::VectorTimestamp_Clock_ReplicaClock *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6FE0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::MergePartialFromCodedStream(topotext::VectorTimestamp_Clock_ReplicaClock *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v18, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17, (google::protobuf::io::ZeroCopyOutputStream *)v18);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 10))goto LABEL_38;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 10) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_28;
        }
      }
      else
      {
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_37:
          v15 = 1;
          goto LABEL_39;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v17, v4))goto LABEL_38;
      }
    }
    if ((_DWORD)v7 != 16)
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_37;
      goto LABEL_16;
    }
    v13 = (char *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_28:
    if ((unint64_t)v13 < v9 && (*v13 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 11) = *v13;
      v14 = (unsigned __int8 *)(v13 + 1);
      *((_QWORD *)a2 + 1) = v14;
      goto LABEL_33;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 11))
      break;
    v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_33:
    *((_DWORD *)this + 8) |= 2u;
    if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v15 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_39;
    }
  }
LABEL_38:
  v15 = 0;
LABEL_39:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v18);
  return v15;
}

void sub_1B4B32868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::SerializeWithCachedSizes(topotext::VectorTimestamp_Clock_ReplicaClock *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 10), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)this + 11), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::ByteSize(topotext::VectorTimestamp_Clock_ReplicaClock *this)
{
  char v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_BYTE *)this + 32);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_14;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v4 >= 0x80)
    {
      v3 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      if ((*((_DWORD *)this + 8) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v5 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  else
    v6 = 2;
  v3 += v6;
LABEL_14:
  if (*((char *)this + 31) < 0)
    v7 = *((_QWORD *)this + 2);
  else
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  result = (v3 + v7);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::VectorTimestamp_Clock_ReplicaClock::CheckTypeAndMergeFrom(topotext::VectorTimestamp_Clock_ReplicaClock *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::VectorTimestamp_Clock_ReplicaClock::MergeFrom(this, lpsrc);
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::IsInitialized(topotext::VectorTimestamp_Clock_ReplicaClock *this)
{
  return 1;
}

_QWORD *topotext::VectorTimestamp_Clock_ReplicaClock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.VectorTimestamp.Clock.ReplicaClock");
}

topotext::VectorTimestamp_Clock *topotext::VectorTimestamp_Clock::VectorTimestamp_Clock(topotext::VectorTimestamp_Clock *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6F68;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  topotext::VectorTimestamp_Clock::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B32A50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  uint64_t *v4;

  v4 = v2;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v4);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::VectorTimestamp_Clock::SharedCtor(topotext::VectorTimestamp_Clock *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
}

void sub_1B4B32B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::VectorTimestamp_Clock::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  const std::string::value_type *v10;
  int32x2_t *v11;
  int32x2_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 878);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>(this + 6, a2 + 6);
  if ((a2[4].i8[0] & 1) != 0)
  {
    v8 = (const std::string *)a2[5];
    this[4].i32[0] |= 1u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v9 = (std::string *)this[5];
    if (v9 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      this[5] = (int32x2_t)v9;
    }
    std::string::operator=(v9, v8);
  }
  v12 = a2[1];
  v11 = a2 + 1;
  v10 = (const std::string::value_type *)v12;
  v13 = v11[2].i8[7];
  if (v13 >= 0)
    v14 = (const std::string::value_type *)v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[2].u8[7];
  else
    v15 = (std::string::size_type)v11[1];
  return std::string::append((std::string *)&this[1], v14, v15);
}

void sub_1B4B32C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::VectorTimestamp_Clock::~VectorTimestamp_Clock(topotext::VectorTimestamp_Clock *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6F68;
  topotext::VectorTimestamp_Clock::SharedDtor(this, a2, a3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 6);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::VectorTimestamp_Clock::~VectorTimestamp_Clock(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::VectorTimestamp_Clock::SharedDtor(topotext::VectorTimestamp_Clock *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = v3 == google::protobuf::internal::empty_string_;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    this = (topotext::VectorTimestamp_Clock *)MEMORY[0x1B5E3DB94](v3, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
}

topotext::VectorTimestamp_Clock *topotext::VectorTimestamp_Clock::New(topotext::VectorTimestamp_Clock *this)
{
  topotext::VectorTimestamp_Clock *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::VectorTimestamp_Clock *)operator new();
  topotext::VectorTimestamp_Clock::VectorTimestamp_Clock(v1, v2, v3);
  return v1;
}

void sub_1B4B32D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40E3C8ABF7);
  _Unwind_Resume(a1);
}

uint64_t topotext::VectorTimestamp_Clock::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor(this, a2, a3);
    v4 = *(_QWORD *)(this + 40);
    if (v4 != google::protobuf::internal::empty_string_)
    {
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
      }
    }
  }
  if (*(int *)(this + 56) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v3 + 56));
  }
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t topotext::VectorTimestamp_Clock::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  _BYTE *v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  unsigned int v30;

  google::protobuf::io::StringOutputStream::StringOutputStream(v29, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28, (google::protobuf::io::ZeroCopyOutputStream *)v29);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_16;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
      {
        if ((_DWORD)v7 == 18)
          goto LABEL_27;
LABEL_23:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_48;
        goto LABEL_20;
      }
      if (v7 >> 3 == 1)
        break;
LABEL_16:
      if ((_DWORD)v7)
        v11 = (v7 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
LABEL_48:
        v26 = 1;
        goto LABEL_49;
      }
LABEL_20:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v28, v4))goto LABEL_47;
    }
    if ((_DWORD)v7 != 10)
      goto LABEL_23;
    this[4].i32[0] |= 1u;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v9 = (std::string *)this[5];
    if (v9 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__r.__words[0] = 0;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      this[5] = (int32x2_t)v9;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
      goto LABEL_47;
    v10 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
    {
      do
      {
        *((_QWORD *)a2 + 1) = v10 + 1;
LABEL_27:
        v12 = this[7].i32[1];
        v13 = this[7].i32[0];
        if ((int)v13 >= v12)
        {
          if (v12 == this[8].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[6], v12 + 1);
          v15 = operator new();
          *(_QWORD *)v15 = &off_1E67F6FE0;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_QWORD *)(v15 + 40) = 0;
          v16 = this[6];
          v17 = this[7];
          this[7] = vadd_s32(v17, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v16 + 8 * v17.i32[0]) = v15;
        }
        else
        {
          v14 = this[6];
          this[7].i32[0] = v13 + 1;
          v15 = *(_QWORD *)(*(_QWORD *)&v14 + 8 * v13);
        }
        v30 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
            goto LABEL_47;
        }
        else
        {
          v30 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20
          || (v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30),
              !topotext::VectorTimestamp_Clock_ReplicaClock::MergePartialFromCodedStream((topotext::VectorTimestamp_Clock_ReplicaClock *)v15, a2))|| !*((_BYTE *)a2 + 36))
        {
LABEL_47:
          v26 = 0;
          goto LABEL_49;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v21);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = (_BYTE *)*((_QWORD *)a2 + 2);
      }
      while (v10 < v25 && *v10 == 18);
      if (v10 == v25 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        break;
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  v26 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_49:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v29);
  return v26;
}

void sub_1B4B33184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::VectorTimestamp_Clock::SerializeWithCachedSizes(topotext::VectorTimestamp_Clock *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if ((*((_BYTE *)this + 32) & 1) != 0)
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1, *((_QWORD *)this + 5), a2);
  if (*((int *)this + 14) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>((uint64_t)this + 48, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(2, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t topotext::VectorTimestamp_Clock::ByteSize(topotext::VectorTimestamp_Clock *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  topotext::VectorTimestamp_Clock_ReplicaClock *v13;
  google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v7);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v6 = *(_QWORD *)(v3 + 8);
      v8 = v9 + 1;
      v5 = *(_BYTE *)(v3 + 23);
    }
    else
    {
      v8 = 2;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = v8 + v4;
  }
  else
  {
    v2 = 0;
  }
  v10 = *((_DWORD *)this + 14);
  v11 = v10 + v2;
  if (v10 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = (topotext::VectorTimestamp_Clock_ReplicaClock *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>((uint64_t)this + 48, v12);
      v14 = (google::protobuf::io::CodedOutputStream *)topotext::VectorTimestamp_Clock_ReplicaClock::ByteSize(v13);
      v15 = (int)v14;
      if (v14 >= 0x80)
        v16 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      else
        v16 = 1;
      v11 += v15 + v16;
      ++v12;
    }
    while (v12 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
    v17 = *((_QWORD *)this + 2);
  else
    LODWORD(v17) = *((unsigned __int8 *)this + 31);
  result = (v11 + v17);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::VectorTimestamp_Clock::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::VectorTimestamp_Clock::MergeFrom(this, lpsrc);
}

uint64_t topotext::VectorTimestamp_Clock::IsInitialized(topotext::VectorTimestamp_Clock *this)
{
  return 1;
}

_QWORD *topotext::VectorTimestamp_Clock::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.VectorTimestamp.Clock");
}

void topotext::VectorTimestamp::~VectorTimestamp(topotext::VectorTimestamp *this)
{
  *(_QWORD *)this = &off_1E67F6EF0;
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::VectorTimestamp::~VectorTimestamp(this);
  JUMPOUT(0x1B5E3DB94);
}

double topotext::VectorTimestamp::New(topotext::VectorTimestamp *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6EF0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t topotext::VectorTimestamp::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t *v12;
  int32x2_t v13;
  int32x2_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 != 10)
        break;
      while (1)
      {
        v9 = this[6].i32[1];
        v10 = this[6].i32[0];
        if ((int)v10 >= v9)
        {
          if (v9 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v9 + 1);
          v12 = (int32x2_t *)google::protobuf::internal::GenericTypeHandler<topotext::VectorTimestamp_Clock>::New();
          v13 = this[5];
          v14 = this[6];
          this[6] = vadd_s32(v14, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
        }
        else
        {
          v11 = this[5];
          this[6].i32[0] = v10 + 1;
          v12 = *(int32x2_t **)(*(_QWORD *)&v11 + 8 * v10);
        }
        v29 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_37;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17
          || (v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !topotext::VectorTimestamp_Clock::MergePartialFromCodedStream(v12, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_37:
          v25 = 0;
          goto LABEL_38;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v18);
        v19 = *((_DWORD *)a2 + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)a2 + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v22 >= v23 || *v22 != 10)
          break;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      if (v22 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v25 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
    if ((_DWORD)v7)
      v24 = (v7 & 7) == 4;
    else
      v24 = 1;
    v25 = v24;
  }
  while (!v24
       && google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4));
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B336B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::VectorTimestamp::SerializeWithCachedSizes(topotext::VectorTimestamp *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t topotext::VectorTimestamp::ByteSize(topotext::VectorTimestamp *this)
{
  int v2;
  int v3;
  topotext::VectorTimestamp_Clock *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (topotext::VectorTimestamp_Clock *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = (google::protobuf::io::CodedOutputStream *)topotext::VectorTimestamp_Clock::ByteSize(v4);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v2 += v6 + v7;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v8 = *((_QWORD *)this + 2);
  else
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  result = (v2 + v8);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::VectorTimestamp::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::VectorTimestamp::MergeFrom(this, lpsrc);
}

uint64_t topotext::VectorTimestamp::IsInitialized(topotext::VectorTimestamp *this)
{
  return 1;
}

_QWORD *topotext::VectorTimestamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.VectorTimestamp");
}

std::string *topotext::CharID::MergeFrom(topotext::CharID *this, const topotext::CharID *a2)
{
  std::string *v4;
  int v5;
  int v6;
  int v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 1300);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 10);
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 10) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_DWORD *)a2 + 11);
      *((_DWORD *)this + 8) |= 2u;
      *((_DWORD *)this + 11) = v7;
    }
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B33930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::CharID::~CharID(void **this)
{
  *this = &off_1E67F7238;
  topotext::protobuf_AddDesc_topotext_2eproto((topotext *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::CharID::~CharID(this);
  JUMPOUT(0x1B5E3DB94);
}

double topotext::CharID::New(topotext::CharID *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F7238;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t topotext::CharID::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::CharID::MergePartialFromCodedStream(topotext::CharID *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v18, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17, (google::protobuf::io::ZeroCopyOutputStream *)v18);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 10))goto LABEL_38;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 10) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_28;
        }
      }
      else
      {
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_37:
          v15 = 1;
          goto LABEL_39;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v17, v4))goto LABEL_38;
      }
    }
    if ((_DWORD)v7 != 16)
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_37;
      goto LABEL_16;
    }
    v13 = (char *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_28:
    if ((unint64_t)v13 < v9 && (*v13 & 0x80000000) == 0)
    {
      *((_DWORD *)this + 11) = *v13;
      v14 = (unsigned __int8 *)(v13 + 1);
      *((_QWORD *)a2 + 1) = v14;
      goto LABEL_33;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 11))
      break;
    v14 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_33:
    *((_DWORD *)this + 8) |= 2u;
    if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v15 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_39;
    }
  }
LABEL_38:
  v15 = 0;
LABEL_39:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v18);
  return v15;
}

void sub_1B4B33C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::CharID::SerializeWithCachedSizes(topotext::CharID *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 10), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)this + 11), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::CharID::ByteSize(topotext::CharID *this)
{
  char v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_BYTE *)this + 32);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_14;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
    if (v4 >= 0x80)
    {
      v3 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      if ((*((_DWORD *)this + 8) & 2) == 0)
        goto LABEL_14;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_14;
  }
  v5 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v5 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  else
    v6 = 2;
  v3 += v6;
LABEL_14:
  if (*((char *)this + 31) < 0)
    v7 = *((_QWORD *)this + 2);
  else
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  result = (v3 + v7);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::CharID::CheckTypeAndMergeFrom(topotext::CharID *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::CharID::MergeFrom(this, lpsrc);
}

uint64_t topotext::CharID::IsInitialized(topotext::CharID *this)
{
  return 1;
}

_QWORD *topotext::CharID::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.CharID");
}

std::string *topotext::Substring::MergeFrom(topotext::Substring *this, const topotext::Substring *a2)
{
  topotext::Substring *v3;
  std::string *v4;
  std::string *v5;
  int v6;
  int v7;
  char v8;
  const std::string::value_type *v9;
  char *v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  topotext::CharID *v16;
  const topotext::CharID *v17;
  int v18;
  topotext::CharID *v19;
  const topotext::CharID *v20;
  char v21;
  std::string v22[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 1651);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v21, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 729);
    v5 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v21, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v6 = *((_DWORD *)a2 + 18);
  if (v6)
  {
    google::protobuf::RepeatedField<unsigned int>::Reserve((_DWORD *)v3 + 16, *((_DWORD *)v3 + 18) + v6);
    this = (topotext::Substring *)memcpy((void *)(*((_QWORD *)v3 + 8) + 4 * *((int *)v3 + 18)), *((const void **)a2 + 8), 4 * *((int *)a2 + 18));
    *((_DWORD *)v3 + 18) += *((_DWORD *)a2 + 18);
  }
  LOBYTE(v7) = *((_BYTE *)a2 + 32);
  if (!(_BYTE)v7)
    goto LABEL_11;
  if ((*((_BYTE *)a2 + 32) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 32) & 2) == 0)
      goto LABEL_8;
LABEL_23:
    v18 = *((_DWORD *)a2 + 14);
    *((_DWORD *)v3 + 8) |= 2u;
    *((_DWORD *)v3 + 14) = v18;
    v7 = *((_DWORD *)a2 + 8);
    if ((v7 & 4) == 0)
    {
LABEL_9:
      if ((v7 & 8) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_24;
  }
  *((_DWORD *)v3 + 8) |= 1u;
  v16 = (topotext::CharID *)*((_QWORD *)v3 + 5);
  if (!v16)
  {
    this = (topotext::Substring *)operator new();
    v16 = this;
    *(_QWORD *)this = &off_1E67F7238;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)v3 + 5) = this;
  }
  v17 = (const topotext::CharID *)*((_QWORD *)a2 + 5);
  if (!v17)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v17 = *(const topotext::CharID **)(topotext::Substring::default_instance_ + 40);
  }
  this = (topotext::Substring *)topotext::CharID::MergeFrom(v16, v17);
  v7 = *((_DWORD *)a2 + 8);
  if ((v7 & 2) != 0)
    goto LABEL_23;
LABEL_8:
  if ((v7 & 4) == 0)
    goto LABEL_9;
LABEL_24:
  *((_DWORD *)v3 + 8) |= 4u;
  v19 = (topotext::CharID *)*((_QWORD *)v3 + 6);
  if (!v19)
  {
    this = (topotext::Substring *)operator new();
    v19 = this;
    *(_QWORD *)this = &off_1E67F7238;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)v3 + 6) = this;
  }
  v20 = (const topotext::CharID *)*((_QWORD *)a2 + 6);
  if (!v20)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v20 = *(const topotext::CharID **)(topotext::Substring::default_instance_ + 48);
  }
  topotext::CharID::MergeFrom(v19, v20);
  if ((*((_DWORD *)a2 + 8) & 8) != 0)
  {
LABEL_10:
    v8 = *((_BYTE *)a2 + 60);
    *((_DWORD *)v3 + 8) |= 8u;
    *((_BYTE *)v3 + 60) = v8;
  }
LABEL_11:
  v11 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v10 = (char *)a2 + 8;
  v9 = v11;
  v12 = v10[23];
  if (v12 >= 0)
    v13 = v10;
  else
    v13 = v9;
  if (v12 >= 0)
    v14 = v10[23];
  else
    v14 = *((_QWORD *)v10 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v13, v14);
}

void sub_1B4B34010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::Substring::~Substring(void **this)
{
  void *v2;

  *this = &off_1E67F7418;
  topotext::Substring::SharedDtor((topotext::Substring *)this);
  v2 = this[8];
  if (v2)
    MEMORY[0x1B5E3DB7C](v2, 0x1000C8052888210);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Substring::~Substring(this);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::Substring::SharedDtor(topotext::Substring *this)
{
  uint64_t v2;
  uint64_t v3;

  topotext::protobuf_AddDesc_topotext_2eproto(this);
  if ((topotext::Substring *)topotext::Substring::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t topotext::Substring::default_instance(topotext::Substring *this)
{
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  return topotext::Substring::default_instance_;
}

double topotext::Substring::New(topotext::Substring *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F7418;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 53) = 0;
  return result;
}

uint64_t topotext::Substring::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 32);
  if ((v1 & 0xF) != 0)
  {
    *(_BYTE *)(this + 60) = 0;
    *(_DWORD *)(this + 56) = 0;
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 40);
      if (v2)
      {
        *(_QWORD *)(v2 + 40) = 0;
        *(_DWORD *)(v2 + 32) = 0;
        if (*(char *)(v2 + 31) < 0)
        {
          **(_BYTE **)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v2 + 8) = 0;
          *(_BYTE *)(v2 + 31) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      v3 = *(_QWORD *)(this + 48);
      if (v3)
      {
        *(_QWORD *)(v3 + 40) = 0;
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::Substring::MergePartialFromCodedStream(topotext::Substring *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  std::string::size_type v34;
  char *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  _BYTE *v41;
  unint64_t v42;
  int v43;
  std::string *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v49[32];
  _QWORD v50[2];
  unsigned int v51;
  char v52;
  std::string v53[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v50, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v49, (google::protobuf::io::ZeroCopyOutputStream *)v50);
  while (2)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
      {
LABEL_13:
        if ((_DWORD)v7)
          v11 = (v7 & 7) == 4;
        else
          v11 = 1;
        if (v11)
          goto LABEL_97;
        goto LABEL_29;
      }
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 10)
          goto LABEL_27;
        *((_DWORD *)this + 8) |= 1u;
        v9 = *((_QWORD *)this + 5);
        if (!v9)
        {
          v9 = operator new();
          *(_QWORD *)v9 = &off_1E67F7238;
          *(_OWORD *)(v9 + 8) = 0u;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_QWORD *)(v9 + 40) = 0;
          *((_QWORD *)this + 5) = v9;
        }
        LODWORD(v53[0].__r_.__value_.__l.__data_) = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)v53))
            goto LABEL_96;
        }
        else
        {
          LODWORD(v53[0].__r_.__value_.__l.__data_) = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        v18 = *((_DWORD *)a2 + 14);
        v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 >= v19)
          goto LABEL_96;
        v20 = google::protobuf::io::CodedInputStream::PushLimit(a2, (int)v53[0].__r_.__value_.__l.__data_);
        if (!topotext::CharID::MergePartialFromCodedStream((topotext::CharID *)v9, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_96;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v20);
        v21 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
        if (v23 < 0 == v22)
          *((_DWORD *)a2 + 14) = v23;
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v12 || *v24 != 16)
          continue;
        v13 = v24 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_43:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 14))goto LABEL_96;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 14) = *v13;
          v25 = v13 + 1;
          *((_QWORD *)a2 + 1) = v25;
        }
        v14 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v14;
        if ((unint64_t)v25 >= v12 || *v25 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v25 + 1;
LABEL_51:
        *((_DWORD *)this + 8) = v14 | 4;
        v26 = *((_QWORD *)this + 6);
        if (!v26)
        {
          v26 = operator new();
          *(_QWORD *)v26 = &off_1E67F7238;
          *(_OWORD *)(v26 + 8) = 0u;
          *(_OWORD *)(v26 + 24) = 0u;
          *(_QWORD *)(v26 + 40) = 0;
          *((_QWORD *)this + 6) = v26;
        }
        LODWORD(v53[0].__r_.__value_.__l.__data_) = 0;
        v27 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)v53))
            goto LABEL_96;
        }
        else
        {
          LODWORD(v53[0].__r_.__value_.__l.__data_) = *v27;
          *((_QWORD *)a2 + 1) = v27 + 1;
        }
        v28 = *((_DWORD *)a2 + 14);
        v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 >= v29)
          goto LABEL_96;
        v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, (int)v53[0].__r_.__value_.__l.__data_);
        if (!topotext::CharID::MergePartialFromCodedStream((topotext::CharID *)v26, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_96;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v30);
        v31 = *((_DWORD *)a2 + 14);
        v22 = __OFSUB__(v31, 1);
        v32 = v31 - 1;
        if (v32 < 0 == v22)
          *((_DWORD *)a2 + 14) = v32;
        v33 = (char *)*((_QWORD *)a2 + 1);
        v15 = (char *)*((_QWORD *)a2 + 2);
        if (v33 >= v15 || *v33 != 32)
          continue;
        v16 = v33 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_65:
        v53[0].__r_.__value_.__r.__words[0] = 0;
        if (v16 >= v15 || *v16 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v53))
            goto LABEL_96;
          v34 = v53[0].__r_.__value_.__r.__words[0];
          v35 = (char *)*((_QWORD *)a2 + 1);
          v15 = (char *)*((_QWORD *)a2 + 2);
        }
        else
        {
          v34 = *v16;
          v35 = v16 + 1;
          *((_QWORD *)a2 + 1) = v35;
        }
        *((_BYTE *)this + 60) = v34 != 0;
        *((_DWORD *)this + 8) |= 8u;
        if (v35 < v15 && *v35 == 40)
          goto LABEL_72;
        continue;
      case 2u:
        if ((_DWORD)v7 != 16)
          goto LABEL_27;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_43;
      case 3u:
        if ((_DWORD)v7 != 26)
          goto LABEL_27;
        v14 = *((_DWORD *)this + 8);
        goto LABEL_51;
      case 4u:
        if ((_DWORD)v7 != 32)
          goto LABEL_27;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = (char *)*((_QWORD *)a2 + 2);
        goto LABEL_65;
      case 5u:
        if ((_DWORD)v7 != 40)
        {
          if ((_DWORD)v7 == 42)
          {
            if (!google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<unsigned int,(google::protobuf::internal::WireFormatLite::FieldType)13>(a2, (_DWORD *)this + 16))goto LABEL_96;
            goto LABEL_90;
          }
LABEL_27:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
          {
LABEL_97:
            v47 = 1;
            goto LABEL_98;
          }
LABEL_29:
          if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v49, v4))goto LABEL_96;
          continue;
        }
        v17 = (char *)*((_QWORD *)a2 + 1);
        v15 = (char *)*((_QWORD *)a2 + 2);
        while (1)
        {
          v51 = 0;
          if (v17 >= v15 || *v17 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v51))
            {
LABEL_96:
              v47 = 0;
              goto LABEL_98;
            }
          }
          else
          {
            v51 = *v17;
            *((_QWORD *)a2 + 1) = v17 + 1;
          }
          v36 = *((_DWORD *)this + 18);
          if (v36 == *((_DWORD *)this + 19))
          {
            google::protobuf::RepeatedField<unsigned int>::Reserve((_DWORD *)this + 16, v36 + 1);
            v36 = *((_DWORD *)this + 18);
          }
          v37 = v51;
          v38 = *((_QWORD *)this + 8);
          *((_DWORD *)this + 18) = v36 + 1;
          *(_DWORD *)(v38 + 4 * v36) = v37;
          v39 = *((_DWORD *)this + 19) - *((_DWORD *)this + 18);
          if (v39 >= 1)
          {
            v40 = v39 + 1;
            do
            {
              v41 = (_BYTE *)*((_QWORD *)a2 + 1);
              v42 = *((_QWORD *)a2 + 2);
              if ((unint64_t)v41 >= v42 || *v41 != 40)
                break;
              *((_QWORD *)a2 + 1) = v41 + 1;
              if ((unint64_t)(v41 + 1) >= v42 || (char)v41[1] < 0)
              {
                if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v51))
                  goto LABEL_96;
              }
              else
              {
                v51 = v41[1];
                *((_QWORD *)a2 + 1) = v41 + 2;
              }
              v43 = *((_DWORD *)this + 18);
              if (v43 >= *((_DWORD *)this + 19))
              {
                google::protobuf::internal::LogMessage::LogMessage((uint64_t)v53, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 642);
                v44 = google::protobuf::internal::LogMessage::operator<<(v53, "CHECK failed: (size()) < (Capacity()): ");
                google::protobuf::internal::LogFinisher::operator=((uint64_t)&v52, (google::protobuf::internal::LogMessage *)v44);
                google::protobuf::internal::LogMessage::~LogMessage((void **)&v53[0].__r_.__value_.__l.__data_);
                v43 = *((_DWORD *)this + 18);
              }
              v45 = v51;
              v46 = *((_QWORD *)this + 8);
              *((_DWORD *)this + 18) = v43 + 1;
              *(_DWORD *)(v46 + 4 * v43) = v45;
              --v40;
            }
            while (v40 > 1);
          }
LABEL_90:
          v35 = (char *)*((_QWORD *)a2 + 1);
          v15 = (char *)*((_QWORD *)a2 + 2);
          if (v35 >= v15 || *v35 != 40)
            break;
LABEL_72:
          v17 = v35 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        if (v35 != v15 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v47 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_98:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v49);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v50);
        return v47;
      default:
        goto LABEL_13;
    }
  }
}

void sub_1B4B34828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<unsigned int,(google::protobuf::internal::WireFormatLite::FieldType)13>(google::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  char *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v13 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v13);
    if (!(_DWORD)result)
      return result;
    v5 = v13;
  }
  else
  {
    v5 = *v4;
    v13 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = google::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)google::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v12 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        result = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        v12 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v9 = a2[2];
      if (v9 == a2[3])
      {
        google::protobuf::RepeatedField<unsigned int>::Reserve(a2, v9 + 1);
        v9 = a2[2];
      }
      v10 = v12;
      v11 = *(_QWORD *)a2;
      a2[2] = v9 + 1;
      *(_DWORD *)(v11 + 4 * v9) = v10;
    }
    while ((int)google::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  google::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v7);
  return 1;
}

uint64_t topotext::Substring::SerializeWithCachedSizes(topotext::Substring *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  topotext::Substring *v5;
  int v6;
  int v7;
  unsigned int *v8;
  google::protobuf::io::CodedOutputStream *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    v12 = *((_QWORD *)this + 5);
    if (!v12)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v12 = *(_QWORD *)(topotext::Substring::default_instance_ + 40);
    }
    this = (topotext::Substring *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v12, a2);
    v6 = *((_DWORD *)v5 + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (topotext::Substring *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)v5 + 14), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_15:
  v13 = *((_QWORD *)v5 + 6);
  if (!v13)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v13 = *(_QWORD *)(topotext::Substring::default_instance_ + 48);
  }
  google::protobuf::internal::WireFormatLite::WriteMessage(3, v13, a2);
  if ((*((_DWORD *)v5 + 8) & 8) != 0)
LABEL_5:
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)4, *((unsigned __int8 *)v5 + 60), a2, a4);
LABEL_6:
  if (*((int *)v5 + 18) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = (unsigned int *)google::protobuf::RepeatedField<unsigned int>::Get((uint64_t)v5 + 64, v7);
      google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)5, *v8, a2, v9);
      ++v7;
    }
    while (v7 < *((_DWORD *)v5 + 18));
  }
  if (*((char *)v5 + 31) < 0)
  {
    v10 = (char *)*((_QWORD *)v5 + 1);
    v11 = *((_QWORD *)v5 + 2);
  }
  else
  {
    v10 = (char *)v5 + 8;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v10, v11);
}

uint64_t topotext::Substring::ByteSize(topotext::Substring *this)
{
  int v2;
  int v3;
  int v4;
  topotext::CharID *v5;
  google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  google::protobuf::io::CodedOutputStream *v9;
  int v10;
  topotext::CharID *v11;
  google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  google::protobuf::io::CodedOutputStream *v18;
  int v19;
  uint64_t v20;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_26;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v5 = (topotext::CharID *)*((_QWORD *)this + 5);
    if (!v5)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v5 = *(topotext::CharID **)(topotext::Substring::default_instance_ + 40);
    }
    v6 = (google::protobuf::io::CodedOutputStream *)topotext::CharID::ByteSize(v5);
    v7 = (int)v6;
    if (v6 >= 0x80)
      v8 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    else
      v8 = 1;
    v3 = v7 + v8 + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_12:
    v9 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
    if (v9 >= 0x80)
    {
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v10 = 2;
    }
    v3 += v10;
  }
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v11 = (topotext::CharID *)*((_QWORD *)this + 6);
    if (!v11)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v11 = *(topotext::CharID **)(topotext::Substring::default_instance_ + 48);
    }
    v12 = (google::protobuf::io::CodedOutputStream *)topotext::CharID::ByteSize(v11);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12);
    else
      v14 = 1;
    v3 += v13 + v14 + 1;
    v2 = *((_DWORD *)this + 8);
  }
  if ((v2 & 8) != 0)
    v4 = v3 + 2;
  else
    v4 = v3;
LABEL_26:
  v15 = *((_DWORD *)this + 18);
  if (v15 < 1)
  {
    v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (google::protobuf::io::CodedOutputStream *)*(unsigned int *)google::protobuf::RepeatedField<unsigned int>::Get((uint64_t)this + 64, v16);
      if (v18 >= 0x80)
        v19 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
      else
        v19 = 1;
      v17 += v19;
      ++v16;
      v15 = *((_DWORD *)this + 18);
    }
    while (v16 < v15);
  }
  if (*((char *)this + 31) < 0)
    v20 = *((_QWORD *)this + 2);
  else
    LODWORD(v20) = *((unsigned __int8 *)this + 31);
  result = (v17 + v4 + v15 + v20);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Substring::CheckTypeAndMergeFrom(topotext::Substring *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Substring::MergeFrom(this, lpsrc);
}

uint64_t topotext::Substring::IsInitialized(topotext::Substring *this)
{
  return 1;
}

_QWORD *topotext::Substring::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Substring");
}

BOOL topotext::Selection_Affinity_IsValid(topotext *this)
{
  return this < 2;
}

std::string *topotext::Selection_Range::MergeFrom(topotext::Selection_Range *this, const topotext::Selection_Range *a2)
{
  topotext::Selection_Range *v3;
  std::string *v4;
  int v5;
  topotext::CharID *v6;
  const topotext::CharID *v7;
  topotext::CharID *v8;
  const topotext::CharID *v9;
  const std::string::value_type *v10;
  char *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 1921);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (topotext::CharID *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        this = (topotext::Selection_Range *)operator new();
        v6 = this;
        *(_QWORD *)this = &off_1E67F7238;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *((_QWORD *)this + 5) = 0;
        *((_QWORD *)v3 + 5) = this;
      }
      v7 = (const topotext::CharID *)*((_QWORD *)a2 + 5);
      if (!v7)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v7 = *(const topotext::CharID **)(topotext::Selection_Range::default_instance_ + 40);
      }
      this = (topotext::Selection_Range *)topotext::CharID::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v8 = (topotext::CharID *)*((_QWORD *)v3 + 6);
      if (!v8)
      {
        this = (topotext::Selection_Range *)operator new();
        v8 = this;
        *(_QWORD *)this = &off_1E67F7238;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *((_QWORD *)this + 5) = 0;
        *((_QWORD *)v3 + 6) = this;
      }
      v9 = (const topotext::CharID *)*((_QWORD *)a2 + 6);
      if (!v9)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v9 = *(const topotext::CharID **)(topotext::Selection_Range::default_instance_ + 48);
      }
      topotext::CharID::MergeFrom(v8, v9);
    }
  }
  v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v14, v15);
}

void sub_1B4B34E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::Selection_Range::~Selection_Range(void **this)
{
  *this = &off_1E67F6E78;
  topotext::Selection_Range::SharedDtor((topotext::Selection_Range *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Selection_Range::~Selection_Range(this);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::Selection_Range::SharedDtor(topotext::Selection_Range *this)
{
  uint64_t v2;
  uint64_t v3;

  topotext::protobuf_AddDesc_topotext_2eproto(this);
  if ((topotext::Selection_Range *)topotext::Selection_Range::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t topotext::Selection_Range::default_instance(topotext::Selection_Range *this)
{
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  return topotext::Selection_Range::default_instance_;
}

double topotext::Selection_Range::New(topotext::Selection_Range *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6E78;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t topotext::Selection_Range::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 32);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 40);
      if (v2)
      {
        *(_QWORD *)(v2 + 40) = 0;
        *(_DWORD *)(v2 + 32) = 0;
        if (*(char *)(v2 + 31) < 0)
        {
          **(_BYTE **)(v2 + 8) = 0;
          *(_QWORD *)(v2 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v2 + 8) = 0;
          *(_BYTE *)(v2 + 31) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 48);
      if (v3)
      {
        *(_QWORD *)(v3 + 40) = 0;
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::Selection_Range::MergePartialFromCodedStream(topotext::Selection_Range *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  uint64_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  unsigned int v30;

  google::protobuf::io::StringOutputStream::StringOutputStream(v29, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28, (google::protobuf::io::ZeroCopyOutputStream *)v29);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
        goto LABEL_33;
      goto LABEL_21;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      v9 = *((_QWORD *)this + 5);
      if (!v9)
      {
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E67F7238;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_QWORD *)(v9 + 40) = 0;
        *((_QWORD *)this + 5) = v9;
      }
      v30 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
          goto LABEL_48;
      }
      else
      {
        v30 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v12 = *((_DWORD *)a2 + 14);
      v13 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v12 + 1;
      if (v12 >= v13)
        goto LABEL_48;
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
      if (!topotext::CharID::MergePartialFromCodedStream((topotext::CharID *)v9, a2)
        || !*((_BYTE *)a2 + 36))
      {
        goto LABEL_48;
      }
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
      v15 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v17 < 0 == v16)
        *((_DWORD *)a2 + 14) = v17;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
      {
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_33:
        *((_DWORD *)this + 8) |= 2u;
        v19 = *((_QWORD *)this + 6);
        if (!v19)
        {
          v19 = operator new();
          *(_QWORD *)v19 = &off_1E67F7238;
          *(_OWORD *)(v19 + 8) = 0u;
          *(_OWORD *)(v19 + 24) = 0u;
          *(_QWORD *)(v19 + 40) = 0;
          *((_QWORD *)this + 6) = v19;
        }
        v30 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
            goto LABEL_48;
        }
        else
        {
          v30 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22
          || (v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30),
              !topotext::CharID::MergePartialFromCodedStream((topotext::CharID *)v19, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_48:
          v26 = 0;
          goto LABEL_50;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
        v24 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v16)
          *((_DWORD *)a2 + 14) = v25;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v26 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_21:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_49;
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v28, v4))goto LABEL_48;
    }
  }
  if ((_DWORD)v7)
    v11 = (v7 & 7) == 4;
  else
    v11 = 1;
  if (!v11)
    goto LABEL_18;
LABEL_49:
  v26 = 1;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v29);
  return v26;
}

void sub_1B4B3533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Selection_Range::SerializeWithCachedSizes(topotext::Selection_Range *this, google::protobuf::io::CodedOutputStream *a2)
{
  topotext::Selection_Range *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v5 = *(_QWORD *)(topotext::Selection_Range::default_instance_ + 40);
    }
    this = (topotext::Selection_Range *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v6 = *(_QWORD *)(topotext::Selection_Range::default_instance_ + 48);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v7 = (char *)v3 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::Selection_Range::ByteSize(topotext::Selection_Range *this)
{
  int v2;
  topotext::CharID *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  topotext::CharID *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (topotext::CharID *)*((_QWORD *)this + 5);
  if (!v3)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(0);
    v3 = *(topotext::CharID **)(topotext::Selection_Range::default_instance_ + 40);
  }
  v4 = (google::protobuf::io::CodedOutputStream *)topotext::CharID::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 8) & 2) != 0)
  {
LABEL_12:
    v7 = (topotext::CharID *)*((_QWORD *)this + 6);
    if (!v7)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v7 = *(topotext::CharID **)(topotext::Selection_Range::default_instance_ + 48);
    }
    v8 = (google::protobuf::io::CodedOutputStream *)topotext::CharID::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Selection_Range::CheckTypeAndMergeFrom(topotext::Selection_Range *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Selection_Range::MergeFrom(this, lpsrc);
}

uint64_t topotext::Selection_Range::IsInitialized(topotext::Selection_Range *this)
{
  return 1;
}

_QWORD *topotext::Selection_Range::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Selection.Range");
}

topotext::Selection *topotext::Selection::Selection(topotext::Selection *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F73A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  topotext::Selection::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B355A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  int *v3;
  void **v4;
  uint64_t *v5;

  v5 = v2;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v4);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::Selection::SharedCtor(topotext::Selection *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v5[0] = &off_1E67F6B80;
    v5[1] = google::protobuf::internal::InitEmptyString;
    v6 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v5);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v5);
  }
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B35674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::Selection::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  unsigned int v5;
  const std::string::value_type *v6;
  int32x2_t *v7;
  int32x2_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 2183);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 5, a2 + 5);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>(this + 8, a2 + 8);
  if ((a2[4].i8[0] & 4) != 0)
  {
    v5 = a2[11].u32[0];
    if (v5 >= 2)
      topotext::Selection::MergeFrom();
    this[4].i32[0] |= 4u;
    this[11].i32[0] = v5;
  }
  v8 = a2[1];
  v7 = a2 + 1;
  v6 = (const std::string::value_type *)v8;
  v9 = v7[2].i8[7];
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = v7[2].u8[7];
  else
    v11 = (std::string::size_type)v7[1];
  return std::string::append((std::string *)&this[1], v10, v11);
}

void sub_1B4B35758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::Selection::~Selection(topotext::Selection *this)
{
  *(_QWORD *)this = &off_1E67F73A0;
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 8);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 10);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Selection::~Selection(this);
  JUMPOUT(0x1B5E3DB94);
}

topotext::Selection *topotext::Selection::New(topotext::Selection *this)
{
  topotext::Selection *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Selection *)operator new();
  topotext::Selection::Selection(v1, v2, v3);
  return v1;
}

void sub_1B4B35830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C40848840D4);
  _Unwind_Resume(a1);
}

uint64_t topotext::Selection::Clear(topotext::Selection *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  *((_DWORD *)this + 22) = 0;
  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  if (*((int *)this + 18) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v3);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *((int *)this + 18));
  }
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 8) = 0;
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

uint64_t topotext::Selection::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  uint64_t TagFallback;
  google::protobuf::io::CodedOutputStream *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int32x2_t v13;
  std::string *v14;
  int32x2_t v15;
  int32x2_t v16;
  unsigned __int8 *v17;
  int v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int32x2_t v23;
  uint64_t v24;
  int32x2_t v25;
  int32x2_t v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _BYTE v38[32];
  _QWORD v39[2];
  unsigned int v40;

  google::protobuf::io::StringOutputStream::StringOutputStream(v39, (uint64_t)&this[1]);
  TagFallback = (uint64_t)google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v38, (google::protobuf::io::ZeroCopyOutputStream *)v39);
  do
  {
    while (1)
    {
LABEL_2:
      v6 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v8 = TagFallback | ((unint64_t)((TagFallback - 1) < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          goto LABEL_11;
      }
      else
      {
        v7 = *v6;
        *((_DWORD *)a2 + 8) = v7;
        *((_QWORD *)a2 + 1) = v6 + 1;
        v8 = v7 | 0x100000000;
      }
      v9 = v8 >> 3;
      if (v8 >> 3 == 3)
        break;
      if (v9 == 2)
      {
        if ((_DWORD)v8 != 18)
        {
LABEL_31:
          if (!(_DWORD)v8 || (v8 & 7) == 4)
            goto LABEL_67;
          goto LABEL_33;
        }
        while (1)
        {
          v21 = this[9].i32[1];
          v22 = this[9].i32[0];
          if ((int)v22 >= v21)
          {
            if (v21 == this[10].i32[0])
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[8], v21 + 1);
            v24 = operator new();
            *(_QWORD *)v24 = &off_1E67F6E78;
            *(_OWORD *)(v24 + 8) = 0u;
            *(_OWORD *)(v24 + 24) = 0u;
            *(_OWORD *)(v24 + 40) = 0u;
            v25 = this[8];
            v26 = this[9];
            this[9] = vadd_s32(v26, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v25 + 8 * v26.i32[0]) = v24;
          }
          else
          {
            v23 = this[8];
            this[9].i32[0] = v22 + 1;
            v24 = *(_QWORD *)(*(_QWORD *)&v23 + 8 * v22);
          }
          v40 = 0;
          v27 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v40))
              goto LABEL_66;
          }
          else
          {
            v40 = *v27;
            *((_QWORD *)a2 + 1) = v27 + 1;
          }
          v28 = *((_DWORD *)a2 + 14);
          v29 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v28 + 1;
          if (v28 >= v29
            || (v30 = google::protobuf::io::CodedInputStream::PushLimit(a2, v40),
                !topotext::Selection_Range::MergePartialFromCodedStream((topotext::Selection_Range *)v24, a2))|| !*((_BYTE *)a2 + 36))
          {
LABEL_66:
            v36 = 0;
            goto LABEL_68;
          }
          TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v30);
          v31 = *((_DWORD *)a2 + 14);
          v32 = __OFSUB__(v31, 1);
          v33 = v31 - 1;
          if (v33 < 0 == v32)
            *((_DWORD *)a2 + 14) = v33;
          v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v17 >= v20)
            break;
          v34 = *v17;
          if (v34 != 18)
          {
            if (v34 != 24)
              goto LABEL_2;
            v19 = (char *)(v17 + 1);
            *((_QWORD *)a2 + 1) = v19;
            goto LABEL_54;
          }
LABEL_35:
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
      }
      else if (v9 == 1)
      {
        if ((_DWORD)v8 != 10)
          goto LABEL_31;
        while (1)
        {
          v11 = this[6].i32[1];
          v12 = this[6].i32[0];
          if ((int)v12 >= v11)
          {
            if (v11 == this[7].i32[0])
              TagFallback = (uint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v11 + 1);
            v14 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v15 = this[5];
            v16 = this[6];
            this[6] = vadd_s32(v16, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v15 + 8 * v16.i32[0]) = v14;
          }
          else
          {
            v13 = this[5];
            this[6].i32[0] = v12 + 1;
            v14 = *(std::string **)(*(_QWORD *)&v13 + 8 * v12);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v14);
          if (!(_DWORD)TagFallback)
            goto LABEL_66;
          v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 >= *((_QWORD *)a2 + 2))
            break;
          v18 = *v17;
          if (v18 != 10)
          {
            if (v18 != 18)
              goto LABEL_2;
            goto LABEL_35;
          }
          *((_QWORD *)a2 + 1) = v17 + 1;
        }
      }
      else
      {
LABEL_11:
        if ((_DWORD)v8)
          v10 = (v8 & 7) == 4;
        else
          v10 = 1;
        if (v10)
        {
LABEL_67:
          v36 = 1;
          goto LABEL_68;
        }
LABEL_33:
        TagFallback = google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, (google::protobuf::io::CodedOutputStream *)v38, v5);
        if ((TagFallback & 1) == 0)
          goto LABEL_66;
      }
    }
    if ((_DWORD)v8 != 24)
      goto LABEL_31;
    v19 = (char *)*((_QWORD *)a2 + 1);
    v20 = *((_QWORD *)a2 + 2);
LABEL_54:
    v40 = 0;
    if ((unint64_t)v19 >= v20 || *v19 < 0)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v40);
      if ((TagFallback & 1) == 0)
        goto LABEL_66;
      v35 = v40;
    }
    else
    {
      v35 = *v19;
      *((_QWORD *)a2 + 1) = v19 + 1;
    }
    if (v35 > 1)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v38, v8);
      TagFallback = google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v38, v35);
    }
    else
    {
      this[4].i32[0] |= 4u;
      this[11].i32[0] = v35;
    }
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  v36 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_68:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v38);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v39);
  return v36;
}

void sub_1B4B35CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Selection::SerializeWithCachedSizes(topotext::Selection *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  if (*((int *)this + 12) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40, v6);
      google::protobuf::internal::WireFormatLite::WriteBytes(1, v7, a2);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  if (*((int *)this + 18) >= 1)
  {
    v8 = 0;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>((uint64_t)this + 64, v8);
      google::protobuf::internal::WireFormatLite::WriteMessage(2, v9, a2);
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 18));
  }
  if ((*((_BYTE *)this + 32) & 4) != 0)
    google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)3, *((_DWORD *)this + 22), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v10 = (char *)*((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2);
  }
  else
  {
    v10 = (char *)this + 8;
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v10, v11);
}

uint64_t topotext::Selection::ByteSize(topotext::Selection *this)
{
  int v2;
  google::protobuf::io::CodedOutputStream *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  topotext::Selection_Range *v16;
  google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 4) != 0)
  {
    v3 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if ((v3 & 0x80000000) != 0)
    {
      v2 = 11;
    }
    else if (v3 >= 0x80)
    {
      v2 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      v2 = 2;
    }
  }
  else
  {
    v2 = 0;
  }
  v4 = *((_DWORD *)this + 12);
  v5 = v4 + v2;
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40, v6);
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = v8;
      v10 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = v10;
      if (v11 >= 0x80)
      {
        v12 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v11);
        v8 = *(unsigned __int8 *)(v7 + 23);
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(_BYTE *)(v7 + 23);
      }
      else
      {
        v12 = 1;
      }
      if (v9 < 0)
        v8 = v10;
      v5 += v12 + v8;
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  v13 = *((_DWORD *)this + 18);
  v14 = v13 + v5;
  if (v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (topotext::Selection_Range *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>((uint64_t)this + 64, v15);
      v17 = (google::protobuf::io::CodedOutputStream *)topotext::Selection_Range::ByteSize(v16);
      v18 = (int)v17;
      if (v17 >= 0x80)
        v19 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
      else
        v19 = 1;
      v14 += v18 + v19;
      ++v15;
    }
    while (v15 < *((_DWORD *)this + 18));
  }
  if (*((char *)this + 31) < 0)
    v20 = *((_QWORD *)this + 2);
  else
    LODWORD(v20) = *((unsigned __int8 *)this + 31);
  result = (v14 + v20);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Selection::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Selection::MergeFrom(this, lpsrc);
}

uint64_t topotext::Selection::IsInitialized(topotext::Selection *this)
{
  return 1;
}

_QWORD *topotext::Selection::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Selection");
}

BOOL topotext::AttributeRun_WritingDirection_IsValid(topotext *this)
{
  return this < 5;
}

topotext::AttributeRun *topotext::AttributeRun::AttributeRun(topotext::AttributeRun *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6C98;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::AttributeRun::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B35FD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

double topotext::AttributeRun::SharedCtor(topotext::AttributeRun *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD v7[2];
  char v8;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v7[0] = &off_1E67F6B80;
    v7[1] = google::protobuf::internal::InitEmptyString;
    v8 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v7);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v7);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_DWORD *)this + 20) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 9) = v5;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_DWORD *)this + 29) = 0;
  return result;
}

void sub_1B4B360A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::AttributeRun::MergeFrom(topotext::AttributeRun *this, const topotext::AttributeRun *a2, uint64_t a3)
{
  topotext::AttributeRun *v4;
  std::string *v5;
  int v6;
  int v7;
  topotext::ParagraphStyle *v8;
  const topotext::ParagraphStyle *v9;
  topotext::Font *v10;
  uint64_t v11;
  uint64_t v12;
  const topotext::Font *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const std::string *v18;
  std::string *v19;
  topotext::Color *v20;
  const topotext::Color *v21;
  unsigned int v22;
  topotext::AttachmentInfo *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  topotext::HashtagInfo *v28;
  uint64_t v29;
  uint64_t v30;
  const topotext::HashtagInfo *v31;
  const std::string::value_type *v32;
  char *v33;
  const std::string::value_type *v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  char v39;
  std::string v40[2];

  v4 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v40, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 2832);
    v5 = google::protobuf::internal::LogMessage::operator<<(v40, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v39, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v40[0].__r_.__value_.__l.__data_);
  }
  v6 = *((_DWORD *)a2 + 8);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v4 + 8) |= 1u;
      *((_DWORD *)v4 + 12) = v7;
      v6 = *((_DWORD *)a2 + 8);
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 4) == 0)
          goto LABEL_7;
        goto LABEL_19;
      }
    }
    else if ((v6 & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)v4 + 8) |= 2u;
    v8 = (topotext::ParagraphStyle *)*((_QWORD *)v4 + 5);
    if (!v8)
    {
      this = (topotext::AttributeRun *)operator new();
      v8 = this;
      *(_QWORD *)this = &off_1E67F6E00;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *((_QWORD *)v4 + 5) = this;
    }
    v9 = (const topotext::ParagraphStyle *)*((_QWORD *)a2 + 5);
    if (!v9)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v9 = *(const topotext::ParagraphStyle **)(topotext::AttributeRun::default_instance_ + 40);
    }
    this = (topotext::AttributeRun *)topotext::ParagraphStyle::MergeFrom(v8, v9, a3);
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_8;
      goto LABEL_24;
    }
LABEL_19:
    *((_DWORD *)v4 + 8) |= 4u;
    v10 = (topotext::Font *)*((_QWORD *)v4 + 7);
    if (!v10)
    {
      v10 = (topotext::Font *)operator new();
      this = topotext::Font::Font(v10, v11, v12);
      *((_QWORD *)v4 + 7) = v10;
    }
    v13 = (const topotext::Font *)*((_QWORD *)a2 + 7);
    if (!v13)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v13 = *(const topotext::Font **)(topotext::AttributeRun::default_instance_ + 56);
    }
    this = (topotext::AttributeRun *)topotext::Font::MergeFrom(v10, v13, a3);
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 8) == 0)
    {
LABEL_8:
      if ((v6 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
LABEL_24:
    v14 = *((_DWORD *)a2 + 13);
    *((_DWORD *)v4 + 8) |= 8u;
    *((_DWORD *)v4 + 13) = v14;
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 0x10) == 0)
    {
LABEL_9:
      if ((v6 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_26;
    }
LABEL_25:
    v15 = *((_DWORD *)a2 + 16);
    *((_DWORD *)v4 + 8) |= 0x10u;
    *((_DWORD *)v4 + 16) = v15;
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0)
        goto LABEL_11;
      goto LABEL_27;
    }
LABEL_26:
    v16 = *((_DWORD *)a2 + 17);
    *((_DWORD *)v4 + 8) |= 0x20u;
    *((_DWORD *)v4 + 17) = v16;
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 0x40) == 0)
    {
LABEL_11:
      if ((v6 & 0x80) == 0)
        goto LABEL_32;
      goto LABEL_28;
    }
LABEL_27:
    v17 = *((_DWORD *)a2 + 20);
    *((_DWORD *)v4 + 8) |= 0x40u;
    *((_DWORD *)v4 + 20) = v17;
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 0x80) == 0)
      goto LABEL_32;
LABEL_28:
    v18 = (const std::string *)*((_QWORD *)a2 + 9);
    *((_DWORD *)v4 + 8) |= 0x80u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
    v19 = (std::string *)*((_QWORD *)v4 + 9);
    if (v19 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v19 = (std::string *)operator new();
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v4 + 9) = v19;
    }
    this = (topotext::AttributeRun *)std::string::operator=(v19, v18);
    v6 = *((_DWORD *)a2 + 8);
  }
LABEL_32:
  if ((v6 & 0xFF00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      *((_DWORD *)v4 + 8) |= 0x100u;
      v20 = (topotext::Color *)*((_QWORD *)v4 + 11);
      if (!v20)
      {
        this = (topotext::AttributeRun *)operator new();
        v20 = this;
        *(_QWORD *)this = &off_1E67F7148;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)v4 + 11) = this;
      }
      v21 = (const topotext::Color *)*((_QWORD *)a2 + 11);
      if (!v21)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v21 = *(const topotext::Color **)(topotext::AttributeRun::default_instance_ + 88);
      }
      this = (topotext::AttributeRun *)topotext::Color::MergeFrom(v20, v21);
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x200) != 0)
    {
      v22 = *((_DWORD *)a2 + 21);
      if (v22 >= 5)
        topotext::AttributeRun::MergeFrom();
      *((_DWORD *)v4 + 8) |= 0x200u;
      *((_DWORD *)v4 + 21) = v22;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x400) != 0)
    {
      *((_DWORD *)v4 + 8) |= 0x400u;
      v23 = (topotext::AttachmentInfo *)*((_QWORD *)v4 + 12);
      if (!v23)
      {
        v23 = (topotext::AttachmentInfo *)operator new();
        this = topotext::AttachmentInfo::AttachmentInfo(v23, v24, v25);
        *((_QWORD *)v4 + 12) = v23;
      }
      v26 = (std::string *)*((_QWORD *)a2 + 12);
      if (!v26)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v26 = *(std::string **)(topotext::AttributeRun::default_instance_ + 96);
      }
      this = (topotext::AttributeRun *)topotext::AttachmentInfo::MergeFrom((std::string *)v23, v26, a3);
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x800) != 0)
    {
      v27 = *((_QWORD *)a2 + 13);
      *((_DWORD *)v4 + 8) |= 0x800u;
      *((_QWORD *)v4 + 13) = v27;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x1000) != 0)
    {
      *((_DWORD *)v4 + 8) |= 0x1000u;
      v28 = (topotext::HashtagInfo *)*((_QWORD *)v4 + 14);
      if (!v28)
      {
        v28 = (topotext::HashtagInfo *)operator new();
        this = topotext::HashtagInfo::HashtagInfo(v28, v29, v30);
        *((_QWORD *)v4 + 14) = v28;
      }
      v31 = (const topotext::HashtagInfo *)*((_QWORD *)a2 + 14);
      if (!v31)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v31 = *(const topotext::HashtagInfo **)(topotext::AttributeRun::default_instance_ + 112);
      }
      topotext::HashtagInfo::MergeFrom(v28, v31, a3);
    }
  }
  v34 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v33 = (char *)a2 + 8;
  v32 = v34;
  v35 = v33[23];
  if (v35 >= 0)
    v36 = v33;
  else
    v36 = v32;
  if (v35 >= 0)
    v37 = v33[23];
  else
    v37 = *((_QWORD *)v33 + 1);
  return std::string::append((std::string *)((char *)v4 + 8), v36, v37);
}

void sub_1B4B364CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C400074EEDFLL);
  _Unwind_Resume(a1);
}

void topotext::AttributeRun::~AttributeRun(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F6C98;
  topotext::AttributeRun::SharedDtor((topotext::AttributeRun *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::AttributeRun::~AttributeRun(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::AttributeRun::SharedDtor(topotext::AttributeRun *this, uint64_t a2, uint64_t a3)
{
  topotext::AttributeRun *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 9);
  if (v4)
    v5 = v4 == google::protobuf::internal::empty_string_;
  else
    v5 = 1;
  if (!v5)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (topotext::AttributeRun *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  if ((topotext::AttributeRun *)topotext::AttributeRun::default_instance_ != v3)
  {
    v6 = *((_QWORD *)v3 + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)v3 + 7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)v3 + 11);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)v3 + 12);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)v3 + 14);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

uint64_t topotext::AttributeRun::default_instance(topotext::AttributeRun *this)
{
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  return topotext::AttributeRun::default_instance_;
}

topotext::AttributeRun *topotext::AttributeRun::New(topotext::AttributeRun *this)
{
  topotext::AttributeRun *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::AttributeRun *)operator new();
  topotext::AttributeRun::AttributeRun(v1, v2, v3);
  return v1;
}

void sub_1B4B366D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40BCC55259);
  _Unwind_Resume(a1);
}

uint64_t topotext::AttributeRun::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = this;
  LOBYTE(v4) = *(_BYTE *)(this + 32);
  if ((_BYTE)v4)
  {
    *(_QWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 64) = 0;
    if ((v4 & 2) != 0)
    {
      this = *(_QWORD *)(this + 40);
      if (this)
      {
        this = topotext::ParagraphStyle::Clear(this, a2, a3);
        v4 = *(_DWORD *)(v3 + 32);
      }
    }
    if ((v4 & 4) != 0)
    {
      this = *(_QWORD *)(v3 + 56);
      if (this)
      {
        this = topotext::Font::Clear(this, a2, a3);
        v4 = *(_DWORD *)(v3 + 32);
      }
    }
    *(_DWORD *)(v3 + 80) = 0;
    if ((v4 & 0x80) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(v3 + 72);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  v6 = *(_DWORD *)(v3 + 32);
  if ((v6 & 0x1F00) != 0)
  {
    if ((v6 & 0x100) != 0)
    {
      v7 = *(_QWORD *)(v3 + 88);
      if (v7)
      {
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        if (*(char *)(v7 + 31) < 0)
        {
          **(_BYTE **)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v7 + 8) = 0;
          *(_BYTE *)(v7 + 31) = 0;
        }
      }
    }
    *(_DWORD *)(v3 + 84) = 0;
    v8 = *(_DWORD *)(v3 + 32);
    if ((v8 & 0x400) != 0)
    {
      this = *(_QWORD *)(v3 + 96);
      if (this)
      {
        this = topotext::AttachmentInfo::Clear(this, a2, a3);
        v8 = *(_DWORD *)(v3 + 32);
      }
    }
    *(_QWORD *)(v3 + 104) = 0;
    if ((v8 & 0x1000) != 0)
    {
      this = *(_QWORD *)(v3 + 112);
      if (this)
        this = topotext::HashtagInfo::Clear(this, a2, a3);
    }
  }
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t topotext::ParagraphStyle::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 32);
  if ((v4 & 0x7F) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 64) = 0;
    if ((v4 & 0x10) != 0)
    {
      this = *(_QWORD *)(this + 56);
      if (this)
        this = topotext::Todo::Clear(this, a2, a3);
    }
  }
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t topotext::Font::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 7) != 0)
  {
    *(_QWORD *)(this + 48) = 0;
    if ((v3 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 40);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::Color::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::AttachmentInfo::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 40);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 2) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(this + 48);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::HashtagInfo::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor(this, a2, a3);
    v3 = *(_QWORD *)(this + 40);
    if (v3 != google::protobuf::internal::empty_string_)
    {
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::AttributeRun::MergePartialFromCodedStream(topotext::AttributeRun *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  char *v14;
  int v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  _BYTE *v33;
  topotext::Font *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  unsigned int v47;
  _BYTE *v48;
  std::string *v49;
  _BYTE *v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  unsigned int v59;
  _BYTE *v60;
  topotext::AttachmentInfo *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _BYTE *v70;
  _BYTE *v71;
  topotext::HashtagInfo *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int *v83;
  _BYTE v84[32];
  _QWORD v85[2];
  unsigned int v86;

  google::protobuf::io::StringOutputStream::StringOutputStream(v85, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v84, (google::protobuf::io::ZeroCopyOutputStream *)v85);
  v83 = (unsigned int *)((char *)this + 48);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_12;
LABEL_6:
      if ((_DWORD)v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
LABEL_179:
        v81 = 1;
        goto LABEL_180;
      }
LABEL_42:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v84, v4))goto LABEL_178;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_12:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 8)
          goto LABEL_40;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v83))
            goto LABEL_178;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v83 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        v20 = *((_DWORD *)this + 8) | 1;
        *((_DWORD *)this + 8) = v20;
        if ((unint64_t)v12 >= v10 || *v12 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_49:
        *((_DWORD *)this + 8) = v20 | 2;
        v25 = *((_QWORD *)this + 5);
        if (!v25)
        {
          v25 = operator new();
          *(_QWORD *)v25 = &off_1E67F6E00;
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_OWORD *)(v25 + 56) = 0u;
          *((_QWORD *)this + 5) = v25;
        }
        v86 = 0;
        v26 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
        }
        else
        {
          v86 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)a2 + 14);
        v28 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v27 + 1;
        if (v27 >= v28)
          goto LABEL_178;
        v29 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86);
        if (!topotext::ParagraphStyle::MergePartialFromCodedStream((topotext::ParagraphStyle *)v25, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_178;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v29);
        v30 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if (v32 < 0 == v31)
          *((_DWORD *)a2 + 14) = v32;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_63:
        *((_DWORD *)this + 8) |= 4u;
        v34 = (topotext::Font *)*((_QWORD *)this + 7);
        if (!v34)
        {
          v34 = (topotext::Font *)operator new();
          topotext::Font::Font(v34, v35, v36);
          *((_QWORD *)this + 7) = v34;
        }
        v86 = 0;
        v37 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
        }
        else
        {
          v86 = *v37;
          *((_QWORD *)a2 + 1) = v37 + 1;
        }
        v38 = *((_DWORD *)a2 + 14);
        v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39)
          goto LABEL_178;
        v40 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86);
        if (!topotext::Font::MergePartialFromCodedStream(v34, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_178;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v40);
        v41 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v41, 1);
        v42 = v41 - 1;
        if (v42 < 0 == v31)
          *((_DWORD *)a2 + 14) = v42;
        v43 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v43 >= v13 || *v43 != 40)
          continue;
        v19 = v43 + 1;
        *((_QWORD *)a2 + 1) = v19;
LABEL_77:
        if ((unint64_t)v19 >= v13 || *v19 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 13))goto LABEL_178;
          v44 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 13) = *v19;
          v44 = v19 + 1;
          *((_QWORD *)a2 + 1) = v44;
        }
        *((_DWORD *)this + 8) |= 8u;
        if ((unint64_t)v44 >= v13 || *v44 != 48)
          continue;
        v14 = v44 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_85:
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 16))goto LABEL_178;
          v45 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 16) = *v14;
          v45 = v14 + 1;
          *((_QWORD *)a2 + 1) = v45;
        }
        *((_DWORD *)this + 8) |= 0x10u;
        if ((unint64_t)v45 >= v13 || *v45 != 56)
          continue;
        v16 = v45 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_93:
        if ((unint64_t)v16 >= v13 || *v16 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 17))goto LABEL_178;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 17) = *v16;
          v46 = v16 + 1;
          *((_QWORD *)a2 + 1) = v46;
        }
        *((_DWORD *)this + 8) |= 0x20u;
        if ((unint64_t)v46 >= v13 || *v46 != 64)
          continue;
        v21 = v46 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_101:
        v86 = 0;
        if ((unint64_t)v21 >= v13 || *v21 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
          v47 = v86;
          v48 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v47 = *v21;
          v48 = v21 + 1;
          *((_QWORD *)a2 + 1) = v48;
        }
        *((_DWORD *)this + 20) = v47;
        v22 = *((_DWORD *)this + 8) | 0x40;
        *((_DWORD *)this + 8) = v22;
        if ((unint64_t)v48 >= v13 || *v48 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v48 + 1;
LABEL_109:
        *((_DWORD *)this + 8) = v22 | 0x80;
        if (!google::protobuf::internal::empty_string_)
          __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
        v49 = (std::string *)*((_QWORD *)this + 9);
        if (v49 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v49 = (std::string *)operator new();
          v49->__r_.__value_.__r.__words[0] = 0;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 9) = v49;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v49))
          goto LABEL_178;
        v50 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v50 >= *((_QWORD *)a2 + 2) || *v50 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v50 + 1;
LABEL_116:
        *((_DWORD *)this + 8) |= 0x100u;
        v51 = *((_QWORD *)this + 11);
        if (!v51)
        {
          v51 = operator new();
          *(_QWORD *)v51 = &off_1E67F7148;
          *(_OWORD *)(v51 + 8) = 0u;
          *(_OWORD *)(v51 + 24) = 0u;
          *(_OWORD *)(v51 + 40) = 0u;
          *((_QWORD *)this + 11) = v51;
        }
        v86 = 0;
        v52 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v52 >= *((_QWORD *)a2 + 2) || *v52 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
        }
        else
        {
          v86 = *v52;
          *((_QWORD *)a2 + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)a2 + 14);
        v54 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v53 + 1;
        if (v53 >= v54)
          goto LABEL_178;
        v55 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86);
        if (!topotext::Color::MergePartialFromCodedStream((topotext::Color *)v51, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_178;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v55);
        v56 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v56, 1);
        v57 = v56 - 1;
        if (v57 < 0 == v31)
          *((_DWORD *)a2 + 14) = v57;
        v58 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v58 >= v23 || *v58 != 88)
          continue;
        v24 = v58 + 1;
        *((_QWORD *)a2 + 1) = v24;
LABEL_130:
        v86 = 0;
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          if ((google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86) & 1) == 0)
            goto LABEL_178;
          v59 = v86;
        }
        else
        {
          v59 = *v24;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        if (v59 > 4)
        {
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v84, v7);
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v84, v59);
        }
        else
        {
          *((_DWORD *)this + 8) |= 0x200u;
          *((_DWORD *)this + 21) = v59;
        }
        v60 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v60 >= *((_QWORD *)a2 + 2) || *v60 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v60 + 1;
LABEL_141:
        *((_DWORD *)this + 8) |= 0x400u;
        v61 = (topotext::AttachmentInfo *)*((_QWORD *)this + 12);
        if (!v61)
        {
          v61 = (topotext::AttachmentInfo *)operator new();
          topotext::AttachmentInfo::AttachmentInfo(v61, v62, v63);
          *((_QWORD *)this + 12) = v61;
        }
        v86 = 0;
        v64 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v64 >= *((_QWORD *)a2 + 2) || *v64 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
        }
        else
        {
          v86 = *v64;
          *((_QWORD *)a2 + 1) = v64 + 1;
        }
        v65 = *((_DWORD *)a2 + 14);
        v66 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v65 + 1;
        if (v65 >= v66)
          goto LABEL_178;
        v67 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86);
        if (!topotext::AttachmentInfo::MergePartialFromCodedStream(v61, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_178;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v67);
        v68 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v68, 1);
        v69 = v68 - 1;
        if (v69 < 0 == v31)
          *((_DWORD *)a2 + 14) = v69;
        v70 = (_BYTE *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v70 >= v17 || *v70 != 104)
          continue;
        v18 = v70 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_155:
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 13))goto LABEL_178;
          v71 = (_BYTE *)*((_QWORD *)a2 + 1);
          v17 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_QWORD *)this + 13) = *v18;
          v71 = v18 + 1;
          *((_QWORD *)a2 + 1) = v71;
        }
        v15 = *((_DWORD *)this + 8) | 0x800;
        *((_DWORD *)this + 8) = v15;
        if ((unint64_t)v71 >= v17 || *v71 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v71 + 1;
        goto LABEL_163;
      case 2u:
        if ((_DWORD)v7 != 18)
          goto LABEL_40;
        v20 = *((_DWORD *)this + 8);
        goto LABEL_49;
      case 3u:
        if ((_DWORD)v7 == 26)
          goto LABEL_63;
        goto LABEL_40;
      case 5u:
        if ((_DWORD)v7 != 40)
          goto LABEL_40;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_77;
      case 6u:
        if ((_DWORD)v7 != 48)
          goto LABEL_40;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_85;
      case 7u:
        if ((_DWORD)v7 != 56)
          goto LABEL_40;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_93;
      case 8u:
        if ((_DWORD)v7 != 64)
          goto LABEL_40;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_101;
      case 9u:
        if ((_DWORD)v7 != 74)
          goto LABEL_40;
        v22 = *((_DWORD *)this + 8);
        goto LABEL_109;
      case 0xAu:
        if ((_DWORD)v7 != 82)
          goto LABEL_40;
        goto LABEL_116;
      case 0xBu:
        if ((_DWORD)v7 != 88)
          goto LABEL_40;
        v24 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_130;
      case 0xCu:
        if ((_DWORD)v7 == 98)
          goto LABEL_141;
        goto LABEL_40;
      case 0xDu:
        if ((_DWORD)v7 != 104)
          goto LABEL_40;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v17 = *((_QWORD *)a2 + 2);
        goto LABEL_155;
      case 0xEu:
        if ((_DWORD)v7 != 114)
        {
LABEL_40:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_179;
          goto LABEL_42;
        }
        v15 = *((_DWORD *)this + 8);
LABEL_163:
        *((_DWORD *)this + 8) = v15 | 0x1000;
        v72 = (topotext::HashtagInfo *)*((_QWORD *)this + 14);
        if (!v72)
        {
          v72 = (topotext::HashtagInfo *)operator new();
          topotext::HashtagInfo::HashtagInfo(v72, v73, v74);
          *((_QWORD *)this + 14) = v72;
        }
        v86 = 0;
        v75 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v75 >= *((_QWORD *)a2 + 2) || *v75 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v86))
            goto LABEL_178;
        }
        else
        {
          v86 = *v75;
          *((_QWORD *)a2 + 1) = v75 + 1;
        }
        v76 = *((_DWORD *)a2 + 14);
        v77 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v76 + 1;
        if (v76 >= v77
          || (v78 = google::protobuf::io::CodedInputStream::PushLimit(a2, v86),
              !topotext::HashtagInfo::MergePartialFromCodedStream(v72, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_178:
          v81 = 0;
          goto LABEL_180;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v78);
        v79 = *((_DWORD *)a2 + 14);
        v31 = __OFSUB__(v79, 1);
        v80 = v79 - 1;
        if (v80 < 0 == v31)
          *((_DWORD *)a2 + 14) = v80;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v81 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_180:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v84);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v85);
        return v81;
      default:
        goto LABEL_6;
    }
  }
}

void sub_1B4B374EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C4020611389);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t topotext::AttributeRun::SerializeWithCachedSizes(topotext::AttributeRun *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  topotext::AttributeRun *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v5 = this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 12), a2, a4);
    v6 = *((_DWORD *)v5 + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *((_QWORD *)v5 + 5);
  if (!v7)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v7 = *(_QWORD *)(topotext::AttributeRun::default_instance_ + 40);
  }
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteMessage(2, v7, a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_19:
  v8 = *((_QWORD *)v5 + 7);
  if (!v8)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v8 = *(_QWORD *)(topotext::AttributeRun::default_instance_ + 56);
  }
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteMessage(3, v8, a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)5, *((_DWORD *)v5 + 13), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)6, *((_DWORD *)v5 + 16), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)7, *((_DWORD *)v5 + 17), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)8, *((_DWORD *)v5 + 20), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(9, *((_QWORD *)v5 + 9), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_27:
  v9 = *((_QWORD *)v5 + 11);
  if (!v9)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v9 = *(_QWORD *)(topotext::AttributeRun::default_instance_ + 88);
  }
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteMessage(10, v9, a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)0xB, *((_DWORD *)v5 + 21), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_31:
  v10 = *((_QWORD *)v5 + 12);
  if (!v10)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v10 = *(_QWORD *)(topotext::AttributeRun::default_instance_ + 96);
  }
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteMessage(12, v10, a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_35;
  }
LABEL_34:
  this = (topotext::AttributeRun *)google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)0xD, *((_QWORD *)v5 + 13), a2, a4);
  if ((*((_DWORD *)v5 + 8) & 0x1000) == 0)
    goto LABEL_38;
LABEL_35:
  v11 = *((_QWORD *)v5 + 14);
  if (!v11)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v11 = *(_QWORD *)(topotext::AttributeRun::default_instance_ + 112);
  }
  google::protobuf::internal::WireFormatLite::WriteMessage(14, v11, a2);
LABEL_38:
  if (*((char *)v5 + 31) < 0)
  {
    v12 = (char *)*((_QWORD *)v5 + 1);
    v13 = *((_QWORD *)v5 + 2);
  }
  else
  {
    v12 = (char *)v5 + 8;
    LODWORD(v13) = *((unsigned __int8 *)v5 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v12, v13);
}

uint64_t topotext::AttributeRun::ByteSize(topotext::AttributeRun *this)
{
  int v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  topotext::ParagraphStyle *v6;
  google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  topotext::Font *v10;
  google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  google::protobuf::io::CodedOutputStream *v14;
  int v15;
  google::protobuf::io::CodedOutputStream *v16;
  int v17;
  google::protobuf::io::CodedOutputStream *v18;
  int v19;
  google::protobuf::io::CodedOutputStream *v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  topotext::Color *v28;
  google::protobuf::io::CodedOutputStream *v29;
  int v30;
  int v31;
  google::protobuf::io::CodedOutputStream *v32;
  int v33;
  topotext::AttachmentInfo *v34;
  google::protobuf::io::CodedOutputStream *v35;
  int v36;
  int v37;
  topotext::HashtagInfo *v38;
  google::protobuf::io::CodedOutputStream *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t result;

  v2 = *((_DWORD *)this + 8);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_56;
  }
  if ((v2 & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v4 >= 0x80)
    {
      v5 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v5 = 1;
    }
    v3 = v5 + 1;
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_16;
  }
  v6 = (topotext::ParagraphStyle *)*((_QWORD *)this + 5);
  if (!v6)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(0);
    v6 = *(topotext::ParagraphStyle **)(topotext::AttributeRun::default_instance_ + 40);
  }
  v7 = (google::protobuf::io::CodedOutputStream *)topotext::ParagraphStyle::ByteSize(v6);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
  else
    v9 = 1;
  v3 += v8 + v9 + 1;
  v2 = *((_DWORD *)this + 8);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v10 = (topotext::Font *)*((_QWORD *)this + 7);
    if (!v10)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v10 = *(topotext::Font **)(topotext::AttributeRun::default_instance_ + 56);
    }
    v11 = (google::protobuf::io::CodedOutputStream *)topotext::Font::ByteSize(v10);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    else
      v13 = 1;
    v3 += v12 + v13 + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_33;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  v14 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if (v14 >= 0x80)
  {
    v15 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v15 = 1;
  }
  v3 += v15 + 1;
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_33:
  v16 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v16 >= 0x80)
  {
    v17 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v17 = 1;
  }
  v3 += v17 + 1;
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
LABEL_41:
    v20 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if ((v20 & 0x80000000) != 0)
    {
      v21 = 10;
    }
    else if (v20 >= 0x80)
    {
      v21 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v21 = 1;
    }
    v3 += v21 + 1;
    if ((v2 & 0x80) == 0)
      goto LABEL_56;
    goto LABEL_47;
  }
LABEL_37:
  v18 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
  if (v18 >= 0x80)
  {
    v19 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v19 = 1;
  }
  v3 += v19 + 1;
  if ((v2 & 0x40) != 0)
    goto LABEL_41;
LABEL_21:
  if ((v2 & 0x80) == 0)
    goto LABEL_56;
LABEL_47:
  v22 = *((_QWORD *)this + 9);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v26);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v2 = *((_DWORD *)this + 8);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v3 += v27 + v23 + 1;
LABEL_56:
  if ((v2 & 0xFF00) == 0)
    goto LABEL_88;
  if ((v2 & 0x100) != 0)
  {
    v28 = (topotext::Color *)*((_QWORD *)this + 11);
    if (!v28)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(0);
      v28 = *(topotext::Color **)(topotext::AttributeRun::default_instance_ + 88);
    }
    v29 = (google::protobuf::io::CodedOutputStream *)topotext::Color::ByteSize(v28);
    v30 = (int)v29;
    if (v29 >= 0x80)
      v31 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29);
    else
      v31 = 1;
    v3 += v30 + v31 + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 0x200) == 0)
    {
LABEL_59:
      if ((v2 & 0x400) == 0)
        goto LABEL_60;
      goto LABEL_75;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_59;
  }
  v32 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
  if ((v32 & 0x80000000) != 0)
  {
    v33 = 11;
  }
  else if (v32 >= 0x80)
  {
    v33 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v33 = 2;
  }
  v3 += v33;
  if ((v2 & 0x400) == 0)
  {
LABEL_60:
    if ((v2 & 0x800) == 0)
      goto LABEL_61;
    goto LABEL_81;
  }
LABEL_75:
  v34 = (topotext::AttachmentInfo *)*((_QWORD *)this + 12);
  if (!v34)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(0);
    v34 = *(topotext::AttachmentInfo **)(topotext::AttributeRun::default_instance_ + 96);
  }
  v35 = (google::protobuf::io::CodedOutputStream *)topotext::AttachmentInfo::ByteSize(v34);
  v36 = (int)v35;
  if (v35 >= 0x80)
    v37 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35);
  else
    v37 = 1;
  v3 += v36 + v37 + 1;
  v2 = *((_DWORD *)this + 8);
  if ((v2 & 0x800) == 0)
  {
LABEL_61:
    if ((v2 & 0x1000) == 0)
      goto LABEL_88;
    goto LABEL_82;
  }
LABEL_81:
  v3 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 13)) + 1;
  if ((*((_DWORD *)this + 8) & 0x1000) == 0)
    goto LABEL_88;
LABEL_82:
  v38 = (topotext::HashtagInfo *)*((_QWORD *)this + 14);
  if (!v38)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(0);
    v38 = *(topotext::HashtagInfo **)(topotext::AttributeRun::default_instance_ + 112);
  }
  v39 = (google::protobuf::io::CodedOutputStream *)topotext::HashtagInfo::ByteSize(v38);
  v40 = (int)v39;
  if (v39 >= 0x80)
    v41 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v39);
  else
    v41 = 1;
  v3 += v40 + v41 + 1;
LABEL_88:
  if (*((char *)this + 31) < 0)
    v42 = *((_QWORD *)this + 2);
  else
    LODWORD(v42) = *((unsigned __int8 *)this + 31);
  result = (v3 + v42);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::AttributeRun::CheckTypeAndMergeFrom(topotext::AttributeRun *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::AttributeRun::MergeFrom(this, lpsrc, v5);
}

std::string *topotext::ParagraphStyle::MergeFrom(topotext::ParagraphStyle *this, const topotext::ParagraphStyle *a2, uint64_t a3)
{
  topotext::ParagraphStyle *v4;
  std::string *v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  topotext::Todo *v11;
  uint64_t v12;
  uint64_t v13;
  const topotext::Todo *v14;
  int v15;
  int v16;
  const std::string::value_type *v17;
  char *v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  char v24;
  std::string v25[2];

  v4 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 3587);
    v5 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v24, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v7 = *((_DWORD *)a2 + 10);
      *((_DWORD *)v4 + 8) |= 1u;
      *((_DWORD *)v4 + 10) = v7;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 2) != 0)
    {
      v8 = *((_DWORD *)a2 + 11);
      if (v8 >= 5)
        -[TTParagraphStyle(TTParagraphStylePersistenceAdditions) saveToArchive:].cold.2();
      *((_DWORD *)v4 + 8) |= 2u;
      *((_DWORD *)v4 + 11) = v8;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 4) != 0)
    {
      v9 = *((_DWORD *)a2 + 12);
      if (v9 >= 5)
        -[TTParagraphStyle(TTParagraphStylePersistenceAdditions) saveToArchive:].cold.1();
      *((_DWORD *)v4 + 8) |= 4u;
      *((_DWORD *)v4 + 12) = v9;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 8) != 0)
    {
      v10 = *((_DWORD *)a2 + 13);
      *((_DWORD *)v4 + 8) |= 8u;
      *((_DWORD *)v4 + 13) = v10;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x10) != 0)
    {
      *((_DWORD *)v4 + 8) |= 0x10u;
      v11 = (topotext::Todo *)*((_QWORD *)v4 + 7);
      if (!v11)
      {
        v11 = (topotext::Todo *)operator new();
        this = topotext::Todo::Todo(v11, v12, v13);
        *((_QWORD *)v4 + 7) = v11;
      }
      v14 = (const topotext::Todo *)*((_QWORD *)a2 + 7);
      if (!v14)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(this);
        v14 = *(const topotext::Todo **)(topotext::ParagraphStyle::default_instance_ + 56);
      }
      topotext::Todo::MergeFrom(v11, v14, a3);
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x20) != 0)
    {
      v15 = *((_DWORD *)a2 + 16);
      *((_DWORD *)v4 + 8) |= 0x20u;
      *((_DWORD *)v4 + 16) = v15;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 0x40) != 0)
    {
      v16 = *((_DWORD *)a2 + 17);
      *((_DWORD *)v4 + 8) |= 0x40u;
      *((_DWORD *)v4 + 17) = v16;
    }
  }
  v19 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v18 = (char *)a2 + 8;
  v17 = v19;
  v20 = v18[23];
  if (v20 >= 0)
    v21 = v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = v18[23];
  else
    v22 = *((_QWORD *)v18 + 1);
  return std::string::append((std::string *)((char *)v4 + 8), v21, v22);
}

void sub_1B4B37CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40417120EDLL);
  _Unwind_Resume(a1);
}

std::string *topotext::Font::MergeFrom(topotext::Font *this, const topotext::Font *a2, uint64_t a3)
{
  std::string *v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  int v9;
  int v10;
  const std::string::value_type *v11;
  char *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 3153);
    v5 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v7 = (const std::string *)*((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v8 = (std::string *)*((_QWORD *)this + 5);
      if (v8 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 5) = v8;
      }
      std::string::operator=(v8, v7);
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 2) != 0)
    {
      v9 = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 8) |= 2u;
      *((_DWORD *)this + 12) = v9;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 4) != 0)
    {
      v10 = *((_DWORD *)a2 + 13);
      *((_DWORD *)this + 8) |= 4u;
      *((_DWORD *)this + 13) = v10;
    }
  }
  v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v12 = (char *)a2 + 8;
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  return std::string::append((std::string *)((char *)this + 8), v15, v16);
}

void sub_1B4B37E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *topotext::Color::MergeFrom(topotext::Color *this, const topotext::Color *a2)
{
  std::string *v4;
  int v5;
  int v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v14;
  int v15;
  int v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 7065);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if (!(_BYTE)v5)
    goto LABEL_9;
  if ((*((_BYTE *)a2 + 32) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 32) & 2) == 0)
      goto LABEL_6;
LABEL_17:
    v15 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 11) = v15;
    v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  v14 = *((_DWORD *)a2 + 10);
  *((_DWORD *)this + 8) |= 1u;
  *((_DWORD *)this + 10) = v14;
  v5 = *((_DWORD *)a2 + 8);
  if ((v5 & 2) != 0)
    goto LABEL_17;
LABEL_6:
  if ((v5 & 4) == 0)
    goto LABEL_7;
LABEL_18:
  v16 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 8) |= 4u;
  *((_DWORD *)this + 12) = v16;
  if ((*((_DWORD *)a2 + 8) & 8) != 0)
  {
LABEL_8:
    v6 = *((_DWORD *)a2 + 13);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 13) = v6;
  }
LABEL_9:
  v9 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v8 = (char *)a2 + 8;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  return std::string::append((std::string *)((char *)this + 8), v11, v12);
}

void sub_1B4B37F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *topotext::AttachmentInfo::MergeFrom(std::string *this, std::string *a2, uint64_t a3)
{
  topotext::AttachmentInfo *v4;
  std::string *v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *data;
  std::string *v10;
  const std::string::value_type *v11;
  std::string::value_type *v12;
  const std::string::value_type *size;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  char v18;
  std::string v19[2];

  v4 = (topotext::AttachmentInfo *)this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 4045);
    v5 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = a2[1].__r_.__value_.__s.__data_[8];
  if ((_BYTE)v6)
  {
    if ((a2[1].__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v7 = (const std::string *)a2[1].__r_.__value_.__r.__words[2];
      *((_DWORD *)v4 + 8) |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v8 = (std::string *)*((_QWORD *)v4 + 5);
      if (v8 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 5) = v8;
      }
      this = std::string::operator=(v8, v7);
      v6 = a2[1].__r_.__value_.__r.__words[1];
    }
    if ((v6 & 2) != 0)
    {
      data = (const std::string *)a2[2].__r_.__value_.__l.__data_;
      *((_DWORD *)v4 + 8) |= 2u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v10 = (std::string *)*((_QWORD *)v4 + 6);
      if (v10 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 6) = v10;
      }
      std::string::operator=(v10, data);
    }
  }
  size = (const std::string::value_type *)a2->__r_.__value_.__l.__size_;
  v12 = &a2->__r_.__value_.__s.__data_[8];
  v11 = size;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  return std::string::append((std::string *)((char *)v4 + 8), v15, v16);
}

void sub_1B4B3810C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *topotext::HashtagInfo::MergeFrom(topotext::HashtagInfo *this, const topotext::HashtagInfo *a2, uint64_t a3)
{
  std::string *v5;
  const std::string *v6;
  std::string *v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 3809);
    v5 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  if ((*((_BYTE *)a2 + 32) & 1) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 1u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
    v7 = (std::string *)*((_QWORD *)this + 5);
    if (v7 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v7 = (std::string *)operator new();
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)this + 5) = v7;
    }
    std::string::operator=(v7, v6);
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B38220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::AttributeRun::IsInitialized(topotext::AttributeRun *this)
{
  return 1;
}

_QWORD *topotext::AttributeRun::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.AttributeRun");
}

topotext::Font *topotext::Font::Font(topotext::Font *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F7058;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::Font::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B38294(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::Font::SharedCtor(topotext::Font *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v5[0] = &off_1E67F6B80;
    v5[1] = google::protobuf::internal::InitEmptyString;
    v6 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v5);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v5);
  }
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 5) = google::protobuf::internal::empty_string_;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B38344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::Font::~Font(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F7058;
  topotext::VectorTimestamp_Clock::SharedDtor((topotext::VectorTimestamp_Clock *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Font::~Font(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

topotext::Font *topotext::Font::New(topotext::Font *this)
{
  topotext::Font *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Font *)operator new();
  topotext::Font::Font(v1, v2, v3);
  return v1;
}

void sub_1B4B38400(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C4020611389);
  _Unwind_Resume(a1);
}

uint64_t topotext::Font::MergePartialFromCodedStream(topotext::Font *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  std::string *v10;
  _BYTE *v11;
  BOOL v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _BYTE v19[32];
  _QWORD v20[2];
  unsigned int v21;

  google::protobuf::io::StringOutputStream::StringOutputStream(v20, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v19, (google::protobuf::io::ZeroCopyOutputStream *)v20);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_17;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      v9 = v7 >> 3;
      if (v7 >> 3 == 3)
      {
        if ((_DWORD)v7 == 24)
        {
          v15 = (char *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
          goto LABEL_34;
        }
LABEL_29:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_43;
        goto LABEL_31;
      }
      if (v9 == 2)
      {
        if ((_DWORD)v7 == 21)
          goto LABEL_24;
        goto LABEL_29;
      }
      if (v9 == 1)
        break;
LABEL_17:
      if ((_DWORD)v7)
        v12 = (v7 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
LABEL_43:
        v17 = 1;
        goto LABEL_45;
      }
LABEL_31:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v19, v4))goto LABEL_44;
    }
    if ((_DWORD)v7 != 10)
      goto LABEL_29;
    *((_DWORD *)this + 8) |= 1u;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v10 = (std::string *)*((_QWORD *)this + 5);
    if (v10 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__r.__words[0] = 0;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)this + 5) = v10;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v10))
      break;
    v11 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && *v11 == 21)
    {
      *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_24:
      v21 = 0;
      if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v21))
        break;
      *((_DWORD *)this + 12) = v21;
      *((_DWORD *)this + 8) |= 2u;
      v14 = (_BYTE *)*((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v14 < v13 && *v14 == 24)
      {
        v15 = v14 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_34:
        if ((unint64_t)v15 >= v13 || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 13))break;
          v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 13) = *v15;
          v16 = (unsigned __int8 *)(v15 + 1);
          *((_QWORD *)a2 + 1) = v16;
        }
        *((_DWORD *)this + 8) |= 4u;
        if (v16 == (unsigned __int8 *)v13 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v17 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_45;
        }
      }
    }
  }
LABEL_44:
  v17 = 0;
LABEL_45:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v19);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v20);
  return v17;
}

void sub_1B4B386BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Font::SerializeWithCachedSizes(topotext::Font *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)2, a2, *((float *)this + 12), a3);
  if ((*((_DWORD *)this + 8) & 4) != 0)
LABEL_4:
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)3, *((_DWORD *)this + 13), a2, a4);
LABEL_5:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::Font::ByteSize(topotext::Font *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  google::protobuf::io::CodedOutputStream *v12;
  int v13;
  uint64_t v14;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if ((_BYTE)v2)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
      v5 = *((_QWORD *)this + 5);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v9 = *(unsigned __int8 *)(v5 + 23);
      else
        v9 = v8;
      if (v9 >= 0x80)
      {
        v11 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v9);
        v6 = *(unsigned __int8 *)(v5 + 23);
        v8 = *(_QWORD *)(v5 + 8);
        v10 = v11 + 1;
        v2 = *((_DWORD *)this + 8);
        v7 = *(_BYTE *)(v5 + 23);
      }
      else
      {
        v10 = 2;
      }
      if (v7 < 0)
        v6 = v8;
      v3 = v10 + v6;
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v4 = v3 + 5;
    else
      v4 = v3;
    if ((v2 & 4) != 0)
    {
      v12 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
      if (v12 >= 0x80)
        v13 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      else
        v13 = 2;
      v4 += v13;
    }
  }
  else
  {
    v4 = 0;
  }
  if (*((char *)this + 31) < 0)
    v14 = *((_QWORD *)this + 2);
  else
    LODWORD(v14) = *((unsigned __int8 *)this + 31);
  result = (v4 + v14);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Font::CheckTypeAndMergeFrom(topotext::Font *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Font::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::Font::IsInitialized(topotext::Font *this)
{
  return 1;
}

_QWORD *topotext::Font::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Font");
}

void topotext::ParagraphStyle::~ParagraphStyle(void **this)
{
  void *v2;

  *this = &off_1E67F6E00;
  topotext::protobuf_AddDesc_topotext_2eproto((topotext *)this);
  if ((void **)topotext::ParagraphStyle::default_instance_ != this)
  {
    v2 = this[7];
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::ParagraphStyle::~ParagraphStyle(this);
  JUMPOUT(0x1B5E3DB94);
}

double topotext::ParagraphStyle::New(topotext::ParagraphStyle *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6E00;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  return result;
}

uint64_t topotext::Todo::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 40);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 48) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::ParagraphStyle::MergePartialFromCodedStream(topotext::ParagraphStyle *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int v26;
  _BYTE *v27;
  topotext::Todo *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  _BYTE v43[32];
  _QWORD v44[2];
  unsigned int v45;

  google::protobuf::io::StringOutputStream::StringOutputStream(v44, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v43, (google::protobuf::io::ZeroCopyOutputStream *)v44);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_11:
      if ((_DWORD)v7)
        v12 = (v7 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
LABEL_100:
        v41 = 1;
        goto LABEL_101;
      }
LABEL_30:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v43, v4))goto LABEL_99;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 8)
          goto LABEL_28;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 10))goto LABEL_99;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 10) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 >= v9 || *v11 != 16)
          continue;
        v13 = v11 + 1;
        *((_QWORD *)a2 + 1) = v13;
LABEL_38:
        v45 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          if ((google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45) & 1) == 0)
            goto LABEL_99;
          v22 = v45;
        }
        else
        {
          v22 = *v13;
          *((_QWORD *)a2 + 1) = v13 + 1;
        }
        if (v22 > 4)
        {
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v43, v7);
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v43, v22);
        }
        else
        {
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 11) = v22;
        }
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v23 >= v14 || *v23 != 24)
          continue;
        v15 = v23 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_49:
        v45 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          if ((google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45) & 1) == 0)
            goto LABEL_99;
          v24 = v45;
        }
        else
        {
          v24 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if (v24 > 4)
        {
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v43, v7);
          google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)v43, v24);
        }
        else
        {
          *((_DWORD *)this + 8) |= 4u;
          *((_DWORD *)this + 12) = v24;
        }
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v25 >= v16 || *v25 != 32)
          continue;
        v17 = v25 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_60:
        v45 = 0;
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))
            goto LABEL_99;
          v26 = v45;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v26 = *v17;
          v27 = v17 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_DWORD *)this + 13) = v26;
        v18 = *((_DWORD *)this + 8) | 8;
        *((_DWORD *)this + 8) = v18;
        if ((unint64_t)v27 >= v16 || *v27 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_68:
        *((_DWORD *)this + 8) = v18 | 0x10;
        v28 = (topotext::Todo *)*((_QWORD *)this + 7);
        if (!v28)
        {
          v28 = (topotext::Todo *)operator new();
          topotext::Todo::Todo(v28, v29, v30);
          *((_QWORD *)this + 7) = v28;
        }
        v45 = 0;
        v31 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))
            goto LABEL_99;
        }
        else
        {
          v45 = *v31;
          *((_QWORD *)a2 + 1) = v31 + 1;
        }
        v32 = *((_DWORD *)a2 + 14);
        v33 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v32 + 1;
        if (v32 >= v33)
          goto LABEL_99;
        v34 = google::protobuf::io::CodedInputStream::PushLimit(a2, v45);
        if (!topotext::Todo::MergePartialFromCodedStream(v28, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_99;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v34);
        v35 = *((_DWORD *)a2 + 14);
        v36 = __OFSUB__(v35, 1);
        v37 = v35 - 1;
        if (v37 < 0 == v36)
          *((_DWORD *)a2 + 14) = v37;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v38 >= v19 || *v38 != 48)
          continue;
        v20 = v38 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_82:
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 16))goto LABEL_99;
          v39 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 16) = *v20;
          v39 = v20 + 1;
          *((_QWORD *)a2 + 1) = v39;
        }
        *((_DWORD *)this + 8) |= 0x20u;
        if ((unint64_t)v39 >= v19 || *v39 != 56)
          continue;
        v21 = v39 + 1;
        *((_QWORD *)a2 + 1) = v21;
        goto LABEL_90;
      case 2u:
        if ((_DWORD)v7 != 16)
          goto LABEL_28;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_38;
      case 3u:
        if ((_DWORD)v7 != 24)
          goto LABEL_28;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_49;
      case 4u:
        if ((_DWORD)v7 != 32)
          goto LABEL_28;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        goto LABEL_60;
      case 5u:
        if ((_DWORD)v7 != 42)
          goto LABEL_28;
        v18 = *((_DWORD *)this + 8);
        goto LABEL_68;
      case 6u:
        if ((_DWORD)v7 != 48)
          goto LABEL_28;
        v20 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_82;
      case 7u:
        if ((_DWORD)v7 != 56)
        {
LABEL_28:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_100;
          goto LABEL_30;
        }
        v21 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
LABEL_90:
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 17))
          {
LABEL_99:
            v41 = 0;
            goto LABEL_101;
          }
          v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_DWORD *)this + 17) = *v21;
          v40 = (unsigned __int8 *)(v21 + 1);
          *((_QWORD *)a2 + 1) = v40;
        }
        *((_DWORD *)this + 8) |= 0x40u;
        if (v40 != (unsigned __int8 *)v19 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v41 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_101:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v43);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v44);
        return v41;
      default:
        goto LABEL_11;
    }
  }
}

void sub_1B4B38F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C40417120EDLL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t topotext::ParagraphStyle::SerializeWithCachedSizes(topotext::ParagraphStyle *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  topotext::ParagraphStyle *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    this = (topotext::ParagraphStyle *)google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 10), a2, a4);
    v6 = *((_DWORD *)v5 + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (topotext::ParagraphStyle *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)2, *((_DWORD *)v5 + 11), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = (topotext::ParagraphStyle *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)3, *((_DWORD *)v5 + 12), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = (topotext::ParagraphStyle *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)4, *((_DWORD *)v5 + 13), a2, a4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_15:
  v9 = *((_QWORD *)v5 + 7);
  if (!v9)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v9 = *(_QWORD *)(topotext::ParagraphStyle::default_instance_ + 56);
  }
  google::protobuf::internal::WireFormatLite::WriteMessage(5, v9, a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_18:
  google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)6, *((_DWORD *)v5 + 16), a2, a4);
  if ((*((_DWORD *)v5 + 8) & 0x40) != 0)
LABEL_8:
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)7, *((_DWORD *)v5 + 17), a2, a4);
LABEL_9:
  if (*((char *)v5 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v5 + 1);
    v8 = *((_QWORD *)v5 + 2);
  }
  else
  {
    v7 = (char *)v5 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v5 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::ParagraphStyle::ByteSize(topotext::ParagraphStyle *this)
{
  int v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  google::protobuf::io::CodedOutputStream *v6;
  int v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  google::protobuf::io::CodedOutputStream *v10;
  int v11;
  topotext::Todo *v12;
  google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  google::protobuf::io::CodedOutputStream *v16;
  int v17;
  google::protobuf::io::CodedOutputStream *v18;
  int v19;
  uint64_t v20;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_48;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_16;
    goto LABEL_10;
  }
  v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
  if (v4 >= 0x80)
  {
    v5 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v5 = 1;
  }
  v3 = v5 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    v6 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 11;
    }
    else if (v6 >= 0x80)
    {
      v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v7 = 2;
    }
    v3 += v7;
  }
LABEL_16:
  if ((v2 & 4) != 0)
  {
    v8 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v8 & 0x80000000) != 0)
    {
      v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v9 = 2;
    }
    v3 += v9;
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  v10 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 13);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = 11;
  }
  else if (v10 >= 0x80)
  {
    v11 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v11 = 2;
  }
  v3 += v11;
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_34:
  v12 = (topotext::Todo *)*((_QWORD *)this + 7);
  if (!v12)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(0);
    v12 = *(topotext::Todo **)(topotext::ParagraphStyle::default_instance_ + 56);
  }
  v13 = (google::protobuf::io::CodedOutputStream *)topotext::Todo::ByteSize(v12);
  v14 = (int)v13;
  if (v13 >= 0x80)
    v15 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
  else
    v15 = 1;
  v3 += v14 + v15 + 1;
  v2 = *((_DWORD *)this + 8);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_44;
  }
LABEL_40:
  v16 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v16 >= 0x80)
  {
    v17 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v17 = 2;
  }
  v3 += v17;
  if ((v2 & 0x40) != 0)
  {
LABEL_44:
    v18 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 17);
    if (v18 >= 0x80)
      v19 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18) + 1;
    else
      v19 = 2;
    v3 += v19;
  }
LABEL_48:
  if (*((char *)this + 31) < 0)
    v20 = *((_QWORD *)this + 2);
  else
    LODWORD(v20) = *((unsigned __int8 *)this + 31);
  result = (v3 + v20);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::ParagraphStyle::CheckTypeAndMergeFrom(topotext::ParagraphStyle *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::ParagraphStyle::MergeFrom(this, lpsrc, v5);
}

std::string *topotext::Todo::MergeFrom(topotext::Todo *this, const topotext::Todo *a2, uint64_t a3)
{
  std::string *v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  char v9;
  const std::string::value_type *v10;
  char *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 6777);
    v5 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v7 = (const std::string *)*((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v8 = (std::string *)*((_QWORD *)this + 5);
      if (v8 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 5) = v8;
      }
      std::string::operator=(v8, v7);
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 2) != 0)
    {
      v9 = *((_BYTE *)a2 + 48);
      *((_DWORD *)this + 8) |= 2u;
      *((_BYTE *)this + 48) = v9;
    }
  }
  v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  return std::string::append((std::string *)((char *)this + 8), v14, v15);
}

void sub_1B4B393E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::ParagraphStyle::IsInitialized(topotext::ParagraphStyle *this)
{
  return 1;
}

_QWORD *topotext::ParagraphStyle::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.ParagraphStyle");
}

topotext::HashtagInfo *topotext::HashtagInfo::HashtagInfo(topotext::HashtagInfo *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6C20;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::HashtagInfo::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B39458(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::HashtagInfo::SharedCtor(topotext::HashtagInfo *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
}

void sub_1B4B39504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::HashtagInfo::~HashtagInfo(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F6C20;
  topotext::VectorTimestamp_Clock::SharedDtor((topotext::VectorTimestamp_Clock *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::HashtagInfo::~HashtagInfo(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

topotext::HashtagInfo *topotext::HashtagInfo::New(topotext::HashtagInfo *this)
{
  topotext::HashtagInfo *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::HashtagInfo *)operator new();
  topotext::HashtagInfo::HashtagInfo(v1, v2, v3);
  return v1;
}

void sub_1B4B395C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C400074EEDFLL);
  _Unwind_Resume(a1);
}

uint64_t topotext::HashtagInfo::MergePartialFromCodedStream(topotext::HashtagInfo *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v13[32];
  _QWORD v14[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v14, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v13, (google::protobuf::io::ZeroCopyOutputStream *)v14);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_15;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 == 10)
        break;
LABEL_15:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
        v11 = 1;
        goto LABEL_23;
      }
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v13, v4))goto LABEL_20;
    }
    *((_DWORD *)this + 8) |= 1u;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v9 = (std::string *)*((_QWORD *)this + 5);
    if (v9 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__r.__words[0] = 0;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)this + 5) = v9;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
    {
LABEL_20:
      v11 = 0;
      goto LABEL_23;
    }
  }
  while (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  v11 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_23:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v13);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v14);
  return v11;
}

void sub_1B4B39784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::HashtagInfo::SerializeWithCachedSizes(topotext::HashtagInfo *this, google::protobuf::io::CodedOutputStream *a2)
{
  char *v4;
  uint64_t v5;

  if ((*((_BYTE *)this + 32) & 1) != 0)
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 5), a2);
  if (*((char *)this + 31) < 0)
  {
    v4 = (char *)*((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 2);
  }
  else
  {
    v4 = (char *)this + 8;
    LODWORD(v5) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v4, v5);
}

uint64_t topotext::HashtagInfo::ByteSize(topotext::HashtagInfo *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = v6;
    if (v7 >= 0x80)
    {
      v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v7);
      v4 = *(unsigned __int8 *)(v3 + 23);
      v6 = *(_QWORD *)(v3 + 8);
      v8 = v9 + 1;
      v5 = *(_BYTE *)(v3 + 23);
    }
    else
    {
      v8 = 2;
    }
    if (v5 < 0)
      v4 = v6;
    v2 = v8 + v4;
  }
  else
  {
    v2 = 0;
  }
  if (*((char *)this + 31) < 0)
    v10 = *((_QWORD *)this + 2);
  else
    LODWORD(v10) = *((unsigned __int8 *)this + 31);
  result = (v10 + v2);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::HashtagInfo::CheckTypeAndMergeFrom(topotext::HashtagInfo *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::HashtagInfo::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::HashtagInfo::IsInitialized(topotext::HashtagInfo *this)
{
  return 1;
}

_QWORD *topotext::HashtagInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.HashtagInfo");
}

topotext::AttachmentInfo *topotext::AttachmentInfo::AttachmentInfo(topotext::AttachmentInfo *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6D88;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::AttachmentInfo::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3993C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::AttachmentInfo::SharedCtor(topotext::AttachmentInfo *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 5) = google::protobuf::internal::empty_string_;
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B399EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::AttachmentInfo::~AttachmentInfo(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F6D88;
  topotext::AttachmentInfo::SharedDtor((topotext::AttachmentInfo *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::AttachmentInfo::~AttachmentInfo(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::AttachmentInfo::SharedDtor(topotext::AttachmentInfo *this, uint64_t a2, uint64_t a3)
{
  topotext::AttachmentInfo *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 5);
  if (v4 != google::protobuf::internal::empty_string_)
  {
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      this = (topotext::AttachmentInfo *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
      v4 = google::protobuf::internal::empty_string_;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, v5, v6);
    }
    else
    {
      v4 = google::protobuf::internal::empty_string_;
    }
  }
  v7 = *((_QWORD *)v3 + 6);
  if (v7 != v4 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (topotext::AttachmentInfo *)MEMORY[0x1B5E3DB94](v7, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
}

topotext::AttachmentInfo *topotext::AttachmentInfo::New(topotext::AttachmentInfo *this)
{
  topotext::AttachmentInfo *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::AttachmentInfo *)operator new();
  topotext::AttachmentInfo::AttachmentInfo(v1, v2, v3);
  return v1;
}

void sub_1B4B39B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40CCCF3E6ELL);
  _Unwind_Resume(a1);
}

uint64_t topotext::AttachmentInfo::MergePartialFromCodedStream(topotext::AttachmentInfo *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  _BYTE *v10;
  BOOL v11;
  std::string *v12;
  uint64_t v13;
  _BYTE v15[32];
  _QWORD v16[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v16, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v15, (google::protobuf::io::ZeroCopyOutputStream *)v16);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_16;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 != 2)
        break;
      if ((_DWORD)v7 != 18)
        goto LABEL_23;
LABEL_26:
      *((_DWORD *)this + 8) |= 2u;
      if (!google::protobuf::internal::empty_string_)
LABEL_37:
        __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
      v12 = (std::string *)*((_QWORD *)this + 6);
      if (v12 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v12 = (std::string *)operator new();
        v12->__r_.__value_.__r.__words[0] = 0;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        *((_QWORD *)this + 6) = v12;
      }
      if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v12))
      {
LABEL_34:
        v13 = 0;
        goto LABEL_36;
      }
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v13 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_36;
      }
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      if (!google::protobuf::internal::empty_string_)
        goto LABEL_37;
      v9 = (std::string *)*((_QWORD *)this + 5);
      if (v9 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__r.__words[0] = 0;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        *((_QWORD *)this + 5) = v9;
      }
      if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
        goto LABEL_34;
      v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 < *((_QWORD *)a2 + 2) && *v10 == 18)
      {
        *((_QWORD *)a2 + 1) = v10 + 1;
        goto LABEL_26;
      }
    }
    else
    {
LABEL_23:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_35;
LABEL_20:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v15, v4))goto LABEL_34;
    }
  }
LABEL_16:
  if ((_DWORD)v7)
    v11 = (v7 & 7) == 4;
  else
    v11 = 1;
  if (!v11)
    goto LABEL_20;
LABEL_35:
  v13 = 1;
LABEL_36:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v15);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v16);
  return v13;
}

void sub_1B4B39DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::AttachmentInfo::SerializeWithCachedSizes(topotext::AttachmentInfo *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 5), a2);
    v4 = *((_DWORD *)this + 8);
  }
  if ((v4 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 6), a2);
  if (*((char *)this + 31) < 0)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    v6 = *((_QWORD *)this + 2);
  }
  else
  {
    v5 = (char *)this + 8;
    LODWORD(v6) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v5, v6);
}

uint64_t topotext::AttachmentInfo::ByteSize(topotext::AttachmentInfo *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_24;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 8);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = v9 + v5;
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 6);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 += v16 + v12 + 1;
  }
LABEL_24:
  if (*((char *)this + 31) < 0)
    v17 = *((_QWORD *)this + 2);
  else
    LODWORD(v17) = *((unsigned __int8 *)this + 31);
  result = (v3 + v17);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::AttachmentInfo::CheckTypeAndMergeFrom(std::string *this, std::string *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::AttachmentInfo::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::AttachmentInfo::IsInitialized(topotext::AttachmentInfo *this)
{
  return 1;
}

_QWORD *topotext::AttachmentInfo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.AttachmentInfo");
}

topotext::Attachment *topotext::Attachment::Attachment(topotext::Attachment *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6BA8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  topotext::Attachment::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3A02C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  void **v4;
  uint64_t *v5;

  v5 = v2;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v4);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

double topotext::Attachment::SharedCtor(topotext::Attachment *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD v7[2];
  char v8;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v7[0] = &off_1E67F6B80;
    v7[1] = google::protobuf::internal::InitEmptyString;
    v8 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v7);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v7);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 6) = google::protobuf::internal::empty_string_;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = v5;
  *((_QWORD *)this + 9) = v5;
  *((_QWORD *)this + 10) = v5;
  *((_QWORD *)this + 11) = v5;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_QWORD *)this + 39) = v5;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 21) = v5;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = v5;
  result = 0.0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = v5;
  *((_QWORD *)this + 38) = v5;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
  return result;
}

void sub_1B4B3A134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::Attachment::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  topotext *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int32 v8;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  __int32 v13;
  __int32 v14;
  const std::string *v15;
  std::string *v16;
  const std::string *v17;
  std::string *v18;
  const std::string *v19;
  std::string *v20;
  const std::string *v21;
  std::string *v22;
  topotext::Location *v23;
  uint64_t v24;
  uint64_t v25;
  const topotext::Location *v26;
  topotext::Media *v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  int32x2_t v31;
  const std::string *v32;
  std::string *v33;
  int32x2_t v34;
  __int32 v35;
  const std::string *v36;
  std::string *v37;
  const std::string *v38;
  std::string *v39;
  const std::string *v40;
  std::string *v41;
  const std::string::value_type *v42;
  int32x2_t *v43;
  int32x2_t v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  int32x2_t v52;
  __int8 v53;
  int32x2_t v54;
  int32x2_t v55;
  __int32 v56;
  const std::string *v57;
  std::string *v58;
  int32x2_t v59;
  int32x2_t v60;
  int32x2_t v61;
  int32x2_t v62;
  int32x2_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  char v67;
  std::string v68[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v68, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 5330);
    v4 = google::protobuf::internal::LogMessage::operator<<(v68, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v67, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v68[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>(this + 14, a2 + 14);
  v5 = (topotext *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((google::protobuf::internal::RepeatedPtrFieldBase *)&this[25]);
  v8 = a2[4].u32[0];
  if (!(_BYTE)v8)
    goto LABEL_39;
  if ((v8 & 1) != 0)
  {
    v9 = (const std::string *)a2[5];
    this[4].i32[0] |= 1u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v10 = (std::string *)this[5];
    if (v10 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v10 = (std::string *)operator new();
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      this[5] = (int32x2_t)v10;
    }
    v5 = (topotext *)std::string::operator=(v10, v9);
    v8 = a2[4].u32[0];
  }
  if ((v8 & 2) != 0)
  {
    v11 = (const std::string *)a2[6];
    this[4].i32[0] |= 2u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v12 = (std::string *)this[6];
    if (v12 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v12 = (std::string *)operator new();
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      this[6] = (int32x2_t)v12;
    }
    v5 = (topotext *)std::string::operator=(v12, v11);
    v8 = a2[4].u32[0];
  }
  if ((v8 & 4) != 0)
  {
    v13 = a2[7].i32[0];
    this[4].i32[0] |= 4u;
    this[7].i32[0] = v13;
    v8 = a2[4].u32[0];
    if ((v8 & 8) == 0)
    {
LABEL_16:
      if ((v8 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_23;
    }
  }
  else if ((v8 & 8) == 0)
  {
    goto LABEL_16;
  }
  v14 = a2[7].i32[1];
  this[4].i32[0] |= 8u;
  this[7].i32[1] = v14;
  v8 = a2[4].u32[0];
  if ((v8 & 0x10) == 0)
  {
LABEL_17:
    if ((v8 & 0x20) == 0)
      goto LABEL_18;
LABEL_27:
    v17 = (const std::string *)a2[9];
    this[4].i32[0] |= 0x20u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v18 = (std::string *)this[9];
    if (v18 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v18 = (std::string *)operator new();
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      this[9] = (int32x2_t)v18;
    }
    v5 = (topotext *)std::string::operator=(v18, v17);
    v8 = a2[4].u32[0];
    if ((v8 & 0x40) == 0)
    {
LABEL_19:
      if ((v8 & 0x80) == 0)
        goto LABEL_39;
      goto LABEL_35;
    }
    goto LABEL_31;
  }
LABEL_23:
  v15 = (const std::string *)a2[8];
  this[4].i32[0] |= 0x10u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
  v16 = (std::string *)this[8];
  if (v16 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v16 = (std::string *)operator new();
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    this[8] = (int32x2_t)v16;
  }
  v5 = (topotext *)std::string::operator=(v16, v15);
  v8 = a2[4].u32[0];
  if ((v8 & 0x20) != 0)
    goto LABEL_27;
LABEL_18:
  if ((v8 & 0x40) == 0)
    goto LABEL_19;
LABEL_31:
  v19 = (const std::string *)a2[10];
  this[4].i32[0] |= 0x40u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
  v20 = (std::string *)this[10];
  if (v20 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    this[10] = (int32x2_t)v20;
  }
  v5 = (topotext *)std::string::operator=(v20, v19);
  v8 = a2[4].u32[0];
  if ((v8 & 0x80) != 0)
  {
LABEL_35:
    v21 = (const std::string *)a2[11];
    this[4].i32[0] |= 0x80u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v22 = (std::string *)this[11];
    if (v22 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v22 = (std::string *)operator new();
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      this[11] = (int32x2_t)v22;
    }
    v5 = (topotext *)std::string::operator=(v22, v21);
    v8 = a2[4].u32[0];
  }
LABEL_39:
  if ((v8 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v8 & 0x100) != 0)
  {
    this[4].i32[0] |= 0x100u;
    v23 = (topotext::Location *)this[12];
    if (!v23)
    {
      v23 = (topotext::Location *)operator new();
      v5 = topotext::Location::Location(v23, v24, v25);
      this[12] = (int32x2_t)v23;
    }
    v26 = (const topotext::Location *)a2[12];
    if (!v26)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(v5);
      v26 = *(const topotext::Location **)(topotext::Attachment::default_instance_ + 96);
    }
    v5 = (topotext *)topotext::Location::MergeFrom(v23, v26, v7);
    v8 = a2[4].u32[0];
  }
  if ((v8 & 0x200) != 0)
  {
    this[4].i32[0] |= 0x200u;
    v27 = (topotext::Media *)this[13];
    if (!v27)
    {
      v27 = (topotext::Media *)operator new();
      v5 = topotext::Media::Media(v27, v28, v29);
      this[13] = (int32x2_t)v27;
    }
    v30 = (std::string *)a2[13];
    if (!v30)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(v5);
      v30 = *(std::string **)(topotext::Attachment::default_instance_ + 104);
    }
    v5 = (topotext *)topotext::Media::MergeFrom((std::string *)v27, v30, v7);
    v8 = a2[4].u32[0];
  }
  if ((v8 & 0x800) != 0)
  {
    v49 = a2[17].i32[0];
    this[4].i32[0] |= 0x800u;
    this[17].i32[0] = v49;
    v8 = a2[4].u32[0];
    if ((v8 & 0x1000) == 0)
    {
LABEL_54:
      if ((v8 & 0x2000) == 0)
        goto LABEL_55;
      goto LABEL_105;
    }
  }
  else if ((v8 & 0x1000) == 0)
  {
    goto LABEL_54;
  }
  v50 = a2[17].i32[1];
  this[4].i32[0] |= 0x1000u;
  this[17].i32[1] = v50;
  v8 = a2[4].u32[0];
  if ((v8 & 0x2000) == 0)
  {
LABEL_55:
    if ((v8 & 0x4000) == 0)
      goto LABEL_56;
    goto LABEL_106;
  }
LABEL_105:
  v51 = a2[20].i32[0];
  this[4].i32[0] |= 0x2000u;
  this[20].i32[0] = v51;
  v8 = a2[4].u32[0];
  if ((v8 & 0x4000) == 0)
  {
LABEL_56:
    if ((v8 & 0x8000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_106:
  v52 = a2[18];
  this[4].i32[0] |= 0x4000u;
  this[18] = v52;
  v8 = a2[4].u32[0];
  if ((v8 & 0x8000) != 0)
  {
LABEL_57:
    v31 = a2[19];
    this[4].i32[0] |= 0x8000u;
    this[19] = v31;
    v8 = a2[4].u32[0];
  }
LABEL_58:
  if ((v8 & 0xFF0000) == 0)
    goto LABEL_71;
  if ((v8 & 0x10000) != 0)
  {
    v32 = (const std::string *)a2[21];
    this[4].i32[0] |= 0x10000u;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
    v33 = (std::string *)this[21];
    if (v33 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v33 = (std::string *)operator new();
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      this[21] = (int32x2_t)v33;
    }
    v5 = (topotext *)std::string::operator=(v33, v32);
    v8 = a2[4].u32[0];
  }
  if ((v8 & 0x20000) != 0)
  {
    v53 = a2[20].i8[4];
    this[4].i32[0] |= 0x20000u;
    this[20].i8[4] = v53;
    v8 = a2[4].u32[0];
    if ((v8 & 0x40000) == 0)
    {
LABEL_66:
      if ((v8 & 0x80000) == 0)
        goto LABEL_67;
      goto LABEL_110;
    }
  }
  else if ((v8 & 0x40000) == 0)
  {
    goto LABEL_66;
  }
  v54 = a2[22];
  this[4].i32[0] |= 0x40000u;
  this[22] = v54;
  v8 = a2[4].u32[0];
  if ((v8 & 0x80000) == 0)
  {
LABEL_67:
    if ((v8 & 0x100000) == 0)
      goto LABEL_68;
    goto LABEL_111;
  }
LABEL_110:
  v55 = a2[23];
  this[4].i32[0] |= 0x80000u;
  this[23] = v55;
  v8 = a2[4].u32[0];
  if ((v8 & 0x100000) == 0)
  {
LABEL_68:
    if ((v8 & 0x200000) == 0)
      goto LABEL_69;
    goto LABEL_112;
  }
LABEL_111:
  v56 = a2[40].i32[0];
  this[4].i32[0] |= 0x100000u;
  this[40].i32[0] = v56;
  v8 = a2[4].u32[0];
  if ((v8 & 0x200000) == 0)
  {
LABEL_69:
    if ((v8 & 0x800000) == 0)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_112:
  v57 = (const std::string *)a2[24];
  this[4].i32[0] |= 0x200000u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
  v58 = (std::string *)this[24];
  if (v58 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v58 = (std::string *)operator new();
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    this[24] = (int32x2_t)v58;
  }
  v5 = (topotext *)std::string::operator=(v58, v57);
  v8 = a2[4].u32[0];
  if ((v8 & 0x800000) != 0)
  {
LABEL_70:
    v34 = a2[28];
    this[4].i32[0] |= 0x800000u;
    this[28] = v34;
    v8 = a2[4].u32[0];
  }
LABEL_71:
  if (!HIBYTE(v8))
    goto LABEL_80;
  if ((v8 & 0x1000000) != 0)
  {
    v59 = a2[29];
    this[4].i32[0] |= 0x1000000u;
    this[29] = v59;
    v8 = a2[4].u32[0];
    if ((v8 & 0x2000000) == 0)
    {
LABEL_74:
      if ((v8 & 0x4000000) == 0)
        goto LABEL_75;
      goto LABEL_119;
    }
  }
  else if ((v8 & 0x2000000) == 0)
  {
    goto LABEL_74;
  }
  v60 = a2[30];
  this[4].i32[0] |= 0x2000000u;
  this[30] = v60;
  v8 = a2[4].u32[0];
  if ((v8 & 0x4000000) == 0)
  {
LABEL_75:
    if ((v8 & 0x8000000) == 0)
      goto LABEL_76;
    goto LABEL_120;
  }
LABEL_119:
  v61 = a2[31];
  this[4].i32[0] |= 0x4000000u;
  this[31] = v61;
  v8 = a2[4].u32[0];
  if ((v8 & 0x8000000) == 0)
  {
LABEL_76:
    if ((v8 & 0x10000000) == 0)
      goto LABEL_77;
    goto LABEL_121;
  }
LABEL_120:
  v62 = a2[32];
  this[4].i32[0] |= 0x8000000u;
  this[32] = v62;
  v8 = a2[4].u32[0];
  if ((v8 & 0x10000000) == 0)
  {
LABEL_77:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_78;
    goto LABEL_122;
  }
LABEL_121:
  v63 = a2[33];
  this[4].i32[0] |= 0x10000000u;
  this[33] = v63;
  v8 = a2[4].u32[0];
  if ((v8 & 0x20000000) == 0)
  {
LABEL_78:
    if ((v8 & 0x40000000) == 0)
      goto LABEL_79;
LABEL_123:
    v65 = a2[35];
    this[4].i32[0] |= 0x40000000u;
    this[35] = v65;
    if ((a2[4].i32[0] & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_124;
  }
LABEL_122:
  v64 = a2[34];
  this[4].i32[0] |= 0x20000000u;
  this[34] = v64;
  v8 = a2[4].u32[0];
  if ((v8 & 0x40000000) != 0)
    goto LABEL_123;
LABEL_79:
  if ((v8 & 0x80000000) == 0)
    goto LABEL_80;
LABEL_124:
  v66 = a2[36];
  this[4].i32[0] |= 0x80000000;
  this[36] = v66;
LABEL_80:
  LOBYTE(v35) = a2[4].i8[4];
  if ((_BYTE)v35)
  {
    if ((a2[4].i8[4] & 1) != 0)
    {
      v36 = (const std::string *)a2[37];
      this[4].i32[1] |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
      v37 = (std::string *)this[37];
      if (v37 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v37 = (std::string *)operator new();
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        this[37] = (int32x2_t)v37;
      }
      v5 = (topotext *)std::string::operator=(v37, v36);
      v35 = a2[4].i32[1];
    }
    if ((v35 & 2) != 0)
    {
      v38 = (const std::string *)a2[38];
      this[4].i32[1] |= 2u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
      v39 = (std::string *)this[38];
      if (v39 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v39 = (std::string *)operator new();
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        this[38] = (int32x2_t)v39;
      }
      v5 = (topotext *)std::string::operator=(v39, v38);
      v35 = a2[4].i32[1];
    }
    if ((v35 & 4) != 0)
    {
      v40 = (const std::string *)a2[39];
      this[4].i32[1] |= 4u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)v5, v6, v7);
      v41 = (std::string *)this[39];
      if (v41 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v41 = (std::string *)operator new();
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        this[39] = (int32x2_t)v41;
      }
      std::string::operator=(v41, v40);
    }
  }
  v44 = a2[1];
  v43 = a2 + 1;
  v42 = (const std::string::value_type *)v44;
  v45 = v43[2].i8[7];
  if (v45 >= 0)
    v46 = (const std::string::value_type *)v43;
  else
    v46 = v42;
  if (v45 >= 0)
    v47 = v43[2].u8[7];
  else
    v47 = (std::string::size_type)v43[1];
  return std::string::append((std::string *)&this[1], v46, v47);
}

void sub_1B4B3A9BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40DF275E33);
  _Unwind_Resume(a1);
}

void topotext::Attachment::~Attachment(topotext::Attachment *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6BA8;
  topotext::Attachment::SharedDtor(this, a2, a3);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 25);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 14);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Attachment::~Attachment(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::Attachment::SharedDtor(topotext::Attachment *this, uint64_t a2, uint64_t a3)
{
  topotext::Attachment *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 5);
  if (v4 != google::protobuf::internal::empty_string_)
  {
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
      v4 = google::protobuf::internal::empty_string_;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
    }
    else
    {
      v4 = google::protobuf::internal::empty_string_;
    }
  }
  v5 = *((_QWORD *)v3 + 6);
  if (v5 != v4 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v5, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
  }
  if (!v4)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v7 = *((_QWORD *)v3 + 8);
  if (v7 != v4 && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v7, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v8, v9);
  }
  v10 = *((_QWORD *)v3 + 9);
  if (v10 != v4 && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v10, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v11, v12);
  }
  v13 = *((_QWORD *)v3 + 10);
  if (v13 != v4 && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v13, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v14, v15);
  }
  v16 = *((_QWORD *)v3 + 11);
  if (v16 != v4 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v16, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v17, v18);
  }
  v19 = *((_QWORD *)v3 + 21);
  if (v19 != v4 && v19)
  {
    if (*(char *)(v19 + 23) < 0)
      operator delete(*(void **)v19);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v19, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v20, v21);
  }
  v22 = *((_QWORD *)v3 + 24);
  if (v22 != v4 && v22)
  {
    if (*(char *)(v22 + 23) < 0)
      operator delete(*(void **)v22);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v22, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v23, v24);
  }
  v25 = *((_QWORD *)v3 + 37);
  if (v25 != v4 && v25)
  {
    if (*(char *)(v25 + 23) < 0)
      operator delete(*(void **)v25);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v25, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v26, v27);
  }
  v28 = *((_QWORD *)v3 + 38);
  if (v28 != v4 && v28)
  {
    if (*(char *)(v28 + 23) < 0)
      operator delete(*(void **)v28);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v28, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v29, v30);
  }
  v31 = *((_QWORD *)v3 + 39);
  if (v31 && v31 != v4)
  {
    if (*(char *)(v31 + 23) < 0)
      operator delete(*(void **)v31);
    this = (topotext::Attachment *)MEMORY[0x1B5E3DB94](v31, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
  if ((topotext::Attachment *)topotext::Attachment::default_instance_ != v3)
  {
    v32 = *((_QWORD *)v3 + 12);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = *((_QWORD *)v3 + 13);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
}

topotext::Attachment *topotext::Attachment::New(topotext::Attachment *this)
{
  topotext::Attachment *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Attachment *)operator new();
  topotext::Attachment::Attachment(v1, v2, v3);
  return v1;
}

void sub_1B4B3AE2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40207117CFLL);
  _Unwind_Resume(a1);
}

uint64_t topotext::Attachment::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if (v4)
  {
    *(_QWORD *)(this + 56) = 0;
    if ((v4 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(this + 40);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 2) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v6 = *(_QWORD *)(this + 48);
      if (v6 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 0x10) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v7 = *(_QWORD *)(this + 64);
      if (v7 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 0x20) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v8 = *(_QWORD *)(this + 72);
      if (v8 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v8 + 23) < 0)
        {
          **(_BYTE **)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v8 = 0;
          *(_BYTE *)(v8 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 0x40) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v9 = *(_QWORD *)(this + 80);
      if (v9 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 0x80) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v10 = *(_QWORD *)(this + 88);
      if (v10 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v10 + 23) < 0)
        {
          **(_BYTE **)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v10 = 0;
          *(_BYTE *)(v10 + 23) = 0;
        }
      }
    }
  }
  v11 = *(_DWORD *)(this + 32);
  if ((v11 & 0xFB00) != 0)
  {
    *(_QWORD *)(this + 136) = 0;
    *(_QWORD *)(this + 144) = 0;
    *(_DWORD *)(this + 160) = 0;
    *(_QWORD *)(this + 152) = 0;
    if ((v11 & 0x100) != 0)
    {
      this = *(_QWORD *)(this + 96);
      if (this)
      {
        this = topotext::Location::Clear(this, a2, a3);
        v11 = *(_DWORD *)(v3 + 32);
      }
    }
    if ((v11 & 0x200) != 0)
    {
      this = *(_QWORD *)(v3 + 104);
      if (this)
      {
        this = topotext::Media::Clear(this, a2, a3);
        v11 = *(_DWORD *)(v3 + 32);
      }
    }
  }
  if ((v11 & 0xBF0000) != 0)
  {
    *(_QWORD *)(v3 + 176) = 0;
    *(_QWORD *)(v3 + 184) = 0;
    if ((v11 & 0x10000) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v12 = *(_QWORD *)(v3 + 168);
      if (v12 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v12 + 23) < 0)
        {
          **(_BYTE **)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *(_BYTE *)(v12 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(v3 + 164) = 0;
    *(_DWORD *)(v3 + 320) = 0;
    if ((*(_BYTE *)(v3 + 34) & 0x20) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v13 = *(_QWORD *)(v3 + 192);
      if (v13 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(v3 + 224) = 0;
    v11 = *(_DWORD *)(v3 + 32);
  }
  if (HIBYTE(v11))
  {
    *(_OWORD *)(v3 + 232) = 0u;
    *(_OWORD *)(v3 + 264) = 0u;
    *(_OWORD *)(v3 + 280) = 0u;
    *(_OWORD *)(v3 + 248) = 0u;
  }
  v14 = *(_DWORD *)(v3 + 36);
  if ((v14 & 7) != 0)
  {
    if ((v14 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v15 = *(_QWORD *)(v3 + 296);
      if (v15 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v16 = *(_QWORD *)(v3 + 304);
      if (v16 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v16 + 23) < 0)
        {
          **(_BYTE **)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v16 = 0;
          *(_BYTE *)(v16 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v3 + 36) & 4) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v17 = *(_QWORD *)(v3 + 312);
      if (v17 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v17 + 23) < 0)
        {
          **(_BYTE **)v17 = 0;
          *(_QWORD *)(v17 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v17 = 0;
          *(_BYTE *)(v17 + 23) = 0;
        }
      }
    }
  }
  if (*(int *)(v3 + 120) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 112) + 8 * v18);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      ++v18;
    }
    while (v18 < *(int *)(v3 + 120));
  }
  *(_DWORD *)(v3 + 120) = 0;
  if (*(int *)(v3 + 208) >= 1)
  {
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 200) + 8 * v20);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
      ++v20;
    }
    while (v20 < *(int *)(v3 + 208));
  }
  *(_DWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t topotext::Location::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 0xF) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    *(_QWORD *)(this + 48) = 0;
    if ((v3 & 4) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 56);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    *(_BYTE *)(this + 64) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::Media::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 0x1F) != 0)
  {
    if ((v3 & 1) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 40);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 2) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(this + 48);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 4) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v6 = *(_QWORD *)(this + 56);
      if (v6 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v6 + 23) < 0)
        {
          **(_BYTE **)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v6 = 0;
          *(_BYTE *)(v6 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 8) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v7 = *(_QWORD *)(this + 64);
      if (v7 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    *(_QWORD *)(this + 72) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::Attachment::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  BOOL v11;
  unsigned int TagFallback;
  std::string *v13;
  _BYTE *v14;
  int v15;
  int v16;
  std::string *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  std::string *v21;
  _BYTE *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  std::string *v27;
  _BYTE *v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  std::string *v32;
  _BYTE *v33;
  std::string *v34;
  _BYTE *v35;
  unsigned __int8 *v36;
  topotext::Location *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  _BYTE *v49;
  topotext::Media *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int32x2_t v62;
  topotext::PreviewImage *v63;
  int32x2_t v64;
  int32x2_t v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned int v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  std::string *v79;
  unsigned __int8 *v80;
  int32x2_t v81;
  unsigned __int8 *v82;
  int32x2_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned __int8 *v87;
  std::string *v88;
  unsigned __int8 *v89;
  int v90;
  uint64_t v91;
  int32x2_t v92;
  topotext::Attachment *v93;
  int32x2_t v94;
  int32x2_t v95;
  char *v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int32x2_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  std::string *v113;
  unsigned __int8 *v114;
  std::string *v115;
  unsigned __int8 *v116;
  std::string *v117;
  uint64_t v118;
  _BYTE v120[32];
  _QWORD v121[2];
  unsigned int v122[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v121, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v120, (google::protobuf::io::ZeroCopyOutputStream *)v121);
LABEL_2:
  while (2)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      v6 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v5 < v6)
      {
        v7 = *v5;
        if (*v5 >= 1)
        {
          *((_DWORD *)a2 + 8) = v7;
          v8 = (unsigned __int8 *)(v5 + 1);
          goto LABEL_8;
        }
        if ((unint64_t)(v5 + 1) < v6)
        {
          v9 = v5[1];
          if ((v7 & ~v9) >= 0x80)
            break;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) != 0)
        goto LABEL_16;
LABEL_9:
      if ((_DWORD)v10)
        v11 = (v10 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
LABEL_351:
        v118 = 1;
        goto LABEL_352;
      }
LABEL_138:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v10, (google::protobuf::io::CodedOutputStream *)v120, v4))goto LABEL_350;
    }
    v7 = (v7 + (v9 << 7) - 128);
    *((_DWORD *)a2 + 8) = v7;
    v8 = (unsigned __int8 *)(v5 + 2);
LABEL_8:
    *((_QWORD *)a2 + 1) = v8;
    v10 = v7 | 0x100000000;
LABEL_16:
    switch(v10 >> 3)
    {
      case 2u:
        if ((_DWORD)v10 != 18)
          goto LABEL_136;
        this[4].i32[0] |= 1u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v13 = (std::string *)this[5];
        if (v13 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v13 = (std::string *)operator new();
          v13->__r_.__value_.__r.__words[0] = 0;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          this[5] = (int32x2_t)v13;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v13))
          goto LABEL_350;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_56:
        this[4].i32[0] |= 2u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v17 = (std::string *)this[6];
        if (v17 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v17 = (std::string *)operator new();
          v17->__r_.__value_.__r.__words[0] = 0;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          this[6] = (int32x2_t)v17;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v17))
          goto LABEL_350;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 37)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_63:
        v122[0] = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v122))
          goto LABEL_350;
        this[7].i32[0] = v122[0];
        this[4].i32[0] |= 4u;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 45)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_67:
        v122[0] = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v122))
          goto LABEL_350;
        this[7].i32[1] = v122[0];
        v16 = this[4].i32[0] | 8;
        this[4].i32[0] = v16;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_71:
        this[4].i32[0] = v16 | 0x10;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v21 = (std::string *)this[8];
        if (v21 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v21 = (std::string *)operator new();
          v21->__r_.__value_.__r.__words[0] = 0;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          this[8] = (int32x2_t)v21;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v21))
          goto LABEL_350;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_85:
        this[4].i32[0] |= 0x20u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v27 = (std::string *)this[9];
        if (v27 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v27 = (std::string *)operator new();
          v27->__r_.__value_.__r.__words[0] = 0;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          this[9] = (int32x2_t)v27;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v27))
          goto LABEL_350;
        v28 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v28 >= *((_QWORD *)a2 + 2) || *v28 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_97:
        this[4].i32[0] |= 0x40u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v32 = (std::string *)this[10];
        if (v32 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v32 = (std::string *)operator new();
          v32->__r_.__value_.__r.__words[0] = 0;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          this[10] = (int32x2_t)v32;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v32))
          goto LABEL_350;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_104:
        this[4].i32[0] |= 0x80u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v34 = (std::string *)this[11];
        if (v34 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v34 = (std::string *)operator new();
          v34->__r_.__value_.__r.__words[0] = 0;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          this[11] = (int32x2_t)v34;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v34))
          goto LABEL_350;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_116:
        this[4].i32[0] |= 0x100u;
        v37 = (topotext::Location *)this[12];
        if (!v37)
        {
          v37 = (topotext::Location *)operator new();
          topotext::Location::Location(v37, v38, v39);
          this[12] = (int32x2_t)v37;
        }
        v122[0] = 0;
        v40 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
            goto LABEL_350;
        }
        else
        {
          v122[0] = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        v43 = *((_DWORD *)a2 + 14);
        v44 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v43 + 1;
        if (v43 >= v44)
          goto LABEL_350;
        v45 = google::protobuf::io::CodedInputStream::PushLimit(a2, v122[0]);
        if (!topotext::Location::MergePartialFromCodedStream(v37, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_350;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v45);
        v46 = *((_DWORD *)a2 + 14);
        v47 = __OFSUB__(v46, 1);
        v48 = v46 - 1;
        if (v48 < 0 == v47)
          *((_DWORD *)a2 + 14) = v48;
        v49 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v49 + 1;
LABEL_149:
        this[4].i32[0] |= 0x200u;
        v50 = (topotext::Media *)this[13];
        if (!v50)
        {
          v50 = (topotext::Media *)operator new();
          topotext::Media::Media(v50, v51, v52);
          this[13] = (int32x2_t)v50;
        }
        v122[0] = 0;
        v53 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v53 >= *((_QWORD *)a2 + 2) || *v53 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
            goto LABEL_350;
        }
        else
        {
          v122[0] = *v53;
          *((_QWORD *)a2 + 1) = v53 + 1;
        }
        v54 = *((_DWORD *)a2 + 14);
        v55 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v54 + 1;
        if (v54 >= v55)
          goto LABEL_350;
        v56 = google::protobuf::io::CodedInputStream::PushLimit(a2, v122[0]);
        if (!topotext::Media::MergePartialFromCodedStream(v50, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_350;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v56);
        v57 = *((_DWORD *)a2 + 14);
        v47 = __OFSUB__(v57, 1);
        v58 = v57 - 1;
        if (v58 < 0 == v47)
          *((_DWORD *)a2 + 14) = v58;
        v59 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v59 >= *((_QWORD *)a2 + 2) || *v59 != 98)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v59 + 1;
LABEL_163:
          v60 = this[15].i32[1];
          v61 = this[15].i32[0];
          if ((int)v61 >= v60)
          {
            if (v60 == this[16].i32[0])
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[14], v60 + 1);
            v63 = google::protobuf::internal::GenericTypeHandler<topotext::PreviewImage>::New();
            v64 = this[14];
            v65 = this[15];
            this[15] = vadd_s32(v65, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v64 + 8 * v65.i32[0]) = v63;
          }
          else
          {
            v62 = this[14];
            this[15].i32[0] = v61 + 1;
            v63 = *(topotext::PreviewImage **)(*(_QWORD *)&v62 + 8 * v61);
          }
          v122[0] = 0;
          v66 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v66 >= *((_QWORD *)a2 + 2) || *v66 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
              goto LABEL_350;
          }
          else
          {
            v122[0] = *v66;
            *((_QWORD *)a2 + 1) = v66 + 1;
          }
          v67 = *((_DWORD *)a2 + 14);
          v68 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v67 + 1;
          if (v67 >= v68)
            goto LABEL_350;
          v69 = google::protobuf::io::CodedInputStream::PushLimit(a2, v122[0]);
          if (!topotext::PreviewImage::MergePartialFromCodedStream(v63, a2) || !*((_BYTE *)a2 + 36))
            goto LABEL_350;
          google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v69);
          v70 = *((_DWORD *)a2 + 14);
          v47 = __OFSUB__(v70, 1);
          v71 = v70 - 1;
          if (v71 < 0 == v47)
            *((_DWORD *)a2 + 14) = v71;
          v59 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v59 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v72 = *v59;
        }
        while (v72 == 98);
        if (v72 != 109)
          continue;
        *((_QWORD *)a2 + 1) = v59 + 1;
LABEL_181:
        v122[0] = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v122))
          goto LABEL_350;
        this[17].i32[0] = v122[0];
        this[4].i32[0] |= 0x800u;
        v73 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v73 >= *((_QWORD *)a2 + 2) || *v73 != 117)
          continue;
        *((_QWORD *)a2 + 1) = v73 + 1;
LABEL_185:
        v122[0] = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v122))
          goto LABEL_350;
        this[17].i32[1] = v122[0];
        this[4].i32[0] |= 0x1000u;
        v74 = (_BYTE *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v74 >= v30 || *v74 != 120)
          continue;
        v31 = v74 + 1;
        *((_QWORD *)a2 + 1) = v31;
LABEL_189:
        v122[0] = 0;
        if ((unint64_t)v31 >= v30 || (char)*v31 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
            goto LABEL_350;
          v75 = v122[0];
          v76 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v75 = *v31;
          v76 = v31 + 1;
          *((_QWORD *)a2 + 1) = v76;
        }
        this[20].i32[0] = v75;
        this[4].i32[0] |= 0x2000u;
        if ((int)v30 - (int)v76 < 2 || *v76 != 129 || v76[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v76 + 2;
LABEL_198:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[18] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x4000u;
        v77 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v77 < 2 || *v77 != 137 || v77[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v77 + 2;
LABEL_203:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[19] = *(int32x2_t *)v122;
        v15 = this[4].i32[0] | 0x8000;
        this[4].i32[0] = v15;
        v78 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v78 < 2 || *v78 != 146 || v78[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v78 + 2;
LABEL_208:
        this[4].i32[0] = v15 | 0x10000;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v79 = (std::string *)this[21];
        if (v79 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v79 = (std::string *)operator new();
          v79->__r_.__value_.__r.__words[0] = 0;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          this[21] = (int32x2_t)v79;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v79))
          goto LABEL_350;
        v80 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        if ((int)v23 - (int)v80 < 2 || *v80 != 152 || v80[1] != 1)
          continue;
        v24 = v80 + 2;
        *((_QWORD *)a2 + 1) = v24;
LABEL_216:
        *(_QWORD *)v122 = 0;
        if ((unint64_t)v24 >= v23 || (char)*v24 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v122))
            goto LABEL_350;
          v81 = *(int32x2_t *)v122;
          v82 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v81 = (int32x2_t)*v24;
          v82 = v24 + 1;
          *((_QWORD *)a2 + 1) = v82;
        }
        this[20].i8[4] = *(_QWORD *)&v81 != 0;
        this[4].i32[0] |= 0x20000u;
        if ((int)v23 - (int)v82 < 2 || *v82 != 160 || v82[1] != 1)
          continue;
        v36 = v82 + 2;
        *((_QWORD *)a2 + 1) = v36;
LABEL_225:
        *(_QWORD *)v122 = 0;
        if ((unint64_t)v36 >= v23 || (char)*v36 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v122))
            goto LABEL_350;
          v83 = *(int32x2_t *)v122;
          v84 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v83 = (int32x2_t)*v36;
          v84 = v36 + 1;
          *((_QWORD *)a2 + 1) = v84;
        }
        this[22] = v83;
        this[4].i32[0] |= 0x40000u;
        if ((int)v23 - (int)v84 < 2 || *v84 != 169 || v84[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v84 + 2;
LABEL_234:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[23] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x80000u;
        v85 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((int)v25 - (int)v85 < 2 || *v85 != 176 || v85[1] != 1)
          continue;
        v26 = v85 + 2;
        *((_QWORD *)a2 + 1) = v26;
LABEL_239:
        v122[0] = 0;
        if ((unint64_t)v26 >= v25 || (char)*v26 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
            goto LABEL_350;
          v86 = v122[0];
          v87 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v25 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v86 = *v26;
          v87 = v26 + 1;
          *((_QWORD *)a2 + 1) = v87;
        }
        this[40].i32[0] = v86;
        v29 = this[4].i32[0] | 0x100000;
        this[4].i32[0] = v29;
        if ((int)v25 - (int)v87 < 2 || *v87 != 186 || v87[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v87 + 2;
LABEL_248:
        this[4].i32[0] = v29 | 0x200000;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v88 = (std::string *)this[24];
        if (v88 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v88 = (std::string *)operator new();
          v88->__r_.__value_.__r.__words[0] = 0;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          this[24] = (int32x2_t)v88;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v88))
          goto LABEL_350;
        v89 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v89 < 2 || *v89 != 194 || v89[1] != 1)
          continue;
        while (1)
        {
          *((_QWORD *)a2 + 1) = v89 + 2;
LABEL_256:
          v90 = this[26].i32[1];
          v91 = this[26].i32[0];
          if ((int)v91 >= v90)
          {
            if (v90 == this[27].i32[0])
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[25], v90 + 1);
            v93 = google::protobuf::internal::GenericTypeHandler<topotext::Attachment>::New();
            v94 = this[25];
            v95 = this[26];
            this[26] = vadd_s32(v95, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v94 + 8 * v95.i32[0]) = v93;
          }
          else
          {
            v92 = this[25];
            this[26].i32[0] = v91 + 1;
            v93 = *(topotext::Attachment **)(*(_QWORD *)&v92 + 8 * v91);
          }
          v122[0] = 0;
          v96 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v96 >= *((_QWORD *)a2 + 2) || *v96 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v122))
              goto LABEL_350;
          }
          else
          {
            v122[0] = *v96;
            *((_QWORD *)a2 + 1) = v96 + 1;
          }
          v97 = *((_DWORD *)a2 + 14);
          v98 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v97 + 1;
          if (v97 >= v98)
            goto LABEL_350;
          v99 = google::protobuf::io::CodedInputStream::PushLimit(a2, v122[0]);
          if (!topotext::Attachment::MergePartialFromCodedStream(v93, a2) || !*((_BYTE *)a2 + 36))
            goto LABEL_350;
          google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v99);
          v100 = *((_DWORD *)a2 + 14);
          v47 = __OFSUB__(v100, 1);
          v101 = v100 - 1;
          if (v101 < 0 == v47)
            *((_DWORD *)a2 + 14) = v101;
          v89 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
          if ((int)v41 - (int)v89 <= 1)
            goto LABEL_2;
          v102 = *v89;
          if (v102 == 200)
            break;
          if (v102 != 194 || v89[1] != 1)
            goto LABEL_2;
        }
        if (v89[1] != 1)
          continue;
        v42 = v89 + 2;
        *((_QWORD *)a2 + 1) = v42;
LABEL_277:
        *(_QWORD *)v122 = 0;
        if ((unint64_t)v42 >= v41 || (char)*v42 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v122))
            goto LABEL_350;
          v103 = *(int32x2_t *)v122;
          v104 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v41 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v103 = (int32x2_t)*v42;
          v104 = v42 + 1;
          *((_QWORD *)a2 + 1) = v104;
        }
        this[28] = v103;
        this[4].i32[0] |= 0x800000u;
        if ((int)v41 - (int)v104 < 2 || *v104 != 209 || v104[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v104 + 2;
LABEL_286:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[29] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x1000000u;
        v105 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v105 < 2 || *v105 != 217 || v105[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v105 + 2;
LABEL_291:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[30] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x2000000u;
        v106 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v106 < 2 || *v106 != 225 || v106[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v106 + 2;
LABEL_296:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[31] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x4000000u;
        v107 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v107 < 2 || *v107 != 233 || v107[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v107 + 2;
LABEL_301:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[32] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x8000000u;
        v108 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v108 < 2 || *v108 != 241 || v108[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v108 + 2;
LABEL_306:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[33] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x10000000u;
        v109 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v109 < 2 || *v109 != 249 || v109[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v109 + 2;
LABEL_311:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[34] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x20000000u;
        v110 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v110 < 2 || *v110 != 129 || v110[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v110 + 2;
LABEL_316:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[35] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x40000000u;
        v111 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v111 < 2 || *v111 != 137 || v111[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v111 + 2;
LABEL_321:
        *(_QWORD *)v122 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v122))
          goto LABEL_350;
        this[36] = *(int32x2_t *)v122;
        this[4].i32[0] |= 0x80000000;
        v112 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v112 < 2 || *v112 != 146 || v112[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v112 + 2;
LABEL_326:
        this[4].i32[1] |= 1u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v113 = (std::string *)this[37];
        if (v113 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v113 = (std::string *)operator new();
          v113->__r_.__value_.__r.__words[0] = 0;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          this[37] = (int32x2_t)v113;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v113))
          goto LABEL_350;
        v114 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v114 < 2 || *v114 != 154 || v114[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v114 + 2;
LABEL_334:
        this[4].i32[1] |= 2u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_353;
        v115 = (std::string *)this[38];
        if (v115 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v115 = (std::string *)operator new();
          v115->__r_.__value_.__r.__words[0] = 0;
          v115->__r_.__value_.__l.__size_ = 0;
          v115->__r_.__value_.__r.__words[2] = 0;
          this[38] = (int32x2_t)v115;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v115))
          goto LABEL_350;
        v116 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v116 < 2 || *v116 != 162 || v116[1] != 2)
          continue;
        *((_QWORD *)a2 + 1) = v116 + 2;
LABEL_342:
        this[4].i32[1] |= 4u;
        if (!google::protobuf::internal::empty_string_)
LABEL_353:
          __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
        v117 = (std::string *)this[39];
        if (v117 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v117 = (std::string *)operator new();
          v117->__r_.__value_.__r.__words[0] = 0;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          this[39] = (int32x2_t)v117;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v117))
        {
LABEL_350:
          v118 = 0;
          goto LABEL_352;
        }
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v118 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_352:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v120);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v121);
        return v118;
      case 3u:
        if ((_DWORD)v10 == 26)
          goto LABEL_56;
        goto LABEL_136;
      case 4u:
        if ((_DWORD)v10 == 37)
          goto LABEL_63;
        goto LABEL_136;
      case 5u:
        if ((_DWORD)v10 == 45)
          goto LABEL_67;
        goto LABEL_136;
      case 6u:
        if ((_DWORD)v10 != 50)
          goto LABEL_136;
        v16 = this[4].i32[0];
        goto LABEL_71;
      case 7u:
        if ((_DWORD)v10 == 58)
          goto LABEL_85;
        goto LABEL_136;
      case 8u:
        if ((_DWORD)v10 == 66)
          goto LABEL_97;
        goto LABEL_136;
      case 9u:
        if ((_DWORD)v10 == 74)
          goto LABEL_104;
        goto LABEL_136;
      case 0xAu:
        if ((_DWORD)v10 == 82)
          goto LABEL_116;
        goto LABEL_136;
      case 0xBu:
        if ((_DWORD)v10 == 90)
          goto LABEL_149;
        goto LABEL_136;
      case 0xCu:
        if ((_DWORD)v10 == 98)
          goto LABEL_163;
        goto LABEL_136;
      case 0xDu:
        if ((_DWORD)v10 == 109)
          goto LABEL_181;
        goto LABEL_136;
      case 0xEu:
        if ((_DWORD)v10 == 117)
          goto LABEL_185;
        goto LABEL_136;
      case 0xFu:
        if ((_DWORD)v10 != 120)
          goto LABEL_136;
        v31 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v30 = *((_QWORD *)a2 + 2);
        goto LABEL_189;
      case 0x10u:
        if ((_DWORD)v10 == 129)
          goto LABEL_198;
        goto LABEL_136;
      case 0x11u:
        if ((_DWORD)v10 == 137)
          goto LABEL_203;
        goto LABEL_136;
      case 0x12u:
        if ((_DWORD)v10 != 146)
          goto LABEL_136;
        v15 = this[4].i32[0];
        goto LABEL_208;
      case 0x13u:
        if ((_DWORD)v10 != 152)
          goto LABEL_136;
        v24 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_216;
      case 0x14u:
        if ((_DWORD)v10 != 160)
          goto LABEL_136;
        v36 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        goto LABEL_225;
      case 0x15u:
        if ((_DWORD)v10 == 169)
          goto LABEL_234;
        goto LABEL_136;
      case 0x16u:
        if ((_DWORD)v10 != 176)
          goto LABEL_136;
        v26 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        goto LABEL_239;
      case 0x17u:
        if ((_DWORD)v10 != 186)
          goto LABEL_136;
        v29 = this[4].i32[0];
        goto LABEL_248;
      case 0x18u:
        if ((_DWORD)v10 == 194)
          goto LABEL_256;
        goto LABEL_136;
      case 0x19u:
        if ((_DWORD)v10 != 200)
          goto LABEL_136;
        v42 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        goto LABEL_277;
      case 0x1Au:
        if ((_DWORD)v10 == 209)
          goto LABEL_286;
        goto LABEL_136;
      case 0x1Bu:
        if ((_DWORD)v10 == 217)
          goto LABEL_291;
        goto LABEL_136;
      case 0x1Cu:
        if ((_DWORD)v10 != 225)
          goto LABEL_136;
        goto LABEL_296;
      case 0x1Du:
        if ((_DWORD)v10 == 233)
          goto LABEL_301;
        goto LABEL_136;
      case 0x1Eu:
        if ((_DWORD)v10 == 241)
          goto LABEL_306;
        goto LABEL_136;
      case 0x1Fu:
        if ((_DWORD)v10 == 249)
          goto LABEL_311;
        goto LABEL_136;
      case 0x20u:
        if ((_DWORD)v10 == 257)
          goto LABEL_316;
        goto LABEL_136;
      case 0x21u:
        if ((_DWORD)v10 == 265)
          goto LABEL_321;
        goto LABEL_136;
      case 0x22u:
        if ((_DWORD)v10 == 274)
          goto LABEL_326;
        goto LABEL_136;
      case 0x23u:
        if ((_DWORD)v10 == 282)
          goto LABEL_334;
        goto LABEL_136;
      case 0x24u:
        if ((_DWORD)v10 == 290)
          goto LABEL_342;
LABEL_136:
        if ((_DWORD)v10 && (v10 & 7) != 4)
          goto LABEL_138;
        goto LABEL_351;
      default:
        goto LABEL_9;
    }
  }
}

void sub_1B4B3C924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C40DF275E33);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t topotext::Attachment::SerializeWithCachedSizes(topotext::Attachment *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  topotext::Attachment *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;

  v5 = this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)v5 + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, *((_QWORD *)v5 + 6), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)4, a2, *((float *)v5 + 14), a3);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)5, a2, *((float *)v5 + 15), a3);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(6, *((_QWORD *)v5 + 8), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(7, *((_QWORD *)v5 + 9), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(8, *((_QWORD *)v5 + 10), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(9, *((_QWORD *)v5 + 11), a2);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_23;
  }
LABEL_20:
  v7 = *((_QWORD *)v5 + 12);
  if (!v7)
  {
    topotext::protobuf_AddDesc_topotext_2eproto(this);
    v7 = *(_QWORD *)(topotext::Attachment::default_instance_ + 96);
  }
  this = (topotext::Attachment *)google::protobuf::internal::WireFormatLite::WriteMessage(10, v7, a2);
  if ((*((_DWORD *)v5 + 8) & 0x200) != 0)
  {
LABEL_23:
    v8 = *((_QWORD *)v5 + 13);
    if (!v8)
    {
      topotext::protobuf_AddDesc_topotext_2eproto(this);
      v8 = *(_QWORD *)(topotext::Attachment::default_instance_ + 104);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(11, v8, a2);
  }
LABEL_26:
  if (*((int *)v5 + 30) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>((uint64_t)v5 + 112, v9);
      google::protobuf::internal::WireFormatLite::WriteMessage(12, v10, a2);
      ++v9;
    }
    while (v9 < *((_DWORD *)v5 + 30));
  }
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x800) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)0xD, a2, *((float *)v5 + 34), a3);
    v11 = *((_DWORD *)v5 + 8);
    if ((v11 & 0x1000) == 0)
    {
LABEL_31:
      if ((v11 & 0x2000) == 0)
        goto LABEL_32;
      goto LABEL_61;
    }
  }
  else if ((v11 & 0x1000) == 0)
  {
    goto LABEL_31;
  }
  google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)0xE, a2, *((float *)v5 + 35), a3);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x2000) == 0)
  {
LABEL_32:
    if ((v11 & 0x4000) == 0)
      goto LABEL_33;
    goto LABEL_62;
  }
LABEL_61:
  google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)0xF, *((_DWORD *)v5 + 40), a2, a4);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x4000) == 0)
  {
LABEL_33:
    if ((v11 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_63;
  }
LABEL_62:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x10, a2, *((double *)v5 + 18), a3);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x8000) == 0)
  {
LABEL_34:
    if ((v11 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_64;
  }
LABEL_63:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x11, a2, *((double *)v5 + 19), a3);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x10000) == 0)
  {
LABEL_35:
    if ((v11 & 0x20000) == 0)
      goto LABEL_36;
    goto LABEL_65;
  }
LABEL_64:
  google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(18, *((_QWORD *)v5 + 21), a2);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x20000) == 0)
  {
LABEL_36:
    if ((v11 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_66;
  }
LABEL_65:
  google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)0x13, *((unsigned __int8 *)v5 + 164), a2, a4);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x40000) == 0)
  {
LABEL_37:
    if ((v11 & 0x80000) == 0)
      goto LABEL_38;
    goto LABEL_67;
  }
LABEL_66:
  google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)0x14, *((_QWORD *)v5 + 22), a2, a4);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x80000) == 0)
  {
LABEL_38:
    if ((v11 & 0x100000) == 0)
      goto LABEL_39;
    goto LABEL_68;
  }
LABEL_67:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x15, a2, *((double *)v5 + 23), a3);
  v11 = *((_DWORD *)v5 + 8);
  if ((v11 & 0x100000) == 0)
  {
LABEL_39:
    if ((v11 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_68:
  google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)0x16, *((_DWORD *)v5 + 80), a2, a4);
  if ((*((_DWORD *)v5 + 8) & 0x200000) != 0)
LABEL_40:
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(23, *((_QWORD *)v5 + 24), a2);
LABEL_41:
  if (*((int *)v5 + 52) >= 1)
  {
    v12 = 0;
    do
    {
      v13 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((uint64_t)v5 + 200, v12);
      google::protobuf::internal::WireFormatLite::WriteMessage(24, v13, a2);
      ++v12;
    }
    while (v12 < *((_DWORD *)v5 + 52));
  }
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x800000) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)0x19, *((_QWORD *)v5 + 28), a2, a4);
    v14 = *((_DWORD *)v5 + 8);
    if ((v14 & 0x1000000) == 0)
    {
LABEL_46:
      if ((v14 & 0x2000000) == 0)
        goto LABEL_47;
      goto LABEL_72;
    }
  }
  else if ((v14 & 0x1000000) == 0)
  {
    goto LABEL_46;
  }
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1A, a2, *((double *)v5 + 29), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_47:
    if ((v14 & 0x4000000) == 0)
      goto LABEL_48;
    goto LABEL_73;
  }
LABEL_72:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1B, a2, *((double *)v5 + 30), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_48:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_49;
    goto LABEL_74;
  }
LABEL_73:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1C, a2, *((double *)v5 + 31), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_49:
    if ((v14 & 0x10000000) == 0)
      goto LABEL_50;
    goto LABEL_75;
  }
LABEL_74:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1D, a2, *((double *)v5 + 32), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_50:
    if ((v14 & 0x20000000) == 0)
      goto LABEL_51;
    goto LABEL_76;
  }
LABEL_75:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1E, a2, *((double *)v5 + 33), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_51:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_52;
LABEL_77:
    google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x20, a2, *((double *)v5 + 35), a3);
    if ((*((_DWORD *)v5 + 8) & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_78;
  }
LABEL_76:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x1F, a2, *((double *)v5 + 34), a3);
  v14 = *((_DWORD *)v5 + 8);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_77;
LABEL_52:
  if ((v14 & 0x80000000) == 0)
    goto LABEL_53;
LABEL_78:
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)0x21, a2, *((double *)v5 + 36), a3);
LABEL_53:
  v15 = *((_DWORD *)v5 + 9);
  if ((v15 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(34, *((_QWORD *)v5 + 37), a2);
    v15 = *((_DWORD *)v5 + 9);
    if ((v15 & 2) == 0)
    {
LABEL_55:
      if ((v15 & 4) == 0)
        goto LABEL_57;
      goto LABEL_56;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_55;
  }
  google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(35, *((_QWORD *)v5 + 38), a2);
  if ((*((_DWORD *)v5 + 9) & 4) != 0)
LABEL_56:
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(36, *((_QWORD *)v5 + 39), a2);
LABEL_57:
  if (*((char *)v5 + 31) < 0)
  {
    v16 = (char *)*((_QWORD *)v5 + 1);
    v17 = *((_QWORD *)v5 + 2);
  }
  else
  {
    v16 = (char *)v5 + 8;
    LODWORD(v17) = *((unsigned __int8 *)v5 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v16, v17);
}

uint64_t topotext::Attachment::ByteSize(topotext::Attachment *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  topotext::Location *v42;
  google::protobuf::io::CodedOutputStream *v43;
  int v44;
  int v45;
  topotext::Media *v46;
  google::protobuf::io::CodedOutputStream *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  google::protobuf::io::CodedOutputStream *v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  topotext::PreviewImage *v87;
  google::protobuf::io::CodedOutputStream *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  topotext::Attachment *v94;
  google::protobuf::io::CodedOutputStream *v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t result;
  uint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  int v105;

  v2 = *((_DWORD *)this + 8);
  if (!(_BYTE)v2)
  {
    v4 = 0;
    goto LABEL_70;
  }
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)this + 5);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 8);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = v10 + v6 + 1;
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 6);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v2 = *((_DWORD *)this + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 += v16 + v12 + 1;
  }
LABEL_24:
  v17 = v3 + 5;
  if ((v2 & 4) == 0)
    v17 = v3;
  if ((v2 & 8) != 0)
    v4 = v17 + 5;
  else
    v4 = v17;
  if ((v2 & 0x10) != 0)
  {
    v18 = *((_QWORD *)this + 8);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v20 = v19;
    v21 = *(_QWORD *)(v18 + 8);
    if ((v19 & 0x80u) == 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = v21;
    if (v22 >= 0x80)
    {
      v23 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v22);
      v19 = *(unsigned __int8 *)(v18 + 23);
      v21 = *(_QWORD *)(v18 + 8);
      v2 = *((_DWORD *)this + 8);
      v20 = *(_BYTE *)(v18 + 23);
    }
    else
    {
      v23 = 1;
    }
    if (v20 < 0)
      v19 = v21;
    v4 += v23 + v19 + 1;
    if ((v2 & 0x20) == 0)
    {
LABEL_31:
      if ((v2 & 0x40) == 0)
        goto LABEL_32;
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_31;
  }
  v24 = *((_QWORD *)this + 9);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 8);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v4 += v29 + v25 + 1;
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 0x80) == 0)
      goto LABEL_70;
    goto LABEL_61;
  }
LABEL_52:
  v30 = *((_QWORD *)this + 10);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = v31;
  v33 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = v33;
  if (v34 >= 0x80)
  {
    v35 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v34);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v33 = *(_QWORD *)(v30 + 8);
    v2 = *((_DWORD *)this + 8);
    v32 = *(_BYTE *)(v30 + 23);
  }
  else
  {
    v35 = 1;
  }
  if (v32 < 0)
    v31 = v33;
  v4 += v35 + v31 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_61:
    v36 = *((_QWORD *)this + 11);
    v37 = *(unsigned __int8 *)(v36 + 23);
    v38 = v37;
    v39 = *(_QWORD *)(v36 + 8);
    if ((v37 & 0x80u) == 0)
      v40 = *(unsigned __int8 *)(v36 + 23);
    else
      v40 = v39;
    if (v40 >= 0x80)
    {
      v41 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v40);
      v37 = *(unsigned __int8 *)(v36 + 23);
      v39 = *(_QWORD *)(v36 + 8);
      v2 = *((_DWORD *)this + 8);
      v38 = *(_BYTE *)(v36 + 23);
    }
    else
    {
      v41 = 1;
    }
    if (v38 < 0)
      v37 = v39;
    v4 += v41 + v37 + 1;
  }
LABEL_70:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      v42 = (topotext::Location *)*((_QWORD *)this + 12);
      if (!v42)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(0);
        v42 = *(topotext::Location **)(topotext::Attachment::default_instance_ + 96);
      }
      v43 = (google::protobuf::io::CodedOutputStream *)topotext::Location::ByteSize(v42);
      v44 = (int)v43;
      if (v43 >= 0x80)
        v45 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43);
      else
        v45 = 1;
      v4 += v44 + v45 + 1;
      v2 = *((_DWORD *)this + 8);
    }
    if ((v2 & 0x200) != 0)
    {
      v46 = (topotext::Media *)*((_QWORD *)this + 13);
      if (!v46)
      {
        topotext::protobuf_AddDesc_topotext_2eproto(0);
        v46 = *(topotext::Media **)(topotext::Attachment::default_instance_ + 104);
      }
      v47 = (google::protobuf::io::CodedOutputStream *)topotext::Media::ByteSize(v46);
      v48 = (int)v47;
      if (v47 >= 0x80)
        v49 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47);
      else
        v49 = 1;
      v4 += v48 + v49 + 1;
      v2 = *((_DWORD *)this + 8);
    }
    v50 = v4 + 5;
    if ((v2 & 0x800) == 0)
      v50 = v4;
    if ((v2 & 0x1000) != 0)
      v51 = v50 + 5;
    else
      v51 = v50;
    if ((v2 & 0x2000) != 0)
    {
      v52 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
      if ((v52 & 0x80000000) != 0)
      {
        v53 = 10;
      }
      else if (v52 >= 0x80)
      {
        v53 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52);
        v2 = *((_DWORD *)this + 8);
      }
      else
      {
        v53 = 1;
      }
      v51 += v53 + 1;
    }
    v54 = v51 + 10;
    if ((v2 & 0x4000) == 0)
      v54 = v51;
    if ((v2 & 0x8000) != 0)
      v4 = v54 + 10;
    else
      v4 = v54;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      v55 = *((_QWORD *)this + 21);
      v56 = *(unsigned __int8 *)(v55 + 23);
      v57 = v56;
      v58 = *(_QWORD *)(v55 + 8);
      if ((v56 & 0x80u) == 0)
        v59 = *(unsigned __int8 *)(v55 + 23);
      else
        v59 = v58;
      if (v59 >= 0x80)
      {
        v60 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v59);
        v56 = *(unsigned __int8 *)(v55 + 23);
        v58 = *(_QWORD *)(v55 + 8);
        v2 = *((_DWORD *)this + 8);
        v57 = *(_BYTE *)(v55 + 23);
      }
      else
      {
        v60 = 1;
      }
      if (v57 < 0)
        v56 = v58;
      v4 += v60 + v56 + 2;
    }
    if ((v2 & 0x20000) != 0)
      v61 = v4 + 3;
    else
      v61 = v4;
    if ((v2 & 0x40000) != 0)
    {
      v61 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 22)) + 2;
      v2 = *((_DWORD *)this + 8);
    }
    if ((v2 & 0x80000) != 0)
      v4 = v61 + 10;
    else
      v4 = v61;
    if ((v2 & 0x100000) != 0)
    {
      v64 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 80);
      if ((v64 & 0x80000000) != 0)
      {
        v65 = 10;
      }
      else if (v64 >= 0x80)
      {
        v65 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64);
        v2 = *((_DWORD *)this + 8);
      }
      else
      {
        v65 = 1;
      }
      v4 += v65 + 2;
      if ((v2 & 0x200000) == 0)
      {
LABEL_123:
        if ((v2 & 0x800000) == 0)
          goto LABEL_125;
        goto LABEL_124;
      }
    }
    else if ((v2 & 0x200000) == 0)
    {
      goto LABEL_123;
    }
    v100 = *((_QWORD *)this + 24);
    v101 = *(unsigned __int8 *)(v100 + 23);
    v102 = v101;
    v103 = *(_QWORD *)(v100 + 8);
    if ((v101 & 0x80u) == 0)
      v104 = *(unsigned __int8 *)(v100 + 23);
    else
      v104 = v103;
    if (v104 >= 0x80)
    {
      v105 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v104);
      v101 = *(unsigned __int8 *)(v100 + 23);
      v103 = *(_QWORD *)(v100 + 8);
      v2 = *((_DWORD *)this + 8);
      v102 = *(_BYTE *)(v100 + 23);
    }
    else
    {
      v105 = 1;
    }
    if (v102 < 0)
      v101 = v103;
    v4 += v105 + v101 + 2;
    if ((v2 & 0x800000) != 0)
    {
LABEL_124:
      v4 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 28)) + 2;
      v2 = *((_DWORD *)this + 8);
    }
  }
LABEL_125:
  if (HIBYTE(v2))
  {
    v62 = v4 + 10;
    if ((v2 & 0x1000000) == 0)
      v62 = v4;
    if ((v2 & 0x2000000) != 0)
      v62 += 10;
    if ((v2 & 0x4000000) != 0)
      v62 += 10;
    if ((v2 & 0x8000000) != 0)
      v62 += 10;
    if ((v2 & 0x10000000) != 0)
      v62 += 10;
    if ((v2 & 0x20000000) != 0)
      v62 += 10;
    if ((v2 & 0x40000000) != 0)
      v62 += 10;
    if (v2 >= 0)
      v4 = v62;
    else
      v4 = v62 + 10;
  }
  LOBYTE(v63) = *((_BYTE *)this + 36);
  if ((_BYTE)v63)
  {
    if ((*((_BYTE *)this + 36) & 1) != 0)
    {
      v66 = *((_QWORD *)this + 37);
      v67 = *(unsigned __int8 *)(v66 + 23);
      v68 = v67;
      v69 = *(_QWORD *)(v66 + 8);
      if ((v67 & 0x80u) == 0)
        v70 = *(unsigned __int8 *)(v66 + 23);
      else
        v70 = v69;
      if (v70 >= 0x80)
      {
        v71 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v70);
        v67 = *(unsigned __int8 *)(v66 + 23);
        v69 = *(_QWORD *)(v66 + 8);
        v63 = *((_DWORD *)this + 9);
        v68 = *(_BYTE *)(v66 + 23);
      }
      else
      {
        v71 = 1;
      }
      if (v68 < 0)
        v67 = v69;
      v4 += v71 + v67 + 2;
      if ((v63 & 2) == 0)
      {
LABEL_146:
        if ((v63 & 4) == 0)
          goto LABEL_178;
        goto LABEL_169;
      }
    }
    else if ((*((_BYTE *)this + 36) & 2) == 0)
    {
      goto LABEL_146;
    }
    v72 = *((_QWORD *)this + 38);
    v73 = *(unsigned __int8 *)(v72 + 23);
    v74 = v73;
    v75 = *(_QWORD *)(v72 + 8);
    if ((v73 & 0x80u) == 0)
      v76 = *(unsigned __int8 *)(v72 + 23);
    else
      v76 = v75;
    if (v76 >= 0x80)
    {
      v77 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v76);
      v73 = *(unsigned __int8 *)(v72 + 23);
      v75 = *(_QWORD *)(v72 + 8);
      v63 = *((_DWORD *)this + 9);
      v74 = *(_BYTE *)(v72 + 23);
    }
    else
    {
      v77 = 1;
    }
    if (v74 < 0)
      v73 = v75;
    v4 += v77 + v73 + 2;
    if ((v63 & 4) != 0)
    {
LABEL_169:
      v78 = *((_QWORD *)this + 39);
      v79 = *(unsigned __int8 *)(v78 + 23);
      v80 = v79;
      v81 = *(_QWORD *)(v78 + 8);
      if ((v79 & 0x80u) == 0)
        v82 = *(unsigned __int8 *)(v78 + 23);
      else
        v82 = v81;
      if (v82 >= 0x80)
      {
        v83 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v82);
        v79 = *(unsigned __int8 *)(v78 + 23);
        v81 = *(_QWORD *)(v78 + 8);
        v80 = *(_BYTE *)(v78 + 23);
      }
      else
      {
        v83 = 1;
      }
      if (v80 < 0)
        v79 = v81;
      v4 += v83 + v79 + 2;
    }
  }
LABEL_178:
  v84 = *((_DWORD *)this + 30);
  v85 = v84 + v4;
  if (v84 >= 1)
  {
    v86 = 0;
    do
    {
      v87 = (topotext::PreviewImage *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>((uint64_t)this + 112, v86);
      v88 = (google::protobuf::io::CodedOutputStream *)topotext::PreviewImage::ByteSize(v87);
      v89 = (int)v88;
      if (v88 >= 0x80)
        v90 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v88);
      else
        v90 = 1;
      v85 += v89 + v90;
      ++v86;
    }
    while (v86 < *((_DWORD *)this + 30));
  }
  v91 = *((_DWORD *)this + 52);
  v92 = v85 + 2 * v91;
  if (v91 >= 1)
  {
    v93 = 0;
    do
    {
      v94 = (topotext::Attachment *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((uint64_t)this + 200, v93);
      v95 = (google::protobuf::io::CodedOutputStream *)topotext::Attachment::ByteSize(v94);
      v96 = (int)v95;
      if (v95 >= 0x80)
        v97 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v95);
      else
        v97 = 1;
      v92 += v96 + v97;
      ++v93;
    }
    while (v93 < *((_DWORD *)this + 52));
  }
  if (*((char *)this + 31) < 0)
    v98 = *((_QWORD *)this + 2);
  else
    LODWORD(v98) = *((unsigned __int8 *)this + 31);
  result = (v92 + v98);
  *((_DWORD *)this + 81) = result;
  return result;
}

std::string *topotext::Attachment::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Attachment::MergeFrom(this, lpsrc);
}

std::string *topotext::Location::MergeFrom(topotext::Location *this, const topotext::Location *a2, uint64_t a3)
{
  std::string *v5;
  int v6;
  char v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  std::string *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 5768);
    v5 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if (!(_BYTE)v6)
    goto LABEL_9;
  if ((*((_BYTE *)a2 + 32) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 32) & 2) == 0)
      goto LABEL_6;
LABEL_17:
    v16 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 2u;
    *((_QWORD *)this + 6) = v16;
    v6 = *((_DWORD *)a2 + 8);
    if ((v6 & 4) == 0)
    {
LABEL_7:
      if ((v6 & 8) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  v15 = *((_QWORD *)a2 + 5);
  *((_DWORD *)this + 8) |= 1u;
  *((_QWORD *)this + 5) = v15;
  v6 = *((_DWORD *)a2 + 8);
  if ((v6 & 2) != 0)
    goto LABEL_17;
LABEL_6:
  if ((v6 & 4) == 0)
    goto LABEL_7;
LABEL_18:
  v17 = (const std::string *)*((_QWORD *)a2 + 7);
  *((_DWORD *)this + 8) |= 4u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
  v18 = (std::string *)*((_QWORD *)this + 7);
  if (v18 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 7) = v18;
  }
  std::string::operator=(v18, v17);
  if ((*((_DWORD *)a2 + 8) & 8) != 0)
  {
LABEL_8:
    v7 = *((_BYTE *)a2 + 64);
    *((_DWORD *)this + 8) |= 8u;
    *((_BYTE *)this + 64) = v7;
  }
LABEL_9:
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B3D6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *topotext::Media::MergeFrom(std::string *this, std::string *a2, uint64_t a3)
{
  topotext::Media *v4;
  std::string *v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  const std::string *data;
  std::string *v10;
  const std::string *size;
  std::string *v12;
  const std::string *v13;
  std::string *v14;
  std::string::pointer v15;
  const std::string::value_type *v16;
  std::string::value_type *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  char v23;
  std::string v24[2];

  v4 = (topotext::Media *)this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 6118);
    v5 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = a2[1].__r_.__value_.__s.__data_[8];
  if ((_BYTE)v6)
  {
    if ((a2[1].__r_.__value_.__s.__data_[8] & 1) != 0)
    {
      v7 = (const std::string *)a2[1].__r_.__value_.__r.__words[2];
      *((_DWORD *)v4 + 8) |= 1u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v8 = (std::string *)*((_QWORD *)v4 + 5);
      if (v8 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 5) = v8;
      }
      this = std::string::operator=(v8, v7);
      v6 = a2[1].__r_.__value_.__r.__words[1];
    }
    if ((v6 & 2) != 0)
    {
      data = (const std::string *)a2[2].__r_.__value_.__l.__data_;
      *((_DWORD *)v4 + 8) |= 2u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v10 = (std::string *)*((_QWORD *)v4 + 6);
      if (v10 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 6) = v10;
      }
      this = std::string::operator=(v10, data);
      v6 = a2[1].__r_.__value_.__r.__words[1];
    }
    if ((v6 & 4) != 0)
    {
      size = (const std::string *)a2[2].__r_.__value_.__l.__size_;
      *((_DWORD *)v4 + 8) |= 4u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v12 = (std::string *)*((_QWORD *)v4 + 7);
      if (v12 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v12 = (std::string *)operator new();
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 7) = v12;
      }
      this = std::string::operator=(v12, size);
      v6 = a2[1].__r_.__value_.__r.__words[1];
    }
    if ((v6 & 8) != 0)
    {
      v13 = (const std::string *)a2[2].__r_.__value_.__r.__words[2];
      *((_DWORD *)v4 + 8) |= 8u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v14 = (std::string *)*((_QWORD *)v4 + 8);
      if (v14 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v14 = (std::string *)operator new();
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v4 + 8) = v14;
      }
      std::string::operator=(v14, v13);
      v6 = a2[1].__r_.__value_.__r.__words[1];
    }
    if ((v6 & 0x10) != 0)
    {
      v15 = a2[3].__r_.__value_.__l.__data_;
      *((_DWORD *)v4 + 8) |= 0x10u;
      *((_QWORD *)v4 + 9) = v15;
    }
  }
  v18 = (const std::string::value_type *)a2->__r_.__value_.__l.__size_;
  v17 = &a2->__r_.__value_.__s.__data_[8];
  v16 = v18;
  v19 = v17[23];
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = v17[23];
  else
    v21 = *((_QWORD *)v17 + 1);
  return std::string::append((std::string *)((char *)v4 + 8), v20, v21);
}

void sub_1B4B3D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Attachment::IsInitialized(topotext::Attachment *this)
{
  return 1;
}

_QWORD *topotext::Attachment::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Attachment");
}

topotext::Location *topotext::Location::Location(topotext::Location *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F7328;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::Location::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3D9AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::Location::SharedCtor(topotext::Location *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 7) = v5;
  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 8) = 0;
}

void sub_1B4B3DA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::Location::~Location(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F7328;
  topotext::Location::SharedDtor((topotext::Location *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Location::~Location(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::Location::SharedDtor(topotext::Location *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    v4 = v3 == google::protobuf::internal::empty_string_;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    this = (topotext::Location *)MEMORY[0x1B5E3DB94](v3, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
}

topotext::Location *topotext::Location::New(topotext::Location *this)
{
  topotext::Location *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Location *)operator new();
  topotext::Location::Location(v1, v2, v3);
  return v1;
}

void sub_1B4B3DB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C4099D76EF7);
  _Unwind_Resume(a1);
}

uint64_t topotext::Location::MergePartialFromCodedStream(topotext::Location *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  _BYTE *v9;
  BOOL v10;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  std::string *v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _BYTE v21[32];
  unint64_t v22[2];
  unint64_t v23;

  google::protobuf::io::StringOutputStream::StringOutputStream(v22, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v21, (google::protobuf::io::ZeroCopyOutputStream *)v22);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_12:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
LABEL_48:
        v19 = 1;
        goto LABEL_49;
      }
LABEL_25:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v21, v4))goto LABEL_47;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 9)
          goto LABEL_23;
        v23 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v23))
          goto LABEL_47;
        *((_QWORD *)this + 5) = v23;
        *((_DWORD *)this + 8) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 != 17)
          continue;
        *((_QWORD *)a2 + 1) = v9 + 1;
LABEL_27:
        v23 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v23))
          goto LABEL_47;
        *((_QWORD *)this + 6) = v23;
        v11 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v11;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v14 >= *((_QWORD *)a2 + 2) || *v14 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_31:
        *((_DWORD *)this + 8) = v11 | 4;
        if (!google::protobuf::internal::empty_string_)
          __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
        v15 = (std::string *)*((_QWORD *)this + 7);
        if (v15 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v15 = (std::string *)operator new();
          v15->__r_.__value_.__r.__words[0] = 0;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 7) = v15;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v15))
          goto LABEL_47;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v12 || *v16 != 32)
          continue;
        v13 = v16 + 1;
        *((_QWORD *)a2 + 1) = v13;
        goto LABEL_38;
      case 2u:
        if ((_DWORD)v7 != 17)
          goto LABEL_23;
        goto LABEL_27;
      case 3u:
        if ((_DWORD)v7 != 26)
          goto LABEL_23;
        v11 = *((_DWORD *)this + 8);
        goto LABEL_31;
      case 4u:
        if ((_DWORD)v7 != 32)
        {
LABEL_23:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_48;
          goto LABEL_25;
        }
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_38:
        v23 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v23))
          {
LABEL_47:
            v19 = 0;
            goto LABEL_49;
          }
          v17 = v23;
          v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v17 = *v13;
          v18 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_BYTE *)this + 64) = v17 != 0;
        *((_DWORD *)this + 8) |= 8u;
        if (v18 != (unsigned __int8 *)v12 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v19 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_49:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v21);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v22);
        return v19;
      default:
        goto LABEL_12;
    }
  }
}

void sub_1B4B3DEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Location::SerializeWithCachedSizes(topotext::Location *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)1, a2, *((double *)this + 5), a3);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)2, a2, *((double *)this + 6), a3);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, *((_QWORD *)this + 7), a2);
  if ((*((_DWORD *)this + 8) & 8) != 0)
LABEL_5:
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)4, *((unsigned __int8 *)this + 64), a2, a4);
LABEL_6:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::Location::ByteSize(topotext::Location *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    if ((v2 & 2) != 0)
      v3 = ((v2 << 31 >> 31) & 9) + 9;
    else
      v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 4) != 0)
    {
      v4 = *((_QWORD *)this + 7);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v8 = *(unsigned __int8 *)(v4 + 23);
      else
        v8 = v7;
      if (v8 >= 0x80)
      {
        v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
        v5 = *(unsigned __int8 *)(v4 + 23);
        v7 = *(_QWORD *)(v4 + 8);
        v2 = *((_DWORD *)this + 8);
        v6 = *(_BYTE *)(v4 + 23);
      }
      else
      {
        v9 = 1;
      }
      if (v6 < 0)
        v5 = v7;
      v3 += v9 + v5 + 1;
    }
    if ((v2 & 8) != 0)
      v2 = v3 + 2;
    else
      v2 = v3;
  }
  if (*((char *)this + 31) < 0)
    v10 = *((_QWORD *)this + 2);
  else
    LODWORD(v10) = *((unsigned __int8 *)this + 31);
  result = (v2 + v10);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Location::CheckTypeAndMergeFrom(topotext::Location *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Location::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::Location::IsInitialized(topotext::Location *this)
{
  return 1;
}

_QWORD *topotext::Location::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Location");
}

topotext::Media *topotext::Media::Media(topotext::Media *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F71C0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::Media::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3E0F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::Media::SharedCtor(topotext::Media *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 5) = google::protobuf::internal::empty_string_;
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = v5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B3E1AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::Media::~Media(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F71C0;
  topotext::Media::SharedDtor((topotext::Media *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Media::~Media(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::Media::SharedDtor(topotext::Media *this, uint64_t a2, uint64_t a3)
{
  topotext::Media *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 5);
  if (v4 != google::protobuf::internal::empty_string_)
  {
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      this = (topotext::Media *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
      v4 = google::protobuf::internal::empty_string_;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
    }
    else
    {
      v4 = google::protobuf::internal::empty_string_;
    }
  }
  v5 = *((_QWORD *)v3 + 6);
  if (v5 != v4 && v5 != 0)
  {
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    this = (topotext::Media *)MEMORY[0x1B5E3DB94](v5, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
  }
  if (!v4)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v7 = *((_QWORD *)v3 + 7);
  if (v7 != v4 && v7)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (topotext::Media *)MEMORY[0x1B5E3DB94](v7, 0x1012C40EC159624);
    v4 = google::protobuf::internal::empty_string_;
    if (!google::protobuf::internal::empty_string_)
      versioned_document::Version::SharedCtor((uint64_t)this, v8, v9);
  }
  v10 = *((_QWORD *)v3 + 8);
  if (v10 != v4 && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (topotext::Media *)MEMORY[0x1B5E3DB94](v10, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
}

topotext::Media *topotext::Media::New(topotext::Media *this)
{
  topotext::Media *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Media *)operator new();
  topotext::Media::Media(v1, v2, v3);
  return v1;
}

void sub_1B4B3E3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40DF275E33);
  _Unwind_Resume(a1);
}

uint64_t topotext::Media::MergePartialFromCodedStream(topotext::Media *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  _BYTE *v10;
  BOOL v11;
  unint64_t v12;
  char *v13;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  std::string *v18;
  _BYTE *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _BYTE v24[32];
  unint64_t v25[2];
  unint64_t v26;

  google::protobuf::io::StringOutputStream::StringOutputStream(v25, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v24, (google::protobuf::io::ZeroCopyOutputStream *)v25);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_15:
      if ((_DWORD)v7)
        v11 = (v7 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
LABEL_63:
        v22 = 1;
        goto LABEL_64;
      }
LABEL_30:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v24, v4))goto LABEL_62;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 10)
          goto LABEL_28;
        *((_DWORD *)this + 8) |= 1u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_65;
        v9 = (std::string *)*((_QWORD *)this + 5);
        if (v9 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v9 = (std::string *)operator new();
          v9->__r_.__value_.__r.__words[0] = 0;
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 5) = v9;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
          goto LABEL_62;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v10 + 1;
LABEL_32:
        *((_DWORD *)this + 8) |= 2u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_65;
        v14 = (std::string *)*((_QWORD *)this + 6);
        if (v14 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v14 = (std::string *)operator new();
          v14->__r_.__value_.__r.__words[0] = 0;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 6) = v14;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v14))
          goto LABEL_62;
        v15 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v15 + 1;
LABEL_39:
        *((_DWORD *)this + 8) |= 4u;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_65;
        v16 = (std::string *)*((_QWORD *)this + 7);
        if (v16 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v16 = (std::string *)operator new();
          v16->__r_.__value_.__r.__words[0] = 0;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 7) = v16;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v16))
          goto LABEL_62;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v17 >= *((_QWORD *)a2 + 2) || *v17 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_46:
        *((_DWORD *)this + 8) |= 8u;
        if (!google::protobuf::internal::empty_string_)
LABEL_65:
          __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
        v18 = (std::string *)*((_QWORD *)this + 8);
        if (v18 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v18 = (std::string *)operator new();
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 8) = v18;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v18))
          goto LABEL_62;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v12 || *v19 != 40)
          continue;
        v13 = v19 + 1;
        *((_QWORD *)a2 + 1) = v13;
        goto LABEL_53;
      case 2u:
        if ((_DWORD)v7 != 18)
          goto LABEL_28;
        goto LABEL_32;
      case 3u:
        if ((_DWORD)v7 == 26)
          goto LABEL_39;
        goto LABEL_28;
      case 4u:
        if ((_DWORD)v7 == 34)
          goto LABEL_46;
        goto LABEL_28;
      case 5u:
        if ((_DWORD)v7 != 40)
        {
LABEL_28:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_63;
          goto LABEL_30;
        }
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_53:
        v26 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v26))
          {
LABEL_62:
            v22 = 0;
            goto LABEL_64;
          }
          v20 = v26;
          v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v20 = *v13;
          v21 = (unsigned __int8 *)(v13 + 1);
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_QWORD *)this + 9) = v20;
        *((_DWORD *)this + 8) |= 0x10u;
        if (v21 != (unsigned __int8 *)v12 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v22 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_64:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v24);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v25);
        return v22;
      default:
        goto LABEL_15;
    }
  }
}

void sub_1B4B3E7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Media::SerializeWithCachedSizes(topotext::Media *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 6), a2);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, *((_QWORD *)this + 7), a2);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_12:
  google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, *((_QWORD *)this + 8), a2);
  if ((*((_DWORD *)this + 8) & 0x10) != 0)
LABEL_6:
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)5, *((_QWORD *)this + 9), a2, a4);
LABEL_7:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::Media::ByteSize(topotext::Media *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_28;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 8);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v3 = v9 + v5;
  if ((v2 & 2) != 0)
  {
LABEL_15:
    v11 = *((_QWORD *)this + 6);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v2 = *((_DWORD *)this + 8);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v3 += v16 + v12 + 1;
  }
LABEL_24:
  if ((v2 & 4) != 0)
  {
    v19 = *((_QWORD *)this + 7);
    v20 = *(unsigned __int8 *)(v19 + 23);
    v21 = v20;
    v22 = *(_QWORD *)(v19 + 8);
    if ((v20 & 0x80u) == 0)
      v23 = *(unsigned __int8 *)(v19 + 23);
    else
      v23 = v22;
    if (v23 >= 0x80)
    {
      v24 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v23);
      v20 = *(unsigned __int8 *)(v19 + 23);
      v22 = *(_QWORD *)(v19 + 8);
      v2 = *((_DWORD *)this + 8);
      v21 = *(_BYTE *)(v19 + 23);
    }
    else
    {
      v24 = 1;
    }
    if (v21 < 0)
      v20 = v22;
    v3 += v24 + v20 + 1;
    if ((v2 & 8) == 0)
    {
LABEL_26:
      if ((v2 & 0x10) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_26;
  }
  v25 = *((_QWORD *)this + 8);
  v26 = *(unsigned __int8 *)(v25 + 23);
  v27 = v26;
  v28 = *(_QWORD *)(v25 + 8);
  if ((v26 & 0x80u) == 0)
    v29 = *(unsigned __int8 *)(v25 + 23);
  else
    v29 = v28;
  if (v29 >= 0x80)
  {
    v30 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v29);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v28 = *(_QWORD *)(v25 + 8);
    v2 = *((_DWORD *)this + 8);
    v27 = *(_BYTE *)(v25 + 23);
  }
  else
  {
    v30 = 1;
  }
  if (v27 < 0)
    v26 = v28;
  v3 += v30 + v26 + 1;
  if ((v2 & 0x10) != 0)
LABEL_27:
    v3 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 9)) + 1;
LABEL_28:
  if (*((char *)this + 31) < 0)
    v17 = *((_QWORD *)this + 2);
  else
    LODWORD(v17) = *((unsigned __int8 *)this + 31);
  result = (v3 + v17);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Media::CheckTypeAndMergeFrom(std::string *this, std::string *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Media::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::Media::IsInitialized(topotext::Media *this)
{
  return 1;
}

_QWORD *topotext::Media::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Media");
}

topotext::PreviewImage *topotext::PreviewImage::PreviewImage(topotext::PreviewImage *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6D10;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::PreviewImage::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3EB10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::PreviewImage::SharedCtor(topotext::PreviewImage *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_DWORD *)this + 12) = 0;
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = 0;
}

void sub_1B4B3EBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *topotext::PreviewImage::MergeFrom(std::string *this, std::string *a2, uint64_t a3)
{
  topotext::PreviewImage *v4;
  std::string *v5;
  int v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::value_type *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  int data;
  std::string::value_type v16;
  const std::string *v17;
  std::string *v18;
  const std::string *size;
  std::string *v20;
  int v21;
  std::string::value_type v22;
  char v23;
  std::string v24[2];

  v4 = (topotext::PreviewImage *)this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/topotext.pb.cc", 6525);
    v5 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = a2[1].__r_.__value_.__s.__data_[8];
  if (!(_BYTE)v6)
    goto LABEL_12;
  if ((a2[1].__r_.__value_.__s.__data_[8] & 1) != 0)
  {
    data = (int)a2[2].__r_.__value_.__l.__data_;
    *((_DWORD *)v4 + 8) |= 1u;
    *((_DWORD *)v4 + 12) = data;
    v6 = a2[1].__r_.__value_.__r.__words[1];
    if ((v6 & 2) == 0)
    {
LABEL_6:
      if ((v6 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((a2[1].__r_.__value_.__s.__data_[8] & 2) == 0)
  {
    goto LABEL_6;
  }
  v16 = a2[2].__r_.__value_.__s.__data_[4];
  *((_DWORD *)v4 + 8) |= 2u;
  *((_BYTE *)v4 + 52) = v16;
  v6 = a2[1].__r_.__value_.__r.__words[1];
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_21:
  v17 = (const std::string *)a2[1].__r_.__value_.__r.__words[2];
  *((_DWORD *)v4 + 8) |= 4u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
  v18 = (std::string *)*((_QWORD *)v4 + 5);
  if (v18 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v4 + 5) = v18;
  }
  this = std::string::operator=(v18, v17);
  v6 = a2[1].__r_.__value_.__r.__words[1];
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x10) == 0)
      goto LABEL_9;
LABEL_29:
    v21 = (int)a2[3].__r_.__value_.__l.__data_;
    *((_DWORD *)v4 + 8) |= 0x10u;
    *((_DWORD *)v4 + 18) = v21;
    v6 = a2[1].__r_.__value_.__r.__words[1];
    if ((v6 & 0x20) == 0)
    {
LABEL_10:
      if ((v6 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_25:
  size = (const std::string *)a2[2].__r_.__value_.__l.__size_;
  *((_DWORD *)v4 + 8) |= 8u;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
  v20 = (std::string *)*((_QWORD *)v4 + 7);
  if (v20 == (std::string *)google::protobuf::internal::empty_string_)
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v4 + 7) = v20;
  }
  std::string::operator=(v20, size);
  v6 = a2[1].__r_.__value_.__r.__words[1];
  if ((v6 & 0x10) != 0)
    goto LABEL_29;
LABEL_9:
  if ((v6 & 0x20) == 0)
    goto LABEL_10;
LABEL_30:
  v22 = a2[2].__r_.__value_.__s.__data_[5];
  *((_DWORD *)v4 + 8) |= 0x20u;
  *((_BYTE *)v4 + 53) = v22;
  if ((a2[1].__r_.__value_.__r.__words[1] & 0x40) != 0)
  {
LABEL_11:
    v7 = a2[2].__r_.__value_.__r.__words[2];
    *((_DWORD *)v4 + 8) |= 0x40u;
    *((_QWORD *)v4 + 8) = v7;
  }
LABEL_12:
  v10 = (const std::string::value_type *)a2->__r_.__value_.__l.__size_;
  v9 = &a2->__r_.__value_.__s.__data_[8];
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)v4 + 8), v12, v13);
}

void sub_1B4B3EDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::PreviewImage::~PreviewImage(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F6D10;
  topotext::PreviewImage::SharedDtor((topotext::PreviewImage *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::PreviewImage::~PreviewImage(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void topotext::PreviewImage::SharedDtor(topotext::PreviewImage *this, uint64_t a2, uint64_t a3)
{
  topotext::PreviewImage *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = this;
  v4 = *((_QWORD *)this + 5);
  if (v4 != google::protobuf::internal::empty_string_)
  {
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      this = (topotext::PreviewImage *)MEMORY[0x1B5E3DB94](v4, 0x1012C40EC159624);
      v4 = google::protobuf::internal::empty_string_;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, v5, v6);
    }
    else
    {
      v4 = google::protobuf::internal::empty_string_;
    }
  }
  v7 = *((_QWORD *)v3 + 7);
  if (v7 != v4 && v7 != 0)
  {
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    this = (topotext::PreviewImage *)MEMORY[0x1B5E3DB94](v7, 0x1012C40EC159624);
  }
  topotext::protobuf_AddDesc_topotext_2eproto(this);
}

topotext::PreviewImage *topotext::PreviewImage::New(topotext::PreviewImage *this)
{
  topotext::PreviewImage *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::PreviewImage *)operator new();
  topotext::PreviewImage::PreviewImage(v1, v2, v3);
  return v1;
}

void sub_1B4B3EF64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C4044015001);
  _Unwind_Resume(a1);
}

uint64_t topotext::PreviewImage::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 0x7F) != 0)
  {
    *(_WORD *)(this + 52) = 0;
    *(_DWORD *)(this + 48) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_DWORD *)(this + 72) = 0;
    if ((v3 & 4) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 40);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 8) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v5 = *(_QWORD *)(this + 56);
      if (v5 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t topotext::PreviewImage::MergePartialFromCodedStream(topotext::PreviewImage *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  _BYTE *v10;
  char *v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string *v20;
  _BYTE *v21;
  std::string *v22;
  _BYTE *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _BYTE v32[32];
  _QWORD v33[2];
  unsigned int v34[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v33, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v32, (google::protobuf::io::ZeroCopyOutputStream *)v33);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_12:
      if ((_DWORD)v7)
        v12 = (v7 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
LABEL_81:
        v30 = 1;
        goto LABEL_83;
      }
LABEL_34:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v32, v4))goto LABEL_82;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 13)
          goto LABEL_32;
        v34[0] = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v34))
          goto LABEL_82;
        *((_DWORD *)this + 12) = v34[0];
        *((_DWORD *)this + 8) |= 1u;
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 != 16)
          continue;
        v11 = v10 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_26:
        *(_QWORD *)v34 = 0;
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v34))
            goto LABEL_82;
          v16 = *(_QWORD *)v34;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v16 = *v11;
          v17 = v11 + 1;
          *((_QWORD *)a2 + 1) = v17;
        }
        *((_BYTE *)this + 52) = v16 != 0;
        v15 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v15;
        if ((unint64_t)v17 >= v9 || *v17 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v17 + 1;
LABEL_42:
        *((_DWORD *)this + 8) = v15 | 4;
        if (!google::protobuf::internal::empty_string_)
          goto LABEL_84;
        v20 = (std::string *)*((_QWORD *)this + 5);
        if (v20 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v20 = (std::string *)operator new();
          v20->__r_.__value_.__r.__words[0] = 0;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 5) = v20;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v20))
          goto LABEL_82;
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v21 + 1;
LABEL_49:
        *((_DWORD *)this + 8) |= 8u;
        if (!google::protobuf::internal::empty_string_)
LABEL_84:
          __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
        v22 = (std::string *)*((_QWORD *)this + 7);
        if (v22 == (std::string *)google::protobuf::internal::empty_string_)
        {
          v22 = (std::string *)operator new();
          v22->__r_.__value_.__r.__words[0] = 0;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          *((_QWORD *)this + 7) = v22;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v22))
          goto LABEL_82;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v23 >= v13 || *v23 != 40)
          continue;
        v14 = v23 + 1;
        *((_QWORD *)a2 + 1) = v14;
LABEL_56:
        v34[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v34))
            goto LABEL_82;
          v24 = v34[0];
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v24 = *v14;
          v25 = v14 + 1;
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_DWORD *)this + 18) = v24;
        *((_DWORD *)this + 8) |= 0x10u;
        if ((unint64_t)v25 >= v13 || *v25 != 48)
          continue;
        v18 = v25 + 1;
        *((_QWORD *)a2 + 1) = v18;
LABEL_64:
        *(_QWORD *)v34 = 0;
        if ((unint64_t)v18 >= v13 || *v18 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v34))
            goto LABEL_82;
          v26 = *(_QWORD *)v34;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v26 = *v18;
          v27 = v18 + 1;
          *((_QWORD *)a2 + 1) = v27;
        }
        *((_BYTE *)this + 53) = v26 != 0;
        *((_DWORD *)this + 8) |= 0x20u;
        if ((unint64_t)v27 >= v13 || *v27 != 56)
          continue;
        v19 = v27 + 1;
        *((_QWORD *)a2 + 1) = v19;
        goto LABEL_72;
      case 2u:
        if ((_DWORD)v7 != 16)
          goto LABEL_32;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        goto LABEL_26;
      case 3u:
        if ((_DWORD)v7 != 26)
          goto LABEL_32;
        v15 = *((_DWORD *)this + 8);
        goto LABEL_42;
      case 4u:
        if ((_DWORD)v7 == 34)
          goto LABEL_49;
        goto LABEL_32;
      case 5u:
        if ((_DWORD)v7 != 40)
          goto LABEL_32;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_56;
      case 6u:
        if ((_DWORD)v7 != 48)
          goto LABEL_32;
        v18 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        goto LABEL_64;
      case 7u:
        if ((_DWORD)v7 != 56)
        {
LABEL_32:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_81;
          goto LABEL_34;
        }
        v19 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_72:
        *(_QWORD *)v34 = 0;
        if ((unint64_t)v19 >= v13 || *v19 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v34))
          {
LABEL_82:
            v30 = 0;
            goto LABEL_83;
          }
          v28 = *(_QWORD *)v34;
          v29 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v13 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v28 = *v19;
          v29 = (unsigned __int8 *)(v19 + 1);
          *((_QWORD *)a2 + 1) = v29;
        }
        *((_QWORD *)this + 8) = v28;
        *((_DWORD *)this + 8) |= 0x40u;
        if (v29 != (unsigned __int8 *)v13 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v30 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_83:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v32);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v33);
        return v30;
      default:
        goto LABEL_12;
    }
  }
}

void sub_1B4B3F504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::PreviewImage::SerializeWithCachedSizes(topotext::PreviewImage *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)1, a2, *((float *)this + 12), a3);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((unsigned __int8 *)this + 52), a2, a4);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, *((_QWORD *)this + 5), a2);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(4, *((_QWORD *)this + 7), a2);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)5, *((_DWORD *)this + 18), a2, a4);
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_16:
  google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)6, *((unsigned __int8 *)this + 53), a2, a4);
  if ((*((_DWORD *)this + 8) & 0x40) != 0)
LABEL_8:
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)7, *((_QWORD *)this + 8), a2, a4);
LABEL_9:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::PreviewImage::ByteSize(topotext::PreviewImage *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  google::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t v18;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 32);
  if (!*((_BYTE *)this + 32))
  {
    v3 = 0;
    goto LABEL_35;
  }
  v3 = (v2 << 31 >> 31) & 5 | v2 & 2;
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_4;
LABEL_16:
    v10 = *((_QWORD *)this + 7);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v12 = v11;
    v13 = *(_QWORD *)(v10 + 8);
    if ((v11 & 0x80u) == 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = v13;
    if (v14 >= 0x80)
    {
      v15 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v14);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v13 = *(_QWORD *)(v10 + 8);
      v2 = *((_DWORD *)this + 8);
      v12 = *(_BYTE *)(v10 + 23);
    }
    else
    {
      v15 = 1;
    }
    if (v12 < 0)
      v11 = v13;
    v3 += v15 + v11 + 1;
    if ((v2 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_25;
  }
  v4 = *((_QWORD *)this + 5);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 8);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  v3 += v9 + v5 + 1;
  if ((v2 & 8) != 0)
    goto LABEL_16;
LABEL_4:
  if ((v2 & 0x10) != 0)
  {
LABEL_25:
    v16 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 18);
    if ((v16 & 0x80000000) != 0)
    {
      v17 = 11;
    }
    else if (v16 >= 0x80)
    {
      v17 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v17 = 2;
    }
    v3 += v17;
  }
LABEL_31:
  if ((v2 & 0x20) != 0)
    v3 += 2;
  if ((v2 & 0x40) != 0)
    v3 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 8)) + 1;
LABEL_35:
  if (*((char *)this + 31) < 0)
    v18 = *((_QWORD *)this + 2);
  else
    LODWORD(v18) = *((unsigned __int8 *)this + 31);
  result = (v3 + v18);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::PreviewImage::CheckTypeAndMergeFrom(std::string *this, std::string *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::PreviewImage::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::PreviewImage::IsInitialized(topotext::PreviewImage *this)
{
  return 1;
}

_QWORD *topotext::PreviewImage::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.PreviewImage");
}

topotext::Todo *topotext::Todo::Todo(topotext::Todo *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F70D0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  topotext::Todo::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B3F848(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void topotext::Todo::SharedCtor(topotext::Todo *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = v5;
  *((_BYTE *)this + 48) = 0;
}

void sub_1B4B3F8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void topotext::Todo::~Todo(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F70D0;
  topotext::VectorTimestamp_Clock::SharedDtor((topotext::VectorTimestamp_Clock *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Todo::~Todo(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

topotext::Todo *topotext::Todo::New(topotext::Todo *this)
{
  topotext::Todo *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (topotext::Todo *)operator new();
  topotext::Todo::Todo(v1, v2, v3);
  return v1;
}

void sub_1B4B3F9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40417120EDLL);
  _Unwind_Resume(a1);
}

uint64_t topotext::Todo::MergePartialFromCodedStream(topotext::Todo *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE v18[32];
  unint64_t v19[2];
  unint64_t v20;

  google::protobuf::io::StringOutputStream::StringOutputStream(v19, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18, (google::protobuf::io::ZeroCopyOutputStream *)v19);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_16;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
      {
        if ((_DWORD)v7 == 16)
        {
          v12 = (char *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          goto LABEL_27;
        }
LABEL_23:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_36;
        goto LABEL_20;
      }
      if (v7 >> 3 == 1)
        break;
LABEL_16:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
LABEL_36:
        v16 = 1;
        goto LABEL_38;
      }
LABEL_20:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v18, v4))goto LABEL_37;
    }
    if ((_DWORD)v7 != 10)
      goto LABEL_23;
    *((_DWORD *)this + 8) |= 1u;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v9 = (std::string *)*((_QWORD *)this + 5);
    if (v9 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__r.__words[0] = 0;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)this + 5) = v9;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v9))
      break;
    v11 = (_BYTE *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v11 < v10 && *v11 == 16)
    {
      v12 = v11 + 1;
      *((_QWORD *)a2 + 1) = v12;
LABEL_27:
      v20 = 0;
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v20))
          break;
        v14 = v20;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v14 = *v12;
        v15 = (unsigned __int8 *)(v12 + 1);
        *((_QWORD *)a2 + 1) = v15;
      }
      *((_BYTE *)this + 48) = v14 != 0;
      *((_DWORD *)this + 8) |= 2u;
      if (v15 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v16 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
  }
LABEL_37:
  v16 = 0;
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v19);
  return v16;
}

void sub_1B4B3FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Todo::SerializeWithCachedSizes(topotext::Todo *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)2, *((unsigned __int8 *)this + 48), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t topotext::Todo::ByteSize(topotext::Todo *this)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 32);
  if (*((_BYTE *)this + 32))
  {
    if ((v2 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 5);
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v8 = *(unsigned __int8 *)(v4 + 23);
      else
        v8 = v7;
      if (v8 >= 0x80)
      {
        v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v8);
        v5 = *(unsigned __int8 *)(v4 + 23);
        v7 = *(_QWORD *)(v4 + 8);
        v9 = v10 + 1;
        v2 = *((_DWORD *)this + 8);
        v6 = *(_BYTE *)(v4 + 23);
      }
      else
      {
        v9 = 2;
      }
      if (v6 < 0)
        v5 = v7;
      v3 = v9 + v5;
    }
    else
    {
      v3 = 0;
    }
    if ((v2 & 2) != 0)
      v2 = v3 + 2;
    else
      v2 = v3;
  }
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *topotext::Todo::CheckTypeAndMergeFrom(topotext::Todo *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Todo::MergeFrom(this, lpsrc, v5);
}

uint64_t topotext::Todo::IsInitialized(topotext::Todo *this)
{
  return 1;
}

_QWORD *topotext::Todo::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Todo");
}

void topotext::Color::~Color(void **this)
{
  *this = &off_1E67F7148;
  topotext::protobuf_AddDesc_topotext_2eproto((topotext *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  topotext::Color::~Color(this);
  JUMPOUT(0x1B5E3DB94);
}

double topotext::Color::New(topotext::Color *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F7148;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t topotext::Color::MergePartialFromCodedStream(topotext::Color *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  _BYTE *v9;
  BOOL v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[32];
  _QWORD v16[2];
  unsigned int v17;

  google::protobuf::io::StringOutputStream::StringOutputStream(v16, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v15, (google::protobuf::io::ZeroCopyOutputStream *)v16);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_12:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      if (v10)
      {
LABEL_39:
        v13 = 1;
        goto LABEL_40;
      }
LABEL_31:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v15, v4))
      {
LABEL_38:
        v13 = 0;
        goto LABEL_40;
      }
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 13)
          goto LABEL_29;
        v17 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v17))
          goto LABEL_38;
        *((_DWORD *)this + 10) = v17;
        *((_DWORD *)this + 8) |= 1u;
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 != 21)
          continue;
        *((_QWORD *)a2 + 1) = v9 + 1;
LABEL_19:
        v17 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v17))
          goto LABEL_38;
        *((_DWORD *)this + 11) = v17;
        *((_DWORD *)this + 8) |= 2u;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 != 29)
          continue;
        *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_24:
        v17 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v17))
          goto LABEL_38;
        *((_DWORD *)this + 12) = v17;
        *((_DWORD *)this + 8) |= 4u;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 != 37)
          continue;
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_33:
        v17 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v17))
          goto LABEL_38;
        *((_DWORD *)this + 13) = v17;
        *((_DWORD *)this + 8) |= 8u;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v13 = 1;
        *((_BYTE *)a2 + 36) = 1;
        break;
      case 2u:
        if ((_DWORD)v7 == 21)
          goto LABEL_19;
        goto LABEL_29;
      case 3u:
        if ((_DWORD)v7 == 29)
          goto LABEL_24;
        goto LABEL_29;
      case 4u:
        if ((_DWORD)v7 == 37)
          goto LABEL_33;
LABEL_29:
        if ((_DWORD)v7 && (v7 & 7) != 4)
          goto LABEL_31;
        goto LABEL_39;
      default:
        goto LABEL_12;
    }
    break;
  }
LABEL_40:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v15);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v16);
  return v13;
}

void sub_1B4B400F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t topotext::Color::SerializeWithCachedSizes(topotext::Color *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3)
{
  int v5;
  char *v6;
  uint64_t v7;

  v5 = *((_DWORD *)this + 8);
  if ((v5 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)1, a2, *((float *)this + 10), a3);
    v5 = *((_DWORD *)this + 8);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)2, a2, *((float *)this + 11), a3);
  v5 = *((_DWORD *)this + 8);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_10:
  google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)3, a2, *((float *)this + 12), a3);
  if ((*((_DWORD *)this + 8) & 8) != 0)
LABEL_5:
    google::protobuf::internal::WireFormatLite::WriteFloat((google::protobuf::internal::WireFormatLite *)4, a2, *((float *)this + 13), a3);
LABEL_6:
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t topotext::Color::ByteSize(topotext::Color *this)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((unsigned __int8 *)this + 32);
  v2 = (v1 << 31 >> 31) & 5;
  if ((v1 & 2) != 0)
    v2 += 5;
  if ((v1 & 4) != 0)
    v2 += 5;
  if ((v1 & 8) != 0)
    v2 += 5;
  if (*((_BYTE *)this + 32))
    v3 = v2;
  else
    v3 = 0;
  if (*((char *)this + 31) < 0)
    v4 = *((_QWORD *)this + 2);
  else
    LODWORD(v4) = *((unsigned __int8 *)this + 31);
  v5 = (v3 + v4);
  *((_DWORD *)this + 9) = v5;
  return v5;
}

std::string *topotext::Color::CheckTypeAndMergeFrom(topotext::Color *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return topotext::Color::MergeFrom(this, lpsrc);
}

uint64_t topotext::Color::IsInitialized(topotext::Color *this)
{
  return 1;
}

_QWORD *topotext::Color::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "topotext.Color");
}

uint64_t topotext::String::GetCachedSize(topotext::String *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::VectorTimestamp_Clock_ReplicaClock::GetCachedSize(topotext::VectorTimestamp_Clock_ReplicaClock *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::VectorTimestamp_Clock::GetCachedSize(topotext::VectorTimestamp_Clock *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::VectorTimestamp::GetCachedSize(topotext::VectorTimestamp *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::CharID::GetCachedSize(topotext::CharID *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Substring::GetCachedSize(topotext::Substring *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Selection_Range::GetCachedSize(topotext::Selection_Range *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Selection::GetCachedSize(topotext::Selection *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::AttributeRun::GetCachedSize(topotext::AttributeRun *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Font::GetCachedSize(topotext::Font *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::ParagraphStyle::GetCachedSize(topotext::ParagraphStyle *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::HashtagInfo::GetCachedSize(topotext::HashtagInfo *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::AttachmentInfo::GetCachedSize(topotext::AttachmentInfo *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Attachment::GetCachedSize(topotext::Attachment *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t topotext::Location::GetCachedSize(topotext::Location *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Media::GetCachedSize(topotext::Media *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::PreviewImage::GetCachedSize(topotext::PreviewImage *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Todo::GetCachedSize(topotext::Todo *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t topotext::Color::GetCachedSize(topotext::Color *this)
{
  return *((unsigned int *)this + 9);
}

void sub_1B4B40358(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40BCC55259);
  _Unwind_Resume(a1);
}

topotext::Attachment *google::protobuf::internal::GenericTypeHandler<topotext::Attachment>::New()
{
  topotext::Attachment *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (topotext::Attachment *)operator new();
  topotext::Attachment::Attachment(v0, v1, v2);
  return v0;
}

void sub_1B4B403B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40207117CFLL);
  _Unwind_Resume(a1);
}

void sub_1B4B40494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B40644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B40778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C40E3C8ABF7);
  _Unwind_Resume(a1);
}

void sub_1B4B40854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4092C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B40A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

topotext::PreviewImage *google::protobuf::internal::GenericTypeHandler<topotext::PreviewImage>::New()
{
  topotext::PreviewImage *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (topotext::PreviewImage *)operator new();
  topotext::PreviewImage::PreviewImage(v0, v1, v2);
  return v0;
}

void sub_1B4B40A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C4044015001);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B40B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const topotext::Substring *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const topotext::Substring *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Substring>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F7418;
        *(_QWORD *)(v11 + 64) = 0;
        *(_QWORD *)(v11 + 72) = 0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_QWORD *)(v11 + 53) = 0;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = topotext::Substring::MergeFrom((topotext::Substring *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B40CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  uint64_t v7;
  const topotext::AttributeRun *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  topotext::AttributeRun *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v8 = (const topotext::AttributeRun *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::AttributeRun>::TypeHandler>((uint64_t)a2, v6);
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = google::protobuf::internal::GenericTypeHandler<topotext::AttributeRun>::New();
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(topotext::AttributeRun **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = topotext::AttributeRun::MergeFrom(v12, v8, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B40DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  int32x2_t *v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int32x2_t *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Attachment>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = (int32x2_t *)google::protobuf::internal::GenericTypeHandler<topotext::Attachment>::New();
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(int32x2_t **)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = topotext::Attachment::MergeFrom(v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B40F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const topotext::VectorTimestamp_Clock_ReplicaClock *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const topotext::VectorTimestamp_Clock_ReplicaClock *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock_ReplicaClock>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6FE0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_QWORD *)(v11 + 40) = 0;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = topotext::VectorTimestamp_Clock_ReplicaClock::MergeFrom((topotext::VectorTimestamp_Clock_ReplicaClock *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B410AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  int32x2_t *v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int32x2_t *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::VectorTimestamp_Clock>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = (int32x2_t *)google::protobuf::internal::GenericTypeHandler<topotext::VectorTimestamp_Clock>::New();
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(int32x2_t **)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = topotext::VectorTimestamp_Clock::MergeFrom(v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B411E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const topotext::Selection_Range *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const topotext::Selection_Range *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::Selection_Range>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6E78;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = topotext::Selection_Range::MergeFrom((topotext::Selection_Range *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B4135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  std::string *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v8 = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<topotext::PreviewImage>::TypeHandler>((uint64_t)a2, v6);
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = (std::string *)google::protobuf::internal::GenericTypeHandler<topotext::PreviewImage>::New();
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(std::string **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = topotext::PreviewImage::MergeFrom(v12, v8, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B41498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void topotext::Selection::MergeFrom()
{
  __assert_rtn("set_affinity", "topotext.pb.h", 3757, "::topotext::Selection_Affinity_IsValid(value)");
}

void topotext::AttributeRun::MergeFrom()
{
  __assert_rtn("set_writingdirection", "topotext.pb.h", 4117, "::topotext::AttributeRun_WritingDirection_IsValid(value)");
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  int v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 > 2006001)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/stubs/common.cc";
    v23 = 61;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 6, 1);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 2006000)
  {
    v21 = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/stubs/common.cc";
    v23 = 72;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 2, 6, 1);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1B4B41804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void google::protobuf::internal::LogFinisher::operator=(uint64_t a1, google::protobuf::internal::LogMessage *a2)
{
  google::protobuf::internal::LogMessage::Finish(a2);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(int a1, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  v4 = (FILE **)MEMORY[0x1E0C80C10];
  if (*(char *)(a4 + 23) >= 0)
    v5 = (const char *)a4;
  else
    v5 = *(const char **)a4;
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", (&google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names)[a1], a2, a3, v5);
  return fflush(*v4);
}

uint64_t google::protobuf::internal::DeleteLogSilencerCount(google::protobuf::internal *this)
{
  uint64_t result;

  result = google::protobuf::internal::log_silencer_count_mutex_;
  if (google::protobuf::internal::log_silencer_count_mutex_)
  {
    google::protobuf::internal::Mutex::~Mutex((pthread_mutex_t **)google::protobuf::internal::log_silencer_count_mutex_);
    result = MEMORY[0x1B5E3DB94]();
  }
  google::protobuf::internal::log_silencer_count_mutex_ = 0;
  return result;
}

void google::protobuf::internal::InitLogSilencerCount(google::protobuf::internal *this)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  void (*v3)(void);

  v1 = (_QWORD *)operator new();
  v2 = (pthread_mutex_t *)operator new();
  *v1 = v2;
  pthread_mutex_init(v2, 0);
  google::protobuf::internal::log_silencer_count_mutex_ = (uint64_t)v1;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)google::protobuf::internal::DeleteLogSilencerCount, v3);
}

void sub_1B4B41B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::OnShutdown(google::protobuf::internal *this, void (*a2)(void))
{
  uint64_t v3;
  pthread_mutex_t **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v3 = google::protobuf::internal::shutdown_functions_init;
  __dmb(0xBu);
  if (v3 != 2)
  {
    v19[0] = &off_1E67F6B80;
    v19[1] = google::protobuf::internal::InitShutdownFunctions;
    v20 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::shutdown_functions_init, (uint64_t)v19);
  }
  v4 = (pthread_mutex_t **)google::protobuf::internal::shutdown_functions_mutex;
  google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)google::protobuf::internal::shutdown_functions_mutex);
  v5 = (void **)google::protobuf::internal::shutdown_functions;
  v6 = *(_QWORD **)(google::protobuf::internal::shutdown_functions + 8);
  v7 = *(_QWORD *)(google::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((uint64_t)v6 - *(_QWORD *)google::protobuf::internal::shutdown_functions) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<void (*)(void)>::__throw_length_error[abi:ne180100]();
    v10 = v7 - *(_QWORD *)google::protobuf::internal::shutdown_functions;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CRDT::Document_DocObject *>>(google::protobuf::internal::shutdown_functions + 16, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = this;
    v8 = v14 + 8;
    v17 = (char *)*v5;
    v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*v5;
    }
    *v5 = v14;
    v5[1] = v8;
    v5[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = this;
    v8 = v6 + 1;
  }
  v5[1] = v8;
  google::protobuf::internal::Mutex::Unlock(v4);
}

void sub_1B4B41C60(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  google::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t *google::protobuf::internal::InitLogSilencerCountOnce(google::protobuf::internal *this)
{
  uint64_t v1;
  unint64_t *result;
  _QWORD v3[2];
  char v4;

  v1 = google::protobuf::internal::log_silencer_count_init_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E67F6B80;
    v3[1] = google::protobuf::internal::InitLogSilencerCount;
    v4 = 0;
    return google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::log_silencer_count_init_, (uint64_t)v3);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

void google::protobuf::internal::LogMessage::Finish(google::protobuf::internal::LogMessage *this)
{
  int v2;
  pthread_mutex_t **v3;
  int v4;
  void *exception;

  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    google::protobuf::internal::InitLogSilencerCountOnce(this);
    v3 = (pthread_mutex_t **)google::protobuf::internal::log_silencer_count_mutex_;
    google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)google::protobuf::internal::log_silencer_count_mutex_);
    v4 = google::protobuf::internal::log_silencer_count_;
    google::protobuf::internal::Mutex::Unlock(v3);
    if (v4 > 0)
      goto LABEL_6;
    v2 = *(_DWORD *)this;
  }
  google::protobuf::internal::log_handler_(v2, *((const char **)this + 1), *((_DWORD *)this + 4), (uint64_t)this + 24);
LABEL_6:
  if (*(_DWORD *)this == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException(exception, *((_QWORD *)this + 1), *((unsigned int *)this + 4), (char *)this + 24);
  }
}

void sub_1B4B41E0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::FunctionClosure0::~FunctionClosure0(google::protobuf::internal::FunctionClosure0 *this)
{
  JUMPOUT(0x1B5E3DB94);
}

void google::protobuf::internal::Mutex::~Mutex(pthread_mutex_t **this)
{
  pthread_mutex_destroy(*this);
  if (*this)
    MEMORY[0x1B5E3DB94](*this, 0x1000C40FA0F61DDLL);
}

void google::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/stubs/common.cc";
    v6 = 304;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B4B41F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void google::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1;
  int v2;
  char *v3;
  int v4;
  const char *v5;
  int v6;
  std::string __p;

  v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    v2 = v1;
    v4 = 3;
    v5 = "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/stubs/common.cc";
    v6 = 311;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    v3 = strerror(v2);
    std::string::append(&__p, v3);
    google::protobuf::internal::LogMessage::Finish((google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B4B41FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::InitShutdownFunctions(google::protobuf::internal *this)
{
  _QWORD *v1;
  _QWORD *v2;
  pthread_mutex_t *v3;
  uint64_t result;

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  google::protobuf::internal::shutdown_functions = (uint64_t)v1;
  v2 = (_QWORD *)operator new();
  v3 = (pthread_mutex_t *)operator new();
  *v2 = v3;
  result = pthread_mutex_init(v3, 0);
  google::protobuf::internal::shutdown_functions_mutex = (uint64_t)v2;
  return result;
}

void sub_1B4B42084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E67F6AC8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t google::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 16);
  result = this[1]();
  if (this)
  {
    if (v2)
      return (*((uint64_t (**)(uint64_t (**)(void)))*this + 1))(this);
  }
  return result;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E67F6AC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1B4B421C4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<void (*)(void)>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void google::protobuf::io::CodedInputStream::~CodedInputStream(google::protobuf::io::CodedInputStream *this)
{
  std::string *v2;
  std::string *v3;
  char v4;
  std::string v5[2];

  if (*(_QWORD *)this)
    google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition(this);
  if (*((_DWORD *)this + 13) == -2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/coded_stream.cc", 78);
    v2 = google::protobuf::internal::LogMessage::operator<<(v5, "The total number of bytes read was ");
    v3 = google::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 6));
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (google::protobuf::internal::LogMessage *)v3);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
}

_DWORD *google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;
  unsigned int v3;

  if (this[7] + this[11] + this[4] - this[2] >= 1)
  {
    v1 = this;
    this = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
    v2 = *((_QWORD *)v1 + 1);
    v3 = v1[6] - v1[11] + v2 - v1[4];
    *((_QWORD *)v1 + 2) = v2;
    v1[11] = 0;
    *((_QWORD *)v1 + 3) = v3;
  }
  return this;
}

uint64_t google::protobuf::io::CodedInputStream::PushLimit(google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;

  v2 = *((_DWORD *)this + 6);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 10);
  v5 = *((int *)this + 11);
  v6 = v2 - v5 + *((_DWORD *)this + 2) - v3;
  v7 = (v6 ^ 0x7FFFFFFF) < a2 || a2 < 0;
  v8 = v6 + a2;
  if (v7)
    v8 = 0x7FFFFFFF;
  if ((int)v4 < v8)
    v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = v8;
  v9 = v3 + v5;
  *((_QWORD *)this + 2) = v9;
  if (*((_DWORD *)this + 12) < v8)
    v8 = *((_DWORD *)this + 12);
  v10 = __OFSUB__(v2, v8);
  v11 = v2 - v8;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    v11 = 0;
  else
    *((_QWORD *)this + 2) = v9 - v11;
  *((_DWORD *)this + 11) = v11;
  return v4;
}

uint64_t google::protobuf::io::CodedInputStream::PopLimit(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  *(_DWORD *)(this + 40) = a2;
  v2 = *(_DWORD *)(this + 48);
  v3 = *(_QWORD *)(this + 16) + *(int *)(this + 44);
  *(_QWORD *)(this + 16) = v3;
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = v2;
  v5 = *(_DWORD *)(this + 24);
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v7 = 0;
  else
    *(_QWORD *)(this + 16) = v3 - v7;
  *(_DWORD *)(this + 44) = v7;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

uint64_t google::protobuf::io::CodedInputStream::BytesUntilLimit(google::protobuf::io::CodedInputStream *this)
{
  int v1;

  v1 = *((_DWORD *)this + 10);
  if (v1 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return (v1
                        - *((_DWORD *)this + 6)
                        + *((_DWORD *)this + 11)
                        + *((_DWORD *)this + 4)
                        - *((_DWORD *)this + 2));
}

void google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(google::protobuf::io::CodedInputStream *this)
{
  std::string *v2;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/coded_stream.cc", 180);
  v2 = google::protobuf::internal::LogMessage::operator<<(v6, "A protocol message was rejected because it was too big (more than ");
  v3 = google::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 12));
  v4 = google::protobuf::internal::LogMessage::operator<<(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
  google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, (google::protobuf::internal::LogMessage *)v4);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
}

void sub_1B4B424F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::io::CodedInputStream::Refresh(google::protobuf::io::CodedInputStream *this)
{
  _QWORD *v2;
  std::string *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  std::string v30[2];

  v2 = (_QWORD *)((char *)this + 8);
  if (*((_DWORD *)this + 4) != *((_DWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/coded_stream.cc", 519);
    v3 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (0) == (BufferSize()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v29, (google::protobuf::internal::LogMessage *)v3);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
  }
  v4 = *((_DWORD *)this + 11);
  if (v4 > 0 || *((int *)this + 7) > 0 || (v5 = *((_DWORD *)this + 6), v5 == *((_DWORD *)this + 10)))
  {
    v6 = *((_DWORD *)this + 6) - v4;
    v7 = *((_DWORD *)this + 12);
    if (v6 >= v7 && v7 != *((_DWORD *)this + 10))
      google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(this);
    return 0;
  }
  else
  {
    v10 = *((_DWORD *)this + 13);
    if ((v10 & 0x80000000) == 0 && v5 >= v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/coded_stream.cc", 537);
      v11 = google::protobuf::internal::LogMessage::operator<<(v30, "Reading dangerously large protocol message.  If the message turns out to be larger than ");
      v12 = google::protobuf::internal::LogMessage::operator<<(v11, *((_DWORD *)this + 12));
      v13 = google::protobuf::internal::LogMessage::operator<<(v12, " bytes, parsing will be halted for security reasons.  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v29, (google::protobuf::internal::LogMessage *)v13);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
      *((_DWORD *)this + 13) = -2;
    }
    v29 = 0;
    v28 = 0;
    v14 = *(_QWORD *)this;
    do
    {
      v8 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v14 + 16))(v14, &v29, &v28);
      if (!(_DWORD)v8)
      {
        *v2 = 0;
        v2[1] = 0;
        return v8;
      }
      v15 = v28;
    }
    while (!v28);
    v16 = v29 + v28;
    *((_QWORD *)this + 1) = v29;
    *((_QWORD *)this + 2) = v16;
    if (v15 < 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v30, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/io/coded_stream.cc", 554);
      v17 = google::protobuf::internal::LogMessage::operator<<(v30, "CHECK failed: (buffer_size) >= (0): ");
      google::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, (google::protobuf::internal::LogMessage *)v17);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v30[0].__r_.__value_.__l.__data_);
      v15 = v28;
    }
    v18 = *((_DWORD *)this + 6);
    v19 = v18 - (v15 ^ 0x7FFFFFFF);
    if (v18 <= (v15 ^ 0x7FFFFFFF))
    {
      v21 = v15 + v18;
      v20 = *((_QWORD *)this + 2);
    }
    else
    {
      *((_DWORD *)this + 7) = v19;
      v20 = *((_QWORD *)this + 2) - v19;
      *((_QWORD *)this + 2) = v20;
      v21 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v21;
    v22 = *((_DWORD *)this + 10);
    v23 = v20 + *((int *)this + 11);
    *((_QWORD *)this + 2) = v23;
    v24 = *((_DWORD *)this + 12);
    if (v24 >= v22)
      v24 = v22;
    v25 = __OFSUB__(v21, v24);
    v26 = v21 - v24;
    if ((v26 < 0) ^ v25 | (v26 == 0))
      v26 = 0;
    else
      *((_QWORD *)this + 2) = v23 - v26;
    *((_DWORD *)this + 11) = v26;
  }
  return v8;
}

void sub_1B4B42748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::io::CodedInputStream::ReadRaw(google::protobuf::io::CodedInputStream *this, char *__dst, int a3)
{
  int v6;
  const void *v7;
  int v8;
  BOOL v9;

  while (1)
  {
    v6 = a3;
    v7 = (const void *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2) - (_DWORD)v7;
    v9 = __OFSUB__(a3, v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0))
      break;
    memcpy(__dst, v7, v8);
    __dst += v8;
    *((_QWORD *)this + 1) += v8;
    if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
      return v6 <= v8;
  }
  memcpy(__dst, v7, v6);
  *((_QWORD *)this + 1) += v6;
  return v6 <= v8;
}

BOOL google::protobuf::io::CodedInputStream::ReadString(uint64_t a1, std::string *this, std::string::size_type __n)
{
  unsigned int v3;
  std::string *v4;

  if ((__n & 0x80000000) != 0)
    return 0;
  v3 = __n;
  v4 = this;
  if (*(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 8) < (int)__n)
    return google::protobuf::io::CodedInputStream::ReadStringFallback((google::protobuf::io::CodedInputStream *)a1, this, __n);
  std::string::resize(this, __n, 0);
  if (v3)
  {
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v4->__r_.__value_.__l.__size_)
      {
LABEL_11:
        v4 = 0;
        goto LABEL_12;
      }
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    else if (!*((_BYTE *)&v4->__r_.__value_.__s + 23))
    {
      goto LABEL_11;
    }
LABEL_12:
    memcpy(v4, *(const void **)(a1 + 8), v3);
    *(_QWORD *)(a1 + 8) += v3;
  }
  return 1;
}

BOOL google::protobuf::io::CodedInputStream::ReadStringFallback(google::protobuf::io::CodedInputStream *this, std::string *a2, std::string::size_type __requested_capacity)
{
  int v3;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  const std::string::value_type *v11;
  int v12;
  BOOL v13;

  v3 = __requested_capacity;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a2->__r_.__value_.__l.__size_)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((_BYTE *)&a2->__r_.__value_.__s + 23))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  }
  v6 = *((_DWORD *)this + 12);
  if (v6 >= *((_DWORD *)this + 10))
    v6 = *((_DWORD *)this + 10);
  if (v6 != 0x7FFFFFFF)
  {
    v7 = v6 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 4) - *((_DWORD *)this + 2);
    v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1)
      std::string::reserve(a2, __requested_capacity);
  }
  while (1)
  {
    v10 = v3;
    v11 = (const std::string::value_type *)*((_QWORD *)this + 1);
    v12 = *((_QWORD *)this + 2) - (_DWORD)v11;
    v13 = __OFSUB__(v3, v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0))
      break;
    if (v12)
    {
      std::string::append(a2, v11, v12);
      v11 = (const std::string::value_type *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = &v11[v12];
    if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
      return v10 <= v12;
  }
  std::string::append(a2, v11, v10);
  *((_QWORD *)this + 1) += v10;
  return v10 <= v12;
}

BOOL google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  unsigned int *v3;
  _BOOL8 result;
  char __dst[4];

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  if (((*((_DWORD *)this + 4) - (_DWORD)v3) & 0xFFFFFFFC) != 0)
  {
    *((_QWORD *)this + 1) = v3 + 1;
  }
  else
  {
    v3 = (unsigned int *)__dst;
    result = google::protobuf::io::CodedInputStream::ReadRaw(this, __dst, 4);
    if (!result)
      return result;
  }
  *a2 = *v3;
  return 1;
}

BOOL google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  unint64_t *v3;
  _BOOL8 result;
  char v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)*((_QWORD *)this + 1);
  if (((*((_DWORD *)this + 4) - (_DWORD)v3) & 0xFFFFFFF8) != 0)
  {
    *((_QWORD *)this + 1) = v3 + 1;
  }
  else
  {
    v3 = (unint64_t *)v5;
    result = google::protobuf::io::CodedInputStream::ReadRaw(this, v5, 8);
    if (!result)
      return result;
  }
  *a2 = *v3;
  return 1;
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint64Fallback(google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((int)v3 - (int)v2 <= 9 && (v3 <= (unint64_t)v2 || *(char *)(v3 - 1) < 0))
    return google::protobuf::io::CodedInputStream::ReadVarint64Slow(this, a2);
  v4 = (_DWORD)v2 + 1;
  v5 = *v2;
  if (((char)*v2 & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
LABEL_25:
    *((_QWORD *)this + 1) = &v2[v4 - (int)v2];
    *a2 = v5 | ((unint64_t)v6 << 28) | (v7 << 56);
    return 1;
  }
  v5 = v5 + (v2[1] << 7) - 128;
  if (((char)v2[1] & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 2;
    goto LABEL_25;
  }
  v5 = v5 + (v2[2] << 14) - 0x4000;
  if (((char)v2[2] & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 3;
    goto LABEL_25;
  }
  v5 = v5 + (v2[3] << 21) - 0x200000;
  if (((char)v2[3] & 0x80000000) == 0)
  {
    v6 = 0;
    v7 = 0;
    v4 = (_DWORD)v2 + 4;
    goto LABEL_25;
  }
  v5 -= 0x10000000;
  v6 = v2[4];
  if (((char)v2[4] & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 5;
    goto LABEL_25;
  }
  v6 = v6 + (v2[5] << 7) - 128;
  if (((char)v2[5] & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 6;
    goto LABEL_25;
  }
  v6 = v6 + (v2[6] << 14) - 0x4000;
  if (((char)v2[6] & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 7;
    goto LABEL_25;
  }
  v6 = v6 + (v2[7] << 21) - 0x200000;
  if (((char)v2[7] & 0x80000000) == 0)
  {
    v7 = 0;
    v4 = (_DWORD)v2 + 8;
    goto LABEL_25;
  }
  v6 -= 0x10000000;
  v7 = v2[8];
  if (((char)v2[8] & 0x80000000) == 0)
  {
    v4 = (_DWORD)v2 + 9;
    goto LABEL_25;
  }
  if (((char)v2[9] & 0x80000000) == 0)
  {
    v4 = (_DWORD)v2 + 10;
    v7 = v7 + (v2[9] << 7) - 128;
    goto LABEL_25;
  }
  return 0;
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint32Fallback(google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v11;

  v4 = (char *)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  if ((int)v3 - (int)v4 <= 9 && (v3 <= (unint64_t)v4 || *(char *)(v3 - 1) < 0))
  {
    v11 = 0;
    v7 = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v11);
    if ((_DWORD)v7)
      *a2 = v11;
  }
  else
  {
    v5 = (uint64_t)(v4 + 1);
    v6 = *v4;
    if (*v4 < 0)
    {
      v6 = v6 + (v4[1] << 7) - 128;
      if (v4[1] < 0)
      {
        v6 = v6 + (v4[2] << 14) - 0x4000;
        if (v4[2] < 0)
        {
          v6 = v6 + (v4[3] << 21) - 0x200000;
          if (v4[3] < 0)
          {
            v8 = v4[4];
            v6 = v6 + (v8 << 28) - 0x10000000;
            if (v8 < 0)
            {
              v9 = 0;
              while (v4[v9 + 5] < 0)
              {
                v7 = 0;
                if ((_DWORD)++v9 == 5)
                  return v7;
              }
              v5 = (uint64_t)&v4[v9 + 6];
            }
            else
            {
              v5 = (uint64_t)(v4 + 5);
            }
          }
          else
          {
            v5 = (uint64_t)(v4 + 4);
          }
        }
        else
        {
          v5 = (uint64_t)(v4 + 3);
        }
      }
      else
      {
        v5 = (uint64_t)(v4 + 2);
      }
    }
    *a2 = v6;
    *((_QWORD *)this + 1) = v5;
    return 1;
  }
  return v7;
}

unint64_t google::protobuf::io::CodedInputStream::ReadTagSlow(google::protobuf::io::CodedInputStream *this)
{
  char *v2;
  unsigned __int8 *v3;
  unint64_t result;
  int v5;
  BOOL v6;
  unint64_t v7;

  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  if (v2 != (char *)v3)
  {
LABEL_4:
    v7 = 0;
    if (v2 >= (char *)v3 || *v2 < 0)
    {
      result = google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v7);
      if ((_DWORD)result)
        return v7;
    }
    else
    {
      result = *v2;
      *((_QWORD *)this + 1) = v2 + 1;
    }
    return result;
  }
  if (google::protobuf::io::CodedInputStream::Refresh(this))
  {
    v2 = (char *)*((_QWORD *)this + 1);
    v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
    goto LABEL_4;
  }
  v5 = *((_DWORD *)this + 12);
  result = 0;
  v6 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) < v5 || *((_DWORD *)this + 10) == v5;
  *((_BYTE *)this + 36) = v6;
  return result;
}

unint64_t google::protobuf::io::CodedInputStream::ReadTagFallback(google::protobuf::io::CodedInputStream *this)
{
  uint64_t v1;
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = (char *)*((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v1 - (_DWORD)v2;
  if ((int)v1 - (int)v2 > 9)
    goto LABEL_4;
  if (v3 >= 1)
  {
    if ((*(char *)(v1 - 1) & 0x80000000) == 0)
    {
LABEL_4:
      v4 = (uint64_t)(v2 + 1);
      v5 = *v2;
      if (*v2 < 0)
      {
        v5 = v5 + (v2[1] << 7) - 128;
        if (v2[1] < 0)
        {
          v5 = v5 + (v2[2] << 14) - 0x4000;
          if (v2[2] < 0)
          {
            v5 = v5 + (v2[3] << 21) - 0x200000;
            if (v2[3] < 0)
            {
              v10 = v2[4];
              v5 = (v5 + (v10 << 28) - 0x10000000);
              if (v10 < 0)
              {
                v11 = 0;
                while (v2[v11 + 5] < 0)
                {
                  v9 = 0;
                  if ((_DWORD)++v11 == 5)
                    return v9;
                }
                v4 = (uint64_t)&v2[v11 + 6];
              }
              else
              {
                v4 = (uint64_t)(v2 + 5);
              }
            }
            else
            {
              v4 = (uint64_t)(v2 + 4);
            }
          }
          else
          {
            v4 = (uint64_t)(v2 + 3);
          }
        }
        else
        {
          v4 = (uint64_t)(v2 + 2);
        }
      }
      *((_QWORD *)this + 1) = v4;
      return v5;
    }
    return google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  if (v3)
    return google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  v7 = *((_DWORD *)this + 11);
  v8 = *((_DWORD *)this + 6);
  if (v7 <= 0 && v8 != *((_DWORD *)this + 10))
    return google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  if (v8 - v7 >= *((_DWORD *)this + 12))
    return google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  v9 = 0;
  *((_BYTE *)this + 36) = 1;
  return v9;
}

uint64_t google::protobuf::io::CodedInputStream::ReadVarint64Slow(google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char v7;

  v4 = 0;
  v5 = 0;
  while (v4 != 10)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)this + 1);
      if (v6 != *((char **)this + 2))
        break;
      if ((google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0)
        return 0;
    }
    v7 = *v6;
    v5 |= (unint64_t)(*v6 & 0x7F) << (7 * v4);
    *((_QWORD *)this + 1) = v6 + 1;
    ++v4;
    if ((v7 & 0x80) == 0)
    {
      *a2 = v5;
      return 1;
    }
  }
  return 0;
}

uint64_t google::protobuf::io::CodedOutputStream::Refresh(google::protobuf::io::CodedOutputStream *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, char *))(**(_QWORD **)this + 16))(*(_QWORD *)this, &v4, (char *)this + 16);
  if ((_DWORD)result)
  {
    v3 = v4;
    *((_DWORD *)this + 5) += *((_DWORD *)this + 4);
  }
  else
  {
    v3 = 0;
    *((_DWORD *)this + 4) = 0;
    *((_BYTE *)this + 24) = 1;
  }
  *((_QWORD *)this + 1) = v3;
  return result;
}

google::protobuf::io::CodedOutputStream *google::protobuf::io::CodedOutputStream::CodedOutputStream(google::protobuf::io::CodedOutputStream *this, google::protobuf::io::ZeroCopyOutputStream *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = a2;
  *((_WORD *)this + 12) = 0;
  google::protobuf::io::CodedOutputStream::Refresh(this);
  *((_BYTE *)this + 24) = 0;
  return this;
}

void google::protobuf::io::CodedOutputStream::~CodedOutputStream(google::protobuf::io::CodedOutputStream *this)
{
  if (*((int *)this + 4) >= 1)
    (*(void (**)(void))(**(_QWORD **)this + 24))();
}

uint64_t google::protobuf::io::CodedOutputStream::WriteRaw(google::protobuf::io::CodedOutputStream *this, char *__src, int a3)
{
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  while (1)
  {
    v6 = *((int *)this + 4);
    v7 = (void *)*((_QWORD *)this + 1);
    if ((int)v6 >= a3)
      break;
    memcpy(v7, __src, v6);
    v8 = *((int *)this + 4);
    a3 -= v8;
    __src += v8;
    result = google::protobuf::io::CodedOutputStream::Refresh(this);
    if ((result & 1) == 0)
      return result;
  }
  result = (uint64_t)memcpy(v7, __src, a3);
  *((_QWORD *)this + 1) += a3;
  *((_DWORD *)this + 4) -= a3;
  return result;
}

uint64_t google::protobuf::io::CodedOutputStream::WriteAliasedRaw(google::protobuf::io::CodedOutputStream *this, char *__src, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;

  v6 = *((_DWORD *)this + 4);
  if (v6 > (int)a3)
    return google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, a3);
  if (v6 <= 0)
  {
    v8 = *((_DWORD *)this + 5);
  }
  else
  {
    (*(void (**)(void))(**(_QWORD **)this + 24))();
    v8 = *((_DWORD *)this + 5) - *((_DWORD *)this + 4);
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
  }
  *((_DWORD *)this + 5) = v8 + a3;
  result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)this + 40))(*(_QWORD *)this, __src, a3);
  *((_BYTE *)this + 24) |= result ^ 1;
  return result;
}

uint64_t google::protobuf::io::CodedOutputStream::WriteLittleEndian32(uint64_t this, int a2)
{
  int __src;

  if (*(_DWORD *)(this + 16) < 4u)
  {
    __src = a2;
    return google::protobuf::io::CodedOutputStream::WriteRaw((google::protobuf::io::CodedOutputStream *)this, (char *)&__src, 4);
  }
  else
  {
    **(_DWORD **)(this + 8) = a2;
    *(_QWORD *)(this + 8) += 4;
    *(_DWORD *)(this + 16) -= 4;
  }
  return this;
}

uint64_t google::protobuf::io::CodedOutputStream::WriteLittleEndian64(uint64_t this, uint64_t a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 16) < 8u)
  {
    v2[0] = a2;
    return google::protobuf::io::CodedOutputStream::WriteRaw((google::protobuf::io::CodedOutputStream *)this, (char *)v2, 8);
  }
  else
  {
    **(_QWORD **)(this + 8) = a2;
    *(_QWORD *)(this + 8) += 8;
    *(_DWORD *)(this + 16) -= 8;
  }
  return this;
}

uint64_t google::protobuf::io::CodedOutputStream::WriteVarint32(uint64_t this, unsigned int a2)
{
  _BYTE *v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  char __src[5];

  if (*(int *)(this + 16) < 5)
  {
    if (a2 < 0x80)
    {
      LODWORD(v4) = 0;
    }
    else
    {
      v4 = 0;
      do
      {
        __src[v4++] = a2 | 0x80;
        v5 = a2 >> 14;
        a2 >>= 7;
      }
      while (v5);
    }
    __src[v4] = a2;
    return google::protobuf::io::CodedOutputStream::WriteRaw((google::protobuf::io::CodedOutputStream *)this, __src, (int)v4 + 1);
  }
  else
  {
    v2 = *(_BYTE **)(this + 8);
    *v2 = a2 | 0x80;
    if (a2 < 0x80)
    {
      *v2 = a2 & 0x7F;
      v3 = (_DWORD)v2 + 1;
    }
    else
    {
      v2[1] = (a2 >> 7) | 0x80;
      if (a2 < 0x4000)
      {
        v2[1] = (a2 >> 7) & 0x7F;
        v3 = (_DWORD)v2 + 2;
      }
      else
      {
        v2[2] = (a2 >> 14) | 0x80;
        if (a2 < 0x200000)
        {
          v2[2] = (a2 >> 14) & 0x7F;
          v3 = (_DWORD)v2 + 3;
        }
        else
        {
          v2[3] = (a2 >> 21) | 0x80;
          if (a2 >> 28)
          {
            v2[4] = a2 >> 28;
            v3 = (_DWORD)v2 + 5;
          }
          else
          {
            v3 = (_DWORD)v2 + 4;
            v2[3] = (a2 >> 21) & 0x7F;
          }
        }
      }
    }
    v6 = v3 - (_DWORD)v2;
    *(_QWORD *)(this + 8) += v6;
    *(_DWORD *)(this + 16) -= v6;
  }
  return this;
}

uint64_t google::protobuf::io::CodedOutputStream::WriteVarint64(uint64_t this, unint64_t a2)
{
  _BYTE *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char __src[10];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(int *)(this + 16) >= 10)
  {
    v2 = *(_BYTE **)(this + 8);
    v3 = a2 >> 28;
    if (HIBYTE(a2))
    {
      if (HIBYTE(a2) >= 0x80)
      {
        v2[9] = -127;
        v4 = 10;
      }
      else
      {
        v4 = 9;
      }
      v2[8] = HIBYTE(a2) | 0x80;
    }
    else
    {
      if (!(_DWORD)v3)
      {
        if (!(a2 >> 14))
        {
          if (a2 < 0x80)
          {
            v4 = 1;
            goto LABEL_24;
          }
          v4 = 2;
LABEL_23:
          v2[1] = (a2 >> 7) | 0x80;
LABEL_24:
          *v2 = a2 | 0x80;
          v2[v4 - 1] &= ~0x80u;
          *(_QWORD *)(this + 8) += v4;
          *(_DWORD *)(this + 16) -= v4;
          return this;
        }
        if (a2 < 0x200000)
        {
          v4 = 3;
          goto LABEL_22;
        }
        v4 = 4;
LABEL_21:
        v2[3] = (a2 >> 21) | 0x80;
LABEL_22:
        v2[2] = (a2 >> 14) | 0x80;
        goto LABEL_23;
      }
      if (!(v3 >> 14))
      {
        if (v3 < 0x80)
        {
          v4 = 5;
LABEL_20:
          v2[4] = v3 | 0x80;
          goto LABEL_21;
        }
        v4 = 6;
LABEL_19:
        v2[5] = (a2 >> 35) | 0x80;
        goto LABEL_20;
      }
      if (v3 < 0x200000)
      {
        v4 = 7;
        goto LABEL_18;
      }
      v4 = 8;
    }
    v2[7] = (a2 >> 49) | 0x80;
LABEL_18:
    v2[6] = (a2 >> 42) | 0x80;
    goto LABEL_19;
  }
  if (a2 < 0x80)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      __src[v5++] = a2 | 0x80;
      v6 = a2 >> 14;
      a2 >>= 7;
    }
    while (v6);
  }
  __src[v5] = a2;
  return google::protobuf::io::CodedOutputStream::WriteRaw((google::protobuf::io::CodedOutputStream *)this, __src, (int)v5 + 1);
}

uint64_t google::protobuf::io::CodedOutputStream::VarintSize32Fallback(google::protobuf::io::CodedOutputStream *this)
{
  int v1;
  int v2;
  unsigned int v3;

  if (this >> 28)
    v1 = 5;
  else
    v1 = 4;
  if (this >= 0x200000)
    v2 = v1;
  else
    v2 = 3;
  if (this >= 0x4000)
    v3 = v2;
  else
    v3 = 2;
  if (this >= 0x80)
    return v3;
  else
    return 1;
}

uint64_t google::protobuf::io::CodedOutputStream::VarintSize64(unint64_t this)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((this & 0x8000000000000000) == 0)
    v1 = 9;
  else
    v1 = 10;
  if (HIBYTE(this))
    v2 = v1;
  else
    v2 = 8;
  if (this >> 49)
    v3 = v2;
  else
    v3 = 7;
  if (this >> 42)
    v4 = v3;
  else
    v4 = 6;
  if (this >> 28)
    v5 = 5;
  else
    v5 = 4;
  if (this >= 0x200000)
    v6 = v5;
  else
    v6 = 3;
  if (this >= 0x4000)
    v7 = v6;
  else
    v7 = 2;
  if (this >= 0x80)
    v8 = v7;
  else
    v8 = 1;
  if (this >> 35)
    return v4;
  else
    return v8;
}

uint64_t CRDT::protobuf_ShutdownFile_crframework_2eproto(CRDT *this)
{
  uint64_t result;

  if (CRDT::ObjectID::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::ObjectID::default_instance_ + 8))(CRDT::ObjectID::default_instance_);
  if (CRDT::Timestamp::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Timestamp::default_instance_ + 8))(CRDT::Timestamp::default_instance_);
  if (CRDT::RegisterLatest::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::RegisterLatest::default_instance_ + 8))(CRDT::RegisterLatest::default_instance_);
  if (CRDT::VectorTimestamp::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::VectorTimestamp::default_instance_ + 8))(CRDT::VectorTimestamp::default_instance_);
  if (CRDT::VectorTimestamp_Element::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::VectorTimestamp_Element::default_instance_ + 8))(CRDT::VectorTimestamp_Element::default_instance_);
  if (CRDT::Dictionary::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Dictionary::default_instance_ + 8))(CRDT::Dictionary::default_instance_);
  if (CRDT::Dictionary_Element::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Dictionary_Element::default_instance_ + 8))(CRDT::Dictionary_Element::default_instance_);
  if (CRDT::Index::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Index::default_instance_ + 8))(CRDT::Index::default_instance_);
  if (CRDT::Index_Element::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Index_Element::default_instance_ + 8))(CRDT::Index_Element::default_instance_);
  if (CRDT::OneOf::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::OneOf::default_instance_ + 8))(CRDT::OneOf::default_instance_);
  if (CRDT::OneOf_Element::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::OneOf_Element::default_instance_ + 8))(CRDT::OneOf_Element::default_instance_);
  if (CRDT::StringArray::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::StringArray::default_instance_ + 8))(CRDT::StringArray::default_instance_);
  if (CRDT::StringArray_ArrayAttachment::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::StringArray_ArrayAttachment::default_instance_ + 8))(CRDT::StringArray_ArrayAttachment::default_instance_);
  if (CRDT::Array::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Array::default_instance_ + 8))(CRDT::Array::default_instance_);
  if (CRDT::OrderedSet::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::OrderedSet::default_instance_ + 8))(CRDT::OrderedSet::default_instance_);
  if (CRDT::Document::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Document::default_instance_ + 8))(CRDT::Document::default_instance_);
  if (CRDT::Document_CustomObject::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Document_CustomObject::default_instance_ + 8))(CRDT::Document_CustomObject::default_instance_);
  if (CRDT::Document_CustomObject_MapEntry::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)CRDT::Document_CustomObject_MapEntry::default_instance_ + 8))(CRDT::Document_CustomObject_MapEntry::default_instance_);
  result = CRDT::Document_DocObject::default_instance_;
  if (CRDT::Document_DocObject::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)CRDT::Document_DocObject::default_instance_ + 8))(CRDT::Document_DocObject::default_instance_);
  return result;
}

void CRDT::protobuf_AddDesc_crframework_2eproto_impl(CRDT *this, uint64_t a2, uint64_t a3, const char *a4)
{
  topotext *v4;
  CRDT::ObjectID *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CRDT::StringArray_ArrayAttachment *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CRDT::Document *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x1E9BF1, (google::protobuf::internal *)0x1E9BF0, "/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", a4);
  topotext::protobuf_AddDesc_topotext_2eproto(v4);
  v5 = (CRDT::ObjectID *)operator new();
  CRDT::ObjectID::ObjectID(v5, v6, v7);
  CRDT::ObjectID::default_instance_ = (uint64_t)v5;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E67F6A50;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  CRDT::Timestamp::default_instance_ = v8;
  v9 = operator new();
  *(_QWORD *)v9 = &off_1E67F6438;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  CRDT::RegisterLatest::default_instance_ = v9;
  v10 = operator new();
  *(_QWORD *)v10 = &off_1E67F64B0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_DWORD *)(v10 + 56) = 0;
  CRDT::VectorTimestamp::default_instance_ = v10;
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E67F6690;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_QWORD *)(v11 + 56) = 0;
  CRDT::VectorTimestamp_Element::default_instance_ = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_1E67F61E0;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_DWORD *)(v12 + 56) = 0;
  CRDT::Dictionary::default_instance_ = v12;
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E67F6528;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  CRDT::Dictionary_Element::default_instance_ = v13;
  v14 = operator new();
  *(_QWORD *)v14 = &off_1E67F6870;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_DWORD *)(v14 + 56) = 0;
  CRDT::Index::default_instance_ = v14;
  v15 = operator new();
  *(_QWORD *)v15 = &off_1E67F6348;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  CRDT::Index_Element::default_instance_ = v15;
  v16 = operator new();
  *(_QWORD *)v16 = &off_1E67F68E8;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_DWORD *)(v16 + 56) = 0;
  CRDT::OneOf::default_instance_ = v16;
  v17 = operator new();
  *(_QWORD *)v17 = &off_1E67F63C0;
  *(_OWORD *)(v17 + 8) = 0u;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  CRDT::OneOf_Element::default_instance_ = v17;
  v18 = operator new();
  *(_QWORD *)v18 = &off_1E67F62D0;
  *(_OWORD *)(v18 + 8) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 52) = 0u;
  CRDT::StringArray::default_instance_ = v18;
  v19 = (CRDT::StringArray_ArrayAttachment *)operator new();
  CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(v19, v20, v21);
  CRDT::StringArray_ArrayAttachment::default_instance_ = (uint64_t)v19;
  v22 = operator new();
  *(_QWORD *)v22 = &off_1E67F67F8;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  CRDT::Array::default_instance_ = v22;
  v23 = operator new();
  *(_QWORD *)v23 = &off_1E67F6258;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  CRDT::OrderedSet::default_instance_ = v23;
  v24 = (CRDT::Document *)operator new();
  CRDT::Document::Document(v24, v25, v26);
  CRDT::Document::default_instance_ = (uint64_t)v24;
  v27 = operator new();
  *(_QWORD *)v27 = &off_1E67F6618;
  *(_DWORD *)(v27 + 64) = 0;
  *(_OWORD *)(v27 + 8) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_DWORD *)(v27 + 56) = 0;
  CRDT::Document_CustomObject::default_instance_ = v27;
  v28 = operator new();
  *(_QWORD *)v28 = &off_1E67F6780;
  *(_OWORD *)(v28 + 8) = 0u;
  *(_OWORD *)(v28 + 24) = 0u;
  *(_OWORD *)(v28 + 36) = 0u;
  CRDT::Document_CustomObject_MapEntry::default_instance_ = v28;
  v29 = operator new();
  *(_QWORD *)v29 = &off_1E67F65A0;
  *(_DWORD *)(v29 + 48) = 0;
  *(_OWORD *)(v29 + 8) = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  CRDT::Document_DocObject::default_instance_ = v29;
  v30 = CRDT::RegisterLatest::default_instance_;
  v31 = CRDT::Timestamp::default_instance_;
  v32 = CRDT::ObjectID::default_instance_;
  *(_QWORD *)(CRDT::RegisterLatest::default_instance_ + 40) = CRDT::Timestamp::default_instance_;
  *(_QWORD *)(v30 + 48) = v32;
  v33 = (_QWORD *)CRDT::Dictionary_Element::default_instance_;
  *(_QWORD *)(CRDT::Dictionary_Element::default_instance_ + 40) = v32;
  v33[6] = v32;
  v34 = CRDT::VectorTimestamp::default_instance_;
  v33[7] = CRDT::VectorTimestamp::default_instance_;
  v33[8] = v30;
  v35 = CRDT::OneOf_Element::default_instance_;
  *(_QWORD *)(CRDT::OneOf_Element::default_instance_ + 40) = v32;
  *(_QWORD *)(v35 + 48) = v31;
  v36 = CRDT::StringArray::default_instance_;
  *(_QWORD *)(CRDT::StringArray::default_instance_ + 40) = topotext::String::default_instance_;
  v37 = CRDT::Array::default_instance_;
  v38 = CRDT::Dictionary::default_instance_;
  *(_QWORD *)(CRDT::Array::default_instance_ + 40) = v36;
  *(_QWORD *)(v37 + 48) = v38;
  v39 = CRDT::OrderedSet::default_instance_;
  *(_QWORD *)(CRDT::OrderedSet::default_instance_ + 40) = v37;
  *(_QWORD *)(v39 + 48) = v38;
  v40 = CRDT::Document::default_instance_;
  *(_QWORD *)(CRDT::Document::default_instance_ + 40) = v34;
  *(_QWORD *)(v40 + 48) = v34;
  *(_QWORD *)(v40 + 152) = topotext::VectorTimestamp::default_instance_;
  *(_QWORD *)(CRDT::Document_CustomObject_MapEntry::default_instance_ + 40) = v32;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)CRDT::protobuf_ShutdownFile_crframework_2eproto, v41);
}

void sub_1B4B43D7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  MEMORY[0x1B5E3DB94](v2, 0x10B3C408ACEAB29);
  _Unwind_Resume(a1);
}

double CRDT::Timestamp::Timestamp(CRDT::Timestamp *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6A50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CRDT::RegisterLatest::RegisterLatest(CRDT::RegisterLatest *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6438;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CRDT::VectorTimestamp::VectorTimestamp(CRDT::VectorTimestamp *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F64B0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

double CRDT::VectorTimestamp_Element::VectorTimestamp_Element(CRDT::VectorTimestamp_Element *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6690;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return result;
}

double CRDT::Dictionary::Dictionary(CRDT::Dictionary *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F61E0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

double CRDT::Dictionary_Element::Dictionary_Element(CRDT::Dictionary_Element *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6528;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

double CRDT::StringArray::StringArray(CRDT::StringArray *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F62D0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

double CRDT::Array::Array(CRDT::Array *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F67F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CRDT::OrderedSet::OrderedSet(CRDT::OrderedSet *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6258;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CRDT::Document_CustomObject::Document_CustomObject(CRDT::Document_CustomObject *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6618;
  *((_DWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

double CRDT::Document_CustomObject_MapEntry::Document_CustomObject_MapEntry(CRDT::Document_CustomObject_MapEntry *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F6780;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

double CRDT::Document_DocObject::Document_DocObject(CRDT::Document_DocObject *this)
{
  double result;

  *(_QWORD *)this = &off_1E67F65A0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void CRDT::protobuf_AddDesc_crframework_2eproto(CRDT *this)
{
  uint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = CRDT::protobuf_AddDesc_crframework_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = &off_1E67F6B80;
    v2[1] = CRDT::protobuf_AddDesc_crframework_2eproto_impl;
    v3 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&CRDT::protobuf_AddDesc_crframework_2eproto_once_, (uint64_t)v2);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_1B4B43FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CRDT::ObjectID *CRDT::ObjectID::ObjectID(CRDT::ObjectID *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F69D8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CRDT::ObjectID::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B4403C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void CRDT::ObjectID::SharedCtor(CRDT::ObjectID *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v5[0] = &off_1E67F6B80;
    v5[1] = google::protobuf::internal::InitEmptyString;
    v6 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v5);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v5);
  }
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
}

void sub_1B4B440EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *CRDT::ObjectID::MergeFrom(CRDT::ObjectID *this, const CRDT::ObjectID *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const std::string *v8;
  int v9;
  std::string *v10;
  int v11;
  const std::string::value_type *v12;
  char *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 447);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  switch(*((_DWORD *)a2 + 12))
  {
    case 1:
      v5 = *((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) == 1)
        goto LABEL_9;
      CRDT::ObjectID::clear_contents((uint64_t)this);
      v6 = 1;
      goto LABEL_8;
    case 2:
      v5 = *((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) != 2)
      {
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v6 = 2;
LABEL_8:
        *((_DWORD *)this + 12) = v6;
      }
LABEL_9:
      *((_QWORD *)this + 5) = v5;
      goto LABEL_23;
    case 3:
      v7 = *((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) != 3)
      {
        CRDT::ObjectID::clear_contents((uint64_t)this);
        *((_DWORD *)this + 12) = 3;
      }
      *((_QWORD *)this + 5) = v7;
      goto LABEL_23;
    case 4:
      v8 = (const std::string *)*((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) == 4)
        goto LABEL_16;
      CRDT::ObjectID::clear_contents((uint64_t)this);
      v9 = 4;
      goto LABEL_21;
    case 5:
      v8 = (const std::string *)*((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) == 5)
      {
LABEL_16:
        v10 = (std::string *)*((_QWORD *)this + 5);
      }
      else
      {
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v9 = 5;
LABEL_21:
        *((_DWORD *)this + 12) = v9;
        v10 = (std::string *)operator new();
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 5) = v10;
      }
      std::string::operator=(v10, v8);
LABEL_23:
      v14 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      v13 = (char *)a2 + 8;
      v12 = v14;
      v15 = v13[23];
      if (v15 >= 0)
        v16 = v13;
      else
        v16 = v12;
      if (v15 >= 0)
        v17 = v13[23];
      else
        v17 = *((_QWORD *)v13 + 1);
      return std::string::append((std::string *)((char *)this + 8), v16, v17);
    case 6:
      v11 = *((_DWORD *)a2 + 10);
      if (*((_DWORD *)this + 12) != 6)
      {
        CRDT::ObjectID::clear_contents((uint64_t)this);
        *((_DWORD *)this + 12) = 6;
      }
      *((_DWORD *)this + 10) = v11;
      goto LABEL_23;
    default:
      goto LABEL_23;
  }
}

void sub_1B4B442D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::ObjectID::~ObjectID(CRDT::ObjectID *this)
{
  CRDT::ObjectID *v1;

  v1 = this;
  *(_QWORD *)this = &off_1E67F69D8;
  if (*((_DWORD *)this + 12))
    this = (CRDT::ObjectID *)CRDT::ObjectID::clear_contents((uint64_t)this);
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if (*((char *)v1 + 31) < 0)
    operator delete(*((void **)v1 + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
}

{
  CRDT::ObjectID::~ObjectID(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t CRDT::ObjectID::clear_contents(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 48);
  if (v2 == 5 || v2 == 4)
  {
    v3 = *(_QWORD *)(this + 40);
    if (v3)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1B5E3DB94](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 48) = 0;
  return this;
}

CRDT::ObjectID *CRDT::ObjectID::New(CRDT::ObjectID *this)
{
  CRDT::ObjectID *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (CRDT::ObjectID *)operator new();
  CRDT::ObjectID::ObjectID(v1, v2, v3);
  return v1;
}

void sub_1B4B44408(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

uint64_t CRDT::ObjectID::Clear(CRDT::ObjectID *this)
{
  uint64_t result;

  result = CRDT::ObjectID::clear_contents((uint64_t)this);
  *((_DWORD *)this + 8) = 0;
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

uint64_t CRDT::ObjectID::MergePartialFromCodedStream(CRDT::ObjectID *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  _BYTE *v13;
  BOOL v14;
  std::string *v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  std::string *v21;
  _BYTE *v22;
  unint64_t v23;
  char *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _BYTE v28[32];
  unint64_t v29[2];
  unint64_t v30;

  google::protobuf::io::StringOutputStream::StringOutputStream(v29, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28, (google::protobuf::io::ZeroCopyOutputStream *)v29);
  v5 = (_QWORD *)((char *)this + 40);
  while (2)
  {
    while (1)
    {
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 < *((_QWORD *)a2 + 2) && (char)*v6 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v8 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_11:
      if ((_DWORD)v8)
        v14 = (v8 & 7) == 4;
      else
        v14 = 1;
      if (v14)
      {
LABEL_70:
        v26 = 1;
        goto LABEL_71;
      }
LABEL_29:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, (google::protobuf::io::CodedOutputStream *)v28, v4))goto LABEL_69;
    }
    v7 = *v6;
    *((_DWORD *)a2 + 8) = v7;
    *((_QWORD *)a2 + 1) = v6 + 1;
    v8 = v7 | 0x100000000;
LABEL_6:
    switch(v8 >> 3)
    {
      case 1u:
        if ((_DWORD)v8 != 8)
          goto LABEL_27;
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v30 = 0;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v30))
            goto LABEL_69;
          v12 = v30;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v12 = *v11;
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
        }
        *((_QWORD *)this + 5) = -(uint64_t)(v12 & 1) ^ (v12 >> 1);
        *((_DWORD *)this + 12) = 1;
        if ((unint64_t)v13 >= v10 || *v13 != 16)
          continue;
        *((_QWORD *)a2 + 1) = v13 + 1;
LABEL_36:
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v17 = (char *)*((_QWORD *)a2 + 1);
        v16 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v16 || *v17 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_69;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v16 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v17;
          v18 = v17 + 1;
          *((_QWORD *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 12) = 2;
        if ((unint64_t)v18 >= v16 || *v18 != 25)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_44:
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v30 = 0;
        if (!google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v30))
          goto LABEL_69;
        *((_QWORD *)this + 5) = v30;
        *((_DWORD *)this + 12) = 3;
        v19 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v19 >= *((_QWORD *)a2 + 2) || *v19 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v19 + 1;
LABEL_48:
        CRDT::ObjectID::clear_contents((uint64_t)this);
        *((_DWORD *)this + 12) = 4;
        v15 = (std::string *)operator new();
        v15->__r_.__value_.__r.__words[0] = 0;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        *v5 = v15;
LABEL_49:
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v15))
          goto LABEL_69;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_53:
        if (*((_DWORD *)this + 12) == 5)
        {
          v21 = (std::string *)*v5;
        }
        else
        {
          CRDT::ObjectID::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 5;
          v21 = (std::string *)operator new();
          v21->__r_.__value_.__r.__words[0] = 0;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          *v5 = v21;
        }
        if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v21))
          goto LABEL_69;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 != 48)
          continue;
        *((_QWORD *)a2 + 1) = v22 + 1;
LABEL_60:
        CRDT::ObjectID::clear_contents((uint64_t)this);
        v24 = (char *)*((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, (unsigned int *)this + 10))
          {
LABEL_69:
            v26 = 0;
            goto LABEL_71;
          }
          v25 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *(_DWORD *)v5 = *v24;
          v25 = (unsigned __int8 *)(v24 + 1);
          *((_QWORD *)a2 + 1) = v25;
        }
        *((_DWORD *)this + 12) = 6;
        if (v25 != (unsigned __int8 *)v23 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        v26 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_71:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v29);
        return v26;
      case 2u:
        if ((_DWORD)v8 == 16)
          goto LABEL_36;
        goto LABEL_27;
      case 3u:
        if ((_DWORD)v8 == 25)
          goto LABEL_44;
        goto LABEL_27;
      case 4u:
        if ((_DWORD)v8 != 34)
          goto LABEL_27;
        if (*((_DWORD *)this + 12) != 4)
          goto LABEL_48;
        v15 = (std::string *)*v5;
        goto LABEL_49;
      case 5u:
        if ((_DWORD)v8 == 42)
          goto LABEL_53;
        goto LABEL_27;
      case 6u:
        if ((_DWORD)v8 == 48)
          goto LABEL_60;
LABEL_27:
        if ((_DWORD)v8 && (v8 & 7) != 4)
          goto LABEL_29;
        goto LABEL_70;
      default:
        goto LABEL_11;
    }
  }
}

void sub_1B4B44884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::ObjectID::SerializeWithCachedSizes(CRDT::ObjectID *this, google::protobuf::io::CodedOutputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 12);
  if (v6 == 1)
  {
    google::protobuf::internal::WireFormatLite::WriteSInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 2)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 3)
  {
    google::protobuf::internal::WireFormatLite::WriteDouble((google::protobuf::internal::WireFormatLite *)3, a2, *((double *)this + 5), a3);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 4)
  {
    google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 5)
  {
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(5, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 6)
    google::protobuf::internal::WireFormatLite::WriteUInt32((google::protobuf::internal::WireFormatLite *)6, *((_DWORD *)this + 10), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::ObjectID::ByteSize(CRDT::ObjectID *this)
{
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  google::protobuf::io::CodedOutputStream *v11;
  int v12;
  uint64_t v13;
  uint64_t result;

  switch(*((_DWORD *)this + 12))
  {
    case 1:
      v8 = (2 * *((_QWORD *)this + 5)) ^ (*((uint64_t *)this + 5) >> 63);
      goto LABEL_9;
    case 2:
      v8 = *((_QWORD *)this + 5);
LABEL_9:
      v9 = google::protobuf::io::CodedOutputStream::VarintSize64(v8);
      goto LABEL_19;
    case 3:
      v10 = 9;
      goto LABEL_20;
    case 4:
    case 5:
      v2 = *((_QWORD *)this + 5);
      v3 = *(unsigned __int8 *)(v2 + 23);
      v4 = v3;
      v5 = *(_QWORD *)(v2 + 8);
      if ((v3 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(v2 + 23);
      else
        v6 = v5;
      if (v6 >= 0x80)
      {
        v12 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v6);
        v3 = *(unsigned __int8 *)(v2 + 23);
        v5 = *(_QWORD *)(v2 + 8);
        v7 = v12 + 1;
        v4 = *(_BYTE *)(v2 + 23);
      }
      else
      {
        v7 = 2;
      }
      if (v4 < 0)
        v3 = v5;
      v10 = v7 + v3;
      goto LABEL_20;
    case 6:
      v11 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 10);
      if (v11 >= 0x80)
      {
        v9 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
LABEL_19:
        v10 = v9 + 1;
      }
      else
      {
        v10 = 2;
      }
LABEL_20:
      if (*((char *)this + 31) < 0)
        v13 = *((_QWORD *)this + 2);
      else
        LODWORD(v13) = *((unsigned __int8 *)this + 31);
      result = (v10 + v13);
      *((_DWORD *)this + 9) = result;
      return result;
    default:
      v10 = 0;
      goto LABEL_20;
  }
}

std::string *CRDT::ObjectID::CheckTypeAndMergeFrom(CRDT::ObjectID *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::ObjectID::MergeFrom(this, lpsrc);
}

uint64_t CRDT::ObjectID::IsInitialized(CRDT::ObjectID *this)
{
  return 1;
}

_QWORD *CRDT::ObjectID::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.ObjectID");
}

std::string *CRDT::Timestamp::MergeFrom(CRDT::Timestamp *this, const CRDT::Timestamp *a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 706);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 5) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_QWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 2u;
      *((_QWORD *)this + 6) = v7;
    }
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B44BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Timestamp::~Timestamp(void **this)
{
  *this = &off_1E67F6A50;
  CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Timestamp::~Timestamp(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::Timestamp::New(CRDT::Timestamp *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6A50;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::Timestamp::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Timestamp::MergePartialFromCodedStream(CRDT::Timestamp *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE v18[32];
  unint64_t v19[2];
  unint64_t v20;

  google::protobuf::io::StringOutputStream::StringOutputStream(v19, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18, (google::protobuf::io::ZeroCopyOutputStream *)v19);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_38;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_QWORD *)this + 5) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_28;
        }
      }
      else
      {
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_37:
          v16 = 1;
          goto LABEL_39;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v18, v4))goto LABEL_38;
      }
    }
    if ((_DWORD)v7 != 16)
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_37;
      goto LABEL_16;
    }
    v13 = (char *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_28:
    v20 = 0;
    if ((unint64_t)v13 < v9 && (*v13 & 0x80000000) == 0)
    {
      v14 = *v13;
      v15 = (unsigned __int8 *)(v13 + 1);
      *((_QWORD *)a2 + 1) = v15;
      goto LABEL_33;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v20))
      break;
    v14 = v20;
    v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_33:
    *((_QWORD *)this + 6) = v14;
    *((_DWORD *)this + 8) |= 2u;
    if (v15 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v16 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_39;
    }
  }
LABEL_38:
  v16 = 0;
LABEL_39:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v19);
  return v16;
}

void sub_1B4B44EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Timestamp::SerializeWithCachedSizes(CRDT::Timestamp *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)this + 6), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::Timestamp::ByteSize(CRDT::Timestamp *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v2 = google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 5)) + 1;
    if ((*((_DWORD *)this + 8) & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
LABEL_7:
    v2 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 6)) + 1;
LABEL_8:
  if (*((char *)this + 31) < 0)
    v3 = *((_QWORD *)this + 2);
  else
    LODWORD(v3) = *((unsigned __int8 *)this + 31);
  result = (v2 + v3);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Timestamp::CheckTypeAndMergeFrom(CRDT::Timestamp *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Timestamp::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Timestamp::IsInitialized(CRDT::Timestamp *this)
{
  return 1;
}

_QWORD *CRDT::Timestamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Timestamp");
}

std::string *CRDT::RegisterLatest::MergeFrom(CRDT::RegisterLatest *this, const CRDT::RegisterLatest *a2)
{
  CRDT::RegisterLatest *v3;
  std::string *v4;
  int v5;
  CRDT::Timestamp *v6;
  const CRDT::Timestamp *v7;
  CRDT::ObjectID *v8;
  uint64_t v9;
  uint64_t v10;
  const CRDT::ObjectID *v11;
  const std::string::value_type *v12;
  char *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  char v19;
  std::string v20[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 949);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (CRDT::Timestamp *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        this = (CRDT::RegisterLatest *)operator new();
        v6 = this;
        *(_QWORD *)this = &off_1E67F6A50;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)v3 + 5) = this;
      }
      v7 = (const CRDT::Timestamp *)*((_QWORD *)a2 + 5);
      if (!v7)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v7 = *(const CRDT::Timestamp **)(CRDT::RegisterLatest::default_instance_ + 40);
      }
      this = (CRDT::RegisterLatest *)CRDT::Timestamp::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v8 = (CRDT::ObjectID *)*((_QWORD *)v3 + 6);
      if (!v8)
      {
        v8 = (CRDT::ObjectID *)operator new();
        this = CRDT::ObjectID::ObjectID(v8, v9, v10);
        *((_QWORD *)v3 + 6) = v8;
      }
      v11 = (const CRDT::ObjectID *)*((_QWORD *)a2 + 6);
      if (!v11)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v11 = *(const CRDT::ObjectID **)(CRDT::RegisterLatest::default_instance_ + 48);
      }
      CRDT::ObjectID::MergeFrom(v8, v11);
    }
  }
  v14 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v13 = (char *)a2 + 8;
  v12 = v14;
  v15 = v13[23];
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = v13[23];
  else
    v17 = *((_QWORD *)v13 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v16, v17);
}

void sub_1B4B45194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

void CRDT::RegisterLatest::~RegisterLatest(void **this)
{
  *this = &off_1E67F6438;
  CRDT::RegisterLatest::SharedDtor((CRDT::RegisterLatest *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::RegisterLatest::~RegisterLatest(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::RegisterLatest::SharedDtor(CRDT::RegisterLatest *this)
{
  uint64_t v2;
  uint64_t v3;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::RegisterLatest *)CRDT::RegisterLatest::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CRDT::RegisterLatest::default_instance(CRDT::RegisterLatest *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::RegisterLatest::default_instance_;
}

double CRDT::RegisterLatest::New(CRDT::RegisterLatest *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6438;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::RegisterLatest::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 40);
      if (v3)
      {
        *(_QWORD *)(v3 + 40) = 0;
        *(_QWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
    if ((*(_BYTE *)(this + 32) & 2) != 0)
    {
      v4 = *(_QWORD *)(this + 48);
      if (v4)
      {
        this = CRDT::ObjectID::clear_contents(*(_QWORD *)(this + 48));
        *(_DWORD *)(v4 + 32) = 0;
        if (*(char *)(v4 + 31) < 0)
        {
          **(_BYTE **)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 8) = 0;
          *(_BYTE *)(v4 + 31) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::RegisterLatest::MergePartialFromCodedStream(CRDT::RegisterLatest *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  uint64_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  CRDT::ObjectID *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE v30[32];
  _QWORD v31[2];
  unsigned int v32;

  google::protobuf::io::StringOutputStream::StringOutputStream(v31, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30, (google::protobuf::io::ZeroCopyOutputStream *)v31);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
        goto LABEL_33;
      goto LABEL_21;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      v9 = *((_QWORD *)this + 5);
      if (!v9)
      {
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E67F6A50;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *((_QWORD *)this + 5) = v9;
      }
      v32 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
          goto LABEL_48;
      }
      else
      {
        v32 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v12 = *((_DWORD *)a2 + 14);
      v13 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v12 + 1;
      if (v12 >= v13)
        goto LABEL_48;
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
      if (!CRDT::Timestamp::MergePartialFromCodedStream((CRDT::Timestamp *)v9, a2)
        || !*((_BYTE *)a2 + 36))
      {
        goto LABEL_48;
      }
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
      v15 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v17 < 0 == v16)
        *((_DWORD *)a2 + 14) = v17;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
      {
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_33:
        *((_DWORD *)this + 8) |= 2u;
        v19 = (CRDT::ObjectID *)*((_QWORD *)this + 6);
        if (!v19)
        {
          v19 = (CRDT::ObjectID *)operator new();
          CRDT::ObjectID::ObjectID(v19, v20, v21);
          *((_QWORD *)this + 6) = v19;
        }
        v32 = 0;
        v22 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
            goto LABEL_48;
        }
        else
        {
          v32 = *v22;
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        v23 = *((_DWORD *)a2 + 14);
        v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24
          || (v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32),
              !CRDT::ObjectID::MergePartialFromCodedStream(v19, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_48:
          v28 = 0;
          goto LABEL_50;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v25);
        v26 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v16)
          *((_DWORD *)a2 + 14) = v27;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v28 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_21:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_49;
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v30, v4))goto LABEL_48;
    }
  }
  if ((_DWORD)v7)
    v11 = (v7 & 7) == 4;
  else
    v11 = 1;
  if (!v11)
    goto LABEL_18;
LABEL_49:
  v28 = 1;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v31);
  return v28;
}

void sub_1B4B456DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C407D90225ELL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::RegisterLatest::SerializeWithCachedSizes(CRDT::RegisterLatest *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::RegisterLatest *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::RegisterLatest::default_instance_ + 40);
    }
    this = (CRDT::RegisterLatest *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v6 = *(_QWORD *)(CRDT::RegisterLatest::default_instance_ + 48);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v7 = (char *)v3 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::RegisterLatest::ByteSize(CRDT::RegisterLatest *this)
{
  int v2;
  CRDT::Timestamp *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  CRDT::ObjectID *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (CRDT::Timestamp *)*((_QWORD *)this + 5);
  if (!v3)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v3 = *(CRDT::Timestamp **)(CRDT::RegisterLatest::default_instance_ + 40);
  }
  v4 = (google::protobuf::io::CodedOutputStream *)CRDT::Timestamp::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 8) & 2) != 0)
  {
LABEL_12:
    v7 = (CRDT::ObjectID *)*((_QWORD *)this + 6);
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v7 = *(CRDT::ObjectID **)(CRDT::RegisterLatest::default_instance_ + 48);
    }
    v8 = (google::protobuf::io::CodedOutputStream *)CRDT::ObjectID::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::RegisterLatest::CheckTypeAndMergeFrom(CRDT::RegisterLatest *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::RegisterLatest::MergeFrom(this, lpsrc);
}

uint64_t CRDT::RegisterLatest::IsInitialized(CRDT::RegisterLatest *this)
{
  return 1;
}

_QWORD *CRDT::RegisterLatest::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.RegisterLatest");
}

std::string *CRDT::VectorTimestamp_Element::MergeFrom(CRDT::VectorTimestamp_Element *this, const CRDT::VectorTimestamp_Element *a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 1216);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v14 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 5) = v14;
      v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v15 = *((_QWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 2u;
    *((_QWORD *)this + 6) = v15;
    if ((*((_DWORD *)a2 + 8) & 4) != 0)
    {
LABEL_7:
      v6 = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 8) |= 4u;
      *((_QWORD *)this + 7) = v6;
    }
  }
LABEL_8:
  v9 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v8 = (char *)a2 + 8;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  return std::string::append((std::string *)((char *)this + 8), v11, v12);
}

void sub_1B4B459F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::VectorTimestamp_Element::~VectorTimestamp_Element(void **this)
{
  *this = &off_1E67F6690;
  CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::VectorTimestamp_Element::~VectorTimestamp_Element(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::VectorTimestamp_Element::New(CRDT::VectorTimestamp_Element *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6690;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::VectorTimestamp_Element::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t CRDT::VectorTimestamp_Element::MergePartialFromCodedStream(CRDT::VectorTimestamp_Element *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  BOOL v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE v20[32];
  _QWORD v21[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v21, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v20, (google::protobuf::io::ZeroCopyOutputStream *)v21);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_13;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      v9 = v7 >> 3;
      if (v7 >> 3 == 3)
        break;
      if (v9 == 2)
      {
        if ((_DWORD)v7 == 16)
        {
          v15 = (char *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          goto LABEL_32;
        }
LABEL_22:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_49;
        goto LABEL_24;
      }
      if (v9 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_22;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_50;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_QWORD *)this + 5) = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v12 < v10 && *v12 == 16)
        {
          v15 = v12 + 1;
          *((_QWORD *)a2 + 1) = v15;
LABEL_32:
          if ((unint64_t)v15 >= v10 || *v15 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 6))goto LABEL_50;
            v16 = (_BYTE *)*((_QWORD *)a2 + 1);
            v10 = *((_QWORD *)a2 + 2);
          }
          else
          {
            *((_QWORD *)this + 6) = *v15;
            v16 = v15 + 1;
            *((_QWORD *)a2 + 1) = v16;
          }
          *((_DWORD *)this + 8) |= 2u;
          if ((unint64_t)v16 < v10 && *v16 == 24)
          {
            v14 = v16 + 1;
            *((_QWORD *)a2 + 1) = v14;
            goto LABEL_40;
          }
        }
      }
      else
      {
LABEL_13:
        if ((_DWORD)v7)
          v13 = (v7 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
LABEL_49:
          v18 = 1;
          goto LABEL_51;
        }
LABEL_24:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v20, v4))goto LABEL_50;
      }
    }
    if ((_DWORD)v7 != 24)
      goto LABEL_22;
    v14 = (char *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
LABEL_40:
    if ((unint64_t)v14 < v10 && (*v14 & 0x80000000) == 0)
    {
      *((_QWORD *)this + 7) = *v14;
      v17 = (unsigned __int8 *)(v14 + 1);
      *((_QWORD *)a2 + 1) = v17;
      goto LABEL_45;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 7))
      break;
    v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
LABEL_45:
    *((_DWORD *)this + 8) |= 4u;
    if (v17 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v18 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_51;
    }
  }
LABEL_50:
  v18 = 0;
LABEL_51:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v20);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v21);
  return v18;
}

void sub_1B4B45D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::VectorTimestamp_Element::SerializeWithCachedSizes(CRDT::VectorTimestamp_Element *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 8);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)this + 6), a2, a4);
  if ((*((_DWORD *)this + 8) & 4) != 0)
LABEL_4:
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)3, *((_QWORD *)this + 7), a2, a4);
LABEL_5:
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::VectorTimestamp_Element::ByteSize(CRDT::VectorTimestamp_Element *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_10;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 5)) + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_7:
    v3 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 6)) + 1;
    v2 = *((_DWORD *)this + 8);
  }
LABEL_8:
  if ((v2 & 4) != 0)
    v3 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 7)) + 1;
LABEL_10:
  if (*((char *)this + 31) < 0)
    v4 = *((_QWORD *)this + 2);
  else
    LODWORD(v4) = *((unsigned __int8 *)this + 31);
  result = (v3 + v4);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::VectorTimestamp_Element::CheckTypeAndMergeFrom(CRDT::VectorTimestamp_Element *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::VectorTimestamp_Element::MergeFrom(this, lpsrc);
}

uint64_t CRDT::VectorTimestamp_Element::IsInitialized(CRDT::VectorTimestamp_Element *this)
{
  return 1;
}

_QWORD *CRDT::VectorTimestamp_Element::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.VectorTimestamp.Element");
}

std::string *CRDT::VectorTimestamp::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 1414);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>(this + 5, a2 + 5);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B45FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::VectorTimestamp::~VectorTimestamp(CRDT::VectorTimestamp *this)
{
  *(_QWORD *)this = &off_1E67F64B0;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::VectorTimestamp::~VectorTimestamp(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::VectorTimestamp::New(CRDT::VectorTimestamp *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F64B0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::VectorTimestamp::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::VectorTimestamp::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 != 10)
        break;
      while (1)
      {
        v9 = this[6].i32[1];
        v10 = this[6].i32[0];
        if ((int)v10 >= v9)
        {
          if (v9 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v9 + 1);
          v12 = operator new();
          *(_QWORD *)v12 = &off_1E67F6690;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_QWORD *)(v12 + 56) = 0;
          v13 = this[5];
          v14 = this[6];
          this[6] = vadd_s32(v14, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
        }
        else
        {
          v11 = this[5];
          this[6].i32[0] = v10 + 1;
          v12 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v10);
        }
        v29 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_37;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17
          || (v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !CRDT::VectorTimestamp_Element::MergePartialFromCodedStream((CRDT::VectorTimestamp_Element *)v12, a2))|| !*((_BYTE *)a2 + 36))
        {
LABEL_37:
          v25 = 0;
          goto LABEL_38;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v18);
        v19 = *((_DWORD *)a2 + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)a2 + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v22 >= v23 || *v22 != 10)
          break;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      if (v22 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v25 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
    if ((_DWORD)v7)
      v24 = (v7 & 7) == 4;
    else
      v24 = 1;
    v25 = v24;
  }
  while (!v24
       && google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4));
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B4638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::VectorTimestamp::SerializeWithCachedSizes(CRDT::VectorTimestamp *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t CRDT::VectorTimestamp::ByteSize(CRDT::VectorTimestamp *this)
{
  int v2;
  int v3;
  CRDT::VectorTimestamp_Element *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (CRDT::VectorTimestamp_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = (google::protobuf::io::CodedOutputStream *)CRDT::VectorTimestamp_Element::ByteSize(v4);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v2 += v6 + v7;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v8 = *((_QWORD *)this + 2);
  else
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  result = (v2 + v8);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::VectorTimestamp::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::VectorTimestamp::MergeFrom(this, lpsrc);
}

uint64_t CRDT::VectorTimestamp::IsInitialized(CRDT::VectorTimestamp *this)
{
  return 1;
}

_QWORD *CRDT::VectorTimestamp::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.VectorTimestamp");
}

std::string *CRDT::Dictionary_Element::MergeFrom(CRDT::Dictionary_Element *this, const CRDT::Dictionary_Element *a2)
{
  CRDT::Dictionary_Element *v3;
  std::string *v4;
  int v5;
  CRDT::ObjectID *v6;
  uint64_t v7;
  uint64_t v8;
  const CRDT::ObjectID *v9;
  CRDT::ObjectID *v10;
  uint64_t v11;
  uint64_t v12;
  const CRDT::ObjectID *v13;
  int32x2_t *v14;
  int32x2_t *v15;
  CRDT::RegisterLatest *v16;
  const CRDT::RegisterLatest *v17;
  const std::string::value_type *v18;
  char *v19;
  const std::string::value_type *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  char v25;
  std::string v26[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 1725);
    v4 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v25, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (CRDT::ObjectID *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        v6 = (CRDT::ObjectID *)operator new();
        this = CRDT::ObjectID::ObjectID(v6, v7, v8);
        *((_QWORD *)v3 + 5) = v6;
      }
      v9 = (const CRDT::ObjectID *)*((_QWORD *)a2 + 5);
      if (!v9)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v9 = *(const CRDT::ObjectID **)(CRDT::Dictionary_Element::default_instance_ + 40);
      }
      this = (CRDT::Dictionary_Element *)CRDT::ObjectID::MergeFrom(v6, v9);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v10 = (CRDT::ObjectID *)*((_QWORD *)v3 + 6);
      if (!v10)
      {
        v10 = (CRDT::ObjectID *)operator new();
        this = CRDT::ObjectID::ObjectID(v10, v11, v12);
        *((_QWORD *)v3 + 6) = v10;
      }
      v13 = (const CRDT::ObjectID *)*((_QWORD *)a2 + 6);
      if (!v13)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v13 = *(const CRDT::ObjectID **)(CRDT::Dictionary_Element::default_instance_ + 48);
      }
      this = (CRDT::Dictionary_Element *)CRDT::ObjectID::MergeFrom(v10, v13);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 4) != 0)
    {
      *((_DWORD *)v3 + 8) |= 4u;
      v14 = (int32x2_t *)*((_QWORD *)v3 + 7);
      if (!v14)
      {
        this = (CRDT::Dictionary_Element *)operator new();
        v14 = (int32x2_t *)this;
        *(_QWORD *)this = &off_1E67F64B0;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_DWORD *)this + 14) = 0;
        *((_QWORD *)v3 + 7) = this;
      }
      v15 = (int32x2_t *)*((_QWORD *)a2 + 7);
      if (!v15)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v15 = *(int32x2_t **)(CRDT::Dictionary_Element::default_instance_ + 56);
      }
      this = (CRDT::Dictionary_Element *)CRDT::VectorTimestamp::MergeFrom(v14, v15);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 8) != 0)
    {
      *((_DWORD *)v3 + 8) |= 8u;
      v16 = (CRDT::RegisterLatest *)*((_QWORD *)v3 + 8);
      if (!v16)
      {
        this = (CRDT::Dictionary_Element *)operator new();
        v16 = this;
        *(_QWORD *)this = &off_1E67F6438;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)v3 + 8) = this;
      }
      v17 = (const CRDT::RegisterLatest *)*((_QWORD *)a2 + 8);
      if (!v17)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v17 = *(const CRDT::RegisterLatest **)(CRDT::Dictionary_Element::default_instance_ + 64);
      }
      CRDT::RegisterLatest::MergeFrom(v16, v17);
    }
  }
  v20 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v19 = (char *)a2 + 8;
  v18 = v20;
  v21 = v19[23];
  if (v21 >= 0)
    v22 = v19;
  else
    v22 = v18;
  if (v21 >= 0)
    v23 = v19[23];
  else
    v23 = *((_QWORD *)v19 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v22, v23);
}

void sub_1B4B4678C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

void CRDT::Dictionary_Element::~Dictionary_Element(void **this)
{
  *this = &off_1E67F6528;
  CRDT::Dictionary_Element::SharedDtor((CRDT::Dictionary_Element *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Dictionary_Element::~Dictionary_Element(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::Dictionary_Element::SharedDtor(CRDT::Dictionary_Element *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::Dictionary_Element *)CRDT::Dictionary_Element::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 7);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 8);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t CRDT::Dictionary_Element::default_instance(CRDT::Dictionary_Element *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::Dictionary_Element::default_instance_;
}

double CRDT::Dictionary_Element::New(CRDT::Dictionary_Element *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6528;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  return result;
}

uint64_t CRDT::Dictionary_Element::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if ((v2 & 0xF) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 40);
      if (v3)
      {
        this = CRDT::ObjectID::clear_contents(*(_QWORD *)(this + 40));
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v1 + 32) & 2) != 0)
    {
      v4 = *(_QWORD *)(v1 + 48);
      if (v4)
      {
        this = CRDT::ObjectID::clear_contents(*(_QWORD *)(v1 + 48));
        *(_DWORD *)(v4 + 32) = 0;
        if (*(char *)(v4 + 31) < 0)
        {
          **(_BYTE **)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 8) = 0;
          *(_BYTE *)(v4 + 31) = 0;
        }
      }
    }
    v5 = *(_DWORD *)(v1 + 32);
    if ((v5 & 4) != 0)
    {
      this = *(_QWORD *)(v1 + 56);
      if (this)
      {
        this = CRDT::VectorTimestamp::Clear(this);
        v5 = *(_DWORD *)(v1 + 32);
      }
    }
    if ((v5 & 8) != 0)
    {
      this = *(_QWORD *)(v1 + 64);
      if (this)
        this = CRDT::RegisterLatest::Clear(this);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Dictionary_Element::MergePartialFromCodedStream(CRDT::Dictionary_Element *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CRDT::ObjectID *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  CRDT::ObjectID *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  _BYTE v48[32];
  _QWORD v49[2];
  unsigned int v50;

  google::protobuf::io::StringOutputStream::StringOutputStream(v49, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v48, (google::protobuf::io::ZeroCopyOutputStream *)v49);
  while (2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 < *((_QWORD *)a2 + 2) && (char)*v5 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_13:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
LABEL_81:
        v46 = 1;
        goto LABEL_82;
      }
LABEL_26:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v48, v4))goto LABEL_80;
    }
    v6 = *v5;
    *((_DWORD *)a2 + 8) = v6;
    *((_QWORD *)a2 + 1) = v5 + 1;
    v7 = v6 | 0x100000000;
LABEL_6:
    switch(v7 >> 3)
    {
      case 1u:
        if ((_DWORD)v7 != 10)
          goto LABEL_24;
        *((_DWORD *)this + 8) |= 1u;
        v9 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
        if (!v9)
        {
          v9 = (CRDT::ObjectID *)operator new();
          CRDT::ObjectID::ObjectID(v9, v10, v11);
          *((_QWORD *)this + 5) = v9;
        }
        v50 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))
            goto LABEL_80;
        }
        else
        {
          v50 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        v14 = *((_DWORD *)a2 + 14);
        v15 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v14 + 1;
        if (v14 >= v15)
          goto LABEL_80;
        v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, v50);
        if (!CRDT::ObjectID::MergePartialFromCodedStream(v9, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_80;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v16);
        v17 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v17, 1);
        v19 = v17 - 1;
        if (v19 < 0 == v18)
          *((_DWORD *)a2 + 14) = v19;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_37:
        *((_DWORD *)this + 8) |= 2u;
        v21 = (CRDT::ObjectID *)*((_QWORD *)this + 6);
        if (!v21)
        {
          v21 = (CRDT::ObjectID *)operator new();
          CRDT::ObjectID::ObjectID(v21, v22, v23);
          *((_QWORD *)this + 6) = v21;
        }
        v50 = 0;
        v24 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v24 >= *((_QWORD *)a2 + 2) || *v24 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))
            goto LABEL_80;
        }
        else
        {
          v50 = *v24;
          *((_QWORD *)a2 + 1) = v24 + 1;
        }
        v25 = *((_DWORD *)a2 + 14);
        v26 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v25 + 1;
        if (v25 >= v26)
          goto LABEL_80;
        v27 = google::protobuf::io::CodedInputStream::PushLimit(a2, v50);
        if (!CRDT::ObjectID::MergePartialFromCodedStream(v21, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_80;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v27);
        v28 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v18)
          *((_DWORD *)a2 + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v30 >= *((_QWORD *)a2 + 2) || *v30 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v30 + 1;
LABEL_51:
        *((_DWORD *)this + 8) |= 4u;
        v31 = *((_QWORD *)this + 7);
        if (!v31)
        {
          v31 = operator new();
          *(_QWORD *)v31 = &off_1E67F64B0;
          *(_OWORD *)(v31 + 8) = 0u;
          *(_OWORD *)(v31 + 24) = 0u;
          *(_OWORD *)(v31 + 40) = 0u;
          *(_DWORD *)(v31 + 56) = 0;
          *((_QWORD *)this + 7) = v31;
        }
        v50 = 0;
        v32 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))
            goto LABEL_80;
        }
        else
        {
          v50 = *v32;
          *((_QWORD *)a2 + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)a2 + 14);
        v34 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v33 + 1;
        if (v33 >= v34)
          goto LABEL_80;
        v35 = google::protobuf::io::CodedInputStream::PushLimit(a2, v50);
        if (!CRDT::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v31, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_80;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v35);
        v36 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v36, 1);
        v37 = v36 - 1;
        if (v37 < 0 == v18)
          *((_DWORD *)a2 + 14) = v37;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v38 >= *((_QWORD *)a2 + 2) || *v38 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v38 + 1;
LABEL_65:
        *((_DWORD *)this + 8) |= 8u;
        v39 = *((_QWORD *)this + 8);
        if (!v39)
        {
          v39 = operator new();
          *(_QWORD *)v39 = &off_1E67F6438;
          *(_OWORD *)(v39 + 8) = 0u;
          *(_OWORD *)(v39 + 24) = 0u;
          *(_OWORD *)(v39 + 40) = 0u;
          *((_QWORD *)this + 8) = v39;
        }
        v50 = 0;
        v40 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))
            goto LABEL_80;
        }
        else
        {
          v50 = *v40;
          *((_QWORD *)a2 + 1) = v40 + 1;
        }
        v41 = *((_DWORD *)a2 + 14);
        v42 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v41 + 1;
        if (v41 >= v42
          || (v43 = google::protobuf::io::CodedInputStream::PushLimit(a2, v50),
              !CRDT::RegisterLatest::MergePartialFromCodedStream((CRDT::RegisterLatest *)v39, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_80:
          v46 = 0;
          goto LABEL_82;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v43);
        v44 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v44, 1);
        v45 = v44 - 1;
        if (v45 < 0 == v18)
          *((_DWORD *)a2 + 14) = v45;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v46 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_82:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v48);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v49);
        return v46;
      case 2u:
        if ((_DWORD)v7 == 18)
          goto LABEL_37;
        goto LABEL_24;
      case 3u:
        if ((_DWORD)v7 == 26)
          goto LABEL_51;
        goto LABEL_24;
      case 4u:
        if ((_DWORD)v7 == 34)
          goto LABEL_65;
LABEL_24:
        if ((_DWORD)v7 && (v7 & 7) != 4)
          goto LABEL_26;
        goto LABEL_81;
      default:
        goto LABEL_13;
    }
  }
}

void sub_1B4B46F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C407D90225ELL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Dictionary_Element::SerializeWithCachedSizes(CRDT::Dictionary_Element *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::Dictionary_Element *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::Dictionary_Element::default_instance_ + 40);
    }
    this = (CRDT::Dictionary_Element *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v6 = *((_QWORD *)v3 + 6);
  if (!v6)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(this);
    v6 = *(_QWORD *)(CRDT::Dictionary_Element::default_instance_ + 48);
  }
  this = (CRDT::Dictionary_Element *)google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  v4 = *((_DWORD *)v3 + 8);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_18;
    goto LABEL_15;
  }
LABEL_12:
  v7 = *((_QWORD *)v3 + 7);
  if (!v7)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(this);
    v7 = *(_QWORD *)(CRDT::Dictionary_Element::default_instance_ + 56);
  }
  this = (CRDT::Dictionary_Element *)google::protobuf::internal::WireFormatLite::WriteMessage(3, v7, a2);
  if ((*((_DWORD *)v3 + 8) & 8) != 0)
  {
LABEL_15:
    v8 = *((_QWORD *)v3 + 8);
    if (!v8)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v8 = *(_QWORD *)(CRDT::Dictionary_Element::default_instance_ + 64);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(4, v8, a2);
  }
LABEL_18:
  if (*((char *)v3 + 31) < 0)
  {
    v9 = (char *)*((_QWORD *)v3 + 1);
    v10 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v9 = (char *)v3 + 8;
    LODWORD(v10) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v9, v10);
}

uint64_t CRDT::Dictionary_Element::ByteSize(CRDT::Dictionary_Element *this)
{
  int v2;
  int v3;
  CRDT::ObjectID *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  CRDT::ObjectID *v8;
  google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  CRDT::VectorTimestamp *v12;
  google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  CRDT::RegisterLatest *v16;
  google::protobuf::io::CodedOutputStream *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_33;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
  if (!v4)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v4 = *(CRDT::ObjectID **)(CRDT::Dictionary_Element::default_instance_ + 40);
  }
  v5 = (google::protobuf::io::CodedOutputStream *)CRDT::ObjectID::ByteSize(v4);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  v2 = *((_DWORD *)this + 8);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v8 = (CRDT::ObjectID *)*((_QWORD *)this + 6);
    if (!v8)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v8 = *(CRDT::ObjectID **)(CRDT::Dictionary_Element::default_instance_ + 48);
    }
    v9 = (google::protobuf::io::CodedOutputStream *)CRDT::ObjectID::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
    v2 = *((_DWORD *)this + 8);
  }
LABEL_18:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      goto LABEL_33;
    goto LABEL_27;
  }
  v12 = (CRDT::VectorTimestamp *)*((_QWORD *)this + 7);
  if (!v12)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v12 = *(CRDT::VectorTimestamp **)(CRDT::Dictionary_Element::default_instance_ + 56);
  }
  v13 = (google::protobuf::io::CodedOutputStream *)CRDT::VectorTimestamp::ByteSize(v12);
  v14 = (int)v13;
  if (v13 >= 0x80)
    v15 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
  else
    v15 = 1;
  v3 += v14 + v15 + 1;
  if ((*((_DWORD *)this + 8) & 8) != 0)
  {
LABEL_27:
    v16 = (CRDT::RegisterLatest *)*((_QWORD *)this + 8);
    if (!v16)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v16 = *(CRDT::RegisterLatest **)(CRDT::Dictionary_Element::default_instance_ + 64);
    }
    v17 = (google::protobuf::io::CodedOutputStream *)CRDT::RegisterLatest::ByteSize(v16);
    v18 = (int)v17;
    if (v17 >= 0x80)
      v19 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
    else
      v19 = 1;
    v3 += v18 + v19 + 1;
  }
LABEL_33:
  if (*((char *)this + 31) < 0)
    v20 = *((_QWORD *)this + 2);
  else
    LODWORD(v20) = *((unsigned __int8 *)this + 31);
  result = (v3 + v20);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Dictionary_Element::CheckTypeAndMergeFrom(CRDT::Dictionary_Element *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Dictionary_Element::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Dictionary_Element::IsInitialized(CRDT::Dictionary_Element *this)
{
  return 1;
}

_QWORD *CRDT::Dictionary_Element::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Dictionary.Element");
}

std::string *CRDT::Dictionary::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 1927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>(this + 5, a2 + 5);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B47328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Dictionary::~Dictionary(CRDT::Dictionary *this)
{
  *(_QWORD *)this = &off_1E67F61E0;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Dictionary::~Dictionary(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::Dictionary::New(CRDT::Dictionary *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F61E0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::Dictionary::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Dictionary::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 != 10)
        break;
      while (1)
      {
        v9 = this[6].i32[1];
        v10 = this[6].i32[0];
        if ((int)v10 >= v9)
        {
          if (v9 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v9 + 1);
          v12 = operator new();
          *(_QWORD *)v12 = &off_1E67F6528;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          *(_OWORD *)(v12 + 56) = 0u;
          v13 = this[5];
          v14 = this[6];
          this[6] = vadd_s32(v14, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
        }
        else
        {
          v11 = this[5];
          this[6].i32[0] = v10 + 1;
          v12 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v10);
        }
        v29 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_37;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17
          || (v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !CRDT::Dictionary_Element::MergePartialFromCodedStream((CRDT::Dictionary_Element *)v12, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_37:
          v25 = 0;
          goto LABEL_38;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v18);
        v19 = *((_DWORD *)a2 + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)a2 + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v22 >= v23 || *v22 != 10)
          break;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      if (v22 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v25 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
    if ((_DWORD)v7)
      v24 = (v7 & 7) == 4;
    else
      v24 = 1;
    v25 = v24;
  }
  while (!v24
       && google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4));
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B476F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Dictionary::SerializeWithCachedSizes(CRDT::Dictionary *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t CRDT::Dictionary::ByteSize(CRDT::Dictionary *this)
{
  int v2;
  int v3;
  CRDT::Dictionary_Element *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (CRDT::Dictionary_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = (google::protobuf::io::CodedOutputStream *)CRDT::Dictionary_Element::ByteSize(v4);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v2 += v6 + v7;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v8 = *((_QWORD *)this + 2);
  else
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  result = (v2 + v8);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Dictionary::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Dictionary::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Dictionary::IsInitialized(CRDT::Dictionary *this)
{
  return 1;
}

_QWORD *CRDT::Dictionary::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Dictionary");
}

std::string *CRDT::Index_Element::MergeFrom(CRDT::Index_Element *this, const CRDT::Index_Element *a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  char *v9;
  const std::string::value_type *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 2157);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 5) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_QWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 2u;
      *((_QWORD *)this + 6) = v7;
    }
  }
  v10 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v8 = v10;
  v11 = v9[23];
  if (v11 >= 0)
    v12 = v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[23];
  else
    v13 = *((_QWORD *)v9 + 1);
  return std::string::append((std::string *)((char *)this + 8), v12, v13);
}

void sub_1B4B4796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Index_Element::~Index_Element(void **this)
{
  *this = &off_1E67F6348;
  CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Index_Element::~Index_Element(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::Index_Element::New(CRDT::Index_Element *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6348;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::Index_Element::Clear(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Index_Element::MergePartialFromCodedStream(CRDT::Index_Element *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE v18[32];
  unint64_t v19[2];
  unint64_t v20;

  google::protobuf::io::StringOutputStream::StringOutputStream(v19, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18, (google::protobuf::io::ZeroCopyOutputStream *)v19);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 == 1)
      {
        if ((_DWORD)v7 != 8)
          goto LABEL_19;
        v10 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_38;
          v11 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *((_QWORD *)this + 5) = *v10;
          v11 = v10 + 1;
          *((_QWORD *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 8) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          v13 = v11 + 1;
          *((_QWORD *)a2 + 1) = v13;
          goto LABEL_28;
        }
      }
      else
      {
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_37:
          v16 = 1;
          goto LABEL_39;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v18, v4))goto LABEL_38;
      }
    }
    if ((_DWORD)v7 != 16)
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_37;
      goto LABEL_16;
    }
    v13 = (char *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_28:
    v20 = 0;
    if ((unint64_t)v13 < v9 && (*v13 & 0x80000000) == 0)
    {
      v14 = *v13;
      v15 = (unsigned __int8 *)(v13 + 1);
      *((_QWORD *)a2 + 1) = v15;
      goto LABEL_33;
    }
    if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, &v20))
      break;
    v14 = v20;
    v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
LABEL_33:
    *((_QWORD *)this + 6) = v14;
    *((_DWORD *)this + 8) |= 2u;
    if (v15 == (unsigned __int8 *)v9 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v16 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_39;
    }
  }
LABEL_38:
  v16 = 0;
LABEL_39:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v18);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v19);
  return v16;
}

void sub_1B4B47C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Index_Element::SerializeWithCachedSizes(CRDT::Index_Element *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)2, *((_QWORD *)this + 6), a2, a4);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::Index_Element::ByteSize(CRDT::Index_Element *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_8;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v2 = google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 5)) + 1;
    if ((*((_DWORD *)this + 8) & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
LABEL_7:
    v2 += google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 6)) + 1;
LABEL_8:
  if (*((char *)this + 31) < 0)
    v3 = *((_QWORD *)this + 2);
  else
    LODWORD(v3) = *((unsigned __int8 *)this + 31);
  result = (v2 + v3);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Index_Element::CheckTypeAndMergeFrom(CRDT::Index_Element *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Index_Element::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Index_Element::IsInitialized(CRDT::Index_Element *this)
{
  return 1;
}

_QWORD *CRDT::Index_Element::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Index.Element");
}

std::string *CRDT::Index::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 2351);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>(this + 5, a2 + 5);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B47E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Index::~Index(CRDT::Index *this)
{
  *(_QWORD *)this = &off_1E67F6870;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Index::~Index(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::Index::New(CRDT::Index *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6870;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::Index::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Index::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 != 10)
        break;
      while (1)
      {
        v9 = this[6].i32[1];
        v10 = this[6].i32[0];
        if ((int)v10 >= v9)
        {
          if (v9 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v9 + 1);
          v12 = operator new();
          *(_QWORD *)v12 = &off_1E67F6348;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          v13 = this[5];
          v14 = this[6];
          this[6] = vadd_s32(v14, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
        }
        else
        {
          v11 = this[5];
          this[6].i32[0] = v10 + 1;
          v12 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v10);
        }
        v29 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_37;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17
          || (v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !CRDT::Index_Element::MergePartialFromCodedStream((CRDT::Index_Element *)v12, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_37:
          v25 = 0;
          goto LABEL_38;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v18);
        v19 = *((_DWORD *)a2 + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)a2 + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v22 >= v23 || *v22 != 10)
          break;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      if (v22 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v25 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
    if ((_DWORD)v7)
      v24 = (v7 & 7) == 4;
    else
      v24 = 1;
    v25 = v24;
  }
  while (!v24
       && google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4));
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B48238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Index::SerializeWithCachedSizes(CRDT::Index *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t CRDT::Index::ByteSize(CRDT::Index *this)
{
  int v2;
  int v3;
  CRDT::Index_Element *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (CRDT::Index_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = (google::protobuf::io::CodedOutputStream *)CRDT::Index_Element::ByteSize(v4);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v2 += v6 + v7;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v8 = *((_QWORD *)this + 2);
  else
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  result = (v2 + v8);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Index::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Index::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Index::IsInitialized(CRDT::Index *this)
{
  return 1;
}

_QWORD *CRDT::Index::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Index");
}

std::string *CRDT::OneOf_Element::MergeFrom(CRDT::OneOf_Element *this, const CRDT::OneOf_Element *a2)
{
  CRDT::OneOf_Element *v3;
  std::string *v4;
  int v5;
  CRDT::ObjectID *v6;
  uint64_t v7;
  uint64_t v8;
  const CRDT::ObjectID *v9;
  CRDT::Timestamp *v10;
  const CRDT::Timestamp *v11;
  const std::string::value_type *v12;
  char *v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  char v19;
  std::string v20[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 2586);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (CRDT::ObjectID *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        v6 = (CRDT::ObjectID *)operator new();
        this = CRDT::ObjectID::ObjectID(v6, v7, v8);
        *((_QWORD *)v3 + 5) = v6;
      }
      v9 = (const CRDT::ObjectID *)*((_QWORD *)a2 + 5);
      if (!v9)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v9 = *(const CRDT::ObjectID **)(CRDT::OneOf_Element::default_instance_ + 40);
      }
      this = (CRDT::OneOf_Element *)CRDT::ObjectID::MergeFrom(v6, v9);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v10 = (CRDT::Timestamp *)*((_QWORD *)v3 + 6);
      if (!v10)
      {
        this = (CRDT::OneOf_Element *)operator new();
        v10 = this;
        *(_QWORD *)this = &off_1E67F6A50;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)v3 + 6) = this;
      }
      v11 = (const CRDT::Timestamp *)*((_QWORD *)a2 + 6);
      if (!v11)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v11 = *(const CRDT::Timestamp **)(CRDT::OneOf_Element::default_instance_ + 48);
      }
      CRDT::Timestamp::MergeFrom(v10, v11);
    }
  }
  v14 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v13 = (char *)a2 + 8;
  v12 = v14;
  v15 = v13[23];
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = v13[23];
  else
    v17 = *((_QWORD *)v13 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v16, v17);
}

void sub_1B4B4855C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

void CRDT::OneOf_Element::~OneOf_Element(void **this)
{
  *this = &off_1E67F63C0;
  CRDT::OneOf_Element::SharedDtor((CRDT::OneOf_Element *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::OneOf_Element::~OneOf_Element(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::OneOf_Element::SharedDtor(CRDT::OneOf_Element *this)
{
  uint64_t v2;
  uint64_t v3;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::OneOf_Element *)CRDT::OneOf_Element::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

double CRDT::OneOf_Element::New(CRDT::OneOf_Element *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F63C0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::OneOf_Element::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 40);
      if (v3)
      {
        this = CRDT::ObjectID::clear_contents(*(_QWORD *)(this + 40));
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
    if ((*(_BYTE *)(v1 + 32) & 2) != 0)
    {
      v4 = *(_QWORD *)(v1 + 48);
      if (v4)
      {
        *(_QWORD *)(v4 + 40) = 0;
        *(_QWORD *)(v4 + 48) = 0;
        *(_DWORD *)(v4 + 32) = 0;
        if (*(char *)(v4 + 31) < 0)
        {
          **(_BYTE **)(v4 + 8) = 0;
          *(_QWORD *)(v4 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v4 + 8) = 0;
          *(_BYTE *)(v4 + 31) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::OneOf_Element::MergePartialFromCodedStream(CRDT::OneOf_Element *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CRDT::ObjectID *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  _BYTE v30[32];
  _QWORD v31[2];
  unsigned int v32;

  google::protobuf::io::StringOutputStream::StringOutputStream(v31, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30, (google::protobuf::io::ZeroCopyOutputStream *)v31);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
        goto LABEL_33;
      goto LABEL_21;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      v9 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
      if (!v9)
      {
        v9 = (CRDT::ObjectID *)operator new();
        CRDT::ObjectID::ObjectID(v9, v10, v11);
        *((_QWORD *)this + 5) = v9;
      }
      v32 = 0;
      v12 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
          goto LABEL_48;
      }
      else
      {
        v32 = *v12;
        *((_QWORD *)a2 + 1) = v12 + 1;
      }
      v14 = *((_DWORD *)a2 + 14);
      v15 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v14 + 1;
      if (v14 >= v15)
        goto LABEL_48;
      v16 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32);
      if (!CRDT::ObjectID::MergePartialFromCodedStream(v9, a2) || !*((_BYTE *)a2 + 36))
        goto LABEL_48;
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v16);
      v17 = *((_DWORD *)a2 + 14);
      v18 = __OFSUB__(v17, 1);
      v19 = v17 - 1;
      if (v19 < 0 == v18)
        *((_DWORD *)a2 + 14) = v19;
      v20 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v20 < *((_QWORD *)a2 + 2) && *v20 == 18)
      {
        *((_QWORD *)a2 + 1) = v20 + 1;
LABEL_33:
        *((_DWORD *)this + 8) |= 2u;
        v21 = *((_QWORD *)this + 6);
        if (!v21)
        {
          v21 = operator new();
          *(_QWORD *)v21 = &off_1E67F6A50;
          *(_OWORD *)(v21 + 8) = 0u;
          *(_OWORD *)(v21 + 24) = 0u;
          *(_OWORD *)(v21 + 40) = 0u;
          *((_QWORD *)this + 6) = v21;
        }
        v32 = 0;
        v22 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 2) || *v22 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
            goto LABEL_48;
        }
        else
        {
          v32 = *v22;
          *((_QWORD *)a2 + 1) = v22 + 1;
        }
        v23 = *((_DWORD *)a2 + 14);
        v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24
          || (v25 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32),
              !CRDT::Timestamp::MergePartialFromCodedStream((CRDT::Timestamp *)v21, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_48:
          v28 = 0;
          goto LABEL_50;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v25);
        v26 = *((_DWORD *)a2 + 14);
        v18 = __OFSUB__(v26, 1);
        v27 = v26 - 1;
        if (v27 < 0 == v18)
          *((_DWORD *)a2 + 14) = v27;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v28 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_21:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_49;
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v30, v4))goto LABEL_48;
    }
  }
  if ((_DWORD)v7)
    v13 = (v7 & 7) == 4;
  else
    v13 = 1;
  if (!v13)
    goto LABEL_18;
LABEL_49:
  v28 = 1;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v31);
  return v28;
}

void sub_1B4B48A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C407D90225ELL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::OneOf_Element::SerializeWithCachedSizes(CRDT::OneOf_Element *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::OneOf_Element *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::OneOf_Element::default_instance_ + 40);
    }
    this = (CRDT::OneOf_Element *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v6 = *(_QWORD *)(CRDT::OneOf_Element::default_instance_ + 48);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v7 = (char *)v3 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::OneOf_Element::ByteSize(CRDT::OneOf_Element *this)
{
  int v2;
  CRDT::ObjectID *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  CRDT::Timestamp *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
  if (!v3)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v3 = *(CRDT::ObjectID **)(CRDT::OneOf_Element::default_instance_ + 40);
  }
  v4 = (google::protobuf::io::CodedOutputStream *)CRDT::ObjectID::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 8) & 2) != 0)
  {
LABEL_12:
    v7 = (CRDT::Timestamp *)*((_QWORD *)this + 6);
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v7 = *(CRDT::Timestamp **)(CRDT::OneOf_Element::default_instance_ + 48);
    }
    v8 = (google::protobuf::io::CodedOutputStream *)CRDT::Timestamp::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::OneOf_Element::CheckTypeAndMergeFrom(CRDT::OneOf_Element *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::OneOf_Element::MergeFrom(this, lpsrc);
}

uint64_t CRDT::OneOf_Element::IsInitialized(CRDT::OneOf_Element *this)
{
  return 1;
}

_QWORD *CRDT::OneOf_Element::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.OneOf.Element");
}

std::string *CRDT::OneOf::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int32x2_t *v6;
  int32x2_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 2780);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>(this + 5, a2 + 5);
  v7 = a2[1];
  v6 = a2 + 1;
  v5 = (const std::string::value_type *)v7;
  v8 = v6[2].i8[7];
  if (v8 >= 0)
    v9 = (const std::string::value_type *)v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = v6[2].u8[7];
  else
    v10 = (std::string::size_type)v6[1];
  return std::string::append((std::string *)&this[1], v9, v10);
}

void sub_1B4B48D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::OneOf::~OneOf(CRDT::OneOf *this)
{
  *(_QWORD *)this = &off_1E67F68E8;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::OneOf::~OneOf(this);
  JUMPOUT(0x1B5E3DB94);
}

double CRDT::OneOf::New(CRDT::OneOf *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F68E8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::OneOf::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::OneOf::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  int32x2_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  _BYTE *v22;
  _BYTE *v23;
  BOOL v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  do
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if ((_DWORD)v7 != 10)
        break;
      while (1)
      {
        v9 = this[6].i32[1];
        v10 = this[6].i32[0];
        if ((int)v10 >= v9)
        {
          if (v9 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v9 + 1);
          v12 = operator new();
          *(_QWORD *)v12 = &off_1E67F63C0;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 40) = 0u;
          v13 = this[5];
          v14 = this[6];
          this[6] = vadd_s32(v14, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
        }
        else
        {
          v11 = this[5];
          this[6].i32[0] = v10 + 1;
          v12 = *(_QWORD *)(*(_QWORD *)&v11 + 8 * v10);
        }
        v29 = 0;
        v15 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v15 >= *((_QWORD *)a2 + 2) || *v15 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_37;
        }
        else
        {
          v29 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        v16 = *((_DWORD *)a2 + 14);
        v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17
          || (v18 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !CRDT::OneOf_Element::MergePartialFromCodedStream((CRDT::OneOf_Element *)v12, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_37:
          v25 = 0;
          goto LABEL_38;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v18);
        v19 = *((_DWORD *)a2 + 14);
        v20 = __OFSUB__(v19, 1);
        v21 = v19 - 1;
        if (v21 < 0 == v20)
          *((_DWORD *)a2 + 14) = v21;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v23 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v22 >= v23 || *v22 != 10)
          break;
        *((_QWORD *)a2 + 1) = v22 + 1;
      }
      if (v22 == v23 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        v25 = 1;
        *((_BYTE *)a2 + 36) = 1;
        goto LABEL_38;
      }
    }
    if ((_DWORD)v7)
      v24 = (v7 & 7) == 4;
    else
      v24 = 1;
    v25 = v24;
  }
  while (!v24
       && google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4));
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B49110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::OneOf::SerializeWithCachedSizes(CRDT::OneOf *this, google::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  if (*((int *)this + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>((uint64_t)this + 40, v4);
      google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
      ++v4;
    }
    while (v4 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v6 = (char *)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    v6 = (char *)this + 8;
    LODWORD(v7) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v6, v7);
}

uint64_t CRDT::OneOf::ByteSize(CRDT::OneOf *this)
{
  int v2;
  int v3;
  CRDT::OneOf_Element *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = (CRDT::OneOf_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>((uint64_t)this + 40, v3);
      v5 = (google::protobuf::io::CodedOutputStream *)CRDT::OneOf_Element::ByteSize(v4);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v2 += v6 + v7;
      ++v3;
    }
    while (v3 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v8 = *((_QWORD *)this + 2);
  else
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  result = (v2 + v8);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::OneOf::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::OneOf::MergeFrom(this, lpsrc);
}

uint64_t CRDT::OneOf::IsInitialized(CRDT::OneOf *this)
{
  return 1;
}

_QWORD *CRDT::OneOf::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.OneOf");
}

CRDT::StringArray_ArrayAttachment *CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(CRDT::StringArray_ArrayAttachment *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6708;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CRDT::StringArray_ArrayAttachment::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B49304(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void CRDT::StringArray_ArrayAttachment::SharedCtor(CRDT::StringArray_ArrayAttachment *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v6[0] = &off_1E67F6B80;
    v6[1] = google::protobuf::internal::InitEmptyString;
    v7 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v6);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v6);
  }
  v5 = google::protobuf::internal::empty_string_;
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B493B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CRDT::StringArray_ArrayAttachment *CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(CRDT::StringArray_ArrayAttachment *this, const CRDT::StringArray_ArrayAttachment *a2, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)this = &off_1E67F6708;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  CRDT::StringArray_ArrayAttachment::SharedCtor(this, (uint64_t)a2, a3);
  CRDT::StringArray_ArrayAttachment::MergeFrom(this, a2, v5);
  return this;
}

void sub_1B4B4941C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

std::string *CRDT::StringArray_ArrayAttachment::MergeFrom(CRDT::StringArray_ArrayAttachment *this, const CRDT::StringArray_ArrayAttachment *a2, uint64_t a3)
{
  std::string *v5;
  int v6;
  uint64_t v7;
  const std::string *v8;
  std::string *v9;
  const std::string::value_type *v10;
  char *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 3006);
    v5 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v6)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v7 = *((_QWORD *)a2 + 5);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 5) = v7;
      v6 = *((_DWORD *)a2 + 8);
    }
    if ((v6 & 2) != 0)
    {
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 2u;
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor((uint64_t)this, (uint64_t)a2, a3);
      v9 = (std::string *)*((_QWORD *)this + 6);
      if (v9 == (std::string *)google::protobuf::internal::empty_string_)
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 6) = v9;
      }
      std::string::operator=(v9, v8);
    }
  }
  v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  return std::string::append((std::string *)((char *)this + 8), v14, v15);
}

void sub_1B4B4955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::StringArray_ArrayAttachment::~StringArray_ArrayAttachment(void **this, uint64_t a2, uint64_t a3)
{
  *this = &off_1E67F6708;
  CRDT::StringArray_ArrayAttachment::SharedDtor((CRDT::StringArray_ArrayAttachment *)this, a2, a3);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::StringArray_ArrayAttachment::~StringArray_ArrayAttachment(this, a2, a3);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::StringArray_ArrayAttachment::SharedDtor(CRDT::StringArray_ArrayAttachment *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;

  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    v4 = v3 == google::protobuf::internal::empty_string_;
  else
    v4 = 1;
  if (!v4)
  {
    if (*(char *)(v3 + 23) < 0)
      operator delete(*(void **)v3);
    this = (CRDT::StringArray_ArrayAttachment *)MEMORY[0x1B5E3DB94](v3, 0x1012C40EC159624);
  }
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
}

CRDT::StringArray_ArrayAttachment *CRDT::StringArray_ArrayAttachment::New(CRDT::StringArray_ArrayAttachment *this)
{
  CRDT::StringArray_ArrayAttachment *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (CRDT::StringArray_ArrayAttachment *)operator new();
  CRDT::StringArray_ArrayAttachment::StringArray_ArrayAttachment(v1, v2, v3);
  return v1;
}

void sub_1B4B49684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

uint64_t CRDT::StringArray_ArrayAttachment::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(this + 32);
  if ((v3 & 3) != 0)
  {
    *(_QWORD *)(this + 40) = 0;
    if ((v3 & 2) != 0)
    {
      if (!google::protobuf::internal::empty_string_)
        versioned_document::Version::SharedCtor(this, a2, a3);
      v4 = *(_QWORD *)(this + 48);
      if (v4 != google::protobuf::internal::empty_string_)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  *(_DWORD *)(this + 32) = 0;
  if (*(char *)(this + 31) < 0)
  {
    **(_BYTE **)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  else
  {
    *(_BYTE *)(this + 8) = 0;
    *(_BYTE *)(this + 31) = 0;
  }
  return this;
}

uint64_t CRDT::StringArray_ArrayAttachment::MergePartialFromCodedStream(CRDT::StringArray_ArrayAttachment *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  BOOL v12;
  int v13;
  std::string *v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];

  google::protobuf::io::StringOutputStream::StringOutputStream(v18, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17, (google::protobuf::io::ZeroCopyOutputStream *)v18);
  while (1)
  {
    do
    {
      while (1)
      {
        v5 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
        {
          TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_12;
        }
        else
        {
          v6 = *v5;
          *((_DWORD *)a2 + 8) = v6;
          *((_QWORD *)a2 + 1) = v5 + 1;
          v7 = v6 | 0x100000000;
        }
        if (v7 >> 3 == 2)
        {
          if ((_DWORD)v7 == 18)
          {
            v13 = *((_DWORD *)this + 8);
            goto LABEL_28;
          }
LABEL_19:
          if (!(_DWORD)v7 || (v7 & 7) == 4)
            goto LABEL_36;
          goto LABEL_16;
        }
        if (v7 >> 3 == 1)
          break;
LABEL_12:
        if ((_DWORD)v7)
          v12 = (v7 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
LABEL_36:
          v15 = 1;
          goto LABEL_38;
        }
LABEL_16:
        if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v17, v4))goto LABEL_37;
      }
      if ((_DWORD)v7 != 8)
        goto LABEL_19;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_37;
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        *((_QWORD *)this + 5) = *v10;
        v11 = v10 + 1;
        *((_QWORD *)a2 + 1) = v11;
      }
      v13 = *((_DWORD *)this + 8) | 1;
      *((_DWORD *)this + 8) = v13;
    }
    while ((unint64_t)v11 >= v9 || *v11 != 18);
    *((_QWORD *)a2 + 1) = v11 + 1;
LABEL_28:
    *((_DWORD *)this + 8) = v13 | 2;
    if (!google::protobuf::internal::empty_string_)
      __assert_rtn("GetEmptyStringAlreadyInited", "generated_message_util.h", 80, "empty_string_ != NULL");
    v14 = (std::string *)*((_QWORD *)this + 6);
    if (v14 == (std::string *)google::protobuf::internal::empty_string_)
    {
      v14 = (std::string *)operator new();
      v14->__r_.__value_.__r.__words[0] = 0;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      *((_QWORD *)this + 6) = v14;
    }
    if (!google::protobuf::internal::WireFormatLite::ReadString(a2, v14))
      break;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      v15 = 1;
      *((_BYTE *)a2 + 36) = 1;
      goto LABEL_38;
    }
  }
LABEL_37:
  v15 = 0;
LABEL_38:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v17);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v18);
  return v15;
}

void sub_1B4B4996C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::StringArray_ArrayAttachment::SerializeWithCachedSizes(CRDT::StringArray_ArrayAttachment *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 8);
  }
  if ((v6 & 2) != 0)
    google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2, *((_QWORD *)this + 6), a2);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::StringArray_ArrayAttachment::ByteSize(CRDT::StringArray_ArrayAttachment *this)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_16;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v2 = google::protobuf::io::CodedOutputStream::VarintSize64(*((_QWORD *)this + 5)) + 1;
    if ((*((_DWORD *)this + 8) & 2) == 0)
      goto LABEL_16;
  }
  else
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_16;
  }
  v3 = *((_QWORD *)this + 6);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = v4;
  v6 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(v3 + 23);
  else
    v7 = v6;
  if (v7 >= 0x80)
  {
    v8 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v7);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v6 = *(_QWORD *)(v3 + 8);
    v5 = *(_BYTE *)(v3 + 23);
  }
  else
  {
    v8 = 1;
  }
  if (v5 < 0)
    v4 = v6;
  v2 += v8 + v4 + 1;
LABEL_16:
  if (*((char *)this + 31) < 0)
    v9 = *((_QWORD *)this + 2);
  else
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
  result = (v2 + v9);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::StringArray_ArrayAttachment::CheckTypeAndMergeFrom(CRDT::StringArray_ArrayAttachment *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::StringArray_ArrayAttachment::MergeFrom(this, lpsrc, v5);
}

uint64_t CRDT::StringArray_ArrayAttachment::IsInitialized(CRDT::StringArray_ArrayAttachment *this)
{
  return 1;
}

_QWORD *CRDT::StringArray_ArrayAttachment::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.StringArray.ArrayAttachment");
}

std::string *CRDT::StringArray::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  CRDT *v5;
  topotext::String *v6;
  int32x2_t *v7;
  const std::string::value_type *v8;
  int32x2_t *v9;
  int32x2_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 3239);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = (CRDT *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>(this + 6, a2 + 6);
  if ((a2[4].i8[0] & 1) != 0)
  {
    this[4].i32[0] |= 1u;
    v6 = (topotext::String *)this[5];
    if (!v6)
    {
      v6 = (topotext::String *)operator new();
      v5 = (CRDT *)topotext::String::String(v6);
      this[5] = (int32x2_t)v6;
    }
    v7 = (int32x2_t *)a2[5];
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(v5);
      v7 = *(int32x2_t **)(CRDT::StringArray::default_instance_ + 40);
    }
    topotext::String::MergeFrom((int32x2_t *)v6, v7);
  }
  v10 = a2[1];
  v9 = a2 + 1;
  v8 = (const std::string::value_type *)v10;
  v11 = v9[2].i8[7];
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v9;
  else
    v12 = v8;
  if (v11 >= 0)
    v13 = v9[2].u8[7];
  else
    v13 = (std::string::size_type)v9[1];
  return std::string::append((std::string *)&this[1], v12, v13);
}

void sub_1B4B49C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C406C843DA2);
  _Unwind_Resume(a1);
}

void CRDT::StringArray::~StringArray(CRDT::StringArray *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E67F62D0;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::StringArray *)CRDT::StringArray::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 6);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::StringArray::~StringArray(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t CRDT::StringArray::default_instance(CRDT::StringArray *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::StringArray::default_instance_;
}

double CRDT::StringArray::New(CRDT::StringArray *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F62D0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 52) = 0u;
  return result;
}

uint64_t CRDT::StringArray::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = this;
  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = topotext::String::Clear(this, a2, a3);
  }
  if (*(int *)(v3 + 56) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v3 + 56));
  }
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::StringArray::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  topotext::String *v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  int32x2_t v21;
  CRDT::StringArray_ArrayAttachment *v22;
  int32x2_t v23;
  int32x2_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE v34[32];
  _QWORD v35[2];
  unsigned int v36;

  google::protobuf::io::StringOutputStream::StringOutputStream(v35, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v34, (google::protobuf::io::ZeroCopyOutputStream *)v35);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_14;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 2)
      {
        if ((_DWORD)v7 == 18)
          goto LABEL_33;
LABEL_21:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_54;
        goto LABEL_18;
      }
      if (v7 >> 3 == 1)
        break;
LABEL_14:
      if ((_DWORD)v7)
        v11 = (v7 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
LABEL_54:
        v32 = 1;
        goto LABEL_55;
      }
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v34, v4))goto LABEL_53;
    }
    if ((_DWORD)v7 != 10)
      goto LABEL_21;
    this[4].i32[0] |= 1u;
    v9 = (topotext::String *)this[5];
    if (!v9)
    {
      v9 = (topotext::String *)operator new();
      topotext::String::String(v9);
      this[5] = (int32x2_t)v9;
    }
    v36 = 0;
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
        goto LABEL_53;
    }
    else
    {
      v36 = *v10;
      *((_QWORD *)a2 + 1) = v10 + 1;
    }
    v12 = *((_DWORD *)a2 + 14);
    v13 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v12 + 1;
    if (v12 >= v13)
      goto LABEL_53;
    v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v36);
    if (!topotext::String::MergePartialFromCodedStream((int32x2_t *)v9, a2) || !*((_BYTE *)a2 + 36))
      goto LABEL_53;
    google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
    v15 = *((_DWORD *)a2 + 14);
    v16 = __OFSUB__(v15, 1);
    v17 = v15 - 1;
    if (v17 < 0 == v16)
      *((_DWORD *)a2 + 14) = v17;
    v18 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
    {
      do
      {
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_33:
        v19 = this[7].i32[1];
        v20 = this[7].i32[0];
        if ((int)v20 >= v19)
        {
          if (v19 == this[8].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[6], v19 + 1);
          v22 = google::protobuf::internal::GenericTypeHandler<CRDT::StringArray_ArrayAttachment>::New();
          v23 = this[6];
          v24 = this[7];
          this[7] = vadd_s32(v24, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v23 + 8 * v24.i32[0]) = v22;
        }
        else
        {
          v21 = this[6];
          this[7].i32[0] = v20 + 1;
          v22 = *(CRDT::StringArray_ArrayAttachment **)(*(_QWORD *)&v21 + 8 * v20);
        }
        v36 = 0;
        v25 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
            goto LABEL_53;
        }
        else
        {
          v36 = *v25;
          *((_QWORD *)a2 + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)a2 + 14);
        v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 >= v27
          || (v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v36),
              !CRDT::StringArray_ArrayAttachment::MergePartialFromCodedStream(v22, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_53:
          v32 = 0;
          goto LABEL_55;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v28);
        v29 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v16)
          *((_DWORD *)a2 + 14) = v30;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v31 = (_BYTE *)*((_QWORD *)a2 + 2);
      }
      while (v18 < v31 && *v18 == 18);
      if (v18 == v31 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        break;
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  v32 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_55:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v34);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v35);
  return v32;
}

void sub_1B4B4A148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C406C843DA2);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::StringArray::SerializeWithCachedSizes(CRDT::StringArray *this, google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = *((_QWORD *)this + 5);
    if (!v4)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v4 = *(_QWORD *)(CRDT::StringArray::default_instance_ + 40);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(1, v4, a2);
  }
  if (*((int *)this + 14) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>((uint64_t)this + 48, v5);
      google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
      ++v5;
    }
    while (v5 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::StringArray::ByteSize(CRDT::StringArray *this)
{
  int v2;
  topotext::String *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  CRDT::StringArray_ArrayAttachment *v10;
  google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = (topotext::String *)*((_QWORD *)this + 5);
    if (!v3)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v3 = *(topotext::String **)(CRDT::StringArray::default_instance_ + 40);
    }
    v4 = (google::protobuf::io::CodedOutputStream *)topotext::String::ByteSize(v3);
    v5 = (int)v4;
    if (v4 >= 0x80)
      v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    else
      v6 = 1;
    v2 = v5 + v6 + 1;
  }
  else
  {
    v2 = 0;
  }
  v7 = *((_DWORD *)this + 14);
  v8 = v7 + v2;
  if (v7 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (CRDT::StringArray_ArrayAttachment *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>((uint64_t)this + 48, v9);
      v11 = (google::protobuf::io::CodedOutputStream *)CRDT::StringArray_ArrayAttachment::ByteSize(v10);
      v12 = (int)v11;
      if (v11 >= 0x80)
        v13 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
      else
        v13 = 1;
      v8 += v12 + v13;
      ++v9;
    }
    while (v9 < *((_DWORD *)this + 14));
  }
  if (*((char *)this + 31) < 0)
    v14 = *((_QWORD *)this + 2);
  else
    LODWORD(v14) = *((unsigned __int8 *)this + 31);
  result = (v8 + v14);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::StringArray::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::StringArray::MergeFrom(this, lpsrc);
}

uint64_t CRDT::StringArray::IsInitialized(CRDT::StringArray *this)
{
  return 1;
}

_QWORD *CRDT::StringArray::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.StringArray");
}

std::string *CRDT::Array::MergeFrom(CRDT::Array *this, const CRDT::Array *a2)
{
  CRDT::Array *v3;
  std::string *v4;
  int v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  const std::string::value_type *v10;
  char *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 3480);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (int32x2_t *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        this = (CRDT::Array *)operator new();
        v6 = (int32x2_t *)this;
        *(_QWORD *)this = &off_1E67F62D0;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *(_OWORD *)((char *)this + 52) = 0u;
        *((_QWORD *)v3 + 5) = this;
      }
      v7 = (int32x2_t *)*((_QWORD *)a2 + 5);
      if (!v7)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v7 = *(int32x2_t **)(CRDT::Array::default_instance_ + 40);
      }
      this = (CRDT::Array *)CRDT::StringArray::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v8 = (int32x2_t *)*((_QWORD *)v3 + 6);
      if (!v8)
      {
        this = (CRDT::Array *)operator new();
        v8 = (int32x2_t *)this;
        *(_QWORD *)this = &off_1E67F61E0;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_DWORD *)this + 14) = 0;
        *((_QWORD *)v3 + 6) = this;
      }
      v9 = (int32x2_t *)*((_QWORD *)a2 + 6);
      if (!v9)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v9 = *(int32x2_t **)(CRDT::Array::default_instance_ + 48);
      }
      CRDT::Dictionary::MergeFrom(v8, v9);
    }
  }
  v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v14, v15);
}

void sub_1B4B4A52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Array::~Array(void **this)
{
  *this = &off_1E67F67F8;
  CRDT::Array::SharedDtor((CRDT::Array *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Array::~Array(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::Array::SharedDtor(CRDT::Array *this)
{
  uint64_t v2;
  uint64_t v3;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::Array *)CRDT::Array::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CRDT::Array::default_instance(CRDT::Array *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::Array::default_instance_;
}

double CRDT::Array::New(CRDT::Array *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F67F8;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::Array::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 32);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 1) != 0)
    {
      this = *(_QWORD *)(this + 40);
      if (this)
      {
        this = CRDT::StringArray::Clear(this, a2, a3);
        v4 = *(_DWORD *)(v3 + 32);
      }
    }
    if ((v4 & 2) != 0)
    {
      this = *(_QWORD *)(v3 + 48);
      if (this)
        this = CRDT::Dictionary::Clear(this);
    }
  }
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Array::MergePartialFromCodedStream(CRDT::Array *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  uint64_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  unsigned int v30;

  google::protobuf::io::StringOutputStream::StringOutputStream(v29, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28, (google::protobuf::io::ZeroCopyOutputStream *)v29);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
        goto LABEL_33;
      goto LABEL_21;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      v9 = *((_QWORD *)this + 5);
      if (!v9)
      {
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E67F62D0;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 52) = 0u;
        *((_QWORD *)this + 5) = v9;
      }
      v30 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
          goto LABEL_48;
      }
      else
      {
        v30 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v12 = *((_DWORD *)a2 + 14);
      v13 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v12 + 1;
      if (v12 >= v13)
        goto LABEL_48;
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
      if (!CRDT::StringArray::MergePartialFromCodedStream((int32x2_t *)v9, a2) || !*((_BYTE *)a2 + 36))
        goto LABEL_48;
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
      v15 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v17 < 0 == v16)
        *((_DWORD *)a2 + 14) = v17;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
      {
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_33:
        *((_DWORD *)this + 8) |= 2u;
        v19 = *((_QWORD *)this + 6);
        if (!v19)
        {
          v19 = operator new();
          *(_QWORD *)v19 = &off_1E67F61E0;
          *(_OWORD *)(v19 + 8) = 0u;
          *(_OWORD *)(v19 + 24) = 0u;
          *(_OWORD *)(v19 + 40) = 0u;
          *(_DWORD *)(v19 + 56) = 0;
          *((_QWORD *)this + 6) = v19;
        }
        v30 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
            goto LABEL_48;
        }
        else
        {
          v30 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22
          || (v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30),
              !CRDT::Dictionary::MergePartialFromCodedStream((int32x2_t *)v19, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_48:
          v26 = 0;
          goto LABEL_50;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
        v24 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v16)
          *((_DWORD *)a2 + 14) = v25;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v26 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_21:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_49;
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v28, v4))goto LABEL_48;
    }
  }
  if ((_DWORD)v7)
    v11 = (v7 & 7) == 4;
  else
    v11 = 1;
  if (!v11)
    goto LABEL_18;
LABEL_49:
  v26 = 1;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v29);
  return v26;
}

void sub_1B4B4AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Array::SerializeWithCachedSizes(CRDT::Array *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::Array *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::Array::default_instance_ + 40);
    }
    this = (CRDT::Array *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v6 = *(_QWORD *)(CRDT::Array::default_instance_ + 48);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v7 = (char *)v3 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::Array::ByteSize(CRDT::Array *this)
{
  int v2;
  CRDT::StringArray *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  CRDT::Dictionary *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (CRDT::StringArray *)*((_QWORD *)this + 5);
  if (!v3)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v3 = *(CRDT::StringArray **)(CRDT::Array::default_instance_ + 40);
  }
  v4 = (google::protobuf::io::CodedOutputStream *)CRDT::StringArray::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 8) & 2) != 0)
  {
LABEL_12:
    v7 = (CRDT::Dictionary *)*((_QWORD *)this + 6);
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v7 = *(CRDT::Dictionary **)(CRDT::Array::default_instance_ + 48);
    }
    v8 = (google::protobuf::io::CodedOutputStream *)CRDT::Dictionary::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Array::CheckTypeAndMergeFrom(CRDT::Array *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Array::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Array::IsInitialized(CRDT::Array *this)
{
  return 1;
}

_QWORD *CRDT::Array::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Array");
}

std::string *CRDT::OrderedSet::MergeFrom(CRDT::OrderedSet *this, const CRDT::OrderedSet *a2)
{
  CRDT::OrderedSet *v3;
  std::string *v4;
  int v5;
  CRDT::Array *v6;
  const CRDT::Array *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  const std::string::value_type *v10;
  char *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char v17;
  std::string v18[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 3723);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v17, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      *((_DWORD *)v3 + 8) |= 1u;
      v6 = (CRDT::Array *)*((_QWORD *)v3 + 5);
      if (!v6)
      {
        this = (CRDT::OrderedSet *)operator new();
        v6 = this;
        *(_QWORD *)this = &off_1E67F67F8;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_QWORD *)v3 + 5) = this;
      }
      v7 = (const CRDT::Array *)*((_QWORD *)a2 + 5);
      if (!v7)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v7 = *(const CRDT::Array **)(CRDT::OrderedSet::default_instance_ + 40);
      }
      this = (CRDT::OrderedSet *)CRDT::Array::MergeFrom(v6, v7);
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v8 = (int32x2_t *)*((_QWORD *)v3 + 6);
      if (!v8)
      {
        this = (CRDT::OrderedSet *)operator new();
        v8 = (int32x2_t *)this;
        *(_QWORD *)this = &off_1E67F61E0;
        *(_OWORD *)((char *)this + 8) = 0u;
        *(_OWORD *)((char *)this + 24) = 0u;
        *(_OWORD *)((char *)this + 40) = 0u;
        *((_DWORD *)this + 14) = 0;
        *((_QWORD *)v3 + 6) = this;
      }
      v9 = (int32x2_t *)*((_QWORD *)a2 + 6);
      if (!v9)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v9 = *(int32x2_t **)(CRDT::OrderedSet::default_instance_ + 48);
      }
      CRDT::Dictionary::MergeFrom(v8, v9);
    }
  }
  v12 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v11 = (char *)a2 + 8;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v14, v15);
}

void sub_1B4B4ADC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::OrderedSet::~OrderedSet(void **this)
{
  *this = &off_1E67F6258;
  CRDT::OrderedSet::SharedDtor((CRDT::OrderedSet *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::OrderedSet::~OrderedSet(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::OrderedSet::SharedDtor(CRDT::OrderedSet *this)
{
  uint64_t v2;
  uint64_t v3;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::OrderedSet *)CRDT::OrderedSet::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t CRDT::OrderedSet::default_instance(CRDT::OrderedSet *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::OrderedSet::default_instance_;
}

double CRDT::OrderedSet::New(CRDT::OrderedSet *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6258;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return result;
}

uint64_t CRDT::OrderedSet::Clear(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = this;
  v4 = *(_DWORD *)(this + 32);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 1) != 0)
    {
      this = *(_QWORD *)(this + 40);
      if (this)
      {
        this = CRDT::Array::Clear(this, a2, a3);
        v4 = *(_DWORD *)(v3 + 32);
      }
    }
    if ((v4 & 2) != 0)
    {
      this = *(_QWORD *)(v3 + 48);
      if (this)
        this = CRDT::Dictionary::Clear(this);
    }
  }
  *(_DWORD *)(v3 + 32) = 0;
  if (*(char *)(v3 + 31) < 0)
  {
    **(_BYTE **)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::OrderedSet::MergePartialFromCodedStream(CRDT::OrderedSet *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  uint64_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  unsigned int v30;

  google::protobuf::io::StringOutputStream::StringOutputStream(v29, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28, (google::protobuf::io::ZeroCopyOutputStream *)v29);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
        goto LABEL_33;
      goto LABEL_21;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 10)
    {
      *((_DWORD *)this + 8) |= 1u;
      v9 = *((_QWORD *)this + 5);
      if (!v9)
      {
        v9 = operator new();
        *(_QWORD *)v9 = &off_1E67F67F8;
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        *(_OWORD *)(v9 + 40) = 0u;
        *((_QWORD *)this + 5) = v9;
      }
      v30 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
          goto LABEL_48;
      }
      else
      {
        v30 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v12 = *((_DWORD *)a2 + 14);
      v13 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v12 + 1;
      if (v12 >= v13)
        goto LABEL_48;
      v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30);
      if (!CRDT::Array::MergePartialFromCodedStream((CRDT::Array *)v9, a2) || !*((_BYTE *)a2 + 36))
        goto LABEL_48;
      google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
      v15 = *((_DWORD *)a2 + 14);
      v16 = __OFSUB__(v15, 1);
      v17 = v15 - 1;
      if (v17 < 0 == v16)
        *((_DWORD *)a2 + 14) = v17;
      v18 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 18)
      {
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_33:
        *((_DWORD *)this + 8) |= 2u;
        v19 = *((_QWORD *)this + 6);
        if (!v19)
        {
          v19 = operator new();
          *(_QWORD *)v19 = &off_1E67F61E0;
          *(_OWORD *)(v19 + 8) = 0u;
          *(_OWORD *)(v19 + 24) = 0u;
          *(_OWORD *)(v19 + 40) = 0u;
          *(_DWORD *)(v19 + 56) = 0;
          *((_QWORD *)this + 6) = v19;
        }
        v30 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
            goto LABEL_48;
        }
        else
        {
          v30 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22
          || (v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v30),
              !CRDT::Dictionary::MergePartialFromCodedStream((int32x2_t *)v19, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_48:
          v26 = 0;
          goto LABEL_50;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
        v24 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v16)
          *((_DWORD *)a2 + 14) = v25;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v26 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_21:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_49;
LABEL_18:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v28, v4))goto LABEL_48;
    }
  }
  if ((_DWORD)v7)
    v11 = (v7 & 7) == 4;
  else
    v11 = 1;
  if (!v11)
    goto LABEL_18;
LABEL_49:
  v26 = 1;
LABEL_50:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v28);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v29);
  return v26;
}

void sub_1B4B4B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::OrderedSet::SerializeWithCachedSizes(CRDT::OrderedSet *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::OrderedSet *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::OrderedSet::default_instance_ + 40);
    }
    this = (CRDT::OrderedSet *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v6 = *(_QWORD *)(CRDT::OrderedSet::default_instance_ + 48);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    v8 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v7 = (char *)v3 + 8;
    LODWORD(v8) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::OrderedSet::ByteSize(CRDT::OrderedSet *this)
{
  int v2;
  CRDT::Array *v3;
  google::protobuf::io::CodedOutputStream *v4;
  int v5;
  int v6;
  CRDT::Dictionary *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if (!*((_BYTE *)this + 32))
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = (CRDT::Array *)*((_QWORD *)this + 5);
  if (!v3)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v3 = *(CRDT::Array **)(CRDT::OrderedSet::default_instance_ + 40);
  }
  v4 = (google::protobuf::io::CodedOutputStream *)CRDT::Array::ByteSize(v3);
  v5 = (int)v4;
  if (v4 >= 0x80)
    v6 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  else
    v6 = 1;
  v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 8) & 2) != 0)
  {
LABEL_12:
    v7 = (CRDT::Dictionary *)*((_QWORD *)this + 6);
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v7 = *(CRDT::Dictionary **)(CRDT::OrderedSet::default_instance_ + 48);
    }
    v8 = (google::protobuf::io::CodedOutputStream *)CRDT::Dictionary::ByteSize(v7);
    v9 = (int)v8;
    if (v8 >= 0x80)
      v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    else
      v10 = 1;
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v2 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::OrderedSet::CheckTypeAndMergeFrom(CRDT::OrderedSet *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::OrderedSet::MergeFrom(this, lpsrc);
}

uint64_t CRDT::OrderedSet::IsInitialized(CRDT::OrderedSet *this)
{
  return 1;
}

_QWORD *CRDT::OrderedSet::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.OrderedSet");
}

std::string *CRDT::Document_CustomObject_MapEntry::MergeFrom(CRDT::Document_CustomObject_MapEntry *this, const CRDT::Document_CustomObject_MapEntry *a2)
{
  CRDT::Document_CustomObject_MapEntry *v3;
  std::string *v4;
  int v5;
  int v6;
  CRDT::ObjectID *v7;
  uint64_t v8;
  uint64_t v9;
  const CRDT::ObjectID *v10;
  const std::string::value_type *v11;
  char *v12;
  const std::string::value_type *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  char v18;
  std::string v19[2];

  v3 = this;
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 3958);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v3 + 8) |= 1u;
      *((_DWORD *)v3 + 12) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 8) |= 2u;
      v7 = (CRDT::ObjectID *)*((_QWORD *)v3 + 5);
      if (!v7)
      {
        v7 = (CRDT::ObjectID *)operator new();
        this = CRDT::ObjectID::ObjectID(v7, v8, v9);
        *((_QWORD *)v3 + 5) = v7;
      }
      v10 = (const CRDT::ObjectID *)*((_QWORD *)a2 + 5);
      if (!v10)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto(this);
        v10 = *(const CRDT::ObjectID **)(CRDT::Document_CustomObject_MapEntry::default_instance_ + 40);
      }
      CRDT::ObjectID::MergeFrom(v7, v10);
    }
  }
  v13 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
  v12 = (char *)a2 + 8;
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  return std::string::append((std::string *)((char *)v3 + 8), v15, v16);
}

void sub_1B4B4B5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407D90225ELL);
  _Unwind_Resume(a1);
}

void CRDT::Document_CustomObject_MapEntry::~Document_CustomObject_MapEntry(void **this)
{
  void *v2;

  *this = &off_1E67F6780;
  CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)this);
  if ((void **)CRDT::Document_CustomObject_MapEntry::default_instance_ != this)
  {
    v2 = this[5];
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Document_CustomObject_MapEntry::~Document_CustomObject_MapEntry(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t CRDT::Document_CustomObject_MapEntry::default_instance(CRDT::Document_CustomObject_MapEntry *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::Document_CustomObject_MapEntry::default_instance_;
}

double CRDT::Document_CustomObject_MapEntry::New(CRDT::Document_CustomObject_MapEntry *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6780;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 36) = 0u;
  return result;
}

uint64_t CRDT::Document_CustomObject_MapEntry::Clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if ((v2 & 3) != 0)
  {
    *(_DWORD *)(this + 48) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = *(_QWORD *)(this + 40);
      if (v3)
      {
        this = CRDT::ObjectID::clear_contents(*(_QWORD *)(this + 40));
        *(_DWORD *)(v3 + 32) = 0;
        if (*(char *)(v3 + 31) < 0)
        {
          **(_BYTE **)(v3 + 8) = 0;
          *(_QWORD *)(v3 + 16) = 0;
        }
        else
        {
          *(_BYTE *)(v3 + 8) = 0;
          *(_BYTE *)(v3 + 31) = 0;
        }
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Document_CustomObject_MapEntry::MergePartialFromCodedStream(CRDT::Document_CustomObject_MapEntry *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  BOOL v13;
  int v14;
  CRDT::ObjectID *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  _BYTE v27[32];
  _QWORD v28[2];
  unsigned int v29;

  google::protobuf::io::StringOutputStream::StringOutputStream(v28, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27, (google::protobuf::io::ZeroCopyOutputStream *)v28);
  while (1)
  {
    v5 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) == 0)
        break;
    }
    else
    {
      v6 = *v5;
      *((_DWORD *)a2 + 8) = v6;
      *((_QWORD *)a2 + 1) = v5 + 1;
      v7 = v6 | 0x100000000;
    }
    if (v7 >> 3 == 2)
    {
      if ((_DWORD)v7 == 18)
      {
        v14 = *((_DWORD *)this + 8);
        goto LABEL_28;
      }
      goto LABEL_19;
    }
    if (v7 >> 3 != 1)
      break;
    if ((_DWORD)v7 == 8)
    {
      v29 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
          goto LABEL_43;
        v11 = v29;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v11 = *v10;
        v12 = v10 + 1;
        *((_QWORD *)a2 + 1) = v12;
      }
      *((_DWORD *)this + 12) = v11;
      v14 = *((_DWORD *)this + 8) | 1;
      *((_DWORD *)this + 8) = v14;
      if ((unint64_t)v12 < v9 && *v12 == 18)
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_28:
        *((_DWORD *)this + 8) = v14 | 2;
        v15 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
        if (!v15)
        {
          v15 = (CRDT::ObjectID *)operator new();
          CRDT::ObjectID::ObjectID(v15, v16, v17);
          *((_QWORD *)this + 5) = v15;
        }
        v29 = 0;
        v18 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29))
            goto LABEL_43;
        }
        else
        {
          v29 = *v18;
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
        v19 = *((_DWORD *)a2 + 14);
        v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20
          || (v21 = google::protobuf::io::CodedInputStream::PushLimit(a2, v29),
              !CRDT::ObjectID::MergePartialFromCodedStream(v15, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_43:
          v25 = 0;
          goto LABEL_45;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v21);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          v25 = 1;
          *((_BYTE *)a2 + 36) = 1;
          goto LABEL_45;
        }
      }
    }
    else
    {
LABEL_19:
      if (!(_DWORD)v7 || (v7 & 7) == 4)
        goto LABEL_44;
LABEL_16:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v27, v4))goto LABEL_43;
    }
  }
  if ((_DWORD)v7)
    v13 = (v7 & 7) == 4;
  else
    v13 = 1;
  if (!v13)
    goto LABEL_16;
LABEL_44:
  v25 = 1;
LABEL_45:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v27);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v28);
  return v25;
}

void sub_1B4B4BA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C407D90225ELL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Document_CustomObject_MapEntry::SerializeWithCachedSizes(CRDT::Document_CustomObject_MapEntry *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  CRDT::Document_CustomObject_MapEntry *v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v5 = this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    this = (CRDT::Document_CustomObject_MapEntry *)google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 12), a2, a4);
    v6 = *((_DWORD *)v5 + 8);
  }
  if ((v6 & 2) != 0)
  {
    v7 = *((_QWORD *)v5 + 5);
    if (!v7)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v7 = *(_QWORD *)(CRDT::Document_CustomObject_MapEntry::default_instance_ + 40);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(2, v7, a2);
  }
  if (*((char *)v5 + 31) < 0)
  {
    v8 = (char *)*((_QWORD *)v5 + 1);
    v9 = *((_QWORD *)v5 + 2);
  }
  else
  {
    v8 = (char *)v5 + 8;
    LODWORD(v9) = *((unsigned __int8 *)v5 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v8, v9);
}

uint64_t CRDT::Document_CustomObject_MapEntry::ByteSize(CRDT::Document_CustomObject_MapEntry *this)
{
  char v2;
  int v3;
  google::protobuf::io::CodedOutputStream *v4;
  CRDT::ObjectID *v5;
  google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((_BYTE *)this + 32);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_19;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if ((v4 & 0x80000000) != 0)
    {
      v3 = 11;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
    else if (v4 >= 0x80)
    {
      v3 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      if ((*((_DWORD *)this + 8) & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_19;
  }
  v5 = (CRDT::ObjectID *)*((_QWORD *)this + 5);
  if (!v5)
  {
    CRDT::protobuf_AddDesc_crframework_2eproto(0);
    v5 = *(CRDT::ObjectID **)(CRDT::Document_CustomObject_MapEntry::default_instance_ + 40);
  }
  v6 = (google::protobuf::io::CodedOutputStream *)CRDT::ObjectID::ByteSize(v5);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
  else
    v8 = 1;
  v3 += v7 + v8 + 1;
LABEL_19:
  if (*((char *)this + 31) < 0)
    v9 = *((_QWORD *)this + 2);
  else
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
  result = (v3 + v9);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Document_CustomObject_MapEntry::CheckTypeAndMergeFrom(CRDT::Document_CustomObject_MapEntry *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Document_CustomObject_MapEntry::MergeFrom(this, lpsrc);
}

BOOL CRDT::Document_CustomObject_MapEntry::IsInitialized(CRDT::Document_CustomObject_MapEntry *this)
{
  return (~*((_DWORD *)this + 8) & 3) == 0;
}

_QWORD *CRDT::Document_CustomObject_MapEntry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Document.CustomObject.MapEntry");
}

std::string *CRDT::Document_CustomObject::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  __int32 v5;
  const std::string::value_type *v6;
  int32x2_t *v7;
  int32x2_t v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 4184);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>(this + 5, a2 + 5);
  if ((a2[4].i8[0] & 1) != 0)
  {
    v5 = a2[8].i32[0];
    this[4].i32[0] |= 1u;
    this[8].i32[0] = v5;
  }
  v8 = a2[1];
  v7 = a2 + 1;
  v6 = (const std::string::value_type *)v8;
  v9 = v7[2].i8[7];
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = v7[2].u8[7];
  else
    v11 = (std::string::size_type)v7[1];
  return std::string::append((std::string *)&this[1], v10, v11);
}

void sub_1B4B4BCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void CRDT::Document_CustomObject::~Document_CustomObject(CRDT::Document_CustomObject *this)
{
  *(_QWORD *)this = &off_1E67F6618;
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 5);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Document_CustomObject::~Document_CustomObject(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t CRDT::Document_CustomObject::default_instance(CRDT::Document_CustomObject *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::Document_CustomObject::default_instance_;
}

double CRDT::Document_CustomObject::New(CRDT::Document_CustomObject *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F6618;
  *(_DWORD *)(v1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

uint64_t CRDT::Document_CustomObject::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  *(_DWORD *)(this + 64) = 0;
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    **(_BYTE **)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 8) = 0;
    *(_BYTE *)(v1 + 31) = 0;
  }
  return this;
}

uint64_t CRDT::Document_CustomObject::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v9;
  unint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int32x2_t v16;
  uint64_t v17;
  int32x2_t v18;
  int32x2_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE v30[32];
  _QWORD v31[2];
  unsigned int v32;

  google::protobuf::io::StringOutputStream::StringOutputStream(v31, (uint64_t)&this[1]);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30, (google::protobuf::io::ZeroCopyOutputStream *)v31);
  while (1)
  {
    while (1)
    {
      v5 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v5 >= *((_QWORD *)a2 + 2) || *v5 < 1)
      {
        TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_12;
      }
      else
      {
        v6 = *v5;
        *((_DWORD *)a2 + 8) = v6;
        *((_QWORD *)a2 + 1) = v5 + 1;
        v7 = v6 | 0x100000000;
      }
      if (v7 >> 3 == 3)
      {
        if ((_DWORD)v7 == 26)
          goto LABEL_27;
LABEL_19:
        if (!(_DWORD)v7 || (v7 & 7) == 4)
          goto LABEL_48;
        goto LABEL_16;
      }
      if (v7 >> 3 == 1)
        break;
LABEL_12:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
LABEL_48:
        v28 = 1;
        goto LABEL_49;
      }
LABEL_16:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v7, (google::protobuf::io::CodedOutputStream *)v30, v4))goto LABEL_47;
    }
    if ((_DWORD)v7 != 8)
      goto LABEL_19;
    v32 = 0;
    v9 = (char *)*((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v9 >= v10 || *v9 < 0)
    {
      if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
        goto LABEL_47;
      v11 = v32;
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
    }
    else
    {
      v11 = *v9;
      v12 = v9 + 1;
      *((_QWORD *)a2 + 1) = v12;
    }
    this[8].i32[0] = v11;
    this[4].i32[0] |= 1u;
    if ((unint64_t)v12 < v10 && *v12 == 26)
    {
      do
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_27:
        v14 = this[6].i32[1];
        v15 = this[6].i32[0];
        if ((int)v15 >= v14)
        {
          if (v14 == this[7].i32[0])
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[5], v14 + 1);
          v17 = operator new();
          *(_QWORD *)v17 = &off_1E67F6780;
          *(_OWORD *)(v17 + 8) = 0u;
          *(_OWORD *)(v17 + 24) = 0u;
          *(_OWORD *)(v17 + 36) = 0u;
          v18 = this[5];
          v19 = this[6];
          this[6] = vadd_s32(v19, (int32x2_t)0x100000001);
          *(_QWORD *)(*(_QWORD *)&v18 + 8 * v19.i32[0]) = v17;
        }
        else
        {
          v16 = this[5];
          this[6].i32[0] = v15 + 1;
          v17 = *(_QWORD *)(*(_QWORD *)&v16 + 8 * v15);
        }
        v32 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32))
            goto LABEL_47;
        }
        else
        {
          v32 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22
          || (v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v32),
              !CRDT::Document_CustomObject_MapEntry::MergePartialFromCodedStream((CRDT::Document_CustomObject_MapEntry *)v17, a2))|| !*((_BYTE *)a2 + 36))
        {
LABEL_47:
          v28 = 0;
          goto LABEL_49;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
        v24 = *((_DWORD *)a2 + 14);
        v25 = __OFSUB__(v24, 1);
        v26 = v24 - 1;
        if (v26 < 0 == v25)
          *((_DWORD *)a2 + 14) = v26;
        v12 = (_BYTE *)*((_QWORD *)a2 + 1);
        v27 = (_BYTE *)*((_QWORD *)a2 + 2);
      }
      while (v12 < v27 && *v12 == 26);
      if (v12 == v27 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        break;
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  v28 = 1;
  *((_BYTE *)a2 + 36) = 1;
LABEL_49:
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v30);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v31);
  return v28;
}

void sub_1B4B4C158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Document_CustomObject::SerializeWithCachedSizes(CRDT::Document_CustomObject *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  if ((*((_BYTE *)this + 32) & 1) != 0)
    google::protobuf::internal::WireFormatLite::WriteInt32((google::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 16), a2, a4);
  if (*((int *)this + 12) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>((uint64_t)this + 40, v6);
      google::protobuf::internal::WireFormatLite::WriteMessage(3, v7, a2);
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 2);
  }
  else
  {
    v8 = (char *)this + 8;
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v8, v9);
}

uint64_t CRDT::Document_CustomObject::ByteSize(CRDT::Document_CustomObject *this)
{
  int v2;
  google::protobuf::io::CodedOutputStream *v3;
  int v4;
  int v5;
  int v6;
  CRDT::Document_CustomObject_MapEntry *v7;
  google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = (google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
    if ((v3 & 0x80000000) != 0)
    {
      v2 = 11;
    }
    else if (v3 >= 0x80)
    {
      v2 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      v2 = 2;
    }
  }
  else
  {
    v2 = 0;
  }
  v4 = *((_DWORD *)this + 12);
  v5 = v4 + v2;
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (CRDT::Document_CustomObject_MapEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>((uint64_t)this + 40, v6);
      v8 = (google::protobuf::io::CodedOutputStream *)CRDT::Document_CustomObject_MapEntry::ByteSize(v7);
      v9 = (int)v8;
      if (v8 >= 0x80)
        v10 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
      else
        v10 = 1;
      v5 += v9 + v10;
      ++v6;
    }
    while (v6 < *((_DWORD *)this + 12));
  }
  if (*((char *)this + 31) < 0)
    v11 = *((_QWORD *)this + 2);
  else
    LODWORD(v11) = *((unsigned __int8 *)this + 31);
  result = (v5 + v11);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Document_CustomObject::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Document_CustomObject::MergeFrom(this, lpsrc);
}

BOOL CRDT::Document_CustomObject::IsInitialized(CRDT::Document_CustomObject *this)
{
  return google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>>((uint64_t)this + 40);
}

BOOL google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>(a1, v2);
  }
  while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) != 0);
  return v3 < 1;
}

_QWORD *CRDT::Document_CustomObject::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Document.CustomObject");
}

std::string *CRDT::Document_DocObject::MergeFrom(CRDT::Document_DocObject *this, const CRDT::Document_DocObject *a2)
{
  std::string *v4;
  uint64_t v5;
  CRDT::RegisterLatest *v6;
  uint64_t v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  CRDT::Array *v11;
  const CRDT::RegisterLatest **v12;
  int32x2_t **v13;
  CRDT::Timestamp *v14;
  int32x2_t *v15;
  int32x2_t *v16;
  topotext::String *v17;
  uint64_t v18;
  int32x2_t *v19;
  CRDT::OrderedSet *v20;
  uint64_t v21;
  int32x2_t **v22;
  uint64_t v23;
  int32x2_t **v24;
  uint64_t v25;
  const CRDT::Array **v26;
  uint64_t v27;
  const CRDT::Timestamp **v28;
  uint64_t v29;
  int32x2_t **v30;
  uint64_t v31;
  int32x2_t **v32;
  topotext::String *v33;
  int32x2_t *v34;
  uint64_t v35;
  int32x2_t **v36;
  uint64_t v37;
  const CRDT::OrderedSet **v38;
  const std::string::value_type *v39;
  char *v40;
  const std::string::value_type *v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  char v46;
  std::string v47[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v47, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 4864);
    v4 = google::protobuf::internal::LogMessage::operator<<(v47, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v46, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v47[0].__r_.__value_.__l.__data_);
  }
  switch(*((_DWORD *)a2 + 12))
  {
    case 1:
      if (*((_DWORD *)this + 12) == 1)
        goto LABEL_20;
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 1;
      v5 = operator new();
      v6 = (CRDT::RegisterLatest *)v5;
      *(_QWORD *)v5 = &off_1E67F6438;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *((_QWORD *)this + 5) = v5;
      if (*((_DWORD *)a2 + 12) == 1)
        goto LABEL_21;
      goto LABEL_50;
    case 2:
      if (*((_DWORD *)this + 12) == 2)
        goto LABEL_20;
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 2;
      v5 = operator new();
      v6 = (CRDT::RegisterLatest *)v5;
      *(_QWORD *)v5 = &off_1E67F6438;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *((_QWORD *)this + 5) = v5;
      if (*((_DWORD *)a2 + 12) != 2)
        goto LABEL_50;
      goto LABEL_21;
    case 3:
      if (*((_DWORD *)this + 12) == 3)
      {
LABEL_20:
        v6 = (CRDT::RegisterLatest *)*((_QWORD *)this + 5);
LABEL_21:
        v12 = (const CRDT::RegisterLatest **)((char *)a2 + 40);
        goto LABEL_51;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 3;
      v5 = operator new();
      v6 = (CRDT::RegisterLatest *)v5;
      *(_QWORD *)v5 = &off_1E67F6438;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *((_QWORD *)this + 5) = v5;
      if (*((_DWORD *)a2 + 12) == 3)
        goto LABEL_21;
LABEL_50:
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v5);
      v12 = (const CRDT::RegisterLatest **)&CRDT::RegisterLatest::default_instance_;
LABEL_51:
      CRDT::RegisterLatest::MergeFrom(v6, *v12);
      goto LABEL_85;
    case 4:
      if (*((_DWORD *)this + 12) == 4)
        goto LABEL_26;
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 4;
      v7 = operator new();
      v8 = (int32x2_t *)v7;
      *(_QWORD *)v7 = &off_1E67F61E0;
      *(_OWORD *)(v7 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_DWORD *)(v7 + 56) = 0;
      *((_QWORD *)this + 5) = v7;
      if (*((_DWORD *)a2 + 12) != 4)
        goto LABEL_53;
      goto LABEL_27;
    case 5:
      if (*((_DWORD *)this + 12) == 5)
        goto LABEL_26;
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 5;
      v7 = operator new();
      v8 = (int32x2_t *)v7;
      *(_QWORD *)v7 = &off_1E67F61E0;
      *(_OWORD *)(v7 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_DWORD *)(v7 + 56) = 0;
      *((_QWORD *)this + 5) = v7;
      if (*((_DWORD *)a2 + 12) != 5)
        goto LABEL_53;
      goto LABEL_27;
    case 6:
      if (*((_DWORD *)this + 12) == 6)
      {
LABEL_26:
        v8 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_27:
        v13 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_54;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 6;
      v7 = operator new();
      v8 = (int32x2_t *)v7;
      *(_QWORD *)v7 = &off_1E67F61E0;
      *(_OWORD *)(v7 + 8) = 0u;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_DWORD *)(v7 + 56) = 0;
      *((_QWORD *)this + 5) = v7;
      if (*((_DWORD *)a2 + 12) == 6)
        goto LABEL_27;
LABEL_53:
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v7);
      v13 = (int32x2_t **)&CRDT::Dictionary::default_instance_;
LABEL_54:
      CRDT::Dictionary::MergeFrom(v8, *v13);
      goto LABEL_85;
    case 7:
      if (*((_DWORD *)this + 12) == 7)
      {
        v14 = (CRDT::Timestamp *)*((_QWORD *)this + 5);
LABEL_56:
        v28 = (const CRDT::Timestamp **)((char *)a2 + 40);
        goto LABEL_74;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 7;
      v27 = operator new();
      v14 = (CRDT::Timestamp *)v27;
      *(_QWORD *)v27 = &off_1E67F6A50;
      *(_OWORD *)(v27 + 8) = 0u;
      *(_OWORD *)(v27 + 24) = 0u;
      *(_OWORD *)(v27 + 40) = 0u;
      *((_QWORD *)this + 5) = v27;
      if (*((_DWORD *)a2 + 12) == 7)
        goto LABEL_56;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v27);
      v28 = (const CRDT::Timestamp **)&CRDT::Timestamp::default_instance_;
LABEL_74:
      CRDT::Timestamp::MergeFrom(v14, *v28);
      goto LABEL_85;
    case 8:
      if (*((_DWORD *)this + 12) == 8)
      {
        v15 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_58:
        v30 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_76;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 8;
      v29 = operator new();
      v15 = (int32x2_t *)v29;
      *(_QWORD *)v29 = &off_1E67F64B0;
      *(_OWORD *)(v29 + 8) = 0u;
      *(_OWORD *)(v29 + 24) = 0u;
      *(_OWORD *)(v29 + 40) = 0u;
      *(_DWORD *)(v29 + 56) = 0;
      *((_QWORD *)this + 5) = v29;
      if (*((_DWORD *)a2 + 12) == 8)
        goto LABEL_58;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v29);
      v30 = (int32x2_t **)&CRDT::VectorTimestamp::default_instance_;
LABEL_76:
      CRDT::VectorTimestamp::MergeFrom(v15, *v30);
      goto LABEL_85;
    case 9:
      if (*((_DWORD *)this + 12) == 9)
      {
        v16 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_60:
        v32 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_78;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 9;
      v31 = operator new();
      v16 = (int32x2_t *)v31;
      *(_QWORD *)v31 = &off_1E67F6870;
      *(_OWORD *)(v31 + 8) = 0u;
      *(_OWORD *)(v31 + 24) = 0u;
      *(_OWORD *)(v31 + 40) = 0u;
      *(_DWORD *)(v31 + 56) = 0;
      *((_QWORD *)this + 5) = v31;
      if (*((_DWORD *)a2 + 12) == 9)
        goto LABEL_60;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v31);
      v32 = (int32x2_t **)&CRDT::Index::default_instance_;
LABEL_78:
      CRDT::Index::MergeFrom(v16, *v32);
      goto LABEL_85;
    case 0xA:
      if (*((_DWORD *)this + 12) == 10)
      {
        v17 = (topotext::String *)*((_QWORD *)this + 5);
LABEL_62:
        v34 = (int32x2_t *)*((_QWORD *)a2 + 5);
        goto LABEL_84;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 10;
      v17 = (topotext::String *)operator new();
      v33 = (topotext::String *)topotext::String::String(v17);
      *((_QWORD *)this + 5) = v17;
      if (*((_DWORD *)a2 + 12) == 10)
        goto LABEL_62;
      v34 = (int32x2_t *)topotext::String::default_instance(v33);
LABEL_84:
      topotext::String::MergeFrom((int32x2_t *)v17, v34);
      goto LABEL_85;
    case 0xB:
      v18 = *((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) != 11)
      {
        CRDT::Document_DocObject::clear_contents((uint64_t)this);
        *((_DWORD *)this + 12) = 11;
      }
      *((_QWORD *)this + 5) = v18;
      goto LABEL_85;
    case 0xC:
      if (*((_DWORD *)this + 12) == 12)
      {
        v9 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_44:
        v22 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_68;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 12;
      v21 = operator new();
      v9 = (int32x2_t *)v21;
      *(_QWORD *)v21 = &off_1E67F68E8;
      *(_OWORD *)(v21 + 8) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 40) = 0u;
      *(_DWORD *)(v21 + 56) = 0;
      *((_QWORD *)this + 5) = v21;
      if (*((_DWORD *)a2 + 12) == 12)
        goto LABEL_44;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v21);
      v22 = (int32x2_t **)&CRDT::OneOf::default_instance_;
LABEL_68:
      CRDT::OneOf::MergeFrom(v9, *v22);
      goto LABEL_85;
    case 0xD:
      if (*((_DWORD *)this + 12) == 13)
      {
        v10 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_46:
        v24 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_70;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 13;
      v23 = operator new();
      v10 = (int32x2_t *)v23;
      *(_QWORD *)v23 = &off_1E67F6618;
      *(_DWORD *)(v23 + 64) = 0;
      *(_OWORD *)(v23 + 8) = 0u;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_DWORD *)(v23 + 56) = 0;
      *((_QWORD *)this + 5) = v23;
      if (*((_DWORD *)a2 + 12) == 13)
        goto LABEL_46;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v23);
      v24 = (int32x2_t **)&CRDT::Document_CustomObject::default_instance_;
LABEL_70:
      CRDT::Document_CustomObject::MergeFrom(v10, *v24);
      goto LABEL_85;
    case 0xE:
      if (*((_DWORD *)this + 12) == 14)
      {
        v19 = (int32x2_t *)*((_QWORD *)this + 5);
LABEL_64:
        v36 = (int32x2_t **)((char *)a2 + 40);
        goto LABEL_80;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 14;
      v35 = operator new();
      v19 = (int32x2_t *)v35;
      *(_QWORD *)v35 = &off_1E67F62D0;
      *(_OWORD *)(v35 + 8) = 0u;
      *(_OWORD *)(v35 + 24) = 0u;
      *(_OWORD *)(v35 + 40) = 0u;
      *(_OWORD *)(v35 + 52) = 0u;
      *((_QWORD *)this + 5) = v35;
      if (*((_DWORD *)a2 + 12) == 14)
        goto LABEL_64;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v35);
      v36 = (int32x2_t **)&CRDT::StringArray::default_instance_;
LABEL_80:
      CRDT::StringArray::MergeFrom(v19, *v36);
      goto LABEL_85;
    case 0xF:
      if (*((_DWORD *)this + 12) == 15)
      {
        v11 = (CRDT::Array *)*((_QWORD *)this + 5);
LABEL_48:
        v26 = (const CRDT::Array **)((char *)a2 + 40);
        goto LABEL_72;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 15;
      v25 = operator new();
      v11 = (CRDT::Array *)v25;
      *(_QWORD *)v25 = &off_1E67F67F8;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *((_QWORD *)this + 5) = v25;
      if (*((_DWORD *)a2 + 12) == 15)
        goto LABEL_48;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v25);
      v26 = (const CRDT::Array **)&CRDT::Array::default_instance_;
LABEL_72:
      CRDT::Array::MergeFrom(v11, *v26);
      goto LABEL_85;
    case 0x10:
      if (*((_DWORD *)this + 12) == 16)
      {
        v20 = (CRDT::OrderedSet *)*((_QWORD *)this + 5);
LABEL_66:
        v38 = (const CRDT::OrderedSet **)((char *)a2 + 40);
        goto LABEL_82;
      }
      CRDT::Document_DocObject::clear_contents((uint64_t)this);
      *((_DWORD *)this + 12) = 16;
      v37 = operator new();
      v20 = (CRDT::OrderedSet *)v37;
      *(_QWORD *)v37 = &off_1E67F6258;
      *(_OWORD *)(v37 + 8) = 0u;
      *(_OWORD *)(v37 + 24) = 0u;
      *(_OWORD *)(v37 + 40) = 0u;
      *((_QWORD *)this + 5) = v37;
      if (*((_DWORD *)a2 + 12) == 16)
        goto LABEL_66;
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v37);
      v38 = (const CRDT::OrderedSet **)&CRDT::OrderedSet::default_instance_;
LABEL_82:
      CRDT::OrderedSet::MergeFrom(v20, *v38);
LABEL_85:
      v41 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
      v40 = (char *)a2 + 8;
      v39 = v41;
      v42 = v40[23];
      if (v42 >= 0)
        v43 = v40;
      else
        v43 = v39;
      if (v42 >= 0)
        v44 = v40[23];
      else
        v44 = *((_QWORD *)v40 + 1);
      return std::string::append((std::string *)((char *)this + 8), v43, v44);
    default:
      goto LABEL_85;
  }
}

void sub_1B4B4CC64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C406C843DA2);
  _Unwind_Resume(a1);
}

void CRDT::Document_DocObject::~Document_DocObject(CRDT::Document_DocObject *this)
{
  CRDT::Document_DocObject *v1;

  v1 = this;
  *(_QWORD *)this = &off_1E67F65A0;
  if (*((_DWORD *)this + 12))
    this = (CRDT::Document_DocObject *)CRDT::Document_DocObject::clear_contents((uint64_t)this);
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if (*((char *)v1 + 31) < 0)
    operator delete(*((void **)v1 + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
}

{
  CRDT::Document_DocObject::~Document_DocObject(this);
  JUMPOUT(0x1B5E3DB94);
}

uint64_t CRDT::Document_DocObject::clear_contents(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 48))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
      this = *(_QWORD *)(this + 40);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 48) = 0;
  return this;
}

double CRDT::Document_DocObject::New(CRDT::Document_DocObject *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)v1 = &off_1E67F65A0;
  *(_DWORD *)(v1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  return result;
}

uint64_t CRDT::Document_DocObject::Clear(CRDT::Document_DocObject *this)
{
  uint64_t result;

  result = CRDT::Document_DocObject::clear_contents((uint64_t)this);
  *((_DWORD *)this + 8) = 0;
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

uint64_t CRDT::Document_DocObject::MergePartialFromCodedStream(CRDT::Document_DocObject *this, google::protobuf::io::CodedInputStream *a2)
{
  google::protobuf::io::CodedOutputStream *v4;
  uint64_t *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  unsigned int TagFallback;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  char *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  char *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _BYTE *v87;
  topotext::String *v88;
  char *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  _BYTE *v95;
  unint64_t v96;
  char *v97;
  _BYTE *v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  _BYTE *v113;
  uint64_t v114;
  char *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  _BYTE *v121;
  uint64_t v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  uint64_t v130;
  char *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  _BYTE v139[32];
  _QWORD v140[2];
  unsigned int v141;

  google::protobuf::io::StringOutputStream::StringOutputStream(v140, (uint64_t)this + 8);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v139, (google::protobuf::io::ZeroCopyOutputStream *)v140);
  v5 = (uint64_t *)((char *)this + 40);
  while (2)
  {
    while (1)
    {
      v6 = (char *)*((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v6 < v7)
      {
        v8 = *v6;
        if (*v6 >= 1)
        {
          *((_DWORD *)a2 + 8) = v8;
          v9 = (unsigned __int8 *)(v6 + 1);
          goto LABEL_8;
        }
        if ((unint64_t)(v6 + 1) < v7)
        {
          v10 = v6[1];
          if ((v8 & ~v10) >= 0x80)
            break;
        }
      }
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v11 & 0x100000000) != 0)
        goto LABEL_16;
LABEL_9:
      if ((_DWORD)v11)
        v12 = (v11 & 7) == 4;
      else
        v12 = 1;
      if (v12)
      {
LABEL_286:
        v137 = 1;
        goto LABEL_287;
      }
LABEL_52:
      if (!google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v11, (google::protobuf::io::CodedOutputStream *)v139, v4))goto LABEL_285;
    }
    v8 = (v8 + (v10 << 7) - 128);
    *((_DWORD *)a2 + 8) = v8;
    v9 = (unsigned __int8 *)(v6 + 2);
LABEL_8:
    *((_QWORD *)a2 + 1) = v9;
    v11 = v8 | 0x100000000;
LABEL_16:
    switch(v11 >> 3)
    {
      case 1u:
        if ((_DWORD)v11 != 10)
          goto LABEL_50;
        if (*((_DWORD *)this + 12) == 1)
        {
          v14 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 1;
          v14 = operator new();
          *(_QWORD *)v14 = &off_1E67F6438;
          *(_OWORD *)(v14 + 8) = 0u;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 40) = 0u;
          *v5 = v14;
        }
        v141 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18)
          goto LABEL_285;
        v19 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::RegisterLatest::MergePartialFromCodedStream((CRDT::RegisterLatest *)v14, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v19);
        v20 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v20, 1);
        v22 = v20 - 1;
        if (v22 < 0 == v21)
          *((_DWORD *)a2 + 14) = v22;
        v23 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
LABEL_67:
        if (*((_DWORD *)this + 12) == 2)
        {
          v24 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 2;
          v24 = operator new();
          *(_QWORD *)v24 = &off_1E67F6438;
          *(_OWORD *)(v24 + 8) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *v5 = v24;
        }
        v141 = 0;
        v25 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v25 >= *((_QWORD *)a2 + 2) || *v25 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v25;
          *((_QWORD *)a2 + 1) = v25 + 1;
        }
        v26 = *((_DWORD *)a2 + 14);
        v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 >= v27)
          goto LABEL_285;
        v28 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::RegisterLatest::MergePartialFromCodedStream((CRDT::RegisterLatest *)v24, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v28);
        v29 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v29, 1);
        v30 = v29 - 1;
        if (v30 < 0 == v21)
          *((_DWORD *)a2 + 14) = v30;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 26)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_82:
        if (*((_DWORD *)this + 12) == 3)
        {
          v32 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 3;
          v32 = operator new();
          *(_QWORD *)v32 = &off_1E67F6438;
          *(_OWORD *)(v32 + 8) = 0u;
          *(_OWORD *)(v32 + 24) = 0u;
          *(_OWORD *)(v32 + 40) = 0u;
          *v5 = v32;
        }
        v141 = 0;
        v33 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v33;
          *((_QWORD *)a2 + 1) = v33 + 1;
        }
        v34 = *((_DWORD *)a2 + 14);
        v35 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v34 + 1;
        if (v34 >= v35)
          goto LABEL_285;
        v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::RegisterLatest::MergePartialFromCodedStream((CRDT::RegisterLatest *)v32, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v36);
        v37 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v21)
          *((_DWORD *)a2 + 14) = v38;
        v39 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v39 >= *((_QWORD *)a2 + 2) || *v39 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v39 + 1;
LABEL_97:
        if (*((_DWORD *)this + 12) == 4)
        {
          v40 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 4;
          v40 = operator new();
          *(_QWORD *)v40 = &off_1E67F61E0;
          *(_OWORD *)(v40 + 8) = 0u;
          *(_OWORD *)(v40 + 24) = 0u;
          *(_OWORD *)(v40 + 40) = 0u;
          *(_DWORD *)(v40 + 56) = 0;
          *v5 = v40;
        }
        v141 = 0;
        v41 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v41 >= *((_QWORD *)a2 + 2) || *v41 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v41;
          *((_QWORD *)a2 + 1) = v41 + 1;
        }
        v42 = *((_DWORD *)a2 + 14);
        v43 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v42 + 1;
        if (v42 >= v43)
          goto LABEL_285;
        v44 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Dictionary::MergePartialFromCodedStream((int32x2_t *)v40, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v44);
        v45 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v45, 1);
        v46 = v45 - 1;
        if (v46 < 0 == v21)
          *((_DWORD *)a2 + 14) = v46;
        v47 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v47 >= *((_QWORD *)a2 + 2) || *v47 != 42)
          continue;
        *((_QWORD *)a2 + 1) = v47 + 1;
LABEL_112:
        if (*((_DWORD *)this + 12) == 5)
        {
          v48 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 5;
          v48 = operator new();
          *(_QWORD *)v48 = &off_1E67F61E0;
          *(_OWORD *)(v48 + 8) = 0u;
          *(_OWORD *)(v48 + 24) = 0u;
          *(_OWORD *)(v48 + 40) = 0u;
          *(_DWORD *)(v48 + 56) = 0;
          *v5 = v48;
        }
        v141 = 0;
        v49 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v49;
          *((_QWORD *)a2 + 1) = v49 + 1;
        }
        v50 = *((_DWORD *)a2 + 14);
        v51 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v50 + 1;
        if (v50 >= v51)
          goto LABEL_285;
        v52 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Dictionary::MergePartialFromCodedStream((int32x2_t *)v48, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v52);
        v53 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v53, 1);
        v54 = v53 - 1;
        if (v54 < 0 == v21)
          *((_DWORD *)a2 + 14) = v54;
        v55 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v55 >= *((_QWORD *)a2 + 2) || *v55 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v55 + 1;
LABEL_127:
        if (*((_DWORD *)this + 12) == 6)
        {
          v56 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 6;
          v56 = operator new();
          *(_QWORD *)v56 = &off_1E67F61E0;
          *(_OWORD *)(v56 + 8) = 0u;
          *(_OWORD *)(v56 + 24) = 0u;
          *(_OWORD *)(v56 + 40) = 0u;
          *(_DWORD *)(v56 + 56) = 0;
          *v5 = v56;
        }
        v141 = 0;
        v57 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v57 >= *((_QWORD *)a2 + 2) || *v57 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v57;
          *((_QWORD *)a2 + 1) = v57 + 1;
        }
        v58 = *((_DWORD *)a2 + 14);
        v59 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v58 + 1;
        if (v58 >= v59)
          goto LABEL_285;
        v60 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Dictionary::MergePartialFromCodedStream((int32x2_t *)v56, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v60);
        v61 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v61, 1);
        v62 = v61 - 1;
        if (v62 < 0 == v21)
          *((_DWORD *)a2 + 14) = v62;
        v63 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v63 >= *((_QWORD *)a2 + 2) || *v63 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v63 + 1;
LABEL_142:
        if (*((_DWORD *)this + 12) == 7)
        {
          v64 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 7;
          v64 = operator new();
          *(_QWORD *)v64 = &off_1E67F6A50;
          *(_OWORD *)(v64 + 8) = 0u;
          *(_OWORD *)(v64 + 24) = 0u;
          *(_OWORD *)(v64 + 40) = 0u;
          *v5 = v64;
        }
        v141 = 0;
        v65 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v65 >= *((_QWORD *)a2 + 2) || *v65 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v65;
          *((_QWORD *)a2 + 1) = v65 + 1;
        }
        v66 = *((_DWORD *)a2 + 14);
        v67 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v66 + 1;
        if (v66 >= v67)
          goto LABEL_285;
        v68 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Timestamp::MergePartialFromCodedStream((CRDT::Timestamp *)v64, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v68);
        v69 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v69, 1);
        v70 = v69 - 1;
        if (v70 < 0 == v21)
          *((_DWORD *)a2 + 14) = v70;
        v71 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v71 >= *((_QWORD *)a2 + 2) || *v71 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v71 + 1;
LABEL_157:
        if (*((_DWORD *)this + 12) == 8)
        {
          v72 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 8;
          v72 = operator new();
          *(_QWORD *)v72 = &off_1E67F64B0;
          *(_OWORD *)(v72 + 8) = 0u;
          *(_OWORD *)(v72 + 24) = 0u;
          *(_OWORD *)(v72 + 40) = 0u;
          *(_DWORD *)(v72 + 56) = 0;
          *v5 = v72;
        }
        v141 = 0;
        v73 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v73 >= *((_QWORD *)a2 + 2) || *v73 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v73;
          *((_QWORD *)a2 + 1) = v73 + 1;
        }
        v74 = *((_DWORD *)a2 + 14);
        v75 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v74 + 1;
        if (v74 >= v75)
          goto LABEL_285;
        v76 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v72, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v76);
        v77 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v77, 1);
        v78 = v77 - 1;
        if (v78 < 0 == v21)
          *((_DWORD *)a2 + 14) = v78;
        v79 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v79 >= *((_QWORD *)a2 + 2) || *v79 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v79 + 1;
LABEL_172:
        if (*((_DWORD *)this + 12) == 9)
        {
          v80 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 9;
          v80 = operator new();
          *(_QWORD *)v80 = &off_1E67F6870;
          *(_OWORD *)(v80 + 8) = 0u;
          *(_OWORD *)(v80 + 24) = 0u;
          *(_OWORD *)(v80 + 40) = 0u;
          *(_DWORD *)(v80 + 56) = 0;
          *v5 = v80;
        }
        v141 = 0;
        v81 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v81 >= *((_QWORD *)a2 + 2) || *v81 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v81;
          *((_QWORD *)a2 + 1) = v81 + 1;
        }
        v82 = *((_DWORD *)a2 + 14);
        v83 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v82 + 1;
        if (v82 >= v83)
          goto LABEL_285;
        v84 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Index::MergePartialFromCodedStream((int32x2_t *)v80, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v84);
        v85 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v85, 1);
        v86 = v85 - 1;
        if (v86 < 0 == v21)
          *((_DWORD *)a2 + 14) = v86;
        v87 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v87 >= *((_QWORD *)a2 + 2) || *v87 != 82)
          continue;
        *((_QWORD *)a2 + 1) = v87 + 1;
LABEL_187:
        if (*((_DWORD *)this + 12) == 10)
        {
          v88 = (topotext::String *)*v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 10;
          v88 = (topotext::String *)operator new();
          topotext::String::String(v88);
          *v5 = (uint64_t)v88;
        }
        v141 = 0;
        v89 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v89 >= *((_QWORD *)a2 + 2) || *v89 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v89;
          *((_QWORD *)a2 + 1) = v89 + 1;
        }
        v90 = *((_DWORD *)a2 + 14);
        v91 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v90 + 1;
        if (v90 >= v91)
          goto LABEL_285;
        v92 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!topotext::String::MergePartialFromCodedStream((int32x2_t *)v88, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v92);
        v93 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v93, 1);
        v94 = v93 - 1;
        if (v94 < 0 == v21)
          *((_DWORD *)a2 + 14) = v94;
        v95 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v95 >= *((_QWORD *)a2 + 2) || *v95 != 88)
          continue;
        *((_QWORD *)a2 + 1) = v95 + 1;
LABEL_202:
        CRDT::Document_DocObject::clear_contents((uint64_t)this);
        v97 = (char *)*((_QWORD *)a2 + 1);
        v96 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v97 >= v96 || *v97 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)this + 5))goto LABEL_285;
          v98 = (_BYTE *)*((_QWORD *)a2 + 1);
          v96 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v5 = *v97;
          v98 = v97 + 1;
          *((_QWORD *)a2 + 1) = v98;
        }
        *((_DWORD *)this + 12) = 11;
        if ((unint64_t)v98 >= v96 || *v98 != 98)
          continue;
        *((_QWORD *)a2 + 1) = v98 + 1;
LABEL_210:
        CRDT::Document_DocObject::clear_contents((uint64_t)this);
        *((_DWORD *)this + 12) = 12;
        v15 = operator new();
        *(_QWORD *)v15 = &off_1E67F68E8;
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_DWORD *)(v15 + 56) = 0;
        *v5 = v15;
LABEL_211:
        v141 = 0;
        v99 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v99 >= *((_QWORD *)a2 + 2) || *v99 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v99;
          *((_QWORD *)a2 + 1) = v99 + 1;
        }
        v100 = *((_DWORD *)a2 + 14);
        v101 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v100 + 1;
        if (v100 >= v101)
          goto LABEL_285;
        v102 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::OneOf::MergePartialFromCodedStream((int32x2_t *)v15, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v102);
        v103 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v103, 1);
        v104 = v103 - 1;
        if (v104 < 0 == v21)
          *((_DWORD *)a2 + 14) = v104;
        v105 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v105 >= *((_QWORD *)a2 + 2) || *v105 != 106)
          continue;
        *((_QWORD *)a2 + 1) = v105 + 1;
LABEL_223:
        if (*((_DWORD *)this + 12) == 13)
        {
          v106 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 13;
          v106 = operator new();
          *(_QWORD *)v106 = &off_1E67F6618;
          *(_DWORD *)(v106 + 64) = 0;
          *(_OWORD *)(v106 + 8) = 0u;
          *(_OWORD *)(v106 + 24) = 0u;
          *(_OWORD *)(v106 + 40) = 0u;
          *(_DWORD *)(v106 + 56) = 0;
          *v5 = v106;
        }
        v141 = 0;
        v107 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v107 >= *((_QWORD *)a2 + 2) || *v107 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v107;
          *((_QWORD *)a2 + 1) = v107 + 1;
        }
        v108 = *((_DWORD *)a2 + 14);
        v109 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v108 + 1;
        if (v108 >= v109)
          goto LABEL_285;
        v110 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Document_CustomObject::MergePartialFromCodedStream((int32x2_t *)v106, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v110);
        v111 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v111, 1);
        v112 = v111 - 1;
        if (v112 < 0 == v21)
          *((_DWORD *)a2 + 14) = v112;
        v113 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v113 >= *((_QWORD *)a2 + 2) || *v113 != 114)
          continue;
        *((_QWORD *)a2 + 1) = v113 + 1;
LABEL_238:
        if (*((_DWORD *)this + 12) == 14)
        {
          v114 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 14;
          v114 = operator new();
          *(_QWORD *)v114 = &off_1E67F62D0;
          *(_OWORD *)(v114 + 8) = 0u;
          *(_OWORD *)(v114 + 24) = 0u;
          *(_OWORD *)(v114 + 40) = 0u;
          *(_OWORD *)(v114 + 52) = 0u;
          *v5 = v114;
        }
        v141 = 0;
        v115 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v115 >= *((_QWORD *)a2 + 2) || *v115 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v115;
          *((_QWORD *)a2 + 1) = v115 + 1;
        }
        v116 = *((_DWORD *)a2 + 14);
        v117 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v116 + 1;
        if (v116 >= v117)
          goto LABEL_285;
        v118 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::StringArray::MergePartialFromCodedStream((int32x2_t *)v114, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_285;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v118);
        v119 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v119, 1);
        v120 = v119 - 1;
        if (v120 < 0 == v21)
          *((_DWORD *)a2 + 14) = v120;
        v121 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v121 >= *((_QWORD *)a2 + 2) || *v121 != 122)
          continue;
        *((_QWORD *)a2 + 1) = v121 + 1;
LABEL_253:
        if (*((_DWORD *)this + 12) == 15)
        {
          v122 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 15;
          v122 = operator new();
          *(_QWORD *)v122 = &off_1E67F67F8;
          *(_OWORD *)(v122 + 8) = 0u;
          *(_OWORD *)(v122 + 24) = 0u;
          *(_OWORD *)(v122 + 40) = 0u;
          *v5 = v122;
        }
        v141 = 0;
        v123 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v123 >= *((_QWORD *)a2 + 2) || *v123 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v123;
          *((_QWORD *)a2 + 1) = v123 + 1;
        }
        v124 = *((_DWORD *)a2 + 14);
        v125 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v124 + 1;
        if (v124 >= v125)
          goto LABEL_285;
        v126 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141);
        if (!CRDT::Array::MergePartialFromCodedStream((CRDT::Array *)v122, a2) || !*((_BYTE *)a2 + 36))
          goto LABEL_285;
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v126);
        v127 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v127, 1);
        v128 = v127 - 1;
        if (v128 < 0 == v21)
          *((_DWORD *)a2 + 14) = v128;
        v129 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v129 <= 1 || *v129 != 130 || v129[1] != 1)
          continue;
        *((_QWORD *)a2 + 1) = v129 + 2;
LABEL_269:
        if (*((_DWORD *)this + 12) == 16)
        {
          v130 = *v5;
        }
        else
        {
          CRDT::Document_DocObject::clear_contents((uint64_t)this);
          *((_DWORD *)this + 12) = 16;
          v130 = operator new();
          *(_QWORD *)v130 = &off_1E67F6258;
          *(_OWORD *)(v130 + 8) = 0u;
          *(_OWORD *)(v130 + 24) = 0u;
          *(_OWORD *)(v130 + 40) = 0u;
          *v5 = v130;
        }
        v141 = 0;
        v131 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v131 >= *((_QWORD *)a2 + 2) || *v131 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v141))
            goto LABEL_285;
        }
        else
        {
          v141 = *v131;
          *((_QWORD *)a2 + 1) = v131 + 1;
        }
        v132 = *((_DWORD *)a2 + 14);
        v133 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v132 + 1;
        if (v132 >= v133
          || (v134 = google::protobuf::io::CodedInputStream::PushLimit(a2, v141),
              !CRDT::OrderedSet::MergePartialFromCodedStream((CRDT::OrderedSet *)v130, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_285:
          v137 = 0;
          goto LABEL_287;
        }
        google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v134);
        v135 = *((_DWORD *)a2 + 14);
        v21 = __OFSUB__(v135, 1);
        v136 = v135 - 1;
        if (v136 < 0 == v21)
          *((_DWORD *)a2 + 14) = v136;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v137 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_287:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v139);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v140);
        return v137;
      case 2u:
        if ((_DWORD)v11 == 18)
          goto LABEL_67;
        goto LABEL_50;
      case 3u:
        if ((_DWORD)v11 == 26)
          goto LABEL_82;
        goto LABEL_50;
      case 4u:
        if ((_DWORD)v11 == 34)
          goto LABEL_97;
        goto LABEL_50;
      case 5u:
        if ((_DWORD)v11 == 42)
          goto LABEL_112;
        goto LABEL_50;
      case 6u:
        if ((_DWORD)v11 == 50)
          goto LABEL_127;
        goto LABEL_50;
      case 7u:
        if ((_DWORD)v11 == 58)
          goto LABEL_142;
        goto LABEL_50;
      case 8u:
        if ((_DWORD)v11 == 66)
          goto LABEL_157;
        goto LABEL_50;
      case 9u:
        if ((_DWORD)v11 == 74)
          goto LABEL_172;
        goto LABEL_50;
      case 0xAu:
        if ((_DWORD)v11 == 82)
          goto LABEL_187;
        goto LABEL_50;
      case 0xBu:
        if ((_DWORD)v11 == 88)
          goto LABEL_202;
        goto LABEL_50;
      case 0xCu:
        if ((_DWORD)v11 != 98)
          goto LABEL_50;
        if (*((_DWORD *)this + 12) != 12)
          goto LABEL_210;
        v15 = *v5;
        goto LABEL_211;
      case 0xDu:
        if ((_DWORD)v11 == 106)
          goto LABEL_223;
        goto LABEL_50;
      case 0xEu:
        if ((_DWORD)v11 == 114)
          goto LABEL_238;
        goto LABEL_50;
      case 0xFu:
        if ((_DWORD)v11 == 122)
          goto LABEL_253;
        goto LABEL_50;
      case 0x10u:
        if ((_DWORD)v11 == 130)
          goto LABEL_269;
LABEL_50:
        if ((_DWORD)v11 && (v11 & 7) != 4)
          goto LABEL_52;
        goto LABEL_286;
      default:
        goto LABEL_9;
    }
  }
}

void sub_1B4B4E0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x10B3C406C843DA2);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Document_DocObject::SerializeWithCachedSizes(CRDT::Document_DocObject *this, google::protobuf::io::CodedOutputStream *a2, uint64_t a3, google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  char *v7;
  uint64_t v8;

  v6 = *((_DWORD *)this + 12);
  if (v6 == 1)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(1, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 2)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(2, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 3)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(3, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 4)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(4, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 5)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(5, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 6)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(6, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 7)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(7, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 8)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(8, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 9)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(9, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 10)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(10, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 11)
  {
    google::protobuf::internal::WireFormatLite::WriteInt64((google::protobuf::internal::WireFormatLite *)0xB, *((_QWORD *)this + 5), a2, a4);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 12)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(12, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 13)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(13, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 14)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(14, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 15)
  {
    google::protobuf::internal::WireFormatLite::WriteMessage(15, *((_QWORD *)this + 5), a2);
    v6 = *((_DWORD *)this + 12);
  }
  if (v6 == 16)
    google::protobuf::internal::WireFormatLite::WriteMessage(16, *((_QWORD *)this + 5), a2);
  if (*((char *)this + 31) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
  }
  else
  {
    v7 = (char *)this + 8;
    LODWORD(v8) = *((unsigned __int8 *)this + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v7, v8);
}

uint64_t CRDT::Document_DocObject::ByteSize(CRDT::RegisterLatest **this)
{
  google::protobuf::io::CodedOutputStream *v2;
  google::protobuf::io::CodedOutputStream *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  CRDT::RegisterLatest *v9;
  uint64_t result;

  switch(*((_DWORD *)this + 12))
  {
    case 1:
    case 2:
    case 3:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::RegisterLatest::ByteSize(this[5]);
      goto LABEL_16;
    case 4:
    case 5:
    case 6:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::Dictionary::ByteSize(this[5]);
      goto LABEL_16;
    case 7:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::Timestamp::ByteSize(this[5]);
      goto LABEL_16;
    case 8:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::VectorTimestamp::ByteSize(this[5]);
      goto LABEL_16;
    case 9:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::Index::ByteSize(this[5]);
      goto LABEL_16;
    case 0xA:
      v2 = (google::protobuf::io::CodedOutputStream *)topotext::String::ByteSize(this[5]);
      goto LABEL_16;
    case 0xB:
      v6 = google::protobuf::io::CodedOutputStream::VarintSize64((unint64_t)this[5]) + 1;
      break;
    case 0xC:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::OneOf::ByteSize(this[5]);
      goto LABEL_16;
    case 0xD:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::Document_CustomObject::ByteSize(this[5]);
      goto LABEL_16;
    case 0xE:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::StringArray::ByteSize(this[5]);
      goto LABEL_16;
    case 0xF:
      v2 = (google::protobuf::io::CodedOutputStream *)CRDT::Array::ByteSize(this[5]);
LABEL_16:
      v7 = (int)v2;
      if (v2 >= 0x80)
        v8 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v2);
      else
        v8 = 1;
      v6 = v7 + v8 + 1;
      break;
    case 0x10:
      v3 = (google::protobuf::io::CodedOutputStream *)CRDT::OrderedSet::ByteSize(this[5]);
      v4 = (int)v3;
      if (v3 >= 0x80)
        v5 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3);
      else
        v5 = 1;
      v6 = v4 + v5 + 2;
      break;
    default:
      v6 = 0;
      break;
  }
  if (*((char *)this + 31) < 0)
    v9 = this[2];
  else
    LODWORD(v9) = *((unsigned __int8 *)this + 31);
  result = (v6 + (_DWORD)v9);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Document_DocObject::CheckTypeAndMergeFrom(CRDT::Document_DocObject *this, const google::protobuf::MessageLite *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Document_DocObject::MergeFrom(this, lpsrc);
}

uint64_t CRDT::Document_DocObject::IsInitialized(CRDT::Document_DocObject *this)
{
  uint64_t result;

  if (*((_DWORD *)this + 12) != 13)
    return 1;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  if ((_DWORD)result)
    return 1;
  return result;
}

_QWORD *CRDT::Document_DocObject::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Document.DocObject");
}

CRDT::Document *CRDT::Document::Document(CRDT::Document *this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)this = &off_1E67F6960;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 36) = 0;
  CRDT::Document::SharedCtor(this, a2, a3);
  return this;
}

void sub_1B4B4E560(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  int *v3;
  int *v4;
  int *v5;
  void **v6;
  int *v7;

  v7 = v3;
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v7);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v5);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v4);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v6);
  TTBoundedCheckedCastNSUIntegerToUInt32(v1);
  _Unwind_Resume(a1);
}

void CRDT::Document::SharedCtor(CRDT::Document *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  v4 = google::protobuf::internal::empty_string_once_init_;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v5[0] = &off_1E67F6B80;
    v5[1] = google::protobuf::internal::InitEmptyString;
    v6 = 0;
    google::protobuf::GoogleOnceInitImpl((unint64_t *)&google::protobuf::internal::empty_string_once_init_, (uint64_t)v5);
    google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)v5);
  }
  if (!google::protobuf::internal::empty_string_)
    versioned_document::Version::SharedCtor((uint64_t)this, a2, a3);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
}

void sub_1B4B4E648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  google::protobuf::internal::FunctionClosure0::~FunctionClosure0((google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

std::string *CRDT::Document::MergeFrom(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  uint64_t v5;
  __int32 v6;
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  topotext::VectorTimestamp *v11;
  int32x2_t *v12;
  const std::string::value_type *v13;
  int32x2_t *v14;
  int32x2_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/crframework.pb.cc", 5327);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>(this + 7, a2 + 7);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 10, a2 + 10);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 13, a2 + 13);
  v5 = (uint64_t)google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(this + 16, a2 + 16);
  LOBYTE(v6) = a2[4].i8[0];
  if ((_BYTE)v6)
  {
    if ((a2[4].i8[0] & 1) != 0)
    {
      this[4].i32[0] |= 1u;
      v7 = (int32x2_t *)this[5];
      if (!v7)
      {
        v5 = operator new();
        v7 = (int32x2_t *)v5;
        *(_QWORD *)v5 = &off_1E67F64B0;
        *(_OWORD *)(v5 + 8) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_DWORD *)(v5 + 56) = 0;
        this[5] = (int32x2_t)v5;
      }
      v8 = (int32x2_t *)a2[5];
      if (!v8)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v5);
        v8 = *(int32x2_t **)(CRDT::Document::default_instance_ + 40);
      }
      v5 = (uint64_t)CRDT::VectorTimestamp::MergeFrom(v7, v8);
      v6 = a2[4].i32[0];
      if ((v6 & 2) == 0)
      {
LABEL_6:
        if ((v6 & 0x40) == 0)
          goto LABEL_23;
        goto LABEL_18;
      }
    }
    else if ((a2[4].i8[0] & 2) == 0)
    {
      goto LABEL_6;
    }
    this[4].i32[0] |= 2u;
    v9 = (int32x2_t *)this[6];
    if (!v9)
    {
      v5 = operator new();
      v9 = (int32x2_t *)v5;
      *(_QWORD *)v5 = &off_1E67F64B0;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_DWORD *)(v5 + 56) = 0;
      this[6] = (int32x2_t)v5;
    }
    v10 = (int32x2_t *)a2[6];
    if (!v10)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v5);
      v10 = *(int32x2_t **)(CRDT::Document::default_instance_ + 48);
    }
    v5 = (uint64_t)CRDT::VectorTimestamp::MergeFrom(v9, v10);
    if ((a2[4].i32[0] & 0x40) != 0)
    {
LABEL_18:
      this[4].i32[0] |= 0x40u;
      v11 = (topotext::VectorTimestamp *)this[19];
      if (!v11)
      {
        v11 = (topotext::VectorTimestamp *)operator new();
        topotext::VectorTimestamp::VectorTimestamp(v11);
        this[19] = (int32x2_t)v11;
      }
      v12 = (int32x2_t *)a2[19];
      if (!v12)
      {
        CRDT::protobuf_AddDesc_crframework_2eproto((CRDT *)v5);
        v12 = *(int32x2_t **)(CRDT::Document::default_instance_ + 152);
      }
      topotext::VectorTimestamp::MergeFrom((int32x2_t *)v11, v12);
    }
  }
LABEL_23:
  v15 = a2[1];
  v14 = a2 + 1;
  v13 = (const std::string::value_type *)v15;
  v16 = v14[2].i8[7];
  if (v16 >= 0)
    v17 = (const std::string::value_type *)v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = v14[2].u8[7];
  else
    v18 = (std::string::size_type)v14[1];
  return std::string::append((std::string *)&this[1], v17, v18);
}

void sub_1B4B4E88C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x1093C4020A6E6BFLL);
  _Unwind_Resume(a1);
}

void CRDT::Document::~Document(CRDT::Document *this)
{
  *(_QWORD *)this = &off_1E67F6960;
  CRDT::Document::SharedDtor(this);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 32);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 26);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 20);
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<replica_manager::VectorTimestampElement>::TypeHandler>((uint64_t *)this + 7);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  TTBoundedCheckedCastNSUIntegerToUInt32(this);
}

{
  CRDT::Document::~Document(this);
  JUMPOUT(0x1B5E3DB94);
}

void CRDT::Document::SharedDtor(CRDT::Document *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  if ((CRDT::Document *)CRDT::Document::default_instance_ != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 6);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)this + 19);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

uint64_t CRDT::Document::default_instance(CRDT::Document *this)
{
  CRDT::protobuf_AddDesc_crframework_2eproto(this);
  return CRDT::Document::default_instance_;
}

CRDT::Document *CRDT::Document::New(CRDT::Document *this)
{
  CRDT::Document *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (CRDT::Document *)operator new();
  CRDT::Document::Document(v1, v2, v3);
  return v1;
}

void sub_1B4B4EA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C408ACEAB29);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Document::Clear(CRDT::Document *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_DWORD *)this + 8);
  if ((v2 & 0x43) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 5);
      if (v3)
      {
        CRDT::VectorTimestamp::Clear(v3);
        v2 = *((_DWORD *)this + 8);
      }
    }
    if ((v2 & 2) != 0)
    {
      v4 = *((_QWORD *)this + 6);
      if (v4)
      {
        CRDT::VectorTimestamp::Clear(v4);
        v2 = *((_DWORD *)this + 8);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      v5 = *((_QWORD *)this + 19);
      if (v5)
        topotext::VectorTimestamp::Clear(v5);
    }
  }
  if (*((int *)this + 16) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v6);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *((int *)this + 16));
  }
  *((_DWORD *)this + 16) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104);
  result = google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128);
  *((_DWORD *)this + 8) = 0;
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

uint64_t CRDT::Document::MergePartialFromCodedStream(int32x2_t *this, google::protobuf::io::CodedInputStream *a2)
{
  unint64_t TagFallback;
  google::protobuf::io::CodedOutputStream *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  int32x2_t v29;
  uint64_t v30;
  int32x2_t v31;
  int32x2_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int32x2_t v42;
  std::string *v43;
  int32x2_t v44;
  int32x2_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int32x2_t v49;
  std::string *v50;
  int32x2_t v51;
  int32x2_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int32x2_t v56;
  std::string *v57;
  int32x2_t v58;
  int32x2_t v59;
  int v60;
  topotext::VectorTimestamp *v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  _BYTE v70[32];
  _QWORD v71[2];
  unsigned int v72;

  google::protobuf::io::StringOutputStream::StringOutputStream(v71, (uint64_t)&this[1]);
  TagFallback = (unint64_t)google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v70, (google::protobuf::io::ZeroCopyOutputStream *)v71);
LABEL_2:
  while (2)
  {
    while (1)
    {
      v6 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v6 < *((_QWORD *)a2 + 2) && (char)*v6 >= 1)
        break;
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      v8 = TagFallback | ((unint64_t)((TagFallback - 1) < 0x7F) << 32);
      if ((v8 & 0x100000000) != 0)
        goto LABEL_6;
LABEL_13:
      if ((_DWORD)v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
LABEL_121:
        v68 = 1;
        goto LABEL_122;
      }
LABEL_32:
      TagFallback = google::protobuf::internal::WireFormatLite::SkipField(a2, (google::protobuf::io::CodedInputStream *)v8, (google::protobuf::io::CodedOutputStream *)v70, v5);
      if ((TagFallback & 1) == 0)
        goto LABEL_120;
    }
    v7 = *v6;
    *((_DWORD *)a2 + 8) = v7;
    *((_QWORD *)a2 + 1) = v6 + 1;
    v8 = v7 | 0x100000000;
LABEL_6:
    switch(v8 >> 3)
    {
      case 1u:
        if ((_DWORD)v8 != 10)
          goto LABEL_30;
        this[4].i32[0] |= 1u;
        v9 = (uint64_t)this[5];
        if (!v9)
        {
          v9 = operator new();
          *(_QWORD *)v9 = &off_1E67F64B0;
          *(_OWORD *)(v9 + 8) = 0u;
          *(_OWORD *)(v9 + 24) = 0u;
          *(_OWORD *)(v9 + 40) = 0u;
          *(_DWORD *)(v9 + 56) = 0;
          this[5] = (int32x2_t)v9;
        }
        v72 = 0;
        v10 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v72))
            goto LABEL_120;
        }
        else
        {
          v72 = *v10;
          *((_QWORD *)a2 + 1) = v10 + 1;
        }
        v12 = *((_DWORD *)a2 + 14);
        v13 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v12 + 1;
        if (v12 >= v13)
          goto LABEL_120;
        v14 = google::protobuf::io::CodedInputStream::PushLimit(a2, v72);
        if (!CRDT::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v9, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_120;
        }
        TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v14);
        v15 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v15, 1);
        v17 = v15 - 1;
        if (v17 < 0 == v16)
          *((_DWORD *)a2 + 14) = v17;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v18 >= *((_QWORD *)a2 + 2) || *v18 != 18)
          continue;
        *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_43:
        this[4].i32[0] |= 2u;
        v19 = (uint64_t)this[6];
        if (!v19)
        {
          v19 = operator new();
          *(_QWORD *)v19 = &off_1E67F64B0;
          *(_OWORD *)(v19 + 8) = 0u;
          *(_OWORD *)(v19 + 24) = 0u;
          *(_OWORD *)(v19 + 40) = 0u;
          *(_DWORD *)(v19 + 56) = 0;
          this[6] = (int32x2_t)v19;
        }
        v72 = 0;
        v20 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v72))
            goto LABEL_120;
        }
        else
        {
          v72 = *v20;
          *((_QWORD *)a2 + 1) = v20 + 1;
        }
        v21 = *((_DWORD *)a2 + 14);
        v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22)
          goto LABEL_120;
        v23 = google::protobuf::io::CodedInputStream::PushLimit(a2, v72);
        if (!CRDT::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v19, a2)
          || !*((_BYTE *)a2 + 36))
        {
          goto LABEL_120;
        }
        TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
        v24 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v24, 1);
        v25 = v24 - 1;
        if (v25 < 0 == v16)
          *((_DWORD *)a2 + 14) = v25;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 != 26)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_57:
          v27 = this[8].i32[1];
          v28 = this[8].i32[0];
          if ((int)v28 >= v27)
          {
            if (v27 == this[9].i32[0])
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[7], v27 + 1);
            v30 = operator new();
            *(_QWORD *)v30 = &off_1E67F65A0;
            *(_DWORD *)(v30 + 48) = 0;
            *(_OWORD *)(v30 + 8) = 0u;
            *(_OWORD *)(v30 + 24) = 0u;
            v31 = this[7];
            v32 = this[8];
            this[8] = vadd_s32(v32, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v31 + 8 * v32.i32[0]) = v30;
          }
          else
          {
            v29 = this[7];
            this[8].i32[0] = v28 + 1;
            v30 = *(_QWORD *)(*(_QWORD *)&v29 + 8 * v28);
          }
          v72 = 0;
          v33 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
          {
            if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v72))
              goto LABEL_120;
          }
          else
          {
            v72 = *v33;
            *((_QWORD *)a2 + 1) = v33 + 1;
          }
          v34 = *((_DWORD *)a2 + 14);
          v35 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v34 + 1;
          if (v34 >= v35)
            goto LABEL_120;
          v36 = google::protobuf::io::CodedInputStream::PushLimit(a2, v72);
          if (!CRDT::Document_DocObject::MergePartialFromCodedStream((CRDT::Document_DocObject *)v30, a2)
            || !*((_BYTE *)a2 + 36))
          {
            goto LABEL_120;
          }
          TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v36);
          v37 = *((_DWORD *)a2 + 14);
          v16 = __OFSUB__(v37, 1);
          v38 = v37 - 1;
          if (v38 < 0 == v16)
            *((_DWORD *)a2 + 14) = v38;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v26 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v39 = *v26;
        }
        while (v39 == 26);
        if (v39 != 34)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_75:
          v40 = this[11].i32[1];
          v41 = this[11].i32[0];
          if ((int)v41 >= v40)
          {
            if (v40 == this[12].i32[0])
              TagFallback = (unint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[10], v40 + 1);
            v43 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v44 = this[10];
            v45 = this[11];
            this[11] = vadd_s32(v45, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v44 + 8 * v45.i32[0]) = v43;
          }
          else
          {
            v42 = this[10];
            this[11].i32[0] = v41 + 1;
            v43 = *(std::string **)(*(_QWORD *)&v42 + 8 * v41);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v43);
          if (!(_DWORD)TagFallback)
            goto LABEL_120;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v26 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v46 = *v26;
        }
        while (v46 == 34);
        if (v46 != 42)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_85:
          v47 = this[14].i32[1];
          v48 = this[14].i32[0];
          if ((int)v48 >= v47)
          {
            if (v47 == this[15].i32[0])
              TagFallback = (unint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[13], v47 + 1);
            v50 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v51 = this[13];
            v52 = this[14];
            this[14] = vadd_s32(v52, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v51 + 8 * v52.i32[0]) = v50;
          }
          else
          {
            v49 = this[13];
            this[14].i32[0] = v48 + 1;
            v50 = *(std::string **)(*(_QWORD *)&v49 + 8 * v48);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v50);
          if (!(_DWORD)TagFallback)
            goto LABEL_120;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v26 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v53 = *v26;
        }
        while (v53 == 42);
        if (v53 != 50)
          continue;
        do
        {
          *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_95:
          v54 = this[17].i32[1];
          v55 = this[17].i32[0];
          if ((int)v55 >= v54)
          {
            if (v54 == this[18].i32[0])
              TagFallback = (unint64_t)google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&this[16], v54 + 1);
            v57 = (std::string *)google::protobuf::internal::StringTypeHandlerBase::New((google::protobuf::internal::StringTypeHandlerBase *)TagFallback);
            v58 = this[16];
            v59 = this[17];
            this[17] = vadd_s32(v59, (int32x2_t)0x100000001);
            *(_QWORD *)(*(_QWORD *)&v58 + 8 * v59.i32[0]) = v57;
          }
          else
          {
            v56 = this[16];
            this[17].i32[0] = v55 + 1;
            v57 = *(std::string **)(*(_QWORD *)&v56 + 8 * v55);
          }
          TagFallback = google::protobuf::internal::WireFormatLite::ReadString(a2, v57);
          if (!(_DWORD)TagFallback)
            goto LABEL_120;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v26 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v60 = *v26;
        }
        while (v60 == 50);
        if (v60 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_105:
        this[4].i32[0] |= 0x40u;
        v61 = (topotext::VectorTimestamp *)this[19];
        if (!v61)
        {
          v61 = (topotext::VectorTimestamp *)operator new();
          topotext::VectorTimestamp::VectorTimestamp(v61);
          this[19] = (int32x2_t)v61;
        }
        v72 = 0;
        v62 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v62 >= *((_QWORD *)a2 + 2) || *v62 < 0)
        {
          if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v72))
            goto LABEL_120;
        }
        else
        {
          v72 = *v62;
          *((_QWORD *)a2 + 1) = v62 + 1;
        }
        v63 = *((_DWORD *)a2 + 14);
        v64 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v63 + 1;
        if (v63 >= v64
          || (v65 = google::protobuf::io::CodedInputStream::PushLimit(a2, v72),
              !topotext::VectorTimestamp::MergePartialFromCodedStream((int32x2_t *)v61, a2))
          || !*((_BYTE *)a2 + 36))
        {
LABEL_120:
          v68 = 0;
          goto LABEL_122;
        }
        TagFallback = google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v65);
        v66 = *((_DWORD *)a2 + 14);
        v16 = __OFSUB__(v66, 1);
        v67 = v66 - 1;
        if (v67 < 0 == v16)
          *((_DWORD *)a2 + 14) = v67;
        if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        v68 = 1;
        *((_BYTE *)a2 + 36) = 1;
LABEL_122:
        google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)v70);
        google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)v71);
        return v68;
      case 2u:
        if ((_DWORD)v8 == 18)
          goto LABEL_43;
        goto LABEL_30;
      case 3u:
        if ((_DWORD)v8 == 26)
          goto LABEL_57;
        goto LABEL_30;
      case 4u:
        if ((_DWORD)v8 == 34)
          goto LABEL_75;
        goto LABEL_30;
      case 5u:
        if ((_DWORD)v8 == 42)
          goto LABEL_85;
        goto LABEL_30;
      case 6u:
        if ((_DWORD)v8 == 50)
          goto LABEL_95;
        goto LABEL_30;
      case 7u:
        if ((_DWORD)v8 == 58)
          goto LABEL_105;
LABEL_30:
        if ((_DWORD)v8 && (v8 & 7) != 4)
          goto LABEL_32;
        goto LABEL_121;
      default:
        goto LABEL_13;
    }
  }
}

void sub_1B4B4F2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E3DB94](v2, 0x1093C4020A6E6BFLL);
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::StringOutputStream::~StringOutputStream((google::protobuf::io::StringOutputStream *)va1);
  _Unwind_Resume(a1);
}

uint64_t CRDT::Document::SerializeWithCachedSizes(CRDT::Document *this, google::protobuf::io::CodedOutputStream *a2)
{
  CRDT::Document *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = this;
  v4 = *((_DWORD *)this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (!v5)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v5 = *(_QWORD *)(CRDT::Document::default_instance_ + 40);
    }
    this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteMessage(1, v5, a2);
    v4 = *((_DWORD *)v3 + 8);
  }
  if ((v4 & 2) != 0)
  {
    v6 = *((_QWORD *)v3 + 6);
    if (!v6)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v6 = *(_QWORD *)(CRDT::Document::default_instance_ + 48);
    }
    this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteMessage(2, v6, a2);
  }
  if (*((int *)v3 + 16) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>((uint64_t)v3 + 56, v7);
      this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteMessage(3, v8, a2);
      ++v7;
    }
    while (v7 < *((_DWORD *)v3 + 16));
  }
  if (*((int *)v3 + 22) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v3 + 80, v9);
      this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteString(4, v10, a2);
      ++v9;
    }
    while (v9 < *((_DWORD *)v3 + 22));
  }
  if (*((int *)v3 + 28) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v3 + 104, v11);
      this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteString(5, v12, a2);
      ++v11;
    }
    while (v11 < *((_DWORD *)v3 + 28));
  }
  if (*((int *)v3 + 34) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v3 + 128, v13);
      this = (CRDT::Document *)google::protobuf::internal::WireFormatLite::WriteBytes(6, v14, a2);
      ++v13;
    }
    while (v13 < *((_DWORD *)v3 + 34));
  }
  if ((*((_BYTE *)v3 + 32) & 0x40) != 0)
  {
    v15 = *((_QWORD *)v3 + 19);
    if (!v15)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(this);
      v15 = *(_QWORD *)(CRDT::Document::default_instance_ + 152);
    }
    google::protobuf::internal::WireFormatLite::WriteMessage(7, v15, a2);
  }
  if (*((char *)v3 + 31) < 0)
  {
    v16 = (char *)*((_QWORD *)v3 + 1);
    v17 = *((_QWORD *)v3 + 2);
  }
  else
  {
    v16 = (char *)v3 + 8;
    LODWORD(v17) = *((unsigned __int8 *)v3 + 31);
  }
  return google::protobuf::io::CodedOutputStream::WriteRaw(a2, v16, v17);
}

uint64_t CRDT::Document::ByteSize(CRDT::Document *this)
{
  int v2;
  int v3;
  CRDT::VectorTimestamp *v4;
  google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  CRDT::VectorTimestamp *v8;
  google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  topotext::VectorTimestamp *v12;
  google::protobuf::io::CodedOutputStream *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  CRDT::RegisterLatest **v19;
  google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t result;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_25;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v4 = (CRDT::VectorTimestamp *)*((_QWORD *)this + 5);
    if (!v4)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v4 = *(CRDT::VectorTimestamp **)(CRDT::Document::default_instance_ + 40);
    }
    v5 = (google::protobuf::io::CodedOutputStream *)CRDT::VectorTimestamp::ByteSize(v4);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
    else
      v7 = 1;
    v3 = v6 + v7 + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
LABEL_12:
    v8 = (CRDT::VectorTimestamp *)*((_QWORD *)this + 6);
    if (!v8)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v8 = *(CRDT::VectorTimestamp **)(CRDT::Document::default_instance_ + 48);
    }
    v9 = (google::protobuf::io::CodedOutputStream *)CRDT::VectorTimestamp::ByteSize(v8);
    v10 = (int)v9;
    if (v9 >= 0x80)
      v11 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    else
      v11 = 1;
    v3 += v10 + v11 + 1;
    v2 = *((_DWORD *)this + 8);
  }
LABEL_18:
  if ((v2 & 0x40) != 0)
  {
    v12 = (topotext::VectorTimestamp *)*((_QWORD *)this + 19);
    if (!v12)
    {
      CRDT::protobuf_AddDesc_crframework_2eproto(0);
      v12 = *(topotext::VectorTimestamp **)(CRDT::Document::default_instance_ + 152);
    }
    v13 = (google::protobuf::io::CodedOutputStream *)topotext::VectorTimestamp::ByteSize(v12);
    v14 = (int)v13;
    if (v13 >= 0x80)
      v15 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    else
      v15 = 1;
    v3 += v14 + v15 + 1;
  }
LABEL_25:
  v16 = *((_DWORD *)this + 16);
  v17 = v16 + v3;
  if (v16 >= 1)
  {
    v18 = 0;
    do
    {
      v19 = (CRDT::RegisterLatest **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>((uint64_t)this + 56, v18);
      v20 = (google::protobuf::io::CodedOutputStream *)CRDT::Document_DocObject::ByteSize(v19);
      v21 = (int)v20;
      if (v20 >= 0x80)
        v22 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
      else
        v22 = 1;
      v17 += v21 + v22;
      ++v18;
    }
    while (v18 < *((_DWORD *)this + 16));
  }
  v23 = *((_DWORD *)this + 22);
  v24 = v23 + v17;
  if (v23 >= 1)
  {
    v25 = 0;
    do
    {
      v26 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, v25);
      v27 = *(unsigned __int8 *)(v26 + 23);
      v28 = v27;
      v29 = *(_QWORD *)(v26 + 8);
      if ((v27 & 0x80u) == 0)
        v30 = *(unsigned __int8 *)(v26 + 23);
      else
        v30 = v29;
      if (v30 >= 0x80)
      {
        v31 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v30);
        v27 = *(unsigned __int8 *)(v26 + 23);
        v29 = *(_QWORD *)(v26 + 8);
        v28 = *(_BYTE *)(v26 + 23);
      }
      else
      {
        v31 = 1;
      }
      if (v28 < 0)
        v27 = v29;
      v24 += v31 + v27;
      ++v25;
    }
    while (v25 < *((_DWORD *)this + 22));
  }
  v32 = *((_DWORD *)this + 28);
  v33 = v32 + v24;
  if (v32 >= 1)
  {
    v34 = 0;
    do
    {
      v35 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, v34);
      v36 = *(unsigned __int8 *)(v35 + 23);
      v37 = v36;
      v38 = *(_QWORD *)(v35 + 8);
      if ((v36 & 0x80u) == 0)
        v39 = *(unsigned __int8 *)(v35 + 23);
      else
        v39 = v38;
      if (v39 >= 0x80)
      {
        v40 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v39);
        v36 = *(unsigned __int8 *)(v35 + 23);
        v38 = *(_QWORD *)(v35 + 8);
        v37 = *(_BYTE *)(v35 + 23);
      }
      else
      {
        v40 = 1;
      }
      if (v37 < 0)
        v36 = v38;
      v33 += v40 + v36;
      ++v34;
    }
    while (v34 < *((_DWORD *)this + 28));
  }
  v41 = *((_DWORD *)this + 34);
  v42 = v41 + v33;
  if (v41 >= 1)
  {
    v43 = 0;
    do
    {
      v44 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, v43);
      v45 = *(unsigned __int8 *)(v44 + 23);
      v46 = v45;
      v47 = *(_QWORD *)(v44 + 8);
      if ((v45 & 0x80u) == 0)
        v48 = *(unsigned __int8 *)(v44 + 23);
      else
        v48 = v47;
      if (v48 >= 0x80)
      {
        v49 = google::protobuf::io::CodedOutputStream::VarintSize32Fallback((google::protobuf::io::CodedOutputStream *)v48);
        v45 = *(unsigned __int8 *)(v44 + 23);
        v47 = *(_QWORD *)(v44 + 8);
        v46 = *(_BYTE *)(v44 + 23);
      }
      else
      {
        v49 = 1;
      }
      if (v46 < 0)
        v45 = v47;
      v42 += v49 + v45;
      ++v43;
    }
    while (v43 < *((_DWORD *)this + 34));
  }
  if (*((char *)this + 31) < 0)
    v50 = *((_QWORD *)this + 2);
  else
    LODWORD(v50) = *((unsigned __int8 *)this + 31);
  result = (v42 + v50);
  *((_DWORD *)this + 9) = result;
  return result;
}

std::string *CRDT::Document::CheckTypeAndMergeFrom(int32x2_t *this, int32x2_t *lpsrc)
{
  uint64_t v4;
  uint64_t v5;

  return CRDT::Document::MergeFrom(this, lpsrc);
}

BOOL CRDT::Document::IsInitialized(CRDT::Document *this)
{
  return google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>>((uint64_t)this + 56);
}

BOOL google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>(a1, v2);
  }
  while (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5) & 1) != 0);
  return v3 < 1;
}

_QWORD *CRDT::Document::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CRDT.Document");
}

uint64_t CRDT::ObjectID::GetCachedSize(CRDT::ObjectID *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Timestamp::GetCachedSize(CRDT::Timestamp *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::RegisterLatest::GetCachedSize(CRDT::RegisterLatest *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::VectorTimestamp_Element::GetCachedSize(CRDT::VectorTimestamp_Element *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::VectorTimestamp::GetCachedSize(CRDT::VectorTimestamp *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Dictionary_Element::GetCachedSize(CRDT::Dictionary_Element *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Dictionary::GetCachedSize(CRDT::Dictionary *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Index_Element::GetCachedSize(CRDT::Index_Element *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Index::GetCachedSize(CRDT::Index *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::OneOf_Element::GetCachedSize(CRDT::OneOf_Element *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::OneOf::GetCachedSize(CRDT::OneOf *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::StringArray_ArrayAttachment::GetCachedSize(CRDT::StringArray_ArrayAttachment *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::StringArray::GetCachedSize(CRDT::StringArray *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Array::GetCachedSize(CRDT::Array *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::OrderedSet::GetCachedSize(CRDT::OrderedSet *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Document_CustomObject_MapEntry::GetCachedSize(CRDT::Document_CustomObject_MapEntry *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Document_CustomObject::GetCachedSize(CRDT::Document_CustomObject *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Document_DocObject::GetCachedSize(CRDT::Document_DocObject *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t CRDT::Document::GetCachedSize(CRDT::Document *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B4FA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B4FAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B4FBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B4FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4FCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E3DB94](v1, 0x10B3C407823AACFLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 885);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 886);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (size()): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (google::protobuf::internal::LogMessage *)v5);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * a2);
}

void sub_1B4B4FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4FEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B4B4FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::VectorTimestamp_Element *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::VectorTimestamp_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::VectorTimestamp_Element>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6690;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_QWORD *)(v11 + 56) = 0;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::VectorTimestamp_Element::MergeFrom((CRDT::VectorTimestamp_Element *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B50104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::Dictionary_Element *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::Dictionary_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Dictionary_Element>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6528;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::Dictionary_Element::MergeFrom((CRDT::Dictionary_Element *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B5027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::Index_Element *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::Index_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Index_Element>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6348;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::Index_Element::MergeFrom((CRDT::Index_Element *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B503F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::OneOf_Element *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::OneOf_Element *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::OneOf_Element>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F63C0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::OneOf_Element::MergeFrom((CRDT::OneOf_Element *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B50564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  uint64_t v7;
  const CRDT::StringArray_ArrayAttachment *v8;
  int v9;
  uint64_t v10;
  int32x2_t v11;
  CRDT::StringArray_ArrayAttachment *v12;
  int32x2_t v13;
  int32x2_t v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v8 = (const CRDT::StringArray_ArrayAttachment *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::StringArray_ArrayAttachment>::TypeHandler>((uint64_t)a2, v6);
      v9 = this[1].i32[1];
      v10 = this[1].i32[0];
      if ((int)v10 >= v9)
      {
        if (v9 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v9 + 1);
        v12 = google::protobuf::internal::GenericTypeHandler<CRDT::StringArray_ArrayAttachment>::New();
        v13 = *this;
        v14 = this[1];
        this[1] = vadd_s32(v14, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v13 + 8 * v14.i32[0]) = v12;
      }
      else
      {
        v11 = *this;
        this[1].i32[0] = v10 + 1;
        v12 = *(CRDT::StringArray_ArrayAttachment **)(*(_QWORD *)&v11 + 8 * v10);
      }
      result = CRDT::StringArray_ArrayAttachment::MergeFrom(v12, v8, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B506A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::Document_CustomObject_MapEntry *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::Document_CustomObject_MapEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_CustomObject_MapEntry>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F6780;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 36) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::Document_CustomObject_MapEntry::MergeFrom((CRDT::Document_CustomObject_MapEntry *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B50814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>(int32x2_t *this, int32x2_t *a2)
{
  std::string *v4;
  void *result;
  int v6;
  const CRDT::Document_DocObject *v7;
  int v8;
  uint64_t v9;
  int32x2_t v10;
  uint64_t v11;
  int32x2_t v12;
  int32x2_t v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/repeated_field.h", 927);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (google::protobuf::internal::LogMessage *)v4);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  result = google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, a2[1].i32[0] + this[1].i32[0]);
  if (a2[1].i32[0] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const CRDT::Document_DocObject *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<CRDT::Document_DocObject>::TypeHandler>((uint64_t)a2, v6);
      v8 = this[1].i32[1];
      v9 = this[1].i32[0];
      if ((int)v9 >= v8)
      {
        if (v8 == this[2].i32[0])
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this, v8 + 1);
        v11 = operator new();
        *(_QWORD *)v11 = &off_1E67F65A0;
        *(_DWORD *)(v11 + 48) = 0;
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        v12 = *this;
        v13 = this[1];
        this[1] = vadd_s32(v13, (int32x2_t)0x100000001);
        *(_QWORD *)(*(_QWORD *)&v12 + 8 * v13.i32[0]) = v11;
      }
      else
      {
        v10 = *this;
        this[1].i32[0] = v9 + 1;
        v11 = *(_QWORD *)(*(_QWORD *)&v10 + 8 * v9);
      }
      result = CRDT::Document_DocObject::MergeFrom((CRDT::Document_DocObject *)v11, v7);
      ++v6;
    }
    while (v6 < a2[1].i32[0]);
  }
  return result;
}

void sub_1B4B50988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::DeleteEmptyString(google::protobuf::internal *this)
{
  if (google::protobuf::internal::empty_string_)
  {
    if (*(char *)(google::protobuf::internal::empty_string_ + 23) < 0)
      operator delete(*(void **)google::protobuf::internal::empty_string_);
    JUMPOUT(0x1B5E3DB94);
  }
}

void google::protobuf::internal::InitEmptyString(google::protobuf::internal *this)
{
  _QWORD *v1;
  void (*v2)(void);

  v1 = (_QWORD *)operator new();
  v1[1] = 0;
  v1[2] = 0;
  *v1 = 0;
  google::protobuf::internal::empty_string_ = (uint64_t)v1;
  google::protobuf::internal::OnShutdown((google::protobuf::internal *)google::protobuf::internal::DeleteEmptyString, v2);
}

BOOL google::protobuf::internal::WireFormatLite::SkipField(google::protobuf::internal::WireFormatLite *this, google::protobuf::io::CodedInputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  _BOOL8 LittleEndian64Fallback;
  unsigned int v6;
  char *v8;
  char *v9;
  google::protobuf::io::CodedOutputStream *v10;
  google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  std::string *p_p;
  int v18;
  std::string __p;
  std::string::size_type __n;

  LittleEndian64Fallback = 0;
  v6 = a2;
  switch(a2 & 7)
  {
    case 0:
      __p.__r_.__value_.__r.__words[0] = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, (unint64_t *)&__p))
          goto LABEL_30;
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, v6);
      google::protobuf::io::CodedOutputStream::WriteVarint64((uint64_t)a3, __p.__r_.__value_.__r.__words[0]);
      LittleEndian64Fallback = 1;
      break;
    case 1:
      __p.__r_.__value_.__r.__words[0] = 0;
      LittleEndian64Fallback = google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)&__p);
      if (LittleEndian64Fallback)
      {
        google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, v6);
        google::protobuf::io::CodedOutputStream::WriteLittleEndian64((uint64_t)a3, (uint64_t)__p.__r_.__value_.__l.__data_);
      }
      break;
    case 2:
      LODWORD(__n) = 0;
      v9 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 < 0)
      {
        if (!google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, (unsigned int *)&__n))
          goto LABEL_30;
      }
      else
      {
        LODWORD(__n) = *v9;
        *((_QWORD *)this + 1) = v9 + 1;
      }
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, v6);
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, __n);
      memset(&__p, 0, sizeof(__p));
      LittleEndian64Fallback = google::protobuf::io::CodedInputStream::ReadString((uint64_t)this, &__p, __n);
      if (LittleEndian64Fallback)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v18 = __p.__r_.__value_.__r.__words[1];
        google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)p_p, v18);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    case 3:
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, a2);
      v12 = *((_DWORD *)this + 14);
      v13 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v12 + 1;
      if (v12 < v13 && google::protobuf::internal::WireFormatLite::SkipMessage(this, a3, v10, v11))
      {
        v14 = *((_DWORD *)this + 14);
        v15 = __OFSUB__(v14, 1);
        v16 = v14 - 1;
        if (v16 < 0 == v15)
          *((_DWORD *)this + 14) = v16;
        LittleEndian64Fallback = *((_DWORD *)this + 8) == (v6 & 0xFFFFFFF8 | 4);
      }
      else
      {
LABEL_30:
        LittleEndian64Fallback = 0;
      }
      break;
    case 5:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      LittleEndian64Fallback = google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, (unsigned int *)&__p);
      if (LittleEndian64Fallback)
      {
        google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, v6);
        google::protobuf::io::CodedOutputStream::WriteLittleEndian32((uint64_t)a3, (int)__p.__r_.__value_.__l.__data_);
      }
      break;
    default:
      return LittleEndian64Fallback;
  }
  return LittleEndian64Fallback;
}

void sub_1B4B50C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL google::protobuf::internal::WireFormatLite::SkipMessage(google::protobuf::internal::WireFormatLite *this, google::protobuf::io::CodedInputStream *a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  char *v6;
  unint64_t TagFallback;
  _BOOL8 v8;

  do
  {
    v6 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v6 >= *((_QWORD *)this + 2) || *v6 < 0)
    {
      TagFallback = google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((_QWORD *)this + 1) = v6 + 1;
    }
    v8 = (_DWORD)TagFallback == 0;
    if (!(_DWORD)TagFallback)
      break;
    if ((TagFallback & 7) == 4)
    {
      google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a2, TagFallback);
      return 1;
    }
  }
  while ((google::protobuf::internal::WireFormatLite::SkipField(this, (google::protobuf::io::CodedInputStream *)TagFallback, a2, a4) & 1) != 0);
  return v8;
}

uint64_t google::protobuf::internal::WireFormatLite::WriteInt32(google::protobuf::internal::WireFormatLite *this, signed int a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, 8 * (_DWORD)this);
  if (a2 < 0)
    return google::protobuf::io::CodedOutputStream::WriteVarint64((uint64_t)a3, a2);
  else
    return google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, a2);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteInt64(google::protobuf::internal::WireFormatLite *this, unint64_t a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, 8 * (_DWORD)this);
  return google::protobuf::io::CodedOutputStream::WriteVarint64((uint64_t)a3, a2);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteUInt32(google::protobuf::internal::WireFormatLite *this, unsigned int a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, 8 * (_DWORD)this);
  return google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, a2);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteSInt64(google::protobuf::internal::WireFormatLite *this, uint64_t a2, google::protobuf::io::CodedOutputStream *a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a3, 8 * (_DWORD)this);
  return google::protobuf::io::CodedOutputStream::WriteVarint64((uint64_t)a3, (2 * a2) ^ (a2 >> 63));
}

uint64_t google::protobuf::internal::WireFormatLite::WriteFloat(google::protobuf::internal::WireFormatLite *this, google::protobuf::io::CodedOutputStream *a2, float a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a2, (8 * (_DWORD)this) | 5);
  return google::protobuf::io::CodedOutputStream::WriteLittleEndian32((uint64_t)a2, SLODWORD(a3));
}

uint64_t google::protobuf::internal::WireFormatLite::WriteDouble(google::protobuf::internal::WireFormatLite *this, google::protobuf::io::CodedOutputStream *a2, double a3, google::protobuf::io::CodedOutputStream *a4)
{
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)a2, (8 * (_DWORD)this) | 1);
  return google::protobuf::io::CodedOutputStream::WriteLittleEndian64((uint64_t)a2, *(uint64_t *)&a3);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteString(int a1, uint64_t a2, google::protobuf::io::CodedOutputStream *this)
{
  int v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  char *v9;
  int v10;
  char v12;
  std::string v13[2];

  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, (8 * a1) | 2);
  v5 = *(char *)(a2 + 23);
  if (v5 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/wire_format_lite.cc", 377);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: value.size() <= kint32max: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    LOBYTE(v5) = *(_BYTE *)(a2 + 23);
  }
  if ((v5 & 0x80u) == 0)
    v7 = v5;
  else
    v7 = *(_DWORD *)(a2 + 8);
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, v7);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_DWORD *)(a2 + 8);
  return google::protobuf::io::CodedOutputStream::WriteRaw(this, v9, v10);
}

void sub_1B4B50F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(int a1, uint64_t a2, google::protobuf::io::CodedOutputStream *this)
{
  int v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  char *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, (8 * a1) | 2);
  v5 = *(char *)(a2 + 23);
  if (v5 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/wire_format_lite.cc", 386);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: value.size() <= kint32max: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    LOBYTE(v5) = *(_BYTE *)(a2 + 23);
  }
  if ((v5 & 0x80u) == 0)
    v7 = v5;
  else
    v7 = *(_DWORD *)(a2 + 8);
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, v7);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(unsigned int *)(a2 + 8);
  if (*((_BYTE *)this + 25))
    return google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v9, v10);
  else
    return google::protobuf::io::CodedOutputStream::WriteRaw(this, v9, v10);
}

void sub_1B4B5104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteBytes(int a1, uint64_t a2, google::protobuf::io::CodedOutputStream *this)
{
  int v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  char *v9;
  int v10;
  char v12;
  std::string v13[2];

  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, (8 * a1) | 2);
  v5 = *(char *)(a2 + 23);
  if (v5 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/wire_format_lite.cc", 393);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: value.size() <= kint32max: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    LOBYTE(v5) = *(_BYTE *)(a2 + 23);
  }
  if ((v5 & 0x80u) == 0)
    v7 = v5;
  else
    v7 = *(_DWORD *)(a2 + 8);
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, v7);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_DWORD *)(a2 + 8);
  return google::protobuf::io::CodedOutputStream::WriteRaw(this, v9, v10);
}

void sub_1B4B51130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(int a1, uint64_t a2, google::protobuf::io::CodedOutputStream *this)
{
  int v5;
  std::string *v6;
  unsigned int v7;
  int v8;
  char *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, (8 * a1) | 2);
  v5 = *(char *)(a2 + 23);
  if (v5 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ReminderKit/CRProtobuf/protobuf-lite/google/protobuf/wire_format_lite.cc", 401);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: value.size() <= kint32max: ");
    google::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (google::protobuf::internal::LogMessage *)v6);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    LOBYTE(v5) = *(_BYTE *)(a2 + 23);
  }
  if ((v5 & 0x80u) == 0)
    v7 = v5;
  else
    v7 = *(_DWORD *)(a2 + 8);
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, v7);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (char *)a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(unsigned int *)(a2 + 8);
  if (*((_BYTE *)this + 25))
    return google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v9, v10);
  else
    return google::protobuf::io::CodedOutputStream::WriteRaw(this, v9, v10);
}

void sub_1B4B51228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::WireFormatLite::WriteMessage(int a1, uint64_t a2, google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5;

  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, (8 * a1) | 2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  google::protobuf::io::CodedOutputStream::WriteVarint32((uint64_t)this, v5);
  return (*(uint64_t (**)(uint64_t, google::protobuf::io::CodedOutputStream *))(*(_QWORD *)a2 + 80))(a2, this);
}

BOOL google::protobuf::internal::WireFormatLite::ReadString(google::protobuf::io::CodedInputStream *this, std::string *a2)
{
  unint64_t v4;
  char *v5;
  std::string::size_type v6;
  unsigned __int8 *v7;
  int v8;
  _BOOL8 result;
  unsigned int v10;

  v10 = 0;
  v5 = (char *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 < v4 && (*v5 & 0x80000000) == 0)
  {
    v6 = *v5;
    v10 = *v5;
    v7 = (unsigned __int8 *)(v5 + 1);
    *((_QWORD *)this + 1) = v7;
    goto LABEL_7;
  }
  v8 = google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v10);
  result = 0;
  if (v8)
  {
    v6 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
LABEL_7:
      if ((int)v6 > (int)v4 - (int)v7)
        return google::protobuf::io::CodedInputStream::ReadStringFallback(this, a2, v6);
      std::string::resize(a2, v6, 0);
      if (!(_DWORD)v6)
        return 1;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!a2->__r_.__value_.__l.__size_)
        {
LABEL_15:
          a2 = 0;
          goto LABEL_16;
        }
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
      {
        goto LABEL_15;
      }
LABEL_16:
      memcpy(a2, *((const void **)this + 1), v6);
      *((_QWORD *)this + 1) += v6;
      return 1;
    }
  }
  return result;
}

void REMWeekdayFromICSWeekday_cold_1(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_1B4A39000, a2, OS_LOG_TYPE_ERROR, "Encountered an unknown ICSWeekday: %d", (uint8_t *)v2, 8u);
}

void REMCheckedDynamicCast_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = 138412546;
  v6 = objc_opt_class();
  v7 = 2112;
  v8 = a2;
  _os_log_fault_impl(&dword_1B4A39000, a3, OS_LOG_TYPE_FAULT, "rem_log_fault_if (src != nil && result == nil) -- Unexpected object type in checked dynamic cast %@ expects %@", (uint8_t *)&v5, 0x16u);
}

void REMCheckedProtocolCast_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl(&dword_1B4A39000, a2, OS_LOG_TYPE_FAULT, "rem_log_fault_if (!protocol) -- Protocol is nil {src: %@}", (uint8_t *)&v2, 0xCu);
}

void NSStringFromREMAccountType_cold_1(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_1B4A39000, v2, v3, "Unknown account type, cannot convert to string {%@}.", v4, v5, v6, v7, v8);

  OUTLINED_FUNCTION_2_2();
}

void NSStringFromREMAccountType_cold_2()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_1B4A39000, v1, v2, "Invalid unknown account type, cannot convert to string {%@}.", v3, v4, v5, v6, v7);

  OUTLINED_FUNCTION_2_2();
}

void REMInternalDescriptionFromREMAccountType_cold_2()
{
  os_log_t v0;
  uint8_t v1[16];

  OUTLINED_FUNCTION_11();
  _os_log_error_impl(&dword_1B4A39000, v0, OS_LOG_TYPE_ERROR, "Account type should not be REMAccountTypeCount", v1, 2u);
  OUTLINED_FUNCTION_7();
}

uint64_t __getUMUserManagerClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getUMUserPersonaAttributesClass_block_invoke_cold_1(v0);
}

uint64_t __getUMUserPersonaAttributesClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return +[REMBaseSectionStorage cdEntityName].cold.1(v0);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t CEMGetSharedEmojiCharacterSet()
{
  return MEMORY[0x1E0D15DB8]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x1E0D15DC8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995E8](userNotification, responseFlags, timeout);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

uint64_t EKSymbolicColorToRGBMapping()
{
  return MEMORY[0x1E0D0C208]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

CFStringRef UTTypeCopyPreferredTagWithClass(CFStringRef inUTI, CFStringRef inTagClass)
{
  return (CFStringRef)MEMORY[0x1E0CA5970](inUTI, inTagClass);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1E0C9A0C0]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E67F5518();
}

void operator delete(void *__p)
{
  off_1E67F5520(__p);
}

uint64_t operator delete()
{
  return off_1E67F5528();
}

uint64_t operator new[]()
{
  return off_1E67F5530();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E67F5538(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E67F5540(__sz, a2);
}

uint64_t operator new()
{
  return off_1E67F5548();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_activity_initiate(void *dso, const char *description, os_activity_flag_t flags, os_block_t activity_block)
{
  MEMORY[0x1E0C80FD0](dso, description, *(_QWORD *)&flags, activity_block);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1E0C82EF8]();
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1E0C843E0](*(_QWORD *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1E0C843F0](*(_QWORD *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1E0DE7FF8](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1E0DE80B0](p);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int32_t u_strcmp(const UChar *s1, const UChar *s2)
{
  return MEMORY[0x1E0DE5AE0](s1, s2);
}

uint64_t ucal_getCanonicalTimeZoneID()
{
  return MEMORY[0x1E0DE5D48]();
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

